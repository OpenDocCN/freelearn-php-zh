- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在帮助学生学习书中现有的活动。它包括学生为完成和实现本书目标而要执行的详细步骤。
- en: 1\. Introducing PHP
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. PHP简介
- en: 'Activity 1.1: Displaying Query Strings in the Browser'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.1：在浏览器中显示查询字符串
- en: '**Solution**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a file named `movies.php`.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`movies.php`的文件。
- en: 'Capture query string data in the file to store the details of the movies, such
    as the name, the actors, and the release years:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中捕获查询字符串数据以存储电影的详细信息，例如名称、演员和发行年份：
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a basic HTML structure and then display the captured query strings:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基本的HTML结构，然后显示捕获的查询字符串：
- en: '[PRE1]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, go to the Terminal and type the following command to start the built-in
    web server:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到终端并输入以下命令以启动内置Web服务器：
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see a screen like the following:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下屏幕：
- en: '![Figure 1.17: Starting the server'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图1.17：启动服务器'
- en: '](img/C14196_01_17.jpg)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_01_17.jpg)'
- en: 'Figure 1.17: Starting the server'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.17：启动服务器
- en: 'After the web server is up and running, open the PHP page and append your query
    strings to the URL in your browser:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web服务器启动并运行后，打开PHP页面，并在浏览器中的URL后附加您的查询字符串：
- en: '`http://localhost:8085/movies.php?movieName=Avengers&movieStar=IronMan&movieYear=2019`'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8085/movies.php?movieName=Avengers&movieStar=IronMan&movieYear=2019`'
- en: You can change the values to anything you like to see how they will be displayed
    in the browser.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以将值更改为任何你喜欢的，以查看它们在浏览器中的显示方式。
- en: 'You should see a screen like the following:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下屏幕：
- en: '![Figure 1.18: Printing the information about the movie'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.18：打印电影信息'
- en: '](img/C14196_01_18.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14196_01_18.jpg)'
- en: 'Figure 1.18: Printing the information about the movie'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18：打印电影信息
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ensure that the port you have specified is not being used by any other application
    on your system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您指定的端口没有被系统上的其他应用程序使用。
- en: Depending on the last few exercises, you should now be aware of how this code
    is working. Let's go through the query string and code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据最后的几个练习，你现在应该知道这段代码是如何工作的。让我们来分析一下查询字符串和代码。
- en: The query string this time is `movieName=Avengers&movieStar=IronMan&movieYear=2019`.
    This means that the `$_GET` variable in PHP will have access to three different
    variables now, which are `movieName`, `movieStar`, and `movieYear`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这次查询字符串是`movieName=Avengers&movieStar=IronMan&movieYear=2019`。这意味着PHP中的`$_GET`变量现在可以访问三个不同的变量，分别是`movieName`、`movieStar`和`movieYear`。
- en: In the first three lines of code, we are extracting values for `movieName`,
    `movieStar`, and `movieYear` and assigning them to the `$name`, `$star`, and `$year`
    variables, respectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三行代码中，我们正在提取`movieName`、`movieStar`和`movieYear`的值，并将它们分别赋值给`$name`、`$star`和`$year`变量。
- en: In the head section of HTML, we have a title. Inside it, we have used the `echo`
    statement to print the movie name, which will appear in the browser. Moving further
    down, we have an `h1` element where we are printing the name again. After the
    `h1` element is a `p` element, where we are creating a sentence dynamically. We
    have used the variables and the dot operator (`.`) to append different strings
    and variables to create a full sentence.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML的头部部分，我们有一个标题。在其中，我们使用了`echo`语句来打印电影名称，它将在浏览器中显示。进一步向下，我们有一个`h1`元素，我们在其中再次打印名称。在`h1`元素之后是一个`p`元素，我们在其中创建一个动态句子。我们使用了变量和点操作符（`.`）来附加不同的字符串和变量，以创建完整的句子。
- en: 2\. Types and Operators
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 类型与运算符
- en: 'Activity 2.1: Printing the BMI of a User'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动2.1：打印用户的BMI
- en: '**Solution**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'Create a new file called `tracker.php`. Then, open PHP and create a variable
    to store the name. You can assign a value directly, in other words, `$name = ''Joe''`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tracker.php`的新文件。然后，在PHP中创建一个变量来存储名称。你可以直接赋值，也就是说，`$name = 'Joe'`：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add variables for the weight and height; again, set a default value:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加体重和身高的变量；再次设置默认值：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Take the `$heightCm` variable, convert it to meters by dividing by `100`, and
    then store the result:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`$heightCm`变量除以`100`将其转换为米，并将结果存储：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Square the height and store the result:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平方身高并存储结果：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Calculate the BMI by taking the weight and dividing it by the squared height:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将体重除以身高的平方来计算BMI：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Display a message to the user showing the name and BMI result:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户显示一条消息，显示名称和BMI结果：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the Terminal/Command Prompt and navigate to your `chapter2` folder or
    where you stored `tracker.php`. Run the server by typing in this command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端/命令提示符，导航到你的`chapter2`文件夹或存储`tracker.php`的位置。通过输入以下命令来运行服务器：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, in a browser, go to `http://localhost:8085/tracker.php`.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在浏览器中，转到`http://localhost:8085/tracker.php`。
- en: 'You will see the following output:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 2.11: Printing the BMI'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图2.11：打印BMI'
- en: '](img/C14196_02_11.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_02_11.jpg)'
- en: 'Figure 2.11: Printing the BMI'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：打印BMI
- en: In this activity, we've looked at assigning data to variables and performing
    calculations (divisions and multiplications). Then, we printed the end result
    to the screen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们学习了如何将数据赋值给变量并执行计算（除法和乘法）。然后，我们将最终结果打印到屏幕上。
- en: 3\. Control Statements
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 控制语句
- en: 'Activity 3.1: Creating a Movie Listing Script to Print Movies per Director'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动三.1：创建一个按导演打印电影的列表脚本
- en: '**Solution**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The steps to complete the activity are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完成活动的步骤如下：
- en: 'Create an `activity-movies.php` script and add the following nested array,
    which contains five directors with a list of the five movies associated with them:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`activity-movies.php`脚本，并添加以下嵌套数组，其中包含五个导演及其相关的五个电影列表：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we have an associative array, `$directors`, which contains five directors'
    names and each director is used as a key for the array. Also, each director's
    key has been assigned another associative array that contains five movie names.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们有一个关联数组`$directors`，它包含五个导演的姓名，每个导演都用作数组的键。此外，每个导演的键都分配了另一个关联数组，该数组包含五个电影名称。
- en: 'Using our previous knowledge of nested looping, loop through the nested array
    using two `foreach` loops, as follows. As in the following, add the loops after
    the `$directors` array:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前关于嵌套循环的知识，使用两个`foreach`循环遍历嵌套数组，如下所示。正如以下所示，在`$directors`数组之后添加循环：
- en: '[PRE11]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding example, we have a simple looping through a nested array. Since
    a `foreach` loop is a good choice to iterate through associative arrays, we have
    utilized `foreach` in both the inner and outer loop to print a formatted director's
    name along with the movies they directed on each new line.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有一个简单的嵌套数组的循环。由于`foreach`循环是遍历关联数组的良好选择，我们在内循环和外循环中都使用了`foreach`来打印格式化的导演姓名以及他们执导的电影，每行一个。
- en: 'Run the PHP file from a Terminal or console with the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端或控制台运行PHP文件：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command outputs the following:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令输出了以下内容：
- en: '![Figure 3.21: The activity movies script output with default arguments'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.21：使用默认参数的活动电影脚本输出'
- en: '](img/C14196_03_21.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_03_21.jpg)'
- en: 'Figure 3.21: The activity movies script output with default arguments'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.21：使用默认参数的活动电影脚本输出
- en: The nested `foreach` loops do their job and iterate through the nested array
    to print the available movie names against the directors' names.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嵌套的`foreach`循环完成了它们的工作，遍历嵌套数组以打印导演名称对应的可用电影名称。
- en: 'Now, it''s time to add some dynamic behavior to our looping technique so that
    we can control the iterations in both loops with command-line arguments. This
    means we will be taking two arguments from the command line, as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候给我们的循环技术添加一些动态行为，以便我们可以通过命令行参数控制两个循环的迭代次数。这意味着我们将从命令行获取两个参数，如下所示：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the script name itself is an argument for a `php` command, hence, the
    first, second, and third arguments are `activity-movies.php`, `3`, and `2` respectively.
    The second argument should control the number of directors to iterate and the
    third argument should control the number of movies to iterate.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，脚本名称本身是`php`命令的一个参数，因此，第一个、第二个和第三个参数分别是`activity-movies.php`、`3`和`2`。第二个参数应该控制迭代的导演数量，第三个参数应该控制迭代的电影数量。
- en: Command-line arguments can be obtained using the `$argv` system variable, so
    we will be using `$argv[1]` and `$argv[2]` for the second and third arguments.
    Note that `$argv[0]` is the script name in this case.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用系统变量`$argv`获取命令行参数，因此我们将使用`$argv[1]`和`$argv[2]`作为第二个和第三个参数。请注意，在这种情况下`$argv[0]`是脚本名称。
- en: 'Add the following lines at the beginning of the script to add the command-line
    arguments:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本的开头添加以下行以添加命令行参数：
- en: '[PRE14]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `??`, the null coalescing operator, has been used so that if `$argv[1]`
    or `$argv[2]` does not exist or is `NULL`, then we can assign a default number
    5 to the `$directorsLimit` and `$moviesLimit` limit variables.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里使用了`??`，空合并运算符，以便如果`$argv[1]`或`$argv[2]`不存在或为`NULL`，则可以将默认数字5分配给`$directorsLimit`和`$moviesLimit`限制变量。
- en: 'Now we need to add two counters that will count the directors and movies to
    print so that we can maintain the number of directors and movies to print, supplied
    in the form of command-line arguments. Let''s add the counters and the control
    statements to restrict the prints so that the nested loops look like the following:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加两个计数器，用于计算要打印的导演和电影数量，以便我们可以维护以命令行参数形式提供的导演和电影数量。让我们添加计数器和控制语句，以便嵌套循环看起来如下：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we have added `$directorsCounter` before the outer loop and `$moviesCounter`
    before the inner loop. Both of them start counting from `1` and immediately inside
    the loops we have checked whether the directors or movies exceed the limits given
    in `$directorsLimit` and `$moviesLimit` respectively. If any of the counters become
    greater than their limit, we terminate the iteration using the `break` command.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们在外循环之前添加了`$directorsCounter`，在内循环之前添加了`$moviesCounter`。它们都从`1`开始计数，并在循环内部立即检查导演或电影是否超过了`$directorsLimit`和`$moviesLimit`分别给出的限制。如果任何一个计数器超过了其限制，我们将使用`break`命令终止迭代。
- en: At the beginning of each loop, we have used a condition expression in the `if`
    control to check that the counter doesn't exceed the limit, and at the very end
    of each loop, the corresponding counter gets incremented.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在每个循环的开始，我们使用`if`控制中的条件表达式检查计数器是否不超过限制，并且在每个循环的末尾，相应的计数器会递增。
- en: Note
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The final file can be referred at: [https://packt.live/35QfYnp](https://packt.live/35QfYnp).'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终文件可以参考：[https://packt.live/35QfYnp](https://packt.live/35QfYnp)。
- en: 'Now run the following command to see the `directors` and `movies` arguments
    in action:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令以查看`directors`和`movies`参数的实际效果：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command should print one movie from each of the two directors,
    as follows:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令应该打印出两位导演各自的一部电影，如下所示：
- en: '![Figure 3.22: The activity movies script output with custom arguments'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.22：带有自定义参数的活动电影脚本输出](img/C14196_03_22.jpg)'
- en: '](img/C14196_03_22.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_03_23.jpg)'
- en: 'Figure 3.22: The activity movies script output with custom arguments'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.22：带有自定义参数的活动电影脚本输出
- en: Test the preceding script with different arguments; that is, `php activity-movies.php
    2 3`. As we have already assigned the default limit value to 5 in the limit variables,
    if no arguments are present in the command; that is, `php activity-movies.php`,
    it will complete all iterations to loop through the array elements.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同的参数测试前面的脚本；即`php activity-movies.php 2 3`。因为我们已经将默认限制值分配给限制变量，如果没有命令中的参数；即`php
    activity-movies.php`，它将完成所有迭代以循环遍历数组元素。
- en: 'We can also try passing only the `directors` limit argument so that the `movies`
    limit stays at the default limit of 5\. The following command will output all
    of the movies from the given number of directors:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以尝试只传递`directors`限制参数，这样`movies`限制就保持在默认的5个限制。以下命令将输出给定数量导演的所有电影：
- en: '[PRE17]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output is as follows:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 3.23: The activity movies script output with the first argument'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.23：带有第一个参数的活动电影脚本输出](img/C14196_03_22.jpg)'
- en: '](img/C14196_03_23.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_03_23.jpg)'
- en: 'Figure 3.23: The activity movies script output with the first argument'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23：带有第一个参数的活动电影脚本输出
- en: Congratulations! You have used control statements and looping techniques to
    create a dynamic script that works based on command-line arguments. *Control structures
    are used to control the execution of a program*, hence we can leverage such structures
    to make decisions about things such as which branch of code to execute, to perform
    repetitive executions, to control the flow of iterations, and so on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经使用了控制语句和循环技术来创建一个基于命令行参数的动态脚本。*控制结构用于控制程序的执行*，因此我们可以利用这样的结构来做出决定，比如执行哪个代码分支，执行重复执行，控制迭代流程等等。
- en: 4\. Functions
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 函数
- en: 'Activity 4.1: Creating a Calculator'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动4.1：创建计算器
- en: '**Solution**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a new file within the `Chapter04` directory with the name `activity.php`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter04`目录内创建一个名为`activity.php`的新文件。
- en: 'Start your script with the opening PHP tag and set the strict type to `1`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以PHP开头标签开始你的脚本，并将严格类型设置为`1`：
- en: '[PRE18]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we can start by writing our `factorial` function in the same file:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以开始在这个文件中编写我们的`factorial`函数：
- en: '[PRE19]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let me explain what the function does. First of all, it takes an integer argument;
    we can be sure that it will always be an integer because we added a type hint
    and declared that we are using strict types. There are several ways in which you
    may have implemented the function, so don't let my solution put you off.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我来解释这个函数的作用。首先，它接受一个整数参数；我们可以确信它始终是一个整数，因为我们添加了类型提示并声明了我们在使用严格类型。你可以用几种方式实现这个函数，所以不要让我的解决方案让你感到沮丧。
- en: My take on it is that the first number in the calculation will have to be the
    input number – we store it in `$factorial`, which is the variable we will use
    to hold the result. Then, it is multiplied by `$number - 1`. This goes on until
    `$number === 2;`. The `while` condition runs for the last time when `$number`
    has become `3`; it will then be decremented by `1` and multiplied with the `$factorial`
    variable. By the end, `$factorial` contains the result and is returned from the
    function.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我对它的看法是，计算中的第一个数字必须是输入数字——我们将其存储在`$factorial`中，这是我们用来保存结果的变量。然后，它乘以`$number
    - 1`。这个过程一直持续到`$number === 2`；当`$number`变成`3`时，`while`条件将最后一次运行；然后它将减去`1`并与`$factorial`变量相乘。最终，`$factorial`包含结果并从函数中返回。
- en: Instead of `$number--;` using the post decrement operator, `--`, we could have
    written `$number = $number -1;`. Some people consider the latter to be a better
    practice because it is more explicit. I sometimes prefer to use the handy shortcuts
    that PHP has to offer. Because `$number--` is on its own line as a single statement,
    we could have also written `--$number`. In this case, there is no difference.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与使用后递减运算符`$number--;`相比，我们可以写成`$number = $number -1;`。有些人认为后者是一种更好的实践，因为它更明确。我有时更喜欢使用PHP提供的便捷快捷方式。因为`$number--`是一个单独的语句，我们也可以写成`--$number`。在这种情况下，两者没有区别。
- en: The difference between the two operators is that with `--$number`, `$number`
    will be decremented before the statement runs, and with `$number--`, it will be
    decremented after the statement has been evaluated. In this case, there is no
    consequence of that difference.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个运算符之间的区别在于，使用`--$number`时，`$number`将在语句运行之前递减，而使用`$number--`时，它将在语句评估之后递减。在这种情况下，这种差异没有后果。
- en: 'Next, we will define the `sum` function as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`sum`函数如下：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'While we could have just looped over `func_get_args();` and added all the numbers
    together to get the sum, there is already a built-in function in PHP that does
    just that. So, why not use it? That is what `array_sum` does: it adds up all the
    numbers in the input array you give it. The `return` keyword makes the function
    return the result.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们可以直接循环遍历`func_get_args();`并将所有数字相加得到总和，但PHP中已经有一个内置函数可以做到这一点。所以，为什么不使用它呢？这就是`array_sum`的作用：它将你给出的输入数组中的所有数字相加。`return`关键字使函数返回结果。
- en: If you wanted to validate each parameter to check whether it was numeric (using
    `is_numeric`), then looping over the arguments would have been better because
    you would do the check in the same iteration as the addition and throw an exception
    when the argument wasn't numeric.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要验证每个参数以检查它是否为数字（使用`is_numeric`），那么循环遍历参数会更好，因为你在相同的迭代中执行检查，并在参数不是数字时抛出异常。
- en: 'The last mathematical function we will define is the `prime` function:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要定义的最后一个数学函数是`prime`函数：
- en: '[PRE21]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `prime` function is definitely the most challenging of them all. The naive
    implementation would just try to determine the modulo of the `$number` input by
    all values that are smaller: when the modulo is `0`, then it is not a prime number.
    However, it has already been proven that you only have to check all the numbers
    up to the square root of the input. In fact, you could check even fewer numbers,
    but we have not gone as far as that.'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`prime`函数无疑是所有函数中最具挑战性的。直观的实现只是尝试确定`$number`输入与所有较小值的模：当模为`0`时，它不是素数。然而，已经证明你只需要检查输入的平方根以下的数字。实际上，你可以检查更少的数字，但我们还没有做到这一点。'
- en: Now we know 1 is not a prime number so, if the number that is passed through
    is 1 then we return `false` early. This also rules out 0 and negative numbers.
    Prime numbers are positive by definition. Then, starting with 2, up until the
    square root of the `$number` input, we increment `$i` by 1 and check whether the
    modulo of the division of `$number` by `$i` is 0\. If it is, `$number` is not
    a prime number and we again return `false` early. The modulo operator is written
    as `%` (the percentage symbol). In other words, when the `$number` modulo `$i`
    equals 0, `$number` is divisible by `$i`, and since `$i` is not equal to 1 and
    not equal to `$number`, `$number` is not a prime number.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们知道1不是一个质数，所以如果传入的数字是1，我们就提前返回`false`。这也排除了0和负数。根据定义，质数是正数。然后，从2开始，直到`$number`的平方根，我们每次将`$i`增加1，并检查`$number`除以`$i`的余数是否为0。如果是，`$number`不是质数，我们再次提前返回`false`。模运算符写作`%`（百分比符号）。换句话说，当`$number`对`$i`取模等于0时，`$number`可以被`$i`整除，并且由于`$i`不等于1也不等于`$number`，所以`$number`不是质数。
- en: 'Our last major function that we will define is the `performOperation` function:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要定义的最后一个主要函数是`performOperation`函数：
- en: '[PRE22]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This function just switches between the three other functions based on the `$operation`
    case you give it as its first argument. Since one of the functions it delegates
    its work to accepts a varying amount of arguments, `performOperation` also has
    to accept a varying number of arguments.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数只是根据你作为其第一个参数给出的`$operation`情况在三个其他函数之间切换。由于它委托工作的其中一个函数接受可变数量的参数，`performOperation`也必须接受可变数量的参数。
- en: You could also choose an implementation where you let `performOperation` have
    a second parameter, `$number`, which can then be passed exactly as it is to both
    factorial and prime. In that case, you only query `func_get_args` in the case
    of the `sum` operation. The approach you choose is not only a matter of taste,
    but also of performance. It is faster not to use `func_get_args()`, so the alternative
    approach would definitely be the fastest.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以选择一个实现，让`performOperation`有一个名为`$number`的第二个参数，然后可以将其原样传递给阶乘和质数。在这种情况下，你只有在`sum`操作的情况下查询`func_get_args`。你选择的方法不仅是一个口味问题，也是一个性能问题。不使用`func_get_args()`会更快，所以替代方法肯定是最快的。
- en: 'Print the output as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式打印输出：
- en: '[PRE23]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is the output:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 4.18: Printing the results'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图4.18：打印结果'
- en: '](img/C14196_04_18.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图4.18：打印结果](img/C14196_04_18.jpg)'
- en: 'Figure 4.18: Printing the results'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.18：打印结果
- en: 5\. Object-Oriented Programming
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 面向对象编程
- en: 'Activity 5.1: Building a Student and Professor Object Relationship'
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.1：构建学生和教授对象关系
- en: '**Solution**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The steps to complete the activity are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 完成活动的步骤如下：
- en: Create a directory named `activity1` to put all our activity content in it.
    This should be our working directory (you can `cd` to the directory).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`activity1`的目录，将所有活动内容放入其中。这应该是我们的工作目录（你可以使用`cd`命令进入该目录）。
- en: Create a directory named `Student` inside the `activity1` directory to put the
    namespaced `Student` class in it.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity1`目录下创建一个名为`Student`的目录，将命名空间为`Student`的类放入其中。
- en: Create a PHP file called `Student.php` inside the `Student` directory.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Student`目录下创建一个名为`Student.php`的PHP文件。
- en: 'Declare a `Student` class where the `Student` class has been namespaced as
    `Student` and has two member attributes, `$name` and `$title`, which are `student`
    by default. The constructor method accepts the student''s name as an argument.
    The argument is hinted with its desired type as `string` (anything other than
    `string` will produce an error) and assigns it to the `$name` property using `$this->name`.
    So, whenever we instantiate the `Student` class, we should call the class by its
    namespace, such as the new `Student\Student(''Student Name'')` namespace:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`Student`类，其中`Student`类已经被命名空间为`Student`，并且有两个成员属性，`$name`和`$title`，默认为`student`。构造函数接受学生的名字作为参数。参数通过其期望的类型`string`（任何非字符串都会产生错误）进行提示，并使用`$this->name`将其分配给`$name`属性。所以，每次我们实例化`Student`类时，我们应该通过其命名空间调用类，例如新的`Student\Student('Student
    Name')`命名空间：
- en: '[PRE24]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: For the professor, create a directory called `Professor` under the `activity1`
    directory.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于教授，在`activity1`目录下创建一个名为`Professor`的目录。
- en: Inside the `Professor` directory, create a PHP file called `Professor.php`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Professor`目录下，创建一个名为`Professor.php`的PHP文件。
- en: 'Declare the `Professor` class with the `Professor` namespace at `Professor.php`.
    The `Professor` class is similar to `Student` but with an extra private attribute,
    `$students`, which will hold an array of students. The `$students` array is kept
    private so that the students'' list can''t be accessed outside of the `Professor`
    class. The default title for a professor is `Prof.`, which has been assigned in
    the `$title` attribute. The constructor accepts hinted parameters, a name (accepts
    strings only), and the students (accepts arrays only) list as two arguments, and
    the first parameter, `$name`, has been assigned to the `$name` property using
    `$this->name`. We are using parameter type hints to ensure that no other types
    are passed:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Professor.php`中声明带有`Professor`命名空间的`Professor`类。`Professor`类与`Student`类类似，但有一个额外的私有属性`$students`，该属性将保存学生数组。`$students`数组被保留为私有，这样学生名单就不能在`Professor`类外部访问。教授的默认标题为`Prof.`，已在`$title`属性中分配。构造函数接受提示参数，一个名称（仅接受字符串）和学生（仅接受数组）列表作为两个参数，第一个参数`$name`已使用`$this->name`分配给`$name`属性。我们使用参数类型提示以确保不传递其他类型：
- en: '[PRE25]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Also, we will use the instance of the `Student` class within the `Professor`
    namespace, so we need to import the `Student` class via the `Student` namespace
    in `Professor.php`, as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们将在`Professor`命名空间内使用`Student`类的实例，因此我们需要在`Professor.php`中通过`Student`命名空间导入`Student`类，如下所示：
- en: '[PRE26]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, after the `Professor` namespace declaration, we have imported the `Student`
    class via its `Student` namespace.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，在`Professor`命名空间声明之后，我们通过`Student`命名空间导入了`Student`类，如下所示：
- en: We need to iterate through the array of students and check each of the objects
    – whether it is an instance of the `Student` class or not. If it is a valid student,
    then add it to the professor's `$students` array.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要遍历学生数组并检查每个对象——是否是`Student`类的实例。如果是有效的学生，则将其添加到教授的`$students`数组中。
- en: 'Add the following filtration in the `Professor` constructor for `$students`:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Professor`构造函数中添加以下对`$students`的过滤：
- en: '[PRE27]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we have iterated through `$students` using a `foreach` loop and, inside,
    checked whether `$student` is an instance of the `Student` class, then added it
    to the `$this->students` array. So, only valid students can be added to the professor's
    student list.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用`foreach`循环遍历`$students`，并在循环内部检查`$student`是否是`Student`类的实例，然后将其添加到`$this->students`数组中。因此，只有有效的学生才能被添加到教授的学生名单中。
- en: 'Now, add the following setter method in the `Professor` class in order to set
    the title:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Professor`类中添加以下setter方法以设置标题：
- en: '[PRE28]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This one should be used to set the professor's title. If a professor is a `Ph.D.`,
    then we set the title as `Dr.`.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法应用于设置教授的标题。如果教授是`Ph.D.`，则我们将标题设置为`Dr.`。
- en: 'Create a member method, `printStudents()`, as follows, in the `Professor` class,
    which will print the professor''s title, name, the student count, and the list
    of students in the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Professor`类中创建一个成员方法`printStudents()`，如下所示，该方法将打印教授的标题、姓名、学生数量以及以下学生列表：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, we have printed the professor's title, name, and the number of students.
    Again, we have used a `foreach` loop to iterate through the professor's private
    property, `$students`, and inside the loop we have printed each student's name.
    Also, for the sake of maintaining a serial order of the students, we have used
    the `$serial` variable starting from `1`, which increments by one after each iteration
    in order to add a number before each student's name while printing.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们打印了教授的标题、姓名和学生的数量。同样，我们使用`foreach`循环遍历教授的私有属性`$students`，并在循环内部打印每个学生的姓名。此外，为了保持学生的序列顺序，我们使用了从`1`开始的`$serial`变量，每次迭代后增加一，以便在打印每个学生姓名前添加一个数字。
- en: Create a PHP file called `activity-classes.php` inside the `activity1` directory.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity1`目录内创建一个名为`activity-classes.php`的PHP文件。
- en: 'Add the `spl_autoload_register()` function at the beginning of the file to
    load the `Professor` and `Student` classes automatically according to their namespaces:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件开头添加`spl_autoload_register()`函数以自动根据它们的命名空间加载`Professor`和`Student`类：
- en: '[PRE30]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we haven't registered any class loader methods in the `spl_autoload_register()`
    function; rather, we have kept it as the default to load the classes according
    to their namespaces.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`spl_autoload_register()`函数中，我们尚未注册任何类加载方法；相反，我们保留为默认设置，根据它们的命名空间加载类。
- en: 'Create a `Professor` instance, providing a name and a list of students that
    contains instances of `Student` in the constructor as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Professor`实例，提供一个名称和一个包含`Student`实例的学生列表，如下所示：
- en: '[PRE31]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we have added a random amount of `Student` instances in an array and passed
    them to the `Professor` constructor. When we instantiate the `Professor` class
    as `new` `Professor\Professor()`, this namespaced class name tells the auto loader
    to load the `Professor` class from the `Professor` directory. This same namespaced
    class' loading technique is applied to the `Student` class as well. The new `Student\Student()`
    namespace tells the autoloader to expect the `Student` class in the `Student`
    directory.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们向数组中添加了随机数量的`Student`实例，并将它们传递给`Professor`构造函数。当我们以`new Professor\Professor()`的形式实例化`Professor`类时，这个命名空间类名告诉自动加载器从`Professor`目录加载`Professor`类。同样，这个命名空间类的加载技术也应用于`Student`类。新的`Student\Student()`命名空间告诉自动加载器在`Student`目录中期望`Student`类。
- en: 'Now, change the professor''s title to `Dr.` using the corresponding setter
    method, as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用相应的setter方法将教授的头衔更改为`Dr.`，如下所示：
- en: '[PRE32]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Print the output by invoking the `printStudents()` method with the `Professor`
    object:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`printStudents()`方法并使用`Professor`对象来打印输出：
- en: '[PRE33]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, the `activity-classes.php` looks like:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，`activity-classes.php`看起来如下：
- en: '[PRE34]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the PHP script using the following command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行PHP脚本：
- en: '[PRE35]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output should look like the following:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该看起来像以下这样：
- en: '![Figure 5.30: Professor’s students list'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.30：教授的学生名单]'
- en: '](img/C14196_05_30.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.30：教授的学生名单](img/C14196_05_30.jpg)'
- en: 'Figure 5.30: Professor''s students list'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.30：教授的学生名单
- en: We have successfully obtained a list of a professor's students using OOP techniques.
    In this activity, we have practiced class attributes, access modifiers, methods,
    class declaration, class namespacing, object instantiation, autoloading namespaced
    classes, type hints in parameters, and object filtration using `instanceof`, and
    so on.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功使用面向对象技术获取了一位教授的学生名单。在这个活动中，我们练习了类属性、访问修饰符、方法、类声明、类命名空间、对象实例化、自动加载命名空间类、参数中的类型提示以及使用`instanceof`的对象过滤等。
- en: 6\. Using HTTP
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 使用HTTP
- en: 'Activity 6.1: Creating a Support Contact Form'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动练习6.1：创建一个支持联系表单
- en: '**Solution**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'The first thing that pops out is the login handling difference since we now
    have to authenticate random users, not just a single one. So, we will need a method
    to fetch the user data for the username that is being logged in. The method will
    return user data for the existing user (using the `level` and `password` hashes),
    or `NULL` if the user is not found. Since we will learn about databases in the
    next chapter, we will store the available user list in code, in the same way as
    the previous exercise:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先跳出的就是登录处理的不同之处，因为我们现在需要验证随机用户，而不仅仅是单个用户。因此，我们需要一个方法来获取正在登录的用户名对应的数据。该方法将为现有用户返回用户数据（使用`level`和`password`散列），如果用户未找到，则返回`NULL`。由于我们将在下一章学习数据库，我们将以与之前练习相同的方式在代码中存储可用的用户列表：
- en: '[PRE36]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, the `\Handlers\Login::handle()` method will slightly change the way it
    validates the authentication and the stored data in the user session. First, if
    we get user data for the provided username, this means we have a valid user from
    our *database*, and we can proceed further. The password match is performed as
    usual and, if we get a match, then we can proceed by adding the username and user
    data in the session. In the case of any failure (such as fetching the user from
    the *database* or a password match), we should prepare the errors that will be
    displayed in the HTML form:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`\Handlers\Login::handle()`方法将稍微改变验证认证和用户会话中存储数据的方式。首先，如果我们为提供的用户名获取了用户数据，这意味着我们有一个有效的用户来自我们的*数据库*，我们可以继续下一步。密码匹配按常规进行，如果匹配成功，则我们可以通过在会话中添加用户名和用户数据来继续。在发生任何失败（如从*数据库*中获取用户或密码匹配失败）的情况下，我们应该准备将在HTML表单中显示的错误：
- en: '[PRE37]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For convenience, generate password hash with command line `using php -r "echo
    password_hash('admin', PASSWORD_BCRYPT);"` command
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了方便起见，使用命令行`using php -r "echo password_hash('admin', PASSWORD_BCRYPT);"`命令生成密码散列
- en: 'The login form doesn''t require any changes; let''s just remove the credentials
    hint for the `admin` user, under the `Authenticate` form title:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录表单不需要任何更改；我们只需在`Authenticate`表单标题下删除`admin`用户的凭据提示：
- en: '[PRE38]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now the authentication part is covered. The user will be redirected to the `Profile`
    page after login, so they will have to see the layout presented previously.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在认证部分已经处理完毕。用户登录后将被重定向到`Profile`页面，因此他们将看到之前展示的布局。
- en: 'The `src/templates/profile.php` file will have to be rebuilt from scratch.
    First, let''s add the greetings and logout button part. While browsing Bootstrap''s
    framework documentation, we came across alerts component, and we saw we could
    use this component for our current purpose:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`src/templates/profile.php`文件需要从头开始重建。首先，让我们添加问候语和注销按钮部分。在浏览Bootstrap框架文档时，我们发现了警报组件，并看到我们可以使用此组件来完成当前目的：'
- en: '[PRE39]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we have to add the support area, and divide it horizontally into two
    equal parts:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加支持区域，并将其水平分为两个相等的部分：
- en: '[PRE40]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'To learn more about grid system in Bootstrap, please follow this link: [https://packt.live/31zF72E](https://packt.live/31zF72E).'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于Bootstrap中网格系统的信息，请点击此链接：[https://packt.live/31zF72E](https://packt.live/31zF72E)。
- en: 'We''ll use a support contact form with the following specifications: two inputs
    of type text, for the name and email, and a text area input for the message. Each
    of these will have an associated `<label>` element and, if there are any errors,
    they will have to be printed under the input with erroneous data:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下规格的支持联系表单：两个文本输入框，用于姓名和电子邮件，以及一个文本区域输入框用于消息。每个输入都将有一个相关的`<label>`元素，如果有任何错误，它们将打印在包含错误数据的输入下方：
- en: '[PRE41]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Since the standard-level user can only send the form once a day, trying to
    send more messages should result in an error message, which we may assign to the
    form level, and display it right on top of the form. Additionally, we may use
    the alert components again, this time using the `danger` red background:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于标准级别用户每天只能发送一次表单，尝试发送更多消息应该会显示错误消息，我们可以将其分配给表单级别，并直接在表单顶部显示。此外，我们还可以再次使用警报组件，这次使用`danger`红色背景：
- en: '[PRE42]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We also need to add the CSRF token to the form, for security purposes:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要为了安全起见，将CSRF令牌添加到表单中：
- en: '[PRE43]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'On the submit button, we may want to add more form data, so that we can know
    for sure what form we have to process in the PHP scripts; this is very useful
    when many forms are added on a single HTML page and each form is sending data
    to the same URL:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交按钮上，我们可能想要添加更多表单数据，这样我们就可以确定在PHP脚本中处理哪个表单；当单个HTML页面上添加多个表单且每个表单都向同一URL发送数据时，这非常有用：
- en: '[PRE44]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For the message list history, we may chose the `card` component, and print
    each of the message details. Each history entry will contain the form data (that
    is, the `form` key) and time when the form was sent (that is, the `timeAdded`
    key):'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于消息列表历史，我们可以选择`card`组件，并打印每条消息的详细信息。每个历史条目将包含表单数据（即`form`键）和表单发送的时间（即`timeAdded`键）：
- en: '[PRE45]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete code in `profile.php` can be referred at: [https://packt.live/2pvh0or](https://packt.live/2pvh0or).'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`profile.php`中的完整代码可以参考：[https://packt.live/2pvh0or](https://packt.live/2pvh0or)。
- en: 'Now that we have the layout ready, let''s proceed to the processing part in
    the `\Handlers\Profile` handler. First, what we have to add there is the processing
    form in the case of a `POST` request. The `processContactForm()` will return an
    array of errors when the form validation fails:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了布局，接下来让我们进入`\Handlers\Profile`处理器中的处理部分。首先，我们需要添加的是在`POST`请求情况下的处理表单。如果表单验证失败，`processContactForm()`将返回一个错误数组：
- en: '[PRE46]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If no errors are returned, it means that the form was validated and successfully
    saved; therefore, we can refresh the page.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有返回错误，这意味着表单已验证并成功保存；因此，我们可以刷新页面。
- en: '[PRE47]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The data we have to send in the template is the username (the greeting); the
    form errors, if any; the form CSRF token; and the sent form''s history:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中我们需要发送的数据是用户名（即问候语）；如果有，表单错误；表单CSRF令牌；以及发送的表单的历史记录：
- en: '[PRE48]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'So far, we have referred to three methods that do not exist yet. Let''s address
    them one by one, and start with `getCsrfToken()`. This method will return the
    CSRF token stored in the user session and, if it is not there, it will create
    and set one. To generate the token string, we can use the same approach we used
    in *Exercise 6.9,* *Securing against CSRF*:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经提到了三个尚不存在的方法。让我们逐一解决它们，首先是`getCsrfToken()`方法。此方法将返回存储在用户会话中的CSRF令牌，如果不存在，则创建并设置一个。为了生成令牌字符串，我们可以使用与*练习6.9*中相同的方法，*防止CSRF攻击*：
- en: '[PRE49]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `processContactForm()` method is returning a list of form errors, so it
    has to validate the data first. A call to the `validateForm()` method should return
    the form with sanitized data and the list of errors, if any:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`processContactForm()`方法返回表单错误列表，因此它必须首先验证数据。对`validateForm()`方法的调用应返回带有清理数据的表单以及错误列表（如果有）：'
- en: '[PRE50]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If the `$errors` array is empty, then save the sanitized form data with extra
    information, such as the added time and added date (which is useful for checking
    whether standard-level users have already added one message in the current day).
    Again, since data persistence will be explored in the next chapter, we will use
    the means we have to store the data, and we will use the ephemeral session storage
    in this case. The forms will be stored under the `sentForms` key; therefore, `$_SESSION[''sentForms'']`
    becomes the sent form''s history:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`$errors`数组为空，则保存经过清理的表单数据，并附加额外信息，例如添加的时间和日期（这对于检查标准级别用户是否已经在当天添加了一条消息很有用）。由于数据持久性将在下一章中探讨，我们将使用我们已有的方法来存储数据，在这种情况下，我们将使用临时会话存储。表单将存储在`sentForms`键下；因此，`$_SESSION['sentForms']`成为已发送表单的历史记录：
- en: '[PRE51]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `validateForm()` method will start by checking the CSRF token:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`validateForm()`方法将首先检查CSRF令牌：'
- en: '[PRE52]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, we check for multiple submissions in the case of standard-level users:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们检查标准级别用户的多重提交：
- en: '[PRE53]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The name validation requires a non-empty input as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名称验证需要非空输入如下：
- en: '[PRE54]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The email validation is performed using the `filter_var()` function with the
    `FILTER_VALIDATE_EMAIL` validation:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`filter_var()`函数和`FILTER_VALIDATE_EMAIL`验证执行电子邮件验证：
- en: '[PRE55]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The message validation requires a message of at least 40 characters in length:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息验证需要至少40个字符长度的消息：
- en: '[PRE56]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The sanitized form data is collected and stored in the `$form` variable, which
    is then returned with the `$errors` variable, as expected:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理后的表单数据被收集并存储在`$form`变量中，然后与预期的`$errors`变量一起返回：
- en: '[PRE57]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We referenced yet another method: `hasSentFormToday()`. This method requires
    the form history as the first parameter, and what it does is iterate through the
    history and check whether there is a message that is registered on the current
    day. As soon as one message is found, it will return `TRUE` immediately:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们引用了另一个方法：`hasSentFormToday()`。此方法需要表单历史记录作为第一个参数，它所做的是遍历历史记录并检查是否在当天注册了消息。一旦找到一条消息，它将立即返回`TRUE`：
- en: '[PRE58]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'What we have not covered yet is the `requestRefresh()` method. This method
    will call the `requestRedirect()` method providing the current request URI:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有介绍的是`requestRefresh()`方法。此方法将调用`requestRedirect()`方法，并提供当前请求URI：
- en: '[PRE59]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The final code in the handler Profile.php can be referred at: [https://packt.live/2VREaRY](https://packt.live/2VREaRY).'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理器Profile.php中的最终代码可以参考：[https://packt.live/2VREaRY](https://packt.live/2VREaRY)。
- en: 'Now we can test our full implementation. Access the Profile page at `http://127.0.0.1:8080/profile`:![Figure
    6.42: Authentication at the profile page'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以测试我们的完整实现。访问`http://127.0.0.1:8080/profile`的个人资料页面：![图6.42：个人资料页面的认证
- en: '](img/C14196_06_42.jpg)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_42.jpg)'
- en: 'Figure 6.42: Authentication at the profile page'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.42：个人资料页面的认证
- en: 'Let''s log in as a standard-level user by entering `user` for both `Username`
    and `Password`:![Figure 6.43: The login page'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们以标准级别用户身份登录，为`Username`和`Password`都输入`user`：![图6.43：登录页面
- en: '](img/C14196_06_43.jpg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_43.jpg)'
- en: 'Figure 6.43: The login page'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.43：登录页面
- en: We are redirected to the Profile page and we can see the HTML elements we have
    worked on so far.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们被重定向到个人资料页面，并可以看到我们迄今为止所工作的HTML元素。
- en: 'By sending an empty form, we should get all the inputs marked with errors:![Figure
    6.44: Sending an empty form'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发送一个空表单，我们应该得到所有带有错误标记的输入：![图6.44：发送空表单
- en: '](img/C14196_06_44.jpg)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_44.jpg)'
- en: 'Figure 6.44: Sending an empty form'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.44：发送空表单
- en: 'By entering `invalid@email` for our email, and a short sentence as a message,
    we should get another error, such as `Email address is invalid` or `The message
    is too short`:![Figure 6.45: Messages for invalid input'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为`Username`和`Password`都输入`invalid@email`，以及一个简短的句子作为消息，我们应该得到另一个错误，例如`电子邮件地址无效`或`消息太短`：![图6.45：无效输入的消息
- en: '](img/C14196_06_45.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_45.jpg)'
- en: 'Figure 6.45: Messages for invalid input'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.45：无效输入的消息
- en: 'Sending valid data should result in a successful form-saving operation, and
    a listing in the Send messages list:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送有效数据应导致成功保存表单操作，并在发送消息列表中进行列出：
- en: 'You could try this data:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以尝试以下数据：
- en: 'Name: Luigi'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 姓名：Luigi
- en: 'Email: `luigi@marionbros.mb`'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电子邮件：`luigi@marionbros.mb`
- en: 'Message: `I would like to be able to upload a profile picture. Do you consider
    adding this feature?`'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消息：`我希望能够上传个人头像。您考虑添加这个功能吗？`
- en: '![Figure 4.46: Displaying the list of the sent messages'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图4.46：显示已发送消息的列表'
- en: '](img/C14196_06_46.jpg)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_46.jpg)'
- en: 'Figure 4.46: Displaying the list of the sent messages'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.46：显示已发送消息的列表
- en: 'Trying to post more messages on the same day will result in an error:![Figure
    6.47: Posting more messages results in an error'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在同一天发布更多消息将导致错误：![图6.47：发布更多消息导致错误
- en: '](img/C14196_06_47.jpg)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_47.jpg)'
- en: 'Figure 6.47: Posting more messages results in an error'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.47：发布更多消息导致错误
- en: 'Let''s log out (to do this, click on the `Logout` button from the greeting
    header) and log in as a VIP-level user, using `vip` for `Username` and `Password`:![Figure
    6.48: Welcome message for a VIP user'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们注销（为此，点击问候头部的`注销`按钮）并以VIP级用户身份登录，使用`vip`作为`用户名`和`密码`：![图6.48：VIP用户的欢迎消息
- en: '](img/C14196_06_48.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_48.jpg)'
- en: 'Figure 6.48: Welcome message for a VIP user'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.48：VIP用户的欢迎消息
- en: 'Let''s add the first message:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加第一条消息：
- en: 'Name: Mario'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 姓名：马里奥
- en: 'Email: `mario@marionbros.mb`'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电子邮件：`mario@marionbros.mb`
- en: 'Message: `I would like to be able to upload a profile picture. Do you consider
    adding this feature?`'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消息：`我希望能够上传个人头像。您考虑添加这个功能吗？`
- en: '![Figure 6.49: Adding the first message'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.49：添加第一条消息'
- en: '](img/C14196_06_49.jpg)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_49.jpg)'
- en: 'Figure 6.49: Adding the first message'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.49：添加第一条消息
- en: It looks fine, as expected.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如预期的那样，看起来不错。
- en: 'Now, let''s try to add another message; this time, we should be able to add
    messages without any limitations:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试添加另一条消息；这次，我们应该能够无限制地添加消息：
- en: 'Name: Mario'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 姓名：马里奥
- en: 'Email: `mario@marionbros.mb`'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 电子邮件：`mario@marionbros.mb`
- en: 'Message: `Can I filter my order history by the payment method used to make
    the purchase?`'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消息：`我能否通过购买时使用的支付方式来过滤我的订单历史？`
- en: '![Figure 6.50: The output for adding messages without limitations'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.50：无限制添加消息的输出'
- en: '](img/C14196_06_50.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14196_06_50.jpg)'
- en: 'Figure 6.50: The output for adding messages without limitations'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.50：无限制添加消息的输出
- en: As you can see, we succeeded in adding another entry, as expected.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们成功添加了另一个条目，正如预期的那样。
- en: 7\. Data Persistence
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 数据持久性
- en: 'Activity 7.1: Contact Management Application'
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动7.1：联系管理应用程序
- en: '**Solution**'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Let's discuss the new or changed items, from the most uncoupled ones to the
    most complex ones.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论新或更改的项目，从最解耦的到最复杂的。
- en: 'A good start here is the `User` model class since this class will be invoked
    on every page for authenticated users; let''s put this file inside the `src/models/`
    directory:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这里一个好的开始是`User`模型类，因为这个类将在每个页面上为认证用户调用；让我们把这个文件放在`src/models/`目录里：
- en: Create the `src/models/User.php` file and add the following content.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`src/models/User.php`文件并添加以下内容。
- en: 'After declaring the namespace and imports (the `use` keyword), we define the
    properties of the `User` class, giving names similar to the column names of the
    `users` table from the database:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在声明命名空间和导入（`use`关键字）之后，我们定义`User`类的属性，给定的名称类似于数据库中`users`表的列名：
- en: '[PRE60]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Add the constructor method, which requires an input array that represents a
    record of the `users` table, and, for each class field, fetch the appropriate
    value from the input array; also add the getter methods:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加构造函数，该函数需要一个表示`users`表记录的输入数组，并且对于每个类字段，从输入数组中获取适当的值；还要添加getter方法：
- en: '[PRE61]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, add the method that will perform the password match, requiring the
    raw input value (the value submitted with the login form):'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个执行密码匹配的方法，需要原始输入值（与登录表单一起提交的值）：
- en: '[PRE62]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This class aims to be a representation of a database record from the `users`
    table. The `constructor` function will ensure that each field will get data of
    its own type. The following methods are simple getters, and the last method, `Users::passwordMatches()`,
    is a convenient way to validate the input passwords at login.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个类旨在表示`users`表中的数据库记录。`constructor`函数将确保每个字段都会得到其自己的数据类型。以下方法是简单的getter，而最后一个方法`Users::passwordMatches()`是验证登录时输入密码的便捷方式。
- en: Since the `User` entity is strongly related to the authentication mechanism,
    let's see what the `Auth` component would look like.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于`User`实体与认证机制紧密相关，让我们看看`Auth`组件会是什么样子。
- en: Create the `src/components/Auth.php` file.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`src/components/Auth.php`文件。
- en: 'Declare the namespace, the imports, and add the `userIsAuthenticated()` and
    `getLastLogin()` methods that return information for the current session, in the
    `Auth` class. Add the following in the `src/components/Auth.php` file:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明命名空间、导入，并在 `Auth` 类中添加返回当前会话信息的 `userIsAuthenticated()` 和 `getLastLogin()`
    方法。在 `src/components/Auth.php` 文件中添加以下内容：
- en: '[PRE63]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Add the methods that return the `User` instance, when the user is authenticated:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加在用户认证时返回 `User` 实例的方法：
- en: '[PRE64]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add the methods that modify the session state by authenticating or de-authenticating
    a user:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加通过认证或注销用户来修改会话状态的方法：
- en: '[PRE65]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Create the `src/components/Database.php` file and add the following content.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `src/components/Database.php` 文件并添加以下内容。
- en: 'Add the usual namespace declaration and imports:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加通常的命名空间声明和导入：
- en: '[PRE66]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Define the `Database` class and add the `construct` method. In `construct`
    is where you will instantiate the `PDO` object, establishing the database connection.
    To reuse the `PDO` object inside the `Database` class, you set it to the `$pdo`
    private field of the `Database` class:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `Database` 类并添加 `construct` 方法。在 `construct` 方法中，你将实例化 `PDO` 对象，建立数据库连接。为了在
    `Database` 类内部重用 `PDO` 对象，你将其设置为 `Database` 类的 `$pdo` 私有字段：
- en: '[PRE67]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add the `instance()` method to return the same instance of `Database` when
    this method is invoked (the singleton pattern):'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `instance()` 方法，当调用此方法时返回相同的 `Database` 实例（单例模式）：
- en: '[PRE68]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Next, let''s add `users` table-related methods, and let''s start with `addUser()`;
    this method would require the username and the raw password as input parameters,
    and the return value would be the `PDOStatement` instance. Prepared statements
    will be used for all queries that involve user input data:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加与 `users` 表相关的方 法，让我们从 `addUser()` 方法开始；此方法将需要用户名和原始密码作为输入参数，返回值将是
    `PDOStatement` 实例。对于所有涉及用户输入数据的查询，都将使用预处理语句：
- en: '[PRE69]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Note
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: It is advised to return the `PDOStatement` instance in this case, instead of
    Boolean `true`/`false` values, which indicate whether the operation succeeded,
    because the former can give more info in the event of a failed operation (for
    example, `PDOStatement::errorInfo()`).
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，建议返回 `PDOStatement` 实例，而不是布尔值 `true`/`false`，因为前者在操作失败时可以提供更多信息（例如，`PDOStatement::errorInfo()`）。
- en: 'Add the two methods that query for the user from the database – the `getUserByUsername()`
    and `getUserById()` methods. As their names suggest, one method requires a username,
    and the other a numerical ID. Both of them will return the `User` instance when
    the queried record exists, or `null` otherwise:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加查询数据库中用户的两个方法——`getUserByUsername()` 和 `getUserById()` 方法。正如它们的名称所暗示的，一个方法需要一个用户名，另一个需要一个数值
    ID。当查询的记录存在时，这两个方法都将返回 `User` 实例，否则返回 `null`：
- en: '[PRE70]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Notice the `if (stmt->execute() && ($data = $stmt->fetch(PDO::FETCH_ASSOC)))
    { /* ... */ }` expression. This is a combined expression that executes the evaluation-assignment-evaluation
    type of operations, and is identical to the following:'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到 `if (stmt->execute() && ($data = $stmt->fetch(PDO::FETCH_ASSOC))) { /* ...
    */ }` 这个表达式。这是一个执行评估-赋值-评估类型操作的组合表达式，并且与以下表达式相同：
- en: '[PRE71]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: While the latter block might look more readable, especially for beginner developers,
    the former expression might look cleaner, especially for seasoned developers.
    Both approaches are valid and, in the end, it's a matter of subjective preference.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然后者块可能看起来更易读，特别是对于初学者开发者来说，但前者表达式可能看起来更简洁，特别是对于经验丰富的开发者。两种方法都是有效的，最终，这取决于主观偏好。
- en: 'We are done with the `users` table; now, let''s add some contact table-related
    queries. Add the `getOwnContacts()` method, which requires the user ID for which
    the contacts list is fetched. The `PDOStatement` instance will be returned in
    this case as well, as in the case of queries that change the state of a database
    (`INSERT`/`UPDATE`/`DELETE`). This approach is preferred, rather than an array
    of entries, because it gives a greater degree of flexibility in terms of how the
    data is fetched from `PDOStatement` after it is returned – as an associative array,
    as an instance of a class, and so on. Also, in the case of big result sets, it
    helps to avoid high memory usage or script failure on account of exhausted memory.
    Iterating over a big result set, loading, and then discarding the records from
    memory one at a time, is an approach that''s way more friendly to memory usage
    than loading the entire result set in memory:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了 `users` 表的处理；现在，让我们添加一些与联系人表相关的查询。添加 `getOwnContacts()` 方法，该方法需要提供要检索联系人列表的用户
    ID。在这种情况下，也会返回 `PDOStatement` 实例，就像在更改数据库状态（`INSERT`/`UPDATE`/`DELETE`）的查询中一样。这种方法更受欢迎，因为它在从
    `PDOStatement` 返回数据时提供了更大的灵活性——可以作为关联数组、作为类的实例等。此外，在处理大型结果集时，它有助于避免因内存耗尽而导致的高内存使用或脚本失败。逐个迭代大型结果集、加载并丢弃记录，这种方法比将整个结果集加载到内存中更节省内存：
- en: '[PRE72]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Add the `getOwnContactById()` method, which is useful when one record is fetched
    to fill the Edit Contact form. This method requires two parameters, the user ID
    that owns the contact, and the contact ID. The returned value is an associative
    array, if the record was found, or `null` otherwise:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `getOwnContactById()` 方法，当需要从数据库中检索一条记录以填充编辑联系人表单时，此方法非常有用。此方法需要两个参数，即拥有联系人的用户
    ID 和联系人 ID。如果找到记录，则返回关联数组，否则返回 `null`：
- en: '[PRE73]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Add the `addContact()` method. This will require a list of parameters for each
    `contacts` table column, except the `id` column, the value of which is generated
    by MySQL. This method will return the `PDOStatement` instance:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `addContact()` 方法。此方法需要为 `contacts` 表的每一列提供一个参数列表，除了 `id` 列，其值由 MySQL 生成。此方法将返回
    `PDOStatement` 实例：
- en: '[PRE74]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add the `updateContact()` method. This is similar to the `addContact()` method,
    except for the fact that it also requires the contact ID, used to match the record
    to update, together with the user ID. This method will return the `PDOStatement`
    instance:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `updateContact()` 方法。此方法与 `addContact()` 方法类似，但还需要提供联系人 ID，用于匹配要更新的记录，以及用户
    ID。此方法将返回 `PDOStatement` 实例：
- en: '[PRE75]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Add the `deleteOwnContactById()` method, which requires the user ID that owns
    the contact, and the contact ID. The two input parameters will be used to match
    the record to be deleted. This method will return the `PDOStatement` instance:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `deleteOwnContactById()` 方法，需要提供拥有联系人的用户 ID 和联系人 ID。这两个输入参数将用于匹配要删除的记录。此方法将返回
    `PDOStatement` 实例：
- en: '[PRE76]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The `Router` component (`src/components/Router.php` file) will now cover the
    `/signup` and `/contacts` URIs as well. The highlighted part is the addition:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Router` 组件（`src/components/Router.php` 文件）现在将覆盖 `/signup` 和 `/contacts` URI。高亮部分是新增内容：'
- en: '[PRE77]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'In the case of the `''/''` route (home), a check for a currently authenticated
    user is performed and, in the event of a positive return, a redirect to `/profile`
    is requested. Otherwise, just return the `home` template:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `'/'` 路由（主页）的情况下，会执行当前认证用户的检查，如果返回值为正，则请求重定向到 `/profile`。否则，直接返回 `home` 模板：
- en: '[PRE78]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let''s check the new and modified handlers. First, let''s implement the Contacts
    page; this is the page that lists contacts and allows new entries to be added
    and existing ones to be edited. Create the `src/handlers/Contacts.php` file and
    add the following content. Declare the `Handlers` namespace and add the imports:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查新的和修改后的处理器。首先，让我们实现联系人页面；这是列出联系人并允许添加新条目和编辑现有条目的页面。创建 `src/handlers/Contacts.php`
    文件并添加以下内容。声明 `Handlers` 命名空间并添加导入：
- en: '[PRE79]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Add the `handle()` method, and start with an authentication check. If the user
    is not authenticated, then the login form is displayed; otherwise, the user is
    fetched:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `handle()` 方法，并从身份验证检查开始。如果用户未认证，则显示登录表单；否则，检索用户：
- en: '[PRE80]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Initialize the `$formError` and `$formData` variables as arrays; they will
    be used to collect useful info, such as the form data to fill in the HTML form,
    or error messages:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `$formError` 和 `$formData` 变量初始化为数组；它们将用于收集有用的信息，例如用于填充 HTML 表单的表单数据或错误消息：
- en: '[PRE81]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In the case of the `POST` HTTP method, process the form (call a separate method,
    to improve the readability of the current method). If no errors are returned,
    then redirect user to the Contacts page (refresh the page):'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `POST` HTTP 方法的情况下，处理表单（调用单独的方法，以提高当前方法的可读性）。如果没有返回错误，则将用户重定向到联系人页面（刷新页面）：
- en: '[PRE82]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'If the `edit` entry is found in a query string, then the form data will be
    the record from the database – a contact will be edited. The form data is rendered
    on the HTML page, on the Edit Contact form:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查询字符串中存在 `edit` 条目，则表单数据将是数据库中的记录——一个联系人将被编辑。表单数据在 HTML 页面的编辑联系人表单上呈现：
- en: '[PRE83]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'If the `delete` entry is found in a query string, then the record will be deleted
    and a redirect to the Contacts page (refresh page) will be performed:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查询字符串中存在 `delete` 条目，则记录将被删除，并将执行重定向到联系人页面（刷新页面）：
- en: '[PRE84]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the last part of the `handle()` method, the `contacts` template (the Contacts
    page) will be rendered, being provided with the data from the variables defined
    previously, and then returned:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `handle()` 方法的最后部分，将渲染 `contacts` 模板（联系人页面），提供之前定义的变量中的数据，然后返回：
- en: '[PRE85]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Implement the aforementioned `processForm()` method. In the first part, validate
    the input data as requested:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现上述的 `processForm()` 方法。在第一部分，按照要求验证输入数据：
- en: '[PRE86]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If the `$formErrors` array is empty, proceed with the contact update or insertion.
    To decide whether to insert a new record or to update the existing ones, the script
    will look for the ID parameter in the `POST` data, which will be the ID of the
    contact being edited. Finally, the `$formErrors` variable is returned:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `$formErrors` 数组为空，则继续更新联系人或插入新记录。为了决定是插入新记录还是更新现有记录，脚本将在 `POST` 数据中查找 ID
    参数，该参数将是正在编辑的联系人 ID。最后，返回 `$formErrors` 变量：
- en: '[PRE87]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The Sign up page: This page is for adding new users to the database. Create
    the `src/handlers/Signup.php` file and add the following content. Declare the
    `Handlers` namespace and add the imports. Add the Sign up class with the `handle()`
    method. This method will check whether the user is already authenticated, in which
    case they will be redirected to the Profile page. In the case of `POST` requests,
    they will call the `handleSignup()` method to deal with the `POST` data. Finally,
    return the rendered `signup-form` template, providing the requisite data:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册页面：此页面用于将新用户添加到数据库中。创建 `src/handlers/Signup.php` 文件，并添加以下内容。声明 `Handlers`
    命名空间并添加导入。添加带有 `handle()` 方法的注册类。此方法将检查用户是否已经认证，如果是，则将他们重定向到个人资料页面。在 `POST` 请求的情况下，它们将调用
    `handleSignup()` 方法来处理 `POST` 数据。最后，返回渲染的 `signup-form` 模板，提供所需的数据：
- en: '[PRE88]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Add the `handleSignup()` method in order to process the sign up form data.
    First, validate the input data, as requested. If the validation is successful,
    proceed with the new record insertion and, if the query executes successfully,
    authenticate the new user and redirect them to the Profile page:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `handleSignup()` 方法以处理注册表单数据。首先，按照要求验证输入数据。如果验证成功，则继续插入新记录，如果查询执行成功，则验证新用户并将他们重定向到个人资料页面：
- en: '[PRE89]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The Profile page is a simple page that will only display some user info and
    the current session login time. Open the Profile page handler – `src/handlers/Profile.php`
    – and make sure that only the `handle()` method remains, which would only print
    the Profile page. In the case of unauthenticated users, it will print the login
    form:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 个人资料页面是一个简单的页面，它将只显示一些用户信息和当前会话登录时间。打开个人资料页面处理程序——`src/handlers/Profile.php`——并确保只保留
    `handle()` 方法，该方法只会打印个人资料页面。在未经认证的用户的情况下，它将打印登录表单：
- en: '[PRE90]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The Logout page: This page logs the user out. Open the `src/handlers/Logout.php`
    file and make sure to use the `Auth` component to log the user out:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登出页面：此页面将用户登出。打开 `src/handlers/Logout.php` 文件，并确保使用 `Auth` 组件来登出用户：
- en: '[PRE91]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Login page: This page authenticates the username and password. Open the `src/handlers/Login.php`
    file and make sure that the necessary adjustments are performed. The `Handlers\Login::handle()`
    method will redirect the authenticated users to the Profile page as well. Otherwise,
    it will perform the same flow as in the previous activity but will evaluate the
    data differently in each step. That''s because it now uses the database as a source
    of data and the User model with a dedicated method to perform password validation
    (the differences are highlighted). So, in the case of a `POST` request, first,
    it retrieves the user from the database by calling `Database::getUserByUsername()`
    and then evaluates them (the `$user` value can be the `User` object or null).
    If no user was found and returned, an error message is set in the `$formError`
    variable. The next step is to validate the login password and, in the event of
    an error, to set the error message in the `$formError` variable. In the end, if
    all checkpoints have been passed, the authentication is made by calling the `Auth::authenticate()`
    method, and then redirecting to the Profile page. If the request was not of the
    `POST` type, or there was an error with the username or password, the login form
    template (Login page) is rendered and returned:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录页面：这个页面验证用户名和密码。打开`src/handlers/Login.php`文件，并确保执行必要的调整。`Handlers\Login::handle()`方法将认证用户重定向到个人资料页面。否则，它将执行与上一个活动相同的流程，但在每个步骤中会以不同的方式评估数据。这是因为现在它使用数据库作为数据源，并使用具有执行密码验证的专用方法的用户模型（差异已突出显示）。因此，在`POST`请求的情况下，首先通过调用`Database::getUserByUsername()`从数据库中检索用户，然后评估他们（`$user`值可以是`User`对象或null）。如果没有找到并返回用户，则在`$formError`变量中设置错误消息。下一步是验证登录密码，并在出错的情况下，在`$formError`变量中设置错误消息。最后，如果所有检查点都已通过，将通过调用`Auth::authenticate()`方法进行认证，然后重定向到个人资料页面。如果请求不是`POST`类型，或者用户名或密码存在问题，将渲染并返回登录表单模板（登录页面）：
- en: '[PRE92]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The entry point of the application (`web/index.php`) does not change the logic;
    it will just require the new script files (highlighted rows):'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用的入口点（`web/index.php`）不会改变逻辑；它只会要求新的脚本文件（突出显示的行）：
- en: '[PRE93]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Now to the templates – let's see what has changed.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在来看一下模板——让我们看看有什么变化。
- en: 'Firstly, the `main` template – the `src/templates/main.php` file. The changes
    are highlighted and commented on further. The `navbar` has changed to Contacts
    list. As requested, the navbar links are Username (link to the Profile page),
    Contacts, and Logout for an authenticated user, and Login for an unauthenticated
    user. The default content is now replaced by the `home` template:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，是`main`模板——`src/templates/main.php`文件。更改已突出显示，并进一步注释。`navbar`已更改为联系人列表。如请求，navbar链接是用户名（链接到个人资料页面）、联系人以及已认证用户的登出，对于未认证用户是登录。默认内容现在已被`home`模板替换：
- en: '[PRE94]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Now, the `home` template – the `src/templates/home.php` file. This template
    prints two links – Sign up and Login, as requested:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是`home`模板——`src/templates/home.php`文件。这个模板打印出两个链接——注册和登录，正如所请求的：
- en: '[PRE95]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Now, the `login-form` template – the `src/templates/login-form.php` file. In
    this template, only the link to the "sign up" page (highlighted) was added:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是`login-form`模板——`src/templates/login-form.php`文件。在这个模板中，只添加了指向“注册”页面的链接（突出显示）：
- en: '[PRE96]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Now, the `signup-form` template—the `src/templates/signup-form.php` file. This
    template is similar to the `login` template. The only differences are the form
    action (`/signup`), header title (`Sign up`), the extra input (`Password verify`),
    and the fact that the link points to the Login page:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是`signup-form`模板——`src/templates/signup-form.php`文件。这个模板与`login`模板类似。唯一的不同之处在于表单操作（`/signup`）、标题（`Sign
    up`）、额外的输入（`Password verify`），以及链接指向登录页面：
- en: '[PRE97]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Now, the `profile` template – the `src/templates/profile.php` file. The Profile
    page template looks totally different to the one in the previous activity. Now,
    it simply outputs a welcoming message and some minimal user information: username,
    signup date, and session login time:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是`profile`模板——`src/templates/profile.php`文件。个人资料页面模板看起来与上一个活动中的完全不同。现在，它只是输出一个欢迎信息和一些最小限度的用户信息：用户名、注册日期和会话登录时间：
- en: '[PRE98]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Now, the `contacts` template, the contacts list – the `src/templates/contacts.php`
    file (the first part). The Contacts page template has two major areas: the contacts
    list, on the one hand, and the contacts form (with add/edit actions), on the other.
    Before rendering the contacts list, `PDOStatement` (stored in the `$contacts`
    variable) is "asked" about the number of rows and, if there are no rows, then
    the message `No contacts` is printed. If the row count returns at least one, then
    the table is printed, iterating over the results of `$contacts`, using the `while`
    loop. The `Edit` and `Delete` buttons are also printed for every contact. For
    the `Delete` button, a confirmation dialog is used, utilizing the `onclick` tag
    attribute and the `confirm()` JavaScript function:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`contacts` 模板，联系人列表 – `src/templates/contacts.php` 文件（第一部分）。联系人页面模板有两个主要区域：一方面是联系人列表，另一方面是联系人表单（具有添加/编辑操作）。在渲染联系人列表之前，`PDOStatement`（存储在
    `$contacts` 变量中）被“询问”行数，如果没有行，则打印消息 `No contacts`。如果行数返回至少一行，则打印表格，使用 `while`
    循环遍历 `$contacts` 的结果。为每个联系人打印 `Edit` 和 `Delete` 按钮。对于 `Delete` 按钮，使用确认对话框，利用 `onclick`
    标签属性和 `confirm()` JavaScript 函数：
- en: '[PRE99]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Now, the `contacts` template, the edit form – the `src/templates/contacts.php`
    file (the second part). The contacts add/edit form features four visible inputs
    (`name`, `email`, `phone`, and `address`), one hidden input (contact ID when editing,
    0 otherwise), and the `Save` button:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`contacts` 模板，编辑表单 – `src/templates/contacts.php` 文件（第二部分）。联系人添加/编辑表单具有四个可见输入（`name`、`email`、`phone`
    和 `address`），一个隐藏输入（编辑时为联系人 ID，否则为 0），以及 `Save` 按钮：
- en: '[PRE100]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Thus, we have created a contact management system based on the concepts covered
    so far in the chapter.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已创建了一个基于本章迄今为止所涵盖的概念的联系人管理系统。
- en: 8\. Error Handling
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 错误处理
- en: 'Activity 8.1: Improving the User Experience through the Handling System and
    User-Level Errors'
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 8.1：通过处理系统和用户级错误来改进用户体验
- en: '**Solution**'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a file called `factorial.php`.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `factorial.php` 的文件。
- en: 'First, add the exception handler that, in order to log the exceptions to the
    log file, will create a data stream resource using the `fopen()` function, which
    is assigned to the static variable, `$fh`:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加异常处理程序，以便将异常记录到日志文件中，将使用 `fopen()` 函数创建数据流资源，并将其分配给静态变量 `$fh`：
- en: '[PRE101]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Format the log message and write to the log file, using the `fwrite()` function:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `fwrite()` 函数格式化日志消息并将其写入日志文件：
- en: '[PRE102]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Define the error handler, which will translate the errors to exceptions and
    forward these to the exception handler. This error handler is meant to collect
    all the system errors reported, which are required to be handled as an exception
    (to log to a file, in a specific format, in our case):'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义错误处理程序，该处理程序将错误转换为异常并将这些错误转发到异常处理程序。此错误处理程序旨在收集所有报告的系统错误，这些错误需要作为异常处理（在我们的情况下，以特定格式记录到文件中）：
- en: '[PRE103]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Register both handlers, using `set_error_handler()` and `set_exception_handler()`:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `set_error_handler()` 和 `set_exception_handler()` 注册这两个处理程序：
- en: '[PRE104]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Create a list of custom exceptions, one for each validation rule:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个验证规则创建一个自定义异常列表：
- en: '[PRE105]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Create the `printError()` function, which will prepend `(!)` to the input message:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `printError()` 函数，该函数将在输入消息前添加 `(!)`：
- en: '[PRE106]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Create the `calculateFactorial()` function, which will initially validate the
    input argument. If any validation fails, an appropriate exception will be thrown,
    including a detailed message regarding the validation failure:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `calculateFactorial()` 函数，该函数最初将验证输入参数。如果任何验证失败，将抛出适当的异常，包括有关验证失败的具体消息：
- en: '[PRE107]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: We use `is_numeric()` to check whether the input is an integer or a numeric
    string and throw a `NotANumber` exception if the validation fails. Then, we validate
    whether the input is a decimal number since we only want to allow integers. To
    achieve this, we have to "convert" the potential string numeral to one of integers
    or float types, and therefore we multiply the number with the numeric `1` so that
    PHP will convert the input automatically for us. Another way of checking whether
    we are dealing with decimals is to look for decimal separators in the input, using
    the built-in `strpos()` function. In the case of a decimal value, we throw a `DecimalNumber`
    exception. Then, if the input number is lower than `1`, we throw a `NumberIsZeroOrNegative`
    exception. At this step, validation ends, and we can proceed with the computation.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once validation is complete, proceed to the factorial number calculation, and
    then return it:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: A `for` loop is used to multiplicate the `$factorial` variable through its iterations
    until `$i` reaches the `$number` input value provided.
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We use the `$factorial *= $i;` notation, which is equivalent to the more verbose
    one—`$factorial = $factorial * $i;`
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Consider input arguments starting with the second element, since the first
    one is the script name. If no input arguments are provided, then print the error
    message asking for an input argument:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Otherwise, iterate through the input arguments and invoke the `calculateFactorial()`
    function, the result of which will be printed:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The `calculateFactorial()` function is wrapped in a `try` block since we are
    expecting an exception to be thrown, which we want to catch eventually. Remember
    that we have to display an output value for each input argument, so, in the event
    of errors for one argument, we want to be able to continue to advance the script
    to the next argument.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Catch any of the custom exceptions defined previously and print the error message:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Catch any other exception and send this to the exception handler to log to
    a file and print a generic error message that will highlight the current argument
    for which the unexpected exception was thrown:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Execute the following command:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The output is as follows:'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.38: Executing the script without an argument'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_08_38.jpg)'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.38: Executing the script without an argument'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since no arguments were passed to the script, the appropriate error message
    is printed on the screen.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the script with `php factorial.php 1 2 3 20 21 -1 4.2 4th four`; expect
    the following output:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.39: Printing a factorial for integer values'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_08_39.jpg)'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.39: Printing a factorial for integer values'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, a list of arguments was provided, starting with `1` and ending
    in `four`. As expected, for each argument, a new line is printed, containing either
    the response or the error. An interesting line here is the one for the argument
    `21`, for which we got an `Unexpected error` message, without giving many details.
    We should look in the log file to see some relevant data:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.40: Data for the input value “21”'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_08_40.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.40: Data for the input value "21"'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: The complaint here concerns a `float` type being returned by the `calculateFactorial()`
    function, while `int` is expected. That's because the resulting factorial number
    for `21` (`51090942171709440000`) is higher than the maximum integer the PHP engine
    can handle (`php -r 'echo PHP_INT_MAX;'` would output 9223372036854775807), and
    so is converted to a float type and is presented in scientific notation (5.1090942171709E+19).
    Since the `calculateFactorial()` function has declared `int` as a return type,
    the returned float type value has caused a `TypeError`, and now we may decide
    to apply an extra condition to input arguments, limiting the maximum number to
    `20`, throwing a custom exception when the number is higher, or to check the type
    of factorial in `calculateFactorial()` before the value is returned, and throw
    a custom exception as well.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you managed to improve the user experience by printing pretty
    messages to user output, even for unexpected errors. Also, in the case of unexpected
    errors, the messages were logged to a log file so that the developer could check
    on them and, based on that data, reproduce the issue, and then come up with a
    fix or an improved solution for the script.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Composer
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.1: Implementing a Package to Generate a UUID'
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The output is as follows:'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.17: Requiring the packages'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_09_17.jpg)'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.17: Requiring the packages'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'List the packages in your vendor directory using the following command:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The output is as follows:'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.18: Listing the packages'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14196_09_18.jpg)'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.18: Listing the packages'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `Example.php` to add a `use ramsey/uuid/uuid` statement, and add a method
    similar to `printUuid()` as follows:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Edit your `index.php` file to add the call to `printUuid()`:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Run `php index.php`. The UUID generated will be different to the one in the
    screenshot, but should follow a similar format:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.19: Printing the UUID'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14196_09_19.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.19: Printing the UUID'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Web Services
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.1: Making Your Own POST Request to httpbin.org'
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `httpbin.php` file in the `guzzle-example` directory. Require the
    Composer autoload file and import the `Guzzle Client` class:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Instantiate a new `Guzzle Client` by passing the `httpbin` address:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Inside a `try`…`catch` block, make a `POST` request to the `/response-headers`
    endpoint. Add an `Accept` header set to `application/json` and set two query parameter
    key-value pairs, with `first` as `John` and `last` as `Doe`:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`try`…`catch`块中，向`/response-headers`端点发送一个`POST`请求。添加一个`Accept`头，设置为`application/json`，并设置两个查询参数键值对，其中`first`为`John`，`last`为`Doe`：
- en: '[PRE120]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Check whether the HTTP status code is not 200, and if so, throw an exception:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查HTTP状态码是否不是200，如果是，则抛出异常：
- en: '[PRE121]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Parse the response body into an object using `json_decode()` and store it in
    a variable:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`json_decode()`将响应体解析为对象，并存储在一个变量中：
- en: '[PRE122]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Output a string, `The web service responded with`, concatenated with the first
    and last properties from the response object:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出一个字符串，`The web service responded with`，与响应对象中的第一个和最后一个属性连接：
- en: '[PRE123]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Run the script and see whether the output contains `John Doe`:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本并查看输出是否包含`John Doe`：
- en: '![Figure 10.13: The output of the script](img/C14196_10_13.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13：脚本的输出](img/C14196_10_13.jpg)'
- en: 'Figure 10.13: The output of the script'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：脚本的输出
