["```php\ncomposer require drupal/(module_name):^VERSION\n```", "```php\nid: d7_filter_format\nlabel: Filter format configuration\nmigration_tags:\n  - Drupal 7\n  - Configuration\nsource:\n  plugin: d7_filter_format\nprocess:\n  format: format\n  status: status\n  name: name\n  cache: cache\n  weight: weight\n  filters:\n    plugin: sub_process\n    source: filters\n    key: '@id'\n    process:\n      id:\n        plugin: filter_id\n        bypass: true\n        source: name\n        map:\n          editor_caption: filter_caption\n          editor_align: filter_align\n      settings:\n        plugin: filter_settings\n        source: settings\n      status:\n        plugin: default_value\n        default_value: true\n      weight: weight\ndestination:\n  plugin: entity:filter_format\n```", "```php\nid: redirects\nmigration_tags: {}\nmigration_dependencies: {}\nmigration_group: default \nlabel: Old website redirects.\nsource:\n  plugin: csv\n  path: data/redirects.csv\n  ids: [id]\n  constants:\n    uid: 1\n    status: 301\ndestination:\n  plugin: 'entity:redirect'\nprocess:\n  redirect_source: old_path\n  redirect_redirect: new_path\n  uid: constants/uid\n  status_code: constants/status\n```", "```php\nid: chapter14csvnodes\nlabel: Old website articles.\nsource:\n  plugin: csv\n  path: /data/articles.csv\n  ids: [id]\n  constants:\n    uid: 1\ndestination:\n  plugin: 'entity:node'\n  default_bundle: article\nprocess:\n  title: old_title\n  body/value: old_body\n  body/format:\n    plugin: default_value\n    default_value: full_html\n  uid: constants/uid\n  field_one: old_field_one\n  field_two: old_field_two\n  created:\n    plugin: format_date\n    from_format: 'Y-m-d\\TH:i:sP'\n    to_format: 'U'\n    source: created_date\n```", "```php\nfield_one: old_field_one\n```", "```php\nfield_one:\n  plugin: get\n  source: old_field_one\n```", "```php\n{\n   \"data\":[\n      {\n         \"id\": 1,\n         \"title\": \"Item One\",\n         \"body\": \"Lorem ipsum dolor sit amet\",\n         \"archived\": false\n      },\n      {\n         \"id\": 2,\n         \"title\": \"Item Two\",\n         \"body\": \"Lorem ipsum dolor sit amet\",\n         \"archived\": true\n      },\n      {\n         \"id\": 3,\n         \"title\": \"Item Three\",\n         \"body\": \"Lorem ipsum dolor sit amet\",\n         \"archived\": false\n      }\n   ]\n}\n```", "```php\nid: chapter14httpjson\nlabel: Migrates external API data.\nmigration_tags: {}\nmigration_dependencies: {}\nsource:\n  plugin: url\n  urls:\n    - 'http://example.com/api/v1/content'\n  data_fetcher_plugin: http\n  data_parser_plugin: json\n  item_selector: data\n  fields:\n    -\n      name: id\n      label: 'ID'\n      selector: id\n    -\n      name:  title\n      label: 'Title'\n      selector: title\n    -\n      name: body\n      label: 'Body content'\n      selector: body\n    -\n      name: archived\n      label: 'Archived status'\n      selector: archived\n  ids:\n    id:\n      type: integer\ndestination:\n  plugin: entity:node\n  default_bundle: article\nprocess:\n  title: title\n  body/value: body\n  body/format:\n    plugin: default_value\n    default_value: basic_html\n  status: archived\n  uid:\n    plugin: default_value\n    default_value: 1\n```", "```php\n  /**\n   * Returns the initialized data parser plugin.\n   *\n   * @return \\Drupal\\migrate_plus\\DataParserPluginInterface\n   *   The data parser plugin.\n   */\n  public function getDataParserPlugin() {\n    if (!isset($this->dataParserPlugin)) {\n      $this->dataParserPlugin = \\Drupal::service\n        ('plugin.manager.migrate_plus.data_parser')->\n          createInstance($this->configuration[\n            'data_parser_plugin'], $this->configuration);\n    }\n    return $this->dataParserPlugin;\n  }\n  /**\n   * Creates and returns a filtered Iterator over the\n       documents.\n   *\n   * @return \\Iterator\n   *   An iterator over the documents providing source rows\n           that match the\n   *   configured item_selector.\n   */\n  protected function initializeIterator() {\n    return $this->getDataParserPlugin();\n  }\n```", "```php\n      Name:  title\n      label: 'Title'\n      selector: title\n```", "```php\n$databases['migrate']['default'] = array (\n  'database' => 'DATABASE_NAME',\n  'username' => 'DATABASE_USERNAME',\n  'password' => 'DATABASE_PASSWORD',\n  'prefix' => '',\n  'host' => 'DATABASE_HOSTNAME',\n  'port' => '',\n  'namespace' => 'Drupal\\\\Core\\\\Database\\\\Driver\\\\mysql',\n  'driver' => 'mysql',\n);\n```", "```php\n<?php\nnamespace Drupal\\chapter14\\Plugin\\migrate\\source;\nuse Drupal\\migrate\\Plugin\\migrate\\source\\SqlBase;\n/**\n * Get the article records from the legacy database.\n *\n * @MigrateSource(\n *   id = \"legacy_articles\",\n *   source_module = \"chapter14\",\n * )\n */\nclass ArticlesSource extends SqlBase {\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function query() {\n    $query = $this->select('articles', 'art');\n    $query->fields('art', [\n        'id',\n        'title',\n        'body',\n        'is_published',\n        'published_on',\n      ]);\n    $query->orderBy('art.id');\n    $query->orderBy('art.published_on');\n    return $query;\n  }\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function fields() {\n    return [\n      'id' => $this->->t('The article id.'),\n      'title' => $this->->t('The article title.'),\n      'body' => $this->->t('The article body content.'),\n      'is_published' => $this->->t('The published state.'),\n      'published_on' => $this->->t('The published date.'),\n    ];\n  }\n```", "```php\n  /**\n   * {@inheritdoc}\n   */\n  public function getIds() {\n    return [\n      'id' => [\n        'type' => 'integer',\n        'alias' => 'art',\n      ],\n    ];\n  }\n```", "```php\nid: articles\nlabel: Migrates articles from the legacy database.\nMigration_tags: {}\nmigration_dependencies: {}\nsource:\n  plugin: legacy_articles\n  key: migrate\ndestination:\n  plugin: entity:node\n  default_bundle: article\nprocess:\n  title: title\n  body/value: body\n  body/format:\n    plugin: default_value\n    default_value: basic_html\n  status: is_published\n  created: published_on\n  uid:\n    plugin: default_value\n    default_value: 1\n```", "```php\n    $query->fields('art', [\n        'id',\n        'title',\n        'body',\n        'is_published',\n        'published_on',\n        'no_index',\n      ]);\n```", "```php\n  public function fields() {\n    return [\n      'id' => $this→t('The article id.'),\n      'title' => $this→t('The article title.'),\n      'body' => $this→t('The article body content.'),\n      'is_published' => $this→t('The published state.'),\n      'published_on' => $this→t('The published date.'),\n      'no_index' => $this→t('Indicates this article should\n          not be crawled.'),\n    ];\n  }\n```", "```php\n  field_metatags:\n    - plugin: set_no_index\n      _source: no_index\n```", "```php\n<?php\nnamespace Drupal\\chapter14\\Plugin\\migrate\\process;\nuse Drupal\\migrate\\ProcessPluginBase;\nuse Drupal\\migrate\\MigrateExecutableInterface;\nuse Drupal\\migrate\\Row;\n/**\n * @MigrateProcessPlugin(\n *   id = \"set_no_index\",\n * )\n */\nclass SetNoIndex extends ProcessPluginBase {\n  /**\n   * {@inheritdoc}\n   */\n  public function transform($value, MigrateExecutableInter\n      face $migrate_executable, Row $row, $destination\n          _property) {\n    return (bool) $value ? ['robots' => 'noindex, nofollow,\n        noarchive, nosnippet'] : [];\n  }\n}\n```", "```php\n  field_metatags:\n    - plugin: set_no_index\n      _source: no_index\n    - plugin: callback\n      _callable: serialize\n```", "```php\nphp vendor/bin/drush config-import --partial --source=/var/www/\nhtml/web/modules/custom/chapter14/config/install -y\n```", "```php\n<?php\nnamespace Drupal\\Tests\\chapter14\\Unit\\Plugin\\migrate\\\n    process;\nuse Drupal\\chapter14\\Plugin\\migrate\\process\\SetNoIndex;\nuse Drupal\\Tests\\migrate\\Unit\\process\\\n    MigrateProcessTestCase;\n/**\n * Tests the set_no_index process plugin.\n */\nclass SetNoIndexTest extends MigrateProcessTestCase {\n  /**\n   * {@inheritdoc}\n   */\n  protected function setUp(): void {\n    $this->plugin = new SetNoIndex([], 'set_no_index', []);\n    parent::setUp();\n  }\n  /**\n   * Data provider for testPluginValue().\n   *\n   * @return array\n   *   An array containing input values and expected output\n         values.\n   */\n  public function valueProvider() {\n    return [\n      [1, ['robots' => 'noindex, nofollow, noarchive,\n        nosnippet']],\n      [0, []],\n      [NULL, []],\n    ];\n  }\n  /**\n   * Test set_no_index plugin.\n   *\n   * @param $input\n   *   The input values.\n   *\n   * @param $expected\n   *   The expected output.\n   *\n   * @dataProvider valueProvider\n   */\n  public function testPluginValue($input, $expected) {\n    $output = $this->plugin->transform($input, $this->\n        migrateExecutable, $this->row,\n            'destinationproperty');\n    $this->assertSame($output, $expected);\n  }\n}\n```"]