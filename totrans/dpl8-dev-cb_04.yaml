- en: Extending Drupal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Drupal
- en: 'This chapter dives into extending Drupal using a custom module:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨使用自定义模块扩展 Drupal：
- en: Creating a module
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模块
- en: Defining a custom page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自定义页面
- en: Defining permissions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义权限
- en: Providing the configuration on installation or update
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安装或更新时提供配置
- en: Creating an event subscriber
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建事件订阅者
- en: Using Features 3.0
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Features 3.0
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: A feature of Drupal that makes it desirable is the ability to customize it through
    modules. Whether custom or contributed, modules extend the functionalities and
    capabilities of Drupal. Modules can be used to not only extend Drupal, but also
    to create a way to provide configuration and reusable features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 的一项特性使其变得令人向往，那就是能够通过模块进行自定义。无论是自定义还是贡献的，模块都扩展了 Drupal 的功能和能力。模块不仅可以扩展
    Drupal，还可以创建提供配置和可重用功能的方式。
- en: This chapter will discuss how to create a module and allow Drupal to discover
    it, allowing it to be installed from the extend page. Permissions, custom pages,
    and default configurations all come from modules. We will explore how to provide
    these through a custom module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论如何创建模块并允许 Drupal 发现它，从而可以从扩展页面安装它。权限、自定义页面和默认配置都来自模块。我们将探讨如何通过自定义模块提供这些功能。
- en: In addition to creating a module, we will discuss the Features module that provides
    a set of tools to generate a module and export its configuration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建模块外，我们还将讨论 Features 模块，它提供了一套生成模块和导出其配置的工具。
- en: Creating a module
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模块
- en: The first step to extend Drupal is to create a custom module. Although the task
    sounds daunting, it can be accomplished in a few simple steps. Modules can provide
    functionalities and customizations to functionalities provided by other modules,
    or they can be used as a way to contain the configuration and a site's state.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 Drupal 的第一步是创建一个自定义模块。尽管这项任务听起来令人畏惧，但它可以通过几个简单的步骤完成。模块可以提供功能性和对其他模块提供的功能的自定义，或者它们可以用作包含配置和站点状态的方式。
- en: In this recipe, we will create a module by defining an `info.yml` file, a file
    containing information that Drupal uses to discover extensions, and enabling the
    module.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将通过定义一个 `info.yml` 文件来创建一个模块，该文件包含 Drupal 用于发现扩展的信息，并启用该模块。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a folder named `mymodule` in the `modules` folder in the base directory
    of your Drupal site. This will be your module's directory.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Drupal 站点的 `modules` 文件夹的根目录下创建一个名为 `mymodule` 的文件夹。这将成为您的模块目录。
- en: Create a `mymodule.info.yml` file in your module's directory. This contains
    metadata that identifies the module to Drupal.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块目录中创建一个 `mymodule.info.yml` 文件。它包含标识模块给 Drupal 的元数据。
- en: 'Add a line to the `name` key to provide a name for the module:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `name` 键下添加一行以提供模块的名称：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will need to provide the `type` key to define the type of extension. We
    provide the `module` value:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要提供 `type` 键来定义扩展的类型。我们提供 `module` 值：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `description` key allows you to provide extra information about your module,
    which will be displayed on the module''s list page:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description` 键允许您提供有关您的模块的额外信息，这些信息将在模块列表页面上显示：'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'All modules need to define the `core` key in order to specify a major release
    compatibility:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有模块都需要定义 `core` 键以指定主要版本兼容性：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Save the `mymodule.info.yml` file, which resembles the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `mymodule.info.yml` 文件，其代码如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Log in to your Drupal site and go to Extend from the administrative toolbar.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录您的 Drupal 网站，并从管理工具栏转到扩展。
- en: Search for My Module to filter the list of options.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索“我的模块”以过滤选项列表。
- en: 'Check the checkbox and click on Install to enable your module:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾并点击安装以启用您的模块：
- en: '![](img/73af832a-e99e-4bb8-8387-8d7e304599ad.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73af832a-e99e-4bb8-8387-8d7e304599ad.png)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal utilizes `info.yml` files to define extensions. Drupal has a discovery
    system that locates these files and parses them to discover modules. The `info_parser`
    service, provided by the `\Drupal\Core\Extension\InfoParser` class, reads the
    `info.yml` file. The parser guarantees that the required type, core, and name
    keys are present.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 利用 `info.yml` 文件来定义扩展。Drupal 有一个发现系统，用于定位这些文件并将它们解析为发现模块。由 `\Drupal\Core\Extension\InfoParser`
    类提供的 `info_parser` 服务读取 `info.yml` 文件。解析器保证存在所需类型、`core` 和 `name` 键。
- en: When a module is installed, it is added to the `core.extension` configuration
    object, which contains a list of installed modules and themes. The collection
    of modules in the `core.extension` module array will be installed, and will have
    PHP namespaces resolved, services loaded, and hooks registered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块安装时，它会被添加到`core.extension`配置对象中，该对象包含已安装模块和主题的列表。`core.extension`模块数组中的模块集合将被安装，并将解析PHP命名空间、加载服务和注册钩子。
- en: When Drupal prepares to execute a hook or register services, it will iterate
    through the values in the `module` key in `core.extension`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当Drupal准备执行钩子或注册服务时，它将遍历`core.extension`中的`module`键的值。
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: There are more details about Drupal modules and the module `info.yml` files
    that we can explore.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Drupal模块和模块`info.yml`文件，我们可以探索更多细节。
- en: Module namespaces
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块命名空间
- en: Drupal 8 uses the PSR-4 standard developed by the **PHP Framework Interoperability
    Group** (**PHP-FIG**). The PSR-4 standard is for package-based PHP namespace autoloading.
    It defines a standard to understand how to automatically include classes based
    on a namespace and class name. Drupal modules have their own namespaces under
    the Drupal root namespace.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8使用由**PHP框架互操作性小组**（**PHP-FIG**）开发的PSR-4标准。PSR-4标准是针对基于包的PHP命名空间自动加载。它定义了一个标准，以了解如何根据命名空间和类名自动包含类。Drupal模块在Drupal根命名空间下有自己的命名空间。
- en: Using the module from the recipe, our PHP namespace will be `Drupal\mymodule`,
    which represents the `modules/mymodule/src` folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配方中的模块，我们的PHP命名空间将是`Drupal\mymodule`，这代表`modules/mymodule/src`文件夹。
- en: With PSR-4, files need to contain only one class, interface, or trait. These
    files need to have the same filename as the containing class, interface, or trait
    name. This allows a class loader to resolve a namespace as a directory path and
    know the class's filename. The file can then be automatically loaded when it is
    used in a file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PSR-4，文件只需要包含一个类、接口或特质。这些文件需要与包含的类、接口或特质的名称具有相同的文件名。这允许类加载器将命名空间解析为目录路径并知道类的文件名。当文件被使用时，它将被自动加载。
- en: Module discovery locations
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块发现位置
- en: 'Drupal supports multiple module discovery locations. Modules can be placed
    in the following directories and discovered:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal支持多个模块发现位置。模块可以放置在以下目录中并被发现：
- en: '`/profiles/CURRENT PROFILE/modules`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/profiles/CURRENT PROFILE/modules`'
- en: '`/sites/all/modules`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sites/all/modules`'
- en: '`/modules`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/modules`'
- en: '`/sites/default/modules`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sites/default/modules`'
- en: '`/sites/example.com/modules`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sites/example.com/modules`'
- en: The `\Drupal\Core\Extension\ExtensionDiscovery` class handles the discovery
    of extensions by type. It will iteratively scan each location and discover modules
    that are available. The discovery order is important. If the same module is placed
    in `/modules`, but also in the `sites/default/modules` directory, the latter will
    take precedence.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Extension\ExtensionDiscovery`类通过类型处理扩展的发现。它将迭代扫描每个位置并发现可用的模块。发现顺序很重要。如果同一模块放置在`/modules`中，但也放在`sites/default/modules`目录中，则后者将具有优先权。'
- en: Defining a package group
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个包组
- en: 'Modules can define a `package` key to group modules on the module list page:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以定义一个`package`键来在模块列表页面上分组模块：
- en: '![](img/e4875d0a-cfa5-407d-bb88-dd04ab8e099f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4875d0a-cfa5-407d-bb88-dd04ab8e099f.png)'
- en: Projects that include multiple submodules, such as Drupal Commerce, specify
    packages to normalize the modules' list form. Contributed modules for the Drupal
    Commerce project utilize a package name, `Commerce (contrib)`, to group them on
    the module list page.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 包含多个子模块的项目，如Drupal Commerce，指定包以规范化模块列表形式。Drupal Commerce项目的贡献模块使用包名`Commerce
    (contrib)`在模块列表页面上分组。
- en: Module dependencies
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块依赖
- en: Modules can define dependencies to ensure that those modules are enabled before
    your module can be enabled.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以定义依赖关系以确保在您的模块启用之前，那些模块已被启用。
- en: 'Here is the `info.yml` for the `Responsive Image` module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Responsive Image`模块的`info.yml`文件：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `dependencies` key specifies that the `breakpoint` and `image` modules need
    to be enabled first before the `Responsive Image` module can be enabled. When
    enabling a module that requires dependencies that are disabled, the installation
    form will provide a prompt asking you whether you would like to install the dependencies
    as well. If a dependency module is missing, the module cannot be installed. The
    dependency will show a status of (missing).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`键指定在启用`Responsive Image`模块之前需要首先启用`breakpoint`和`image`模块。当启用需要依赖项且依赖项已禁用的模块时，安装表单将提供一个提示，询问你是否想安装依赖项。如果缺少依赖模块，则无法安装。依赖项将显示为（缺失）的状态。'
- en: 'A module that is a dependency of another module will state the information
    in its description, along with the other module''s status. For example, the Breakpoint
    module will show that the Re module requires it as a dependency and is disabled:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个模块依赖项的模块将在其描述中声明信息，以及其他模块的状态。例如，Breakpoint模块将显示Re模块需要它作为依赖项并且已禁用：
- en: '![](img/bf6cea81-0985-484f-b6e3-19c4081dff92.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf6cea81-0985-484f-b6e3-19c4081dff92.png)'
- en: Specifying the module's version
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定模块的版本
- en: There is a `version` key that defines the current module's version. Projects
    on Drupal.org do not specify this directly, as the Drupal.org extension packager
    adds it when a release is created. However, this key can be important for private
    modules to track the release information.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`version`键定义了当前模块的版本。Drupal.org上的项目不会直接指定此版本，因为当创建发布时，Drupal.org扩展打包器会添加它。然而，这个键对于私有模块跟踪发布信息可能很重要。
- en: Versions are expected to be single strings, such as `1.0-alpha1` and `2.0.1`.
    You can also pass `VERSION`, which will resolve to the current version of Drupal
    core.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 预期版本是单个字符串，例如`1.0-alpha1`和`2.0.1`。你也可以传递`VERSION`，它将解析为Drupal核心的当前版本。
- en: Drupal.org does not currently support semantic versioning for contributed projects.
    There is a, now postponed, policy discussion in the issue queue, which can be
    found at [https://www.drupal.org/node/1612910](https://www.drupal.org/node/1612910).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal.org目前不支持贡献项目的语义版本。在问题队列中有一个现在已推迟的政策讨论，可以在[https://www.drupal.org/node/1612910](https://www.drupal.org/node/1612910)找到。
- en: See also...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见...
- en: 'Refer to the PSR-4: Autoloader specification at [http://www.php-fig.org/psr/psr-4/](http://www.php-fig.org/psr/psr-4/)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考PSR-4：自动加载规范[http://www.php-fig.org/psr/psr-4/](http://www.php-fig.org/psr/psr-4/)
- en: Refer to the Drupal.org documentation for creating a module at [https://www.drupal.org/docs/8/creating-custom-modules](https://www.drupal.org/docs/8/creating-custom-modules)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Drupal.org文档创建模块[https://www.drupal.org/docs/8/creating-custom-modules](https://www.drupal.org/docs/8/creating-custom-modules)
- en: Defining a custom page
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义自定义页面
- en: In Drupal, there are routes that represent URL paths that Drupal interprets
    to return content. Modules can define routes and methods that return data to be
    rendered and then displayed to the end user.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal中，有一些代表URL路径的路由，Drupal将这些路径解释为返回内容。模块可以定义路由和方法，这些方法返回要渲染并显示给最终用户的数据。
- en: In this recipe, we will define a controller that provides an output and a route.
    The route provides a URL path that Drupal will associate with our controller to
    display the output.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将定义一个控制器，它提供输出和路由。路由提供了一个URL路径，Drupal会将该路径与我们的控制器关联起来以显示输出。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new module like the one in the first recipe. We will refer to the module
    as `mymodule` throughout the recipe. Use your module's name as appropriate.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的模块，就像第一个菜谱中的那样。在整个菜谱中，我们将把该模块称为`mymodule`。根据需要使用你的模块名称。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Firstly, we'll set up the controller. Create a `src` folder in your module's
    base directory and another folder named `Controller` inside it.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将设置控制器。在你的模块基本目录中创建一个`src`文件夹，并在其中创建一个名为`Controller`的另一个文件夹。
- en: 'Create `MyPageController.php` that will hold the route''s controller class:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建将包含路由控制器类的`MyPageController.php`：
- en: '![](img/edd1de71-62ec-4560-b27b-d0da427fb87b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/edd1de71-62ec-4560-b27b-d0da427fb87b.png)'
- en: 'The PSR-4 standard states that filenames match the class names they hold, so
    we will create a `MyPageController` class:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PSR-4标准规定，文件名与它们包含的类名相匹配，因此我们将创建一个`MyPageController`类：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates the `MyPageController` class, which extends the `\Drupal\Core\Controller\ControllerBase`
    class. This base class provides a handful of utilities for interacting with the
    container.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`MyPageController`类，它扩展了`\Drupal\Core\Controller\ControllerBase`类。这个基类提供了一些与容器交互的实用工具。
- en: The `Drupal\mymodule\Controller` namespace allows Drupal to automatically load
    the file from `/modules/mymodule/src/Controller`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Drupal\mymodule\Controller`命名空间允许Drupal自动从`/modules/mymodule/src/Controller`目录加载文件。'
- en: 'Next, we will create a method that returns a string of text in our class. Add
    the following method to our `MyPageController` class:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的`MyPageController`类中创建一个返回文本字符串的方法。将以下方法添加到我们的`MyPageController`类中：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `customPage` method returns a render array that the Drupal theming layer
    can parse. The `#markup` key denotes a value that does not have any additional
    rendering or theming processes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`customPage`方法返回一个渲染数组，Drupal的主题层可以解析。`#markup`键表示一个没有额外渲染或主题处理的价值。'
- en: Create a `mymodule.routing.yml` file in the base directory of your module so
    that a route can be added to this controller and method.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您模块的根目录中创建一个`mymodule.routing.yml`文件，以便可以向此控制器和方法添加路由。
- en: 'The first step is to define the route''s internal name for the route to be
    referenced by:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是为路由定义一个内部名称，以便引用该路由：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Give the route a path (`mypage`):'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给路由指定一个路径（`mypage`）：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `defaults` key allows us to provide the controller with a fully qualified
    class name, the method to use, and the page''s title:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`defaults`键允许我们向控制器提供完全限定的类名、要使用的方法和页面的标题：'
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You need to provide the initial `\` when providing the fully qualified class
    name.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供完全限定的类名时，需要提供初始的反斜杠`\`。
- en: Remember that Drupal uses PSR-4 autoloading. Drupal is able to determine that
    a class with the namespace of `\Drupal\mymodule\Controller` is in the `/path/to/drupal/modules/mymodule/src/Controller`
    directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Drupal使用PSR-4自动加载。Drupal能够确定具有`\Drupal\mymodule\Controller`命名空间的类位于`/path/to/drupal/modules/mymodule/src/Controller`目录中。
- en: 'Lastly, define a `requirements` key to set the access callback:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个`requirements`键来设置访问回调：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Go to Configuration, and then Performance in the DEVEOLOPMENT section, and click
    on Clear all caches button to rebuild Drupal's routes.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往配置，然后在开发部分中的性能，点击清除所有缓存按钮以重建Drupal的路由。
- en: 'Go to `/mypage` on your Drupal site and view your custom page:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的Drupal站点上的`/mypage`并查看您的自定义页面：
- en: '![](img/45c6dbe2-0715-48ca-8506-9db1f1b5cf0c.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/45c6dbe2-0715-48ca-8506-9db1f1b5cf0c.png)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal uses routes, which define a path, that returns content. Each route has
    a method in a controller class that generates the content, in the form of a render
    array, to be delivered to the user. When a request comes to Drupal, the system
    tries to match the path to known routes. If the route is found, the route's definition
    is used to deliver the page. If the route cannot be found, the 404 page is displayed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal使用路由，这些路由定义了一个路径，用于返回内容。每个路由在控制器类中都有一个方法，该方法以渲染数组的形式生成内容，以便发送给用户。当请求到达Drupal时，系统会尝试将路径与已知的路由进行匹配。如果找到路由，则使用路由的定义来显示页面。如果找不到路由，则显示404页面。
- en: The HTTP kernel takes the request and loads the route. It will invoke the defined
    controller method or procedural function. The result of the invoked method or
    function is then handed to the presentation layer of Drupal to be rendered into
    the content that can be delivered to the user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP内核接收请求并加载路由。它将调用定义的控制器方法或过程函数。调用方法或函数的结果随后被交给Drupal的表现层，以将其渲染成可以发送给用户的内容。
- en: Drupal 8 builds on top of the Symfony HTTP kernel to provide the underlying
    functionality of its route system. It has added the ability to provide access
    requirements, cast placeholders into loaded objects, and provide partial page
    responses.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8基于Symfony HTTP内核构建，以提供其路由系统的底层功能。它增加了提供访问要求、将占位符转换为加载的对象以及提供部分页面响应的能力。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Routes have extra capabilities that can be configured; we will explore those
    in the next section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 路由具有额外的可配置功能；我们将在下一节中探讨这些功能。
- en: Parameters in routes
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由中的参数
- en: Routes can accept dynamic arguments that can be passed to the route controller's
    method. Placeholder elements can be defined in the route using curly brackets
    in the URL that denote dynamic values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 路由可以接受动态参数，这些参数可以传递给路由控制器的方法。可以在路由中使用花括号定义占位符元素，以表示动态值。
- en: 'The following example code shows what a route might look like:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码显示了路由可能的样子：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This route specifies the `/cat/{name}` path. The `{name}` placeholder will
    accept dynamic values and pass them to the controller''s method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由指定了`/cat/{name}`路径。`{name}`占位符将接受动态值并将它们传递给控制器的方法：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method accepts the `name` variable from the route and substitutes it into
    the render array to display it as a text.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受路由中的`name`变量并将其替换到渲染数组中，以显示为文本。
- en: Drupal's routing system provides a method of upcasting a variable into a loaded
    object. In Drupal, upcasting is the process of taking a route parameter and converting
    it into a richer piece of data. This includes taking an entity ID and providing
    the loaded entity to the system. There are a set of parameter converter classes
    under the `\Drupal\Core\ParamConverter` namespace. The `EntityConverter` class
    will read options defined in the route and replace a placeholder value with a
    loaded entity object.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal的路由系统提供了一种将变量提升为加载对象的方法。在Drupal中，提升是将路由参数转换为更丰富的数据的过程。这包括将实体ID转换为提供加载的实体给系统。在`\Drupal\Core\ParamConverter`命名空间下有一组参数转换类。`EntityConverter`类将读取路由中定义的选项，并用加载的实体对象替换占位符值。
- en: 'If we have an entity type called **cat**, we can turn the `name` placeholder
    into a method that will be provided with the loaded `cat` object in our controller''s
    method:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个名为**cat**的实体类型，我们可以将`name`占位符转换为在控制器方法中提供加载的`cat`对象的方法：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is not required for entities as the defined entity route handler can automatically
    generate this. Entities are covered in [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml),
    *The Entity API*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实体来说，这不是必需的，因为定义的实体路由处理器可以自动生成它。实体在[*第10章*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml)，*实体API*中有详细说明。
- en: Validating parameters in routes
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证路由中的参数
- en: 'Drupal provides regular expression validation against route parameters. If
    the parameter fails the regular expression validation, a 404 page will be returned.
    Using an example route, we can add the validation to ensure that only alphabetical
    characters are used in the route parameter:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal提供了对路由参数的正则表达式验证。如果参数未通过正则表达式验证，将返回404页面。使用示例路由，我们可以添加验证以确保在路由参数中只使用字母字符：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Under the `requirements` key, you can add a new value that matches the name
    of the placeholder. You can then set it to have the value of the regular expression
    you would like to use. This would prevent `c@ts` or `cat!` from being valid parameters.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`requirements`键下，你可以添加一个与占位符名称匹配的新值。然后你可以将其设置为使用正则表达式。这将防止`c@ts`或`cat!`成为有效的参数。
- en: Route requirements
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由要求
- en: Routes can define different access requirements through the `requirements` key.
    Multiple validators can be added. However, there must be one that provides a true
    result, or else the route will return 403, access denied. This is true if the
    route defines no requirement validators.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 路由可以通过`requirements`键定义不同的访问要求。可以添加多个验证器。然而，必须有一个提供真值的结果，否则路由将返回403，拒绝访问。如果路由没有定义要求验证器，这也是正确的。
- en: 'Route requirement validators are defined by implementing `\Drupal\Core\Routing\Access\AccessInterface`.
    Here are some of the common requirement validators defined throughout Drupal core:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 路由要求验证器是通过实现`\Drupal\Core\Routing\Access\AccessInterface`定义的。以下是在Drupal核心中定义的一些常见要求验证器：
- en: '`_access: TRUE`: Always grants access to the route'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_access: TRUE`：始终授予路由访问权限'
- en: '`_entity_access`: Validates that the current user has the ability to perform'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_entity_access`：验证当前用户是否有执行的能力'
- en: '`entity_type.operation`, such as `node.view`'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`entity_type.operation`，例如`node.view`'
- en: '`_permission`: Checks whether the current user has the provided permission'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_permission`：检查当前用户是否有提供的权限'
- en: '`_user_is_logged_in`: Validates that the current user is logged in, which is
    defined with a Boolean value in the `routing.yml` file'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_user_is_logged_in`：验证当前用户是否已登录，这在`routing.yml`文件中以布尔值定义'
- en: Providing dynamic routes
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供动态路由
- en: The routing system allows modules to define routes programmatically. This can
    be accomplished by providing a `routing_callbacks` key that defines a class and
    method that will return an array of the `\Symfony\Component\Routing\Route` objects.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 路由系统允许模块以编程方式定义路由。这可以通过提供一个`routing_callbacks`键来实现，该键定义了一个类和方法，该方法将返回一个包含`\Symfony\Component\Routing\Route`对象的数组。
- en: If you are working with entities, refer to [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml),
    *The Entity API* to learn about overriding the default route handler to create
    dynamic routes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理实体，请参考[*第10章*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml)，*实体API*来了解如何覆盖默认路由处理器以创建动态路由。
- en: 'In the module''s `routing.yml`, you will define the routing callbacks key and
    related class:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块的`routing.yml`中，你将定义路由回调键和相关类：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `\Drupal\mymodule\Routing\CustomRoutes` class will then have a method named
    routes, which returns an array of Symfony route objects:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\mymodule\Routing\CustomRoutes`类将有一个名为`routes`的方法，它返回一个Symfony路由对象的数组：'
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If a module provides a class that interacts with routes, the best practice is
    to place it in the routing portion of the module's namespace. This helps you identify
    its purpose.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个模块提供了一个与路由交互的类，最佳实践是将它放在模块命名空间的路由部分。这有助于你识别其目的。
- en: 'The invoked method is expected to return an array of initiated route objects.
    The route class takes the following arguments:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 调用的方法预期返回一个已启动的路由对象数组。路由类接受以下参数：
- en: '`Path`: This represents the route'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`路径`: 这代表路由'
- en: '`Defaults`: This is an array of default values'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`默认值`: 这是一个默认值数组'
- en: '`Requirements`: This is an array of required validators'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`需求`: 这是一个必需验证器的数组'
- en: '`Options`: This is an array that can be passed and used optionally'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选项`: 这是一个可以传递和可选使用的数组'
- en: Altering existing routes
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有路由
- en: When Drupal's route system is rebuilt because of a module being enabled or caches
    being rebuilt, an event is fired that allows modules to alter routes defined statically
    in YAML or dynamically. This involves implementing an event subscriber by extending
    `\Drupal\Core\Routing\RouteSubscribeBase`, which subscribes the `RoutingEvents::ALTER`
    event.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当Drupal的路由系统因模块启用或缓存重建而重建时，会触发一个事件，允许模块更改在YAML中静态定义或在动态中定义的路由。这涉及到通过扩展`\Drupal\Core\Routing\RouteSubscribeBase`实现事件订阅者，该订阅者订阅`RoutingEvents::ALTER`事件。
- en: 'Create a `src/Routing/RouteSubscriber.php` file in your module. It will hold
    the route subscriber class:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的模块中创建一个`src/Routing/RouteSubscriber.php`文件。它将包含路由订阅者类：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code extends `RouteSubscribeBase` and implements the `alterRoutes()`
    method. We make an attempt to load the `mymodule.mypage` route, and, if it exists,
    we change its path to `my-page`. Since objects are always passed by reference,
    we do not need to return a value.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码扩展了`RouteSubscribeBase`并实现了`alterRoutes()`方法。我们尝试加载`mymodule.mypage`路由，如果存在，则将其路径更改为`my-page`。由于对象总是通过引用传递，我们不需要返回一个值。
- en: 'For Drupal to recognize the subscriber, we will need to describe it in the
    module''s `services.yml` file. In the base directory of your module, create a
    `mymodule.services.yml` file and add the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Drupal识别订阅者，我们需要在模块的`services.yml`文件中描述它。在你的模块基本目录中创建一个`mymodule.services.yml`文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This registers our route subscriber class as a service to the container so that
    Drupal can execute it when the event is fired.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们的路由订阅者类注册为容器中的服务，以便Drupal在事件触发时执行它。
- en: The *Creating an event subscriber* recipe later in this chapter will cover more
    about event dispatching and subscribing.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面的*创建事件订阅者*配方将涵盖更多关于事件分派和订阅的内容。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: Refer to the Symfony routing documentation at [http://symfony.com/doc/current/book/routing.html](http://symfony.com/doc/current/book/routing.html)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[http://symfony.com/doc/current/book/routing.html](http://symfony.com/doc/current/book/routing.html)上的Symfony路由文档
- en: Refer to [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml), *The Entity
    API*
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[*第10章*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml)，*实体API*
- en: Refer to the access checking on routes community documentation at [https://www.drupal.org/node/2122195](https://www.drupal.org/node/2122195)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://www.drupal.org/node/2122195](https://www.drupal.org/node/2122195)上的路由访问检查社区文档
- en: Defining permissions
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义权限
- en: In Drupal, there are roles and permissions used to define robust access control
    lists for users. Modules use permissions to check whether the current user has
    access to perform an action, view specific items, or do other operations. Modules
    then define the permissions that are used so that Drupal is aware of them. Developers
    can then construct roles, which are made up of enabled permissions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal中，有角色和权限用于定义用户强大的访问控制列表。模块使用权限来检查当前用户是否有权执行操作、查看特定项目或执行其他操作。然后模块定义使用的权限，以便Drupal了解它们。开发者可以构建角色，这些角色由启用的权限组成。
- en: In this recipe, we will define a new permission to view custom pages defined
    in a module. The permission will be added to a custom route and will restrict
    access to the route path to users who have a role containing the permission.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将定义一个新的权限来查看模块中定义的自定义页面。该权限将被添加到自定义路由中，并将访问限制为具有包含权限的角色的用户。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new module like the one in the first recipe. We will refer to the module
    as `mymodule` throughout the recipe. Use your module's name in the following recipe
    as appropriate.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的模块，就像第一个配方中的那样。在整个配方中，我们将把这个模块称为`mymodule`。在以下配方中，根据需要使用你的模块名称。
- en: This recipe also modifies a route defined in the module. We will refer to this
    route as `mymodule.mypage`. Modify the appropriate path in your module's `routing.yml`
    file.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方还会修改模块中定义的路由。我们将把这个路由称为`mymodule.mypage`。修改你模块的`routing.yml`文件中的适当路径。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Permissions are stored in a `permissions.yml` file. Add a `mymodule.permissions.yml`
    to the base directory of your module.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 权限存储在`permissions.yml`文件中。在你的模块基本目录中添加一个`mymodule.permissions.yml`。
- en: 'First, we will need to define the internal string used to identify this permission,
    such as `view mymodule pages`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义用于识别此权限的内部字符串，例如`查看我的模块页面`：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Each permission is a YAML array of data. We will need to provide a `title`
    key that will be displayed on the permissions page:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个权限都是一个包含数据的YAML数组。我们需要提供一个`title`键，该键将在权限页面上显示：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Permissions have a `description` key to provide details of the permission on
    the permissions page:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 权限有一个`description`键，用于在权限页面上提供权限的详细信息：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save your `permissions.yml` and edit the module's `routing.yml` to use the permission
    for controlling access to a route.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的`permissions.yml`并编辑模块的`routing.yml`以使用权限来控制对路由的访问。
- en: 'Modify the route''s `requirements` key to have a `_permission` key that is
    equal to the defined permission:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改路由的`requirements`键，使其包含一个等于定义权限的`_permission`键：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Go to Configuration and then to Performance in the DEVELOPMENT section and click
    on Clear all caches to rebuild Drupal's routes.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往配置，然后在开发部分的性能中点击清除所有缓存以重建Drupal的路由。
- en: 'Go to People and then to Permissions to add your permission as the authenticated
    user and anonymous user roles for My module!:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往人员，然后到权限，以认证用户和匿名用户角色为我的模块添加你的权限！：
- en: '![](img/a99e3644-f78c-4d2f-915a-3380c0cbacc1.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a99e3644-f78c-4d2f-915a-3380c0cbacc1.png)'
- en: Log out of your Drupal site and view the `/mypage` page. You will see the content,
    and will not receive an access denied page.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的Drupal站点注销并查看`/mypage`页面。你会看到内容，而不会收到访问拒绝页面。
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Permissions and roles are provided by the `User` module. The `user.permissions`
    service discovers the `permissions.yml` provided by installed modules. By default,
    the service is defined through the `\Drupal\user\PermissionHandler` class.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 权限和角色由`User`模块提供。`user.permissions`服务发现由已安装模块提供的`permissions.yml`。默认情况下，服务是通过`\Drupal\user\PermissionHandler`类定义的。
- en: Drupal does not save a list of all permissions that are available. The permissions
    for a system are loaded when the permissions page is loaded. Roles contain an
    array of permissions.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal不会保存所有可用权限的列表。当权限页面被加载时，系统的权限会被加载。角色包含一个权限数组。
- en: When checking a user's access for a permission, Drupal checks all the user's
    roles to see whether they support that permission.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查用户对某个权限的访问时，Drupal会检查所有用户角色，以查看它们是否支持该权限。
- en: You can pass an undefined permission to a user access check and not receive
    an error. The access check will simply fail unless the user is UID 1, which bypasses
    access checks.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一个未定义的权限传递给用户访问检查，而不会收到错误。除非用户是UID 1，否则访问检查将简单地失败。
- en: There's more...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: We will cover more ways to work with permissions in your modules in the upcoming
    sections.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍更多在模块中处理权限的方法。
- en: Restrict access flag for permissions
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限的访问限制标志
- en: 'Permissions can be flagged as having a security risk if enabled; this is the
    `restrict access` flag. When this flag is set to `restrict access: TRUE`, it will
    add a warning to the permission description.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '如果启用，权限可能会被标记为具有安全风险；这是`restrict access`标志。当此标志设置为`restrict access: TRUE`时，它将在权限描述中添加一个警告。'
- en: 'This allows module developers to provide more context to the amount of control
    a permission may give a user:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许模块开发者提供更多上下文，以说明权限可能给予用户的控制程度：
- en: '![](img/c8951919-0813-4509-95f6-524ca634b1b9.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c8951919-0813-4509-95f6-524ca634b1b9.png)'
- en: 'The permission definition from our recipe would look like the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从配方中定义的权限看起来会像以下这样：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Defining permissions programmatically
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式定义权限
- en: Permissions can be defined by a module programmatically or statically in a `YAML`
    file. A module needs to provide a `permission_callbacks` key in its `permissions.yml`
    that contains either an array of classes and their methods or a procedural function
    name.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 权限可以通过模块以编程方式或静态方式在 `YAML` 文件中定义。模块需要在它的 `permissions.yml` 中提供一个 `permission_callbacks`
    键，该键包含一个类及其方法的数组或一个过程函数名。
- en: 'For example, the Filter module provides granular permissions based on the different
    text filters created in Drupal:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，过滤器模块根据 Drupal 中创建的不同文本过滤器提供细粒度的权限：
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This tells the `user_permissions` service to execute the permissions method
    of the
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 `user_permissions` 服务执行权限方法
- en: '`\Drupal\Filter\FilterPermissions` class. The method is expected to return
    an array that matches the same structure as that of the `permissions.yml` file.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Filter\FilterPermissions` 类。该方法预期返回一个与 `permissions.yml` 文件相同结构的数组。'
- en: An example of using generated permissions will be covered in *Implementing custom
    access control for an entity* recipe of [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml),
    *The Entity API*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的权限的示例将在 [*第 10 章*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml)，*实体 API*
    的 *实现实体自定义访问控制* 菜谱中介绍。
- en: Checking whether a user has permissions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查用户是否有权限
- en: 'The user account interface provides a method for checking whether a user entity
    has a permission. To check whether the current user has a permission, you will
    get the current user, and you need to invoke the `hasPermission` method:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 用户账户界面提供了一个检查用户实体是否有权限的方法。要检查当前用户是否有权限，你需要获取当前用户，并需要调用 `hasPermission` 方法：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `\Drupal::currentUser()` method returns the current active user object.
    This allows you to check whether the active user has the necessary permissions
    to perform certain types of actions.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal::currentUser()` 方法返回当前活动的用户对象。这允许你检查活动用户是否有执行某些类型操作所必需的权限。'
- en: Providing the configuration on the installation or update
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在安装或更新时提供配置
- en: Drupal provides a configuration management system, which is discussed in [*Chapter
    9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration Management - Deploying
    in Drupal 8*, and modules can provide configuration on an installation or through
    an update system. Modules provide the configuration through `YAML` files when
    they are first installed. Once the module is enabled, the configuration is then
    placed in the configuration management system; however updates can be made to
    the configuration in code through the Drupal update system.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 提供了一个配置管理系统，这在 [*第 9 章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，*配置管理
    - 在 Drupal 8 中部署* 中有讨论，模块可以在安装或通过更新系统提供配置。模块在首次安装时通过 `YAML` 文件提供配置；然而，可以通过 Drupal
    更新系统在代码中对配置进行更新。
- en: In this recipe, we will provide a configuration YAML that creates a new contact
    form and then manipulates it through a schema version change in the update system.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将提供一个配置 YAML，它创建一个新的联系表单，然后通过更新系统中的模式版本更改来操作它。
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new module like the one in the first recipe. We will refer to the module
    as `mymodule` throughout the recipe. Use your module's appropriate name where
    necessary.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个类似于第一个菜谱中的新模块。在整个菜谱中，我们将把这个模块称为 `mymodule`。在必要时，请使用你模块的适当名称。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a `config` folder in your module's base directory. Drupal requires its
    configuration YAML to be in a subfolder of `config`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你模块的基本目录中创建一个 `config` 文件夹。Drupal 要求其配置 YAML 必须位于 `config` 的子文件夹中。
- en: Create a folder named `install` in the `config` folder. The configuration YAML
    in this folder will be imported on module installation.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config` 文件夹中创建一个名为 `install` 的文件夹。此文件夹中的配置 YAML 将在模块安装时导入。
- en: In the `install` folder, create a `contact.form.contactus.yml` to store the
    YAML definition of the contact form, Contact Us:![](img/7ec6fd6a-85a9-4d4e-879a-6683f5a26cd9.png)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `install` 文件夹中，创建一个 `contact.form.contactus.yml` 文件来存储联系表单的 YAML 定义，联系我们：![img/7ec6fd6a-85a9-4d4e-879a-6683f5a26cd9.png]
- en: 'We will define the configuration of a contact form based on the `contact.schema.yml`
    file provided by the Contact module. Add the following YAML content into the file:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将根据 Contact 模块提供的 `contact.schema.yml` 文件定义联系表单的配置。将以下 YAML 内容添加到文件中：
- en: '[PRE27]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The configuration entry is based on a schema definition, which we will cover
    in [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration Management
    - Deploying in Drupal 8*. The `langcode`, `status`, and `dependencies` are the
    required configuration management keys.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 配置条目基于模式定义，我们将在[*第9章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，“配置管理 - 在Drupal
    8中部署”中介绍。`langcode`、`status`和`dependencies`是必需的配置管理键。
- en: The `id` is the contact form's machine name and the label is the human display
    name. The `recipients` key is a YAML array of valid email addresses. The reply
    key is a string of text for the Auto-reply field. Finally, the `weight` defines
    the form's weight in the administrative list.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`是联系表单的机器名称，而`label`是人类的显示名称。`recipients`键是一个有效的电子邮件地址的YAML数组。`reply`键是自动回复字段的文本字符串。最后，`weight`定义了表单在管理列表中的权重。'
- en: Go to Extend and enable your module to import the configuration item.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“扩展”并启用您的模块以导入配置项。
- en: 'The Contact Us form will now be located on the Contact forms overview page,
    located under Structure:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 联系我们表单现在将位于“联系表单概览”页面，位于“结构”下：
- en: '![](img/bd7ce3f0-23f9-44b5-a308-7234f5798d9c.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd7ce3f0-23f9-44b5-a308-7234f5798d9c.png)'
- en: Create a `mymodule.install` file in the module's base directory. Drupal checks
    `.install` files for update hooks.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的基本目录中创建一个`mymodule.install`文件。Drupal检查`.install`文件以查找更新钩子。
- en: 'We will create a function called `mymodule_update_8001()` that will be read
    by the update system and make our configuration changes:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`mymodule_update_8001()`的函数，该函数将被更新系统读取并执行我们的配置更改：
- en: '[PRE28]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function uses the entity's class to load our configuration entity object.
    It loads `contactus`, which our module has provided, and sets the reply property
    to a new value.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用实体的类来加载我们的配置实体对象。它加载了我们的模块提供的`contactus`，并将回复属性设置为新的值。
- en: 'Go to `/update.php` in your browser to run the Drupal''s database update system.
    Click on Apply pending updates to run the update system:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中前往`/update.php`以运行Drupal的数据库更新系统。点击“应用挂起更新”以运行更新系统：
- en: '![](img/e0a0ed6a-4e35-4f01-9579-b84f037769c7.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0a0ed6a-4e35-4f01-9579-b84f037769c7.png)'
- en: Review the Contact Us form settings and verify that the reply message has been
    set.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查联系我们表单设置并验证回复消息是否已设置。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal's `moduler_installer` service, provided through `\Drupal\Core\Extension\ModuleInstaller`,
    ensures that configuration items defined in the module's `config` folder are processed
    on installation. When a module is installed, the `config.installer` service, provided
    through `\Drupal\Core\Config\ConfigInstaller`, is called to process the module's
    default configuration.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal的`moduler_installer`服务，通过`\Drupal\Core\Extension\ModuleInstaller`提供，确保在安装时处理模块的`config`文件夹中定义的配置项。当安装模块时，通过`\Drupal\Core\Config\ConfigInstaller`提供的`config.installer`服务被调用以处理模块的默认配置。
- en: In the event, the `config.installer` service makes an attempt to import the
    configuration from the `install` folder that already exists, and an exception
    will be thrown. Modules cannot provide changes made to the existing configuration
    through static YAML definitions.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件中，`config.installer`服务尝试从已存在的`install`文件夹导入配置，并将抛出异常。模块不能通过静态YAML定义提供对现有配置所做的更改。
- en: Since modules cannot adjust configuration objects through static YAML definitions
    provided to Drupal, they can utilize the database update system to modify the
    configuration. Drupal utilizes a schema version for modules. The base schema version
    for a module is `8000`. Modules can provide update hooks in the form of `hook_update_N`,
    where `N` represents the next schema version. When Drupal's updates are run, they
    will execute the proper update hooks and update the module's schema version.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块不能通过提供给Drupal的静态YAML定义来调整配置对象，因此它们可以利用数据库更新系统来修改配置。Drupal为模块使用模式版本。模块的基本模式版本是`8000`。模块可以提供`hook_update_N`形式的更新钩子，其中`N`代表下一个模式版本。当Drupal运行更新时，它们将执行适当的更新钩子并更新模块的模式版本。
- en: Configuration objects are immutable by default. To edit a configuration, a mutable
    object needs to be loaded through the configuration factory service.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象默认是不可变的。要编辑配置，需要通过配置工厂服务加载可变对象。
- en: There's more...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: We will discuss configuration in [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml),
    *Configuration Management - Deploying in Drupal 8*; however, we will now dive
    into some important notes when working with modules and configurations.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第9章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，*配置管理 - 在 Drupal 8 中部署*中讨论配置；然而，现在我们将深入探讨在处理模块和配置时的一些重要注意事项。
- en: Configuration subdirectories
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置子目录
- en: 'There are three directories that the configuration management system will inspect
    in a module''s `config` folder, which are as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理系统将在模块的 `config` 文件夹中检查三个目录，如下所示：
- en: '`install`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`'
- en: '`optional`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optional`'
- en: '`schema`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema`'
- en: 'The `install` folder specifies the configuration that will be imported. If
    the configuration object exists, the installation will fail. The `optional` folder
    contains the configuration that will be installed if the following conditions
    are met:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`install` 文件夹指定要导入的配置。如果配置对象存在，安装将失败。`optional` 文件夹包含在以下条件满足时将安装的配置：'
- en: The configuration does not already exist
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置尚未存在
- en: It is a configuration entity
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个配置实体
- en: Its dependencies can be met
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其依赖关系可以满足
- en: If any one of the conditions fails, the configuration will not be installed,
    but it will not halt the module's installation process.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何一个条件失败，配置将不会安装，但不会停止模块的安装过程。
- en: The `schema` folder provides configuration object definitions. This uses YAML
    definitions to structure configuration objects, and is covered in depth in [*Chapter
    9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration Management - Deploying
    in Drupal 8*.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`schema` 文件夹提供配置对象定义。这使用 YAML 定义来结构化配置对象，并在[*第9章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，*配置管理
    - 在 Drupal 8 中部署*中进行了深入探讨。'
- en: Modifying the existing configuration on installation
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在安装时修改现有配置
- en: The configuration management system does not allow modules to provide configuration
    on an installation that already exists. For example, if a module tries to provide
    `system.site` and defines the site's name, it would fail to install. This is because
    the system module provides this configuration object when you first install Drupal.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理系统不允许模块在已存在的安装上提供配置。例如，如果模块尝试提供 `system.site` 并定义站点的名称，它将无法安装。这是因为当您首次安装
    Drupal 时，系统模块提供了此配置对象。
- en: 'Drupal provides `hook_install()` that modules can implement in their `.install`
    file. This hook is executed during the module''s installation process. The following
    code will update the site''s title to *Drupal 8 Cookbook*! on the module''s installation:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 提供了 `hook_install()`，模块可以在其 `.install` 文件中实现。此钩子在模块的安装过程中执行。以下代码将在模块安装时将站点标题更新为
    *Drupal 8 Cookbook*！
- en: '[PRE29]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Configurable objects are immutable by default when loaded by the default `config`
    service. To modify a configuration object, you will need to use the configuration
    factory to receive a mutable object. The mutable object can have `set` and `save`
    methods that are executed to update the configuration in a configuration object.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可配置对象在默认的 `config` 服务加载时默认是不可变的。要修改配置对象，您需要使用配置工厂来接收一个可变对象。可变对象可以有 `set` 和 `save`
    方法，这些方法用于在配置对象中更新配置。
- en: See also
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [*Chapter 9*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml), *Configuration
    Management - Deploying in Drupal 8*
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见[*第9章*](b2659986-a8dc-4503-a043-6071ab7b6722.xhtml)，*配置管理 - 在 Drupal 8 中部署*
- en: Creating an event subscriber
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建事件订阅者
- en: New to Drupal 8 is the event dispatcher system. One of the many benefits of
    Drupal is the ability to react to specific processes and alter or react to them.
    Unlike the hook system that exists in Drupal 8, and has for many versions of Drupal,
    the event dispatch system uses explicit registration to an event.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 的新特性之一是事件调度系统。Drupal 的许多优点之一是能够对特定过程做出反应并对其进行更改或做出反应。与存在于 Drupal 8
    中并且已经存在许多版本的 Drupal 中的钩子系统不同，事件调度系统使用显式注册到事件。
- en: The events dispatcher system comes from the Symfony framework and allows components
    to easily interact with one another. Within Drupal, and integrated Symfony components,
    events are dispatched, and event subscribers can listen to the events and react
    to changes or other processes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 事件调度系统来自 Symfony 框架，允许组件之间轻松交互。在 Drupal 中，集成的 Symfony 组件会触发事件，事件订阅者可以监听事件并对更改或其他过程做出反应。
- en: In this recipe, we will subscribe to the `REQUEST` event, which fires when a
    request is first handled. If the user is not logged in, we will navigate them
    to the login page.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将订阅 `REQUEST` 事件，该事件在请求首次处理时触发。如果用户未登录，我们将将其导航到登录页面。
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create `src/EventSubscriber/RequestSubscriber.php` in your module.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块中创建 `src/EventSubscriber/RequestSubscriber.php`。
- en: 'Define the `RequestSubscriber` class, which implements the `EventSubscriberInterface`
    interface:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `RequestSubscriber` 类，该类实现了 `EventSubscriberInterface` 接口：
- en: '[PRE30]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To satisfy the interface requirements, we must add a `getSubscribedEvents`
    method. This tells the system which events we are subscribing to and the method
    that needs to be invoked:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了满足接口要求，我们必须添加一个 `getSubscribedEvents` 方法。这告诉系统我们正在订阅哪些事件以及需要调用的方法：
- en: '[PRE31]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `KernelEvents` class provides constants for available events. Our returned
    array specifies the method to invoke and its priority for that event.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`KernelEvents` 类提供了可用事件的常量。我们返回的数组指定了要调用的方法和该事件的优先级。'
- en: Priorities will be discussed in the *How it works*... section. It is provided
    in the example to resolve possible conflicts when the `dynamic_page_cache` module
    is enabled.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级将在 *如何工作*... 部分讨论。它提供在启用 `dynamic_page_cache` 模块时解决可能冲突的示例。
- en: 'Create the `doAnonymousRedirect` method we specified, which will receive a
    `GetResponseEvent` argument:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们指定的 `doAnonymousRedirect` 方法，该方法将接收一个 `GetResponseEvent` 参数：
- en: '[PRE32]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To prevent a redirect loop, we will use the `RouteMatch` service to get the
    current route object and verify that we are not already on the `user.login` route
    page.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止重定向循环，我们将使用 `RouteMatch` 服务来获取当前路由对象并验证我们是否已经在 `user.login` 路由页面。
- en: Then we check whether the user is anonymous and, if the user is anonymous, set
    the event's response to a redirect response.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查用户是否为匿名用户，如果是匿名用户，则将事件的响应设置为重定向响应。
- en: Now that we have created our class, create a `mymodule.services.yml` file in
    your module's directory.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的类，在你的模块目录中创建一个 `mymodule.services.yml` 文件。
- en: We must register our class with the service container so that Drupal understands
    that it will act as an event subscriber.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须将我们的类注册到服务容器中，以便 Drupal 理解它将作为事件订阅者。
- en: '[PRE33]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `event_subscriber` tag tells the container to invoke the `getSubscribedEvents`
    method and register its methods.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`event_subscriber` 标签告诉容器调用 `getSubscribedEvents` 方法并注册其方法。'
- en: Install the module or rebuild Drupal's caches if it has been already installed.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果模块已经安装，请安装模块或重建 Drupal 的缓存。
- en: Navigate to any page as an anonymous user--you will be redirected to the login
    form.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以匿名用户身份访问任何页面--你将被重定向到登录表单。
- en: How it works...
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*如何工作*...'
- en: Throughout Drupal and Symfony components, and even other third-party PHP libraries,
    events can be passed to the event dispatcher. The `event_dispatcher` service in
    Drupal is an optimized version of the one provided by Symfony, but is completely
    interoperable.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Drupal 和 Symfony 组件中，甚至在其他第三方 PHP 库中，事件可以被传递给事件调度器。Drupal 中的 `event_dispatcher`
    服务是 Symfony 提供的优化版本，但完全兼容。
- en: When the container is built, all services tagged as `event_subscribers` are
    gathered. They are then registered into the `event_dispatcher` service, keyed
    by the events returned in the `getSubscribedEvents` method.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器构建时，所有标记为 `event_subscribers` 的服务都被收集。然后它们被注册到 `event_dispatcher` 服务中，键为
    `getSubscribedEvents` 方法返回的事件。
- en: When the `event_dispatcher` service is told to dispatch an event, it invokes
    the proper methods on all subscribed services. With `KernelEvents::REQUEST`, `KernelEvents::EXCEPTION`
    and `KernelEvents::VIEW`, you have the opportunity to provide a response before
    the controller is invoked. Then there are events, such as `ConfigEvents::SAVE`
    and `ConfigEvents::DELETE`, that are dispatched and allow you to react to a configuration
    being saved or deleted but are not actually able to adjust the configuration entity
    directly through the event object.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `event_dispatcher` 服务被告知分发一个事件时，它将在所有已订阅的服务上调用适当的方法。对于 `KernelEvents::REQUEST`、`KernelEvents::EXCEPTION`
    和 `KernelEvents::VIEW`，你有机会在控制器被调用之前提供响应。然后还有像 `ConfigEvents::SAVE` 和 `ConfigEvents::DELETE`
    这样的事件被分发，允许你对配置的保存或删除做出反应，但实际上无法通过事件对象直接调整配置实体。
- en: There's more...
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Event subscribers require knowledge of creating services, registering them,
    and even dependency injection. We'll discuss this some more in the next section.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 事件订阅者需要了解创建服务、注册它们以及甚至依赖注入。我们将在下一节中进一步讨论。
- en: Using dependency injection
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用依赖注入
- en: With Drupal 8 and the implementation of a service container comes the concept
    of dependency injection. Dependency injection is a software design concept, and
    at its base level, it provides a means to use a class without having to directly
    reference it. In our example, we retrieve services multiple times using the global
    static class `\Drupal`. This is bad practice within services, and can make testing
    more difficult.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Drupal 8 和服务容器的实现，引入了依赖注入的概念。依赖注入是一种软件设计概念，在其基本层面上，它提供了一种使用类而不必直接引用它的方法。在我们的例子中，我们多次使用全局静态类
    `\Drupal` 来检索服务。这在服务中是一种不良做法，可能会使测试变得更加困难。
- en: 'To implement dependency injection, first, we will add a constructor to our
    class that accepts the services used (`current_route_match` and `current_user`)
    and matches protected properties to store them:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现依赖注入，首先，我们将向我们的类添加一个构造函数，该构造函数接受使用的服务（`current_route_match` 和 `current_user`）并将受保护的属性匹配以存储它们：
- en: '[PRE34]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can then replace any calls to `\Drupal::` with `$this->`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以替换任何对 `\Drupal::` 的调用为 `$this->`：
- en: '[PRE35]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, we will update `mymodule.services.yml` to specify our constructor
    arguments so that they will be injected when the container runs our event subscriber:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更新 `mymodule.services.yml` 以指定我们的构造函数参数，以便在容器运行我们的事件订阅者时进行注入：
- en: '[PRE36]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Dependency injection feels and seems magical at first. However, with use and
    practice, it will begin to make more sense and become second nature when developing
    with Drupal 8.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入一开始感觉和看起来都很神奇。然而，随着使用和实践，它将开始变得更有意义，并在使用 Drupal 8 开发时变得习以为常。
- en: See also
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考信息
- en: Refer to the Drupal.org API documentation for events and a list of available
    events at [https://api.drupal.org/api/drupal/core%21core.api.php/group/events/8.3.x](https://api.drupal.org/api/drupal/core%21core.api.php/group/events/8.3.x)
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Drupal.org API 文档中的事件和可用事件列表，链接为 [https://api.drupal.org/api/drupal/core%21core.api.php/group/events/8.3.x](https://api.drupal.org/api/drupal/core%21core.api.php/group/events/8.3.x)
- en: Refer to the Drupal.org API documentation on services and dependency injection
    at [https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.3.x](https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.3.x)
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Drupal.org API 文档中关于服务和依赖注入的内容，链接为 [https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.3.x](https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.3.x)
- en: Using Features 3.0
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Features 3.0
- en: Many Drupal users create custom modules to provide specific sets of features
    that they can reuse across multiple sites. In fact, there is a module for the
    sole purpose of providing a means to export configuration and create modules that
    provide features. This is how the Features module received its name, in fact.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Drupal 用户创建自定义模块以提供特定的功能集，他们可以在多个网站上重复使用这些功能。事实上，有一个模块专门用于提供导出配置和创建提供功能的模块的方法。这就是
    Features 模块得名的原因。
- en: The Features module has two submodules. The main Features module provides all
    the functionalities. The Features UI module provides a user interface to create
    and manage features.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Features 模块有两个子模块。主 Features 模块提供所有功能。Features UI 模块提供了一个用户界面来创建和管理功能。
- en: We will use Features to export a module with a configuration that contains the
    default page and article content types provided by the standard installation so
    that they can be used on other installation profiles.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Features 导出包含默认页面和文章内容类型的配置模块，以便它们可以在其他安装配置文件中使用。
- en: How to do it...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we will install the Features module using Composer, which will also
    download its dependency, the **Configuration Update Manager** module:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 Composer 安装 Features 模块，这将同时下载其依赖项，即 **配置更新管理器** 模块：
- en: '[PRE37]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Go to Extend and install the Features UI module, confirming the requirements
    to install Features and Configuration Update Manager as well.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“扩展”并安装 Features UI 模块，确认安装 Features 和配置更新管理器的需求。
- en: Go to Configuration, and in the DEVELOPMENT section, you will find the link
    to access the Features user interface; click on Features:![](img/e1b494ea-73af-44e3-a591-076d3681bf4d.png)
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往“配置”，在“开发”部分中，你会找到访问 Features 用户界面的链接；点击 Features：![图片](img/e1b494ea-73af-44e3-a591-076d3681bf4d.png)
- en: Click on Create new feature to start making a custom Feature module.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新功能”以开始制作自定义功能模块。
- en: Provide a `Name` for the feature, such as Content Authoring.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为功能提供“名称”，例如内容创作。
- en: Optionally, you can provide a description. This acts as the `description` key
    in the module's `info.yml`.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，你可以提供描述。这作为模块的 `info.yml` 文件中的 `description` 键。
- en: Toggle the Content types grouping and check the Article and Basic Page checkboxes
    to mark them for export.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换内容类型分组并勾选文章和基本页面复选框以标记它们用于导出。
- en: The Features module will automatically add detected dependencies or important
    configuration items to also be exported, such as fields and view modes:![](img/74b49b41-5338-4baa-91ea-4c9047d445ac.png)
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能模块将自动添加检测到的依赖项或重要的配置项，例如字段和视图模式，以便也导出：![图片](img/74b49b41-5338-4baa-91ea-4c9047d445ac.png)
- en: Click on Write to write the module to export the module and configuration to
    the `/modules/custom` directory in your Drupal site.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击写入，将模块写入导出到你的Drupal站点`/modules/custom`目录中的模块和配置。
- en: Go to Extend, search for the Content Authoring module, and install your newly
    created module.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往扩展，搜索内容创作模块，并安装你新创建的模块。
- en: How it works...
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Features exports static YAML configuration files into the module's `config/install`
    folder. Features modifies the standard configuration management workflow by ensuring
    that a specific kind of configuration exists. Configuration management does not
    allow modules to overwrite existing configuration objects, but Features manages
    and allows this to happen.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 功能将静态YAML配置文件导出到模块的`config/install`文件夹中。功能通过确保存在特定类型的配置来修改标准的配置管理工作流程。配置管理不允许模块覆盖现有的配置对象，但功能管理和允许这样做。
- en: To accomplish this, Features provides `\Drupal\features\FeaturesConfigInstaller`,
    which extends the default `config.install` service class. It then alters the services
    definition to use its `FeaturesConfigInstaller` class instead of the default `\Drupal\Core\Config\ConfigInstaller`
    class.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，功能（Features）提供了`\Drupal\features\FeaturesConfigInstaller`，它扩展了默认的`config.install`服务类。然后它修改服务定义以使用其`FeaturesConfigInstaller`类而不是默认的`\Drupal\Core\Config\ConfigInstaller`类。
- en: Beyond adjusting the `config.install` service, Features harnesses all the functionalities
    of the configuration management system to provide a simpler way to generate modules.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调整`config.install`服务外，功能（Features）利用了配置管理系统的所有功能，以提供一种更简单的方式来生成模块。
- en: 'Any module can be considered a Feature''s module by adding the `features: true`
    key to its `info.yml`. This will allow it to be managed through the Features UI.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '任何模块都可以通过在它的`info.yml`中添加`features: true`键来被视为功能模块。这将允许通过功能UI来管理它。'
- en: There's more...
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Features is a robust tool to easily provide bundled configuration; we will discuss
    more ways to use the Features module in the next section.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 功能是一个强大的工具，可以轻松提供捆绑配置；我们将在下一节中讨论更多使用功能模块的方法。
- en: Suggested feature modules
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐的功能模块
- en: The Features module provides an intelligent bundling method that reviews the
    current Drupal site's configuration and suggests feature modules that should be
    created to preserve the configuration. These are provided through package assignment
    plugins.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 功能模块提供了一个智能捆绑方法，它审查当前Drupal站点的配置，并建议应该创建以保留配置的功能模块。这些通过包分配插件提供。
- en: 'These plugins use logic to assign configurations to specific packages:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件使用逻辑将配置分配给特定的包：
- en: '![](img/896394f8-b6f6-4ffd-bccc-3fcc6dcee182.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/896394f8-b6f6-4ffd-bccc-3fcc6dcee182.png)'
- en: When you visit the Features UI, it will present you with suggested feature modules
    to be exported. Expanding the items will list the configuration items that will
    be bundled. Clicking on the suggested feature's link opens the creation form.
    Alternatively, the checkbox can be used in conjunction with the Download archive
    or Write button at the bottom of the form.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当你访问功能UI时，它将向你展示建议导出的功能模块。展开项目将列出将要捆绑的配置项。点击建议功能链接将打开创建表单。或者，可以使用复选框与表单底部的下载存档或写入按钮一起使用。
- en: The unpackaged section shows a configuration that has not met any of the packaging
    rules to group the configuration into a specified module. This will need to be
    manually added to a created feature module.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 未打包部分显示了一个未满足任何打包规则以将配置分组到指定模块的配置。这需要手动添加到创建的功能模块中。
- en: Features bundles
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能捆绑包
- en: 'In the Features module, there are bundles, and bundles have their own assignment
    method configurations. The purpose of bundles inside Features is to provide an
    automatic assignment of configuration that can be grouped into exported modules:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能模块中，有捆绑包，捆绑包有自己的分配方法配置。功能内部捆绑包的目的是提供一种可以将配置分组到导出模块中的自动分配配置：
- en: '![](img/c3db51c3-3e21-4c38-8d16-5d5090e8bb5b.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c3db51c3-3e21-4c38-8d16-5d5090e8bb5b.png)'
- en: A bundle has a human display name and machine name. The bundle's machine name
    will be prefixed on all feature modules generated under this bundle. You also
    can specify the bundle to act as an installation profile. The features UI was
    heavily used in Drupal 7 to construct distributions and spawn the concept of the
    bundle functionality.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一个捆绑包有一个人类显示名称和机器名称。该捆绑包的机器名称将作为前缀添加到该捆绑包下生成的所有功能模块。你还可以指定捆绑包作为安装配置文件。在 Drupal
    7 中，features UI 被广泛用于构建发行版和产生捆绑包功能的概念。
- en: Assignment methods can be rearranged and configured to your liking.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重新排列和配置分配方法，以满足你的需求。
- en: Managing the configuration state of Features
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Features的配置状态
- en: The Features UI provides a means to review changes to the feature's configuration
    that may have been made. If a configuration item controlled by a feature module
    has been modified, it will show up under the differences section of the Features
    UI. This will allow you to import or update the Feature module with the change.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Features UI 提供了一种方式来查看对功能配置所做的更改。如果一个由功能模块控制的项目被修改了，它将在 Features UI 的差异部分显示出来。这将允许你导入或更新功能模块以包含这些更改。
- en: 'The Import option will force the site to use the configuration defined in the
    module''s configuration `YAML` files. For example, in the following screenshot
    we have an exported content type whose description was modified in the user interface
    after being exported:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 导入选项将强制网站使用模块配置 `YAML` 文件中定义的配置。例如，在下面的屏幕截图中，我们有一个导出的内容类型，其描述在导出后在用户界面中被修改了：
- en: '![](img/f1130b56-93d9-4f5b-9207-9c8ab5b62361.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1130b56-93d9-4f5b-9207-9c8ab5b62361.png)'
- en: The difference created by the feature module is highlighted. If the difference
    was checked, and if you click on Import changes, the content type's description
    would be reset to that defined in the configuration.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 功能模块创建的差异被突出显示。如果检查了差异，并且你点击了“导入更改”，内容类型的描述将重置为配置中定义的版本。
- en: From the main features overview table, the feature module can be re-exported
    to include the change and update the exported YAML files.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 从主要功能概览表中，可以将功能模块重新导出以包含更改并更新导出的 YAML 文件。
- en: See also
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: "Refer to the Drupal.org handbook for the Features module at [https://www.drupal.org/docs/8/modules/features\uFEFF\
    ](https://www.drupal.org/docs/8/modules/features)"
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 Drupal.org 手册中的 Features 模块，链接为 [https://www.drupal.org/docs/8/modules/features](https://www.drupal.org/docs/8/modules/features)
