- en: Chapter 2. Web Applications with PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 PHP网络应用
- en: Web applications are a common thing in our lives, and they are usually very
    user friendly; users do not need to understand how they work behind the scenes.
    As a developer, though, you need to understand how your application works internally.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用在我们的生活中很常见，并且通常非常用户友好；用户不需要了解它们在幕后是如何工作的。然而，作为一个开发者，你需要了解你的应用程序是如何内部工作的。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: HTTP and how web applications make use of it
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP以及网络应用如何使用它
- en: Web applications and how to build a simple one
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用以及如何构建一个简单的应用
- en: Web servers and how to launch your PHP built-in web server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务器以及如何启动你的PHP内置网络服务器
- en: The HTTP protocol
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP协议
- en: If you check the RFC2068 standard at [https://tools.ietf.org/html/rfc2068](https://tools.ietf.org/html/rfc2068),
    you will see that its description is almost endless. Luckily, what you need to
    know about this protocol, at least for starters, is way shorter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看RFC2068标准[https://tools.ietf.org/html/rfc2068](https://tools.ietf.org/html/rfc2068)，你会看到其描述几乎是无穷无尽的。幸运的是，你至少需要了解有关此协议的信息，其长度要短得多。
- en: '**HTTP** stands for **HyperText Transfer Protocol**. As any other protocol,
    the goal is to allow two entities or nodes to communicate with each other. In
    order to achieve this, the messages need to be formatted in a way that they both
    understand, and the entities must follow some pre-established rules.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP**代表**超文本传输协议**。与其他任何协议一样，目标是允许两个实体或节点相互通信。为了实现这一点，消息需要以双方都能理解的方式进行格式化，并且实体必须遵循一些预先设定的规则。'
- en: A simple example
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: 'The following diagram shows a very basic interchange of messages:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图显示了非常基本的消息交换：
- en: '![A simple example](img/00013.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的例子](img/00013.jpeg)'
- en: A simple GET request
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的GET请求
- en: 'Do not worry if you do not understand all the elements in this diagram; we
    will describe them shortly. In this representation, there are two entities: **sender**
    and **receiver**. The sender sends a message to the receiver. This message, which
    starts the communication, is called the request. In this case, the message is
    a GET request. The receiver receives the message, processes it, and generates
    a second message: the response. In this case, the response shows a 200 status
    code, meaning that the request was processed successfully.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不懂这张图中的所有元素，请不要担心；我们很快就会描述它们。在这个表示中，有两个实体：**发送者**和**接收者**。发送者向接收者发送一条消息。这条开始通信的消息被称为请求。在这种情况下，消息是一个GET请求。接收者接收消息，处理它，并生成第二条消息：响应。在这种情况下，响应显示200状态码，意味着请求已成功处理。
- en: HTTP is stateless; that is, it treats each request independently, unrelated
    to any previous one. This means that with this request and response sequence,
    the communication is finished. Any new requests will not be aware of this specific
    interchange of messages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是无状态的；也就是说，它独立地处理每个请求，与之前的任何请求无关。这意味着，在这个请求和响应序列之后，通信就结束了。任何新的请求都不会意识到这个特定的消息交换。
- en: Parts of the message
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息的部分
- en: An HTTP message contains several parts. We will define only the most important
    of them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个HTTP消息包含几个部分。我们只定义其中最重要的部分。
- en: URL
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URL
- en: The URL of the message is the destination of the message. The request will contain
    the receiver's URL, and the response will contain the sender's.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的URL是消息的目的地。请求将包含接收者的URL，而响应将包含发送者的。
- en: 'As you might know, the URL can contain extra parameters, known as a query string.
    This is used when the sender wants to add extra data. For example, consider this
    URL: `http://myserver.com/greeting?name=Alex`. This URL contains one parameter:
    `name` with the value `Alex`. It could not be represented as part of the URL `http://myserver.com/greeting`,
    so the sender chose to add it at the end of it. You will see later that this is
    not the only way that we can add extra information into a message.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，URL可以包含额外的参数，称为查询字符串。当发送者想要添加额外数据时使用它。例如，考虑这个URL：`http://myserver.com/greeting?name=Alex`。这个URL包含一个参数：`name`，其值为`Alex`。它不能作为`http://myserver.com/greeting`
    URL的一部分来表示，因此发送者选择将其添加到URL的末尾。你稍后会发现，这并不是我们向消息中添加额外信息的唯一方式。
- en: The HTTP method
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP方法
- en: The HTTP method is the verb of the message. It identifies what kind of action
    the sender wants to perform with this message. The most common ones are GET and
    POST.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP方法是消息的动词。它标识了发送者想要通过此消息执行哪种类型的操作。最常见的是GET和POST。
- en: '**GET**: This asks the receiver about something, and the receiver usually sends
    this information back. The most common example is asking for a web page, where
    the receiver will respond with the HTML code of the requested page.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET**：这是询问接收者某事，接收者通常会发送此信息。最常见的情况是请求一个网页，接收者将响应请求页面的HTML代码。'
- en: '**POST**: This means that the sender wants to perform an action that will update
    the data that the receiver is holding. For example, the sender can ask the receiver
    to update his profile name.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**POST**：这意味着发送者想要执行一个将更新接收者所持数据的操作。例如，发送者可以要求接收者更新其个人资料名称。'
- en: There are other methods, such as **PUT**, **DELETE**, or **OPTION**, but they
    are less used in web development, although they play a crucial role in REST APIs,
    which will be explained in [Chapter 9](part0079_split_000.html#2BASE1-edcc22b134104d5db0bf3aa086c86851
    "Chapter 9. Building REST APIs"), *Building REST APIs*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法，例如**PUT**、**DELETE**或**OPTION**，但在Web开发中它们的使用较少，尽管它们在REST API中扮演着至关重要的角色，这将在[第9章](part0079_split_000.html#2BASE1-edcc22b134104d5db0bf3aa086c86851
    "第9章。构建REST API")*构建REST API*中解释。
- en: Body
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主体
- en: The body part is usually present in response messages even though a request
    message can contain it too. The body of the message contains the content of the
    message itself; for example, if the user requested a web page, the body of the
    response would consist of the HTML code that represents this page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管请求消息也可以包含它，但主体部分通常存在于响应消息中。消息的主体包含消息本身的内容；例如，如果用户请求了一个网页，响应的主体将包含表示此页面的HTML代码。
- en: Soon, we will discuss how the request can also contain a body, which is used
    to send extra information as part of the request, such as form parameters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们将讨论请求也可以包含主体，这用于在请求中发送额外信息，例如表单参数。
- en: The body can contain text in any format; it can be an HTML text that represents
    a web page, plain text, the content of an image, JSON, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 主体可以包含任何格式的文本；它可以是一个表示网页的HTML文本，纯文本，图像内容，JSON等等。
- en: Headers
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 头部
- en: The headers on an HTTP message are the metadata that the receiver needs in order
    to understand the content of the message. There are a lot of headers, and you
    will see some of them in this book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP消息的头部是接收者为了理解消息内容所需的元数据。有很多头部，你将在本书中看到一些。
- en: 'Headers consist of a map of key-value pairs. The following could be the headers
    of a request:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 头部由键值对的映射组成。以下可能是一个请求的头部：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This request tells the receiver, which is a server, that it will accept text
    as HTML, which is the common way of representing a web page; and that it has a
    cookie named Richard.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个请求告诉接收者（即服务器），它将接受文本作为HTML，这是表示网页的常见方式；并且它有一个名为Richard的cookie。
- en: The status code
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态码
- en: The status code is present in responses. It identifies the status of the request
    with a numeric code so that browsers and other tools know how to react. For example,
    if we try to access a URL that does not exist, the server should reply with a
    status code 404\. In this way, the browser knows what happened without even looking
    at the content of the response.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码存在于响应中。它使用数字代码标识请求的状态，以便浏览器和其他工具知道如何响应。例如，如果我们尝试访问一个不存在的URL，服务器应该回复状态码404。这样，浏览器就知道发生了什么，甚至不需要查看响应的内容。
- en: 'Common status codes are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的状态码有：
- en: '**200**: The request was successful'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**200**：请求成功'
- en: '**401**: Unauthorized; the user does not have permission to see this resource'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**401**：未授权；用户没有查看此资源的权限'
- en: '**404**: Page not found'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**404**：页面未找到'
- en: '**500**: Internal server error; something wrong happened on the server side
    and it could not be recovered'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**500**：内部服务器错误；服务器端发生了错误，无法恢复'
- en: A more complex example
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更复杂的示例
- en: 'The following diagram shows a POST request and its response:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了POST请求及其响应：
- en: '![A more complex example](img/00014.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![一个更复杂的示例](img/00014.jpeg)'
- en: A more complex POST request
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的POST请求
- en: 'In this exchange of messages, we can see the other important method, POST,
    in action. In this case, the sender tries to send a request in order to update
    some entity''s data. The message contains a cookie ID with the value **84**, which
    may identify the entity to update. It also contains two parameters in the body:
    `name` and `age`. This is the data that the receiver has to update.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个消息交换中，我们可以看到另一个重要的方法POST正在发挥作用。在这种情况下，发送者试图发送一个请求以更新某个实体的数据。消息包含一个值为**84**的cookie
    ID，这可能标识了要更新的实体。它还包含在主体中的两个参数：`name`和`age`。这是接收者需要更新的数据。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Submitting web forms**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**提交网页表单**'
- en: Representing the parameters as part of the body is a common way to send information
    when submitting a form, but not the only one. You can add a query string to the
    URL, add JSON to the body of the message, and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数作为体的一部分表示是提交表单时发送信息的一种常见方式，但并非唯一方式。你可以在URL中添加查询字符串，在消息体中添加JSON，等等。
- en: The response has a status code of 200, meaning that the request was processed
    successfully. In addition, the response also contains a body, this time formatted
    as JSON, which represents the new status of the updated entity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 响应的状态码为200，表示请求已成功处理。此外，响应还包含一个体，这次格式化为JSON，它表示更新实体的新状态。
- en: Web applications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用
- en: Maybe you have noticed that in the previous sections, I used the not very intuitive
    terms of sender and receiver as they do not represent any specific scenario that
    you might know but rather all of them in a generic way. The main reason for this
    choice of terminology is to try to separate HTTP from web applications. You will
    see at the end of the book that HTTP is used for more than just websites.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经注意到，在前面的章节中，我使用了不太直观的发送者和接收者术语，因为它们并不代表你可能知道的具体场景，而是以通用方式代表所有这些场景。选择这种术语的主要原因是为了尝试将HTTP与Web应用分开。你将在本书的结尾看到，HTTP不仅仅用于网站。
- en: If you are reading this book, you already know what a web application is. Alternatively,
    maybe you know it by other terms, such as website or web page. Let's try to give
    some definitions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，你已经知道什么是Web应用了。或者，也许你通过其他术语了解它，比如网站或网页。让我们尝试给出一些定义。
- en: A **web page** is a single document with content. It contains links that open
    other web pages with different content.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**网页**是一个包含内容的单个文档。它包含链接，可以打开具有不同内容的其他网页。'
- en: A **website** is the set of web pages that usually live in the same server and
    are related to each other.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站**是一组通常位于同一服务器上并相互关联的网页。'
- en: A **web application** is just a piece of software that runs on a client, which
    is usually a browser, and communicates with a *server*. A server is a remote machine
    that receives requests from a client, processes them, and generates a response.
    This response will go back to the client, generally rendered by the browser in
    order to display it to the user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web应用**是运行在客户端（通常是浏览器）上的一小块软件，并与*服务器*进行通信。服务器是一台远程机器，它接收来自客户端的请求，处理它们，并生成响应。这个响应将返回到客户端，通常由浏览器渲染以显示给用户。'
- en: Even though this is out of the scope of this book, you may be interested to
    know that not only browsers can act as clients, generating requests and sending
    them to the servers; even servers can be the ones taking the initiative of sending
    messages to the browsers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这超出了本书的范围，你可能想知道，不仅浏览器可以作为客户端，生成请求并将它们发送到服务器；服务器也可以是主动向浏览器发送消息的一方。
- en: So, what is the difference between a website and a web application? Well, the
    web application can be a small part of a bigger website with a specific functionality.
    Also, not all websites are web applications as a web application always does something
    but a website can just display information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，网站和Web应用之间有什么区别呢？嗯，Web应用可以是更大网站中具有特定功能的小部分。此外，并不是所有的网站都是Web应用，因为Web应用总是执行某些操作，而网站只是显示信息。
- en: HTML, CSS, and JavaScript
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript
- en: 'Web applications are rendered by the browser so that the user can see its content.
    To do this, the server needs to send the content of the page or document. The
    document uses HTML to describe its elements and how they are organized. Elements
    can be links, buttons, input fields, and so on. A simple example of a web page
    looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用由浏览器渲染，以便用户可以看到其内容。为此，服务器需要发送页面或文档的内容。文档使用HTML来描述其元素及其组织方式。元素可以是链接、按钮、输入字段等等。一个简单的网页示例如下：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's focus on the highlighted code. As you can see, we are describing two `<a>`
    links with some properties. Both links have a class, a destination, and a text.
    The first one also contains an ID. Save this code into a file named `index.html`
    and execute it. You will see how your default browser opens a very simple page
    with two links.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关注高亮显示的代码。正如你所见，我们正在描述两个具有一些属性的 `<a>` 链接。这两个链接都有一个类、一个目的地和一段文本。第一个链接还包含一个ID。将此代码保存到名为
    `index.html` 的文件中并执行它。你会看到默认浏览器如何打开一个包含两个链接的非常简单的页面。
- en: 'If we want to add some styles, or change the color, size, and position of the
    links, we need to add CSS. CSS describes how elements from the HTML are displayed.
    There are several ways to include CSS, but the best approach is to have it in
    a separated file and then reference it from the HTML. Let''s update our `<head>`
    section as shown in the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要添加一些样式，或者改变链接的颜色、大小和位置，我们需要添加CSS。CSS描述了HTML元素是如何显示的。有几种方法可以包含CSS，但最好的方法是将它放在一个单独的文件中，然后从HTML中引用它。让我们更新以下代码的`<head>`部分：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s create a new `mystyle.css` file in the same folder with the following
    content:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在同一个文件夹中创建一个新的`mystyle.css`文件，包含以下内容：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This CSS file contains two style definitions: one for the `link` class and
    one for the `special` ID. The class style will be applied to both the links as
    they both define this class, and it sets them as green and bold. The ID style
    that increases the font of the link is only applied to the first link.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS文件包含两个样式定义：一个用于`link`类，一个用于`special` ID。类样式将应用于两个链接，因为它们都定义了这个类，并且将它们设置为绿色和粗体。增加链接字体的ID样式只应用于第一个链接。
- en: 'Finally, in order to add behavior to our web page, we need to add JS or JavaScript.
    JS is a programming language that would need an entire book for itself, and in
    fact, there are quite a lot of them. If you want to give it a chance, we recommend
    the free online book *Eloquent JavaScript*, *Marijn Haverbeke*, which you can
    find at [http://eloquentjavascript.net/](http://eloquentjavascript.net/). As with
    CSS, the best approach would be to add a separate file and then reference it from
    our HTML. Update the `<body>` section with the following highlighted code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了给我们的网页添加行为，我们需要添加JS或JavaScript。JS是一种编程语言，它本身就需要一本整本书来介绍，实际上，有很多种。如果你想尝试一下，我们推荐免费的在线书籍《Eloquent
    JavaScript》，作者是*Marijn Haverbeke*，你可以在[http://eloquentjavascript.net/](http://eloquentjavascript.net/)找到它。与CSS一样，最好的方法是将它放在一个单独的文件中，然后从HTML中引用它。更新以下高亮代码的`<body>`部分：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, create a `myactions.js` file with the following content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个包含以下内容的`myactions.js`文件：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The JS file adds a function that will be called when the `special` link is clicked
    on. This function just pops up an alert. You can save all your changes and refresh
    the browser to see how it looks now and how the links behave.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: JS文件添加了一个函数，当点击`special`链接时将被调用。这个函数只是弹出一个警告框。你可以保存所有更改并刷新浏览器，看看现在看起来如何以及链接的行为如何。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Different ways of including JS**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**包含JS的不同方式**'
- en: You might notice that we included the CSS file reference at the end of the `<head>`
    section and JS at the end of `<body>`. You can actually include JS in both the
    `<head>` and the `<body>`; just bear in mind that the script will be executed
    as soon as it is included. If your script references fields that are not yet defined
    or other JS files that will be included later, JS will fail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，我们在`<head>`部分的末尾包含了CSS文件引用，在`<body>`部分的末尾包含了JS。实际上，你可以在`<head>`和`<body>`中包含JS；只需记住，脚本一旦被包含就会立即执行。如果你的脚本引用了尚未定义的字段或其他稍后将被包含的JS文件，JS将失败。
- en: Congratulations! You just wrote your very first web page. Not impressed? Well,
    then you are reading the correct book! You will have the chance to work with more
    HTML, CSS, and JS during the book, even though the book focuses especially on
    PHP.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚编写了你的第一个网页。不觉得有什么了不起？那么，你正在阅读正确的书籍！在本书中，你将有机会使用更多的HTML、CSS和JS，尽管本书特别关注PHP。
- en: Web servers
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网服务器
- en: So, it is about time that you learn what those famous web servers are. A web
    server is no more than a piece of software running on a machine and listening
    to requests from a specific port. Usually, this port is `80`, but it can be any
    other that is available.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在是时候学习那些著名的网服务器了。网服务器不过是在机器上运行的一块软件，并监听来自特定端口的请求。通常，这个端口是`80`，但可以是任何可用的其他端口。
- en: How they work
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它们是如何工作的
- en: 'The following diagram represents the flow of request-response on the server
    side:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表表示了服务器端的请求-响应流程：
- en: '![How they work](img/00015.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![它们是如何工作的](img/00015.jpeg)'
- en: Request-response flow on the server side
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的请求-响应流程
- en: 'The job of a web server is to route external requests to the correct application
    so that they can be processed. Once the application returns a response, the web
    server will send this response to the client. Let''s take a close look at all
    the steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 网服务器的任务是路由外部请求到正确的应用程序，以便它们可以被处理。一旦应用程序返回响应，网服务器将发送这个响应到客户端。让我们仔细看看所有这些步骤：
- en: The client, which is a browser, sends a request. This can be of any type—GET
    or POST—and contain anything as long as it is valid.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端，即浏览器，发送一个请求。这可以是任何类型——GET或POST——只要它是有效的即可。
- en: The server receives the request, which points to a port. If there is a web server
    listening on this port, the web server will then take control of the situation.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器接收到的请求指向一个端口。如果在这个端口上有Web服务器监听，那么Web服务器将接管情况。
- en: The web server decides which web application—usually a file in the filesystem—needs
    to process the request. In order to decide, the web server usually considers the
    path of the URL; for example, `http://myserver.com/app1/hi` would try to pass
    the request to the `app1` application, wherever it is in the filesystem. However,
    another scenario would be `http://app1.myserver.com/hi`, which would also go to
    the same application. The rules are very flexible, and it is up to both the web
    server and the user as to how to set them.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务器决定哪个Web应用程序——通常是一个文件系统中的文件——需要处理请求。为了做出决定，Web服务器通常会考虑URL的路径；例如，`http://myserver.com/app1/hi`会尝试将请求传递给`app1`应用程序，无论它在文件系统中的位置如何。然而，另一种情况是`http://app1.myserver.com/hi`，它也会指向同一个应用程序。规则非常灵活，至于如何设置，取决于Web服务器和用户。
- en: The web application, after receiving a request from the web server, generates
    a response and sends it to the web server.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web应用程序在收到Web服务器的请求后，生成一个响应并将其发送回Web服务器。
- en: The web server sends the response to the indicated port.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务器将响应发送到指定的端口。
- en: The response finally arrives to the client.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，响应到达客户端。
- en: The PHP built-in server
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP内置服务器
- en: 'There are powerful web servers that support high loads of traffic, such as
    Apache or Nginx, which are fairly simple to install and manage. For the purpose
    of this book, though, we will use something even simpler: a PHP built-in server.
    The reason to use this is that you will not need extra package installations,
    configurations, and headaches as it comes with PHP. With just one command, you
    will have a web server running on your machine.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些功能强大的Web服务器支持高流量，如Apache或Nginx，它们安装和管理相对简单。然而，本书的目的在于使用更简单的东西：PHP内置服务器。使用它的原因是，你将不需要额外的包安装、配置和烦恼，因为PHP自带。只需一条命令，你就可以在你的机器上运行一个Web服务器。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Production web servers**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**生产级Web服务器**'
- en: 'Note that the PHP built-in web server is good for testing purposes, but it
    is highly recommended not to use it in production environments. If you have to
    set up a server that needs to be public and your application is written in PHP,
    I highly recommend you to choose either of the classics: Apache ([http://httpd.apache.org](http://httpd.apache.org))
    or Nginx ([https://www.nginx.com](https://www.nginx.com)). Both can run almost
    on any server, are free and easy to install and configure, and, more importantly,
    have a huge community that will support you on virtually any problem you might
    encounter.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，PHP内置的Web服务器适用于测试目的，但强烈建议不要在生产环境中使用它。如果你必须设置一个需要公开的Web服务器，并且你的应用程序是用PHP编写的，我强烈建议你选择以下经典之一：Apache
    ([http://httpd.apache.org](http://httpd.apache.org)) 或 Nginx ([https://www.nginx.com](https://www.nginx.com))。两者几乎可以在任何服务器上运行，都是免费的，易于安装和配置，更重要的是，拥有庞大的社区，他们将支持你解决可能遇到的几乎所有问题。
- en: 'Finally, hands on! Let''s try to create our very first web page using the built-in
    server. For this, create an `index.php` file inside your `workspace` directory—for
    example, `Documents/workspace/index.php`. The content of this file should be:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，动手实践！让我们尝试使用内置服务器创建我们的第一个网页。为此，在你的`工作区`目录内创建一个`index.php`文件——例如，`Documents/workspace/index.php`。这个文件的内容应该是：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, open your command line, go to your `workspace` directory, probably by
    running the `cd Documents/workspace` command, and run the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开你的命令行，进入你的`工作区`目录，可能需要运行`cd Documents/workspace`命令，然后运行以下命令：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The command line will prompt you with some information, the most important one
    being what is listening, which should be `localhost:8000` as specified, and how
    to stop it, usually by pressing *Ctrl* + *C*. Do not close the command line as
    it will stop the web server too.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行会提示你一些信息，其中最重要的是监听什么，应该是如指定的那样`localhost:8000`，以及如何停止它，通常是通过按*Ctrl* + *C*。不要关闭命令行，因为它也会停止Web服务器。
- en: Now, let's open a browser and go to `http://localhost:8000`. You should see
    a **hello world** message on a white page. Yay, success! If you are interested,
    you can check your command line, and you will see log entries of each request
    you are sending via your browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开一个浏览器并转到`http://localhost:8000`。你应该会在一个白色页面上看到一个**hello world**消息。太好了，成功了！如果你感兴趣，你可以检查你的命令行，你会看到你通过浏览器发送的每个请求的日志条目。
- en: 'So, how does it really work? Well, if you check again in the previous diagram,
    the `php -S` command started a web server—in our case, listening to port `8000`
    instead of `80`. Also, PHP knows that the web application code will be on the
    same directory that you started the web server: your `workspace`. There are more
    specific options, but by default, PHP will try to execute the `index.php` file
    in your `workspace`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，它究竟是如何工作的呢？好吧，如果你再次查看之前的图示，`php -S`命令启动了一个Web服务器——在我们的例子中，监听端口`8000`而不是`80`。此外，PHP知道Web应用程序代码将在你启动Web服务器的同一目录：你的`workspace`。还有更多具体的选项，但默认情况下，PHP会尝试在你的`workspace`中执行`index.php`文件。
- en: Putting things together
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将事物组合在一起
- en: Let's try to include our first project (`index.html` with its CSS and JS files)
    as part of the built-in server. To do this, you just need to open the command
    line and go to the directory in which these files are and start the web server
    with `php -S localhost:8000`. If you check `localhost:8000` in your browser, you
    will see our two-link page, as is expected.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将我们的第一个项目（包含其CSS和JS文件的`index.html`）作为内置服务器的一部分。为此，你只需要打开命令行，转到这些文件所在的目录，并使用`php
    -S localhost:8000`启动Web服务器。如果你在浏览器中检查`localhost:8000`，你应该会看到预期的两个链接页面。
- en: Let's now move our new `index.php` file to the same directory. You do not need
    to restart your web server; PHP will know about the changes automatically. Go
    to your browser and refresh the page. You should now see the **hello world** message
    instead of the links. What happened here?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将新的`index.php`文件移动到同一个目录。你不需要重新启动你的Web服务器；PHP会自动知道这些更改。转到你的浏览器并刷新页面。你现在应该看到**hello
    world**消息而不是链接。这里发生了什么？
- en: If you do not change the default options, PHP will always try to find an `index.php`
    file in the directory in which you started the web server. If this is not found,
    PHP will try to find an `index.html` file. Previously, we only had the `index.html`
    file, so PHP failed to find `index.php`. Now that it can find its first option,
    `index.php`, it will load it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有更改默认选项，PHP将始终尝试在启动Web服务器的目录中找到一个`index.php`文件。如果没有找到，PHP将尝试找到一个`index.html`文件。之前，我们只有`index.html`文件，所以PHP未能找到`index.php`。现在，它能够找到它的第一个选项，`index.php`，它将加载它。
- en: If we want to see our `index.html` file from the browser, we can always specify
    it in the URL like `http://localhost:8000/index.html`. If the web server notices
    that you are trying to access a specific file, it will try to load it instead
    of the default options.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想从浏览器中查看我们的`index.html`文件，我们可以在URL中指定它，例如`http://localhost:8000/index.html`。如果Web服务器注意到你正在尝试访问一个特定的文件，它将尝试加载该文件而不是默认选项。
- en: Finally, if we try to access a file that is not on our filesystem, the web server
    will return a response with status code 404—that is, not found. We can see this
    code if we open the **Developer tools** section of our browser and go to the **Network**
    section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们尝试访问不在我们的文件系统上的文件，Web服务器将返回一个状态码为404的响应——也就是说，未找到。如果我们打开浏览器中的**开发者工具**部分并转到**网络**部分，我们可以看到这个代码。
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Developer tools are your friends**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者工具是你的朋友**'
- en: As a web developer, you will find very few tools more useful than the developer
    tools of your browser. It changes from browser to browser, but all of the big
    names, such as Chrome or Firefox, have it. It is very important that you get familiar
    with how to use it as it allows you to debug your applications from the client
    side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名Web开发者，你会发现浏览器中的开发者工具是极其有用的工具之一。它因浏览器而异，但所有的大牌浏览器，如Chrome或Firefox，都有这个工具。熟悉如何使用它非常重要，因为它允许你从客户端调试你的应用程序。
- en: I will introduce you to some of these tools during the course of this book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本书的进程中向你介绍一些这些工具。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what HTTP is and how web applications use it in
    order to interact with the server. You also now know how web servers work and
    how to launch a light built-in server with PHP. Finally, you took the first steps
    toward building your first web application. Congratulations!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了HTTP是什么以及Web应用程序如何使用它来与服务器交互。你现在还知道Web服务器是如何工作的，以及如何使用PHP启动一个轻量级的内置服务器。最后，你迈出了构建你的第一个Web应用程序的第一步。恭喜你！
- en: In the next chapter, we will take a look at the basics of PHP so that you can
    start building simple applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 PHP 的基础知识，以便您开始构建简单的应用程序。
