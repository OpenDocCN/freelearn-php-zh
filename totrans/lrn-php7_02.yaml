- en: Chapter 2. Web Applications with PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications are a common thing in our lives, and they are usually very
    user friendly; users do not need to understand how they work behind the scenes.
    As a developer, though, you need to understand how your application works internally.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: HTTP and how web applications make use of it
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web applications and how to build a simple one
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web servers and how to launch your PHP built-in web server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTTP protocol
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you check the RFC2068 standard at [https://tools.ietf.org/html/rfc2068](https://tools.ietf.org/html/rfc2068),
    you will see that its description is almost endless. Luckily, what you need to
    know about this protocol, at least for starters, is way shorter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP** stands for **HyperText Transfer Protocol**. As any other protocol,
    the goal is to allow two entities or nodes to communicate with each other. In
    order to achieve this, the messages need to be formatted in a way that they both
    understand, and the entities must follow some pre-established rules.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: A simple example
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram shows a very basic interchange of messages:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![A simple example](img/00013.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: A simple GET request
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not worry if you do not understand all the elements in this diagram; we
    will describe them shortly. In this representation, there are two entities: **sender**
    and **receiver**. The sender sends a message to the receiver. This message, which
    starts the communication, is called the request. In this case, the message is
    a GET request. The receiver receives the message, processes it, and generates
    a second message: the response. In this case, the response shows a 200 status
    code, meaning that the request was processed successfully.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: HTTP is stateless; that is, it treats each request independently, unrelated
    to any previous one. This means that with this request and response sequence,
    the communication is finished. Any new requests will not be aware of this specific
    interchange of messages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Parts of the message
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An HTTP message contains several parts. We will define only the most important
    of them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: URL
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The URL of the message is the destination of the message. The request will contain
    the receiver's URL, and the response will contain the sender's.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might know, the URL can contain extra parameters, known as a query string.
    This is used when the sender wants to add extra data. For example, consider this
    URL: `http://myserver.com/greeting?name=Alex`. This URL contains one parameter:
    `name` with the value `Alex`. It could not be represented as part of the URL `http://myserver.com/greeting`,
    so the sender chose to add it at the end of it. You will see later that this is
    not the only way that we can add extra information into a message.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP method
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTTP method is the verb of the message. It identifies what kind of action
    the sender wants to perform with this message. The most common ones are GET and
    POST.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**GET**: This asks the receiver about something, and the receiver usually sends
    this information back. The most common example is asking for a web page, where
    the receiver will respond with the HTML code of the requested page.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST**: This means that the sender wants to perform an action that will update
    the data that the receiver is holding. For example, the sender can ask the receiver
    to update his profile name.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other methods, such as **PUT**, **DELETE**, or **OPTION**, but they
    are less used in web development, although they play a crucial role in REST APIs,
    which will be explained in [Chapter 9](part0079_split_000.html#2BASE1-edcc22b134104d5db0bf3aa086c86851
    "Chapter 9. Building REST APIs"), *Building REST APIs*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Body
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The body part is usually present in response messages even though a request
    message can contain it too. The body of the message contains the content of the
    message itself; for example, if the user requested a web page, the body of the
    response would consist of the HTML code that represents this page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Soon, we will discuss how the request can also contain a body, which is used
    to send extra information as part of the request, such as form parameters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The body can contain text in any format; it can be an HTML text that represents
    a web page, plain text, the content of an image, JSON, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Headers
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The headers on an HTTP message are the metadata that the receiver needs in order
    to understand the content of the message. There are a lot of headers, and you
    will see some of them in this book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Headers consist of a map of key-value pairs. The following could be the headers
    of a request:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This request tells the receiver, which is a server, that it will accept text
    as HTML, which is the common way of representing a web page; and that it has a
    cookie named Richard.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The status code
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The status code is present in responses. It identifies the status of the request
    with a numeric code so that browsers and other tools know how to react. For example,
    if we try to access a URL that does not exist, the server should reply with a
    status code 404\. In this way, the browser knows what happened without even looking
    at the content of the response.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Common status codes are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**200**: The request was successful'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**401**: Unauthorized; the user does not have permission to see this resource'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**404**: Page not found'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**500**: Internal server error; something wrong happened on the server side
    and it could not be recovered'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more complex example
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram shows a POST request and its response:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![A more complex example](img/00014.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: A more complex POST request
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exchange of messages, we can see the other important method, POST,
    in action. In this case, the sender tries to send a request in order to update
    some entity''s data. The message contains a cookie ID with the value **84**, which
    may identify the entity to update. It also contains two parameters in the body:
    `name` and `age`. This is the data that the receiver has to update.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Submitting web forms**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Representing the parameters as part of the body is a common way to send information
    when submitting a form, but not the only one. You can add a query string to the
    URL, add JSON to the body of the message, and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The response has a status code of 200, meaning that the request was processed
    successfully. In addition, the response also contains a body, this time formatted
    as JSON, which represents the new status of the updated entity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Web applications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe you have noticed that in the previous sections, I used the not very intuitive
    terms of sender and receiver as they do not represent any specific scenario that
    you might know but rather all of them in a generic way. The main reason for this
    choice of terminology is to try to separate HTTP from web applications. You will
    see at the end of the book that HTTP is used for more than just websites.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this book, you already know what a web application is. Alternatively,
    maybe you know it by other terms, such as website or web page. Let's try to give
    some definitions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: A **web page** is a single document with content. It contains links that open
    other web pages with different content.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: A **website** is the set of web pages that usually live in the same server and
    are related to each other.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: A **web application** is just a piece of software that runs on a client, which
    is usually a browser, and communicates with a *server*. A server is a remote machine
    that receives requests from a client, processes them, and generates a response.
    This response will go back to the client, generally rendered by the browser in
    order to display it to the user.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Even though this is out of the scope of this book, you may be interested to
    know that not only browsers can act as clients, generating requests and sending
    them to the servers; even servers can be the ones taking the initiative of sending
    messages to the browsers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: So, what is the difference between a website and a web application? Well, the
    web application can be a small part of a bigger website with a specific functionality.
    Also, not all websites are web applications as a web application always does something
    but a website can just display information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: HTML, CSS, and JavaScript
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Web applications are rendered by the browser so that the user can see its content.
    To do this, the server needs to send the content of the page or document. The
    document uses HTML to describe its elements and how they are organized. Elements
    can be links, buttons, input fields, and so on. A simple example of a web page
    looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's focus on the highlighted code. As you can see, we are describing two `<a>`
    links with some properties. Both links have a class, a destination, and a text.
    The first one also contains an ID. Save this code into a file named `index.html`
    and execute it. You will see how your default browser opens a very simple page
    with two links.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to add some styles, or change the color, size, and position of the
    links, we need to add CSS. CSS describes how elements from the HTML are displayed.
    There are several ways to include CSS, but the best approach is to have it in
    a separated file and then reference it from the HTML. Let''s update our `<head>`
    section as shown in the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s create a new `mystyle.css` file in the same folder with the following
    content:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This CSS file contains two style definitions: one for the `link` class and
    one for the `special` ID. The class style will be applied to both the links as
    they both define this class, and it sets them as green and bold. The ID style
    that increases the font of the link is only applied to the first link.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in order to add behavior to our web page, we need to add JS or JavaScript.
    JS is a programming language that would need an entire book for itself, and in
    fact, there are quite a lot of them. If you want to give it a chance, we recommend
    the free online book *Eloquent JavaScript*, *Marijn Haverbeke*, which you can
    find at [http://eloquentjavascript.net/](http://eloquentjavascript.net/). As with
    CSS, the best approach would be to add a separate file and then reference it from
    our HTML. Update the `<body>` section with the following highlighted code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, create a `myactions.js` file with the following content:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The JS file adds a function that will be called when the `special` link is clicked
    on. This function just pops up an alert. You can save all your changes and refresh
    the browser to see how it looks now and how the links behave.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Different ways of including JS**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that we included the CSS file reference at the end of the `<head>`
    section and JS at the end of `<body>`. You can actually include JS in both the
    `<head>` and the `<body>`; just bear in mind that the script will be executed
    as soon as it is included. If your script references fields that are not yet defined
    or other JS files that will be included later, JS will fail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You just wrote your very first web page. Not impressed? Well,
    then you are reading the correct book! You will have the chance to work with more
    HTML, CSS, and JS during the book, even though the book focuses especially on
    PHP.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Web servers
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, it is about time that you learn what those famous web servers are. A web
    server is no more than a piece of software running on a machine and listening
    to requests from a specific port. Usually, this port is `80`, but it can be any
    other that is available.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: How they work
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram represents the flow of request-response on the server
    side:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![How they work](img/00015.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Request-response flow on the server side
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'The job of a web server is to route external requests to the correct application
    so that they can be processed. Once the application returns a response, the web
    server will send this response to the client. Let''s take a close look at all
    the steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: The client, which is a browser, sends a request. This can be of any type—GET
    or POST—and contain anything as long as it is valid.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server receives the request, which points to a port. If there is a web server
    listening on this port, the web server will then take control of the situation.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server decides which web application—usually a file in the filesystem—needs
    to process the request. In order to decide, the web server usually considers the
    path of the URL; for example, `http://myserver.com/app1/hi` would try to pass
    the request to the `app1` application, wherever it is in the filesystem. However,
    another scenario would be `http://app1.myserver.com/hi`, which would also go to
    the same application. The rules are very flexible, and it is up to both the web
    server and the user as to how to set them.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web application, after receiving a request from the web server, generates
    a response and sends it to the web server.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server sends the response to the indicated port.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The response finally arrives to the client.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PHP built-in server
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are powerful web servers that support high loads of traffic, such as
    Apache or Nginx, which are fairly simple to install and manage. For the purpose
    of this book, though, we will use something even simpler: a PHP built-in server.
    The reason to use this is that you will not need extra package installations,
    configurations, and headaches as it comes with PHP. With just one command, you
    will have a web server running on your machine.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Production web servers**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the PHP built-in web server is good for testing purposes, but it
    is highly recommended not to use it in production environments. If you have to
    set up a server that needs to be public and your application is written in PHP,
    I highly recommend you to choose either of the classics: Apache ([http://httpd.apache.org](http://httpd.apache.org))
    or Nginx ([https://www.nginx.com](https://www.nginx.com)). Both can run almost
    on any server, are free and easy to install and configure, and, more importantly,
    have a huge community that will support you on virtually any problem you might
    encounter.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, hands on! Let''s try to create our very first web page using the built-in
    server. For this, create an `index.php` file inside your `workspace` directory—for
    example, `Documents/workspace/index.php`. The content of this file should be:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, open your command line, go to your `workspace` directory, probably by
    running the `cd Documents/workspace` command, and run the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The command line will prompt you with some information, the most important one
    being what is listening, which should be `localhost:8000` as specified, and how
    to stop it, usually by pressing *Ctrl* + *C*. Do not close the command line as
    it will stop the web server too.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's open a browser and go to `http://localhost:8000`. You should see
    a **hello world** message on a white page. Yay, success! If you are interested,
    you can check your command line, and you will see log entries of each request
    you are sending via your browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how does it really work? Well, if you check again in the previous diagram,
    the `php -S` command started a web server—in our case, listening to port `8000`
    instead of `80`. Also, PHP knows that the web application code will be on the
    same directory that you started the web server: your `workspace`. There are more
    specific options, but by default, PHP will try to execute the `index.php` file
    in your `workspace`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Putting things together
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's try to include our first project (`index.html` with its CSS and JS files)
    as part of the built-in server. To do this, you just need to open the command
    line and go to the directory in which these files are and start the web server
    with `php -S localhost:8000`. If you check `localhost:8000` in your browser, you
    will see our two-link page, as is expected.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move our new `index.php` file to the same directory. You do not need
    to restart your web server; PHP will know about the changes automatically. Go
    to your browser and refresh the page. You should now see the **hello world** message
    instead of the links. What happened here?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: If you do not change the default options, PHP will always try to find an `index.php`
    file in the directory in which you started the web server. If this is not found,
    PHP will try to find an `index.html` file. Previously, we only had the `index.html`
    file, so PHP failed to find `index.php`. Now that it can find its first option,
    `index.php`, it will load it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: If we want to see our `index.html` file from the browser, we can always specify
    it in the URL like `http://localhost:8000/index.html`. If the web server notices
    that you are trying to access a specific file, it will try to load it instead
    of the default options.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if we try to access a file that is not on our filesystem, the web server
    will return a response with status code 404—that is, not found. We can see this
    code if we open the **Developer tools** section of our browser and go to the **Network**
    section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Developer tools are your friends**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: As a web developer, you will find very few tools more useful than the developer
    tools of your browser. It changes from browser to browser, but all of the big
    names, such as Chrome or Firefox, have it. It is very important that you get familiar
    with how to use it as it allows you to debug your applications from the client
    side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: I will introduce you to some of these tools during the course of this book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what HTTP is and how web applications use it in
    order to interact with the server. You also now know how web servers work and
    how to launch a light built-in server with PHP. Finally, you took the first steps
    toward building your first web application. Congratulations!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at the basics of PHP so that you can
    start building simple applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 PHP 的基础知识，以便您开始构建简单的应用程序。
