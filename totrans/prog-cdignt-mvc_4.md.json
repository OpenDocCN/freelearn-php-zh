["```php\n        $autoload['libraries'] = array('database','my_lib');\n        ```", "```php\n        $this->load->library('my_lib');\n        ```", "```php\n    $result=$this->my_lib->called_method ($param1, $param2);\n    ```", "```php\n// Library class\nclass my_handler {\n  private $my_lib_param;\n  // Can't be accessed outside the class directly\n  // but we can provide the read only service as follows:\n\n  public function get_my_lib_param () {\n    return $this->my_lib_param;}\n  // The following is a library function that can't \n  // be called from outside the class!\n\n  private function my_private_function () { }\n  }\n```", "```php\n    $this->load->library('table');\n\n    ```", "```php\n<?php \n/** Use CI built In libraries\nclass Builtins extends CI_Controller{\n  function __construct(){\n    parent::__construct();\n    // Load the table library that generates the HTML tags for// showing the table structure within a view\n    $this->load->library('table');\n    }\n  public function index(){\n    // Load the users list from DB into the view \n    $data['users'] = $this->db->get('users');\n    // Create custom header for the table \n    $header = array\n    ('id', 'User Name', 'Hashed Password', 'Position' );\n    // Set the headings\n    $this->table->set_heading($header);\n    // Set table formatting \n    $table_format = array ( 'table_open'  => '<table border=\"1\"cellpadding=\"2\" cellspacing=\"1\" class=\"mytable\">' );\n    $this->table->set_template($table_format);\n    // Load the view and send the results\n    $this->load->view('users_view', $data);\n    }\n  }\n```", "```php\n<!DOCTYPE html\">\n<meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"/>\n<html>\n<head>\n<title>\n  Showing Users Table Using CI Build-In table Library\n</title>\n</head>\n<body>\n  <div id='results'>\n  <!—All The Formatted Table is rendered by the table libraryinstance using the controller defined settings and the tableof users we have fetched from the DB >\n  <?php echo $this->table->generate($users); ?>\n  </div>\n</body>\n</html>\n```", "```php\n    $this->load->library('googlemaps');\n    ```", "```php\n<?php\n/** Use The Google Maps CI Library Wrapper for severalmarked places altogether and zoom-in*/\nclass Gmaps extends CI_Controller {\n  function __construct()\n  {  parent::__construct();\n    $this->load->library('googlemaps');\n    // Set the map window sizes:\n    $config['map_width']\t= \"1000px\";\n    // map window width\n    $config['map_height'] = \"1000px\";\n    // map window height\n    $this->googlemaps->initialize($config);\n  }\n  function index() {\n    /* Initialize and setup Google Maps for our App startingwith 3 marked places\n    London, UK, Bombai, India, Rehovot, Israel\n    */\n    // Initialize our map for this use case of show 3// places altogether.\n    // let the zoom be automatically decided by Google for showing// the several places on one view.\n    $config['zoom'] = \"auto\";\n    $this->googlemaps->initialize($config);\n    //Define the places we want to see marked on Google Map!\n    $this->add_visual_flag ('London, UK');\n    $this->add_visual_flag ('Bombai, India');\n    $this->add_visual_flag ('Rehovot, Israel');\n    $data = $this->load_map_setting ();\n    // Load our view, passing the map data that has just been//created.\n    $this->load->view('google_map_view', $data);\n  }\n  //The class Gmaps continued with several more functions as//follows:\n  function london() {\n    // Initialize our map\n    //Here you can also pass in additional parameters for// customizing the map (see the following code:)\n    // Define the address we want to be on the map center\n    $config['center'] = 'London, UK'; to be on the map center\n    // Set Zoom Level - Zoom 0: World – 18 Street Level\n    $config['zoom'] = \"16\";\n    $this->googlemaps->initialize($config);\n    // Add visual flag\n    $this->add_visual_flag ($config['center']);\n    $data = $this->load_map_setting ();\n    // Load our view passing the map data that has just been//created\n    $this->load->view('google_map_view', $data);\n  }\n  functionBombay() {\n  //Initialize our map.\n  //Here you can also pass in additional parameters for//customizing the map (see the following code)\n  //Define the address we want to see as the map center\n  $config['center'] = 'Bombay, India';\n  $config['zoom'] = \"16\";  // City Level Zoom \n  $this->googlemaps->initialize($config);\n  // Add visual flag\n  $this->add_visual_flag ($config['center']);\n  $data = $this->load_map_setting ();\n  // Load our view passing the map data that has just been created\n  $this->load->view('google_map_view', $data);\n}\n```", "```php\nfunction rehovot()\n{\n  // Initialize our map.\n  //Here you can also pass in additional parameters for //customizing the map (see the following code)\n  $config['center'] = 'Rehovot, Israel';\n  $config['zoom'] = \"16\";\n  // City Level Zoom\n  $this->googlemaps->initialize($config);\n  // Add visual flag\n  $this->add_visual_flag ($config['center']);\n  $data = $this->load_map_setting ();\n  // Load our view, passing the map data that has just been//created.\n  $this->load->view('google_map_view', $data);\n}\nfunction load_map_setting ( ) {\n  $data = array();\n  $locations = array();\n  $controllers = array();\n  // Set controllers list for zoom in\n  $locations[] = 'London, UK';\n  $locations[] = 'Bombai, India';\n  $locations[] = 'Rehovot, Israel';\n  // Set controllers list for zoom in \n  $controllers[] = \"london\";\n  $controllers[] = \"bombai\";\n  $controllers[] = \"rehovot\";\n  $data['map'] = $this->googlemaps->create_map();\n  $data['locations'] = $locations;\n  $data['controllers'] = $controllers;\n  $data['map'] = $this->googlemaps->create_map();\n  return $data;\n}\n```", "```php\nfunction add_visual_flag ( $place ) {\n  $marker = array();\n  // Setup Marker for the place and the title as the place name\n  $marker['position'] = $place;\n  $marker['title'] = $place;\n  $this->googlemaps->add_marker($marker);\n  }\n}\n```", "```php\n<!DOCTYPE html\">\n<meta http-equiv=\"Content-type\"\ncontent=\"text/html; charset=utf-8\" />\n<html>\n<head>\n  <script src = http://code.jquery.com/jquery-latest.js ></script>\n  <!--Render all the map JS provided by rendering controller-->\n  <?php echo $map['js']; ?>\n</head>\n<body>\n<H3>CodeIgniter Powered CI Google Maps Library : <H3>\n<HR/><ul>\n<!—Let the User Always Get Back to the default Zoom out -->\n<li><?php  echo anchor(\"index.php/gmaps\",\n'<B>See All Locations</B>' ); ?>\n</li>\n<?PHP \n$i=0;\nforeach ($locations as $location ) {\n  // Show to the user all the possible Zoom Ins defined places by//the controller, so that user may zoom in by issuing the// anchor.\n  $controller = $controllers[\"$i\"];\n  $i++; ?>\n  <li>\n  <?php echo anchor\n  (\"index.php/gmaps/$controller\", \"Zoom-In to \".$location ) ?>\n  </li>\n  <?PHP } ?>\n  }\n</ul>\n<HR></HR>\n<?php echo $map['html']; ?>\n</body>\n</html>\n```", "```php\n/**\n* CodeIgniter Flickr API wrapper Library Class\n*\n* Enable Simple Flickr API usage \n*\n* @package        CodeIgniter\n* @category    Libraries\n* @author        Eli Orr\n* Usage:\n* Via CI controller: \n* $this->load->library( 'flickr_wrapper',\n* array(   'api_key'     => '<YOUR_FLICKR_API_KEY>',\n* 'DEFAULT_RES' => '3000',\n// filter 3000 pix \n* 'GPS_ENABLED' => FALSE ));\n* $this->flickr_wrapper->set_params ( $keyed_array );\n* $recent_photos = \n* $this->flickr_wrapper->flickrPhotosGetRecent ();\n* $filter_photos = \n* $this->flickr_handler->\n* filter_photos ($photos_to_filter);\n* $user_info        = \n* $this->flickr_wrapper->flickrUserInfo ($uid);\n* // $uid e.g. 72095130@N00\n//.PRIVATE \n//We will use the following private functions:\nprivate function _file_get_contents_curl($url);\nprivate function _flickrRestAPI ($params);\nprivate function _is_filtered_photo ($photo_rec );\n*/\n```", "```php\nclass Flickr_wrapper {\n  // parameters as part of the library instance\n  private $DEFAULT_RES = 2000;\n  // Width in Pixels \n  private $GPS_ENABLED = TRUE;\n  // total shown photos \n  private $RECENT_PHOTOS = 500;\n  // how many photos in each poll ?\n  // CI instance \n  private $CI;\n  // Flickr api_key to use \n  private $api_key = \"\" ;\n  function __construct( $params = array())\n  {\n    // Make sure we got the api_key – otherwise exit!\n    if (!isset ($params['api_key']))\n    exit ('FATAL - must be constructed with api_key!');\n    $this->set_params ($params);\n    // Just for debugging needs, we may drop those later\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n  }\n  // change settings on the fly\n  function set_params ( $key_array ) {\n    // sets array of instance parameters \n    foreach ($key_array as $key => $val ){ \n      switch ($key) {\n        case 'DEFAULT_RES': $this->DEFAULT_RES \t= $val; break;\n        case 'GPS_ENABLED': $this->GPS_ENABLED \t= $val; break;\n        case 'RECENT_PHOTOS': $this->RECENT_PHOTOS = $val; break;\n       case 'api_key' : $this->api_key = $val; break;\n       // We can add many more here.\n       default: exit (\"FATAL! - set_params invalid param: $key\");\n     }\n  }\n}\n```", "```php\n// Pulls recent public photos as multi-dimensional array\nfunction flickrPhotosGetRecent () {\n  #\n  # build the Params for API\n  #\n  $params = array(\n    'api_key' => $this->api_key,\n    'method' => 'flickr.photos.getRecent',\n    'extras' => 'o_dims,owner_name,date_taken,media,\n    path_alias,url_sq,geo',\n    'per_page' => $this->RECENT_PHOTOS,\n    'format' => 'php_serial'\n  );\n  $rsp_obj = $this->_flickrRestAPI ($params);\n  #\n  # check if ok or successful result :\n  #\n  if ($rsp_obj['stat'] == 'ok') {\n    # Get the array of all the photo records in this cycle \n    return $recent_photos = $rsp_obj['photos']['photo'];\n  }\n  else \n  # Query failed we shall return NULL to the caller \n  return NULL;\n}\n// Get the Photo EXIF that has a lot of info related to the// photo for a given photo id\n```", "```php\nfunction GetPhotoExif ($photo_id) {\n  #\n  # build the API URL to call\n  #\n  $params = array(\n    'api_key' => $this->api_key,\n    'method' => 'flickr.photos.getExif',\n    'photo_id' => $photo_id,\n    'format' => 'php_serial',\n  );\n  $rsp_obj = $this->_flickrRestAPI ($params);\n  #\n  # display the photo title (or an error if it failed)\n  #\n  if ($rsp_obj['stat'] == 'ok') {\n    /*\n    Array ([photo] => Array ([id] => 8002716747 [secret] => 559f87aea0\n    [server] => 8030\n    [farm] => 9\n    [camera] => Casio EX-H20G\n    [exif] => ... A LOT OF EXTRA INFO\n    */\n\n    $photo_camera = $rsp_obj['photo']['camera'];\n    // We can add more interesting items for our app here\n    $params = array\n    ( 'camera'    => $photo_camera,\n    'full_exif' => $rsp_obj\n    // All EXIF info for the photo_id\n  );\n  return $params;\n  }\n  else // Request Failed We shall return error:\n  return NULL;\n}\n```", "```php\n// apply photos filtering on a provided photos array\n// based on the current settings\nfunction filter_photos ($photos) {\n  $filtered_photos = array();\n  foreach ($photos  as $photo) {\n    if ($this->_is_filtered_photo ($photo) )\n    $filtered_photos[] = $photo;\n  }\n  return $filtered_photos;\n}\nfunction flickrUserInfo ($uid) {\n  // UID e.g. : 72095130@N00\n  // find info for this User\n  #\n  # build the API URL to call\n  #\n  $params = array(\n    'api_key'\t=> $this->api_key,\n    'method'\t=> 'flickr.people.getInfo',\n    'user_id' \t=> $uid,\n    'extras'  \t=> 'contact,friend,family',\n    'format'\t=> 'php_serial',\n  );\n  $rsp_obj = $this-> _flickrRestAPI ($params);\n  #\n  # Check if response is OK\n  #\n  if ($rsp_obj['stat'] == 'ok'){ \n    // Yes! We have a good result .. let's load it to the // keyed array structure\n    $real_name = @urlencode($rsp_obj['person']['realname']['_content']);\n    $location = @urlencode (strtolower ($rsp_obj['person']['location']['_content']));\n    $photos = @$rsp_obj['person']['photos']['count']['_content'];\n    // more can be added\n```", "```php\n    $params = array ( \n      'name' => $real_name,\n      'uid' => $uid,\n      'photos' => $photos,\n      'location' => $location,\n      'full_info' => $rsp_obj\n    );\n    return $params;\n  }\n  else // Response failed return NULL\n  return NULL;\n}\n// PRIVATE SECTION OF ALL PRIVATE LIBRARY METHODS \n// THAT CANNOT BE CALLED DIRECTLY FROM THE LIBRARY USER \n// This is the heart of our wrapper library that makes it easy to get \n// The Flickr API access via simple keyed array based calls and response\nprivate function _flickrRestAPI ($params) {\n  $encoded_params = array();\n  foreach ($params as $k => $v){\n    $encoded_params[] = urlencode($k).'='.urlencode($v);\n  }\n  #\n  # call the API and decode the response\n  #\n  $url = \"http://api.flickr.com/services/rest/?\".implode('&', $encoded_params);\n  // This will create get query URI …?param1=val1&param2=val2// and so on\n  $rsp = $this->_file_get_contents_curl($url);\n  return $rsp_obj = unserialize($rsp);\n}\n```", "```php\n// This function assure we can get a url content into a buffer// it requires that a PHP curl library is installed!\nprivate function _file_get_contents_curl($url) {\n  if (! function_exists('curl_init') )\n  exit ('PHP curl library is not enabled please fix!');\n  $ch = curl_init();\n  curl_setopt($ch, CURLOPT_HEADER, 0);\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n  curl_setopt($ch, CURLOPT_URL, $url);\n  $data = curl_exec($ch);\n  curl_close($ch);\n  return $data;\n}\nprivate function _is_filtered_photo ($photo_rec ) {\n  /*\n  [o_width]   => 4416\n  [latitude] => 0\n  //More can be added \n  */\n  // Photo width  shall be larger than  $this->DEFAULT_RES ?\n  if ( \t(int) (@$photo_rec['o_width'] )  <\n  (int)  $this->DEFAULT_RES  )\t return FALSE;\n  // GPS info required & Found ?\n  if (( $this->GPS_ENABLED && ! @$photo_rec['latitude'] ))\n  return FALSE;\n  // if we are here the filtered photo passed successfully\n  return TRUE;\n  }\n}\n```", "```php\n<?php\n/**\n * Flickr Recent Controller\n *\n * Provide recent uploaded public photos in flickr community\n * Enable to apply several settings and filtering\n * Enable to get photographer user profile for each photo\n * \n * @author Eli Orr\n*/\nclass Flickr_recent extends CI_Controller{\n  function __construct()\n  {\n    parent::__construct();\n    /* \n    Standard Libraries, database, & helper url are included in theconfigs/autoload.php\n    */\n    // This lines are only for debugging needs we may drop them// if things are going good\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n    /* ------Loading User Defined Library------------ */\n    $this->load->library\n    ( 'flickr_wrapper',\n    array('api_key' => '<YOUR_FLICKR_API>',\n    'DEFAULT_RES' => '3000',\n    // filter 3000 pix\n    'GPS_ENABLED' => FALSE\n  )\n  );\n}\n```", "```php\nfunction index () {\n  $settings = array(\n    'DEFAULT_RES' => '4000',  // Only 4000 pix and better\n    'GPS_ENABLED' => FALSE,  // GPS Info is not mandatory\n    'RECENT_PHOTOS' => 50,  // Latest 100 photo uploads\n  );\n  $this->flickr_wrapper->set_params ( $settings );\n  $photos_to_filter = \n  $this->flickr_wrapper->flickrPhotosGetRecent ();\n  $filter_photos = \n  $this->flickr_wrapper->filter_photos ($photos_to_filter);\n  $data = Array();\n  $data['photos'] = $filter_photos;\n  $data['settings'] = $settings;\n  $this->load->view('flickr_recent_view.php',$data );\n  }\n}\n```", "```php\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\" />\n<div>\n<H1>Flickr Recent Uploads</H1>\n<p>\n<!--  Show the applied filter settings first -->\n<table border=\"1\" style='background-color:#b0c4de;' >\n<tr>\n  <td>Photos in Poll</td><td><?=$settings['RECENT_PHOTOS'];?></td>\n</tr>\n<tr>\n  <td>Min. Width Filter</td><td><?=$settings['DEFAULT_RES'];?>Px</td>\n</tr>\n<tr>\n  <td>GPS Filter</td><td><?=$settings['GPS_ENABLED'] ? \"With GPS\" : \"With/Without GPS\"; ?></td>\n</tr>\n</p>\n<!--  For each photo show the User name, how many photos they took till now, the original size in MP (Mega Pixels) of the photos and the Time stamp when the photo was taken by the camera (mostly loaded days or even weeks/months later)\n<table border=\"1\"  style='background-color:#009900;'  >\n<tr>\n  <th>User Uploaded</th><th>User photos Count</th>\n  <th>Photo ID</th><th>Original Size MP</th><th>Was Taken</th>\n</tr>\n```", "```php\n<?PHP foreach($photos as $photo )\n{\n  // get the owner id\n  $uid = $photo['owner'];\n  // Get User Info\n  $user_info = $this->flickr_wrapper->flickrUserInfo ($uid);\n  $photos = number_format ($user_info[\"photos\"]);\n  $mp_res = (int) ((( $photo['o_width' ] * $photo['o_height'] )/ 1000000)  +  1);\n  ?> \n  <tr>\n    <td> <?=$photo['ownername'] ?></td>\n    <td> <?=$photos ?></td>\n    <td> <?=$photo['id'] ?></td>\n    <td> <?=$mp_res ?></td>\n    <td> <?=$photo['datetaken'] ?></td>\n  </tr>\n  <?PHP      } ?>\n  </table>\n</div>\n</body>\n</html>\n```", "```php\n    Client > Server request token URL\n    parameter: callback URL < Server returns oauth token, ouath token secret\n    ```", "```php\n    Client > Server auth URL\n    $_GET parameter: oauth token\n    ```", "```php\n    Client < Server\n    oauth token, oauth token secret, oauth_verifier\n    ```", "```php\n    Client > Server access token path\n    parameter: oauth_verifier (from phase 2) < Server returns oauth token, ouath token secret\n    ```", "```php\n<?php\n\nif (!defined('BASEPATH')) exit('No direct script access allowed');\n\n// The php oauth extension is required\n// For more information refer to \n// http://il1.php.net/manual/en/book.oauth.php\nif(!extension_loaded('oauth')) {\n  throw new Exception('Simple-LinkedIn: library not compatible with installed PECL oauth extension. Please disable this extension to use the Simple-LinkedIn library.');\n  }\n/*\n *   CodeIgniter LinkedIn API\n *\n *   @package CodeIgniter\n *\n *   @author  Yehuda Zadik\n *\n *\n *   Enable Simple LinkedIn API usage\n */\nclass Linkedin_handler {\n  const LINKEDIN_API_URL = 'https://api.linkedin.com';\n\n  private $api_key;\n  private $secret_key;\n  private $on_failure_url;\n\n  // Oauth class\n  public $oauth_consumer;\n\n  // The url to return to from LinkedIn\n  // authorize url in our case is// http://mydomain.com/return_from_provider\n  private $callback_url;\n\n  // The request token URL\n  private $request_token_url;\n\n  // LinkedIn authorize URL for getting the LinkedIn user // confirmation for required permissions\n  private $authorize_path;\n\n  // LinkedIn URL for getting the tokens to access // the LinkedIn URL resources\n  private $access_token_path;\n\n  // accessory variable for accessing the LinkedIn resources\n  private $api_url;\n\n  // CI instance\n  private $CI;\n\n  /*\n   *  Set the class variables\n   */\n  private function set_varaiables() {\n    $this->request_token_url = self::LINKEDIN_API_URL . '/uas/oauth/requestToken';\n    $this->authorize_path = self::LINKEDIN_API_URL . '/uas/oauth/authorize';\n    $this->access_token_path = self::LINKEDIN_API_URL . '/uas/oauth/accessToken';\n\n    $this->api_url = array('people' => 'http://api.linkedin.com/v1/people/~' , 'connections' => 'http://api.linkedin.com/v1/people/~/connections', 'companies' => 'http://api.linkedin.com/v1/companies/');\n\n    $this->CI = &get_instance();\n    }\n  /*\n   *  Library constructor\n   *\n   *  Initializes the library variables\n   *  and initializes oauth consumer object\n   *\n   *  @param $config array of the Linked configuration variables\n   */\n  public function __construct($config) {\n    // Setting the handler's variables;\n    foreach ($config as $k => $v) {\n      $this->$k = $v;\n      }\n\n    // Setting all the class variables\n    $this->set_varaiables();\n\n    // Initializing the oauth consumer object\n    $this->oauth_consumer = new oauth($this->api_key, $this->secret_key);\n\n    // Enabling Oauth debug\n    $this->oauth_consumer->enableDebug();\n\n    // Checking if returned from the LinkedIn UI permission // conformation window\n    if ($this->CI->input->get('oauth_verifier') || $this->CI->input->get('oauth_problem')) {\n      $this->on_success();\n      } elseif (!$this->CI->session->userdata('oauth_token') && !$this->CI->session->userdata('oauth_token_secret')) {\n      // if session variables are not set: oauth_token, // oauth_token_secret\n      // call auth to start the process of getting the tokens from // LinkedIn via the oauth consumer object\n      $this->auth();\n      } elseif ($this->CI->session->userdata('oauth_token') && $this->CI->session->userdata('oauth_token_secret')) {\n      // if session variables are set: oauth_token, // oauth_token_secret initialize the oauth consumer with // $oauth_token, $oauth_token_secret\n      $oauth_token = $this->CI->session->userdata('oauth_token');\n      $oauth_token_secret = $this->CI->session->userdata('oauth_token_secret');\n\n      // initialize oauth consumer with $oauth_token, // $oauth_token_secret\n      $this->setToken($oauth_token, $oauth_token_secret);\n      }\n    }\n  /*\n   * Start the process of getting oauth token & oauth token * secret so that the user\n   * redirects to a LinkedIn UI permission conformation window\n   */\n  public function auth()  {\n    // Start communication with the LinkedIn server\n    $request_token_response = $this->getRequestToken();\n\n    $this->CI->session->set_userdata('oauth_token_secret', $request_token_response['oauth_token_secret']);\n\n    // Get the token for the LinkedIn authorization url\n    $oauth_token = $request_token_response['oauth_token'];\n\n    $log_message = 'yuda auth getRequestToken oauth_token: : ' . $oauth_token;\n    $log_message = \"oauth_token_secret: \" . $request_token_response['oauth_token_secret'] . \"\\n\";\n    log_message('debug', $log_message) ;\n\n    // Redirect to the LinkedIn authorization url for getting // permissions for the app\n    header(\"Location: \" . $this->generateAuthorizeUrl($oauth_token));\n    }\n  /*\n   * This is the method called after returning\n   * from the LinkedIn authorization URL\n   * The returned values from the LinkedIn authorization URL are: * oauth_token, oauth_token_secret, oauth_verifier\n   * Those values are used to retrieve oauth_token, * oauth_token_secret for accessing the LinkedIn resources\n   *\n   */\n  public function on_success() {\n    if ($this->CI->input->get('oauth_problem')) {\n      redirect($this->on_failure_url);\n      }\n\n    // Set the oauth consumer tokens\n    $this->setToken($this->CI->input->get('oauth_token'), $this->CI->session->userdata('oauth_token_secret'));\n\n    // Sending request to the LinkedIn access_token_path to // receive the array, which it's keys are tokens: oauth_token, // oauth_token_secret for accessing the LinkedIn resources\n    $access_token_reponse = $this->getAccessToken($this->CI->input->get('oauth_verifier'));\n\n    // Setting the session variables with the tokens: oauth_token, // oauth_token_secret for accessing the LinkedIn resources\n    $this->CI->session->set_userdata('oauth_token', $access_token_reponse['oauth_token']);\n    $this->CI->session->set_userdata('oauth_token_secret',$access_token_reponse ['oauth_token_secret']);\n\n    // Redirecting to the main page\n    redirect('');\n    }\n\n  /*\n   * This method sends the request token to LinkedIn\n   *\n   * @return array keys: oauth_token, oauth_token_secret\n   */\n  public function getRequestToken() {\n    // The LinkedIn request token url\n    $request_token_url = $this->request_token_url;\n\n    // The LinkedIn app permissions\n    $request_token_url = \"?scope = r_basicprofile+r_emailaddress+r_network\";\n\n    // Getting the response from the LinkedIn request token URL.\n    // The method returns the response, which is an array// with the following keys: oauth_token, oauth_token_secret\n    return $this->oauth_consumer->getRequestToken($request_token_url, $this->callback_url);\n    }\n  /*\n   * This method returns the LinkedIn authorize URL\n   *\n   * @param $oauth_token string oauth token for the LinkedIn * authorzation URL\n   *\n   * @return string URL of the LinkedIn authorization URL\n   */\n  public  function generateAuthorizeUrl($oauth_token) {\n    return $this->authorize_path . \"?oauth_token = \" . $oauth_token;\n    }\n  /*\n   * This method sets the token and secret keys of\n   * the oauth object of the oauth protocol\n   *\n   * @param $oauth_token string oauth token\n   * @param $oauth_token_secret oauth_token_secret\n   *\n   */\n  public function setToken($oauth_token, $oauth_token_secret) {\n    $this->oauth_consumer->setToken($oauth_token, $oauth_token_secret);\n    }\n  /*\n   * This method requests the LinkedIn tokens for\n   * accessing the LinkedIn resources\n   * It returns an array with the following keys: oauth_token, * oauth_token_secret\n   *\n   * @param $oauth_verifier string\n   *\n   * @return array Array with the following keys: *  oauth_token, oauth_token_secret,\n   * which are used to access the LinkedIn resources URL\n   */\n  public function getAccessToken($oauth_verifier) {\n    try {\n      // Returns an array with the following keys: // oauth_token, oauth_token_secret\n      // These keys are used to access the LinkedIn // resources URL\n      return $this->oauth_consumer->getAccessToken($this->access_token_path, '', $oauth_verifier);\n      } catch(OAuthException $E) {\n      echo \"<pre>\";var_dump($this->oauth_consumer);\n      echo \"</pre><br><br>\";\n      echo \"Response: \". $E->lastResponse;\n      exit();\n      }\n    }\n  /*\n   * This function returns a LinkedIn user's details\n   * It returns a JSON string containing these values\n   *\n   * @return $json string String containing user's details\n   */\n  public function me() {\n    $params = array();\n    $headers = array();\n    $method = OAUTH_HTTP_METHOD_GET;\n    $api_url = $this->api_url['people'] . '?format = json';\n\n    try {\n      // Request for a LinkedIn user's details\n      $this->oauth_consumer->fetch ($api_url, $params, $method, $headers);\n\n      // Receiving the last response with json // containing the user's details\n      $s_json = $this->oauth_consumer->getLastResponse();\n      return $s_json;\n      } catch(OAuthException $E) {\n      echo \"<pre>\";var_dump($this->oauth_consumer);\n      echo \"</pre><br><br>\";\n      echo \"Response: \". $E->lastResponse;\n      exit();\n      }\n    }\n  /*\n   * This function returns a LinkedIn user's connections\n   * It returns a JSON string containing these values\n   *\n   * @return $json string String containing user's connections\n   */\n  public function connections() {\n    $params = array();\n    $headers = array();\n    $method = OAUTH_HTTP_METHOD_GET;\n    $api_url = $this->api_url['connections'] . '?count = 10&format = json';\n\n    try {\n      // Request for a LinkedIn user's connections\n      $this->oauth_consumer->fetch($api_url, $params, $method, $headers);\n\n      // Receiving the last response with json containing the user's // connections\n      $s_json = $this->oauth_consumer->getLastResponse();\n      return $s_json;\n      } catch(OAuthException $E) {\n      echo \"<pre>\";var_dump($this->oauth_consumer);\n      echo \"</pre><br><br>\";\n      echo \"Response: \". $E->lastResponse;\n      exit();\n      }\n    }\n  /*\n   * This function returns a LinkedIn company' details\n   * It returns a JSON string containing these values\n   *\n   * @param Integer $company_id - company id\n   *\n   * @return $json string String containing a company' details\n   */\n  public function company($company_id) {\n    $params = array();\n    $headers = array();\n    $method = OAUTH_HTTP_METHOD_GET;\n    $api_url = $this->api_url['companies'] . $company_id;\n\n    // The following company's details are required: // company_id, number of employees, foundation year, // number of the company's followers\n    $api_url = ':(id, name, website-url, twitter-id, employee-count-range, specialties, founded-year, num-followers)?format = json';\n\n    try {\n      // Request for a LinkedIn company's details\n      $this->oauth_consumer->fetch($api_url, $params, $method, $headers);\n\n      // Receiving the last response with json containing the // company's details\n      $s_json = $this->oauth_consumer->getLastResponse();\n      return $s_json;\n      } catch(OAuthException $E) {\n      echo \"<pre>\";var_dump($this->oauth_consumer);\n      echo \"</pre><br><br>\";\n      echo \"Response: \". $E->lastResponse;\n      exit();\n      }\n    }\n  /*\n   * This function returns a LinkedIn company' three updates\n   * It returns a JSON string containing these values\n   *\n   * @param Integer $company_id - company id\n   *\n   * @return $json string String containing company's three updates\n   */\n  public function company_updates($company_id) {\n    $params = array();\n    $headers = array();\n    $method = OAUTH_HTTP_METHOD_GET;\n    $api_url = $this->api_url[ 'companies'] . $company_id . '/updates?start = 0 & count = 3 & format = json';\n\n    try {\n      // Request for a LinkedIn company's three updates\n      $this->oauth_consumer->fetch($api_url, $params, $method, $headers);\n\n      // Receiving the last response with json // containing company's three updates\n      $s_json = $this->oauth_consumer->getLastResponse();\n      return $s_json;\n      } catch(OAuthException $E) {\n      echo \"<pre>\"; var_dump($this->oauth_consumer);\n      echo \"</pre><br><br>\";\n      echo \"Response: \". $E->lastResponse;\n      exit();\n      }\n    }\n  }\n// Class closing tags\n/*  End of file linkedin.php */\n/* Location: ./application/libraries/linkedin_handler.php */\n```", "```php\n<?php\nif (!defined('BASEPATH')) exit('No direct script access allowed');\n\n/**\n * *\n * The controller is loading our developed library * LinkedIn (wrapper)\n * Next, the following process will occur in the loaded library.\n * 1 – get oauth token & oauth token secret so that the user * will be redirected to a LinkedIn UI permission conformation * window to approve our requested permission.\n * 2 – If user confirms the permissions we requested, * the method onSuccess is called with the * oauth token & oauth token secret as $_GET parameters.* The tokens will be stored as session parameters. * Else we cannot proceed querying LinkedIn and the onFailure.\n *\n * Now we can access the LinkedIn resources using the retrieved .*.tokens.\n * Here are the methods that query LinkedIn resources: * me() – Get the Info of the User who confirmed the permissions\n * connections() - Get the preceding user connection records JSON * formatted\n * company() – We just gave an example how to retrieve any company * by company id we got from the results or query company * id by company id or search criteria\n * company_updates() – Let us get the latest updates of this * company\n */\nclass Linkedinfo extends CI_Controller {\n  // array of LinkedIn configuration variables\n  private $linkedin_config;\n\n  // callback url from the LinkedIn authorization URL\n  private $callback_url;\n  /*\n   * Controller constructor\n   *\n   * Checks if session variables are set: oauth_token, * oauth_token_secret\n   * If they are set, then it initializes the oauth consumer\n   * else it will call the method auth() to start the * process of setting the token\n   * It also loads the LinkedIn library\n   */\n  public function __construct() {\n\n    parent::__construct();\n\n    $linked_config = array(\n      // Application keys registered in the // LinkedIn developer app\n      ‹api_key› => ‹esq76cosbm9x›, ‹secret_key› => ‹TyUQ2FzRRzWz9bHk›,// The url to return from the // LinkedIn confirmation URL\n        ‹callback_url› => base_url() . ‹linkedinfo/on_success›,// The URL when the failure occurs\n          ‹on_failure_url› => ‹linkedinfo/on_failure›);\n\n    // Load the LinkedIn library\n    $this->load->library(‹linkedin_handler›, $linked_config);\n    }\n  /*\n   * Load the main menu of the application\n   */\n  public function index() {\n    $this->load->view(‹linkedin-menu›);\n    }\n  /*\n   * This is the method called after returning* from the LinkedIn authorization URL\n   * The returned values from the LinkedIn authorization URL are: * oauth_token, oauth_token_secret, oauth_verifier\n   * Those values are used to retrieve oauth_token, * oauth_token_secret for accessing the LinkedIn resources\n   *\n   *\n   */\n  public function onSucess() {\n    // Set the oauth consumer tokens\n    $this->linkedin->setToken($this->input->get(‹oauth_token›), $this->session->userdata(‹oauth_token_secret›));\n\n    // Sending the request to the LinkedIn access_token_path to \n    // receive the array, which it's keys\n    // are tokens: oauth_token, oauth_token_secret for // accessing the LinkedIn resources\n    $access_token_reponse = $this->linkedin->getAccessToken($this->input->get('oauth_verifier'));\n\n    // Setting the session variables with the tokens: oauth_token, // oauth_token_secret for accessing the LinkedIn resources\n    $this->session->set_userdata(‹oauth_token›, $access_token_reponse[‹oauth_token›]);\n    $this->session->set_userdata(‹oauth_token_secret›, $access_token_reponse[‹oauth_token_secret›]);\n\n    // Redirecting to the main page\n    redirect(‹›);\n    }\n  /*\n   *\n   */\n  /*\n   * This function calls the library method me to get\n   * the LinkedIn user›s details\n   */\n  public function me() {\n    // Get the LinkedIn user›s details\n    $s_json = $this->linkedin->me();\n    $o_my_details = json_decode($s_json);\n    $prodile_url = $o_my_details->siteStandardProfileRequest->url;\n\n    $view_params[‹my_details›] = $o_my_details;\n    $view_params[‹profile_url›] = $prodile_url;\n\n    // Load the view for displaying the LinkedIn user›s details\n    $this->load->view(‹linkedin-me›, $view_params);\n    }\n  /*\n   * This function calls the library method me to get\n   * the LinkedIn user›s connections\n   */\n  public function connections() {\n    // Get the LinkedIn user›s connections\n    $s_json = $this->linkedin->connections();\n    $o_json = json_decode($s_json);\n\n    // Processing data received from the LinkedIn library\n    $a_connections = array();\n    for ($index = 0; $index < $o_json->_count; $index++) {\n      if ($o_json->values[$index]->id == ‹private›) {\n        continue;\n        }\n\n      if (isset($o_json->values[$index]->pictureUrl)) {\n        $picture_url = $o_json->values[$index]->pictureUrl;\n        } else {\n        $picture_url = ‹› ;\n        }\n\n      $a_connections[] = array(‹picture_url› => $picture_url, ‹name› => $o_json->values[$index]->firstName . « «. $o_json->values[$index]->lastName, ‹headline› => $o_json->values[$index]->headline, ‹industry› => $o_json->values[$index]->industry, ‹url› => $o_json->values[$index]->siteStandardProfileRequest->url);\n      }\n\n    $view_params[‹connections_count›] = $o_json->_total;\n    $view_params[‹connections›] = $a_connections;\n\n    // Load the view for displaying the LinkedIn user›s // connections\n    $this->load->view(‹linked-connections›, $view_params);\n    }\n  /*\n   * This function the calls library method me to get\n   * the LinkedIn company›s details\n   *\n   * @param $company_id integer - Linkedin company id\n   */\n  public function companies($company_id) {\n    // Get the LinkedIn company›s details\n    $s_json = $this->linkedin->company($company_id);\n    $o_company_details = json_decode( $s_json);\n\n    $a_company_details = array (‹id› => $company_id, ‹name› => $o_company_details->name, ‹specialties› => $o_company_details->specialties->values, ‹websiteUrl› => $o_company_details->websiteUrl, ‹employeeCountRange› => $o_company_details->employeeCountRange->name, ‹foundedYear› => $o_company_details->foundedYear, ‹numFollowers› => $o_company_details->numFollowers);\n\n    // Load the view for displaying the LinkedIn company›s // details\n    $view_params = $a_company_details;\n    $this->load->view(‹linked-company›, $view_params);\n    }\n  /*\n   * This function calls the library method me to get\n   * the LinkedIn company›s updates\n   *\n   *  @param $company_id integer - Linkedin company id\n   */\n  public function company_updates($company_id) {\n    // Get the LinkedIn company›s updates\n    $s_json = $this->linkedin->company_updates($company_id);\n    $o_company_updates = json_decode( $s_json);\n\n    // Processing the data received from the LinkedIn library\n    $a_updates = array();\n    $a_json_updates = $o_company_updates->values;\n    for ($index = 0; $index < count($a_json_updates);$index++) {\n        $o_update = $a_json_updates[$index];\n\n        if (isset($o_update->updateContent->companyJobUpdate)) {\n          $a_updates[] = array(‹type› => ‹Job Update›, ‹position› => $o_update->updateContent->companyJobUpdate->job->position->title, ‹url› => $o_update->updateContent->companyJobUpdate->job->siteJobRequest->url);\n        }\n      }\n\n    // Load the view for displaying the LinkedIn // company›s updates\n    $view_params[‹updates›] = $a_updates;\n    $this->load->view(‹linked-company-updates›, $view_params);\n    }\n  } // class closing tags\n/* End of the file linkedinfo.php */\n/* Location: ./application/controllers/linkedinfo.php */\n```", "```php\n<!DOCTYPE html>\n<html lang = \"en\">\n<head>\n  <meta charset = \"utf-8\">\n  <title>My Details</title>\n</head>\n<body>\n<table>\n<tr>\n  <td>Full Name:</td>\n  <td><?php echo $my_details->firstName . « « . $my_details->lastName ; ?></td>\n</tr>\n<tr>\n  <td>Title</td>\n  <td><?php echo $my_details->headline ; ?></td>\n</tr>\n<tr>\n  <td>My LinkedIn profile</td>\n  <td><a href = «<?php echo $profile_url ?>» target = «_blank»>Link</a> </td>\n</tr>\n</table>\n\n<div>\n  <p><a href = «<?php echo site_url(‹›) ; ?>»>Back to Menu</a> </p>\n</div>\n</body>\n</html>\n```", "```php\n<!DOCTYPE html>\n<html lang = \"en\">\n<head>\n  <meta charset = \"utf-8\">\n  <title>My Connections</title>\n</head>\n<body>\n<h1>My Total connections: <?php echo $connections_count ; ?></h1>\n<div>\n  <p><a href = «<?php echo site_url(‹›) ; ?>»>Back to Menu</a> </p></div>\n<table>\n<tr>\n  <td>Picture</td>\n  <td>Name</td>\n  <td>Headline</td>\n  <td>Industry</td>\n</tr>\n  <?php foreach ($connections as $connection): ?>\n<tr>\n  <td><img src = «<?php echo $connection[‹picture_url›]; ?>»> </td>\n  <td><a href = «<?php echo $connection[‹url›];?>» target = «_blank»><?php echo $connection[‹name›] ?></a></td>\n  <td><?php echo $connection[‹headline›]; ?></td>\n  <td><?php echo $connection[‹industry›]; ?></td>\n</tr>\n<?php endforeach; ?>\n</table>\n</body>\n</html>\n```", "```php\n<!DOCTYPE html>\n<html lang = \"en\">\n<head>\n  <meta charset = \"utf-8\">\n  <title>Company</title>\n</head>\n<body>\n\n<div>\n  <p><a href = «<?php echo site_url(‹›); ?>»>Back to Menu</a></p>\n</div>\n\n<table>\n<tr>\n  <td>Name</td>\n  <td><?php echo $name; ?></td>\n</tr>\n<tr>\n  <td>Founded</td>\n  <td><?php echo $foundedYear; ?></td>\n</tr>\n<tr>\n  <td>employeeCountRange</td>\n  <td><?php echo $employeeCountRange; ?></td>\n</tr>\n<tr>\n  <td>Specialties<td>\n  <td>\n    <ul>\n      <?php foreach ($specialties as $specialty): ?>\n      <li><?php echo $specialty; ?></li>\n      <?php endforeach; ?>\n    </ul>\n  </td>\n</tr>\n<tr>\n  <td>Website</td>\n  <td><a href = «<?php echo $websiteUrl; ?>»>Website</a></td>\n</tr>\n<tr>\n  <td>numFollowers</td>\n  <td><?php echo $numFollowers; ?></td>\n</tr>\n</table>\n<div style = «margin-top: 10px;»>\n  <a href = «<?php echo site_url(‹linkedinfo/company_updates/7919›); ?>»>Updates</a>\n</div>\n</body>\n</html>\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset = \"utf-8\">\n    <title>Company</title>\n</head>\n<body>\n<div>\n  <p><a href = \"<?php echo site_url('') ; ?>\">Back to Menu</a> </p>\n</div>\n<table>\n  <?php foreach ($updates as $update): ?>\n  <tr>\n    <td>\n      <ul>\n        <?php foreach ($update as $key => $val): ?>\n        <li><?php echo $key; ?>: <?php echo $val; ?></li>\n        <?php endforeach; ?>\n      </ul>\n    </td>\n  </tr>\n  <?php endforeach; ?>\n</table>\n</body>\n</html>\n```"]