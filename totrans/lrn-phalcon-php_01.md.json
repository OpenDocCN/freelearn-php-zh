["```php\n$ sudo add-apt-repository ppa:ondrej/php5\n$ sudo apt-get update\n\n```", "```php\n$ sudo apt-get install php\n\n```", "```php\n$ sudo apt-get install php5 php5-fpm\n\n```", "```php\n$ sudo apt-get install php5-common\n$ sudo apt-get install php5-cgi\n$ sudo apt-get install php5 php5-fpm\n\n```", "```php\n$ sudo add-apt-repository ppa:nginx/stable\n$ sudo apt-get update\n$ sudo apt-get install nginx\n\n```", "```php\n$ sudo apt-get install mysql-server\n\n```", "```php\n$ sudo add-apt-repository ppa:chris-lea/redis-server\n$ sudo apt-get update\n$ sudo apt-get install redis-server\n$ sudo apt-get install php5-redis\n\n```", "```php\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n$ echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list\n$ sudo apt-get update\n$ sudo apt-get install -y mongodb-org\n$ sudo service mongodb start\n$ sudo apt-get install php5-mongo\n\n```", "```php\n$ sudo apt-get install git\n\n```", "```php\n$ sudo apt-get install php5-dev libpcre3-dev gcc make php5-mysql\n\n```", "```php\n$ git clone --depth=1 git://github.com/phalcon/cphalcon.git\n$ cd cphalcon/build\n$ sudo ./install\n$ echo 'extension=phalcon.so' | sudo tee /etc/php5/mods-available/phalcon.ini\n\n$ sudo php5enmod phalcon\n$ sudo service php5-fpm restart\n\n```", "```php\n$ php -m | grep phalcon\n```", "```php\n$ sudo mkdir -p /var/www/learning-phalcon.localhost/public\n\n```", "```php\n$ cd /var/www/learning-phalcon.localhost/public\n$ echo \"<?php date();\" > index.php\n\n```", "```php\n    $ vim learning-phalcon.localhost.conf\n\n    ```", "```php\n    <VirtualHost *:80>\n        DocumentRoot \"/var/www/learning-phalcon.localhost\"\n        DirectoryIndex index.php\n        ServerName learning-phalcon.localhost\n        ServerAlias www.learning-phalcon.localhost\n\n        <Directory \"/var/www/learning-phalcon.localhost/public\">\n            Options All\n            AllowOverride All\n            Allow from all\n        </Directory>\n    </VirtualHost>\n    ```", "```php\n    $ cd /var/www/learning-phalcon.localhost/public\n    $ vim .htaccess\n\n    ```", "```php\n    <IfModule mod_rewrite.c>\n        RewriteEngine On\n        RewriteCond %{REQUEST_FILENAME} !-d\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^(.*)$ index.php?_url=/$1 [QSA,L]\n    </IfModule>\n    ```", "```php\n    $ sudo a2enmod rewrite\n\n    ```", "```php\n    $ sudo a2ensite learning-phalcon.localhost\n    $ sudo service apache2 reload\n\n    ```", "```php\n$ echo \"127.0.0.1 learning-phalcon.localhost www.learning-phalcon.localhost\" | sudo tee /etc/hosts\n\n```", "```php\n$ cd /etc/nginx/sites-available\n$ vim learning-phalcon.localhost\n\n```", "```php\nserver {\n    listen 80;\n    server_name learning-phalcon.localhost;\n\n    index index.php;\n    set $root_path \"/var/www/learning-phalcon.localhost/public\";\n    root $root_path;\n\n    client_max_body_size 10M;\n\n    try_files $uri $uri/ @rewrite;\n\n    location @rewrite {\n        rewrite ^/(.*)$ /index.php?_url=/$1;\n    }\n\n    location ~ \\.php {\n        fastcgi_index /index.php;\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_intercept_errors on;\n        include fastcgi_params;\n\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n\n        fastcgi_param PATH_INFO $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param DOCUMENT_ROOT $realpath_root;\n        fastcgi_param SCRIPT_FILENAME $realpath_root/index.php;\n    }\n\n    location ~* ^/(css|img|js|flv|swf|download)/(.+)$ {\n        root $root_path;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n\n```", "```php\n$ sudo service nginx restart\n\n```", "```php\n<?php\n\n$di = new Phalcon\\DI();\n// Lazy load\n$di['mail'] = function() {\n  return new \\MyApp\\Mail();\n};\n```", "```php\n<?php\n\n$mail = $this->getID()->get('mail');\n// or\n$mail = $this->getDI()->getMail();\n```", "```php\n<?php\n\nclass ArticleController extends \\Phalcon\\Mvc\\Controller\n{\n  // Method for rendering the form to create an article\n  public function createAction()\n  {\n  }\n\n  // Method for searching articles\n  public function searchAction()\n  {\n  }\n\n  // This method will not be accessible via http GET\n  public function search()\n  {\n  }\n}\n```", "```php\n<?php\n\nclass ArticleController extends \\Phalcon\\Mvc\\Controller\n{\n  public function searchAction()\n  {\n    $request = $this->getDI()->get('request');\n    // You can also use $request = $this->request; but I don't\n    // recommend it because $this->request can be easily overwritten\n    // by mistake and you will spend time to debug ... nothing.\n\n    $request->getMethod(); // Check the request method\n    $request->isAjax(); // Checks if the request is an ajax request\n    $request->get(); // Gets everything, from the request (GET, POST, DELETE, PUT)\n    $request->getPost(); // Gets all the data submitted via POST method\n    $request->getClientAddress(); // Return the client IP\n  }\n}\n```", "```php\n<?php\n\npublic function testRedirectAction()\n{\n  $response = $this->getDI()->get('response');\n   // or you can use $this->response directly\n\n  // Redirect the user to another url\n  $this->view->disable();\n  return $response->redirect('http://www.google.com/', true);\n}\n```", "```php\n  <?php\n```", "```php\n  /**\n  * Redirect by HTTP to another action or URL\n  *\n  * @param string $location\n  * @param boolean $externalRedirect\n  * @param int $statusCode\n  * @return \\Phalcon\\Http\\ResponseInterface\n  */\n  public function redirect($location, $externalRedirect, $statusCode);\n```", "```php\n<?php\n\npublic function testSetHeaderAction()\n{\n  $this->response->setHeader('APIKEY', 'AWQ23XX258561');\n}\n```", "```php\n<?php\n\npublic function testContentAction()\n{\n  // First, we disable the view if there is any\n  $this->view->disable();\n\n  // Set a plain/text or html content\n  $this->response->setContent('I love PhalconPHP');\n\n  // OR\n\n  // Set a json content (this will return a json object)\n  $this->response->setJsonContent(array(\n    'framework' => 'PhalconPHP'\n    'versions' => array(\n      '1.3.2',\n      '1.3.3',\n      '2.0.0'\n    )\n  ));\n\n  // We send the output to the client\n  return $this->response->send();\n}\n```", "```php\n<?php\n\n$this->response->setContentType('application/json', 'UTF-8');\n```", "```php\n    <?php\n\n    $di['logger'] = function() {\n      $error_file = __DIR__.'/../logs/'.date(\"Ymd_error\").'log';\n      return new \\Phalcon\\Logger\\Adapter\\File($error_file, array('mode' => 'a+'));\n    };\n    ```", "```php\n    <?php\n\n    public function testLoggerAction()\n    {\n      try {\n        $nonExistingComponent = $this->getDI()->get('nonExistingComponent');\n        $nonExistingComponent->executeNonExistingMethod();\n      } catch (\\Exception $e) {\n        $this->logger->error($e->getMessage());\n        return $this->response->redirect('error/500.html');\n      }\n    }\n    ```", "```php\n<?php\n\n$this->logger->begin();\n\n$this->logger->error('Ooops ! Error !');\n$this->logger->warning('A warning message');\n\n$this->logger->commit();\n```", "```php\n<?php\n\n$di['crypt'] = function () {\n  $crypt = new \\Phalcon\\Crypt();\n  $crypt->setKey('0urSup3rS3cr3tK3y!?');\n\n  return $crypt;  \n};\n\npublic function sendActivationAction()\n{\n  $activation_code = $this->crypt->encryptBase64('1234');\n  $this->view->setVar('activation_code', $activation_code);\n}\n\npublic function getActivationAction($code)\n{\n  if ('1234' == $this->crypt->decryptBase64($code)) {\n    $this->flash->success('The code is valid ');\n  } else {\n    $this->flash->error('The code is invalid');\n  }\n}\n```", "```php\npublic function registerAction()\n{\n  // â€¦ code\n  if ($errors) {  \n    $this->flash->warning('Please fix the following errors: ');\n    foreach($errors as $error) {\n      $this->flash->error($error);\n    }\n  } else {\n    $this->flash->success('You have successfully registered on our website');\n  }\n}  \n```", "```php\n<?php\n\npublic function registerAction()\n{\n  // render our template\n}\n```", "```php\n<?php\n\npublic function createAction()\n{\n  if ($errors) {  \n    $this->flashSession->warning('Please fix the following errors: ');\n    foreach($errors as $error) {\n      $this->flashSession->error($error);\n    }\n  } else {\n    $this->flashSession->success('You have successfully registered on our website');\n  }\n\n  return $this->response->redirect('/register');\n}\n```", "```php\n<?php\n\nclass PostController extends \\Phalcon\\Mvc\\Controller\n{\n  public function readAction()\n  {\n    // get the post\n  }\n}\n```", "```php\n<?php\n\n$router = new \\Phalcon\\Mvc\\Router();\n// Clear the default routes\n$router->clear();\n\n$st_categories = array(\n  'entertainment',\n  'travel',\n  'video'\n);\n\n$s_categories = implode('|', $st_categories);\n\n$router->add('#^/('.$s_categories.')[/]{0,1}$#', array(\n    'module' => 'frontend',\n    'controller' => 'post',\n    'action' => 'findByCategorySlug',\n    'slug' => 0\n));\n```", "```php\n$url = 'http://www.learning-phalcon.localhost/video';\npreg_match('#^/(entertainment|travel|video)[/]{0,1}$#', $url);\n```", "```php\n<?php\n\nclass PostController extends \\Phalcon\\Mvc\\Controller\n{\n  public function findByCategorySlug()\n  {\n    $slug = $this->dispatcher->getParam('slug', array('string', 'striptags'), null);\n\n    // We access our model (entity) to get all the posts from this category\n    $posts = Posts::findByCategorySlug($slug);\n\n    if ($posts->count() > 0) {\n      $this->view->setVar('posts', $posts);\n    } else {\n      throw new \\Exception('There are no posts', 404);\n    }\n  }\n}\n```", "```php\n<?php\n\nif ($_SERVER['REQUEST_METHOD'] == 'post') {\n  // process the information\n}\n```", "```php\n<?php\n\n// Add a get route for register method within the user controller\n$router->addGet('register', 'User::register');\n\n// Add a post route for create method, from the user controller\n$router->addPost('create', 'User::create');\n```", "```php\n<?php\n\n$st_settings = array(\n  'database' => array(\n    'adapter'  => 'Mysql',\n    'host'     => 'localhost',\n    'username' => 'john',\n    'password' => 'johndoe',\n    'dbname'     => 'test_database',\n  ),\n  'app' => array(\n    'name' => 'Learning Phalcon'\n  )\n);\n\n$config = new \\Phalcon\\Config($st_settings);\n\n// Get our application name:\necho $config->app->name; // Will output Learning Phalcon\n```", "```php\n<?php\n\n$st_config = $config->toArray();\necho $config['app']['name']; // Will output Learning Phalcon\n```", "```php\n<?php\n\n$config = array(\n  'database' => array(\n    'adapter'  => 'Mysql',\n    'host'     => 'localhost',\n    'dbname'     => 'test_database',\n  ),\n  'app' => array(\n    'name' => 'Learning Phalcon'\n  )\n);\n\n$config2 = array(\n  'database' => array(\n    'username' => 'john',\n    'password' => 'johndoe',\n  )\n```", "```php\n    <?php\n\n    $di['view'] = function () use ($config) {\n      $view = \\Phacon\\Mvc\\View();\n      // Assuming that we hold our views directory in the configuration file\n      $view->setViewsDir($config->view->dir);\n\n      return $view;\n    };  \n    ```", "```php\n    <?php\n\n    class PostControler extends \\Phalcon\\Mvc\\Controller\n    {\n      public function listAction()\n      {\n        // Retrieve posts from DB\n        $posts = Post:find();\n        $this->view->setVar('pageTitle', 'Posts');\n        $this->view->setVar('posts', $posts);\n      }\n    }\n    ```", "```php\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"UTF-8\">\n    <title><?php echo $pageTitle; ?></title>\n    </head>\n    <body>\n    <?php foreach($posts as $post) { ?>\n      <p><?php echo $post->getPostTitle(); ?></p>\n      <p><?php echo $post->getPostContent(); ?></p>\n    <?php } ?>\n    </body>\n    </html>\n    ```", "```php\napp/views/\n- index.phtml\n- post/detail.phtml\n```", "```php\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Learning Phalcon</title>\n</head>\n<body>\n<?php echo $this->getContent(); ?>\n</body>\n</html>\n```", "```php\n<?php foreach($posts as $post) { ?>\n  <p><?php echo $post->getPostTitle(); ?></p>\n  <p><?php echo $post->getPostContent(); ?></p>\n<?php } ?>\n```", "```php\n<?php\n\n$di['voltService'] = function($view, $di) use ($config) {\n\n    $volt = new \\Phalcon\\Mvc\\View\\Engine\\Volt($view, $di);\n\n    if (!is_dir($config->view->cache->dir)) {\n        mkdir($config->view->cache->dir);\n    }\n\n    $volt->setOptions(array(\n        \"compiledPath\" => $config->view->cache->dir,\n        \"compiledExtension\" => \".compiled\",\n        \"compileAlways\" => false\n    ));\n\n    $compiler = $volt->getCompiler();\n\n    return $volt;\n};\n\n// First, we setup the view in the DI\n$di['view'] = function () use ($config) {\n  $view = \\Phacon\\Mvc\\View();\n  $view->setViewsDir($config->view->dir);\n  $view->registerEngines(array(\n    '.volt' => 'voltService'\n  ));\n\n  return $view;\n};\n```", "```php\n    {{ my_content }}\n    ```", "```php\n    {% block body %} Content here {% endblock %}\n    ```", "```php\n    {% extends 'layouts/main.volt' %}\n    ```", "```php\n    {% include 'common/sidebar.volt' %}\n    ```", "```php\n    {% include 'common/sidebar' with{'section':'homepage'} %}\n    ```", "```php\n    {% for post in posts %}\n      {% if post.getCategorySlug() == 'entertainment' %}\n        <h3 class=\"pink\">{{ post.getPostTitle() }}</h3>\n      {% else %}\n        <h3 class=\"normal\">{{ post.getPostTitle() }}</h3>\n      {% endif %}\n    {% endfor %}\n    ```", "```php\n    {% for post in posts %}\n      {% if loop.first %}\n        <h1>{{ post.getPostTitle() }}</h1>\n      {% endif %}\n    {% endif %}\n    ```", "```php\n    {% set title = 'Learning Phalcon' %}\n    {% set cars = ['BMW', 'Mercedes', 'Audi'] %}\n    ```", "```php\n<!-- app/views/index.volt -->\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>{% block pageTitle %}Learning Phalcon{% endblock%}</title>\n</head>\n<body>\n  <div class='header'>{% block header %}Main layout header{% endblock%}</div>\n  <div class='content'>{% block content %}This is the main layout content{% endblock %}</div>\n</body>\n</html>\n\n<!-- app/views/post/detail.volt \n{% extends 'index.volt' %}\n\n{% block pageTitle  %}\n  {{ post.getPostTitle() }}\n{% endblock %}\n\n{% block header %}\n  Post layout\n{% endblock %}\n\n{% block content %}\n  <p>{{ post.getPostContent() }}</p>\n{% endblock%}\n```", "```php\n<?php\n\n$di['session'] = function () {\n  $session = new Phalcon\\Session\\Adapter\\Files();\n  $session->start();\n  return $session;  \n};\n```", "```php\n<?php\n\npublic function testSessionAction()\n{\n  // Set a session variable\n  $this->session->set('username', 'john');\n\n  // Check if a session variable is defined\n  if ($this->session->has('username')) {\n    $this->view->setVar('username', $this->session->get('username'));\n  }\n\n  // Remove a session variable\n  $this->session->remove('username');\n\n  // Destroy the session\n  $this->session->destroy();\n}\n```", "```php\n    SELECT IF(COUNT(*)>0, 1 , 0) FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_NAME`='user'\n    ```", "```php\n    DESCRIBE `user`\n    ```", "```php\n    SELECT * FROM user.\n    ```", "```php\n<?php\n\n$di['redis'] = function () {\n    $redis = new \\Redis();\n    $redis->connect(\n        '127.0.0.1',\n        6379\n    );\n\n    return $redis;\n};\n\n$di['cache'] = function () use ($di, $config) {\n    $frontend = new \\Phalcon\\Cache\\Frontend\\Igbinary(array(\n        'lifetime' => 86400\n    ));\n    $cache = new \\Phalcon\\Cache\\Backend\\Redis($frontend, array(\n        'redis' => $di['redis'],\n        'prefix' => 'learning_phalcon'\n    ));\n\n    return $cache;\n};\n```", "```php\n<?php\n\n// Save data in cache\n$this-cache->save('post', array(\n  'title' => 'Learning Phalcon',\n  'slug' => 'learning-phalcon',\n  'content' => 'Article content'\n));\n\n// Get data from cache\n$post = $this->cache->get('post');\n\n// Delete data from cache\n$this->cache->delete('post');\n```"]