["```php\npear channel-discover pear.chiaraquartet.net\npear install MyBlog\npear run-scripts chiara/MyBlog\n\n```", "```php\n$ pear install MDB2\n$ pear install MDB2_Driver_pgsql \n\n```", "```php\n$ pear install MDB2\n$ pear install MDB2_pgsql \n\n```", "```php\n$ pear install MDB2_pgsql\nNo releases available for package \"pear.php.net/MDB2_pgsql\"\nCannot initialize 'MDB2_pgsql', invalid or missing package file\nPackage \"Mdb2_pgsql\" is not valid\nInstall failed \n\n```", "```php\n$ pear uninstall MDB2 MDB2_Driver_pgsql \n\n```", "```php\n<dependencies>\n...\n...\n<group name=\"mssql\" hint=\"Microsoft SQL Server driver\">\n<package>\n<name>MDB2_Driver_mssql</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"sqlite\" hint=\"SQLite driver\">\n<package>\n<name>MDB2_Driver_sqlite</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"querysim\" hint=\"Query Simulator driver\">\n<package>\n<name>MDB2_Driver_querysim</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"pgsql\" hint=\"Postgresql driver\">\n<package>\n<name>MDB2_Driver_pgsql</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"oci8\" hint=\"Oracle 8 driver\">\n<package>\n<name>MDB2_Driver_oci8</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"mysqli\" hint=\"MySQL 4.1+ driver\">\n<package>\n<name>MDB2_Driver_mysqli</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"mysql\" hint=\"MySQL 4.0- driver\">\n<package>\n<name>MDB2_Driver_mysql</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"ibase\" hint=\"Interbase driver\">\n<package>\n<name>MDB2_Driver_ibase</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"fbsql\" hint=\"Firebird driver\">\n<package>\n<name>MDB2_Driver_fbsql</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n<group name=\"all\" hint=\"all drivers [for uninstall]\">\n<package>\n<name>MDB2_Driver_fbsql</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_ibase</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_mysql</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_mysqli</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_oci8</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_pgsql</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_querysim</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_sqlite</name>\n<channel>pear.php.net</channel>\n</package>\n<package>\n<name>MDB2_Driver_mssql</name>\n<channel>pear.php.net</channel>\n</package>\n</group>\n</dependencies>\n\n```", "```php\n$ pear install MDB2\nInstall ok: channel://pear.php.net/MDB2-2.2.0\nMDB2: Optional feature mssql available (Microsoft SQL Server driver)\nMDB2: Optional feature sqlite available (SQLite driver)\nMDB2: Optional feature querysim available (Query Simulator driver)\nMDB2: Optional feature pgsql available (Postgresql driver)\nMDB2: Optional feature oci8 available (Oracle 8 driver)\nMDB2: Optional feature mysqli available (MySQL 4.1+ driver)\nMDB2: Optional feature mysql available (MySQL 4.0- driver)\nMDB2: Optional feature ibase available (Interbase driver)\nMDB2: Optional feature fbsql available (Firebird driver)\nMDB2: Optional feature all available (all drivers [for uninstall]) \n\n```", "```php\n$ pear install MDB2#mysqli \n\n```", "```php\n$ pear uninstall MDB2#all \n\n```", "```php\nswitch($type) {\n// Sanitize to not fetch other URLs\ndefault:\ncase 'event':\n$url_type = 'event';\n$i18n = true;\nbreak;\ncase 'sidebar':\n$url_type = 'sidebar';\n$i18n = true;\nbreak;\ncase 'template':\n$url_type = 'template';\n$i18n = false;\nbreak;\n}\nif (!$i18n) {\n$lang = '';\n} elseif\n(isset($serendipity['languages'][$serendipity['lang']])) {\n$lang = '_' . $serendipity['lang'];\n} else {\n$lang = '_en';\n}\n$mirrors = $this->getMirrors('xml', true);\n$mirror = $mirrors[$this->get_config('mirror_xml', 0)];\n$url = $mirror . '/package_' . $url_type . $lang . '.xml';\n\n```", "```php\nif (in_array($data['class_name'], $plugins)) {\n$infoplugin =&\nserendipity_plugin_api::load_plugin($data['class_name']);\nif (is_object($infoplugin)) {\n$bag = new serendipity_property_bag;\n$infoplugin->introspect($bag);\nif ($bag->get('version') == $data['version']) {\n$installable = false;\n} elseif (version_compare($bag->get('version'),\n$data['version'], '<')) {\n$data['upgradable'] = true; \n$data['upgrade_version'] = $data['version'];\n$data['version'] = $bag->get('version');\n$upgradeLink =\n'&amp;serendipity[spartacus_upgrade]=true';\n}\n}\n}\n\n```", "```php\nforeach($files AS $file) {\n$url = $mirror . '/' . $sfloc . '/' .\n$file . '?rev=1.9999'; \n$target = $pdir . $file;\n@mkdir($pdir . $plugin_to_install);\n$this->fetchfile($url, $target);\nif (!isset($baseDir)) {\n$baseDirs = explode('/', $file);\n$baseDir = $baseDirs[0];\n}\n}\n\n```", "```php\n/************\nTODO:\n- Perform Serendipity version checks to only install plugins\navailable for version\n- Allow fetching files from mirrors / different locations -\ndon't use ViewCVS hack (revision 1.999 dumbness)\n***********/\n\n```", "```php\n$this->aChannels = array(\n'pear.phpkitchen.com' => 'Seagull',\n'pear.php.net' => 'PEAR',\n'pearified.com' => 'Pearified',\n);\n\n```", "```php\nswitch ($input->command) {\nSeagull FrameworkPEAR's abstract command interfacecase 'sgl-list-all':\nif ($serialized = $cache->get($cacheId, 'pear')) {\n$data = unserialize($serialized);\nSGL::logMessage('pear data from cache',\nPEAR_LOG_DEBUG);\n} else {\n$cmd = PEAR_Command::factory($input->command,\n$config);\n$data = $cmd->run($input->command, $opts, $params); \n$serialized = serialize($data);\n$cache->save($serialized, $cacheId, 'pear');\nSGL::logMessage('pear data from REST call',\nPEAR_LOG_DEBUG);\n}\nbreak;\ncase 'sgl-install':\ncase 'sgl-uninstall':\ncase 'sgl-upgrade':\n$params = array($input->pkg);\nob_start();\n$cmd = PEAR_Command::factory($input->command, $config);\n$ok = $cmd->run($input->command, $opts, $params); \n$pearOutput = ob_get_contents();\nob_end_clean();\nif ($ok) {\n$this->_redirectToDefault($input, $output);\n} else {\nprint '<pre>';print_r($ok);\n}\nbreak;\n}\n\n```", "```php\nrequire_once 'PEAR/Frontend.php';\nclass CaptureStuff extends PEAR_Frontend\n{\npublic $data = array();\nfunction log($msg)\n{\n$this->data[] = array('log' => $msg);\n}\nfunction outputData($data, $command = '_default')\n{\n$this->data[] = array('outputData' => array($data,\n$command));\n}\nfunction userConfirm()\n{\n// needed to satisfy interface contract PHP4-style\n}\n}\n$capture = new CaptureStuff;\nPEAR_Frontend::setFrontendObject($capture);\n// $config is a PEAR_Config object\n$cmd = PEAR_Command::factory($command, $config);\n$cmd->run($command, array(), $params);\n\n```", "```php\n$conf = &PEAR_Config::singleton();\n$conf->set('default_channel', 'pear.php.net');\n$conf->set('doc_dir', SGL_TMP_DIR);\n$conf->set('php_dir', SGL_LIB_PEAR_DIR);\n$conf->set('web_dir', SGL_WEB_ROOT);\n$conf->set('cache_dir', SGL_TMP_DIR);\n$conf->set('data_dir', SGL_TMP_DIR);\n$conf->set('test_dir', SGL_TMP_DIR);\n$conf->set('preferred_state', 'devel');\n\n```", "```php\n$reg = $this->_config->getRegistry();\n// default channel is set to the template channel\n$existing = $reg->packageInfo($template, 'version',\n$this->_config->get('default_channel'));\nif (version_compare($existing, $version) === 0) {\n// installed already\n$this->log('Template set as active template');\nreturn true;\n}\n\n```", "```php\n<required>\n<package>\n<name>Blah</name>\n<channel>foo.example.com</channel>\n<min>1.2.3</min>\n</package>\n\n```", "```php\narray(\n'name' => 'Blah',\n'channel' => 'foo.example.com',\n'min' => '1.2.3');\n\n```", "```php\n$e = $d2->validatePackageDependency($pdep, true, array());\n\n```", "```php\nPEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n$e = $d2->validatePackageDependency($pdep, true, array());\nPEAR::staticPopErrorHandling();\nif (PEAR::isError($e)) {\n// skip any template releases that cannot work\n// with the current version of MyBlog\ncontinue 2;\n}\n\n```", "```php\narray(\n'dependencies' => array(\n'required' => array(\n'package' => array(\n'name' => 'Blah',\n'channel' => 'foo.example.com',\n'min' => '1.2.3' \n)\n)\n)\n);\n\n```", "```php\narray(\n'dependencies' => array(\n'required' => array(\n'package' => array(\n0 => array(\n'name' => 'Blah',\n'channel' => 'foo.example.com',\n'min' => '1.2.3'),\n1 => array(\n'name' => 'Dep2',\n'channel' => 'foo.example.com',\n'min' => '1.2.3'),\n) \n)\n)\n);\n\n```", "```php\nif (isset($dep['required']) && isset($dep['required']['package'])) {\nif (!isset($dep['required']['package'][0])) {\n$dep['required']['package'] =\narray($dep['required']['package']);\n}\nforeach ($dep['required']['package'] as $pdep) {\nif (!isset($pdep['channel'])) {\n// skip uri-based dependencies\ncontinue;\n}\nif ($pdep['name'] == 'MyBlog' &&\n$pdep['channel'] == 'pear.chiaraquartet.net') {\nPEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n$e = $d2->validatePackageDependency($pdep, true,\narray());\nPEAR::staticPopErrorHandling();\nif (PEAR::isError($e)) {\n// skip any template releases that cannot work\n// with the current version of MyBlog\ncontinue 2;\n}\n}\n}\n}\n\n```", "```php\n/**\n* Retrieve information about a remote package to be downloaded\n* from a REST server\n*\n* @param string $base The uri to prepend to all REST calls\n* @param array $packageinfo an array of format:\n* <pre>\n* array(\n* 'package' => 'packagename',\n* 'channel' => 'channelname',\n* ['state' => 'alpha' (or valid state),]\n* -or-\n* ['version' => '1.whatever']\n* </pre>\n* @param string $prefstate Current preferred_state config\n* variable value\n* @param bool $installed the installed version of this package\n* to compare against\n* @return array|false|PEAR_Error see {@link _returnDownloadURL()}\n*/\nfunction getDownloadURL($base, $packageinfo, $prefstate, $installed)\n\n```", "```php\n$info = $this->getDownloadURL($this->_restBase,\narray('channel' => $this->_channel,\n'package' => $templateName,\n'version' => $version),\n$this->_config->get('preferred_state', null, $this->_channel),\n$installed\n);\nif (PEAR::isError($info)) {\nthrow new MyBlog_Template_Exception($info->getMessage());\n}\nif (!isset($info['url'])) {\nthrow new MyBlog_Template_Exception('Template \"' .\n$templateName . '\" cannot be installed');\n}\nif (!extension_loaded(\"zlib\")) {\n$ext = '.tar';\n} else {\n$ext = '.tgz';\n}\nreturn $info['url'] . $ext;\n\n```", "```php\n$downloader->download(array('PEAR-beta',\n'http://pear.example.com/Blah-1.2.3.tgz',\n'/path/to/Blah-1.2.3.tgz'));\n\n```", "```php\n$ui = PEAR_Frontend::singleton();\n$config = PEAR_Config::singleton();\n$downloader = new PEAR_Downloader($ui, $config,\narray('force' => true));\n\n```", "```php\n$ui = PEAR_Frontend::singleton();\n$config = PEAR_Config::singleton();\n$dl = new PEAR_Downloader($this, array('upgrade' => true),\n$this->_config);\n// download the actual URL to the template\n$downloaded = $dl->download(array($info));\nif (PEAR::isError($downloaded)) {\nthrow new MyBlog_Template_Exception($downloaded->getMessage());\n}\n$errors = $dl->getErrorMsgs();\nif (count($errors)) {\n$err = array();\nforeach ($errors as $error) {\n$err[] = $error;\n}\nif (!count($downloaded)) {\nthrow new MyBlog_Template_Exception('template \"' .\n$template . '\" installation failed:<br />' .\nimplode('<br />', $err));\n}\n}\n\n```", "```php\n// $templatePackage is the PEAR_Downloader_Package object\n// we received from PEAR_Downloader->download()\n// $template is the name of the template\n$ui = PEAR_Frontend::singleton();\n$installer = new PEAR_Installer($ui);\n$packages = array($templatePackage);\n// always upgrade\n$installer->setOptions(array('upgrade' => true));\n$installer->sortPackagesForInstall($packages); \nPEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n$err = $installer->setDownloadedPackages($packages); \nif (PEAR::isError($err)) {\nPEAR::staticPopErrorHandling();\nthrow new MyBlog_Template_Exception($err->getMessage());\n}\n// always upgrade\n$info = $installer->install($templatePackage,\narray('upgrade' => true)); \nPEAR::staticPopErrorHandling();\nif (PEAR::isError($info)) {\nthrow new MyBlog_Template_Exception($info->getMessage());\n}\nif (is_array($info)) {\n$this->log('Installation successful');\nreturn true;\n} else {\nthrow new MyBlog_Template_Exception('install of \"' . $template .\n'\" failed');\n}\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<channel version=\"1.0\" \n\nxsi:schemaLocation=\"http://pear.php.net/dtd/channel-1.0\nhttp://pear.php.net/dtd/channel-1.0.xsd\">\n<name>pear.chiaraquartet.net/template</name>\n<summary>Template example for book</summary>\n<suggestedalias>te</suggestedalias>\n<servers>\n<primary>\n<rest>\n<baseurl type=\"REST1.0\">\nhttp://pear.chiaraquartet.net/Chiara_PEAR_Server_REST/</baseurl>\n<baseurl type=\"REST1.1\">\nhttp://pear.chiaraquartet.net/Chiara_PEAR_Server_REST/</baseurl>\n</rest>\n</primary>\n</servers>\n</channel>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<channel version=\"1.0\" \n\nxsi:schemaLocation=\"http://pear.php.net/dtd/channel-1.0\nhttp://pear.php.net/dtd/channel-1.0.xsd\">\n<name>pear.chiaraquartet.net/template</name>\n<summary>Template example for book</summary>\n<suggestedalias>te</suggestedalias>\n<servers>\n<primary>\n<rest>\n<baseurl type=\"REST1.0\">\nhttp://pear.chiaraquartet.net/template/Chiara_PEAR_Server_REST/\n</baseurl>\n<baseurl type=\"REST1.1\">\nhttp://pear.chiaraquartet.net/template/Chiara_PEAR_Server_REST/\n</baseurl>\n<baseurl type=\"MyBlogThumbnail1.0\">\nhttp://pear.chiaraquartet.net/template/thumbnails/\n</baseurl> \n</rest>\n</primary>\n</servers>\n</channel>\n\n```", "```php\n$thumbnail = $this->_rest->retrieveCacheFirst($this->_thumbnailBase .\n$template . '/' . $version . 'thumbnail.png');\n\n```", "```php\nMyBlog/\nTemplate/\nExceptions.php\nFetcher.php\nInterfaces.php\nLister.php\nREST.php\nConfig.php\nMain.php\nadmin.php\nindex.php\nimage.php\nblogsetup.php\n\n```", "```php\n$ pear channel-discover pearified.com\n$ pear install pearified/Role_Web\n$ pear run-scripts pearified/Role_Web\n$ pear channel-discover pear.chiaraquartet.net\n$ pear up chiara/MyBlog\n$ pear run-scripts chiara/MyBlog \n\n```", "```php\n<?php\ninterface MyBlog_Template_IConfig\n{\nfunction getTemplateChannel();\nfunction getCurrentTemplate();\n}\n\n```", "```php\n<?php\nclass MyBlog_Template_Exception extends Exception {}\n?>\n\n```", "```php\n/**\n* Get a customized PEAR_Config object for our blog template system\n* @return PEAR_Config\n*/\nfunction getPearConfig(){\nstatic $done = false;\n$config = PEAR_Config::singleton();\nif ($done) {\nreturn $config;\n}\n$config->set('php_dir', '@php-dir@' . DIRECTORY_SEPARATOR .\n'MyBlog' . DIRECTORY_SEPARATOR . 'templates');\n$config->set('data_dir', '@php-dir@' . DIRECTORY_SEPARATOR .\n'MyBlog' . DIRECTORY_SEPARATOR . 'templates');\n// restrict to the template channel\n$config->set('default_channel', $this->getTemplateChannel());\nreturn $config;\n}\n\n```", "```php\n$conf = new MyBlog_Config;\n$config = $conf->getPearConfig();\n$rest = new MyBlog_Template_REST($config, array());\n\n```", "```php\n<?php\n/**\n* MyBlog_Template_REST\n*\n* PHP version 5\n*\n* @package MyBlog\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2006 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n* @version CVS: $Id$\n* @link http://pear.chiaraquartet.net/index.php?package=MyBlog\n* @since File available since Release 0.1.0\n*/\n/**\n* Helper files from PEAR and our template system\n*/\nrequire_once 'PEAR/REST/11.php';\nrequire_once 'PEAR/REST/10.php';\nrequire_once 'PEAR/Dependency2.php';\nrequire_once 'MyBlog/Template/Exceptions.php';\n/**\n* Perform needed remote server REST actions.\n*\n* This class implements multiple inheritance through the\n* use of magic functions, and extends both PEAR_REST_11 and\n* PEAR_REST_10, giving preference to PEAR_REST_11 methods.\n*\n* The class provides modified listAll in the listTemplates() method,\n* and a way to retrieve a template thumbnail image with\n* getThumbnail().\n*/\nclass MyBlog_Template_REST extends PEAR_REST_11\n{\nprivate $_config;\nprivate $_rest10;\nprivate $_restBase;\nprivate $_thumbnailBase;\nprivate $_channel;\nfunction __construct(PEAR_Config $config, $options = array())\n{\nparent::PEAR_REST_11($config, $options);\n$this->_config = $config;\n$this->_rest10 = new PEAR_REST_10($config, $options);\n}\n/**\n* Implement multiple inheritance of REST_10 and REST_11\n*\n* @param string $func\n* @param array $params\n* @return mixed\n*/\nfunction __call($func, $params)\n{\nif (method_exists($this->_rest10, $func)) {\nreturn call_user_func_array(array($this->_rest10, $func),\n$params);\n}\n}\n/**\n* Retrieve the web location of a template's thumbnail image\n*\n* @param string $base URL to template REST as defined in\n* channel.xml\n* @param string $template Template name (package name on the\n* template server)\n* @param string $version Template version\n*/\nfunction getThumbnail($template, $version)\n{\nreturn $this->_rest->retrieveCacheFirst($this->_thumbnailBase\n. $template . '/' . $version . 'thumbnail.png');\n}\n/**\n* Retrieve the Base URL for a channel's template REST\n*\n* @param string $channel\n* @return string\n* @throws MyBlog_Template_Exception\n*/\nfunction getRESTBase($channel)\n{\n$reg = $this->_config->getRegistry();\nif (PEAR::isError($reg)) {\nthrow new MyBlog_Template_Exception('Cannot initialize\nregistry: ' . $reg->getMessage());\n}\n$chan = $reg->getChannel($channel);\nif (PEAR::isError($chan)) {\nthrow new MyBlog_Template_Exception('Cannot retrieve\nchannel: ' . $chan->getMessage());\n}\nif\n($chan->supportsREST($this->_config->get('preferred_mirror',\nnull, $channel)) &&\n$base = $chan->getBaseURL('MyBlogThumbnail1.0',\n$this->_config->get('preferred_mirror', null,\n$channel))) {\n$this->_thumbnailBase = $base;\nreturn $chan->getBaseURL('REST1.1',\n$this->_config->get('preferred_mirror', null,\n$channel));\n}\nthrow new MyBlog_Template_Exception('Unable to retrieve\nMyBlogThumbnail1.0 base URL for channel ' . $channel);\n}\n/**\n* Set the channel that will be used for the template locating\n*\n* @param string $channel\n*/\nfunction setTemplateChannel($channel)\n{\n$this->_channel = $channel;\n$this->_restBase = $this->getRESTBase($channel);\n}\n/**\n* Retrieve information about all templates\n*\n* This code demonstrates the power of REST. The\n* REST information retrieved is in fact the same\n* information used by the list-all and remote-list\n* commands. However, the list-all/remote-list commands\n* do not return dependency and release information.\n*\n* This function uses dependency/release information to strip\n* away templates that are not compatible with the current\n* MyBlog version, or are not stable enough.\n* @param string $base\n* @return array\n*/\nfunction listTemplates()\n{\n$d2 = new PEAR_Dependency2($this->_config, array(),\narray('package' => '', 'channel' => ''));\n$packagesinfo = $this->_rest->retrieveData($this->_restBase .\n'c/Templates/packagesinfo.xml');\nif (PEAR::isError($packagesinfo)) {\nreturn;\n}\nif (!is_array($packagesinfo) || !isset($packagesinfo['pi']))\n{\nreturn;\n}\nif (!is_array($packagesinfo['pi']) ||\n!isset($packagesinfo['pi'][0])) {\n$packagesinfo['pi'] = array($packagesinfo['pi']);\n}\n$ret = array();\n$preferred_state = $this->_config->get('preferred_state',\nnull, $this->_channel);\n// calculate the set of possible states sorted\n// from most stable -> least stable\n$allowed_states =\narray_flip($this->betterStates($preferred_state, true));\nforeach ($packagesinfo['pi'] as $packageinfo) {\n$info = $packageinfo['p'];\n$package = $info['n'];\n$releases = isset($packageinfo['a']) ?\n$packageinfo['a'] : false;\n$deps = isset($packageinfo['deps']) ?\n$packageinfo['deps'] : array('b:0;');\n$version_numbers = array(\n'latest' => false,\n'stable' => false,\n'beta' => false,\n'alpha' => false,\n'devel' => false,\n);\nif ($releases) {\nif (!isset($releases['r'][0])) {\n$releases['r'] = array($releases['r']);\n}\nif (!isset($deps[0])) {\n$deps = array($deps);\n}\nforeach ($releases['r'] as $i => $release) {\n$dep = unserialize($deps[$i]['d']);\nif (isset($dep['required']) &&\nisset($dep['required']['package'])) {\nif (!isset($dep['required']['package'][0])) {\n$dep['required']['package'] =\narray($dep['required']['package']);\n}\nforeach ($dep['required']['package'] as\n$pdep) {\nif (!isset($pdep['channel'])) {\n// skip uri-based dependencies\ncontinue;\n}\nif ($pdep['name'] == 'MyBlog' &&\n$pdep['channel'] ==\n'pear.chiaraquartet.net') {\nPEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n$e = $d2->validatePackageDependency($pdep, true,\narray());\nPEAR::staticPopErrorHandling();\nif (PEAR::isError($e)) {\n// skip any template releases that cannot work\n// with the current version of MyBlog\ncontinue 2;\n}\n}\n}\n}\n// skip releases that are not stable enough\nif (!isset($allowed_states[$release['s']])) {\ncontinue;\n}\nif (!$version_numbers['latest']) {\n$version_numbers['latest'] = $release['v'];\n}\nif (!$version_numbers[$release['s']]) {\n$version_numbers[$release['s']] =\n$release['v'];\n}\n}\n}\nif (!$version_numbers['latest']) {\n// no valid releases found, so don't list this\n// template\ncontinue;\n}\n$ret[$package] = array('versions' => $version_numbers,\n'info' => $info);\n}\nreturn $ret;\n}\n/**\n* Retrieve the download URL for a template\n*\n* @param string $templateName template package name to download\n* @param string $version template version to download\n* @throws MyBlog_Template_Exception\n* @return string\n*/\nfunction getTemplateDownloadURL($templateName, $version)\n{\n$reg = $this->_config->getRegistry();\nif (PEAR::isError($reg)) {\nthrow new MyBlog_Template_Exception($reg->getMessage());\n}\n$installed = $reg->packageInfo($templateName, 'version', $this->_channel);\nif ($version === $installed) {\nthrow new MyBlog_Template_Exception('template version \"'\n. $version . '\" is already installed');\n}\nMyBlogMyBlog_Template_REST$info = $this->getDownloadURL($this->_restBase,\narray('channel' => $this->_channel,\n'package' => $templateName,\n'version' => $version),\n$this->_config->get('preferred_state', null,\n$this->_channel),\n$installed);\nif (PEAR::isError($info)) {\nthrow new MyBlog_Template_Exception($info->getMessage());\n}\nif (!isset($info['url'])) {\nthrow new MyBlog_Template_Exception('Template \"' .\n$templateName . '\" cannot be installed');\n}\nif (!extension_loaded(\"zlib\")) {\n$ext = '.tar';\n} else {\n$ext = '.tgz';\n}\nreturn $info['url'] . $ext;\n}\n}\n?>\n\n```", "```php\nrequire_once 'MyBlog/Template/Lister.php';\nrequire_once 'MyBlog/Config.php';\n$blog_config = new MyBlog_Config;\n$lister = new MyBlog_Template_Lister($blog_config->getPearConfig());\n$lister->setConfigObject($blog_config);\n\n```", "```php\nlist($info, $pager) = $lister->listRemoteTemplates(1);\n\n```", "```php\narray(\narray(\n'name' => 'example1',\n'version' => '1.0.0',\n'summary' => 'sample template 1'\n),\narray(\n'name' => 'example2',\n'version' => '1.0.0',\n'summary' => 'sample template 2'\n)\n);\n\n```", "```php\n<?php\n/**\n* MyBlog_Template_Lister\n*\n* PHP version 5\n*\n* @package MyBlog\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2006 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version CVS: $Id$\n* @link http://pear.chiaraquartet.net/index.php?package=MyBlog\n* @since File available since Release 0.1.0\n*/\n/**\n* Helper files from PEAR and our template system\n*/\nrequire_once 'PEAR/Config.php';\nrequire_once 'Pager/Pager.php';\nrequire_once 'MyBlog/Template/Interfaces.php';\nrequire_once 'MyBlog/Template/REST.php';\n/**\n* List local and remote templates, also the currently active\n* template.\n* @package MyBlog\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2006 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version @package_version@\n* @link http://pear.chiaraquartet.net/index.php?package=MyBlog\n*/\nclass MyBlog_Template_Lister\n{\n/**\n* Template Configuration object\n*\n* This is used to grab configuration information for\n* the current setup\n* @var Template_IConfig\n*/\nprivate $_templateConfig;\n/**\n* PEAR configuration object\n*\n* @var PEAR_Config\n*/\nprivate $_pearConfig;\n/**\n* Current template channel\n*\n* @var string\n*/\nprivate $_templateChannel;\n/**\n* Current template name\n*\n* @var string\n*/\nprivate $_currentTemplate;\n/**\n* Template REST object\n*\n* @var MyBlog_Template_REST\n*/\nprivate $_rest;\n/**\n* @param PEAR_Config $config\n*/\nfunction __construct(PEAR_Config $config = null)\n{\nif ($config === null) {\n$config = PEAR_Config::singleton();\n}\n$this->_pearConfig = $config;\n$this->_rest = new MyBlog_Template_REST($config, array());\n}\n/**\n* Set our channel for retrieving templates\n* @param string $channel\n* @throws MyBlog_Template_Exception\n*/\nfunction setTemplateChannel($channel)\n{\n$reg = $this->_pearConfig->getRegistry();\nif (PEAR::isError($reg)) {\nthrow new MyBlog_Template_Exception('Unable to initialize\nRegistry: ' . $reg->getMessage());\n}\nif (!$reg->channelExists($channel)) {\nthrow new MyBlog_Template_Exception('Channel \"' .\n$channel . '\" is unknown');\n}\n// translate alias into actual channel name\n$channel = $reg->channelName($channel);\n$this->_templateChannel = $channel;\n$this->_rest->setTemplateChannel($channel);\n}\n/**\n* set the name of the current template package\n* @param string $template\n*/\nfunction setCurrentTemplate($template)\n{\n$this->_currentTemplate = $template;\n}\n/**\n* Set up the current template configuration, and\n* extract the channel and current template name.\n*\n* @param Template_IConfig $config\n*/\nfunction setConfigObject(MyBlog_Template_IConfig $config)\n{\n$this->_templateConfig = $config;\n$this->setTemplateChannel($config->getTemplateChannel());\n$this->setCurrentTemplate($config->getCurrentTemplate());\n}\n/**\n* Retrieve a listing of templates\n*\n* This method paginates the data, and prepares it for display by\n* the view portion of our template lister.\n* @param int $pageNumber Page number to retrieve\n* @param int $templatesPerPage number of templates to display\n* per-page\n* @return array\n* @throws MyBlog_Template_Exception indirectly, from internal\n* REST calls\n*/\nfunction listRemoteTemplates($templatesPerPage = 15)\n{\n$info = $this->_rest->listTemplates();\nif ($info === null || PEAR::isError($info)) {\nreturn array();\n}\n$params = array(\n'mode' => 'Jumping',\n'perPage' => $templatesPerPage,\n'delta' => 2,\n'itemData' => $info);\n$pager = Pager::factory($params);\n$ret = array();\n$data = $pager->getPageData();\nforeach ($data as $template => $info) {\n$ret[] = array(\n'name' => $template,\n'version' => $info['versions']['latest'],\n'summary' => $info['info']['s']);\n}\nreturn array($ret, $pager);\n}\nMyBlogMyBlog_Template_Lister}\n?>\n\n```", "```php\nrequire_once 'MyBlog/Template/Fetcher.php';\nrequire_once 'MyBlog/Template/REST.php';\n$conf = new MyBlog_Config;\n$config = $conf->getPearConfig();\n$rest = new MyBlog_Template_REST($config, array());\n$rest->setTemplateChannel($conf->getTemplateChannel());\n$fetch = MyBlog_Template_Fetcher::factory($rest, $config);\n\n```", "```php\ntry {\n$fetch->installTemplate($_GET['t'], $_GET['v']);\n$out = '';\nforeach ($fetch->log as $info) {\nif ($info[0] == 'log') {\n$out .= ' &nbsp; &nbsp;' . htmlspecialchars($info[1]) .\n'<br />';\n} else {\n$out .= htmlspecialchars($info[1]) . '<br />';\n}\n}\n// this is safe because installTemplate throws an exception\n// if the template or version are not valid PEAR package/version\n// so input is validated by this point\n$_SESSION['template'] = $_GET['t'];\ndefine('MYBLOG_OUTPUT_INFO', $out);\n} catch (MyBlog_Template_Exception $e) {\ndefine('MYBLOG_OUTPUT_INFO', '<strong>ERROR:</strong> ' .\n$e->getMessage());\n}\n\n```", "```php\n<?php\n/**\n* MyBlog_Template_Fetcher\n*\n* PHP version 5\n*\n* @package MyBlog\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2006 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version CVS: $Id$\n* @link http://pear.chiaraquartet.net/index.php?package=MyBlog\n* @since File available since Release 0.1.0\n*/\n/**\n* Helper files from PEAR and our template system\n*/\nrequire_once 'MyBlog/Template/REST.php';\nrequire_once 'MyBlog/Template/Exceptions.php';\nrequire_once 'PEAR/Frontend.php';\nrequire_once 'PEAR/Downloader.php';\nrequire_once 'PEAR/Installer.php';\nrequire_once 'PEAR/Config.php';\nrequire_once 'PEAR/Downloader/Package.php';\n/**\n* Control installation/upgrade of MyBlog templates\n*\n* This class makes full use of internal PEAR classes to\n* download and install/upgrade templates. To simplify\n* things, the class extends PEAR_Frontend and stores output\n* from installation directly in the class, which can then\n* be retrieved for proper formatting and display to the user\n* by the MyBlog application.\n*\n* This class should be instantiated using the factory method as in:\n* <code>\n* $fetch = MyBlog_Template_Fetcher::factory($rest, $config);\n* </code>\n* @package MyBlog\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2006 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version @package_version@\n* @link http://pear.chiaraquartet.net/index.php?package=MyBlog\n*/\nclass MyBlog_Template_Fetcher extends PEAR_Frontend\n{\n/**\n* @var Template_Fetcher_REST\n*/\nprivate $_rest;\n/**\n* @var PEAR_Config\n*/\nprivate $_config;\n/**\n* log messages from installation are stored here\n*\n* @var array\n*/\npublic $log = array();\nprivate function __construct(MyBlog_Template_REST $rest,\nPEAR_Config $config)\n{\n$this->_config = $config;\n$this->_rest = $rest;\n}\n/**\n* Create a new MyBlog_Template_Fetcher object, and register it\n* as the global frontend for PEAR as well\n*\n* @param MyBlog_Template_REST $rest\n* @param PEAR_Config $config\n* @return MyBlog_Template_Fetcher\n*/\nstatic function factory(MyBlog_Template_REST $rest,\nPEAR_Config $config){\n$a = new MyBlog_Template_Fetcher($rest, $config);\n// configure this as the frontend for all installation\n// processes\nPEAR_Frontend::setFrontendObject($a);\nreturn $a;\n}\n/**\n* Record a message logged while installing\n*\n* This can be used later to display information on the\n* template install/download\n* process\n* @param string $msg\n*/\nfunction log($msg){\n$this->log[] = array('log', $msg);\n}\n/**\n* Dummy function required to be a valid UI\n*\n* @return boolean\n*/\nfunction userConfirm(){\nreturn true;\n}\n/**\n* Record a message logged while installing\n*\n* This can be used later to display information on the\n* template install/download\n* process\n* @param string $msg\n*/\nfunction outputData($msg, $command){\n$this->log[] = array('out', $msg);\n}\n/**\n* Given a template package name, download and install a template\n*\n* @param string $templatePath template package name\n* @param string $version template package version to install\n* @throws MyBlog_Template_Exception\n*/\nfunction installTemplate($template, $version){\n// first, validate input\nif (!preg_match(PEAR_COMMON_PACKAGE_NAME_PREG, $template)) {\nthrow new MyBlog_Template_Exception('SECURITY ALERT:\ntemplate is not ' . 'a valid package name, aborting');\n}\nif (!preg_match(PEAR_COMMON_PACKAGE_VERSION_PREG, $version))\n{\nthrow new MyBlog_Template_Exception('SECURITY ALERT:\ntemplate version ' . 'is not a valid version, aborting');\n}\n$reg = $this->_config->getRegistry();\n// default channel is set to the template channel\n$existing = $reg->packageInfo($template, 'version',\n$this->_config->get('default_channel'));\nif (version_compare($existing, $version) === 0) {\n// installed already\n$this->log('Template set as active template');\nreturn true;\n}\n// convert the template package into a discrete download URL\n$info = $this->_rest->getTemplateDownloadURL($template,\n$version);\nif (PEAR::isError($info)) {\nthrow new MyBlog_Template_Exception($info->getMessage());\n}\n// download the template and install\n// (use PEAR_Downloader/Installer)\n$dl = new PEAR_Downloader($this, array('upgrade' => true),\n$this->_config);\n// download the actual URL to the template\n$downloaded = $dl->download(array($info));\nif (PEAR::isError($downloaded)) {\nthrow new MyBlog_Template_Exception\n($downloaded->getMessage());\n}\n$errors = $dl->getErrorMsgs();\nif (count($errors)) {\n$err = array();\nforeach ($errors as $error) {\n$err[] = $error;\n}\nif (!count($downloaded)) {\nthrow new MyBlog_Template_Exception('template \"' .\n$template . '\" installation failed:<br />' .\nimplode('<br />', $err));\n}\n}\n$templatePackage = $downloaded[0];\n$installer = new PEAR_Installer($this);\n// always upgrade\n$installer->setOptions(array('upgrade' => true));\n$packages = array($templatePackage);\n$installer->sortPackagesForInstall($packages);\nPEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n$err = $installer->setDownloadedPackages($packages);\nif (PEAR::isError($err)) {\nPEAR::staticPopErrorHandling();\nthrow new MyBlog_Template_Exception($err->getMessage());\n}\n// always upgrade\n$info = $installer->install($templatePackage,\narray('upgrade' => true));\nPEAR::staticPopErrorHandling();\nif (PEAR::isError($info)) {\nthrow new MyBlog_Template_Exception($info->getMessage());\n}\nif (is_array($info)) {\n$this->log('Installation successful');\nreturn true;\n} else {\nthrow new MyBlog_Template_Exception('install of \"' .\n$template . '\" failed');\n}\n}\nMyBlogMyBlog_Template_Fetcher}\nlightweight installer plug-inMyBlog_Template_Fetcher?>\n\n```", "```php\n<?php\nrequire_once 'MyBlog/Config.php';\nrequire_once 'PEAR/Downloader.php';\nrequire_once 'PEAR/PackageFile/v2/rw.php';\n/**\n* Post-installation script for the fake MyBlog blog.\n*\n* This script simply creates the templates/ subdirectory, if\n* not present, and makes it world-writeable\n* @version @package_version@\n*/\nclass blogsetup_postinstall\n{\nprivate $_where;\n/**\n* @var PEAR_Config\n*/\nprivate $_config;\nfunction __construct(){\n$this->_where = '@php-dir@' . DIRECTORY_SEPARATOR .\n'MyBlog' . DIRECTORY_SEPARATOR . 'templates';\n}\n/**\n* Initialize the post-installation script\n*\n* @param PEAR_Config $config\n* @param PEAR_PackageFile_v2 $pkg\n* @param string|null $lastversion Last installed version.\n* Not used in this script\n* @return boolean success of initialization\n*/\nfunction init(&$config, &$pkg, $lastversion){\n$this->_config = $config;\nreturn true;\n}\n/**\n* Run the script itself\n*\n* @param array $answers\n* @param string $phase\n*/\nfunction run($answers, $phase){\n$ui = PEAR_Frontend::singleton();\n$blogconf = new MyBlog_Config;\n$conf = $blogconf->getPearConfig();\n$reg = $conf->getRegistry();\n// we need the blog and template channels to be discovered\n$conf->set('auto_discover', true);\nif (!$reg->channelExists('pear.chiaraquartet.net/template',\ntrue)) {\n// make sure the registry directory exists, or this fails\nSystem::mkdir(array('-p', $conf->get('php_dir')));\n$dl = new PEAR_Downloader($ui, array(), $conf);\n$dl->discover('pear.chiaraquartet.net/template');\n}\nif (!$reg->channelExists('pear.chiaraquartet.net', true)) {\n// make sure the registry directory exists, or this fails\nSystem::mkdir(array('-p', $conf->get('php_dir')));\n$dl = new PEAR_Downloader($ui, array(), $conf);\n$dl->discover('pear.chiaraquartet.net');\n}\n// for dependency purposes fake the MyBlog package in\n// our sub-install\n$reg->deletePackage('MyBlog', 'pear.chiaraquartet.net');\n$fake = new PEAR_PackageFile_v2_rw;\n$fake->setPackage('MyBlog');\n$fake->setChannel('pear.chiaraquartet.net');\n$fake->setConfig($this->_config);\n$fake->setPackageType('php');\n$fake->setAPIStability('stable');\n$fake->setReleaseStability('stable');\n$fake->setAPIVersion('1.0.0');\n$fake->setReleaseVersion('@package_version@');\n$fake->setDate('2004-11-12');\n$fake->setDescription('foo source');\n$fake->setSummary('foo');\n$fake->setLicense('BSD License');\n$fake->clearContents();\n$fake->addFile('', 'foor.php', array('role' => 'php'));\n$fake->resetFilelist();\n$fake->installedFile('foor.php', array('attribs' =>\narray('role' => 'php')));\n$fake->setInstalledAs('foor.php', 'foor.php');\n$fake->addMaintainer('lead', 'cellog', 'Greg Beaver',\n'cellog@php.net');\n$fake->setNotes('blah');\n$fake->setPearinstallerDep('1.4.3');\n$fake->setPhpDep('5.0.0');\n$reg->addPackage2($fake);\ndo {\nif (file_exists($this->_where)) {\nif (OS_UNIX) {\nif (!fileperms($this->_where) == 0777) {\nchmod($this->_where, 0777);\n$ui->outputData('set templates directory to\nbe world-writeable');\nbreak;\n}\n$ui->outputData('templates directory already\ninitialized');\nbreak;\n} else {\n$ui->outputData('templates directory ' .\n$this->_where . ' already created');\nbreak;\n}\nMyBlogpost-install script} else {\n$ui->outputData('creating template directory ' .\n$this->_where);\nSystem::mkdir(array('-p', $this->_where));\nchmod($this->_where, 0777);\n}\n} while (false);\nif (file_exists($this->_where . DIRECTORY_SEPARATOR .\n'default')) {\nSystem::rm(array('-rf', $this->_where .\nDIRECTORY_SEPARATOR . 'default'));\n}\nmkdir($this->_where . DIRECTORY_SEPARATOR . 'default');\ncopy('@php-dir@' . DIRECTORY_SEPARATOR . 'MyBlog' .\nDIRECTORY_SEPARATOR . 'Template' . DIRECTORY_SEPARATOR .\n'default' . DIRECTORY_SEPARATOR . 'body.tpl.php',\n$this->_where . DIRECTORY_SEPARATOR . 'default' .\nDIRECTORY_SEPARATOR . 'body.tpl.php');\ncopy('@php-dir@' . DIRECTORY_SEPARATOR . 'MyBlog' .\nDIRECTORY_SEPARATOR . 'Template' . DIRECTORY_SEPARATOR .\n'default' . DIRECTORY_SEPARATOR . 'head.tpl.php',\n$this->_where . DIRECTORY_SEPARATOR . 'default' .\nDIRECTORY_SEPARATOR . 'head.tpl.php');\n$ui->outputData('default template copied');\nreturn true;\n}\n}\n?>\n\n```", "```php\npear/\n.filemap\n.registry/\npear.reg\n...\n...\n[global PEAR registry]\n.channel.pear.chiaraquartet.net/\nmyblog.reg\n.channels/\npear.chiaraquartet.net.reg\nMyBlog/\ntemplates/\n.filemap\n.registry/\n.channel.pear.chiaraquartet.net_template/\n.channels/\npear.chiaraquartet.net.reg\npear.chiaraquartet.net_template.reg\n\n```", "```php\nimage.php?i=../../../etc/passwd\n\n```", "```php\n<?php\nrequire_once 'MyBlog/Template/REST.php';\nrequire_once 'MyBlog/Config.php';\n$conf = new MyBlog_Config;\n$a = new MyBlog_Template_REST($conf->getPearConfig());\n$a->setTemplateChannel($conf->getTemplateChannel());\n// sanitize input and retrieve a thumbnail image\n// make certain that URL passed in fits on 1 line, so\n// we don't magically send headers to the server by mistake\necho $a->getThumbnail(str_replace(array(\"\\n\", \"\\r\"), array('', ''), $_GET['t']),\nstr_replace(array(\"\\n\", \"\\r\"), array('', ''), $_GET['v'])); \n?>\n\n```", "```php\n<?php\n/**\n* For MyBlog_Template_IConfig interface\n*/\nrequire_once 'MyBlog/Template/Interfaces.php';\nrequire_once 'PEAR/Config.php';\n// hard-coded \"database\" stuff for demonstration purposes.\n// edit this code to try other stuff\nif (!isset($_SESSION['template'])) {\n$_SESSION['template'] = '#default';\n}\nclass MyBlog_Config implements MyBlog_Template_IConfig{\nfunction getTemplateChannel(){\nreturn 'pear.chiaraquartet.net/template';\n}\nfunction getCurrentTemplate(){\nreturn $_SESSION['template'];\n}\n/**\n* Get a customized PEAR_Config object for our blog\n* template system\n* @return PEAR_Config\n*/\nfunction getPearConfig(){\nstatic $done = false;\n$config = PEAR_Config::singleton();\nif ($done) {\nreturn $config;\n}\n$config->set('php_dir', '@php-dir@' . DIRECTORY_SEPARATOR .\n'MyBlog' . DIRECTORY_SEPARATOR . 'templates');\n$config->set('data_dir', '@php-dir@' . DIRECTORY_SEPARATOR .\n'MyBlog' . DIRECTORY_SEPARATOR . 'templates');\n// restrict to the template channel\n$config->set('default_channel', $this->getTemplateChannel());\nreturn $config;\n}\n}\n\n```", "```php\n<?php\nrequire_once 'Savant3.php';\nclass MyBlog_Main extends Savant3{\n/**\n* Output the <head> block\n*/\nfunction doHead(){\n// output user-specific stuff\n$this->display('head.tpl.php');\n// output plugin-related stuff (dummy, but here\n// for example purposes)\n$this->displayPluginHead();\n}\n/**\n* Output any onload parameters, etc.\n*/\nfunction doBodyTag(){\ntry {\n$onload = $this->fetch('onload.tpl.php');\nif ($onload) {\necho 'onload=\"' . $onload . '\"';\n}\n} catch (Savant3_Exception $e) {\n// ignore\n}\n}\n/**\n* Display blog body\n*\n*/\nfunction doBody(){\n$this->display('body.tpl.php');\n}\nfunction displayPluginHead(){\nreturn; // do nothing\n}\n}\n?>\n\n```", "```php\n<?php\nsession_start();\nrequire_once 'MyBlog/Main.php';\nrequire_once 'MyBlog/Config.php';\n$blog_config = new MyBlog_Config;\n// default template is #default, so strip #\n// other templates must be valid package names, and so\n// can't contain #\n$blog = new MyBlog_Main(array(\n'template_path' => '@php-dir@' . DIRECTORY_SEPARATOR . 'MyBlog' .\nDIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR .\nstr_replace('#', '', $blog_config->getCurrentTemplate()),\n'exceptions' => true));\n$blog->title = 'Example MyBlog Blog';\n$blog->content = 'blah blah blah here is my fake article';\n?><!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<?php $blog->doHead(); ?>\n</head>\n<body <?php $blog->doBodyTag(); ?>>\n<?php $blog->doBody(); ?>\n<a href=\"admin.php\">Administer Blog</a>\n</body>\n</html>\n\n```", "```php\n<title><?php echo $this->title; ?></title>\n<link href=\"css.php/example1/index.css\" type=\"text/css\" />\n\n```", "```php\n<div class=\"topbar\">\n<h1 id=\"pageTitle\"><?php echo $this->title ?></h1>\n</div>\n<div class=\"leftbar\">Left Bar\n</div>\n<div class=\"centerbar\">Center Bar<br />\n<?php echo $this->content; ?>\n</div>\n<div class=\"rightbar\">Right Bar\n</div>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package packagerversion=\"1.4.11\" version=\"2.0\"\n\nxsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0\nhttp://pear.php.net/dtd/tasks-1.0.xsd\nhttp://pear.php.net/dtd/package-2.0\nhttp://pear.php.net/dtd/package-2.0.xsd\">\n<name>example1</name>\n<channel>pear.chiaraquartet.net/template</channel>\n<summary>fake MyBlog template example 1</summary>\n<description>fake MyBlog template example 1</description>\n<lead>\n<name>Greg Beaver</name>\n<user>cellog</user>\n<email>cellog@php.net</email>\n<active>yes</active>\n</lead>\n<date>2006-08-19</date>\n<time>13:14:58</time>\n<version>\n<release>2.0.0</release>\n<api>1.0.0</api>\n</version>\n<stability>\n<release>stable</release>\n<api>stable</api>\n</stability>\n<license uri=\"http://www.opensource.org/licenses/bsd-\nlicense.php\">BSD license</license>\n<notes>second release</notes>\n<contents>\n<dir baseinstalldir=\"example1\" name=\"/\">\n<file name=\"body.tpl.php\" role=\"php\" />\n<file name=\"head.tpl.php\" role=\"php\" />\n</dir> <!-- / -->\n</contents>\n<dependencies>\n<required>\n<php>\n<min>5.1.0</min>\n</php>\n<pearinstaller>\n<min>1.4.3</min>\n</pearinstaller>\n<package>\n<name>MyBlog</name>\n<channel>pear.chiaraquartet.net</channel>\n<min>0.2.0</min>\n<max>0.2.0</max>\n</package>\n</required>\n</dependencies>\n<phprelease />\n<changelog>\n<release>\n<version>\n<release>0.1.0</release>\n<api>0.1.0</api>\n</version>\n<stability>\n<release>alpha</release>\n<api>beta</api>\n</stability>\n<date>2006-08-18</date>\n<license uri=\"http://www.opensource.org/licenses/bsd-\nlicense.php\">BSD license</license>\n<notes>first release</notes>\n</release>\n<release>\n<version>\n<release>1.0.0</release>\n<api>1.0.0</api>\n</version>\n<stability>\n<release>stable</release>\n<api>stable</api>\n</stability>\n<date>2006-08-18</date>\n<license uri=\"http://www.opensource.org/licenses/bsd-\nlicense.php\">BSD license</license>\n<notes>first release</notes>\n</release>\n<release>\n<version>\n<release>2.0.0</release>\n<api>1.0.0</api>\n</version>\n<stability>\n<release>stable</release>\n<api>stable</api>\n</stability>\n<date>2006-08-19</date>\n<license uri=\"http://www.opensource.org/licenses/bsd-\nlicense.php\">BSD license</license>\n<notes>second release</notes>\n</release>\n</changelog>\n</package>\n\n```", "```php\n<?php\n// silence potential notice\n@session_start();\nrequire_once 'MyBlog/Template/Lister.php';\nrequire_once 'MyBlog/Config.php';\n$blog_config = new MyBlog_Config;\n$lister = new MyBlog_Template_Lister($blog_config->getPearConfig());\n$lister->setConfigObject($blog_config);\nif (isset($_GET['dodefault'])) {\nunset($_GET['dodefault']);\n$_SESSION['template'] = '#default';\n}\nif (isset($_GET['t']) && isset($_GET['v'])) {\nrequire_once 'MyBlog/Template/Fetcher.php';\nrequire_once 'MyBlog/Template/REST.php';\n$conf = new MyBlog_Config;\n$config = $conf->getPearConfig();\n$rest = new MyBlog_Template_REST($config, array());\n$rest->setTemplateChannel($conf->getTemplateChannel());\n$fetch = MyBlog_Template_Fetcher::factory($rest, $config);\ntry {\n$fetch->installTemplate($_GET['t'], $_GET['v']);\n$out = '';\nforeach ($fetch->log as $info) {\nif ($info[0] == 'log') {\n$out .= ' &nbsp; &nbsp;' .\nhtmlspecialchars($info[1]) . '<br />';\n} else {\n$out .= htmlspecialchars($info[1]) . '<br />';\n}\n}\n// this is safe because installTemplate throws an exception\n// if the template or version are not valid PEAR\n// package/version\n// so input is validated by this point\n$_SESSION['template'] = $_GET['t'];\ndefine('MYBLOG_OUTPUT_INFO', $out);\n} catch (MyBlog_Template_Exception $e) {\ndefine('MYBLOG_OUTPUT_INFO', '<strong>ERROR:</strong> ' .\n$e->getMessage());\n}\nunset($_GET['t']);\nunset($_GET['v']);\n}\n?><!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>MyBlog Administration</title>\n</head>\n<body>\n<a href=\"index.php\">Return to MyBlog</a><br />\n<h1>MyBlog Administration</h1>\n<?php\n// this is defined in install.php\nif (defined('MYBLOG_OUTPUT_INFO')): ?>\n<h2>Installation Information:</h2>\n<?php echo MYBLOG_OUTPUT_INFO; ?>\n<?php endif;\n?>\n<h2>Choose a template</h2>\n<?php\nlist($info, $pager) = $lister->listRemoteTemplates(1);\n$links = $pager->getLinks();\necho $links['all'] . '<br />';\n?>\n<?php if ($blog_config->getCurrentTemplate() == '#default'): ?>\n<span class=\"current_template\">*</span>\n<?php endif; ?>[Default Template] <em>(Standard, ships with\ninstall)</em><a href=\"admin.php?dodefault=1\">\nChoose Default Template</a><br />\n<?php\nforeach ($info as $template): ?>\n<?php if ($template['name'] ==\n$blog_config->getCurrentTemplate()): ?>\n<span class=\"current_template\">*</span>\n<?php endif; ?>\n<img src=\"image.php?<?php echo 't=' .\nhtmlspecialchars(urlencode($template['name'])) . '&amp;v=' .\nhtmlspecialchars(urlencode($template['version'])); ?>\"\nheight=\"36\" width=\"36\" />\n<?php echo $template['name'] ?> <em>(<?php\necho htmlspecialchars($template['summary']) ?>)</em>\nVersion <?php echo $template['version'] ?><a\nhref=\"admin.php?t=<?php\necho htmlspecialchars(urlencode($template['name']))\n?>&amp;v=<?php\necho htmlspecialchars($template['version'])\n?>\">Install/Upgrade</a><br />\n<?php endforeach;\necho '<br />' . $links['all'];\n?>\n</body>\n</html>\n\n```", "```php\n$ pear upgrade package.xml \n\n```", "```php\n<package>\n<name>MyBlog</name>\n<channel>pear.chiaraquartet.net</channel>\n<min>0.1.0</min>\n<max>0.1.0</max>\n</package>\n\n```", "```php\n<package>\n<name>MyBlog</name>\n<channel>pear.chiaraquartet.net</channel>\n<min>0.2.0</min>\n<max>0.2.0</max>\n</package>\n\n```", "```php\nchmod($file_or_dir, 0444); \n\n```", "```php\nchmod($file_or_dir, 0777); \n\n```"]