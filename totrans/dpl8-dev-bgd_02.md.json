["```php\n    <?php\n    class foo\n    {\n        function call_foo()\n        {\n            echo \"Calling foo.\"; \n       }\n    }\n    $bar = new foo;\n    $bar->call_foo();\n    ?>\n    ```", "```php\n    <?php\n    abstract class AbstractClass\n    {\n        // Force Extending class to define this method\n        abstract protected function getVal();\n        abstract protected function prefixVal($prefix);\n\n        // Common method\n        public function printOut() {\n            print $this->getVal() . \"\\n\";\n        }\n    }\n\n    class ConcreteClass1 extends AbstractClass\n    {\n        protected function getVal() {\n            return \"ConcreteClass1\";\n        }\n\n        public function prefixVal($prefix) {\n            return \"{$prefix}ConcreteClass1\";\n        }\n    }\n\n    $class1 = new ConcreteClass1;\n    $class1->printOut();\n    echo $class1->prefixVal('FOO_') .\"\\n\";\n    ?>\n    ```", "```php\n    <?php\n    class Application {\n         private static $_user;\n         public function User( ) {\n              if( $this->_user == null ) {\n                   $this->_user = new UserData();\n              }\n              return $this->_user;\n         }\n    }\n\n    class UserData {\n         private $_name;\n         public function __construct() {\n              $this->_name = \"Krishna kanth\";\n         }\n         public function GetUserName() {\n              return $this->_name;\n         }\n    }\n    $app = new Application();\n    echo $app->UserData()->GetUserName();\n    ?>\n    ```", "```php\n    <?php\n    // Create Shape interace with calculateArea() method.\n    interface Shape {\n      public function calculateArea();\n    }\n    ?>\n    ```", "```php\n    <?php\n    require ShapeInterface.php;\n\n    // Create Circle class that implement Shape interface.\n    class Circle implements Shape {\n      private $radius;\n\n      public function __construct($radius)\n      {\n        $this -> radius = $radius;\n      }\n\n      // calcArea calculates the area of circles \n      public function calculateArea()\n      {\n        return $this -> radius * $this -> radius * pi();\n      }\n    }\n    ?>\n    ```", "```php\n    <?php\n    // Declare the interface 'iTemplate'\n    interface iTemplate\n    {\n        public function setVariable($name, $var);\n        public function getHtml($template);\n    }\n\n    // Implement the interface\n    // This will work\n    class Template implements iTemplate\n    {\n        private $vars = array();\n\n        public function setVariable($name, $var)\n        {\n            $this->vars[$name] = $var;\n        }\n\n        public function getHtml($template)\n        {\n            foreach($this->vars as $name => $value) {\n                $template = str_replace('{' . $name . '}', $value, $template);\n            }\n\n            return $template;\n        }\n    }\n\n    ?>\n    ```", "```php\n    modules/contrib/\n    modules/custom/\n    ```", "```php\n    sites/ site_name_a/modules/\n    sites/ site_name_b/modules/\n    ```", "```php\n    name: Drupal 8 custom module d8dev\n    type: module\n    description: 'Example for Drupal 8 modules.'\n    package: Custom\n    version: 8.1\n    core: 8.x\n    ```", "```php\n        d8dev.my_page:\n          path: '/mypage/page'\n          defaults:\n            _controller: '\\Drupal\\d8dev\\Controller\\d8devController::myPage'\n            _title: 'My first page in Drupal8'\n            requirements:\n            _permission: 'access content'\n        ```", "```php\n    <?php\n    /**\n     * @file\n     * @author My Name\n     * Contains \\Drupal\\d8dev\\Controller\\d8devController.\n     * Please include this file under your \n     * d8dev(module_root_folder)/src/Controller/\n     */\n    namespace Drupal\\d8dev\\Controller;\n    /**\n     * Provides route responses for the d8dev module.\n     */\n    class d8devController {\n      /**\n       * Returns a simple page.\n       *\n       * @return array\n       *   A simple renderable array.\n       */\n      public function myPage() {\n        $element = array(\n    '#type' => 'markup',\n    '#markup' => 'Hello world!',\n    );\n        return $element;\n      }\n    }\n    ?>\n    ```", "```php\n    <?php\n    /**\n     * @file\n     * Contains \\Drupal\\ d8dev\\Plugin\\field\\formatter\\RecipeFormatter.\n     */\n\n    namespace Drupal\\d8dev\\Plugin\\Field\\FieldFormatter;\n\n    use Drupal\\Core\\Field\\FormatterBase;\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n    ```", "```php\n    /**\n     * Plugin implementation of the 'recipe_time' formatter.\n     *\n     * @FieldFormatter(\n     *   id = \"recipe_time\",\n     *   label = @Translation(\"Duration\"),\n     *   field_types = {\n     *     \"integer\",\n     *     \"decimal\",\n     *     \"float\"\n     *   }\n     * )\n     */\n    ```", "```php\n    public function viewElements(FieldItemListInterface $items) {\n            $elements = array();\n\n            foreach ($items as $delta => $item) {\n\n                //$hours = $item->value;\n                $hours = floor($item->value / 60); \n\n    //divide by minutes in 1 hour and get floor\n                $minutes = $item->value % 60; \n    //remainder of minutes\n                //get greatest common denominator of minutes to convert to fraction of hours\n                $minutes_gcd = gcd($minutes, 60);\n\n                //&frasl; is the html entity for the fraction separator, and \n    // we use the sup and sub html element to give the \n    // appearance of a  fraction.\n\n                //$minutes_fraction = '<sup>' . $minutes/$minutes_gcd .'</sup>&frasl;<sub>' . 60/$minutes_gcd . '</sub>';\n                $minutes_fraction = $minutes/$minutes_gcd .\"/\" . 60/$minutes_gcd ;\n\n                $markup = $hours > 0 ? $hours . ' and ' . $minutes_fraction . ' hours' : $minutes_fraction . ' hours';\n                $elements[$delta] = array(\n                    '#theme' => 'recipe_time_display',\n                    '#value' => $markup,\n                );\n            }\n\n            return $elements;\n        }\n    ```", "```php\n    **\n     * Simple helper function to get gcd of minutes\n     */\n    function gcd($a, $b) {\n        $b = ( $a == 0) ? 0 : $b;\n        return ( $a % $b ) ? gcd($b, abs($a - $b)) : $b;\n    }\n    ```", "```php\n    <?php\n    * @file\n     * Contains \\Drupal\\d8dev\\Plugin\\field\\formatter\\RecipeFormatter.\n     */\n\n    namespace Drupal\\d8dev\\Plugin\\Field\\FieldFormatter;\n\n    use Drupal\\Core\\Field\\FormatterBase;\n    use Drupal\\Core\\Field\\FieldItemListInterface;\n\n    /**\n     * Plugin implementation of the 'number_decimal' formatter.\n     *\n     * The 'Default' formatter is different for integer fields on the one hand, and\n     * for decimal and float fields on the other hand, in order to be able to use\n     * different settings.\n     *\n     * @FieldFormatter(\n     *   id = \"recipe_time\",\n     *   label = @Translation(\"Duration\"),\n     *   field_types = {\n     *     \"integer\",\n     *     \"decimal\",\n     *     \"float\"\n     *   }\n     * )\n     */\n    class RecipeTimeFormatter extends FormatterBase {\n        /**\n         * {@inheritdoc}\n         */\n        public function viewElements(FieldItemListInterface $items) {\n            $elements = array();\n\n            foreach ($items as $delta => $item) {\n\n                //$hours = $item->value;\n                $hours = floor($item->value / 60); //divide by minutes in 1 hour and get floor\n                $minutes = $item->value % 60; //remainder of minutes\n                //get greatest common denominator of minutes to convert to fraction of hours\n                $minutes_gcd = gcd($minutes, 60);\n\n                //&frasl; is the html entity for the fraction separator, and we use the sup and sub html element to give the appearance of a  fraction.\n\n                //$minutes_fraction = '<sup>' . $minutes/$minutes_gcd .'</sup>&frasl;<sub>' . 60/$minutes_gcd . '</sub>';\n                $minutes_fraction = $minutes/$minutes_gcd .\"/\" . 60/$minutes_gcd ;\n\n                $markup = $hours > 0 ? $hours . ' and ' . $minutes_fraction . ' hours' : $minutes_fraction . ' hours';\n                $elements[$delta] = array(\n                    '#theme' => 'recipe_time_display',\n                    '#value' => $markup,\n                );\n            }\n\n            return $elements;\n        }\n    }\n\n    /**\n     * Simple helper function to get gcd of minutes\n     */\n    function gcd($a, $b) {\n        $b = ( $a == 0) ? 0 : $b;\n        return ( $a % $b ) ? gcd($b, abs($a - $b)) : $b;\n    }\n    ```", "```php\n        /**\n         * Implements hook_theme().\n         */\n        function d8dev_theme() {\n            return array(\n                'recipe_time_display' => array(\n                    'variables' => array('value' => NULL),\n                    'template' => 'recipe-time-display',\n                 ),\n              );\n           }\n        ```", "```php\n        {{ value }}\n        ```", "```php\n    <?php\n    /**\n     * Created by PhpStorm.\n     * User: Neeraj\n     * Date: 8/7/15\n     * Time: 10:59 AM\n     */\n    namespace Drupal\\d8dev\\Tests;\n\n    use Drupal\\simpletest\\WebTestBase;\n\n    /**\n     * Tests the d8dev module functionality\n     *\n     * @group d8dev\n     */\n    class D8devTest extends WebTestBase {\n\n        /**\n         * Tests that the 'mypage/page' path returns the right content\n         */\n        public function testCustomPageExists() {\n\n            $this->drupalGet('mypage/page');\n            $this->assertResponse(200);\n        }\n    }\n    ```", "```php\n           /**\n             * Tests the d8dev module functionality\n             *\n             * @group d8dev\n             */\n    ```"]