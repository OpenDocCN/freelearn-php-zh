- en: 'Chapter 4. Basics II: Adding Functionality'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the general configuration tasks behind us, I am sure you are more than
    keen to begin working on the layout and functionality for the site. That's not
    to say we are going to discuss the type of layout that involves themes just yet,
    because there is plenty of work to be done deciding what goes where before we
    look at things like fonts, colors, and images. While we aren't working with anything
    as exciting as new images or flashy graphics, you will find that much of what
    we cover in this section is a matter of taste, and you can get fairly creative.
  prefs: []
  type: TYPE_NORMAL
- en: '*So how do we go about building a fully functional website?* The answer is
    to use chunks of free‑standing code called modules, which either come as part
    of the standard Drupal download, or are provided by the good people of the Drupal
    community. Modules simply sit around waiting till you need them, at which point,
    Drupal (knowing how to make use of them) calls on all the functionalities provided
    by the module file(s) in order to fulfill the tasks required of it.'
  prefs: []
  type: TYPE_NORMAL
- en: The terms *module* and *functionality*, with respect to Drupal, are synonymous,
    from the point of view that modules provide functionality. It is possible to add
    your own functionality directly to your pages too, but that is a slightly different
    matter, which we will get into later. For now, the discussion of your site's functionality
    is really a discussion about modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consequently, in this chapter, we are going to take a close look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menus and primary links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be aware that we won't be discussing some of the content-related modules in
    too much depth, because we will cover the topic of content in great detail on
    its own, in Chapters 6 and 7\. While the focus of this chapter is on getting the
    basics up and running, we will also look at how to include other modules from
    the Drupal site in order to demonstrate its power and flexibility. This will also
    reveal the considerable advantage of having an entire development community at
    hand to help out.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is by enabling certain modules that you will be able to achieve a diverse,
    and more importantly, functional site. As there are tons of modules available,
    I can't hope to bore you with the all the ins and outs of every single one. Instead,
    we will enable and briefly work with each of the ones required for the demo site
    as these will more than likely be the most popular ones in any case.
  prefs: []
  type: TYPE_NORMAL
- en: If you find that there is a module required by your site, which is not covered
    here, then don't panic, simply follow the same method of enabling and testing
    that you will see throughout this chapter, and apply it to the specific module.
    You will be up and running in no time at all!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin discussing each individual module, head on over to the **modules**
    section under the **administer** menu item, and decide which you would like to
    enable initially, based on your site''s forecasted needs. Bear in mind that it
    is very easy to come back at a later stage and add or remove modules—this is part
    of the beauty and power of a system like Drupal. For the purposes of the demo
    site, we will need the following modules for the moment (we will need a few more
    as we continue building the site):'
  prefs: []
  type: TYPE_NORMAL
- en: '**blog**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**forum**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**locale**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**poll**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**search**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**upload**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have made a selection, click **Save configuration**, and away you go.
    Unfortunately, things are not quite as easy as all that, and for at least a few
    of these modules, we will have to put in some serious thought before we actually
    implement them on the site. In particular, **forum** and **locale** need to be
    discussed in some depth. Before we do that, let's take a look at what else is
    available to us, courtesy of the Drupal community.
  prefs: []
  type: TYPE_NORMAL
- en: Third-Party Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the greatest things about Drupal is that it adheres to the open-source
    paradigm. This fosters community development, which in turn promotes and increases
    the diversity of any given project. One of the spin-offs from this is that community
    members who overcome certain obstacles or create something new and useful can,
    and often do, take the time to share it with everyone else. This is an exceptionally
    valuable property of most, if not all, open-source projects.
  prefs: []
  type: TYPE_NORMAL
- en: What this means for us is that we can take a leisurely scroll over a variety
    of modules that have been made by someone, improved on by someone else, or changed
    into something else, and pick and choose what we like the most. The converse of
    this is, of course, that you can make any of your own developments available for
    everyone else to use when the time comes.
  prefs: []
  type: TYPE_NORMAL
- en: For now, there are certain issues associated with using contributed modules
    such as the one we are going to incorporate into our site here. It is important
    to understand that people are providing useful software without enforcing payment.
    Hopefully, you will take it upon yourself to drop the developers a line every
    now and then to thank them for any functionality they have spent time and effort
    on that you may benefit from.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, because more often then not there is only one developer or a small
    group of developers, you need to understand that there is no huge budget, with
    lots of computer geeks tapping away day and night. This means that contributions,
    like any software, are subject to bugs or errors, and you should always make sure
    that your site, including the database, are protected by making backups before
    implementing any changes. (For more information on properly backing up your site,
    see [Chapter 10](ch10.html "Chapter 10. Running Your Website")) This is in line
    with best practices when it comes to dealing with software—if something breaks
    your code, then it is your responsibility, and not the contributor's.
  prefs: []
  type: TYPE_NORMAL
- en: With those two rather serious points out of the way, let's begin.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Drupal website houses a list of contributions that are available for you
    to add under the **Modules** tab of the **Downloads** page ([http://drupal.org/project/modules](http://drupal.org/project/modules)).
    At the top of the **Modules** page there is a selection of Drupal versions from
    which you can choose the appropriate one, and then browse the modules by name,
    category, or date, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Modules](img/1800_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we saw in [Chapter 1](ch01.html "Chapter 1. Introduction to Drupal"), obtaining
    the correct version is very important because you cannot assume that a module
    developed for the **4.6.x** family will work with the latest **4.7.x** family.
    In fact, it is probably a bigger issue now than it will be in a year or so, since
    Drupal has only just reached the **4.7.x** family. Unfortunately, the upgrading
    of contributions is not necessarily done at the same time as the core development;
    so it may be that there are some modules you can only implement in older versions
    of Drupal—hopefully by the time you read this, most modules, if not all, will
    have been made compatible with **4.7.x**.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of the demo site, one contribution that we will need fairly
    soon is **Taxonomy Access Control,** which can be found under the **Categories**
    section, assuming you are searching by category. Navigate there, click **Download**,
    and save the zipped file to your machine. You might find it more expedient to
    create a directory, say `drupal_downloads`, to save these files to. Of course,
    once the module is installed you no longer need the zip file. It may be useful
    to maintain a copy just in case, but if you are certain you won't need it again,
    remove it once everything is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to downloading modules. Before we move on, it's a good idea
    to take a look over the list of all modules available to see what you can actually
    achieve with Drupal. For example, *did you know that you can use Drupal as an
    e-commerce website, complete with products or services and a shopping cart?* You
    can implement all types of payment facilities such as PayPal, or credit cards
    and pretty much anything else that a fully-fledged online store would need—or
    will be able to once the **E-Commerce** module has been upgraded to work with
    4.7.
  prefs: []
  type: TYPE_NORMAL
- en: Learning just what you can easily achieve with Drupal modules now can really
    cut down the amount of time you spend developing or looking for solutions to problems
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each module download can be different depending on how it needs to alter the
    system in order to function. The best way to learn about how to install modules
    is simply to go ahead and do it. Since we have already downloaded one, let's continue
    on and install it.
  prefs: []
  type: TYPE_NORMAL
- en: Open up the `.gz` file that you saved on your machine (refer to the previous
    section). Depending on the module in question you will have anywhere from one
    file to tens of files. As many will have license information in them, ensure that
    you take the time to read over these before you go ahead and use them. Apart from
    that, the first thing you need to do is open up the `readme` file as this will,
    more than likely, have some detailed information on what you can expect from the
    module, and how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you are happy you have the right module for the job, the next file
    to open up is the install file, usually something like `INSTALL.txt`. This will
    give you a list of instructions to follow in order to set things up properly.
    More often than not, this involves making some sort of adjustment to your database
    as well as adding the relevant `.module` file to your `modules` folder under the
    Drupal home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the developer of the module will add notes to guide your usage of
    the contribution. For example, in the case of the Taxonomy Access Control module,
    we are advised not to use it in conjunction with other access-related modules
    such as **OG** or **node_privacy_by_role**. That doesn't mean you can not—just
    that you should ensure you know exactly what you are doing before going against
    suggestions like the one provided with this module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another bit of advice that might save you a lot of trouble at some stage in
    the future is to make a backup of your database, or any important files, before
    making use of a module. The reason being is that Drupal is moving to a more user-friendly,
    plug-n-play type of setup where all that you need to do extract the module file
    to the `modules` folder and away you go. The module itself takes care of any changes
    required to be made to the database automatically. This makes it easier to install
    it because you no longer have to issue commands like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: in order to get things working. Of course, not all modules work like this, so
    use the command shown here to execute whatever scripts are necessary for any other
    modules you install. Remember to change the username, as well as the file path,
    to reflect the specifics of your system and the module being installed.
  prefs: []
  type: TYPE_NORMAL
- en: With some contributions performing their own database modifications automatically,
    it is now easier to install a module, but it is also easier to *shoot yourself
    in the foot*. This is because the changes take place behind the scenes without
    you having direct control over them. Admittedly, these changes, more often than
    not, are fairly harmless, but you never know.
  prefs: []
  type: TYPE_NORMAL
- en: To get things moving, we simply extract the contents of the download to the
    `modules` folder. Once that is done, there is now a folder called `taxonomy_access`
    in the `modules` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to maintain separate folders for each additional contributed
    module in the `modules` folder. Doing this allows you to keep track of which module
    files have been added, and which are the core files.
  prefs: []
  type: TYPE_NORMAL
- en: That's pretty much all there is to do behind the scenes, but we still need to
    ensure that we can make use of this module from the administrator's point of view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your site as the administrator and head on over to the **modules**
    section under the **administer** menu item. Scroll down the list of available
    modules and you should come across your new **taxonomy_access** module, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Modules](img/1800_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enable the module and click **Save configuration**. That's it, all done!
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, we still need to test out the module and put it to work. It is used
    in the following chapter however, so we won't discuss it any further here. You
    should be confident that you can now select, download, and install any module
    you like. Let's move on and look at how to configure the standard modules that
    we enabled earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, the nature of the setup for each module can differ wildly from the
    next. This is because modules can provide pretty much any type of functionality
    you can imagine, ranging from a simple poll, to a search engine, or whatever.
    Accordingly, there are a host of different settings associated with each one.
  prefs: []
  type: TYPE_NORMAL
- en: You should also bear in mind that because of the inherent broadness of function
    associated with modules, the configuration and use of each one can also vary greatly.
    What this means is that it can be quite confusing at first to find out where to
    go in order to change settings or simply make use of them.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with **forum** and **locale**, followed by the others, since these
    two are slightly more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Forum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin looking at forums, you should ensure that you have enabled
    both the **comment** and **taxonomy** modules since these are required in order
    for the **forum** module to function (This will probably be done automatically).
    Once these are all enabled, you can go along to the **forums** link under the
    **administer** menu item to begin working with it. You will be presented with
    the following page, which will straight away raise some interesting questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forum](img/1800_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"How *do I go about organizing my forum(s)?"* is probably what you are asking
    right now. The answer to this really depends on how broad the scope of the discussion
    topics are going to be, how many people will be using the forums, and the nature
    of the topics up for discussion. What you are aiming for is an intuitive, logical,
    easy-to-use structure that will facilitate and encourage discussion by allowing
    users to easily find information—as opposed to frustrating them with a poor structure
    that effectively hides topics.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how to go about organizing the demo site's forum. *Where
    do we begin?* A good idea is to draw out your structure beforehand so that you
    can see how everything relates, and make changes before you begin creating or
    deleting forums. For example, it may seem logical to split up forums depending
    on location, so that people in the US go straight to the North American forums,
    and people in Africa go straight to the African forums.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this has several drawbacks because you would end up with a lot
    of repeated topics for each continent (since wildlife issues are the same the
    world over). Even worse, if you were living in the States and were concerned about
    canned hunting in South Africa, where would you go to discuss this, Africa or
    North America? It seems that partitioning your forums based on location, in this
    instance, is probably not a good idea. *So what criteria do we use to categorize
    our forum content?*
  prefs: []
  type: TYPE_NORMAL
- en: The best way to do it is by issue. People want to discuss issues or topics,
    and so they naturally look for content based on these criteria. When looked at
    in this light, the meaning of the **add containers** tab becomes clear, because
    now we can organize forum topics based on their common issues.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one of the major areas of concern for wildlife today is the topic
    of conservation. This in turn has many facets, all of which would no doubt be
    of interest to the demo site's target audience. The environment is also an issue
    that should be discussed, and everyone is interested in research these days. These
    all seem like viable containers because they logically encapsulate the bulk of
    what people using this site will discuss.
  prefs: []
  type: TYPE_NORMAL
- en: Moving ahead on this line of thought, each of the potential containers has distinct
    sub-categories that users would intuitively understand as topics for debate—we'll
    see the actual structure I came up with in a moment. Once you have a nice structure
    jotted down on paper, it is time to actually implement the forums on the site.
    Let's set about this by creating the containers first. Click **add container**
    to bring up a page that allows you to specify the name of the container, a brief
    description, the parent, and a weight.
  prefs: []
  type: TYPE_NORMAL
- en: Since you should have already decided on a structure, it is easy to see which
    container or forum has which parent. The top-level container or forum should obviously
    leave the parent as**<root>**. You can set the weight of the container or forum
    if you would like them to be presented in an order other than alphabetical—the
    smaller the weight; the closer to the top of the pile it will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep adding containers and forums, along with helpful descriptions until you
    have completed the entire structure. The following screenshot shows how the demo
    site ended up (There are, no doubt, more topics that could be added or changed,
    but this suffices for the moment):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Forum](img/1800_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are a few things to note here. First of all, there is some overlap in
    terms of how categories mesh on a conceptual level. For example, **Global Warming**
    should logically appear under **Environmental Impact**, so *why does it have its
    own forum?* The answer is that you need to think about which issues are likely
    to be most important. As global warming is a huge issue, it warrants a promotion
    to its own forum.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, I have only added a single parent layer of containers, with forums
    appearing under this. It is possible to add containers within containers and so
    on, but in the interests of making it easy to find topics, you should try keeping
    a flat structure instead of creating a deep navigation structure wherever possible.
    This is because it is easier for people to search a list than to navigate a deep
    hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there are some configuration options, which you should take a look
    over before finishing. Most of the defaults are pretty sensible, but you may wish
    to click the **configure** tab, and decide on such things as how many posts you
    want to consider *hot*, or whether to order your posts by date or activity. Once
    you are done, click **Save configuration** and your forum is more or less ready
    to go.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue with setting up the other modules before we take a look at how
    to use one of them. In reality you should play around with each and every module,
    and ensure that it is working to your satisfaction, even though we don't have
    the space to do so here.
  prefs: []
  type: TYPE_NORMAL
- en: Locale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With **locale** enabled, you can now click the **localization** link under
    **administer** in order to take a look at what''s on offer. Doing so will bring
    up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Locale](img/1800_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since there are many European agencies and organizations that deal with conservation
    and environmental issues, we would like to add, for example, Italian to our website.
    In order to do this, we simply click **add language**, select the relevant language
    from the drop-down language list, and click the **Add language** button below.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to actually import the language onto the site so that the
    translation can be done. In order to achieve this, go and find the relevant language
    file from the Drupal **Translations** page at[http://drupal.org/project/translations](http://drupal.org/project/translations).
    Search around until you find the relevant file, and then download and unzip the
    file to your file system. Once that is done, click the **import** tab and then
    browse to the `.po` file from your Drupal page—you should have something like
    this (depending on the language being imported):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Locale](img/1800_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are happy that you have the right language `.po` file and that you
    are importing it into the correct language, click **Import**. From the previous
    screenshot you can tell that, sensibly enough, we are importing the `it.po` file
    (the Italian language file) into the **Italian** language on our site. Since this
    is a new import we don't need to worry about replacing any strings in the **Mode**
    section. If you were modifying your language translations, then you might consider
    leaving what you have intact, and only adding new strings by selecting the second
    option.
  prefs: []
  type: TYPE_NORMAL
- en: When that is done, check the **Enabled** checkbox on the page that is brought
    up and click **Save configuration**. You now have a new language enabled on your
    site. You can repeat this process for whichever languages are available for download
    and are required by your users.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we should discuss briefly is how to manage strings. You might
    find that an imported language translation doesn't translate everything as you'd
    like, in which case you need to do it manually. Click the **manage strings** tab
    and you will see a search page that you can use to locate the string(s) you would
    like to change. There is also a list of options to control your search. Once you
    have found what you are looking for, you can simply edit it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that it is possible to create a custom language file, and build
    up the list of translations for that by using the string management tool under
    the **manage strings** tab and manually entering translations—although, this is
    rather tedious work.
  prefs: []
  type: TYPE_NORMAL
- en: If you get a set of translations fairly complete, or make improvements to a
    language file, then the community, in general, would certainly appreciate it if
    you used the **export** link to share your translation files with everyone. Once
    you have exported the file in `.po` format by selecting the language to export
    and clicking the **Export** button, you can then set about getting it up on the
    Drupal site (take a look under the **Contribute** tab on the Drupal site for more
    information).
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since this module is needed by default, along with the forum module, we may
    as well discuss it here briefly. A comment, as the name implies, allows users
    to remark about content they find on the site—simple as that. How to figure out
    who can comment and on what, is the subject of [Chapter 5](ch05.html "Chapter 5. Users,
    Roles, and Permissions") on *Users, Roles, and Permissions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find **comments** under the **administer** menu item, and clicking
    this brings up a list of all the comments on your site. The following screenshot
    shows a typical comments page once a few comments have been added to a particular
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comments](img/1800_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this you can see that we have a comprehensive interface for working with
    comments. There are a few **Update options** available, and these allow us to
    delete or unpublish comments. If you never wanted to see a comment again on your
    site, then **Delete the selected comments** is the way to go. If you only want
    to prevent the comment from being displayed, without being removed entirely, then
    **Unpublish the selected comments** is the correct update option to use.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have decided to unpublish a comment for some reason or other, you
    will have to look for it under the **approval queue** tab instead of the main
    page. The approval queue allows you to search through and edit posts that have
    landed up here for whatever reason—it may be that you have unpublished them, or
    it may be that you have decided to force all comments into the approval queue
    for moderation. However comments land up here, you will find that there are two
    update options available again, this time you can either delete the comment or
    publish it.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **configure** tab, you will find two important categories associated
    with comments, namely **Viewing options** and **Posting settings**. Browse through
    the available options and make any changes you would like. For example, in the
    **Viewing options** section, the **Default display mode** was changed to Threaded
    list collapsed in order to bunch related comments together without displaying
    the body for each comment. The Default display order was also changed to Date
    oldest first so that comments can be viewed as a conversation from the top of
    the page downwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using these settings, comments on a page now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comments](img/1800_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, earlier comments appear towards the top of the pile, with replies
    to those comments posted underneath and indented. Of course, this may not be to
    you liking, and these comments might just as easily been displayed like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comments](img/1800_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It shouldn't be too hard to work out what changes were made in order to get
    the comments looking like this (especially since they are shown in the previous
    screenshot), so it is left as an exercise for you to do. How you decide to display
    comments is really up to you, and any decisions made should take into account
    how comments are used on the site.
  prefs: []
  type: TYPE_NORMAL
- en: The **Posting settings** section provides a few options on how users actually
    create their comments. Once again, you should really take into account the type
    of site you are working on. For example, it might seem sensible to force users
    to preview their comments, but if you find that you have a bunch of regular community
    users who post very frequently, then it is going to become tedious for them to
    continue checking their posts every time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you are going to allow anonymous users to post comments, you must
    decide whether they are to leave contact information with their posts. From the
    point of view of keeping up the standard of posts to your site, it is probably
    a good idea to have postings from anonymous viewers sent to the approval queue
    so that you don''t become a victim of spam attacks or cheap advertising. This
    can be done in the **access control** section under **administer** by selecting
    only the **post comments** option in the **comment module** section for anonymous
    users, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comments](img/1800_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As with anything, this is a trade-off because you are really giving yourself
    a lot of work by insisting that all comments from anonymous users are moderated.
    You might find that in the long run it is better to insist that people who wish
    to become active community members are registered.
  prefs: []
  type: TYPE_NORMAL
- en: Content Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of you might be frowning at the moment, because aren''t comments content
    types? Well, yes, they are, but their configuration is slightly different from
    the others, so they have been separated out. The three content type modules, which
    we enabled in the previous section, have similar configuration settings to contend
    with, so it makes sense to cover them altogether here. If you navigate back to
    the **settings** section under **administer** and then click **content types**,
    you will be shown a list of all the available types, like this, depending on what
    you have enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Types](img/1800_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking **configure** brings up the relevant configuration page, and since
    they are all the same we will only look at one in detail here. For interest's
    sake, we will open up the poll configuration page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options on this configuration page are broken up into two sections: the
    first allowing you to enter some explanatory text and select the minimum number
    of words required to make the content type valid; the second section, **Workflow**,
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Types](img/1800_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, comments, as well as attachments, have been disabled because
    we don't really want feedback on the poll posting itself and we aren't bothered
    about attaching files to polls—they should simply be straightforward Q&A tools.
    You will need to make choices like this for each and every one of the content
    types based on how you want the content to be utilized.
  prefs: []
  type: TYPE_NORMAL
- en: You can also decide whether certain content postings should remain at the top
    of lists as well as deal with a couple of slightly more complex options like **Create
    new revision** or **In moderation queue**—these will be discussed later on in
    [Chapter 6](ch06.html "Chapter 6. Basic Content") on Basic Content. For now, you
    might find it better to leave these settings as they and come back to them later
    once you have all the necessary information.
  prefs: []
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is an interesting module to configure because there are some subtle underlying
    issues, which you should take into consideration when adjusting the settings.
    For a start, the indexing process that is used to build the search in the database
    relies on cron (discussed in [Chapter 10](ch10.html "Chapter 10. Running Your
    Website")). You will need to ensure that you have this operating correctly on
    your live site if you are going to implement a search feature. For more information
    on cron jobs and the `cron.php` script provided with Drupal, you can also visit
    **system** in the **help** section under the **administer** menu item.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to re-index your site manually by clicking on the **Re-index
    site** button at the top of the search page, under the **settings** menu item.
    This will cause Drupal to go over the site's content and update its index so that
    any new content that you specifically wish to be included in any searches will
    be.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the other settings in this section relate to the performance of the
    system. For example, as the number of items you choose to index per cron run will
    also affect the speed of the cron job, you might have to make this setting a little
    lower if you are running into time-out problems. As well as this, indexing shorter
    words adds load to your system, because it has to index that many more words in
    the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it is possible to decide on how to weigh the site search based on
    three criteria, namely **Keyword relevance, Recently posted**, and **Number of
    comments**. You need to work out which criterion is more important, and which
    one can be safely downgraded in importance. In the case of the demo site, the
    following settings were used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search](img/1800_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The reason for the weightings given here is because we really want searches
    to hinge on whether there is a strong correlation between the search terms and
    the content. Effectively, we are saying that just because a posting is new, doesn't
    make it more worthwhile, and just because a piece of content has been commented
    on extensively, doesn't make it more relevant. Depending on your criteria, you
    may choose something completely different—the bottom line is to ensure that the
    search results are as relevant as possible to the site's users.
  prefs: []
  type: TYPE_NORMAL
- en: Upload
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming you are going to allow file uploads to the site, then there are a few
    settings that are of interest. Click the **upload** option under **settings**
    in **administer** to bring up the configuration page for uploads. Here you will
    be able to determine the **Maximum resolution for uploaded images**, as well as
    whether to **List files by default**.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on which version of Drupal you have, it may also be possible to decide
    what types of files are to be allowed onto the site. Remember that some files
    can contain harmful or malicious code like spyware, viruses, or Trojans. You probably
    don't want to run the risk of spreading them around by allowing `.exe` or other
    executable files to be made available. Further, you need to think about how much
    disk space there is available. The last thing you want to do is allow people to
    upload entire movie files that can take up gigabytes of space at a time; so ensure
    that the **Maximum file size** and **Total file size per user** are kept down
    to a reasonable limit.
  prefs: []
  type: TYPE_NORMAL
- en: Menus and Primary Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we continue with something new, it is very important to take a look
    at the site and see whether the changes made so far have the desired effect. Remember:
    it is of paramount importance that new modifications are always tested out like
    this. *How do we go about testing out the new modules?* The best way is really
    to try to use them on the site; so navigate to the homepage and take a look at
    the site as it stands. At present we have something like this (provided you are
    logged in as the administrator):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is certainly not what we would hope for. For a start, there is no immediate
    way to navigate over to the forums, or even look at a poll. We have enabled these
    modules and even configured them; *so why aren't they showing up on the site?*
    The answer lies in the fact that we haven't yet edited our menus or configured
    the primary links.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will probably have noticed the **primary links** link in the top-right
    corner of your screen already. Go ahead and click it to get the ball rolling.
    The following screenshot shows a part of the list that is pulled up on the new
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The highlighted sections in the screenshot above tell us which menu items are
    disabled. By default all the new modules that we have enabled, such as **forums,
    blogs**, and **search** are not available in the **Menu item** list. Let''s rectify
    this by enabling **forums** (or all of them if you wish). You will notice that
    you have a few options to contend with for each one before they are enabled. You
    can make some fairly common-sense decisions regarding these, and the following
    screenshot shows how the **forums** menu item has been set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select **Parent item** carefully, as you may not always want a menu item to
    be displayed on the top level. For example, there is a **Search** box present
    at the top-right of the screen (for now), so you might not want the **search**
    menu item to appear alongside the other main menu items as this would be fairly
    redundant.
  prefs: []
  type: TYPE_NORMAL
- en: The **Path** option allows you to check that this menu item points to the correct
    content, allowing you to click on the link below (in this case, **forum)** to
    see which page is brought up. This is useful if the menu item has been manually
    added and you are uncertain as to whether the target URL for the item was correctly
    entered.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done, you will find that the items you have enabled are now available
    in the menu on the left-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible that you will need to create your own menu at some stage—perhaps
    to provide a more focused navigable area. In such a case, use the **add menu**
    tab on the **menus** page to enter the name of a new menu, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After submitting this, it is then easy to add new menu items using the **add
    menu item** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the screenshot above, you can see that we are adding a menu item entitled
    **aggregation** to the **News** parent item. The **Path** we have chosen to link
    the menu item to is **aggregator**, as this will display all the aggregated news
    available on the site (assuming this is set up). If you don''t have **aggregator**
    enabled for now, link it to something else—anything will do! Once this is done,
    you can view the new menu at the bottom of the menu page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you would like to have this menu displayed somewhere on your site, then
    it is a simple matter of enabling it in the **blocks** section of the main menu
    under **administer**. Blocks are discussed in detail later in this chapter under
    the section entitled Working with Blocks, so we won''t go any further with this
    particular topic other than to show you this (the result of adding the **News**
    menu, with its **aggregator** menu item to the left sidebar):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With that out of the way, we need to look at how to configure the primary links,
    which appear by default at the top right-hand side of each page. We have already
    clicked on this link in order to bring up the **menu** section that we used in
    this section, but we have not yet taken a look at what configuration options we
    have available for the primary links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head on over to the **menus** link that appears under the **settings** menu
    item in the main menu. You will notice that the page is divided into two halves.
    The first provides a drop-down list for the menu options associated with both
    primary and secondary links as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the fact that the latest addition to the available menus, **News**,
    is present in this list should give you a clue as to how this page is used. In
    actual fact, we can select whatever menu item we wish to display here. In this
    case, **Navigation** is the menu of choice, and after saving these settings, the
    **Navigation** menu items are displayed along the top of each page, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, recall that we enabled the **forums** menu item within the **Navigation**
    menu a little earlier in this section, so it appears along with all the other
    primary links in this menu item. Drupal doesn't stop there, because right below
    the first drop-down list, we have a second one that can be used to display secondary
    links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting **Navigation**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'causes all the secondary links in the given menu item to be displayed. In this
    case, the **administer** primary link has a large number of secondary links associated
    with it; so the header section now looks a bit crowded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menus and Primary Links](img/1800_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Having the ability to create whatever menus you like and then display them wherever
    you want is a very powerful tool. There are a multitude of different combinations
    for you to try out. For example, you might wish to create a content menu that
    contains a listing of all the different types of content on your site—blogs, forums,
    stories, polls, and so on. You can then attach this menu to the primary links
    as a kind of *quick navigation* tool for users. Very powerful and very flexible;
    I'm sure you'll agree!
  prefs: []
  type: TYPE_NORMAL
- en: Using Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now we have a whole bunch of configured modules just waiting to be used.
    The content-related modules should be present in the main menu (or at least **forums)**
    because we have edited the primary links to allow them to be shown (alternatively,
    you might have created your own menu to allow navigation of content). We still
    need to take a quick look at one of the modules here just to prove that everything
    is in order. One of the more powerful examples of how customizable Drupal is can
    be demonstrated quite nicely with the **locale** module, so let's look at that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you are a registered user, and the site is configured to allow for
    localization (by having several languages enabled in the **localization** page
    under **administer)**, you could simply log on, click the **my account** link,
    and then select the **edit** tab on that page. Scrolling down, the option to select
    the interface''s language as shown here is now available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Modules](img/1800_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After making a language selection, in this case **Italian**, click **Submit**
    at the bottom of the page, and you will find that, depending on how well the translation
    has been done, your site is more or less presented in the language of your choice.
    Now, whenever you log out the site goes back to its default language, in this
    instance **English**, but on login the site is re-rendered in **Italian**, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Modules](img/1800_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a fairly impressive and powerful feature of Drupal, and hopefully, regardless
    of whether you need this particular module, you are getting excited about the
    many possibilities that lie ahead.
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly recommended that you now work with all the modules you have enabled
    before continuing, and get a feel for what is happening behind the scenes. One
    question you will ask yourself sooner or later is *How do I go about presenting
    all my modules on the site?* This is obviously a fairly important question; so
    we will deal with it right now…
  prefs: []
  type: TYPE_NORMAL
- en: Working with Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw briefly in [Chapter 2](ch02.html "Chapter 2. Setting Up the Development
    Environment"), blocks contain information or related data that is visible in various
    places around the site—depending on where you choose to show them. Blocks are
    often generated by modules, but it is also possible to create them manually. Since
    many modules generate blocks automatically, it is always wise to pay the **blocks**
    section a visit whenever a new module has been enabled, because chances are that
    you have some new settings to play with.
  prefs: []
  type: TYPE_NORMAL
- en: OK, we know what blocks are, so *what are we discussing in this section?* Well,
    when we talk about working with blocks, what we are really saying is*"How do we
    want to present the functionality of the site to the user?"* Naturally, everyone
    should strive to make a striking and unique site, and layout configuration is
    a big part of that—especially since it governs how functionality is organized
    on the site's interface.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind at all times that the overriding factors, which govern the way
    you set things up when it comes to presenting the site, are all about usability.
    Make sure that the site is intuitive and easy to follow and never sacrifice clarity
    and ease of use for artistic reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, Drupal is already fairly sensibly laid out by default, but that doesn't
    mean that there is not plenty to do. You have an exceptional amount of control
    over where and how everything is displayed and correspondingly, quite a lot to
    work on.
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, we are only concerned with where functionality is going to be
    presented on the page. In other words, we are dealing with the part of the interface
    design that is directly concerned with the site's functionality. For example,
    a theme would work with such things as color and font, or even background images
    and layout, among other things (the scope of themes is actually very broad but
    for the time being it is fine to look at things in this way), whereas we would
    still need to enable and add blocks to certain parts of the site regardless of
    what template/theme we were using.
  prefs: []
  type: TYPE_NORMAL
- en: '*But where do we begin?* Well, one of the best ways to find out how you want
    things done is by looking on the Net and seeing how other people have made sites
    that work nicely. If there is something you like, see if it can be imitated on
    your site.'
  prefs: []
  type: TYPE_NORMAL
- en: Another way to learn about how you are ultimately going to set out your site
    is to actually play around and see what works. This section will concentrate on
    this method and leave the first method for you to research.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Under the **administer** menu item, click **blocks** to bring up the list of
    blocks that are available for the site at present. Remember that as you add and
    change things on your site, this list will change—you will probably have to revisit
    it more than once. Looking over the blocks page, you will see a list of the available
    blocks and several options for each one. Drupal gives you the ability to place
    any of these options pretty much anywhere on the page, but your choices shouldn't
    be quite so random.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to make the site intuitive to use. In order to do this, it is a good idea
    to group related information into the same places on the site, so that users can
    get a feel for where they might look for a specific type of content. For the purposes
    of the demo site, the following settings were made for the time being (remember
    that as the site develops, it is likely that this will change):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Blocks](img/1800_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is one interesting point to note about the **Weight** settings. If you
    look at the previous screenshot, you will see that the blocks in the **right sidebar**
    have weightings of **1** to **4**. What do I do if I want to add two new blocks
    above these? Fortunately, the **Weight** drop-down list (under **blocks)** has
    negative numbers that allow you to give weightings of less than **0** so that
    you don't have to redo all the weightings to insert one above. Accordingly, if
    you wanted to add two more blocks to the top of the right sidebar, you could give
    them weights of **1** and **0** without changing anything else.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, notice that information about other users, like **Who's new** and
    **Who's online**, is confined to the footer area of the page in the previous screenshot.
    This is because obviously the main area of concern for the site is not who is
    online, but rather content relating to wildlife. This information is therefore
    assigned to the bottom of the page where people who are interested in taking a
    look at who's around can take the trouble to check, without it detracting from
    the main content of the site. It's a good idea to put all information like this
    at the bottom of your pages.
  prefs: []
  type: TYPE_NORMAL
- en: What else? All content-related issues are grouped into the right-hand sidebar.
    This means that if people want to quickly take a look at what new content has
    been added to the site, they can find it by looking here. As well as this, information
    is structured such that polls appear above all other information (because we generally
    want to encourage people to take the time to answer a poll), but we have left
    the search form at the top of the page, because we envisage this to be the most
    useful tool once the amount of content on the site has become substantial.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, some blocks remain disabled as the site does not need them for now.
    It is always easy to add or remove blocks at a later date. Provided you make sure
    there is a nice logical layout for the various blocks, you can chop and change
    what is and is not displayed as and when required. But try not to chop and change
    too often as this will hurt the usability of the site and may lead to frustration
    among users once it has gone live.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at your homepage once these changes have been saved (by clicking
    **Save blocks)**, you will see that the various blocks have been inserted into
    your web pages as you requested. It's easy enough to move things around until
    you are totally happy with the way the page looks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of you may also have noticed that there is an **add block** tab at the
    top of the **blocks** page. Clicking this brings up a page that can be used to
    insert your own blocks into your site, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Blocks](img/1800_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, we are adding a little block of PHP code that takes a quote out
    of a file from the `drupal` folder in the file system (quotes.txt), breaks it
    up into an array of lines, picks one at random, and then displays it in a special
    font. Don''t worry about understanding the PHP code for the moment. This is really
    just here to give you an idea of why you might wish to add a block to the site
    in future. If you then view the new block on the website you should get something
    like this (depending on what quotes you have added to your `quote.txt` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Blocks](img/1800_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding silly quotes is of course something quite fun to do, but hopefully you
    appreciate how easy it is to include new blocks in your pages. The situation becomes
    more complex when we start thinking about whether certain people should be allowed
    to access a block or not, or whether the block should be displayed on all pages
    or only on selected pages. In order to find out how to deal with these issues,
    we must look at block configuration in some detail.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drupal allows us to control when a block is displayed through the **configure**
    link at the right-hand side of each block in the list. This configuration page
    is split up into three sections that deal with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Block specific settings**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User specific visibility settings**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page specific visibility settings**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining these three sections provides a sophisticated method of controlling
    when a block is shown, and to whom. Of course, some modules don't require any
    specific settings of their own; so you might find that you are only required to
    make specific decisions about users and pages more often than not.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good example for configuring a block can be shown by the **Who''s online**
    page. This page allows us to decide how long users can be inactive, before we
    no longer consider them online, as well as, the maximum number of people to show
    at any one time. That''s easy enough to deal with, and really depends on the needs
    of the site. The next two options give us something to think about though:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Blocks](img/1800_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the settings above allow users to edit their own preference
    for whether they can see the **Who's online** block—although, it is visible by
    default. While you might find that most of your casual users don't really mind,
    regular users often appreciate being given some control over how they set up their
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these settings in place, users editing their account information are presented
    with the following checkbox that allows them to enable the block or leave it disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Blocks](img/1800_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Allowing users to make their own choices is one thing, but what if we don''t
    want to display a certain block on a certain page ever?* Well, the next section
    allows us to do exactly this, and if you look at the screenshot before last, you
    will see that the **Show on every page except the listed pages** option has been
    selected and the text**<front>** has been entered in the **Pages** text area.
    This means that whenever someone visits the site, they aren''t shown who is online.
    This information only becomes available once they have logged in or begun using
    the site by looking over content or adding material.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More advanced users can add some code to determine whether or not the block
    is displayed. This could be in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You will probably find that you only need to come back to this section later
    on, when there are specific reasons to show or not show information. As always,
    it is recommended that you play around and attempt to show a module on a certain
    page but not others. *For example, can you show a block only when someone is using
    the forums?* The answer is of course to select **Show on only the listed pages**
    option, and then enter **forum** or **forum/*** into the text area. Make sure
    this is correct by trying it out on your own machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to configure a block. It is simply a case of going through
    each one you have enabled, and making the appropriate decisions about when, where,
    and to whom they will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the general configuration tasks out of the way, we knuckled down to the
    all important topic of adding functionality and organizing it on the site. This
    is one of the most important tasks you will undertake during the development phase.
    Selecting and implementing the right functionality is a subtle task, but hopefully
    you found that Drupal makes it quite easy to implement once you have made up your
    mind about what goes where.
  prefs: []
  type: TYPE_NORMAL
- en: As well as this, we got a taste of what it's like to have an entire development
    community to draw from, when we downloaded and installed a contribution module.
    Contribution modules are an invaluable resource for extending the functionality
    of a site. This valuable facility comes with the express warning that you need
    to safeguard the security of your site by making backups before implementing any
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal's power and elegance shone through brightly when we talked about how
    easy it is to customize the site's menu and navigation. Having a powerful tool,
    combined with the flexibility of the menu system, is an extraordinary help when
    it comes to creating a well designed and easy‑to‑use site. Hopefully, the relationship
    between how menus are created and how they relate to the functionality provided
    by the modules became clear to you over the course of the latter stages of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important things you hopefully learned from this chapter is
    that, because Drupal is so flexible and customizable, there are a large number
    of settings that are held at different places. Keeping track of all of these might
    seem quite daunting at first, but you will become more familiar with them as you
    work with Drupal. Eventually, you will be able to find your way around with ease.
  prefs: []
  type: TYPE_NORMAL
- en: For now though, sit back and take a quick break, happy in the knowledge of a
    task well done. In the following chapter we will begin looking at how to work
    with users and permissions—another topic crucial for your success as a Drupal
    administrator.
  prefs: []
  type: TYPE_NORMAL
