- en: Chapter 1. OOP vs. Procedural Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：面向对象编程（OOP）与过程式编程的比较
- en: PHP is one of the most popular scripting languages of the last couple of years.
    Almost 60% of web servers are running on Apache with PHP. It is so popular that
    millions of websites and web applications are developed every month using PHP.
    PHP started its journey as a simple replacement for Perl, and in a few years it
    became tremendously popular and powerful. The language itself is closely similar
    to ANSI C.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是过去几年中最受欢迎的脚本语言之一。几乎有 60% 的 Web 服务器运行在 Apache 上，并使用 PHP。它的受欢迎程度如此之高，以至于每个月都有数百万个网站和
    Web 应用程序使用 PHP 开发。PHP 的旅程始于作为 Perl 的简单替代品，几年后它变得极其流行和强大。该语言本身与 ANSI C 非常相似。
- en: One of the reasons why PHP became so popular is its short learning curve. Learning
    PHP is not a big job, especially if you are familiar with the syntax of Java or
    C. As writing PHP scripts is easy, anyone can write PHP code without following
    conventions and mixing presentation layers with business logics (which is one
    of the main reasons why there are large amounts of unmanageable projects floating
    around). Because there are no strict coding conventions followed in PHP, over
    the years as a project gets bigger, it can turn into an unmanageable demon.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 变得如此受欢迎的一个原因是它的学习曲线很短。学习 PHP 不是一个很大的任务，尤其是如果你熟悉 Java 或 C 的语法。由于编写 PHP 脚本很容易，任何人都可以编写
    PHP 代码，而不必遵循约定，将表示层与业务逻辑混合（这是大量不可管理项目存在的主要原因之一）。由于在 PHP 中没有遵循严格的编码约定，随着时间的推移，随着项目规模的扩大，它可能会变成一个难以管理的恶魔。
- en: '**OOP** or **Object Oriented Programming** is a good programming practise to
    create manageable projects more easily. Procedural programming means writing code
    without objects. Procedural programming consists of codes with or without routines.
    OOP enlightens any language for better coding, for best performance and for writing
    very big projects without worrying a lot about managing them. OOP gives you facilities
    to create reusable objects that you or other developers can use in their projects
    without reinventing them again and again. OOP removes the hassles and difficulties
    of writing and managing big applications.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**OOP** 或 **面向对象编程** 是一种良好的编程实践，可以更容易地创建可管理的项目。过程式编程意味着编写没有对象的代码。过程式编程由带有或没有例程的代码组成。OOP
    为任何语言提供了更好的编码、最佳性能以及编写非常大的项目而无需过多担心管理的功能。OOP 为你提供了创建可重用对象的便利，你可以或其他开发者可以在他们的项目中使用这些对象，而无需反复重新发明它们。OOP
    消除了编写和管理大型应用程序的麻烦和困难。'
- en: In this book we are going to discuss how you can achieve maximum benefits using
    OOP with PHP, using step-by-step instructions, real life examples how OOP helps
    you to write effective code, how to improve your coding style, and how to reuse
    them over time. This book won't work as a reference for PHP language; we will
    just cover OOP features of PHP and not the basics of general PHP. If you are looking
    for a good reference book, consult the PHP manual at first and then you can study
    *Core PHP Programming*, a very good book written by Leon Atkinson.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将讨论如何使用 PHP 的面向对象编程（OOP）获得最大效益，使用逐步指导、真实生活示例来展示 OOP 如何帮助你编写有效的代码，如何改进你的编码风格，以及如何随着时间的推移重用它们。这本书不会作为
    PHP 语言的参考书；我们只会涵盖 PHP 的 OOP 特性，而不是一般 PHP 的基础知识。如果你正在寻找一本好的参考书，首先查阅 PHP 手册，然后你可以学习由
    Leon Atkinson 编写的《Core PHP Programming》，这是一本非常好的书。
- en: Introduction to PHP
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP 简介
- en: This section is not for you if you are already a PHP developer, but for those
    who are new to PHP and starting with this book. Though I said at the very beginning
    that I assume you will have some pre development experience in PHP while reading
    this book, but if you are a total fresher and want to learn OOP with this book,
    this section may be worth recalling the basic PHP language features. If you are
    already familiar enough, don't skip this section as we have other topics to discuss
    here.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经是一名 PHP 开发者，本节不是为你准备的，而是为那些刚开始学习 PHP 并使用这本书的人准备的。虽然我在一开始就说，我假设你在阅读这本书时将在
    PHP 领域有一些预开发经验，但如果你是一个完全的新手，并想通过这本书学习 OOP，那么这一节可能值得回顾一下基本的 PHP 语言特性。如果你已经足够熟悉，请不要跳过这一节，因为我们在这里还有其他主题要讨论。
- en: So you may ask where is the introduction to PHP, I am not seeing any code here!
    Well, you don't need to. The best resource on the internet is for free. Please
    go to [http://www.php.net](http://www.php.net) and download the manual and read
    the basic chapters. For a detailed learning of PHP, you can study the book *Learning
    PHP5* written by David Sklar.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能想知道PHP的介绍在哪里，我没有在这里看到任何代码！好吧，你不需要。互联网上最好的资源是免费的。请访问[http://www.php.net](http://www.php.net)，下载手册并阅读基本章节。为了详细学习PHP，你可以研究David
    Sklar所著的《Learning PHP5》这本书。
- en: Ready, Set, Go
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备，设置，出发
- en: In this book, we are using PHP5.1.2 for our examples but for almost 99% of cases
    it will run with PHP version 5x. We have MySQL 5 in our machine and Apache 2 as
    our web server. If you aren't familiar with configuring all these in your machine,
    you can download pre configured WAMP or LAMP distributions like XAMPP ([http://apachefriends.org](http://apachefriends.org))
    or Apache2Triad ([http://www.apache2triad.net](http://www.apache2triad.net)).
    You will find corresponding documentation for installation and customization on
    each of these product's website.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用PHP5.1.2作为示例，但几乎在99%的情况下，它都可以运行在PHP版本5x上。我们在机器上安装了MySQL 5，并使用Apache
    2作为我们的Web服务器。如果你不熟悉在你的机器上配置所有这些，你可以下载预先配置好的WAMP或LAMP发行版，如XAMPP（[http://apachefriends.org](http://apachefriends.org)）或Apache2Triad（[http://www.apache2triad.net](http://www.apache2triad.net)）。你可以在每个产品的网站上找到相应的安装和自定义文档。
- en: A Little History of OOP in PHP
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP中面向对象编程的历史简述
- en: When PHP was developed, it did not implement OO features in itself. After PHP/FI,
    when Zeev, Rasmus, and Andy rewrote the core and released PHP3, very basic OO
    features were introduced. When PHP4 was released, OO features got matured with
    huge performance improvement. But the PHP team rewrote the core engine again to
    introduce completely new object models and released PHP5\. Now there are two versions
    of PHP being developed. Don't get confused by comparing PHP versions with other
    languages. PHP5 doesn't mean it is the latest PHP version. As I said a while ago,
    PHP4 and PHP5 are being released actively (though there will be no more releases
    of PHP4 after December 2007). Between these two, PHP5 implements almost complete
    OO features while PHP4 doesn't. At the time of writing this book the latest version
    of these two streams are PHP5.2 and PHP4.4\.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当PHP被开发出来时，它自身并没有实现面向对象的功能。在PHP/FI之后，当Zeev、Rasmus和Andy重写了核心并发布了PHP3时，引入了非常基础的面向对象功能。当PHP4发布时，面向对象功能得到了成熟，并且性能有了巨大的提升。但PHP团队再次重写了核心引擎，引入了全新的对象模型，并发布了PHP5。现在有两个版本的PHP正在开发中。不要因为将PHP版本与其他语言进行比较而感到困惑。PHP5并不意味着它是最新的PHP版本。正如我之前所说的，PHP4和PHP5仍在积极发布（尽管PHP4将在2007年12月之后不再发布）。在这两个版本之间，PHP5实现了几乎完整的面向对象功能，而PHP4则没有。在撰写这本书的时候，这两个版本的最新版本是PHP5.2和PHP4.4。
- en: Procedural vs. OO Coding Style
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程式编程与面向对象编程风格
- en: 'PHP allows you to write code in two flavours, one is procedural and the other
    is object oriented. You can even write procedural code in PHP5 and it will run
    without any problems. If you are not clear about procedural and object oriented
    programming, then we will have a look at these two different coding styles. The
    following two examples are not fully running examples rather a pseudo code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHP允许你以两种风格编写代码，一种是通过过程式编程，另一种是通过面向对象编程。你甚至可以在PHP5中编写过程式代码，而不会出现任何问题。如果你对过程式编程和面向对象编程不甚了解，那么我们将探讨这两种不同的编程风格。以下两个示例不是完整的运行示例，而是伪代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will notice using a lot of inline processing either directly or via using
    functions. It may stand as an example of typical procedural operation. Let''s
    see how it looks after converting it to OOP:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到使用了很多内联处理，无论是直接使用还是通过使用函数。这可以作为一个典型过程式操作的例子。让我们看看转换成面向对象编程后它看起来会怎样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now if you take a look into these two code snippets, you will find that the
    latter one is much more readable. Well, you can make the first one more readable
    by introducing some more functions into it, but how many functions are you ready
    to search into when you use them? The latter snippet is better organized because
    you know which object is handling which process. If you write big applications
    in procedural style, it will be almost impossible to manage after a few versions.
    Of course you can implement strict coding conventions, but it is agreed by millions
    of developers that it won't give you the ultimate manageability and usability
    if it's procedural unless you do it in OO style. Almost all big applications are
    written using the object oriented approach.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你看看这两个代码片段，你会发现后者要容易阅读得多。嗯，你可以通过在第一个片段中引入更多的函数来使其更易读，但当你使用它们时，你准备好搜索多少个函数呢？后者的片段组织得更好，因为你知道哪个对象正在处理哪个过程。如果你用过程式风格编写大型应用程序，那么在几个版本之后几乎不可能管理。当然，你可以实施严格的编码规范，但数百万开发者都认为，除非以面向对象的方式实现，否则过程式编程不会给你带来终极的可管理性和可用性。几乎所有的大型应用程序都是使用面向对象的方法编写的。
- en: Benefits of OOP
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）的好处
- en: 'OOP is invented to make the developer''s life easier. Using OOP you can split
    your problems into smaller problems that are comparatively easy to comprehend.
    The main goal of OOP is: everything you want to do, do it via objects. Objects
    are basically small discrete pieces of code which, can incorporate data and behaviors
    together. In an application all these objects are connected to each other, they
    share data among them and solve problems.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）是为了让开发者的生活更轻松而发明的。使用面向对象编程，你可以将问题分解成相对容易理解的小问题。面向对象编程的主要目标是：你想做的任何事情，都通过对象来完成。对象基本上是小的离散代码块，可以将数据和行为结合在一起。在应用程序中，所有这些对象都相互连接，它们之间共享数据，解决问题。
- en: 'OOP can be considered better from many aspects, especially when you consider
    the development time and maintenance overhead. The main benefits of OOP can be
    considered as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从许多方面来看，面向对象编程（OOP）可以被认为更好，尤其是当你考虑到开发时间和维护开销时。面向对象编程的主要好处可以概括如下：
- en: '**Reusability**: An object is an entity which has bundles of properties and
    methods and can interact with other objects. An object can be sufficient or it
    may have dependencies over other objects. But an object is usually developed to
    solve a specific set of problems. So when other developers suffer from the same
    set of problems, they can just incorporate your class to their project and use
    it without affecting their existing workflow. It prevents from DRY, which means
    *Don''t Repeat Yourself*. In functional or modular programming, reusing is possible
    but complex.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用性**：一个对象是一个具有大量属性和方法并可以与其他对象交互的实体。一个对象可能是充分的，或者它可能依赖于其他对象。但通常开发对象是为了解决一组特定的问题。因此，当其他开发者遇到相同的问题时，他们可以直接将你的类集成到他们的项目中，并使用它，而不会影响他们的现有工作流程。这防止了DRY（不要重复自己），在函数式或模块化编程中，重用是可能的，但比较复杂。'
- en: '**Refactoring**: When you need to refactor your projects, OOP gives you the
    maximum benefit because all objects are small entities and contain its properties
    and methods as a part of itself. So refactoring is comparatively easier.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：当你需要重构你的项目时，面向对象编程（OOP）能给你带来最大的好处，因为所有对象都是小的实体，并且将它们的属性和方法作为自身的一部分。因此，重构相对容易。'
- en: '**Extensible**: If you need to add features to your project, you can achieve
    best results from OOP. One of the core OOP features is extensibility. You can
    refactor your object to add the feature. While doing it, you can still maintain
    backward compatibility of this object so that it works fine with an old code base.
    Or you can extend the object and create a totally new object that retains all
    the necessary properties and methods of the parent object from which it has been
    derived, and then expose new features. This is termed "inheritance" and is a very
    important feature of OOP.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：如果你需要向你的项目添加功能，你可以通过面向对象编程（OOP）实现最佳结果。面向对象编程的核心特性之一就是可扩展性。你可以重构你的对象以添加功能。在这个过程中，你仍然可以保持这个对象的向后兼容性，使其与旧代码库兼容。或者，你可以扩展这个对象，创建一个完全新的对象，它保留了从其派生出来的父对象的所有必要属性和方法，然后暴露新的功能。这被称为“继承”，是面向对象编程的一个非常重要的特性。'
- en: '**Maintenance**: Object oriented code is easier to maintain because it follows
    somewhat strict coding conventions and is written in a self explanatory format.
    For example, when a developer extends it, refactors it, or debugs it, they can
    easily find out the inner coding structure and maintain the code time after time.
    Moreover, whenever there is a team development environment in your project, OOP
    could be the best solution because you can distribute your code after splitting
    it into small parts. These small parts could be developed as a separate object,
    so developers can develop them almost independently. Finally, it will be very
    easy to merge the code.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：面向对象的代码更容易维护，因为它遵循某种严格的编码规范，并且以自解释的格式编写。例如，当开发者扩展它、重构它或调试它时，他们可以轻松地找出内部编码结构，并一次又一次地维护代码。此外，只要你的项目中存在团队开发环境，面向对象编程（OOP）就可以是最佳解决方案，因为你可以将代码分成小块后进行分发。这些小块可以作为一个单独的对象来开发，因此开发者可以几乎独立地开发它们。最后，合并代码将变得非常容易。'
- en: '**Efficiency**: The concept of object oriented programming is actually developed
    for better efficiency and ease of development process. Several design patterns
    are developed to create better and efficient code. Moreover in OOP, you can think
    of your solution in a much better approach than procedural programming. Because
    you first split your problem into a small set of problems and then find solutions
    for each of them, the big problem is solved automatically.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：面向对象编程的概念实际上是开发出来以提高效率和简化开发过程的。已经开发出几种设计模式来创建更好、更高效的代码。此外，在OOP中，你可以用比过程式编程更好的方法来思考你的解决方案。因为你首先将问题分解成一小部分问题，然后为每个问题找到解决方案，大问题就自动解决了。'
- en: Dissection of an Object
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象剖析
- en: So what is an object? Well, it's nothing but a piece of code with a bunch of
    properties and methods. So is it similar to an array, as arrays can store data
    identified by properties (well, they are called keys)? Objects are much more than
    arrays because they contain some methods inside them. They can either hide them
    or expose them, which are not possible in arrays. The object is somewhat comparable
    with a data structure, data structure, and can incorporate a lot of other objects
    in itself and either creates a tight coupling among them or a loose one. And object
    can incorporate a lot of other object in itself and either creates a tight coupling
    among them or a loose one. We will learn more about loose coupling and tight coupling
    later in this book and understand how they will be useful for us.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是对象呢？嗯，它不过是一段包含许多属性和方法代码。那么它和数组相似吗，因为数组可以存储通过属性（嗯，它们被称为键）识别的数据？对象比数组多得多，因为它们内部包含一些方法。它们可以隐藏它们或公开它们，这在数组中是不可能的。对象在某种程度上可以与数据结构、数据结构相提并论，并且可以将其自身包含许多其他对象，要么在它们之间创建紧密耦合，要么创建松散耦合。对象可以将其自身包含许多其他对象，要么在它们之间创建紧密耦合，要么创建松散耦合。我们将在本书的后面部分学习更多关于松散耦合和紧密耦合的内容，并了解它们将如何对我们有用。
- en: Let's see the code of an object in PHP. The following object is a very simple
    object which can send email to a bunch of users. In PHP5, objects are a lot more
    different than an object in PHP4\. We will not discuss the details of it, this
    is just an introductory object to see how the objects are written in PHP.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看PHP中一个对象的代码。以下对象是一个非常简单的对象，可以向一组用户发送电子邮件。在PHP5中，对象与PHP4中的对象有很大的不同。我们不会讨论它的细节，这只是一个介绍性的对象，以展示如何在PHP中编写对象。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The above object contains four private properties and three accessor methods
    and finally one more method to dispose the email to recipients. So how we are
    going to use it in our PHP code? Let''s see below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述对象包含四个私有属性、三个访问器方法和一个将电子邮件发送给收件人的方法。那么我们如何在PHP代码中使用它呢？让我们看看下面：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I am sure that the above code snippet is much more self explanatory and readable.
    If you follow proper conventions, you can make your code easy to manage and maintain.
    Wordpress developers use a motto on their site [www.wordpress.org](http://www.wordpress.org)
    which is "Coding is poetry". Coding is exactly a poem; if you just know how to
    write it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信上面的代码片段要更加自解释和易于阅读。如果你遵循适当的规范，你可以使你的代码易于管理和维护。WordPress开发者在其网站上使用了一个口号，即[www.wordpress.org](http://www.wordpress.org)，它是“编码即诗歌”。编码确实就像一首诗；如果你知道如何写它。
- en: Difference of OOP in PHP4 and PHP5
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP4和PHP5中面向对象的差异
- en: Objects in PHP5 differ a lot from objects in PHP4\. OOP became matured enough
    in true sense from PHP5\. OOP was introduced since PHP3 but that was just an illusion
    for real object oriented programming. In PHP4 you can create objects but you can't
    feel the real flavour of an object there. In PHP4 it was almost a poor object
    model.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PHP5中的对象与PHP4中的对象有很大不同。从PHP5开始，面向对象编程（OOP）在真正意义上成熟起来。OOP自PHP3引入以来，但那只是真正面向对象编程的错觉。在PHP4中，你可以创建对象，但无法真正感受到对象的真正风味。在PHP4中，它几乎是一个较差的对象模型。
- en: One of the main differences of OOP in PHP4 is that everything is open; no restrictions
    about the usage of methods or properties. You can't use public, private, and protected
    modifiers for your methods. In PHP4 developers usually declare private methods
    with a double underscore. But it doesn't mean that declaring a method in that
    format actually prevents you from accessing that method outside the class. It's
    just a discipline followed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PHP4中OOP的主要区别之一是一切都是开放的；没有关于方法或属性使用的限制。你不能为你的方法使用public、private和protected修饰符。在PHP4中，开发者通常使用双下划线声明私有方法。但这并不意味着以这种格式声明方法实际上阻止你从类外部访问该方法。这只是一种遵循的纪律。
- en: In PHP4 you can find interfaces but no abstract or final keyword. An interface
    is a piece of code that any object can implement and that means the object must
    have all the methods declared in the interface. It strictly checks that you must
    implement all the functions in it. In the interface you can only declare the name
    and the access type of any method. An abstract class is where some methods may
    have some body too. Then any object can extend that abstract class and extend
    all these methods defined in that abstract class. A final class is an object which
    you are not allowed to extend. In PHP5 you can use all of these.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP4中，你可以找到接口，但没有抽象或final关键字。接口是一段代码，任何对象都可以实现，这意味着对象必须实现接口中声明的所有方法。它严格检查你必须实现其中的所有函数。在接口中，你只能声明任何方法的名称和访问类型。抽象类是某些方法可能也有一些内容的地方。然后任何对象都可以扩展那个抽象类，并扩展那个抽象类中定义的所有这些方法。一个final类是一个不允许扩展的对象。在PHP5中，你可以使用所有这些。
- en: In PHP4 there are no multiple inheritances for interfaces. That means an interface
    can extend only one interface. But in PHP5 multiple inheritance is supported via
    implementing multiple interfaces together.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP4中，接口没有多重继承。这意味着一个接口只能扩展一个接口。但在PHP5中，通过实现多个接口，支持多重继承。
- en: 'In PHP4, almost everything is static. That means if you declare any method
    in the class, you can call it directly without creating an instance of it. For
    example the following piece of code is valid in PHP4:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP4中，几乎一切都是静态的。这意味着如果你在类中声明任何方法，你可以直接调用它，而无需创建其实例。例如，以下代码在PHP4中是有效的：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However it is not valid in PHP5 because the method `echosomething()` uses `$this`
    keyword which is not available in a static call.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP5中这是无效的，因为`echosomething()`方法使用了`$this`关键字，而在静态调用中不可用。
- en: There is no class-based constant in PHP4\. There is no static property in objects
    in PHP4, and there is no destructor in PHP4 objects.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PHP4中没有基于类的常量。PHP4中的对象没有静态属性，也没有析构函数。
- en: Whenever an object is copied, it is a shallow copy of that object. But in PHP5
    shallow copy is possible only using the clone keyword.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每当复制一个对象时，它都是该对象的浅拷贝。但在PHP5中，只有使用clone关键字才能进行浅拷贝。
- en: There is no exception object in PHP4\. But in PHP5 exception management is a
    great added feature.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PHP4中没有异常对象。但在PHP5中，异常管理是一个很大的新增功能。
- en: There were some functions to investigate methods and properties of a class in
    PHP4, but in PHP5 beside those functions, a powerful set of API (Reflection API)
    is introduced for this purpose.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP4中，有一些函数用于调查类的方法和属性，但在PHP5中，除了这些函数之外，还引入了一个强大的API集合（反射API），用于此目的。
- en: Method overloading via magic methods like `__get()` and `__set()` are available
    in PHP5\. There are also lots of built-in objects to make your life easier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过像`__get()`和`__set()`这样的魔术方法进行方法重载在PHP5中可用。还有许多内置对象可以使你的生活更轻松。
- en: But most of all, there is a huge performance improvement in PHP5 for OOP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的是，PHP5在OOP方面有巨大的性能提升。
- en: Some Basic OO Terms
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些基本的OO术语
- en: 'Some of the basic object-oriented terms are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一些基本的面向对象术语如下：
- en: '**Class**: A class is a template for an object. A class contains the code which
    defines how an object will behave and interact either with each other, or with
    it. Every time you create an object in PHP, you are actually developing the class.
    So sometimes in this book we will name an object as `class`, as they are both
    synonymous.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**类**：类是对象的模板。类包含定义对象如何行为和交互的代码，无论是相互之间还是与它。每次你在PHP中创建一个对象时，实际上你就是在开发类。因此，有时在这本书中，我们将对象命名为“类”，因为它们是同义的。'
- en: '**Property**: A property is a container inside the class which can retain some
    information. Unlike other languages, PHP doesn''t check the type of property variable.
    A property could be accessible only in class itself, by its subclass, or by everyone.
    In essence, a property is a variable which is declared inside the class itself,
    but not inside any function in that class.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**：属性是类中的一个容器，可以保留一些信息。与其它语言不同，PHP不检查属性变量的类型。属性可能只能在本类中访问，由其子类访问，或者由任何人访问。本质上，属性是声明在类内部但不在该类任何函数内部的变量。'
- en: '**Method**: Methods are functions inside a class. Like properties, methods
    can also be accessible by those three types of users.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法**：方法是类内的函数。像属性一样，方法也可以被这三种类型的用户访问。'
- en: '**Encapsulation**: Encapsulation is the mechanism that binds together code
    and the data it manipulates, and keeps both safe from outside interference and
    misuse. The wrapping up of data and methods into a single unit (called class)
    is known as encapsulation. The benefit of encapsulating is that it performs the
    task inside without making you worry.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**封装**：封装是将代码及其操作的数据绑定在一起，并使它们免受外部干扰和误用的机制。将数据和方法的包装成一个单一单元（称为类）的过程称为封装。封装的好处是它执行任务而不让你担心。'
- en: '**Polymorphism**: Objects could be of any type. A discrete object can have
    discrete properties and methods which work separately to other objects. However
    a set of objects could be derived from a parent object and retain some properties
    of the parent class. This process is called polymorphism. An object could be morphed
    into several other objects retaining some of its behaviour.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**多态**：对象可以是任何类型。离散对象可以具有离散的属性和方法，它们与其他对象独立工作。然而，一组对象可以从父对象派生出来并保留父类的某些属性。这个过程称为多态。一个对象可以变形为其他几个对象，同时保留其部分行为。'
- en: '**Inheritance**: The key process of deriving a new object by extending another
    object is called inheritance. When you inherit an object from another object,
    the subclass (which inherits) derives all the properties and methods of the superclass
    (which is inherited). A subclass can then process each method of superclass anyway
    (which is called overriding).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承**：通过扩展另一个对象来派生新对象的关键过程称为继承。当你从一个对象继承对象时，子类（继承者）继承了超类（被继承）的所有属性和方法。子类可以处理超类中的每个方法（这被称为重写）。'
- en: '**Coupling**: Coupling is the behaviour of how classes are dependent on each
    other. Loosely coupled architecture is much more reusable than tightly coupled
    objects. In the next chapter we will learn details about coupling. Coupling is
    a very important concern for designing better objects.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**耦合**：耦合是类之间相互依赖的行为。松耦合架构比紧耦合对象更易于重用。在下一章中，我们将学习耦合的细节。耦合是设计更好的对象时非常重要的一个考虑因素。'
- en: '**Design Patterns**: First invented by the "Gang of Four", design patterns
    are just tricks in object oriented programming to solve similar sets of problems
    with a smarter approach. Using design patterns (DP) can increase the performance
    of your whole application with minimal code written by developers. Sometimes it
    is not possible to design optimized solutions without using DP. But unnecessary
    and unplanned use of DP can also degrade the performance of your application.
    We have a chapter devoted for design patterns in this book.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计模式**：最初由“四人帮”发明，设计模式是面向对象编程中解决相似问题集的一种更智能的方法的技巧。使用设计模式（DP）可以在开发者编写的代码最少的情况下提高整个应用程序的性能。有时不使用DP可能无法设计优化的解决方案。但过度和不计划使用DP也可能降低应用程序的性能。本书中有一章专门介绍设计模式。'
- en: '**Subclass**: A very common term in OOP, and we use this term throughout this
    book. When an object is derived from another object, the derived one is called
    the subclass of which it is derived from.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**子类**：在面向对象编程中一个非常常见的术语，本书中我们一直使用这个术语。当一个对象从另一个对象派生出来时，派生出来的对象被称为其派生自的子类。'
- en: '**Superclass**: A class is superclass to an object if that object is derived
    from it. To keep it simple, when you extend an object, the object which you are
    extending is the superclass of a newly extended object.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**超类**：如果一个对象是从它派生出来的，那么这个类就是该对象的超类。为了简化，当你扩展一个对象时，你正在扩展的对象是新扩展对象的超类。'
- en: '**Instance**: Whenever you create an object by calling its constructor, it
    will be called an instance. To simplify this, whenever you write some thing like
    this `$var` `=` `new` `Object();` you actually create an instance of object class.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**实例**：每次通过调用其构造函数创建一个对象时，它将被称作一个实例。为了简化，每次你写一些像这样 `$var = new Object();` 的东西时，你实际上创建了一个对象类的实例。'
- en: General Coding Conventions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用编码约定
- en: We will be following some conventions in our codes throughout the book. Not
    being too strict, these conventions will help you to maintain your application
    at a large extent. Also, it will increase the maintainability of your code. It
    will also help you to write efficient code by avoiding duplicity and redundant
    objects. Last but not least, it will make your code much more readable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将遵循一些编码约定。这些约定不会过于严格，但它们将帮助你在大范围内维护你的应用程序。此外，它还将提高代码的可维护性。它还将通过避免重复和冗余对象来帮助你编写更高效的代码。最后但同样重要的是，它将使你的代码更加易于阅读。
- en: In a single `php` file, we never write more than one class at a time. Out of
    the scope of that class, we will not write any procedural code.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个单独的 `php` 文件中，我们一次不会写超过一个类。超出该类的范围，我们不会写任何过程式代码。
- en: We will save any class with a proper naming convention. For example we will
    save the file where we place the `Emailer` class introduced earlier in this chapter
    as `class.emailer.php`. What benefits can you achieve using this naming convention?
    Well, without going inside that file, you are now at least confirmed that this
    file contains a class named "Emailer".
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用适当的命名约定来保存任何类。例如，我们将保存放置在本章前面引入的 `Emailer` 类的文件为 `class.emailer.php`。使用这种命名约定你能获得哪些好处？嗯，不进入那个文件，你现在至少可以确认这个文件包含一个名为
    "Emailer" 的类。
- en: Never mix the case in filenames. It creates ugly application structure. Go ahead
    with all small letters.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在文件名中混合大小写。这会创建丑陋的应用程序结构。继续使用全部小写字母。
- en: Like classes, we will save any interface as `interface.name.php`, Abstract class
    as `abstract.name.php`, and Final class as `final.name.php`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像类一样，我们将任何接口保存为 `interface.name.php`，抽象类保存为 `abstract.name.php`，最终类保存为 `final.name.php`。
- en: We will always use Camel case while naming our classes. And that means the first
    letters of the major part is always a capital letter and the rest are small letter.
    For example a class named "arrayobject" will be more readable if we write `ArrayObject`.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将始终使用驼峰式命名我们的类。这意味着主要部分的第一个字母总是大写，其余部分是小写。例如，一个名为 "arrayobject" 的类，如果我们写成
    `ArrayObject`，将更容易阅读。
- en: While writing the name of properties or class variables, we will follow the
    same convention.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写属性或类变量名称时，我们将遵循相同的约定。
- en: While writing the name of a method, we will start with a small letter and then
    the rest are camel case. For example, a method to send an email could be named
    as `sendEmail`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写方法名称时，我们将以小写字母开头，然后其余部分使用驼峰式。例如，一个用于发送电子邮件的方法可以命名为 `sendEmail`。
- en: Well, there is no more conventions used in this book.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 好吧，这本书中不再使用更多的约定。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned about the object oriented programming and how it
    fits in with PHP. We have also learned some benefits over procedural and functional
    programming. However, we haven't gone through the details of OO language in PHP.
    In the next chapter we will learn more about objects and their methods and attributes,
    specifically creating objects, extending its features, and interacting between
    them. So, let our journey begin, Happy OOPing with PHP.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了面向对象编程以及它是如何与 PHP 结合的。我们还了解了一些相对于过程式和函数式编程的优势。然而，我们还没有详细学习 PHP 中的面向对象语言。在下一章中，我们将更多地了解对象及其方法和属性，特别是创建对象、扩展其功能和它们之间的交互。所以，让我们开始这段旅程吧，快乐地用
    PHP 进行面向对象编程。
