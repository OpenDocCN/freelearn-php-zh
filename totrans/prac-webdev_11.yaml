- en: Chapter 11. MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will first compare traditional relational databases with
    so-called **NoSQL databases** and quickly introduce **MongoDB**, a **document
    database**. You will learn what it is, how to get and install it, and how to create
    a database to insert documents. Then, you will learn how to interface with it
    using PHP as the language.
  prefs: []
  type: TYPE_NORMAL
- en: Relational database management systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. PHP and MySQL"), *PHP and MySQL*, we introduced
    the MySQL database and how to interface with it using the PHP language. That was
    not really the language to talk to the database. We used PHP to compose query
    strings that are lines of code in another language, native to the database **SQL**.
    It is used to query the database, to extract data from it, replace it, or insert
    it. We mentioned that SQL is one of those very few languages that has been around
    for many years and is expected to stick around for many more. It is used for many
    different databases, open source or commercial, small or large, that we collectively
    call **relational database management systems** (**RDBMS**).
  prefs: []
  type: TYPE_NORMAL
- en: A relational database uses tables. The columns represent the type of data stored
    in it, the rows the data itself. You could have a table with customer data containing
    fields like *name*, *firstname*, *address*, *zipcode*, *city*, *telephone*, *accountnr*,
    and so on. All tables contain indexes that can be used in other tables to show
    how they are related. The values of the indexes themselves should never change.
    So, if a customer changes the address, the address needs to be changed in the
    customer table, and only in the customer table, as in all other tables, the customer
    will be referenced by his or her `customer_id`. This is a good thing, but as your
    data becomes more complex, so will the number of tables.
  prefs: []
  type: TYPE_NORMAL
- en: My experience with this is that, as soon as a record needs to contain two things
    of the same kind, like when someone has two addresses, you feel you need to create
    another table.
  prefs: []
  type: TYPE_NORMAL
- en: Queries to access data that you need to compose the HTML of a webpage and that
    is spread across many tables can become quite complex, one INNER JOIN after another.
    Once the need arises to add a table or to add a column to an existing table, you
    will also have to change your code.
  prefs: []
  type: TYPE_NORMAL
- en: It is a common practice in projects that use RDBMS to first define the tables
    of your database, and then start writing your code. The definition of your tables
    is put in a schema or diagram. So, each time a table needs to be added or changed,
    so does your schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, as your database grows and your data becomes more complex, a lot
    of overhead can be created: adding tables or columns, writing complex queries,
    or constantly changing the schema of your database. Wouldn''t it be nice to be
    able to use a different kind of database, where each record contains all the information
    you need, and nothing else? Yes, it would.'
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In recent years, several new database technologies emerged that are not RDBMS.
    Most, if not all of them, tried to solve a particular problem (instead of wanting
    to be a generic solution for everybody). They are collectively called NoSQL databases.
    The NoSQL part can be interpreted in two ways: **NO SQL**, meaning no query language
    available, or **Not Only SQL**, meaning the technology supports more than just
    SQL. NoSQL databases have become quite popular in web development.'
  prefs: []
  type: TYPE_NORMAL
- en: There are several types. The group of NoSQL databases that is of interest to
    us are so-called document databases. What is stored in the database are documents.
    A document in this context is not, let's say, a Word or PDF document, but a JSON
    object. Document databases provide the ability to query on any field in the document,
    so they are, for sure, Not Only SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we are doing here is the reverse of what is going on with RDBMS. Every
    record, or document, will contain all the information we want in it, and nothing
    else. If an item needs to be added to a document that was never used before, we
    simply add it. There is no need to change a schema or a table. If a record now
    needs two things of the same kind, we do things the JSON way: we use an array
    instead of a single object.'
  prefs: []
  type: TYPE_NORMAL
- en: Surprisingly enough, those databases perform and scale very well, even with
    thousands of documents. The NoSQL database we have chosen for our projects, and
    for this book, is MongoDB. It appears to be the one that has the most features,
    is the most widely adopted—the *New York Times* uses it!—and scales and performs
    well.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With MongoDB, we just replace MySQL with a document database that can be a better
    solution for our projects and has JSON as the common denominator. MongoDB uses
    collections and documents. So, that makes it more suitable for, for example, an
    online bookstore application.
  prefs: []
  type: TYPE_NORMAL
- en: As a document in MongoDB is a JSON object, to transfer data to it from PHP is
    as simple as storing the data in a PHP array. No more multiple tables and inner
    joins required. We will explain how to get to MongoDB, create a database, and
    add and update documents. We will do so from within a PHP program, as well as
    the MongoDB shell.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obtaining and installing MongoDB depends on the platform you are using. Go to
    [www.mongodb.org](http://www.mongodb.org) for the software and the documentation.
    This will get you basically two programs. The first one is **mongod** (known as
    the **MongoDB daemon**), a program that needs to be up and running all the time,
    just like a MySQL server would. The second one is simply called **mongo** and
    it is **the** **MongoDB shell**. It is a command interpreter that lets you create
    databases, collections, and documents, and modify them. I like to think of it
    as **phpMyAdmin** for MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to access and manipulate your MongoDB database from within a program,
    you will also need to download and install a driver for MongoDB for the programming
    language of your choice. So, for PHP, we will need a PHP driver for MongoDB. Drivers
    can be built from source, but there is also binary available from distributions
    that change all the time. So, use your favorite search engine and look for a PHP
    driver for MongoDB. At the time of writing, there was one at `php.net/manual/en/book.mongo.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have all these things installed, it is time to start filling up a
    database with documents. In MySQL, we started by first creating all our tables,
    maybe initially on a piece of paper, and then for real by using phpMyAdmin. In
    MongoDB, we use the MongoDB shell to populate our database for the first time.
    However, there is no need to create tables. We simply add documents. As they say
    in French: *simple comme bonjour*.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we make the distinction between databases, collections, and
    documents. Every instance of MongoDB can contain one or more databases. Although
    you can do everything with a single database, it is recommended that you use separate
    databases where appropriate, for example, one for each project.
  prefs: []
  type: TYPE_NORMAL
- en: Although you could put all your documents into a database, just like that, it
    is better to organize them as several collections. Compared to RDBMS, documents
    are the equivalent of table rows, and collections are the counterpart of tables.
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this section, we will walk you through using the MongoDB
    shell to do basic **Create, Read, Update, and Delete** (**CRUD**) operations.
    For more detailed and advanced operations, consult the excellent MongoDB documentation
    at [mongodb.org](http://mongodb.org) or some of the books available on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the MongoDB shell, simply type `mongo` in the command line. You will
    see something similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You are now talking to the command interpreter, which basically reads JavaScript
    code. By default, mongoDB will connect to a database called `test`. The `>` symbol
    is your command prompt. Just to show that it works, let''s promptly change it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating databases, collections, and documents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have changed our command prompt to the string mongoDB. Let''s connect to
    a different database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You have now switched to a database called `california`. You think I forgot
    something and I am telling you I did not, I just want to keep the suspense going
    here. Now, let''s add a document to a collection `people`. Simply type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s find out whether something really happened here. There is a method to
    find all the documents in a collection, unsurprisingly, called `find()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Oh my goodness, we now have created a database called `california`, and in it,
    a collection `people`, and inside it, our first document. All of this just happens;
    if the database or collection does not exist yet, MongoDB will create them. Unlike
    in MySQL, there is no need for any SQL to create the database nor table ahead
    of time or to specify data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you type the following two commands, you will indeed see that they now exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an alternate to find, which gives a nicer output, called `findOne()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, there is only one thing to find, but as the number of documents
    increases, we want to be more specific, so we could say things like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is beginning to look very much like a query, because it is one! You may
    have noticed a key named `"_id"` and a very long value. Let's spend a few lines
    on this.
  prefs: []
  type: TYPE_NORMAL
- en: _id and ObjectIds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every document stored in MongoDB must have an `"_id"` key. It can be any type,
    but it defaults to `ObjectId`. In a single collection, every document must have
    a unique value for `"_id"`, which ensures that every document in a collection
    can be uniquely identified. ObjectId use 12 bytes of storage. As stated previously,
    if there is no `"_id"` key present when a document is inserted, one will be automatically
    added to the inserted document.
  prefs: []
  type: TYPE_NORMAL
- en: Loading scripts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The mongoDB shell interprets JavaScript and also has built-in functions. Some
    things you are used to will not work, such as `alert()`, because it is a method
    of the Windows object, and that is only available when you are running in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very useful function is `load()`. You can prepare all your commands ahead
    of time and store them in a file. Create a folder for your project, go to it,
    and store the following, which is very close to one of our JSON examples from
    the previous chapter, in a file `californiapeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will insert five more documents into the `people` collection. To verify
    it, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Removing documents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Notice that there are now two documents containing `Ansel Adams`, clearly distinct
    by its `"_id"`. But, we only need one, so it is time to remove one. This is done
    using the `remove()` function. Beware, if you do not specify an argument in the
    following command, all documents in the collection would be removed and once documents
    are removed, they cannot be restored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Updating documents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our final CRUD operation is update. In this example, we add a key:value pair
    to the document that has the information relating to the late nature photographer
    and rock climber Galen Rowell. In this case, we set a value for the field `"died"`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`$set` is an example of a **modifier**. It allows us to specify how we want
    to change the document. In the previous example, the value of the field `"died"`
    would have been updated or created if it did not yet exist.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the other modifiers are `$unset`, to remove a field, `$inc` and `$dec`
    to increment and decrement a field, and `$push` and `$pull` to add an element
    to an array or remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: MongoDB data types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In MongoDB, we do not have to specify data types ahead of time. You just use
    them, and by now, you should have recognized, from our examples, the same data
    types that make up a JSON object. However, in MongoDB we have a few extras.
  prefs: []
  type: TYPE_NORMAL
- en: Basic data types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the same basic data types as in JSON: `null`, `true`, `false`, `string`,
    `number`, and `array`.'
  prefs: []
  type: TYPE_NORMAL
- en: Dates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Dates are always hard to deal with, not only in life but also in databases.
    Fortunately, MongoDB supports the JavaScript `Date()` class, giving us a data
    type when using dates. Dates are stored as the number of milliseconds that have
    elapsed since the epoch and do not contain any information on the time zone. Of
    course, if you like, you could store the time zone as a separate key:value pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In MySQL, the equivalent of the previous code would be to use `NOW()`. If you
    issue a `find()` on the document where you added `"today"`, you will see something
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Embedded documents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The value of a field in a document can also be an entire document. We called
    these **embedded documents**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: One more example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s finish this section on the MongoDB shell with one more example. Let''s
    take our `practical.json` file from [Chapter 10](ch10.html "Chapter 10. XML and
    JSON"), *XML and JSON*, and the JSON object it contains. By simply surrounding
    it with `db.junelake.insert()`, we can turn it into a MongoDB command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once executed, either by typing it in or storing it in a file first, and then
    using the `load()` function, we have now inserted a document into the `junelake`
    collection of our gallery database. We can even access it as a JSON object and
    walk through it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `print()` function to display those values. We can even go through
    a loop, as we did in [Chapter 10](ch10.html "Chapter 10. XML and JSON"), *XML
    and JSON*. That is why I picked the name `json` as my variable name, where we
    had `json` as the variable that contained what our Ajax call returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, we might as well, now that we can get JSON straight out of our MongoDB database,
    use the exact same JavaScript code to generate an HTML page of our photo gallery,
    right? Wrong! Our database resides on a server and is also the server where we
    execute the MongoDB shell (even if it is on our developer machine, it still has
    the role of a server).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for that JavaScript code generating our HTML to be useful, it has
    to be executed on the client and interpreted by a different JavaScript interpreter
    than the MonoDB shell - the one that we have been using since the beginning of
    this book: *the browser*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To paraphrase a famous line out of a James Bond movie: *JSON, how the hell
    are we going to get this data over here?* Well, this will have to happen the same
    way like before. We will use an Ajax call to execute code on the server to extract
    data from our database, this time a MongoDB database, and then process that data
    on the client side to generate our HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, the only programming language we know we can use on the server
    side is PHP, so we need a way to access our MongoDB database using PHP.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB and PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will dive right into it. We finished the previous section by inserting documents
    into the database containing the data we need for our photo gallery page. Then
    we discovered that we could not use it right away. However, we can, if we have
    the PHP driver installed and the mongo extension specified in our `php.ini` file,
    we can access our MongoDB database from a PHP program on the server. It can be
    extremely short.
  prefs: []
  type: TYPE_NORMAL
- en: Getting our gallery data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is all it takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to the driver, we have access to a `Mongo()` class. On the first line,
    we make a connection to MongoDB, on the second, we select the database we want
    to use, and on the third, we specify the collection we are dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the `findone()` method, which we recognize from the previous section.
    As PHP does not know about JSON objects, this is going to return something else:
    an array. Now, remember that there is a PHP function that converts an array to
    JSON: `json_encode()`. There it is. Just `echo` it for the Ajax call to catch
    it and do the rest of the job on the client side. Here are the other pieces. I
    have not repeated the CSS file here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We used the `.post()` jQuery method to execute our PHP script on the server
    and collect the JSON data. Notice the extra `"json"` argument in the `.post()`
    statement. It is very important as it tells the Ajax call to expect the data to
    be in the JSON format, and to not attempt to process it as HTML. If you forget
    this part, strange things will happen, or worse, nothing at all.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations with MongoDB and PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We conclude this chapter with an overview on how to perform some of the basic
    CRUD operations using PHP and MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned, PHP does not support JSON objects, so we have to use arrays.
    In the previous example, we fetched data from the database, so we did not even
    have to look at the array, we just converted it to JSON. The only disappointing
    part may be that as we are dealing with a document database that contains JSON
    objects, we grab data, it shows up as arrays, and we have to convert it back to
    JSON. That does not appear to be very efficient, but if you already know PHP,
    it is easy to write.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss a JSON all the way (JavaScript all the way too) alternative
    in the final chapter of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Insert documents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's add another famous California person to our `people` collection in the
    `california` database. Those of you familiar with Venice Beach know who I am talking
    about. He is the guy with a turban on rollerblades, skating up and down the boardwalk.
    He has not changed in 30 years, except that he is now selling T-shirts instead
    of cassette tapes.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is very much the same as the `insert()` in the MongoDB shell, except our
    *key:value* pairs are now *key=>value* pairs as part of an associative array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Update documents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s update our document by adding one more key:value pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: So far, we could have used double quotes instead of single quotes in our examples,
    but for the `$set` modifier we can only use single quotes, because, as you know,
    `$` has a special meaning in PHP—without the single quotes, `$set` would have
    been interpreted as a PHP variable.
  prefs: []
  type: TYPE_NORMAL
- en: Queries with conditions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Just as we did with the shell, we can use the `findone()` function to query
    a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, an array is used instead of a key:value pair. But we can make these
    queries more complex. Several keywords exist that can be use to refine our query.
    Here is one more example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`findone()` only gives us one document back and does so as an associative array,
    like in our very first example. If we use `find()`, the data of several documents
    is returned. In the shell we had a nice little output, defaulting to the first
    20 documents, but, here, using PHP, we will be given what is called a MongoDB
    **cursor**.'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB cursor object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The MongoDB `db.collection.find()` returns all documents as an iterable object,
    or cursor. In PHP, `find()` returns all documents with all their data, which is
    probably not what you want. But, as we do not have too much data at this point,
    here is one way to get it all and walk or iterate through it in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the example, `$cursor` is an object of the MongoDB cursor class. Several
    methods are available for this class, giving you alternate ways to iterate through
    your cursor. If you want to turn the cursor into an array, you can use the `iterator_to_array()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we iterate through `$cursor` using a `foreach()` loop, giving
    us access to each document as an array to do with it whatever we want. What we
    did was `echo` the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To conclude, we''ll show you how to refine our query. Imagine you want to perform
    the same query, which in SQL would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In MongoDB PHP lingo, this would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This should, by now, look pretty straightforward to you. The cursor modifier
    part allows you to limit or influence the data that is returned, for example,
    there is a **sort** modifier.
  prefs: []
  type: TYPE_NORMAL
- en: The `projection` array allows you to specify which fields you are interested
    in. By default, the value of `id` is always returned, so if you do not need it,
    add `_id => 0` to your projection array.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about MongoDB, a document database that is very
    popular amongst NoSQL databases. Documents stored in the database are basically
    nothing more than JSON objects. They can be grouped in collections, the equivalent
    of tables in RDBMS.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MongoDB shell, we can populate databases and collections from the
    command line. From within web applications, we can access a MongoDB database on
    the server using PHP. This is really easy because JSON objects can be written
    as associative arrays.
  prefs: []
  type: TYPE_NORMAL
- en: In the last few chapters, there was a lot of sample code and I promised you
    a textbook so you can learn away from the computer. In the next chapter, there
    will be a lot more reading to do.
  prefs: []
  type: TYPE_NORMAL
- en: The newest trends in web development are being discussed, triggered by the totally
    different way people are using the Web compared to just a couple of years ago.
    We are going to focus a little more on how your website looks and a little less
    on how it works.
  prefs: []
  type: TYPE_NORMAL
