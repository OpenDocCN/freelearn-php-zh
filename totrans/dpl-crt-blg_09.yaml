- en: Chapter 9. Advanced Features and Modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to start out by looking at a grab-bag of modules that showcase
    some of the more advanced or interesting features in Drupal in order to give you
    the opportunity to add that *special something* to your site. Whether it is new
    type of content, an advertising policy to generate revenue from traffic, or even
    a way of providing nice, dynamic content, you should find something to add value
    to your site in here.
  prefs: []
  type: TYPE_NORMAL
- en: Remember though, that if what is required is not available in the default distribution
    or in any of the modules, you are not totally out of luck. The chances are someone
    else in the community has had to do something similar before, and you should get
    a few helpful responses on the forums explaining at least some of what you need.
    If at some point you do manage to create something utterly fantastic, please give
    back to the community by sharing your work with others.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, it is often important to be able to make your own additions
    to a site in order to get it just right. Accordingly, we will look at some interesting
    embellishments using code that is freely available on the Internet. Incorporating
    JavaScript and other small, working units of code (commonly known as widgets)
    is the perfect way to enhance your site without having to learn everything about
    programming first.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, as far as new modules go, we will take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Flexinode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AdSense
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first module deals specifically with content, whereas the other one enables
    you to integrate your website with another online business, namely Google—hopefully
    to earn a bit of cash. By the end of this chapter, you will be an ace at using
    slightly more complex contributions.
  prefs: []
  type: TYPE_NORMAL
- en: We will also talk about some more advanced modifications to the interface. It's
    always fun to be able to do something out of the ordinary with your site, and
    working with your theme files, using HTML, PHP, and CSS, is great training for
    the Web in general and not just Drupal. The *Advanced Site Modifications* section
    here will hopefully give you some ideas for your own site as well as give you
    an idea of what's involved in implementing them.
  prefs: []
  type: TYPE_NORMAL
- en: One final thing to remember before we begin is that you *must, must, must* make
    backups of the whole site, including the database, from time to time (preferably
    each time you successfully add a new feature). Further, you should also back up
    each of the pages you are working on before you begin working with them. The topic
    of making backups is discussed in the *Running your Website* chapter, which follows
    this one—I mention this just in case you feel it is time to make a backup of what
    you have now before you begin fiddling around.
  prefs: []
  type: TYPE_NORMAL
- en: Flexinode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At some point along the way you might find that none of the current content
    types really fit the type of content you want to be able to deliver. If this is
    the case, then the **Flexinode** contribution might be just what you are looking
    for. As the module''s description says:'
  prefs: []
  type: TYPE_NORMAL
- en: Flexinode is a module that allows non-programmers to create new node types (flexible
    content types) in Drupal when their needs are modest. Users can define the fields
    in the node edit form for their content type, and can either view the nodes as
    presented by the module or modify the presentation in their theme.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the case of the demo site, let's assume that we would like to build up a
    reservoir of vital statistics pages for endangered animals. In this case, we could
    go to the trouble of building a rough HTML template and use the page content type,
    inserting the relevant data into the various cells in our table. However, this
    would be a pain because if a variety of people were posting this type of information,
    then each of them would have to learn how to use this HTML template. Let's take
    a look how the Flexinode contribution can help out here.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and Installing Flexinode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This process should be quite familiar to you now; so we won't spend much time
    looking at it too closely.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flexinode at the time of writing is still being upgraded for version 4.7 compatibility—be
    careful and ensure that you obtain a suitable, stable version if you intend to
    use it on your live site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply go to the Drupal website and download the correct version of the Flexinode
    module. Extract the files to the `modules` directory in your Drupal installation
    and then execute the `.mysql` script using something like the following command
    (remember to modify the file path to suit your individual system):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be prompted for a password and you can ensure that the relevant tables
    have been added by logging into the `mysql` command-line client and looking for
    the new Flexinode tables as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading and Installing Flexinode](img/1800_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that there are now three `flexinode_` tables present in the `drupal`
    database. If you are not keen on using the command line, remember that you can
    use the visual interface provided by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Funnily enough, this contribution comes with a bunch of contributions! What
    I mean is that there is extra functionality associated with Flexinode that is
    not enabled by default. Take a look at the extracted folder, `flexinode`, on your
    file system (under the `modules` directory). You will notice that there is a `contrib`
    folder present, and it contains a whole bunch of `.inc` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these `.inc` files is responsible for providing the functionality associated
    with its namesake. For example, `field_textarea.inc` provides the code needed
    to include text areas into your content type, and so on. You''ll also notice that
    there are a bunch of readme files available to help clarify what the corresponding
    `.inc` file does. For example, the `README.colorpicker.txt` file has this to say:'
  prefs: []
  type: TYPE_NORMAL
- en: I am hoping that this will be useful in granting users control over the styles
    of their sites. I can imagine a flexinode with several color pickers, select boxes
    and check boxes that could be used to override the default styles of a theme for
    that particular user.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ensure that you read the readme file for each and every `.inc` file you intend
    to enable, as you might be required to move files or even install other modules
    first. When you are ready, head on over to the **modules** section under **administer**
    in your browser and enable the Flexinode module before clicking **Save configuration.**
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Custom Content Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under the **administer** section, navigate to **content** and you will notice
    that there are a couple of extra content-related tabs shown on this page that
    allow us to specify and work with our new content types. Clicking on the **add
    content type** tab will bring up a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Custom Content Type](img/1800_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once that is **Submitted**, you will be taken to the **content types** page
    automatically, where you can now begin working with the newly created type as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Custom Content Type](img/1800_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From this point you can click on either of the two links presented at the top
    right of the content type''s section (in this case, the section is entitled **Animal
    Stats)**. The first link, **edit content type**, allows you to change any of the
    information you supplied when you created the content type—for example, you might
    wish to modify the name, description, or help text. The second option allows you
    to add some **submission guidelines** and configure the standard **Workflow**
    options as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Custom Content Type](img/1800_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These standard options have already been discussed in earlier chapters at some
    length and you really need to make your decisions based on how you intend this
    content type to be used. For our purposes, file attachments have been enabled
    (even though this is not visible in the screenshot) to allow evidence for any
    assertions made to be supplied with the post. Comments are also allowed in order
    for people to be able to collaboratively ensure that facts are correct and up
    to date.
  prefs: []
  type: TYPE_NORMAL
- en: With those two options out of the way, the really interesting and powerful part
    of the Flexinode module comes into play. The **Field list** provides us with the
    option to specify a number of different types of input, which are then bundled
    into the overall content type. Now, this can be slightly confusing to begin with
    because you need to keep in mind that you are specifying *what is needed* in order
    to make content, and not the *actual content* itself.
  prefs: []
  type: TYPE_NORMAL
- en: So, before you begin adding different fields all over the show, think carefully
    about what you want your special content type to do and how it should look. Once
    you have a clear idea of what it is you are creating, it will be a lot easier
    to go ahead and build it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our *Animal Stats* pages should be informative and interesting, providing interested
    parties with a comprehensive and coherent body of knowledge that serves to fix
    an image of the animal, its profile, and its plight in the reader''s mind. If
    one thinks about the types of elements that a page like this would need, something
    like the following would probably be suitable:'
  prefs: []
  type: TYPE_NORMAL
- en: A paragraph or two introducing the animal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A picture of the animal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A summary of its current status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A map of its habitat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contact information and/or links to more resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this in mind, we can turn to the field picker and see what it has to offer.
    Since the first thing we would like to show on the page is a paragraph, it makes
    sense to look for a text area to add to the top of the page. Selecting this option
    in the drop-down list shown on the **content types** page brings up the following
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Structure](img/1800_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here the text area is set as a **Required field** because any user who wants
    to add an **Animal Stats** page must have a bit to say about the animal in the
    first place—a reasonable assumption! Making this a required field has the advantage
    that it is now a good idea to select **Show in teaser** (because we know that
    there will always be a bit of introductory text). This means that whenever anyone
    happens to browse through the **Animal Stats** pages, they can read the introductory
    paragraph in the teaser.
  prefs: []
  type: TYPE_NORMAL
- en: Next, a weight of **9** is assigned to this field because we know that in all
    likelihood this field will always be displayed at the very top of the page. In
    the same way, you can simply pick and choose the rest of the fields according
    to how the page is to be formatted. Each field comes with its own set of considerations
    that you will need to set depending on how the content page is to be used. As
    always, it is easy to come back and modify things if they aren't working just
    right.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the fields have been correctly chosen and set into the correct part
    of the page, content producers can then use the page as they would any other node.
    That's it! All that's left to do is to ensure that the content works as it is
    supposed to and that it fulfils its intended role correctly. Since we have already
    discussed how to use other content types, we will go no further here.
  prefs: []
  type: TYPE_NORMAL
- en: AdSense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have your site up and running, with hopefully a fair amount of people
    visiting, it may be a good option to try earning a bit of extra revenue from advertising.
    Google provides the **AdSense** advertising scheme, which allows you to add customizable
    blocks of advertisements by simply cutting and pasting their code snippets into
    your pages. All that you need to do is to decide on the dimensions and colors
    that will best blend in with your site, and the rest is taken care of by Google.
  prefs: []
  type: TYPE_NORMAL
- en: Doing things this way, while certainly easy, might not be able to give you the
    control you want over your ads so Drupal provides an **AdSense** module to help
    out. This section will take a look at how the AdSense module works since it gives
    more control of what types of ads are displayed and when.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, though, it is important that you register with Google in order
    to obtain an account and ID, which will be used in order to track the traffic
    that your site sends through the adverts. You can go directly to the AdSense site
    at: [https://www.google.com/adsense/](https://www.google.com/adsense/) . Simply
    click on the prominently displayed **Click Here to Apply** button and follow the
    instructions. Alternatively, you can support the developer of the AdSense module
    by registering through their referral link displayed at this page: [http://baheyeldin.com/click/476/0](http://baheyeldin.com/click/476/0).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Configuring AdSense
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AdSense module installation is about as simple as they come and you won't
    need to modify your database or anything else for that matter, apart from copying
    the downloaded files into your `modules` folder. Once that is done, you can enable
    the module in the **modules** section under the **administer** link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have saved the new module''s configuration, head over to **settings**
    and look for the new **adsense** link underneath the **settings** link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on this brings up the new **adsense** configuration page, which also
    presents a link to tons of information on how to configure everything at `admin/help/adsense`.
    You must read through the notes associated with each option as they provide useful
    information on what ad types are available, their dimensions, as well as how the
    module actually works to display the ads.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can go ahead and configure our ads now, but bear in mind that we will still
    need to manually add them to the site once this is done (discussed in the following
    section). The actual settings start off with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have obtained your client ID you can simply enter it here, and any
    traffic that goes through the ads on your site will generate revenue for the owner
    of the supplied ID (in other words, you). The next section allows you to decide
    which pages should be able to show ads, and which should not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, you can decide whether or not you want to list all the pages
    you can display ads on, or all the pages you can't display ads on. Depending on
    what suits your site, you will need to make a choice of one or the other and then
    add the appropriate pages in the text area below your choice.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of the demo site, we are happy to show the ads on all the pages,
    hence the text area is left blank, for two reasons. One, there is no section of
    the site where ads would be inappropriate, and two, ads are not shown to the administrator
    anyway, so we don't have to specify that we don't want to see them on the admin
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: '*But what are the various types of ads that we can show?* Well, the following
    table shows the various options you have available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ad Type | Dimensions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Ad Links 4-links 120x90 | 120x90 |'
  prefs: []
  type: TYPE_TB
- en: '| Vertical Banner | 120x240 |'
  prefs: []
  type: TYPE_TB
- en: '| Skyscraper | 120x600 |'
  prefs: []
  type: TYPE_TB
- en: '| Button | 125x125 |'
  prefs: []
  type: TYPE_TB
- en: '| Half Banner | 234x60 |'
  prefs: []
  type: TYPE_TB
- en: '| Ad Links 4-links 160x90 | 160x90 |'
  prefs: []
  type: TYPE_TB
- en: '| Wide Skyscraper | 160x600 |'
  prefs: []
  type: TYPE_TB
- en: '| Ad Links 4-links 180x90 | 180x90 |'
  prefs: []
  type: TYPE_TB
- en: '| Large Rectangle | 336x280 |'
  prefs: []
  type: TYPE_TB
- en: '| Banner Ad Links 4-links | 468x15 |'
  prefs: []
  type: TYPE_TB
- en: '| Banner | 468x60 |'
  prefs: []
  type: TYPE_TB
- en: '| Wide Banner Ad Links 4-links | 728x15 |'
  prefs: []
  type: TYPE_TB
- en: '| Leaderboard | 728x90 |'
  prefs: []
  type: TYPE_TB
- en: '*Why are there so many different types of ads?* you may ask. The reason is
    that often there will be limited space that is suitable for advertising on the
    web page. For example, you might find that there is some space down the left-hand
    column of your site, in which case you need a long thin ad. Of course, you might
    also want to show ads running along the bottom of the page, in which case you
    want a long, horizontal ad.'
  prefs: []
  type: TYPE_NORMAL
- en: It's equally likely that you need both types of ads at once, in which case it
    is important to make use of groups in order to distinguish one type of ad from
    another. Depending on where in a page an ad is placed, you might need to specify
    different colors or even a different type of ad entirely—all this can be handled
    by the use of groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a group setting (under the **Ad Type and Colors** section) is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The colors chosen here cause the ads shown to be blended into the site so that
    they look like a natural part of the page's make-up. Depending on where you are
    placing your ads, you will need to fiddle around with the color settings to get
    everything looking neat and tidy.
  prefs: []
  type: TYPE_NORMAL
- en: You can set up to three groups at any one time, so don't feel limited to working
    with just one. You may decide that you would like an image-only advertisement
    to be shown in one area, but text ads in another—in which, case you have to make
    use of different groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following option deals with **Custom Channels**, which you will need to
    read up in your *Google AdSense* account in order to get working. The website
    has this to say about them:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom channels allow you to track performance based on your specified criteria.
    By pasting channel-specific ad code into your pages, you can track a variety of
    metrics across a range of URLs. Use custom channels to track the performance of
    different ad formats, for example, or to compare different page topics to one
    another.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is left to you to study up on because it really is a Google-related issue
    and not a Drupal one. Once you have created a few channels, it is a simple matter
    of implementing them in the **Custom Channels** section of the **adsense** settings
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Revenue sharing options** is an exceptionally useful tool in that it allows
    you to allocate a percentage of the revenue generated from Google Ads to the author
    of the page that contained the ad. In other words, you can now use revenue from
    ads as a way to encourage blog writers to blog, story writers to write, and so
    on, because they now have a vested interest in making their content as popular
    as possible so that as much traffic as possible flows over their posts.'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, if you decide to make use of revenue sharing, then you need to
    go back to the Drupal website and download an appropriate version of the **User
    Referral** module, because this is required in order to get this feature of the
    AdSense module working correctly. You should find it easy enough to install the
    module; there is a MySQL script that must be run, but recall that we have done
    this before in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Once User Referral is installed and enabled, you will need to set the roles
    that are able to **use referrals** in the **access control** section under **administer**.
    You then have to create a new **profile** field on the **profiles** page under
    **settings** in the administration section so that users can enter their Google
    AdSense client ID into their **my account** section. In order to do this you will
    need to enable the **profile** module first (it is part of the core distribution,
    and so no download is required).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you should select a **single-line textfield**, and provide a
    few informative and sensible options as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now when users view their account information (or even upon registration, depending
    on whether this was enabled in the **profiles** section), they have a text area
    in which they can enter their Google AdSense ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With everything correctly set up, the following revenue-oriented settings were
    made for the demo site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, the author of the content will get 30% of the revenue generated
    from traffic at their content, but only blogs, pages, and stories qualify as potential
    revenue-sharing content—users who are working on polls and book pages, sadly,
    miss out. Remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any user who wishes to benefit from revenue sharing must have their own Google
    account and will need to supply their Google client ID in their profile before
    they can be credited for their share of the revenue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, **Advanced options** allows you to specify whether to disable ads,
    display a placeholder, limit the number of ads per page, or **Enable AdSense Section
    targeting** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s a good idea to always keep the placeholder enabled as this allows you
    to track where your ads are even when you are logged on as the administrator.
    It could be fairly time consuming to have to log in and log out every time you
    make a change to the whereabouts of your ads, but it is simple enough to know
    where they are by viewing the placeholder, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing and Configuring AdSense](img/1800_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The last item of interest, **Section targeting**, is a Google-related function
    as defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Section targeting allows you to suggest sections of your text and HTML content
    that you'd like us to emphasize or downplay when matching ads to your site's content.
    By providing us with your suggestions, you can assist us in improving your ad
    targeting. We recommend that only those familiar with HTML attempt to implement
    section targeting.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our case, we don't have to do anything because the module automatically targets
    Google Ads to the teaser and body of nodes for us. Simply enable it and away you
    go!
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done configuring the groups and so on, click **Save configuration**.
    It is then time to actually make use of these configuration options by physically
    inserting the ads onto the site's pages.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Google Ads to Your Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our case, we would like to display an ad that runs down the left-hand side
    of the page below any and all other blocks. The reason for this is that the right-hand
    sidebar has already become quite full, while the left-hand sidebar is sparsely
    populated, so there is space here. While this ad will be housed within a block,
    we will also show how to add an ad directly to the site.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin with the block first…
  prefs: []
  type: TYPE_NORMAL
- en: 'You have already seen how to create a new block; so if you would like to do
    things this way, head on over to the **blocks** link and click on the **add block**
    tab to bring up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Pages](img/1800_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we have given the block a new title, which unsurprisingly enough is **Advertisements**
    (the description as it will appear in the list of blocks is **Google Ads)**. Next,
    we entered some PHP code to display the Google ads within the block. If you are
    wondering how I came up with this code, it is all discussed in the notes provided
    on the **adsense** configuration page. The important thing to note here is the
    `adsense_display` function, because it controls how your ads look via the settings
    you make in the **adsense** configuration page (discussed in the previous section).
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous screenshot shows a fairly simple use of this function, but let''s
    take a quick look at it in more detail so that you understand how it works in
    the event you need something slightly more complex. From the documentation, we
    can see that `adsense_display` takes the following three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format:** This is a string of two numbers with an `x` in between. It can
    be any valid combination from the list provided. If this is not specified, then
    `160x600` is assumed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group:** This is the group that denotes the type (text or image) and color
    of the ad. This can be `1, 2`, or `3`. If this is not specified, then `1` is assumed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channel:** This is the custom channel for the ad, as configured in AdSense.
    This is an optional parameter, and if it is not specified, then `1` is assumed.
    If you did not configure any channels, then leave this parameter out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing this, you can see that in the previous screenshot, we have requested
    an ad of dimension `160x600` pixels, and that the ad should belong to group `1`.
    The final argument is optional, and since we are not concerned with custom channels
    (as this is a more advanced option, which we leave for you to consider in the
    event your advertising policy becomes more complex in the future), we left it
    out entirely.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final thing to make note of is that we set the **Input format** to **PHP
    code** in order to allow Drupal to implement the code we have entered for the
    block. Once this block has been successfully added to the system, we give it a
    high weight (so it displays after everything else) and enable it within the left-hand
    sidebar as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Pages](img/1800_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That is all there is to it! The results can be viewed simply by logging out
    and taking a look at the page. In our case, due to the settings we made in the
    configuration section and the dimensions we specified, we get the following block
    displayed in the left sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Pages](img/1800_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That looks pretty good! *But how do we go about adding the ad to the page directly?*
    Simple! Open up the `page.tpl.php` file and insert the `adsense_display` function
    in the place you want it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet creates a long, flat banner that has its properties configured
    in the second attributes group (you will need to ensure you have made the appropriate
    settings, or change the group). When viewed on the site, we get the following
    ad (in this case, Group 2 was configured to show image ads):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Pages](img/1800_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to remember that you don''t actually need the AdSense contribution
    to display Google Ads on your website. In fact, you might even run into problems
    if you are not using a PHPTemplate theme, or trying to insert PHP code into an
    area of your template, and that area cannot make use of it. There are a couple
    of things you can look at if you run into problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure you are not logged in as the administrator because only the ad placeholders
    display for this user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check your page's source code to see the result of the `adsense_display` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that you have set valid dimensions for your ad—see the table presented
    earlier in the section entitled *Installing and Configuring AdSense*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you are able to display the number of ads you require—it may be
    that you are limited in this respect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second point in this list is fairly important because viewing the page''s
    source can tell you a lot about what might have gone wrong. In order to do this,
    click on **View**, and then **Source** in IE, or click *Ctrl+U* in Firefox and
    you should see something like this (assuming all has gone according to plan):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If something has gone awry, then it is likely you will be able to spot the problem
    from comments that are added to the Google ad code or from what is actually presented
    in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with your ads on a development machine might not be the end of the
    world; by all means check the forums for answers. However, don't get too panicked
    until you have tried everything out on your live site and allowed sufficient time
    for Google to crawl your web pages. Until this is done, it is possible that Google
    is not displaying ads because it has no idea what your site is about.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Google Ads to Your Content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is also a method of inserting ads directly into your content. For example,
    if you wanted to show an ad within content, you would first need to enable the
    **Adsense filter**, by navigating to **input formats** under **administer** and
    modifying a current input format or creating a new one entirely. For example,
    the **Adsense filter** was enabled on the **Full HTML input format** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Content](img/1800_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when adding content that makes use of the **Full HTML** input format,
    it is possible to add an `adsense` tag, and the **Full HTML** option has an extra
    line of information outlining how to make use of it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Content](img/1800_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a page that incorporates Google ads is then a trivial task. Simply insert
    the correct format, group, and channel into your `adsense` tag and add it wherever
    you like in your post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Content](img/1800_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `adsense` tag has a special format as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`format` is one of the supported ad formats (for example, `468x60)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group` is the Numeric ad group this ad belongs to; determines colors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`channel` is the numeric ad channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Viewing this page once you have logged off gives the following result (depending
    on the settings you made for the relevant group referenced from the tag):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Ads to Your Content](img/1800_09_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a special format to be used with `flexiblocks` in the format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We don't discuss the use of **Flexiblock** here, and so we won't go into this
    now, but as an exercise you might find it worthwhile downloading and installing
    the Flexiblock contribution, and trying this out.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Site Modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the nice things about working with PHP-based applications like Drupal
    is that not only are they open source, but you can also combine them with pretty
    much any other technology you can get your hands on. There is a huge online programming
    community, and many people make their neat little scripts openly available for
    the likes of you and me to simply include into our own sites as we please. Not
    all are free, but many are, and many more are very cheap; so it is always worthwhile
    looking around at some of the scripting sites to see what you can pick up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here a few sites that you should consider looking over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.phpbuilder.com](http://www.phpbuilder.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.hotscripts.com](http://www.hotscripts.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.php.resourceindex.com](http://www.php.resourceindex.com%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://drupal.org/node/257—Customization`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at what is available and what can easily
    be incorporated into a Drupal website. Many of you may be shying away at this
    point because you are not keen to get involved with hardcore PHP programming.
    Don''t worry! The scripts are, by and large, autonomous and complete so that all
    that is required of us is a few cut and pastes in the right place, perhaps the
    odd tweak here and there, and away we go. Remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding powerful and advanced features, like those seen on big sites, *is not
    that hard!*
  prefs: []
  type: TYPE_NORMAL
- en: It is important to be aware that you should always look at any and all licensing
    issues whenever you make use of other people's scripts. You will find that many
    are made available for free for non-commercial uses but you are required to purchase
    a license if you are using it for commercial purposes. As you get more confident
    with working with scripts, however, you should find that it is possible to build
    fairly powerful features by using your own code or tying together snippets of
    freely available code.
  prefs: []
  type: TYPE_NORMAL
- en: Since the modifications to come are based on JavaScript and AJAX, it is fair
    to warn you that Drupal 4.7 comes with built in support for AJAX via the `drupal.js`
    file. AJAX is a term used to describe JavaScript-based applications that are used
    to create responsive and dynamic web page elements. The goal of this chapter,
    however, is to show you how to incorporate really nice features *without having
    to learn any coding*. As a result, we won't discuss how to make use of the JavaScript
    functionality provided in `drupal.js` because this is really a task for developers,
    not site administrators.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in creating your own AJAX widgets, take a look at the
    online tutorials provided on the Drupal site at `http://drupal.org/node/42403`.
    These will give you a good idea of where and how to start off in the event that
    you need to build a few widgets of your own. Any JavaScript-related development
    you undertake yourself should be done with Drupal's native JavaScript support.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What we cover in the rest of this chapter is a bit like cheating—we are getting
    the advantage of some nice JavaScript effects without being subject to the burden
    of having to learn how to code them.
  prefs: []
  type: TYPE_NORMAL
- en: Many new or upgraded modules will (and do) make use of AJAX already. You might
    want to download and install a few of these to see what type of effects can be
    achieved using Drupal's native JavaScript support. Of course, the administration
    interface for Drupal 4.7 has already been AJAXified with the introduction of the
    collapsible page areas and so on (for example, on the **settings** page).
  prefs: []
  type: TYPE_NORMAL
- en: At any rate, let's take a look at the first new feature we are going to add.
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling News Ticker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a nice feature of many sites that attempt to provide up-to-date information
    for their users. If you need to present several bits of information at once, then
    a dynamic news ticker could be just the thing. With a bit of work you can even
    integrate the news ticker with an RSS feed to present breaking news from other
    sites without having to do any work in creating content yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll keep it simple and create a scrolling news ticker across the top of
    each page on the site. The ticker will show information stored in a `.txt` file
    on the site. While you can''t tell that this information is scrolling across the
    screen from the screenshot, this is what the addition will ultimately look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scrolling News Ticker](img/1800_09_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can hopefully tell from the various fonts displayed in the ticker above
    that it is possible to add HTML elements such as links to the individual items
    (shown in a bold font). This means you can use this ticker to add links to sponsors,
    or even add image links. There is quite a lot of scope for change; so we will
    look at how to get everything up and running—what you create with the ticker is
    then up to you and your imagination.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the Ticker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first task is of course to actually find a workable ticker script. In this
    case, a free ticker script was downloaded (after a brief search on Google) from
    **mioplanet** at [http://www.mioplanet.com/ rsc/newsticker_javascript.htm](http://www.mioplanet.com/
    rsc/newsticker_javascript.htm) . The conditions of use presented on this page
    are fairly simple and you should make sure you understand the terms before you
    continue. Assuming you are happy to continue, download the JavaScript source-code
    file, entitled `webticker_lib.js`, and save it to the theme folder you are currently
    developing in—in the case of the demo site this is currently `box_grey_dev`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are going to use a few widgets like this, it may be better to create
    a `widgets` folder within your theme in order to keep everything neat and tidy
    and easy to locate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up the `page.tpl.php` file and search for a suitable place to add
    the ticker. The actual code required to add the ticker to your web page is given
    on the mioplanet page, and you can simply copy and paste this directly into your
    site. Since I wanted the ticker to appear along the top of the screen, I added
    the code in here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this places the script after the header information within the
    same`<div>` tag, but above the table that houses the main content and left and
    right sidebars.
  prefs: []
  type: TYPE_NORMAL
- en: The most important part of this script is the reference to the `webticker_lib.js`
    file. In this instance I have added the relative path to the file (webticker_lib.js)
    so that this will not have to change once the site is deployed to the host server.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you find that your scrolling ticker is just not scrolling, try referencing
    it with the relative file path, for example: `/drupal/themes/box_grey_dev/webticker_lib.js`.
    In the unlikely event this doesn''t work, try using the fully qualified path:
    `C:\\apache2triad\\htdocs\\drupal\\themes\\box_grey_dev\\webticker_lib.js`. If
    this works, remember to write a note somewhere that reminds you to change this
    path appropriately once you have deployed your site to the live host. It is generally
    *bad practice* to include absolute file paths like this in your scripts for precisely
    this reason.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the event you have to enter a path and not just the filename, it is a good
    idea to escape backslashes with another backslash (\\) on Windows machines to
    prevent any confusion with special characters being misinterpreted—alternatively,
    use forward slashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, notice that I have added a short PHP snippet to include a file called
    `ticker.txt` underneath the first added`<div>` tag. If you would rather test whether
    the ticker is working correctly before dealing with additional code, then replace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'and view your site in your browser. You should see the message scrolling across
    your page, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Obtaining the Ticker](img/1800_09_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If that works, replace the text message with the PHP `include` statement, and
    let's move on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For our humble purposes, all we really need to do is feed the JavaScript file
    we have just installed on our site a list of lines to print out to the screen.
    Assuming that we are going to use a simple text file to hold our data, we need
    each individual item to appear in its complete form on one line. This is a bit
    of a limitation if you want to make complex scrolling items, but for the purposes
    of our demonstration, it is more than adequate. You can add in pretty much anything
    you want here; however, ensure that you test everything thoroughly before releasing
    it to the public.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create a `ticker.txt` file and add it to the same folder as the
    `webticker_lib.js` JavaScript file. Before you start adding lines of information
    to it, bear in mind that you should try to create a standard format for each news
    item, so that your work in creating new elements is minimized. In this case, each
    line is delimited by a single vertical bar, except the start and end of the first
    and last element, which have two in order to keep everything even.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows the current contents of the `ticker.txt` file on
    the demo site. These are the items that were used for the scrolling text in the
    first screenshot in the *Scrolling News Ticker* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, due to the limitations in page size of this book, what should
    appear as *single* lines have to be presented on *several*. You should, however,
    get the picture in that you can add some sort of delimiter to the start and end
    of the item, and within these you can add whatever HTML you like. You might even
    want to try experiment with adding images or even a special style to the style
    sheet and referencing it from here. In this way you could add a highlighted title
    icon or logo to each item, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice a bit further on in this chapter that the news ticker gets
    a nice, new background color. How you achieve this look is left as an exercise
    for you. (Hint: *follow the same method as the theme and declare a new* `<div>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main problem with this script as it stands is that it requires you to manually
    enter each item, which will no doubt become a pain if you have to do it several
    times a day for the next ten years. There are several ways around this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a script to pull information from a database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull information from an RSS feed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only enter content that changes infrequently—such as links to sponsors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get someone else to do it for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While we won't continue on this topic here; it would be great experience for
    you to attempt any one or more of the previous list of options with the exception
    of the third, which is covered by default. Remember that you can use other scripts
    to help you out—whatever you can find out there on the Net is fair game to incorporate
    into your scripts. At any rate, let's get on with the next thing.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Content Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assume that as the head honcho of your new site you want to add a page outlining
    all the latest and greatest posts, happenings, and goings on in your life and
    in your community. In the case of the demo site, we are going to add a **quick
    pick** page link to the main menu where people can quickly visit for a selection
    of the latest and most important happenings on the website—updated once a week,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there are plenty of modules that allow you to show a block of related posts
    and so forth, but this isn't quite what we want. Ideally, we want to present a
    list of selected items that allows users to select whatever topic is of interest.
    At the same time we don't want them to have to jump from node to node in order
    to view the content of each page.
  prefs: []
  type: TYPE_NORMAL
- en: What we need is some way of only reloading the new articles without actually
    changing the page we are on. Once again, this can be easily accomplished with
    the use of scripts that have already been developed. In this particular case,
    we are going to use a freely available **Dynamic Ajax Content** script, which
    is provided by the folks at DynamicDrive DHTML Scripts at [http://www.dynamicdrive.com](http://www.dynamicdrive.com)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating the Application into the Theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this instance we are going to take the JavaScript file provided by DynamicDrive
    and paste it directly into the `page.tpl.php` file in between the`<head>` tags.
    You can get hold of the particular script at the following address: `http://www.dynamicdrive.com/dynamicindex17/ajaxcontent.htm`.
    Now, it is not really important that you understand what is going on in the script;
    however, we will break up the code listing and take a quick look over what it
    is doing for clarity''s sake.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have copied the script, paste it into the PHP file, like so (I have
    chopped a bit of the actual code file out to save space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: From this code you should be able to gather that once the script has been declared,
    we use a function, `ajaxpage`, to create a new page that can be loaded into a
    specific container on our parent web page. This checks to see which browser is
    being used, and attempts to ensure that the correct `page_request` object is created
    for the calling browser in order to implement some cross-browser compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Then, a new page is loaded using the `loadpage` function, which performs a few
    checks on the newly created `page_request` object before populating the document
    container (with the ID, `containerid)` with the page information. The `containerid`
    is specified in the page code to come, but is obviously very important in that
    it *determines where the new information will be loaded onto the parent page.*
  prefs: []
  type: TYPE_NORMAL
- en: Just to reiterate, it is not necessary for you to understand how these scripts
    work. They are a bit like the engine of a car—you can drive it without knowing
    exactly how it works. Having said this, JavaScript is a most valuable tool, and
    with the advent of AJAX to create responsive web pages, time spent studying these
    scripts would not be wasted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, if you ever want to create your own widgets, learn how to make use
    of Drupal's built-in JavaScript support.
  prefs: []
  type: TYPE_NORMAL
- en: With those functions added to your page, the hard work is done! We now need
    to turn our attention to how we can make use of them when posting to the **quick
    pick** page.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Content Page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building a new dynamic page requires us to remember only a couple of important
    points. First, we need to actually attach the pages we are going to add to the
    post; otherwise we will not be able to add them to the page. The next is to actually
    tag a section of the page with the `containerid` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actually, we shouldn''t start building the page until we have some content
    to go with it. So, for the purposes of this demo we will add a few pages of interesting
    content. The first page is a bit of news:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This page is prefixed with the date and the type of article—in this case it
    was saved as `09_02_news.txt` on the file system. The reason for this is that
    when the file attachment is uploaded and attached to the post, you will still
    need to be able to clearly see which material is the most outdated when the time
    comes to remove it. The next file is just a bit of plain old content, which we
    won't bother to list here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s head on over to the **create content** page and add a new page
    entitled **quick pick**. The first thing that we must do is attach the two content
    files to this post. Once that is done, ensure that you unselect the **List** options
    for both. Leaving these files listed would defeat the purpose of the page entirely.
    Next, the most important thing to do is take note of the names of the files that
    have been saved by Drupal. You can check these in the **File attachments** section
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Content Page](img/1800_09_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the previous screenshot you can see that the two files have been saved
    as `09_02_news.txt` and `09_02_notnews.txt` in the `files` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the body of the page, we need to create a few links that will call on the
    `ajaxpage` script function we added to the `page.tpl.php` file earlier. The following
    HTML was added to the body text area of the **quick pick** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added two links, one entitled `Latest News` and the
    other entitled `Plain Old Content`. Within the links, the `ajaxpage` function
    is referenced and it is passed the names of the attached files as well as the
    `id` of the page element where the content of each page is to be displayed. A
    little further down you can see that we have declared a table cell with the `id`
    attribute set to `contentarea`, so this is where the dynamic content is going
    to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we post this content, it is important to ensure that it is published
    properly. Make sure you set the **input format** to **Full HTML** otherwise there
    is a good chance that this will not display properly. Since this is going to be
    a main menu item, you also need to set the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Content Page](img/1800_09_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While you are at it, you should probably also consider disabling comments for
    this page unless you particularly want your main menu pages to be up for discussion.
    Posting this page to the site now gives the following initial page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Content Page](img/1800_09_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the magic comes when the user actually clicks on one of the links. Instead
    of moving to a new node, we stay on precisely the same page, except that the content
    file you attached to this post is now displayed as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Content Page](img/1800_09_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the lighter color of the top link you can *hopefully* see it has been followed,
    and as promised, the **Latest News** article is now displayed in all its glory.
  prefs: []
  type: TYPE_NORMAL
- en: I'm sure you can come up with more novel uses for this type of page—remember
    to keep the attached files' sizes small so that users don't click on a link and
    then lose interest waiting for it to be displayed. If you want a bit of a challenge,
    write a PHP script that converts the`<body>` section of other posts into a file
    so that you can add interesting posts or articles without having to manually create
    the attached content files.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you will agree that we have created some very nice functionality
    for very little effort. That's all we have time for, but now that you know how
    it's done, I leave it in your capable hands to come up with novel ways of accomplishing
    whatever important tasks you might have.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on two quite different aspects of your website.
  prefs: []
  type: TYPE_NORMAL
- en: The first dealt with functionality and explored a couple of the more advanced
    modules available for us. Hopefully, you will find that you now know enough about
    the use of modules to feel confident in using any one you choose. Ultimately,
    you might end up creating and sharing your own modules for use by other members
    of the community, but for now, being able to generate a bit of cash on the side
    using AdSense as well as create your own custom content types should give you
    plenty to work with.
  prefs: []
  type: TYPE_NORMAL
- en: The second section of this chapter discussed how to use the resources available
    on the Internet in order to find complete solutions, or even partial code pieces
    that can be modified and/or incorporated into your site in order to give some
    great functionality. This has hopefully highlighted the fact that even if you
    aren't a programming expert, with a bit of searching and some basic knowledge
    of a few important web-based technologies, you can create some powerful features
    for your site.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, you website should now be pretty much complete, or, if there is
    something you want to add that was not discussed directly here, you should find
    that you have enough general experience to go ahead and make whatever changes
    you want. Gaining the confidence to create an advanced website is simply about
    taking the time to learn your way around things, and this book has given you the
    platform from which to start.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter looks at administrative tasks associated with your new
    website, and doesn't relate to the development of your site as directly as these
    first nine have. Because of this, I would like to take the time to congratulate
    you on finishing your website now, as well as assure you that all the hard development
    work is done.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to get your site up and running as soon as possible, feel
    free to skip the next chapter and go directly to the Appendix, which outlines
    how to properly deploy your new site to its home on the Web. You can always come
    back to [Chapter 10](ch10.html "Chapter 10. Running Your Website") and learn how
    to maintain and administer your site once it is up and running.
  prefs: []
  type: TYPE_NORMAL
