["```php\n// rxphp_basics_01.php \nuse Rx\\Observable; \n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n\nObservable::fromArray($fruits) // Observable \n    ->map(function($value) { // operator \n        return strlen($value); \n    }) \n    ->filter(function($len) { // operator \n        return $len > 5; \n    }) \n    ->subscribe($observer); // observer \n\n```", "```php\nuse Rx\\Observer\\Callback\\Observer; \n\n$observer = new CallbackObserver( \n    function($value) { \n        echo \"Next: $value\\n\"; \n    }, \n    function(Exception $err) { \n        $msg = $err->getMessage(); \n        echo \"Error: $msg\\n\"; \n    }, \n    function() { \n        echo \"Complete\\n\"; \n    } \n); \n\n```", "```php\n$ php rxphp_basics_01.php\nNext: 6\nNext: 6\nNext: 9\nComplete\n\n```", "```php\n// rxphp_basics_02.php \n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \nObservable::fromArray($fruits) \n    ->map(function($value) { \n        if ($value[0] == 'o') { \n            throw new Exception(\"It's broken.\"); \n        } \n        return strlen($value); \n    }) \n    ->filter(function($len) { \n        return $len > 5; \n    }) \n    ->subscribe($observer); \n\n```", "```php\n$ php rxphp_basics_02.php\nNext: 6\nError: It's broken.\n\n```", "```php\n// rxphp_basics_03.php \n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n$vegetables = ['potato', 'carrot']; \n\nObservable::fromArray($fruits) \n    ->map(function($value) { \n        return strlen($value); \n    }) \n    ->filter(function($len) { \n        return $len > 5; \n    }) \n    ->merge(Observable::fromArray($vegetables)) \n    ->subscribe($observer); \n\n```", "```php\n$ php rxphp_basics_03.php\nNext: 6\nNext: 6\nNext: 9\nNext: potato\nNext: carrot\nComplete\n\n```", "```php\n            $fruits = ['apple', 'banana', 'orange', 'raspberry']; \n            new IteratorObservable(new ArrayIterator($fruits)); \n\n    ```", "```php\n            $iterator = function() use ($fruits) { \n                foreach ($fruits as $fruit) { \n                    yield $fruit; \n                } \n            }; \n            new IteratorObservable($iterator()) \n                ->subscribe(new DebugSubject()); \n\n    ```", "```php\n$observer = new Rx\\Observer\\CallbackObserver(function($value) { \n    printf(\"%s\\n\", $value); \n}, function() { \n    print(\"onError\\n\"); \n}, function() { \n    print(\"onCompleted\\n\"); \n}); \n\n```", "```php\n// rxphp_03.php \n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n\nclass PrintObserver extends Rx\\Observer\\AbstractObserver { \n    protected function completed() { \n        print(\"Completed\\n\"); \n    } \n    protected function next($item) { \n        printf(\"Next: %s\\n\", $item); \n    } \n    protected function error(Exception $err) { \n        $msg = $err->getMessage(); \n        printf(\"Error: %s\\n\", $msg); \n    } \n} \n\n$source = Rx\\Observable::fromArray($fruits); \n$source->subscribe(new PrintObserver()); \n\n```", "```php\n$source->subscribe(function($item) { \n    printf(\"Next: %sn\", $item); \n}); \n\n```", "```php\n// single_01.php/ \nrequire __DIR__ . '/PrintObserver.php'; \n\nRxObservable::just(42) \n    ->subscribe(new PrintObserver()); \n\n```", "```php\n$ php single_01.php\nNext: 42\nCompleted\n\n```", "```php\n// subject_01.php \nuse Rx\\Subject\\Subject; \n\n$subject = new Subject(); \n$subject \n    ->map(function($value) { \n        return strlen($value); \n    }) \n    ->filter(function($len) { \n        return $len > 5; \n    }) \n    ->subscribe(new PrintObserver()); \n\n$subject->onNext('apple'); \n$subject->onNext('banana'); \n$subject->onNext('orange'); \n$subject->onNext('raspberry'); \n\n```", "```php\n$ php subject_01.php\nNext: 6\nNext: 6\nNext: 9\n\n```", "```php\n// subject_02.php \nuse Rx\\Subject\\Subject; \nuse Rx\\Observable; \n\n$subject = new Subject(); \n$subject->subscribe(new PrintObserver()); \n\n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \nObservable::fromArray($fruits) \n    ->map(function($value) { \n        return strlen($value); \n    }) \n    ->filter(function($len) { \n        return $len > 5; \n    }) \n    ->subscribe($subject); \n\n```", "```php\n// subject_03.php  \nuse Rx\\Subject\\Subject; \nuse Rx\\Observable; \n\n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n\n$subject = new Subject(); \n$subject \n    ->filter(function($len) { \n        return $len > 5; \n    }) \n    ->subscribe(new PrintObserver()); \n\nObservable::fromArray($fruits) \n    ->map(function($value) { \n        return strlen($value); \n    }) \n    ->subscribe($subject); \n\n```", "```php\n        function($x) { \n            return $x > 10; \n        } \n\n```", "```php\n            Rx\\Observable::range(1, 4) \n                ->bufferWithCount(3) \n                ->subscribe(new DebugSubject()); \n\n    ```", "```php\n            13:58:13 [] onNext: [1, 2, 3] (array)\n            13:58:13 [] onNext: [4] (array)\n            13:58:13 onCompleted\n\n    ```", "```php\nclass DebugSubject extends Rx\\Subject\\Subject { \n  public function __construct($identifier=null, $maxLen=64){ \n    $this->identifier = $identifier; \n    $this->maxLen = $maxLen; \n  } \n  public function onCompleted() { \n    printf(\"%s%s onCompleted\\n\", $this->getTime(), $this->id());\n    parent::onCompleted(); \n  }  \n  public function onNext($val) { \n    $type = is_object($val) ? get_class($val) : gettype($val); \n\n    if (is_object($val) && method_exists($val, '__toString')) { \n      $str = (string)$val; \n    } elseif (is_object($val)) { \n      $str = get_class($val); \n    } elseif (is_array($val)) { \n      $str = json_encode($val); \n    } else { \n      $str = $val; \n    } \n\n    if (is_string($str) && strlen($str) > $this->maxLen) { \n      $str = substr($str, 0, $this->maxLen) . '...'; \n    } \n    printf(\"%s%s onNext: %s (%s)\\n\", \n        $this->getTime(), $this->id(), $str, $type); \n    parent::onNext($value); \n  } \n  public function onError(Exception $error) { \n    $msg = $error->getMessage(); \n    printf(\"%s%s onError (%s): %s\\n\", $this->getTime(),$this-> \n        $this->id(), get_class($error), $msg); \n    parent::onError($error); \n  } \n  private function getTime() { \n    return date('H:i:s'); \n  } \n  private function id() { \n    return ' [' . $this->identifier . ']'; \n  } \n} \n\n```", "```php\n// rxphp_04.php \n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n$observer = Rx\\Observable::fromArray($fruits) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php rxphp_04.php\n17:15:21 [] onNext: apple (string)\n17:15:21 [] onNext: banana (string)\n17:15:21 [] onNext: orange (string)\n17:15:21 [] onNext: raspberry (string)\n17:15:21 [] onCompleted\n\n```", "```php\n// rxphp_05.php \n$subject = new DebugSubject(1); \n$subject \n    ->map(function($item) { \n        return strlen($item); \n    }) \n    ->subscribe(new DebugSubject(2)); \n\n$observable = Rx\\Observable::fromArray($fruits); \n$observable->subscribe($subject); \n\n```", "```php\n17:33:36 [1] onNext: apple (string)\n17:33:36 [2] onNext: 5 (integer)\n17:33:36 [1] onNext: banana (string)\n17:33:36 [2] onNext: 6 (integer)\n17:33:36 [1] onNext: orange (string)\n17:33:36 [2] onNext: 6 (integer)\n17:33:36 [1] onNext: raspberry (string)\n17:33:36 [2] onNext: 9 (integer)\n17:33:36 [1] onCompleted\n17:33:36 [2] onCompleted\n\n```", "```php\n// rxphp_06.php  \nRx\\Observable::just('{\"value\":42}') \n    ->map(function($value) { \n        return json_decode($value, true); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php rxphp_06.php\n16:39:50 [] onNext: {\"value\": 42} (array)\n16:39:50 [] onCompleted\n\n```", "```php\nRx\\Observable::just('NA') \n    ->map(function($value) { \n        return json_decode($value, true); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n15:51:06 [] onNext:  (NULL)\n\n```", "```php\n// __invoke.php \nclass InvokeExampleClass { \n    public function __invoke($x) { \n        echo strlen($x); \n    } \n} \n$obj = new InvokeExampleClass(); \n$obj('apple'); \nvar_dump(is_callable($obj)); \n\n```", "```php\n$ php __invoke.php\nint(5)\nbool(true)\n\n```", "```php\n// JSONDecodeOperator.php \nuse Rx\\ObservableInterface as ObservableI; \nuse Rx\\ObserverInterface as ObserverI; \nuse Rx\\SchedulerInterface as SchedulerI; \nuse Rx\\Operator\\OperatorInterface as OperatorI; \n\nclass JSONDecodeOperator implements OperatorI { \n    public function __invoke(ObservableI $observable, \n            ObserverI $observer, SchedulerI $scheduler = null) { \n        // ... \n    } \n} \n\n```", "```php\nclass JSONDecodeOperator implements OperatorI { \n  public function __invoke(ObservableI $observable, \n      ObserverI $observer, SchedulerI $scheduler = null) { \n\n    $obs = new CallbackObserver( \n      function ($value) use ($observer) { \n        $decoded = json_decode($value, true); \n        if (json_last_error() == JSON_ERROR_NONE) { \n          $observer->onNext($decoded); \n        } else { \n          $msg = json_last_error_msg(); \n          $e = new InvalidArgumentException($msg); \n          $observer->onError($e); \n        } \n      }, \n      function ($error) use ($observer) { \n        $observer->onError($error); \n      }, \n      function () use ($observer) { \n        $observer->onCompleted(); \n      } \n    ); \n\n    return $observable->subscribe($obs, $scheduler); \n  } \n} \n\n```", "```php\n// rxphp_07.php \nRx\\Observable::just('{\"value\":42}') \n    ->lift(function() { \n        return new JSONDecodeOperator(); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php rxphp_07.php\n17:58:49 [] onNext: {\"value\": 42} (array)\n17:58:49 [] onCompleted\n\n```", "```php\n17:59:25 onError (InvalidArgumentException): Syntax error\n\n```", "```php\n$callbackObserver = new CallbackObserver( \n    function ($value) use ($observer) { \n        // ... \n    }, \n    [$observer, 'onError'], \n    [$observer, 'onCompleted'] \n); \n\n```", "```php\n// JSONDecodeOperator.php \nnamespace Rx\\Operator; \n\nuse Rx\\ObservableInterface as ObservableI; \nuse Rx\\ObserverInterface as ObserverI; \nuse Rx\\Operator\\OperatorInterface as OperatorI; \nuse Rx\\DisposableInterface as DisposableI; \n\nclass JSONDecodeOperator implements OperatorI { \n  public function __invoke(ObservableI $observable, \n      ObserverI $observer): DisposableI { \n\n   return $observable->subscribe( \n     function ($value) use ($observer) { \n       $decoded = json_decode($value, true); \n       if (json_last_error() == JSON_ERROR_NONE) { \n         $observer->onNext($decoded); \n       } else { \n         $msg = json_last_error_msg(); \n         $e = new InvalidArgumentException($msg); \n         $observer->onError($e); \n       } \n     }, \n     [$observer, 'onError'], \n     [$observer, 'onCompleted'] \n   ); \n  } \n} \n\n```", "```php\nObservable::just('{\"value\":42}') \n    ->JSONDecode() \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n// JSONDecodeOperator.php \nnamespace MyApp\\Rx\\Operator; \n... \nclass JSONDecodeOperator implements OperatorI { ... } \n\n```", "```php\nObservable::just('{\"value\":42}') \n    ->_MyApp_JSONDecode() \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n// curl_01.php \n$ch = curl_init(); \ncurl_setopt($ch, CURLOPT_URL, \"http://google.com\"); \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \ncurl_setopt($ch, CURLOPT_PROGRESSFUNCTION, 'progress'); \ncurl_setopt($ch, CURLOPT_NOPROGRESS, false); \ncurl_setopt($ch, CURLOPT_HEADER, 0); \n$html = curl_exec($ch); \ncurl_close($ch); \n\nfunction progress($res, $downtotal, $down, $uptotal, $up) { \n    if ($download_size > 0) { \n        printf(\"%.2f\\n\", $down / $downtotal * 100); \n    } \n    ob_flush(); \n    usleep(100 * 1000); \n} \n\n```", "```php\nuse Rx\\Observable; \nuse Rx\\ObserverInterface as ObserverI; \n\nclass CURLObservable extends Observable { \n    public function __construct($url) {} \n    public function subscribe(ObserverI $obsr, $sched = null) {} \n    private function startDownload() {} \n    private function progress($r, $downtot, $down, $uptot, $up) {} \n} \n\n```", "```php\npublic function __construct($url) { \n    $this->url = $url; \n} \n\nprivate function startDownload() { \n    $ch = curl_init(); \n    curl_setopt($ch, CURLOPT_URL, $this->url); \n    curl_setopt($ch, CURLOPT_PROGRESSFUNCTION,[$this,'progress']); \n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); \n    curl_setopt($ch, CURLOPT_NOPROGRESS, false); \n    curl_setopt($ch, CURLOPT_HEADER, 0); \n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 ...'); \n    // Disable gzip compression \n    curl_setopt($ch, CURLOPT_ENCODING, 'gzip;q=0,deflate,sdch'); \n    $response = curl_exec($ch); \n    curl_close($ch); \n\n    return $response; \n} \n\n```", "```php\nprivate function progress($res, $downtotal, $down, $uptotal, $up){ \n    if ($downtotal > 0) { \n        $percentage = sprintf(\"%.2f\", $down / $downtotal * 100); \n        foreach ($this->observers as $observer) { \n            /** @var ObserverI $observer */ \n            $observer->onNext(floatval($percentage)); \n        } \n    } \n} \n\n```", "```php\npublic function subscribe(ObserverI $obsr, $sched = null) { \n    $disp1 = parent::subscribe($obsr, $sched); \n\n    if (null === $sched) { \n        $sched = new ImmediateScheduler(); \n    } \n\n    $disp2 = $sched->schedule(function() use ($obsr, $started) { \n        $response = $this->startDownload(); \n        if ($response) { \n            $obsr->onNext($response); \n            $obsr->onCompleted(); \n        } else { \n            $msg = 'Unable to download ' . $this->url); \n            $obsr->onError(new Exception($msg)); \n        } \n    }); \n\n    return new CompositeDisposable([$disp1, $disp2]); \n} \n\n```", "```php\n$url = 'https://api.stack...&tagged=functional-programming'; \n$observable = new CurlObservable($url); \n$observable->subscribe(new DebugSubject()); \n\n```", "```php\n16:17:52 onNext: 21.39 (double)\n16:17:52 onNext: 49.19 (double)\n16:17:52 onNext: 49.19 (double)\n16:17:52 onNext: 76.99 (double)\n16:17:52 onNext: 100 (double)\n16:17:52 onNext: {\"items\":[{\"tags\":[\"javascript\",\"... (string)\n16:17:52 onCompleted\n\n```", "```php\n// rxphp_curl.php \n$observable \n    ->filter(function($value) { \n        return is_string($value); \n    }) \n    ->lift(function() { \n        return new JSONDecodeOperator(); \n    }) \n    ->subscribe(new DebugSubject(null, 128)); \n\n```", "```php\n$ php rxphp_curl.php \n16:23:55 [] onNext: { \n    \"items\": [ \n        { \n            \"tags\": [ \n                \"javascript\", \n                \"functional-programming\", \n       ... (array) \n16:23:55 [] onCompleted \n\n```", "```php\n// sleep.php \n$name = $argv[1]; \n$time = intval($argv[2]); \n$elapsed = 0; \n\nwhile ($elapsed < $time) { \n    sleep(1); \n    $elapsed++; \n    printf(\"$name: $elapsed\\n\"); \n} \n\n```", "```php\n$ sleep.php proc1 3\nproc1: 1\nproc1: 2\nproc1: 3\n\n```", "```php\n// proc_01.php \n$proc = proc_open('php sleep.php proc1 3', [ \n    0 => ['pipe', 'r'], // stdin \n    1 => ['pipe', 'w'], // stdout \n    2 => ['file', '/dev/null', 'a'] // stderr \n], $pipes); \n\nstream_set_blocking($pipes[1], 0); \n\nwhile (proc_get_status($proc)['running']) { \n    usleep(100 * 1000); \n    $str = fread($pipes[1], 1024); \n    if ($str) { \n        printf($str); \n    } else { \n        printf(\"tickn\"); \n    } \n} \nfclose($pipes[1]); \nproc_close($proc); \n\n```", "```php\n// rxphp_eventloop.php \n$loop = new ReactEventLoopStreamSelectLoop(); \n$scheduler = new RxSchedulerEventLoopScheduler($loop); \n\nRxObservable::interval(1000, $scheduler) \n    ->take(3) \n    ->subscribe(new DebugSubject()); \n\n$loop->run(); \n\n```", "```php\n$ php rxphp_eventloop.php\n23:12:44 [] onNext: 0 (integer)\n23:12:45 [] onNext: 1 (integer)\n23:12:46 [] onNext: 2 (integer)\n23:12:46 [] onCompleted\n\n```"]