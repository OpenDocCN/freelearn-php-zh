["```php\n    $this->load->model('mymodel');\n    ```", "```php\n// Loading the model mymodel in the controller's method\n$this->load->model('mymodel');\n// Calling the model's method my_function \n$this->mymodel->my_function();\n```", "```php\n// Loading the model class\n$this->load->model('usermodel');\n// Calling the model to retrieve the users from the database\n$view_params['users'] = $this->usermodel->get_users();\n```", "```php\n$config['hostname'] = '127.0.0.1';\n$config['username'] = 'db_username';\n$config['password'] = 'db_password';\n$config['database'] = 'db_database';\n$config['port'] = 'db_port';\n$config['dbdriver'] = 'mysql';\n$config['dbprefix'] = '';\n$config['pconnect'] = TRUE;\n$config['db_debug'] = TRUE;\n$config['cache_on'] = FALSE;\n$config['cachedir'] = '';\n$config['char_set'] = 'utf8';\n$config['dbcollat'] = 'utf8_general_ci';\n$config['swap_pre'] = '';\n$config['autoinit'] = TRUE;\n$config['stricton'] = FALSE;\n// Loading the database with the configuration manually\nthis->load->database($config);\n```", "```php\n<?PHP\n// We shall define the database table named users// with ID as auto-increment, username, password, and e-mail as // the other fields.\n// ORM will create an user objet based on the users // table scheme. We can set the variable to this object, and use // the operational services provided by ORM for actions, such // as save, delete, update, and add.\n$u = new User();\n$u->username = 'A new User';\n$u->password = 'shhnew1';\n$u->email = 'user@mail.com';\n// To add a new user record\nif ($u->save()) {\n  // if saved we have a new echo 'New User Id Opened having'$u->id. 'User Id <br/>';\n  }\nelse {// Show why we failed to save echo\n  $u->error->string;\n  }\n// Getting the first three users from the database\n$u = new User();\n$u->limit(3)->get();\n// Showing the fetched users\nforeach ($u as $user_rec)\n{\n  echo 'User Id: '. $user_rec->id . '<br/>';\n  echo 'User Name: '. $user_rec->username . '<br />';\n  echo 'User Email: '. $user_rec->email. '<br/>';\n  }\n// Get the user with Uid = 10 if any\n$u = new user();\n$seek_uid = 10;\n\n$u->where('id', $seek_uid)->get();\n// Check if found\nif (exist ($u)){\n  echo 'User Id:'.$u->id.' Name is'.$u->username. '<br />';\n  }\nelse echo 'No user found for user ID'. $seek_uid. '<br />';\n```", "```php\n    $this->load->model('productmodel');\n    ```", "```php\n<?php\nif (!defined('BASEPATH')) exit('No direct script access allowed');\nclass Product extends CI_Controller {\n// Accessory method for generating forms called by the methods add // and edit.\nprivate function load_form($form_action, $a_values = array())\n{\n  // Loading the form helper\n  $this->load->helper('form');\n  // Loading the form_validation library\n  $this->load->library('form_validation');\n  $view_params['form']['attributes'] = array('id' => 'productform');\n  $view_params['form']['action'] = $form_action;\n  $product_id = isset($a_values['product_id']) ?\n  $a_values['product_id']: 0;\n  $view_params['form']['hidden_fields'] = array('product_id' => $product_id);\n  // product name details\n  $view_params['form']['product_name']['label'] = array('text' => 'Product name:', 'for' => 'product_name');\n  $view_params['form']['product_name']['field'] = array('name' => 'product_name', 'id' => 'product_name', 'value' => isset($a_values['product_name']) ? $a_values['product_name']: '', 'maxlength' => '100', size' => '30', 'class' => 'input');\n  // product sku details\n  $view_params['form']['product_sku']['label'] = array('text' => 'Product SKU:', 'for' => 'product_sku');\n  $view_params['form']['product_sku']['field'] = array('name' => 'product_sku', 'id' => 'product_sku', 'value' => isset($a_values['product_sku']) ? $a_values['product_sku']: '', 'maxlength' => '100', 'size' => '30', 'class' => 'input');\n  // product quantity details\n  $view_params['form']['product_quantity']['label'] = array('text' => 'Product Quantity:', 'for' => 'product_quantity');\n  $view_params['form']['product_quantity']['field'] = array('name' => 'product_quantity', 'id' => 'product_quantity', 'value' => isset($a_values['product_quantity']) ? $a_values['product_quantity']: '', 'maxlength' => '100', 'size' => '30', 'class' => 'input');\n  // Form attributes validation rules\n  $config_form_rules = array(array('field' => 'product_name', 'label' => 'Product Name','rules' => 'trim|required'), array('field' => 'product_sku', 'label' => 'Product SKU', 'rules' => 'trim|required'), array('field' => 'product_quantity', 'label' => 'Product Quantity', 'rules' => 'trim|required|integer'));\n  $this->form_validation->set_rules($config_form_rules);\n  return $view_params;\n  }\n// This controller method retrieves the products list calling the // model productmodel's method get_products() renders the results // in the view productsview.\npublic function index()\n{\n  // Loading the url helper\n  $this->load->helper('url');\n\n  // Manually loading the database\n  $this->load->database();\n\n  // Loading the model class\n  $this->load->model('productmodel');\n\n  // Calling the model productmodel's method get_products()to // retrieve the products from the database.\n  $view_params['products'] = $this->productmodel->get_products();\n  // Rendering the products list in the view productsview.\n  $this->load->view('productsview', $view_params);\n  }\n// This method handles the operation of adding a product to the // database.\npublic function add()\n{\n  // Loading the url helper\n  $this->load->helper('url');\n\n  // Manually loading the database\n  $this->load->database();\n\n  // Loading the model class\n  $this->load->model('productmodel');\n\n  $a_post_values = $this->input->post();\n  $view_params = $this->load_form('product/add', $a_post_values);\n\n  // Validating the form\n  if ($this->form_validation->run() == FALSE) {\n    // Validation failed\n    $this->load->view('productform', $view_params);\n    } else {\n    $data = $a_post_values;\n    array_pop($data);\n    $this->productmodel->addProduct($data);\n\n    redirect('product');\n    }\n  }\n// This method handles the operation of editing a product\npublic function edit($product_id)\n{\n  // Loading the url helper\n  $this->load->helper('url');\n  // Manually loading the database\n  $this->load->database();\n\n  // Loading the model class\n  $this->load->model('productmodel');\n\n  $a_post_values = $this->input->post();\n  // Checking if a form was submitted\n  if ($a_post_values) {\n    $a_form_values = $a_post_values;\n    } else {\n    // Get the values of the database\n    $a_db_values = $this->productmodel->get_product($product_id);\n    $a_form_values = array('product_id' => $a_db_values[0]->product_id, 'product_name' => $a_db_values[0]->product_name, product_sku' => $a_db_values[0]->product_sku, 'product_quantity' => $a_db_values[0]->product_quantity);\n    }\n\n  $view_params = $this->load_form('product/edit/' . $product_id, $a_form_values);\n  // Validating the form\n  if ($this->form_validation->run() == FALSE) {\n    // Validation failed\n    $this->load->view('productform', $view_params);\n    } else {\n    $a_fields = array('product_name', 'product_sku', 'product_quantity');\n    for ($index = 0; $index < count($a_fields); $index++)\n    {\n      $s_field = $a_fields[$index];\n      $data[$s_field] = $this->input->post($s_field)\n      }\n    $this->productmodel->updateProduct($product_id, $data);\n    redirect('product');\n    }\n  }\n}\n/* End of file product.php */\n/* Location: /application/controllers/product.php */\n```", "```php\n<?php\nclass Productmodel extends CI_Model {\n  // The model's constructor method\n  public function __construct()\n  {\n    // Call the Model's parent constructor\n    parent::__construct();\n    }\n  // This method retrieves the products list and returns an array of // objects each containing product details.\n  public function get_products()\n  {\n    // Calling the CI's db object's method for generating SQL // queries.\n    $query = $this->db->get('products');\n    // returns an array of products objects\n    return $query->result();\n    }\n  // This method retrieves a specific product's details identified by // $product_id as a parameter\n  public function get_product($product_id)\n  {\n    // Calling the CI's db object's methods for generating SQL // queries.\n    $this->db->select('*');\n    $this->db->from('products');\n    $this->db->where('product_id', $product_id);\n\n    // Calling the CI's db object method for executing the query\n    $query = $this->db->get();\n    // Returning array of one object element containing product // details.\n    return $query->result();\n    }\n\n  // This method adds a product to the products table Parameters // $data - The data to insert into the table\n  public function addProduct($data)\n  {\n    // Calling the CI's db object method for inserting a product data // into the products table.\n    $this->db->insert('products', $data);\n    }\n  // This method updates a product row in the products table // parameters $product_id - The product id, $data - The updated // data\n  public function updateProduct($product_id, $data)\n  {\n  // Calling the CI's db object's methods for generating SQL queries\n  $this->db->where('product_id', $product_id);\n  // Calling the CI's db object method for updating the product data // in the products table\n  $this->db->update('products', $data);\n  }\n}\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Products List</title>\n</head>\n<body>\n<table>\n<tr>\n  <td>ID</td>\n  <td>Name</td>\n  <td>SKU</td>\n  <td>Quantity</td>\n  <td>Actions</td>\n</tr>\n\n<?php foreach ($products as $product): ?>\n<tr>\n  <td><?php echo $product->product_id; ?></td>\n  <td><?php echo $product->product_name; ?></td>\n  <td><?php echo $product->product_sku ; ?></td>\n  <td><?php echo $product->product_quantity ; ?></td>\n  <td><a href=\"<?php echo site_url(\"product/edit/\" . $product->product_id); ?>\">Edit Product</a></td>\n</tr>\n<?php endforeach; ?>\n</table>\n\n<p>\n  <a href=\"<?php echo site_url('product/add'); ?>\">Add Product</a>\n</p>\n</body>\n</html>\n```", "```php\n<?php\nif (!defined('BASEPATH')) exit('No direct script access allowed');\nclass Order extends CI_Controller\n{\n  // This method retrieves the products list and returns an array // of objects each containing product details\n  public function index()\n  {\n    // Loading the url helper\n    $this->load->helper('url');\n\n    // Manually loading the database\n    $this->load->database();\n\n    // Loading the model class\n    $this->load->model('productmodel');\n\n    $view_params['products'] = $this->productmodel->get_products();\n\n    $this->load->view('orderview', $view_params);\n    }\n  // This method checks the product's quantity.\n  // It updates the product row in the database or generates an // error message\n  public function product($product_id)\n  {\n    // Loading the url helper\n    $this->load->helper('url');\n\n    // Manually loading the database\n    $this->load->database();\n\n    // Loading the model class\n    $this->load->model('productmodel');\n\n    if (!$this->productmodel->update_quantity($product_id)) {\n      mail($user_mail, 'product' . $product_id . \"reached it's limit\", 'Order product' . $product_id);\n      }\n    redirect('product');\n  }\n}\n```", "```php\n<?php\nclass Productmodel extends CI_Model\n{\n  // The model's constructor method\n  public function __construct()\n  {\n    // Call the model constructor\n    parent::__construct();\n    }\n  // This method retrieves the products list and returns an array of // objects each containing product details.\n  public function get_products()\n  {\n    // Calling the CI's db object's method for generating the // SQL queries.\n    $query = $this->db->get('products');\n    // returns an array of products objects\n    return $query->result();\n    }\n  // This method retrieves a specific product's details // identified by $product_id as a parameter.\n  public function get_product($product_id)\n  {\n  // Calling the CI's db object's methods for generating the // SQL queries.\n  $this->db->select('*');\n  $this->db->from('products');\n  $this->db->where('product_id', $product_id);\n  // Calling the CI's db object method for executing the query\n  $query = $this->db->get();\n  // Returning array of one object element containing the product // details.\n  return $query->result();\n  }\n// This method adds a product to the products table parameters.\n// $data - The data to insert into the table\npublic function addProduct($data)\n{\n  // Calling the CI's db object method for inserting a product data // into the products table.\n  $this->db->insert('products', $data);\n  }\n// This method updates a product row in the products table // parameters.\n// $product_id - The product id\n// $data - The updated data\npublic function updateProduct($product_id, $data)\n{\n  // Calling the CI's db object's methods for generating the // SQL queries.\n  $this->db->where('product_id', $product_id);\n  // Calling the CI's db object method for updating the product data // in the products table.\n  $this->db->update('products', $data);\n  }\n\n// This method checks whether the quantity exceeds it's limit.\nprivate function check_quantity($product_id) {\n  // Calling the CI's db object's methods for generating the // SQL queries.\n  $this->db->select('product_quantity');\n  $this->db->from('products');\n  $this->db->where('product_id', $product_id);\n  // Calling the CI's db object method for executing the query.\n  $query = $this->db->get();\n  // Calling the result's method row, which returns the SQL query // result row.\n  $row = $query->row();\n  if ($row->product_quantity < 7) {\n    return false;\n    } else {\n    return true;\n    }\n  }\n\n// This method updates a product quantity and return true or false, // if quantity reaches it's limit.\npublic function update_quantity($product_id)\n{\n  $sql = \"UPDATE products SET product_quantity = product_quantity - 1 WHERE product_id=\" $product_id;\n\n  $this->db->query($sql);\n\n  // Checking if the quantity reached it's limit.\n  if ($this->check_quantity($product_id)) {\n    return true;\n    } else {\n    return false;\n    }\n  }\n}\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Products List</title>\n</head>\n<body>\n<table>\n<tr>\n  <th>ID</th>\n  <th>Name</th>\n  <th>SKU</th>\n  <th>Quantity</th>\n  <th>Actions</th>\n</tr>\n<?php foreach ($products as $product): ?>\n<tr>\n  <td><?php echo $product->product_id; ?></td>\n  <td><?php echo $product->product_name;  ?></td>\n  <td><?php echo $product->product_sku ; ?></td>\n  <td><?php echo $product->product_quantity ; ?></td>\n  <td><a href=\"<?php echo site_url(\"order/product/\" . $product->product_id); ?>\">Order Product</a></td>\n</tr>\n<?php endforeach; ?>\n</table>\n</body>\n</html>\n```", "```php\n<?php\nclass Fbpage extends CI_Controller {\n  public function __construct() {\n    parent::__construct();\n    // Extremely important!!!\n    // Due to the fact that the CI handles classes for // $_GET, $_POST, and $_COOKIE parse_str is called to // copy the variables sent by Facebook to the $_REQUEST var, // so that the Facebook SDK can do its checks.\n    // This is done in order to avoid infinite redirect loop.\n    parse_str($_SERVER['QUERY_STRING'], $_REQUEST);\n    }\n  // This method retrieves Facebook data of a Facebook user and // displays personal details and some of his  friends.\n  // It checks if a Facebook token is valid, if it's valid, // then it displays his details, otherwise it produces // the token.\n  public function index() {\n    $a_config = array('appId' => $fb_API, 'secret'=> $fb_secret, 'cookie' => true);\n    $this->load->library('facebook', $a_config);\n    // Checking if the user is logged in and confirms // the app's permissions.\n    if ($user = $this->facebook->getUser()) {\n      // Get the Facebook token\n      $access_token = $this->facebook->getAccessToken();\n      // Loading the fbmodel\n      $this->load->model('fbmodel');\n      // Updating the token\n      $this->fbmodel->set_token($access_token);\n      // Get a Facebook user's profile details\n      $user_profile = $this->fbmodel->get_user_profile();\n      // Getting the Facebook user ID\n      $uid = $user_profile['id'];\n\n      // Retrieving a Facebook user's details\n      $me = $this->fbmodel->get_me_by_fql($uid);\n      // Get a Facebook user's friends\n      $friends = $this->fbmodel->get_friends();\n      $view_params = array('me' => $me, 'friends' => $friends);\n      // Loading the view\n      $this->load->view(\"fbview\", $view_params);\n      } else {\n      // The Facebook parameters for the Facebook login URL, // where scope consists the Facebook app's permissions.\n      $a_params = array ('fbconnect' => 0, 'scope' => offline_access, publish_stream', 'cookie' => true);\n      // The Facebook login URL page\n      $login_url= $this->facebook->getLoginUrl($a_params);\n      // Redirecting the Facebook user to the login URL.\n      // After the Facebook user confirms the permissions // required by the app; he is redirected back to the // index page.\n      header('Location:'. $login_url);\n      }\n    }\n  }\n```", "```php\n<?php\nclass fbmodel extends CI_Model {\n  // The Facebook app's token\n  private $token;\n  public function __construct() {\n    // Call the model constructor\n    parent::__construct();\n    }\n\n  // This method sets the model class's private token value\n  public function set_token($token) {\n    $this->token = $token;\n    }\n\n  // This method returns an array, which contains the Facebook user // profile.\n  public function get_user_profile() {\n    // Getting the CI main class to get access to the Facebook // library.\n    $ci =& get_instance();\n\n    // Getting the Facebook user's profile\n    $user_profile = $ci->facebook->api('/me');\n    return $user_profile;\n    }\n\n  // This method returns an array, which contains a Facebook user's // details.\n  public function get_me_by_fql($uid) {\n    // Getting the CI main class to get access to the Facebook // library.\n    $ci =& get_instance();\n    // The SQL query to send to Facebook $fql = SELECT uid, name, // pic_big FROM user WHERE uid=\" $uid;\n    $param = array('method' => 'fql.query', 'query' => $fql, 'callback' => '');\n\n    // Getting the Facebook user's details\n    $fqlResult = $ci->facebook->api($param);\n    // Returning an array, which contains the required details\n    return $fqlResult;\n    }\n\n  // This method returns an array of a Facebook user's friend.\n  public function get_friends() {\n    // Getting the CI main class to get access to the Facebook // library\n    $ci =& get_instance();\n    // Getting the Facebook user's friends\n    $friends = $ci->facebook->api('/me/friends');\n\n    // Returning an array, which contains a Facebook user's friend\n    return $friends;\n    }\n  }\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>My facebook details</title>\n</head>\n<body>\n\n<div id=\"my_details\">\n  <div id=\"picture\"><img src=\"img/<?=$me[0]['pic_big'] ?>\"></div>\n  <div id=\"my_name\"><?=$me[0]['name'] ?></div>\n</div>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Link to friend</th>\n</tr>\n<?php foreach ($friends['data'] as $friend): ?>\n<tr>\n  <td><?=$friend['name']?></td>\n  <td><a href='http://www.facebook.com/<?=$friend[\"id\"]?>'>To friend</a></td>\n</tr>\n<?php endforeach; ?>\n</table>\n</body>\n</html>\n```"]