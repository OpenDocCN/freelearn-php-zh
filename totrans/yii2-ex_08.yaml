- en: Chapter 8. Log in to the App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 登录应用
- en: This chapter will explain how to set up login authentication and authorization.
    Logging in is a fundamental step to protect our application and you will learn
    how to reach these goals from scratch, using the web management free extension
    that is broadly available on the Internet.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何设置登录认证和授权。登录是保护我们应用的基本步骤，您将学习如何从头开始实现这些目标，使用在互联网上广泛可用的免费Web管理扩展。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'Creating a user login:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户登录：
- en: 'For example: creating login form to access'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：创建登录表单以访问
- en: Configure a user authorization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置用户授权
- en: 'For example: creating an access control filter to authorize'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：创建一个访问控制过滤器以授权
- en: '**Role Based Access Control** (**RBAC**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**（**RBAC**）'
- en: 'For example: configuring RBAC to set permissions for users'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：配置RBAC为用户设置权限
- en: Mixing **Access Control Filter** (**ACF**) and RBAC
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合**访问控制过滤器**（**ACF**）和RBAC
- en: 'For example: managing users'' roles to access rooms, reservations, and customers'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：管理用户角色以访问房间、预订和客户
- en: 'The first step will be creating an authenticated access to our app using a
    database table to manage users and associate it to the Yii user component, through
    a user model that extends `IdentityInterface`. We will provide an example of how
    to use it: building a login form to authenticate the user.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将是使用数据库表创建对我们的应用的认证访问，并将其与通过扩展`IdentityInterface`的用户模型关联到Yii用户组件。我们将提供一个如何使用它的示例：构建一个登录表单以认证用户。
- en: The next step will be to control what actions a user can perform, using ACF
    and RBAC. We will follow some examples using ACF and RBAC, and in the latter case
    we will build a complete authorization manager from scratch.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是控制用户可以执行哪些操作，使用ACF和RBAC。我们将通过一些使用ACF和RBAC的示例，并在后者中从头开始构建一个完整的授权管理器。
- en: Creating a user login
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户登录
- en: 'The application''s security starts with two well distinguished phases of the
    same user login: authentication and authorization.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的安全始于用户登录的两个明显区分的阶段：认证和授权。
- en: The first one, authentication, is the process of verifying a user's identity,
    usually using a username and password, or email and password, process. Authentication
    is completed when the user has been recognized and their state has been preserved
    for further requests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个，认证，是验证用户身份的过程，通常使用用户名和密码，或者电子邮件和密码进行。认证完成时，用户已被识别，并且他们的状态已被保留以供后续请求。
- en: The second one, authorization, is the process of verifying that the user has
    the permission to execute a specific action.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个，授权，是验证用户是否有权限执行特定操作的过程。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since http requests are stateless, we need to preserve the login status, which
    means that there is no data context sharing among them. This limit is solved by
    sessions, mainly files where the web server stores the data. A filename is used
    as a session identifier and passed to the browser through a cookie or URL parameter
    of links contained in the HTML response. In this way, the browser keeps the session
    active by sending the session identifier to the web server through a cookie or
    a parameter in the request URL, and the web server knows which file contains the
    session data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTTP请求是无状态的，我们需要保留登录状态，这意味着它们之间没有数据上下文共享。这个限制通过会话得到解决，主要是文件，其中Web服务器存储数据。一个文件名用作会话标识符，并通过HTML响应中包含的链接的URL参数传递给浏览器。这样，浏览器通过发送会话标识符到Web服务器通过cookie或请求URL中的参数来保持会话活跃，而Web服务器知道哪个文件包含会话数据。
- en: A database table can be used instead of files with the same functionalities.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用具有相同功能的数据库表代替文件。
- en: Yii2 implements authentication through the `yii\web\User` component, which manages
    the user authentication status and also contains a reference to the `identityClass`
    that represents the concrete object that we are referring to.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2通过`yii\web\User`组件实现认证，该组件管理用户认证状态，并包含一个指向代表我们引用的具体对象的`identityClass`的引用。
- en: 'An `identityClass` class should implement five methods:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`identityClass`类应该实现五个方法：
- en: '`findIdentity()`: This method looks for an instance of an identity class using
    the ID provided as parameter. It is commonly used when we need to keep the login
    status via a session.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findIdentity()`: 此方法使用提供的ID参数查找一个身份类实例。它通常在我们需要通过会话保持登录状态时使用。'
- en: '`findIdentityByAccessToken()`: This one looks for an instance of the identity
    class using the access token provided by the parameter. It is commonly used when
    we need to authenticate using a single secret token.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findIdentityByAccessToken()`: 此方法使用参数提供的访问令牌查找身份类的实例。它通常在我们需要使用单个密钥进行认证时使用。'
- en: '`getId()`: This one returns the ID of the identity instance.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getId()`: 此方法返回身份实例的ID。'
- en: '`getAuthKey()`: This method returns the key used to verify the cookie-based
    login when the login has been completed using a cookie sent by the browser (when
    **Remember me** is checked during the login).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAuthKey()`: 此方法返回在登录完成后使用浏览器发送的cookie（在登录时勾选**记住我**）时用于验证基于cookie的登录的密钥。'
- en: '`validateAuthKey()`: This method verifies that the provided `authKey` passed
    as a parameter is correct (in the cookie-based login).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validateAuthKey()`: 此方法验证提供的作为参数传递的`authKey`是否正确（在基于cookie的登录中）。'
- en: Often the `identityClass` class corresponds to a record of the `User` database
    table. For this reason, usually the `identityClass` class implements `IdentityInterface`
    and extends `ActiveRecord`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`identityClass`类对应于`User`数据库表的一条记录。因此，通常`identityClass`类实现`IdentityInterface`并扩展`ActiveRecord`。
- en: 'It is now time to implement authentication. The first thing to do is to configure
    `yii\web\User` components and its `identityClass`. Open the `basic/config/web.php`
    file and add the `user` property to `components` if it does not already exist:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候实现认证了。首先要做的是配置`yii\web\User`组件及其`identityClass`。打开`basic/config/web.php`文件，如果尚未存在，则将`user`属性添加到`components`中：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we have to create a database table where we store the users'' records:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须创建一个数据库表，用于存储用户的记录：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we do not have a password field, but we have a `password_hash` field.
    This because passwords are stored using the hashing method. In models, we will
    have a setter `setPassword()` method that gets plain text passwords to fill in
    the `password_hash` field.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有密码字段，但有`password_hash`字段。这是因为密码是使用散列方法存储的。在模型中，我们将有一个`setPassword()`设置器方法，它获取纯文本密码以填充`password_hash`字段。
- en: 'Finally, let''s update the `basic/models/User` class that handles the login
    status by implementing `IdentityInterface` and connect it to the `user` table
    of database. This is a common implementation for `basic/models/User`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新处理登录状态的`basic/models/User`类，通过实现`IdentityInterface`并将其连接到数据库的`user`表。这是`basic/models/User`的常见实现：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If our application also uses a cookie-based authentication, we need to fill
    in the `auth_key` field too, as this will be passed to the client in the http
    response. It is convenient to populate the `auth_key` field automatically when
    a new user is inserted by overriding the `beforeSave()` method in the `\app\models\User`
    model:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序也使用基于cookie的认证，我们还需要填写`auth_key`字段，因为这将作为http响应传递给客户端。当通过覆盖`\app\models\User`模型中的`beforeSave()`方法插入新用户时，自动填充`auth_key`字段是方便的：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: User components provide methods to log in, log out, and access the `identityClass`,
    and they verify the effectiveness of the user authentication.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 用户组件提供登录、注销和访问`identityClass`的方法，并验证用户认证的有效性。
- en: 'To verify whether the user is well authenticated, use the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证用户是否已正确认证，请使用以下方法：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When a user is authenticated and we have an instance of the `\app\models\User`
    model, we could complete the authentication by calling:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户认证并通过`\app\models\User`模型实例化时，我们可以通过调用以下方法来完成认证：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, when we need to access the identity class:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们需要访问身份类时：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, to log the user out:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了注销用户：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Example – a login form to access
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 登录表单以访问
- en: In this example, we will create a login form and complete the user authentication.
    To proceed it is necessary to create a `user` database table from a SQL query,
    as described in the previous paragraph.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将创建一个登录表单并完成用户认证。为了进行此操作，需要根据前一段描述创建一个`user`数据库表。
- en: 'To add a user, just insert a new record in the `user` table, with `foo` as
    the username and `foopassword` as the password:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加用户，只需在`user`表中插入一条新记录，其中`foo`作为用户名，`foopassword`作为密码：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A password is hashed using the bcrypt method and cost with value 12, available
    on the Internet through a quick Google search.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 密码使用bcrypt方法进行散列，成本值为12，可以通过快速Google搜索在互联网上找到。
- en: 'Then, create a new controller named `MyAuthentication` in `basic/controllers/MyAuthenticationController.php`
    and ensure it contains two actions: `actionLogin` and `actionLogout`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `basic/controllers/MyAuthenticationController.php` 中创建一个名为 `MyAuthentication`
    的新控制器，并确保它包含两个操作：`actionLogin` 和 `actionLogout`。
- en: The `actionLogin` method gets the username and password data from `$_POST` and
    uses an `$error` variable to pass an error description to the view. If the username
    and password data is filled in, the user will be found in the database table and
    the inserted password will be validated, and after that the user will be logged
    in.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionLogin` 方法从 `$_POST` 获取用户名和密码数据，并使用 `$error` 变量将错误描述传递到视图。如果填写了用户名和密码数据，用户将在数据库表中找到，并验证插入的密码，然后用户将被登录。'
- en: 'Finally, `actionLogout` simply logs the user out from the session and redirects
    the browser to the login page:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`actionLogout` 简单地将用户从会话中注销，并将浏览器重定向到登录页面：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, create the view with this content in `basic/views/my-authentication/login.php`.
    Before a user can log in, a form with the username and password to be filled in
    will be displayed. When the username and password match an entry in the user database
    table, a confirmation message and a logout button will be displayed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `basic/views/my-authentication/login.php` 中创建包含以下内容的视图。在用户可以登录之前，将显示一个包含要填写的用户名和密码的表单。当用户名和密码与用户数据库表中的条目匹配时，将显示确认消息和注销按钮：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Test it by pointing the browser to `http://hostname/basic/web/my-authentication/login`
    and after filling out the form with `foo` as the username and `foopassword` as
    the password, this should be displayed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将浏览器指向 `http://hostname/basic/web/my-authentication/login` 并填写 `foo` 作为用户名和
    `foopassword` 作为密码来测试它，应该会显示：
- en: '![Example – a login form to access](img/B04656_08_01.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 访问的登录表单](img/B04656_08_01.jpg)'
- en: Login form to access
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 访问的登录表单
- en: 'After clicking on the **Login** button, you should see:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **登录** 按钮后，你应该会看到：
- en: '![Example – a login form to access](img/B04656_08_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 访问的登录表单](img/B04656_08_02.jpg)'
- en: Successful authentication
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证
- en: This method does not provide error handling for the fields, because we are not
    using a model to create form fields. If we had created a form model with username
    and password fields, we could have added rules validation to this model and seen
    input error handling (such as missing field value, wrong field length, and so
    on). Fortunately, Yii2 has a login form model ready to use in `basic/models/LoginForm.php`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法不提供字段错误处理，因为我们没有使用模型来创建表单字段。如果我们创建了一个包含用户名和密码字段的表单模型，我们就可以向此模型添加规则验证，并看到输入错误处理（如字段值缺失、字段长度错误等）。幸运的是，Yii2
    在 `basic/models/LoginForm.php` 中提供了一个可用的登录表单模型。
- en: 'If we had wanted to use this model, we would have created a new action named
    `actionLoginWithForm` in `MyAuthenticationController` that handles login fields
    through the model instead of parameters from `$_POST`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用此模型，我们会在 `MyAuthenticationController` 中创建一个名为 `actionLoginWithForm`
    的新操作，该操作通过模型处理登录字段，而不是从 `$_POST` 参数中获取：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the content of `basic/views/my-authentication/login-with-model.php`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `basic/views/my-authentication/login-with-model.php` 的内容：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can look at the output by pointing our browser to `http://hostname/basic/web/my-authentication/login-with-model`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将浏览器指向 `http://hostname/basic/web/my-authentication/login-with-model`
    来查看输出。
- en: 'If we try to submit the form without filling out all the fields, we will immediately
    get errors because they are activated by the form client-side validation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试提交未填写所有字段的表单，我们会立即得到错误，因为它们通过表单客户端验证激活：
- en: '![Example – a login form to access](img/B04656_08_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 访问的登录表单](img/B04656_08_03.jpg)'
- en: Login error using the model
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模型的登录错误
- en: We can customize the `LoginForm` model class as we want if standard behavior
    is not enough for our purposes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标准行为不足以满足我们的需求，我们可以按需自定义 `LoginForm` 模型类。
- en: Configuring user authorization
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置用户授权
- en: 'Yii has two methods to authorize users: ACF and RBAC.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 有两种方法来授权用户：ACF 和 RBAC。
- en: 'The first one, ACF, is used in applications that require a minimal and simple
    access control. Basically, its behavior is based on five parameters:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个，ACF，用于需要最小和简单访问控制的应用程序。基本上，其行为基于五个参数：
- en: '`allow`: This parameter specifies whether this is an allow or deny rule; possible
    values are `allow` or `deny`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow`: 此参数指定这是一个允许还是拒绝规则；可能的值是 `allow` 或 `deny`'
- en: '`actions`: This parameter specifies which actions this rule matches, and they
    are declared using an array of string'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions`: 此参数指定此规则匹配哪些操作，它们使用字符串数组声明'
- en: '`roles`: This parameter specifies which user roles this rule matches; possible
    values are `?`'' and `@`, which mean respectively guest user and authenticated
    user'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles`：此参数指定此规则匹配哪些用户角色；可能的值是`?`和`@`，分别表示访客用户和已认证用户。'
- en: '`ips`: This parameter specifies which client IP address this rule matches;
    the IP address that can contain `*` as a wildcard'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ips`：此参数指定此规则匹配哪个客户端IP地址；IP地址可以包含`*`作为通配符。'
- en: '`verbs`: This parameter specifies which verb (request method) this rules matches'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbs`：此参数指定此规则匹配哪个动词（请求方法）。'
- en: By default, if no rule matches, access will be denied.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果没有规则匹配，将拒绝访问。
- en: ACF is enabled by overwriting the `behaviors()` method of `Controller` and populating
    its `access` property with the content of some (or every one) of the preceding
    parameters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ACF通过覆盖`Controller`的`behaviors()`方法，并用一些（或所有）前一个参数的内容填充其`access`属性来实现。
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, the `login`, `logout`, `signup`, and `index` actions are enabled
    for guest users (all users) and the logout action is enabled only for authenticated
    ones.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`login`、`logout`、`signup`和`index`操作对访客用户（所有用户）可用，而`logout`操作仅对已认证用户可用。
- en: ACF has many other parameters that can be defined, such as `controllers` , to
    define which controllers this rule matches (if it is empty, this means all controllers);
    `matchCallback` whose value is a PHP callable function called to verify whether
    this rule can be applied or not; and finally `denyCallback`, whose value is a
    PHP callable function used when this rule will deny access.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ACF有许多其他参数可以定义，例如`controllers`，用于定义此规则匹配哪些控制器（如果为空，则表示所有控制器）；`matchCallback`，其值是一个PHP可调用函数，用于验证此规则是否可以应用；最后是`denyCallback`，其值是一个PHP可调用函数，当此规则将拒绝访问时使用。
- en: When a rule is denied, there are two different behaviors according to the role
    of the user. If a guest is denied, a denied rule will call the `yii\web\User::loginRequired()`
    method to redirect the user's browser to the login page; if the user is authenticated,
    it will throw a `yii\web\ForbiddenHttpException` exception.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当规则被拒绝时，根据用户的角色，会有两种不同的行为。如果访客被拒绝，拒绝的规则将调用`yii\web\User::loginRequired()`方法将用户的浏览器重定向到登录页面；如果用户已认证，它将抛出`yii\web\ForbiddenHttpException`异常。
- en: This behavior can be customized using the `denyCallback` property mentioned
    earlier, and by defining the correct callable PHP function.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用前面提到的`denyCallback`属性以及定义正确的PHP可调用函数来自定义此行为。
- en: Obviously, any detail about the logged in user is not considered by this type
    of authorization. During configuration in the `behaviors()` method, in fact, no
    detail about the user ever appears (for example, `role`). So we cannot define
    more precisely which conditions a user can execute or not a controller action.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，任何关于已登录用户的具体信息都不会被这种授权方式考虑。实际上，在`behaviors()`方法的配置中，用户的任何详细信息（例如，`role`）都不会出现。因此，我们无法更精确地定义用户可以执行或不能执行控制器操作的条件。
- en: ACF suggests only if we have to limit access to an authenticated user, without
    needing some other details to allow the controller action to be executed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ACF建议，如果我们必须限制对已认证用户的访问，而不需要其他详细信息来允许执行控制器操作，那么这是最佳选择。
- en: But in all those cases in which it is enough to limit access based on the condition
    that the user is logged in or not, it is the best approach. In the REST API with
    limited access (where only the authenticated users are able to make calls), ACF
    is probably the best solution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但在所有这些情况下，如果仅基于用户是否登录的条件来限制访问就足够了，那么这是最佳方法。在有限访问的REST API（其中只有已认证用户能够进行调用）中，ACF可能是最佳解决方案。
- en: Example – creating an ACF to authorize the users
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 创建一个ACF来授权用户
- en: Now let's look at how to create an ACF to authorize the user to display or not
    display the page content.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何创建一个ACF来授权用户显示或不显示页面内容。
- en: 'We have two actions: `actionPrivatePage` and `actionPublicPage`. The first
    one is accessible only from an authenticated user and the second one is publically
    accessible.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个操作：`actionPrivatePage`和`actionPublicPage`。第一个操作仅对已认证用户可用，第二个操作是公开可访问的。
- en: 'In `MyAuthenticationController.php`, let''s add the `behaviors()` method with
    the following content:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyAuthenticationController.php`中，让我们添加以下内容的`behaviors()`方法：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This method applies an ACF to only two actions, `actionPublicPage` and `actionPrivatePage`
    (based only on the property value) and restricts access for private pages that
    specify the roles as `@`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将ACF应用于仅两个操作`actionPublicPage`和`actionPrivatePage`（仅基于属性值），并限制指定角色为`@`的私有页面的访问。
- en: Then, we added the `denyCallback` property to indicate how the behavior should
    appear when access is denied to the user. In this case, we set it so that the
    user should be redirected to the `login` action of `MyAuthenticationController`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加了 `denyCallback` 属性来指示当用户访问被拒绝时应该如何显示行为。在这种情况下，我们将其设置为用户应重定向到 `MyAuthenticationController`
    的 `login` 操作。
- en: RBAC
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC
- en: RBAC is the right choice when we need more granularity of authorization controls.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要更细粒度的授权控制时，RBAC 是正确的选择。
- en: 'RBAC involves two parts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC 包括两个部分：
- en: The first one is to build up the RBAC authorization data
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是构建 RBAC 授权数据
- en: The second one is to use the authorization data to perform further access controls
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是使用授权数据执行进一步的访问控制
- en: 'We''ll start now by building up the RBAC authorization data. RBAC can be initialized
    in two ways: through PhpManager, instancing the `yii\rbac\PhpManager` component
    that will store RBAC data in the `@app/rbac` folder, and through DbManager, instancing
    the `yii\rbac\DbManager` component, which will use four database tables to store
    its data.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始构建 RBAC 授权数据。RBAC 可以通过两种方式初始化：通过 PhpManager，实例化 `yii\rbac\PhpManager`
    组件，该组件将在 `@app/rbac` 文件夹中存储 RBAC 数据，以及通过 DbManager，实例化 `yii\rbac\DbManager` 组件，该组件将使用四个数据库表来存储其数据。
- en: We need to configure the `authManager` application component in the main configuration
    file using one of the authorization managers, `yii\rbac\PhpManager` or `yii\rbac\DbManager`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在主配置文件中配置 `authManager` 应用组件，使用其中一个授权管理器，即 `yii\rbac\PhpManager` 或 `yii\rbac\DbManager`。
- en: 'The following code shows how to configure `authManager` in `basic/config/web.php`
    using the `yii\rbac\PhpManager` class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在 `basic/config/web.php` 中使用 `yii\rbac\PhpManager` 类配置 `authManager`：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code shows how to configure `authManager` in `basic/config/web.php`
    using the `yii\rbac\DbManager` class:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在 `basic/config/web.php` 中使用 `yii\rbac\DbManager` 类配置 `authManager`：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Both these methods are based on three objects: `permissions`, `roles`, and
    `rules`. The `permissions` method represents actions that can be controlled; `roles`
    are a set of permissions to which the target can be enabled or less; and `rules`
    are extra validations that will be executed when a permission is checked. Finally,
    `permissions` or `roles` can be assigned to users and identified by the `IdentityInterface::getId()`
    value of the `Yii::$app->user` component.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都基于三个对象：`permissions`、`roles` 和 `rules`。`permissions` 方法表示可以控制的操作；`roles`
    是一组权限，目标可以启用或禁用；`rules` 是在检查权限时执行的额外验证。最后，`permissions` 或 `roles` 可以分配给用户，并由 `Yii::$app->user`
    组件的 `IdentityInterface::getId()` 值识别。
- en: When access permissions do not change, we could create a console command to
    launch in case, or once, permissions are changed. However, we will not discuss
    that now as you will see the console command in-depth in the next chapters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问权限不改变时，我们可以创建一个控制台命令以在权限更改的情况下启动，或者一旦更改权限就启动。然而，我们现在不会讨论这个问题，因为您将在下一章中深入了解控制台命令。
- en: Instead, we will write permissions using a fake action to only execute permissions,
    roles, and assignments settings.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将使用一个假操作来仅执行权限、角色和分配设置。
- en: 'In `basic/controllers/MyAuthenticationController.php`, add this action named
    `actionInitializeAuthorizations`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic/controllers/MyAuthenticationController.php` 文件中，添加名为 `actionInitializeAuthorizations`
    的操作：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before calling this action from your browser, make sure that the folder in `basic/rbac`
    already exists and that it is writable.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在从浏览器调用此操作之前，请确保 `basic/rbac` 文件夹已存在并且可写。
- en: In order to start this action from the beginning, two permissions and two roles
    are created, then the `createReservation` permission is added as a child to the
    operator role and the `updateReservation` permission is added as a child to the
    admin role, together to the operator role.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从开始执行此操作，创建了两个权限和两个角色，然后将 `createReservation` 权限作为子项添加到操作员角色中，将 `updateReservation`
    权限作为子项添加到管理员角色中，并一起添加到操作员角色中。
- en: If we check the `createReservation` permission for the user with the `roleOperator`
    role, it will be successfully confirmed. The same happens if we check the user
    with `adminOperator`. But when we check the `updateReservation` permission on
    the user with the `roleOperator` role, it will be denied since that permission
    is not assigned to that specific role.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查具有 `roleOperator` 角色的用户对 `createReservation` 权限的检查，它将成功确认。同样，如果检查具有 `adminOperator`
    的用户，也会发生这种情况。但是，当我们检查具有 `roleOperator` 角色的用户对 `updateReservation` 权限的检查时，它将被拒绝，因为该权限未分配给该特定角色。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Permissions and role names can be chosen without restrictions, because they
    are used as parameters when checking permissions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 权限和角色名称可以无限制地选择，因为它们在检查权限时用作参数。
- en: Now let's point our browser to `http://hostname/basic/my-authentication/initialize-authorizations`
    in order to launch the permissions creation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将浏览器指向 `http://hostname/basic/my-authentication/initialize-authorizations`
    以启动权限创建。
- en: 'The content of files created through this action in the `basic/rbac` folder
    are simply arrays. This is the content of the `items.php` file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此操作在 `basic/rbac` 文件夹中创建的文件内容仅仅是数组。这是 `items.php` 文件的内容：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the content of `assignments.php`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `assignments.php` 的内容：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, to check the user authorization, it is enough to call the `yii\web\User::can()`
    method:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了检查用户授权，只需调用 `yii\web\User::can()` 方法：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Example – configuring RBAC to set permissions for users
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 - 配置 RBAC 以设置用户权限
- en: In this example, we will create a user permissions management system from scratch,
    based on RBAC. We will create a new controller named `AuthorizationManagerController`
    in `basic/controllers/AuthorizationManagerController.php` that will display all
    the users and all the available permissions and roles from the database. This
    example is based on the user database table already used in the previous paragraphs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将从头开始创建一个基于 RBAC 的用户权限管理系统。我们将在 `basic/controllers/AuthorizationManagerController.php`
    中创建一个名为 `AuthorizationManagerController` 的新控制器，该控制器将显示数据库中的所有用户和所有可用的权限和角色。此示例基于前几段中已使用的用户数据库表。
- en: 'Let''s take a look at its structure again:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看它的结构：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will truncate the database table and insert these records, five items, to
    be used in the next examples:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将截断数据库表并插入这些记录，五个条目，用于后续示例：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now that we have data to work with, we can pass to write code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了可以工作的数据，我们可以编写代码。
- en: 'The first method to create in this controller is `initializeAuthorizations()`,
    which has to initialize all the available authorizations in the system:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此控制器中要创建的第一个方法是 `initializeAuthorizations()`，它必须初始化系统中的所有可用授权：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: At the top of this method, we created a permissions and roles list, then we
    assigned them to the Yii authorization component. Take care to ensure that, after
    calling this method for the first time, you check whether any children already
    exist by calling the `hasChild` method on every `addChild()` insert attempt.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法顶部，我们创建了一个权限和角色列表，然后我们将它们分配给 Yii 授权组件。请注意，在第一次调用此方法后，您需要通过在每个 `addChild()`
    插入尝试上调用 `hasChild` 方法来检查是否已存在任何子项。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have created a role for each permission, because `assign()` and `revoke()`
    take a role and not a permission as a first parameter, so we are required to replicate
    a role for every permission.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个权限创建了一个角色，因为 `assign()` 和 `revoke()` 方法将角色而不是权限作为第一个参数，因此我们需要为每个权限复制一个角色。
- en: 'Next, we can create `actionIndex()`, which launches the previous initialize
    authorizations, getting all the users and populating an array with all the permissions
    assigned to every user. This is the content of the `actionIndex()` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建 `actionIndex()`，它启动之前的初始化授权，获取所有用户并将所有分配给每个用户的权限填充到一个数组中。这是 `actionIndex()`
    方法的具体内容：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Follow the content of the index action view in `basic/views/authorization-manager/index.php`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按照索引操作视图的内容 `basic/views/authorization-manager/index.php`：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This loops for each user''s content of the `$rolesAvailable` array. To see
    this output, point your browser to `http://hostname/basic/web/authorization-manager/index`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环遍历 `$rolesAvailable` 数组中的每个用户的角色内容。要查看此输出，请将浏览器指向 `http://hostname/basic/web/authorization-manager/index`：
- en: '![Example – configuring RBAC to set permissions for users](img/B04656_08_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 配置 RBAC 以设置用户权限](img/B04656_08_04.jpg)'
- en: Users/Permissions table
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 用户/权限表
- en: Every permission status is a link to the actions of adding a role or removing
    a role (depending on the current status).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 每个权限状态都是一个链接，指向添加角色或删除角色的操作（根据当前状态而定）。
- en: 'Now we must create the last two actions: add a role and revoke a role to the
    user:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须创建最后两个操作：向用户添加角色和撤销角色：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Mixing ACF and RBAC
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合 ACF 和 RBAC
- en: ACF contains a property named `role` that is usually filled with `?` to indicate
    that access is available for all users, and `@` to indicate that access is restricted
    to authenticated ones. But there is a third option that refers its content to
    the role name of the RBAC system.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: ACF 包含一个名为 `role` 的属性，通常用 `?` 填充以表示对所有用户开放访问，用 `@` 表示仅对认证用户开放访问。但还有一个第三种选项，它将内容引用到
    RBAC 系统的角色名称。
- en: For each controller, therefore, it is enough to overwrite `behaviors()` by specifying
    the roles that can access the actions inside the controller and then to associate
    users to the role, in order to allow or deny access.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于每个控制器来说，只需要通过指定可以访问控制器内部动作的角色来覆盖 `behaviors()` 方法，然后将用户关联到该角色，以便允许或拒绝访问。
- en: Example – managing users' roles to access rooms, reservations, and customers
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 管理用户角色以访问房间、预订和客户
- en: In this example, we will show you how to manage the access to the controller
    actions using ACF and RBAC.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将向你展示如何使用 ACF 和 RBAC 管理控制器动作的访问。
- en: 'We will use the `foo` user to simulate an authenticated user for `RoomsController`.
    The first thing to do is to extend the `behaviors()` method of `RoomsController`
    in `basic/controller/RoomsController.php` with this content:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `foo` 用户来模拟 `RoomsController` 的认证用户。首先要做的事情是在 `basic/controller/RoomsController.php`
    中扩展 `behaviors()` 方法，添加以下内容：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With this code, we will guarantee access to the `create` action only to users
    with the `operator` role, while the `index` action access is given to all users
    and all other actions are denied to everyone.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，我们将保证只有具有 `operator` 角色的用户才能访问 `create` 动作，而 `index` 动作的访问权限给予所有用户，其他所有动作则拒绝所有人。
- en: So, if we try to browse to `http://hostname/basic/web/rooms/create`, we should
    see an error page with a forbidden error. This is because we are trying to access
    a page with insufficient permissions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们尝试浏览到 `http://hostname/basic/web/rooms/create`，我们应该看到一个包含禁止错误的错误页面。这是因为我们正在尝试访问一个权限不足的页面。
- en: Now, we can execute the authentication simply by going to `http://hostname/basic/web/my-authentication/login`
    and typing `foo` as the username and `foopassword` as the password, since we already
    created a user with these credentials in the database in the previous chapter.
    We should see a successfully logged in page.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过访问 `http://hostname/basic/web/my-authentication/login` 并输入 `foo` 作为用户名和
    `foopassword` 作为密码来执行认证，因为我们已经在上一章的数据库中创建了一个具有这些凭证的用户。我们应该看到一个成功登录的页面。
- en: The last thing to do is to assign the `operator` role to the `foo` user. We
    can use the authorization manager just created in `http://hostname/basic/web/authorization-manager/index`.
    Now, click on the cell referring to the `foo` user and the `operator` role. In
    this way, we have assigned the `operator` role to the `foo` user.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的就是将 `operator` 角色分配给 `foo` 用户。我们可以使用刚刚创建的授权管理器 `http://hostname/basic/web/authorization-manager/index`。现在，点击指向
    `foo` 用户和 `operator` 角色的单元格。这样，我们就已经将 `operator` 角色分配给了 `foo` 用户。
- en: Finally, we can refresh the rooms creation page at `http://hostname/basic/web/rooms/create`.
    We can see now the create action page of the rooms controller.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在 `http://hostname/basic/web/rooms/create` 刷新房间创建页面。现在我们可以看到房间控制器的创建动作页面。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to apply user authentication and authorization
    to an app. The first step was to create an authenticated access to the application.
    For this purpose, we created a database table to manage users and associated it
    to the Yii user component through a user model that extends `IdentityInterface`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将用户认证和授权应用到应用中。第一步是为应用程序创建一个认证访问。为此，我们创建了一个数据库表来管理用户，并通过一个扩展 `IdentityInterface`
    的用户模型将其关联到 Yii 用户组件。
- en: 'The first example in this chapter was building a login form to authenticate
    the user. The next step was to control which actions a user can perform or not,
    and this was the case for the authorization phase too. As you saw, Yii provides
    two solutions for this matter: ACF and RBAC. We configured a controller to use
    ACF and then you saw how RBAC is a more powerful tool to manage user authorization
    with more granularity. Finally, we built an authorization manager all by ourselves.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个例子是构建一个登录表单以验证用户。下一步是控制用户可以执行或不执行哪些动作，这在授权阶段也是如此。正如你所看到的，Yii提供了两种解决方案：ACF
    和 RBAC。我们配置了一个控制器使用 ACF，然后你看到了RBAC是如何作为一个更强大的工具，以更细粒度地管理用户授权。最后，我们完全自己构建了一个授权管理器。
- en: In the next chapter, we will cover topics such as installing and using an advanced
    template and having multiple apps in the same context.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何安装和使用高级模板，以及在同一上下文中拥有多个应用。
