- en: Grabbing Global Readership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned about expanding the capabilities and features
    of Drupal. In this chapter we will look at expanding our readership.
  prefs: []
  type: TYPE_NORMAL
- en: The internet makes the world a smaller place. You might create a blog or online
    store, assuming that your users will be domestic, and be surprised to find that
    some of them are half a world away. Then, after consideration, you might realize
    that with most of the world living somewhere outside your own country, global
    readership can expose your content to many more people.
  prefs: []
  type: TYPE_NORMAL
- en: There is a complicating factor, though. Many of these users—perhaps most—do
    not speak the same language. You could leave it up to the reader's browser to
    translate the content, but let's be honest, instantaneous translation such as
    that provided by Google is problematic at the least with regard to straightforward,
    unambiguous, dictionary-approved source text, but even more so with colloquial
    and idiomatic usage.
  prefs: []
  type: TYPE_NORMAL
- en: I often tell the story of a former client who wanted the UI of his English site
    to be available in Japanese as well. The site sold car parts. The site owner opted
    for low-budget translation, and that likely resulted in the use of online AI translation.
    The result was much lower than expected sales. Why? While the translation was
    fine for menu items such as carburetors and seats, the term used for *Bodies*
    turned out to mean *Corpses*. Oops!
  prefs: []
  type: TYPE_NORMAL
- en: If a global market is important for the increased usage and success of your
    site, it is worth having the translation done by those knowledgeable in the two
    languages and in similar style for both. In other words, using the Queen's English
    for content and Spanish street slang is probably not your intention. Nor is, again,
    using Spanish as an example, having the translation be proper Madrid Spanish while
    your readers are predominantly Latin American.
  prefs: []
  type: TYPE_NORMAL
- en: So you decide to have your content and UI professionally translated. Then what?
    Do you have to have the equivalent of two sites in order to support two languages?
  prefs: []
  type: TYPE_NORMAL
- en: 'That is, create separate menus and pieces of content for each? Nope. Drupal
    has you covered, and just how it does this is what we will be covering in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to declare additional languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to execute a UI translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entering content translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the user to select a preferred language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Drupal is installed, the installer selects a default language for the site.
    In most cases, that language is English. What if there are other languages spoken
    within our target market? What if our country has more than one official language,
    or unofficial languages, or English isn't either? The site can be configured to
    support additional languages, and that is what we must do in order to be able
    to take advantage of internationalization. To get started, navigate to the *Extend*
    page (`/admin/modules`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down, you will find the Multilingual section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98b8388f-8ae3-4544-982c-97a8a6adcc04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each of these modules are part of Drupal''s core, in core, and has a different
    purpose related to internationalization:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuration*** *Transla****tion***: For translating configuration settings,
    such as views, site name, menus, and blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Content Translation: For translating content, such as nodes, taxonomy terms,
    and custom blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interface Translation: For translating registration forms, content submission forms,
    and administration interfaces'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: For declaring additional languages that are usable for translation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language Icons: For providing flags to represent languages when switching between
    them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring additional languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, we need to enable the Language module. Check its box and click the
    *Install* button at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to declare additional languages, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the language module by checking its box and clicking on the Install button
    at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you go to Configuration page (`/admin/config`), you will find a section
    for Regional and Language. To start configuring, click Content language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check Content and you will notice that a configuration form will appear, listing
    each content type. As we are only interested in articles, having a default language
    as the same would be fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box to mark the content type as translatable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A list of fields will appear that will belong to Article. Select all of the
    available fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, check the box that will allow the language to be selected when creating
    and clicking Save configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the current version of Drupal (at the time of writing this book), the meta
    fields should also be selected as translatable. The reason is that if they are
    not selected, an error will likely be given when trying to save, stating that *Non-translatable
    fields can only be changed when updating the original language. *This seems to
    be a bug, because fields that change, such as the creation or update timestamp,
    are not translatable. This means that they should not have new values, as far
    as the translation system is concerned.
  prefs: []
  type: TYPE_NORMAL
- en: Returning to the *Configuration* page, we will choose *Languages* this time.
    Note that English is already configured as the default site language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click +Add language. A select box will appear containing a long list of languages.
    For my site, one of the languages will be **Spanish**, so I'll select that and
    click to add it. Spanish has now been added, though English remains the default
    language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Edit link for Spanish and change the language name to Español. To
    me, it makes more sense to display the language name in its own language for those
    who will be using it. They might not even know what we call their language in
    English.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add another. This time, I will select **Hebrew**. Once it has been added,
    click the Edit link. You will see in the language definition that *Right to left*
    is selected, as this is the direction in which Hebrew is written. I'll edit it
    and translate its name, entering עברית.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to declaring languages for use. Now, let's use them and
    create some multilingual content.
  prefs: []
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a short new article to use for our example. Navigate
    to `/node/create/article`. For my title, I'll enter **My Favorite Time**. For
    the body, I've put **Dawn is my favorite time of the day. **Note that below the
    *Body text* field there is a language selector. Since it is defaulting to **English**,
    I'll leave it unchanged and save my article. If you still have Content moderation
    active, don't forget to save your article as **Published** rather than **Draft**.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide content translations, we need to enable *Content translation*.
    Let's navigate to *Extend* (`/admin/modules`) and do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'With content translation enabled, we have two ways in which to begin a translation:
    the *Translate* tab, that will now be present beside the View, Edit, and Delete
    tabs when viewing the content, or, as a Translate option via the admin content
    page, `/admin/content`, on each Operations selection. Use either to proceed to
    the translations list for your article.'
  prefs: []
  type: TYPE_NORMAL
- en: 'My translations list looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d68ee1e6-4246-4dc7-8ac4-8bb0dd3619c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Each piece of content will have rows corresponding to each configured language.
    The status column identifies whether the content has been translated to that language.
    If it has, there will be an Edit button. If not, there will be an Add button.
    I'll click Add in the row for the Spanish translation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When clicked, the familiar form for editing a node appears. In fact, it appears
    with the content already filled in for each field. You might think that something
    is amiss, because there was not supposed to be a translation yet for this language,
    but there is content instead of empty fields, and it''s not the correct language.
    Don''t panic! The content is supposed to be present for you to see what actually
    needs to be translated, rather than trying to remember. It will appear in the
    default language. I''m going to translate the title and body text. My form will
    now look as it does in the following screenshot. Once your translated content
    seems ready, click the *Save (all translations)* button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ec8478c-ae55-4d11-8063-9edd865442c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having saved this translation, the translation list for my content now shows
    Español, with its translated title, as being published. Next, I''ll create a Hebrew
    translation and save it. The content edit form looks different, because with a
    right-to-left language, the text fields appear on the right and the metadata fields
    on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b8d8354-bbbc-41e1-9502-2a3af1f7763c.png)'
  prefs: []
  type: TYPE_IMG
- en: And that's it! The content is now available in three languages (in the next
    section, we will discuss how a user accesses them).
  prefs: []
  type: TYPE_NORMAL
- en: How does this work behind the scenes? When Drupal stores the field information
    in the database, part of the index used to find that information is code referring
    to the language. When you create the content, initially, a node ID—an integer
    value—is assigned to it. Regardless of how many language translations you create,
    the node ID remains the same. So, the index for the English version might include
    the code `en` for English, `es` for Spanish, and `he` for Hebrew.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering, how does the user select the desired language? That's
    what we'll be covering next!
  prefs: []
  type: TYPE_NORMAL
- en: User language selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to offer content in multiple languages is great, but only if the
    site visitor can take advantage of it. Drupal makes that easy with a language
    switcher.
  prefs: []
  type: TYPE_NORMAL
- en: We need to enable another module. Navigate to *Extend* (`/admin/modules`) and
    enable the *Language Icons* module. Drupal will let you know that this module
    depends on the *Interface Translation* module and will ask whether you want to
    proceed with enabling both. Go ahead.
  prefs: []
  type: TYPE_NORMAL
- en: The Language Icons module provides flag icons for each language. It does this
    by way of a block that needs to be placed somewhere on the page. Let's do that.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to *Structure* | *Block layout* (*/admin/structure/block*). You'll
    need to choose a region of the screen in which to have the language switcher block
    appear, such as *Header* or *Sidebar first.* I chose the latter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the *Place block* button beside whichever region you choose. Scroll down
    to *Language switcher* and click the *Place block* button in its row. A configuration
    screen will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can leave the *Title* as **Language switcher**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the *Display title* box below it; the icons will speak for themselves
    without displaying a block title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The vertical tabs allow constraints to be put on this block. The *Language*
    tab can be used to offer only a subset of the configured languages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *Content types* tab can limit which types of content the translation will
    choose. We don't need to set any limitations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to limit the appearance of the *Language switcher* to just the homepage,
    on the *Pages* tab, we can enter `<front>` into the *Pages* text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the *Save block* button and navigate to the homepage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On my site, I now have a block that looks like what''s shown in the following
    screenshot. Yours will vary based on the language(s) that you chose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/713729a7-2797-4074-8ecf-2fa3f1a72c4f.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on one of the links, the site visitor chooses to receive translated
    content in that language. Content that's not available in the selected language
    will not be presented.
  prefs: []
  type: TYPE_NORMAL
- en: Translating the user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we know how to provide translated content, but what about the rest of the
    page, like the menus? A link like Contact means little to someone who doesn't
    speak English. Fortunately, Drupal provides us with the means to translate the
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: We've already enabled the *Interface Translation* module. We just need to configure
    it. Navigate to *Config* (`/admin/config`) and click the User interface translation
    link in the *Regional and Language* section.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the actions that were necessary to provide translated content have been
    fairly simple. So, you're probably expecting a button to click that will translate
    all of the prompts and menus in the UI. Sorry... not gonna happen.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration interface allows you to enter a translation string for each
    string that Drupal finds in the core and modules interfaces. You can use this
    page, and the many, many, many other pages to translate each, or you can export
    the list of strings and enter translations all into one file and then import it.
  prefs: []
  type: TYPE_NORMAL
- en: This sounds like a lot of work, and that's because it *is* a lot of work. So,
    let's look at the easy way to do it. What? You thought I said... no, what I said
    was that there's no button to translate the interface, but there is an existing
    translation file for many languages that you can download and import.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://localize.drupal.org/download](https://localize.drupal.org/download).
    Here, you will find a list of the available UI translation files. In my case,
    I'm going to download the Drupal 8 version of the file for Spanish and the one
    for Hebrew. Do the same for the language(s) that you chose. The nice thing about
    these files is that they are editable, so you can alter strings or add your own
    when you need new ones, like when you create custom menu links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the *User interface translation* page, click the *Import* tab at the
    top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to and select the translation file that you downloaded
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the applicable language from the *Language* dropdown
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *Import*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I've done this for both languages and the result can be seen in the following
    screenshots, which shows each version of the homepage when using the *Language
    switcher* block.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is in Spanish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c161e77-1f48-4bd9-8da8-c5d201e36dbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the following screenshot version is in Hebrew, an example of a right-to-left
    (RTL) language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7de0fb7d-019e-40d7-acee-b8bdd32e4745.png)'
  prefs: []
  type: TYPE_IMG
- en: This is definitely easier than manually translating every string!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ve learned how to use Drupal''s translation features:
    configuring additional languages, providing content translations, adding icons
    that are used by site visitors to switch languages, and importing user interface
    translations.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use feeds to import content and to
    provide your content to other sites.
  prefs: []
  type: TYPE_NORMAL
