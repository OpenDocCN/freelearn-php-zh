["```php\nreturn [\n    // set target language to be Italian\n    'language' => 'it-IT',\n\n      ....\n      ....\n];\n```", "```php\n// change target language to Italian\n\\Yii::$app->language = 'it-IT';\n```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\web\\Controller;\n\nclass FileTranslatorController extends Controller\n{\n    public function actionIndex()\n    {\n        \\Yii::$app->language = 'en-US';\n        $englishText = \\Yii::t('app', 'Hello World!');\n\n        \\Yii::$app->language = 'it-IT';\n        $italianText = \\Yii::t('app', 'Hello World!');\n\n        return $this->render('index', ['englishText' => $englishText, 'italianText' => $italianText]);\n    }\n}\n```", "```php\n<b>Display Hello World! in two language: English and Italian</b>\n\n<br /><br />\n\nIn English:\n<?= $englishText ?>\n\n<br /><br />\nIn Italian:\n<?= $italianText ?>\n```", "```php\n<?php\n\nreturn [\n    'Hello World!' => 'Hello world!',\n];\n\n?>\n```", "```php\n<?php\n\nreturn [\n    'Hello World!' => 'Ciao Mondo!',\n];\n\n?>\n```", "```php\n$ ./yii message/config config/i18n.php\n\n```", "```php\n./yii message/config common/config/i18n.php\n\n```", "```php\n<?php\n\nreturn [\n    // string, required, root directory of all source files\n    'sourcePath' => __DIR__ . DIRECTORY_SEPARATOR . '..',\n    // array, required, list of language codes that the extracted messages\n    // should be translated to. For example, ['zh-CN', 'de'].\n    'languages' => ['de'],\n    // string, the name of the function for translating messages.\n    // Defaults to 'Yii::t'. This is used as a mark to find the messages to be\n    // translated. You may use a string for single function name or an array for\n    // multiple function names.\n    'translator' => 'Yii::t',\n    // boolean, whether to sort messages by keys when merging new messages\n    // with the existing ones. Defaults to false, which means the new (untranslated)\n    // messages will be separated from the old (translated) ones.\n    'sort' => false,\n    // boolean, whether to remove messages that no longer appear in the source code.\n    // Defaults to false, which means each of these messages will be enclosed with a pair of '@@' marks.\n    'removeUnused' => false,\n    // array, list of patterns that specify which files/directories should NOT be processed.\n    // If empty or not set, all files/directories will be processed.\n    // A path matches a pattern if it contains the pattern string at its end. For example,\n    // '/a/b' will match all files and directories ending with '/a/b';\n    // the '*.svn' will match all files and directories whose name ends with '.svn'.\n    // and the '.svn' will match all files and directories named exactly '.svn'.\n    // Note, the '/' characters in a pattern matches both '/' and '\\'.\n    // See helpers/FileHelper::findFiles() description for more details on pattern matching rules.\n    'only' => ['*.php'],\n    // array, list of patterns that specify which files (not directories) should be processed.\n    // If empty or not set, all files will be processed.\n    // Please refer to \"except\" for details about the patterns.\n    // If a file/directory matches both a pattern in \"only\" and \"except\", it will NOT be processed.\n    'except' => [\n        '.svn',\n        '.git',\n        '.gitignore',\n        '.gitkeep',\n        '.hgignore',\n        '.hgkeep',\n        '/messages',\n    ],\n\n    // 'php' output format is for saving messages to php files.\n    'format' => 'php',\n    // Root directory containing message translations.\n    'messagePath' => __DIR__,\n    // boolean, whether the message file should be overwritten with the merged messages\n    'overwrite' => true,\n\n    /*\n    // 'db' output format is for saving messages to database.\n    'format' => 'db',\n    // Connection component to use. Optional.\n    'db' => 'db',\n    // Custom source message table. Optional.\n    // 'sourceMessageTable' => '{{%source_message}}',\n    // Custom name for translation message table. Optional.\n    // 'messageTable' => '{{%message}}',\n    */\n\n    /*\n    // 'po' output format is for saving messages to gettext po files.\n    'format' => 'po',\n    // Root directory containing message translations.\n    'messagePath' => __DIR__ . DIRECTORY_SEPARATOR . 'messages',\n    // Name of the file that will be used for translations.\n    'catalog' => 'messages',\n    // boolean, whether the message file should be overwritten with the merged messages\n    'overwrite' => true,\n    */\n];\n```", "```php\n'languages' => ['en', 'it', 'fr'],\n```", "```php\n'messagePath' =>  __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'messages',\n```", "```php\n    'except' => [\n        '.svn',\n        '.git',\n        '.gitignore',\n        '.gitkeep',\n        '.hgignore',\n        '.hgkeep',\n        '/messages',\n        '/vendor'\n    ],\n```", "```php\n$ ./yii message config/i18n.php\n\n```", "```php\n    public function actionIndex()\n    {\n        $message = \\Yii::t('app', 'this message must be translated!');\n\n        return $this->render('index');\n    }\n```", "```php\n$ ./yii message config/i18n.php\n\n```", "```php\n    public function actionHelloWorldWithName($name='')\n    {\n        $text = \\Yii::t('app', 'Hello World! I\\'m {name}', ['name' => $name]);\n\n        return $this->render('helloWorldWithName', ['text' => $text]);        \n    }\n```", "```php\n<?= $text ?>\n```", "```php\n$ ./yii message config/i18n.php\n\n```", "```php\n{PlaceholderName, ParameterType, ParameterStyle}\n```", "```php\n// if $n = 0, it shows \"There are no books!\"\n// if $n = 1, it shows \"There is one book!\"\n// if $n = 4, it shows \"There are 4 books!\"\n\necho \\Yii::t('app', 'There {n, plural, =0{are no books} =1{is one book} other{are # books}}!', ['n' => $n]);\n```", "```php\nCREATE TABLE source_message (\n    id INTEGER PRIMARY KEY AUTO_INCREMENT,\n    category VARCHAR(32),\n    message TEXT\n);\n\nCREATE TABLE message (\n    id INTEGER,\n    language VARCHAR(16),\n    translation TEXT,\n    PRIMARY KEY (id, language),\n    CONSTRAINT fk_message_source_message FOREIGN KEY (id)\n        REFERENCES source_message (id) ON DELETE CASCADE ON UPDATE RESTRICT\n);\n```", "```php\nINSERT INTO `source_message` (`id`, `category`, `message`) VALUES\n(1, 'app', 'Hello World from Database!');\n\nINSERT INTO `message` (`id`, `language`, `translation`) VALUES\n(1, 'it', 'Ciao Mondo dal Database!');\n```", "```php\n'components' => [\n    // ...\n    'i18n' => [\n        'translations' => [\n            'app' => [\n                    'class' => 'yii\\i18n\\DbMessageSource',\n                    //'messageTable' => 'message,\n                    //'sourceMessageTable' => 'source_message,\n\n            ],\n        ],\n    ],\n],\n```", "```php\n     public function actionHelloWorldFromDatabase()\n    {\n        \\Yii::$app->language = 'it';\n        $text = \\Yii::t('app', 'Hello World from Database!');\n\n        return $this->render('helloWorldFromDatabase', ['text' => $text]);        \n    }\n```", "```php\n<?= $text ?>\n```", "```php\n<?php\nuse yii\\helpers\\Url;\nuse yii\\widgets\\ActiveForm;\n?>\n\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <legend>Rooms with translated descriptions</legend>\n\n        <?php $form = ActiveForm::begin([]); ?>\n        <table class=\"table\">\n            <tr>\n                <th>#</th>\n                <th>Floor</th>\n                <th>Room number</th>\n                <th>Description - English</th>\n                <th>Description - Italian</th>\n                <th>Description - French</th>\n            </tr>\n            <?php for($k=0;$k<count($rooms);$k++) : ?>\n                <?php $room = $rooms[$k]; ?>\n                <input type=\"hidden\" name=\"Room[<?= $k ?>][id]\" value=\"<?= $room->id ?>\" />\n                <tr>\n                    <td><?php echo $k+1 ?></td>\n                    <td><?php echo $room->floor ?></td>\n                    <td><?php echo $room->room_number ?></td>\n                    <td><input type=\"text\" name=\"Room[<?= $k ?>][description][en]\" value=\"<?= $room->description ?>\" /></td>\n                    <td><input type=\"text\" name=\"Room[<?= $k ?>][description][it]\" value=\"<?= Yii::$app->i18n->translate('app', $room->description, [], 'it') ?>\" /></td>\n                    <td><input type=\"text\" name=\"Room[<?= $k ?>][description][fr]\" value=\"<?= Yii::$app->i18n->translate('app', $room->description, [], 'fr') ?>\" /></td>\n                </tr>\n            <?php endfor; ?>\n        </table>\n        <br />\n        <input type=\"submit\" class=\"btn btn-primary\" value=\"Submit descriptions\" />\n        <?php ActiveForm::end(); ?>\n    </div>\n</div>\n```", "```php\n    public function actionIndexWithTranslatedDescriptions()\n    {\n        if(isset($_POST['Room']))\n        {\n            $roomsInput = $_POST['Room'];\n            foreach($roomsInput as $item)\n            {\n                $sourceMessage = \\app\\models\\SourceMessage::findOne(['message' => $item['description']]);\n\n                // If null, I need to create source message\n                if($sourceMessage == null)\n                {\n                    $sourceMessage = new \\app\\models\\SourceMessage();\n                }\n                $sourceMessage->category = 'app';\n                $sourceMessage->message = $item['description']['en'];\n                $sourceMessage->save();\n\n                $otherLanguages = ['it', 'fr'];\n\n                foreach($otherLanguages as $otherLang)\n                {\n                    $message = \\app\\models\\Message::findOne(['id' => $sourceMessage->id, 'language' => $otherLang]);\n                    if($message == null)\n                    {\n                        $message = new \\app\\models\\Message();\n                    }\n                    $message->id = $sourceMessage->id;\n                    $message->language = $otherLang;\n                    $message->translation = $item['description'][$otherLang];\n                    $message->save();\n                }\n\n                // Room to update\n                $roomToUpdate = \\app\\models\\Room::findOne($item['id']);\n                $roomToUpdate->description = $item['description']['en'];\n                $roomToUpdate->save();\n            }\n        }\n\n        $rooms = Room::find()\n        ->all();\n\n        return $this->render('indexWithTranslatedDescriptions', ['rooms' => $rooms]);\n    }\n```"]