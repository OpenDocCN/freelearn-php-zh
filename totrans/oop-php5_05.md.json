["```php\nclass Reflection { }\ninterface Reflector { }\nclass ReflectionException extends Exception { }\nclass ReflectionFunction implements Reflector { }\nclass ReflectionParameter implements Reflector { }\nclass ReflectionMethod extends ReflectionFunction { }\nclass ReflectionClass implements Reflector { }\nclass ReflectionObject extends ReflectionClass { }\nclass ReflectionProperty implements Reflector { }\nclass ReflectionExtension implements Reflector { }\n\n```", "```php\n<?php\nclass ReflectionClass implements Reflector\n{\n   final private __clone()\n   public object __construct(string name)\n   public string __toString()\n   public static string export(mixed class, bool return)\n   public string getName()\n   public bool isInternal()\n   public bool isUserDefined()\n   public bool isInstantiable()\n   public bool hasConstant(string name)\n   public bool hasMethod(string name)\n   public bool hasProperty(string name)\n   public string getFileName()\n   public int getStartLine()\n   public int getEndLine()\n   public string getDocComment()\n   public ReflectionMethod getConstructor()\n   public ReflectionMethod getMethod(string name)\n   public ReflectionMethod[] getMethods()\n   public ReflectionProperty getProperty(string name)\n   public ReflectionProperty[] getProperties()\n   public array getConstants()\n   public mixed getConstant(string name)\n   public ReflectionClass[] getInterfaces()\n   public bool isInterface()\n   public bool isAbstract()\n   public bool isFinal()\n   public int getModifiers()\n   public bool isInstance(stdclass object)\n   public stdclass newInstance(mixed args)\n   public stdclass newInstanceArgs(array args)\n   public ReflectionClass getParentClass()\n   public bool isSubclassOf(ReflectionClass class)\n   public array getStaticProperties()\n   public mixed getStaticPropertyValue(string name [, mixed default])\n   public void setStaticPropertyValue(string name, mixed value)\n   public array getDefaultProperties()\n   public bool isIterateable()\n   public bool implementsInterface(string name)\n   public ReflectionExtension getExtension()\n   public string getExtensionName()\n}\n?>\n\n```", "```php\n<?php\ninterface NSerializable\n{\n   // ...\n}\n\nclass Object\n{\n   // ...\n}\n\n/**\n* A counter class\n*/\nclass Counter extends Object implements NSerializable \n{\n   const START = 0;\n   private static $c = Counter::START;\n\n   /**\n    * Invoke counter\n    *\n    * @access  public\n    * @return  int\n    */\n   public function count() \n   {\n       return self::$c++;\n   }\n}\n\n// Create an instance of the ReflectionClass class\n$class = new ReflectionClass('Counter');\n\n// Print out basic information\nprintf(\n   \"===> The %s%s%s %s '%s' [extends %s]\\n\" .\n   \"     declared in %s\\n\" .\n   \"     lines %d to %d\\n\" .\n   \"     having the modifiers %d [%s]\\n\",\n       $class->isInternal() ? 'internal' : 'user-defined',\n       $class->isAbstract() ? ' abstract' : '',\n       $class->isFinal() ? ' final' : '',\n       $class->isInterface() ? 'interface' : 'class',\n       $class->getName(),\n       var_export($class->getParentClass(), 1),\n       $class->getFileName(),\n       $class->getStartLine(),\n       $class->getEndline(),\n       $class->getModifiers(),\n       implode(' ', Reflection::getModifierNames(\n                                   $class->getModifiers()))\n       );\n\n// Print documentation comment\nprintf(\"---> Documentation:\\n %s\\n\", \n                    var_export($class->getDocComment(), 1));\n\n// Print which interfaces are implemented by this class\nprintf(\"---> Implements:\\n %s\\n\", \n                    var_export($class->getInterfaces(), 1));\n\n// Print class constants\nprintf(\"---> Constants: %s\\n\", \n                     var_export($class->getConstants(), 1));\n\n// Print class properties\nprintf(\"---> Properties: %s\\n\", \n                     var_export($class->getProperties(), 1));\n\n// Print class methods\nprintf(\"---> Methods: %s\\n\", \n                     var_export($class->getMethods(), 1));\n\n// If this class is instantiable, create an instance\nif ($class->isInstantiable()) \n{\n   $counter = $class->newInstance();\n   echo '---> $counter is instance? '; \n   echo $class->isInstance($counter) ? 'yes' : 'no';\n   echo \"\\n---> new Object() is instance? \";\n   echo $class->isInstance(new Object()) ? 'yes' : 'no';\n}\n?>\n```", "```php\n<?php\nclass ReflectionMethod extends ReflectionFunction\n{\n   public __construct(mixed class, string name)\n   public string __toString()\n   public static string export(mixed class, string name, bool return)\n   public mixed invoke(stdclass object, mixed args)\n   public mixed invokeArgs(stdclass object, array args)\n   public bool isFinal()\n   public bool isAbstract()\n   public bool isPublic()\n   public bool isPrivate()\n   public bool isProtected()\n   public bool isStatic()\n   public bool isConstructor()\n   public bool isDestructor()\n   public int getModifiers()\n   public ReflectionClass getDeclaringClass()\n\n   // Inherited from ReflectionFunction\n   final private __clone()\n   public string getName()\n   public bool isInternal()\n   public bool isUserDefined()\n   public string getFileName()\n   public int getStartLine()\n   public int getEndLine()\n   public string getDocComment()\n   public array getStaticVariables()\n   public bool returnsReference()\n   public ReflectionParameter[] getParameters()\n   public int getNumberOfParameters()\n   public int getNumberOfRequiredParameters()\n}\n?>\n\n```", "```php\n<?php\nclass Counter\n{\n   private static $c = 0;\n\n   /**\n    * Increment counter\n    *\n    * @final\n    * @static\n    * @access  public\n    * @return  int\n    */\n   final public static function increment()\n   {\n       return ++self::$c;\n   }\n}\n// Create an instance of the Reflection_Method class\n$method = new ReflectionMethod('Counter', 'increment');\n// Print out basic information\nprintf(\n   \"===> The %s%s%s%s%s%s%s method '%s' (which is %s)\\n\" .\n   \"     declared in %s\\n\" .\n   \"     lines %d to %d\\n\" .\n   \"     having the modifiers %d[%s]\\n\",\n       $method->isInternal() ? 'internal' : 'user-defined',\n       $method->isAbstract() ? ' abstract' : '',\n       $method->isFinal() ? ' final' : '',\n       $method->isPublic() ? ' public' : '',\n       $method->isPrivate() ? ' private' : '',\n       $method->isProtected() ? ' protected' : '',\n       $method->isStatic() ? ' static' : '',\n       $method->getName(),\n       $method->isConstructor() ? 'the constructor' : \n                                      'a regular method',\n       $method->getFileName(),\n       $method->getStartLine(),\n       $method->getEndline(),\n       $method->getModifiers(),\n       implode(' ', Reflection::getModifierNames(\n                                 $method->getModifiers()))\n       );\n\n// Print documentation comment\nprintf(\"---> Documentation:\\n %s\\n\", \n                  var_export($method->getDocComment(), 1));\n\n// Print static variables if existant\nif ($statics= $method->getStaticVariables()) {\n   printf(\"---> Static variables: %s\\n\", var_export($statics, 1));\n}\n\n// Invoke the method\nprintf(\"---> Invokation results in: \");\nvar_dump($method->invoke(NULL));\n?>\n```", "```php\n===> The user-defined final public static method 'increment' (which is a regular method)\n declared in PHPDocument1\n lines 14 to 17\n having the modifiers 261[final public static]\n---> Documentation:\n '/**\n * Increment counter\n *\n * @final\n * @static\n * @access  public\n * @return  int\n */'\n---> Invokation results in: int(1)\n\n```", "```php\n<?php\nclass ReflectionParameter implements Reflector\n{\n   final private __clone()\n   public object __construct(string name)\n   public string __toString()\n   public static string export(mixed function, mixed parameter, \n                                                      bool return)\n   public string getName()\n   public bool isPassedByReference()\n   public ReflectionFunction getDeclaringFunction()\n   public ReflectionClass getDeclaringClass()\n   public ReflectionClass getClass()\n   public bool isArray()\n   public bool allowsNull()\n   public bool isPassedByReference()\n   public bool getPosition()\n   public bool isOptional()\n   public bool isDefaultValueAvailable()\n   public mixed getDefaultValue()\n}\n?>\n```", "```php\n<?php\nfunction foo($a, $b, $c) { }\nfunction bar(Exception $a, &$b, $c) { }\nfunction baz(ReflectionFunction $a,  $b = 1, $c = null) { }\nfunction abc() { }\n\n// Create an instance of Reflection_Function with the\n// parameter given from the command line.    \n$reflect = new ReflectionFunction(\"baz\");\necho $reflect;\nforeach ($reflect->getParameters() as $i => $param) \n{\n   printf(\n       \"-- Parameter #%d: %s {\\n\".\n       \"   Class: %s\\n\".\n       \"   Allows NULL: %s\\n\".\n       \"   Passed to by reference: %s\\n\".\n       \"   Is optional?: %s\\n\".\n       \"}\\n\",\n       $i, \n       $param->getName(),\n       var_export($param->getClass(), 1),\n       var_export($param->allowsNull(), 1),\n       var_export($param->isPassedByReference(), 1),\n       $param->isOptional() ? 'yes' : 'no'\n   );\n}\n?>\n\n```", "```php\nFunction [ <user> <visibility error> function baz ] \n{\n @@ C:\\OOP with PHP5\\Codes\\ch5\\test.php 4 - 4\n - Parameters [3] \n {\n Parameter #0 [ <required> ReflectionFunction &$a ]\n Parameter #1 [ <optional> $b = 1 ]\n Parameter #2 [ <optional> $c = NULL ]\n }\n}\n-- Parameter #0: a \n{\n Class: ReflectionClass::__set_state(array(\n 'name' => 'ReflectionFunction',\n))\n Allows NULL: false\n Passed to by reference: true\n Is optional?: no\n}\n-- Parameter #1: b \n{\n Class: NULL\n Allows NULL: true\n Passed to by reference: false\n Is optional?: yes\n}\n-- Parameter #2: c \n{\n Class: NULL\n Allows NULL: true\n Passed to by reference: false\n Is optional?: yes\n}\n\n```", "```php\n<?php\nclass ReflectionProperty implements Reflector\n{\n   final private __clone()\n   public __construct(mixed class, string name)\n   public string __toString()\n   public static string export(mixed class, string name, bool return)\n   public string getName()\n   public bool isPublic()\n   public bool isPrivate()\n   public bool isProtected()\n   public bool isStatic()\n   public bool isDefault()\n   public int getModifiers()\n   public mixed getValue(stdclass object)\n   public void setValue(stdclass object, mixed value)\n   public ReflectionClass getDeclaringClass()\n   public string getDocComment()\n}\n?>\n```", "```php\n<?php\nclass String\n{\n   public $length  = 5;\n}\n\n// Create an instance of the ReflectionProperty class\n$prop = new ReflectionProperty('String', 'length');\n// Print out basic information\nprintf(\n   \"===> The%s%s%s%s property '%s' (which was %s)\\n\" .\n   \"     having the modifiers %s\\n\",\n       $prop->isPublic() ? ' public' : '',\n       $prop->isPrivate() ? ' private' : '',\n       $prop->isProtected() ? ' protected' : '',\n       $prop->isStatic() ? ' static' : '',\n       $prop->getName(),\n       $prop->isDefault() ? 'declared at compile-time' : \n                                     'created at run-time',\n       var_export(Reflection::getModifierNames(\n                                   $prop->getModifiers()), 1)\n      );  \n\n// Create an instance of String\n$obj= new String();\n\n// Get current value\nprintf(\"---> Value is: \");\nvar_dump($prop->getValue($obj));\n\n// Change value\n$prop->setValue($obj, 10);\nprintf(\"---> Setting value to 10, new value is: \");\nvar_dump($prop->getValue($obj));\n\n// Dump object\nvar_dump($obj);\n?>\n```", "```php\n===> The public property 'length' (which was declared at compile-time)\n having the modifiers array (\n 0 => 'public',\n)\n---> Value is: int(5)\n---> Setting value to 10, new value is: int(10)\nobject(String)#2 (1) {\n [\"length\"]=>\n int(10)\n}\n\n```", "```php\nfunction selectUser($field, $condition)\n{\n  if (!empty($condition))\n  {\n    $query = \"{$field}= '{$condition}'\";\n  }\n  else \n      $query = \"{$field}\";\n      echo \"select * from users where {$query}\";\n  $result = mysql_query(\"select * from users where {$query}\");\n  $results = array();\n  while ($data = mysql_fetch_array($result))\n  {\n    $results[] = $data;\n  }\n  return $results;\n}\n```", "```php\nprint_r(selectUser(\"id\",\"1\");\n```", "```php\n(\n  [0] => Array\n    (\n      [0] => 1\n      [id] => 1\n      [1] => afif\n      [name] => afif\n      [2] => 47bce5c74f589f4867dbd57e9ca9f808\n      [pass] => 47bce5c74f589f4867dbd57e9ca9f808\n    )\n)\n```", "```php\nprint_r(selectUser(\"id\",$_SESSION['id']);\n```", "```php\n(\n  [0] => Array\n    (\n      [0] => 1\n      [id] => 1\n      [1] => afif\n      [name] => afif\n      [2] => 47bce5c74f589f4867dbd57e9ca9f808\n      [pass] => 47bce5c74f589f4867dbd57e9ca9f808\n    )\n\n   1] => Array\n    (\n      [0] => 2\n      [id] => 2\n      [1] => 4b8ed057e4f0960d8413e37060d4c175\n      [name] => 4b8ed057e4f0960d8413e37060d4c175\n      [2] => 74b87337454200d4d33f80c4663dc5e5\n      [pass] => 74b87337454200d4d33f80c4663dc5e5\n    )\n)\n```", "```php\n<?\necho get_include_path()\n?>\n```", "```php\n<?\n//class.wordcount.php\nclass wordcount\n{\n  public function countWords($sentence)\n  {\n    return count(split(\" \",$sentence));\n  }\n}\n?>\n```", "```php\n<?\n//class.testwordcount.php\nrequire_once \"PHPUnit/Framework/TestCase.php\";\nrequire_once \"class.wordcount.php\";\n\nclass TestWordCount extends PHPUnit_Framework_TestCase \n{\n  public function testCountWords()\n  {\n    $Wc = new WordCount();\n    $TestSentence = \"my name is afif\";\n    $WordCount = $Wc->countWords($TestSentence);\n    $this->assertEquals(4,$WordCount);\n  }\n}\n?>\n```", "```php\n<?\n//testsuite.wordcount.php\nrequire_once 'PHPUnit/TextUI/TestRunner.php';\nrequire_once \"PHPUnit/Framework/TestSuite.php\";\nrequire_once \"class.testwordcount.php\";\n\n$suite = new PHPUnit_Framework_TestSuite();\n$suite->addTestSuite(\"TestWordCount\");\nPHPUnit_TextUI_TestRunner::run($suite);\n?>\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\nTime: 00:00\nOK (1 test)\n```", "```php\npublic function testCountWordsWithSpaces()\n{\n  $wc= new WordCount();\n  $testSentence = \"my name is Anonymous \";\n  $wordCount = $Wc->countWords($testSentence);\n  $this->assertEquals(4,$wordCount);\t\t\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n.F\n\nTime: 00:00\n\nThere was 1 failure:\n\n1) testCountWordsWithSpaces(TestWordCount)\nFailed asserting that <integer:5> is equal to <integer:4>.\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\FirstTest.php:34\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\FirstTest.php:40\nC:\\Program Files\\Zend\\ZendStudio-5.2.0\\bin\\php5\\dummy.php:1\n\nFAILURES!\nTests: 2, Failures: 1.\n```", "```php\nclass WordCount\n{\n  public function countWords($sentence)\n  {\n    $newsentence = preg_replace(\"~\\s+~\",\" \",$sentence);\n    return count(split(\" \",$newsentence));\n  }\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n..\n\nTime: 00:00\n\nOK (2 tests)\n```", "```php\npublic function testCountWordsWithNewLine()\n{\n  $Wc = new WordCount();\n  $TestSentence = \"my name is \\n\\r Anonymous\";\n  $WordCount = $Wc->countWords($TestSentence);\n  $this->assertEquals(4,$WordCount);\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n...\n\nTime: 00:00\n\nOK (3 tests)\n```", "```php\n//class.emailvalidator.php\nclass EmailValidator\n{\n  public function validateEmail($email)\n  {\n    $pattern = \"/[A-z0-9]{1,64}@[A-z0-9]+\\.[A-z0-9]{2,3}/\";\n    preg_match($pattern, $email,$matches);\n    return (strlen($matches[0])==strlen($email)?true:false);\n  }\n}\n?>\n```", "```php\nclass TestEmailValidator extends PHPUnit_Framework_TestCase \n{\n  private $Ev;\n  protected function setup()\n  {\n    $this->Ev = new EmailValidator();\n  }\n\n  protected  function tearDown()\n  {\n    unset($this->Ev);\n  }\n\n  public function testSimpleEmail()\n  {\n    $result = $this->Ev->validateEmail(\"has.in@somewherein.net\");\n    $this->assertTrue($result);\n  }\n}\n```", "```php\n$suite = new PHPUnit_Framework_TestSuite();\n$suite->addTestSuite(\"TestEmailValidator\");\nPHPUnit_TextUI_TestRunner::run($suite);\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n...\n\nTime: 00:00\n\nOK (1 test)\n```", "```php\nclass TestEmailValidator extends PHPUnit_Framework_TestCase \n{\n  private $Ev;\n  protected function setUp()\n  {\n    $this->Ev = new EmailValidator();\n  }\n\n  protected  function tearDown()\n  {\n    unset($this->Ev);\n  }\n\n  public function testSimpleEmail()\n  {\n    $result = $this->Ev->validateEmail(\"hasin@somewherein.net\");\n    $this->assertTrue($result);\n  }\n\n  public function testEmailWithDotInName()\n  {\n    $result = $this->Ev->validateEmail(\"has.in@somewherein.net\");\n    $this->assertTrue($result);\n  }\n\n  public function testEmailWithComma()\n  {\n    $result = $this->Ev->validateEmail(\"has,in@somewherein.net\");\n    $this->assertFalse($result);\n  }\n\n  public function testEmailWithSpace()\n  {\n    $result = $this->Ev->validateEmail(\"has in@somewherein.net\");\n    $this->assertTrue($result);\n  }\n\n  public function testEmailLengthMoreThan64Char()\n  {\n    $result = \n    $this->Ev->validateEmail(str_repeat(\"h\",67).\"@somewherein.net\");\n    $this->assertFalse($result);\n  }\n\n  public function testEmailWithInValidCharacters()\n  {\n    $result = $this->Ev->validateEmail(\"has#in@somewherein.net\");\n    $this->assertFalse($result);\n  }\n\n  public function testEmailWithNoDomain()\n  {\n    $result = $this->Ev->validateEmail(\"hasin@\");\n    $this->assertFalse($result);\n  }\n\n  public function testEmailWithInvalidDomain()\n  {\n    $result = \n       $this->Ev->validateEmail(\"hasin@somewherein.comnetorg\");\n    $this->assertFalse($result);\n  }\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n.F.F....\n\nTime: 00:00\n\nThere were 1 failures:\n\n1) testEmailWithDotInName(TestEmailValidator)\nFailed asserting that <boolean:false> is identical to <boolean:true>.\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\EmailValidatorTest.php:40\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\EmailValidatorTest.php:83\nC:\\Program Files\\Zend\\ZendStudio-5.2.0\\bin\\php5\\dummy.php:1\n```", "```php\nFAILURES!\nTests: 8, Failures: 1.\n\n```", "```php\nclass EmailValidator\n{\n  public function validateEmail($email)\n  {\n    $pattern = \"/[A-z0-9\\.]{1,64}@[A-z0-9]+\\.[A-z0-9]{2,3}/\";\n    preg_match($pattern, $email,$matches);\n    return (strlen($matches[0])==strlen($email)?true:false);\n  }\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n........\n\nTime: 00:00\n\nOK (8 tests)\n```", "```php\n<?\nclass DB\n{\n  private $connection;\n\n  public function __construct()\n  {\n    $this->connection = mysql_connect(\"localhost\",\"root\",\"root1234\");\n    mysql_select_db(\"test\",$this->connection);\n  }\n  public function insertData($data)\n  {\n    $fields = join(array_keys($data),\",\");\n    $values = \"'\".join(array_values($data),\",\").\"'\";\n\n    $query = \"INSERT INTO users({$fields}) values({$values})\";\n    return mysql_query($query, $this->connection);\n  }\n\n  public function deleteData($id)\n  {\n    $query = \"delete from users where id={$id}\";\n    return mysql_query($query, $this->connection);\n  }\n\n  public function updateData($id, $data)\n  {\n    $queryparts = array();\n    foreach ($data as $key=>$value)\n    {\n      $queryparts[] = \"{$key} = '{$value}'\";\n    }\n\n    $query = \"UPDATE users SET \".join($queryparts,\",\").\" \n                                           WHERE id='{$id}'\";\n    return mysql_query($query, $this->connection);\n  }\n}\n?>\n```", "```php\n<?\nrequire_once \"PHPUnit/Framework/TestCase.php\";\n\nclass DBTester extends PHPUnit_Framework_TestCase\n{\n  private $connection;\n  private $Db;\n\n  protected function setup()\n  {\n    $this->Db = new DB();\n\n    $this->connection = mysql_connect(\"localhost\",\"root\",\"root1234\");\n    mysql_select_db(\"abcd\",$this->connection);\n  }\n\n  protected  function tearDown()\n  {\n    mysql_close($this->connection);\n  }\n\n  public function testValidInsert()\n  {\n    $data = array(\"name\"=>\"afif\",\"pass\"=>md5(\"hello world\"));\n    mysql_query(\"delete from users\");\n\n    $result = $this->Db->insertData($data);\n    $this->assertNotNull($result);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(1, $affected_rows);\n  }\n\n  public function testInvalidInsert()\n  {\n    $data = array(\"names\"=>\"afif\",\"passwords\"=>md5(\"hello world\"));\n    mysql_query(\"delete from users\");\n\n    $result = $this->Db->insertData($data);\n    $this->assertNotNull($result);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(-1, $affected_rows);\n  }\n\n  public function testUpdate()\n  {\n    $data = array(\"name\"=>\"afif\",\"pass\"=>md5(\"hello world\"));\n    mysql_query(\"truncate table users\");\n\n    $this->Db->insertData($data);\n\n    $data = array(\"name\"=>\"afif2\",\"pass\"=>md5(\"hello world\"));\n    $result = $this->Db->updateData(1, $data);\n    $this->assertNotNull($result);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(1, $affected_rows);\n  }\n\n  public function testDelete()\n  {\n    $data = array(\"name\"=>\"afif\",\"pass\"=>md5(\"hello world\"));\nmysql_query(\"truncate table users\");\n\n    $this->Db->insertData($data);\n    $result = $this->Db->deleteData(1);\n    $this->assertNotNull($result);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(1, $affected_rows);\n\n  }\n}\n?>\n```", "```php\n<?\nrequire_once 'PHPUnit/TextUI/TestRunner.php';\nrequire_once \"PHPUnit/Framework/TestSuite.php\";\n$suite = new PHPUnit_Framework_TestSuite();\n$suite->addTestSuite(\"DBTester\");\nPHPUnit_TextUI_TestRunner::run($suite);\n\n?>\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n....\n\nTime: 00:00\n\nOK (4 tests)\n```", "```php\npublic function testInvalidUpdate()\n  {\n    $data = array(\"name\"=>\"afif\",\"pass\"=>md5(\"hello world\"));\n    mysql_query(\"truncate table users\");\n\n    $this->Db->insertData($data);\n\n    $data = array(\"name\"=>\"afif2\",\"pass\"=>md5(\"hello world\"));\n    $result = $this->Db->updateData(2, $data);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(0, $affected_rows);\n}\n\n  public function testInvalidDelete()\n  {\n    $data = array(\"name\"=>\"afif\",\"pass\"=>md5(\"hello world\"));\n    mysql_query(\"truncate table users\");\n\n    $this->Db->insertData($data);\n    $result = $this->Db->deleteData(\"*\");\n    $this->assertNotNull($result);\n\n    $affected_rows = mysql_affected_rows($this->connection);\n    $this->assertEquals(-1, $affected_rows);\n\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\n......\n\nTime: 00:00\n\nOK (6 tests)\n```", "```php\n<?\nclass FeedbackTester extends PHPUnit_Framework_TestCase\n{\n  public function testUsersEmail()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testInvalidDomain()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testCaptchaGenerator()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testCaptchaChecker()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testFormRenderer()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testFormHandler()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testValidUserName()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testValidSubject()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testValidContent()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testFeedbackSender()\n  {\n    $this->markTestIncomplete();\n  }\n  public function testConfirmer()\n  {\n    $this->markTestIncomplete();\n  }\n\n}\n?>\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\nIIIIIIIIIII\n\nTime: 00:00\n\nOK, but incomplete or skipped tests!\nTests: 11, Incomplete: 11.\n```", "```php\npublic function testValidInput()\n{\n  $this->markTestIncomplete();\n}\n```", "```php\npublic function testValidUserName()\n{\n  $this->markTestSkipped();\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\nIIIIIISSSIII\n\nTime: 00:00\n\nOK, but incomplete or skipped tests!\nTests: 12, Incomplete: 9, Skipped: 3.\n```", "```php\npublic function testFormRenderer(){\n\n  $testResult = true;\n  $message = \"\";\n  $Fm= new FeedbackManager();\n  ob_start();\n  $Fm->renderFeedbackForm();\n  $output = ob_get_clean();\n\n  if (strpos($output, \"name='email'\")===false && $testResult==true) \n  list($testResult, $message) = array(false, \n                                   \"Email field is not present\");\n  if (strpos($output, \"name='username'\")===false && \n                                           $testResult==true) \n  list($testResult, $message) = array(false, \n                             \"Username is field not present\");\n\n  if (strpos($output, \"name='subject'\")===false && $testResult==true) \n  list($testResult, $message) = array(false, \n                                     \"Subject field is not present\");\n\n  if (strpos($output, \"name='message'\")===false && $testResult==true) \n  list($testResult, $message) = array(false, \n                                    \"Message field is not present\");\n\n  $this->assertTrue($testResult, $message);\n  //$this->markTestIncomplete();\n}\n```", "```php\nclass FeedBackManager \n<?\n{\n\n  public function renderFeedbackForm()\n  {\n    $form = <<< END\n    <form method=POST action=\"\">\n      Name: <br/>\n      <input type='text' name='username'><br/>\n      Email: <br/>\n      <input type='text' name='email'><br/>\n      Subject: <br/>\n      <input type='text' name='subject'><br/>\n\n      <input type='submit' value='submit>\t\n    </form>\n    END;\n    echo $form;\n  }\n}\n?>\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\nIIIIFISSSIII\n\nTime: 00:00\n\nThere was 1 failure:\n\n1) testFormRenderer(FeedbackTester)\nMessage field is not present\nFailed asserting that <boolean:false> is identical to <boolean:true>.\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\BlankTest.php:52\nC:\\OOP with PHP5\\Codes\\ch5\\UnitTest\\BlankTest.php:104\nC:\\Program Files\\Zend\\ZendStudio-5.2.0\\bin\\php5\\dummy.php:1\n\nFAILURES!\nTests: 12, Failures: 1, Incomplete: 8, Skipped: 3.\n```", "```php\nclass FeedBackManager \n{\n\n  public function renderFeedbackForm()\n  {\n    $form = <<< END\n    <form method=POST action=\"\">\n      Name: <br/>\n      <input type='text' name='username'><br/>\n      Email: <br/>\n      <input type='text' name='email'><br/>\n       Subject: <br/>\n      <input type='text' name='subject'><br/>\n Message: <br/>\n <textarea name='message'></textarea><br/>\n      <input type='submit' value='submit>\t\n    </form>\nEND;\n    echo $form;\n  }\n}\n```", "```php\nPHPUnit 3.0.5 by Sebastian Bergmann.\n\nIIII.ISSSIII\n\nTime: 00:00\n\nOK, but incomplete or skipped tests!\nTests: 12, Incomplete: 8, Skipped: 3.\n```", "```php\npublic function testFormRenderer(){\n\n  $testResult = true;\n  $message = \"\";\n  $Fm = new FeedBackManager();\n  ob_start();\n  $Fm->renderFeedbackForm();\n  $output = ob_get_clean();\n\n  $testResult = strpos($output, \"name='email'\");\n  $this->assertEquals(true, $testResult,\n                            \"Email field is not present\");\n\n  $testResult = strpos($output, \"name='username'\");\n  $this->assertEquals(true, $testResult,\n                          \"Username field is not present\");\n\n  $testResult = strpos($output, \"name='subject'\");\n  $this->assertEquals(true, $testResult,\n                           \"Subject field is not present\");\n\n  $testResult = strpos($output, \"name='message'\");\n  $this->assertEquals(true, $testResult,\n                           \"Message field is not present\");\n}\n```"]