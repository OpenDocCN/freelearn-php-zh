["```php\n    curl -sS https://getcomposer.org/installer | php\n\n    ```", "```php\n{\n  \"name\": \"2085020/api_pingdom\",\n  \"description\": \"pingdom api for php\",\n  \"require\": {\n    \"guzzle/guzzle\": \"v2.7.2\"\n  },\n  \"authors\": [\n    {\n      \"name\": \"Emagister\",\n      \"email\": \"jcruz@emagister.com\"\n    }\n  ],\n  \"autoload\": {\n    \"psr-0\": {\n      \"Emagister\":\"src\"\n    }\n  }\n\n}\n```", "```php\n{\n  \"name\": \"redis/ranking\",\n\"description\": \"Wrapping Redis's sorted set APIs for specializing ranking operations.\",\n  \"keywords\": [\"redis\", \"ranking\", \"sort\", \"realtime\"],\n  \"homepage\": \"https://github.com/matsubo/redis-ranking\",\n  \"type\": \"library\",\n  \"license\": \"PHP3\",\n  \"require\" : {\n    \"php\": \">=5.3.0\",\n    \"lib/curl\": \"0.3\",\n    \"php-curl-class/php-curl-class\": \"1.0.1\",\n    \"php-mod/curl\": \"1.0\",\n    \"development/curl\": \"dev-master\",\n    \"phpdocumentor/phpdocumentor\": \"2.0.0b7\",\n    \"abhi/tangocard\": \"dev-master\",\n    \"10up/wp_mock\": \"dev-master\"\n  },\n  \"authors\": [\n    {\n      \"name\": \"Yuki Matsukura\",\n      \"email\": \"matsubokkuri@gmail.com\"\n    }\n  ],\n\n  \"require\": {\n  },\n  \"require-dev\": {\n    \"devster/ubench\": \"1.1.*-dev\",\n    \"phpunit/phpunit\": \"3.*\"\n  },\n  \"autoload\": {\n    \"psr-0\": {\"Matsubo\": \"src/\"}\n  }\n}\n```", "```php\n<?php\nclass Review {\n\n}\n```", "```php\n<?php\n\ninterface Readable {\n```", "```php\n<?php\nclass Dish {\n/**\n* @param string $dishName The name of the dish\n*/\nprotected function addSalt(){}\n}\n```", "```php\n<?php\nclass PizzaDish extends Dish{\n  private $dishName;\n  function addSalt($dishName){\n    $this->dishName = $dishName;\n    parent::addSalt($this->dishName);\n  }\n}\n```", "```php\n<?php\nrequire_once 'Dish.php';\n\nclass PizzaDish extends Dish{\n  private $dishName;\n\n  function __construct($dishName){\n    $this->dishName = $dishName;\n  }\n\n  function add($ingredientName){\n    parent::add($this->dishName, $ingredientName);\n  }\n}\n```", "```php\n<?php\nclass Dish {\n  /**\n  * @param string $dishName  The name of the dish\n  */\n  protected function add($dishName, $ingredient){\n  }\n}\n```", "```php\n$pizzaDish = new PizzaDish('New Pizza');\n$pizzaDish->add('salt');\n$pizzaDish->add('cheese');\n$pizzaDish->add('capsicum');\n```", "```php\n<?php\nrequire_once 'Dish.php';\n\nclass PizzaDish extends Dish{\n  private $dishName;\n\n  /**\n  * @param mixed $dishName\n  */\n  public function setDishName($dishName)\n  {\n    $this->dishName = $dishName;\n  }\n\n  /**\n    * @return mixed\n  */\n  public function getDishName()\n  {\n    return $this->dishName;\n  }\n  function add($ingredientName){\n    $this->setDishName($ingredientName);\n    parent::add($this->dishName);\n  }\n}\n```", "```php\n$pizzaDish = new PizzaDish('New Pizza');\n$pizzaDish->add('salt');\n$pizzaDish->add('cheese');\n$pizzaDish->add('capsicum');\n```", "```php\n<?php\nrequire_once 'Dish.php';\n\nclass PizzaDish{\n  private $dishName;\n\n  /**\n    * @param mixed $dishName\n  */\n  public function setDishName($dishName)\n  {\n    $this->dishName = $dishName;\n  }\n\n  /**\n  * @return mixed\n  */\n  public function getDishName()\n  {\n    return $this->dishName;\n  }\n\n  private $instance;\n\n  /**\n    * @return mixed\n  */\n  public function getInstance()\n  {\n    return $this->instance;\n  }\n\n  /**\n    * @param mixed $instance\n  */\n  public function setInstance($instance)\n  {\n    $this->instance = new $instance;\n  }\n\n  function __construct($dishName, $instanceName){\n    $this->setInstance($instanceName);\n    $this->setDishName($dishName);\n  }\n\n  function add($ingredientName){\n    $this->getInstance()->add($ingredientName);\n  }\n}\n```", "```php\n$pizzaDish = new PizzaDish('New Pizza', 'Dish');\n$pizzaDish->add('salt');\n$pizzaDish->add('cheese');\n$pizzaDish->add('capsicum');\n```", "```php\n<?php\nclass Dish {\n  /**\n    * @param string $ingredient The name of the ingredient to be added\n  */\n  public function add($ingredient){\n    echo \"\\nYou have added: \", $ingredient;\n  }\n}\n```", "```php\n    $pizzaDish = new PizzaDish('New Pizza', 'Dish');\n    $ingredients = array('salt','cheese','capsicum');\n    foreach ($ingredients as $ingredient) {\n    $pizzaDish->add($ingredient);\n    }\n    ```", "```php\n    $pizzaDish = new PizzaDish('New Pizza', 'Dish');\n    $ingredients = array('salt','cheese','capsicum');\n    for ($count = 0; $count < count($ingredients); $count++) {\n      $pizzaDish->add($ingredients[$count]);\n    }\n    ```", "```php\n    $pizzaDish = new PizzaDish('New Pizza', 'Dish');\n    $ingredients = array('salt', 'cheese', 'capsicum');\n    $ingredientCount = 0;\n    while ($ingredientCount < count($ingredients)) {\n      $pizzaDish->add($ingredients[$ingredientCount]);\n    $ingredientCount++;\n    }\n    ```", "```php\n    while($moreChoicesAvailable){\n      $humanMind = array(\n        'feeling' => 'happy',\n        'status' => 'comfortable'\n      );\n    }\n    ```", "```php\n$pizzaDish = new PizzaDish('New Pizza', 'Dish');\n$ingredients = array('salt','cheese','capsicum'\n);\n\n$ingredientCount = 0;\ndo {\n  $pizzaDish->add($ingredients[$ingredientCount]);\n  $ingredientCount++;\n} while ($ingredientCount < count($ingredients));\n```", "```php\n$pizzaDish = new PizzaDish('New Pizza', 'Dish');\n$ingredients = array( 'salt', 'cheese', '' );\n$ingredientCount = 0;\ntry {\n  while ($ingredientCount < count($ingredients)) {\n    if ($ingredients[$ingredientCount] == '') {\n      throw new Exception(\"\\nYou have run out of capsicum.\");\n    } else {\n      $pizzaDish->add($ingredients[$ingredientCount]);\n      echo \"\\nWaiting for capsicum topping...\";\n    }\n    $ingredientCount++;\n  }\n} catch (Exception $e) {\n  echo $e->getMessage();\n  $pizzaDish->add('tomato');\n}\n```", "```php\n// This is the list of ingredients that you plan to add\n```", "```php\n/**\n  * Class PizzaDish\n  *\n  * Bake a new type of <strong>Dish</strong>.\n  * This dish has the following features:\n  * <ul>\n  * <li>It eases the appetite</li>\n  * <li>It makes the taste buds happy</li>\n  * <li>It confirms to the software engineering practises</li>\n  * <li>It teaches engineers various aspects of PHP programming</li>\n  * </ul>\n*/\n```", "```php\n/**\n  * <strong>Setter</strong> method for giving a name to your Pizza<br/><br/>\n  * In order to set values for the members variables, it is <em>advised</em> to use setter methods.\n  * @param string $dishName The name of the dish you want to create.\n  */\n```", "```php\nclass Dish {\n  /**\n  * Add some ingredients to your dish. <br/>\n  * You can do that by specifying the name of the ingredient.\n  *\n  * @param string $ingredientName The name of the ingredient to be added\n  */\n  public function add($ingredient){\n    echo \"\\nYou have added: \", $ingredient;\n  }\n\n//    TODO Add some method to check if the pizza is cooked\n}\n```", "```php\npublic function add($ingredient){\n  echo \"\\nYou have added: \", $ingredient;\n  //  FIXME Check for a valid ingredient name\n}\n```", "```php\npublic function add($ingredient){\n  echo \"\\nYou have added: \", $ingredient;\n  //  FIXME Check for a valid ingredient name\n}\n\n//  TODO Add some method to check if the pizza is cooked\n//  TODO for ALice Please add the appropriate usecase for the checking functionality\n```"]