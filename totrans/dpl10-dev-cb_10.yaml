- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Theming and Frontend Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Theming** is the process through which we can affect the output of entities
    (nodes, users, taxonomy terms, media, and so on) with CSS, JavaScript, Twig templates,
    and HTML. Drupal comes with a handful of out-of-the-box themes to provide a basic
    look and feel after you install it. Olivero is the default site theme in Drupal
    10 and Claro provides the administration theme.'
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous options available on [Drupal.org](http://Drupal.org) that
    either provide a starting point for your own theme (Bootstrap, ZURB Foundation,
    or Barrio, for example) or a full ready-to-use solution. It is also possible to
    create your own custom theme from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Everything you see on the screen after a page has loaded in Drupal has gone
    through the theming and rendering pipeline. This means that you can customize
    the theme that you see and control its markup and styling. Understanding how Drupal
    theming works will make you a more effective developer and this chapter will help
    you do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme to style your Drupal site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript to your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Twig templates in your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivering responsive images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling CSS and JavaScript pre- and post-processors with Laravel Mix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Laravel Mix to theme your Drupal site with live reloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the full code used in this chapter on GitHub: https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp10'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme to style your Drupal site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides a theme generator to create custom themes for Drupal sites based
    on the Starterkit theme. This provides all of the base CSS stylesheets, JavaScript
    files, and Twig templates to begin customizing the look and feel of your Drupal
    site. The theme generator is bundled with a developer command-line tool provided
    by Drupal core in `core/scripts/drupal`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script for generating a theme needs to be executed in the `web` directory,
    so navigate there in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `generate-theme` command from the `core/scripts/drupal` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `generate-theme` command accepts one argument – the machine name for the
    theme. You can also pass the `name` option to give it a human-readable name.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the theme has been generated, it will be available in the `web/themes`
    directory. The command will output something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now visit `/admin/appearance` and install your new theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Appearance management screen to install the new custom theme](img/Figure_10.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Appearance management screen to install the new custom theme
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The theme generator uses a *copy-and-forget* model, also known as *fork-and-forget*,
    with the Starterkit theme. This means your theme is a copy of the Starterkit theme
    as it was when you created your theme and cannot be broken if the Starterkit theme
    changes in later versions of Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: This differs from other systems that need to be built upon child themes, such
    as WordPress, or built from scratch, such as *Laravel* and *Symfony*. This allows
    you to create a theme from a starting point and begin working without worrying
    about backward incompatibility due to changes to a base theme.
  prefs: []
  type: TYPE_NORMAL
- en: Other themes may act as a starterkit. They are contributed themes and can be
    specified using the `--``starterkit` option.
  prefs: []
  type: TYPE_NORMAL
- en: The next recipe will cover how to add new CSS stylesheets and JavaScript files
    to your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will dive into additional information on themes and the theme generator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your starter kit theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Very often, organizations have a shared starting base for their themes. You
    can define your own starterkit for creating new themes and leveraging existing
    setups. This is done by adding the `starterkit` key to your theme’s `info.yml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When this value is set to `true`, the theme generation command allows you to
    generate new themes using it. This flag is required since some themes are not
    intended to be starterkits with a generic base of features.
  prefs: []
  type: TYPE_NORMAL
- en: Theme screenshots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Themes can provide a screenshot that shows up on the `screenshot.png` image
    file into the theme folder or a file specified in the `info.yml` file under the
    `screenshot` key.
  prefs: []
  type: TYPE_NORMAL
- en: Themes, logos, and favicons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal controls the site’s favicon and logo settings as a theme setting. These
    settings are active on a theme-by-theme basis and are not global. A `favicon.ico`
    placed in the theme’s directory will also be the default value of the `favicon`
    for the website. Themes can provide a default logo by providing `logo.svg` in
    the theme’s directory. An alternative logo file can be specified by using a `logo`
    key in the `info.yml` file with a path to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the site’s logo and favicon by navigating to **Appearance**
    and then clicking on **Settings** for your current theme. Unchecking the default
    checkboxes for the favicon and logo settings allows you to provide custom files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Overview of the theme settings for logos and favicons](img/Figure_10.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Overview of the theme settings for logos and favicons
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Documentation for the Starterkit theme: [https://www.drupal.org/docs/core-modules-and-themes/core-themes](https://www.drupal.org/docs/core-modules-and-themes/core-themes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation for theme generation: [https://www.drupal.org/docs/theming-drupal](https://www.drupal.org/docs/theming-drupal)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation on the properties of a theme’s `info.yml` file: [https://www.drupal.org/node/2349827](https://www.drupal.org/node/2349827)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript to your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal, CSS stylesheets and JavaScript files are associated with libraries,
    and specific libraries are added to a page. This allows CSS style sheets and JavaScript
    files to be attached only when they are needed. Themes can be associated with
    libraries that must always be attached for global styling.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will update a theme’s `libraries.yml` file to register a
    CSS stylesheet and JavaScript file provided by the custom theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a theme created by the theme generator as done in the *Creating
    a custom theme to style your Drupal* *site* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create `css` and `js` directories in your theme’s directory that will
    contain the CSS stylesheets and JavaScript files, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `css` directory, add a `styles.css` file that will hold your theme’s
    CSS declarations. For the purpose of demonstration, add the following CSS declaration
    to `styles.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `js` directory, add a `scripts.js` file that will hold the theme’s JavaScript
    items. For the purpose of demonstration, add the following JavaScript code to
    `scripts.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script will print a message in the console when the script is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `mytheme.libraries.yml` file and add a `global-styling` library
    definition for your theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The library’s name is `global-styling`. Libraries can define a `version` key
    and use `VERSION` as a default, which defaults to the most recent version of Drupal
    core. The `css/styles.css` file is added to the `theme` group for the `css` key.
    `js/script.js` is added to the `js` key.
  prefs: []
  type: TYPE_NORMAL
- en: The `dependencies` key specifies other libraries that must be present for JavaScript
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `mytheme.info.yml` to add the `global-styling` library to the `libraries`
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to rebuild the library definitions cache,
    triggering a rediscovery of the library definitions and theme information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View your Drupal site to verify that the background color has changed and that
    `Hello world!` has been printed to the browser’s console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Custom theme with a global library attached](img/Figure_10.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Custom theme with a global library attached
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal uses libraries to attach CSS stylesheets and JavaScript files to a page.
    This allows libraries to have dependencies on other libraries, such as base CSS
    stylesheets or JavaScript functionality. In this recipe, the `core/drupal` dependency
    ensures that `core/misc/drupal.js` is attached to the page. `core/misc/core.js`
    adds the global `Drupal` object, which allows you to define `behaviors`. Each
    entry in `Drupal.behaviors` has its `attach` function invoked whenever the page
    is loaded or AJAX events are triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Asset aggregation
  prefs: []
  type: TYPE_NORMAL
- en: If Drupal is configured to aggregate assets, you will have to rebuild Drupal’s
    caches after each file time so that a new aggregate is created. This is done by
    visiting `/admin/config/development/performance` and unchecking the checkboxes
    for aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Drupal’s CSS architecture** borrows concepts from the **Scalable and Modular
    Architecture for CSS** (**SMACSS**) system to organize CSS declarations. CSS styles
    are applied with cascading layers. Drupal libraries have different groups that
    a CSS stylesheet may be attached to, to control the ordering of when a stylesheet
    is loaded. The CSS groups are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base`: Intended for styles that target HTML elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout`: Intended for styles that lay out a page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`component`: Intended for styles that apply to design components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: Intended for styles that apply states to components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme`: Intended for styles to customize components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Themes may then specify libraries to be included on every page that the theme
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will explore more options with libraries in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Library file options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`{ }`) is used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example, taken from `core.libraries.yml`, adds the `es6-promise`
    polyfill for the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This library provides a compatibility layer for `weight` property allows you
    to control the priority of the library among other libraries. The `minified` property
    specifies that the file has already been minified and does not need to be processed
    by Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `preprocess` property supports a Boolean value. If a file has `preprocess:
    false`, it will not be aggregated with other files at the same time.'
  prefs: []
  type: TYPE_NORMAL
- en: Overriding and extending other libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Themes can override libraries using the `libraries-override` and `libraries-extend`
    keys in their `info.yml` files. This allows themes to easily customize existing
    libraries without having to add the logic to conditionally remove or add their
    assets when a particular library is attached to a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `libraries-override` key can be used to replace an entire library, replace
    selected files in a library, remove an asset from a library, or disable an entire
    library. The following code will allow a theme to provide a custom jQuery UI theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `override` declaration mimics the original configuration. Specifying `false`
    will remove the asset; otherwise, a supplied path will replace that asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `libraries-extend` key can be used to load additional libraries with an
    existing library. The following code will allow a theme to associate a CSS style
    sheet with selected jQuery UI declaration overrides without always including them
    in the rest of the theme’s assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The theme generated with the `starterkit` already has examples of `libraries-extend`.
  prefs: []
  type: TYPE_NORMAL
- en: Using a CDN or external resource as a library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Libraries also work with external resources, such as assets loaded over a CDN.
    This is done by providing a URL for the file location, along with selected file
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of adding the Font Awesome font icon library from the `BootstrapCDN`
    provided by `jsDeliver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`remote` key describes the library as using external resources. While this
    key is not validated beyond its existence, it is best to define it with the external
    resource’s primary website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Like all libraries, `version` information is required. This should match the
    version of the external resource being added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If a library defines the `remote` key, it also needs to define the `license`
    key. This defines the license name and the URL for the license, and checks whether
    it is GPL-compatible. If this key is not provided, `\Drupal\Core\Asset\Extension\LibraryDefinitionMissingLicenseException`
    will be thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Finally, specific external resources are added as normal. Instead of providing
    a relative file path, the external URL is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating libraries from hooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modules can provide dynamic library definitions and alter libraries. A module
    can use the `hook_library_info()` hook to provide a library definition dynamically.
    This is not the recommended way to define a library, but it is provided for edge
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Modules cannot use `libraries-override` or `libraries-extend` and need to rely
    on the `hook_library_info_alter()` hook. You can read about this hook at `core/lib/Drupal/Core/Render/theme.api.php`
    or at [https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/10](https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!theme.api.php/function/hook_library_info_alter/10).
  prefs: []
  type: TYPE_NORMAL
- en: Placing JavaScript in the header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Drupal ensures that JavaScript is placed last on the page. This
    improves the page’s load performance by allowing the critical portions of the
    page to load first. Placing JavaScript in the header is now an opt-in option.
  prefs: []
  type: TYPE_NORMAL
- en: 'To render a library in the header, you will need to add the `header: true`
    key-value pair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This will load a custom JavaScript library and its dependencies into the header
    of a page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the CSS architecture for Drupal: Separate concerns at [https://www.drupal.org/node/1887918#separate-concerns](https://www.drupal.org/node/1887918#separate-concerns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SMACSS website: [http://smacss.com/](http://smacss.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Twig templates in your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal’s theming layer uses the **Twig templating system**, a component from
    the Symfony project. **Twig** is a template language that uses a syntax similar
    to Django and Jinja templates.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will override the default Twig template used for text inputs
    to provide customizations for the email form element. We will use the **Twig syntax**
    to add a new class to the input element and provide a placeholder attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a theme created by the theme generator as done in the *Creating
    a custom theme to style your Drupal* *site* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, in the `template/form` directory, copy the `input.html.twig` file
    as `input--email.html.twig`. The template will look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The attributes variable is an instance of `\Drupal\Core\Template\Attribute`,
    a value object for storing HTML element attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Attribute` class has an `addClass` method for adding new `class` attribute
    values. We will use `addClass` to add a new class to the input element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before the preceding line, we will create a Twig variable using ternary operators
    to provide a default placeholder using the `setAttribute` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new variable called `placeholder` using the `set` operator. The
    question mark (`?`) operator checks whether the placeholder property is empty
    in the `attributes` object. If it is not empty, it uses the existing value. If
    the value is empty, it provides a default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to rebuild your Drupal site’s Twig templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assuming that you have used the standard Drupal install, go to the `/contact/feedback`
    while logged out, and review the changes to the email field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – HTML element source for email input](img/Figure_10.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – HTML element source for email input
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal’s theme system is built around theme hooks and theme hook suggestions.
    When a theme hook has double underscores (`__`), Drupal’s theme system understands
    this, and it can break apart the theme hook to find a more generic template.
  prefs: []
  type: TYPE_NORMAL
- en: The element definition of the email input element defines the `input__email`
    theme hook. If there is no `input__email` hook implemented through a Twig template
    or PHP function, it will step down to just the `input` theme hook and template.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Drupal theme hooks are defined with underscores (`_`), but use hyphens (`-`)
    when used in Twig template files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the email element definition provides `input__email` as its theme hook,
    Drupal understands this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Look for a Twig template named `input--email.html.twig` provided by a theme
    or a theme hook in a module that defines `input__email`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the template is not found, look for a Twig template named `input.html.twig`
    or a theme hook in a module that defines the `input`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drupal utilizes theme hook suggestions for ways to allow output variations based
    on different conditions. It allows site themes to provide a more specific template
    for certain instances. Theme hook suggestions can be provided by the `hook_theme_suggestions()`
    hook in a `.module` or `.``theme` file.
  prefs: []
  type: TYPE_NORMAL
- en: A processor, such as Drupal’s theme layer, passes variables to Twig. Variables
    or properties of objects can be printed by wrapping the variable name in curly
    brackets. All of Drupal core’s default templates provide information in the file’s
    document block that details the available Twig variables.
  prefs: []
  type: TYPE_NORMAL
- en: Twig has a simplistic syntax with basic logic and functions. The `addClass`
    method will take the `attributes` variable and add the class provided, in addition
    to the existing contents.
  prefs: []
  type: TYPE_NORMAL
- en: When providing a theme hook suggestion or altering an existing template, you
    will need to rebuild Drupal’s cache. The compiled Twig template, as with PHP,
    is cached by Drupal so that Twig does not need to be compiled every time the template
    is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discuss more on using Twig in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging template file selection and hook suggestions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging can be enabled to inspect the various template files that make up
    a page and their theme hook suggestions, and check which are active. This can
    be accomplished by editing the `sites/default/services.yml` file. If a `services.yml`
    file does not exist, copy `default.services.yml` to create one.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to change `debug: false` to `debug: true` under the `twig.config`
    section of the file. This will cause the Drupal theming layer to print out the
    source code comments that contain the template information. When `debug` is on,
    Drupal will not cache the compiled versions of Twig templates and render them
    on the fly.'
  prefs: []
  type: TYPE_NORMAL
- en: There is another setting that prevents you from having to rebuild Drupal’s cache
    on each template file change without leaving `debug` enabled. The `twig.config.auto_reload`
    Boolean can be set to `true`. If this is set to `true`, the Twig templates will
    be recompiled if the source code changes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the Twig documentation at [https://twig.symfony.com/](https://twig.symfony.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the API documentation for `hook_theme_suggestions` at [https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/10](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/10)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivering responsive images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `HTML5` picture tag and source sets. Utilizing the **Breakpoint** module,
    mappings to breakpoints are made to denote an image style to be used at each breakpoint.
    The responsive image field formatter works by using a defined responsive image
    style. Responsive image styles are configurations that map image formats to specific
    breakpoints and modifiers. First, you will need to define a responsive image style,
    and then you can apply it to an image field.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a responsive image style set called **Article
    image** and apply it to the **Article** content type’s image field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you need to install the `responsive_image` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the administrative toolbar, go to **Configuration** and then to **Responsive
    image styles** under the **MEDIA** section. Click on **Add responsive image style**
    to create a new style set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Olivero** from the **Breakpoint group** select list to use the breakpoints
    defined by the Olivero theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each breakpoint will be grouped by a fieldset. Expand the fieldset, choose
    **Select a single image style.**, and then pick an appropriate **Image** **style**
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Responsive image style form](img/Figure_10.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Responsive image style form
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, choose a **Fallback image style** option in the event of a browser
    that doesn’t support source sets or an error occurring.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save the configuration, and add the new style set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Structure** and **Content types** and select **Manage Display** from
    the **Article** content type’s drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Image** field’s formatter to **Responsive image**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Settings** cog of the field formatter to choose your new **Responsive**
    **image style** set. Select **Article image** from the **Responsive image** **style**
    dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Responsive image style configuration form](img/Figure_10.06_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Responsive image style configuration form
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Update** to save the field formatter settings, and then click on
    **Save** to save the field display settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A benefit of using the responsive image formatter is its performance. Browsers
    will only download the resources defined in the `srcset` of the appropriate `source`
    tag. This not only allows you to deliver a more appropriate image size but also
    carries a smaller payload on smaller devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Responsive image** style provides three components:'
  prefs: []
  type: TYPE_NORMAL
- en: A responsive image element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The responsive image style configuration entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The responsive image field formatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration entity is consumed by the field formatter and displayed through
    the responsive image element.
  prefs: []
  type: TYPE_NORMAL
- en: The responsive image style entity contains an array of breakpoints to image
    style mappings. The available breakpoints are defined by the selected breakpoint
    groups. Breakpoint groups can be changed anytime; however, the previous mappings
    will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: The responsive image element prints a picture element with each breakpoint,
    defining a new source element. The breakpoint’s media query value is provided
    as the media attribute for the element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the picture element on the **Mozilla Developer Network** (**MDN**)
    at [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling CSS and JavaScript pre- and post-processors with Laravel Mix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Laravel Mix** is a project that streamlines configuring Webpack, a bundler
    for frontend development. Laravel Mix was originally built to be used with Laravel
    projects but can be used for any project that bundles JavaScript or CSS pre- and
    post-processing.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will add Laravel Mix to our theme for transpiling our ES6
    JavaScript and PostCSS to post-process our CSS based on the desired browser support.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding CSS and JavaScript to your theme* recipe from this chapter covers
    how to create asset libraries for your theme. This section will use information
    from that recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a `src` directory in your theme to store source files for your
    CSS and JavaScript that will be processed by Webpack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `styles.css` file in the `src` directory with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This CSS file uses CSS variables. While commonly supported now, `PostCSS` will
    ensure backward compatibility in the post-processed CSS stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create a `scripts.js` file in the `src` directory with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will get ready to install Laravel Mix. In your theme’s directory, use
    the `npm init` command to initialize a project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a `package.json` file, which stores dependency information for
    projects using npm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `npm install` to install Laravel Mix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to install `postcss-present-env` to ensure our CSS is post-processed
    to be compatible with all browsers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Laravel Mix comes bundled with `@babel/preset-env`, which ensures browser compatibility
    with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have Laravel Mix, we must configure it. Create a `webpack.mix.js`
    file in your theme’s directory with the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `js` method on `mix` sets up JavaScript bundling and transpiling with Webpack.
    The first argument is the source file and the second argument is the destination.
    The `css` method on `mix` sets up PostCSS. The first argument is the source file
    and the second argument is the destination. The third argument passes additional
    plugins to PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile our CSS and JavaScript files, run `npx mix`. This will create `dist/styles.css`
    and `dist/scripts.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to create our theme’s library, which registers our CSS and JavaScript
    files from the `dist` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `mytheme.info.yml` to add the `theme-styling` library to the `libraries`
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to rebuild the library definitions cache,
    triggering a rediscovery of the library definitions and theme information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your CSS and JavaScript files are now registered and will allow you to write
    the latest in CSS and JavaScript while preserving browser compatibility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Laravel Mix is a package to simplify configuring Webpack. When running `npx
    mix`, this runs the scripts for Laravel Mix. Laravel Mix reads `webpack.mix.js`,
    builds a Webpack configuration, and executes Webpack on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Laravel Mix documentation: [https://laravel-mix.com/docs](https://laravel-mix.com/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Laravel Mix to theme your Drupal site with live reloading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, *Compiling CSS and JavaScript pre and post processors
    with Laravel Mix*, we set up Laravel Mix for a theme. Laravel Mix supports `Browsersync`.
    `Browsersync` is a tool that monitors changes in your source files and injects
    the changes into the browser so that you do not need to refresh the page manually.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will leverage the `BrowserSync` functionality to speed up
    the development of building your Drupal theme.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that aggregation of CSS and JavaScript files is disabled by visiting
    the `/admin/config/development/performance`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can add the following configuration override to your `settings.php`
    to force-disable aggregation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: This is also set up by default with `example.settings.local.php` in `sites/default`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure Browsersync with Laravel Mix, we call the `browserSync` method
    on `mix`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before configuring Browsersync, we need Laravel Mix to download the additional
    Webpack dependencies for Browsersync. Laravel Mix does this automatically when
    run and first configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see a message similar to the following: *Additional dependencies must
    be installed. This will only take* *a moment.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to specify the URL of our Drupal site for `Browsersync` to proxy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`localhost:3000` and will proxy content from the Drupal site at the URL provided.
    Replace `mysite.ddev.site` with the domain of your Drupal site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to specify which files should be watched by Browsersync to inject
    updates into the browser by providing a `files` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This tells Browsersync to react to changes to our compiled assets, which are
    the ones added to the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to run Laravel Mix in development mode to watch for changes.
    This will open a browser that uses Browsersync and will update as files are changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With your browser now open, modify `src/styles.css` or `src/scripts.js` and
    watch your Drupal site’s theme update without having to refresh the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be cumbersome to configure and gather all of the necessary plugins for
    Webpack. Laravel Mix provides a way to configure Webpack easily across any project.
    Laravel Mix supports bundling JavaScript for Vue, React, and Preact. It also has
    built-in support for Sass and Less, along with PostCSS. All of these options can
    be found in the API documentation for Laravel Mix at [https://laravel-mix.com/docs/6.0/api](https://laravel-mix.com/docs/6.0/api).
  prefs: []
  type: TYPE_NORMAL
- en: There’s more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browsersync can be used for more than just watching changes to your CSS and
    JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: Watching changes to Twig templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Browsersync can also be configured to watch for changes in Twig files as well
    so that your browser updates when Twig templates are modified. To watch for changes
    to Twig templates, add `templates/**/*` to the `files` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you modify a Twig template for your theme, Browsersync will refresh
    the page for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the best results, you will want to turn on Twig debugging by ensuring you
    have a `sites/default/services.yml` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure your Twig templates are rebuilt whenever they are modified.
    This is covered in the *Using Twig templates in your theme* recipe and the *There’s
    more* section under *Debugging template file selection and* *hook suggestions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to bypass Drupal’s `render` cache, which could cause stale
    output. Ensure `settings.php` has the following lines, which can also be found
    in `example.settings.local.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: This forces Drupal to use a cached backend that does not cache any data for
    its `render` output. Your Drupal site may operate slower, but it allows you to
    build your theme without rebuilding Drupal’s cache.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Browsersync documentation: [https://browsersync.io/docs/options/](https://browsersync.io/docs/options/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Laravel Mix documentation: [https://laravel-mix.com/docs](https://laravel-mix.com/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
