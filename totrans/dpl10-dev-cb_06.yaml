- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing and Working with Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go through the **create, read, update, and delete**
    (**CRUD**) operations of working with entities in Drupal. We will create a series
    of routes to create, read, update, and delete nodes that are articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and saving an entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying and loading entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking entity access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an entity’s field values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing entity validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will require a custom module that has a `routing.yml` file and
    a controller named `ArticleController` in the `src/Controller` directory of the
    module. In the following recipes, the module name is `mymodule`. Replace as appropriate.
    You can find the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp06)'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the **Article content** type created by the standard Drupal installation.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter have example HTTP requests that are used to interact
    with code created in each recipe. These HTTP requests can be run with any HTTP
    client. If you use VSCode, try the **REST Client** extension ([https://marketplace.visualstudio.com/items?itemName=humao.rest-client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)),
    or if you have PhpStorm, use the built-in **HTTP Client** ([https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html](https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html)).
    If for some reason you do not have an editor or cannot get those working, you
    can use Postman ([https://www.postman.com/](https://www.postman.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and saving an entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will define a route to create a new article. The route will
    be for an HTTP `POST` request sending JSON to specify the article’s title and
    body text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `store` method in the `ArticleController` controller in your module
    that will receive the incoming request object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need the request object so that we can retrieve the JSON provided in the
    request payload.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will convert the request’s content from JSON to a PHP array using
    Drupal’s JSON serialization utility class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While we could use the `json_decode` function directly, leveraging utility classes
    provided by Drupal standardizes the way code works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we get the entity type manager and retrieve the entity storage for the
    `node` entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the storage handler. When getting
    an entity storage handler, you pass the entity type ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the storage, invoke the `create` method to create a new node entity object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `create` method instantiates a new entity object with the entity type class.
    For the node entity type, our `$article` variable will be of the `\Drupal\node\Node`
    type. When instantiating a new entity, you must specify its bundle, which we do
    with the `type` key set to `article`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide an associative array of `title` and `body` to the `create` method,
    copying values from the JSON we received from the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `save` method on the entity object to save the entity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now return a response with a Location header that has the URL to the
    newly created now and an HTTP status code of `201 Created`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `201 Created` status code is used to represent a successful response and
    signifies that an item has been created. When a `201 Created` response is returned,
    it is recommended to return a `Location` header with a URL to the created item.
    Entity classes have a `toUrl` method to return a URL object, and then call its
    `toString` method to convert it to a string from an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create the route in our module’s `routing.yml` that points to the `store`
    method of `ArticleController` for an HTTP `POST` request to the `/``articles`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Routes may specify the HTTP methods they support with the `methods` key. In
    this recipe, we have set `requirements` to `_access: ''TRUE''` only to bypass
    access checks. This should be set to `_entity_create_access: ''node''`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An HTTP request such as the following can then be used to create a new node
    that is an article on your Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `create` method is used to instantiate a new entity object and returns an
    object of that entity type’s class. For this recipe, the `node` storage will return
    entities with the `\Drupal\node\Node` class. The values accepted in the `create`
    method are based on that entity type’s field definitions. These include the base
    fields and any fields created through the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The bundle for an entity type must be specified when it is created. This is
    used to determine the fields available since each bundle can have different fields.
    For nodes, the bundle field is named `type`. That is why we provide the `article`
    value for the `type` key.
  prefs: []
  type: TYPE_NORMAL
- en: The `save` method then commits the entity to the database storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an entity is inserted on its first save, the entity storage fires invoke
    the following hooks, allowing you to hook into the insert of a new entity. The
    entity being inserted is passed as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_presave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_presave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_insert`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_insert`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying and loading entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use an entity query to find all published articles and
    return them as JSON. We will also allow specifying the sort order via a query
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an `index` method in the `ArticleController` controller in your module
    that will receive the incoming `Request` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `request` object will be used to retrieve query parameters passed in the
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the request, get the sort query parameter, defaulting to `DESC`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we get the entity type manager and retrieve the entity storage for the
    node entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the storage handler. When getting
    an entity storage handler, you pass the entity type ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the storage handler, invoke the `getQuery` method. This returns a query
    object that is used to perform an entity query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Drupal requires specifying if the entity query should perform entity access
    checks when querying for content entities. We must call the `accessCheck` method
    and set it to `TRUE` or `FALSE`. In this case, we want entity access checks to
    be applied to the entity query.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add conditions to the query to make sure we only return published articles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `condition` method is passed the field name and value to create a condition.
    The first condition ensures we only query for nodes with the type (bundle) of
    `article`. The second condition is to ensure the `status` field is `true` for
    published.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we specify the `sort` order of the query from our URL query parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `sort` method is passed the field name to order the query by and a direction
    of `ASC` or `DESC`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling the `execute` method will execute the entity query and return the available
    entity IDs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After calling `execute`, we have an array of node IDs that can be passed to
    the `loadMultiple` method from the entity storage to load the nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use `array_map` to turn the nodes into array values and return a
    JSON response of articles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `array_map` function allows you to transform the values of items in an existing
    array. We will use `array_map` to iterate over the returned node entities and
    call the `toArray` method to get their values as an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create the route in `routing.yml` that points to the `index` method
    of `ArticleController` for an HTTP `GET` request to the `/``articles` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Routes may share the same path if they explicitly define the HTTP methods they
    support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An HTTP request such as the following can then be used to retrieve the articles
    on your Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Entity queries are an abstraction above the Database API in Drupal. Drupal stores
    entity and field data in normalized database tables. The entity query builds the
    appropriate database query to check the entity’s base table, data table, and any
    field tables. It orchestrates all of the `JOIN` statements required.
  prefs: []
  type: TYPE_NORMAL
- en: When an entity query is executed, it returns the IDs of matching entities. These
    IDs are then passed to the `loadMultiple` method to retrieve entity objects.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more things that can be done with entity queries.
  prefs: []
  type: TYPE_NORMAL
- en: Count queries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An entity query can also perform a count instead of returning the entity IDs.
    This is done by calling the `count` method on an entity query object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code would return the number of unpublished articles.
  prefs: []
  type: TYPE_NORMAL
- en: Checking entity access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to check whether the current user has
    access to view an `_entity_access` route requirement to perform entity access
    checks. This recipe will use its own entity access control so that the response
    is a `404 Not Found` response instead of a `403` `Forbidden` response.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `get` method in the `ArticleController` controller in your module
    that has a parameter for the `node` entity object that will be provided by a route
    parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If using the same controller from previous recipes, this adds a new `use` statement
    for the `Drupal\node\NodeInterface` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we get the entity type manager and retrieve the access control handler
    for the `node` entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The entity type manager is a repository of information for entity types and
    is used to get handlers for entity types, such as the access control handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the access control handler, invoke the `access` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first parameter of `access` is the entity. The second parameter is the operation,
    which is `view` for this recipe. By default, the `access` method returns a Boolean
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the result is not allowed, we want to return a `404 Not` `Found` response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will return a JSON response, but with `NULL` data and a `404` status code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the result is allowed, return a JSON response of the article node’s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must create the route in our module’s `routing.yml` that points to the `get`
    method of `ArticleController` for an HTTP `GET` request to the `/``articles/{node}`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since our route parameter is named `node` and our controller method accepts
    the class for a node entity, Drupal will automatically have our `node` parameter
    converted to an entity object for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An HTTP request such as the following can then be used to retrieve an article
    that is on your Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe did not use the `_entity_access` route requirement to showcase entity
    validation. The `_entity_access` route requirement invokes the access method on
    the entity located in the route parameter against an operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following operations are recognized by Drupal’s entity access system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`view`: The user is allowed to view the entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_label`: A less used operation. It is used to check whether the user has
    the privilege to at least view the entity’s label/title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: The user is allowed to update the entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`: The user is allowed to delete the entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The access to create an entity is a different call to the access control handler
    since it cannot be checked against an entity object. The `createAccess` method
    on the access control handler is used to see if a user has access to create a
    new entity of the entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking `access` of an entity can also be done by invoking the `access` method
    on the entity itself. This recipe is intended to showcase the access control handler
    as well. The recipe could check access by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the access check uses the current user. Access checks allow passing
    an alternative user account to perform access checks. This may be useful when
    running code on the command line or in background jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Updating an entity’s field values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will define a route to update the field values of an article
    node. The route will be for an `HTTP PATCH` request sending JSON to specify a
    new title and body text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an `update` method in the `ArticleController` controller that receives
    the incoming request and node object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need the request object so that we can retrieve the JSON payload provided
    to this method and the node object to update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will convert the request’s content from JSON to a PHP array using
    Drupal’s JSON serialization utility class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While we could use the `json_decode` function directly, leveraging utility classes
    provided by Drupal standardizes the way code works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will update the article node’s `title`, if provided in the request’s
    JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Some entity classes provide methods for setting specific field values like the
    `Node` class does with `setTitle` to modify the node’s `title`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will update the article’s body field, if provided in the request’s
    JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `set` method allows us to set the value for a field. The first parameter
    is the field name and the second parameter is the field’s value.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the fields have been updated, we can save the entity and return it as
    a JSON response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must create the route in `routing.yml` that points to the `update` method
    of `ArticleController` for an HTTP `PATCH` request to the `/``articles/{node}`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This route should have `_entity_access: ''node.update''` as its requirements.
    However, we have used `_access: ''TRUE''` to bypass access checks for this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An HTTP request such as the following can then be used to update an article
    that is on your Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When updating an entity, the entity storage updates the field values in the
    database and the entity’s database record. The entity storage will write the field
    values to the appropriate database tables that hold field values.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an entity is updated, the entity storage fires invoke the following hooks,
    allowing you to hook into an update to an entity. The entity being updated is
    passed as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_presave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_presave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entities may also be validated, to ensure their updated values are correct.
    This is covered in the next recipe, *Performing* *entity validation*.
  prefs: []
  type: TYPE_NORMAL
- en: Performing entity validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will walk through entity validation. Drupal has integrated
    with the **Symfony Validator** component. Entities can be validated before saving.
    We will build off of the last recipe, which allows updating an article node to
    add validation of its values.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be adding validation to the `update` method from the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will modify the `update` method to `validate` the node before saving:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will invoke the `validate` method, which runs the validation system against
    all constraints on the entity and its field values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `validate` method returns an object containing any constraint violations
    and does not throw an exception. We must check whether there are any violations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The returned object, an instance of `\Drupal\Core\Entity\EntityConstraintViolationListInterface`,
    implements `\Countable`. This allows us to use the `count` function to see if
    there are any violations.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are constraint violations, we will build an array of error messages
    and return a `400 Bad` `Request` response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `EntityConstraintViolationListInterface` object is also iterable, allowing
    us to loop over all of the violations. From each violation, we can use `getPropertyPath`
    to identify the invalid field and `getMessage` for information about the invalid
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following HTTP request would trigger a constraint violation for an empty
    value in the `title` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drupal utilizes the Symfony Validator component ([https://symfony.com/components/Validator](https://symfony.com/components/Validator))
    to validate data. The Validator component has a concept of constraints that are
    validated, and if the validation fails a violation is reported. Drupal’s entity
    validation works with an outside-in approach: entity-level constraints are validated
    and then each field is validated, going down through each field’s properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Entity validation does not automatically run when an entity is saved. It is
    an explicit operation that must be invoked when manipulating entities programmatically.
    The only time Drupal invokes entity validation is when an entity is modified through
    its forms.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the invoker of the entity invalidation must choose how to
    react to constraint violations, such as our recipe did to prevent the entity from
    being saved. An invalid entity can always be saved programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more options when validating an entity’s values. Let us see a few
    of these options in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Validating fields directly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Field item classes have a `validate` method for directly validating a specific
    field instead of validating the entire entity. This can be done by using the `get`
    method to get the field item and then invoking the `validate` method on the field
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Filtering constraint violations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `EntityConstraintViolationListInterface` class extends the `Symfony\Component\Validator\ConstraintViolationListInterface`
    class provided by Symfony. This adds Drupal-specific methods for filtering returned
    violations. The following methods are available to filter the violations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getEntityViolations`: Some violations may be at the entity level and not at
    the class level. Constraints may be applied at the entity level and not to specific
    fields. For example, the Workspaces module adds a constraint at the entity level
    to check for workspace conflicts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filterByFields`: Given a series of field names, the violations are reduced
    to only those that apply to those fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filterByFieldAccess`: This filters the violations based on fields accessible
    only to the user. Drupal allows saving entities in an invalid state, especially
    if a workflow allows a less privileged user to modify specific fields of an entity.
    If using this filter, be cautious because the entity must have updated fields
    the user may not have had access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous methods always return a new object instance and do not have side
    effects on the original violations list.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will walk through deleting an entity. Deleting an entity
    allows you to remove an entity from the database so that it no longer exists.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `delete` method in the `ArticleController` controller in your module
    that has a parameter for the node entity object that will be provided by a route
    parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To delete an entity, you will invoke the `delete` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `delete` method immediately removes the entity from the database storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then return an empty JSON response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When no content is returned, we will use the `204 No Content` status code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must create the route in `routing.yml` that points to the `delete` method
    of `ArticleController` for an HTTP `DELETE` request to the `/``articles/{node}`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This route should have `_entity_access: ''node.delete''` for its requirements.
    However, we have used `_access: ''TRUE''` to bypass access checks for this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to make it aware of the new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An HTTP request such as the following can then be used to retrieve an article
    that is on your Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A second HTTP request to get the article will return a `404 Not Found` response
    since it has been deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `delete` method on the entity class is delegated to the `delete` method
    on the entity type’s storage handler. When a content entity is deleted, the storage
    purges all field values from the database and the entity’s database record. Deletion
    is permanent and cannot be reversed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an entity is deleted, the entity storage fires invoke the following hooks,
    allowing you to hook into an entity’s deletion. The entity being deleted is passed
    as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_predelete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_predelete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_ENTITY_TYPE_delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hook_entity_delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing an exception in a hook will roll back the database transaction and
    prevent the entity from being deleted, but it may also crash Drupal if not handled
    appropriately.
  prefs: []
  type: TYPE_NORMAL
