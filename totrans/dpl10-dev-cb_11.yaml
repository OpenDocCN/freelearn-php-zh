- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multilingual and Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the greatest strengths of Drupal has always been its ability to provide
    multilingual and internationalization capabilities. Not only can you empower content
    editors with the ability to add site content in multiple languages, but you can
    also translate the administrative interface.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the multilingual and internationalization features of
    **Drupal 10**, which have been greatly enhanced in each release since **Drupal
    6**. The previous version of Drupal required many extra modules to provide internationalization
    efforts, but now the majority is provided by Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal core provides the following multilingual modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Language**: This provides you with the ability to detect and support multiple
    languages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface translation**: This takes installed languages and translates strings
    that are presented through the user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration translation**: This allows you to translate configuration entities,
    such as date formats and views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content translation**: This brings the power of providing content in different
    languages and displaying in the current language of the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each module serves a specific purpose in creating a multilingual experience
    for your Drupal site. Under the hood, Drupal supports the language code for all
    entities and cache contexts. These modules expose the interfaces to implement
    and deliver internationalized experiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes to make your site multilingual
    and internationalized:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining how the current language is selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating administrative interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multilingual views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining how the current language is selected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out of the box, Drupal is capable of determining which language it should show
    for both the content and user interface without much more than adding a few settings
    from the admin screen. This is a required step in making sure that, at all times,
    the appropriate language is used for each user when presenting content.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe will show you how to set the parameters for how Drupal
    decides which language to use to present content on a page to a user. There are
    a handful of ways you can detect the language to use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, log in to your Drupal site and go to the **Extend** section of the admin.
    Enable the **Language**, **Content Translation**, and **Interface** **Translation**
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, navigate to the **Administration** | **Configuration** | **Regional and
    Language** | **Languages** sections of the admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Detection and selection** tab. There are two sections on this
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The top section, **Interface text language detection**, lets you dictate how
    the current language is selected for the interface text:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Language detection options in the admin screen](img/Figure_11.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Language detection options in the admin screen
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are many language detection methods available: **Account
    administration pages**, **URL**, **Session**, **User**, **Browser**, and **Selected
    language**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second section, **Content language detection**, lets you dictate how the
    current language is selected when displaying content to users (browsing the site):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Customize Content language detection to differ from Interface
    text language detection settings](img/Figure_11.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Customize Content language detection to differ from Interface
    text language detection settings
  prefs: []
  type: TYPE_NORMAL
- en: So, there are two options available – **content language** and **interface**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal is capable of detecting and setting the current language in a variety
    of ways. How does it know how to do this?
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, Drupal evaluates these language detection settings through its
    `LanguageNegotiator` class when a response is being generated to serve the user.
    It chooses the detected language based on the order and configuration of the settings.
  prefs: []
  type: TYPE_NORMAL
- en: The `LanguageNegotiator` class evaluates the language detection settings in
    order, which are evaluated using their specific language negotiation plugin implementations,
    located in the `modules/language/src/Plugin/LanguageNegotiation` directory within
    Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at the two sections of the **Detection and** **selection** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Interface text language detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As stated, Drupal is capable of providing translation and language detection
    capabilities for content and the interface itself, as shown in *Figure 11**.1*.
    On top of that, Drupal is also capable of controlling these rules for both scenarios,
    allowing maximum flexibility for users and editors regarding what language they
    see in different areas of the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the detection methods displayed in *Figure 11**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account administration pages**: This option allows users who have access
    to the administration area of Drupal to set the preferred language of the administration
    interface. When you enable this option, a new field appears on the **User** form
    that lets you select which language to use. This is useful for users who may want
    to have the Drupal admin in one language while reviewing the site/editing content
    in another language. In this example, a user is setting the administrative language
    to **Spanish**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Selecting Spanish as the Drupal admin language in the user
    account](img/Figure_11.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Selecting Spanish as the Drupal admin language in the user account
  prefs: []
  type: TYPE_NORMAL
- en: '`/es/admin/config/languages`, `es` is the language code, and Spanish would
    be used to translate the interface text for the user. The language code in the
    URL will always be set to **Spanish** in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/foo/bar?language=es`) or a session parameter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Setting the session parameter that will trigger the translation
    language to use](img/Figure_11.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Setting the session parameter that will trigger the translation
    language to use
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: This option will set the current language, based on the language
    preference in the Drupal user account under **Site language**. If a user edits
    their account, they will see this option and be able to set it to any of the listed
    languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser**: This option will set the current language based on the user’s
    browser preferences (Chrome, Firefox, or Safari).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selected language**: This option lets an admin set the default sitewide language.
    This is typically used as a final fallback setting if none of the preceding options
    are enabled or configured.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content language detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These options will determine how the current language is set when displaying
    content to a user. They will only appear if you enable the **Customize Content
    language detection to differ from Interface text language detection settings**
    checkbox just under its heading, as shown in *Figure 11**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'When enabled, you can set different criteria for language detection when viewing
    content. If not, the interface text settings are inherited. Most of the available
    options in this section are the same as the ones we already mentioned, except
    for two:'
  prefs: []
  type: TYPE_NORMAL
- en: '`language_content_entity` request parameter in the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface**: Enabling this option will use whatever language was detected
    from the interface text detection configuration from the previous section'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Take note that in both sections, the options are listed in a draggable table
    – you can set the language detection priority by moving them up or down the list.
    In most cases, however, the default settings are just fine and work for most scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Translating administrative interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The interface translation module provides a method for translating strings found
    in the Drupal user interface. Harnessing the `Language` module, interface translations
    are automatically downloaded from the Drupal translation server. By default, the
    interface language is loaded through the language code as a path prefix. With
    the default `Language` configuration, paths will be prefixed with the default
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Interface translations are based on strings provided in the code that are passed
    through the internal translation functions.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will enable Spanish, import the language files, and review
    the translated interface strings to provide missing or custom translations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal provides an automated installation process for translation files. For
    this to work, your web server must be able to communicate with [https://localize.drupal.org/](https://localize.drupal.org/).
    If your web server cannot automatically download the files from the translation
    server, you can refer to the manual installation instructions, which will be covered
    in the *There’s* *more…* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Extend** and install the **Interface Translation** module. It will prompt
    you to enable the **Language**, **File**, and **Field** modules to also be installed
    if they are not already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, click on **Configuration**. Go to the **Languages**
    page under the **Regional and** **Language** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Add language** in the languages overview table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – The language overview section in the admin](img/Figure_11.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – The language overview section in the admin
  prefs: []
  type: TYPE_NORMAL
- en: The **Add language** page provides a select list of all available languages
    that the interface can be translated to. Select **Spanish**, and then click on
    **Add language**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A batch process will run; install the translation language files, and import
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **INTERFACE TRANSLATION** column specifies the percentage of active translatable
    interface strings that have a matching translation. Clicking on the link allows
    you to view the **User interface** **translation** form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – The language overview screen with a newly added language, Spanish](img/Figure_11.06_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – The language overview screen with a newly added language, Spanish
  prefs: []
  type: TYPE_NORMAL
- en: The **Filter Translatable Strings** form allows you to search for translated
    strings or untranslated strings. Select **Only untranslated strings** from the
    **Search in** drop-down list and click on **Filter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the textbox on the right-hand side of the screen, a custom translation
    can be added to **Only untranslated strings**. Type in a translation for the item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Translating raw strings for Spanish in the admin](img/Figure_11.07_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Translating raw strings for Spanish in the admin
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save translations** to save the modification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `/es/node/add`, and you will notice that the `Basic` page content type
    description will now match your translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The interface translation module provides `\Drupal\locale\LocaleTranslation`,
    which implements `\Drupal\Core\StringTranslation\Translator\TranslatorInterface`.
    This class is registered under the `string_translation` service as an available
    lookup method.
  prefs: []
  type: TYPE_NORMAL
- en: When the `t` function or the `\Drupal\Core\StringTranslation\StringTranslationTrait::t`
    method is invoked, the `string_translation` service is called to provide a translated
    string. The `string_translation` service will iterate through the available translators
    and return a translated string, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Developers need to note that this is a key reason to ensure that module strings
    are passed through translation functions. It allows you to identify strings that
    need to be translated.
  prefs: []
  type: TYPE_NORMAL
- en: The translator provided in the interface translation will then attempt to resolve
    the provided string against known translations for the current language. If a
    translation has been saved, it will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will explore ways to install other languages, check translation statuses,
    and many more in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Manually installing language files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Translation files can be manually installed by downloading them from the [Drupal.org](http://Drupal.org)
    translation server and uploading them through the language interface. You can
    also use the `import` interface to upload custom `.``po`) files.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal core and most contributed projects have `.po` files available at the
    Drupal translations site, [https://localize.drupal.org](https://localize.drupal.org).
    On the site, click on `.po` file for Drupal core in all available languages. Additionally,
    clicking on a language will provide more translations for a specific language
    across projects.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Language files available on Drupal.org](img/Figure_11.08_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Language files available on Drupal.org
  prefs: []
  type: TYPE_NORMAL
- en: You can import a `.po` file by going to the `.po` file and then the appropriate
    language. You can treat the uploaded files as custom-created translations. This
    is recommended if you are providing a custom translation file that was not provided
    by [Drupal.org](http://Drupal.org). If you are updating [Drupal.org](http://Drupal.org)
    translations manually, make sure that you check the box that overwrites existing
    noncustom translations. The final option allows you to replace customized translations
    if the `.po` file provides them. This can be useful if you have translated missing
    strings that might now be provided by the official translation file.
  prefs: []
  type: TYPE_NORMAL
- en: Checking translation status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you add new modules, the available translations will grow. The `Interface
    translation` module provides a translation status report that is accessible from
    the `Reports` page. This will check the default translation server for the project
    and check whether there is a `.po` file available or whether it has changed. In
    the event of a custom module, you can provide a custom translation server, which
    is covered in the *Providing translations for a custom* *module* section.
  prefs: []
  type: TYPE_NORMAL
- en: If an update is available, you will be alerted. You can then import the translation
    file updates automatically or download and manually import them.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting translations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `.po` file. You can export all the available source text that is discovered
    in your current Drupal site without translations. This will provide a base `.po`
    for translators to work on.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can download a specific language. Specific language downloads
    can include non-customized translations, customized translations, and missing
    translations. Downloading customized translations can be used to help make contributions
    to the multilingual and internationalization efforts of the Drupal community!
  prefs: []
  type: TYPE_NORMAL
- en: Interface translation permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The interface translation module provides a single permission called **Translate
    interface text**. This permission permits users to interact with all the module’s
    capabilities. It is flagged with a security warning, as it allows users with this
    permission to customize all the output text presented to users.
  prefs: []
  type: TYPE_NORMAL
- en: However, it does allow you to provide a role for translators and limits their
    access to just translation interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Providing translations for a custom module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modules can provide custom translations in their directories or point to a remote
    file. These definitions are added to the module’s `info.yml` file. First, you
    need to specify the `interface translation project` key if it differs from the
    project’s machine name.
  prefs: []
  type: TYPE_NORMAL
- en: You need to then specify a server pattern through the `interface translation
    server pattern` key. This can be a relative path to Drupal’s root, such as `modules/custom/mymodule/translation.po`,
    or a remote file URL at [http://example.com/files/translations/mymodule/translation.po](http://example.com/files/translations/mymodule/translation.po).
  prefs: []
  type: TYPE_NORMAL
- en: Distributions (or other modules) can implement `hook_locale_translation_projects_alter`
    to provide this information on behalf of modules or alter defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'The server pattern accepts the following different tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%core` for the version of a course (for example, *10.x*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%project` for the project’s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%version` for the current version string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%language` for the language code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on the interface translation keys and variables can be found
    in the `local.api.php` document file, located in the interface translation module’s
    base folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the Drupal translation server at [https://localize.drupal.org/translate/drupal8](https://localize.drupal.org/translate/drupal8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can contribute using the localization server at [https://www.drupal.org/node/302194](https://www.drupal.org/node/302194)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `locale.api.php` documentation at [https://api.drupal.org/api/drupal/core%21modules%21locale%21locale.api.php/8](https://api.drupal.org/api/drupal/core%21modules%21locale%21locale.api.php/8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to PO and POT files at [https://www.drupal.org/node/1814954](https://www.drupal.org/node/1814954)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Configuration translation` module provides an interface for translating
    configurations with Interface translation and Language as dependencies. This module
    allows you to translate configuration entities. The ability to translate configuration
    entities adds an extra level of internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Interface translation allows you to translate strings provided in your Drupal
    site’s code base. Configuration translation allows you to translate importable
    and exportable configuration items that you have created, such as your site title
    or date formats.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will translate date format configuration entities. We will
    provide localized date formats for Danish to provide a more internationalized
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled in order to use **Configuration
    Translation**. Install **Danish** from the **Languages** interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Extend** and install the **Configuration Translation** module. It will
    prompt you to enable the **Interface Translation**, **Language**, **File**, and
    **Field** modules to also be installed if they are not already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, go to **Configuration**. Then, go to the **Configuration
    translation** page under the **Regional and** **Language** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the list for the **Date format** option in the configuration entity
    option table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Selecting a configuration entity type to translate](img/Figure_11.09_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Selecting a configuration entity type to translate
  prefs: []
  type: TYPE_NORMAL
- en: We will translate the default long date format to represent the **Danish** format.
    Click on the **Translate for the Default long date** **format** row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Add** to create a **Danish** translation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Adding different date formats for different languages](img/Figure_11.10_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Adding different date formats for different languages
  prefs: []
  type: TYPE_NORMAL
- en: For `l j. F, Y – H.i`. This will display the day of the week, the day of the
    month, the month, the full year, and the 24-hour notation for time.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save translation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, whenever a user is browsing your Drupal site with **Danish** as their language,
    the date format will be localized for their experience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Configuration translation` module requires interface translation; however,
    it does not work in the same fashion. The module modifies all entity types that
    extend the `\Drupal\Core\Config\Entity\ConfigEntityInterface` interface. It adds
    a new handler under the `config_translation_list` key. This is used to build a
    list of available configuration entities and their bundles.
  prefs: []
  type: TYPE_NORMAL
- en: The module alters the configuration schema in Drupal and updates the default
    configuration element definitions to use a specified class under `\Drupal\config_translation\Form`.
    This allows `\Drupal\config_translation\Form\ConfigTranslationFormBase` and its
    child classes properly saved translated configuration data that can be modified
    through the configuration translation screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the configuration is saved, it is identified as being part of a collection.
    The collection is identified as `language.LANGCODE` and all translated configuration
    entities are saved and loaded by this identifier. Here is an example of how the
    configuration items are stored in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – The configuration export containing language-specific configuration
    files](img/Figure_11.11_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – The configuration export containing language-specific configuration
    files
  prefs: []
  type: TYPE_NORMAL
- en: When browsing the site in the `es` language code, the appropriate `block.block.bartik_account_menu`
    configuration entity will be loaded. If you are using the default site, or no
    language code, the configuration entity with an empty collection will be used.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration entities and the ability to translate them are a big part of Drupal
    8’s multilingual capabilities. We’ll explore them in detail in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Altering configuration translation info definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Modules can invoke the `hook_config_translation_info_alter` hook to alter discovered
    configuration mappers. For instance, the `Node` module does this to modify the
    `node_type` configuration entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This updates the `node_type` definition to use the `\Drupal\node\ConfigTranslation\NodeTypeMapper`
    custom mapper class. This class adds the node type’s title as a configurable translation
    item.
  prefs: []
  type: TYPE_NORMAL
- en: Translating views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Views are configuration entities. When the `Configuration translation` module
    is enabled, it is possible to translate views. This will allow you to translate
    displayed titles, exposed form labels, and other items. Refer to the *Creating
    multilingual views* recipe in this chapter for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Translating content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content translation module provides a method for translating content entities,
    such as nodes and blocks. Each content entity needs to have translation enabled,
    which allows you to granularly decide what properties and fields are translated.
  prefs: []
  type: TYPE_NORMAL
- en: Content translations are duplications of the existing entity but flagged with
    a proper language code. When a visitor uses a language code, Drupal attempts to
    load content entities using that language code. If a translation is not present,
    Drupal will render the default untranslated entity.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled to use content translation.
    Install **Spanish** from the **Languages** interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Extend**, and install the **Content translation** module. It will prompt
    you to enable the **Language** modules to also be installed if they are not already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the module is installed, go to **Configuration**. Go to the **Content
    language and translation** page under the **Regional and** **Language** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the checkbox next to the **Content to expose** settings for the current
    content types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the content translation for the **Basic** page, and keep the provided
    default settings that enable translation for each field. Click on **Save configuration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Selecting which properties and fields are translatable for
    a specific content type](img/Figure_11.12_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Selecting which properties and fields are translatable for a
    specific content type
  prefs: []
  type: TYPE_NORMAL
- en: First, create a new **Basic page** node. We will create this in the site’s default
    language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When viewing the new node, click on the **Translate** tab. From the **Spanish**
    language row, click on **Add** to create a translated version of the node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Translating content for a node into other languages](img/Figure_11.13_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Translating content for a node into other languages
  prefs: []
  type: TYPE_NORMAL
- en: 'The content will be prepopulated with the default language’s content. Replace
    the title and body with the translated text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Adding a Spanish translation for the About us page](img/Figure_11.14_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Adding a Spanish translation for the About us page
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save and keep published (this translation)** to save the new translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Content` translation module works by utilizing language code flags. All
    content entities and field definitions have a language code key. A content entity
    has a language code column, which specifies what language the content entity is
    for. Field definitions also have a language code column, which is used to identify
    the translation for the content entity. Content entities can provide handler definitions
    for handling translations; otherwise, the `Content translation` module will provide
    its own.
  prefs: []
  type: TYPE_NORMAL
- en: Each entity and field record is saved with the proper language code to use.
    When an entity is loaded, the current language code is taken into consideration
    to ensure that the proper entity is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content translation is more than just providing content in different languages.
    Drupal has additional features on top to make managing and displaying translated
    content more flexible and robust as well.
  prefs: []
  type: TYPE_NORMAL
- en: Flagging translations as outdated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Content translation module provides a mechanism to flag translated entities
    as possibly being outdated. The **Flag other translations as outdated** flag provides
    a way to make a note of entities that will need updated translations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – You can flag other translations as outdated if the one being
    edited changes](img/Figure_11.15_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – You can flag other translations as outdated if the one being
    edited changes
  prefs: []
  type: TYPE_NORMAL
- en: This flag does not change any data but instead provides a moderation tool. This
    makes it
  prefs: []
  type: TYPE_NORMAL
- en: easy for translators to identify content that has been changed and requires
    updating.
  prefs: []
  type: TYPE_NORMAL
- en: The **TRANSLATION** tab for the content entity will highlight all translations
    that are still
  prefs: []
  type: TYPE_NORMAL
- en: marked as outdated. As they are changed, the editor can uncheck the flag.
  prefs: []
  type: TYPE_NORMAL
- en: Translating content links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mostly, Drupal menus contain links to nodes. Menu links are not translated by
    default, and the **Custom menu links** option must be enabled under **Content
    translation**. You will need to translate node links manually from the menu administration
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a menu link from the node create and edit form will not work with translations.
    If you edit the menu settings from a translation, it will edit the untranslated
    menu link.
  prefs: []
  type: TYPE_NORMAL
- en: Defining translation handlers for entities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Content translation module requires entity definitions to provide information
    about translation handlers. If this information is missing, it will provide its
    own defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Content entity definitions can provide a `translation` handler. If not provided,
    they will default to `\Drupal\content_translation\ContentTranslationHandler`.
    A node provides this definition and uses it to place the content translation information
    into the vertical tabs.
  prefs: []
  type: TYPE_NORMAL
- en: The `content_translation_metadata` key defines how to interact with translation
    metadata information, such as flagging other entities as outdated. The `content_translation_deletion`
    key provides a form class to handle entity translation deletion.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multilingual views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views, being configuration entities, are available for translation. However,
    the power of multilingual views does not lie just in configuration translation.
    Views allow you to build filters that react to the current language code. This
    ensures that the content, which has been translated into the user’s language,
    is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a multilingual view that provides a block showing
    recent articles. If there is no content, we will display a translated `no` `results`
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Drupal site needs to have two languages enabled in order to use **Content
    Translation**. Install **Spanish** from the **Languages** interface. Enable content
    translation for **Articles**. You will also need to have some translated content
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Views** from **Structure**, and click on **Add** **new view**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a view name, such as `Recent articles`, and change the type of content
    to `Article`. Mark that you would like to **Create a block**, and then click on
    **Save** and **edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add new **Filter criteria**. Search for **Translation language** and add the
    filter for **Content**. Set the filter to check **Interface text language selected
    for page**. This will only display that the content has been translated or the
    base language is the current language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Changing a view to return results in the language of the selected
    page](img/Figure_11.16_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Changing a view to return results in the language of the selected
    page
  prefs: []
  type: TYPE_NORMAL
- en: Add `No results behavior` to the `Currently no` `recent articles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Translate** tab. Click on **Add** for the **Spanish** row to
    translate the view for the language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the **Master display** settings and then the **Recent articles** display
    options’ fieldsets. Modify the **Display title** option to provide a translated
    title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 - Translating the View display title property](img/Figure_11.17_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 - Translating the View display title property
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand **No results behavior** to modify the text on the right-hand side of
    the screen, using the textbox on the left-hand side of the screen as the source
    for the original text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Translating the No results behavior text](img/Figure_11.18_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Translating the No results behavior text
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save translation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the block on your Drupal site. Visit the site through `/es` and note
    the translated `Views` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – The home page translated to Spanish](img/Figure_11.19_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – The home page translated to Spanish
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views provide the translation language filter that builds off this element.
    The views plugin system provides a mechanism for gathering and displaying all
    available languages. These will be saved as a token internally and then substituted
    with the actual language code when a query is executed. If a language code is
    no longer available, you will see the **Content language for selected** page,
    and views will fall back to the current language when viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You will come across the translation language filter option when editing views
    provided by Drupal core or contributed modules. While this is not an option in
    the user interface, it is a default practice to add a language filter defined
    as `***LANGUAGE_language_content***`, which will force the view to be multilingual.
  prefs: []
  type: TYPE_NORMAL
- en: The filter tells **Views** to query, based on the language code of the entity
    and its fields.
  prefs: []
  type: TYPE_NORMAL
- en: Views are configuration entities. The Configuration translation module allows
    you to translate views. Views can be translated from the main Configuration translation
    screens from the **Configuration** area or by editing individual views.
  prefs: []
  type: TYPE_NORMAL
- en: Most translation items will be under the **Master display settings** tab unless
    overridden in specific displays. Each display type will also have its own specific
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Translating interface items in Drupal goes quite deep. This extends well into
    views, where you can translate exposed filters, display formats, and menu items
    stemming from views displays.
  prefs: []
  type: TYPE_NORMAL
- en: Translating exposed form items and filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each view can translate the exposed form from the **Exposed Form** section.
    This does not translate the labels on the form but the form elements. You can
    translate the **submit** button text, **reset** button label, **sort** label,
    and how **ascending** or **descending** should be translated.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can translate the labels for exposed filters from the **Filters** section.
    Each exposed filter will show up as a collapsible fieldset, allowing you to configure
    the administrative label and front-facing label:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Translating exposed filter labels in a view](img/Figure_11.20_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Translating exposed filter labels in a view
  prefs: []
  type: TYPE_NORMAL
- en: By default, available translations need to be imported through the global interface
    translation context.
  prefs: []
  type: TYPE_NORMAL
- en: Translating display and row format items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some display formats have translatable items. These can be translated in each
    display mode’s section. For example, the following items can be translated with
    their display format:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Table` format allows you to translate the table summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RSS feed` format allows you to translate the feed description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Page` format allows you to translate the page’s title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Block` format allows you to translate the block’s title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating page display menu items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Custom menu links can be translated through the Content translation module.
    Views use a page display; however, they do not create custom menu link entities.
    The `Views` module takes all views with a page display and registers their paths
    into the routing system directly, as if defined in a module’s `routing.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Translating menu tabs provided by a view](img/Figure_11.21_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Translating menu tabs provided by a view
  prefs: []
  type: TYPE_NORMAL
- en: For example, the **People** view that lists all users can be translated to have
    an updated tab name and link description.
  prefs: []
  type: TYPE_NORMAL
