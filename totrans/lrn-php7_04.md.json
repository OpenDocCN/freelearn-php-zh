["```php\n<?php\n\nclass Book {\n}\n\nclass Customer {\n}\n```", "```php\n$book = new Book();\n$customer = new Customer();\n```", "```php\n$book1 = new Book();\n$book2 = new Book();\n```", "```php\n<?php\n\nclass Book {\n public $isbn;\n public $title;\n public $author;\n public $available;\n}\n```", "```php\npublic; we will explain what it means when talking about visibility in the next section. For now, just think of properties as variables inside the class. We can use these variables in objects. Try adding this code at the end of the Book.php file:\n```", "```php\n$book = new Book();\n$book->title = \"1984\";\n$book->author = \"George Orwell\";\n$book->available = true;\nvar_dump($book);\n```", "```php\n$book1 = new Book();\n$book1->title = \"1984\";\n$book2 = new Book();\n$book2->title = \"To Kill a Mockingbird\";\nvar_dump($book1, $book2);\n```", "```php\n<?php\n\nclass Book {\n    public $isbn;\n    public $title;\n    public $author;\n    public $available;\n\n public function getPrintableTitle(): string {\n $result = '<i>' . $this->title\n . '</i> - ' . $this->author;\n if (!$this->available) {\n $result .= ' <b>Not available</b>';\n }\n return $result;\n }\n}\n```", "```php\npublic function getCopy(): bool {\n    if ($this->available < 1) {\n        return false;\n    } else {\n        $this->available--;\n        return true;\n    }\n}\n```", "```php\n<?php\n$book = new Book();\n$book->title = \"1984\";\n$book->author = \"George Orwell\";\n$book->isbn = 9785267006323;\n$book->available = 12;\n\nif ($book->getCopy()) {\n    echo 'Here, your copy.';\n} else {\n    echo 'I am afraid that book is not available.';\n}\n```", "```php\npublic function __construct(int $isbn, string $title, string $author, int $available) {\n    $this->isbn = $isbn;\n    $this->title = $title;\n    $this->author = $author;\n    $this->available = $available;\n}\n```", "```php\n$book = new Book(\"1984\", \"George Orwell\", 9785267006323, 12);\n```", "```php\npublic function __construct(\n    int $isbn,\n    string $title,\n    string $author,\n    int $available = 0\n) {\n    $this->isbn = $isbn;\n    $this->title = $title;\n    $this->author = $author;\n    $this->available = $available;\n}\n```", "```php\n$book1 = new Book(\"1984\", \"George Orwell\", 9785267006323, 12);\n$book2 = new Book(\"1984\", \"George Orwell\", 9785267006323);\n```", "```php\npublic function __toString() {\n    $result = '<i>' . $this->title . '</i> - ' . $this->author;\n    if (!$this->available) {\n        $result .= ' <b>Not available</b>';\n    }\n    return $result;\n}\n```", "```php\nbook and then casts it to a string, invoking the __toString method:\n```", "```php\n$book = new Book(1234, 'title', 'author');\n$string = (string) $book; // title - author Not available\n```", "```php\n<?php\n\nclass Customer {\n    private $id;\n    private $firstname;\n    private $surname;\n    private $email;\n\n    public function __construct(\n        int $id,\n        string $firstname,\n        string $surname,\n        string $email\n    ) {\n        $this->id = $id;\n        $this->firstname = $firstname;\n        $this->surname = $surname;\n        $this->email = $email;\n    }\n}\n```", "```php\n<?php\n\nrequire_once __DIR__ . '/Book.php';\nrequire_once __DIR__ . '/Customer.php';\n\n$book1 = new Book(\"1984\", \"George Orwell\", 9785267006323, 12);\n$book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 9780061120084, 2);\n\n$customer1 = new Customer(1, 'John', 'Doe', 'johndoe@mail.com');\n$customer2 = new Customer(2, 'Mary', 'Poppins', 'mp@mail.com');\n```", "```php\n$book1->available = 2; // OK\n$customer1->id = 3; // Error!\n```", "```php\n<?php\n\nclass Customer {\n    private $id;\n    private $name;\n    private $surname;\n    private $email;\n\n    public function __construct(\n        int $id,\n        string $firstname,\n        string $surname,\n        string $email\n    ) {\n        $this->id = $id;\n        $this->firstname = $firstname;\n        $this->surname = $surname;\n        $this->email = $email;\n    }\n\n public function getId(): id {\n return $this->id;\n }\n public function getFirstname(): string {\n return $this->firstname;\n }\n public function getSurname(): string {\n return $this->surname;\n }\n public function getEmail(): string {\n return $this->email;\n }\n public function setEmail(string $email) {\n $this->email = $email;\n }\n}\n```", "```php\n<?php\n\nclass Book {\n    private $isbn;\n    private $title;\n    private $author;\n    private $available;\n\n    public function __construct(\n        int $isbn,\n        string $title,\n        string $author,\n        int $available = 0\n    ) {\n        $this->isbn = $isbn;\n        $this->title = $title;\n        $this->author = $author;\n        $this->available = $available;\n    }\n public function getIsbn(): int {\n return $this->isbn;\n }\n public function getTitle(): string {\n return $this->title;\n }\n public function getAuthor(): string {\n return $this->author;\n }\n public function isAvailable(): bool {\n return $this->available;\n }\n\n    public function getPrintableTitle(): string {\n        $result = '<i>' . $this->title . '</i> - ' . $this->author;\n        if (!$this->available) {\n            $result .= ' <b>Not available</b>';\n        }\n        return $result;\n    }\n\n    public function getCopy(): bool {\n        if ($this->available < 1) {\n            return false;\n        } else {\n            $this->available--;\n            return true;\n        }\n    }\n\n public function addCopy() {\n $this->available++;\n }\n}\n```", "```php\nprivate static $lastId = 0;\n```", "```php\npublic function __construct(\n    int $id,\n    string $name,\n    string $surname,\n    string $email\n) {\n if ($id == null) {\n $this->id = ++self::$lastId;\n } else {\n $this->id = $id;\n if ($id > self::$lastId) {\n self::$lastId = $id;\n }\n }\n    $this->name = $name;\n    $this->surname = $surname;\n    $this->email = $email;\n}\n```", "```php\n$customer1 = new Customer(3, 'John', 'Doe', 'johndoe@mail.com');\n$customer2 = new Customer(null, 'Mary', 'Poppins', 'mp@mail.com');\n$customer3 = new Customer(7, 'James', 'Bond', '007@mail.com');\n```", "```php\npublic static function getLastId(): int {\n    return self::$lastId;\n}\n```", "```php\nCustomer::getLastId();\n$customer1::getLastId();\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n```", "```php\n<?php\n\nuse Bookstore\\Domain\\Book;\nuse Bookstore\\Domain\\Customer;\n\nrequire_once __DIR__ . '/Book.php';\nrequire_once __DIR__ . '/Customer.php';\n//...\n```", "```php\nuse Bookstore\\Domain\\Book;\nuse Library\\Domain\\Book as LibraryBook;\n\n```", "```php\nfunction __autoload($classname) {\n    $lastSlash = strpos($classname, '\\\\') + 1;\n    $classname = substr($classname, $lastSlash);\n    $directory = str_replace('\\\\', '/', $classname);\n    $filename = __DIR__ . '/' . $directory . '.php';\n    require_once($filename);\n}\n```", "```php\n<?php\n\nuse Bookstore\\Domain\\Book;\nuse Bookstore\\Domain\\Customer;\n\nfunction __autoload($classname) {\n    $lastSlash = strpos($classname, '\\\\') + 1;\n    $classname = substr($classname, $lastSlash);\n    $directory = str_replace('\\\\', '/', $classname);\n    $filename = __DIR__ . '/src/' . $directory . '.php'\n    require_once($filename);\n}\n\n$book1 = new Book(\"1984\", \"George Orwell\", 9785267006323, 12);\n$customer1 = new Customer(5, 'John', 'Doe', 'johndoe@mail.com');\n```", "```php\nfunction autoloader($classname) {\n    $lastSlash = strpos($classname, '\\\\') + 1;\n    $classname = substr($classname, $lastSlash);\n    $directory = str_replace('\\\\', '/', $classname);\n    $filename = __DIR__ . '/' . $directory . '.php';\n    require_once($filename);\n}\nspl_autoload_register('autoloader');\n\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Person {\n    protected $firstname;\n    protected $surname;\n\n    public function __construct(string $firstname, string $surname) {\n        $this->firstname = $firstname;\n        $this->surname = $surname;\n    }\n\n    public function getFirstname(): string {\n        return $this->firstname;\n    }\n\n    public function getSurname(): string {\n        return $this->surname;\n    }\n}\n```", "```php\nCustomer class by removing the duplicate properties and its getters:\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Customer extends Person {\n    private static $lastId = 0;\n    private $id;\n    private $email;\n\n    public function __construct(\n        int $id,\n        string $name,\n        string $surname,\n        string $email\n    ) {\n        if (empty($id)) {\n            $this->id = ++self::$lastId;\n        } else {\n            $this->id = $id;\n            if ($id > self::$lastId) {\n                self::$lastId = $id;\n            }\n        }\n        $this->name = $name;\n        $this->surname = $surname;\n        $this->email = $email;\n    }\n\n    public static function getLastId(): int {\n        return self::$lastId;\n    }\n\n    public function getId(): int {\n        return $this->id;\n    }\n\n    public function getEmail(): string {\n        return $this->email;\n    }\n\n    public function setEmail($email): string {\n        $this->email = $email;\n    }\n}\n```", "```php\npublic function __construct(\n    int $id,\n    string $firstname,\n    string $surname,\n    string $email\n) {\n parent::__construct($firstname, $surname);\n    if (empty($id)) {\n        $this->id = ++self::$lastId;\n    } else {\n        $this->id = $id;\n        if ($id > self::$lastId) {\n            self::$lastId = $id;\n        }\n    }\n    $this->email = $email;\n}\n```", "```php\nclass Pops {\n    public function sayHi() {\n        echo \"Hi, I am pops.\";\n    }\n}\n\nclass Child extends Pops{\n public function sayHi() {\n echo \"Hi, I am a child.\";\n }\n}\n\n$pops = new Pops();\n$child = new Child();\necho $pops->sayHi(); // Hi, I am pops.\necho $child->sayHi(); // Hi, I am Child.\n```", "```php\nclass Child extends Pops{\n    public function sayHi() {\n        echo \"Hi, I am a child.\";\n parent::sayHi();\n    }\n}\n\n$child = new Child();\necho $child->sayHi(); // Hi, I am Child. Hi I am pops.\n```", "```php\nclass Child extends Pops{\n protected function sayHi() {\n        echo \"Hi, I am a child.\";\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer;\n\nclass Basic extends Customer {\n    public function getMonthlyFee(): float {\n        return 5.0;\n    }\n\n    public function getAmountToBorrow(): int {\n        return 3;\n    }\n\n    public function getType(): string {\n        return 'Basic';\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer;\n\nclass Premium extends Customer {\n    public function getMonthlyFee(): float {\n        return 10.0;\n    }\n\n    public function getAmountToBorrow(): int {\n        return 10;\n    }\n\n    public function getType(): string {\n        return 'Premium';\n    }\n}\n```", "```php\nfunction checkIfValid(Customer $customer, array $books): bool {\n    return $customer->getAmountToBorrow() >= count($books);\n}\n```", "```php\n$customer1 = new Basic(5, 'John', 'Doe', 'johndoe@mail.com');\nvar_dump(checkIfValid($customer1, [$book1])); // ok\n$customer2 = new Customer(7, 'James', 'Bond', 'james@bond.com');\nvar_dump(checkIfValid($customer2, [$book1])); // fails\n```", "```php\n<?php\nabstract class Customer extends Person {\n//...\n abstract public function getMonthlyFee();\n abstract public function getAmountToBorrow();\n abstract public function getType();\n//...\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Person {\n\n private static $lastId = 0;\n protected $id;\n    protected $firstname;\n    protected $surname;\n protected $email;\n\n public function __construct(\n int $id,\n string $firstname,\n string $surname,\n string $email\n ) {\n $this->firstname = $firstname;\n $this->surname = $surname;\n $this->email = $email;\n\n if (empty($id)) {\n $this->id = ++self::$lastId;\n } else {\n $this->id = $id;\n if ($id > self::$lastId) {\n self::$lastId = $id;\n }\n }\n }\n\n    public function getFirstname(): string {\n        return $this->firstname;\n    }\n    public function getSurname(): string {\n        return $this->surname;\n    }\n public static function getLastId(): int {\n return self::$lastId;\n }\n public function getId(): int {\n return $this->id;\n }\n public function getEmail(): string {\n return $this->email;\n }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\ninterface Customer {\n    public function getMonthlyFee(): float;\n    public function getAmountToBorrow(): int;\n    public function getType(): string;\n}\n```", "```php\nclass Basic implements Customer {\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\ninterface Payer {\n    public function pay(float $amount);\n    public function isExtentOfTaxes(): bool;\n}\n```", "```php\n//...\nuse Bookstore\\Domain\\Customer; \nuse Bookstore\\Domain\\Person;\n\nclass Basic extends Person implements Customer {\n    public function getMonthlyFee(): float {\n//...\n```", "```php\n//...\nuse Bookstore\\Domain\\Customer; \nuse Bookstore\\Domain\\Person;\n\nclass Premium extends Person implements Customer {\n    public function getMonthlyFee(): float {\n//...\n```", "```php\npublic function pay(float $amount) {\n    echo \"Paying $amount.\";\n}\n\npublic function isExtentOfTaxes(): bool {\n    return false;\n}\n```", "```php\npublic function pay(float $amount) {\n    echo \"Paying $amount.\";\n}\n\npublic function isExtentOfTaxes(): bool {\n    return true;\n}\n```", "```php\ninterface Customer extends Payer {\n```", "```php\nfunction processPayment(Payer $payer, float $amount) {\n    if ($payer->isExtentOfTaxes()) {\n        echo \"What a lucky one...\";\n    } else {\n        $amount *= 1.16;\n    }\n    $payer->pay($amount);\n}\n```", "```php\n$basic = new Basic(1, \"name\", \"surname\", \"email\");\n$premium = new Premium(2, \"name\", \"surname\", \"email\");\nvar_dump($basic instanceof Basic); // true\nvar_dump($basic instanceof Premium); // false\nvar_dump($premium instanceof Basic); // false\nvar_dump($premium instanceof Premium); // true\nvar_dump($basic instanceof Customer); // true\nvar_dump($basic instanceof Person); // true\nvar_dump($basic instanceof Payer); // true\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\ntrait Unique {\n    private static $lastId = 0;\n    protected $id;\n\n public function setId(int $id) {\n        if (empty($id)) {\n            $this->id = ++self::$lastId;\n        } else {\n            $this->id = $id;\n            if ($id > self::$lastId) {\n                self::$lastId = $id;\n            }\n        }\n    }\n\n    public static function getLastId(): int {\n        return self::$lastId;\n    }\n    public function getId(): int {\n        return $this->id;\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nuse Bookstore\\Utils\\Unique;\n\nclass Person {\n use Unique;\n\n    protected $firstname;\n    protected $surname;\n    protected $email;\n\n    public function __construct(\n        int $id,\n        string $firstname,\n        string $surname,\n        string $email\n    ) {\n        $this->firstname = $firstname;\n        $this->surname = $surname;\n        $this->email = $email;\n $this->setId($id);\n    }\n\n    public function getFirstname(): string {\n        return $this->firstname;\n    }\n    public function getSurname(): string {\n        return $this->surname;\n    }\n    public function getEmail(): string {\n        return $this->email;\n    }\n    public function setEmail(string $email) {\n        $this->email = $email;\n    }\n}\n```", "```php\n$basic1 = new Basic(1, \"name\", \"surname\", \"email\");\n$basic2 = new Basic(null, \"name\", \"surname\", \"email\");\nvar_dump($basic1->getId()); // 1\nvar_dump($basic2->getId()); // 2\n```", "```php\n$basic = new Basic(1, \"name\", \"surname\", \"email\");\n$premium = new Premium(null, \"name\", \"surname\", \"email\");\nvar_dump($basic->getId()); // 1\nvar_dump($premium->getId()); // 2\n```", "```php\nvar_dump($basic->getId()); // 1\nvar_dump($premium->getId()); // 1\n```", "```php\n$basic = new Basic(1, \"name\", \"surname\", \"email\");\n$premium = new Premium(null, \"name\", \"surname\", \"email\");\nvar_dump(Person::getLastId()); // 2\nvar_dump(Unique::getLastId()); // 0\nvar_dump(Basic::getLastId()); // 2\nvar_dump(Premium::getLastId()); // 2\n```", "```php\n<?php\n\ntrait Contract {\n    public function sign() {\n        echo \"Signing the contract.\";\n    }\n}\n\nclass Manager {\n    use Contract;\n\n    public function sign() {\n        echo \"Signing a new player.\";\n    }\n}\n```", "```php\n$manager = new Manager();\n$manager->sign(); // Signing a new player.\n```", "```php\n<?php\n\ntrait Contract {\n    public function sign() {\n        echo \"Signing the contract.\";\n    }\n}\n\ntrait Communicator {\n    public function sign() {\n        echo \"Signing to the waitress.\";\n    }\n}\n\nclass Manager {\n use Contract, Communicator;\n}\n\n$manager = new Manager();\n$manager->sign();\n```", "```php\nclass Manager {\n use Contract, Communicator {\n Contract::sign insteadof Communicator;\n Communicator::sign as makeASign;\n }\n}\n\n$manager = new Manager();\n$manager->sign(); // Signing the contract.\n$manager->makeASign(); // Signing to the waitress.\n```", "```php\npublic function setId($id) {\n    if ($id < 0) {\n throw new \\Exception('Id cannot be negative.');\n    }\n    if (empty($id)) {\n        $this->id = ++self::$lastId;\n    } else {\n        $this->id = $id;\n        if ($id > self::$lastId) {\n            self::$lastId = $id;\n        }\n    }\n}\n```", "```php\n$basic = new Basic(-1, \"name\", \"surname\", \"email\");\n```", "```php\npublic function setId(int $id) {\n try {\n        if ($id < 0) {\n            throw new Exception('Id cannot be negative.');\n        }\n        if (empty($id)) {\n            $this->id = ++self::$lastId;\n        } else {\n            $this->id = $id;\n            if ($id > self::$lastId) {\n                self::$lastId = $id;\n            }\n        }\n } catch (Exception $e) {\n echo $e->getMessage();\n }\n}\n```", "```php\ncatch block. Calling the getMessage method on an exception instance will give us the message—the first argument when creating the object. But remember that the argument of the constructor is optional; so, do not rely on the message of the exception too much if you are not sure how it is generated, as it might be empty.\n```", "```php\ntry {\n    $basic = new Basic(-1, \"name\", \"surname\", \"email\");\n} catch (Exception $e) {\n    echo 'Something happened when creating the basic customer: '\n        . $e->getMessage();\n}\n```", "```php\n// scenario 1: the whole try-catch-finally\ntry {\n    // code that might throw an exception\n} catch (Exception $e) {\n    // code that deals with the exception\n} finally {\n    // finally block\n}\n\n// scenario 2: try-finally without catch\ntry {\n    // code that might throw an exception\n} finally {\n    // finally block\n}\n\n// scenario 3: try-catch without finally\ntry {\n    // code that might throw an exception\n} catch (Exception $e) {\n    // code that deals with the exception\n}\n```", "```php\ninit.php file:\n```", "```php\nfunction createBasicCustomer($id)\n{\n    try {\n        echo \"\\nTrying to create a new customer.\\n\";\n        return new Basic($id, \"name\", \"surname\", \"email\");\n    } catch (Exception $e) {\n        echo \"Something happened when creating the basic customer: \"\n            . $e->getMessage() . \"\\n\";\n    } finally {\n        echo \"End of function.\\n\";\n    }\n}\n\ncreateBasicCustomer(1);\ncreateBasicCustomer(-1);\n```", "```php\n<?php\n\nnamespace Bookstore\\Exceptions;\n\nuse Exception;\n\nclass InvalidIdException extends Exception {\n    public function __construct($message = null) {\n        $message = $message ?: 'Invalid id provided.';\n        parent::__construct($message);\n    }\n}\n```", "```php\nthrow new InvalidIdException('Id cannot be a negative number.');\n```", "```php\n<?php\n\nnamespace Bookstore\\Exceptions;\n\nuse Exception;\n\nclass ExceededMaxAllowedException extends Exception {\n    public function __construct($message = null) {\n        $message = $message ?: 'Exceeded max allowed.';\n        parent::__construct($message);\n    }\n}\n```", "```php\npublic function setId(int $id) {\n        if ($id < 0) {\n            throw new InvalidIdException(\n                'Id cannot be a negative number.'\n            );\n        }\n        if (empty($id)) {\n            $this->id = ++self::$lastId;\n        } else {\n            $this->id = $id;\n            if ($id > self::$lastId) {\n                self::$lastId = $id;\n            }\n        }\n if ($this->id > 50) {\n throw new ExceededMaxAllowedException(\n 'Max number of users is 50.'\n );\n }\n    }\n```", "```php\nfunction createBasicCustomer(int $id)\n{\n    try {\n        echo \"\\nTrying to create a new customer with id $id.\\n\";\n        return new Basic($id, \"name\", \"surname\", \"email\");\n } catch (InvalidIdException $e) {\n        echo \"You cannot provide a negative id.\\n\";\n } catch (ExceededMaxAllowedException $e) {\n        echo \"No more customers are allowed.\\n\";\n    } catch (Exception $e) {\n        echo \"Unknown exception: \" . $e->getMessage();\n    }\n}\n\ncreateBasicCustomer(1);\ncreateBasicCustomer(-1);\ncreateBasicCustomer(55);\n```", "```php\ntry {\n    echo \"\\nTrying to create a new customer with id $id.\\n\";\n    return new Basic($id, \"name\", \"surname\", \"email\");\n} catch (Exception $e) {\n    echo 'Unknown exception: ' . $e->getMessage() . \"\\n\";\n} catch (InvalidIdException $e) {\n    echo \"You cannot provide a negative id.\\n\";\n} catch (ExceededMaxAllowedException $e) {\n    echo \"No more customers are allowed.\\n\";\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain\\Customer;\n\nuse Bookstore\\Domain\\Customer;\n\nclass CustomerFactory {\n    public static function factory(\n        string $type,\n        int $id,\n        string $firstname,\n        string $surname,\n        string $email\n    ): Customer {\n        switch ($type) {\n            case 'basic':\n                return new Basic($id, $firstname, $surname, $email);\n            case 'premium':\n                return new Premium($id, $firstname, $surname, $email);\n        }\n    }\n}\n```", "```php\npublic static function factory(\n        string $type,\n        int $id,\n        string $firstname,\n        string $surname,\n        string $email\n    ): Customer {\n $classname = __NAMESPACE__ . '\\\\' . ucfirst($type);\n if (!class_exists($classname)) {\n throw new \\InvalidArgumentException('Wrong type.');\n }\n return new $classname($id, $firstname, $surname, $email);\n}\n```", "```php\nCustomerFactory::factory('basic', 2, 'mary', 'poppins', 'mary@poppins.com');\nCustomerFactory::factory('premium', null, 'james', 'bond', 'james@bond.com');\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass Config {\n    private $data;\n\n    public function __construct() {\n    $json = file_get_contents(__DIR__ . '/../../config/app.json');\n        $this->data = json_decode($json, true);\n    }\n\n    public function get($key) {\n        if (!isset($this->data[$key])) {\n            throw new NotFoundException(\"Key $key not in config.\");\n        }\n        return $this->data[$key];\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Exceptions;\n\nuse Exception;\n\nclass NotFoundException extends Exception {\n}\n```", "```php\n{\n  \"db\": {\n    \"user\": \"Luke\",\n    \"password\": \"Skywalker\"\n  }\n}\n```", "```php\n$config = new Config();\n$dbConfig = $config->get('db');\nvar_dump($dbConfig);\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass Config {\n private static $data;\n\n    public function __construct() {\n        $json = file_get_contents(__DIR__ . '/../config/app.json');\n self::$data = json_decode($json, true);\n    }\n\n public static function get($key) {\n if (!isset(self::$data[$key])) {\n            throw new NotFoundException(\"Key $key not in config.\");\n        }\n return self::$data[$key];\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass Config {\n    private $data;\n private static $instance;\n\n private function __construct() {\n        $json = file_get_contents(__DIR__ . '/../config/app.json');\n        $this->data = json_decode($json, true);\n    }\n\n public static function getInstance(){\n if (self::$instance == null) {\n self::$instance = new Config();\n }\n return self::$instance;\n }\n\n    public function get($key) {\n        if (!isset($this->data[$key])) {\n            throw new NotFoundException(\"Key $key not in config.\");\n        }\n        return $this->data[$key];\n    }\n}\n```", "```php\n$config = Config::getInstance();\n$dbConfig = $config->get('db');\nvar_dump($dbConfig);\n```", "```php\n$addTaxes = function (array &$book, $index, $percentage) {\n    $book['price'] += round($percentage * $book['price'], 2);\n};\n```", "```php\n$books = [\n    ['title' => '1984', 'price' => 8.15],\n    ['title' => 'Don Quijote', 'price' => 12.00],\n    ['title' => 'Odyssey', 'price' => 3.55]\n];\nforeach ($books as $index => $book) {\n $addTaxes($book, $index, 0.16);\n}\nvar_dump($books);\n```", "```php\narray_walk($books, $addTaxes, 0.16);\n```", "```php\nfunction addTaxes(array &$book, $index, $percentage) {\n    if (isset($book['price'])) {\n        $book['price'] += round($percentage * $book['price'], 2);\n    }\n}\n\nclass Taxes {\n    public static function add(array &$book, $index, $percentage)\n    {\n        if (isset($book['price'])) {\n            $book['price'] += round($percentage * $book['price'], 2);\n        }\n    }\n    public function addTaxes(array &$book, $index, $percentage)\n    {\n        if (isset($book['price'])) {\n            $book['price'] += round($percentage * $book['price'], 2);\n        }\n    }\n}\n\n// using normal function\narray_walk($books, 'addTaxes', 0.16);\nvar_dump($books);\n\n// using static class method\narray_walk($books, ['Taxes', 'add'], 0.16);\nvar_dump($books);\n\n// using class method\narray_walk($books, [new Taxes(), 'addTaxes'], 0.16);\nvar_dump($books);\n```", "```php\n$percentage = 0.16;\n$addTaxes = function (array &$book, $index) use ($percentage) {\n    if (isset($book['price'])) {\n        $book['price'] += round($percentage * $book['price'], 2);\n    }\n};\n$percentage = 100000;\narray_walk($books, $addTaxes);\nvar_dump($books);\n```", "```php\n$percentage = 0.16;\n$addTaxes = function (array &$book, $index) use (&$percentage) {\n    if (isset($book['price'])) {\n        $book['price'] += round($percentage * $book['price'], 2);\n    }\n};\n\narray_walk($books, $addTaxes, 0.16);\nvar_dump($books);\n\n$percentage = 100000;\narray_walk($books, $addTaxes, 0.16);\nvar_dump($books);\n```"]