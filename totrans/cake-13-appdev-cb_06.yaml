- en: Chapter 6. Routing Magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `named` and `GET` parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using routes with prefixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with route elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding catch-all routes for profile pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding validation for catch-all routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom `Route` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every web-based application will eventually have to develop a successful
    strategy to obtain better search engine position through a technique known as
    **search engine optimization**.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts by introducing some basic concepts of routing through the
    use of route parameters, and continues to build optimized routes to leverage our
    search engine placement.
  prefs: []
  type: TYPE_NORMAL
- en: The final section in this chapter shows us how to create highly optimized URLs
    for our user profiles, and how to build custom `Route` classes to obtain even
    more flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Using named and GET parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CakePHP already offers a very useful set of default routes that allow any set
    of URL elements to be sent to the controller action as arguments. For example,
    a URL such as `http://localhost/tags/view/cakephp` is interpreted as a call to
    the `TagsController::view()` method, sending `cakephp` as its first argument.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are times when we need more flexibility when creating URLs with
    arguments, such as the ability to omit certain arguments or add others that may
    not have been specified in the method signature. `Named` and `GET` parameters
    allow us to have such flexibility, without losing the advantage of letting CakePHP
    deal with its automatic URL parsing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `categories`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table named `articles`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model, `Article`, in
    a file named `article.php` and place it in your `app/models` folder, with the
    following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller, `ArticlesController`, in a file named `articles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `articles` in your `app/views` folder, then create the
    view in a file named `view.ctp` and place it in your `app/views/articles` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by adding the possibility to change the number of related articles
    through a `GET` parameter. Edit your `app/controllers/articles_controller.php`
    file and make the following changes to the `view()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now browse to `http://localhost/articles/view/1?related=2` we should see
    the article content, along with up to two related articles, as shown in the following
    screenshot:![How to do it...](img/1926_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now use named parameters to pass a search engine-friendly version of
    the article title, even though it is not needed to show the article or its related
    content. Edit your `ArticlesController` class and add the following at the end
    of the `view()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now edit the `app/views/articles/view.ctp` file and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we hover over the links to the related articles, we will notice they include
    two new parameters: `category` and `title`. An example generated URL could be
    `http://localhost/articles/view/4/category:frameworks/title:creating_your_first_helper`.
    Clicking on this link would take us to the article page, which also shows the
    specified parameters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both `GET` and `named` parameters work in a similar fashion, by being automatically
    available in our application code as an array. `GET` parameters are available
    in `$this->params['url']`, while named parameters are available in `$this->params['named']`.
    Checking the existence of a parameter is as simple as verifying that one of these
    given arrays contains a value whose key is the wanted parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating links that specify either `named` or `GET` parameters (or both) is
    done by also specifying an indexed array of parameters (where the key is the parameter
    name, and the value its value.) For `GET` parameters, this array is set in the
    special `?` route index key, while for named parameters each parameter is specified
    as part of the actual array based URL.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learnt how to specify named parameters just by setting a `key => value` pair
    in the array-based URL. However, we may want to also specify which of the named
    parameters should actually be parsed, and to make sure they are only parsed when
    the value matches a certain regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we can define the `title` named parameter for all actions in
    the `articles` controller, so it is parsed only when it follows a certain regular
    expression, where title can only contain lower case letters, numbers, or the underscore
    sign. To do so, we add the following sentence to our `app/config/routes.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The first argument is an array, indexed by parameter name, and whose value
    contains another array that may include any of the following settings, all of
    which are optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `action` | If specified, the named parameter will be parsed only for the
    given action. |'
  prefs: []
  type: TYPE_TB
- en: '| `controller` | If specified, the named parameter will be parsed only for
    the given controller. |'
  prefs: []
  type: TYPE_TB
- en: '| `match` | A regular expression that will be used to see if the provided value
    matches the named parameter. If specified, the named parameter will be parsed
    only when the value matches the expression. |'
  prefs: []
  type: TYPE_TB
- en: 'The second argument to `Router::connectNamed()` is an optional array of settings,
    which may include any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `default` | If set to `true`, it will also load the named parameters needed
    for pagination to work. If you call `Router::connectNamed()` several times, this
    is only needed once, unless you set the `reset` option to `true`. Defaults to
    `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| `greedy` | If set to `false`, it will only parse the named parameters that
    are explicitly defined through a `Router::connectNamed()` call. Defaults to `true`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `reset` | If set to `true`, it will wipe out any named parameters defined
    prior to this call. Defaults to `false`. |'
  prefs: []
  type: TYPE_TB
- en: 'To further understand the `greedy` option, we could still allow the URL to
    include the `category` and `title` parameters, but may want to only parse the
    `title` value. To do this, we would set `greedy` to `false` when defining the
    named parameter. That way, `$this->params[''named'']` would only contain the value
    for `title`, even when `category` is specified in the requested URL. We also want
    to do this only for the `view` action of the `articles` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we had to specify the regular expression for the `title` named parameter
    again, even though we specified it before. This is because we are configuring
    a named parameter whose name already exists, so our definition would override
    the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Working with route elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using routes with prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often enough we find ourselves needing to separate different areas of our application,
    not only in terms of code and user interface, but also in terms of functionality.
    With CakePHP's flexible routing system, we can achieve this and more by using
    prefixes, which provide us with a way to reimplement certain controller actions
    in different ways, and reach a particular implementation depending on the prefix
    being used, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create the required `ProfilesController` class in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `profiles` in your `app/views` folder, then create the
    view in a file named `index.ctp` and place it in your `app/views/profiles` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the view for the `edit` action in a file named `edit.ctp` and place
    it in your `app/views/profiles` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by adding two prefixes to CakePHP: `admin`, and `manager`. Edit your
    `app/config/core.php` file and look for the line that defines the `Routing.prefixes`
    setting. If it is commented out, uncomment it. Then change it to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let us modify the `ProfilesController` class to add the overridden `index`
    and `edit` actions for both prefixes. We will also add a new action so that when
    accessed with the `admin` prefix, we can add new profile records. Edit your `app/controllers/profiles_controller.php`
    file and add the following methods at the beginning of the `ProfilesController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to change the `edit` action so that it can handle the creation
    of new records. While still editing your `app/controllers/profiles_controller.php`
    file, make the following changes to the `edit()` method of the `ProfilesController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is changing the views. Edit your `app/views/profiles/index.ctp`
    view file and add the following at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit your `app/views/profiles/edit.ctp` view file and make the following
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any set of values specified in the configuration setting, `Routing.prefixes`,
    act as routing prefixes. In this example, we have added two prefixes: `admin`
    and `manager`. Whenever we use a prefix in an URL (where the prefix precedes a
    normal CakePHP URL), CakePHP will set the current prefix in `$this->params[''prefix'']`
    and execute an action whose name is the same as if the prefix were not used, but
    preceded with the prefix and an underscore sign, in the same controller as if
    the prefix were not used.'
  prefs: []
  type: TYPE_NORMAL
- en: When we access `http://localhost/manager/profiles/index` in our example, CakePHP
    will process this request by executing the action `manager_index` located in the
    `ProfilesController`, and setting `$this->params['prefix']` to `manager`. Knowing
    this, we can add controller and view variables to tell actions and views if we
    are accessing the application as a manager (when the `manager` prefix is set)
    or as an administrator (when the `admin` prefix is set.) We implement this through
    a more general approach by creating an appropriate controller and view variable
    for each prefix (isManager for the `manager` prefix, and `isAdmin` for the `admin`
    prefix) in the `beforeFilter` callback.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Using prefixes for role based access controller* in [Chapter 1](ch01.html
    "Chapter 1. Authentication"), *Authentication*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with route elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even when `GET` and `named` parameters can be useful in most situations, we
    may need to further optimize our application URLs for better search engine rankings.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, CakePHP provides us with route elements, a solution that maintains
    the flexibility of `GET` and named parameters, and improves the way intra-application
    URLs are built.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample data to work with. Follow the *Getting ready* section of
    the recipe *Using GET and named parameters*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want our article URLs to be further optimized for search engines, so we
    start by creating a new route. Edit your `app/config/routes.php` file and add
    the following route at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As our route defines three elements (`id`, `category`, and `title`), we need
    to modify the view to specify the values for those elements. Edit your `app/views/articles/index.ctp`
    view file and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CakePHP uses the routes defined in the `routes.php` configuration file to generate
    URLs, and parse requested URLs. When we want different URLs than those provided
    by the framework, we add new routes to this configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Routes are created by specifying up to three arguments when calling the `Router::connect()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the route URL, a string representation of our route. It
    can include a wildcard and route elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument is utilized to specify the default route values, an array
    which may include `plugin, controller, action`, and action arguments. You may
    omit parts of these default values, for example, to define a route for all actions
    in a specific controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument defines the route elements, an optional array that defines
    the route elements a route utilizes. It may also include a list of those elements
    that are to be sent as arguments when calling the controller action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using `Router::connect()`, we defined a route that includes all these arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: We set `/article/:category/:id-:title` as our route URL. Notice how we are referring
    to route elements by prefixing their names with a colon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second argument, we specify that this route will match any link to the
    `view` action of the `articles` controller. Similarly, if a URL that matches the
    route URL specified in the first argument is requested, this is the action that
    will be executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We specify three route elements in the third argument, with their respective
    regular expression matching expressions: `id` (a number), `category` (any string
    that does not include a dash), and `title` (also a string that does not include
    a dash.) We use the special `pass` option to specify which route elements are
    passed as regular action arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When CakePHP finds a URL that includes the same default values as those specified
    in the first argument of our route, and also includes the route elements specified
    in its third argument, it will convert the route to our provided string representation.
    For example, if we create a link using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We would be matching all our route requirements, and the resulting generated
    URL would look like `http://localhost/article/my_category/1-my_title`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When our controller action is executed as a result of a route that uses route
    elements, we can obtain the values for all the specified elements using the `$this->params`
    array available to every controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we set the `id` route element to be passed as a regular action
    argument, but we did not do so for the remaining elements (category and `title.)`
    To obtain the given value for `category`, we would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using reverse routing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Even though CakePHP allows us to specify a string-based URL when creating links,
    it is recommended that we always use arrays to define link URLs unless the URL
    is an absolute reference to a foreign site.
  prefs: []
  type: TYPE_NORMAL
- en: URLs that are defined using an array allow for the reverse routing system to
    work, which is the part of the framework that allows us to use custom routes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Adding catch-all routes for profile pages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using GET and named parameters*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding catch-all routes for profile pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Several websites include direct URLs to access user profiles, and those addresses
    live alongside a broad set of other URLs. For example, Twitter allows [http://twitter.com/mgiglesias](http://twitter.com/mgiglesias)
    to list tweets created by the user `mgiglesias`, while an address like [http://twitter.com/about](http://twitter.com/about)
    would take us to their service description.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows us how to create direct URLs for our profile records, allowing
    the generated URLs to coexist with other application routes we may have.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Proceed now to create the required model. Create a file named `profile.php`
    and place it in your `app/models` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `ProfilesController` class in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `profiles` in your `app/views` folder. Create the view
    for the `index` action in a file named `index.ctp` and place it in your `app/views/profiles`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the view for the `view` action in a file named `view.ctp` and place
    it in your `app/views/profiles` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/config/routes.php` file and add the following routes at the
    end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/profiles/index`, you will see that the
    generated link for the `jane` user account is `http://localhost/jane`. Clicking
    on it should show us Jane''s profile page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created two routes. The first one uses a route element called `userName`
    to set the URL as consisting solely on its value. Using a regular expression,
    our route guarantees that it is only used when the value for `userName` consists
    of letters, numbers, dots, dashes, or underscore signs. Using the `controller`
    and `action` settings, we link the route to the `view` action of the `profiles`
    controller. Finally, the `userName` element is set to be passed as a regular argument
    to the `ProfilesController::view()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this route defined, if we created a link with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The generated URL would be `http://localhost/john`. Clicking on this link would
    execute the same action, using the same arguments, as if we used the URL `http://localhost/profiles/view/john`.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a noticeable problem. CakePHP provides a short URL for the
    index action for all our controllers. Because of it, we can access the `ProfilesController::index()`
    method using the URL `http://localhost/profiles`, the equivalent of the URL `http://localhost/profiles/index`.
    This default route would conflict with our custom route, as the word `profiles`
    matches our regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, this functionality would not conflict with our route when generating
    a URL out of an array-based route. Because we linked our route to the `view` action
    of the `profiles` controller, CakePHP will only use our custom route when linking
    to this action and specifying the `userName` element.
  prefs: []
  type: TYPE_NORMAL
- en: We still need to fix the conflict that is produced when parsing a URL such as
    `http://localhost/profiles`. To do so, we create another route so CakePHP's built-in
    `index` routes are not utilized when producing a link. This route uses the special
    `:controller` route element (set to the controller the link points to), and forcing
    the `index` action as part of the URL. We link this route to all routes that use
    the `index` action, regardless of the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn about another, more effective approach to this problem, see Creating
    custom Route classes
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding this route, if we created a link with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: the generated URL would be `http://localhost/profiles/index`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Working with route elements*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding validation for catch-all routes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating custom route classes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding validation for catch-all routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the recipe *Adding catch-all routes for profile pages*, we created routes
    so that profile pages can be accessed, specifying only the username in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to implement a custom validation method so
    that these usernames do not conflict with other custom routes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample data to work with, and we need a catch-all route. Follow
    the entire recipe *Adding catch-all routes* for profile pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need the sign-up page, where new profile records are created. Edit
    your `app/controller/profiles_controller.php` file and place the following method
    inside the `ProfilesController` class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the appropriate view in a file named `add.ctp` and place it in your
    `app/views/profiles` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a custom route to try out the validation. Edit your `app/config/routes.php`
    file and add the following route at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/models/profile.php` file and make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While still editing your `app/models/profile.php` file, add the following method
    to the `Profile` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/profiles/add` and specify **home** as
    the user name and **Mark Doe** as the name, you will get a validation error message
    informing you that the username is reserved, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we add validation rules for two fields: `username`, and `name`. The validation
    for the `username` field consists of two rules: a built-in `notEmpty` rule, and
    a custom validation rule named `validateUsername`. The `name` field has only one
    rule: `notEmpty`.'
  prefs: []
  type: TYPE_NORMAL
- en: In our `validateUsername` rule implementation, we start by storing all routing
    prefixes into a list of reserved words. We then get a list of all controllers,
    using the `Configure::listObjects()` method, and excluding the value `App`, which
    is the base of our controllers (and as such not directly accessible). Then we
    convert each name to its lower case, underscored form.
  prefs: []
  type: TYPE_NORMAL
- en: We then obtain the list of all defined routes by getting the instance of the
    `Router` class and accessing its `routes` public property, and for each of those
    routes we look for their `template` property.
  prefs: []
  type: TYPE_NORMAL
- en: This property stores the string representation of a route. For the route we
    defined during the *Getting ready* section, this would be `/home`. We are only
    interested in the starting portion of this value (that is, anything after the
    first slash, and before the second one), so we use a regular expression to match
    and extract that value, and then we add it to the list of reserved words.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the list of reserved words would be: `pages, profiles`, and
    `home`. The first two come from the list of our application controllers, and the
    last one comes from our custom route.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the list of reserved words, we set the field as valid only if the
    given value is not within this list.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding catch-all routes for profile pages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom Route classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the recipe *Adding catch-all routes for profile pages* we created routes
    so that profile pages can be accessed specifying only the user name in the URL.
    However, that implementation had a problem: we had to disallow the automatic access
    of the `index` action.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows a different approach to our profile URL generation, by creating
    a custom route implementation that not only overcomes this problem, but makes
    sure the route is utilized only for existing profile records.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample data to work with. Follow the *Getting ready* section of
    the recipe *Adding catch-all routes for profile pages*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/config/routes.php` file and add the following routes at the
    end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create a file named `profile_route.php` and place it in your `app/libs`
    folder, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, edit your `app/models/profile.php` file and add the following methods
    to the `Profile` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now browse to `http://localhost/john` to see John's profile page. Specifying
    an invalid name in the URL (such as `http://localhost/kate`) would produce the
    regular CakePHP error page, while browsing to `http://localhost/profiles` will
    correctly take us to the profile index page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by first importing our custom route class file, and then defining a
    catch-all route for the `view` action of the `profiles` controller, using the
    custom `ProfileRoute` class, and setting the `userName` route element to be passed
    as a regular argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ProfileRoute` implementation implements two of the most typical route
    class methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`match()`: It is used during reverse routing to convert an array-based URL
    into its string representation. If the method returns `false`, then the provided
    URL does not fall into this route.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`parse()`: It is used when parsing a requested URL into an array-based URL,
    specifying `controller, action`, and other parameters. If the method returns `false`,
    then this tells CakePHP that the given URL is not handled by this route.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a helper method, called `_exists()`, to assist us, which looks for
    the given username amongst the registered records. We cache the list of usernames
    for obvious performance reasons, and we invalidate this cache whenever a record
    is created, modified, or deleted, by implementing the `afterSave` and `afterDelete`
    callbacks in the `Profile` model.
  prefs: []
  type: TYPE_NORMAL
- en: Our `match()` implementation first checks to make sure the `userName` route
    element is provided. If so, and if the given user exists, it will use the parent
    implementation to return the string representation. In any other case (no username
    provided, or nonexistent), it will not process the given URL.
  prefs: []
  type: TYPE_NORMAL
- en: The `parse()` implementation starts by calling its parent implementation to
    convert the string URL into an array based URL. If that call is successful (which
    means it contains the `userName` route element), and if the given user name exists,
    it returns the conversion. Otherwise it returns `false` to not process the given
    URL. Another route handler, or CakePHP's default route handler, will process it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Adding catch-all routes for profile pages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Custom route classes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
