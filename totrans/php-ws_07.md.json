["```php\nfile_get_contents (string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen ]]]])\n```", "```php\n    <?php echo file_get_contents(__DIR__ . '/sample/users_list.csv');\n    ```", "```php\n    <?php\n    $filePath = __DIR__ . '/sample/users_list.csv';\n    $fileResource = fopen($filePath, 'r');\n    if ($fileResource === false) {\n        exit(sprintf('Cannot read [%s] file.', $filePath));\n    }\n    ```", "```php\n    $readLength = 64;\n    $iterations = 0;\n    ```", "```php\n    while (!feof($fileResource)) {\n        $iterations++;\n        $chunk = fread($fileResource, $readLength);\n        echo $chunk;\n    }\n    ```", "```php\n    fclose($fileResource);\n    echo sprintf(\"\\n%d iteration(s)\", $iterations);\n    ```", "```php\n    dd if=/dev/zero of=sample/test-256-mb.txt count=1024 bs=262144\n    ```", "```php\n    <?php file_get_contents(__DIR__ . DIRECTORY_SEPARATOR . $argv[1]);\n    echo sprintf(\"--\\nmemory %.2fMB\\n--\\n\", memory_get_peak_usage(true)   / 1024 / 1024);\n    ```", "```php\n     time php file_get_contents-memory.php sample/test-10-mb.txt \n    ```", "```php\n    --\n    memory 12.01MB\n    --\n    real    0m 0.03s\n    user    0m 0.02s\n    sys     0m 0.01s\n    ```", "```php\n    time php file_get_contents-memory.php sample/test-256-mb.txt. \n    ```", "```php\n    PHP Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 268443680 bytes) in /app/file_get_contents-memory.php on line 1\n    ```", "```php\n    <?php\n    $filePath = __DIR__ . DIRECTORY_SEPARATOR . $argv[1];\n    $fileResource = fopen($filePath, 'r');\n    ```", "```php\n    if ($fileResource === false) {\n        exit(sprintf('Cannot read [%s] file.', $filePath));\n    }\n    ```", "```php\n    $readLength = $argv[2] ?? 4096;\n    $iterations = 0;\n    ```", "```php\n    while (!feof($fileResource)) {\n        $iterations++;\n        fread($fileResource, $readLength);\n    }\n    ```", "```php\n    fclose($fileResource);\n    echo sprintf(\"--\\n%d iteration(s): memory %.2fMB\\n--\\n\", $iterations,   memory_get_peak_usage(true) / 1024 / 1024);\n    ```", "```php\n     time php fread-memory.php sample/test-10-mb.txt \n    ```", "```php\n    --\n    2561 iteration(s): memory 2.00MB\n    --\n    real    0m 0.05s\n    user    0m 0.02s\n    sys     0m 0.02s\n    ```", "```php\n    time php fread-memory.php sample/test-10-mb.txt 1048576\n    ```", "```php\n    --\n    11 iteration(s): memory 4.00MB\n    --\n    real    0m 0.03s\n    user    0m 0.02s\n    sys     0m 0.01s\n    ```", "```php\n    time php fread-memory.php sample/test-256-mb.txt \n    ```", "```php\n    --\n    65537 iteration(s): memory 2.00MB\n    --\n    real    0m 0.30s\n    user    0m 0.16s\n    sys     0m 0.13s\n    ```", "```php\n    time php fread-memory.php sample/test-256-mb.txt 1048576 \n    ```", "```php\n    --\n    257 iteration(s): memory 4.00MB\n    --\n    real    0m 0.08s\n    user    0m 0.02s\n    sys     0m 0.05s\n    ```", "```php\n    <?php\n    $filePath = __DIR__ . '/sample/users_list.csv';\n    $fileResource = fopen($filePath, 'r');\n    if ($fileResource === false) {\n        exit(sprintf('Cannot read [%s] file.', $filePath));\n    }\n    ```", "```php\n    $lineNumber = 0;\n    while (!feof($fileResource)) {\n        $lineNumber++;\n        $line = fgets($fileResource);\n        echo sprintf(\"Line %d: %s\", $lineNumber, $line);\n    }\n    fclose($fileResource);\n    echo PHP_EOL;\n    ```", "```php\n    Line 1: John,Smith,2019-03-31T10:20:30Z\n    Line 2: Alice,Smith,2019-02-28T12:13:14Z\n    Line 3:\n    ```", "```php\n    <?php\n    $filePath = __DIR__ . '/sample/users_list_enclosed.csv';\n    $fileResource = fopen($filePath, 'r');\n    if ($fileResource === false) {\n        exit(sprintf('Cannot read [%s] file.', $filePath));\n    }\n    ```", "```php\n    $recordNumber = 0;\n    while (!feof($fileResource)) {\n        $recordNumber++;\n        $line = fgetcsv($fileResource);\n        echo sprintf(\"Line %d: %s\", $recordNumber, print_r($line, true));\n    }\n    fclose($fileResource);\n    echo PHP_EOL;\n    ```", "```php\n    John,Smith,2019-03-31T10:20:30Z,\"4452 Norma Lane\n    Alexandria\n    71302 Louisiana\"\n    Alice,Smith,2019-02-28T12:13:14Z,\"4452 Norma Lane\n    Alexandria\n    71302 Louisiana\"\n    ```", "```php\n    <?php\n    $filePath = 'sample/users_list.csv';\n    header('Content-Type: text/csv');\n    header('Content-Length: ' . filesize($filePath));\n    header(sprintf('Content-Disposition: attachment; filename=\"%s\"', basename($filePath)));\n    readfile($filePath);\n    ```", "```php\nfseek(resource $handle, int $offset [, int $whence = SEEK_SET ]) : int\n```", "```php\n    <?php\n    $fileFwrite = 'sample/write-with-fwrite.txt';\n    $fp = fopen($fileFwrite, 'w+');\n    $written = fwrite($fp, 'File written with fwrite().' . PHP_EOL);\n    ```", "```php\n    if (false === $written) {\n        echo 'Error writing with fwrite.' . PHP_EOL;\n    } else {\n        echo sprintf(\"> Successfully written %d bytes to [%s] with fwrite():\", $written, $fileFwrite) . PHP_EOL;\n        fseek($fp, 0);\n        echo fread($fp, filesize($fileFwrite)) . PHP_EOL;\n    }\n    ```", "```php\n    $fileFpc = 'sample/write-with-fpc.txt';\n    $written = file_put_contents($fileFpc, 'File written with file_put_contents().' . PHP_EOL);\n    ```", "```php\n    if (false === $written) {\n        echo 'Error writing with fwrite.' . PHP_EOL;\n    } else {\n        echo sprintf(\"> Successfully written %d bytes to [%s] with file_put_contents():\", $written, $fileFwrite) . PHP_EOL;\n        echo file_get_contents($fileFpc) . PHP_EOL;\n    }\n    ```", "```php\n    $fp = fopen($fileFwrite, 'a+');\n    ```", "```php\n    $written = file_put_contents($fileFpc, 'File written with file_put_contents().' . PHP_EOL, FILE_APPEND);\n    ```", "```php\n    <?php\n    $filepath = 'sample/to-delete.txt';\n    if (is_file($filepath)) {\n        if (unlink($filepath)) {\n            echo sprintf('The [%s] file was deleted.', $filepath) . PHP_EOL;\n        } else {\n            echo sprintf('The [%s] file cannot be deleted.', $filepath) .           PHP_EOL;\n        }\n    } else {\n        sprintf('The [%s] file does not exist.', $filepath) . PHP_EOL;\n    }\n    ```", "```php\n    The [sample/to-delete.txt] file was deleted.\n    ```", "```php\n    The [sample/to-delete.txt] file does not exist.\n    ```", "```php\n    <?php\n    $filePath = 'sample/to-move.txt';\n    $targetDirectory = 'sample/archive/2019';\n    if (!is_file($filePath)) {\n        echo sprintf('The [%s] file does not exist.', $filePath) . PHP_EOL;\n        return;\n    }\n    ```", "```php\n    if (!is_dir($targetDirectory)) {\n        echo sprintf('The target directory [%s] does not exist. Will create...       ', $targetDirectory);\n        if (!mkdir($targetDirectory, 0777, true)) {\n            echo sprintf('The target directory [%s] cannot be created.',           $targetDirectory) . PHP_EOL;\n            return;\n        }\n        echo 'Done.' . PHP_EOL;\n    }\n    ```", "```php\n    $targetFilePath = $targetDirectory . DIRECTORY_SEPARATOR .   basename($filePath);\n    if (rename($filePath, $targetFilePath)) {\n        echo sprintf('The [%s] file was moved in [%s].', basename($filePath),       $targetDirectory) . PHP_EOL;\n    } else {\n        echo sprintf('The [%s] file cannot be moved in [%s].',       basename($filePath), $targetDirectory) . PHP_EOL;\n    }\n    ```", "```php\n    The target directory [sample/archive/2019] does not exist. Will create... Done.\n    The [to-move.txt] file was moved in [sample/archive/2019].\n    ```", "```php\nThe [sample/to-move.txt] file does not exist.\n```", "```php\n    <?php\n    $sourceFilePath = 'sample/to-copy.txt';\n    $targetFilePath = 'sample/to-copy.txt.bak';\n    if (!is_file($sourceFilePath)) {\n        echo sprintf('The [%s] file does not exist.', $sourceFilePath) .       PHP_EOL;\n        return;\n    }\n    ```", "```php\n    if (copy($sourceFilePath, $targetFilePath)) {\n        echo sprintf('The [%s] file was copied as [%s].', $sourceFilePath,       $targetFilePath) . PHP_EOL;\n    } else {\n        echo sprintf('The [%s] file cannot be copied as [%s].',       $sourceFilePath, $targetFilePath) . PHP_EOL;\n    }\n    ```", "```php\nPDO::__construct(string $dsn [, string $username [, string $password [, array   $options ]]])\n```", "```php\n    <?php\n    $dsn = \"mysql:host=127.0.0.1;port=3306;charset=utf8mb4\";\n    ```", "```php\n    $options = [\n        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n    //    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n    ];\n    ```", "```php\n    $pdo = new PDO($dsn, \"php-user\", \"php-pass\", $options);\n    ```", "```php\n    echo sprintf(\n            \"Connected to MySQL server v%s, on %s\",\n            $pdo->getAttribute(PDO::ATTR_SERVER_VERSION),\n            $pdo->getAttribute(PDO::ATTR_CONNECTION_STATUS)\n        ) . PHP_EOL;\n    ```", "```php\n    Connected to MySQL server v5.7.23, on 127.0.0.1 via TCP/IP\n    ```", "```php\n    PHP Fatal error: Uncaught PDOException: SQLSTATE[HY000] [1045] Access denied for user 'php-user'@'127.0.0.1' (using password: YES) in /app/connect.php:8\n    Stack trace:\n    #0 /app/connect.php(8): PDO->__construct('mysql:host=127....', 'php-user', 'wrongpwd', Array)\n    #1 {main}\n      thrown in /app/connect.php on line 8\n    ```", "```php\n    <?php\n    $dsn = \"mysql:host=127.0.0.1;port=3306;charset=utf8mb4\";\n    $options = [\n        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n    ];\n    $pdo = new PDO($dsn, \"php-user\", \"php-pass\", $options);\n    return $pdo;\n    ```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection-no-db.php';\n    ```", "```php\n    $dbname = 'demo';\n    $sql = \"CREATE SCHEMA $dbname\";\n    ```", "```php\n    if ($pdo->exec($sql) !== false) {\n        echo \"The database '$dbname' was successfully created.\" . PHP_EOL;\n    } else {\n        list(, , $driverErrMsg) = $pdo->errorInfo();\n        echo \"Error creating the database: $driverErrMsg\" . PHP_EOL;\n    }\n    ```", "```php\nCREATE TABLE [IF NOT EXISTS] tbl_name\n(\n  col_name data_type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT]    [UNIQUE [KEY]] [[PRIMARY] KEY]\n  ...\n)\n```", "```php\nCREATE TABLE users\n(\n    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    email VARCHAR(254) NOT NULL UNIQUE,\n    signup_time DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL\n)\n```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection-no-db.php';\n    $createStmt = \"CREATE TABLE users\n    (\n        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n        email VARCHAR(254) NOT NULL UNIQUE,\n        signup_time DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL\n    )\";\n    ```", "```php\n    if ($pdo->exec($createStmt) === false) {\n        list(, , $driverErrMsg) = $pdo->errorInfo();\n        echo \"Error creating the users table: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    echo \"The users table was successfully created.\";\n    ```", "```php\n    $dsn = \"mysql:host=mysql-host;port=3306;dbname=demo;charset=utf8mb4\";\n    ```", "```php\n    $pdo = require 'connection.php';\n    ```", "```php\nINSERT INTO tbl_name\n  (col_name [, col_name] ...) \n  VALUES (value_list) [, (value_list)] ...\n```", "```php\nvalue [, value] ...\n```", "```php\nINSERT INTO employees (email, first_name, last_name)\n  VALUES ('john.smith@mail.com','John','Smith'),\n         ('jane.smith@mail.com','Jane','Smith')\n```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection.php';\n    $insertStmt = \"INSERT INTO users (email) VALUES ('john.smith@mail.com')\";\n    ```", "```php\n    if ($pdo->exec($insertStmt) === false) {\n        list(, , $driverErrMsg) = $pdo->errorInfo();\n        echo \"Error inserting into the users table: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    echo \"Successfully inserted into users table the record with id \" .   $pdo->lastInsertId() . PHP_EOL;\n    ```", "```php\n$rawInput = $_POST['email'];\n$query = \"INSERT INTO users (email) VALUES ($rawInput)\";\n```", "```php\nINSERT INTO users (email) VALUES (\"\"); DROP TABLE users; /**)\n```", "```php\n    INSERT INTO users (email) VALUES (?);\n    ```", "```php\n    INSERT INTO users (email) VALUES (:email);\n    ```", "```php\nPDOStatement::bindParam(mixed $parameter, mixed &$variable [, int $data_type =   PDO::PARAM_STR [, int $length [, mixed $driver_options ]]])\n```", "```php\nPDOStatement::execute([array $input_parameters])\n```", "```php\n$stmt = $pdo->prepare(\"INSERT INTO users (email) VALUES (?)\");\n$stmt->bindParam(1, $email);\n$email = 'first@mail.com';\n$stmt->execute();\n$email = 'second@mail.com';\n$stmt->execute();\n```", "```php\n$stmt = $pdo->prepare(\"INSERT INTO users (email) VALUES (?)\");\n$stmt->execute(['first@mail.com']);\n$stmt->execute(['second@mail.com']);\n```", "```php\nstmt = $pdo->prepare(\"INSERT INTO users (email) VALUES (:email)\");\n$stmt->bindParam(':email', $email);\n$email = 'first@mail.com';\n$stmt->execute();\n$email = 'second@mail.com';\n$stmt->execute();\n```", "```php\n$stmt = $pdo->prepare(\"INSERT INTO users (email) VALUES (:email)\");\n$stmt->bindParam(':email', $email);\n$stmt->execute([':email' => 'first@mail.com']);\n$stmt->execute([':email' => 'second@mail.com']);\n```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection.php';\n    $insertStmt = $pdo->prepare(\"INSERT INTO users (email) VALUES (:email)\");\n    ```", "```php\n    if ($insertStmt->execute([':email' => $argv[1] ?? null]) === false) {\n        list(, , $driverErrMsg) = $insertStmt->errorInfo();\n        echo \"Error inserting into the users table: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    echo \"Successfully inserted into users table\" . PHP_EOL;\n    ```", "```php\n    php insert-prepared.php '\"\"); DROP TABLE users; /**' \n    ```", "```php\nSELECT column1 [, column2 …] FROM table\n```", "```php\nSELECT * FROM employees LIMIT 10;\n```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection.php';\n    $statement = \"SELECT * FROM users\";\n    $result = $pdo->query($statement);\n    ```", "```php\n    if ($result === false) {\n        list(, , $driverErrMsg) = $pdo->errorInfo();\n        echo \"Error querying the users table: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    echo \"All records\" . PHP_EOL;\n    while ($record = $result->fetch()) {\n        echo implode(\"\\t\", $record) . PHP_EOL;\n    }\n    ```", "```php\n    $result = $pdo->query(\"SELECT * FROM users LIMIT 2\");\n    echo PHP_EOL . \"Use LIMIT 2\" . PHP_EOL;\n    while ($record = $result->fetch()) {\n        echo implode(\"\\t\", $record) . PHP_EOL;\n    }\n    ```", "```php\n    $result = $pdo->query(\"SELECT * FROM users WHERE id > 3\");\n    echo PHP_EOL . \"Use WHERE id > 3\" . PHP_EOL;\n    while ($record = $result->fetch()) {\n        echo implode(\"\\t\", $record) . PHP_EOL;\n    }\n    ```", "```php\n    $result = $pdo->query(\"SELECT * FROM users ORDER BY id DESC\");\n    echo PHP_EOL . \"Use ORDER BY id DESC\" . PHP_EOL;\n    while ($record = $result->fetch()) {\n        echo implode(\"\\t\", $record) . PHP_EOL;\n    }\n    ```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection.php';\n    $updateId = $argv[1] ?? 0;\n    $updateEmail = $argv[2] ?? '';\n    ```", "```php\n    $updateStmt = $pdo->prepare(\"UPDATE users SET email = :email WHERE   id = :id\");\n    ```", "```php\n    if ($updateStmt->execute([':id' => $updateId, ':email' => $updateEmail])   === false) {\n        list(, , $driverErrMsg) = $updateStmt->errorInfo();\n        echo \"Error running the query: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    echo sprintf(\"The query ran successfully. %d row(s) were affected.\",   $updateStmt->rowCount()) . PHP_EOL;\n    ```", "```php\n    php update.php 16 john.doe@mail.com; \n    ```", "```php\n    <?php\n    /** @var PDO $pdo */\n    $pdo = require 'connection.php';\n    $partialMatch = $argv[1] ?? '';\n    $deleteStmt = $pdo->prepare(\"DELETE FROM users WHERE   email LIKE :partialMatch\");\n    ```", "```php\n    if ($deleteStmt->execute([':partialMatch' => \"%$partialMatch%\"]) ===   false) {\n        list(, , $driverErrMsg) = $deleteStmt->errorInfo();\n        echo \"Error deleting from the users table: $driverErrMsg\" . PHP_EOL;\n        return;\n    }\n    ```", "```php\n    if($rowCount = $deleteStmt->rowCount()){\n        echo sprintf(\"Successfully deleted %d records matching '%s' from users       table.\", $rowCount, $partialMatch) . PHP_EOL;\n    } else {\n        echo sprintf(\"No records matching '%s' were found in users table.\",       $partialMatch) . PHP_EOL;\n    }\n    ```", "```php\nDatabaseSingleton.php\n1  <?php\n2 \n3  class DatabaseSingleton\n4 {\n5      private function __construct()\n6      {\n7          //$this->pdo = new PDO(...);\n8      }\n9 \n10     public static function instance()\n11     {\n12         static $instance;\n13         if (is_null($instance)) {\n14             $instance = new static;\n15         }\n16         return $instance;\n17     }\n18 }\nhttps://packt.live/35w4dCz\n```"]