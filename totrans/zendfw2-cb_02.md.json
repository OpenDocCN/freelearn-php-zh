["```php\nSampleModule/\n  config/\n    module.config.php\n  language/\n  src/\n    SampleModule/\n      Controller/\n        IndexController.php\n  view/\n    samplemodule/\n      index/\n        index.phtml\n  Module.php\n```", "```php\n// We want to have our translator available through the \n// ServiceManager.\n'service_manager' => array(\n  'factories' => array(\n    // Make our translator available in the \n    // ServiceManager so we can retrieve it under the \n    // 'translator' key.\n    'translator' => 'Zend\\I18n\\Translator\\TranslatorServiceFactory',\n  ),\n),\n\n// Now to configure the Translator\n'translator' => array(\n  'locale' => 'en_US',\n\n  // We would like using file patterns when matching \n  // i18n files, as that makes our lives so much easier, \n  // this is default in the skeleton.\n  'translation_file_patterns' =>array(\n    array(\n      // The type of i18n we want to use is gettext.\n      'type'     => 'gettext',\n\n      // Here we define our i18n file directory, this is \n      // the directory we just made.\n      'base_dir' => __DIR__ . '/../language',\n\n      // We want to match our i18n files through this \n      // pattern, what will be for example 'nl_NL.mo'.\n      'pattern'  => '%s.mo',\n    ),\n  ),\n),\n```", "```php\n<?php\n\n// Set our namespace\nnamespace Application\\Controller;\n\n// We need to use the following abstract on our \n// controller\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\n// Begin our index controller class\n\nclass IndexController extends AbstractActionController\n{\n  // We can use this property to translate the strings, \n  // or do some other translator related stuff.\n  public $i18n;\n\n  // Lets attach the setLocale to the dispatch event, so \n  // it will be run before the action logic is executed\n  public function setEventManager(EventManagerInterface $events) \n  {\n    // Instantiate the i18n through our ServiceLocator.\n    parent::setEventManager($events);\n\n    // We want to use this controller in our event\n    $c = $this;\n\n    // Attach our locale setting to the dispatch event\n    $events->attach(\n      'dispatch', \n\n      // Variable $e is a Zend\\Mvc\\MvcEvent\n      function ($e) use ($c) \n      {\n        // Put our translator in a local property\n        $c->i18n = $this->getServiceLocator()\n                        ->get('translator'); \n\n        // while we are here, let's change the locale \n        // to Dutch.\n        $c->i18n->setLocale('nl_NL');\n      }, \n\n      // Make sure this event is triggered before the \n      // action execution\n      100\n    ); \n\n    // Return our selves\n    return $this;\n  }\n\n  public function indexAction()\n  {\n    // Now simply translate this string with our i18n.\n    $myTranslatedString = $this->i18n\n                               ->translate(\"And how about me?\");\n  }\n}\n```", "```php\n<?php\n  // Translate and display this text.\n  echo $this->translate(\n      \"Hello, I am a translated text!\"\n  );\n```", "```php\n'translator' => array(\n  'locale' => 'en_US',\n  'translation_file_patterns' =>array(\n    array(\n      // This is the method we want to use.\n      'type' => 'phparray',\n\n      // We tell the config that our translations can be \n      // found in the language directory.\n      'base_dir' => __DIR__ . '/../language',\n\n      // It will now search for files like en_US.php and \n      // nl_NL.php.\n      'pattern' => '%s.php',\n    ),\n  ),\n),\n```", "```php\n<?php\n\n// We need to return an array with the translated \n// strings.\nreturn array(\n\n  // The key is the untranslated string, while the value \n  // is the translated text.\n  'And how about me?'=> 'En hoe zit het met mij?',\n\n  // More translations here [..]\n);\n```", "```php\n'translator' => array(\n  'locale' =>array('en_US', 'nl_NL'),\n  'translation_file_patterns' =>array(\n    array(\n      'type' => 'ini',\n      'base_dir' => __DIR__ . '/../language',\n      'pattern' => '%s.ini',\n    ),\n  ),\n),\n```", "```php\ntranslation.0.message = \"And how about me?\"\ntranslation.0.translation = \"En hoe zit het met mij?\"\n\ntranslation.1.message = \"Hello, I am a translated text!\"\ntranslation.1.translation = \"Hallo, ik ben een vertaaldetekst!\"\n```", "```php\n// We will be using a modified version of the default \n// Module.php which comes with the Application module on \n// the ZF2 Skeleton.\nnamespace Application;\n\n// onBootStrap requires a McvEvent.\nuse Zend\\Mvc\\MvcEvent;\n```", "```php\n// Start of our Module class\nclass Module\n{\n  // Private storage of all our local languages\n  // available.\n  private $locales;\n\n  /**\n   * Retrieves any locale that is available in the \n   * language directory. This\n   * assumes that our language directory contains files \n   * in the format of en_GB.ext, nl_NL.ext.\n   */\n  private function retrieveLocales()\n  {\n    // If we haven't already got all the locales,\n    // please do it now.\n    if ($this->locales === null) {\n      $handle = opendir(__DIR__. '/language');\n      $locales = array();\n\n     if ($handle !== false) {\n       // Loop through the directory\n       while (false !== ($entry = readdir($handle))) {\n         if ($entry === '..' || $entry === '.') {\n            continue;\n          }\n\n         // We only want the front part of the filename\n          $split = explode('.', $entry);\n\n          // Split[0] should be en_GB if the file is \n          // en_GB.ext.\n          if (in_array($split[0], $locales) === false) {\n            $locales[] = $split[0];\n          }\n\n          unset($split);\n        }\n\n        // We are done, now close the directory again\n        closedir($handle);\n      }\n\n      // Make sure the locale is available for next time\n      $this->locales = $locales;\n\n      unset($handle, $locales);\n    }\n\n    // Return our available locales\n    return $this->locales;\n  }\n```", "```php\npublic function onBootstrap(MvcEvent $e)\n{\n  // Retrieve the HTTP headers of the user's request\n  $headers = $e->getApplication()\n               ->getRequest()\n               ->getHeaders();\n\n  // Get the translator\n  $translator = $e->getApplication()\n                  ->getServiceManager()\n                  ->get('translator');\n\n  // Check if we have a user that accepts specific \n  // languages.\n  if ($headers->has('Accept-Language')) {\n    // Retrieve our locales that our user accepts\n    $headerLocales = $headers->get('Accept-Language')\n                             ->getPrioritized();\n\n    // Retrieve the locales that we have in our system\n    $locales = $this->retrieveLocales();\n\n    // Make sure that our fallback has been set in \n    // case we couldn't find a locale\n    $translator->setFallbackLocale('en_US');\n\n    // Go through all accepted languages, most of the \n    // time this will be only 1 or 2 languages.\n    foreach ($headerLocales as $locale) {\n      // getLanguage retrieves languages in a en-GB \n      // manner, but ZF2 only supports the underscore, \n      // like en_GB.\n      $language = str_replace(\n        '-', \n        '_', \n        $locale->getLanguage()\n      );\n\n      // See if this is a language we support in our application.\n      if (in_array($language, $locales) === true) {\n       // We have found our *exact* match\n        break;\n      }\n    }\n\n    // Now set our locale \n    $translator->setLocale($language);\n  }\n}\n\n// We can just use the methods that are already in the \n// module.php, let's not repeat that code here.  \npublic function getConfig() {}\n\npublic function getAutoloaderConfig() {}\n}\n\n```", "```php\n<?php\n\n// We always use $this for accessing a view helper.\necho $this->currencyFormat(45312.56, \"EUR\", \"nl_NL\");\n```", "```php\n<?php\necho $this->dateFormat(\n    // Format the current UNIX timestamp.\n    time(),\n\n    // Our date is to be a LONG date format.\n    IntlDateFormatter::LONG,\n\n    // We want to omit the time, defining this is \n    // optional as the default is NONE.\n    IntlDateFormatter::NONE\n);\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\n// We need the following libraries at a minimum to \n// send an e-mail.\nuse Zend\\Mail\\Message;\nuse Zend\\Mail\\Transport\\Sendmail;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // We start off by creating a new Message, which \n    // will contain our message body, subject, to, \n    // etcetera.\n    $message = new Message();\n\n    // Add the options we would like to give the \n    // message, in this case we will be creating a text \n    // message.\n    $message->addFrom('awesome.coder@example.com')\n            ->addTo('rookie.coder@example.com')\n            ->setSubject('Watch and learn.')\n            ->setBody('My wisdom in a message.');\n\n    // Now we have set up our message, let's initialize \n    // the transport.\n    $sendmail = new Sendmail();\n\n    // Although checking isValid is optional, it is a \n    // great way of checking if our message would send \n    //if we are getting input from outside.\n    if ($message->isValid() === true) {\n      // Send the message through sendmail.\n      $sendmail->send($message);\n    }\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model, \n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate a SMTP sending.\nuse Zend\\Mail\\Message;\nuse Zend\\Mail\\Transport\\Smtp;\nuse Zend\\Mail\\Transport\\SmtpOptions;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // First we built up a small message that we want to \n    // send off.\n    $message = new Message();\n\n    // We need at least one recipient and a message body \n    // to send off a message.\n    $message->addTo('someone@example.com')\n            ->addFrom('developer@example.com')\n            ->setSubject('An example message!')\n            ->setBody('This is a test message!');\n\n    // Now we created our message we need to set up our \n    // SMTP transportation.\n    $smtp = new Smtp();\n\n    // Set our authentication and host details of our \n    // SMTP server.\n    $smtp->setOptions(new SmtpOptions(array(\n      // Name represents our domain name.\n      'name' => 'ourdomain.com',\n\n      // Host represents the SMTP server that will \n      // handle the sending of our mail. This could also \n      // be 'localhost' if the sending happens on our \n      // local server.\n      'host' => 'smtp.somewhere.com',\n\n      // Port is default 25, which in most cases is \n      // fine, but this is just to show how we can \n      // change it.\n      'port' => '1234',\n\n      // Connection class is the class used for \n      // authenticating with the SMTP server. Normally \n      // login will suffice, but sometimes the SMTP \n      // server requires a PLAIN (plain) or CRAM-MD5 \n      // (crammd5) authentication method.\n      'connection_class' => 'login',\n\n      // This tells the connection_class which \n      // properties to set. The default three connection\n      // classes only require username and password.\n      'connection_config' =>array(\n        'username' => 'someuser',\n        'password' => 'someplainpassword',\n      ),\n    ))); \n\n    // We have set the options, now let's send the \n    // message.\n    $smtp->send($message);\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model, \n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate a SMTP sending.\nuse Zend\\Mail\\Message;\nuse Zend\\Mail\\Transport\\File;\nuse Zend\\Mail\\Transport\\FileOptions;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // First we create our simple message. \n    $message = new Message();\n\n    // Set the essential fields send it off.\n    $message->addTo('someone@example.com')\n            ->addFrom('developer@example.com')\n            ->setSubject('An example message!')\n            ->setBody('This is a test message!');\n\n    // Now we will initialize our File transport.\n     $file = new File();\n\n    // Set the options for the File transport.\n    $file->setOptions(new FileOptions(array(\n      // We want to save our e-mail in the /tmp path,   \n      // this can be anything where we have write  \n      // permission on.\n      'path' => '/tmp',\n\n      // Define our callback, which will be ran when \n      // the e-mail is being saved to our system. This \n      // also called an anonymous function, as it \n      // isn't defined as a normal method.\n      'callback' = function(File $file) {\n\n      // We want to return a name in which the file \n      // should be saved, which should be a unique.\n      return 'mail_'. time(). '.txt';\n    }\n   )));\n\n   // Now send off the message.\n   $file->send($message);\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model,\n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate an IMAP connection\nuse Zend\\Mail\\Storage\\Imap;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n\n    // We will create a new IMAP connection here:\n    // host: user/password: The username and password \n    // to use. \n    $mail = new Imap(array(\n   // Refers to the host where we want to connect to.\n   'host' => 'imap.example.com',\n\n   // The username/password to connect to the server \n   // with.\n   'user' => 'some_user',\n   'password' => 'some_password',\n\n   // Do we want to explicitly use a secure \n   // connection.\n   'ssl' => true,\n\n   // If we want to use a port that is different to \n   // the default port, we can do that here.\n   'port' => 1234,\n\n   // Specify the folder we want to use, if none \n   // given it will always use INBOX. This will also \n   // work with the Mbox and Maildir protocol.\n   'folder' => 'Some_Folder',\n ));\n\n // We want to parse through all our e-mails.\n foreach ($mail as $message) {\n   // Display the from and subject line.\n      echo $message->from. ': '. $message->subject;\n    }\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model, \n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate a POP3 connection\nuse Zend\\Mail\\Storage\\Pop3;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {        \n    // We will create a new POP3 connection here\n    $mail = new Pop3(array(\n      // Refers to the host where we want to connect \n      // to\n      'host' => 'pop3.example.com',\n\n      // The username/password to connect to the \n      // server with.\n      'user' => 'some_user',\n      'password' => 'some_password',\n\n      // Do we want to explicitly use a secure \n      // connection.\n      'ssl' => true,\n\n      // If we want to use a port that is different to \n      // the default port, we can do that here.\n      'port' => 4321\n    ));\n\n    // We want to parse through all our e-mails.\n    foreach ($mail as $message) {\n      // Display the from and subject line.\n      echo $message->from. ': '. $message->subject;\n    }\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model,\n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate a Maildir storage \n// connection\nuse Zend\\Mail\\Storage\\Maildir;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\t\n    // Open up a new Maildir connection\n    $mail = new Maildir(array(\n      // Our mail folder on the server.\n      'dirname' => '/home/user/.mymail/'\n    ));\n\n    if ($mail->checkQuota() === true) {\n      // We are over quote, let's check what we are \n      // using!\n\n      // Give us extended information about the quota.\n      $quota = $mail->checkQuota(true);\n\n      // Normalise the string if we are over the\n      // quota.\n      $overQuota = $quota['over_quota'] ? 'Yes' : 'No';\n\n      // Display the information.\n      echo \"\n        -- QUOTA --\n        Total quota size: {$quota['quota']['size']}\n        Total quota objects: {$quota['quota']['count']}\n        -- USE --\n        Total used size: {$quota['size']}\n        Total used objects: {$quota['count']}\n        Are we over quota: {$overQuota}\n     \";\n    }\n  }\n}\n```", "```php\n<?php\n// Usually this sort of code is defined in the Model,\n// but to test it out we can place it in the \n// controller as well.\nnamespace Application\\Controller;\n\n// We need these classes to initiate a IMAP connection\nuse Zend\\Mail\\Storage\\IMAP;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Open up a new connection to the mail server.\n    $mail = new Imap(array(\n     'host' => 'imap.example.com',\n     'user' => 'some_user',\n     'password' => 'some_password'\n  ));\n\n // Loop through the messages.\n foreach ($mail as $message) {\n   /** Do stuff which takes a lot of time.. **/\n\n   // Now let the server know we are still alive..\n   $mail->noop(); \n\n   /** Do some more stuff..  **/\n\n   // Let the server know again we are still here..\n   $mail->noop();\n    }\n  }\n}\n```", "```php\n<?php\n\n// We can make this anything we want, we just decided on \n// this though\nnamespace Application\\System;\n\n// Lets call our class this\nclass NoopTick\n{\n  // This is our Zend\\Mail\\Storage\\Imap which is a \n  // static so we can call from outside the context of \n  // this class without instantiating the class\n  private static $imap;\n\n  // This is the time value in seconds of the next time \n  // we want to execute our noop functionality\n  private static $newTime;\n\n  // This is the amount of seconds between noop\n  // executions, which in this case is 5 minutes\n  private static $timeInBetween = 300;\n\n  // This is our main method, which will only call the \n  // noop method\n  public static function tickTock()\n  {\n    if (time() >= self::$newTime) {\n      // We can execute our noop now\n      self::$imap->noop();\n\n      // Now set the new time\n      self::$newTime = (time() + self::$timeInBetween);\n    }\n  }\n\n  // Now we want to have a method that starts up the \n  // noop triggering\n  public static function start($imap)\n  {\n    // Set our imap storage to use\n    self::$imap = $imap;\n\n    // Now we register the tick function, which executes \n    // every tick of the process, we will use the class \n    // NoopTicks (this class) and method 'tickTock'\n    register_tick_function(array(\n      'Application\\System\\NoopTick','tickTock'\n    ));\n  }\n\n  // And we now unregister our tick function again when \n  // we are done with our operation\n  public static function stop()\n  {\n    // Unregister our tick function again, mind that we \n    // don't have to provide our class name here\n    unregister_tick_function('tickTock');\n  }\n}\n```", "```php\nApplication\\System\\NoopTick::start($imapStorage);\n```", "```php\nApplication\\System\\NoopTick::stop();\n```"]