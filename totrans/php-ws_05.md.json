["```php\nclass ClassName \n{\n    // Class body\n}\n//or \nclass ClassName \n{\n    // Class variables declarations\n    // Class methods declarations\n}\n```", "```php\nclass Person \n{\n    public $name = 'John Doe';\n    function sayHello() \n    {\n        echo 'Hello!';\n    }\n}\n```", "```php\n$object = new MySimpleClass();\n```", "```php\n$object->propertyName;\n$object->methodName();\n```", "```php\npublic $date = getdate();\npublic $sum = $a + $b;\n```", "```php\npublic $num = 10;\npublic $str = 'I am a String';\npublic $arr = array('Apple', 'Mango', 'Banana');\n```", "```php\nclass Person \n{\n    public $name = 'John Doe';\n    function printName() \n    {\n        echo $this->name;\n    }\n}\n```", "```php\nclass Person \n{\n    public static $name = 'John Doe';\n    function printName() \n    {\n        echo self::$name;\n    }\n}\n```", "```php\nclass SampleClass \n{\n    const ONE = 1;\n    const NAME = 'John Doe';\n}\necho SampleClass::ONE; //1\necho SampleClass::NAME; //John Doe\n```", "```php\nclass SampleClass \n{\n    const ONE = 1;\n    const NAME = 'John Doe';\n    function printName()\n    {\n        echo self::NAME;\n    }\n}\necho SampleClass::NAME; //John Doe\n```", "```php\nclass SampleClass \n{\n    const ONE = 1;\n    const SUM = self::ONE + 2;\n}\necho SampleClass::SUM;//3\n```", "```php\nclass Person \n{\n    public $name;\n    function getName()\n    {\n        return $this->name;\n    }\n    function setName()\n    {\n        $this->name = 'John Doe';\n    }\n}\n```", "```php\nPerson.php\n17     function sayGreetings()\n18     {\n19         if (date('G') < 12)\n20         {\n21             $greetings = 'Good Morning';\n22         } \n23         elseif (date('G') < 17) \n24         {\n25             $greetings = 'Good Afternoon';\n26         } \n27         else \n28         {\n29             $greetings = 'Good Evening';\n30         }\nhttps://packt.live/2IDp7G4\n```", "```php\n    <?php\n    class Vehicle \n    {\n        public $make = 'DefaultMake';\n        public $model = 'DefaultModel';\n        public $color = 'DefaultColor';\n        public $noOfWheels = 0; \n        public $engineNumber = 'XXXXXXXX';\n    }\n    ```", "```php\n    Vehicle.php\n    9      function getMake()\n    10     {\n    11         return $this->make;\n    12     }\n    13     function getModel()\n    14     {\n    15         return $this->model;\n    16     }\n    17     function getColor()\n    18     {\n    19         return $this->color;\n    20     }\n    https://packt.live/2VwyVHi\n    ```", "```php\n    Vehicle.php\n    29     function setMake($make)\n    30     {\n    31         $this->make = $make;\n    32     }\n    33     function setModel($model)\n    34     {\n    35         $this->model = $model;\n    36     }\n    37     function setColor($color)\n    38     {\n    39         $this->color = $color;\n    40     }\n    41     function setNoOfWheels($wheels)\n    42     {\n    43         $this->noOfWheels = $wheels;\n    44     }\n    https://packt.live/33dTLO2\n    ```", "```php\n    Vehicle.php\n    1  <?php\n    2  class Vehicle \n    3  {\n    4      public $make = 'DefaultMake';\n    5      public $model = 'DefaultModel';\n    6      public $color = 'DefaultColor';\n    7      public $noOfWheels = 0; \n    8      public $engineNumber = 'XXXXXXXX';\n    9      function getMake()\n    10     {\n    11             return $this->make;\n    12     }\n    https://packt.live/2p52XFU\n    ```", "```php\n    $object = new Vehicle();\n    ```", "```php\n    $object->setMake('Honda');\n    $object->setModel('Civic');\n    $object->setColor('Red');\n    $object->setNoOfWheels(4);\n    $object->setEngineNumber('ABC123456');\n    ```", "```php\n    echo \"Make : \" . $object->getMake() . PHP_EOL;\n    echo \"Model : \" . $object->getModel() . PHP_EOL;\n    echo \"Color : \" . $object->getColor() . PHP_EOL;\n    echo \"No. of wheels : \" . $object->getNoOfWheels() . PHP_EOL;\n    echo \"Engine no. : \" . $object->getEngineNumber() . PHP_EOL;\n    ```", "```php\nclass ClassName\n{\n    function __construct() \n    {\n        //function body\n    }\n}\n```", "```php\nclass MySimpleClass \n{\n    public $name;\n    function __construct($username)\n    {\n        $this->name = $username;\n    }\n}\n```", "```php\n$person1 = new Person('John Doe');\n$person2 = new Person('Jane Doe');\necho $person1->name; //prints John Doe\necho $person2->name; //prints Jane Doe\n```", "```php\nclass ClassName\n{\n     function __destruct() \n    {\n        //function body\n    }\n}\n```", "```php\nclass Person \n{\n    //attributes and methods\n    function __destruct()\n    {\n        echo 'The object has been removed.';\n    }\n}\n```", "```php\n$person = new Person();\nunset($person); //output: The object has been removed.\n```", "```php\n$object = new Person();\n$object = NULL; //output: The object has been removed. \n```", "```php\n    Vehicle.php\n    1  <?php\n    2  class Vehicle \n    3  {\n    4      public $make = 'DefaultMake';\n    5      public $model = 'DefaultModel';\n    6      public $color = 'DefaultColor';\n    7      public $noOfWheels = 0; \n    8      public $engineNumber = 'XXXXXXXX';\n    9      function getMake()\n    10     {\n    11         return $this->make;\n    12     }\n    https://packt.live/2IFUlfA\n    ```", "```php\n        public $make;\n        public $model;\n        public $color;\n        public $noOfWheels; \n        public $engineNumber;\n    ```", "```php\n        function __construct($make = 'DefaultMake', $model = 'DefaultModel',       $color = 'DefaultColor', $wheels = 4, $engineNo = 'XXXXXXXX')\n        {\n            //function body\n        }\n    ```", "```php\n        function __construct($make = 'DefaultMake', $model = 'DefaultModel',       $color = 'DefaultColor', $wheels = 4, $engineNo = 'XXXXXXXX')\n        {\n            $this->make = $make;\n            $this->model = $model;\n            $this->color = $color;\n            $this->noOfWheels = $wheels;\n            $this->engineNumber = $engineNo;\n        }\n    ```", "```php\n    $object = new Vehicle();\n    $object->setMake('Honda');\n    $object->setModel('Civic');\n    $object->setColor('Red');\n    $object->setNoOfWheels(4);\n    $object->setEngineNumber('ABC123456');\n    echo \"Make : \" . $object->getMake() . PHP_EOL;\n    echo \"Model : \" . $object->getModel() . PHP_EOL;\n    echo \"Color : \" . $object->getColor() . PHP_EOL;\n    echo \"No. of wheels : \" . $object->getNoOfWheels() . PHP_EOL;\n    echo \"Engine no. : \" . $object->getEngineNumber() . PHP_EOL;\n    ```", "```php\n    <?php\n    require_once 'Vehicle.php';\n    ```", "```php\n    $vehicle = new Vehicle();\n    ```", "```php\n    $vehicle = new Vehicle();\n    echo \"Make: \" . $vehicle->getMake() . PHP_EOL;\n    echo \"Model: \" . $vehicle->getModel() . PHP_EOL;\n    echo \"Color: \" . $vehicle->getColor() . PHP_EOL;\n    echo \"No of wheels: \" . $vehicle->getNoOfWheels() . PHP_EOL;\n    echo \"Engine No: \" . $vehicle->getEngineNumber() . PHP_EOL;\n    ```", "```php\n    $vehicle = new Vehicle();\n    echo \"Make: \" . $vehicle->make . PHP_EOL;\n    echo \"Model: \" . $vehicle->model . PHP_EOL;\n    echo \"Color: \" . $vehicle->color . PHP_EOL;\n    echo \"No of wheels: \" . $vehicle->noOfWheels . PHP_EOL;\n    echo \"Engine No: \" . $vehicle->getEngineNumber() . PHP_EOL;\n    ```", "```php\n    $vehicle1 = new Vehicle('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    echo \"Make: \" . $vehicle1->getMake() . PHP_EOL;\n    echo \"Model: \" . $vehicle1->getModel() . PHP_EOL;\n    echo \"Color: \" . $vehicle1->getColor() . PHP_EOL;\n    echo \"No of wheels: \" . $vehicle1->getNoOfWheels() . PHP_EOL;\n    echo \"Engine No: \" . $vehicle1->getEngineNumber() . PHP_EOL;\n    ```", "```php\nclass MyNewClass extends MySimpleClass \n{\n    //class body\n}\n```", "```php\nclass MySimpleClass \n{\n    public $propertyName = 'base property';\n    function methodName()\n    {\n        echo 'I am a base method. ';\n    }\n}\nclass MyNewClass extends MySimpleClass \n{\n    //class body\n}\n$object = new MyNewClass();\n$object->propertyName; //holds, 'base property'\n$object->methodName(); //prints, 'I am a base method. ' \n```", "```php\nclass MyNewClass extends MySimpleClass \n{\n    public $addedProperty = 'added property';\n    function addedMethodName()\n    {\n        parent::methodName();\n        echo 'I am an added method. ';\n    }\n}\n$object = new MyNewClass();\n$object->propertyName; //holds 'base property'\n$object->addedProperty; //holds 'added property'\n$object->addedMethodName(); //prints 'I am a base method. I am an added method.'\n```", "```php\n    <?php\n    require_once 'Vehicle.php';\n    ```", "```php\n    class Car extends Vehicle \n    {\n        //class body\n    }\n    ```", "```php\n    class Car extends Vehicle \n    {\n        public $doors = 4; \n        public $passengerCapacity = 5;\n        public $steeringWheel = true;\n        public $transmission = 'Manual';\n        //class body\n    }\n    ```", "```php\n    $car = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    echo \"Vehicle Type: \" . get_class($car) . PHP_EOL;\n    echo \" Make: \" . $car->getMake() . PHP_EOL;\n    echo \" Model: \" . $car->getModel() . PHP_EOL;\n    echo \" Color: \" . $car->getColor() . PHP_EOL;\n    echo \" No of wheels: \" . $car->getNoOfWheels() . PHP_EOL;\n    echo \" No of Doors: \" . $car->doors . PHP_EOL;\n    echo \" Transmission: \" . $car->transmission . PHP_EOL;\n    echo \" Passenger capacity: \" . $car->passengerCapacity . PHP_EOL;\n    ```", "```php\n    <?php\n    require_once 'Vehicle.php';\n    class Motorcycle extends Vehicle \n    {\n        public $noOfWheels = 2;\n        public $stroke = 4;\n        //class body\n    }\n    ```", "```php\n    <?php\n    require_once 'Vehicle.php';\n    class Motorcycle extends Vehicle \n    {\n        public $noOfWheels = 2;\n        public $stroke = 4;\n    }\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    echo \"Vehicle Type: \" . get_class($motorcycle) . PHP_EOL;\n    echo \" Make: \" . $motorcycle->make . PHP_EOL;\n    echo \" Model: \" . $motorcycle->model . PHP_EOL;\n    echo \" Color: \" . $motorcycle->color . PHP_EOL;\n    echo \" No of wheels: \" . $motorcycle->noOfWheels . PHP_EOL;\n    echo \" No of strokes: \" . $motorcycle->stroke . PHP_EOL;\n    ```", "```php\n<?php\nclass MySimpleClass\n{\n    public PUBLIC_CONSTANT = 'Public';\n    protected PROTECTED_CONSTANT = 'Protected';\n    private PRIVATE_CONSTANT = 'Private';\n    public $publicAttribute = 'Public Member';\n    protected $protectedAttribute = 'Protected Member';\n    private $privateAttribute = 'Private Member';\n    public function publicMethod()\n    {\n        //function body\n    }\n    protected function protectedMethod()\n    {\n        //function body\n    }\n    private function privateMethod()\n    {\n        //function body\n    }\n}\n$object = new MySimpleClass();\n$object->publicAttribute;//ok\n$object->protectedMember;//fatal error\n$object->privateAttribute;//fatal error\n```", "```php\n    <?php\n    class Vehicle \n    {\n        public $make;\n        public $model;\n        public $color;\n        protected $noOfWheels; \n        public $engineNumber;\n        //methods\n    ```", "```php\n    class Vehicle \n    {\n        public $make;\n        public $model;\n        public $color;\n        protected $noOfWheels; \n        private $engineNumber;\n        //methods\n    ```", "```php\n    <?php\n    require_once 'Vehicle.php';\n    $vehicle = new Vehicle();\n    ```", "```php\n    $vehicle = new Vehicle();\n    echo \"Make: \" . $vehicle->make . PHP_EOL;\n    echo \"Model: \" . $vehicle->model . PHP_EOL;\n    echo \"Color: \" . $vehicle->color . PHP_EOL;\n    echo \"No of wheels: \" . $vehicle->noOfWheels . PHP_EOL;\n    echo \"Engine No: \" . $vehicle->engineNumber . PHP_EOL;\n    ```", "```php\n    Make: DefaultMake\n    Model: DefaultModel\n    Color: DefaultColor\n    Fatal error: Cannot access private property Vehicle::$engineNumber ...\n    ```", "```php\n    $vehicle = new Vehicle();\n    echo \"Make: \" . $vehicle->make . PHP_EOL;\n    echo \"Model: \" . $vehicle->model . PHP_EOL;\n    echo \"Color: \" . $vehicle->color . PHP_EOL;\n    echo \"No of wheels: \" . $vehicle->getNoOfWheels() . PHP_EOL;\n    echo \"Engine No: \" . $vehicle->getEngineNumber() . PHP_EOL;\n    ```", "```php\n    echo \" Engine number: \" . $car->engineNumber . PHP_EOL;\n    ```", "```php\n    Vehicle Type: Car\n     Make: Honda\n     Model: Civic\n     Color: Red\n     No of wheels: 4\n     No of Doors: 4\n     Transmission: Manual\n     Passenger capacity: 5\n    Notice: Undefined property: Car::$engineNumber ...\n     Engine number:\n    ```", "```php\nclass MySimpleClass\n{\n    public static $myStaticProperty = 'I am a static property. ';\n    public static function myStaticMethod()\n    {\n        return 'I am a static method. ';\n    }\n}\necho MySimpleClass::$myStaticProperty; //prints 'I am a static property.'\necho MySimpleClass::myStaticMethod(); //prints 'I am a static method.'\n```", "```php\nclass MySimpleClass\n{\n    public static $myStaticProperty = 'I am a static property. ';\n    public static function myStaticMethod()\n    {\n        return self::$myStaticProperty . 'I am a static method. ';\n    }    \n    public static function myAnotherStaticMethod()\n    {\n        echo self::myStaticMethod();\n    }\n}\necho MySimpleClass::myAnotherStaticMethod(); \n//prints 'I am a static property. I am a static method.'\n```", "```php\nclass MySimpleClass{\n    public static $myStaticProperty = 'parent static property. ';\n    public static function myStaticMethod()\n    {\n        return self::$myStaticProperty . 'parent static method. ';\n    }\n}\nclass MySubClass extends MySimpleClass{\n    public static function printSomething()\n    {\n        echo parent::myStaticMethod();\n    }\n}\necho MySubClass::printSomething(); \n//prints, parent static property. parent static method.\n```", "```php\n$object = new MySubClass();\necho $object->printSomething();\n```", "```php\n    <?php\n    class Vehicle \n    {\n        public $make;\n        public $model;\n        public $color;\n        protected $noOfWheels; \n        private $engineNumber;\n        public static $counter = 0;\n    ```", "```php\n        function __construct($make = 'DefaultMake', $model = 'DefaultModel', $color = 'DefaultColor', $wheels = 4, $engineNo = 'XXXXXXXX')\n        {\n            $this->make = $make;\n            $this->model = $model;\n            $this->color = $color;\n            $this->noOfWheels = $wheels;\n            $this->engineNumber = $engineNo;\n            self::$counter++;\n        }\n    ```", "```php\n    $car1 = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    $car2 = new Car('Toyota', 'Allion', 'White', 4, '24CJ4568');\n    $car3 = new Car('Hyundai', 'Elantra', 'Black', 4, '24CJ1234');\n    $car4 = new Car('Chevrolet', 'Camaro', 'Yellow', 4, '23CJ9397');\n    echo \"Available cars are \" . Car::$counter . PHP_EOL;\n    ```", "```php\n    $motorcycle1 = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle2 = new Motorcycle('Suzuki', 'Gixxer SF', 'Blue', 2,   '53WVC14599');\n    $motorcycle2 = new Motorcycle('Harley Davidson', 'Street 750', 'Black', 2,   '53WVC14234');\n    echo \"Available motorcycles are \" . Motorcycle::$counter. PHP_EOL;\n    ```", "```php\nabstract class ClassName{\n    abstract function methodName(param1);\n    // more abstract method declarations\n    function anotherMethod()\n    {\n        //function body\n    }\n    //more implemented functions\n}\nclass MyChildClass extends ClassName{\n    function methodName(param1, param2)\n    {\n        //the implementation goes here\n    }\n}\n```", "```php\n    abstract class Vehicle\n    {\n        //code goes here\n    }\n    ```", "```php\n    abstract class AbstractVehicle \n    {\n        //code goes here\n    }\n    ```", "```php\n    <?php\n    require_once 'AbstractVehicle.php';\n    class Car extends AbstractVehicle \n    {\n        //code goes here\n    }\n    ```", "```php\n    <?php\n    require_once 'AbstractVehicle.php';\n    class Motorcycle extends AbstractVehicle \n    {\n        //code goes here\n    }\n    ```", "```php\n    <?php\n    abstract class AbstractVehicle \n    {\n        public $make;\n        public $model;\n        public $color;\n        protected $noOfWheels; \n        private $engineNumber;\n        public static $counter = 0;\n        protected $engineStatus = false;\n    ```", "```php\n        abstract function start();\n    ```", "```php\n        function stop()\n        {\n            $this->engineStatus = false;\n        }\n        function getEngineStatus()\n        {\n            return $this->engineStatus;\n        }\n    ```", "```php\n    AbstractVehicle.php\n    1  <?php\n    2  abstract class AbstractVehicle\n    3  {\n    4      public $make;\n    5      public $model;\n    6      public $color;\n    7      protected $noOfWheels;\n    8      private $engineNumber;\n    9      public static $counter = 0;\n    10     protected $engineStatus = false;\n    https://packt.live/2AVSSh0\n    ```", "```php\n    Car.php\n    1  <?php\n    2  require_once 'AbstractVehicle.php';\n    3  class Car extends AbstractVehicle \n    4  {\n    5      public $doors = 4; \n    6      public $passengerCapacity = 5;\n    7      public $steeringWheel = true;\n    8      public $transmission = 'Manual';\n    9      private $hasKeyinIgnition = true;\n    10     public function start()\n    11     {\n    12         if($this->hasKeyinIgnition) \n    13         {\n    14             $this->engineStatus = true;\n    15         }\n    https://packt.live/2pHdFmh\n    ```", "```php\n    $car = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    $car->start();\n    echo \"The car is \" . ($car->getEngineStatus()?'running':'stopped') .   PHP_EOL;\n    $car->stop();\n    echo \"The car is \" . ($car->getEngineStatus()?'running':'stopped') .   PHP_EOL;\n    ```", "```php\n    class Motorcycle extends AbstractVehicle \n    {\n        public $noOfWheels = 2;\n        public $stroke = 4;\n        private $hasKey = true;\n        private $hasKicked = true;\n        public function start()\n        {\n            if($this->hasKey && $this->hasKicked) \n            {\n                $this->engineStatus = true;\n            }\n        }\n    }\n    ```", "```php\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle->start();\n    echo \"The motorcycle is \" . ($motorcycle->getEngineStatus()?'running':  'stopped') . PHP_EOL;\n    $motorcycle->stop();\n    echo \"The motorcycle is \" . ($motorcycle->getEngineStatus()?'running':  'stopped') . PHP_EOL;\n    ```", "```php\ninterface MyInterface{\n    function methodName1();\n    function methodName2();\n    //so on\n}\nclass MyClass implements MyInterface{\n    function methodName1() \n    {\n        //method body\n    }\n    function methodName2() \n    {\n        //method body\n    }\n}\n```", "```php\nclass A implements B, C \n{\n    // class body\n}\n```", "```php\ninterface.php\n1  interface A \n2  {\n3      function a();\n4  }\n5       \n6  interface B \n7  {\n8      function b();\n9  }\n10 interface C extends A, B \n11 {\n12     function c();\n13 }\nhttps://packt.live/2IFanX7\n```", "```php\n    <?php\n    interface DriveInterface\n    {\n        public function changeSpeed($speed);\n        public function changeGear($gear);\n        public function applyBreak();\n    }\n    ```", "```php\n    <?php\n    require_once 'AbstractVehicle.php';\n    require_once 'DriveInterface.php';\n    ```", "```php\n    class Car extends AbstractVehicle implements DriveInterface \n    {\n\n    }\n    class Motorcycle extends AbstractVehicle implements DriveInterface \n    {\n\n    }\n    ```", "```php\n        public function changeSpeed($speed)\n        {\n            echo \"The car has been accelerated to \". $speed. \" kph. \".          PHP_EOL;\n        }\n        public function changeGear($gear)\n        {\n            echo \"Shifted to gear number \". $gear. \". \". PHP_EOL;\n        }\n        public function applyBreak()\n        {\n            echo \"All the 4 breaks in the wheels applied. \". PHP_EOL;\n        }\n    ```", "```php\n    $car = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    $car->changeSpeed(65);\n    $car->applyBreak();\n    $car->changeGear(4);\n    $car->changeSpeed(75);\n    $car->applyBreak();\n    ```", "```php\n        public function changeSpeed($speed)\n        {\n            echo \"The motorcycle has been accelerated to \". $speed. \" kph. \" .           PHP_EOL;\n        }\n        public function changeGear($gear)\n        {\n            echo \"Gear shifted to \". $gear. \". \" . PHP_EOL;\n        }\n        public function applyBreak()\n        {\n            echo \"The break applied. \" . PHP_EOL;\n        }\n    ```", "```php\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle->changeSpeed(45);\n    $motorcycle->changeGear(3);\n    $motorcycle->applyBreak();\n    ```", "```php\nfunction myMethod($object)\n{\n    if(!($obj instanceof ClassName)) \n    {\n        throw new Exception('Only Objects of ClassName can be sent to this           function.');\n    }\n}\n```", "```php\nfunction myMethod(ClassName $object)\n{\n}\n```", "```php\nUser.php\n1  <?php\n2  class User \n3  {\n4      public $name;\n5      private $mailer;\n6      private $database;\n7      \n8      function __construct(string $name, Mailer $mailer, Database $db)\n9      {\n10         $this->name = $name;\n11         $this->mailer = $mailer;\n12         $this->database = $db;\n13     }\n14 }\nhttps://packt.live/2M2Kl23\n```", "```php\n<?php\nrequire_once 'AbstractVehicle.php';\nclass Motorcycle extends AbstractVehicle \n{\n    public $noOfWheels = 2;\n    public $stroke = 4;\n}\n```", "```php\nclass MySimpleClass{\n    public $propertyName = 'base property';\n    function methodName()\n    {\n        echo 'I am a base method. ';\n    }\n}\nclass MyNewClass extends MySimpleClass{\n    function methodName()\n    {\n        echo 'I am an overridden method. ';\n    }\n}\n$object = new MyNewClass();\n$object->propertyName; //holds 'base property'\n$object->methodName(); //prints 'I am an overridden method.'\n```", "```php\n        protected $price;\n    ```", "```php\n        function getPrice()\n        {\n            return $this->price;\n        }\n        function setPrice($price)\n        {\n            $this->price = $price;\n        }\n    ```", "```php\n        function getPrice()\n        {\n            return $this->price - $this->price * 0.05;\n        }\n    ```", "```php\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle->setPrice(5000);\n    echo \"The price is \". $motorcycle->getPrice() . PHP_EOL;\n    ```", "```php\n    The price is 4750\n    ```", "```php\nfunction add($a, $b)\n{\n    //function body\n}\nfunction add($a, $b, $c)\n{\n    //function body\n}\n```", "```php\nfunction add() \n{\n    $sum = 0;\n    $args = func_get_args();\n    foreach ($args as $arg)\n    {\n        $sum += $arg;\n    }\n    return $sum;\n}\necho add(1, 2); //outputs '3'\necho add(10.5, 2.5); //outputs '13'\necho add(10.5, 2.5, 9.6, 55.2); //outputs '77.8'\n```", "```php\n<?php\nclass MyMagicClass \n{\n    private $arr = array();\n    public function __set($attribute, $value)\n    {\n        $this->arr[$attribute] = $value;\n    }\n    public function __get($attribute)\n    {\n        if (array_key_exists($attribute, $this->arr)) \n        {\n            return $this->arr[$attribute];\n        }\n        else \n        {\n            echo 'Error: undefined attribute.';\n        }\n    }\n}\n$object = new MyMagicClass();\n$object->dynamicAttribute = 'I am magic';\necho $object->dynamicAttribute . PHP_EOL; //outputs, I am magic \n```", "```php\nMyMagicClass.php\n1  <?php\n2  class MyMagicClass\n3  {\n4      private $arr = array('dynamicAttribute' => NULL,'anotherAttribute' => NULL);\n5      public function __set($attribute, $value)\n6      {\n7          if (array_key_exists($attribute, $this->arr))\n8          {\n9              $this->arr[$attribute] = $value;\n10         } \n11         else \n12         {\n13             echo 'Error: the attribute is not allowed. ';\n14         }\n15     }\nhttps://packt.live/2B1RAkO\n```", "```php\nMyMagicMethodClass.php\n1  <?php\n2  class MyMagicMethodClass \n3  {\n4      public function __call($method, $arguments)\n5      {\n6          var_dump($arguments);\n7      }\n8      public static function __callStatic($method, $arguments)\n9      {\n10         var_dump($arguments);\n11     }\n12 }\nhttps://packt.live/2ou8JRm\n```", "```php\n            private $runtimeAttributes = array();\n    ```", "```php\n            function __set($attribute, $value)\n            {\n                $this->runtimeAttributes[$attribute] = $value;\n            }\n    ```", "```php\n            function __get($attribute)\n            {\n                if (array_key_exists($attribute, $this->runtimeAttributes)) \n                {\n                    return $this->runtimeAttributes[$attribute];\n                } \n                else \n                {\n                    echo \"Error: undefined attribute. \" . PHP_EOL;\n                }\n            }\n    ```", "```php\n    $car = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    $car->ownerName = 'John Doe';\n    echo \" Owner: \". $car->ownerName . PHP_EOL;\n    $car->year = 2015;\n    echo \" Year: \". $car->year . PHP_EOL; \n    $car->wipers;\n    ```", "```php\n            function __call($method, $arguments)\n            {\n                echo \"The method $method() called. \" . PHP_EOL;\n            }\n    ```", "```php\n    $car->honk();\n    ```", "```php\n    AbstractVehicle.php\n    111     function __call($method, $arguments) \n    112     { \n    113         switch ($method) { \n    114             case 'honk': \n    115                 if (isset($arguments[0])) { \n    116                     echo \"Honking $arguments[0]... \" . PHP_EOL; \n    117                 } else { \n    118                     echo \"Honking... \" . PHP_EOL; \n    119                 } \n    120                 if (isset($arguments[1])) { \n    121                     echo \"$arguments[1] enabled... \" . PHP_EOL; \n    122                 } \n    123                 break; \n    124             default: \n    125                 echo \"The method $method() called. \" . PHP_EOL; \n    126                 break; \n    127         } \n    128     } \n    https://packt.live/2pbDEC8\n    ```", "```php\n    $car->honk('gently');\n    $car->honk('louder', 'siren');\n    ```", "```php\nfinal class MyClass\n{\n    public function myFunction()\n    {\n        echo \"Base class method called.\";\n    }\n}\nclass MyChildClass extends MyClass \n{\n}\n```", "```php\nclass MySimpleClass\n{\n    final public function mySimpleMethod()\n    {\n        echo \"Base class method mySimpleMethod() called.\";\n    }\n}\nclass MyChildClass extends MySimpleClass\n{\n    public function mySimpleMethod()\n    {\n        echo \"Child class method mySimpleMethod() called.\";\n    }\n}\n```", "```php\n    <?php\n        public function start()\n        {\n            if($this->hasKeyinIgnition) \n            {\n                $this->engineStatus = true;\n            }\n        }\n    ```", "```php\n        final public function start()\n        {\n            if($this->hasKeyinIgnition) \n            {\n                $this->engineStatus = true;\n            }\n        }\n    ```", "```php\n    <?php\n    require_once 'Car.php';\n    class Van extends Car \n    {\n    }\n    ```", "```php\n    class Van extends Car \n    {\n        public function start()\n        {\n            $this->engineStatus = true;\n        }\n    }\n    ```", "```php\n    final class Car extends AbstractVehicle implements DriveInterface \n    {\n    }\n    ```", "```php\ntrait MyTraitName{\n    function one()\n    {\n        …\n    }\n    function two()\n    {\n        …\n    }\n}\nclass MyClass extends B{\n    use MyTraitName;\n}\n$object = new MyClass();\n$object->one();\n$object->two();\n```", "```php\nclass MyClass extends B\n{\n    use Trait1, Trait2;\n}\n```", "```php\n<?php\nclass A{\n    public function say()\n    {\n        echo 'Base ';\n    }\n}\ntrait T{\n    public function say() \n    {\n        parent::say();\n        echo 'Trait ';\n    }\n}\nclass MyClass extends A{\n    use T;\n}\n$object = new MyClass();\n$object->say(); //outputs, Base Trait\n```", "```php\nMyClass.php\n1  <?php\n2  class A \n3  {\n4      public function say() \n5      {\n6          echo 'Base ';\n7      }\n8  }\n9  trait T  \n10 {\n11     public function say() \n12     {\n13         parent::say();\n14         echo 'Trait ';\n15     }\nhttps://packt.live/2M56lcA\n```", "```php\n    <?php\n    trait PriceTrait\n    {\n    }\n    ```", "```php\n    <?php\n    trait PriceTrait  \n    {\n        public function getPrice()\n        {\n            return $this->price;\n        }\n        public function setPrice($price)\n        {\n            $this->price = $price;\n        }\n    }\n    ```", "```php\n    <?php\n    require_once 'PriceTrait.php';\n        abstract class AbstractVehicle \n        {\n            //code goes here\n        }\n    ```", "```php\n    <?php\n    require_once 'PriceTrait.php';\n    abstract class AbstractVehicle \n    {\n            use PriceTrait;\n            public $make;\n            public $model;\n            public $color;\n            protected $noOfWheels; \n            private $engineNumber;\n            public static $counter = 0;\n            protected $engineStatus = false;\n            protected $price;\n            ...\n    ```", "```php\n        function getPrice()\n        {\n            return $this->price - $this->price * 0.05;\n        }\n    ```", "```php\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle->setPrice(5000);\n    echo \"The price is  \". $motorcycle->getPrice() . PHP_EOL;\n    ```", "```php\n<?php\nspl_autoload_register(function ($className) \n{\n    require_once $className. '.php';\n});\n$obj1= new ClassName1();\n$obj2 = new ClassName2(); \n```", "```php\n<?php\nrequire_once 'ClassName1.php';\nrequire_once 'ClassName2.php';\n\n$obj1  = new ClassName1();\n$obj2 = new ClassName2(); \n```", "```php\nrequire_once 'AbstractVehicle.php';\nrequire_once 'DriveInterface.php';\n```", "```php\nspl_autoload_register(function ($className) \n{\n    require_once $className. '.php';\n});\n```", "```php\nclass Car extends AbstractVehicle implements DriveInterface \n{\n...\n}\n```", "```php\n<?php\nnamespace MyNamespace;\nconst MYCONST = 'constant';\nfunction myFunction()\n{\n...\n}\nclass MyClass\n{\n...\n}\necho MyNamespace\\MYCONST;\necho myFunction(); //resolves to MyNamespace\\myFunction\necho MyNamespace\\myFunction();//explicitly resolves to MyNamespace\\myFunction    \n$object = new MyNamespace\\MyClass();\n```", "```php\nnamespace MyNamespace\n{\n    ...\n}\n```", "```php\n<?php\nnamespace MyNamespaceA;\nclass MyClass\n{\n...\n}\nnamespace MyNamespaceB;\nclass MyClass\n{\n...\n}\n$object1 = new MyNamespaceA\\MyClass();\n$object2 = new MyNamespaceB\\MyClass();\n```", "```php\n<?php\nnamespace MyNamespace\\SubNamespace;\nconst MYCONST = 'constant';\nfunction myFunction()\n{\n...\n}\nclass MyClass\n{\n...\n}\necho \\MyNamespace\\SubNamespace\\MYCONST;\necho \\MyNamespace\\SubNamespace\\myFunction();\n$object = new \\MyNamespace\\SubNamespace\\MyClass();\n```", "```php\n//file1.php\n<?php\nnamespace MyNamespaceA;\nconst MYCONST = 'constant';\nfunction myFunction()\n{\n...\n}\nclass MyClass\n{\n...\n}\n```", "```php\n<?php\nnamespace MyNamespaceB;\nrequire_once 'file1.php';\nuse MyNamespaceA\\MyClass as A; //imports the class name\n$object = new A();//instantiates the object of class MyNamespaceA\\MyClass\nuse function MyNamespaceA\\myFunction;//importing a function\nmyFunction();//calls MyNamespaceA\\myFunction\nuse function MyNamespaceA\\myFunction as func;//aliasing a function\nfunc();//calls MyNamespaceA\\myFunction\nuse const MyNamespaceA\\MYCONST; //imports a constant\necho MYCONST;//prints the value of MyNamespaceA\\MYCONST\n```", "```php\n//file2.php\n<?php\nnamespace MyNamespaceB;\nrequire_once 'file1.php';\nuse MyNamespaceA\\MyClass as A, MyNamespaceA\\myFunction; \n$object = new A();//instantiates the object of class MyNamespaceA\\MyClass\nmyFunction();//calls MyNamespaceA\\myFunction\n```", "```php\n    <?php\n    namespace Traits;\n    trait PriceTrait  \n    {\n        … \n    }\n    ```", "```php\n    require_once 'PriceTrait.php'; \n    ```", "```php\n    namespace Vehicle;\n    ```", "```php\n    <?php\n    namespace Vehicle;\n        abstract class AbstractVehicle \n        {\n            use \\Traits\\PriceTrait;\n            …\n        }\n    ```", "```php\n    <?php\n    namespace Vehicle;\n    interface DriveInterface \n    {\n        …\n    }\n    ```", "```php\n    require_once 'AbstractVehicle.php'; \n    require_once 'DriveInterface.php';\n    ```", "```php\n    <?php\n    namespace Vehicle;\n    class Car extends AbstractVehicle implements DriveInterface \n    {\n        …\n    }\n    ```", "```php\n    <?php\n    namespace Vehicle;\n    spl_autoload_register();\n    class Car extends AbstractVehicle implements DriveInterface \n    {\n        …\n    }\n    ```", "```php\n    <?php\n    namespace Vehicle;\n    spl_autoload_register();\n    class Motorcycle extends AbstractVehicle implements DriveInterface \n    {\n        …\n    }\n    ```", "```php\n    $car = new Car('Honda', 'Civic', 'Red', 4, '23CJ4567');\n    $car->start();\n    echo \"The car is \" . ($car->getEngineStatus()?'running':'stopped') .   PHP_EOL;\n    $car->changeGear(1);\n    $car->changeSpeed(15);\n    $car->changeGear(2);\n    $car->changeSpeed(35);\n    $car->applyBreak();\n    $car->stop();\n    echo \"The car is \" . ($car->getEngineStatus()?'running':'stopped')  .   PHP_EOL;\n    ```", "```php\n    $motorcycle = new Motorcycle('Kawasaki', 'Ninja', 'Orange', 2,   '53WVC14598');\n    $motorcycle->start();\n    echo \"The motorcycle is \" . ($motorcycle->getEngineStatus()?'running':  'stopped') . PHP_EOL;\n    $motorcycle->changeGear(3);\n    $motorcycle->changeSpeed(35);\n    $motorcycle->applyBreak();\n    $motorcycle->stop();\n    echo \"The motorcycle is \" . ($motorcycle->getEngineStatus()?'running':'stopped') . PHP_EOL;\n    $motorcycle->setPrice(5000);\n    echo \"The price is \". $motorcycle->getPrice() . PHP_EOL;\n    ```", "```php\nDr. Charles Kingsfield's students (4):\n  1\\. Elwin Ransom\n  2\\. Maurice Phipps\n  3\\. James Dunworthy\n  4\\. Alecto Carrow\n```"]