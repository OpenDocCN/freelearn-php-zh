["```php\nAuthorization: Basic <encoded-string>\n```", "```php\n{\n    \"key\": \"iTh4Mzl0EAPn9HAm98hEhAmVEXS\",\n    \"secret\": \"PfoWM9yq4Bh6rGbzzJhr893j4r4sMIAeVRaPMYbkDer5N6F\"\n}\n```", "```php\n$ composer require guzzlehttp/guzzle\n\n```", "```php\n<?php\n\nnamespace TwitterApp;\n\nclass Twitter {\n\n    private $key;\n    private $secret;\n\n    public function __construct(String $key, String $secret) {\n        $this->key = $key;\n        $this->secret = $secret;\n    }\n\n    public function fetchTwits(string name, int $count): array {\n        return [];\n    }\n}\n```", "```php\n\"autoload\": {\n    \"psr-4\": {\"TwitterApp\\\\\": \"src\"}\n}\n```", "```php\n<?php\n\nuse TwitterApp\\Twitter;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$path = $_SERVER['HOME'] . '/.twitter_php7.json';\n$jsonCredentials = file_get_contents($path);\n$credentials = json_decode($jsonCredentials, true);\n\n$twitter = new Twitter($credentials['key'], $credentials['secret']);\n```", "```php\n<?php\n\nnamespace TwitterApp;\n\nuse Exception;\nuse GuzzleHttp\\Client;\n\nclass Twitter {\n\n const TWITTER_API_BASE_URI = 'https://api.twitter.com';\n\n    private $key;\n    private $secret;\n private $accessToken;\n private $client;\n\n    public function __construct(String $key, String $secret) {\n        $this->key = $key;\n        $this->secret = $secret;\n\n $this->client = new Client(\n ['base_uri' => self::TWITTER_API_BASE_URI]\n );\n    }\n\n    //...\n}\n```", "```php\nprivate function requestAccessToken() {\n    $encodedString = base64_encode(\n        $this->key . ':' . $this->secret\n    );\n    $headers = [\n        'Authorization' => 'Basic ' . $encodedString,\n        'Content-Type' => 'application/x-www-form-urlencoded;charset=UTF-8'\n    ];\n    $options = [\n        'headers' => $headers,\n        'body' => 'grant_type=client_credentials'\n    ];\n\n    $response = $this->client->post(self:: OAUTH_ENDPOINT, $options);\n    $body = json_decode($response->getBody(), true);\n\n    $this->accessToken = $body['access_token'];\n}\n```", "```php\n$this->requestAccessToken();\nvar_dump($this->accessToken);\n```", "```php\n$ php app.php\n\n```", "```php\nprivate function getAccessTokenHeaders(): array {\n    if (empty($this->accessToken)) {\n        $this->requestAccessToken();\n    }\n\n    return ['Authorization' => 'Bearer ' . $this->accessToken];\n}\n```", "```php\nconst GET_TWITS = '/1.1/statuses/user_timeline.json';\n//...\npublic function fetchTwits(string $name, int $count): array {\n    $options = [\n        'headers' => $this->getAccessTokenHeaders(),\n        'query' => [\n            'count' => $count,\n            'screen_name' => $name\n        ]\n    ];\n\n    $response = $this->client->get(self::GET_TWITS, $options);\n    $responseTwits = json_decode($response->getBody(), true);\n\n    $twits = [];\n    foreach ($responseTwits as $twit) {\n        $twits[] = [\n            'created_at' => $twit['created_at'],\n            'text' => $twit['text'],\n            'user' => $twit['user']['name']\n        ];\n    }\n\n    return $twits;\n}\n```", "```php\n$twits = $twitter->fetchTwits('neiltyson', 10);\nvar_dump($twits);\n```", "```php\ntry {\n    $response = $this->client->get(self::GET_TWITS, $options);\n} catch (ClientException $e) {\n if ($e->getCode() == 401) {\n        $this->requestAccessToken();\n        $response = $this->client->get(self::GET_TWITS, $options);\n    } else {\n        throw $e;\n    }\n}\n```", "```php\ncurl -X POST --data \"text=This is sparta!\" \\\n> --header \"Authorization: Bearer 8s8d7bf8asdbf8sbdf8bsa\" \\\n>  https://api.twitter.com/1.1/statuses/update.json\n{\"errors\":[{\"code\":89,\"message\":\"Invalid or expired token.\"}]}\n\n```", "```php\n$ curl -X POST --data \"text=This is sparta!\" \\\n> --header \"Authorization: Bearer 8s8d7bf8asdbf8sbdf8bsa\" \\\n>  https://api.twitter.com/1.1/statuses/update.json \\\n> | python -m json.tool\n{\n \"errors\": [\n {\n \"code\": 89,\n \"message\": \"Invalid or expired token.\"\n }\n ]\n}\n\n```", "```php\n$ laravel new bookstore_api\n\n```", "```php\n$ composer require \"lucadegasperi/oauth2-server-laravel:5.1.*\"\n\n```", "```php\n/*\n * OAuth2 Server Service Providers...\n */\n        LucaDegasperi\\OAuth2Server\\Storage\\FluentStorageServiceProvider::class,       LucaDegasperi\\OAuth2Server\\OAuth2ServerServiceProvider::class,\n```", "```php\n'Authorizer' => LucaDegasperi\\OAuth2Server\\Facades\\Authorizer::class,\n```", "```php\n\\LucaDegasperi\\OAuth2Server\\Middleware\\OAuthExceptionHandlerMiddleware::class,\n```", "```php\n'oauth' => \\LucaDegasperi\\OAuth2Server\\Middleware\\OAuthMiddleware::class,\n'oauth-user' => \\LucaDegasperi\\OAuth2Server\\Middleware\\OAuthUserOwnerMiddleware::class,\n'oauth-client' => \\LucaDegasperi\\OAuth2Server\\Middleware\\OAuthClientOwnerMiddleware::class,\n'check-authorization-params' => \\LucaDegasperi\\OAuth2Server\\Middleware\\CheckAuthCodeRequestMiddleware::class,\n'csrf' => \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n```", "```php\n\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n```", "```php\nDB_HOST=localhost\nDB_DATABASE=bookstore\nDB_USERNAME=root\nDB_PASSWORD=\n```", "```php\n$ php artisan vendor:publish\n\n```", "```php\n$ php artisan migrate\n\n```", "```php\nmysql> INSERT INTO oauth_clients(id, secret, name)\n -> VALUES('iTh4Mzl0EAPn90sK4EhAmVEXS',\n -> 'PfoWM9yq4Bh6rGbzzJhr8oDDsNZwGlsMIAeVRaPM',\n -> 'Toni');\nQuery OK, 1 row affected, 1 warning (0.00 sec)\n\n```", "```php\n'grant_types' => [\n     'client_credentials' => [\n        'class' => \n            '\\League\\OAuth2\\Server\\Grant\\ClientCredentialsGrant',\n        'access_token_ttl' => 3600\n    ]\n]\n```", "```php\nRoute::post('oauth/access_token', function() {\n    return Response::json(Authorizer::issueAccessToken());\n});\n```", "```php\n{\n    \"access_token\": \"MPCovQda354d10zzUXpZVOFzqe491E7ZHQAhSAax\"\n    \"token_type\": \"Bearer\"\n    \"expires_in\": 3600\n}\n```", "```php\n$ php artisan make:migration create_books_table --create=books\n$ php artisan make:migration create_sales_table --create=sales\n$ php artisan make:migration create_borrowed_books_table \\\n--create=borrowed_books\n$ php artisan make:migration create_sales_books_table \\\n--create=sales_books\n\n```", "```php\npublic function up()\n{\n    Schema::create('books', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('isbn')->unique();\n        $table->string('title');\n        $table->string('author');\n        $table->smallInteger('stock')->unsigned();\n        $table->float('price')->unsigned();\n    });\n}\n```", "```php\npublic function up()\n{\n    Schema::create('sales', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('user_id')->references('id')->on('users');\n        $table->timestamps();\n    });\n}\n```", "```php\npublic function up()\n{\n    Schema::create('sales_books', function (Blueprint $table) {\n        $table->increments('id');\n        $table->integer('sale_id')->references('id')->on('sales');\n        $table->integer('book_id')->references('id')->on('books');\n        $table->smallInteger('amount')->unsigned();\n    });\n}\n```", "```php\npublic function up()\n{\n    Schema::create('borrowed_books', function (Blueprint $table) {\n        $table->increments('id');\n        $table->integer('book_id')->references('id')->on('books');\n        $table->string('user_id')->references('id')->on('users');\n        $table->timestamp('start');\n        $table->timestamp('end');\n    });\n}\n```", "```php\n$ php artisan migrate\n\n```", "```php\nmysql> INSERT INTO books (isbn,title,author,stock,price) VALUES\n -> (\"9780882339726\",\"1984\",\"George Orwell\",12,7.50),\n -> (\"9789724621081\",\"1Q84\",\"Haruki Murakami\",9,9.75),\n -> (\"9780736692427\",\"Animal Farm\",\"George Orwell\",8,3.50),\n -> (\"9780307350169\",\"Dracula\",\"Bram Stoker\",30,10.15),\n -> (\"9780753179246\",\"19 minutes\",\"Jodi Picoult\",0,10);\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n\n```", "```php\n$ php artisan make:model Book\n$ php artisan make:model Sale\n$ php artisan make:model BorrowedBook\n$ php artisan make:model SalesBook\n\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Book extends Model\n{\n public $timestamps = false;\n}\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass BorrowedBook extends Model\n{\n protected $fillable = ['user_id', 'book_id', 'start'];\n public $timestamps = false;\n\n public function user() {\n return $this->belongsTo('App\\User');\n }\n\n public function book() {\n return $this->hasOne('App\\Book');\n }\n}\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Sale extends Model\n{\n protected $fillable = ['user_id'];\n\n public function books() {\n return $this->hasMany('App\\SalesBook');\n }\n\n public function user() {\n return $this->belongsTo('App\\User');\n }\n}\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass SaleBook extends Model\n{\n public $timestamps = false;\n protected $fillable = ['book_id', 'sale_id', 'amount'];\n\n public function sale() {\n return $this->belongsTo('App\\Sale');\n }\n\n public function books() {\n return $this->hasOne('App\\Book');\n }\n}\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n    //...\n\n public function sales() {\n return $this->hasMany('App\\Sale');\n }\n\n public function borrowedBooks() {\n return $this->hasMany('App\\BorrowedBook');\n }\n}\n```", "```php\n/*\n * Books endpoints.\n */\nRoute::get('books', ['middleware' => 'oauth',\n    'uses' => 'BookController@getAll']);\nRoute::get('books/{id}', ['middleware' => 'oauth',\n    'uses' => 'BookController@get']);\n/*\n * Borrowed books endpoints.\n */\nRoute::post('borrowed-books', ['middleware' => 'oauth',\n    'uses' => 'BorrowedBookController@borrow']);\nRoute::get('borrowed-books', ['middleware' => 'oauth',\n    'uses' => 'BorrowedBookController@get']);\nRoute::put('borrowed-books/{id}/return', ['middleware' => 'oauth',\n    'uses' => 'BorrowedBookController@returnBook']);\n/*\n * Sales endpoints.\n */\nRoute::post('sales', ['middleware' => 'oauth',\n    'uses' => 'SalesController@buy]);\nRoute::get('sales', ['middleware' => 'oauth',\n    'uses' => 'SalesController@getAll']);\nRoute::get('sales/{id}', ['middleware' => 'oauth',\n    'uses' => 'SalesController@get']);\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Book;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Response;\n\nclass BookController extends Controller {\n\n    public function get(string $id): JsonResponse {\n        $book = Book::find($id);\n\n        if (empty($book)) {\n            return new JsonResponse (\n                null,\n                JsonResponse::HTTP_NOT_FOUND\n            );\n        }\n\n        return response()->json(['book' => $book]);\n    }\n}\n```", "```php\n{\n    \"book\": {\n        \"id\": 1\n        \"isbn\": \"9780882339726\"\n        \"title\": \"1984\"\n        \"author\": \"George Orwell\"\n        \"stock\": 12\n        \"price\": 7.5\n    }\n}\n```", "```php\npublic function getAll(Request $request): JsonResponse {\n    $title = $request->get('title', '');\n    $author = $request->get('author', '');\n    $page = $request->get('page', 1);\n    $pageSize = $request->get('page-size', 50);\n\n    $books = Book::where('title', 'like', \"%$title%\")\n        ->where('author', 'like', \"%$author%\")\n        ->take($pageSize)\n        ->skip(($page - 1) * $pageSize)\n        ->get();\n\n    return response()->json(['books' => $books]);\n}\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Book;\nuse App\\BorrowedBook;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse LucaDegasperi\\OAuth2Server\\Facades\\Authorizer;\n\nclass BorrowedBookController extends Controller {\n\n    public function get(): JsonResponse {\n        $borrowedBooks = BorrowedBook::where(\n            'user_id', '=', Authorizer::getResourceOwnerId()\n        )->get();\n\n        return response()->json(\n            ['borrowed-books' => $borrowedBooks]\n        );\n    }\n\n    public function borrow(Request $request): JsonResponse {\n        $id = $request->get('book-id');\n\n        if (empty($id)) {\n            return new JsonResponse(\n                ['error' => 'Expecting book-id parameter.'],\n                JsonResponse::HTTP_BAD_REQUEST\n            );\n        }\n\n        $book = Book::find($id);\n\n        if (empty($book)) {\n            return new JsonResponse(\n                ['error' => 'Book not found.'],\n                JsonResponse::HTTP_BAD_REQUEST\n            );\n        } else if ($book->stock < 1) {\n            return new JsonResponse(\n                ['error' => 'Not enough stock.'],\n                JsonResponse::HTTP_BAD_REQUEST\n            );\n        }\n\n $book->stock--;\n $book->save();\n\n $borrowedBook = BorrowedBook::create(\n [\n 'book_id' => $book->id,\n 'start' => date('Y-m-d H:i:s'),\n 'user_id' => Authorizer::getResourceOwnerId()\n ]\n );\n\n        return response()->json(['borrowed-book' => $borrowedBook]);\n    }\n\n    public function returnBook(string $id): JsonResponse {\n        $borrowedBook = BorrowedBook::find($id);\n\n        if (empty($borrowedBook)) {\n            return new JsonResponse(\n                ['error' => 'Borrowed book not found.'],\n                JsonResponse::HTTP_BAD_REQUEST\n            );\n        }\n\n        $book = Book::find($borrowedBook->book_id);\n        $book->stock++;\n        $book->save();\n\n        $borrowedBook->end = date('Y-m-d H:m:s');\n        $borrowedBook->save();\n\n        return response()->json(['borrowed-book' => $borrowedBook]);\n    }\n}\n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Book;\nuse App\\Sale;\nuse App\\SalesBook;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse LucaDegasperi\\OAuth2Server\\Facades\\Authorizer;\n\nclass SalesController extends Controller {\n\n    public function get(string $id): JsonResponse {\n        $sale = Sale::find($id);\n\n        if (empty($sale)) {\n            return new JsonResponse(\n                null,\n                JsonResponse::HTTP_NOT_FOUND\n            );\n        }\n\n        $sale->books = $sale->books()->getResults();\n        return response()->json(['sale' => $sale]);\n    }\n\n    public function buy(Request $request): JsonResponse {\n        $books = json_decode($request->get('books'), true);\n\n        if (empty($books) || !is_array($books)) {\n            return new JsonResponse(\n                ['error' => 'Books array is malformed.'],\n                JsonResponse::HTTP_BAD_REQUEST\n            );\n        }\n\n        $saleBooks = [];\n        $bookObjects = [];\n        foreach ($books as $bookId => $amount) {\n            $book = Book::find($bookId);\n            if (empty($book) || $book->stock < $amount) {\n                return new JsonResponse(\n                    ['error' => \"Book $bookId not valid.\"],\n                    JsonResponse::HTTP_BAD_REQUEST\n                );\n            }\n\n            $bookObjects[] = $book;\n            $saleBooks[] = [\n                'book_id' => $bookId,\n                'amount' => $amount\n            ];\n        }\n\n        $sale = Sale::create(\n            ['user_id' => Authorizer::getResourceOwnerId()]\n        );\n        foreach ($bookObjects as $key => $book) {\n            $book->stock -= $saleBooks[$key]['amount'];\n\n            $saleBooks[$key]['sale_id'] = $sale->id;\n            SalesBook::create($saleBooks[$key]);\n        }\n\n        $sale->books = $sale->books()->getResults();\n        return response()->json(['sale' => $sale]);\n    }\n\n    public function getAll(Request $request): JsonResponse {\n        $page = $request->get('page', 1);\n        $pageSize = $request->get('page-size', 50);\n\n        $sales = Sale::where(\n                'user_id', '=', Authorizer::getResourceOwnerId()\n             )\n            ->take($pageSize)\n            ->skip(($page - 1) * $pageSize)\n            ->get();\n\n        foreach ($sales as $sale) {\n            $sale->books = $sale->books()->getResults();\n        }\n\n        return response()->json(['sales' => $sales]);\n    }\n}\n```", "```php\n<?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseTransactions;\nuse App\\Book;\n\nclass BooksTest extends TestCase {\n\n    use DatabaseTransactions;\n\n private $books = [];\n\n    public function setUp() {\n        parent::setUp();\n\n $this->addBooks();\n    }\n\n    private function addBooks() {\n        $this->books[0] = Book::create(\n            [\n                'isbn' => '293842983648273',\n                'title' => 'Iliad',\n                'author' => 'Homer',\n                'stock' => 12,\n                'price' => 7.40\n            ]\n        );\n        $this->books[0]->save();\n        $this->books[0] = $this->books[0]->fresh();\n\n        $this->books[1] = Book::create(\n            [\n                'isbn' => '9879287342342',\n                'title' => 'Odyssey',\n                'author' => 'Homer',\n                'stock' => 8,\n                'price' => 10.60\n            ]\n        );\n        $this->books[1]->save();\n        $this->books[1] = $this->books[1]->fresh();\n\n        $this->books[2] = Book::create(\n            [\n                'isbn' => '312312314235324',\n                'title' => 'The Illuminati',\n                'author' => 'Larry Burkett',\n                'stock' => 22,\n                'price' => 5.10\n            ]\n        );\n        $this->books[2]->save();\n        $this->books[2] = $this->books[2]->fresh();\n    }\n}\n```", "```php\n<?php\n\nuse Illuminate\\Foundation\\Testing\\DatabaseTransactions;\nuse App\\Book;\n\nclass BooksTest extends TestCase {\n\n    use DatabaseTransactions;\n\n    private $books = [];\n private $accessToken;\n\n    public function setUp() {\n        parent::setUp();\n\n        $this->addBooks();\n $this->authenticate();\n    }\n\n    //...\n\n private function authenticate() {\n $this->post(\n 'oauth/access_token',\n [\n 'client_id' => 'iTh4Mzl0EAPn90sK4EhAmVEXS',\n 'client_secret' => 'PfoWM9yq4Bh6rhr8oDDsNZM',\n 'grant_type' => 'client_credentials'\n ]\n );\n $response = json_decode(\n $this->response->getContent(), true\n );\n $this->accessToken = $response['access_token'];\n }\n}\n```", "```php\npublic function testGetBook() {\n    $expectedResponse = [\n        'book' => json_decode($this->books[1], true)\n    ];\n    $url = 'books/' . $this->books[1]->id\n        . '?' . $this->getCredentials();\n\n    $this->get($url)\n        ->seeJson($expectedResponse)\n        ->assertResponseOk();\n}\n\nprivate function getCredentials(): string {\n    return 'grant_access=client_credentials&access_token='\n        . $this->accessToken;\n}\n```", "```php\npublic function testGetBooksByTitle() {\n    $expectedResponse = [\n        'books' => [\n            json_decode($this->books[0], true),\n            json_decode($this->books[2], true)\n        ]\n    ];\n\n    $url = 'books/?title=Il&' . $this->getCredentials();\n    $this->get($url)\n        ->seeJson($expectedResponse)\n        ->assertResponseOk();\n}\n```", "```php\npublic function testBorrowBook() {\n    $params = ['book-id' => $this->books[1]->id];\n    $params = array_merge($params, $this->postCredentials());\n\n    $this->post('borrowed-books', $params)\n        ->seeJsonContains(['book_id' => $this->books[1]->id])\n        ->assertResponseOk();\n\n    $response = json_decode($this->response->getContent(), true);\n\n    $url = 'borrowed-books' . '?' . $this->getCredentials();\n    $this->get($url)\n        ->seeJsonContains(['id' => $response['borrowed-book']['id']])\n        ->assertResponseOk();\n}\n\nprivate function postCredentials(): array {\n    return [\n        'grant_access' => 'client_credentials',\n        'access_token' => $this->accessToken\n    ];\n}\n```"]