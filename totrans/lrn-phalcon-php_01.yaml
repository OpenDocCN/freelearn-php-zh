- en: Chapter 1. Getting Started with Phalcon
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 使用 Phalcon 入门
- en: 'What is Phalcon? Let''s start by quoting from the documentation of the official
    website ([http://phalconphp.com/](http://phalconphp.com/)):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 Phalcon？让我们先从官方网站的文档中引用一些内容（[http://phalconphp.com/](http://phalconphp.com/)）：
- en: '*"Phalcon is an open source, full stack framework for PHP written as a C-extension,
    optimized for high performance."*'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Phalcon 是一个开源的全栈 PHP 框架，以 C 扩展的形式编写，针对高性能进行了优化。"*'
- en: Version 2.0 of Phalcon was released in April, and it was developed with a new
    language called Zephir ([http://zephir-lang.com/](http://zephir-lang.com/)). Zephir
    was designed especially for developing PHP extensions, and it is quite user friendly
    for both (PHP and C) developers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon 2.0 版本于四月发布，它是用一种名为 Zephir 的新语言开发的（[http://zephir-lang.com/](http://zephir-lang.com/)）。Zephir
    特别设计用于开发 PHP 扩展，并且对于（PHP 和 C）开发者来说都非常友好。
- en: There are many frameworks out there. The main reasons why we choose Phalcon
    were for its steep learning curve, speed, and because it is decoupled. (We can
    use any of its components independently.) If you have some knowledge of the **Model-View-Controller**
    (**MVC**) and some experience with any **Object-Relational Mapping** (**ORM**),
    you will find working with it pretty straightforward.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有很多框架。我们选择 Phalcon 的主要原因是因为它的学习曲线陡峭、速度快，并且它是解耦的。（我们可以独立使用其任何组件。）如果你对 **模型-视图-控制器**（**MVC**）有所了解，并且对任何
    **对象关系映射**（**ORM**）有一些经验，你会发现与之工作非常直接。
- en: 'We will start our journey with this first chapter where we will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从本章开始我们的旅程，我们将：
- en: Configure our web server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置我们的 Web 服务器
- en: Install Phalcon
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Phalcon
- en: Discuss a bit about how Phalcon works
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稍微讨论一下 Phalcon 的工作原理
- en: Before starting, we assume that you are using a *nix environment. Personally,
    I feel comfortable with Debian distributions, especially Ubuntu, which I am using
    on a daily basis; so, the installations steps that we will talk about are for
    Ubuntu. The OS is a matter of personal choice, but I highly recommend any *nix
    distribution for development. (Even Microsoft decided to open source their ASP.NET
    for Linux early this year)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们假设你正在使用一个 *nix 环境。我个人对 Debian 发行版感到很舒适，特别是 Ubuntu，这是我每天都在使用的；所以，我们将讨论的安装步骤是针对
    Ubuntu 的。操作系统是一个个人选择的问题，但我强烈推荐任何 *nix 发行版用于开发。（即使是微软在今年早些时候决定开源他们的 ASP.NET for
    Linux））
- en: For other types of OS, you will have to search their official documentation,
    in terms of "how to". This book is intended to be about Phalcon and tutorials
    on installing different software on different kinds of OS are out of the scope
    of this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他类型的操作系统，你将不得不搜索它们的官方文档，关于“如何”的问题。这本书的目的是关于 Phalcon 以及在不同类型的操作系统上安装不同软件的教程，这些内容超出了本书的范围。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here is the list of URLs that contain installation instructions for different
    operating systems:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含不同操作系统安装说明的 URL 列表：
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#windows](http://docs.phalconphp.com/en/latest/reference/install.html#windows)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.phalconphp.com/en/latest/reference/install.html#windows](http://docs.phalconphp.com/en/latest/reference/install.html#windows)'
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x](http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x](http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x)'
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#freebsd](http://docs.phalconphp.com/en/latest/reference/install.html#freebsd)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.phalconphp.com/en/latest/reference/install.html#freebsd](http://docs.phalconphp.com/en/latest/reference/install.html#freebsd)'
- en: Senior developers might not agree with me on certain subjects or certain techniques
    and/or recommendations. In general, as a developer, I think you should analyze
    what is suitable for you and develop a platform according to your (or client)
    requirements. In addition, most importantly, there is no such thing as "The Perfect
    Solution". There is always room for improvement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 高级开发者可能不会在某些主题或某些技术/建议上同意我的观点。一般来说，作为一名开发者，我认为你应该分析适合你的内容，并根据你的（或客户的）需求开发平台。此外，最重要的是，没有所谓的“完美解决方案”。总有改进的空间。
- en: Installing the required software
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件
- en: 'We need to install the following software that we are going to use in this
    book:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装以下我们将在这本书中使用的软件：
- en: PHP
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP
- en: Nginx and Apache
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nginx 和 Apache
- en: MongoDB
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: MySQL
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: GIT
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIT
- en: Redis
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: Phalcon
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phalcon
- en: Installing PHP
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 PHP
- en: 'You have probably already installed PHP on your system since you are reading
    this book. However, just in case you haven''t, here are the simple steps to quickly
    install the latest PHP version (Phalcon is running on PHP version >= 5.3). I recommend
    you to use the **Personal Package Archive** (**PPA**) from Ondřej Surý ([https://launchpad.net/~ondrej/+archive/ubuntu/php5](https://launchpad.net/~ondrej/+archive/ubuntu/php5))
    because it has the latest PHP version available on it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在本系统中安装了 PHP，因为您正在阅读这本书。但是，以防万一您还没有，以下是一些快速安装最新 PHP 版本的简单步骤（Phalcon 运行在
    PHP 版本 >= 5.3）。我建议您使用 Ondřej Surý ([https://launchpad.net/~ondrej/+archive/ubuntu/php5](https://launchpad.net/~ondrej/+archive/ubuntu/php5))
    的 **个人软件包存档**（**PPA**），因为它上有可用的最新 PHP 版本：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you don''t want to use this step, you can simply install PHP from the official
    repositories:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用此步骤，您可以直接从官方仓库安装 PHP：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Apache will be installed by default with PHP. However, if you want Nginx instead
    of Apache, you must install PHP in a certain order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 将默认与 PHP 一起安装。但是，如果您想使用 Nginx 而不是 Apache，您必须按照一定的顺序安装 PHP。
- en: The following command will **automatically install PHP and Apache.** If you
    don't need/want to use Apache, please skip using this command**:**
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将 **自动安装 PHP 和 Apache**。如果您不需要/想要使用 Apache，请跳过使用此命令**：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To avoid Apache installation, execute the following commands in the exact same
    order:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要避免安装 Apache，请按以下顺序执行以下命令：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `php5-cgi` package fulfills the dependencies that would otherwise be fulfilled
    by Apache.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`php5-cgi` 软件包满足了本应由 Apache 满足的依赖项。'
- en: Installing Nginx
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Nginx
- en: 'To install the Nginx web server, we need to execute the following commands:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Nginx 网络服务器，我们需要执行以下命令：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing MySQL
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 MySQL
- en: 'MySQL is probably the most widely spread RDBMS system with a market share that
    is greater than 50 percent. Since we are going to use it to develop our project,
    we need to install it by executing the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 可能是分布最广泛的 RDBMS 系统，市场份额超过 50%。由于我们将使用它来开发我们的项目，我们需要通过执行以下命令来安装它：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Downloading the example code**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以直接将文件通过电子邮件发送给您。
- en: Installing Redis
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Redis
- en: '**Redis** is an advanced key-value storage/cache system. We are going to use
    this mostly for our session and to cache objects to improve the speed of our application.
    Let''s install it by executing the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Redis** 是一个高级键值存储/缓存系统。我们将主要使用它来处理会话并缓存对象以提高应用程序的速度。让我们通过执行以下命令来安装它：'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Installing MongoDB
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 MongoDB
- en: 'MongoDB is a document database (NoSQL database) system. We will use this to
    store data that is accessed frequently. Let''s install it:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB 是一个文档数据库（NoSQL数据库）系统。我们将使用它来存储频繁访问的数据。让我们安装它：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing Git
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Git
- en: 'Git is a distributed version control system that we will use to track changes
    to our application and much more. We will install Git by executing the following
    command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个分布式版本控制系统，我们将使用它来跟踪应用程序的更改以及更多内容。我们将通过执行以下命令来安装 Git：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: I strongly recommend that you use the latest versions of all software as much
    as possible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您尽可能使用所有软件的最新版本。
- en: Installing Phalcon
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Phalcon
- en: 'Now that we have installed all the required software, we will proceed with
    the installation of Phalcon. Before we continue, we must install some dependencies:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有必需的软件，我们将继续安装 Phalcon。在我们继续之前，我们必须安装一些依赖项：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For Windows systems and more details about how to compile the extension on different
    systems, please check the latest documentation at [http://phalconphp.com/en/download](http://phalconphp.com/en/download).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 系统，以及有关如何在不同的系统上编译扩展的更多详细信息，请查看 [http://phalconphp.com/en/download](http://phalconphp.com/en/download)
    上的最新文档。
- en: 'Now, we can clone the repository and compile our extension:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以克隆仓库并编译我们的扩展：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If everything goes well, you should be able to see Phalcon in the list of PHP
    installed modules:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该能够在 PHP 安装模块列表中看到 Phalcon：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Apache and Nginx configuration files
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache 和 Nginx 的配置文件
- en: 'We will use `/var/www/learning-phalcon.localhost` as the default directory
    for our project, and we will refer to it as the **root folder**. Please create
    this folder:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `/var/www/learning-phalcon.localhost` 作为我们项目的默认目录，并将其称为 **根文件夹**。请创建此文件夹：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Of course, if you want, you can use another folder. Let''s create a test file
    in our `public` folder under the root directory with some PHP content:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您愿意，您可以使用另一个文件夹。让我们在根目录下的 `public` 文件夹中创建一个测试文件，并包含一些 PHP 内容：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Apache
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache
- en: 'Let''s switch to the default directory where Apache holds the configuration
    files for the available websites, using the command line: `$ cd /etc/apache2/sites-available/`.
    After that, perform the following set of steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换到 Apache 存储可用网站配置文件的默认目录，使用命令行：`$ cd /etc/apache2/sites-available/`。之后，执行以下步骤：
- en: 'Using your favorite editor, create a file named `learning-phalcon.localhost`
    for apache version < 2.4 or `learning-phalcon.localhost.conf` for apache version
    >= 2.4:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编辑器，为 Apache 版本 < 2.4 创建一个名为 `learning-phalcon.localhost` 的文件，或为 Apache
    版本 >= 2.4 创建一个名为 `learning-phalcon.localhost.conf` 的文件：
- en: '[PRE14]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, paste the following content to this file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下内容粘贴到该文件中：
- en: '[PRE15]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, switch to the public folder and add a file named `.htaccess` to it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，切换到公共文件夹并添加一个名为 `.htaccess` 的文件到其中：
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, add the following content to the `.htaccess` file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下内容添加到 `.htaccess` 文件中：
- en: '[PRE17]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will not work unless you have enabled `mod_rewrite`. To do so, execute
    this command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有启用 `mod_rewrite`，这将不起作用。为此，执行此命令：
- en: '[PRE18]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have configured our virtual host, let''s enable it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经配置了虚拟主机，让我们启用它：
- en: '[PRE19]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The host file
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: hosts 文件
- en: 'If you open a browser and type `http://www.learning-phalcon.localhost/`, you''ll
    receive a host not found or connection error. This is because there is no name
    resolver for this **TLD** (short for **Top Level Domain**). To fix this, we edit
    our host file and add this name:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开浏览器并输入 `http://www.learning-phalcon.localhost/`，您将收到一个“找不到主机”或连接错误。这是因为没有为这个
    **TLD**（顶级域的缩写）提供名称解析器。为了解决这个问题，我们编辑我们的 hosts 文件并添加此名称：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Restart your browser and type the address `http://www.learning-phalcon.localhost/`
    again. If everything goes well, you should see the current date/time.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动您的浏览器并再次输入地址 `http://www.learning-phalcon.localhost/`。如果一切顺利，您应该会看到当前的日期/时间。
- en: Nginx
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nginx
- en: 'If you choose to use Nginx (which I recommend, especially because it can serve
    more concurrent clients with higher throughput, and it serves static content more
    efficiently) instead of Apache, here is what you need to do:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用 Nginx（我推荐这样做，尤其是因为它可以以更高的吞吐量服务更多的并发客户端，并且更有效地服务静态内容）而不是 Apache，以下是您需要执行的操作：
- en: 'Locate the `config` folder of Nginx (in Ubuntu, it is installed under `/etc/nginx/`).
    Create a file named `learning-phalcon.localhost` in your `sites-available` folder
    (by navigating to `/etc/nginx/sites-available`):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 Nginx 的 `config` 文件夹（在 Ubuntu 上，它安装在 `/etc/nginx/` 下）。在您的 `sites-available`
    文件夹中创建一个名为 `learning-phalcon.localhost` 的文件（通过导航到 `/etc/nginx/sites-available`）：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, add the following content to it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向其中添加以下内容：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In some environments, you might need to edit your `php.ini` file and set `cgi.fix_pathinfo
    = 0`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些环境中，您可能需要编辑您的 `php.ini` 文件并将 `cgi.fix_pathinfo = 0` 设置。
- en: 'Then, save the file and restart Nginx:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，保存文件并重新启动 Nginx：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Please edit and save your host file (check *The host file* section), then open
    your browser and type `http://www.learning-phalcon.localhost/`. At this point,
    you should see a page that shows the current date/time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请编辑并保存您的 hosts 文件（检查 *hosts 文件* 部分），然后打开您的浏览器并输入 `http://www.learning-phalcon.localhost/`。此时，您应该会看到一个显示当前日期/时间的页面。
- en: There are many possible methods to install and configure PHP and Apache/Nginx.
    Feel free to do a simple Google search and choose one that fits you better, if
    my method is not the optimal one for your needs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置 PHP 和 Apache/Nginx 有许多可能的方法。如果您觉得我的方法不适合您的需求，请随意进行简单的 Google 搜索并选择一个更适合您的方法。
- en: Assuming that everything went well until now, we will go further by learning
    a little bit about Phalcon's internals.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 假设到目前为止一切顺利，我们将进一步学习一些关于 Phalcon 内部结构的知识。
- en: Understanding the framework's internals
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解框架的内部结构
- en: In this section, I will try to make a short introduction to the common parts
    of the framework. Most of the text presented here is part of the official documentation
    that you should always read. The idea of this section is to make you familiar
    with the most common methods and components that will help you to understand quickly
    how the framework works.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将尝试简要介绍框架的常见部分。这里展示的大部分文本都是官方文档的一部分，你应该始终阅读。本节的想法是让你熟悉最常见的方法和组件，这将帮助你快速了解框架的工作方式。
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please note that images in this book might contain the text [http://learning-phalcon.dev](http://learning-phalcon.dev).
    You need to ignore that and use `http://learning-phalcon.localhost` as suggested
    in the chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书中的图片可能包含文本[http://learning-phalcon.dev](http://learning-phalcon.dev)。你需要忽略这些内容，并按照章节中建议的，使用`http://learning-phalcon.localhost`。
- en: The dependency injection
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖注入
- en: 'Probably one of the most powerful characteristics of Phalcon is the **dependency
    injection** (**DI**). If you have no idea about dependency injection, you should
    read at least the wiki page for this design pattern at [http://en.wikipedia.org/wiki/Dependency_injection](http://en.wikipedia.org/wiki/Dependency_injection):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是Phalcon最强大的特性之一的是**依赖注入**（**DI**）。如果你对依赖注入一无所知，你应该至少阅读一下这个设计模式的维基百科页面[http://en.wikipedia.org/wiki/Dependency_injection](http://en.wikipedia.org/wiki/Dependency_injection)：
- en: '*"Dependency injection is a software design pattern that implements inversion
    of control for resolving dependencies. An injection is the passing of a dependency
    (a service or software module) to a dependent object (a client). The service is
    made part of the client''s state. Passing the service to the client, rather than
    allowing a client to build or find the service, is the fundamental requirement
    of the pattern.*'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"依赖注入是一种软件设计模式，它实现了控制反转以解决依赖关系。注入是将依赖（一个服务或软件模块）传递给依赖对象（一个客户端）。服务成为客户端状态的一部分。将服务传递给客户端，而不是允许客户端构建或找到服务，是这种模式的基本要求。*'
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Dependency injection allows a program design to follow the dependency inversion
    principle."*'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*依赖注入允许程序设计遵循依赖倒置原则。*'
- en: The term "Dependency injection" was coined by Martin Fowler.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “依赖注入”这个术语是由马丁·福勒（Martin Fowler）提出的。
- en: 'A real-life example of dependency injection might be the following situation:
    Suppose you go shopping. At the mall, you will need a bag to put your groceries,
    but you forgot to take one when you left your home. In this case, you will need
    to buy a bag. In development, buying this bag can be quite expensive. So, what
    if your door has a scanner that scans your body for a bag, and will not open unless
    you have one? This can be called dependency injection.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入的一个现实生活例子可能是以下情况：假设你去购物。在商场，你需要一个袋子来装你的杂货，但你离开家时忘了带。在这种情况下，你需要买一个袋子。在开发中，购买这个袋子可能相当昂贵。那么，如果你的门有一个扫描器，可以扫描你的身体以寻找袋子，并且只有在你有袋子的情况下才会打开，这可以称为依赖注入。
- en: Phalcon uses the `\Phalcon\DI` component, which is a component that implements
    the Inversion of Control pattern. This reduces the overall code complexity.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon使用`\Phalcon\DI`组件，这是一个实现控制反转模式的组件。这减少了整体代码的复杂性。
- en: 'The framework itself or the developer can register services. Phalcon has many
    built-in components that are available in the DI container, such as the following
    ones:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 框架本身或开发者可以注册服务。Phalcon有许多内置组件，这些组件在DI容器中可用，如下所示：
- en: Request and response
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求和响应
- en: Logger
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录器
- en: Crypt
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Flash
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪存
- en: Router and configuration
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由和配置
- en: View
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看
- en: Cache
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存
- en: Session
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话
- en: 'Setting up a new component in the DI is as easy as the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在DI中设置新的组件就像以下代码一样简单：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When you need to access the "mail" component, in a controller for example,
    you can simply call it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要访问“mail”组件时，例如在一个控制器中，你可以简单地调用它：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you need to create your own DI, Phalcon or the `DiInterface` interface must
    be implemented to replace the one provided by Phalcon, or you must extend the
    current one.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要创建自己的DI，Phalcon或必须实现`DiInterface`接口以替换Phalcon提供的接口，或者必须扩展当前的接口。
- en: These are just a few dummy examples so that you can have an idea about Phalcon's
    DI by the time we start our project. In the meanwhile, please take your time and
    read the official documentation that can be found at [http://docs.phalconphp.com/en/latest/reference/di.html](http://docs.phalconphp.com/en/latest/reference/di.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些示例，以便你可以在我们开始项目时对 Phalcon 的 DI 有一个大致的了解。同时，请花些时间阅读官方文档，可以在 [http://docs.phalconphp.com/en/latest/reference/di.html](http://docs.phalconphp.com/en/latest/reference/di.html)
    找到。
- en: The request component
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求组件
- en: 'The request component is probably one of the most used components in any framework.
    It handles any HTTP request (such as GET, POST, or DELETE, among others) and also
    provides a few shortcuts for the `$_SERVER` variable. Most of the time, we will
    use the request component in the controllers. The Phalcon documentation ([http://docs.phalconphp.com/en/latest/reference/mvc.html](http://docs.phalconphp.com/en/latest/reference/mvc.html))
    states the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请求组件可能是任何框架中最常用的组件之一。它处理任何 HTTP 请求（如 GET、POST 或 DELETE 等），同时也为 `$_SERVER` 变量提供了一些快捷方式。大多数时候，我们将在控制器中使用请求组件。Phalcon
    文档（[http://docs.phalconphp.com/en/latest/reference/mvc.html](http://docs.phalconphp.com/en/latest/reference/mvc.html)）中说明了以下内容：
- en: '*"The controllers provide the "flow" between models and views. Controllers
    are responsible for processing the incoming requests from the web browser, interrogating
    the models for data, and passing that data on to the views for presentation."*'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"控制器在模型和视图之间提供“流程”。控制器负责处理来自网页浏览器的传入请求，查询模型以获取数据，并将这些数据传递给视图进行展示。"*'
- en: 'In Phalcon, all controllers should extend the `\Phalcon\Mvc\Controller` component,
    and the name of the public methods that we want to access via HTTP GET should
    have the suffix `Action`. For example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Phalcon 中，所有控制器都应该扩展 `\Phalcon\Mvc\Controller` 组件，而我们想要通过 HTTP GET 访问的公共方法名称应该以
    `Action` 后缀结尾。例如：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Okay. So, how do we use the request component? Easy! Do you remember that we
    talked about built-in components in the DI section? The request component is one
    of them. All we need to do is get the DI. Here is an example of how to get and
    use the request component:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么，我们如何使用请求组件呢？很简单！你还记得我们在 DI 部分讨论的内置组件吗？请求组件就是其中之一。我们只需要获取 DI。以下是如何获取和使用请求组件的示例：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: These are just a few common methods that are built into the request component.
    Let's continue with the next important component—Response.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是请求组件中内置的一些常见方法。让我们继续下一个重要组件——响应。
- en: The response component
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应组件
- en: 'So, what can this component do? Well, pretty much everything that is response
    or output related. Using it, we can set headers, do redirects, send cookies, set
    content, and much more. Here is a list of common methods from this component:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个组件能做什么呢？嗯，几乎与响应或输出相关的一切都能做。使用它，我们可以设置头，执行重定向，发送cookie，设置内容等等。以下是该组件的一些常见方法列表：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `redirect` method accepts three parameters: a location (string), if it
    is an external redirect (this is a Boolean type which is by default `false`),
    and a status code (http status code range). The following lines of code is the
    redirect method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`redirect` 方法接受三个参数：一个位置（字符串），如果是一个外部重定向（这是一个布尔类型，默认为 `false`），以及一个状态码（HTTP
    状态码范围）。以下代码行是重定向方法：'
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Another useful method is the `setHeader` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的方法是 `setHeader` 方法：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding example sets a header named `APIKEY` with the value as `AWQ23XX258561`.
    Sending headers is a common approach when you develop APIs. You can send any type
    of headers and overwrite current headers using this method.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例设置了一个名为 `APIKEY` 的头，其值为 `AWQ23XX258561`。在开发 API 时发送头是一个常见的做法。你可以使用此方法发送任何类型的头并覆盖当前头。
- en: 'Content related methods: `setContent()` and `setJsonContent()`. Let''s take
    for example the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 内容相关方法：`setContent()` 和 `setJsonContent()`。让我们以以下代码为例：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When you need to send any JSON content, you should set the header as `application/json`
    using the built-in method in the response object:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要发送任何 JSON 内容时，你应该使用响应对象中的内置方法将头设置为 `application/json`：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now that we know the basics about response/request components, we might find
    ourselves in a situation where we may need to log different things, such as errors.
    For this, we need to check the logger component.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了响应/请求组件的基础知识，我们可能会发现自己处于需要记录不同情况的位置，例如错误。为此，我们需要检查记录器组件。
- en: The logger component
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录器组件
- en: 'In a production environment, we cannot afford to throw errors or blank pages
    at the client. We will avoid this and log the errors in a log file. You will read
    more about this in the next chapters. To sum it up, we will implement a custom
    logger to our DI, catch exceptions, and then log them. For example, perform the
    following set of steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，我们不能承担向客户端抛出错误或空白页面的风险。我们将避免这种情况，并将错误记录在日志文件中。您将在下一章中了解更多关于此内容。总结一下，我们将实现一个自定义的记录器到DI中，捕获异常，然后记录它们。例如，执行以下步骤：
- en: 'Set the custom logger in DI using the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码在DI中设置自定义记录器：
- en: '[PRE34]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a method that will throw an exception, catch it, and log it, as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个会抛出异常的方法，捕获它，并记录它，如下所示：
- en: '[PRE35]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the preceding example, we try to execute a nonexistent method, and our code
    will throw an exception that we catch. It will log it and then redirect the user
    to a friendly error page, `error/500.html`. You will notice that our logger component
    calls a method named `error`. There are other methods that are implemented, such
    as, `debug`, `info`, `notice`, `warning`, and so on.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们尝试执行一个不存在的方法，我们的代码将抛出一个异常，我们将其捕获并记录，然后重定向用户到一个友好的错误页面，`error/500.html`。您会注意到我们的记录器组件调用了一个名为`error`的方法。还有其他实现的方法，如`debug`、`info`、`notice`、`warning`等等。
- en: 'The `logger` component can be transactional. (Phalcon stores the logs temporarily
    in memory, and later on, it writes the data to the relevant adapter.) For example,
    consider the following code snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`logger`组件可以是事务性的。（Phalcon将日志临时存储在内存中，稍后将其写入相关适配器。）例如，考虑以下代码片段：'
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The crypt component
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密组件
- en: Crypt is a very useful component if someone needs to encrypt data and decrypt
    it on your side. One situation where you might want to use the crypt component
    is to send data over the HTTP `get` method or save sensitive information in your
    database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人需要在您的端加密数据并解密它，加密是一个非常有用的组件。你可能想要使用加密组件的情况之一是将数据通过HTTP `get`方法发送或保存敏感信息到您的数据库中。
- en: This component has many built-in methods such as `encrypt`, `decrypt`, `getAvailableChipers`,
    `setKey`, `getKey`, and so on. Here is an example of using the crypt component
    in the HTTP `get` method.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件具有许多内置方法，例如`encrypt`、`decrypt`、`getAvailableChiphers`、`setKey`、`getKey`等等。以下是在HTTP
    `get`方法中使用加密组件的示例。
- en: 'First, we overwrite the DI, and then we pass a key to it in order to avoid
    setting it every time:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们覆盖DI（依赖注入），然后向它传递一个键以避免每次都设置它：
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Of course, you are probably never going to use it this way. The preceding example
    just demonstrates the power of this component. You might have noticed that there
    is a new DI method called flash. We are going to talk about it next.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可能永远不会以这种方式使用它。前面的例子只是展示了此组件的强大功能。您可能已经注意到有一个新的DI方法名为flash。我们将在下一节讨论它。
- en: The flash component
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: flash组件
- en: This component is used to send notifications to the client and inform him or
    her about the status of the component's actions. For example, we can send a successful
    message after a user has completed the registration on our website or submitted
    a contact form.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件用于向客户端发送通知，并告知他们组件动作的状态。例如，当用户在我们的网站上完成注册或提交联系表单后，我们可以发送一条成功消息。
- en: There are two kinds of flash messages—direct and session—and both are available
    in DI. The direct method outputs the message directly and cannot be loaded on
    a future request. On the contrary, the session method, stores the messages in
    a session, and they are automatically cleared after they are printed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的flash消息——直接和会话，两者都在DI中可用。直接方法直接输出消息，不能在未来请求中加载。相反，会话方法将消息存储在会话中，打印后自动清除。
- en: 'Here is a common usage of flash direct and flash session, assuming that you
    have a page called register, and you post the data on the same page:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个名为register的页面，并且您在同一页面上提交数据，以下是flash直接和flash会话的常见用法：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In our view, we will render the messages using the `getContent()` method or
    `content()` in the template engine **Volt** (we'll cover this later in the chapter).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视图中，我们将使用`getContent()`方法或模板引擎**Volt**中的`content()`来渲染消息（我们将在本章后面讨论这一点）。
- en: If we need to redirect our user to another page (let's call it `registerSuccess`),
    then we need to use the flash session method; otherwise, the message will not
    appear.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要将用户重定向到另一个页面（让我们称它为`registerSuccess`），那么我们需要使用flash会话方法；否则，消息将不会显示。
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `register` template will contain a form with method `post` and `action`
    pointing to the `create` method. The `create` method will look something like
    this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`register`模板将包含一个方法为`post`且`action`指向`create`方法的表单。`create`方法看起来可能像这样：'
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding example, we set the messages in the session using the `flashSession`
    method, and we redirect the user back to the register page. In order to render
    the messages in our view, we need to call the method `flashSession()->output();`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`flashSession`方法在会话中设置消息，并将用户重定向回注册页面。为了在我们的视图中渲染这些消息，我们需要调用`flashSession()->output();`方法。
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The recommended way is to forward the request with the help of dispatcher, not
    using redirects. If you use redirects, the user will lose all the data that he
    or she filled in the form.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的方式是使用分发器来转发请求，而不是使用重定向。如果你使用重定向，用户将丢失他们在表单中填写的所有数据。
- en: The router component
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由组件
- en: The router component helps us to map friendly URLs to our controllers and actions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 路由组件帮助我们将友好的URL映射到我们的控制器和操作。
- en: 'By default, if the rewrite module is enabled in your web server, you will be
    able to access a controller named `Post` and the `read` action like this: `http://www.learning-phalcon.localhost/post/read`.
    Our code can look like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果你的Web服务器启用了重写模块，你将能够通过以下方式访问名为`Post`的控制器和`read`操作：`http://www.learning-phalcon.localhost/post/read`。我们的代码可能看起来像这样：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'However, sometimes, this code is not apt if you need to translate the URLs
    into multiple languages, or if you need to name the URLs in a different way to
    how they are defined in the code. Here is a usage example for the router component:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时如果你需要将URL翻译成多种语言，或者需要以不同于代码中定义的方式命名URL，这段代码可能就不适用了。以下是路由组件的使用示例：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the preceding example, we map all the categories to the controller `post`
    and action `findByCategorySlug`. The router component allows us to use regular
    expressions for our URLs. With `preg_match`, this can be represented as follows
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将所有类别映射到`post`控制器和`findByCategorySlug`操作。路由组件允许我们使用正则表达式来定义URL。使用`preg_match`，这可以表示如下
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'By accessing `http://www.learning-phalcon.localhost/video`, the request will
    be forwarded to the `findByCategorySlug` action from the post controller:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`http://www.learning-phalcon.localhost/video`，请求将被转发到post控制器的`findByCategorySlug`操作：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `getParam()` method has three parameters. The first one is the name that
    we are searching for, the second parameter is an array of filters that can be
    applied automatically, and the third parameter is the default value in case the
    requested name does not exist or is not set.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`getParam()`方法有三个参数。第一个是我们正在搜索的名称，第二个参数是可以自动应用的一组过滤器，第三个参数是在请求的名称不存在或未设置时的默认值。'
- en: We will discuss models in the next chapter. This was just a simple example of
    how you can use the router.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章讨论模型。这只是一个简单的示例，说明你可以如何使用路由。
- en: 'The router also supports a precheck of the `request` method. You may be used
    to check whether the method is POST, DELETE, PUT, or GET, like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 路由还支持对`request`方法的预检查。你可能习惯于检查方法是否为POST、DELETE、PUT或GET，如下所示：
- en: '[PRE45]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'While this is perfectly correct, it is not very friendly for our code. Phalcon''s
    router has this capability by which you can add the right type of request that
    you are expecting, without the need to check this in your code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是完全正确的，但它对我们的代码来说并不友好。Phalcon的路由具有这种能力，你可以添加你期望的正确类型的请求，而无需在代码中进行检查：
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This is the basic usage of the router. As always, please read the documentation
    in order to learn everything about this component.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是路由的基本用法。一如既往，请阅读文档以了解有关此组件的所有信息。
- en: Tip
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can find out more about routing on the official documentation at [http://docs.phalconphp.com/en/latest/reference/routing.html](http://docs.phalconphp.com/en/latest/reference/routing.html).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档中了解更多关于路由的信息，请访问[http://docs.phalconphp.com/en/latest/reference/routing.html](http://docs.phalconphp.com/en/latest/reference/routing.html)。
- en: The config component
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置组件
- en: This component can handle configuration files of various formats by using adapters.
    Phalcon has two built-in adapters for it, which are INI and Array. Using INI files
    is probably never a good idea. Therefore, I recommend you to make use of native
    arrays.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件可以通过适配器处理各种格式的配置文件。Phalcon为此提供了两个内置适配器，分别是INI和Array。使用INI文件可能从来都不是一个好主意。因此，我建议你使用原生数组。
- en: What kind of data can or needs to be stored in these files? Well, pretty much
    everything that will be needed globally in our application, such as database connection
    parameters. In the old days, we used `$_GLOBALS` (a big security issue), or we
    used the `define()` method, and then gradually we started using it globally.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件可以或需要存储什么类型的数据？嗯，几乎是我们应用中需要的所有全局数据，例如数据库连接参数。在以前的日子里，我们使用`$_GLOBALS`（一个大的安全问题），或者我们使用`define()`方法，然后逐渐开始全局使用它。
- en: 'Here is an example of a `config` file, and how we can use it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个`config`文件的示例，以及我们如何使用它：
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `config` object can be converted back to an array by using `toArray()`
    method:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`toArray()`方法将`config`对象转换回数组：
- en: '[PRE48]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Another useful method for this object is the `merge` method. If we have multiple
    configuration files, we can easily merge them into one object:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此对象，另一个有用的方法是`merge`方法。如果我们有多个配置文件，我们可以轻松地将它们合并成一个对象：
- en: '[PRE49]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Now, the `$config` object will have the same content as it did before.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`$config`对象将具有与之前相同的内容。
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are two other adapters that are not implemented yet (YAML and JSON), but
    you can use them if you clone Phalcon's incubator repository ([https://github.com/phalcon/incubator](https://github.com/phalcon/incubator)).
    This repository contains a collection of adapters/helpers that might be integrated
    in Phalcon in the near future.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个尚未实现的适配器（YAML和JSON），但如果你克隆Phalcon的孵化器存储库（[https://github.com/phalcon/incubator](https://github.com/phalcon/incubator)），你可以使用它们。此存储库包含一系列适配器/辅助工具，这些工具可能很快将被集成到Phalcon中。
- en: The view component
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图组件
- en: 'This component is used to render our templates. By default, the templates have
    the `.phtml` extension, and they contain HTML and PHP code. Here are some examples
    on how to use the view:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件用于渲染我们的模板。默认情况下，模板具有`.phtml`扩展名，并包含HTML和PHP代码。以下是一些使用视图的示例：
- en: 'First, we set up the view in the DI using the following code snippet:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用以下代码片段在DI中设置视图：
- en: '[PRE50]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, we can use this service as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以如下使用此服务：
- en: '[PRE51]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Next, we need to create a view template that must look like this:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个视图模板，它必须看起来像这样：
- en: '[PRE52]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Simple, isn''t it? This component also supports hierarchical rendering. You
    can have a base layout, a general template for posts, and a template for a single
    post. Let''s take, for example, the following directory structure:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，不是吗？此组件还支持分层渲染。你可以有一个基本布局，一个用于帖子的通用模板，以及一个用于单个帖子的模板。让我们以以下目录结构为例：
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Phalcon will first render `app/views/index.phtml`. Then, when we request for
    `detailAction()` from the post controller, it will render `app/views/post/details.phtml`.
    The main layout can contain something similar to this code:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon首先渲染`app/views/index.phtml`。然后，当我们从帖子控制器请求`detailAction()`时，它将渲染`app/views/post/details.phtml`。主布局可以包含类似以下代码的内容：
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And, the `details.phtml` template will have the following content:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`details.phtml`模板将包含以下内容：
- en: '[PRE55]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This component also allows you to pick different templates to set a render level,
    disable or enable the view, and much more.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件还允许你选择不同的模板来设置渲染级别，禁用或启用视图，以及更多。
- en: Phalcon has a built-in template engine named Volt. If you are familiar with
    PHP template engines such as **Smarty** or **Twig**, you will want to use them
    for sure. Volt is almost identical to Twig, and you will find it very useful—it
    is inspired by **Jinja** ([http://jinja.pocoo.org/](http://jinja.pocoo.org/)).
    You can even use your own template engine, or any other template engine that you
    can find there.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon有一个名为Volt的内置模板引擎。如果你熟悉PHP模板引擎，如**Smarty**或**Twig**，你肯定会想使用它们。Volt几乎与Twig相同，你会发现它非常有用——它受到了**Jinja**的启发（[http://jinja.pocoo.org/](http://jinja.pocoo.org/)）。你甚至可以使用自己的模板引擎，或者任何你能在那里找到的其他模板引擎。
- en: 'In order to enable the Volt template engine, we need to make a small modification
    to our view service, and we need to create a Volt service; here is how to do this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用Volt模板引擎，我们需要对我们的视图服务进行一些小的修改，并创建一个Volt服务；以下是这样做的方法：
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: By adding this modification and `voltService`, we can now use this template
    engine. From the inheritance point of view, Volt acts a little bit differently.
    We first need to define a main layout with named blocks. Then, the rest of the
    templates should extend the main layout, and we need to put our content in the
    same blocks as the main layout. Before we look at some examples, I will tell you
    a little bit about Volt's syntax, the details are as follows.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加此修改和`voltService`，我们现在可以使用此模板引擎。从继承的角度来看，Volt表现得有点不同。我们首先需要定义一个主布局，并带有命名块。然后，其余的模板应该扩展主布局，并且我们需要将内容放在与主布局相同的块中。在我们查看一些示例之前，我将简要介绍一下Volt的语法，具体如下。
- en: 'The syntax for outputting data or for echoing content:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出数据或输出内容的语法：
- en: '[PRE57]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The syntax for defining blocks:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义块的语法：
- en: '[PRE58]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The syntax to extend a template (this should be the first line in your template):'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展模板的语法（这应该是您模板中的第一行）：
- en: '[PRE59]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The syntax to include a file:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含文件的语法：
- en: '[PRE60]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The syntax to include a file and pass variables:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含文件并传递变量的语法：
- en: '[PRE61]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Tip
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please note the missing extension. If you pass variables, you *MUST* omit the
    extension.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意缺少的扩展名。如果您传递变量，*必须*省略扩展名。
- en: 'The syntax for control structures (`for`, `if`, `else`):'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制结构（`for`，`if`，`else`）的语法：
- en: '[PRE62]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The syntax for the loop context:'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环上下文的语法：
- en: '[PRE63]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The syntax for assignments:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值的语法：
- en: '[PRE64]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The list is long. Additionally, you can use expressions, comparison operators,
    logic operators, filters, and so on. Let''s write a simple template to see how
    it works:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 列表很长。此外，您还可以使用表达式、比较运算符、逻辑运算符、过滤器等。让我们写一个简单的模板来看看它是如何工作的：
- en: '[PRE65]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the full documentation for the view component at [http://docs.phalconphp.com/en/latest/reference/views.html](http://docs.phalconphp.com/en/latest/reference/views.html)
    and for Volt at [http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://docs.phalconphp.com/en/latest/reference/views.html](http://docs.phalconphp.com/en/latest/reference/views.html)查看视图组件的完整文档，以及Volt的[http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html)。
- en: The session component
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会话组件
- en: 'This component provides object-oriented wrappers to access session data. To
    start the session, we need to add the service into the DI container:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件提供面向对象的包装来访问会话数据。要启动会话，我们需要将服务添加到DI容器中：
- en: '[PRE66]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following is a code example for working with session:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与会话一起工作的代码示例：
- en: '[PRE67]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: If you check Phalcon's incubator, there are many available adapters, such as
    Redis, Database, Memcache, and Mongo. You can also implement your own adapter.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查Phalcon的孵化器，有许多可用的适配器，例如Redis、数据库、Memcache和Mongo。您也可以实现自己的适配器。
- en: Note
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the official documentation at [http://docs.phalconphp.com/en/latest/reference/session.html](http://docs.phalconphp.com/en/latest/reference/session.html).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://docs.phalconphp.com/en/latest/reference/session.html](http://docs.phalconphp.com/en/latest/reference/session.html)查看官方文档。
- en: The cache component
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存组件
- en: 'To improve the performance of some applications, you will need to cache data.
    For example, we can cache the query results for a post. Why? Imagine 1 million
    views or posts. Normally, you will query the database for it, but this will mean
    1 million queries (you can multiply this by at least 3, if you are using it, and
    for ORM—this means 3 million queries at least). Why? When you query, the ORM will
    act like this:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高某些应用程序的性能，您需要缓存数据。例如，我们可以缓存帖子的查询结果。为什么？想象一下有100万次查看或帖子。通常，您将查询数据库，但这意味着100万次查询（如果您在使用它，并且对于ORM——这意味着至少300万次查询）。为什么？当您查询时，ORM将表现得像这样：
- en: 'It''ll check if the table exists, in the information schema:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将检查表是否存在于信息模式中：
- en: '[PRE68]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, it''ll check whether it''s executing a "Describe" of the table:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将检查是否正在执行表的“描述”：
- en: '[PRE69]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Then, whether it''s executing the actual query:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，是否正在执行实际的查询：
- en: '[PRE70]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: If the `user` table has relations, the ORM will repeat each of the preceding
    steps for each relation.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`用户`表有关系，ORM将为每个关系重复执行前面的每个步骤。
- en: To solve this problem, we will save the post object into our caching system.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将帖子对象保存到我们的缓存系统中。
- en: 'Personally, I use Redis and Igbinary. Redis is probably the most powerful tool,
    since it stores the data in memory and, saves the data on disk for redundancy.
    This means that every time you request the data from cache, you will get it from
    memory. Igbinary ([https://pecl.php.net/package/igbinary](https://pecl.php.net/package/igbinary))
    is a replacement for the standard php serializer. Here is an example cache service:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 个人来说，我使用Redis和Igbinary。Redis可能是最强大的工具，因为它将数据存储在内存中，并在磁盘上保存数据以实现冗余。这意味着每次你从缓存请求数据时，你都会从内存中获取它。Igbinary（[https://pecl.php.net/package/igbinary](https://pecl.php.net/package/igbinary)）是标准php序列化器的替代品。以下是一个示例缓存服务：
- en: '[PRE71]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The cache component has the following methods that are commonly used:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存组件有以下常用方法：
- en: '[PRE72]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Summary
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed the required software, created the configuration
    files for the web servers, and you learned a little bit about Phalcon's internals.
    In the next chapters, we will learn by example, and everything will be much clearer.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了所需的软件，创建了Web服务器的配置文件，并且你对Phalcon的内部结构有了一些了解。在接下来的章节中，我们将通过示例学习，一切都会变得更加清晰。
- en: Take your time, and before going further, read a little bit more about anything
    in which you don't have experience.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 请慢慢来，在继续之前，先阅读一下你不太熟悉的任何内容。
- en: In the following chapter, we will look at how to set up the MVC structure and
    the environment for our project.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何设置我们的项目的MVC结构和环境。
