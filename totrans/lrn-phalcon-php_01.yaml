- en: Chapter 1. Getting Started with Phalcon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is Phalcon? Let''s start by quoting from the documentation of the official
    website ([http://phalconphp.com/](http://phalconphp.com/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Phalcon is an open source, full stack framework for PHP written as a C-extension,
    optimized for high performance."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Version 2.0 of Phalcon was released in April, and it was developed with a new
    language called Zephir ([http://zephir-lang.com/](http://zephir-lang.com/)). Zephir
    was designed especially for developing PHP extensions, and it is quite user friendly
    for both (PHP and C) developers.
  prefs: []
  type: TYPE_NORMAL
- en: There are many frameworks out there. The main reasons why we choose Phalcon
    were for its steep learning curve, speed, and because it is decoupled. (We can
    use any of its components independently.) If you have some knowledge of the **Model-View-Controller**
    (**MVC**) and some experience with any **Object-Relational Mapping** (**ORM**),
    you will find working with it pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start our journey with this first chapter where we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure our web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Phalcon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss a bit about how Phalcon works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before starting, we assume that you are using a *nix environment. Personally,
    I feel comfortable with Debian distributions, especially Ubuntu, which I am using
    on a daily basis; so, the installations steps that we will talk about are for
    Ubuntu. The OS is a matter of personal choice, but I highly recommend any *nix
    distribution for development. (Even Microsoft decided to open source their ASP.NET
    for Linux early this year)
  prefs: []
  type: TYPE_NORMAL
- en: For other types of OS, you will have to search their official documentation,
    in terms of "how to". This book is intended to be about Phalcon and tutorials
    on installing different software on different kinds of OS are out of the scope
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the list of URLs that contain installation instructions for different
    operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#windows](http://docs.phalconphp.com/en/latest/reference/install.html#windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x](http://docs.phalconphp.com/en/latest/reference/install.html#mac-os-x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.phalconphp.com/en/latest/reference/install.html#freebsd](http://docs.phalconphp.com/en/latest/reference/install.html#freebsd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Senior developers might not agree with me on certain subjects or certain techniques
    and/or recommendations. In general, as a developer, I think you should analyze
    what is suitable for you and develop a platform according to your (or client)
    requirements. In addition, most importantly, there is no such thing as "The Perfect
    Solution". There is always room for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to install the following software that we are going to use in this
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nginx and Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GIT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phalcon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have probably already installed PHP on your system since you are reading
    this book. However, just in case you haven''t, here are the simple steps to quickly
    install the latest PHP version (Phalcon is running on PHP version >= 5.3). I recommend
    you to use the **Personal Package Archive** (**PPA**) from Ondřej Surý ([https://launchpad.net/~ondrej/+archive/ubuntu/php5](https://launchpad.net/~ondrej/+archive/ubuntu/php5))
    because it has the latest PHP version available on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to use this step, you can simply install PHP from the official
    repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Apache will be installed by default with PHP. However, if you want Nginx instead
    of Apache, you must install PHP in a certain order.
  prefs: []
  type: TYPE_NORMAL
- en: The following command will **automatically install PHP and Apache.** If you
    don't need/want to use Apache, please skip using this command**:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid Apache installation, execute the following commands in the exact same
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `php5-cgi` package fulfills the dependencies that would otherwise be fulfilled
    by Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the Nginx web server, we need to execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MySQL is probably the most widely spread RDBMS system with a market share that
    is greater than 50 percent. Since we are going to use it to develop our project,
    we need to install it by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Redis** is an advanced key-value storage/cache system. We are going to use
    this mostly for our session and to cache objects to improve the speed of our application.
    Let''s install it by executing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Installing MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB is a document database (NoSQL database) system. We will use this to
    store data that is accessed frequently. Let''s install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Installing Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Git is a distributed version control system that we will use to track changes
    to our application and much more. We will install Git by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I strongly recommend that you use the latest versions of all software as much
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Phalcon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have installed all the required software, we will proceed with
    the installation of Phalcon. Before we continue, we must install some dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For Windows systems and more details about how to compile the extension on different
    systems, please check the latest documentation at [http://phalconphp.com/en/download](http://phalconphp.com/en/download).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can clone the repository and compile our extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, you should be able to see Phalcon in the list of PHP
    installed modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Apache and Nginx configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use `/var/www/learning-phalcon.localhost` as the default directory
    for our project, and we will refer to it as the **root folder**. Please create
    this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, if you want, you can use another folder. Let''s create a test file
    in our `public` folder under the root directory with some PHP content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s switch to the default directory where Apache holds the configuration
    files for the available websites, using the command line: `$ cd /etc/apache2/sites-available/`.
    After that, perform the following set of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using your favorite editor, create a file named `learning-phalcon.localhost`
    for apache version < 2.4 or `learning-phalcon.localhost.conf` for apache version
    >= 2.4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, paste the following content to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, switch to the public folder and add a file named `.htaccess` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following content to the `.htaccess` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will not work unless you have enabled `mod_rewrite`. To do so, execute
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have configured our virtual host, let''s enable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The host file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you open a browser and type `http://www.learning-phalcon.localhost/`, you''ll
    receive a host not found or connection error. This is because there is no name
    resolver for this **TLD** (short for **Top Level Domain**). To fix this, we edit
    our host file and add this name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Restart your browser and type the address `http://www.learning-phalcon.localhost/`
    again. If everything goes well, you should see the current date/time.
  prefs: []
  type: TYPE_NORMAL
- en: Nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you choose to use Nginx (which I recommend, especially because it can serve
    more concurrent clients with higher throughput, and it serves static content more
    efficiently) instead of Apache, here is what you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the `config` folder of Nginx (in Ubuntu, it is installed under `/etc/nginx/`).
    Create a file named `learning-phalcon.localhost` in your `sites-available` folder
    (by navigating to `/etc/nginx/sites-available`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some environments, you might need to edit your `php.ini` file and set `cgi.fix_pathinfo
    = 0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, save the file and restart Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Please edit and save your host file (check *The host file* section), then open
    your browser and type `http://www.learning-phalcon.localhost/`. At this point,
    you should see a page that shows the current date/time.
  prefs: []
  type: TYPE_NORMAL
- en: There are many possible methods to install and configure PHP and Apache/Nginx.
    Feel free to do a simple Google search and choose one that fits you better, if
    my method is not the optimal one for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that everything went well until now, we will go further by learning
    a little bit about Phalcon's internals.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the framework's internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will try to make a short introduction to the common parts
    of the framework. Most of the text presented here is part of the official documentation
    that you should always read. The idea of this section is to make you familiar
    with the most common methods and components that will help you to understand quickly
    how the framework works.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that images in this book might contain the text [http://learning-phalcon.dev](http://learning-phalcon.dev).
    You need to ignore that and use `http://learning-phalcon.localhost` as suggested
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The dependency injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Probably one of the most powerful characteristics of Phalcon is the **dependency
    injection** (**DI**). If you have no idea about dependency injection, you should
    read at least the wiki page for this design pattern at [http://en.wikipedia.org/wiki/Dependency_injection](http://en.wikipedia.org/wiki/Dependency_injection):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Dependency injection is a software design pattern that implements inversion
    of control for resolving dependencies. An injection is the passing of a dependency
    (a service or software module) to a dependent object (a client). The service is
    made part of the client''s state. Passing the service to the client, rather than
    allowing a client to build or find the service, is the fundamental requirement
    of the pattern.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Dependency injection allows a program design to follow the dependency inversion
    principle."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The term "Dependency injection" was coined by Martin Fowler.
  prefs: []
  type: TYPE_NORMAL
- en: 'A real-life example of dependency injection might be the following situation:
    Suppose you go shopping. At the mall, you will need a bag to put your groceries,
    but you forgot to take one when you left your home. In this case, you will need
    to buy a bag. In development, buying this bag can be quite expensive. So, what
    if your door has a scanner that scans your body for a bag, and will not open unless
    you have one? This can be called dependency injection.'
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon uses the `\Phalcon\DI` component, which is a component that implements
    the Inversion of Control pattern. This reduces the overall code complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The framework itself or the developer can register services. Phalcon has many
    built-in components that are available in the DI container, such as the following
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: Request and response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Router and configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting up a new component in the DI is as easy as the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When you need to access the "mail" component, in a controller for example,
    you can simply call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If you need to create your own DI, Phalcon or the `DiInterface` interface must
    be implemented to replace the one provided by Phalcon, or you must extend the
    current one.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few dummy examples so that you can have an idea about Phalcon's
    DI by the time we start our project. In the meanwhile, please take your time and
    read the official documentation that can be found at [http://docs.phalconphp.com/en/latest/reference/di.html](http://docs.phalconphp.com/en/latest/reference/di.html).
  prefs: []
  type: TYPE_NORMAL
- en: The request component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The request component is probably one of the most used components in any framework.
    It handles any HTTP request (such as GET, POST, or DELETE, among others) and also
    provides a few shortcuts for the `$_SERVER` variable. Most of the time, we will
    use the request component in the controllers. The Phalcon documentation ([http://docs.phalconphp.com/en/latest/reference/mvc.html](http://docs.phalconphp.com/en/latest/reference/mvc.html))
    states the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The controllers provide the "flow" between models and views. Controllers
    are responsible for processing the incoming requests from the web browser, interrogating
    the models for data, and passing that data on to the views for presentation."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In Phalcon, all controllers should extend the `\Phalcon\Mvc\Controller` component,
    and the name of the public methods that we want to access via HTTP GET should
    have the suffix `Action`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay. So, how do we use the request component? Easy! Do you remember that we
    talked about built-in components in the DI section? The request component is one
    of them. All we need to do is get the DI. Here is an example of how to get and
    use the request component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: These are just a few common methods that are built into the request component.
    Let's continue with the next important component—Response.
  prefs: []
  type: TYPE_NORMAL
- en: The response component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, what can this component do? Well, pretty much everything that is response
    or output related. Using it, we can set headers, do redirects, send cookies, set
    content, and much more. Here is a list of common methods from this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `redirect` method accepts three parameters: a location (string), if it
    is an external redirect (this is a Boolean type which is by default `false`),
    and a status code (http status code range). The following lines of code is the
    redirect method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful method is the `setHeader` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example sets a header named `APIKEY` with the value as `AWQ23XX258561`.
    Sending headers is a common approach when you develop APIs. You can send any type
    of headers and overwrite current headers using this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content related methods: `setContent()` and `setJsonContent()`. Let''s take
    for example the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When you need to send any JSON content, you should set the header as `application/json`
    using the built-in method in the response object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know the basics about response/request components, we might find
    ourselves in a situation where we may need to log different things, such as errors.
    For this, we need to check the logger component.
  prefs: []
  type: TYPE_NORMAL
- en: The logger component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a production environment, we cannot afford to throw errors or blank pages
    at the client. We will avoid this and log the errors in a log file. You will read
    more about this in the next chapters. To sum it up, we will implement a custom
    logger to our DI, catch exceptions, and then log them. For example, perform the
    following set of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the custom logger in DI using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method that will throw an exception, catch it, and log it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, we try to execute a nonexistent method, and our code
    will throw an exception that we catch. It will log it and then redirect the user
    to a friendly error page, `error/500.html`. You will notice that our logger component
    calls a method named `error`. There are other methods that are implemented, such
    as, `debug`, `info`, `notice`, `warning`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `logger` component can be transactional. (Phalcon stores the logs temporarily
    in memory, and later on, it writes the data to the relevant adapter.) For example,
    consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The crypt component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Crypt is a very useful component if someone needs to encrypt data and decrypt
    it on your side. One situation where you might want to use the crypt component
    is to send data over the HTTP `get` method or save sensitive information in your
    database.
  prefs: []
  type: TYPE_NORMAL
- en: This component has many built-in methods such as `encrypt`, `decrypt`, `getAvailableChipers`,
    `setKey`, `getKey`, and so on. Here is an example of using the crypt component
    in the HTTP `get` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we overwrite the DI, and then we pass a key to it in order to avoid
    setting it every time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you are probably never going to use it this way. The preceding example
    just demonstrates the power of this component. You might have noticed that there
    is a new DI method called flash. We are going to talk about it next.
  prefs: []
  type: TYPE_NORMAL
- en: The flash component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This component is used to send notifications to the client and inform him or
    her about the status of the component's actions. For example, we can send a successful
    message after a user has completed the registration on our website or submitted
    a contact form.
  prefs: []
  type: TYPE_NORMAL
- en: There are two kinds of flash messages—direct and session—and both are available
    in DI. The direct method outputs the message directly and cannot be loaded on
    a future request. On the contrary, the session method, stores the messages in
    a session, and they are automatically cleared after they are printed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a common usage of flash direct and flash session, assuming that you
    have a page called register, and you post the data on the same page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In our view, we will render the messages using the `getContent()` method or
    `content()` in the template engine **Volt** (we'll cover this later in the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: If we need to redirect our user to another page (let's call it `registerSuccess`),
    then we need to use the flash session method; otherwise, the message will not
    appear.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `register` template will contain a form with method `post` and `action`
    pointing to the `create` method. The `create` method will look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we set the messages in the session using the `flashSession`
    method, and we redirect the user back to the register page. In order to render
    the messages in our view, we need to call the method `flashSession()->output();`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recommended way is to forward the request with the help of dispatcher, not
    using redirects. If you use redirects, the user will lose all the data that he
    or she filled in the form.
  prefs: []
  type: TYPE_NORMAL
- en: The router component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The router component helps us to map friendly URLs to our controllers and actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, if the rewrite module is enabled in your web server, you will be
    able to access a controller named `Post` and the `read` action like this: `http://www.learning-phalcon.localhost/post/read`.
    Our code can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'However, sometimes, this code is not apt if you need to translate the URLs
    into multiple languages, or if you need to name the URLs in a different way to
    how they are defined in the code. Here is a usage example for the router component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we map all the categories to the controller `post`
    and action `findByCategorySlug`. The router component allows us to use regular
    expressions for our URLs. With `preg_match`, this can be represented as follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'By accessing `http://www.learning-phalcon.localhost/video`, the request will
    be forwarded to the `findByCategorySlug` action from the post controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `getParam()` method has three parameters. The first one is the name that
    we are searching for, the second parameter is an array of filters that can be
    applied automatically, and the third parameter is the default value in case the
    requested name does not exist or is not set.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss models in the next chapter. This was just a simple example of
    how you can use the router.
  prefs: []
  type: TYPE_NORMAL
- en: 'The router also supports a precheck of the `request` method. You may be used
    to check whether the method is POST, DELETE, PUT, or GET, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'While this is perfectly correct, it is not very friendly for our code. Phalcon''s
    router has this capability by which you can add the right type of request that
    you are expecting, without the need to check this in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This is the basic usage of the router. As always, please read the documentation
    in order to learn everything about this component.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find out more about routing on the official documentation at [http://docs.phalconphp.com/en/latest/reference/routing.html](http://docs.phalconphp.com/en/latest/reference/routing.html).
  prefs: []
  type: TYPE_NORMAL
- en: The config component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This component can handle configuration files of various formats by using adapters.
    Phalcon has two built-in adapters for it, which are INI and Array. Using INI files
    is probably never a good idea. Therefore, I recommend you to make use of native
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: What kind of data can or needs to be stored in these files? Well, pretty much
    everything that will be needed globally in our application, such as database connection
    parameters. In the old days, we used `$_GLOBALS` (a big security issue), or we
    used the `define()` method, and then gradually we started using it globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a `config` file, and how we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `config` object can be converted back to an array by using `toArray()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Another useful method for this object is the `merge` method. If we have multiple
    configuration files, we can easily merge them into one object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `$config` object will have the same content as it did before.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two other adapters that are not implemented yet (YAML and JSON), but
    you can use them if you clone Phalcon's incubator repository ([https://github.com/phalcon/incubator](https://github.com/phalcon/incubator)).
    This repository contains a collection of adapters/helpers that might be integrated
    in Phalcon in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: The view component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This component is used to render our templates. By default, the templates have
    the `.phtml` extension, and they contain HTML and PHP code. Here are some examples
    on how to use the view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we set up the view in the DI using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can use this service as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create a view template that must look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Simple, isn''t it? This component also supports hierarchical rendering. You
    can have a base layout, a general template for posts, and a template for a single
    post. Let''s take, for example, the following directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Phalcon will first render `app/views/index.phtml`. Then, when we request for
    `detailAction()` from the post controller, it will render `app/views/post/details.phtml`.
    The main layout can contain something similar to this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'And, the `details.phtml` template will have the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This component also allows you to pick different templates to set a render level,
    disable or enable the view, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon has a built-in template engine named Volt. If you are familiar with
    PHP template engines such as **Smarty** or **Twig**, you will want to use them
    for sure. Volt is almost identical to Twig, and you will find it very useful—it
    is inspired by **Jinja** ([http://jinja.pocoo.org/](http://jinja.pocoo.org/)).
    You can even use your own template engine, or any other template engine that you
    can find there.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to enable the Volt template engine, we need to make a small modification
    to our view service, and we need to create a Volt service; here is how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: By adding this modification and `voltService`, we can now use this template
    engine. From the inheritance point of view, Volt acts a little bit differently.
    We first need to define a main layout with named blocks. Then, the rest of the
    templates should extend the main layout, and we need to put our content in the
    same blocks as the main layout. Before we look at some examples, I will tell you
    a little bit about Volt's syntax, the details are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for outputting data or for echoing content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax for defining blocks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax to extend a template (this should be the first line in your template):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax to include a file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax to include a file and pass variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note the missing extension. If you pass variables, you *MUST* omit the
    extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The syntax for control structures (`for`, `if`, `else`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax for the loop context:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax for assignments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The list is long. Additionally, you can use expressions, comparison operators,
    logic operators, filters, and so on. Let''s write a simple template to see how
    it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the full documentation for the view component at [http://docs.phalconphp.com/en/latest/reference/views.html](http://docs.phalconphp.com/en/latest/reference/views.html)
    and for Volt at [http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html).
  prefs: []
  type: TYPE_NORMAL
- en: The session component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This component provides object-oriented wrappers to access session data. To
    start the session, we need to add the service into the DI container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a code example for working with session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If you check Phalcon's incubator, there are many available adapters, such as
    Redis, Database, Memcache, and Mongo. You can also implement your own adapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the official documentation at [http://docs.phalconphp.com/en/latest/reference/session.html](http://docs.phalconphp.com/en/latest/reference/session.html).
  prefs: []
  type: TYPE_NORMAL
- en: The cache component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To improve the performance of some applications, you will need to cache data.
    For example, we can cache the query results for a post. Why? Imagine 1 million
    views or posts. Normally, you will query the database for it, but this will mean
    1 million queries (you can multiply this by at least 3, if you are using it, and
    for ORM—this means 3 million queries at least). Why? When you query, the ORM will
    act like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''ll check if the table exists, in the information schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, it''ll check whether it''s executing a "Describe" of the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, whether it''s executing the actual query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `user` table has relations, the ORM will repeat each of the preceding
    steps for each relation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To solve this problem, we will save the post object into our caching system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Personally, I use Redis and Igbinary. Redis is probably the most powerful tool,
    since it stores the data in memory and, saves the data on disk for redundancy.
    This means that every time you request the data from cache, you will get it from
    memory. Igbinary ([https://pecl.php.net/package/igbinary](https://pecl.php.net/package/igbinary))
    is a replacement for the standard php serializer. Here is an example cache service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The cache component has the following methods that are commonly used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed the required software, created the configuration
    files for the web servers, and you learned a little bit about Phalcon's internals.
    In the next chapters, we will learn by example, and everything will be much clearer.
  prefs: []
  type: TYPE_NORMAL
- en: Take your time, and before going further, read a little bit more about anything
    in which you don't have experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will look at how to set up the MVC structure and
    the environment for our project.
  prefs: []
  type: TYPE_NORMAL
