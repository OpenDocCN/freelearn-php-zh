["```php\n$display .= '\n      <div class=\"wpqpa-file-item\" id=\"PF'.$file_row->id.'\"  data-file-id=\"'.$file_row->id.'\" >\n        <div class=\"wpqpa-file-item-row\"    >\n            <div class=\"wpqpa-file-item-name wpqpa-files-list-name\" >'.$file_row->file_name.'</div>\n            <div class=\"wpqpa-file-item-download\" ><a href=\"'.$url.'\" >'.__(\"Download\",\"wpqpa\").'</a></div>\n            <div class=\"wpqpa-clear\"></div>\n        </div>\n        <div class=\"wpqpa-clear\"></div>\n      </div>';\n```", "```php\n$file_display = '\n  <div class=\"wpqpa-file-item\" id=\"PF'.$file_row->id.'\" data-file-id=\"'.$file_row->id.'\" >\n    <div class=\"wpqpa-file-item-row\" >\n      <div class=\"wpqpa-file-item-name wpqpa-files-list-name\" >'.$file_row->file_name.'</div>\n      <div class=\"wpqpa-file-item-download\" ><a href=\"'.$url.'\" >'.__(\"Download\",\"wpqpa\").'</a>          </div>\n      <div class=\"wpqpa-clear\"></div>\n    </div>\n    <div class=\"wpqpa-clear\"></div>\n  </div>';\n\n$file_display = apply_filters('wpqpa_post_attachment_list_item', $file_display, $file_row);\n$display .= $file_display;\n```", "```php\n$file_mime_type = mime_content_type( $file_dir );\nif( $file_mime_type != '' ){ \n  do_action('wpqpa_before_download_post_attachment',$attachments[0]); \n  header( 'Cache-Control: public' );\n  header( 'Content-Description: File Transfer' );\n```", "```php\nadd_filter( 'wpqpa_post_attachment_list_item', 'wpqaa_post_attachment_list_item' , 10 ,2 );\nfunction wpqaa_post_attachment_list_item( $display, $file_data ){\n $upload_dir = wp_upload_dir();\n $file_dir = $upload_dir['basedir'] . $file_data->file_path;\n $file_mime_type = mime_content_type( $file_dir );\n\n if($file_mime_type == 'application/pdf'){\n   if( !is_user_logged_in() || ( is_user_logged_in() && current_user_can('subscriber') ) ){\n     $display = '';\n   }\n }\n return $display;\n}\n```", "```php\nadd_action( 'wpqpa_before_download_post_attachment', 'wpqaa_before_download_post_attachment' );\nfunction wpqaa_before_download_post_attachment( $data ){\n $post_id = $data['post_id'];\n if( is_user_logged_in() ){\n   $count = get_post_meta( $post_id, 'wpqaa_member_download_count',true );\n   update_post_meta( $post_id, 'wpqaa_member_download_count', $count + 1);\n }else{\n   $count = get_post_meta( $post_id, 'wpqaa_guest_download_count', true );\n   update_post_meta( $post_id, 'wpqaa_guest_download_count', $count + 1 );\n }\n}\n```", "```php\necho WPQPA_PLUGIN_URL;exit;\n```", "```php\nadd_action( 'plugins_loaded', 'wpqal_plugins_loaded_action' );\nfunction wpqal_plugins_loaded_action() {\n  echo WPQPA_PLUGIN_URL;\n}\n```", "```php\nadd_action( 'init', 'wpqal_init_action' );\nfunction wpqal_init_action() {\n  global $post;\n  print_r($post->ID);exit;\n}\n```", "```php\nadd_action( 'wp', 'wpqal_wp_action' );\nfunction wpqal_wp_action() {\n  global $post;\n  print_r($post->ID);exit;\n}\n```", "```php\nadd_action( 'pre_get_posts', 'wpqal_pre_get_posts_action' );\nfunction wpqal_pre_get_posts_action( $query ) {\n  global $wp_query;\n  print_r($wp_query); \n}\n```", "```php\nadd_action( 'wp', 'wpqal_wp_action' );\nfunction wpqal_wp_action() {\n  global $wp_query;\n  print_r($wp_query); \n}\n```", "```php\nfunction wpqal_pre_get_posts_action1( $query ) {\n  if ( !is_admin() && $query->is_main_query() ) {\n    if ($query->is_search) {\n      $query->set('post_type', 'post');\n    }\n  }\n}\nadd_action( 'pre_get_posts', 'wpqal_pre_get_posts_action1' );\n\nfunction wpqal_pre_get_posts_action2( $query ) {\n  if ( !is_admin() && $query->is_main_query() ) {\n    if ($query->is_search) {\n      $query->set('post_type', array( 'post', 'product' ) );\n    }\n  }\n}\nadd_action( 'pre_get_posts', 'wpqal_pre_get_posts_action2', 20 );\n```", "```php\nadd_action( 'woocommerce_payment_complete', 'wpaql_payment_complete' );\nfunction wpaql_payment_complete( $order_id ){\n  // Custom code\n}\n```", "```php\nregister_activation_hook( __FILE__, 'wqwpf_activate' );\nfunction wqwpf_activate(){\n  global $wpdb,$wp_roles;\n  $table_product_files = $wpdb->prefix . 'wqwpf_product_files';\n$sql_product_files = \"CREATE TABLE IF NOT EXISTS $table_product_files (\n      id int(11) NOT NULL AUTO_INCREMENT,\n      user_id int(11) NOT NULL,\n      post_id int(11) NOT NULL,\n      file_path longtext NOT NULL,\n      updated_at datetime NOT NULL,\n      uploaded_file_name varchar(255) NOT NULL,\n      PRIMARY KEY (id)\n    );\";\n  require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );\n  dbDelta( $sql_product_files );\n}\n\nif ( ! defined( 'WQWPF_PLUGIN_DIR' ) ) {\n  define( 'WQWPF_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );\n}\nif ( ! defined( 'WQWPF_PLUGIN_URL' ) ) {\n  define( 'WQWPF_PLUGIN_URL', plugin_dir_url( __FILE__ ) );\n}\n\nadd_action( 'plugins_loaded', 'wqwpf_plugins_loaded_action' );\nfunction wqwpf_plugins_loaded_action() {\n  if( class_exists('WooCommerce')){\n    // All actions and filters need to be added here\n  }\n}\n```", "```php\nadd_filter( 'woocommerce_product_data_tabs', 'wqwpf_custom_product_tabs' );\nfunction wqwpf_custom_product_tabs( $tabs ) {\n  $tabs['wqwpf_files'] = array(\n        'label'     => __( 'Product Files', 'wqwpf' ),\n        'target'    => 'wqwpf_file_options',\n        'class'     => array( 'show_if_simple' ),\n    );\n  return $tabs;\n}\n```", "```php\nfunction wqwpf_product_files_panel_content() {\n  global $post;    ?>\n\n  <div id='wqwpf_file_options' class='panel woocommerce_options_panel'>\n    <div class='options_group'>\n      <div id=\"wqwpf-product-files-msg\"></div>\n      <p class=\"form-field _wqwpf_product_files_field show_if_simple\" style=\"display: block;\">\n       <label for=\"_wqwpf_product_files\"><?php _e('Product Files','wqwpf'); ?></label>\n       <input type=\"file\" name=\"wqwpf_product_files\" id=\"wqwpf_product_files\" />\n       <input type=\"hidden\" id=\"wqwpf_product_file_nonce\" name=\"wqwpf_product_file_nonce\" />\n       <input type=\"button\" name=\"wqwpf_product_file_upload\" id=\"wqwpf_product_file_upload\"  value=\"<?php echo __('Upload','wqwpf'); ?>\" />\n     </p>\n   </div>\n  </div>\n    <?php\n}\n```", "```php\nadd_action( 'admin_enqueue_scripts', 'wqwpf_admin_load_scripts',9 );\nfunction wqwpf_admin_load_scripts(){   \n  wp_register_script( 'wqwpf_admin_js', WQWPF_PLUGIN_URL . 'js/wqwpf-admin.js', array('jquery') );\n  wp_enqueue_script( 'wqwpf_admin_js' );\n  $custom_js_strings = array(       \n        'AdminAjax' => admin_url('admin-ajax.php'),\n        'Messages' => array('fileRequired' => __('File is required.','wqwpf') ),\n        'nonce' => wp_create_nonce('wqwpf-private-admin'),\n    );\n  wp_localize_script( 'wqwpf_admin_js', 'WQWPFAdmin', $custom_js_strings );\n}\n```", "```php\n      wp_register_script( 'upme_admin_js', WQWPF_PLUGIN_URL . 'js/\n      wqwpf-admin.js',   \n      array('jquery','wqwpf_admin_js') );   \n```", "```php\njQuery(document).ready( function( $ ) {\n  $('#wqwpf_product_file_upload').click(function(e){\n      e.preventDefault();\n      var file_form = $('#post');\n      var file = file_form.find('#wqwpf_product_files').val();\n      var post_id = $('#post_ID').val();\n      var msg_container = file_form.find('#wqwpf-product-files-msg\");\n      msg_container.removeClass('wqwpf-message-info-error').removeClass('wqwpf-message-info-success');\n\n      var err = 0;\n      var err_msg = '';\n      if(file == '' ){\n        err_msg += '' + WQWPFAdmin.Messages.fileRequired + '<br/>';\n        err++;\n      }\n      if(err != 0){\n        msg_container.html(err_msg).addClass('wqwpf-message-info-error').show();\n      }else{\n          // AJAX request for uploading files \n      }\n    });\n});\n```", "```php\nWQWPFAdmin.Messages.fileRequired\n```", "```php\nadd_action( 'wp_ajax_sample_action', 'wqwpf_sample_action' );\nadd_action( 'wp_ajax_nopriv_sample_action', ' wqwpf_sample_action ' );\nfunction wqwpf_sample_action(){\n  // Get data from client side request, process and return the output\n}\n```", "```php\nmsg_container.html('').hide();\nvar formObj = file_form;\nvar formURL = WQWPFAdmin.AdminAjax+'?action=wqwpf_save_product_files';\nvar formData = new FormData();\nvar file_data = $('#wqwpf_product_files').prop('files')[0];  \n\nformData.append('post_id', post_id);      \nformData.append('file_nonce', WQWPFAdmin.nonce);\nformData.append('file_data', file_data);\njQuery.ajax({\n  url: formURL,\n  type: 'POST',\n  data:  formData,\n  mimeType:'multipart/form-data',\n  contentType: false,\n  cache: false,\n  dataType : 'json',\n  processData:false,\n  success: function(data, textStatus, jqXHR){\n\n    if(data.status == 'success'){\n      msg_container.html(data.msg).removeClass('wqwpf-message-info-error').addClass('wqwpf-message-info-success').show();\n      $('#wqwpf-files-container').html(data.files);                                         file_form.find('#wqwpf_product_files').val('');\n    }else if(data.status == 'error'){\n      msg_container.html(data.msg).removeClass('wqwpf-message-info-success').addClass('wqwpf-message-info-error').show();\n    }\n  }\n});\n```", "```php\nadd_action( 'wp_ajax_wqwpf_save_product_files','wqwpf_save_product_files');\nfunction wqwpf_save_product_files(){\n  global $wpdb;\n  $file_nonce   = isset( $_POST['file_nonce'] ) ? ( $_POST['file_nonce'] ) : '';           \n  $post_id = isset( $_POST['post_id'] ) ? (int) ( $_POST['post_id'] ) : 0;   \n  $user_id    = get_current_user_id();  \n\n  if(check_ajax_referer( 'wqwpf-private-admin', 'file_nonce',false )){               $result_upload = wqwpf_process_file_upload();\n    if( isset( $result_upload['status'] ) && $result_upload['status'] == 'success' ){\n      $file_date = date(\"Y-m-d H:i:s\");   \n      $uploaded_file_name = $result_upload['base_name']; \n      $wqwpf_product_files_table = \"{$wpdb->prefix}wqwpf_product_files\";\n      $wpdb->insert(\n              $wqwpf_product_files_table,\n              array(\n                  'user_id'           => $user_id,\n                  'post_id'           => $post_id,\n                  'file_path'         => $result_upload['relative_file_path'],\n                  'updated_at'        => $file_date, \n'uploaded_file_name' => $uploaded_file_name,\n              ),\n              array( '%d','%d','%s', '%s','%s' ) );\n        $files_list = wqwpf_product_file_list( $post_id ); \n        $result = array( 'status' => 'success', 'msg' => $result_upload['msg'] , 'files' => $files_list );\n    }else{\n      $result = array( 'status' => 'error', 'msg' => $result_upload['msg'] );\n    }\n  }else{\n    $result = array( 'status' => 'error', 'msg' => __('Invalid file upload request.','wqwpf') );\n  }\n  echo json_encode($result);exit;\n}\n```", "```php\nadd_filter( 'woocommerce_product_tabs', 'wqwpf_product_files_tab' );\nfunction wqwpf_product_files_tab( $tabs ) {\n  $tabs['wqwpf_tab'] = array(\n    'title' => __( 'Product Files', 'wqwpf' ),\n    'priority' => 50,\n    'callback' => 'wqwpf_product_files_tab_content'\n );\n return $tabs;\n}\n\nfunction wqwpf_product_files_tab_content() {\n global $post;\n echo wqwpf_product_file_list( $post->ID );\n}\n```", "```php\n$login_redirect = apply_filters('wpquick_login_redirect_url', $default_url);\n```", "```php\nadd_filter('wpquick_login_redirect_url','wpquick_content_restriction_redirect_url',10);\nfunction wpquick_content_restriction_redirect_url($url){\n  $url = \"URL of private page\";\n  return $url;\n}\n```", "```php\nadd_filter('wpquick_login_redirect_url','wpquick_user_role_redirect_url',20);\nfunction wpquick_user_role_redirect_url($url){\n  // Get the role of the user being logged in\n  if($role == 'subscriber'){\n   $url = \"Subscriber redirect URL\";\n  }\n  return $url;\n}\n```", "```php\nadd_filter('wpquick_login_redirect_url','wpquick_content_restriction_redirect_url',30);\n```", "```php\nadd_action( 'woocommerce_order_status_completed',  'wpqpi_payment_complete' );\npublic function wpqpi_payment_complete( $order_id ) {\n    // Execute code after the order is successfully completed\n}\n```", "```php\nadd_filter( 'mycred_setup_hooks', 'wpqpi_woocommerce_hooks', 10, 2 );\nfunction wpqpi_woocommerce_hooks( $installed, $point_type ) {\n  $installed['wpqpi_woo_purchase'] = array('title' => __( 'Points for WooCommerce Purchases', 'wpqpi' ), 'description'  => __( 'User will get points for completing product purchases.', 'wpqpi' ), 'callback' => array( 'WPQPI_WooCommerce_Hooks' ) );\n  return $installed;\n}\n```", "```php\nadd_action( 'mycred_load_hooks', 'wpqpi_load_custom_taxonomy_hook', 10 );\nfunction wpqpi_load_custom_taxonomy_hook() {\n  class WPQPI_WooCommerce_Hooks extends myCRED_Hook {\n\n    public function __construct( $hook_prefs, $type ) {\n      parent::__construct( array(   'id'       => 'wpqpi_woo_purchase',       'defaults' => array( 'creds'   => 1,  'log'     => '%plural% for purchasing a product' ) ), $hook_prefs, $type );\n    }\n\n  }\n}\n```", "```php\npublic function run() {\n    add_action( 'woocommerce_order_status_completed', array( $this, 'wpqpi_payment_complete') );\n}\n```", "```php\npublic function wpqpi_payment_complete( $order_id ) {\n    $order = wc_get_order( $order_id );\n    $total = $order->get_total();\n    $credits = (int) $total / 10;\n    $user = $order->get_user();\n    $user_id = $user->ID;\n    $this->core->add_creds( 'wpqpi_woo_purchasing', $user_id, $credits,              $this->prefs['log'], 0, '', $m  );\n}\n```", "```php\npublic function wpqpi_payment_complete( $order_id ) {\n    // Existing code for adding MyCred points\n    $balance = mycred_get_users_balance( $user_id );\n    if($balance > 100){\n      groups_join_group(1, $user_id);\n    }\n}\n```"]