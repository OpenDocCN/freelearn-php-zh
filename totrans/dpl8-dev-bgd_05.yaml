- en: Chapter 5. Theming in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the last chapter, we learned about the Field Types API and about developing
    a custom field module. Now let''s explore the frontend by creating a custom theme
    and learning about the new features of Drupal 8''s theming layer.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What a theme is and how to create a sub-theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new about themes in Drupal 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the terms mobile first and responsive mean and why D8 base themes are built
    this way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install Drush
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add assets to your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to the Twig templating language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the benefits of contributed modules and when to make use of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a theme?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **theme** adjusts, or overrides, the default appearance of your Drupal site.
    It does this by giving us the ability to change the markup (with templating),
    functionality (with JavaScript), and appearance (with CSS). Theming is the final
    layer of development before the work is viewed by the user. The icing on the cake!
  prefs: []
  type: TYPE_NORMAL
- en: By default, Drupal 8 comes shipped with a number of themes in core. Let's have
    a look at them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In PhpStorm, go to the root directory of your project and then navigate to
    `core` | `themes`. In this directory, you''ll find five themes: Bartik, Classy,
    Seven, Stable, and Stark. What are these and why are they here?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss these core themes we have available by default, as they each
    have a distinct use:'
  prefs: []
  type: TYPE_NORMAL
- en: Bartik has been the default theme for both Drupal 7 and Drupal 8\. It's well
    documented, well maintained, and contains some useful theme functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seven has been the default administration theme for Drupal 7 and 8\. The styling
    it contains applies to the admin interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stark comes with no CSS whatsoever, and is designed to demonstrate the default
    HTML and CSS that's coming from Drupal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable exists as a fallback base theme if one hasn't been defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classy is a base theme designed to provide Drupal's standard classes, which
    you will be used to if you've worked with Drupal 7\. Bartik is a sub-theme of
    Classy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The description of Classy mentioned that it is a base theme. What does this
    mean? Base themes exist to give you a faster starting point for customizing your
    site's looks by doing some of the groundwork for you. They provide a standards-compliant
    starting point, some useful documentation, and really good reference for how to
    do certain theme tasks, such as creating new template files or adding new CSS.
    It is possible to chain multiple themes together if needed, to inherit features.
  prefs: []
  type: TYPE_NORMAL
- en: While some of these themes have existed in multiple versions of Drupal, there
    are distinct changes in the Drupal 8 theme system. These include semantic HTML5
    markup, the Twig templating system (which we will look at later in this chapter),
    more JavaScript libraries included by default, and CSS classes being moved from
    preprocess into templating. Visit [https://www.drupal.org/node/2356951](https://www.drupal.org/node/2356951)
    for a more complete list.
  prefs: []
  type: TYPE_NORMAL
- en: There are many, many more themes you can download and make use of as a base
    theme too. Visit [https://www.drupal.org/project/project_theme](https://www.drupal.org/project/project_theme)
    to find a listing.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that the themes in core are not there to be adjusted.
    By keeping them untouched, we can update them (if needed) in future without losing
    any work. So if we can't adjust them, how do we customize the look of our site?
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a sub-theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we need to do is set up a theme to inherit the benefits we get from our
    chosen theme, that we can then adjust to suit our needs. This is called a **sub-theme**.
    Let's get started, using Bartik as the parent theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in PhpStorm, in the root directory of your project, navigate to the `themes`
    directory. Right now this directory is empty apart from a README file. We''ll
    first create a directory to place our sub-theme in. It is good practice to place
    your own themes in a folder named `custom`, and any contributed themes in a sub
    folder named `contrib` (more on contributed themes later). Inside the newly created
    `custom` folder, we''ll begin creating our sub-theme. We need to follow a few
    naming rules: it must start with a letter and only use lowercase alphanumerics
    and underscores. We''re going to call ours recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory named `recipes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside that, we'll define our theme. If you've worked with Drupal 7 previously,
    you may be used to working with the `.info` file. In Drupal 8, we now use the
    `.info.yml` files for theme definition. Among other things, the `.info.yml` file
    can define meta data, style sheets, and block regions. This is the only required
    file in the theme. Create the file, naming it `recipes.info.yml`, and then open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following into your `recipes.info.yml` file and save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the file titled `logo.svg` from `/core/themes/bartik` into `/themes/recipes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now back on our site, click on the **Appearance** button in the shortcut bar.
    This will take you to `/admin/appearance`. This is where we can enable or disable
    the themes. Scroll down to the **Uninstalled themes** section and find our Recipes
    theme. Click on the **Install and set as default** button:![Time for action –
    creating a sub-theme](img/4659_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the page has refreshed and notified you that Recipes is our default theme,
    click on the **Back to site** button in the top-left of your admin menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a sub-theme that uses Bartik as its parent theme. But what's inside
    the Bartik theme? Next, we'll have a look at the inner workings of Bartik to understand
    how a theme is put together.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Bartik
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have a look at what sits inside the Bartik directory and gain a bit
    of knowledge about what each file does (follow along by navigating to `core/themes/bartik`).
    The directory consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bartik.info.yml`: Like our `recipes.info.ml` file, this defines some meta
    data required for the theme, such as its name, its parent theme, and a description.
    This file also describes some libraries, stylesheets, and theme regions. You can
    find information on the included regions and more on theme customization at [https://www.drupal.org/documentation/themes/bartik](https://www.drupal.org/documentation/themes/bartik).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bartik.libraries.yml`: This file defines the CSS libraries that can be loaded
    into the theme (it would also define the JavaScript, if Bartik had any by default).
    See the *Adding assets to your theme* section for more information and a practical
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bartik.breakpoints.yml`: This includes the configuration for the Breakpoints
    module ([https://www.drupal.org/project/breakpoints](https://www.drupal.org/project/breakpoints)).
    This allows the theme to manage the breakpoints so that the other modules can
    make use of responsive breakpoints functionality. For example, Picture ([https://www.drupal.org/project/picture](https://www.drupal.org/project/picture))
    can deliver resized images depending on the size of the browser. See the *Mobile
    First, Responsive Themes* section for more information about the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bartik.theme`: This contains some useful functions that support theming. These
    include adding classes to the markup detailing sidebar or region use, adding clearfix
    classes to some system elements, and classes to form elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logo.svg`: This is the stock logo that will show by default in the header.
    Logos can also be uploaded in `/appearance/settings`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screenshot.png`: This displays on the `/admin/appearance` page and can be
    useful for quick theme recognition if toggling between themes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `color` directory: This houses the preview functionality for Bartik''s
    integration with the `Color` module. This module allows you to change the color
    scheme of the theme without making changes in the CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `css` directory: This houses multiple modular CSS files that contain styling
    for all the components of the theme, such as buttons, forms, and the header. These
    are then either combined into libraries in `bartik.libraries.yml` or imported
    directly into `batik.info.yml`, depending on their purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `config` directory: This houses a schema for the Bartik configuration files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `images` directory: This contains images used by the theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `templates` directory: This houses the templates used by the theme to structure
    the output of different areas of the site. The templates provide the HTML structure
    and some conditional logic. Templates target specific areas of the site which
    can range from fairly small independent sections like `status-messages.html.twig`,
    to elements that have wider effects, such as `page.html.twig`, which provides
    structure for all pages. You''ll learn much more about templates and the language
    they''re written in (Twig) later in the chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are now in a position to start making some changes to the default look that
    Bartik provides, so in the next section we'll add some custom CSS to test we're
    in business. Before getting to that, let's discuss responsive themes and mobile
    first principles.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile first, responsive themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 themes are both mobile first and responsive out of the box. What do
    these terms mean and why are the themes set up this way?
  prefs: []
  type: TYPE_NORMAL
- en: 'In April of 2000, John Allsop wrote an article on [http://alistapart.com/](http://alistapart.com/)
    called *A Dao of Web Design*. This seminal article described an issue of emerging
    web design—designers and developers wanted to control their users'' experience
    with as much rigidity as was possible in print. They wanted their sites to look
    as similar as possible in terms of functionality and layout, no matter the users''
    setup. The article advocated a fresh approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Make pages which are adaptable. Make pages which are accessible, regardless
    of the browser, platform or screen that your reader chooses or must use to access
    your pages."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*John Allsop* |'
  prefs: []
  type: TYPE_TB
- en: This extends further today, as we must also consider different screen resolutions
    and Internet connection speeds, particularly for mobile devices. A site must adjust
    to the various needs of its users, and preferably, deliver an excellent experience,
    no matter the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two approaches that attempted to solve the layout/screen size problem began
    to gain popularity: adaptive design and responsive design. Adaptive design was
    based on having series of static layouts that were delivered to the user after
    screen size was detected. Responsive design was based on fluidity of layout, responsively
    and flexibly fitting the device.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a user resized their browser, an adaptive website would jump between the
    static layouts, while a responsive website would fluidly scale. Both approaches
    had benefits: adaptive design affords a level of control over the layout that
    sometimes can''t be achieved with responsive design, but responsive design works
    more seamlessly across different devices, and because of this, has now become
    more popular.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Historically, designers and developers have focused on the desktop experience
    first, sometimes using layouts and functionality that didn''t work well on mobile
    devices. This still happens occasionally, with designers approaching mobile design
    as a secondary issue. There''s a very good reason to stamp this practice out:
    in 2015-2016, there are approximately 4.5 billion mobile phone users worldwide.
    A substantial portion of these will have Internet capability, and when we consider
    all the tablets, games consoles, watches, in-car devices, and even kitchen appliances
    with screens capable of browsing the Web, focusing on desktop experience alone
    is short sighted.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To combat the issue of reduced functionality of some devices, two approaches
    have become popular: graceful degradation and progressive enhancement. The result
    is the same; older or less capable devices deliver a lower level of experience,
    but importantly, a working site. However, the way this is achieved is applied
    from opposing starting points. Graceful degradation starts from a point of providing
    a high level of experience on modern devices, with the functionality degrading
    gracefully on older devices that aren''t able to provide the support. Progressive
    enhancement takes the approach of creating the website at its lower level of user
    experience first, then progressively enhancing functionality if the devices support
    it. Both approaches have their merits, and excellent examples of both practices
    can be found at [https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement](https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement).'
  prefs: []
  type: TYPE_NORMAL
- en: The important point here is the ability to provide a working website, regardless
    of device, and we'll discuss how Drupal 8 can help you achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile first is an approach that means that content is laid out intelligently
    on smaller devices. Content on a small screen tends to require a single column
    layout, and therefore a linear order, with the most important content at the top
    of the page. This isn't always the case, but it's a mindset that helps web professionals
    consider the best experience for smaller devices first, which tends to also lead
    to an improved large screen experience.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8 can help you create a responsive, mobile first site with progressive
    enhancement or graceful degradation. First off, have a look at the homepage in
    your browser—try resizing the page, and look at how the elements adjust. At mobile,
    our admin menu shows our links with icons rather than text, to ensure the layout
    fits. Our site's main menu is sat within a clickable (or tappable) dropdown. The
    content is single column, with the sidebars sat underneath the main content area.
    As the browser expands, the admin menu includes text, the main menu drops out
    of the dropdown, and the sidebars are positioned on either side of the main content
    area. This is a good example of responsive, mobile first behavior. This is being
    achieved with CSS. As an example, look at the styling in **core** | **themes**
    | **bartik** | **css** | **components** | **header.css**. You can see the default
    styling being set at the top of the file, then further into the file, media queries
    appear, which provide the necessary changes for the layout to continue working
    well at larger sizes. If you're not familiar with media queries, you can find
    good documentation at [https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries).
  prefs: []
  type: TYPE_NORMAL
- en: By providing good examples of responsive, mobile first styling in action, Drupal
    8 has given you a helping hand beginning your own work.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8 now comes with more JS libraries in core, which we'll discuss later.
    For now, just be aware that Modernizr is available to you, which is a great tool
    for detecting browser capabilities and providing methods for you to adjust your
    functionality and styling accordingly. See [https://modernizr.com/](https://modernizr.com/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal core also now ships with a module called **Breakpoint**. This allows
    you, on a theme by theme basis, to define the browser widths at which you want
    to be able to make functional changes. These settings are independent of any CSS
    media queries you might use. The Breakpoint settings help configure other modules,
    such as Responsive Images, another module now in core. The combination of these
    two modules allows you to switch images on your site. You can provide lower resolution
    images for small screen devices, then swap them for higher resolution for bigger
    screens. This is great for site performance, particularly important to bear in
    mind for mobile Internet users. The settings for breakpoints sit in the root of
    the theme. Bartik's can be found in `bartik.breakpoints.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: We've now learned what the terms *mobile first* and *responsive* mean, and how
    Drupal 8 gives you the tools you need to begin following these practices.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start using our theme, we're going to install a tool called **Drush**,
    which is a command line tool for Drupal. It'll help us move quickly through the
    next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing Drush
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following section requires a command line with Unix or Unix-like functionality.
    If you are a Mac or Linux user, you'll have Bash preinstalled, but if you're a
    Windows user, you'll need to install Cygwin, which can be downloaded from [https://www.cygwin.com](https://www.cygwin.com).
    There are a number of tutorials available online to help you install and use it.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need some knowledge of editing and saving documents using terminal
    editors, such as `nano` or `vi`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're new to command line, be aware that the dollar sign signals a new line
    of code (that is, don't type the dollar sign), and that each line needs to end
    with the return key being pressed.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be installing Drush using Composer. If you have previous experience of
    Drupal 7 and already have Drush installed, upgrade it using your preferred method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we''ll install Composer globally. In your terminal, run the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open your `.bash_profile` (or `.zshrc` if using ZSH) using a terminal
    editor and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Re-source the file (or reload your terminal):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With Composer installed, we can quickly and easily install Drush:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Composer makes it really easy to update Drush, or roll it back to a particular
    version if required. It's well documented online.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drush has a lot of useful features. Visit [http://www.drush.org/en/master/](http://www.drush.org/en/master/)
    for documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Adding assets to your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Drupal 7, CSS and JS assets were added to themes via the `.info` file. In
    Drupal 8, asset management has been split out and we have the concept of an asset
    library. These libraries contain the CSS and JS we would like to attach. They
    can be applied globally or to a specific page. Let''s start by creating a global-styling
    asset library:'
  prefs: []
  type: TYPE_NORMAL
- en: In your theme's directory, create a file called `recipes.libraries.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following into your file and save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Indentation has meaning in `.yml` files, so ensure that the indentation in the
    preceding code matches your file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now need to attach our library to the site. This can be done in two ways.
    If we want to attach a library to a specific page, we can do that in our templates.
    We''ll discuss this later in the chapter. But when we want to attach a library
    to all the pages on our site that use our theme, we can add it to our info file.
    In `recipes.info.yml`, copy and save the following at the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your info file should now look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our library in place and being applied globally via the info file, let's
    create some CSS and test it out. In your recipes directory, create a new directory
    called `css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `css` directory, create a file called `style.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `style.css`, copy and save the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to clear the cache. Drush makes this easy. Open your terminal and
    navigate to the site''s root directory. We can type the following command to rebuild
    all our caches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will do the equivalent of going to `/admin/config/development/performance`
    and clicking on the **''Clear all caches**'' button, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Adding assets to your theme](img/4659_05_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As the final step, let's head back to the homepage and see whether our styling
    has taken effect:![Time for action – Adding assets to your theme](img/4659_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a CSS file by creating a new library and then made a styling adjustment
    to check that it worked.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, our titles are bigger, so that tells us that our recipes theme is working.
    Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's make adjusting our assets as easy as possible while we're developing,
    by disabling one of Drupal's default performance features.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal uses a site performance tool called aggregation. A site's performance
    can be affected by the addition of multiple CSS or JS files, each of which require
    an HTTP request to the server. What Drupal does to avoid this is condense multiple
    files into a single one, performing uglification and minification too. This means
    fewer HTTP requests are made, and the files that are requested are as small as
    possible. However, the aggregated files are not re-created every time you make
    a change to your CSS or JavaScript, as they are cached. Great for performance,
    but not so useful when we're developing. We could clear the cache each time we
    make a change, but a quicker way is to disable aggregation for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to `/admin/config/development/performance` and uncheck the **Aggregate
    CSS files** and **Aggregate JavaScript files** options. Then, click on the **Save
    configuration** button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/4659_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With aggregation turned off, we can make changes and they will be immediately
    visible when we refresh our browser. Do remember to have aggregation enabled for
    production sites though!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – calling assets on specific pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive a little deeper with asset library dependencies. We''re going to
    add a little piece of JavaScript with a dependency on jQuery; when a user clicks
    on the recipe description field, an alert box will be triggered to tell them it''s
    delicious. We''ll set it so that it only loads on the full view mode of our recipes
    (that is, not on our homepage listing). This will also be our first introduction
    to Twig. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Back in PhpStorm, in our `recipes` theme, create a directory called `js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `js` directory, create a file called `delicious.js.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While the contents of this JS file are just to demo the concept, we''ll create
    it and document it using good practices, so that you can use this as a basis for
    your own work. We''ll start by defining the file, setting a description, and then
    creating our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the function, we''ll tell jQuery to load this function on the page load
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll now start adding the contents of the function. We''ll create the object
    that will be returned when the function is called inside our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following our ''`self''` object, we''ll create our jQuery selector, picking
    up the content we want to bind a `click` function to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll bind the content click event and create our alerting function,
    which we''ll make translatable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll set a property of our `self` object to be an anonymous function
    that calls the `bindRecipeContentEvent` function at page load. We''ll then return
    the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The contents of `delicious.js` should now be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With `delicious.js` in place, we now need to add it as an asset library. In
    PhpStorm, open `recipes.libraries.yml`. Underneath the global-styling asset library,
    we''ll create another, called `delicious`. This one will include the JS we just
    created, and will also specify our dependency on jQuery, a version of which sits
    in core for us to use. (In Drupal 8, core contains a lot of libraries for dependencies,
    including jQuery UI, Modernizr, and Backbone to name a few. See `core` / `core.libraries.yml`
    for the complete list):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The last process is to add the asset library to the site. This time, we don't
    want it to apply globally, as we only want `delicious.js` and jQuery to load on
    the specific pages they're needed on. For that, we'll create a very specific Twig
    template. We're going to gloss over the details for now, as they'll be covered
    later in the chapter. In the `recipes` directory, create a new directory called
    `templates` and then inside that create one called `field`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `recipes` | `templates` | `field`, create a file named `field--node--field-description--recipe.html.twig.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside that file, paste the following code. As mentioned, we''ll gloss over
    Twig for now, but note that we''re applying a class of `delicious-content` for
    our JS to apply to, and we''re attaching the asset library using the `attach_library`
    function. This means that the asset library will only ever load on pages that
    include the specific recipe description field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear our caches with Drush:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ok, let''s test that it''s working! In your browser on the homepage, click
    on the title of one of the items in the list of recipes to be taken through to
    the full node. When you click on any of the text in the description section, our
    alert should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – calling assets on specific pages](img/4659_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome! Now, let''s test to see if `delicious.js` is loading only on our desired
    pages. If we view the source of the current page and do a search for it, we''ll
    obviously find it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – calling assets on specific pages](img/4659_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Do the same search on the homepage and no results will be found. Exactly as
    we had hoped.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a simple piece of JS, added it as an asset library with a jQuery
    dependency, and used a Twig template to ensure that the asset library is only
    loaded on pages with the correct field.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to templating and Twig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We skipped over templates and Twig in the previous section, so let's discuss
    them in more depth.
  prefs: []
  type: TYPE_NORMAL
- en: Templates will become the bread and butter of your experience of theming Drupal.
    They are the way we logically filter our data and create our required HTML structure.
    A standard page on a Drupal site is built from a set of nested templates. At each
    level of the nested structure, different variables are available to you that allow
    you to render the content you desire. Any of the templates mentioned next can
    be copied into your theme, either from Drupal core or your parent theme. The base
    versions of all the templates live in core, but your parent theme may already
    have templates you can copy that have a structure that gets you most of the way
    to your goal, or perhaps is already using a specifically named template you want
    to override.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of some of the templates being used on our homepage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to templating and Twig](img/4659_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick note for those moving from Drupal 7 to Drupal 8—you may be wondering
    about theme functions—they are no more. All themable output is run through templates.
  prefs: []
  type: TYPE_NORMAL
- en: The template nesting hierarchy starts with a template defining the basic structure
    of the HTML page, including the `<head>` and `<body>` tags. The base template
    that does this is `html.html.twig`, and is located in `core/modules/system/templates/html.html.twig`.
    It's well worth having a read of the comments provided in these base files for
    a description of what the template is for, as well as a list of the available
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: After that, come the page templates. The base template for these is `page.html.twig`,
    located in `core/modules/system/templates/page.html.twig`. This is where elements
    such as `<header>`, `<main>`, and `<footer>` are defined.
  prefs: []
  type: TYPE_NORMAL
- en: It's very common to want to create specific instances of the page template;
    for example, a custom front page with a different structure to the default pages
    on the site. We do that by using theme hook suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Theme hook suggestions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Theme hook suggestions are alternate templates you can create to override a
    default template file. They allow you to implement targeted overrides in your
    theme by using a specific naming convention.
  prefs: []
  type: TYPE_NORMAL
- en: When rendering an element, Drupal looks for template specificity—it uses the
    most specific template it can find. For example, when it's rendering your pages,
    if you create a template in your theme called `page-front.html.twig`, it uses
    that to render your front page. If no such file is found, it looks for the next
    most specific template, and continues to do that until it reaches the default
    `page.html.twig`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll move on to Twig debugging, where you will learn how
    to find out which templates your site is currently using, as well as discover
    some template naming suggestions for overriding them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For further information and examples, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For now, let's continue to look at templates and their hierarchy. After the
    `html.html.twig` template has defined the highest level `<html>`, `<head>`, and
    `<body>` tags, and `page.html.twig` has defined the `<header>`, `<main>`, and
    `<footer>` areas, the next level in our nested template tree are region templates.
    These are able to render the regions of the site (examples of regions in the Bartik
    theme are `sidebar_first`, `sidebar_second`, and `footer_first`, which are defined
    in its `.info.yml` file). The base region template, `region.html.twig` is located
    in `core/modules/system/templates/region.html.twig`.
  prefs: []
  type: TYPE_NORMAL
- en: Inside our regions, any number of nodes, blocks, or fields can be rendered.
    There's a lot of Drupal terminology to be learned, and if this is all sounding
    new to you, the best place to start is to have a thorough read of the template
    section of the theming guide located at [https://www.drupal.org/node/2186401](https://www.drupal.org/node/2186401).
    There you'll find more information about template types, their base locations,
    and how to override them.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed when we first looked at the core themes that there was
    one other directory there named `engines`. This houses the Twig templating engine,
    which replaces PHPTemplate from Drupal 7 as default (it is still possible, though
    not recommended, to use PHPTemplate). If you're new to Drupal, a templating engine,
    sometimes also called a theme engine, is the piece of software that combines our
    data with our theme's templates, and outputs HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'What was wrong with PHPTemplate? A number of things:'
  prefs: []
  type: TYPE_NORMAL
- en: Templates had too much power. For example, if a themer forgot to sanitize their
    user-submitted text, it left the site open to security issues (cross-site scripting).
    It was even possible to drop a site's database from a templating file! Feel like
    casually dropping the `users` table? `<?php db_query('DROP TABLE {users}'); ?>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was complicated. Lots of templates and even more `theme()` functions. It
    had different syntaxes for rendering different data structures. All in all, a
    steep learning curve, which put a lot of developers off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markup wasn't very pretty or human readable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was Drupal-specific.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So why Twig?
  prefs: []
  type: TYPE_NORMAL
- en: It's more secure. PHP functions, such as `db_query`, simply aren't available,
    and auto-escaping is enabled by default, so cross-site scripting is no longer
    an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The syntax is very easy to read and use. `<?php print render($content); ?> becomes
    {{ content }}`. More syntax examples to follow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates are extendable, thanks to its 'include' feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twig isn't Drupal-specific, so we learn transferable skills.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's well documented. See [http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving to Twig is probably the most radical frontend change in Drupal 8\. Regardless
    of whether you're new to Drupal or you're making the move from Drupal 7, there
    will be some new material to learn. But as you'll see, the syntax is clean and
    human readable, and the effort you need to put into learning it is quickly recovered
    as you fly through writing your templates! Let's have a look at some of its features
    and syntax before we put it to use. If you're new to Drupal, the following section
    may be initially confusing, but should serve as a good reference point when you
    begin to work in Twig.
  prefs: []
  type: TYPE_NORMAL
- en: File and function names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHPTemplate filename syntax: `block--search-form-block.tpl.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twig filename syntax: `block--search-form-block.html.twig`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PHPTemplate function: `theme_node_links()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twig file: `node-links.html.twig`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brackets syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Twig has three bracket types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{# #}`: This is used for comments. Text inside these brackets never gets output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ }}`: This is used for rendering. We''ll see some examples in subsequent
    sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{% %}`: This is used for control structures such as `for` loops or conditionals.
    We''ll see some examples in subsequent sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rendering a variable is done by typing the variable name in the printing bracket
    syntax: `{{ car }}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use an example of a multidimensional `car` array in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To print an attribute of a variable, the powerful "dot" is used. `{{ car.maxSpeed
    }}` returns `200`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This dot syntax checks a number of possible scenarios for `maxSpeed`. The following
    is its process:'
  prefs: []
  type: TYPE_NORMAL
- en: Check if `car` is an array and `maxSpeed` a valid element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, and if `foo` is an object, check that `maxSpeed` is a valid property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, and if `foo` is an object, check that `maxSpeed` is a valid method (even
    if `maxSpeed` is the constructor—use `__construct()` instead)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, and if `foo` is an object, check that `getMaxSpeed` is a valid method;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, and if `foo` is an object, check that `isMaxSpeed` is a valid method;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, return a null value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s multidimensional: `{{ car.optionalUpgrades.engine.upgrade }}` returns
    `turbo-charged engine`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, hashkeys in render arrays are not able to be targeted
    with the dot syntax. There is an active issue for this: [https://www.drupal.org/node/2160611](https://www.drupal.org/node/2160611)
    but for now, the syntax `[''#haskey'']` is needed, that is `{{ item.property[''#markup'']
    }}.`'
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Twig, we can push a variable through a filter before it''s rendered: `{{
    car.gearbox |capitalize }}` returns `Six-speed`. As well as Twig''s default filters,
    Drupal has included extras, such as translate: `{{ item |t }}`.'
  prefs: []
  type: TYPE_NORMAL
- en: See a full list of the default Twig filters at [http://twig.sensiolabs.org/doc/filters/index.html](http://twig.sensiolabs.org/doc/filters/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the list of Drupal's extra filters in `core/lib/Drupal/Core/Template/TwigExtension.php`
    inside `getFilters()`.
  prefs: []
  type: TYPE_NORMAL
- en: Control structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the different control structures:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `if` statements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `for` loops:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Variable creation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Array creation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Debugging Twig
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twig, by default, offers a great debugging tool. With Drupal 8, it's extended
    even further. We'll enable it and begin using it in the next section, but for
    now, let's go through the abilities it gives us.
  prefs: []
  type: TYPE_NORMAL
- en: HTML comments in markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Drupal 8 extends the default Twig debug tool here, giving us information on
    template suggestions, as well as showing which template the markup is currently
    coming from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML comments in markup](img/4659_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see the comments for the recipe title field
    on our homepage. We can see that currently the template it's using is coming from
    the Classy theme. We also have the template name suggestions if we need to create
    something more or less specific to suit our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To print all the available variables in one of our template files, we can use
    the `dump()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can print all the available variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of global variables in Twig templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_context`: This contains all the variables that are passed to the template
    file, such as variables prepared by preprocess, coming from `theme()`, or set
    from within the template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ dump() }}`: This is equivalent to `{{ dump(_context) }}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{ dump(\_context|keys) }}`: To print available keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_charset`: This references the (current) charset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But beware, `{{ dump() }}` may result in a white screen of death. The process
    recursively moves through and prints a potentially very large list of variables,
    which can result in a loss of memory. If that''s the case, you can do something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To print the content of a specific variable, like `$car`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To print out the content of the `$car` and `$truck` variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Kint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`{{ dump() }}` is an excellent tool, but if the element it''s applied to contains
    a lot of information, the output can be difficult to interpret. The Devel module,
    which was used to create the dummy content for the site, contains a submodule
    called Kint. This module can be enabled with Drush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: With it enabled, all the `{{ dump() }}` commands can be replaced with `{{ kint()
    }}`, which gives a more user-friendly output.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – Twig in practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ok, let''s put some of what you''ve learned in the previous section into practice.
    It would be nice to separate out the preparation stage in our recipe from the
    cooking stage. We''ll do this by splitting the two types of fields into separate
    wrapping `div` tags, and then apply some styling to help us differentiate them:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll find out which template is currently in use by enabling Twig debugging.
    In PHPStorm, navigate to **sites** / **default**. If you have a file named `services.yml`,
    open it. If you don't, make a copy of `default.services.yml`, rename it to `services.yml`,
    and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the section called `twig.config`. In this section, you will find an
    option that currently says debug: **false**. Change that value to **true** and
    save. Like aggregation for CSS and JS, this will improve your development conditions,
    but ensure it''s turned off again before the site is in production.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If in step 3 you encountered a permissions error, you will need to reset permissions
    in the **sites** / **default** directory. In terminal, navigate to the sites directory
    and then enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also enable Kint to help us with some debugging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With debugging enabled, let''s have a look at the HTML output mentioned earlier.
    In your browser, click through to a full recipe page (I''m going to use the Awesome
    Sauce recipe, and I''ve added an image into the image field), and then inspect
    the HTML with your inspector of choice. (Right-click or *cmd* + click on some
    of the content, then, depending on your browser and tools, you''ll find an **Inspect**
    option.) Note: if you''re using Firebug, ensure comments are turned on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Twig in practice](img/4659_05_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'There''s a lot of information available to you at this point, but you''ll soon
    find that you can make your way through it with relative ease. Find the `<article>`
    element with a class of `node--type-recipe`. This is the structural point at which
    all the elements are wrapped in one containing div, so this is what we need to
    split:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Twig in practice](img/4659_05_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The template information regarding the element sits above it. As we can see
    from the green comments, the template being used is currently in `core/themes/bartik/templates/node.html.twig`.
    We can also see a number of file name suggestions, which we can choose from for
    extra specificity. We'll make use of the `node--recipe--full.html.twig` suggestion,
    which as the name implies, only applies to the full view mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In PHPStorm, inside your theme's template directory, create a directory called
    content. Note that the directory names do not affect Drupal's ability to find
    a template. They are there to assist the developer in keeping work organized.
    Inside the content directory, create a file called `node--recipe--full.html.twig`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now copy the contents of `core/themes/bartik/templates/node.html.twig`
    over into our newly created `node--recipe--full.html.twig`, so that we can begin
    overriding it. After that, your file''s content should look as follows (the length
    comment is excluded):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before doing anything to the file, see if you can spot some of what we''ve
    been discussing: array creation, conditional logic, and variable rendering.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'What we''re interested in is the `{{ content }}` variable, as we''ll need to
    drill into this to find the different fields we want to split into our two separate
    wrapper `div` tags. We''ll use Kint to debug its contents. Adjust `{{ content
    }}` to `{{ kint(content) }}`, and then clear your cache with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you reload your page, the content will have disappeared (because it's no
    longer being rendered), and in its place you will have the debugging information.
    Open the array and then close down each inner array item (which will have opened
    by default), so that you're left with the following:![Time for action – Twig in
    practice](img/4659_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the content array contains eight items, seven of which have
    keys with names of the different fields on our page. We'll be using these to print
    our custom output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are some fields that are neither preparation nor cooking-based, and these
    ones we'd like to stay rendered in the normal div. Fields such as the description
    and the image. We want to exclude everything else though, so we can print them
    separately. We're going to make use of a Drupal Twig filter called `without`,
    which renders an element without specific inner items. Back in the template, replace
    `{{ kint(content) }}` with `{{ content|without('field_cooktime', 'field_preptime',
    'field_ingredients', 'field_recipeinstructions') }}`. Our page will now only include
    the items we still want rendered in the normal way:![Time for action – Twig in
    practice](img/4659_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we''ll render the fields in separate `div` tags. Directly beneath that
    last Twig statement, paste the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we''ll go back to the theme''s `style.css` file in the `css` directory
    and add some styling. Paste and save the following underneath the existing styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s have a look at the page again:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – Twig in practice](img/4659_05_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used Twig debugging with Kint to determine the template we needed, and what
    variables were available to us. We used a Drupal-specific Twig filter to render
    content minus some items, and rendered those separately in the customized structure
    we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: We got the results we wanted with this method, but it required us to break arrays
    apart. For larger content types with more fields, this would become cumbersome.
    There's another method, requiring the use of a contributed module. Let's take
    a look at that.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – understanding the benefits of contributed modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to achieve the same result we got in the previous section, but this
    time, by using a contributed module called `field_group`:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete `node--recipe--full.html.twig` inside **recipes** / **templates** / **content**
    (or move the file outside of the project if you'd prefer to keep a copy of the
    work) and clear your cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In command line, navigate to anywhere inside your Drupal project and type the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will enable the `field_group` module if you have it downloaded.
    If not, it will go ahead and download the latest stable release for you and enable
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now back in the browser, navigate to `/admin/structure/types/manage/recipe/display`
    where the display settings for the recipe content type exist. You will see that
    we have a new piece of functionality at the bottom of the page:![Time for action
    – understanding the benefits of contributed modules](img/4659_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `preparation` into both the text inputs, select **Html element** from the
    dropdown, and hit **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page reloads, you'll see the preparation group is now placed above
    the **Disabled** label. On the right-hand side of the preparation group item,
    there's a cog. Click on that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The settings for the group will now open. Leave everything as default, apart
    from the **Extra CSS classes** text input, where you can type `preparation recipe-phase`,
    and then click on the **Update** button.![Time for action – understanding the
    benefits of contributed modules](img/4659_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replicate these steps again, this time swapping `preparation` with `cooking`.
    When finished, you should have the two groups enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now for some drag-and-dropping. Drag both the group fields up and place them
    underneath the **recipeYield** field. Then, grab the **prepTime** field and drag
    it above the preparation group item. You'll see that the icon automatically shifts
    to the right, as if it's indented. Drop that field there and then drag the **ingredients**
    field into the preparation item area too, dropping it underneath **prepTime**.
    Then drag **cookTime** and **recipeInstructions** into the cooking group area.
    When finished, your items should look like this:![Time for action – understanding
    the benefits of contributed modules](img/4659_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button. Once the page has refreshed, you can see a notification
    as the following:![Time for action – understanding the benefits of contributed
    modules](img/4659_05_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Back to site** button in the top-left of your admin menu. We
    have achieved the same result:![Time for action – understanding the benefits of
    contributed modules](img/4659_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We removed the templating we did with Twig and then replicated the functionality
    with the `field_group` module.
  prefs: []
  type: TYPE_NORMAL
- en: It's pretty neat that we were able to achieve the same amount of control over
    our markup so quickly and easily. What's more, this method is achievable by site
    builders as well as developers, and it will continue to be a quicker method for
    updating the content type if more fields are added. With this being the case,
    how should we decide whether to use a contributed module on our websites?
  prefs: []
  type: TYPE_NORMAL
- en: What are contributed modules?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contributed modules, or contrib modules, are pieces of Drupal functionality,
    contributed to the community and maintained by the community of developers, sometimes
    sponsored by companies keen to support open source. You can find all contrib modules
    in the modules section of Drupal at [https://www.drupal.org/project/project_module](https://www.drupal.org/project/project_module)
    . The `field_group` module can be found at [https://www.drupal.org/project/field_group](https://www.drupal.org/project/field_group).
  prefs: []
  type: TYPE_NORMAL
- en: How do I know whether a module is safe to use?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would indeed be risky to randomly pick and choose modules to use without
    prior knowledge, but there''s lots of information about modules on Drupal ([https://www.drupal.org/](https://www.drupal.org/))
    that can inform you before use. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of people maintaining the project. The more eyes on the code, the
    more likely it is to be good quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of commits made, and how recently. Active maintenance means the module
    is more likely to be protected against any recent security issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The issue and bug queue. It's less about the number of bugs or issues and more
    about how well they're responded to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of modules that depend on it. If a module is excellent, more and
    more developers will feel confident in having it as a dependency. A lot of core
    modules started life this way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the module is well documented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of downloads and reported installations. Again, the more eyes on
    it, the better, and the more users, the greater the likelihood that bugs are found
    early.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of this is available to explore on a module's Drupal ([https://www.drupal.org/](https://www.drupal.org/))
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Is it better to use a contrib module or custom code?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no hard and fast answer to this. The benefits of a contrib module
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Security. If lots of other developers are using it, it can give you confidence
    in code quality and security fixes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're not required for maintenance (unless you choose to contribute back to
    it).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ease of use. As with the `field_group` example, it allows people with less development
    expertise to configure a powerful website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good learning opportunity. Dive into the module and explore how it is coded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually more scalable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The benefits of custom code include:'
  prefs: []
  type: TYPE_NORMAL
- en: A clean, non-bloated solution to a unique problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site performance. Large contrib modules with lots of extra functionality will
    negatively affect a site's performance more than clean, well-written code that
    addresses a single issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gives you an opportunity to improve and test your development skills.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored theming in Drupal 8, from what a theme is and how
    to create one, to loading and using CSS and JS assets, as well as templating,
    and how to determine when and why to make use of contributed modules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore CKEditor and be introduced to Block API
    for Drupal 8.
  prefs: []
  type: TYPE_NORMAL
