- en: Chapter 5. Theming in Drupal 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 Drupal 8的主题化
- en: '*In the last chapter, we learned about the Field Types API and about developing
    a custom field module. Now let''s explore the frontend by creating a custom theme
    and learning about the new features of Drupal 8''s theming layer.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一个章节中，我们学习了字段类型API以及如何开发自定义字段模块。现在让我们通过创建自定义主题并了解Drupal 8主题层的全新功能来探索前端。*'
- en: 'In this chapter, we will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: What a theme is and how to create a sub-theme
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题是什么以及如何创建子主题
- en: What is new about themes in Drupal 8
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8中主题的新特性是什么
- en: What the terms mobile first and responsive mean and why D8 base themes are built
    this way
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动优先和响应式这两个术语的含义以及为什么D8基础主题是这样构建的
- en: How to install Drush
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装Drush
- en: How to add assets to your theme
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将资源添加到你的主题中
- en: An introduction to the Twig templating language
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twig模板语言的介绍
- en: Understanding the benefits of contributed modules and when to make use of them
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解贡献模块的好处以及何时使用它们
- en: What is a theme?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是主题？
- en: A **theme** adjusts, or overrides, the default appearance of your Drupal site.
    It does this by giving us the ability to change the markup (with templating),
    functionality (with JavaScript), and appearance (with CSS). Theming is the final
    layer of development before the work is viewed by the user. The icing on the cake!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**主题**调整或覆盖了你的Drupal网站的默认外观。它通过给我们改变标记（使用模板）、功能（使用JavaScript）和外观（使用CSS）的能力来实现这一点。主题化是用户查看工作之前的最后开发层。是点睛之笔！'
- en: By default, Drupal 8 comes shipped with a number of themes in core. Let's have
    a look at them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Drupal 8在核心中包含了许多主题。让我们来看看它们。
- en: 'In PhpStorm, go to the root directory of your project and then navigate to
    `core` | `themes`. In this directory, you''ll find five themes: Bartik, Classy,
    Seven, Stable, and Stark. What are these and why are they here?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在PhpStorm中，前往你项目的根目录，然后导航到`core` | `themes`。在这个目录中，你可以找到五个主题：Bartik、Classy、Seven、Stable和Stark。它们是什么，为什么它们在这里？
- en: 'Let''s discuss these core themes we have available by default, as they each
    have a distinct use:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下我们默认可用的核心主题，因为它们各自有独特的用途：
- en: Bartik has been the default theme for both Drupal 7 and Drupal 8\. It's well
    documented, well maintained, and contains some useful theme functions.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bartik一直是Drupal 7和Drupal 8的默认主题。它有很好的文档记录，维护得很好，并包含一些有用的主题功能。
- en: Seven has been the default administration theme for Drupal 7 and 8\. The styling
    it contains applies to the admin interface.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seven一直是Drupal 7和8的默认管理主题。它包含的样式应用于管理界面。
- en: Stark comes with no CSS whatsoever, and is designed to demonstrate the default
    HTML and CSS that's coming from Drupal.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stark没有任何CSS，旨在演示来自Drupal的默认HTML和CSS。
- en: Stable exists as a fallback base theme if one hasn't been defined.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有定义，Stable将作为后备基础主题存在。
- en: Classy is a base theme designed to provide Drupal's standard classes, which
    you will be used to if you've worked with Drupal 7\. Bartik is a sub-theme of
    Classy.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Classy是一个基础主题，旨在提供Drupal的标准类，如果你与Drupal 7合作过，你会很熟悉这些类。Bartik是Classy的子主题。
- en: The description of Classy mentioned that it is a base theme. What does this
    mean? Base themes exist to give you a faster starting point for customizing your
    site's looks by doing some of the groundwork for you. They provide a standards-compliant
    starting point, some useful documentation, and really good reference for how to
    do certain theme tasks, such as creating new template files or adding new CSS.
    It is possible to chain multiple themes together if needed, to inherit features.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Classy的描述提到它是一个基础主题。这是什么意思？基础主题的存在是为了给你提供一个更快的起点，通过为你做一些基础工作来定制你网站的样式。它们提供了一个符合标准的起点，一些有用的文档，以及如何执行某些主题任务的良好参考，例如创建新的模板文件或添加新的CSS。如果需要，可以将多个主题链接在一起以继承功能。
- en: While some of these themes have existed in multiple versions of Drupal, there
    are distinct changes in the Drupal 8 theme system. These include semantic HTML5
    markup, the Twig templating system (which we will look at later in this chapter),
    more JavaScript libraries included by default, and CSS classes being moved from
    preprocess into templating. Visit [https://www.drupal.org/node/2356951](https://www.drupal.org/node/2356951)
    for a more complete list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些主题在Drupal的多个版本中存在，但Drupal 8的主题系统有一些显著的变化。这包括语义HTML5标记，Twig模板系统（我们将在本章后面讨论），默认包含的更多JavaScript库，以及CSS类从预处理移动到模板。访问[https://www.drupal.org/node/2356951](https://www.drupal.org/node/2356951)以获取更完整的列表。
- en: There are many, many more themes you can download and make use of as a base
    theme too. Visit [https://www.drupal.org/project/project_theme](https://www.drupal.org/project/project_theme)
    to find a listing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载并用作基础主题的许多许多主题。访问 [https://www.drupal.org/project/project_theme](https://www.drupal.org/project/project_theme)
    以查找列表。
- en: It's important to note that the themes in core are not there to be adjusted.
    By keeping them untouched, we can update them (if needed) in future without losing
    any work. So if we can't adjust them, how do we customize the look of our site?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，核心中的主题不是为了调整而存在的。通过保持它们不变，我们可以在未来（如果需要）更新它们，而不会丢失任何工作。所以如果我们不能调整它们，我们如何定制我们网站的外观？
- en: Time for action – creating a sub-theme
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建子主题
- en: What we need to do is set up a theme to inherit the benefits we get from our
    chosen theme, that we can then adjust to suit our needs. This is called a **sub-theme**.
    Let's get started, using Bartik as the parent theme.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是设置一个主题，以便继承我们从所选主题获得的好处，然后我们可以调整以满足我们的需求。这被称为**子主题**。让我们开始吧，使用 Bartik
    作为父主题。
- en: 'Back in PhpStorm, in the root directory of your project, navigate to the `themes`
    directory. Right now this directory is empty apart from a README file. We''ll
    first create a directory to place our sub-theme in. It is good practice to place
    your own themes in a folder named `custom`, and any contributed themes in a sub
    folder named `contrib` (more on contributed themes later). Inside the newly created
    `custom` folder, we''ll begin creating our sub-theme. We need to follow a few
    naming rules: it must start with a letter and only use lowercase alphanumerics
    and underscores. We''re going to call ours recipes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 PhpStorm，导航到项目的根目录，进入 `themes` 目录。目前这个目录除了一个 README 文件外是空的。我们将首先创建一个目录来放置我们的子主题。将自定义主题放在名为
    `custom` 的文件夹中，将贡献的主题放在名为 `contrib` 的子文件夹中是一种良好的做法（关于贡献主题的更多内容将在后面介绍）。在新建的 `custom`
    文件夹内，我们将开始创建我们的子主题。我们需要遵循一些命名规则：它必须以字母开头，并且只能使用小写字母数字和下划线。我们将命名为 recipes：
- en: Create a directory named `recipes`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipes` 的目录。
- en: Inside that, we'll define our theme. If you've worked with Drupal 7 previously,
    you may be used to working with the `.info` file. In Drupal 8, we now use the
    `.info.yml` files for theme definition. Among other things, the `.info.yml` file
    can define meta data, style sheets, and block regions. This is the only required
    file in the theme. Create the file, naming it `recipes.info.yml`, and then open
    it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中，我们将定义我们的主题。如果你之前使用过 Drupal 7，你可能习惯于使用 `.info` 文件。在 Drupal 8 中，我们现在使用 `.info.yml`
    文件来定义主题。除了其他事情之外，`.info.yml` 文件可以定义元数据、样式表和块区域。这是主题中唯一必需的文件。创建文件，命名为 `recipes.info.yml`，然后打开它。
- en: 'Copy the following into your `recipes.info.yml` file and save:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制到您的 `recipes.info.yml` 文件中并保存：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Copy the file titled `logo.svg` from `/core/themes/bartik` into `/themes/recipes`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为 `logo.svg` 的文件从 `/core/themes/bartik` 复制到 `/themes/recipes`。
- en: Now back on our site, click on the **Appearance** button in the shortcut bar.
    This will take you to `/admin/appearance`. This is where we can enable or disable
    the themes. Scroll down to the **Uninstalled themes** section and find our Recipes
    theme. Click on the **Install and set as default** button:![Time for action –
    creating a sub-theme](img/4659_05_01.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到我们的网站，点击快捷栏中的**外观**按钮。这将带您到 `/admin/appearance`。这是我们启用或禁用主题的地方。滚动到**未安装的主题**部分，找到我们的
    Recipes 主题。点击**安装并设置为默认**按钮：![行动时间 - 创建子主题](img/4659_05_01.jpg)
- en: Once the page has refreshed and notified you that Recipes is our default theme,
    click on the **Back to site** button in the top-left of your admin menu.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面刷新后，通知您 Recipes 是我们的默认主题，然后点击管理员菜单左上角的**返回网站**按钮。
- en: '*What just happened?*'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We created a sub-theme that uses Bartik as its parent theme. But what's inside
    the Bartik theme? Next, we'll have a look at the inner workings of Bartik to understand
    how a theme is put together.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个使用 Bartik 作为父主题的子主题。但是 Bartik 主题内部是什么？接下来，我们将查看 Bartik 的内部工作原理，以了解主题是如何组合在一起的。
- en: An overview of Bartik
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bartik 概述
- en: 'Let''s have a look at what sits inside the Bartik directory and gain a bit
    of knowledge about what each file does (follow along by navigating to `core/themes/bartik`).
    The directory consists of:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Bartik 目录内部有什么，并了解每个文件的作用（通过导航到 `core/themes/bartik` 来跟随）。该目录包括：
- en: '`bartik.info.yml`: Like our `recipes.info.ml` file, this defines some meta
    data required for the theme, such as its name, its parent theme, and a description.
    This file also describes some libraries, stylesheets, and theme regions. You can
    find information on the included regions and more on theme customization at [https://www.drupal.org/documentation/themes/bartik](https://www.drupal.org/documentation/themes/bartik).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bartik.info.yml`: 与我们的 `recipes.info.ml` 文件类似，此文件定义了主题所需的元数据，例如其名称、其父主题以及描述。此文件还描述了一些库、样式表和主题区域。您可以在[https://www.drupal.org/documentation/themes/bartik](https://www.drupal.org/documentation/themes/bartik)找到有关包含区域的信息以及更多关于主题定制的信息。'
- en: '`bartik.libraries.yml`: This file defines the CSS libraries that can be loaded
    into the theme (it would also define the JavaScript, if Bartik had any by default).
    See the *Adding assets to your theme* section for more information and a practical
    example.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bartik.libraries.yml`: 此文件定义了可以加载到主题中的 CSS 库（如果 Bartik 默认有 JavaScript，它也会定义）。有关更多信息和实践示例，请参阅
    *添加资产到您的主题* 部分。'
- en: '`bartik.breakpoints.yml`: This includes the configuration for the Breakpoints
    module ([https://www.drupal.org/project/breakpoints](https://www.drupal.org/project/breakpoints)).
    This allows the theme to manage the breakpoints so that the other modules can
    make use of responsive breakpoints functionality. For example, Picture ([https://www.drupal.org/project/picture](https://www.drupal.org/project/picture))
    can deliver resized images depending on the size of the browser. See the *Mobile
    First, Responsive Themes* section for more information about the module'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bartik.breakpoints.yml`: 此文件包含 Breakpoints 模块的配置（[https://www.drupal.org/project/breakpoints](https://www.drupal.org/project/breakpoints)）。这允许主题管理断点，以便其他模块可以利用响应式断点功能。例如，Picture
    ([https://www.drupal.org/project/picture](https://www.drupal.org/project/picture))
    可以根据浏览器的大小提供调整大小的图片。有关该模块的更多信息，请参阅 *移动优先，响应式主题* 部分。'
- en: '`bartik.theme`: This contains some useful functions that support theming. These
    include adding classes to the markup detailing sidebar or region use, adding clearfix
    classes to some system elements, and classes to form elements.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bartik.theme`: 此文件包含一些支持主题化的有用函数。这些包括向标记中添加表示侧边栏或区域使用的类，向某些系统元素添加 clearfix
    类，以及向表单元素添加类。'
- en: '`logo.svg`: This is the stock logo that will show by default in the header.
    Logos can also be uploaded in `/appearance/settings`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logo.svg`: 这是默认在页眉中显示的库存标志。标志也可以在 `/appearance/settings` 中上传。'
- en: '`screenshot.png`: This displays on the `/admin/appearance` page and can be
    useful for quick theme recognition if toggling between themes.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screenshot.png`: 此图片显示在 `/admin/appearance` 页面上，在切换主题时可用于快速识别主题。'
- en: 'The `color` directory: This houses the preview functionality for Bartik''s
    integration with the `Color` module. This module allows you to change the color
    scheme of the theme without making changes in the CSS.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color` 目录：此目录包含 Bartik 与 `Color` 模块的集成预览功能。此模块允许您在不更改 CSS 的情况下更改主题的颜色方案。'
- en: 'The `css` directory: This houses multiple modular CSS files that contain styling
    for all the components of the theme, such as buttons, forms, and the header. These
    are then either combined into libraries in `bartik.libraries.yml` or imported
    directly into `batik.info.yml`, depending on their purpose.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css` 目录：此目录包含多个模块化 CSS 文件，包含主题所有组件的样式，如按钮、表单和页眉。然后根据其目的，这些文件要么组合到 `bartik.libraries.yml`
    中的库中，要么直接导入到 `batik.info.yml` 中。'
- en: 'The `config` directory: This houses a schema for the Bartik configuration files.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` 目录：此目录包含 Bartik 配置文件的架构。'
- en: 'The `images` directory: This contains images used by the theme.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` 目录：此目录包含主题使用的图片。'
- en: 'The `templates` directory: This houses the templates used by the theme to structure
    the output of different areas of the site. The templates provide the HTML structure
    and some conditional logic. Templates target specific areas of the site which
    can range from fairly small independent sections like `status-messages.html.twig`,
    to elements that have wider effects, such as `page.html.twig`, which provides
    structure for all pages. You''ll learn much more about templates and the language
    they''re written in (Twig) later in the chapter.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates` 目录：此目录包含主题用于结构化网站不同区域输出的模板。模板提供 HTML 结构和一些条件逻辑。模板针对网站的具体区域，范围从相对较小的独立部分如
    `status-messages.html.twig`，到具有更广泛影响的部分，如 `page.html.twig`，它为所有页面提供结构。您将在本章的后面部分学到更多关于模板及其编写语言（Twig）的知识。'
- en: We are now in a position to start making some changes to the default look that
    Bartik provides, so in the next section we'll add some custom CSS to test we're
    in business. Before getting to that, let's discuss responsive themes and mobile
    first principles.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始对 Bartik 默认外观进行一些更改，因此在下节中我们将添加一些自定义 CSS 来测试我们是否在业务中。在到达那里之前，让我们讨论响应式主题和移动优先原则。
- en: Mobile first, responsive themes
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动优先，响应式主题
- en: Drupal 8 themes are both mobile first and responsive out of the box. What do
    these terms mean and why are the themes set up this way?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 主题默认既支持移动优先又支持响应式设计。这些术语的含义是什么，为什么主题会这样设置？
- en: 'In April of 2000, John Allsop wrote an article on [http://alistapart.com/](http://alistapart.com/)
    called *A Dao of Web Design*. This seminal article described an issue of emerging
    web design—designers and developers wanted to control their users'' experience
    with as much rigidity as was possible in print. They wanted their sites to look
    as similar as possible in terms of functionality and layout, no matter the users''
    setup. The article advocated a fresh approach:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 2000 年 4 月，约翰·奥尔斯普在 [http://alistapart.com/](http://alistapart.com/) 上发表了一篇名为
    *《网络设计之道》* 的文章。这篇文章描述了一个新兴的网络设计问题——设计师和开发者希望尽可能严格地控制用户的体验，就像在印刷品中一样。他们希望网站在功能和布局方面尽可能相似，无论用户的设置如何。文章提倡一种新的方法：
- en: '|   | *"Make pages which are adaptable. Make pages which are accessible, regardless
    of the browser, platform or screen that your reader chooses or must use to access
    your pages."* |   |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   | *"制作可适应的页面。制作无论读者选择或必须使用的浏览器、平台或屏幕都能访问的页面。" |   |'
- en: '|   | --*John Allsop* |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | --*约翰·奥尔斯普* |'
- en: This extends further today, as we must also consider different screen resolutions
    and Internet connection speeds, particularly for mobile devices. A site must adjust
    to the various needs of its users, and preferably, deliver an excellent experience,
    no matter the device.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，这一概念得到了进一步扩展，因为我们还必须考虑不同的屏幕分辨率和互联网连接速度，尤其是对于移动设备。网站必须适应其用户的各种需求，并且最好提供卓越的体验，无论使用何种设备。
- en: 'Two approaches that attempted to solve the layout/screen size problem began
    to gain popularity: adaptive design and responsive design. Adaptive design was
    based on having series of static layouts that were delivered to the user after
    screen size was detected. Responsive design was based on fluidity of layout, responsively
    and flexibly fitting the device.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 两种试图解决布局/屏幕尺寸问题的方法开始变得流行：自适应设计和响应式设计。自适应设计基于一系列静态布局，在检测到屏幕尺寸后向用户交付。响应式设计基于布局的流动性，能够灵活地适应设备。
- en: 'If a user resized their browser, an adaptive website would jump between the
    static layouts, while a responsive website would fluidly scale. Both approaches
    had benefits: adaptive design affords a level of control over the layout that
    sometimes can''t be achieved with responsive design, but responsive design works
    more seamlessly across different devices, and because of this, has now become
    more popular.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户调整了浏览器窗口大小，自适应网站会在静态布局之间跳转，而响应式网站则会平滑缩放。这两种方法都有其优点：自适应设计在布局控制方面提供了一种有时无法通过响应式设计实现的程度，但响应式设计在不同设备上运行得更加无缝，因此现在变得更加流行。
- en: 'Historically, designers and developers have focused on the desktop experience
    first, sometimes using layouts and functionality that didn''t work well on mobile
    devices. This still happens occasionally, with designers approaching mobile design
    as a secondary issue. There''s a very good reason to stamp this practice out:
    in 2015-2016, there are approximately 4.5 billion mobile phone users worldwide.
    A substantial portion of these will have Internet capability, and when we consider
    all the tablets, games consoles, watches, in-car devices, and even kitchen appliances
    with screens capable of browsing the Web, focusing on desktop experience alone
    is short sighted.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，设计师和开发者首先关注桌面体验，有时使用在移动设备上效果不佳的布局和功能。这种情况偶尔还会发生，设计师将移动设计视为次要问题。有很好的理由要摒弃这种做法：在
    2015-2016 年，全球大约有 45 亿手机用户。其中相当一部分将拥有互联网接入能力，当我们考虑到所有平板电脑、游戏机、手表、车载设备，甚至具有浏览网页功能的厨房电器时，仅仅关注桌面体验是短视的。
- en: 'To combat the issue of reduced functionality of some devices, two approaches
    have become popular: graceful degradation and progressive enhancement. The result
    is the same; older or less capable devices deliver a lower level of experience,
    but importantly, a working site. However, the way this is achieved is applied
    from opposing starting points. Graceful degradation starts from a point of providing
    a high level of experience on modern devices, with the functionality degrading
    gracefully on older devices that aren''t able to provide the support. Progressive
    enhancement takes the approach of creating the website at its lower level of user
    experience first, then progressively enhancing functionality if the devices support
    it. Both approaches have their merits, and excellent examples of both practices
    can be found at [https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement](https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决某些设备功能降低的问题，两种方法已经变得流行：优雅降级和渐进增强。结果是相同的；较老或功能较弱的设备提供较低的用户体验，但重要的是，一个可以工作的网站。然而，实现这一点的起点是相反的。优雅降级从在现代设备上提供高水平体验的起点开始，当较老设备无法提供支持时，功能会优雅地降级。渐进增强采取的方法是首先创建一个较低级别用户体验的网站，如果设备支持，则逐步增强功能。两种方法都有其优点，这两种实践的优秀例子可以在[https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement](https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement)找到。
- en: The important point here is the ability to provide a working website, regardless
    of device, and we'll discuss how Drupal 8 can help you achieve this.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要点是提供能够适应任何设备的网站，我们将讨论Drupal 8如何帮助您实现这一点。
- en: Mobile first is an approach that means that content is laid out intelligently
    on smaller devices. Content on a small screen tends to require a single column
    layout, and therefore a linear order, with the most important content at the top
    of the page. This isn't always the case, but it's a mindset that helps web professionals
    consider the best experience for smaller devices first, which tends to also lead
    to an improved large screen experience.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先是一种意味着在较小设备上智能布局内容的方法。小屏幕上的内容通常需要单列布局，因此是线性顺序，最重要的内容位于页面顶部。这并不总是如此，但这是一个有助于网络专业人士首先考虑较小设备最佳体验的心态，这通常也会导致大屏幕体验的改善。
- en: Drupal 8 can help you create a responsive, mobile first site with progressive
    enhancement or graceful degradation. First off, have a look at the homepage in
    your browser—try resizing the page, and look at how the elements adjust. At mobile,
    our admin menu shows our links with icons rather than text, to ensure the layout
    fits. Our site's main menu is sat within a clickable (or tappable) dropdown. The
    content is single column, with the sidebars sat underneath the main content area.
    As the browser expands, the admin menu includes text, the main menu drops out
    of the dropdown, and the sidebars are positioned on either side of the main content
    area. This is a good example of responsive, mobile first behavior. This is being
    achieved with CSS. As an example, look at the styling in **core** | **themes**
    | **bartik** | **css** | **components** | **header.css**. You can see the default
    styling being set at the top of the file, then further into the file, media queries
    appear, which provide the necessary changes for the layout to continue working
    well at larger sizes. If you're not familiar with media queries, you can find
    good documentation at [https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8可以帮助您创建一个响应式、以移动优先的网站，无论是通过渐进增强还是优雅降级。首先，在您的浏览器中查看主页——尝试调整页面大小，看看元素是如何调整的。在移动端，我们的管理菜单使用图标而不是文本显示链接，以确保布局适应。我们网站的主要菜单位于一个可点击（或可触摸）的下拉菜单中。内容是单列布局，侧边栏位于主要内容区域下方。当浏览器窗口扩大时，管理菜单包含文本，主菜单从下拉菜单中消失，侧边栏位于主要内容区域的两侧。这是一个响应式、以移动优先行为的良好例子。这是通过CSS实现的。例如，查看**核心**
    | **主题** | **bartik** | **css** | **components** | **header.css**中的样式。您可以看到默认样式在文件顶部设置，然后文件进一步深入，出现媒体查询，为布局在更大尺寸下继续良好工作提供必要的更改。如果您不熟悉媒体查询，可以在[https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)找到良好的文档。
- en: By providing good examples of responsive, mobile first styling in action, Drupal
    8 has given you a helping hand beginning your own work.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供响应式、移动优先样式的良好示例，Drupal 8为你开始自己的工作提供了帮助。
- en: Drupal 8 now comes with more JS libraries in core, which we'll discuss later.
    For now, just be aware that Modernizr is available to you, which is a great tool
    for detecting browser capabilities and providing methods for you to adjust your
    functionality and styling accordingly. See [https://modernizr.com/](https://modernizr.com/)
    for more information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8现在在核心中包含了更多的JS库，我们稍后会讨论。目前，只需知道Modernizr现在可用，这是一个检测浏览器功能并提供相应调整功能性和样式的强大工具。更多信息请见[https://modernizr.com/](https://modernizr.com/)。
- en: Drupal core also now ships with a module called **Breakpoint**. This allows
    you, on a theme by theme basis, to define the browser widths at which you want
    to be able to make functional changes. These settings are independent of any CSS
    media queries you might use. The Breakpoint settings help configure other modules,
    such as Responsive Images, another module now in core. The combination of these
    two modules allows you to switch images on your site. You can provide lower resolution
    images for small screen devices, then swap them for higher resolution for bigger
    screens. This is great for site performance, particularly important to bear in
    mind for mobile Internet users. The settings for breakpoints sit in the root of
    the theme. Bartik's can be found in `bartik.breakpoints.yml`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal核心现在还附带了一个名为**Breakpoint**的模块。这允许你根据主题定义你想要进行功能更改的浏览器宽度。这些设置与任何你可能使用的CSS媒体查询无关。Breakpoint设置有助于配置其他模块，例如Responsive
    Images，另一个现在在核心中的模块。这两个模块的组合允许你在网站上切换图片。你可以为小屏幕设备提供低分辨率图片，然后为更大的屏幕交换高分辨率图片。这对网站性能有很大帮助，尤其是对于移动互联网用户来说非常重要。断点设置位于主题的根目录中。Bartik的可以在`bartik.breakpoints.yml`中找到。
- en: We've now learned what the terms *mobile first* and *responsive* mean, and how
    Drupal 8 gives you the tools you need to begin following these practices.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了“移动优先”和“响应式”这两个术语的含义，以及Drupal 8如何为你提供开始遵循这些实践所需的工具。
- en: Before we start using our theme, we're going to install a tool called **Drush**,
    which is a command line tool for Drupal. It'll help us move quickly through the
    next few sections.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用主题之前，我们将安装一个名为**Drush**的工具，这是一个用于Drupal的命令行工具。它将帮助我们快速通过接下来的几个部分。
- en: Time for action – installing Drush
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 安装Drush
- en: The following section requires a command line with Unix or Unix-like functionality.
    If you are a Mac or Linux user, you'll have Bash preinstalled, but if you're a
    Windows user, you'll need to install Cygwin, which can be downloaded from [https://www.cygwin.com](https://www.cygwin.com).
    There are a number of tutorials available online to help you install and use it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分需要具有Unix或Unix-like功能的命令行。如果你是Mac或Linux用户，Bash将预先安装，但如果你是Windows用户，你需要安装Cygwin，可以从[https://www.cygwin.com](https://www.cygwin.com)下载。网上有许多教程可以帮助你安装和使用它。
- en: You'll also need some knowledge of editing and saving documents using terminal
    editors, such as `nano` or `vi`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要了解一些使用终端编辑器编辑和保存文档的知识，例如`nano`或`vi`。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're new to command line, be aware that the dollar sign signals a new line
    of code (that is, don't type the dollar sign), and that each line needs to end
    with the return key being pressed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始接触命令行，请注意，美元符号表示新的一行代码（也就是说，不要输入美元符号），并且每一行都需要按回车键结束。
- en: We'll be installing Drush using Composer. If you have previous experience of
    Drupal 7 and already have Drush installed, upgrade it using your preferred method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Composer安装Drush。如果你有Drupal 7的先前经验并且已经安装了Drush，请使用你首选的方法进行升级。
- en: 'Firstly, we''ll install Composer globally. In your terminal, run the following
    commands:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将全局安装Composer。在你的终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, open your `.bash_profile` (or `.zshrc` if using ZSH) using a terminal
    editor and add the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用终端编辑器打开你的`.bash_profile`（如果你使用ZSH，则为`.zshrc`），并添加以下内容：
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Re-source the file (or reload your terminal):'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载文件（或重新加载你的终端）：
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With Composer installed, we can quickly and easily install Drush:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Composer后，我们可以快速轻松地安装Drush：
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Composer makes it really easy to update Drush, or roll it back to a particular
    version if required. It's well documented online.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Composer使得更新Drush或根据需要回滚到特定版本变得非常容易。它在网上有很好的文档。
- en: Drush has a lot of useful features. Visit [http://www.drush.org/en/master/](http://www.drush.org/en/master/)
    for documentation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Drush有很多有用的功能。请访问[http://www.drush.org/en/master/](http://www.drush.org/en/master/)获取文档。
- en: Time for action – Adding assets to your theme
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 将资产添加到您的主题
- en: 'In Drupal 7, CSS and JS assets were added to themes via the `.info` file. In
    Drupal 8, asset management has been split out and we have the concept of an asset
    library. These libraries contain the CSS and JS we would like to attach. They
    can be applied globally or to a specific page. Let''s start by creating a global-styling
    asset library:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Drupal 7中，CSS和JS资产通过`.info`文件添加到主题中。在Drupal 8中，资产管理已被分离出来，我们有了资产库的概念。这些库包含我们想要附加的CSS和JS。它们可以应用于全局或特定页面。让我们先创建一个全局样式资产库：
- en: In your theme's directory, create a file called `recipes.libraries.yml`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主题目录中，创建一个名为`recipes.libraries.yml`的文件。
- en: 'Copy the following into your file and save:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容复制到您的文件中并保存：
- en: '[PRE5]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Indentation has meaning in `.yml` files, so ensure that the indentation in the
    preceding code matches your file.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`.yml`文件中，缩进具有意义，因此请确保前面代码中的缩进与您的文件匹配。
- en: 'We now need to attach our library to the site. This can be done in two ways.
    If we want to attach a library to a specific page, we can do that in our templates.
    We''ll discuss this later in the chapter. But when we want to attach a library
    to all the pages on our site that use our theme, we can add it to our info file.
    In `recipes.info.yml`, copy and save the following at the bottom of the file:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要将我们的库附加到网站上。这可以通过两种方式完成。如果我们想将库附加到特定页面，我们可以在我们的模板中这样做。我们将在本章后面讨论这个问题。但是，当我们想将库附加到使用我们的主题的所有页面上时，我们可以将其添加到我们的info文件中。在`recipes.info.yml`中，在文件底部复制并保存以下内容：
- en: '[PRE6]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your info file should now look like this:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的info文件现在应该看起来像这样：
- en: '[PRE7]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With our library in place and being applied globally via the info file, let's
    create some CSS and test it out. In your recipes directory, create a new directory
    called `css`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的库已经就位，并通过info文件全局应用，现在让我们创建一些CSS并测试它。在您的recipes目录中，创建一个名为`css`的新目录。
- en: In the `css` directory, create a file called `style.css`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`css`目录中，创建一个名为`style.css`的文件。
- en: 'In `style.css`, copy and save the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`style.css`中，复制并保存以下内容：
- en: '[PRE8]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now need to clear the cache. Drush makes this easy. Open your terminal and
    navigate to the site''s root directory. We can type the following command to rebuild
    all our caches:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要清除缓存。Drush使这变得简单。打开您的终端并导航到网站的根目录。我们可以输入以下命令来重建所有缓存：
- en: '[PRE9]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will do the equivalent of going to `/admin/config/development/performance`
    and clicking on the **''Clear all caches**'' button, as shown in the following
    screenshot:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将等同于访问`/admin/config/development/performance`并点击以下截图所示的“**清除所有缓存**”按钮：
- en: '![Time for action – Adding assets to your theme](img/4659_05_02.jpg)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 – 将资产添加到您的主题](img/4659_05_02.jpg)'
- en: As the final step, let's head back to the homepage and see whether our styling
    has taken effect:![Time for action – Adding assets to your theme](img/4659_05_03.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，让我们回到主页，看看我们的样式是否生效：![操作时间 – 将资产添加到您的主题](img/4659_05_03.jpg)
- en: '*What just happened?*'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We added a CSS file by creating a new library and then made a styling adjustment
    to check that it worked.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个新的库并添加一个CSS文件来进行样式调整，以检查其是否工作。
- en: Ok, our titles are bigger, so that tells us that our recipes theme is working.
    Excellent!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们的标题变大了，这告诉我们我们的食谱主题正在工作。太棒了！
- en: Next, let's make adjusting our assets as easy as possible while we're developing,
    by disabling one of Drupal's default performance features.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在开发过程中，通过禁用Drupal的一个默认性能功能，让我们尽可能简化调整我们的资产。
- en: Drupal uses a site performance tool called aggregation. A site's performance
    can be affected by the addition of multiple CSS or JS files, each of which require
    an HTTP request to the server. What Drupal does to avoid this is condense multiple
    files into a single one, performing uglification and minification too. This means
    fewer HTTP requests are made, and the files that are requested are as small as
    possible. However, the aggregated files are not re-created every time you make
    a change to your CSS or JavaScript, as they are cached. Great for performance,
    but not so useful when we're developing. We could clear the cache each time we
    make a change, but a quicker way is to disable aggregation for now.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal使用一个名为聚合的站点性能工具。一个站点的性能可能会因为添加多个CSS或JS文件而受到影响，每个文件都需要向服务器发送一个HTTP请求。Drupal为了避免这种情况，会将多个文件压缩成一个，同时进行丑化（uglification）和压缩（minification）。这意味着发出的HTTP请求更少，请求的文件尽可能小。然而，聚合文件不会在每次更改CSS或JavaScript时重新创建，因为它们被缓存了。这对性能很好，但在我们开发时并不那么有用。我们可以在每次更改时清除缓存，但更快的方法是暂时禁用聚合。
- en: 'Let''s go back to `/admin/config/development/performance` and uncheck the **Aggregate
    CSS files** and **Aggregate JavaScript files** options. Then, click on the **Save
    configuration** button, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`/admin/config/development/performance`并取消选择**聚合CSS文件**和**聚合JavaScript文件**选项。然后，点击**保存配置**按钮，如图所示：
- en: '![What just happened?](img/4659_05_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/4659_05_04.jpg)'
- en: With aggregation turned off, we can make changes and they will be immediately
    visible when we refresh our browser. Do remember to have aggregation enabled for
    production sites though!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭聚合功能后，我们可以进行更改，并且刷新浏览器时它们将立即可见。但请记住，对于生产站点，务必启用聚合功能！
- en: Time for action – calling assets on specific pages
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 在特定页面上调用资产
- en: 'Let''s dive a little deeper with asset library dependencies. We''re going to
    add a little piece of JavaScript with a dependency on jQuery; when a user clicks
    on the recipe description field, an alert box will be triggered to tell them it''s
    delicious. We''ll set it so that it only loads on the full view mode of our recipes
    (that is, not on our homepage listing). This will also be our first introduction
    to Twig. Let''s begin:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨资产库依赖。我们将添加一小段依赖于jQuery的JavaScript代码；当用户点击食谱描述字段时，将触发一个警告框告诉他们这是美味的。我们将设置它只在我们的食谱完整视图模式下加载（即不在我们的主页列表中）。这也将是我们对Twig的第一个介绍。让我们开始：
- en: Back in PhpStorm, in our `recipes` theme, create a directory called `js`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PhpStorm中，在我们的`recipes`主题中，创建一个名为`js`的目录。
- en: In the `js` directory, create a file called `delicious.js.`
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`js`目录下，创建一个名为`delicious.js`的文件。
- en: 'While the contents of this JS file are just to demo the concept, we''ll create
    it and document it using good practices, so that you can use this as a basis for
    your own work. We''ll start by defining the file, setting a description, and then
    creating our function:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然这个JS文件的内容只是为了演示概念，但我们将使用良好的实践创建并记录它，这样你就可以将其作为你自己的工作的基础。我们将从定义文件、设置描述，然后创建我们的函数开始：
- en: '[PRE10]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After the function, we''ll tell jQuery to load this function on the page load
    event:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数之后，我们将告诉jQuery在页面加载事件上加载这个函数：
- en: '[PRE11]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ll now start adding the contents of the function. We''ll create the object
    that will be returned when the function is called inside our function:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将开始添加函数的内容。我们将在函数内部调用时创建一个将被返回的对象：
- en: '[PRE12]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Following our ''`self''` object, we''ll create our jQuery selector, picking
    up the content we want to bind a `click` function to:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`self`对象之后，我们将创建我们的jQuery选择器，选择我们想要绑定`click`函数的内容：
- en: '[PRE13]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we''ll bind the content click event and create our alerting function,
    which we''ll make translatable:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将绑定内容点击事件并创建我们的警告函数，我们将使其可翻译：
- en: '[PRE14]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we''ll set a property of our `self` object to be an anonymous function
    that calls the `bindRecipeContentEvent` function at page load. We''ll then return
    the object:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将设置`self`对象的属性为一个匿名函数，该函数在页面加载时调用`bindRecipeContentEvent`函数。然后我们将返回该对象：
- en: '[PRE15]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The contents of `delicious.js` should now be:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`delicious.js`的内容现在应该是：'
- en: '[PRE16]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With `delicious.js` in place, we now need to add it as an asset library. In
    PhpStorm, open `recipes.libraries.yml`. Underneath the global-styling asset library,
    we''ll create another, called `delicious`. This one will include the JS we just
    created, and will also specify our dependency on jQuery, a version of which sits
    in core for us to use. (In Drupal 8, core contains a lot of libraries for dependencies,
    including jQuery UI, Modernizr, and Backbone to name a few. See `core` / `core.libraries.yml`
    for the complete list):'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`delicious.js`就位后，我们现在需要将其添加为资产库。在PhpStorm中打开`recipes.libraries.yml`。在全局样式资产库下方，我们将创建另一个，命名为`delicious`。这个库将包括我们刚刚创建的JS文件，并且还将指定我们对jQuery的依赖，其中有一个版本位于核心中供我们使用。（在Drupal
    8中，核心包含许多用于依赖的库，包括jQuery UI、Modernizr和Backbone等。有关完整列表，请参阅`core` / `core.libraries.yml`）：
- en: '[PRE17]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The last process is to add the asset library to the site. This time, we don't
    want it to apply globally, as we only want `delicious.js` and jQuery to load on
    the specific pages they're needed on. For that, we'll create a very specific Twig
    template. We're going to gloss over the details for now, as they'll be covered
    later in the chapter. In the `recipes` directory, create a new directory called
    `templates` and then inside that create one called `field`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个步骤是将资产库添加到网站上。这次，我们不想它全局应用，因为我们只想在需要它们的特定页面上加载`delicious.js`和jQuery。为此，我们将创建一个非常具体的Twig模板。现在我们先不深入细节，因为它们将在本章后面的部分进行讲解。在`recipes`目录下，创建一个名为`templates`的新目录，然后在其中创建一个名为`field`的目录。
- en: Inside `recipes` | `templates` | `field`, create a file named `field--node--field-description--recipe.html.twig.`
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`recipes` | `templates` | `field`内部，创建一个名为`field--node--field-description--recipe.html.twig`的文件。
- en: 'Inside that file, paste the following code. As mentioned, we''ll gloss over
    Twig for now, but note that we''re applying a class of `delicious-content` for
    our JS to apply to, and we''re attaching the asset library using the `attach_library`
    function. This means that the asset library will only ever load on pages that
    include the specific recipe description field:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件中，粘贴以下代码。如前所述，我们现在先不深入讲解Twig，但请注意，我们正在为我们的JS应用一个名为`delicious-content`的类，并且我们使用`attach_library`函数附加资产库。这意味着资产库只会在包含特定食谱描述字段的页面上加载：
- en: '[PRE18]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Clear our caches with Drush:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Drush清除我们的缓存：
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Ok, let''s test that it''s working! In your browser on the homepage, click
    on the title of one of the items in the list of recipes to be taken through to
    the full node. When you click on any of the text in the description section, our
    alert should appear:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们测试一下它是否工作！在你的浏览器的主页上，点击列表中的一项食谱的标题，进入完整的节点。当你点击描述部分中的任何文本时，我们的警告应该会出现：
- en: '![Time for action – calling assets on specific pages](img/4659_05_05.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![在特定页面上调用资产的操作时间](img/4659_05_05.jpg)'
- en: 'Awesome! Now, let''s test to see if `delicious.js` is loading only on our desired
    pages. If we view the source of the current page and do a search for it, we''ll
    obviously find it:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在，让我们测试一下`delicious.js`是否只在我们期望的页面上加载。如果我们查看当前页面的源代码并搜索它，我们显然会找到它：
- en: '![Time for action – calling assets on specific pages](img/4659_05_06.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![在特定页面上调用资产的操作时间](img/4659_05_06.jpg)'
- en: Do the same search on the homepage and no results will be found. Exactly as
    we had hoped.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上执行相同的搜索，将找不到任何结果。这正是我们希望的。
- en: '*What just happened?*'
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*这究竟发生了什么？*'
- en: We created a simple piece of JS, added it as an asset library with a jQuery
    dependency, and used a Twig template to ensure that the asset library is only
    loaded on pages with the correct field.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的JS代码，将其作为一个带有jQuery依赖的资产库添加，并使用Twig模板确保资产库只会在包含正确字段的页面上加载。
- en: Introduction to templating and Twig
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板化和Twig简介
- en: We skipped over templates and Twig in the previous section, so let's discuss
    them in more depth.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中跳过了模板和Twig，所以让我们更深入地讨论它们。
- en: Templates will become the bread and butter of your experience of theming Drupal.
    They are the way we logically filter our data and create our required HTML structure.
    A standard page on a Drupal site is built from a set of nested templates. At each
    level of the nested structure, different variables are available to you that allow
    you to render the content you desire. Any of the templates mentioned next can
    be copied into your theme, either from Drupal core or your parent theme. The base
    versions of all the templates live in core, but your parent theme may already
    have templates you can copy that have a structure that gets you most of the way
    to your goal, or perhaps is already using a specifically named template you want
    to override.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 模板将成为你在主题化Drupal体验中的主食。它们是我们逻辑过滤数据并创建所需HTML结构的方式。Drupal网站上标准页面的构建是由一组嵌套模板组成的。在嵌套结构的每个级别，都有不同的变量可供你使用，允许你渲染所需的内容。提到的任何模板都可以复制到你的主题中，无论是从Drupal核心还是父主题。所有模板的基版本都位于核心中，但你的父主题可能已经有一些模板可以复制，这些模板的结构可以帮助你达到目标的大部分，或者可能已经使用了一个特定命名的模板，你想覆盖它。
- en: 'Here''s an example of some of the templates being used on our homepage:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们主页上使用的模板示例：
- en: '![Introduction to templating and Twig](img/4659_05_07.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![模板和Twig的介绍](img/4659_05_07.jpg)'
- en: A quick note for those moving from Drupal 7 to Drupal 8—you may be wondering
    about theme functions—they are no more. All themable output is run through templates.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从Drupal 7迁移到Drupal 8的用户，这里有一个快速提示——你可能想知道主题函数——它们已经不再存在了。所有可主题化的输出都通过模板运行。
- en: The template nesting hierarchy starts with a template defining the basic structure
    of the HTML page, including the `<head>` and `<body>` tags. The base template
    that does this is `html.html.twig`, and is located in `core/modules/system/templates/html.html.twig`.
    It's well worth having a read of the comments provided in these base files for
    a description of what the template is for, as well as a list of the available
    variables.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 模板嵌套层次结构从定义HTML页面基本结构的模板开始，包括`<head>`和`<body>`标签。执行此操作的基模板是`html.html.twig`，位于`core/modules/system/templates/html.html.twig`。阅读这些基文件中提供的注释，了解模板的用途以及可用变量的列表是非常有价值的。
- en: After that, come the page templates. The base template for these is `page.html.twig`,
    located in `core/modules/system/templates/page.html.twig`. This is where elements
    such as `<header>`, `<main>`, and `<footer>` are defined.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，是页面模板。这些模板的基模板是`page.html.twig`，位于`core/modules/system/templates/page.html.twig`。这是定义诸如`<header>`、`<main>`和`<footer>`等元素的地方。
- en: It's very common to want to create specific instances of the page template;
    for example, a custom front page with a different structure to the default pages
    on the site. We do that by using theme hook suggestions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的是想要创建页面模板的特定实例；例如，一个具有与网站默认页面不同结构的自定义首页。我们通过使用主题钩子建议来实现这一点。
- en: Theme hook suggestions
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题钩子建议
- en: Theme hook suggestions are alternate templates you can create to override a
    default template file. They allow you to implement targeted overrides in your
    theme by using a specific naming convention.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 主题钩子建议是你可以创建的替代模板，用于覆盖默认模板文件。它们允许你通过使用特定的命名约定在你的主题中实现有针对性的覆盖。
- en: When rendering an element, Drupal looks for template specificity—it uses the
    most specific template it can find. For example, when it's rendering your pages,
    if you create a template in your theme called `page-front.html.twig`, it uses
    that to render your front page. If no such file is found, it looks for the next
    most specific template, and continues to do that until it reaches the default
    `page.html.twig`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当渲染一个元素时，Drupal会查找模板的特定性——它会使用它能找到的最具体的模板。例如，当它渲染你的页面时，如果你在你的主题中创建了一个名为`page-front.html.twig`的模板，它就会使用这个模板来渲染你的首页。如果没有找到这样的文件，它会寻找下一个最具体的模板，并继续这样做，直到达到默认的`page.html.twig`。
- en: In the next section, we'll move on to Twig debugging, where you will learn how
    to find out which templates your site is currently using, as well as discover
    some template naming suggestions for overriding them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续介绍Twig调试，你将学习如何找出你的网站当前正在使用的模板，以及发现一些模板命名建议以覆盖它们。
- en: 'For further information and examples, refer to the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息示例，请参考以下内容：
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK/8)'
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_alter/8)'
- en: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8](https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8)'
- en: For now, let's continue to look at templates and their hierarchy. After the
    `html.html.twig` template has defined the highest level `<html>`, `<head>`, and
    `<body>` tags, and `page.html.twig` has defined the `<header>`, `<main>`, and
    `<footer>` areas, the next level in our nested template tree are region templates.
    These are able to render the regions of the site (examples of regions in the Bartik
    theme are `sidebar_first`, `sidebar_second`, and `footer_first`, which are defined
    in its `.info.yml` file). The base region template, `region.html.twig` is located
    in `core/modules/system/templates/region.html.twig`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，让我们继续探讨模板及其层次结构。在`html.html.twig`模板定义了最高级别的`<html>`、`<head>`和`<body>`标签，以及`page.html.twig`定义了`<header>`、`<main>`和`<footer>`区域之后，我们嵌套模板树中的下一级是区域模板。这些模板能够渲染网站的各个区域（例如，Bartik主题中的区域示例有`sidebar_first`、`sidebar_second`和`footer_first`，这些在它的`.info.yml`文件中定义）。基本区域模板`region.html.twig`位于`core/modules/system/templates/region.html.twig`。
- en: Inside our regions, any number of nodes, blocks, or fields can be rendered.
    There's a lot of Drupal terminology to be learned, and if this is all sounding
    new to you, the best place to start is to have a thorough read of the template
    section of the theming guide located at [https://www.drupal.org/node/2186401](https://www.drupal.org/node/2186401).
    There you'll find more information about template types, their base locations,
    and how to override them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的区域中，可以渲染任意数量的节点、块或字段。有很多Drupal术语需要学习，如果你对此感到陌生，最好的开始方法是彻底阅读位于[https://www.drupal.org/node/2186401](https://www.drupal.org/node/2186401)的主题指南中的模板部分。在那里，你可以找到更多关于模板类型、它们的基本位置以及如何覆盖它们的信息。
- en: You may have noticed when we first looked at the core themes that there was
    one other directory there named `engines`. This houses the Twig templating engine,
    which replaces PHPTemplate from Drupal 7 as default (it is still possible, though
    not recommended, to use PHPTemplate). If you're new to Drupal, a templating engine,
    sometimes also called a theme engine, is the piece of software that combines our
    data with our theme's templates, and outputs HTML.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最初查看核心主题时，你可能已经注意到还有一个名为`engines`的其他目录。这个目录包含了Twig模板引擎，它取代了Drupal 7中的默认PHPTemplate（尽管不推荐，但仍然可以使用PHPTemplate）。如果你是Drupal的新手，模板引擎，有时也称为主题引擎，是结合我们的数据和主题模板的软件组件，并输出HTML。
- en: 'What was wrong with PHPTemplate? A number of things:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: PHPTemplate有什么问题？有很多：
- en: Templates had too much power. For example, if a themer forgot to sanitize their
    user-submitted text, it left the site open to security issues (cross-site scripting).
    It was even possible to drop a site's database from a templating file! Feel like
    casually dropping the `users` table? `<?php db_query('DROP TABLE {users}'); ?>`
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板拥有过多的权限。例如，如果主题开发者忘记对用户提交的文本进行清理，这会使网站面临安全漏洞（跨站脚本）。甚至有可能从模板文件中删除网站的数据库！想要随意删除`users`表吗？`<?php
    db_query('DROP TABLE {users}'); ?>`
- en: It was complicated. Lots of templates and even more `theme()` functions. It
    had different syntaxes for rendering different data structures. All in all, a
    steep learning curve, which put a lot of developers off.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很复杂。有很多模板和更多的`theme()`函数。它为不同的数据结构提供了不同的语法。总的来说，学习曲线陡峭，这使得许多开发者望而却步。
- en: Markup wasn't very pretty or human readable.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记语言并不美观，也不便于人类阅读。
- en: It was Drupal-specific.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是针对Drupal特定的。
- en: So why Twig?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 那为什么选择Twig？
- en: It's more secure. PHP functions, such as `db_query`, simply aren't available,
    and auto-escaping is enabled by default, so cross-site scripting is no longer
    an issue.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更安全。PHP 函数，如`db_query`，根本不可用，并且默认启用自动转义，因此跨站脚本攻击不再是问题。
- en: The syntax is very easy to read and use. `<?php print render($content); ?> becomes
    {{ content }}`. More syntax examples to follow.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法非常易于阅读和使用。`<?php print render($content); ?>`变为`{{ content }}`。更多语法示例将在后续部分中提供。
- en: Templates are extendable, thanks to its 'include' feature.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板是可扩展的，多亏了它的`include`功能。
- en: Twig isn't Drupal-specific, so we learn transferable skills.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twig 不是 Drupal 特定的，因此我们学习可转移的技能。
- en: It's well documented. See [http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有很好的文档记录。请参阅[http://twig.sensiolabs.org/documentation](http://twig.sensiolabs.org/documentation)。
- en: Moving to Twig is probably the most radical frontend change in Drupal 8\. Regardless
    of whether you're new to Drupal or you're making the move from Drupal 7, there
    will be some new material to learn. But as you'll see, the syntax is clean and
    human readable, and the effort you need to put into learning it is quickly recovered
    as you fly through writing your templates! Let's have a look at some of its features
    and syntax before we put it to use. If you're new to Drupal, the following section
    may be initially confusing, but should serve as a good reference point when you
    begin to work in Twig.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 转向 Twig 可能是 Drupal 8 中最激进的前端变化。无论你是 Drupal 新手还是从 Drupal 7 转移过来，你都需要学习一些新内容。但正如你将看到的，语法清晰且易于阅读，你投入学习它的努力很快就会在编写模板时得到回报！在我们使用它之前，让我们先看看它的功能和语法。如果你是
    Drupal 新手，以下部分可能一开始会感到困惑，但当你开始使用 Twig 时，它将作为一个很好的参考点。
- en: File and function names
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和函数名
- en: 'PHPTemplate filename syntax: `block--search-form-block.tpl.php`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPTemplate文件名语法：`block--search-form-block.tpl.php`
- en: 'Twig filename syntax: `block--search-form-block.html.twig`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twig 文件名语法：`block--search-form-block.html.twig`
- en: 'PHPTemplate function: `theme_node_links()`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPTemplate函数：`theme_node_links()`
- en: 'Twig file: `node-links.html.twig`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twig 文件：`node-links.html.twig`
- en: Brackets syntax
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 括号语法
- en: 'Twig has three bracket types:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Twig 有三种括号类型：
- en: '`{# #}`: This is used for comments. Text inside these brackets never gets output.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{# #}`：这用于注释。这些括号内的文本永远不会被输出。'
- en: '`{{ }}`: This is used for rendering. We''ll see some examples in subsequent
    sections.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ }}`：这用于渲染。我们将在后续部分中看到一些示例。'
- en: '`{% %}`: This is used for control structures such as `for` loops or conditionals.
    We''ll see some examples in subsequent sections.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{% %}`：这用于控制结构，如`for`循环或条件语句。我们将在后续部分中看到一些示例。'
- en: Rendering
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染
- en: 'Rendering a variable is done by typing the variable name in the printing bracket
    syntax: `{{ car }}`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的渲染是通过在打印括号语法中输入变量名来完成的：`{{ car }}`
- en: 'Let''s use an example of a multidimensional `car` array in PHP:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个PHP中的多维`car`数组示例：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To print an attribute of a variable, the powerful "dot" is used. `{{ car.maxSpeed
    }}` returns `200`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印变量的属性，使用强大的“点”符号。`{{ car.maxSpeed }}`返回`200`。
- en: 'This dot syntax checks a number of possible scenarios for `maxSpeed`. The following
    is its process:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个点语法检查了`maxSpeed`的多种可能情况。以下是其处理过程：
- en: Check if `car` is an array and `maxSpeed` a valid element
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`car`是否是一个数组，`maxSpeed`是否是一个有效的元素
- en: If not, and if `foo` is an object, check that `maxSpeed` is a valid property
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，并且`foo`是一个对象，请检查`maxSpeed`是否是一个有效的属性
- en: If not, and if `foo` is an object, check that `maxSpeed` is a valid method (even
    if `maxSpeed` is the constructor—use `__construct()` instead)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，并且`foo`是一个对象，请检查`maxSpeed`是否是一个有效的函数（即使`maxSpeed`是构造函数——请使用`__construct()`代替）
- en: If not, and if `foo` is an object, check that `getMaxSpeed` is a valid method;
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，并且`foo`是一个对象，请检查`getMaxSpeed`是否是一个有效的函数；
- en: If not, and if `foo` is an object, check that `isMaxSpeed` is a valid method;
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，并且`foo`是一个对象，请检查`isMaxSpeed`是否是一个有效的函数；
- en: If not, return a null value
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是，则返回一个空值
- en: 'It''s multidimensional: `{{ car.optionalUpgrades.engine.upgrade }}` returns
    `turbo-charged engine`.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它是多维的：`{{ car.optionalUpgrades.engine.upgrade }}`返回`turbo-charged engine`。
- en: 'At the time of writing, hashkeys in render arrays are not able to be targeted
    with the dot syntax. There is an active issue for this: [https://www.drupal.org/node/2160611](https://www.drupal.org/node/2160611)
    but for now, the syntax `[''#haskey'']` is needed, that is `{{ item.property[''#markup'']
    }}.`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，渲染数组中的hashkeys无法使用点语法进行定位。为此有一个活跃的问题：[https://www.drupal.org/node/2160611](https://www.drupal.org/node/2160611)，但到目前为止，需要使用语法`['#haskey']`，即`{{
    item.property['#markup'] }}.`
- en: Filters
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'With Twig, we can push a variable through a filter before it''s rendered: `{{
    car.gearbox |capitalize }}` returns `Six-speed`. As well as Twig''s default filters,
    Drupal has included extras, such as translate: `{{ item |t }}`.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Twig，我们可以在渲染之前通过一个过滤器推送一个变量：`{{ car.gearbox |capitalize }}` 返回 `Six-speed`。除了
    Twig 的默认过滤器外，Drupal 还包括了一些额外的过滤器，例如翻译：`{{ item |t }}`。
- en: See a full list of the default Twig filters at [http://twig.sensiolabs.org/doc/filters/index.html](http://twig.sensiolabs.org/doc/filters/index.html).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [http://twig.sensiolabs.org/doc/filters/index.html](http://twig.sensiolabs.org/doc/filters/index.html)
    查看默认 Twig 过滤器的完整列表。
- en: You can find the list of Drupal's extra filters in `core/lib/Drupal/Core/Template/TwigExtension.php`
    inside `getFilters()`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `core/lib/Drupal/Core/Template/TwigExtension.php` 中的 `getFilters()` 内找到
    Drupal 的额外过滤器的列表。
- en: Control structures
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制结构
- en: 'The following are the different control structures:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不用的控制结构：
- en: 'The `if` statements:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if` 语句：'
- en: '[PRE21]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `for` loops:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for` 循环：'
- en: '[PRE22]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Variable creation:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量创建：
- en: '[PRE23]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Array creation:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组创建：
- en: '[PRE24]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Debugging Twig
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twig 调试
- en: Twig, by default, offers a great debugging tool. With Drupal 8, it's extended
    even further. We'll enable it and begin using it in the next section, but for
    now, let's go through the abilities it gives us.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Twig 默认提供了一款出色的调试工具。在 Drupal 8 中，它得到了进一步的扩展。我们将在下一节中启用它并开始使用它，但现在，让我们看看它为我们提供了哪些能力。
- en: HTML comments in markup
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记中的 HTML 注释
- en: 'Drupal 8 extends the default Twig debug tool here, giving us information on
    template suggestions, as well as showing which template the markup is currently
    coming from:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8 在这里扩展了默认的 Twig 调试工具，为我们提供了模板建议的信息，以及显示当前标记来自哪个模板：
- en: '![HTML comments in markup](img/4659_05_08.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![标记中的 HTML 注释](img/4659_05_08.jpg)'
- en: In the preceding screenshot, we can see the comments for the recipe title field
    on our homepage. We can see that currently the template it's using is coming from
    the Classy theme. We also have the template name suggestions if we need to create
    something more or less specific to suit our needs.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到主页上食谱标题字段的注释。我们可以看到当前使用的模板来自 Classy 主题。如果我们需要创建更具体或更不具体的模板来满足我们的需求，我们还可以看到模板名称建议。
- en: Debugging variables
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试变量
- en: To print all the available variables in one of our template files, we can use
    the `dump()` function.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印模板文件中所有可用的变量，我们可以使用 `dump()` 函数。
- en: 'We can print all the available variables:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以打印所有可用的变量：
- en: '[PRE25]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There are a couple of global variables in Twig templates:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Twig 模板中有几个全局变量：
- en: '`_context`: This contains all the variables that are passed to the template
    file, such as variables prepared by preprocess, coming from `theme()`, or set
    from within the template'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_context`：这包含传递给模板文件的所有变量，例如由 preprocess 准备的变量、来自 `theme()` 的变量或在模板内设置的变量'
- en: '`{{ dump() }}`: This is equivalent to `{{ dump(_context) }}`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ dump() }}`：这相当于 `{{ dump(_context) }}`'
- en: '`{{ dump(\_context|keys) }}`: To print available keys'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{ dump(\_context|keys) }}`：要打印可用的键'
- en: '`_charset`: This references the (current) charset'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_charset`：这引用了（当前）字符集'
- en: 'But beware, `{{ dump() }}` may result in a white screen of death. The process
    recursively moves through and prints a potentially very large list of variables,
    which can result in a loss of memory. If that''s the case, you can do something
    like the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，`{{ dump() }}` 可能会导致白屏死机。该过程递归地移动并通过打印一个可能非常长的变量列表，这可能导致内存损失。如果是这种情况，你可以做如下操作：
- en: '[PRE26]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To print the content of a specific variable, like `$car`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印特定变量的内容，例如 `$car`：
- en: '[PRE27]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To print out the content of the `$car` and `$truck` variables:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印出 `$car` 和 `$truck` 变量的内容：
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Kint
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kint
- en: '`{{ dump() }}` is an excellent tool, but if the element it''s applied to contains
    a lot of information, the output can be difficult to interpret. The Devel module,
    which was used to create the dummy content for the site, contains a submodule
    called Kint. This module can be enabled with Drush:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{ dump() }}` 是一个出色的工具，但如果它应用到的元素包含大量信息，输出可能难以解释。用于为网站创建虚拟内容的 Devel 模块包含一个名为
    Kint 的子模块。此模块可以使用 Drush 启用：'
- en: '[PRE29]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With it enabled, all the `{{ dump() }}` commands can be replaced with `{{ kint()
    }}`, which gives a more user-friendly output.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 启用后，所有 `{{ dump() }}` 命令都可以替换为 `{{ kint() }}`，这将提供更友好的输出。
- en: Time for action – Twig in practice
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – Twig 实践
- en: 'Ok, let''s put some of what you''ve learned in the previous section into practice.
    It would be nice to separate out the preparation stage in our recipe from the
    cooking stage. We''ll do this by splitting the two types of fields into separate
    wrapping `div` tags, and then apply some styling to help us differentiate them:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们将上一节中学到的一些知识应用到实践中。将我们的食谱中的准备阶段与烹饪阶段分开将是个不错的选择。我们将通过将两种类型的字段分别放入单独的包装
    `div` 标签中来实现这一点，然后应用一些样式来帮助我们区分它们：
- en: We'll find out which template is currently in use by enabling Twig debugging.
    In PHPStorm, navigate to **sites** / **default**. If you have a file named `services.yml`,
    open it. If you don't, make a copy of `default.services.yml`, rename it to `services.yml`,
    and open it.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过启用 Twig 调试来找出当前正在使用的模板。在 PHPStorm 中，导航到 **sites** / **default**。如果你有一个名为
    `services.yml` 的文件，打开它。如果没有，复制 `default.services.yml`，将其重命名为 `services.yml`，然后打开它。
- en: 'Look for the section called `twig.config`. In this section, you will find an
    option that currently says debug: **false**. Change that value to **true** and
    save. Like aggregation for CSS and JS, this will improve your development conditions,
    but ensure it''s turned off again before the site is in production.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '查找名为 `twig.config` 的部分。在这个部分中，你会找到一个当前设置为 debug: **false** 的选项。将该值更改为 **true**
    并保存。就像 CSS 和 JS 的聚合一样，这将改善你的开发条件，但确保在网站上线前将其关闭。'
- en: 'If in step 3 you encountered a permissions error, you will need to reset permissions
    in the **sites** / **default** directory. In terminal, navigate to the sites directory
    and then enter the following:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在步骤 3 中遇到了权限错误，你将需要在 **sites** / **default** 目录中重置权限。在终端中，导航到 sites 目录，然后输入以下命令：
- en: '[PRE30]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We''ll also enable Kint to help us with some debugging:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将启用 Kint 来帮助我们进行调试：
- en: '[PRE31]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With debugging enabled, let''s have a look at the HTML output mentioned earlier.
    In your browser, click through to a full recipe page (I''m going to use the Awesome
    Sauce recipe, and I''ve added an image into the image field), and then inspect
    the HTML with your inspector of choice. (Right-click or *cmd* + click on some
    of the content, then, depending on your browser and tools, you''ll find an **Inspect**
    option.) Note: if you''re using Firebug, ensure comments are turned on:'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用调试后，让我们查看之前提到的 HTML 输出。在你的浏览器中，点击进入一个完整的食谱页面（我将使用 Awesome Sauce 食谱，并在图片字段中添加了一张图片），然后使用你选择的检查器检查
    HTML。（右键点击或 *cmd* + 点击一些内容，然后根据你的浏览器和工具，你会找到一个 **Inspect** 选项。）注意：如果你使用 Firebug，确保已开启注释：
- en: '![Time for action – Twig in practice](img/4659_05_09.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – Twig 实践](img/4659_05_09.jpg)'
- en: 'There''s a lot of information available to you at this point, but you''ll soon
    find that you can make your way through it with relative ease. Find the `<article>`
    element with a class of `node--type-recipe`. This is the structural point at which
    all the elements are wrapped in one containing div, so this is what we need to
    split:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个阶段，你将有很多信息可供参考，但很快你会发现你可以相对容易地找到你需要的信息。找到具有 `node--type-recipe` 类的 `<article>`
    元素。这是所有元素都被包裹在一个包含 div 中的结构点，因此这是我们需要的分割点：
- en: '![Time for action – Twig in practice](img/4659_05_10.jpg)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – Twig 实践](img/4659_05_10.jpg)'
- en: The template information regarding the element sits above it. As we can see
    from the green comments, the template being used is currently in `core/themes/bartik/templates/node.html.twig`.
    We can also see a number of file name suggestions, which we can choose from for
    extra specificity. We'll make use of the `node--recipe--full.html.twig` suggestion,
    which as the name implies, only applies to the full view mode.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元素的相关模板信息位于其上方。正如我们从绿色注释中可以看到的，当前使用的模板是 `core/themes/bartik/templates/node.html.twig`。我们还可以看到一些文件名建议，我们可以从中选择以获得额外的具体性。我们将使用
    `node--recipe--full.html.twig` 建议的文件名，正如其名，它仅适用于完整视图模式。
- en: In PHPStorm, inside your theme's template directory, create a directory called
    content. Note that the directory names do not affect Drupal's ability to find
    a template. They are there to assist the developer in keeping work organized.
    Inside the content directory, create a file called `node--recipe--full.html.twig`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PHPStorm 中，在你的主题模板目录内，创建一个名为 content 的目录。请注意，目录名称不会影响 Drupal 查找模板的能力。它们的存在是为了帮助开发者保持工作有序。在
    content 目录内，创建一个名为 `node--recipe--full.html.twig` 的文件。
- en: 'We''ll now copy the contents of `core/themes/bartik/templates/node.html.twig`
    over into our newly created `node--recipe--full.html.twig`, so that we can begin
    overriding it. After that, your file''s content should look as follows (the length
    comment is excluded):'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将把 `core/themes/bartik/templates/node.html.twig` 的内容复制到我们新创建的 `node--recipe--full.html.twig`
    中，这样我们就可以开始覆盖它。之后，你的文件内容应该如下所示（不包括长度注释）：
- en: '[PRE32]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Before doing anything to the file, see if you can spot some of what we''ve
    been discussing: array creation, conditional logic, and variable rendering.'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在对文件进行任何操作之前，看看你是否能发现我们一直在讨论的一些内容：数组创建、条件逻辑和变量渲染。
- en: 'What we''re interested in is the `{{ content }}` variable, as we''ll need to
    drill into this to find the different fields we want to split into our two separate
    wrapper `div` tags. We''ll use Kint to debug its contents. Adjust `{{ content
    }}` to `{{ kint(content) }}`, and then clear your cache with:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们感兴趣的是 `{{ content }}` 变量，因为我们需要深入挖掘这个变量以找到我们想要拆分到两个单独的包装 `div` 标签中的不同字段。我们将使用
    Kint 来调试其内容。将 `{{ content }}` 调整为 `{{ kint(content) }}`，然后使用以下命令清除缓存：
- en: '[PRE33]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: When you reload your page, the content will have disappeared (because it's no
    longer being rendered), and in its place you will have the debugging information.
    Open the array and then close down each inner array item (which will have opened
    by default), so that you're left with the following:![Time for action – Twig in
    practice](img/4659_05_11.jpg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你重新加载页面时，内容将消失（因为它不再被渲染），取而代之的是调试信息。打开数组，然后关闭每个默认打开的内部数组项，这样你将剩下以下内容：![行动时间
    – Twig 实践](img/4659_05_11.jpg)
- en: We can see that the content array contains eight items, seven of which have
    keys with names of the different fields on our page. We'll be using these to print
    our custom output.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到内容数组包含八个项目，其中七个具有我们页面上不同字段的名称作为键。我们将使用这些来打印我们的自定义输出。
- en: There are some fields that are neither preparation nor cooking-based, and these
    ones we'd like to stay rendered in the normal div. Fields such as the description
    and the image. We want to exclude everything else though, so we can print them
    separately. We're going to make use of a Drupal Twig filter called `without`,
    which renders an element without specific inner items. Back in the template, replace
    `{{ kint(content) }}` with `{{ content|without('field_cooktime', 'field_preptime',
    'field_ingredients', 'field_recipeinstructions') }}`. Our page will now only include
    the items we still want rendered in the normal way:![Time for action – Twig in
    practice](img/4659_05_12.jpg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有些字段既不是准备也不是烹饪相关的，我们希望这些字段保持正常渲染。例如描述和图片。但我们想排除其他所有内容，以便单独打印。我们将使用一个名为 `without`
    的 Drupal Twig 过滤器，它可以在不渲染特定内部项目的情况下渲染一个元素。回到模板中，将 `{{ kint(content) }}` 替换为 `{{
    content|without('field_cooktime', 'field_preptime', 'field_ingredients', 'field_recipeinstructions')
    }}`。现在我们的页面将只包括我们仍然希望以正常方式渲染的项目：![行动时间 – Twig 实践](img/4659_05_12.jpg)
- en: 'Now we''ll render the fields in separate `div` tags. Directly beneath that
    last Twig statement, paste the following:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在单独的 `div` 标签中渲染字段。直接在最后一个 Twig 语句下面，粘贴以下内容：
- en: '[PRE34]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we''ll go back to the theme''s `style.css` file in the `css` directory
    and add some styling. Paste and save the following underneath the existing styling:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将回到主题的 `style.css` 文件，在 `css` 目录中添加一些样式。在现有样式下面粘贴并保存以下内容：
- en: '[PRE35]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s have a look at the page again:'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们再次查看页面：
- en: '![Time for action – Twig in practice](img/4659_05_13.jpg)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – Twig 实践](img/4659_05_13.jpg)'
- en: '*What just happened?*'
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We used Twig debugging with Kint to determine the template we needed, and what
    variables were available to us. We used a Drupal-specific Twig filter to render
    content minus some items, and rendered those separately in the customized structure
    we wanted.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Kint 和 Twig 调试来确定所需的模板以及我们可用的变量。我们使用一个特定的 Drupal Twig 过滤器来渲染内容并排除一些项目，然后在自定义的结构中单独渲染这些项目。
- en: We got the results we wanted with this method, but it required us to break arrays
    apart. For larger content types with more fields, this would become cumbersome.
    There's another method, requiring the use of a contributed module. Let's take
    a look at that.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这种方法得到了我们想要的结果，但我们需要将数组拆分。对于具有更多字段的大型内容类型，这将变得繁琐。还有一种方法，需要使用贡献模块。让我们看看那个方法。
- en: Time for action – understanding the benefits of contributed modules
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 理解贡献模块的好处
- en: 'Let''s try to achieve the same result we got in the previous section, but this
    time, by using a contributed module called `field_group`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试实现之前章节中得到的相同结果，但这次是通过使用名为`field_group`的贡献模块：
- en: Delete `node--recipe--full.html.twig` inside **recipes** / **templates** / **content**
    (or move the file outside of the project if you'd prefer to keep a copy of the
    work) and clear your cache.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**recipes** / **templates** / **content**中删除`node--recipe--full.html.twig`（或者如果你希望保留工作副本，可以将文件移出项目外）并清除你的缓存。
- en: 'In command line, navigate to anywhere inside your Drupal project and type the
    following:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到你的Drupal项目内部任何位置，并输入以下命令：
- en: '[PRE36]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This command will enable the `field_group` module if you have it downloaded.
    If not, it will go ahead and download the latest stable release for you and enable
    it.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你已经下载了`field_group`模块，此命令将启用该模块。如果没有，它将为你下载最新的稳定版本并启用它。
- en: Now back in the browser, navigate to `/admin/structure/types/manage/recipe/display`
    where the display settings for the recipe content type exist. You will see that
    we have a new piece of functionality at the bottom of the page:![Time for action
    – understanding the benefits of contributed modules](img/4659_05_14.jpg)
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到浏览器，导航到`/admin/structure/types/manage/recipe/display`，这是食谱内容类型的显示设置所在位置。你会在页面底部看到一个新功能：![执行时间
    – 理解贡献模块的好处](img/4659_05_14.jpg)
- en: Type `preparation` into both the text inputs, select **Html element** from the
    dropdown, and hit **Save**.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个文本输入中输入`preparation`，从下拉菜单中选择**Html元素**，然后点击**保存**。
- en: When the page reloads, you'll see the preparation group is now placed above
    the **Disabled** label. On the right-hand side of the preparation group item,
    there's a cog. Click on that.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面重新加载后，你会看到准备组现在位于**禁用**标签上方。在准备组项的右侧有一个齿轮图标。点击它。
- en: The settings for the group will now open. Leave everything as default, apart
    from the **Extra CSS classes** text input, where you can type `preparation recipe-phase`,
    and then click on the **Update** button.![Time for action – understanding the
    benefits of contributed modules](img/4659_05_15.jpg)
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组的设置现在将打开。除了**额外CSS类**文本输入外，其他所有内容保持默认，你可以在这里输入`preparation recipe-phase`，然后点击**更新**按钮。![执行时间
    – 理解贡献模块的好处](img/4659_05_15.jpg)
- en: Replicate these steps again, this time swapping `preparation` with `cooking`.
    When finished, you should have the two groups enabled.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次执行这些步骤，这次将`preparation`替换为`cooking`。完成后，你应该有两个组被启用。
- en: Now for some drag-and-dropping. Drag both the group fields up and place them
    underneath the **recipeYield** field. Then, grab the **prepTime** field and drag
    it above the preparation group item. You'll see that the icon automatically shifts
    to the right, as if it's indented. Drop that field there and then drag the **ingredients**
    field into the preparation item area too, dropping it underneath **prepTime**.
    Then drag **cookTime** and **recipeInstructions** into the cooking group area.
    When finished, your items should look like this:![Time for action – understanding
    the benefits of contributed modules](img/4659_05_16.jpg)
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在进行一些拖放操作。将组字段拖到**recipeYield**字段下方，然后抓住**prepTime**字段并将其拖到准备组项上方。你会看到图标自动向右移动，好像缩进了。将字段放在那里，然后将**ingredients**字段拖到准备项区域，并在**prepTime**下方放下。接着将**cookTime**和**recipeInstructions**拖到烹饪组区域。完成后，你的项目应该看起来像这样：![执行时间
    – 理解贡献模块的好处](img/4659_05_16.jpg)
- en: Click on the **Save** button. Once the page has refreshed, you can see a notification
    as the following:![Time for action – understanding the benefits of contributed
    modules](img/4659_05_17.jpg)
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。页面刷新后，你可以看到一个如下通知：![执行时间 – 理解贡献模块的好处](img/4659_05_17.jpg)
- en: Click on the **Back to site** button in the top-left of your admin menu. We
    have achieved the same result:![Time for action – understanding the benefits of
    contributed modules](img/4659_05_18.jpg)
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理菜单左上角的**返回网站**按钮。我们已经实现了相同的结果：![执行时间 – 理解贡献模块的好处](img/4659_05_18.jpg)
- en: '*What just happened?*'
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We removed the templating we did with Twig and then replicated the functionality
    with the `field_group` module.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除了使用Twig模板所做的模板，然后使用`field_group`模块复制了该功能。
- en: It's pretty neat that we were able to achieve the same amount of control over
    our markup so quickly and easily. What's more, this method is achievable by site
    builders as well as developers, and it will continue to be a quicker method for
    updating the content type if more fields are added. With this being the case,
    how should we decide whether to use a contributed module on our websites?
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够如此迅速和轻松地实现对标记的控制，这确实很 neat。更重要的是，这种方法不仅适用于网站构建者，也适用于开发者，如果添加更多字段，它将继续是更新内容类型的一种更快捷的方法。在这种情况下，我们应该如何决定是否在我们的网站上使用贡献模块呢？
- en: What are contributed modules?
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献模块是什么？
- en: Contributed modules, or contrib modules, are pieces of Drupal functionality,
    contributed to the community and maintained by the community of developers, sometimes
    sponsored by companies keen to support open source. You can find all contrib modules
    in the modules section of Drupal at [https://www.drupal.org/project/project_module](https://www.drupal.org/project/project_module)
    . The `field_group` module can be found at [https://www.drupal.org/project/field_group](https://www.drupal.org/project/field_group).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献模块，或称为 contrib 模块，是 Drupal 功能的组成部分，由社区贡献并由开发者社区维护，有时由热衷于支持开源的公司赞助。您可以在 Drupal
    的模块部分找到所有 contrib 模块，网址为 [https://www.drupal.org/project/project_module](https://www.drupal.org/project/project_module)
    。`field_group` 模块可以在 [https://www.drupal.org/project/field_group](https://www.drupal.org/project/field_group)
    找到。
- en: How do I know whether a module is safe to use?
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何知道一个模块是否安全使用？
- en: 'It would indeed be risky to randomly pick and choose modules to use without
    prior knowledge, but there''s lots of information about modules on Drupal ([https://www.drupal.org/](https://www.drupal.org/))
    that can inform you before use. These include:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有事先的知识，随机选择和选择模块使用确实存在风险，但 Drupal ([https://www.drupal.org/](https://www.drupal.org/))
    上关于模块的大量信息可以在使用前为您提供信息。这些包括：
- en: The number of people maintaining the project. The more eyes on the code, the
    more likely it is to be good quality.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护项目的开发者数量。代码被查看得越多，它就越有可能质量好。
- en: The number of commits made, and how recently. Active maintenance means the module
    is more likely to be protected against any recent security issues.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交的数量以及提交的时间。活跃的维护意味着模块更有可能受到任何最近的安全问题的保护。
- en: The issue and bug queue. It's less about the number of bugs or issues and more
    about how well they're responded to.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题与错误队列。这更多关乎对问题的响应程度，而不仅仅是错误或问题的数量。
- en: The number of modules that depend on it. If a module is excellent, more and
    more developers will feel confident in having it as a dependency. A lot of core
    modules started life this way.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于它的模块数量。如果一个模块很出色，越来越多的开发者会对其作为依赖项感到自信。许多核心模块就是这样开始的。
- en: Whether the module is well documented.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块是否具有良好的文档？
- en: The number of downloads and reported installations. Again, the more eyes on
    it, the better, and the more users, the greater the likelihood that bugs are found
    early.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载量和报告的安装量。同样，查看得越多，越好，用户越多，越有可能在早期发现错误。
- en: All of this is available to explore on a module's Drupal ([https://www.drupal.org/](https://www.drupal.org/))
    page.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都可以在模块的 Drupal ([https://www.drupal.org/](https://www.drupal.org/)) 页面上探索。
- en: Is it better to use a contrib module or custom code?
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用贡献模块还是自定义代码更好？
- en: 'There is no hard and fast answer to this. The benefits of a contrib module
    include the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，没有绝对的答案。贡献模块的好处包括以下方面：
- en: Security. If lots of other developers are using it, it can give you confidence
    in code quality and security fixes.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性。如果许多其他开发者正在使用它，这可以给您在代码质量和安全修复方面的信心。
- en: You're not required for maintenance (unless you choose to contribute back to
    it).
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要维护（除非您选择将其贡献回去）。
- en: Ease of use. As with the `field_group` example, it allows people with less development
    expertise to configure a powerful website.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易用性。就像 `field_group` 的例子一样，它允许那些开发经验较少的人配置一个功能强大的网站。
- en: A good learning opportunity. Dive into the module and explore how it is coded.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是一个好的学习机会。深入模块，探索它是如何编码的。
- en: Usually more scalable.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常更具可扩展性。
- en: 'The benefits of custom code include:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义代码的好处包括：
- en: A clean, non-bloated solution to a unique problem.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对独特问题的简洁、非臃肿的解决方案。
- en: Site performance. Large contrib modules with lots of extra functionality will
    negatively affect a site's performance more than clean, well-written code that
    addresses a single issue.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站性能。具有大量额外功能的大型 contrib 模块会对网站性能产生负面影响，而简洁、编写良好的代码只会解决单个问题。
- en: It gives you an opportunity to improve and test your development skills.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为你提供了一个提高和测试你的开发技能的机会。
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored theming in Drupal 8, from what a theme is and how
    to create one, to loading and using CSS and JS assets, as well as templating,
    and how to determine when and why to make use of contributed modules.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Drupal 8 的主题化，从什么是主题以及如何创建一个主题，到加载和使用 CSS 和 JS 资产，以及模板化，以及何时以及为什么使用贡献模块。
- en: In the next chapter, we will explore CKEditor and be introduced to Block API
    for Drupal 8.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 CKEditor，并介绍 Drupal 8 的 Block API。
