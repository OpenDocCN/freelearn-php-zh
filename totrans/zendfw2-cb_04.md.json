["```php\n<?php\nreturn array(\n  'view_manager' =>array(\n    // We want to show the user if the page is not found\n    'display_not_found_reason' => true,\n\n    // We want to display exceptions when the occur\n    'display_exceptions' => true,\n\n    // This defines the doctype we want to use in our \n    // output\n    'doctype' => 'HTML5',\n\n    // Here we define the error templates\n    'not_found_template' => 'error/404',\n    'exception_template' => 'error/index',\n\n    // Create out template mapping \n    'template_map' =>array(\n\n      // This is where the global layout resides\n      'layout/layout' => __DIR__ . '/../view/layout/layout.phtml',\n\n      // This defines where we can find the templates \n      // for the error messages\n      'error/404' => __DIR__ . '/../view/error/404.phtml',\n      'error/index' => __DIR__ . '/../view/error/index.phtml',\n    ),\n\n    // The template path stack tells our view manager \n    // where our templates are stored\n    'template_path_stack' =>array(__DIR__ . '/../view',\n    ),\n  ),\n);\n```", "```php\nuse Zend\\View\\Model\\ViewModel;\n```", "```php\npublic function someAction()\n{\n  $view = new ViewModel();\n\n  // One way of setting a variable in the view \n  $view->setVariable('example', 'Output this to user');\n\n  return $view;\n}\n```", "```php\n<h1><?php echo $this->example ?></h1>\n```", "```php\n$view = new ViewModel(array(\n  'variable_one' => 'Some Variable',\n  'variable_two' => 'Some other Variable',\n));\n```", "```php\n// First we have the view instantiated\n$view = new ViewModel();\n\n// And now we assign a lot of variables at the same time\n$view->setVariables(array(\n  'variable_one' => 'Some Variable',\n  'variable_two' => 'Some other Variable',\n));\n```", "```php\nUsing view helpers\n```", "```php\n<!-- \n  The following will prepend the URL with the base path\n  which can be /website/public/js/script.js e or /js/script.js.\n  The path is something for the basePath to decide.\n-->\n<script src=\"img/script.js'); ?>\">\n</script>\n```", "```php\n<?php\n// This is just a snippet of the code that needs to be\n// there for doctype to be defined.\nreturn array(\n  'view_manager' => array(\n    'doctype' => 'HTML5',\n  ),\n);\n```", "```php\n<?php echo $this->doctype(); ?>\n```", "```php\n<a href=\"<?php echo $this->url(\n    // This is the name we gave the route in our \n    //configuration file\n    'route-name', \n\n    // Give the parameters for the URL, such as the \n    // controller, action or any parameters that should    \n    // be added to the URL\n    array(\n      'controller' => 'someController',\n      'action' => 'anotherAction', \n      'id' => 1234,\n    )); ?>\">Go to this page!</a>\n```", "```php\n<div><?php echo $this->partial_variable; ?></div>\n```", "```php\n<div>Some Content.</div>\n\n<div>\n  <?php echo $this->partial(\n    './partial/partial.phtml', \n    array(\n      'partial_variable' => 'Partial content!',\n    )\n  ); ?>\n</div>\n```", "```php\n$this->someViewHelper('some-parameter');\n```", "```php\n$helper = $this->someViewHelper();\n$helper->someMethod('some-parameter');\n```", "```php\necho $this->person()->getAddress($person);\necho $this->person()->getName($person);\n```", "```php\n<!-- first of all we want to output the doctype -->\n<?php echo $this->doctype(); ?>\n\n<!-- now we add the HTML tag -->\n<html>\n\n<!-- enter our head tag -->\n<head>\n  <!-- we want to output in UTF-8 -->\n  <meta charset=\"utf-8\">\n\n  <!-- let's use the headTitle View Helper to output our \n       website title -->\n  <?php echo $this->headTitle('Awesome website!') ?>\n\n  <!-- make sure mobile browsers get the best of it with \n       the use of the headMeta View Helper, and setting \n       the viewport -->\n  <?php echo $this->headMeta()->appendName(\n    'viewport', \n    'width=device-width, initial-scale=1.0'\n  ) ?>\n\n  <!-- add a favicon.ico file reference for older \n       versions of Internet Explorer, as that doesn't \n       pick it up by itself -->\n  <?php echo $this->headLink(array(\n    'rel' => 'shortcut icon', \n    'type' => 'image/vnd.microsoft.icon', \n\n    // Use the basePath to find our public folder\n    'href' => $this->basePath('/images/favicon.ico')\n  )) ?>\n\n  <!-- add a style sheet to our template -->\n  <?php echo $this->headStyle()->appendStyle(\n    $this->basePath('/style.css')\n  ); ?>\n\n  <!-- now add a javascript that we need as well, which \n       is only used by Internet Explorer version less \n       than 9 -->\n  <?php echo $this->headScript()->prependFile(\n    $this->basePath('/script.js'),\n\n    // Non HTML5 browsers need a type set for script \n    // tags\n    'text/javascript',\n\n    // Add the extra script conditions\n    array(\n      'conditional' => 'lt IE 9',\n    )\n  ); ?>\n</head>\n```", "```php\n<!-- let's continue with our body tag now -->\n<body>\n  <!-- output our main content from our actions -->\n  <?php echo $this->content ?>\n\n  <!-- render any inline scripts that we have -->\n  <?php echo $this->inlineScript(); ?>\n</body>\n\n<!-- we are done here -->\n</html>\n```", "```php\n<h1>404: Page not found!</h1>\n\n<p>\n  <!-- show the message of the 404 error, generated by \n       the framework -->\n  <?php echo $this->message; ?>\n</p>\n\n<!-- there is usually also a separate reason attached, \n     which (if exists) we want to show as well -->\n<?php\n  if (isset($this->reason) && $this->reason) {\n    switch ($this->reason) {\n      case 'error-controller-cannot-dispatch':\n        $reason = 'Could not get dispatch controller.';\n        break;\n      case 'error-controller-invalid':\n        $reason = 'Undispatchablecontroller.';\n        break;\n      case 'error-controller-not-found':\n        $reason = 'Controller could not be found.';\n        break;\n      case 'error-router-no-match':\n        $reason = 'URL could not be matched by router.';\n        break;\n      default:\n        $reason = 'Unknown';\n        break;\n    }\n\n    // Now show the reason to the user\n    echo $reason;\n  }\n```", "```php\n<h1>An error occurred!</h1>\n\n<p>\n  <!-- show the error message, that is the least we can \n       do -->\n  <?php echo $this->message; ?>\n</p>\n\n<!-- now show the exception, if we have turned this on \n     in the configuration -->\n<?php\n  if (isset($this->display_exceptions) && $this->display_exceptions) :\n    // Now let's see if we have an exception, and if it \n    // is the right instance as well\n    if(isset($this->exception) && $this->exception instanceof Exception) :\n?>\n\n<!-- Yup, it is an exception all right -->\n<div>\n  Exception:\n\n  <!--Show which class threw the exception -->\n  <?php echo get_class($this->exception); ?>\n</div>\n\n<!-- Show the message thrown -->\n<h2>Exception message:</h2>\n<div><?php echo $this->exception->getMessage() ?></div>\n\n<!-- And the *beautiful* stack trace as well -->\n<h2>Stack trace:</h2>\n\n<div>\n  <?php echo $this->exception->getTraceAsString() ?>\n</div>\n\n<?phpendif; ?><?phpendif; ?>\n```", "```php\n<div class=\"left\">Some content on the left!</div>\n\n<div class=\"right\">\n  <?php\n    echo $this->action(\n      // The action to call\n      'sidebar',\n\n      // The controller to call\n      'templates',\n\n      // The module to call\n      'application',\n\n      // Parameters to parse along\n      array('show' => true)\n    );\n  ?>\n</div>\n```", "```php\nHello from the sidebar!\n```", "```php\npublic function indexAction() \n{\n  // Instantiate our main view model\n  $view = new ViewModel();\n\n  // Now let's instantiate our child model\n  $child = new ViewModel();\n\n  // For the child we want to render a different \n  // template, namely our sidebar.tpl\n  $child->setTemplate('template/sidebar.tpl');\n\n  // Now add the child to our main view model\n  $view->addChild($child, 'childModel');\n\n  // Return our view model\n  return $view;\n}\n```", "```php\n<div class=\"left\">Some content on the left!</div>\n\n<div class=\"right\">\n  <?php echo $this->childModel; ?>\n</div>\n```", "```php\n<?php\n\nreturn array(\n  'view_manager' =>array(\n    'strategies' => array(\n      // This could also be ViewFeedStrategy if we want \n      // to output as a feed\n      'ViewJsonStrategy',\n    ),\n  ),\n);\n```", "```php\n{\n  \"hello\": \"My name is\",\n  \"first\": \"Terrible Richard\",\n  \"address: {\n    \"street\": \"12 Coronation Street\",\n    \"postcode\": \"SE1 2PE\",\n    \"city\": \"London\"\n  }\n}\n```", "```php\n// Assume we have a controller set up wrapped around \n// this\npublic function indexAction()\n{\n  // Start a new feed\n  $feed = new \\Zend\\Feed\\Writer\\Feed();\n\n  // Set the feed name/title\n  $feed->setTitle('My Awesome Feed!');\n\n  // Set the link to where the feed can be found, and \n  // the format of the feed\n  $feed->setFeedLink(\n    'http://winter.example.com/rss', \n    'atom'\n  );\n\n  // Who is the author of our feed\n  $feed->addAuthor(array(\n     'name' => 'N. Stark',\n     'email' => 'ned@winter.example.com',\n     'uri' => 'http://winter.example.com',\n  ));\n\n  // Add some description to the feed\n  $feed->setDescription('Loremipsum..');\n  $feed->setLink('http://winter.example.com');\n  $feed->setDateModified(time());\n```", "```php\n$data = array(\n  array(\n    'title' => 'Post 1', \n    'link' => 'http://winter.example.com/post/1',\n    'description' => 'Loremipsum..',\n    'date_created' => strtotime('2001-01-01 12:03:23'),\n    'date_modified' => strtotime('2001-02-12 11:05:24'),\n  ),\n\n  // More entries here\n);\n```", "```php\nforeach ($data as $row) {\n  $feed->addEntry(\n    $feed->createEntry()\n         ->setTitle($row['title'])\n         ->setLink($row['link'])\n         ->setDescription($row['description'])\n         ->setDateModified($row['date_modified'])\n         ->setDateCreated($row['date_created'])\n  );\n}\n```", "```php\n// Export our feed to RSS style\n$feed->export('rss');\n\n// Instantiate a new feed model\n$feedModel = new FeedModel();\n\n// Set the created feed in the feed model\n$feedModel->setFeed($feed); \n\n// Action done, return the feed model\nreturn $feedModel;\n```", "```php\n<?php\n\nreturn array(\n  // Add the JSON strategy to the view manager for our \n  // output\n  'view_manager' =>array(\n    'strategies' => array(\n      'ViewJsonStrategy',\n    ),\n  ),\n);\n```", "```php\n<?php\n\nnamespace Restful\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  protected $acceptCriteria = array(\n    'Zend\\View\\Model\\ViewModel' =>array(\n      'text/html',\n    ),\n    'Zend\\View\\Model\\JsonModel' =>array(\n      'application/json',\n      'text/json',\n    ),\n  );\n}\n```", "```php\npublic function indexAction()\n{\n  // Get the right view model that goes with the Accept-\n  // header\n  $viewModel = $this->acceptableViewModelSelector(\n    $this->acceptCriteria\n  );\n\n  // Set the variables in the given view model\n  $viewModel->setVariables(array('output' => array(\n    'one' => 'Row, row, row your boat,',\n    'two' => 'gently down the stream.',\n    'three' => 'Merrily, merrily, merrily, merrily,',\n    'four' => 'life is but a dream.',\n  )));\n\n  // output the view model\n  return $viewModel;\n}\n```", "```php\n<table>\n  <tr>\n    <!-- output our variables -->\n    <?php foreach ($this->output as $col) : ?>\n    <td><?php echo $col ?></td>\n    <?php endforeach; ?>\n  </tr>\n</table>\n```", "```php\n{\"output\":{\"one\":\"Row, row, row your boat,\",\"two\":\"gently down the stream.\",\"three\":\"Merrily, merrily, merrily, merrily,\",\"four\":\"life is but a dream.\"}}\n```", "```php\n<table>\n  <tr>\n    <!-- output our variables -->\n    <td>Row, row, row your boat,</td>\n    <td>gently down the stream. </td>\n    <td>Merrily, merrily, merrily, merrily, </td>\n    <td>life is but a dream.</td>\n  </tr>\n</table>\n```", "```php\n<?php\n\nnamespace XmlOutput\\View\\Renderer;\n\nuse Zend\\View\\Renderer\\PhpRenderer;\n\n/**\n * This is the XML Renderer, which is as you can see \n * empty as we don't really need\n * to do anything to get this one going, the PhpRenderer\n * basically does everything\n * we need. \n */\nclass XmlRenderer extends PhpRenderer {}\n```", "```php\n<?php\n\nnamespace XmlOutput\\View\\Model;\n\nuse Zend\\View\\Model\\ViewModel;\n\n/**\n* This is the XML View Model\n*/\nclass XmlModel extends ViewModel\n{\n\n  /**\n   * XML probably won't need to be captured into a\n   * a parent container by default.\n   *\n   * @var string\n   */\n  protected $captureTo = null;\n\n  /**\n   * XML is usually terminal\n   *\n   * @var bool\n   */\n  protected $terminate = true;\n\n  /**\n   * UTF-8 Default Encoding\n   * @var string\n   */\n  protected $encoding = 'utf-8';\n\n  /**\n   * Content Type Header\n   * @var string\n   */\n  protected $contentType = 'application/xml';\n\n  /**\n   * Set the encoding\n   *\n   * @param string $encoding\n   * @return XmlModel\n   */\n  public function setEncoding($encoding) \n  {\n    $this->encoding = $encoding;\n    return $this;\n  }\n\n  /**\n   * Get the encoding\n   *\n   * @return string\n   */\n  public function getEncoding()\n  {\n    return $this->encoding;\n  }\n```", "```php\n  /**\n   * Set the content type\n   *\n   * @param string $contentType\n   * @return XmlModel\n   */\n  public function setContentType($contentType) \n  {\n    $this->encoding = $contentType;\n    return $this;\n  }\n\n  /**\n   * Get the content type\n   *\n   * @return string\n   */\n  public function getContentType() \n  {\n    return $this->contentType;\n  }\t\n}\n```", "```php\n<?php\n\nnamespace XmlOutput\\View\\Strategy;\n\nuse XmlOutput\\View\\Model\\XmlModel;\nuse XmlOutput\\View\\Renderer\\XmlRenderer;\nuse Zend\\EventManager\\EventManagerInterface;\nuse Zend\\EventManager\\ListenerAggregateInterface;\nuse Zend\\View\\ViewEvent;\n\n/**\n * This is the XML View Strategy\n */\nclass XmlStrategy implements ListenerAggregateInterface\n{\n  /**\n   * @var \\Zend\\Stdlib\\CallbackHandler[]\n   */\n  protected $listeners = array();\n\n  /**\n   * @var XmlRenderer\n   */\n  protected $renderer;\n```", "```php\n  /**\n   * Constructor\n   *\n   * @param XmlRenderer $renderer\n   */\n  public function __construct(XmlRenderer $renderer) \n  {\n    $this->renderer = $renderer;\n  }\n```", "```php\n  /**\n   * Make sure we only use our renderer when we are also \n   * using our XmlModel.\n   *\n   * @param ViewEvent $e\n   * @return null|XmlRenderer\n   */\n  public function selectRenderer(ViewEvent $e) \n  {\n    if (!$e->getModel() instanceof XmlModel) {\n      // This is not our type of model, can't do \n      // anything\n      return;\n    }\n\n    return $this->renderer;\n  }\n\n  /**\n   * We can inject the response now with the XML content \n   * and the appropriate Content-Type header\n   *\n   * @param ViewEvent $e\n   * @return void\n   */\n  public function injectResponse(ViewEvent $e) \n  {\n    if ($e->getRenderer() !== $this->renderer) {\n      // The renderer we got is not ours, returning\n      return;\n    }\n\n    $result = $e->getResult();\n\n    if (is_string($result)) {\n      // String is empty, we cannot output anything\n      return;\n    }\n\n    $model = $e->getModel();\n    $response = $e->getResponse();\n    $response->setContent($result);\n    $headers = $response->getHeaders();\n    $charset = '; charset='. $model->getEncoding(). ';';\n\n    $headers->addHeaderLine(\n      'content-type', 'application/xml'. $charset\n    );\n  }\n```", "```php\n  /**\n   * Let's attach the aggregate to the specified event \n   * manager\n   *\n   * @param EventManagerInterface $events\n   * @param int $priority\n   * @return void\n   */\n  public function attach(EventManagerInterface $events, $priority = 1) \n  {\n    $this->listeners[] = $events->attach(\n          ViewEvent::EVENT_RENDERER, \n          array($this, 'selectRenderer'), \n          $priority\n    );\n\n    $this->listeners[] = $events->attach(\n          ViewEvent::EVENT_RESPONSE, \n          array($this, 'injectResponse'),\n          $priority\n    );\n  }\n\n  /**\n   * We can detach the aggregate listeners from the \n   * specified event manager\n   *\n   * @param EventManagerInterface $events\n   * @return void\n   */\n  public function detach(EventManagerInterface $events) \n  {\n    foreach($this->listeners as $index => $listener) {\n      if ($events->detach($listener)) {\n        unset($this->listeners[$index]);\n      }\n    }\n  }\n}\n```", "```php\n<?php\n\nnamespace XmlOutput\\Service;\n\nuse Zend\\ServiceManager\\FactoryInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\nuse XmlOutput\\View\\Strategy\\XmlStrategy;\n\n/**\n * Creates the service for the Xml Strategy.\n */\nclass ViewXmlStrategyFactory implements FactoryInterface\n{\n  /**\n   * Creates and returns the XML view strategy\n   *\n   * @param ServiceLocatorInterface $serviceLocator\n   * @return XmlStrategy\n   */\n  public function createService(ServiceLocatorInterface $serviceLocator) \n  {\n    return new XmlStrategy($serviceLocator->get('ViewXmlRenderer'));\n  }\n}\n```", "```php\n<?php\n\nnamespace XmlOutput\\Service;\n\nuse XmlOutput\\View\\Renderer\\XmlRenderer;\nuse Zend\\ServiceManager\\FactoryInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\n\n/**\n * Creates the service for the Xml Renderer.\n */\nclass ViewXmlRendererFactory implements FactoryInterface\n{\n  /**\n   * Creates and returns the XML view renderer\n   *\n   * @param ServiceLocatorInterface $serviceLocator\n   * @return XmlRenderer\n   */\n  public function createService(ServiceLocatorInterface $serviceLocator) \n  {\n    $renderer = new XmlRenderer();\n\n    // Set the View resolvers and helper managers.\n    $renderer->setResolver(\n      $serviceLocator->get('ViewResolver')\n    );\n\n    $renderer->setHelperPluginManager(\n      $serviceLocator->get('ViewHelperManager')\n    );\n\n    return $renderer;\n  }\n}\n```", "```php\n<?php\n  return array(\n    // Set our factories, so our service manager can find \n    // them\n    'service_manager' =>array(\n      'factories' => array( \n        'ViewXmlStrategy' => 'XmlOutput\\Service\\ViewXmlStrategyFactory', \n        'ViewXmlRenderer' => 'XmlOutput\\Service\\ViewXmlRendererFactory'\n    ), \n  ), \n\n  // Add our strategy to the view manager for our output\n  'view_manager' =>array(\n    'strategies' => array(\n      'ViewXmlStrategy',\n    ),\n  ),\n);\n```", "```php\n<?php\n\nnamespace XmlOutput;\n\nuse Zend\\Mvc\\ModuleRouteListener;\nuse Zend\\Mvc\\MvcEvent;\n\nclass Module\n{\n  public function onBootstrap(MvcEvent $e)\n  {\n    $eventManager= $e->getApplication()->getEventManager();\n\n    $moduleRouteListener = new ModuleRouteListener();\n    $moduleRouteListener->attach($eventManager);\n  }\n\n  public function getConfig()\n  {\n       return include __DIR__. '/config/module.config.php';\n  }\n\n  public function getAutoloaderConfig()\n  {\n    return array(\n      'Zend\\Loader\\StandardAutoloader' =>array(\n        'namespaces' => array(\n          __NAMESPACE__ => __DIR__ . '/src/' .__NAMESPACE__,\n        ),\n      ),\n    );\n  }\n}\n```", "```php\nreturn array(\n  // This should be an array of module namespaces used \n  // in the application.\n  'modules' => array(\n    'Application',\n\n    // Add our module to this array\n    'XmlOutput',\n  ),\n\n  // After this comes the rest of the file, but that is \n  // irrelevant at the moment.\n);\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse XmlOutput\\View\\Model\\XmlModel;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    return new XmlModel(array(\n      \"some_variable\" => \"Awesome!\",\n      \"why_not_another_one\" => \"While we are here?\"\n    ));\n  }\n}\n```", "```php\n<nodes>\n  <variable_1><?php\n    echo $this->some_variable;\n  ?></variable_1>\n  <variable_2><?php\n    echo $this->why_not_another_one; \n  ?></variable_2>\n</nodes>\n```", "```php\nPHP Fatal error:  Access level to XmlOutput\\View\\Model\\XmlModel::$captureTo must be protected (as in class Zend\\View\\Model\\ViewModel) or weaker in /var/www/module/XmlOutput/src/XmlOutput/View/Model/XmlModel.php on line 0\n```"]