- en: Chapter 11. SEO, Caching, and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Using SEO-friendly URLs in CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CodeIgniter caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging errors with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmarking your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be taking a look at various caching recipes, which can
    be used with CodeIgniter. We'll be using the CodeIgniter caching functionality
    to help us store a data feed and database results--although the data feed and
    database results are really only there as a means to show you how to get data
    into CodeIgniter, so it can cache it--the data input can be anything you wish.
    We'll also look at ways to implement SEO-friendly URLs using CodeIgniter routing.
  prefs: []
  type: TYPE_NORMAL
- en: Using SEO-friendly URLs in CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At some point, you might want to alter how CodeIgniter handles the routing of
    URLs to controllers. By default, CodeIgniter splits a URL into several different
    parts. You obviously have the domain section of the URL (`www.domain.com`), but
    after that there are (usually, but not always) up to three more items, each separated
    by a forward slash. The first item is the controller, the second is the function
    (or method, if you want) in the controller, and the third is a parameter that
    you will pass to the function in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: So, a standard URL in CodeIgniter might look like `www.domain.com/users/edit/1`.
    So, user number `1` is being edited using the `edit` function in the `users` controller--that
    seems simple enough and I'm sure you're familiar with it.
  prefs: []
  type: TYPE_NORMAL
- en: However, there may be times when you wish this to change. It is possible to
    alter what is displayed in the URL in the web browser's address bar to show something
    different from `controller/function/data`. It is possible to set up a rule in
    the `config/routes`.php file, which will map a URL to a controller, but hide this
    from the address bar; for example, you may have a controller named `bulletin`,
    which you wish to be displayed as `news` in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create one file and amend another file, by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/shop.php` file and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `/path/to/codeigniter/config/routes.php` file in your editor and amend
    accordingly (the changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take a look at the following lines in the `config/routes.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, think of them as being made up of a left and a right, in that before the
    `=` sign is left and anything after the `=` sign is right; the left maps to the
    right and the value in the left will be mapped to the value in the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, any URL whose controller name begins with `item`
    will be mapped to the `shop` controller. Let''s look at each rule in turn:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By typing the name of the route into your browser (for example, `http://www.your_web_site_name.com/item`),
    the `item` command will cause CodeIgniter to call the `shop` controller, and within
    that controller the `public function all()` method. Because we defined it in the
    routes file, you will see this in your browser by typing `item` into the URL.
    CodeIgniter maps the requested URL to the path defined in the route rule, and
    (in our example) calls the `shop` controller, which using `__CLASS__` and `__FUNCTION__`
    will write the following output to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, take a look at the URL in the browser address bar, it will still display
    the item, but the text on the screen says it's the `shop` controller that is being
    called. We have now mapped the URL to a controller and the user is none the wiser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the other route rule--`:any`. By typing the name of the
    route into your browser (for example, `http://www.your_web_site_name.com/item/123456`),
    the `item/123456` command will cause CodeIgniter to call the `shop` controller
    and `public function product()` because we defined it in the routes file. In `public
    function product()`, we echo out not only the `__CLASS__` and `__FUNCTION__` names,
    but also the second segment of the URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Which, in this case, is the ID of the product (`12356`), so you will see the
    following screenshot in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The key to this route is the `(:any)` flag in the route mapping rule; `(:any)`
    tells CodeIgniter that the second segment in the URI, whatever it is, should map
    to the `product` function of the `shop` controller. As we're the ones building
    the code, we will know that the second URI segment in the URL is a product ID,
    which we can use to query the database for the details of that product.
  prefs: []
  type: TYPE_NORMAL
- en: Using CodeIgniter caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use CodeIgniter caching to cache (or temporarily store) practically
    anything. As an example of caching with CodeIgniter, we're going to cache an RSS
    feed. We could, of course, cache anything we wanted; however, caching an RSS feed
    is a good place to start. Working with RSS is quite simple and the recipe can
    easily be converted to cache feeds from other sources, such as a call to Twitter,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to create the `/path/to/codeigniter/application/controllers/rss_cache.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the preceding file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s look at the constructor. We''re loading one helper and one driver,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use APC, you'll need to ensure that APC is installed on the environment you're
    working on. If not, you'll need to install it. To do this, visit [http://www.php.net/manual/en/apc.setup.php](http://www.php.net/manual/en/apc.setup.php)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: The URL helper is there as we're using the `redirect()` function and the cache
    driver is there to provide support to help us cache out data, in this case it's
    helping us cache data from the RSS feed--however, it really can be anything.
  prefs: []
  type: TYPE_NORMAL
- en: '`public function index()` first defines the `$rss_feed` variable with the hardcoded
    RSS feed; this is for illustration purposes really. In reality, you will fetch
    the feed using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, it is convenient to hardcode it for this recipe, as by hard coding
    you will see the structure of the feed and know what it should "look" like
  prefs: []
  type: TYPE_NORMAL
- en: The feed has a simple structure containing only three items. The `$raw_feed`
    variable is passed to the PHP `SimpleXMLElement` class, which returns an object
    (`$feed`) for us to work with.
  prefs: []
  type: TYPE_NORMAL
- en: We then use CodeIgniter to check if there exists in cache an item named `rss`;
    if not, we'll loop through the `$feed` object, pulling out the title and description
    for each item in the RSS feed, and concatenate to a string, which is named `$cached_feed`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$cached_feed` string is saved to the cache with the name `rss` for a period
    of 30 seconds (for more on caching durations, refer to the following code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all items in the RSS feed have been processed, we''ll echo out the cache
    item `rss`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get something similar to the following output in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Why 30 seconds? Because it''ll be a good length of time for you to go to your
    browser, run the script, see the preceding output, and quickly dash back to the
    code in your text editor to change something in the feed (such as the title element
    of the third item to `Gigantic Elephants`). Click on **Save**, and go back to
    the browser to refresh, which after 30 seconds (30 seconds since you first ran
    `rss_cache`) should give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Should 30 seconds be too long for you to wait, you can always manually clear
    the cache by running `public function clear_cache()`, which will call the CodeIgniter
    `$this->cache->clean()` function and redirect us back to the `rss_cache` controller
    where the whole process will begin again.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can decrease the length of time a cache stays valid from
    30 seconds to, say, 10 seconds (but in reality, you'll want it to be a length
    of time that you feel is right for your server or data).
  prefs: []
  type: TYPE_NORMAL
- en: 'So now, you can see how to store data in the cache, it doesn''t have to be
    XML or an RSS feed, it really could be data from any source: a database query
    (although CodeIgniter has specific database caching methods for that), a feed
    from a social link (such as a Twitter feed, or from Instagram), or even financial
    data such as the value of the FTSE fetched every 5 minutes (or however long you
    set it).'
  prefs: []
  type: TYPE_NORMAL
- en: Problems you may encounter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're developing on a MAC using MAMP, the chances are the the default caching
    method is XCache. CodeIgniter doesn't have a driver to work with XCache and you'll
    either need to write your own driver (go on be brave), or (as I did) change your
    caching engine to APC.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**APC** (**Alternative PHP Caching**) is a caching service, which in this case
    is provided by MAMP.'
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to tell MAMP to use APC rather than XCache. To do this, open your
    MAMP control panel and click on **Preferences**, then click on the **PHP** tab.
    You should now see a section named **PHP extensions**. In that section should
    be a drop-down list (this is probably set to XCache); choose APC from this list,
    and click on the **OK** button. MAMP will restart, and after this you should be
    good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Logging errors with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging errors which occur within your CodeIgniter application doesn't have
    to be limited to looking at the PHP or Apache logs; you can enable CodeIgniter
    to handle and log errors and other behaviors and events at certain points in your
    code using CodeIgniter's logging functionality. This facility can be particularly
    useful (if you set it up correctly) to track a user's journey and progress through
    the system and should something go wrong with whatever they're doing, you can
    look in the logs and trace what they did and when, and get a better idea of what
    (if at all) went wrong and hopefully think about how to prevent it from occurring
    again.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we're going to look at using the logging functionality within
    CodeIgniter and to track if something goes wrong with an operation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need to set the log reporting level in the config file so that CodeIgniter
    knows which level of logging messages to report on. The log''s folder should also
    have write access, so perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/path/to/codeigniter/application/config/config.php` file and find
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can change the value of the `log_threshold` config array element to one
    of the five states, as shown in the following table:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| State | Usage | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `0` | - | CodeIgniter will not log anything. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `1` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| CodeIgniter will log error messages. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `2` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| CodeIgniter will log debugging messages. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `3` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| CodeIgniter will log information messages. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `4` | All of the above | CodeIgniter will log everything. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: For our recipe, I have set the value to `4` as I want to log any error messages
    or information messages that CodeIgniter might generate for me.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Look for the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that `/path/to/log/folder/` is set correctly in `$config[' log_path']`
    and that the folder specified has write permissions (otherwise, CodeIgniter cannot
    write a log file to that folder).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to use (as it was convenient) the *Using CodeIgniter caching*
    recipe, mentioned earlier in this chapter, and alter it in such a way as to apply
    CodeIgniter logging. In this recipe, we''ve changed its name to `cache_log.php`
    (to keep it separate from `rss_cache.php`). So, if you haven''t already done so
    (don''t forget to change the name, highlighted in the following code):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/cache_log.php` file
    and add the following code to it (the changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all goes well you shouldn''t have any errors, but you should have some `DEBUG`
    data in the config file. When you open that file you should see something similar
    to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the info items we set in the code written in the log; I've highlighted
    them so that they stand out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see that we have added some conditional statements on various stages
    of the controller's execution, checking for the return value of certain CodeIgniter
    functions (the changes are highlighted in the previous code). Depending on that
    returned value (either `TRUE` or `FALSE`), we will write to the logs using the
    CodeIgniter `log_message()` function, but let's take a closer look at those messages
    and when each of them is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, we''ll try to instantiate a new `SimpleXmlElement()` object. If
    we get a returned object, an info message is written to the log (`SimpleXmlElement()`
    was instantiated correctly). If there was an error, we write an error message
    to the log (unable to instantiate `SimpleXmlElement()`); take a look at the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we're using CodeIgniter's logging functionality to write messages
    to the log file, and define those messages as either errors or info; this can
    be helpful in debugging the user's journey as you'll know what is a genuine error,
    and what is information entered by you to help you in the logs.
  prefs: []
  type: TYPE_NORMAL
- en: Logging style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I find it useful to write my log messages like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we're defining the message as info, but we begin
    the message with four asterisks (`****`). This'll make the message stand out in
    the logs as we're viewing them, next comes the `__LINE__` argument (to let you
    know where in the script it was triggered), followed by the actual message--here
    it is the unimaginative--`' - This is a message`.'
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to add `__FILE__`, `__CLASS__`, or `__FUNCTION__` for greater accuracy,
    depending on your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmarking your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Benchmarking can be useful for you as it can let you know how your application
    is coping with the task of computing all your code. It can let you know where
    in your application something is slow, either because of memory constraints or
    perhaps because of a particularly computational intensive block of code. Using
    this information, you can identify whether there are any bottlenecks and if you
    are able to clear them, perhaps by reprogramming or allocating extra resources.
    Here's how it's done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many web applications will be linked to some sort of database and as an example
    of benchmarking database connectivity, we''re going to query a database. To do
    that, we will obviously need a database to connect to. Copy the following MySQL
    code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/bench.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/bench_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `bench.php` controller file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `bench_model.php` model file and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you run the controller bench in your browser, you should see the following
    output on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The output is a loop of the contents of the `bench_table` database table followed
    by the benchmark statistics. I've highlighted the stats for the `batch_insert()`
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: '`BM1 (S)` is the start of the BM1 benchmark, and `BM1 (E)` is the end of the
    BM1 benchmark.'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that it took significantly longer to perform the `batch_insert()`
    operation than the two read operations (the actual processing times will be different
    in your application and probably each time you run the controller; however, the
    BM2 item will almost always be longer, but the times will differ depending on
    the system you're using).
  prefs: []
  type: TYPE_NORMAL
- en: If this were a more complex situation, we could use this information to locate
    bottlenecks in the code and hope to fix them to ensure a more streamlined application.
  prefs: []
  type: TYPE_NORMAL
- en: So, what's happening in the code? There's no library or other resource to load
    as the benchmark system is always loaded by CodeIgniter and is always available
    for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the bench controller, `public function index()` is called and immediately
    runs the `get_people()` function of `bench_model`. This performs an Active Record
    `SELECT` operation on the `bench_table` database table, returning the result object
    to the controller. This is looped over and we echo out each row to display a list
    of rows in the database before the `batch_insert()` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The keen-eyed amongst you will also notice the highlighted lines, we've defined
    the start and end points for CodeIgniter to pay attention to. The first we've
    named `bm1_start` and the second we've named `bm1_stop`. We can call them anything
    we like, but that's what I've decided to call them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then perform the `batch_ insert` operation, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re defining a multidimensional array with the details of people we want
    to add to the database and sending it to the `insert_batch()` function of `bench_model`;
    now the keen eyed among you will again notice the highlighted lines. These are
    the bm2 start and end points. If the `batch_insert()` operation returns `TRUE`
    (it is inserted into the database correctly), we then call the `get_people()`
    model function again, which will return all the records from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Again, here we define (as highlighted in the previous code) the bm3 start and
    end points. That completes our database operations and we move over to reporting
    of the benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We ask CodeIgniter to tell us the execution time between points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'For each bm1, bm2, and bm3, we want to know the time between the points specified
    using the `$this->benchmark->elapsed_time()` function. This function takes two
    arguments: a start point and an end point. For this recipe, we have asked CodeIgniter
    to report the time elapsed between each bm# point (where # is the number 1, 2,
    or 3), but if we wish to we can write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will report the elapsed time between `bm1_start` and `bm2_end`
    (or from the beginning of the first `get_people()` query to the end of the `batch_insert()`
    query).
  prefs: []
  type: TYPE_NORMAL
- en: Think of each `$this->benchmark->mark('bm2_end');` as a checkpoint, and you
    can use `$this->benchmark->elapsed_time('checkpoint_1','checkpoint_2')` to return
    the time elapsed between them.
  prefs: []
  type: TYPE_NORMAL
