- en: Chapter 7. Eloquent… without Laravel!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our journey is close to the end, hero. You learned everything about Eloquent,
    starting from the very basics and going through models, relationships, and other
    topics. You probably started to like it and think about implementing it in your
    next project.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, creating an application without a single SQL query is tempting. Maybe
    you also showed it to your boss and convinced him/her to use it in your next production
    project.
  prefs: []
  type: TYPE_NORMAL
- en: I am so proud of you, hero!
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a little problem. Yeah, the next project isn't so new. It
    already exists, and, despite everything, it doesn't use Laravel! You start to
    shiver. This is so sad because you passed the last week studying this new ORM,
    a really cool one, and then moving forward.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, stop complaining! There is always a solution! You are a developer! Also,
    the solution is not so hard to find. If you want, you can use Eloquent without
    Laravel. Yes, seriously!
  prefs: []
  type: TYPE_NORMAL
- en: Actually, Laravel is not a *monolithic* framework. It is made up of several,
    separate parts, which are combined together to build something greater. However,
    nothing prevents you from using only selected packages in another application.
  prefs: []
  type: TYPE_NORMAL
- en: A really cool idea!
  prefs: []
  type: TYPE_NORMAL
- en: So, what are we going to see in this chapter?
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will explore the structure of the database package and see
    what is inside it. Then, you will learn how to install the `illuminate/database`
    package separately for your project and how to configure it for the first use.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you will encounter some examples. First of all, we will look at the **Eloquent
    ORM**. You will learn how to define models and use them.
  prefs: []
  type: TYPE_NORMAL
- en: Having done this, as a little extra, I will show you how to use the `Query Builder`
    (remember that the `"illuminate/database"` package isn't just Eloquent). Maybe
    you would also enjoy the `Schema Builder` class. I will cover it, don't worry!
  prefs: []
  type: TYPE_NORMAL
- en: À la charge!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the directory structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the database package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ORM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Query and Schema Builders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned before, the key step in order to use Eloquent in your application
    without Laravel is to use the `"illuminate/database"` package.
  prefs: []
  type: TYPE_NORMAL
- en: So, before we install it, let's examine it a little.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the package contents here: [https://github.com/illuminate/database](https://github.com/illuminate/database).'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this is what you will probably see:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Capsule` | The **capsule manager** is a fundamental component. It instantiates
    the service container and loads some dependencies. |'
  prefs: []
  type: TYPE_TB
- en: '| `Connectors` | The database package can communicate with various DB systems.
    For instance, SQLite, MySQL, or PostgreSQL. Every type of database has its own
    connector. This is the folder in which you will find them. |'
  prefs: []
  type: TYPE_TB
- en: '| `Console` | The database package isn''t just Eloquent with a bunch of connectors.
    In this specific folder, you will find everything related to console commands,
    such as `artisan db:seed` or `artisan migrate`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Eloquent` | Every single Eloquent class is placed here. |'
  prefs: []
  type: TYPE_TB
- en: '| `Migrations` | Don''t confuse this with the `Console` folder. Every class
    related to migrations is stored here. When you type `artisan migrate` in your
    terminal, you are calling a class that is placed here. |'
  prefs: []
  type: TYPE_TB
- en: '| `Query` | The Query Builder is placed here. |'
  prefs: []
  type: TYPE_TB
- en: '| `Schema` | Everything related to the Schema Builder is placed here. |'
  prefs: []
  type: TYPE_TB
- en: In the main folder, you will also find some other files. However, don't worry
    as you don't need to know what they are.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the `composer.json` file, take a look at the following `"require"`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the database package has some prerequisites that you can't avoid.
    However, the container is quite small, and it is the same for `contracts` (just
    some interfaces) and `"illuminate/support"`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eloquent uses `Carbon` ([https://github.com/briannesbitt/Carbon](https://github.com/briannesbitt/Carbon))
    to deal with dates in a smarter way. So, if you are seeing this for the first
    time and you are confused, don't worry! Everything is all right.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know what you can find in this package, let's see how to install
    it and configure it for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the database package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the setup. First of all, we will install the package using
    composer as usual. After that, we will configure the capsule manager in order
    to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing the `"illuminate/database"` package is really easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you have to do is to add `"illuminate/database"` to the `"require"` section
    of your `composer.json` file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then type `composer update` in to your terminal, and wait for a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way is to include it with the shortcut in your project folder, obviously
    from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: No matter which method you chose, you just installed the package.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Time to use the capsule manager! In your project, you will use something like
    this to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The config syntax I used is exactly the same you can find in the `config/database.php`
    configuration file. The only difference is that this time you are explicitly using
    an instance of the capsule manager in order to do everything.
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of the code, I am setting up the event dispatcher. You must
    do this if events are required from your project.
  prefs: []
  type: TYPE_NORMAL
- en: However, events are not included by default in this package, so you will have
    to manually add the `"illuminate/events"` dependency to your `composer.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the final step!
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code to your setup file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With `setAsGlobal()` called on the capsule manager, you can set it as a global
    component in order to use it with static methods. You may like it or not; the
    choice is yours. The final line starts up Eloquent, so you will need it.
  prefs: []
  type: TYPE_NORMAL
- en: However, this is also an optional instruction. In some situations you may need
    the Query Builder only.
  prefs: []
  type: TYPE_NORMAL
- en: Then there is nothing else to do! Your application is now configured with the
    database package (and Eloquent)!
  prefs: []
  type: TYPE_NORMAL
- en: Using the ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Eloquent ORM in a non-Laravel application is not a big change. All
    you have to do is to declare your model as you are used to doing. Then, you need
    to call it and use it as you are used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a perfect example of what I am talking about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Exactly as you did with Laravel, the package you are using is the same. So,
    no worries! If you want to use the model you just created, then use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This also applies for relationships, observers, and so on. Everything is the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use the database package and ORM exactly, you would do the same
    thing you did in Laravel; remember to set up the project structure in a way that
    follows the PSR-4 autoloading convention.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Query and Schema Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not just about the ORM; with the database package, you can also use the
    Query and the Schema Builders. Let's discover how!
  prefs: []
  type: TYPE_NORMAL
- en: The Query Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Query Builder is also very easy to use. The only difference, this time,
    is that you are passing through the capsule manager object, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: However, the result is still the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if you like the DB facade in Laravel, you can use the capsule manager
    class in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Schema Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of this book, I showed you the Schema Builder. You learned
    how to use it with migrations, but now, without Laravel, you don't have migrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you can still use the Schema Builder. Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, you used to call the `create()` method of the `Schema facade`.
    This time is a little different: you will use the `create()` method, chained to
    the `schema()` method of the `Capsule` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, you can use any Schema class method in this way. For instance, you
    could call something like following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And you are good to go!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that if you want to unlock some Schema Builder-specific features you
    will need to install other dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: For example, do you want to rename a column? You will need the `doctrine/dbal`
    dependency package.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yeah, this time, it was quite quick.
  prefs: []
  type: TYPE_NORMAL
- en: I decided to add this chapter because many people ask me how to use Eloquent
    without Laravel. Mostly because they like the framework, but they can't migrate
    an already started project in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: Also, I think that it's cool to know, in a certain sense, what you can find
    under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: It is always just about curiosity. Curiosity opens new paths, and you have a
    choice to solve a problem in a new and more elegant way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these few pages, I just scratched the surface. I want to give you some advice:
    explore the code. The best way to write good code is to read good code.'
  prefs: []
  type: TYPE_NORMAL
- en: And now, to the final chapter!
  prefs: []
  type: TYPE_NORMAL
