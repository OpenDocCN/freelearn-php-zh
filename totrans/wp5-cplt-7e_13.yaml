- en: Developing Plugins, Widgets, and an Introduction to REST API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发插件、小工具以及REST API简介
- en: Plugins are a way to add to or extend WordPress' built-in functionalities. In
    [Chapter 5](1f05677b-dcae-4511-9add-b4cf68718507.xhtml)*, Plugins – What They
    Are and Why You Need Them,* you learned how to install them. There are thousands
    of useful plugins (at the time of writing, the official counter at [https://wordpress.org/plugins/](https://wordpress.org/plugins/)
    shows over 55,000 plugins) available from the online WordPress community, and
    they all perform different kinds of functions. In the earlier chapters, we installed
    plugins that catch spam, back up your website, and give you basic SEO features.
    You can also get plugins that manage your podcasts, track your stats, translate
    your content into other languages, and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是添加或扩展WordPress内置功能的一种方式。在[第五章](1f05677b-dcae-4511-9add-b4cf68718507.xhtml)*插件——它们是什么以及为什么你需要它们*中，你学习了如何安装它们。来自在线WordPress社区的插件有成千上万的有用插件（截至写作时，[https://wordpress.org/plugins/](https://wordpress.org/plugins/)上的官方计数器显示超过55,000个插件），它们都执行不同种类的功能。在早期章节中，我们安装了拦截垃圾邮件、备份你的网站以及提供基本SEO功能的插件。你还可以获取管理你的播客、跟踪你的统计数据、将你的内容翻译成其他语言的插件等等。
- en: Sometimes, however, you'll find yourself in a situation where the plugin you
    need just doesn't exist. Luckily, it's quite easy to write a plugin for WordPress
    that you can use on your own website and share with the larger community if you
    want to. All you need is some basic **Hypertext Preprocessor** (**PHP**) knowledge,
    and you can write any plugin you want.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时你会发现你所需要的插件根本不存在。幸运的是，为WordPress编写一个你可以在自己的网站上使用并愿意与更大社区分享的插件相当简单。你所需要的只是一些基本的**超文本预处理器**（**PHP**）知识，你就可以编写任何你想要的插件。
- en: 'This chapter is divided into four major parts, as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为四个主要部分，如下所示：
- en: In the first part, we'll create two plugins using an easy-to-follow, step-by-step
    process.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一部分，我们将通过一个易于遵循的、分步的过程创建两个插件。
- en: In the second part, we'll create a widget using the built-in WordPress widget
    class.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二部分，我们将使用内置的WordPress小工具类创建一个小工具。
- en: In the third part, you will learn what shortcodes are and how to use them.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第三部分，你将学习什么是短代码以及如何使用它们。
- en: In the fourth part, we'll discuss the topic of the REST API.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第四部分，我们将讨论REST API的主题。
- en: Plugins
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: In this section, we'll create a plugin via a simple step-by-step process. We'll
    first see what the essential requirements are, then try out and test the plugin,
    and then briefly discuss the PHP code involved. That said, you should already
    have a basic background in PHP before going into this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一个简单的分步过程创建一个插件。我们首先将看到基本要求是什么，然后尝试并测试插件，然后简要讨论涉及的PHP代码。话虽如此，在进入本章之前，你应该已经具备基本的PHP背景知识。
- en: Building plugins from scratch
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始构建插件
- en: First of all, we're here to learn about WordPress, so in this particular case,
    we will indeed build things from scratch. This is always the best approach to
    get an in-depth look into how a particular technology works.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在这里是为了学习WordPress，所以在这个特定的情况下，我们确实会从头开始构建。这始终是深入了解特定技术工作原理的最佳方法。
- en: However, later on, once you're working with WordPress on a regular basis, and
    managing your own or other people's websites, I advise you to always look for
    an already existing plugin before deciding to write a new one yourself. As I mentioned
    earlier, there are around 55,000 plugins in the official directory alone, not
    to mention all the premium plugins available all over the web. In short, if you
    need some functionality, most likely, there's a plugin for it, so you can just
    go out and get it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦你开始定期使用WordPress，并管理自己的或他人的网站，我建议你在决定自己编写新插件之前，总是先寻找已经存在的插件。如我之前提到的，仅官方目录中就有大约55,000个插件，更不用说网上所有可用的付费插件了。简而言之，如果你需要某种功能，很可能已经有一个插件可以满足你的需求，所以你可以直接出去获取它。
- en: Why is this the recommended approach? If I'm correct, you've chosen to use WordPress
    because you wanted to make your website as functional as possible, with the least
    amount of effort possible. Following this line of thought, using an existing plugin
    simply requires much less effort than building one. Also, many existing plugins
    are already used by thousands of other people and have large communities supporting
    them. Choosing a high-quality plugin is, therefore, a safer path to take.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这是推荐的方法？如果我是对的，你选择使用WordPress是因为你想要尽可能少地付出努力，使你的网站尽可能功能强大。沿着这条思路，使用现有的插件比构建一个插件需要付出更少的努力。此外，许多现有的插件已经被成千上万的其他人使用，并且有庞大的社区支持它们。因此，选择高质量的插件是一条更安全的道路。
- en: I feel that I should emphasize this clearly because experience tells me that
    many young WordPress developers tend to press their peers to create things from
    scratch just for the heck of it, despite the fact that there are other, better
    solutions available.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得我应该清楚地强调这一点，因为经验告诉我，许多年轻的WordPress开发者倾向于强迫他们的同伴从头开始创建东西，尽管有其他更好的解决方案可用。
- en: Moreover, remember that everything that's a derivative work based on WordPress
    is available under the **GNU General Public License **(**GPL**). So, there's nothing
    stopping you from taking an existing plugin, building upon it, making it better,
    and then re-sharing your version with the world. That way, we all win and there's
    no redundant work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，所有基于WordPress的衍生作品都可在**GNU通用公共许可证（GPL）**下获得。因此，没有任何阻止你从现有的插件开始，在此基础上进行改进，使其变得更好，然后将你的版本重新分享给世界的事情。这样，我们都能赢，而且没有重复的工作。
- en: However, before we can do that, we indeed must learn the craft by constructing
    something of our own from start to finish. Onward, then!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们能够做到这一点之前，我们确实必须通过从头到尾构建我们自己的东西来学习这门手艺。那么，继续前进吧！
- en: Plugin code requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件代码要求
- en: 'Just as there were requirements for a theme, there are requirements for a plugin.
    At the very least, your plugin must satisfy the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如对主题有要求一样，对插件也有要求。至少，你的插件必须满足以下条件：
- en: It must be placed in the `wp-content/plugins` directory (inside the root directory
    of WordPress)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须放在`wp-content/plugins`目录中（在WordPress根目录内）
- en: It must have a PHP file with a unique name (that is, a name not used by any
    other plugin in the main `wp-content/plugins` directory)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须有一个具有独特名称的PHP文件（即，一个在主`wp-content/plugins`目录中未被任何其他插件使用的名称）
- en: It must have a specially structured comment at the top of the file
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件顶部必须有一个特殊结构的注释
- en: (see [https://codex.wordpress.org/File_Header](https://codex.wordpress.org/File_Header) for
    more information)
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （有关更多信息，请参阅[https://codex.wordpress.org/File_Header](https://codex.wordpress.org/File_Header)）
- en: Then, of course, you must have some functions or processing code; but WordPress
    will recognize any file that meets these requirements as a plugin.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当然，你必须有一些函数或处理代码；但WordPress会识别任何满足这些要求的文件作为插件。
- en: If your plugin is a simple one, then you can just place a unique PHP file straight
    in your `wp-content/plugins` directory, so it can sit next to the default Hello
    Dolly plugin that WordPress comes with. However, a much better practice is to
    create a subdirectory (again, with a unique name) and place your PHP file there.
    It makes the `wp-content/plugins` directory seem much more organized. Plus, you
    never know when your plugin is going to need some additional files (it's always
    easier to simply add new files to a previously existing `plugin` directory, than
    to restructure the plugin from scratch).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的插件很简单，那么你只需将一个独特的PHP文件直接放在你的`wp-content/plugins`目录中，这样它就可以紧挨着WordPress自带默认的Hello
    Dolly插件。然而，一个更好的做法是创建一个子目录（再次，使用一个独特的名称）并将你的PHP文件放在那里。这使得`wp-content/plugins`目录看起来更有组织。此外，你永远不知道你的插件何时会需要一些额外的文件（与从头开始重新结构插件相比，简单地向现有的`plugin`目录添加新文件总是更容易）。
- en: A basic plugin – adding link icons
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本插件 – 添加链接图标
- en: 'As a demonstration, we will create a simple plugin that adds icons to document
    links within WordPress. For example, if you create a new post and add a link to
    an MP3 file in it, it''ll look something like the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为演示，我们将创建一个简单的插件，该插件可以向WordPress中的文档链接添加图标。例如，如果你创建一篇新文章并在其中添加一个指向MP3文件的链接，它看起来就像以下截图所示：
- en: '![](img/fad653c5-7c77-4970-8f30-0000c54ed13f.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fad653c5-7c77-4970-8f30-0000c54ed13f.png)'
- en: 'Once this plugin is complete, the link will look like the following screenshot
    instead:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个插件完成，链接看起来就像以下截图所示：
- en: '![](img/91e7d9e1-59f8-4301-b6b2-dccde7f9d85c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/91e7d9e1-59f8-4301-b6b2-dccde7f9d85c.png)'
- en: 'To accomplish this, we have to do the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个任务，我们必须做以下几步：
- en: Provide images of the icons that will be used
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供将使用的图标的图片
- en: Have a PHP function that identifies the links to documents and adds a special
    CSS class to them
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个PHP函数可以识别文档链接并为它们添加一个特殊的CSS类
- en: Have a style sheet that creates the CSS classes for displaying the icons
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个样式表可以创建用于显示图标的CSS类
- en: Tell WordPress that whenever it prints the content of a post (that is, using
    the `the_content()` function), it has to run the PHP function first
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉WordPress，每次它打印帖子的内容（即使用`the_content()`函数）时，它必须首先运行PHP函数
- en: Tell WordPress to include the new styles in the `<head>` tag
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉WordPress在`<head>`标签中包含新的样式
- en: Keep this list in mind as we move forward. Once all of these five requirements
    are met, the plugin will be done. So, let's get started!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，请记住这个清单。一旦所有这五个要求都得到满足，插件就会完成。那么，让我们开始吧！
- en: Naming and organizing the plugin files
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件文件的命名和组织
- en: Every plugin should have a unique name, so that it does not come into conflict
    with any other plugin in the WordPress universe. When choosing a name for your
    plugin and the PHP file, be sure to choose something unique. You may even want
    to do a Google search for the name you choose in order to be sure that someone
    else isn't already using it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件都应该有一个独特的名称，这样它就不会与WordPress宇宙中的任何其他插件冲突。在为你的插件和PHP文件选择名称时，请确保选择一个独特的名称。你甚至可能想要在Google上搜索你选择的名称，以确保没有人已经在使用它。
- en: Apart from the main plugin file itself, your plugin can contain any number of
    other files and subdirectories. If the situation calls for it, you can even use
    media files, such as audio and video, to go along with your plugin. Of course,
    additional CSS or JS files (or even full libraries) are allowed as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主要的插件文件本身之外，你的插件可以包含任何数量的其他文件和子目录。如果情况需要，你甚至可以使用媒体文件，如音频和视频，与你的插件一起使用。当然，额外的CSS或JS文件（甚至完整的库）也是允许的。
- en: In this case, as my plugin will be composed of multiple files (a PHP file, a
    style sheet, and some image files), I'm going to create a directory to house my
    plugin. I'll name the plugin Add Document Type Styles New, and place it in a directory
    called `add_doctype_styles_new`. The PHP file, `doctype_styles_new.php`, will
    live in this directory. I've also collected a number of document type icons (provided
    by [https://www.freepik.com/](https://www.freepik.com/) via [https://www.flaticon.com/](https://www.flaticon.com/)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于我的插件将由多个文件组成（一个PHP文件、一个样式表和一些图像文件），我将创建一个目录来存放我的插件。我将把插件命名为“添加文档类型样式新”，并将其放置在名为`add_doctype_styles_new`的目录中。PHP文件`doctype_styles_new.php`将存放在这个目录中。我还收集了一些文档类型图标（由[https://www.freepik.com/](https://www.freepik.com/)通过[https://www.flaticon.com/](https://www.flaticon.com/)提供）。
- en: 'The directory I created for my plugin now looks like the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我为插件创建的目录现在看起来如下所示：
- en: '![](img/facb5b34-df88-47ff-af14-058815d1f693.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/facb5b34-df88-47ff-af14-058815d1f693.png)'
- en: It is best practice to also create directories, such as `images`, `css`, and
    `js` inside your plugin's directory if what you're building will consist of more
    files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建的内容将包含更多文件，最好在插件目录内创建目录，如`images`、`css`和`js`。
- en: Now that I've got the images in my directory, I've taken care of the *first*
    requirement in the list of requirements my plugin has to meet.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经把图片放在了我的目录里，我已经处理了插件必须满足的要求清单中的*第一个*要求。
- en: If your plugin has any unusual installation or configuration options, you may
    also want to include a `readme.txt` file in its directory that explains this.
    This `README` file will be useful, both as a reminder to you, and as an instructional
    document to others who may use your plugin in the future. If you plan to submit
    your plugin to the WordPress plugin directory, you will be required to create
    a `README` file. To get the template for such a file, visit [https://wordpress.org/plugins/developers/](https://wordpress.org/plugins/developers/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的插件有任何不寻常的安装或配置选项，你可能还希望在目录中包含一个`readme.txt`文件来解释这些内容。这个`README`文件将对你自己来说是一个提醒，同时也是对将来可能使用你的插件的其他人的指导性文件。如果你计划将你的插件提交到WordPress插件目录，你将需要创建一个`README`文件。要获取此类文件的模板，请访问[https://wordpress.org/plugins/developers/](https://wordpress.org/plugins/developers/)。
- en: 'As mentioned earlier, your plugin has to start with a special comment that
    tells WordPress how to describe the plugin to users on the plugins page. Now that
    I''ve got my directory and a blank PHP file created, I''ll insert the special
    comment. It has to be structured like the following (this really is fundamental
    and is explained in more detail at [https://codex.wordpress.org/File_Header](https://codex.wordpress.org/File_Header)):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您的插件必须以一个特殊的注释开始，告诉WordPress如何在插件页面上向用户描述插件。现在我已经创建了我的目录和一个空的PHP文件，我将插入这个特殊的注释。它必须按照以下结构（这确实是基础，并在[https://codex.wordpress.org/File_Header](https://codex.wordpress.org/File_Header)中更详细地解释）：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Another good piece of information to have in your plugin is about licensing.
    Most plugins use GPL. This license essentially means that anyone can use, copy,
    and enhance your code, and that they are not allowed to prevent anyone else from
    redistributing it. I've also added a note about the GPL to my plugin's PHP file.
    Remember that all PHP code you encounter in any WordPress plugin is GPL by default.
    However, graphic files, CSS, JavaScript, and other elements might have a different
    license, so be careful when copying other people's work and making it part of
    your own. You can read more about the license at [https://www.gnu.org/copyleft/gpl.html](https://www.gnu.org/copyleft/gpl.html).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的插件中包含关于许可的信息也是一个很好的信息。大多数插件使用GPL。这个许可本质上意味着任何人都可以使用、复制和增强您的代码，并且他们不允许阻止其他人重新分发它。我还在我的插件PHP文件中添加了关于GPL的注释。请记住，您在任何WordPress插件中遇到的PHP代码默认都是GPL。然而，图形文件、CSS、JavaScript和其他元素可能有不同的许可，所以在复制他人的作品并将其作为您自己的作品的一部分时要小心。您可以在[https://www.gnu.org/copyleft/gpl.html](https://www.gnu.org/copyleft/gpl.html)上了解更多关于许可的信息。
- en: That's all about the introductory code. Now, we can add the *meat!*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于介绍性代码的所有内容。现在，我们可以添加*实质内容*了！
- en: Writing the plugin's core functions
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写插件的核心功能
- en: The core of any plugin is the unique PHP code that you bring to the table. This
    is the part of the plugin that makes it what it is. Since this plugin is so simple,
    it only has a few lines of code in the middle.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 任何插件的精髓都是你带来的独特PHP代码。这是使插件成为其自身的部分。由于这个插件非常简单，它中间只有几行代码。
- en: 'The *second* requirement the plugin has to meet is to have a PHP function that
    identifies links to documents and adds a special class to them. The following
    function does just that. Note that in keeping with my efforts to ensure that my
    code is unique, I''ve prefixed both of my functions with `doctype_styles_new`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 插件必须满足的第二个要求是拥有一个PHP函数，用于识别文档链接并为它们添加一个特殊类。以下函数正是这样做的。请注意，为了确保我的代码是独特的，我在两个函数前都加上了`doctype_styles_new`前缀：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the function is given some `$text`, it will perform a search for any HTML
    anchor tag linking to a PDF, DOC, MP3, or ZIP file, and replace it with a class
    to that anchor. Then, the function returns the altered `$text`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数接收到一些`$text`时，它将搜索任何链接到PDF、DOC、MP3或ZIP文件的HTML锚标签，并将其替换为该锚点的类。然后，函数返回修改后的`$text`。
- en: 'The *third* requirement the plugin has to meet is to have a style sheet that
    creates classes for displaying the icons. The following function fetches our style
    sheet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 插件必须满足的第三个要求是拥有一个创建显示图标类的样式表。以下函数获取我们的样式表：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, this function uses the same enqueue mechanism that we used
    in [Chapter 9](eb8f8110-a317-4b1f-afd4-b2bf72714b39.xhtml)*, Developing Your Own
    Theme,* when registering the style sheets for our custom theme. Here''s the CSS
    file that the preceding function fetches (inside `doctype_styles_new.css`):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个函数使用了我们在[第9章](eb8f8110-a317-4b1f-afd4-b2bf72714b39.xhtml)*开发您自己的主题*中注册自定义主题样式表时使用的相同的队列机制。以下是前一个函数获取的CSS文件（在`doctype_styles_new.css`内部）：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Indeed, a very simple file, containing just a handful of styles and icons to
    distinguish our document links!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，一个非常简单的文件，只包含一些样式和图标，用于区分我们的文档链接！
- en: Adding hooks to the plugin
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向插件添加钩子
- en: 'We get our code to actually run when it is supposed to by making use of WordPress
    **hooks**. The way in which plugin hooks work is as follows: at various times
    while WordPress is running, they check to see whether any plugins have registered
    functions to run at that time. If there are, the functions are executed. These
    functions modify the default behavior of WordPress.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用WordPress **钩子**来确保代码在应该运行时实际运行。插件钩子的工作方式如下：在WordPress运行的过程中，它们会检查是否有插件注册了在该时间运行的函数。如果有，这些函数就会被执行。这些函数修改了WordPress的默认行为。
- en: 'There are two kinds of hooks, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的钩子，如下所示：
- en: '**Actions**: Actions are the hooks that the WordPress core launches at specific
    points during execution, or when specific events occur. Your plugin can specify
    that one or more of its PHP functions are executed at these points, using the
    `Action` API.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：动作是WordPress在执行过程中或在特定事件发生时触发的钩子。您的插件可以指定在此时执行一个或多个PHP函数，使用的是`Action`
    API。'
- en: '**Filters**: Filters are the hooks that WordPress launches to modify the text
    of various types before adding it to the database or sending it to the browser
    screen. Your plugin can specify that one or more of its PHP functions is executed
    to modify specific types of text at these times, using the `Filter` API.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤器**：过滤器是WordPress在将文本添加到数据库或发送到浏览器屏幕之前修改各种类型文本时触发的钩子。您的插件可以指定在此时执行一个或多个PHP函数来修改特定类型的文本，使用的是`Filter`
    API。'
- en: This means that you can tell WordPress to run your plugin's functions at the
    same time, when it runs any of its built-in functions. In our case, we want our
    plugin's first function, `doctype_styles_new_regex()`, to run as a filter along
    with WordPress' `the_content()` function (this is the *fourth* requirement a plugin
    has to meet).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以告诉WordPress在它运行任何内置函数的同时运行您的插件函数。在我们的例子中，我们希望我们的插件第一个函数`doctype_styles_new_regex()`作为一个过滤器与WordPress的`the_content()`函数（这是插件必须满足的第四个要求）一起运行。
- en: 'Now, add the following code to the bottom of the plugin:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到插件的底部：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This uses the `add_filter` hook that tells WordPress to register a function
    named `doctype_styles_new_regex()` when it is running the function called `the_content()`.
    By the way, if you have more than one function that you want to add as a filter
    to the content, you can add a third argument to the `add_filter()` function. This
    third argument will be a number representing the load priority (the default value
    is 10, the highest priority is 1, and there are no particular limits for the lowest
    priority—you can even assign values such as 100 or 999), and WordPress will run
    your functions in ascending order.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了`add_filter`钩子，告诉WordPress在运行`the_content()`函数时注册一个名为`doctype_styles_new_regex()`的函数。顺便说一句，如果您想将多个函数添加为内容的过滤器，可以向`add_filter()`函数添加一个第三个参数。这个第三个参数将是一个表示加载优先级的数字（默认值是10，最高优先级是1，最低优先级没有特定的限制——您甚至可以分配值如100或999），WordPress将按升序顺序运行您的函数。
- en: 'All that''s left in our list of requirements that a plugin has to meet is the
    *fifth* requirement—that is, to tell WordPress to include the new styles in the
    `<head>` tag. This is actually done the same way that it''s done for themes, which
    is through the following hook using `add_action()` with the `wp_enqueue_scripts`
    handle:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们插件必须满足的要求列表中剩下的就是第五个要求——即告诉WordPress在`<head>`标签中包含新的样式。这实际上是通过以下钩子完成的，使用`add_action()`与`wp_enqueue_scripts`处理程序：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the complete plugin PHP file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的插件PHP文件：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Make sure that there are no blank spaces before `<?php`. If there are any spaces,
    the PHP code will break, complaining that headers have already been sent. This
    is quite a common mistake that developers stumble into during their initial attempts
    with WordPress plugins. It's also a generally good idea to not use the PHP closing
    tags (`?>`) at the end of your PHP files. It saves you from some of the most unfortunate
    execution errors.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在`<?php`之前没有空白空间。如果有任何空格，PHP代码将会出错，并抱怨已经发送了头部信息。这是开发者在使用WordPress插件初期经常会犯的一个常见错误。同时，不使用PHP文件末尾的关闭标签(`?>`)也是一个一般的好主意。这样可以避免一些不幸的执行错误。
- en: 'Make sure you save and close this PHP file. You can now do one of two things,
    as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您保存并关闭此PHP文件。现在您可以按照以下两种方式之一操作：
- en: Using your FTP client, upload `add_doctype_styles_new/` to your
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您的FTP客户端，将`add_doctype_styles_new/`上传到您的
- en: '`wp-content/plugins/` directory'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`wp-content/plugins/`目录'
- en: Zip up your directory into `add_doctype_styles_new.zip`, and use the plugin
    uploader in `wp-admin` to add this plugin to your WordPress installation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的目录压缩成`add_doctype_styles_new.zip`，并使用`wp-admin`中的插件上传器将此插件添加到您的WordPress安装中
- en: This version of the plugin is available in the code bundle for this chapter,
    inside a subdirectory called `phase 1`. Our plugin files will go through a couple
    of phases before we have the final version.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本的插件包含在本章的代码包中，位于名为`phase 1`的子目录内。我们的插件文件在最终版本完成之前将经历几个阶段。
- en: 'Once the plugin is installed, it will show up on the plugins page, as shown
    in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装后，它将出现在插件页面上，如下截图所示：
- en: '![](img/cc94a249-6e72-4b00-8719-f0e5b32c61c3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc94a249-6e72-4b00-8719-f0e5b32c61c3.png)'
- en: Now, you can activate it and test it out.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以激活它并尝试使用它。
- en: Trying out the plugin
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试插件
- en: 'If you go to view the same post that we created at the beginning of this chapter,
    you''ll see the plugin in action. Here''s the same screenshot again:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看本章开头创建的相同帖子，您将看到插件在起作用。这是相同的截图：
- en: '![](img/dd37702b-594e-4fad-acb9-662044337a2d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd37702b-594e-4fad-acb9-662044337a2d.png)'
- en: You can also try adding a new post with links to PDF, ZIP, or DOC files. Then,
    when you view the post, you'll see that even more icons have been added to it
    by our plugin.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试添加一个包含指向 PDF、ZIP 或 DOC 文件链接的新帖子。然后，当您查看帖子时，您会看到我们的插件添加了更多图标。
- en: Now that you've learned about a basic plugin that uses hooks to piggyback on
    the existing WordPress functionality, let's enhance this plugin by giving the
    user some controls.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了一个使用钩子来利用现有 WordPress 功能的基本插件，让我们通过给用户一些控制权来增强这个插件。
- en: Adding an admin page
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加管理页面函数的钩子
- en: 'Some plugins add a page to `wp-admin` where you or the user can edit plugin
    options. We''ve seen this with W3 Total Cache, Yoast SEO, and more. Now, let''s
    modify our plugin to give the user some control over which document types are
    supported. The following screenshot shows what the new management page will look
    like when we are done:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件会在 `wp-admin` 中添加一个页面，您或用户可以在此编辑插件选项。我们已经在 W3 Total Cache、Yoast SEO 等插件中看到过这种情况。现在，让我们修改我们的插件，让用户能够控制哪些文档类型被支持。以下截图显示了完成后的新管理页面：
- en: '![](img/ef4fb56c-f296-4bae-9943-8cd93dbd944e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef4fb56c-f296-4bae-9943-8cd93dbd944e.png)'
- en: 'First, deactivate the plugin we just wrote. We''ll make changes to it and then
    reactivate it. The following list details the steps we''ll carry out to modify
    the plugin in order to make this new page possible:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，停用我们刚刚编写的插件。我们将对其进行修改，然后重新激活它。以下列表详细说明了我们将执行以修改插件以实现新页面可能的步骤：
- en: Add functions that create an admin page and save the user's input in a new option
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加创建管理页面并保存用户输入的新选项的函数
- en: Modify the `doctype_styles_new_regex()` function so that it retrieves the user's
    input
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `doctype_styles_new_regex()` 函数，使其检索用户的输入
- en: Add hooks for the admin page functions
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加管理页面函数
- en: Let's get started!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Adding management page functions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加管理页面函数
- en: The management page that we will create is going to add an option to `wp-admin`.
    This uses the existing space in the WordPress `options` table in the database,
    so no database modifications are required. The name of this new option must be
    unique. I'm going to call the new option `doctype_styles_new_supportedtypes`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的管理页面将向 `wp-admin` 添加一个选项。这使用数据库中 WordPress `options` 表的现有空间，因此不需要进行数据库修改。这个新选项的名称必须是唯一的。我将把这个新选项命名为
    `doctype_styles_new_supportedtypes`。
- en: 'There are six functions we need to add to the plugin, so that an admin page
    can be added to `wp-admin`. Let''s take a look at the functions, one by one:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向插件中添加六个函数，以便在 `wp-admin` 中添加一个管理页面。让我们逐一查看这些函数：
- en: 'The *first* function adds the new `doctype_styles_new_supportedtypes` option
    when the plugin is activated, and sets the default value as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个函数在插件激活时添加新的 `doctype_styles_new_supportedtypes` 选项，并设置默认值如下：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The *second* function removes the new option when the plugin is deactivated,
    as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个函数在插件停用时移除新的选项，如下所示：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s look at the new *third* function, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看新的第三个函数，如下所示：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This function adds a new item to the Settings menu in `wp-admin` using the
    `add_submenu_page()` function call. This takes six arguments, namely: where the
    options page should be placed, page title, menu link text, the user at the maximum
    level who can access the link, what file to open (none, in this case), and the
    function to call, `supportedtypes_options()`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用 `add_submenu_page()` 函数调用在 `wp-admin` 的设置菜单中添加一个新项目。这需要六个参数，分别是：选项页面应放置的位置、页面标题、菜单链接文本、可以访问链接的最高级别用户、要打开的文件（在本例中为无），以及要调用的函数，`supportedtypes_options()`。
- en: 'The `supportedtypes_options()` function is, in fact, the *fourth* new function
    we are adding:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`supportedtypes_options()` 函数实际上是我们要添加的第四个新函数：'
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function actually displays our new page. It prints a title and checks to
    see whether someone has clicked on the `submit` button; if the `submit` button
    has been clicked on, the `supportedtypes_options()` function updates the options
    and then prints the form.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数实际上显示了我们的新页面。它打印一个标题并检查是否有人点击了`submit`按钮；如果点击了`submit`按钮，`supportedtypes_options()`函数将更新选项然后打印表单。
- en: 'The new *fifth* function we have to add is responsible for updating options
    if the `submit` button has been clicked on, as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须添加的新的*第五*个函数负责在点击`submit`按钮时更新选项，如下所示：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last function we need to add, which is the new *sixth* function, prints
    the form that the users will see. Make sure there are no spaces before or after
    the closing tag (`EOF;`), as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加的最后一个函数，即新的*第六*个函数，打印用户将看到的表单。确保在关闭标签（`EOF;`）前后没有空格，如下所示：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These six functions together take care of adding a link in the menu, adding
    the management page for this link, and updating the new option.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个函数一起负责在菜单中添加链接，添加此链接的管理页面，并更新新的选项。
- en: Modifying the doctype_styles_new_regex() function
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改`doctype_styles_new_regex()`函数
- en: 'Now that the users are able to edit the list of supported document types by
    appending the document types they want, we should have a way of telling the `doctype_styles_new_regex()`
    function to use the user''s list instead of the built-in list. To do so, we need
    to use `get_option(''doctype_styles_new_supportedtypes'')` in our `doctype_styles_new_regex()`
    function. The `get_option()` function will retrieve the value that the user has
    saved in the new option we just created. Modify your `doctype_styles_new_regex()`
    function so that it looks like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户能够通过添加他们想要的文档类型来编辑支持的文档类型列表，我们应该有一种方法告诉`doctype_styles_new_regex()`函数使用用户的列表而不是内置列表。要做到这一点，我们需要在我们的`doctype_styles_new_regex()`函数中使用`get_option('doctype_styles_new_supportedtypes')`。`get_option()`函数将检索用户在我们刚刚创建的新选项中保存的值。修改您的`doctype_styles_new_regex()`函数，使其看起来如下所示：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding hooks
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加钩子
- en: 'We have added our management page functions, but now we have to tell WordPress
    to use them. To do so, we just need to add the following three new hooks:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了我们的管理页面函数，但现在我们必须告诉WordPress使用它们。要做到这一点，我们只需要添加以下三个新钩子：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first hook tells WordPress to add our link to the menu when it creates the
    menu with `admin_menu()`. The next two hooks tell WordPress to call the activation
    and deactivation functions when the plugin is activated or deactivated.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个钩子告诉WordPress在创建`admin_menu()`菜单时添加我们的链接。接下来的两个钩子告诉WordPress在插件激活或停用时调用激活和停用函数。
- en: This version of the plugin is available in the code bundle for this chapter,
    inside a subdirectory called `final`. It is the final version of our plugin.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的版本可以在本章的代码包中找到，位于名为`final`的子目录中。这是我们插件的最终版本。
- en: Trying out the plugin
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试插件
- en: 'We have added all of the new functions. Now it''s time to save the file and
    see what happens. You can go ahead and reactivate the plugin. Now, when you look
    at the Settings menu, you will see that a new link has been added, as demonstrated
    in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了所有的新功能。现在是时候保存文件并看看会发生什么了。您可以继续并重新激活插件。现在，当您查看设置菜单时，您将看到已添加了一个新的链接，如下面的截图所示：
- en: '![](img/69249065-f872-4ec0-b8e6-3453a9231dcd.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/69249065-f872-4ec0-b8e6-3453a9231dcd.png)'
- en: 'Click on the new link to see the management page, as shown in the following
    screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 点击新的链接查看管理页面，如下面的截图所示：
- en: '![](img/223ee559-51fa-42a8-b09b-af44ad3ee3c6.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/223ee559-51fa-42a8-b09b-af44ad3ee3c6.png)'
- en: If you follow the three steps shown in the preceding screenshot on the management
    page (upload the file icon, add a new style to the style sheet, and add the extension
    to the option), then the new document type will be supported.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循管理页面上的前三个步骤（上传文件图标，将新样式添加到样式表中，并将扩展名添加到选项中），则新的文档类型将被支持。
- en: 'There are already a number of ways in which this plugin could be improved.
    Some of them are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有几种方法可以改进这个插件。以下是一些方法：
- en: Instead of forcing the user to upload their new icons using FTP, the plugin
    could allow the user to upload icons directly via the Settings page.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而不是强迫用户使用FTP上传他们新的图标，插件可以允许用户通过设置页面直接上传图标。
- en: The plugin could display the icons for the supported document types on the Settings
    page so that the users see what they look like.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件可以在设置页面上显示支持的文档类型的图标，这样用户就可以看到它们的外观。
- en: The plugin could check to make sure that for every document type in the option
    field there is an existing icon, otherwise, it will display an error.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件可以检查确保在选项字段中的每个文档类型都有一个现有的图标，否则，它将显示错误。
- en: Perhaps you'd like to try to make these changes yourself!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你想亲自尝试这些更改！
- en: Testing your plugins
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的插件
- en: We've tried out our new plugin, so it's probably a good moment to say a word
    or two about testing your plugins and making sure that they don't cause any problems
    for regular users in general.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经测试了我们新的插件，所以现在可能是时候说一两句关于测试你的插件并确保它们不会给普通用户带来任何问题的了。
- en: 'Our particular plugin is a very simple one; the only thing it does is process
    each link it finds inside any post or page''s content, and adds a custom icon
    next to it. However, even such a simple plugin can be a possible security breach
    point. For example, the only place where the user can input anything is the plugins
    section in `wp-admin` (the field handling the supported file types). Now, there
    is a possibility that someone might use this field to input a piece of specific
    PHP code instead of a standard file type; for instance, code that is meant to
    perform a specific action on the server side, and which could result in a serious
    security breach. That is why our `update_supportedtypes_options()` function has
    the following two lines:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件非常简单；它所做的唯一一件事是处理任何帖子或页面内容中找到的每个链接，并在其旁边添加一个自定义图标。然而，即使这样的简单插件也可能成为潜在的安全漏洞点。例如，用户唯一可以输入的地方是`wp-admin`（处理支持文件类型的字段）中的插件部分。现在，有人可能会使用这个字段输入一段特定的PHP代码而不是标准的文件类型；例如，旨在服务器端执行特定操作的代码，这可能导致严重的安全漏洞。这就是为什么我们的`update_supportedtypes_options()`函数有以下两行：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Thanks to them, everything that the user inputs will have all of the PHP and
    HTML tags stripped by `strip_tags()`, and then every character that needs to be
    quoted in database queries will be handled by `addslashes()`. Using such functions
    is a just-in-case practice, but it tends to be something that eventually pays
    off.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了它们，用户输入的所有内容都将通过`strip_tags()`移除所有的PHP和HTML标签，然后需要引号的所有字符将由`addslashes()`处理。使用这样的函数是一种以防万一的做法，但它往往最终会得到回报。
- en: Apart from testing our work against some of the common hacking practices, such
    as code injection or SQL injection, we also need to handle all kinds of unconventional
    uses we can think of. For instance, would anything bad happen if someone put a
    value that's not a standard file type? Or, what if the CSS file goes missing all
    of a sudden? These are just some of the questions a good testing session should
    answer.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将我们的工作与一些常见的黑客攻击手段进行对比测试，如代码注入或SQL注入，我们还需要处理我们所能想到的所有非传统用途。例如，如果有人输入了一个非标准文件类型的值会发生什么？或者，如果CSS文件突然丢失会发生什么？这些问题只是良好测试会回答的一些问题。
- en: Another good way of testing plugins is to hand them over to a few trusted users
    and ask for feedback. Someone who's entirely new to your plugin will usually do
    a way better job of testing it than you, the author.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 测试插件的另一种好方法是将其交给几位可信赖的用户，并征求他们的反馈。对于完全不了解你插件的人来说，他们通常会比你，即插件的作者，做得更好。
- en: Of course, this short section here only scratches the surface of plugin testing
    and code testing in general, so I encourage you to give it a closer look on your
    own. There are many great resources on the web and in your nearest bookstore.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里简短的章节只是触及了插件测试和代码测试的一般表面，所以我鼓励你自己更仔细地研究。网上和在你最近的书店里有很多很好的资源。
- en: A plugin with database access – capturing searched words
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有数据库访问权限的插件——捕获搜索词
- en: We're going to leave the document types plugin behind now, and create a new
    one, featuring active use of a database. Let's create a simple plugin that stores
    all the words that visitors search for (when using the blog's search feature).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把文档类型插件放在一边，创建一个新的，它将使用数据库的活跃功能。让我们创建一个简单的插件，用于存储访客搜索的所有单词（当使用博客的搜索功能时）。
- en: Overall, this plugin is very basic, and doesn't require its own directory like
    the previous plugin that we worked on. That's why this whole plugin will be done
    inside one file: `capture_searches_new.php`. I'm calling the plugin `Capture Searched
    Words New`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个插件非常基础，不需要像我们之前工作的插件那样拥有自己的目录。这就是为什么整个插件都将在一个文件中完成：`capture_searches_new.php`。我将这个插件命名为“捕获搜索词新”。
- en: 'The database table structure for this plugin will be as follows. The table
    name is `wp_searchedwords`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的数据库表结构如下。表名为 `wp_searchedwords`：
- en: '| **Field** | **Type** | **Null** | **Key** | **Default** | **Extra** |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **Field** | **Type** | **Null** | **Key** | **Default** | **Extra** |'
- en: '| `Id` | `INT` | NOT NULL | PRI | - | `auto_increment` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `Id` | `INT` | NOT NULL | PRI | - | `auto_increment` |'
- en: '| `Word` | `VARCHAR(255)` | - | - | NULL | - |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `Word` | `VARCHAR(255)` | - | - | NULL | - |'
- en: '| `created` | `DATETIME` | NOT NULL | - | Today 00:00:01 | - |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `created` | `DATETIME` | NOT NULL | - | Today 00:00:01 | - |'
- en: Now, let's write the plugin code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写插件代码。
- en: Even though I say that the table is named `wp_searchedwords`, it won't always
    be the case. It's all based on the table prefix that's set for your website (the
    default one is indeed `wp_`). Here, I'm going to refer to the table as `wp_searchedwords`
    anyway, for convenience.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我说表名为 `wp_searchedwords`，但这并不总是如此。这完全取决于为你的网站设置的表前缀（默认前缀确实是 `wp_`）。在这里，为了方便，我仍然将表称为
    `wp_searchedwords`。
- en: Getting the plugin to talk to the database
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使插件能够与数据库通信
- en: 'The first part of this plugin should only be run when the plugin is activated.
    This will be the initialization function. One of its tasks is to create or update
    the database table (the table will only be created if it hasn''t been created
    before):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的第一部分应该在插件激活时运行。这将是一个初始化函数。其任务之一是创建或更新数据库表（如果之前尚未创建，则将创建表）：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function connects to the database using various function calls, such as `dbDelta()`,
    `$wpdb->query()`, and `$wpdb->prepare()`. The `dbDelta()` function takes care
    of creating the table or updating it (it does whatever is needed at the time;
    you can find out more at [https://codex.wordpress.org/Creating_Tables_with_Plugins](https://codex.wordpress.org/Creating_Tables_with_Plugins)).
    Apart from this, when dealing with the WordPress database, you can utilize any
    database-related PHP function in existence. Or, you can use WordPress' class member
    function: `$wpdb->get_results()`. The function we're using here also stores the
    searched word in the database table if a search has just been performed. This
    is done through the `$wpdb->query()` and `$wpdb->prepare()` functions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通过各种函数调用连接到数据库，例如 `dbDelta()`、`$wpdb->query()` 和 `$wpdb->prepare()`。`dbDelta()`
    函数负责创建表或更新它（在需要的时候做任何需要的事情；你可以在 [https://codex.wordpress.org/Creating_Tables_with_Plugins](https://codex.wordpress.org/Creating_Tables_with_Plugins)
    上了解更多）。除此之外，当处理 WordPress 数据库时，你可以利用任何存在的数据库相关 PHP 函数。或者，你可以使用 WordPress 的类成员函数：`$wpdb->get_results()`。我们在这里使用的函数还会在搜索刚刚执行后，将搜索词存储在数据库表中。这是通过
    `$wpdb->query()` 和 `$wpdb->prepare()` 函数完成的。
- en: Adding management page functions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加管理页面函数
- en: 'We now need a familiar-looking function that adds a management page to `wp-admin`.
    In this case, we use `add_management_page()` instead of `add_submenu_page()`,
    because this plugin is more of a tool than something that requires settings:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要一个看起来熟悉的函数，该函数将管理页面添加到 `wp-admin` 中。在这种情况下，我们使用 `add_management_page()`
    而不是 `add_submenu_page()`，因为这个插件更像是一个工具，而不是需要设置的东西：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For this plugin, we''re not going to load any custom styling or CSS files.
    The purpose here is to just showcase how database connection can be done, so we''re
    going to keep everything else ultra-simple and minimal. Therefore, the only thing
    we have to do at this point is to write a function that retrieves the information
    from the database and displays it on the new management page (again, everything
    is done through the `$wpdb` object—it''s a class defined by WordPress that contains
    a set of functions that you can use to interact with the database):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此插件，我们不会加载任何自定义样式或 CSS 文件。这里的目的是仅仅展示如何进行数据库连接，所以我们将保持其他一切超简单和最小化。因此，我们现在需要做的只是编写一个函数，该函数从数据库检索信息并在新管理页面上显示（同样，一切通过
    `$wpdb` 对象完成——它是由 WordPress 定义的一个类，其中包含一组你可以用来与数据库交互的函数）：
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That's it. The previous plugin had more functions because data was being captured
    from the user and then saved. Here, that's not necessary.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。之前的插件有更多功能，因为数据是从用户那里捕获并保存的。这里则不需要。
- en: 'Lastly, we just need to add two hooks, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需要添加两个钩子，如下所示：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first hook tells WordPress to run the initialization function when the plugin
    is activated, or when a search is performed. The second hook modifies the `admin_menu`
    to add a link to the new management page.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个钩子告诉 WordPress 在插件激活时或执行搜索时运行初始化函数。第二个钩子修改 `admin_menu` 以添加到新管理页面的链接。
- en: This version of the plugin is available in the code bundle for this chapter, inside
    a subdirectory called `final`. It is the first and final version of the plugin.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的代码包中提供了这个插件的这个版本，位于名为`final`的子目录中。这是插件的第一版也是最终版。
- en: Trying out the plugin
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试插件
- en: As with the last plugin, you can now either upload your plugin using FTP to
    `wp-content/plugins`, or turn it into a ZIP file and add it using the uploader
    to `wp-admin`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个插件一样，你现在可以通过FTP将插件上传到`wp-content/plugins`，或者将其转换为ZIP文件，然后使用上传器添加到`wp-admin`。
- en: 'Once you''ve installed it, activate it. Then, look at the menu under Tools
    and you''ll see a link to the new management page, as demonstrated in the following
    screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，激活它。然后，查看工具下的菜单，你会看到一个指向新管理页面的链接，如下面的截图所示：
- en: '![](img/077b2777-d056-4de2-b5de-317b13d32a64.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/077b2777-d056-4de2-b5de-317b13d32a64.png)'
- en: 'When you click on Capture Searched Words, you''ll see a new page that the plugin
    has created, as shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击“捕获搜索词”时，你会看到一个新页面，这是插件创建的，如下面的截图所示：
- en: '![](img/51b38be7-1b93-4377-8edc-c76fa8e99408.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51b38be7-1b93-4377-8edc-c76fa8e99408.png)'
- en: 'As you can see, I did perform some searches beforehand just to have something
    to show on this new page. You can do the same by placing a search field widget
    in your sidebar (as shown in the following screenshot), and then experimenting
    with different search words and phrases. The plugin will pick them all up and
    display the most searched ones in its section in `wp-admin`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我事先进行了一些搜索，以便在这个新页面上展示一些内容。你可以通过在你的侧边栏中放置搜索字段小部件（如下面的截图所示）并尝试不同的搜索词和短语来做到这一点。插件将收集所有这些内容，并在`wp-admin`中的其部分显示搜索次数最多的内容：
- en: '![](img/78b4a7c6-e0cb-427d-bc8e-4a19bf67a823.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78b4a7c6-e0cb-427d-bc8e-4a19bf67a823.png)'
- en: Building a plugin for the block-based editor
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为基于块的编辑器构建插件
- en: As you know by now, there's a new content editor in WordPress that's been introduced
    in the 5.0 version of the platform. Essentially, it does away with the previous
    single editing window and instead, allows the user to work with individual content
    blocks, placing them one after another. When put together, all those blocks construct
    the final blog post. That's all fine and dandy for the user, but what does it
    mean for the plugin developer? A handful of things!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，WordPress中有一个新的内容编辑器，这是在平台5.0版本中引入的。本质上，它废除了之前的单一编辑窗口，相反，允许用户使用单个内容块，一个接一个地放置。当所有这些块组合在一起时，就构成了最终的博客文章。这对用户来说很好，但对于插件开发者来说意味着什么呢？一些事情！
- en: Firstly, building a plugin for a block-based editor is very different from building
    standard plugins like we've been doing in this chapter. While you can build those
    classic plugins with just a basic knowledge of PHP and HTML, building for the
    block-based editor is a bit more complex. It involves setting up and mastering
    additional web technologies. You need things such as **npm**, **Node.js**, and **webpack**,
    not to mention that you also need to be comfortable working with JavaScript in
    general. Teaching all of this is a large-enough topic for its own book. So, instead
    of doing that, I'm going to point you to some external sources where you can begin
    your adventure with the block-based editor. However, before I do that, let's summarize
    briefly what the general idea of building for the editor is and what is possible.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为基于块的编辑器构建插件与我们在本章中构建的标准插件非常不同。虽然你可以仅凭对PHP和HTML的基本知识构建那些经典插件，但为基于块的编辑器构建则要复杂得多。这涉及到设置和掌握额外的网络技术。你需要像**npm**、**Node.js**和**webpack**这样的东西，更不用说你还必须熟悉JavaScript。教所有这些内容足以写一本书。所以，而不是这样做，我将向你指出一些外部资源，你可以从这里开始你的基于块的编辑器冒险。然而，在我这样做之前，让我们简要总结一下为编辑器构建的一般想法和可能实现的内容。
- en: 'The new editor accepts two main types of elements, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 新编辑器接受两种主要类型的元素，如下所示：
- en: Blocks
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块状元素
- en: Sidebar sections
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏部分
- en: In other words, as a plugin developer, you can either create new blocks to be
    included in the editor, or new sidebar entries to customize the fine details about
    your plugin's functionality, or both.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，作为一个插件开发者，你可以创建新的块以包含在编辑器中，或者创建新的侧边栏条目以自定义插件功能的相关细节，或者两者都做。
- en: 'I''m sure you know what a block is at this point, so let me show you an example
    of a good sidebar use in the new editor. It comes from the Yoast SEO plugin ([https://wordpress.org/plugins/wordpress-seo/](https://wordpress.org/plugins/wordpress-seo/);
    we discussed this in [Chapter 5](1f05677b-dcae-4511-9add-b4cf68718507.xhtml),
    *Plugins - What They Are and Why You Need Them*). If the user has the plugin enabled
    on their site, and they proceed to work on a new blog post, they''ll see this
    new sidebar section in the top-right corner of the editor, as demonstrated in
    the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你现在一定知道什么是块了，让我给你展示一个在新编辑器中良好侧边栏使用的例子。它来自Yoast SEO插件([https://wordpress.org/plugins/wordpress-seo/](https://wordpress.org/plugins/wordpress-seo/);我们已在[第5章](1f05677b-dcae-4511-9add-b4cf68718507.xhtml)中讨论过)，如果用户在他们的网站上启用了这个插件，并且他们继续撰写一篇新的博客文章，他们将在编辑器的右上角看到这个新的侧边栏部分，如下面的截图所示：
- en: '![](img/cba766ff-fb2a-4f64-877e-acb598e89bc4.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cba766ff-fb2a-4f64-877e-acb598e89bc4.png)'
- en: It allows the user to tune up the SEO parameters of their post. The thing worth
    noticing is how well the plugin's block integrates with the rest of the editor's
    user interface. This seamless integration is the whole goal of building plugins
    with the block-based editor in mind.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许用户调整他们文章的SEO参数。值得注意的一点是插件块如何与编辑器用户界面的其余部分良好集成。这种无缝集成是构建基于块的编辑器插件的整体目标。
- en: The same thing goes if you want to build a plugin that enables new blocks. They
    also need to use the same interface conventions as the default blocks that come
    with WordPress built in. Here's an example of a plugin that does exactly that.
    It's called Otter blocks ([https://wordpress.org/plugins/otter-blocks/](https://wordpress.org/plugins/otter-blocks/)).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要构建一个启用新块的插件，它们也需要使用与WordPress内置的默认块相同的界面约定。以下是一个做这件事的插件示例。它被称为Otter blocks([https://wordpress.org/plugins/otter-blocks/](https://wordpress.org/plugins/otter-blocks/))。
- en: 'When you install and activate it, you''ll get a whole set of new blocks, and
    the best part is that they blend in with the default blocks perfectly. For example,
    one of the blocks included is the **Sharing Icons** block. The following screenshot
    shows what it looks like:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装并激活它时，你会获得一套全新的块，最好的部分是它们与默认块完美融合。例如，包含的一个块是**共享图标**块。以下截图显示了它的样子：
- en: '![](img/3cc96bbb-a45e-47f2-9791-7d9286174b9d.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3cc96bbb-a45e-47f2-9791-7d9286174b9d.png)'
- en: As you can see, it has the same controls and similar options to all of the other
    blocks. Of course, this plugin is a fairly complex creation, built by a team of
    developers, and you surely don't have to make your first block plugin similarly
    impressive.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它具有与其他所有块相同的控件和类似选项。当然，这个插件是一个相当复杂的创作，由一个开发团队构建，你当然不必让你的第一个块插件有同样令人印象深刻。
- en: That said, you might be notice one thing in particular as it relates to the
    block-based editor; that is, what if your plugin doesn't require creating any
    new blocks or sidebar elements? In such a case, you don't need to trouble yourself
    with the editor at all. The two plugins we've created in this chapter so far don't
    use the editor in any way, so making your plugin compatible with the editor certainly
    isn't a must.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你可能特别注意到与基于块的编辑器相关的一点；那就是，如果你的插件不需要创建任何新的块或侧边栏元素呢？在这种情况下，你根本不需要麻烦自己使用编辑器。我们在这章中迄今为止创建的两个插件根本不使用编辑器，所以让你的插件与编辑器兼容绝对不是必须的。
- en: 'To begin your adventure with the block-based editor, read this two-part guide
    on how to adapt your plugin for the block editor: part 1 can be found at [https://www.codeinwp.com/blog/adapt-your-plugin-for-gutenberg-block-api/](https://www.codeinwp.com/blog/adapt-your-plugin-for-gutenberg-block-api/) and
    part 2 is available at [https://www.codeinwp.com/blog/make-plugin-compatible-with-gutenberg-sidebar-api/](https://www.codeinwp.com/blog/make-plugin-compatible-with-gutenberg-sidebar-api/).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用基于块的编辑器的冒险，请阅读这篇两部分的指南，了解如何为块编辑器适配你的插件：第一部分可以在[https://www.codeinwp.com/blog/adapt-your-plugin-for-gutenberg-block-api/](https://www.codeinwp.com/blog/adapt-your-plugin-for-gutenberg-block-api/)找到，第二部分可在[https://www.codeinwp.com/blog/make-plugin-compatible-with-gutenberg-sidebar-api/](https://www.codeinwp.com/blog/make-plugin-compatible-with-gutenberg-sidebar-api/)找到。
- en: Additionally, you can experiment with the free Gutenberg Boilerplate plugin
    ([https://github.com/HardeepAsrani/gutenberg-boilerplate](https://github.com/HardeepAsrani/gutenberg-boilerplate)),
    which delivers the minimal block editor development setup and examples inside
    a single package. There's one example block, and one example sidebar included.
    You can build upon these elements when creating your own block-ready plugin.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以尝试免费的Gutenberg模板插件([https://github.com/HardeepAsrani/gutenberg-boilerplate](https://github.com/HardeepAsrani/gutenberg-boilerplate))，它提供了一个最小化的块编辑器开发设置和示例，全部包含在一个包中。包含一个示例块和一个示例侧边栏。你可以在创建自己的块准备插件时基于这些元素进行构建。
- en: Learning more
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习更多
- en: 'There are hundreds of hooks available in WordPress—way too many to cover in
    this book. You can learn more about them by going online. Start out at these online
    reference sites:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress中有数百个钩子可用——本书中难以全部涵盖。你可以通过上网了解更多关于它们的信息。从这些在线参考网站开始：
- en: The *Plugin API* article contains very thorough information about writing plugins
    and using hooks, at: [https://codex.wordpress.org/Plugin_API](https://codex.wordpress.org/Plugin_API).
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件API**文章包含了关于编写插件和使用钩子的非常详细的信息，网址为[https://codex.wordpress.org/Plugin_API](https://codex.wordpress.org/Plugin_API)。'
- en: For a complete list of action hooks, visit [https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference).
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看完整的动作钩子列表，请访问[https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference)。
- en: For a complete list of filter hooks, visit [https://codex.wordpress.org/Plugin_API/Filter_Reference](https://codex.wordpress.org/Plugin_API/Filter_Reference).
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看完整的过滤器钩子列表，请访问[https://codex.wordpress.org/Plugin_API/Filter_Reference](https://codex.wordpress.org/Plugin_API/Filter_Reference)。
- en: You may also want to take a step back and look at the general *Plugin Resources*
    page in the WordPress Codex at [https://codex.wordpress.org/Plugin_Resources](https://codex.wordpress.org/Plugin_Resources).
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能还想退一步查看WordPress Codex中的通用**插件资源**页面，网址为[https://codex.wordpress.org/Plugin_Resources](https://codex.wordpress.org/Plugin_Resources)。
- en: 'Another page that you might find very helpful is the new *Code Reference* for
    developers: [https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/).'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个你可能觉得非常有用的页面是针对开发者的新**代码参考**：[https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/)。
- en: A key resource to bookmark if you want to build plugins for the new block-based
    editor is the *Gutenberg Handbook*, available at [https://wordpress.org/gutenberg/handbook/](https://wordpress.org/gutenberg/handbook/).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要为新的基于块的编辑器构建插件，一个关键的资源是**Gutenberg手册**，可在[https://wordpress.org/gutenberg/handbook/](https://wordpress.org/gutenberg/handbook/)找到。
- en: If you want to submit your plugin to the WordPress plugin repository, you'll
    need to take steps similar to those that you took when preparing a theme, and
    you'll also need to get hooked up to the WordPress SVN repository. Learn more
    about how to submit a plugin to the WordPress plugin repository at [https://developer.wordpress.org/plugins/wordpress-org/](https://developer.wordpress.org/plugins/wordpress-org/).
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要将你的插件提交到WordPress插件仓库，你需要采取与准备主题时类似的步骤，并且你还需要连接到WordPress SVN仓库。有关如何将插件提交到WordPress插件仓库的更多信息，请参阅[https://developer.wordpress.org/plugins/wordpress-org/](https://developer.wordpress.org/plugins/wordpress-org/)。
- en: Widgets
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小工具
- en: Writing a widget bears some similarities to writing a plugin. In some ways,
    it's even easier because there is a widget class that you can leverage for some
    of the functionalities. In other ways, it's also a bit more time-consuming as
    there's a lot of mandatory code that every widget has to feature.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 编写小工具与编写插件有一些相似之处。在某些方面，它甚至更容易，因为你可以利用小工具类来实现一些功能。在其他方面，它也可能更耗时，因为每个小工具都必须包含大量的强制代码。
- en: Custom tag cloud widget
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义标签云小工具
- en: 'In this section, we''ll see how to write a widget that displays a custom tag
    cloud that we can then place in the sidebar. There will also be the possibility
    to change the title of the widget, and although this is a tag cloud widget, we''ll
    be able to switch tags to categories and display them using a tag-cloud-like style
    as well. In its final form, the widget will look like the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何编写一个显示自定义标签云的小工具，然后我们可以将其放置在侧边栏中。还将有可能更改小工具的标题，尽管这是一个标签云小工具，我们仍然能够将标签切换为类别，并以类似标签云的风格显示它们。最终形式的小工具将类似于以下截图：
- en: '![](img/3366b609-14b4-4e08-a259-1e061861bc6a.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3366b609-14b4-4e08-a259-1e061861bc6a.png)'
- en: 'Just as a comparison, here''s what the standard tag cloud widget (the native
    one in WordPress) looks like:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较，这里展示的是标准标签云小部件（WordPress 中的原生小部件）的样子：
- en: '![](img/e000c58b-eae6-4900-96c3-e9be9680a925.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e000c58b-eae6-4900-96c3-e9be9680a925.png)'
- en: Let's get started!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Naming our widget
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的小部件命名
- en: In this case, we're going to create the widget as a standalone plugin. So, just
    like any other plugin, it needs a unique name and a unique appearance in the `wp-content/plugins`
    directory.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将创建一个独立的小部件插件。所以，就像任何其他插件一样，它需要一个独特的名称，并在 `wp-content/plugins` 目录中有一个独特的出现。
- en: I encourage you to search the web whenever you're creating a new widget or plugin,
    just to make sure that there's nothing out there going by the same name. On top
    of that, use a namespace as a prefix with every filename (and function name) that
    you're creating. For example, mine is `kk_`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你在创建新的小部件或插件时，随时在网络上搜索，以确保没有其他东西使用相同的名称。除此之外，使用命名空间作为每个文件名（和函数名）的前缀。例如，我的命名空间是
    `kk_`。
- en: I'll name the new plugin file (which holds the widget) `kk_tag_cloud_widget.php`,
    and put it in its own `kk_tag_cloud_widget` directory inside `wp-content/plugins`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我将命名新的插件文件（包含小部件）为 `kk_tag_cloud_widget.php`，并将其放入 `wp-content/plugins` 目录下的
    `kk_tag_cloud_widget` 目录中。
- en: 'This main PHP file starts just like any other plugin, with the following declaration:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主要的 PHP 文件开始就像任何其他插件一样，以下是一个声明：
- en: '[PRE20]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The widget structure
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件结构
- en: 'When you are building a widget using the widget class, your widget needs to
    have the following structure:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用小部件类构建小部件时，你的小部件需要以下结构：
- en: '[PRE21]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: My unique widget name for this project is `KK_Widget_Tag_Cloud`. Now, let's
    go over each of the preceding functions one by one and understand what's going
    on.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这个项目创建的唯一小部件名称是 `KK_Widget_Tag_Cloud`。现在，让我们逐个回顾前面的函数，并了解它们的作用。
- en: The widget initiation function
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件初始化函数
- en: 'Let''s start with the widget initiation function. Before we add anything to
    it, it looks like the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从小部件初始化函数开始。在我们添加任何内容之前，它看起来如下所示：
- en: '[PRE22]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this function, which is the constructor of the class, we initialize various
    things that the `WP_Widget` class is expecting. The first two variables, to which
    you can give any name you want, are just a handy way to set the two array variables
    expected by the third line of code.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，它是类的构造函数，我们初始化 `WP_Widget` 类期望的各种东西。前两个变量，你可以给它们任何你想要的名称，只是设置两个数组变量的便捷方式，这是第三行代码期望的。
- en: 'Let''s take a look at these three lines of code, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这三行代码，如下所示：
- en: The `$widget_ops` variable is where you can set the class name, which is given
    to the `div` widget itself, and the description, which is shown in `wp-admin`
    on the widgets page.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$widget_ops` 变量是你可以设置类名的地方，这个类名是给 `div` 小部件本身的，还有描述，这个描述在 `wp-admin` 的小部件页面上显示。'
- en: The `$control_ops` variable is where you can set options for the control box
    in `wp-admin` on the widgets page, such as the width and height of the widget,
    and the ID prefix used for the names and IDs of the items inside. For my basic
    widget, I'm not going to use this variable (as it's optional).
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$control_ops` 变量是你可以设置 `wp-admin` 的小部件页面上控制框的选项的地方，例如小部件的宽度和高度，以及用于内部项目和名称及
    ID 的前缀。对于我的基本小部件，我不会使用这个变量（因为它不是必需的）。'
- en: When you call the parent class's constructor, `WP_Widget()`, you'll tell it
    the widget's unique ID, the widget's display title, and pass along the two arrays
    you created.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你调用父类的构造函数 `WP_Widget()` 时，你需要告诉它小部件的唯一 ID、小部件的显示标题，并传递你创建的两个数组。
- en: 'For this widget, my code now looks like the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个小部件，我的代码现在看起来如下所示：
- en: '[PRE23]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The widget form function
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件表单函数
- en: 'The widget form function has to be named `form()`. You may not rename it if
    you want the widget class to know what its purpose is. You also need to have an
    argument in there, which I''m calling `$instance`, which the class also expects.
    This is where the current widget settings are stored. This function needs to have
    all of the functionalities to create the form that users will see when adding
    the widget to a sidebar. Let''s look at some abbreviated code and then explore
    what it''s doing, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件表单函数必须命名为 `form()`。如果你想让小部件类知道它的目的，你不得重命名它。你还需要有一个参数，我称之为 `$instance`，这个类也期望它。这是当前小部件设置存储的地方。这个函数需要包含创建用户在添加小部件到侧边栏时将看到的表单的所有功能。让我们看看一些简化的代码，然后探索它在做什么，如下所示：
- en: '[PRE24]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'First, you use a WordPress function named `wp_parse_args()`, which creates
    an `$instance` array that your form will use. What''s in it depends on what defaults
    you''ve set and what settings the user has already saved. Then, you create form
    fields. Note that for each form field, I make use of the built-in functions that
    will create unique names and IDs and input the existing values, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你使用一个名为 `wp_parse_args()` 的WordPress函数，该函数创建一个 `$instance` 数组，你的表单将使用它。里面的内容取决于你设置的默认值和用户已经保存的设置。然后，你创建表单字段。注意，对于每个表单字段，我使用了内置的函数，这些函数将创建唯一的名称和ID，并输入现有值，如下所示：
- en: '`$this->get-field_id()` creates a unique ID based on the widget instance (remember,
    you can create more than one instance of this widget).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->get-field_id()` 根据小部件实例创建一个唯一的ID（记住，你可以创建这个小部件的多个实例）。'
- en: '`$this->get_field_name()` creates a unique name based on the widget instance.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->get_field_name()` 根据小部件实例创建一个唯一的名称。'
- en: The `$instance` array is where you will find the current values for the widget,
    whether they are defaults or user-saved data.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$instance` 数组是找到小部件当前值的地方，无论它们是默认值还是用户保存的数据。'
- en: 'All the other code in there is just regular PHP and HTML. Note that if you
    give the user the ability to set a title, name that field `title`, and WordPress
    will show it on the widget form when it''s minimized. The widget form this will
    create will look like the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 里面的所有其他代码都是常规的PHP和HTML。注意，如果你允许用户设置标题，请将此字段命名为 `title`，WordPress将在最小化时在表单上显示它。这个表单将创建如下所示：
- en: '![](img/cc70ea47-8e76-40b5-b93f-84b45576ba91.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc70ea47-8e76-40b5-b93f-84b45576ba91.png)'
- en: The widget save function
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件保存函数
- en: 'When a user clicks on the Save button on the widget form, WordPress uses AJAX
    to run your save function. You need to be sure to save whatever the user types
    in, which is all we''re doing in this case, but you can put other functionalities
    here if it''s appropriate for your widget (for example, database interactions,
    conversions, calculations, and so on). The final code for this function is as
    follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击小部件表单上的保存按钮时，WordPress会使用AJAX来运行你的保存函数。你需要确保保存用户输入的所有内容，在这个例子中，我们就是这样做的，但如果你觉得适合你的小部件（例如，数据库交互、转换、计算等），你可以在这里添加其他功能。这个函数的最终代码如下：
- en: '[PRE25]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Be sure this function is named `update()` and is prepared to accept two instances,
    one with the old data and one with the just-submitted data. You can write your
    code to check `$new_instance` for problems, and thus, return `$old_instance` if
    the new one isn't valid. The `$instance` data you return will be what's shown
    in the update widget form.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 确保这个函数名为 `update()`，并准备好接受两个实例，一个包含旧数据，一个包含刚刚提交的数据。你可以编写代码来检查 `$new_instance`
    是否有问题，因此，如果新的实例无效，则返回 `$old_instance`。你返回的 `$instance` 数据将显示在更新小部件表单中。
- en: The widget print function
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件打印函数
- en: 'The third main function in your widget class is the one that is called by the
    sidebar when it''s time to actually show the widget to people visiting the website.
    It needs to retrieve any relevant saved user data and print out information for
    the website visitor. In this case, our final print function looks like the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的小部件类中，第三个主要函数是在侧边栏需要实际向访问网站的人展示小部件时被调用的。它需要检索任何相关的已保存用户数据，并向网站访客打印信息。在这种情况下，我们的最终打印函数如下所示：
- en: '[PRE26]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding function calls one more helper function responsible for fetching
    the current taxonomy. It is a very simple one, though, as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数调用了一个额外的辅助函数，该函数负责获取当前分类法。虽然它非常简单，代码如下：
- en: '[PRE27]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The first thing I do in the main function is to extract the data in the instance,
    which contains the information the website administrator had saved when filling
    out the widget form. Then, the widget takes a look into the selected taxonomy
    (tags or categories) and displays all of the individual items as a simple one-line
    list.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在主函数中，我首先提取实例中的数据，这些数据包含网站管理员在填写小部件表单时保存的信息。然后，小部件查看所选的分类法（标签或类别），并以简单的单行列表显示所有单个项目。
- en: Custom widget styles
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义小部件样式
- en: Our small widget has its own style sheet that needs to be included in the current
    theme's `head` section, like any other style sheet.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小部件有自己的样式表，需要包含在当前主题的`head`部分，就像任何其他样式表一样。
- en: 'The file is named `kk_tag_cloud_widget.css` and contains the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名为 `kk_tag_cloud_widget.css`，包含以下内容：
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Nothing fancy, just a set of classes that will make sure that the widget looks
    great. The only thing we have to do with this style sheet is enqueue it through
    a standard WordPress hook. Place the following code in your plugin''s main file:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么花哨的，只是一组确保小工具看起来很棒的类。我们唯一需要对这个样式表做的事情是通过标准的WordPress钩子将其排队。在你的插件主文件中放置以下代码：
- en: '[PRE29]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Initiating and hooking up the widget
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和连接小工具
- en: 'That''s it for widget functionality! Now, you just need to add a little piece
    of code that will hook the widget up to the rest of WordPress, as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 小工具功能到此结束！现在，你只需要添加一小段代码，将小工具与WordPress的其他部分连接起来，如下所示：
- en: '[PRE30]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This tells WordPress that when it initiates widgets, it should be sure to register
    our new widget.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉WordPress，当它启动小工具时，必须确保注册我们新的小工具。
- en: This version of the widget is available in the code bundle for this chapter,
    inside a subdirectory called `phase 1`. We'll still be adding one more feature
    before we can call it the final version.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本的小工具包含在本章的代码包中，位于名为`phase 1`的子目录内。在我们将其称为最终版本之前，我们还会添加一个新功能。
- en: Trying out the widget
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试使用小工具
- en: 'Your widget is ready to go! Let''s try this widget we have created now:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你的小工具已经准备好了！现在让我们尝试一下我们创建的这个小工具：
- en: Save all your changes, and upload your widget to the `wp-content/plugins` directory.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，并将你的小工具上传到`wp-content/plugins`目录。
- en: Go to the Plugins section and you'll see your widget waiting to be activated,
    as usual.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往插件部分，你会看到你的小工具正等待被激活，就像往常一样。
- en: 'After you click on the Activate button, you can navigate to Appearance | Widgets.
    You''ll see the widget waiting to be added to a sidebar, as demonstrated in the
    following screenshot:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击激活按钮后，你可以导航到外观 | 小工具。你会看到小工具等待被添加到侧边栏，如下面的截图所示：
- en: '![](img/7e8acbb5-f51c-4da8-92b3-65b9d4c5c802.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e8acbb5-f51c-4da8-92b3-65b9d4c5c802.png)'
- en: 'Drag the widget to a sidebar, and then click on the little downward arrow to
    edit it. You''ll see the options slide down, as shown in the following screenshot:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将小工具拖到侧边栏，然后点击小箭头进行编辑。你会看到选项滑下来，如下面的截图所示：
- en: '![](img/b1c90895-c431-43fa-a432-0b3a95e31911.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1c90895-c431-43fa-a432-0b3a95e31911.png)'
- en: You can enter a Title or leave it blank for the default, and choose the Taxonomy that
    you want to display.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以输入一个标题或留空使用默认标题，并选择你想要显示的分类。
- en: Then, click on Save as you would with any widget.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，就像处理任何小工具一样，点击保存。
- en: 'When you return to the frontend of the site and reload, the new tag cloud will
    be right there, as shown in the following screenshot:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你回到网站的首页并重新加载时，新的标签云将立即显示，如下面的截图所示：
- en: '![](img/a1b31e41-abea-4bc0-8aaf-0133e5ff42f6.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1b31e41-abea-4bc0-8aaf-0133e5ff42f6.png)'
- en: Learning more
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习更多
- en: 'You can browse the following online reference sites to learn more about widgets:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下在线参考网站了解更多关于小工具的信息：
- en: The WordPress *Widgets API* is located at [https://codex.wordpress.org/Widgets_API](https://codex.wordpress.org/Widgets_API).
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress的*小工具API*位于[https://codex.wordpress.org/Widgets_API](https://codex.wordpress.org/Widgets_API)。
- en: WordPress lists a number of widgets at [https://codex.wordpress.org/WordPress_Widgets](https://codex.wordpress.org/WordPress_Widgets).
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress在[https://codex.wordpress.org/WordPress_Widgets](https://codex.wordpress.org/WordPress_Widgets)列出了许多小工具。
- en: If you want to find more widgets to install on your website, visit the widgets
    section of the plugin repository at [https://wordpress.org/plugins/tags/widget](https://wordpress.org/plugins/tags/widget).
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要在你的网站上安装更多的小工具，请访问插件仓库的小工具部分[https://wordpress.org/plugins/tags/widget](https://wordpress.org/plugins/tags/widget)。
- en: Bundling a widget with an existing plugin
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将小工具捆绑到现有插件中
- en: If you're writing a plugin and you'd like to make a widget available with it,
    you don't have to create a separate widget plugin. Just include all of the widget
    code—similar to what we created in the preceding section—in with your plugin's
    PHP file. When the user activates the plugin, the widget will automatically show
    up on the widgets page in `wp-admin`. There's no need for a separate file!
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写插件并且想要与插件一起提供小工具，你不需要创建一个单独的小工具插件。只需将所有的小工具代码——类似于我们在前面的部分中创建的——包含到你的插件PHP文件中。当用户激活插件时，小工具将自动显示在`wp-admin`的小工具页面上。不需要单独的文件！
- en: Shortcodes
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短代码
- en: Shortcodes are a handy way to let a non-technical person, such as an editor
    of a website, include dynamic content within pages and posts, without having to
    actually use any PHP, complex HTML structures, or custom JavaScript. In other
    words, shortcodes are handy reusable pieces of code, yet they don't require any
    actual coding experience or knowledge on the end user's part.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 短代码是一种方便的方式，可以让非技术人士，例如网站编辑，在页面和帖子中包含动态内容，而无需实际使用任何PHP、复杂的HTML结构或自定义JavaScript。换句话说，短代码是方便的可重用代码片段，但它们不需要任何实际的编码经验或知识。
- en: Shortcodes and the way they work
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短代码及其工作方式
- en: The way a shortcode works is that you tell WordPress to look at the text within
    square brackets (`[]`) and evaluate it by running a PHP function. That PHP function
    can live in the `functions.php` file of your theme, or in a plugin file, or in
    a widget file. Let's create a simple shortcode and include it with our most recent
    widget plugin.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 短代码的工作方式是告诉WordPress查看方括号`[]`内的文本，并通过运行PHP函数来评估它。这个PHP函数可以存在于主题的`functions.php`文件中，或插件文件中，或小工具文件中。让我们创建一个简单的短代码并将其包含在我们的最新小工具插件中。
- en: Types of shortcodes
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短代码的类型
- en: 'Shortcodes are a pretty simple concept by definition, but we can still distinguish
    three main types, as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，短代码是一个相当简单的概念，但我们仍然可以区分三种主要类型，如下所示：
- en: '**Single-tag shortcodes**: These shortcodes are executed with just a single
    tag, for example, `[my_first_shortcode/]`.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单标签短代码**：这些短代码只需要一个标签即可执行，例如，`[my_first_shortcode/]`。'
- en: '**Double-tag shortcodes**: These shortcodes are executed with opening and closing
    tags, for example, `[my_2nd_shortcode]some text here[/my_2nd_shortcode]` (notice
    that the closing tag has an additional `/`). As you can see, there''s also some
    content within the tags. This content can be processed by the shortcode function.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双标签短代码**：这些短代码通过打开和关闭标签来执行，例如，`[my_2nd_shortcode]some text here[/my_2nd_shortcode]`（注意关闭标签有一个额外的`/`）。如你所见，标签内也有一些内容。这些内容可以通过短代码函数进行处理。'
- en: '**Shortcodes with attributes**: These shortcodes can have one or two tags and
    also a number of attributes we can use to customize the output, for example, `[my_3rd_shortcode
    name="Karol" twitter="carlosinho"]some text here[/my_3rd_shortcode]`.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带属性的短代码**：这些短代码可以有一个或两个标签，还可以使用一些属性来自定义输出，例如，`[my_3rd_shortcode name="Karol"
    twitter="carlosinho"]some text here[/my_3rd_shortcode]`。'
- en: Creating a simple shortcode
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的短代码
- en: 'Let''s create a simple shortcode that will make it possible to use our widget''s
    output inside any given post or page. This is going to be a double-tag shortcode
    with one additional attribute, which we''ll use to indicate whether the output
    should be formatted using our custom CSS or WordPress'' native styling:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的短代码，这样我们就可以在任何给定帖子或页面中使用我们的小工具输出。这将是一个带有额外属性的标签短代码，我们将使用它来指示输出是否应该使用我们的自定义CSS或WordPress的本地样式进行格式化：
- en: 'Let''s start by creating a new function at the bottom of our `kk_tag_cloud_widget.php`
    file, and then we''ll go through each individual line, as follows:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在`kk_tag_cloud_widget.php`文件的底部创建一个新函数开始，然后我们将逐行进行操作，如下所示：
- en: '[PRE31]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: First of all, note that this function does not *echo* or *print* anything. It
    just returns a string. If you let your function print, it won't look correct on
    the website.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意，这个函数不*echo*或*print*任何内容。它只是返回一个字符串。如果你让你的函数打印，它将不会在网站上看起来正确。
- en: Inside our function, the first line handles the custom attributes that the shortcode
    receives (in this case, just the `use_css` parameter for indicating whether the
    styles should be used or not, and the `taxonomy` parameter to indicate the taxonomy
    that should be shown in the shortcode). WordPress will hand off the `$atts` argument
    automatically, and we only have to use the `extract()` function to turn the attributes
    the user submits into variables available in the function. The values in the array
    passed to the `extract()` functions set the defaults, in case the user chooses
    no options. In general, there is no limit to the number of options that you can
    make available to the shortcode users.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的函数中，第一行处理短代码接收的自定义属性（在这种情况下，只是`use_css`参数，用于指示是否应该使用样式，以及`taxonomy`参数，用于指示短代码中应显示的分类法）。WordPress会自动传递`$atts`参数，我们只需要使用`extract()`函数将用户提交的属性转换为函数中可用的变量。传递给`extract()`函数的数组中的值设置了默认值，以防用户没有选择任何选项。一般来说，你可以为短代码用户提供无限多的选项。
- en: The next line extracts the taxonomy identifier and tries to turn it into a valid
    taxonomy. In case the user's input is not valid, the default `post_tag` taxonomy
    will be used. The final part of the function handles the display based on the
    state of the `use_css` attribute. It's pretty basic at this point! There's also
    a possibility to include custom text as the main content of the shortcode. This
    can be useful in some situations.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行提取分类标识符并尝试将其转换为有效的分类。如果用户的输入无效，将使用默认的`post_tag`分类。函数的最后部分根据`use_css`属性的当前状态处理显示。目前来说这相当基础！还有可能包含自定义文本作为短代码的主要内容。在某些情况下这可能很有用。
- en: 'What we have to do now is tell WordPress that this function is a shortcode,
    and we do so using a hook. Be sure to choose something unique. I''ve chosen `kk_tag_cloud`
    as the name for this shortcode, so the hook looks like the following:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要告诉WordPress这个功能是一个短代码，我们通过钩子来实现。务必选择一个独特的名称。我已选择`kk_tag_cloud`作为这个短代码的名称，所以钩子看起来如下所示：
- en: '[PRE32]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To use this shortcode in our content, all we have to do is edit any given post
    or page and insert a line such as the following:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在我们的内容中使用这个短代码，我们只需编辑任何给定的帖子或页面，并插入如下所示的行：
- en: '[PRE33]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Such usage will have the following effect:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种使用方式会产生以下效果：
- en: '![](img/aeb6fc4a-78cc-407c-afc5-2c7fe994a00b.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aeb6fc4a-78cc-407c-afc5-2c7fe994a00b.png)'
- en: 'We can also use the shortcode such as the following:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用如下所示的短代码：
- en: '[PRE34]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will disable the custom styles and produce the following effect:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将禁用自定义样式并产生以下效果：
- en: '![](img/7224dcee-e5c2-4aa3-9138-24fa5938a658.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7224dcee-e5c2-4aa3-9138-24fa5938a658.png)'
- en: 'To display the tag cloud in its default form (showing the tags and using the
    custom style sheet), all we have to do is execute the shortcode, as follows:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示默认格式的标签云（显示标签并使用自定义样式表），我们只需执行以下短代码即可：
- en: '[PRE35]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The effect is shown in the following screenshot:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 效果如下所示截图：
- en: '![](img/bce37ea4-0e90-4a50-9081-ddef2ef3c2d1.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bce37ea4-0e90-4a50-9081-ddef2ef3c2d1.png)'
- en: There are very few limitations regarding what you *can* and *cannot* do with
    shortcodes.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 关于短代码可以做什么和不能做什么的限制非常少。
- en: This version of the widget is available in the code bundle for this chapter, inside
    a subdirectory called `final`. It is the final version of our widget.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小部件的版本可以在本章的代码包中找到，位于名为`final`的子目录中。这是我们小部件的最终版本。
- en: The WordPress REST API
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress REST API
- en: The WordPress REST API is a relatively new addition to the WordPress platform.
    Before it was added to core, the REST API was available as a standalone mechanism
    via a separate plugin. You could get everything and also learn how to work with
    the package from the project's official website at [http://v2.wp-api.org/](http://v2.wp-api.org/).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress REST API是WordPress平台上的一个相对较新的功能。在它被添加到核心之前，REST API作为一个独立的机制通过一个单独的插件提供。你可以获取所有内容，也可以从项目的官方网站[http://v2.wp-api.org/](http://v2.wp-api.org/)学习如何与之交互。
- en: However, the REST API was included in the WordPress core package in WordPress
    version 4.7\. This means that you no longer need any additional plugins or tools
    to make it work. Basically, as long as you're on the most recent version of WordPress,
    you have the REST API installed and enabled by default. Which is great news! But
    let's get a bit deeper.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，REST API在WordPress 4.7版本中被包含在了WordPress核心包中。这意味着你不再需要任何额外的插件或工具来使其工作。基本上，只要你在WordPress的最新版本上，REST
    API就已经默认安装并启用。这是一个好消息！但让我们更深入地了解一下。
- en: What is the REST API?
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是REST API？
- en: Under the hood, the REST API—officially called the WordPress REST API—is just
    another layer of technology that allows you to interact with your WordPress site,
    as well as the sites of other people. Chiefly, the REST API allows you to separate
    the presentation layer of a WordPress site from the mechanism of how WordPress
    operates in the background. In other words, with specific REST API calls, you
    can perform actions on the contents of a WordPress site without having to enter
    the `wp-admin` of the site, or even visit it via a web browser at all.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，REST API——官方称为WordPress REST API——只是另一层技术，允许你与你的WordPress站点以及其他人的站点进行交互。主要来说，REST
    API允许你将WordPress站点的表示层与其在后台运行机制分开。换句话说，通过特定的REST API调用，你可以在不进入站点的`wp-admin`或甚至通过网页浏览器访问它的情况下，对WordPress站点的内容执行操作。
- en: Why use WordPress REST API?
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用WordPress REST API？
- en: The introduction of the REST API opens up a lot of new possibilities as to *what
    you can do* with a WordPress site and *what you can use it for*. For instance,
    via the REST API, you can interact with WordPress content remotely, add new content,
    erase content, or perform any other operation. Just to name one major possibility,
    this makes it easy to create a mobile app for your website, and have the app communicate
    with the website via the REST API. In other words, if you want to communicate
    with a WordPress site via any other way than by visiting the site directly, then
    you can do that with the REST API.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: REST API的引入为使用WordPress网站提供了许多新的可能性，包括*你可以做什么*以及*你可以用它做什么*。例如，通过REST API，你可以远程与WordPress内容进行交互，添加新内容，删除内容，或执行任何其他操作。仅举一个主要可能性，这使得为你的网站创建移动应用变得容易，并且应用可以通过REST
    API与网站进行通信。换句话说，如果你想通过除了直接访问网站之外的其他方式与WordPress网站进行通信，那么你可以使用REST API来实现这一点。
- en: How to get started with the REST API
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何开始使用REST API
- en: We're only scratching the surface here, and the description provided in this
    chapter is by no means exhaustive. The REST API is a rather advanced piece of
    technology that lets you do a multitude of things—sometimes via rather complex
    code structures. So, the only thing we want to achieve here is to help you get
    started by giving you a foundation that you can then explore further as you're
    learning about the REST API elsewhere. A great place to get started if you want
    to truly master the REST API is the official developer manual at [https://developer.wordpress.org/rest-api/](https://developer.wordpress.org/rest-api/).
    With that said, what follows are the basics of how to begin with the REST API.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里只是触及了表面，本章中提供的描述绝对不是详尽的。REST API是一项相当先进的技术，它让你可以做很多事情——有时是通过相当复杂的代码结构。因此，我们在这里想要实现的唯一目标是帮助你入门，通过提供一个基础，你可以在此基础上进一步探索，当你学习REST
    API的其他地方时。如果你真正想精通REST API，一个很好的起点是官方开发者手册[https://developer.wordpress.org/rest-api/](https://developer.wordpress.org/rest-api/)。话虽如此，以下是如何开始使用REST
    API的基础知识。
- en: 'The REST API allows you to interact with any WordPress site via the means of
    sending *requests* and receiving *responses* through the WordPress HTTP API. To
    make a valid request, you need to reference the following: the *base URL path*
    of the REST API, the *route*, and the *endpoint.*'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: REST API允许你通过发送*请求*和通过WordPress HTTP API接收*响应*的方式与任何WordPress网站进行交互。为了发出一个有效的请求，你需要引用以下内容：REST
    API的*基本URL路径*、*路由*和*端点*。
- en: The base URL path is similar for all WordPress websites: `http://YOURWEBSITE.com
    /wp-json/wp/v2/`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 所有WordPress网站的基本URL路径都是类似的：`http://YOURWEBSITE.com /wp-json/wp/v2/`。
- en: The route defines the exact part of the website's content that you want to communicate
    with. For example, you can use `posts/` in order to communicate with the site's
    posts. In that case, the full URL would be `http://YOURWEBSITE.com/wp-json/wp/v2/posts/`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 路径定义了你想要与之通信的网站内容的精确部分。例如，你可以使用`posts/`来与网站的帖子进行通信。在这种情况下，完整的URL将是`http://YOURWEBSITE.com/wp-json/wp/v2/posts/`。
- en: 'Endpoints are specific functions available through the REST API. For example,
    if you expand the route to target a specific post by ID, such as `http://YOURWEBSITE.com
    /wp-json/wp/v2/posts/123`, then this allows you to call one of three endpoints:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 端点是REST API中可用的特定功能。例如，如果你将路由扩展到通过ID定位特定帖子，例如`http://YOURWEBSITE.com /wp-json/wp/v2/posts/123`，那么这允许你调用以下三个端点之一：
- en: '`GET` returns the post data'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET` 返回帖子数据'
- en: '`PUT` updates the post data and returns that updated post data'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT` 更新帖子数据并返回更新后的帖子数据'
- en: '`DELETE` deletes the post and returns the now-deleted post data'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE` 删除帖子并返回已删除的帖子数据'
- en: Apart from the default endpoints, you can also create your own, depending on
    what you want to be able to do with your content through the REST API. This, however,
    is perhaps a topic for a more in-depth REST API manual. For the purpose of this
    book, let's just do a simple demonstration and create a plugin that will communicate
    with an external WordPress website via the REST API.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的端点之外，你还可以根据自己的需求创建自己的端点，以便通过REST API对你的内容进行操作。然而，这可能是一个更深入的REST API手册的主题。为了本书的目的，我们只进行一个简单的演示，并创建一个插件，该插件将通过REST
    API与外部WordPress网站进行通信。
- en: Creating a plugin that uses the REST API
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建使用REST API的插件
- en: You've already learned how to create basic WordPress plugins in this very chapter,
    so now, let's combine this knowledge with the new addition of the REST API. The
    plugin we're building is going to simply display a list of posts from another
    blog based on a shortcode.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在本章中学习了如何创建基本的WordPress插件，所以现在，让我们将这个知识与REST API的新增功能结合起来。我们正在构建的插件将简单地根据短代码显示另一博客的帖子列表。
- en: 'Let''s have a look at the full code of this plugin—all contained within a single
    file named `kk_rest_demo.php`, as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个插件的完整代码——所有这些都包含在一个名为`kk_rest_demo.php`的单个文件中，如下所示：
- en: '[PRE36]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The first function call, `extract()`, is something we know from the previous
    shortcode plugin/widget. It extracts the attributes given to the shortcode. In
    our case, the shortcode works with two optional attributes, as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数调用`extract()`是我们从之前的短代码插件/小部件中了解到的。它提取了分配给短代码的属性。在我们的情况下，短代码与两个可选属性一起工作，如下所示：
- en: '`website_domain`: This indicates the domain name of the WordPress site that
    the plugin should communicate with (defaults to `newinternetorder.com`).'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`website_domain`：这表示插件应该与之通信的WordPress网站的域名（默认为`newinternetorder.com`）。'
- en: '`how_many`: This indicates how many posts should be fetched (defaults to `3`).'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`how_many`：这表示应该检索多少篇帖子（默认为`3`）。'
- en: 'The next function call is where the main REST API communication happens. This
    call references a given route and fetches blog posts using the GET endpoint (by
    default), as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数调用是主要REST API通信发生的地方。这个调用引用了一个给定的路由，并使用GET端点（默认）检索博客帖子，如下所示：
- en: '[PRE37]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After that, we just need to check there weren''t any errors, and if so, halt
    the function. The next function call decodes the response and allows us to reference
    individual posts one by one later on, as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们只需检查是否有错误，如果有，就停止函数。下一个函数调用解码响应，并允许我们稍后逐个引用单个帖子，如下所示：
- en: '[PRE38]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The final `foreach` loop and `if` clause go through each post and retrieve
    their title and URL, which then get added to a standard HTML-unordered list and
    returned by the shortcode. At this point, and once I activate this plugin on my
    test site, I can create a new post and add the following shortcode to it:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`foreach`循环和`if`语句遍历每一篇帖子并检索它们的标题和URL，这些信息随后被添加到一个标准的HTML无序列表，并通过短代码返回。在这个时候，一旦我在我的测试网站上激活了这个插件，我就可以创建一篇新帖子，并将以下短代码添加到其中：
- en: '[PRE39]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This tells the plugin to communicate with `newinternetorder.com` and fetch
    the two most recent posts. The following screenshot shows the result of this as
    visible on the frontend:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉插件与`newinternetorder.com`通信并检索最新的两篇帖子。以下截图显示了前端上这个结果：
- en: '![](img/394d515e-fc5b-4ee4-8d16-3b7cbbd8acda.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/394d515e-fc5b-4ee4-8d16-3b7cbbd8acda.png)'
- en: Of course, the plugin we've built here is very simple, and it does not do anything
    in terms of making sure that the domain provided is valid, or anything else security-related.
    However, the purpose of this demo is only to show you the simplest way of working
    with the REST API, and nothing else. Once again, I strongly encourage you to review
    some of the official resources, such as the *REST API Handbook* at [https://developer.wordpress.org/rest-api/](https://developer.wordpress.org/rest-api/).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们在这里构建的插件非常简单，它并没有确保提供的域名有效或任何其他安全相关的事情。然而，这个演示的目的只是为了向你展示与REST API一起工作的最简单方法，没有其他。再次强烈建议你查看一些官方资源，例如[https://developer.wordpress.org/rest-api/](https://developer.wordpress.org/rest-api/)上的*REST
    API手册*。
- en: This version of the plugin is available in the code bundle for this chapter, inside
    a subdirectory called `final`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的插件包含在本章的代码包中，位于名为`final`的子目录内。
- en: Summary
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned everything you need to know about creating basic
    plugins and widgets. Now you know how to structure the plugin's PHP files, where
    to put your functions, and how to use hooks. You also learned about adding management
    pages, enabling plugins and widgets to have database access, and how to create
    shortcodes.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了创建基本插件和小部件所需的所有知识。现在你知道了如何构建插件的PHP文件结构，在哪里放置你的函数，以及如何使用钩子。你还学习了如何添加管理页面，使插件和小部件能够访问数据库，以及如何创建短代码。
- en: On top of all of this, you learned how to work with the REST API and perform
    basic communication with other WordPress websites. With your existing knowledge
    of PHP and HTML, you have the tools to get started writing any plugin and/or widget
    your heart may desire.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些之上，你还学习了如何使用REST API并与其他WordPress网站进行基本通信。凭借你现有的PHP和HTML知识，你有了开始编写任何你想要的插件和/或小部件的工具。
- en: In the next chapter, we'll walk you through the process of creating a complete
    non-blog website from scratch.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将带你从头开始创建一个完整的非博客网站的过程。
