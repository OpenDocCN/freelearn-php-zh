["```php\nname: Hello World\ndescription: Hello World module\ntype: module\ncore: 8.x\npackage: Custom\n```", "```php\ndependencies:\n  - drupal:views\n  - ctools:ctools\n```", "```php\nuse Drupal\\Core\\Routing\\RouteMatchInterface;\n\n/**\n * Implements hook_help().\n */\nfunction hello_world_help($route_name, RouteMatchInterface $route_match) {\n  switch ($route_name) {\n    case 'help.page.hello_world':\n      $output = '';\n      $output .= '<h3>' . t('About') . '</h3>';\n      $output .= '<p>' . t('This is an example module.') . '</p>';\n      return $output;\n\n    default:\n  }\n}\n```", "```php\nhello_world.hello:\n  path: '/hello'\n  defaults:\n    _controller: '\\Drupal\\hello_world\\Controller\\HelloWorldController::helloWorld'\n    _title: 'Our first route'\n  requirements:\n    _permission: 'access content'\n```", "```php\npath: '/hello/{param}' \n```", "```php\noptions:\n   parameters:\n     param:\n       type: entity:node\n```", "```php\nnamespace Drupal\\hello_world\\Controller;\n\nuse Drupal\\Core\\Controller\\ControllerBase;\n\n/**\n * Controller for the salutation message.\n */\nclass HelloWorldController extends ControllerBase {\n\n  /**\n   * Hello World.\n   *\n   * @return array\n   */\n  public function helloWorld() {\n    return [\n      '#markup' => $this->t('Hello World')\n    ];\n  }\n}\n```", "```php\nnamespace Drupal\\hello_world;\n\nuse Drupal\\Core\\StringTranslation\\StringTranslationTrait;\n\n/**\n * Prepares the salutation to the world.\n */\nclass HelloWorldSalutation {\n\n  use StringTranslationTrait;\n\n  /**\n   * Returns the salutation\n   */\n  public function getSalutation() {\n    $time = new \\DateTime();\n    if ((int) $time->format('G') >= 00 && (int) $time->format('G') < 12) {\n      return $this->t('Good morning world');\n    }\n\n    if ((int) $time->format('G') >= 12 && (int) $time->format('G') < 18) {\n      return $this->t('Good afternoon world');\n    }\n\n    if ((int) $time->format('G') >= 18) {\n      return $this->t('Good evening world');\n    }\n  }\n}\n```", "```php\nservices:\n  hello_world.salutation:\n    class: Drupal\\hello_world\\HelloWorldSalutation\n```", "```php\nhello_world.salutation:\n  class: Drupal\\hello_world\\HelloWorldSalutation\n  tags:\n    - {name: tag_name}\n```", "```php\n$service = \\Drupal::service('hello_world.salutation');  \n```", "```php\n/**\n * @var \\Drupal\\hello_world\\HelloWorldSalutation\n */\nprotected $salutation;\n\n/**\n * HelloWorldController constructor.\n *\n * @param \\Drupal\\hello_world\\HelloWorldSalutation $salutation\n */\npublic function __construct(HelloWorldSalutation $salutation) {\n  $this->salutation = $salutation;\n}\n\n/**\n * {@inheritdoc}\n */\npublic static function create(ContainerInterface $container) {\n  return new static(\n    $container->get('hello_world.salutation')\n  );\n}\n```", "```php\nuse Drupal\\hello_world\\HelloWorldSalutation;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n```", "```php\nreturn [\n  '#markup' => $this->salutation->getSalutation(),\n];\n```", "```php\nhello_world.greeting_form:\n  path: '/admin/config/salutation-configuration'\n  defaults:\n    _form: '\\Drupal\\hello_world\\Form\\SalutationConfigurationForm'\n    _title: 'Salutation configuration'\n  requirements:\n    _permission: 'administer site configuration'\n```", "```php\nnamespace Drupal\\hello_world\\Form;\n\nuse Drupal\\Core\\Form\\ConfigFormBase;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\n/**\n * Configuration form definition for the salutation message.\n */\nclass SalutationConfigurationForm extends ConfigFormBase {\n\n  /**\n   * {@inheritdoc}\n   */\n  protected function getEditableConfigNames() {\n    return ['hello_world.custom_salutation'];\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function getFormId() {\n    return 'salutation_configuration_form';\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildForm(array $form, FormStateInterface $form_state) {\n    $config = $this->config('hello_world.custom_salutation');\n\n    $form['salutation'] = array(\n      '#type' => 'textfield',\n      '#title' => $this->t('Salutation'),\n      '#description' => $this->t('Please provide the salutation you want to use.'),\n      '#default_value' => $config->get('salutation'),\n    );\n\n    return parent::buildForm($form, $form_state);\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function submitForm(array &$form, FormStateInterface $form_state) {\n    $this->config('hello_world.custom_salutation')\n      ->set('salutation', $form_state->getValue('salutation'))\n      ->save();\n\n    parent::submitForm($form, $form_state);\n  }\n}\n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function validateForm(array &$form, FormStateInterface $form_state) {\n  $salutation = $form_state->getValue('salutation');\n  if (strlen($salutation) > 20) {\n    $form_state->setErrorByName('salutation', $this->t('This salutation is too long'));\n  }\n}\n\n```", "```php\n/**\n * Implements hook_form_alter().\n */\nfunction my_module_form_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {\n  if ($form_id == 'salutation_configuration_form') {\n    // Perform alterations. \n  }\n}\n\n```", "```php\n/**\n * Implements hook_form_FORM_ID_alter().\n */\nfunction my_module_form_salutation_configuration_form_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {\n  // Perform alterations. \n}\n```", "```php\n/** \n * Implements hook_form_FORM_ID_alter(). */ function my_module_form_salutation_configuration_form_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) { // Perform alterations. $form['#submit'][] = 'hello_world_salutation_configuration_form_submit'; } \n```", "```php\n/** \n * Custom submit handler for the form_salutation_configuration form. \n * \n * @param $form \n * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state \n */ \nfunction my_module_salutation_configuration_form_submit(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state) { \n  // Do something when the form is submitted. \n} \n```", "```php\n$builder = \\Drupal::formBuilder(); \n```", "```php\n$form = $builder->getForm('Drupal\\hello_world\\Form\\SalutationConfigurationForm'); \n```", "```php\nhello_world.salutation:\n  class: Drupal\\hello_world\\HelloWorldSalutation\n  arguments: ['@config.factory']\n```", "```php\n/**\n * @var \\Drupal\\Core\\Config\\ConfigFactoryInterface\n */\nprotected $configFactory;\n\n/**\n * HelloWorldSalutation constructor.\n *\n * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $config_factory\n */\npublic function __construct(ConfigFactoryInterface $config_factory) {\n  $this->configFactory = $config_factory;\n}\n```", "```php\nuse Drupal\\Core\\Config\\ConfigFactoryInterface;  \n```", "```php\n$config = $this->configFactory->get('hello_world.custom_salutation');\n$salutation = $config->get('salutation');\nif ($salutation != \"\") {\n  return $salutation;\n}\n```", "```php\nnamespace Drupal\\hello_world\\Plugin\\Block;\n\nuse Drupal\\Core\\Block\\BlockBase;\nuse Drupal\\Core\\Plugin\\ContainerFactoryPluginInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Drupal\\hello_world\\HelloWorldSalutation as HelloWorldSalutationService;\n\n/**\n * Hello World Salutation block.\n *\n * @Block(\n *  id = \"hello_world_salutation_block\",\n *  admin_label = @Translation(\"Hello world salutation\"),\n * )\n */\nclass HelloWorldSalutationBlock extends BlockBase implements ContainerFactoryPluginInterface {\n\n  /**\n   * The salutation service.\n   *\n   * @var \\Drupal\\hello_world\\HelloWorldSalutation\n   */\n  protected $salutation;\n\n  /**\n   * Construct.\n   *\n   * @param array $configuration\n   *   A configuration array containing information about the plugin instance.\n   * @param string $plugin_id\n   *   The plugin_id for the plugin instance.\n   * @param string $plugin_definition\n   *   The plugin implementation definition.\n   * @param \\Drupal\\hello_world\\HelloWorldSalutation $salutation   *   The salutation service.\n   */\n  public function __construct(array $configuration, $plugin_id, $plugin_definition, HelloWorldSalutationService $salutation) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition);\n    $this->salutation = $salutation;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {\n    return new static(\n      $configuration,\n      $plugin_id,\n      $plugin_definition,\n      $container->get('hello_world.salutation')\n    );\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function build() {\n    return [\n      '#markup' => $this->salutation->getSalutation(),\n    ];\n  }\n}\n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function defaultConfiguration() {\n  return [\n    'enabled' => 1,\n  ];\n}\n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function blockForm($form, FormStateInterface $form_state) {\n  $config = $this->getConfiguration();\n\n  $form['enabled'] = array(\n    '#type' => 'checkbox',\n    '#title' => t('Enabled'),\n    '#description' => t('Check this box if you want to enable this feature.'),\n    '#default_value' => $config['enabled'],\n  );\n\n  return $form;\n}\n```", "```php\nuse Drupal\\Core\\Form\\FormStateInterface;  \n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function blockSubmit($form, FormStateInterface $form_state) {\n  $this->configuration['enabled'] = $form_state->getValue('enabled');\n}\n\n```", "```php\n$config = $this->getConfiguration();\n```", "```php\n$url = Url::fromRoute('my_route', ['param_name' => $param_value]);\n$link = \\Drupal::service('link_generator')->generate('My link', $url);\n```", "```php\n$url = Url::fromRoute('my_other_route');\n$link = Link::fromTextAndUrl('My link', $url);\n```", "```php\n$link = \\Drupal::service('link_generator')->generateFromLink($linkObject); \n```", "```php\nreturn new \\Symfony\\Component\\HttpFoundation\\Response('my text');  \n```", "```php\nreturn new \\Symfony\\Component\\HttpFoundation\\RedirectResponse('node/1')  \n```", "```php\nhello_world.redirect_subscriber:\n  class: \\Drupal\\hello_world\\EventSubscriber\\HelloWorldRedirectSubscriber\n  arguments: ['@current_user']\n  tags:\n    - { name: event_subscriber }\n```", "```php\nnamespace Drupal\\hello_world\\EventSubscriber;\n\nuse Drupal\\Core\\Session\\AccountProxyInterface;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\n/**\n * Subscribes to the Kernel Request event and redirects to the homepage\n * when the user has the \"non_grata\" role.\n */\nclass HelloWorldRedirectSubscriber implements EventSubscriberInterface {\n\n  /**\n   * @var \\Drupal\\Core\\Session\\AccountProxyInterface\n   */\n  protected $currentUser;\n\n  /**\n   * HelloWorldRedirectSubscriber constructor.\n   *\n   * @param \\Drupal\\Core\\Session\\AccountProxyInterface $currentUser\n   */\n  public function __construct(AccountProxyInterface $currentUser) {\n    $this->currentUser = $currentUser;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function getSubscribedEvents() {\n    $events['kernel.request'][] = ['onRequest', 0];\n    return $events;\n  }\n\n  /**\n   * Handler for the kernel request event.\n   *\n   * @param \\Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent $event\n   */\n  public function onRequest(GetResponseEvent $event) {\n    $request = $event->getRequest();\n    $path = $request->getPathInfo();\n    if ($path !== '/hello') {\n      return;\n    }\n\n    $roles = $this->currentUser->getRoles();\n    if (in_array('non_grata', $roles)) {\n      $event->setResponse(new RedirectResponse('/'));\n    }\n  }\n}\n```", "```php\n$events[KernelEvents::REQUEST][] = ['onRequest', 0];\n```", "```php\npublic function onRequest(GetResponseEvent $event) {\n  $route_name = $this->currentRouteMatch->getRouteName();\n\n  if ($route_name !== 'hello_world.hello') {\n    return;\n  }\n\n  $roles = $this->currentUser->getRoles();\n  if (in_array('non_grata', $roles)) {\n    $url = Url::fromUri('internal:/');\n    $event->setResponse(new LocalRedirectResponse($url->toString()));\n  }\n}\n```", "```php\nuse Drupal\\Core\\Routing\\CurrentRouteMatch; \nuse Drupal\\Core\\Routing\\LocalRedirectResponse; \nuse Symfony\\Component\\HttpKernel\\KernelEvents; \nuse Drupal\\Core\\Url; \n```", "```php\nnamespace Drupal\\hello_world; \n\nuse Symfony\\Component\\EventDispatcher\\Event; \n\n/** \n * Event class to be dispatched from the HelloWorldSalutation service. \n */ \nclass SalutationEvent extends Event { \n\n  const EVENT = 'hello_world.salutation_event'; \n\n  /** \n   * The salutation message. \n   * \n   * @var string \n   */ \n  protected $message; \n\n  /** \n   * @return mixed \n   */ \n  public function getValue() { \n    return $this->message; \n  } \n\n  /** \n   * @param mixed $message \n   */ \n  public function setValue($message) { \n    $this->message = $message; \n  } \n}  \n```", "```php\narguments: ['@config.factory', '@event_dispatcher'] \n```", "```php\n/** \n * @var \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface \n */ \nprotected $eventDispatcher; \n\n/** \n * HelloWorldSalutation constructor. \n * \n * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $config_factory \n * @param \\Symfony\\Component\\EventDispatcher\\EventDispatcherInterface $eventDispatcher \n */ \npublic function __construct(ConfigFactoryInterface $config_factory, EventDispatcherInterface $eventDispatcher) { \n  $this->configFactory = $config_factory; \n  $this->eventDispatcher = $eventDispatcher; \n} \n```", "```php\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;  \n```", "```php\nif ($salutation != \"\") { \n  return $salutation; \n}  \n```", "```php\nif ($salutation != \"\") { \n  $event = new SalutationEvent(); \n  $event->setValue($salutation); \n  $event = $this->eventDispatcher->dispatch(SalutationEvent::EVENT, $event); \n  return $event->getValue(); \n}\n```"]