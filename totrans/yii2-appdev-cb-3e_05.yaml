- en: Chapter 5. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 安全
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Authentication
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Using controller filters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制器过滤器
- en: Preventing XSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止XSS
- en: Preventing SQL injections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: Preventing CSRF
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止CSRF
- en: Using RBAC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RBAC
- en: Encrypting/Decrypting data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密/解密数据
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Security is a crucial part of any web application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是任何Web应用程序的关键部分。
- en: In this chapter, you will learn how to keep your application secure according
    to the general web application security principle "filter input, escape output".
    We will cover topics such as creating your own controller filters, preventing
    XSS, CSRF, and SQL injections, escaping output, and using role-based access control.
    To know security best practices refer to [http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何根据通用Web应用程序安全原则“过滤输入，转义输出”来保持您的应用程序安全。我们将涵盖创建自己的控制器过滤器、防止XSS、CSRF和SQL注入、转义输出以及使用基于角色的访问控制等主题。要了解安全最佳实践，请参阅[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production)。
- en: Authentication
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: Most web applications provide a way for users to log in or reset their forgotten
    passwords. In Yii2, we don't have this opportunity by default. For a `basic` application
    template, Yii provides only two test users by default, which are statically described
    in the `User` model. So, we have to implement special code to be able to enable
    user login from the database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序都为用户提供了一种登录或重置忘记的密码的方式。在Yii2中，默认情况下我们没有这个机会。对于 `basic` 应用程序模板，Yii默认提供了两个测试用户，这些用户在
    `User` 模型中静态描述。因此，我们必须实现特殊的代码才能从数据库中启用用户登录。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南使用Composer包管理器创建一个新应用程序，官方指南请参阅[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'In the component section of your config, add:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的配置组件部分添加：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `User` table. Create a migration by entering the following command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `User` 表。通过输入以下命令创建迁移：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the just created migration with the following code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新刚刚创建的迁移：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Update the existing `models/User` model with the following code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新现有的 `models/User` 模型：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a migration, which will add a test user. Use the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个迁移，该迁移将添加一个测试用户。使用以下命令：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the just created migration with the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新刚刚创建的迁移：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install all migrations with the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装所有迁移：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Now, follow the URL `site/login` action and enter `admin`/`admin` as your credentials:![How
    to do it...](img/image00386.jpeg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，跟随URL `site/login` 动作并使用 `admin`/`admin` 作为您的凭据：![如何操作...](img/image00386.jpeg)
- en: Congratulations! If you have completed these steps, you should able to log in.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！如果您已完成这些步骤，您应该能够登录。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: First, we created a migration for the user table. Apart from our ID and username,
    our table contains special fields such as `auth_key` (the main use of this is
    to authenticate the user by cookie), `password_hash` (for security reasons we
    won't store the password as it is and will store only the password hash), and
    `password_reset_token` (used when we need to reset the user's password).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为用户表创建了一个迁移。除了我们的ID和用户名外，我们的表还包含一些特殊字段，如 `auth_key`（此字段的主要用途是通过cookie验证用户），`password_hash`（出于安全原因，我们不会存储密码本身，而只存储密码哈希），以及
    `password_reset_token`（在我们需要重置用户密码时使用）。
- en: The result after installation and `create_test_user` migration should look like
    the following screenshot:![How it works...](img/image00399.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后和 `create_test_user` 迁移的结果应如下截图所示：![它是如何工作的...](img/image00399.jpeg)
- en: We've also added special methods to the `User` model and changed the inheritance
    to `class User extends ActiveRecord implements IdentityInterface` because we need
    to be able to find users in the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向 `User` 模型添加了特殊方法，并将继承改为 `class User extends ActiveRecord implements IdentityInterface`，因为我们需要能够在数据库中找到用户。
- en: You also can copy the `User` model from an advanced app at [https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php](https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从高级应用程序 [https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php](https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php)
    复制 `User` 模型。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-security-authentication.html](http://www.yiiframework.com/doc-2.0/guide-security-authentication.html)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-security-authentication.html](http://www.yiiframework.com/doc-2.0/guide-security-authentication.html)
- en: Using controller filters
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制器过滤器
- en: In many cases, we need to filter the incoming data or perform some actions based
    on the data. For example, with custom filters, we can filter visitors by IP, force
    users to use HTTPS, or redirect the user to an installation page prior to using
    the application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们需要根据数据过滤传入的数据或执行某些操作。例如，使用自定义过滤器，我们可以根据 IP 过滤访客，强制用户使用 HTTPS，或者在用户使用应用程序之前将其重定向到安装页面。
- en: In Yii2, filters are essentially a special kind of behavior, so using filters
    is the same as using behaviors.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii2 中，过滤器本质上是一种特殊的行为，因此使用过滤器与使用行为相同。
- en: 'Yii has a lot of built-in usable filters, which include:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 有很多内置的可用过滤器，包括：
- en: Core
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心
- en: Custom
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义
- en: Authentication
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Content Negotiator
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容协商
- en: HttpCache
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HttpCache
- en: PageCache
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面缓存
- en: RateLimiter
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RateLimiter
- en: Verb
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求动词
- en: Cors
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨源资源共享（CORS）
- en: 'In this recipe, we will implement the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将实现以下内容：
- en: Limiting access to the controller action to authorized users only
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅允许授权用户访问控制器操作
- en: Limiting access to the controller action to specified IPs
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制控制器操作对指定 IP 的访问
- en: Limiting access to specific user roles
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对特定用户角色的访问
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Composer 软件包管理器创建一个新应用程序，如官方指南 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)
    中所述。
- en: 'Create `app/components/AccessRule.php`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `app/components/AccessRule.php`：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create `app/controllers/AccessController.php` as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式创建 `app/controllers/AccessController.php`：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Modify the `User` class as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式修改 `User` 类：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use `AccessControl`, declare it in the `behaviors()` method of your controller
    class. We do this as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `AccessControl`，在控制器类的 `behaviors()` 方法中声明它。我们这样做如下：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now try to run controller actions using Internet Explorer and other browsers
    by using both the `admin` and `demo` usernames.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试使用 Internet Explorer 和其他浏览器通过使用 `admin` 和 `demo` 用户名来运行控制器操作。
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We will start with limiting access to the controller action to authorized users
    only. See the following code in the `rules` array:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从仅允许授权用户访问控制器操作开始。请参阅 `rules` 数组中的以下代码：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Each array here is an access rule. You can either use `allow=true` or `allow=false`
    for a deny rule. For each rule, there are several parameters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里每个数组都是一个访问规则。您可以使用 `allow=true` 或 `allow=false` 为拒绝规则。对于每个规则，都有几个参数。
- en: By default, Yii does not deny everything, so consider adding `['allow' => false]`
    to the end of your rules list if you need maximum security.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii 不拒绝所有内容，因此如果您需要最大安全性，请考虑在您的规则列表末尾添加 `['allow' => false]`。
- en: In our rule, we use two parameters. The first is the actions parameter, which
    takes an array of actions to which the rule will be applied. The second is the
    roles parameter, which takes an array of user roles to determine the users this
    rule applies to.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的规则中，我们使用两个参数。第一个是动作参数，它接受一个动作数组，规则将应用于这些动作。第二个是角色参数，它接受一个用户角色数组，以确定此规则应用于哪些用户。
- en: 'Yii2''s built in Access Control supports only two roles by default: guest (not
    logged in), represented by `?`, and authenticated, represented by `@`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 的内置访问控制默认只支持两个角色：访客（未登录），用 `?` 表示，和认证用户，用 `@` 表示。
- en: With simple access controls, we can just limit access to specific pages or controller
    actions based on the login state. If users are not logged in when they visit these
    pages, Yii will redirect them to the login page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的访问控制，我们可以根据登录状态限制对特定页面或控制器操作的访问。如果用户在访问这些页面时未登录，Yii 将将他们重定向到登录页面。
- en: Rules are executed one by one, starting from the top, until one matches. If
    nothing matches, then the action is treated as allowed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 规则按顺序执行，从顶部开始，直到匹配为止。如果没有匹配项，则将操作视为允许。
- en: 'The next task is to limit access to specific IPs. In this case, the following
    two access rules are involved:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是限制对特定IP的访问。在这种情况下，涉及以下两个访问规则：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first rule allows access to the IP action from a list of IPs specified.
    In our case, we are using a loopback address, which always points to our own computer.
    Try changing it to `127.0.0.2`, for example, to see how it works when the address
    does not match. The second rule denies everything, including all other IPs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则允许来自指定IP列表的IP访问IP操作。在我们的例子中，我们使用的是回环地址，它始终指向我们自己的计算机。尝试将其更改为`127.0.0.2`，例如，以查看当地址不匹配时它是如何工作的。第二条规则拒绝所有内容，包括所有其他IP。
- en: 'Next, we limit access to one specific user role, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们限制对特定用户角色的访问，如下所示：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding rule allows a user with a role equal to `admin` to run the user
    action. Therefore, if you log in as `admin`, it will let you in, but if you log
    in as `demo`, it will not.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前一条规则允许具有等于`admin`角色的用户运行用户操作。因此，如果你以`admin`身份登录，它将允许你进入，但如果你以`demo`身份登录，则不会。
- en: '![How it works...](img/image00453.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00453.jpeg)'
- en: We have overridden the standard `AccessRule` class on our own, which is located
    in the `components/AccessRule.php` file. Inside our `AccessRule` class, we have
    overridden the `matchRole` method on our own, where we get and check the current
    user role and match it with roles from our rules.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了我们自己的标准`AccessRule`类，该类位于`components/AccessRule.php`文件中。在我们的`AccessRule`类中，我们覆盖了自己的`matchRole`方法，在那里我们获取并检查当前用户角色，并将其与我们的规则中的角色匹配。
- en: 'Finally, we need to deny access to a specific browser. For this recipe, we
    are denying only Internet Explorer 9\. The rule itself is put on top, so it executes
    first, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要拒绝对特定浏览器的访问。对于这个配方，我们只拒绝Internet Explorer 9。规则本身放在最上面，因此它首先执行，如下所示：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The detection technique that we are using is not very reliable, as MSIE is contained
    in many other user agent strings. For a list of possible user agent strings, you
    can refer to [http://www.useragentstring.com/](http://www.useragentstring.com/).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所使用的检测技术并不非常可靠，因为MSIE包含在许多其他用户代理字符串中。有关可能的用户代理字符串列表，您可以参考[http://www.useragentstring.com/](http://www.useragentstring.com/)。
- en: In the preceding code, we used another filter rule property named `'matchCallback'`.
    This property will apply only when functions which are described in this property
    return `true`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了另一个过滤器规则属性，名为`'matchCallback'`。此属性仅在描述在此属性中的函数返回`true`时应用。
- en: Our function checks if the user agent string contains MSIE 9.0 sting. Depending
    on your requirements, you can specify any PHP code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的功能检查用户代理字符串是否包含MSIE 9.0字符串。根据您的需求，您可以指定任何PHP代码。
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about access control and filters, refer to the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于访问控制和过滤器的内容，请参考以下链接：
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html](http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html](http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html](http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html](http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html)'
- en: '[https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md](https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md](https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter)'
- en: The *Using RBAC* recipe
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用RBAC*配方'
- en: Preventing XSS
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止XSS
- en: XSS stands for cross-site scripting and is a type of vulnerability that allows
    one to inject a client-side script (typically JavaScript) in a page viewed by
    other users. Considering the power of client-side scripting, this can lead to
    very serious consequences such as bypassing security checks, getting other user's
    credentials, or data leaks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: XSS代表跨站脚本，是一种允许在由其他用户查看的页面上注入客户端脚本（通常是JavaScript）的漏洞。考虑到客户端脚本的力量，这可能导致非常严重的后果，如绕过安全检查、获取其他用户的凭证或数据泄露。
- en: In this recipe, we will see how to prevent XSS by escaping the output with both
    `\yii\helpers\Html` and `\yii\helpers\HtmlPurifier`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何通过使用 `\yii\helpers\Html` 和 `\yii\helpers\HtmlPurifier` 转义输出来防止
    XSS。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南使用 Composer 包管理器创建一个新应用，官方指南链接为 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create `controllers/XssController.php`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `controllers/XssController.php`：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Normally, it will be used as `/xss/simple?username=Administrator`. However,
    as the main security principle *filter input, escape output* was not taken into
    account, malicious users will be able to use it in the following way:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，它将被用作 `/xss/simple?username=Administrator`。然而，由于没有考虑到主要的安全原则 *过滤输入，转义输出*，恶意用户将能够以下这种方式使用它：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous code will result in a script execution, as shown in the following
    screenshot:![Getting ready](img/image00421.jpeg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的代码将导致脚本执行，如下截图所示：![准备中](img/image00421.jpeg)
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'In order to prevent the XSS alert shown in the previous screenshot, we need
    to escape the data before passing it to the browser. We do this as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了防止之前截图中的 XSS 警告，我们需要在传递给浏览器之前转义数据。我们这样做如下：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now instead of an alert, we will get properly escaped HTML, as shown in the
    following screenshot:![How to do it...](img/image00435.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将得到正确转义的 HTML，如下截图所示：![如何操作...](img/image00435.jpeg)
- en: 'Therefore, the basic rule is to always escape all dynamic data. For example,
    we should do the same for a link name:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，基本规则是始终转义所有动态数据。例如，我们也应该对链接名称做同样的处理：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'That''s it. You have a page that is free from XSS. Now, what if we want to
    allow some HTML to pass? We cannot use `\yii\helpers\Html::encode` anymore because
    it will render HTML as just a code and we need the actual representation. Fortunately,
    there is a tool bundled with Yii that allows you to filter the malicious HTML.
    It is named `HTML Purifier` and can be used in the following way:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你有一个没有 XSS 的页面。现在，如果我们想允许一些 HTML 通过，我们不能再使用 `\yii\helpers\Html::encode`，因为它会将
    HTML 渲染为代码，而我们需要实际的表示。幸运的是，Yii 中有一个工具可以用来过滤恶意 HTML。它被称为 `HTML Purifier`，可以使用以下方式：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now if we access the HTML action using a URL such as `/xss/index?username=<i>username</i>!<script>alert(''XSS'')</script>`,
    HTML Purifier will remove the malicious part and we will get the following result:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们通过类似 `/xss/index?username=<i>username</i>!<script>alert('XSS')</script>`
    的 URL 访问 HTML 动作，HTML Purifier 将移除恶意部分，我们得到以下结果：
- en: '![How to do it...](img/image00446.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00446.jpeg)'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Internally, `\yii\helpers\Html::encode` looks like the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部，`\yii\helpers\Html::encode` 看起来如下：
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So basically, we use PHP's internal `htmlspecialchars` function, which is pretty
    secure if one does not forget to pass the correct charset in the third argument.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，基本上，我们使用 PHP 的内部 `htmlspecialchars` 函数，如果不会忘记在第三个参数中传递正确的字符集，它相当安全。
- en: '`\yii\helpers\HtmlPurifier` uses the HTML Purifier library, which is the most
    advanced solution out there to prevent XSS inside of HTML. We have used its default
    configuration, which is okay for most user-entered content.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`\yii\helpers\HtmlPurifier` 使用 HTML Purifier 库，这是目前最先进的解决方案，用于防止 HTML 中的 XSS。我们使用了它的默认配置，这对于大多数用户输入的内容来说是足够的。'
- en: There's more…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more things to know about XSS and HTML Purifier; they are discussed
    in the following section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 XSS 和 HTML Purifier 有更多需要了解的内容；它们将在以下部分中讨论。
- en: XSS types
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XSS 类型
- en: 'There are two main types of XSS injections, which are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: XSS 注入主要有两种类型，具体如下：
- en: Non-persistent
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非持久性
- en: Persistent
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性
- en: The first type is the one we have used in the recipe and is the most common
    XSS type; it can be found in most insecure web applications. Data passed by the
    user or through a URL is not stored anywhere, so the injected script will be executed
    only once and only for the user who entered it. Still, it is not as secure as
    it looks. Malicious users can include XSS in a link to another website and their
    core will be executed when another user follows the link.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种类型是我们菜谱中使用的，也是最常见的一种XSS类型；它可以在大多数不安全的Web应用程序中找到。用户通过或通过URL传递的数据不会存储在任何地方，因此注入的脚本只会被执行一次，并且只针对输入它的用户。尽管如此，它并不像看起来那么安全。恶意用户可以在指向另一个网站的链接中包含XSS，并且当另一个用户点击链接时，其核心将被执行。
- en: The second type is much more serious, as the data entered by a malicious user
    is stored in the database and is shown to many, if not all, website users. Using
    this type of XSS, malicious users can literally destroy your website by commanding
    all users to delete all data to which they have access.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型要严重得多，因为恶意用户输入的数据被存储在数据库中，并且被许多，如果不是所有网站用户看到。使用这种XSS，恶意用户可以命令所有用户删除他们可以访问的所有数据，从而实际上破坏你的网站。
- en: See also
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about XSS and how to deal with it, refer to the following
    resources:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于XSS及其处理方法的信息，请参考以下资源：
- en: '[http://htmlpurifier.org/docs](http://htmlpurifier.org/docs)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://htmlpurifier.org/docs](http://htmlpurifier.org/docs)'
- en: '[http://ha.ckers.org/xss.html](http://ha.ckers.org/xss.html)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://ha.ckers.org/xss.html](http://ha.ckers.org/xss.html)'
- en: '[http://shiflett.org/blog/2007/may/character-encoding-and-xss](http://shiflett.org/blog/2007/may/character-encoding-and-xss)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://shiflett.org/blog/2007/may/character-encoding-and-xss](http://shiflett.org/blog/2007/may/character-encoding-and-xss)'
- en: Preventing SQL injections
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止SQL注入
- en: SQL injection is a type of code injection that uses vulnerability at the database
    level and allows you to execute arbitrary SQL, allowing malicious users to carry
    out actions such as deleting data or raising their privileges.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入是一种代码注入类型，它利用数据库级别的漏洞，允许你执行任意的SQL语句，使得恶意用户能够执行诸如删除数据或提升权限等操作。
- en: In this recipe, we will see examples of vulnerable code and fix them.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到易受攻击的代码示例并修复它们。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述。
- en: 'Execute the following SQL:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下SQL：
- en: '[PRE21]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Generate a `User` model using Gii.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成`User`模型。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we will implement a simple action that checks whether the username and
    password that came from a URL are correct. Create `app/controllers/SqlController.php`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将实现一个简单的动作，检查来自URL的用户名和密码是否正确。创建`app/controllers/SqlController.php`：
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let's try to access it using the `/sql/simple?username=test&password=test` URL.
    As we are unaware of both the username and password, it will, as expected, print
    **Failure**.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试使用`/sql/simple?username=test&password=test` URL来访问它。由于我们不知道用户名和密码，它将像预期的那样打印**失败**。
- en: 'Now try `/sql/simple?username=%27+or+%271%27%3D%271%27%3B+--&password=whatever`.
    This time, it lets us in, even though we still don''t know anything about the
    actual credentials. The decoded part of `usernamevalue` looks like the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试访问`/sql/simple?username=%27+or+%271%27%3D%271%27%3B+--&password=whatever`。这次，它让我们进去了，尽管我们仍然不知道实际的凭证。`usernamevalue`解码部分看起来如下：
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Close the quote so that the syntax stays correct. Add `OR '1'='1',` which makes
    the condition always true. Use `; --` to end the query and comment the rest.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭引号以保持语法正确。添加`OR '1'='1',`使条件始终为真。使用`; --`结束查询并注释其余部分。
- en: 'As no escaping was done, the whole query executed was:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于没有进行转义，整个查询执行如下：
- en: '[PRE24]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The best way to fix this is to use a prepared statement, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决这个问题最好的方法是使用预处理语句，如下所示：
- en: '[PRE25]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now check `/sql/prepared` with the same malicious parameters. This time everything
    was fine and we received the **Failure** message. The same principle applies to
    ActiveRecord. The only difference here is that AR uses other syntax:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在用相同的恶意参数检查`/sql/prepared`。这次一切正常，我们收到了**失败**消息。同样的原则也适用于ActiveRecord。这里唯一的区别是AR使用不同的语法：
- en: '[PRE26]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the previous code, we used the `username` and `password` parameters like
    an array key with a value style. If we had written the previous code by using
    only the first argument, it would be vulnerable:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们像数组键一样使用了`username`和`password`参数，并带有值样式。如果我们只使用第一个参数来编写之前的代码，它就会变得脆弱：
- en: '[PRE27]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If used properly, prepared statements can save you from all types of SQL injections.
    Still, there are some common problems:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用得当，预处理语句可以让你免受所有类型的SQL注入。尽管如此，还有一些常见问题：
- en: You can only bind one value to a single parameter, so if you want to query `WHERE
    IN(1, 2, 3, 4)`, you will have to create and bind four parameters.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只能将一个值绑定到一个参数上，所以如果你想查询`WHERE IN(1, 2, 3, 4)`，你将不得不创建并绑定四个参数。
- en: Prepared statements cannot be used for table names, column names, and other
    keywords.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理语句不能用于表名、列名和其他关键字。
- en: 'When using `ActiveRecord`, the first problem can be solved by adding `where`,
    as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用`ActiveRecord`时，第一个问题可以通过添加`where`来解决，如下所示：
- en: '[PRE28]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The second problem can be solved in multiple ways. The first way is to rely
    on active record and PDO quoting:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个问题可以通过多种方式解决。第一种方式是依赖于活动记录和PDO引号：
- en: '[PRE29]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'But the most secure way is to use the whitelist approach, as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但最安全的方式是使用白名单方法，如下所示：
- en: '[PRE30]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main goal when preventing SQL injection is to properly filter the input.
    In all cases except table names, we have used prepared statements—a feature supported
    by most relational database servers. They allows you to build statements once
    and then use them multiple times, and they provide a safe way of binding parameter
    values.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 防止SQL注入的主要目标是正确地过滤输入。在除了表名之外的所有情况下，我们使用了预处理语句——这是大多数关系型数据库服务器支持的一个特性。它们允许你一次性构建语句，然后多次使用，并提供了一种绑定参数值的安全方式。
- en: 'In Yii, you can use prepared statements for both Active Record and DAO. When
    using DAO, it can be achieved by using either `bindValue` or `bindParam`. The
    latter is useful when we want to execute multiple queries of the same type while
    varying parameter values:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，你可以为Active Record和DAO使用预处理语句。当使用DAO时，可以通过使用`bindValue`或`bindParam`来实现。后者在我们想要执行多个相同类型的查询同时改变参数值时很有用：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Most Active Record methods accept parameters. To be safe, you should use these
    instead of just passing the raw data in.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Active Record方法都接受参数。为了安全起见，你应该使用这些参数而不是直接传递原始数据。
- en: As for quoting table names, columns, and other keywords, you can either rely
    on Active Record or use the whitelist approach.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 至于引号表名、列名和其他关键字，你可以依赖于活动记录或使用白名单方法。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于SQL注入以及通过Yii与数据库交互的信息，请参考以下内容：
- en: '[http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies](http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies](http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-db-connection.html](http://www.yiiframework.com/doc-2.0/yii-db-connection.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-db-connection.html](http://www.yiiframework.com/doc-2.0/yii-db-connection.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-db-command.html](http://www.yiiframework.com/doc-2.0/yii-db-command.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-db-command.html](http://www.yiiframework.com/doc-2.0/yii-db-command.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections)'
- en: The *Getting data from a database* recipe in [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da
    "Chapter 3. ActiveRecord, Model, and Database"), *ActiveRecord, Model, and Database*
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da "第3章。ActiveRecord,
    Model, 和数据库")的*从数据库获取数据*食谱中，*ActiveRecord, Model, 和数据库*
- en: Preventing CSRF
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止CSRF
- en: CSRF is an abbreviation for cross-site request forgery, where a malicious user
    tricks the user's browser into silently performing an HTTP request to the website
    when the user is logged in.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF是跨站请求伪造的缩写，恶意用户欺骗用户的浏览器在用户登录时静默地向网站执行HTTP请求。
- en: 'An example of such an attack is inserting an invisible image tag with `src`
    pointing to `http://example.com/site/logout`. Even if the `image` tag is inserted
    in another website, you will be immediately logged out from `example.com`. The
    consequences of CSRF can be very serious: destroying website data, preventing
    all website users from logging in, exposing private data, and so on.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这种攻击的一个例子是插入一个不可见的图像标签，其 `src` 指向 `http://example.com/site/logout`。即使该 `image`
    标签插入在其他网站上，你也会立即从 `example.com` 登出。CSRF 的后果可能非常严重：破坏网站数据，阻止所有网站用户登录，泄露私人数据等等。
- en: 'Some facts about CSRF:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CSRF 的几个事实：
- en: As CSRF should be performed by the victim user's browser, the attacker cannot
    normally change the HTTP headers sent. However, there are both browser and Flash
    plugin vulnerabilities that exist which allow users to spoof headers, so we should
    not rely on these.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 CSRF 应该由受害者用户的浏览器执行，攻击者通常无法更改发送的 HTTP 头部。然而，存在浏览器和 Flash 插件漏洞，允许用户伪造头部，因此我们不应依赖这些。
- en: The attacker should pass the same parameters and values as the user would normally.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击者应该传递与用户通常相同的参数和值。
- en: Considering these, a good method of dealing with CSRF is by passing and checking
    a unique token during form submissions and, additionally, using GET according
    to the HTTP specification.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些，处理 CSRF 的一个好方法是，在表单提交期间传递和检查一个唯一的令牌，并且，此外，根据 HTTP 规范使用 GET。
- en: Yii includes built-in token generation and token checking. Additionally, it
    can automate inserting a token into the HTML forms.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 包含内置的令牌生成和令牌检查功能。此外，它还可以自动将令牌插入到 HTML 表单中。
- en: 'In order to avoid CSRF, you should always:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免 CSRF，你应该始终：
- en: Follow, HTTP specification, that is, `GET` should not change its application
    state
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循 HTTP 规范，即 `GET` 不应改变其应用程序状态
- en: Keep Yii CSRF protection enabled
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持 Yii CSRF 保护启用
- en: In this recipe, we will see how to make sure our application is CSRF-resistant.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何确保我们的应用程序对 CSRF 具有抵抗力。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用官方指南中描述的 Composer 包管理器创建一个新的应用程序，官方指南的网址为 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to turn ON the anti-CSRF protection, we should add `config/main.php`
    as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了启用反 CSRF 保护，我们应该按照以下方式添加 `config/main.php`：
- en: '[PRE32]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The option `enableCsrfValidation` defaults to `true`. When CSRF validation is
    enabled, forms submitted to a Yii web application must originate from the same
    application. If not, a `400 HTTP exception` will be raised.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选项 `enableCsrfValidation` 默认为 `true`。当 CSRF 验证启用时，提交给 Yii 网络应用程序的表单必须来自同一应用程序。如果不是，将引发
    `400 HTTP 异常`。
- en: Note that this feature requires that the user client accepts cookies.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，此功能要求用户客户端接受 cookie。
- en: 'After configuring the application, you should use `ActiveForm::beginForm` and
    `CHtml::endForm` instead of HTML form tags in view with `ActiveForm`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置应用程序后，你应该在带有 `ActiveForm` 的视图中使用 `ActiveForm::beginForm` 和 `CHtml::endForm`
    而不是 HTML 表单标签：
- en: '[PRE33]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'OR manually:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者手动：
- en: '[PRE34]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the first case, Yii automatically adds a hidden token field, as follows:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一种情况下，Yii 自动添加一个隐藏的令牌字段，如下所示：
- en: '[PRE35]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you save this form as HTML and try submitting it, you will get a message
    like the one shown in the following screenshot instead of regular data processing:![How
    to do it...](img/image00464.jpeg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你将此表单保存为 HTML 并尝试提交，你将收到如下截图所示的提示信息，而不是常规的数据处理：![如何操作...](img/image00464.jpeg)
- en: How it works...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Internally, during form rendering, we have code like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，在表单渲染期间，我们有如下代码：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the previous code, `getCsrfToken()` generates a unique token value and writes
    it to a cookie. Then, on subsequent requests, both the cookie and `POST` values
    are compared. If they don't match, an error message is shown instead of usual
    data processing.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`getCsrfToken()` 生成一个唯一的令牌值并将其写入到 cookie 中。然后，在随后的请求中，比较 cookie 和 `POST`
    值。如果它们不匹配，将显示错误信息而不是常规的数据处理。
- en: If you need to perform a `POST` request but don't want to build a form using
    `CHtml`, then you can pass a parameter with a name from `Yii::app()->request->csrfParam`
    and a value from `Yii::$app->request->getCsrfToken()`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要执行 `POST` 请求但不想使用 `CHtml` 构建表单，则可以传递一个参数，其名称来自 `Yii::app()->request->csrfParam`，其值来自
    `Yii::$app->request->getCsrfToken()`。
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Lets have a look at some more features.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看更多功能。
- en: Disabling CSRF-tokens for all actions
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用所有操作的 CSRF 令牌
- en: If you have a problem with `enableCsrfValidation` you can switch it off.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有 `enableCsrfValidation` 的问题，你可以将其关闭。
- en: 'To disable CSRF, add this code to your controller:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要禁用 CSRF，将以下代码添加到你的控制器中：
- en: '[PRE37]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Disabling CSRF-tokens for a specific action
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用特定操作的 CSRF 令牌
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: CSRF validation for Ajax-calls
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSRF 验证用于 Ajax 调用
- en: 'When the `enableCsrfValidation` option is enabled in the main layout, add `csrfMetaTags`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当主布局中的 `enableCsrfValidation` 选项启用时，添加 `csrfMetaTags`：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Additionally [rename]
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 此外 [重命名]
- en: If your application requires a very high security level, such as a bank account
    management system, extra measures can be taken.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要非常高的安全级别，例如银行账户管理系统，可以采取额外措施。
- en: 'First, you can turn off the remember me feature using `config/main.php,` as
    follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以使用 `config/main.php` 关闭记住我功能，如下所示：
- en: '[PRE40]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that this will not work if the `enabledSession` option is `true`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果 `enabledSession` 选项为 `true`，则此方法将不起作用。
- en: 'Then, you can lower the session timeout, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以降低会话超时时间，如下所示：
- en: '[PRE41]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This sets the number of seconds after which data will be seen as *garbage* and
    cleaned up.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了数据被视为垃圾并清理后的秒数。
- en: Of course, these measures will make the user experience worse, but they will
    add an additional level of security.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些措施将使用户体验更差，但它们将增加一个额外的安全层。
- en: Using GET and POST properly
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正确使用 GET 和 POST
- en: HTTP insists on not using `GET` operations that change data or state. Sticking
    to this rule is good practice. It will not prevent all types of CSRF, but it will
    at least implement some injections, such as `<img src=, pointless>`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 强制不使用会更改数据或状态的 `GET` 操作。坚持这个规则是良好的实践。它不能阻止所有类型的 CSRF，但至少可以实施一些注入，如 `<img
    src=, pointless>`。
- en: See also
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following URLs:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于 SQL 注入和通过 Yii 与数据库交互的信息，请参考以下 URL：
- en: '[http://en.wikipedia.org/wiki/Cross-site_request_forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Cross-site_request_forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-request.html#$enableCsrfValidation-detail](http://www.yiiframework.com/doc-2.0/yii-web-request.html#%24enableCsrfValidation-detail)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-web-request.html#$enableCsrfValidation-detail](http://www.yiiframework.com/doc-2.0/yii-web-request.html#%24enableCsrfValidation-detail)'
- en: The *Preventing XSS* recipe.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*防止 XSS* 食谱。'
- en: Using RBAC
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RBAC
- en: '**Role-Based Access Control** (**RBAC**) provides simple yet powerful centralized
    access control. It is the most powerful access control method available in Yii.
    It is described in the guide, but since it is rather complex and powerful, it
    is not as easy to understand without getting under the hood a little.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**（**RBAC**）提供简单而强大的集中式访问控制。它是 Yii 中最强大的访问控制方法。它在指南中有描述，但由于它相当复杂且强大，如果不稍微深入了解，可能不容易理解。'
- en: In this recipe, we will take the roles hierarchy from the definitive guide,
    import it, and explain what is happening internally.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将从 definitive guide 中获取角色层次结构，导入它，并解释内部发生的情况。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Composer 包管理器创建一个新的应用程序，如官方指南中所述 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Create a MySQL database and configure it.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 MySQL 数据库并配置它。
- en: 'Configure the `authManager` component in your `config/main.php` and `config/console.php`
    as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `config/main.php` 和 `config/console.php` 中配置 `authManager` 组件，如下所示：
- en: '[PRE42]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Run the migration:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移：
- en: '[PRE43]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Carry out the following steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the access rule `rbac/AuthorRule.php`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建访问规则 `rbac/AuthorRule.php`：
- en: '[PRE44]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a console command, `command/RbacController.php`, to `init` the RBAC
    rules command:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制台命令，`command/RbacController.php`，以 `init` RBAC 规则命令：
- en: '[PRE45]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'That''s it. Run it in the console:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。在控制台中运行它：
- en: '[PRE46]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create `controllers/RbacController.php` as follows:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式创建 `controllers/RbacController.php`：
- en: '[PRE47]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now run `rbac/test` once to check access to all the created permissions of the
    RBAC hierarchy:![How to do it...](img/image00468.jpeg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行一次`rbac/test`以检查对RBAC层次结构中创建的所有权限的访问权限：![如何操作...](img/image00468.jpeg)
- en: Then, try to log in as `demo` (the password is `demo`) and run `rbac/test` again:![How
    to do it...](img/image00494.jpeg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，尝试以`demo`（密码是`demo`）身份登录并再次运行`rbac/test`：![如何操作...](img/image00494.jpeg)
- en: Then, try to log in as `admin` (the password is `admin`) and run `rbac/test`
    again:![How to do it...](img/image00473.jpeg)
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，尝试以`admin`（密码是`admin`）身份登录并再次运行`rbac/test`：![如何操作...](img/image00473.jpeg)
- en: Log in as `demo` user and run `rbac/delete`:![How to do it...](img/image00475.jpeg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`demo`用户身份登录并运行`rbac/delete`：![如何操作...](img/image00475.jpeg)
- en: Log in as `admin` and run `rbac/delete`:![How to do it...](img/image00536.jpeg)
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`admin`身份登录并运行`rbac/delete`：![如何操作...](img/image00536.jpeg)
- en: How it works…
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Yii implements a general hierarchical RBAC following the `NIST RBAC` model.
    It provides RBAC functionality through the `authManagerapplication` component.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Yii实现了遵循`NIST RBAC`模型的通用层次结构RBAC。它通过`authManagerapplication`组件提供RBAC功能。
- en: 'The RBAC hierarchy is a directed acyclic graph, that is, a set of nodes and
    their directed connections or edges. There are three types of node available:
    roles, permissions, and rules.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC层次结构是一个有向无环图，即一组节点及其有向连接或边。有三种类型的节点可用：角色、权限和规则。
- en: A role represents a collection of permissions (for example creating posts and
    updating posts). A role may be assigned to one or multiple users. To check if
    a user has a specified permission, we may check whether the user is assigned with
    a role that contains that permission.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 角色代表一组权限（例如创建帖子和管理帖子）。一个角色可以分配给一个或多个用户。为了检查用户是否具有指定的权限，我们可以检查用户是否被分配了一个包含该权限的角色。
- en: Both roles and permissions can be organized in a hierarchy. In particular, a
    role may consist of other roles or permissions, and a permission may consist of
    other permissions. Yii implements a partial-order hierarchy, which includes the
    more special `tree` hierarchy. While a role can contain a permission, it is not
    true vice versa.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 角色和权限都可以组织成层次结构。特别是，一个角色可能包含其他角色或权限，一个权限也可能包含其他权限。Yii实现了一个部分顺序的层次结构，它包括更特殊的`tree`层次结构。虽然一个角色可以包含一个权限，但反过来不一定成立。
- en: 'For testing permissions, we have created two actions. The first action, `test`,
    contains checkers for created permissions and roles. The second action is `delete`,
    which is limited through the access filter. The rule for the access filter contains
    the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试权限，我们创建了两个操作。第一个操作是`test`，它包含了对创建的权限和角色的检查器。第二个操作是`delete`，它通过访问过滤器进行限制。访问过滤器的规则包含以下代码：
- en: '[PRE48]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This means that we are allowing all users who have the `deletePost` permission
    to run the `deletePost` action. Yii starts checking with the `deletePost` permission.
    Besides the fact that the access rule element is named as `roles`, you can specify
    an RBAC hierarchy node be it a role, rule, or permission. Checking for `updatePost`
    is complex:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们允许所有具有`deletePost`权限的用户运行`deletePost`操作。Yii从`deletePost`权限开始检查。除了访问规则元素被命名为`roles`之外，您还可以指定RBAC层次结构节点，无论是角色、规则还是权限。检查`updatePost`是复杂的：
- en: '[PRE49]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We use a second parameter to pass a post (in our case, we have simulated it
    with `stdClass`). If a user is logged in as `demo`, then to get access we need
    to go from `updatePost` to author. If you're lucky, you only have to go through
    `updatePost`, `updateOwnPost`, and author.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用第二个参数来传递一个帖子（在我们的例子中，我们用`stdClass`模拟了它）。如果用户以`demo`身份登录，那么为了获取访问权限，我们需要从`updatePost`到作者。如果你很幸运，你可能只需要通过`updatePost`、`updateOwnPost`和作者。
- en: As `updateOwnPost` has a rule defined, it will be run with a parameter passed
    to `checkAccess`. If the result is true, then access will be granted. As Yii does
    not know what the shortest way is, it tries to check all possibilities until it
    is successful, or no alternatives are left.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`updateOwnPost`定义了一个规则，它将在传递给`checkAccess`的参数下运行。如果结果是true，则将授予访问权限。由于Yii不知道最短路径是什么，它会尝试检查所有可能性，直到成功或没有其他选择。
- en: There's more…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: There are some useful tricks that will help you to use RBAC efficiently, which
    are discussed in the following subsections.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的技巧，可以帮助您有效地使用RBAC，这些技巧将在以下小节中讨论。
- en: Keeping hierarchy simple and efficient
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持层次结构简单和高效
- en: 'Follow these recommendations where possible to maximize the performance and
    reduce hierarchy complexity:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下遵循以下建议，以最大限度地提高性能并减少层次结构复杂性：
- en: Avoid attaching multiple roles to a single user
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免将多个角色分配给单个用户
- en: Don't connect nodes of the same type; so, for example, avoid connecting one
    task to another
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要连接相同类型的节点；例如，避免将一个任务连接到另一个任务
- en: Naming RBAC nodes
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名 RBAC 节点
- en: 'A complex hierarchy becomes difficult to understand without using some kind
    of naming convention. One possible convention that helps to limit confusion is
    as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用某种命名约定，复杂的层次结构就难以理解。以下是一个可能的约定，有助于减少混淆：
- en: '[PRE50]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Where `own` is used when the rule determines an ability to modify an element
    only if the current user is the owner of the element and the `group` is just a
    namespace. The `entity` is the name of the entity we are working with and `action`
    is the action that we are performing.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `own` 用于规则确定只有当当前用户是元素的拥有者且 `group` 只是一个命名空间时，用户才能修改元素。`entity` 是我们正在处理的实体的名称，`action`
    是我们正在执行的操作。
- en: For example, if we need to create a rule that determines whether the user can
    delete a blog post, we will name it `blog_post_delete`. If the rule determines
    whether a user can edit his or her own blog comment, the name will be `blog_own_comment_edit`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们需要创建一个规则来决定用户是否可以删除博客文章，我们将将其命名为 `blog_post_delete`。如果规则决定用户是否可以编辑自己的博客评论，名称将是
    `blog_own_comment_edit`。
- en: See also
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于 SQL 注入和通过 Yii 与数据库交互的信息，请参考以下内容：
- en: '[http://csrc.nist.gov/rbac/sandhu-ferraiolo-kuhn-00.pdf](http://csrc.nist.gov/rbac/sandhu-ferraiolo-kuhn-00.pdf)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RBAC 沙恩杜-费拉伊奥洛-库恩 00](http://csrc.nist.gov/rbac/sandhu-ferraiolo-kuhn-00.pdf)'
- en: '[http://en.wikipedia.org/wiki/Role-based_access_control](http://en.wikipedia.org/wiki/Role-based_access_control)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基于角色的访问控制](http://en.wikipedia.org/wiki/Role-based_access_control)'
- en: '[http://en.wikipedia.org/wiki/Directed_acyclic_graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[有向无环图](http://en.wikipedia.org/wiki/Directed_acyclic_graph)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac)'
- en: The *Using controller filters* recipe
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制器过滤器的配方
- en: Encrypting/Decrypting data
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密/解密数据
- en: The Yii2 framework contains a special security component that provides a set
    of methods for handling common security-related tasks. The `\yii\base\Security`
    class requires the `OpenSSL` PHP extension instead of `mcrypt`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 框架包含一个特殊的网络安全组件，该组件提供了一套处理常见安全相关任务的方法。`\yii\base\Security` 类需要 `OpenSSL`
    PHP 扩展而不是 `mcrypt`。
- en: Getting ready
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南使用 Composer 包管理器创建一个新应用程序，[官方指南链接](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Set up the database connection and create a table named `order`, as follows:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式设置数据库连接并创建一个名为 `order` 的表：
- en: '[PRE51]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Generate an `Order` model using Gii.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gii 生成 `Order` 模型。
- en: How to do it...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add an additional key parameter to `config/params.php`, as follows:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/params.php` 中添加一个额外的键参数，如下所示：
- en: '[PRE52]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the `behaviors` and `helper` properties to the `Order` model as follows:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `behaviors` 和 `helper` 属性添加到 `Order` 模型中，如下所示：
- en: '[PRE53]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add `controllers/CryptoController.php`:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `controllers/CryptoController.php`：
- en: '[PRE54]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Run `crypto/test` and you will get the following:![How to do it...](img/image00482.jpeg)
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `crypto/test`，你将得到以下结果：![如何操作...](img/image00482.jpeg)
- en: To view raw data, run `crypto/raw`:![How to do it...](img/image00484.jpeg)
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看原始数据，运行 `crypto/raw`：![如何操作...](img/image00484.jpeg)
- en: How it works...
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Firstly, we have added the `AttributeBehavior,` which automatically processes
    our data when certain events happen. Our certain events are `ActiveRecord::EVENT_AFTER_INSERT,
    ActiveRecord::EVENT_AFTER_UPDATE` and `ActiveRecord::EVENT_AFTER_FIND`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加了 `AttributeBehavior`，它会在某些事件发生时自动处理我们的数据。我们的事件是 `ActiveRecord::EVENT_AFTER_INSERT`、`ActiveRecord::EVENT_AFTER_UPDATE`
    和 `ActiveRecord::EVENT_AFTER_FIND`。
- en: 'During insert and update events, we decrypt our data with a special method:
    `Yii::$app->security->encryptByKey();`. This method uses HKDF and a random salt
    to decrypt our data before saving it to the database. After getting data from
    the database, we can also use the `ActiveRecord::EVENT_AFTER_FIND` method to decrypt
    our data. In this case, we also use the special Yii2 method `Yii::$app->security->encryptByKey();`.This
    method accepts two params: encrypted data and key.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入和更新事件期间，我们使用特殊方法`Yii::$app->security->encryptByKey();`解密我们的数据：在将其保存到数据库之前，使用HKDF和随机盐解密我们的数据。从数据库获取数据后，我们还可以使用`ActiveRecord::EVENT_AFTER_FIND`方法来解密我们的数据。在这种情况下，我们也使用特殊的Yii2方法`Yii::$app->security->encryptByKey();`。此方法接受两个参数：加密数据和密钥。
- en: There's more…
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Besides data encryption and data decryption, a secure component also provides
    key derivation using standard algorithms, data tampering prevention, and password
    validation.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据加密和解密，安全组件还提供使用标准算法进行密钥派生、数据篡改预防和密码验证。
- en: Working with passwords
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理密码
- en: 'Verifying a password:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 验证密码：
- en: '[PRE55]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about SQL injections and working with databases through
    Yii, refer to [http://www.yiiframework.com/doc-2.0/guide-security-passwords.html](http://www.yiiframework.com/doc-2.0/guide-security-passwords.html)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于SQL注入和通过Yii与数据库工作的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-security-passwords.html](http://www.yiiframework.com/doc-2.0/guide-security-passwords.html)
