- en: Chapter 5. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using controller filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing SQL injections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing CSRF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RBAC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting/Decrypting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a crucial part of any web application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to keep your application secure according
    to the general web application security principle "filter input, escape output".
    We will cover topics such as creating your own controller filters, preventing
    XSS, CSRF, and SQL injections, escaping output, and using role-based access control.
    To know security best practices refer to [http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-debug-info-and-tools-at-production).
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most web applications provide a way for users to log in or reset their forgotten
    passwords. In Yii2, we don't have this opportunity by default. For a `basic` application
    template, Yii provides only two test users by default, which are statically described
    in the `User` model. So, we have to implement special code to be able to enable
    user login from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the component section of your config, add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `User` table. Create a migration by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the just created migration with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the existing `models/User` model with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a migration, which will add a test user. Use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the just created migration with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all migrations with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, follow the URL `site/login` action and enter `admin`/`admin` as your credentials:![How
    to do it...](img/image00386.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! If you have completed these steps, you should able to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a migration for the user table. Apart from our ID and username,
    our table contains special fields such as `auth_key` (the main use of this is
    to authenticate the user by cookie), `password_hash` (for security reasons we
    won't store the password as it is and will store only the password hash), and
    `password_reset_token` (used when we need to reset the user's password).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result after installation and `create_test_user` migration should look like
    the following screenshot:![How it works...](img/image00399.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We've also added special methods to the `User` model and changed the inheritance
    to `class User extends ActiveRecord implements IdentityInterface` because we need
    to be able to find users in the database.
  prefs: []
  type: TYPE_NORMAL
- en: You also can copy the `User` model from an advanced app at [https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php](https://github.com/yiisoft/yii2-app-advanced/blob/master/common/models/User.php).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-security-authentication.html](http://www.yiiframework.com/doc-2.0/guide-security-authentication.html)
  prefs: []
  type: TYPE_NORMAL
- en: Using controller filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, we need to filter the incoming data or perform some actions based
    on the data. For example, with custom filters, we can filter visitors by IP, force
    users to use HTTPS, or redirect the user to an installation page prior to using
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: In Yii2, filters are essentially a special kind of behavior, so using filters
    is the same as using behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii has a lot of built-in usable filters, which include:'
  prefs: []
  type: TYPE_NORMAL
- en: Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content Negotiator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HttpCache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PageCache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RateLimiter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this recipe, we will implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Limiting access to the controller action to authorized users only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting access to the controller action to specified IPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting access to specific user roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `app/components/AccessRule.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `app/controllers/AccessController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `User` class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use `AccessControl`, declare it in the `behaviors()` method of your controller
    class. We do this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now try to run controller actions using Internet Explorer and other browsers
    by using both the `admin` and `demo` usernames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start with limiting access to the controller action to authorized users
    only. See the following code in the `rules` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Each array here is an access rule. You can either use `allow=true` or `allow=false`
    for a deny rule. For each rule, there are several parameters.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Yii does not deny everything, so consider adding `['allow' => false]`
    to the end of your rules list if you need maximum security.
  prefs: []
  type: TYPE_NORMAL
- en: In our rule, we use two parameters. The first is the actions parameter, which
    takes an array of actions to which the rule will be applied. The second is the
    roles parameter, which takes an array of user roles to determine the users this
    rule applies to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii2''s built in Access Control supports only two roles by default: guest (not
    logged in), represented by `?`, and authenticated, represented by `@`.'
  prefs: []
  type: TYPE_NORMAL
- en: With simple access controls, we can just limit access to specific pages or controller
    actions based on the login state. If users are not logged in when they visit these
    pages, Yii will redirect them to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Rules are executed one by one, starting from the top, until one matches. If
    nothing matches, then the action is treated as allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task is to limit access to specific IPs. In this case, the following
    two access rules are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first rule allows access to the IP action from a list of IPs specified.
    In our case, we are using a loopback address, which always points to our own computer.
    Try changing it to `127.0.0.2`, for example, to see how it works when the address
    does not match. The second rule denies everything, including all other IPs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we limit access to one specific user role, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding rule allows a user with a role equal to `admin` to run the user
    action. Therefore, if you log in as `admin`, it will let you in, but if you log
    in as `demo`, it will not.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00453.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have overridden the standard `AccessRule` class on our own, which is located
    in the `components/AccessRule.php` file. Inside our `AccessRule` class, we have
    overridden the `matchRole` method on our own, where we get and check the current
    user role and match it with roles from our rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to deny access to a specific browser. For this recipe, we
    are denying only Internet Explorer 9\. The rule itself is put on top, so it executes
    first, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The detection technique that we are using is not very reliable, as MSIE is contained
    in many other user agent strings. For a list of possible user agent strings, you
    can refer to [http://www.useragentstring.com/](http://www.useragentstring.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, we used another filter rule property named `'matchCallback'`.
    This property will apply only when functions which are described in this property
    return `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Our function checks if the user agent string contains MSIE 9.0 sting. Depending
    on your requirements, you can specify any PHP code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about access control and filters, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-filters.html](http://www.yiiframework.com/doc-2.0/guide-structure-filters.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html](http://www.yiiframework.com/doc-2.0/yii-filters-accesscontrol.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html](http://www.yiiframework.com/doc-2.0/yii-filters-accessrule.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md](https://github.com/yiisoft/yii2/blob/master/docs/guide/structure-filters.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#access-control-filter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using RBAC* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XSS stands for cross-site scripting and is a type of vulnerability that allows
    one to inject a client-side script (typically JavaScript) in a page viewed by
    other users. Considering the power of client-side scripting, this can lead to
    very serious consequences such as bypassing security checks, getting other user's
    credentials, or data leaks.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to prevent XSS by escaping the output with both
    `\yii\helpers\Html` and `\yii\helpers\HtmlPurifier`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `controllers/XssController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Normally, it will be used as `/xss/simple?username=Administrator`. However,
    as the main security principle *filter input, escape output* was not taken into
    account, malicious users will be able to use it in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code will result in a script execution, as shown in the following
    screenshot:![Getting ready](img/image00421.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to prevent the XSS alert shown in the previous screenshot, we need
    to escape the data before passing it to the browser. We do this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now instead of an alert, we will get properly escaped HTML, as shown in the
    following screenshot:![How to do it...](img/image00435.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Therefore, the basic rule is to always escape all dynamic data. For example,
    we should do the same for a link name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. You have a page that is free from XSS. Now, what if we want to
    allow some HTML to pass? We cannot use `\yii\helpers\Html::encode` anymore because
    it will render HTML as just a code and we need the actual representation. Fortunately,
    there is a tool bundled with Yii that allows you to filter the malicious HTML.
    It is named `HTML Purifier` and can be used in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we access the HTML action using a URL such as `/xss/index?username=<i>username</i>!<script>alert(''XSS'')</script>`,
    HTML Purifier will remove the malicious part and we will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00446.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internally, `\yii\helpers\Html::encode` looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So basically, we use PHP's internal `htmlspecialchars` function, which is pretty
    secure if one does not forget to pass the correct charset in the third argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`\yii\helpers\HtmlPurifier` uses the HTML Purifier library, which is the most
    advanced solution out there to prevent XSS inside of HTML. We have used its default
    configuration, which is okay for most user-entered content.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more things to know about XSS and HTML Purifier; they are discussed
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: XSS types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two main types of XSS injections, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Non-persistent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first type is the one we have used in the recipe and is the most common
    XSS type; it can be found in most insecure web applications. Data passed by the
    user or through a URL is not stored anywhere, so the injected script will be executed
    only once and only for the user who entered it. Still, it is not as secure as
    it looks. Malicious users can include XSS in a link to another website and their
    core will be executed when another user follows the link.
  prefs: []
  type: TYPE_NORMAL
- en: The second type is much more serious, as the data entered by a malicious user
    is stored in the database and is shown to many, if not all, website users. Using
    this type of XSS, malicious users can literally destroy your website by commanding
    all users to delete all data to which they have access.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about XSS and how to deal with it, refer to the following
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://htmlpurifier.org/docs](http://htmlpurifier.org/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ha.ckers.org/xss.html](http://ha.ckers.org/xss.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://shiflett.org/blog/2007/may/character-encoding-and-xss](http://shiflett.org/blog/2007/may/character-encoding-and-xss)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing SQL injections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL injection is a type of code injection that uses vulnerability at the database
    level and allows you to execute arbitrary SQL, allowing malicious users to carry
    out actions such as deleting data or raising their privileges.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see examples of vulnerable code and fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following SQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate a `User` model using Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will implement a simple action that checks whether the username and
    password that came from a URL are correct. Create `app/controllers/SqlController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's try to access it using the `/sql/simple?username=test&password=test` URL.
    As we are unaware of both the username and password, it will, as expected, print
    **Failure**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now try `/sql/simple?username=%27+or+%271%27%3D%271%27%3B+--&password=whatever`.
    This time, it lets us in, even though we still don''t know anything about the
    actual credentials. The decoded part of `usernamevalue` looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the quote so that the syntax stays correct. Add `OR '1'='1',` which makes
    the condition always true. Use `; --` to end the query and comment the rest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As no escaping was done, the whole query executed was:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The best way to fix this is to use a prepared statement, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now check `/sql/prepared` with the same malicious parameters. This time everything
    was fine and we received the **Failure** message. The same principle applies to
    ActiveRecord. The only difference here is that AR uses other syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the previous code, we used the `username` and `password` parameters like
    an array key with a value style. If we had written the previous code by using
    only the first argument, it would be vulnerable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If used properly, prepared statements can save you from all types of SQL injections.
    Still, there are some common problems:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can only bind one value to a single parameter, so if you want to query `WHERE
    IN(1, 2, 3, 4)`, you will have to create and bind four parameters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepared statements cannot be used for table names, column names, and other
    keywords.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using `ActiveRecord`, the first problem can be solved by adding `where`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second problem can be solved in multiple ways. The first way is to rely
    on active record and PDO quoting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'But the most secure way is to use the whitelist approach, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main goal when preventing SQL injection is to properly filter the input.
    In all cases except table names, we have used prepared statements—a feature supported
    by most relational database servers. They allows you to build statements once
    and then use them multiple times, and they provide a safe way of binding parameter
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Yii, you can use prepared statements for both Active Record and DAO. When
    using DAO, it can be achieved by using either `bindValue` or `bindParam`. The
    latter is useful when we want to execute multiple queries of the same type while
    varying parameter values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Most Active Record methods accept parameters. To be safe, you should use these
    instead of just passing the raw data in.
  prefs: []
  type: TYPE_NORMAL
- en: As for quoting table names, columns, and other keywords, you can either rely
    on Active Record or use the whitelist approach.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies](http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-db-connection.html](http://www.yiiframework.com/doc-2.0/yii-db-connection.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-db-command.html](http://www.yiiframework.com/doc-2.0/yii-db-command.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-sql-injections)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting data from a database* recipe in [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da
    "Chapter 3. ActiveRecord, Model, and Database"), *ActiveRecord, Model, and Database*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing CSRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSRF is an abbreviation for cross-site request forgery, where a malicious user
    tricks the user's browser into silently performing an HTTP request to the website
    when the user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of such an attack is inserting an invisible image tag with `src`
    pointing to `http://example.com/site/logout`. Even if the `image` tag is inserted
    in another website, you will be immediately logged out from `example.com`. The
    consequences of CSRF can be very serious: destroying website data, preventing
    all website users from logging in, exposing private data, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some facts about CSRF:'
  prefs: []
  type: TYPE_NORMAL
- en: As CSRF should be performed by the victim user's browser, the attacker cannot
    normally change the HTTP headers sent. However, there are both browser and Flash
    plugin vulnerabilities that exist which allow users to spoof headers, so we should
    not rely on these.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The attacker should pass the same parameters and values as the user would normally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering these, a good method of dealing with CSRF is by passing and checking
    a unique token during form submissions and, additionally, using GET according
    to the HTTP specification.
  prefs: []
  type: TYPE_NORMAL
- en: Yii includes built-in token generation and token checking. Additionally, it
    can automate inserting a token into the HTML forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to avoid CSRF, you should always:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow, HTTP specification, that is, `GET` should not change its application
    state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep Yii CSRF protection enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will see how to make sure our application is CSRF-resistant.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to turn ON the anti-CSRF protection, we should add `config/main.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The option `enableCsrfValidation` defaults to `true`. When CSRF validation is
    enabled, forms submitted to a Yii web application must originate from the same
    application. If not, a `400 HTTP exception` will be raised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that this feature requires that the user client accepts cookies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After configuring the application, you should use `ActiveForm::beginForm` and
    `CHtml::endForm` instead of HTML form tags in view with `ActiveForm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OR manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the first case, Yii automatically adds a hidden token field, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you save this form as HTML and try submitting it, you will get a message
    like the one shown in the following screenshot instead of regular data processing:![How
    to do it...](img/image00464.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Internally, during form rendering, we have code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, `getCsrfToken()` generates a unique token value and writes
    it to a cookie. Then, on subsequent requests, both the cookie and `POST` values
    are compared. If they don't match, an error message is shown instead of usual
    data processing.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to perform a `POST` request but don't want to build a form using
    `CHtml`, then you can pass a parameter with a name from `Yii::app()->request->csrfParam`
    and a value from `Yii::$app->request->getCsrfToken()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lets have a look at some more features.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling CSRF-tokens for all actions
  prefs: []
  type: TYPE_NORMAL
- en: If you have a problem with `enableCsrfValidation` you can switch it off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To disable CSRF, add this code to your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Disabling CSRF-tokens for a specific action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: CSRF validation for Ajax-calls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `enableCsrfValidation` option is enabled in the main layout, add `csrfMetaTags`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Additionally [rename]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your application requires a very high security level, such as a bank account
    management system, extra measures can be taken.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can turn off the remember me feature using `config/main.php,` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that this will not work if the `enabledSession` option is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can lower the session timeout, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This sets the number of seconds after which data will be seen as *garbage* and
    cleaned up.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these measures will make the user experience worse, but they will
    add an additional level of security.
  prefs: []
  type: TYPE_NORMAL
- en: Using GET and POST properly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTP insists on not using `GET` operations that change data or state. Sticking
    to this rule is good practice. It will not prevent all types of CSRF, but it will
    at least implement some injections, such as `<img src=, pointless>`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Cross-site_request_forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf](http://www.yiiframework.com/doc-2.0/guide-security-best-practices.html#avoiding-csrf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-request.html#$enableCsrfValidation-detail](http://www.yiiframework.com/doc-2.0/yii-web-request.html#%24enableCsrfValidation-detail)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preventing XSS* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RBAC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Role-Based Access Control** (**RBAC**) provides simple yet powerful centralized
    access control. It is the most powerful access control method available in Yii.
    It is described in the guide, but since it is rather complex and powerful, it
    is not as easy to understand without getting under the hood a little.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will take the roles hierarchy from the definitive guide,
    import it, and explain what is happening internally.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a MySQL database and configure it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the `authManager` component in your `config/main.php` and `config/console.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the access rule `rbac/AuthorRule.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a console command, `command/RbacController.php`, to `init` the RBAC
    rules command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Run it in the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `controllers/RbacController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run `rbac/test` once to check access to all the created permissions of the
    RBAC hierarchy:![How to do it...](img/image00468.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, try to log in as `demo` (the password is `demo`) and run `rbac/test` again:![How
    to do it...](img/image00494.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, try to log in as `admin` (the password is `admin`) and run `rbac/test`
    again:![How to do it...](img/image00473.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as `demo` user and run `rbac/delete`:![How to do it...](img/image00475.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as `admin` and run `rbac/delete`:![How to do it...](img/image00536.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yii implements a general hierarchical RBAC following the `NIST RBAC` model.
    It provides RBAC functionality through the `authManagerapplication` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The RBAC hierarchy is a directed acyclic graph, that is, a set of nodes and
    their directed connections or edges. There are three types of node available:
    roles, permissions, and rules.'
  prefs: []
  type: TYPE_NORMAL
- en: A role represents a collection of permissions (for example creating posts and
    updating posts). A role may be assigned to one or multiple users. To check if
    a user has a specified permission, we may check whether the user is assigned with
    a role that contains that permission.
  prefs: []
  type: TYPE_NORMAL
- en: Both roles and permissions can be organized in a hierarchy. In particular, a
    role may consist of other roles or permissions, and a permission may consist of
    other permissions. Yii implements a partial-order hierarchy, which includes the
    more special `tree` hierarchy. While a role can contain a permission, it is not
    true vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing permissions, we have created two actions. The first action, `test`,
    contains checkers for created permissions and roles. The second action is `delete`,
    which is limited through the access filter. The rule for the access filter contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we are allowing all users who have the `deletePost` permission
    to run the `deletePost` action. Yii starts checking with the `deletePost` permission.
    Besides the fact that the access rule element is named as `roles`, you can specify
    an RBAC hierarchy node be it a role, rule, or permission. Checking for `updatePost`
    is complex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We use a second parameter to pass a post (in our case, we have simulated it
    with `stdClass`). If a user is logged in as `demo`, then to get access we need
    to go from `updatePost` to author. If you're lucky, you only have to go through
    `updatePost`, `updateOwnPost`, and author.
  prefs: []
  type: TYPE_NORMAL
- en: As `updateOwnPost` has a rule defined, it will be run with a parameter passed
    to `checkAccess`. If the result is true, then access will be granted. As Yii does
    not know what the shortest way is, it tries to check all possibilities until it
    is successful, or no alternatives are left.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some useful tricks that will help you to use RBAC efficiently, which
    are discussed in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping hierarchy simple and efficient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these recommendations where possible to maximize the performance and
    reduce hierarchy complexity:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid attaching multiple roles to a single user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't connect nodes of the same type; so, for example, avoid connecting one
    task to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naming RBAC nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A complex hierarchy becomes difficult to understand without using some kind
    of naming convention. One possible convention that helps to limit confusion is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Where `own` is used when the rule determines an ability to modify an element
    only if the current user is the owner of the element and the `group` is just a
    namespace. The `entity` is the name of the entity we are working with and `action`
    is the action that we are performing.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we need to create a rule that determines whether the user can
    delete a blog post, we will name it `blog_post_delete`. If the rule determines
    whether a user can edit his or her own blog comment, the name will be `blog_own_comment_edit`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about SQL injections and working with databases through
    Yii, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://csrc.nist.gov/rbac/sandhu-ferraiolo-kuhn-00.pdf](http://csrc.nist.gov/rbac/sandhu-ferraiolo-kuhn-00.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Role-based_access_control](http://en.wikipedia.org/wiki/Role-based_access_control)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Directed_acyclic_graph](http://en.wikipedia.org/wiki/Directed_acyclic_graph)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html#role-based-access-control-rbac)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using controller filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting/Decrypting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Yii2 framework contains a special security component that provides a set
    of methods for handling common security-related tasks. The `\yii\base\Security`
    class requires the `OpenSSL` PHP extension instead of `mcrypt`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the database connection and create a table named `order`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate an `Order` model using Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add an additional key parameter to `config/params.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `behaviors` and `helper` properties to the `Order` model as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `controllers/CryptoController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `crypto/test` and you will get the following:![How to do it...](img/image00482.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view raw data, run `crypto/raw`:![How to do it...](img/image00484.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we have added the `AttributeBehavior,` which automatically processes
    our data when certain events happen. Our certain events are `ActiveRecord::EVENT_AFTER_INSERT,
    ActiveRecord::EVENT_AFTER_UPDATE` and `ActiveRecord::EVENT_AFTER_FIND`.
  prefs: []
  type: TYPE_NORMAL
- en: 'During insert and update events, we decrypt our data with a special method:
    `Yii::$app->security->encryptByKey();`. This method uses HKDF and a random salt
    to decrypt our data before saving it to the database. After getting data from
    the database, we can also use the `ActiveRecord::EVENT_AFTER_FIND` method to decrypt
    our data. In this case, we also use the special Yii2 method `Yii::$app->security->encryptByKey();`.This
    method accepts two params: encrypted data and key.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides data encryption and data decryption, a secure component also provides
    key derivation using standard algorithms, data tampering prevention, and password
    validation.
  prefs: []
  type: TYPE_NORMAL
- en: Working with passwords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Verifying a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about SQL injections and working with databases through
    Yii, refer to [http://www.yiiframework.com/doc-2.0/guide-security-passwords.html](http://www.yiiframework.com/doc-2.0/guide-security-passwords.html)
  prefs: []
  type: TYPE_NORMAL
