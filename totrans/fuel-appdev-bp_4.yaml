- en: Chapter 4. Creating and Using Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 创建和使用包
- en: In this chapter, you will learn how to install, use, and create FuelPHP packages.
    For illustration purposes, we suppose that we want to prevent spammers and bots
    from polluting our website, and we will explore two different solutions for solving
    this issue. We will first use an existing package (recatpcha), and then we will
    create our own package.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何安装、使用和创建FuelPHP包。为了说明目的，我们假设我们想要防止垃圾邮件发送者和机器人污染我们的网站，我们将探讨两种不同的解决方案来解决这个问题。我们首先将使用现有的包（recaptcha），然后我们将创建自己的包。
- en: 'By the end of this chapter, you will know:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解：
- en: What are CAPTCHAs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAPTCHA是什么
- en: How to install an external package manually or with the oil command line
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何手动或使用oil命令行安装外部包
- en: What is reCAPTCHA and how to use the associated FuelPHP package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: reCAPTCHA是什么以及如何使用相关的FuelPHP包
- en: How to create your own package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建自己的包
- en: What is a bootstrap file and how to use it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动文件是什么以及如何使用它
- en: What are CAPTCHAs?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CAPTCHA是什么？
- en: '**CAPTCHA**s (**Completely Automated Public Turing test to tell Computers and
    Humans Apart**) are generally used to prevent bots or programs from accessing
    some features of a website. For instance, in a blog, you may want to prevent bots
    from adding unsolicited and unrelated ads in the comments section. If you want
    your users to pay a membership fee to access your content, you might also want
    to prevent programs from aspiring this restricted content.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**CAPTCHA**（完全自动化的公开图灵测试，用于区分计算机和人类）通常用于防止机器人或程序访问网站的一些功能。例如，在博客中，您可能希望防止机器人在评论部分添加未经请求和不相关的广告。如果您希望用户支付会员费才能访问您的内容，您可能还希望防止程序访问此受限制的内容。'
- en: 'You have probably already seen a lot of CAPTCHAs, generally displayed as distorted
    text inside images. A well-known service is reCAPTCHA, whose verification form
    looks like the following image:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经看到了很多CAPTCHA，通常以图像中的扭曲文本形式显示。一个知名的服务是reCAPTCHA，其验证表单看起来如下所示：
- en: '![What are CAPTCHAs?](img/5401OS_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![CAPTCHA是什么？](img/5401OS_04_01.jpg)'
- en: Unfortunately, since there are a lot of incentives to create Spam bots, no CAPTCHA
    system is perfect, but at least they make the bots' work more difficult.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，由于创建垃圾邮件机器人的激励措施很多，没有CAPTCHA系统是完美的，但至少它们使机器人的工作更加困难。
- en: Preliminary steps
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步步骤
- en: 'You first need to follow the given steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要遵循以下步骤：
- en: Install a new FuelPHP instance.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装新的FuelPHP实例。
- en: Configure Apache and your host file to handle it. In this chapter, we will access
    our application by requesting `http://mytest.app`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Apache和您的宿主文件以处理它。在本章中，我们将通过请求`http://mytest.app`来访问我们的应用程序。
- en: Update Composer if necessary.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，更新Composer。
- en: Create a new database for your application.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的应用程序创建一个新的数据库。
- en: Configure FuelPHP in order to allow your application to access this database.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置FuelPHP以允许您的应用程序访问此数据库。
- en: These steps have been covered in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application,* so
    you might want to take a look at it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤已在[第1章](ch01.html "第1章. 创建您的第一个FuelPHP应用程序")*创建您的第一个FuelPHP应用程序*中介绍，因此您可能想查看它。
- en: Generating the sample application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成示例应用程序
- en: In order to test our packages, we will create a simple application that will
    handle dummy items. Just to be perfectly clear, we are not interested here by
    the ultimate goal of the application; this is just a test application. Most of
    the work will be done inside the packages. The user interface and the model will
    therefore be very simple and will be fully generated by the scaffold command of
    the `oil` utility. The packages will later be connected to the creation and edition
    features to determine whether or not the visitor is human.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的包，我们将创建一个简单的应用程序来处理虚拟项目。为了完全清楚起见，我们在这里不关心应用程序的最终目标；这只是一个测试应用程序。大部分工作将在包内部完成。因此，用户界面和模型将非常简单，将由`oil`工具的scaffold命令完全生成。稍后，我们将将这些包连接到创建和编辑功能，以确定访问者是否为人类。
- en: 'First, generate the scaffold using the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下命令生成scaffold：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will print the following output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打印以下输出：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, execute the generated migration file by executing the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过执行以下命令来执行生成的迁移文件：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you now request the following URL, our test application should work perfectly:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在请求以下URL，我们的测试应用程序应该可以完美运行：
- en: '`http://mytest.app/item`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://mytest.app/item`'
- en: The reCAPTCHA solution
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: reCAPTCHA解决方案
- en: The first method for integrating a CAPTCHA system into your website is to use
    FuelPHP's **recaptcha package**. This is a convenient solution, since there is
    not much to be implemented and it allows you to integrate a well-known CAPTCHA
    system that your visitors are used to dealing with.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将 CAPTCHA 系统集成到您网站的第一种方法是通过使用 FuelPHP 的 **recaptcha 包**。这是一个方便的解决方案，因为它不需要实现太多，并且允许您集成一个您的访客已经习惯使用的知名
    CAPTCHA 系统。
- en: Installing the recaptcha package
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 recaptcha 包
- en: First, we will install the recaptcha package, which easily integrates the **reCAPTCHA
    service** into your FuelPHP application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将安装 recaptcha 包，它可以将 **reCAPTCHA 服务**轻松集成到您的 FuelPHP 应用程序中。
- en: The reCAPTCHA service is a popular and free service provided by Google that
    allows you to check whether or not your visitor is a bot by asking him/her to
    enter words seen in distorted text images on screen. An interesting fact is that
    it helps to digitize the text of actual images and books.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: reCAPTCHA 服务是由 Google 提供的一个流行且免费的服务，它通过要求访客在屏幕上输入扭曲文本图像中看到的单词来检查您的访客是否为机器人。一个有趣的事实是，它有助于将实际图像和书籍的文本数字化。
- en: 'Installing the package is very simple. Visit the following URL:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包非常简单。访问以下 URL：
- en: '[https://github.com/fuel-packages/fuel-recaptcha](https://github.com/fuel-packages/fuel-recaptcha)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/fuel-packages/fuel-recaptcha](https://github.com/fuel-packages/fuel-recaptcha)'
- en: Now, click on the **Download ZIP** button and then unzip the file inside the
    `PKGPATH` directory (`fuel/packages`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 **下载 ZIP** 按钮，然后解压缩文件到 `PKGPATH` 目录（`fuel/packages`）中。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are alternative ways of downloading packages. You can use the `oil` utility
    using the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他下载包的方法。您可以使用以下命令使用 `oil` 工具：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is recommended that you read the official documentation about this `oil`
    feature available at the following URL:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您阅读有关此 `oil` 功能的官方文档，该文档可在以下 URL 获取：
- en: '[http://fuelphp.com/docs/packages/oil/package.html](http://fuelphp.com/docs/packages/oil/package.html)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/packages/oil/package.html](http://fuelphp.com/docs/packages/oil/package.html)'
- en: (Can be accessed through the FuelPHP website by navigating to **DOCS** | **TABLE
    OF CONTENTS** | **Oil** | **Package**)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （可以通过 FuelPHP 网站通过导航到 **DOCS** | **目录** | **Oil** | **包** 来访问）
- en: Some packages can also be installed through the Composer utility.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包也可以通过 Composer 工具安装。
- en: Configuring the recaptcha package
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 recaptcha 包
- en: 'Before proceeding, you need to create an account on the reCAPTCHA website:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您需要在 reCAPTCHA 网站上创建一个账户：
- en: '[http://www.google.com/recaptcha](http://www.google.com/recaptcha)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.google.com/recaptcha](http://www.google.com/recaptcha)'
- en: Once this is done, you have to copy the `PKGPATH/fuel-recaptcha/config/recaptcha.php`
    configuration file to `APPPATH/config/recaptcha.php` and set inside the new file
    the `private_key` and `public_key` keys provided in the reCAPTCHA website.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您必须将 `PKGPATH/fuel-recaptcha/config/recaptcha.php` 配置文件复制到 `APPPATH/config/recaptcha.php`，并在新文件中设置
    reCAPTCHA 网站提供的 `private_key` 和 `public_key` 密钥。
- en: Integrating the recaptcha package
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成 recaptcha 包
- en: 'Now that we have installed and configured the recaptcha package in our FuelPHP
    instance, we just have to integrate it into our creation and edition forms. Open
    the `APPPATH/views/item/_form.php` file, and between the two `div` elements with
    the `form-group` class, add the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并配置了 recaptcha 包到我们的 FuelPHP 实例中，我们只需将其集成到我们的创建和编辑表单中。打开 `APPPATH/views/item/_form.php`
    文件，并在具有 `form-group` 类的两个 `div` 元素之间，添加以下代码：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At the beginning of the `create` and `edit` action of the `Item` controller,
    add the following line of code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Item` 控制器的 `create` 和 `edit` 动作的开始处，添加以下代码行：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you display the creation or edition form, the reCAPTCHA validation system
    will appear as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您显示创建或编辑表单，reCAPTCHA 验证系统将如以下截图所示：
- en: '![Integrating the recaptcha package](img/5401OS_04_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![集成 recaptcha 包](img/5401OS_04_02.jpg)'
- en: 'All we have to do now is to check whether the value entered by the user is
    correct. Open the `Item` controller, and in the `create` and `edit` actions, surround
    the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要做的就是检查用户输入的值是否正确。打开 `Item` 控制器，并在 `create` 和 `edit` 动作中，围绕以下代码：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `Item` controller, add the CAPTCHA verification method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Item` 控制器中，添加 CAPTCHA 验证方法：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Any item addition/edition will now fail if you enter an invalid value for the
    CAPTCHA.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为 CAPTCHA 输入无效值，任何项目添加/编辑都将失败。
- en: Creating your own package
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的包
- en: The solution we saw previously can be implemented quickly, but there is a major
    flaw; reCAPTCHA is very well known, and there are various online services that
    offer to decode thousands of them for a few dollars (they can use Optical Character
    Recognition or even actual human solvers). In fact, any well-known system has
    the same problem, so sometimes the best solution lies more in the originality
    of the system than its absolute robustness. Indeed, even if the new system is
    much simpler, it will force spammers to specifically create new bots if they want
    to pollute your website, thus creating a kind of resistance (as long as your website
    is not popular).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的解决方案可以快速实现，但存在一个主要缺陷；reCAPTCHA 非常知名，有各种在线服务提供以几美元的价格解码数千个（它们可以使用光学字符识别甚至实际的人类解密者）。实际上，任何知名系统都存在同样的问题，因此有时最好的解决方案在于系统的原创性，而不是其绝对的鲁棒性。确实，即使新系统更加简单，它也会迫使垃圾邮件发送者专门创建新的机器人，如果他们想要污染你的网站，从而产生一种阻力（只要你的网站不是特别受欢迎）。
- en: We will therefore build a new CAPTCHA package in order to create our own original
    solution. Instead of displaying an image containing distorted text, we will simply
    ask the visitor to calculate a simple addition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将构建一个新的 CAPTCHA 包，以便创建我们自己的原创解决方案。我们不会显示包含扭曲文本的图像，而是简单地要求访客计算一个简单的加法。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the solution is only implemented to demonstrate how a package
    can be built. We will therefore, choose a very simple solution that can potentially
    be easily decoded. You are welcome to adapt this modest package to create your
    own robust verification system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个解决方案仅实现来演示如何构建一个包。因此，我们将选择一个非常简单的解决方案，它可能很容易被解码。欢迎你根据这个朴素的包创建你自己的鲁棒验证系统。
- en: Conception
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念
- en: As we need to check whether the user has entered the correct number on the server,
    we will save the expected answer in the database. For doing this, we will generate
    the `Captcha_Answer` model that will only contain the `id`, `expected_value`,
    and `created_at` attributes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要检查用户是否在服务器上输入了正确的数字，我们将把预期的答案保存在数据库中。为此，我们将生成一个只包含 `id`、`expected_value`
    和 `created_at` 属性的 `Captcha_Answer` 模型。
- en: Generating the package
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成包
- en: 'We will again use the `oil` command to generate a scaffold for our package:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用 `oil` 命令为我们的包生成脚手架：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will print the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印以下输出：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see that several files have been generated. If you open the `Captcha`
    class located at `PKGPATH/captcha/classes/captcha.php`, you will see that the
    class is in the `Captcha` namespace and several methods are already implemented:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到已经生成了几个文件。如果你打开位于 `PKGPATH/captcha/classes/captcha.php` 的 `Captcha` 类，你会看到该类位于
    `Captcha` 命名空间中，并且已经实现了几个方法：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There are five methods, as follows: The constructor, where you pass the package
    configuration as a parameter.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有五个方法，如下：构造函数，其中你传递包配置作为参数。
- en: The static `forge` method, which gets the package configuration file located
    at `PKGPATH/captcha/config/captcha.php` and passes it to the constructor. This
    means that if you create a `Captcha` object using the `forge` method, its configuration
    will automatically be loaded from the configuration file, whereas if you create
    it using the constructor, you will have to define the package configuration manually.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态的 `forge` 方法，它获取位于 `PKGPATH/captcha/config/captcha.php` 的包配置文件并将其传递给构造函数。这意味着如果你使用
    `forge` 方法创建一个 `Captcha` 对象，其配置将自动从配置文件中加载，而如果你使用构造函数创建它，你必须手动定义包配置。
- en: The `get_config` and `set_config` methods are self-explanatory.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_config` 和 `set_config` 方法是自解释的。'
- en: The `_init` method, which is called when the `Captcha` class is initialized.
    In a general manner, in any class, if you define a static `_init` method, it will
    be called when the class is loaded by FuelPHP. In our class, the method loads
    the configuration file located at `PKGPATH/captcha/config/captcha.php`.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_init` 方法，在初始化 `Captcha` 类时被调用。一般来说，在任意类中，如果你定义了一个静态的 `_init` 方法，当类被 FuelPHP
    加载时，它将被调用。在我们的类中，该方法加载位于 `PKGPATH/captcha/config/captcha.php` 的配置文件。'
- en: The `PKGPATH/captcha/config/captcha.php` configuration file is currently an
    empty array, but you are free to add as many parameters as you wish.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`PKGPATH/captcha/config/captcha.php` 配置文件目前是一个空数组，但你可以根据需要添加任意多的参数。'
- en: The `captcha` package we generated also has a `bootstrap` file located at `PKGPATH/captcha/bootstrap.php`.
    This `bootstrap` file is executed when the package is loaded. Similarly, the `APPPATH/bootstrap.php`
    file is executed when your application is loaded (almost each time a web page
    is requested).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成的`captcha`包也包含一个位于`PKGPATH/captcha/bootstrap.php`的`bootstrap`文件。当包被加载时，此`bootstrap`文件将被执行。同样，当您的应用程序被加载时（几乎每次请求网页时），`APPPATH/bootstrap.php`文件将被执行。
- en: 'If you open the `PKGPATH/captcha/bootstrap.php` file, you will see the following
    code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开`PKGPATH/captcha/bootstrap.php`文件，您将看到以下代码：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Autoloader::add_classes` method specifies to the Autoloader where classes
    can be found. For instance, after executing the `bootstrap` file, FuelPHP will
    know that the `Captcha\Captcha` class is located in the `PKGPATH/captcha/classes/captcha.php`
    file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Autoloader::add_classes`方法指定了Autoloader可以在哪里找到类。例如，在执行`bootstrap`文件后，FuelPHP将知道`Captcha\Captcha`类位于`PKGPATH/captcha/classes/captcha.php`文件中。'
- en: The `Autoloader::add_core_namespace` method specifies to the `Autoloader` a
    namespace that needs to be added to the core namespace. In practical terms, after
    executing the `bootstrap` file, `\Captcha\Captcha` and `\Captcha` will both refer
    to the same class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Autoloader::add_core_namespace`方法指定了需要添加到核心命名空间中的命名空间。在实践中，在执行`bootstrap`文件后，`\Captcha\Captcha`和`\Captcha`都将指向同一个类。'
- en: 'It is recommended that you read the Autoloader official documentation that
    can be found at:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您阅读可以在以下位置找到的Autoloader官方文档：
- en: '[http://fuelphp.com/docs/classes/autoloader.html](http://fuelphp.com/docs/classes/autoloader.html)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/autoloader.html](http://fuelphp.com/docs/classes/autoloader.html)'
- en: (This can be accessed by navigating to the FuelPHP website at **DOCS** | **TABLE
    OF CONTENTS** | **Core** | **Autoloader**)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: (可以通过访问FuelPHP网站在**DOCS** | **目录** | **核心** | **自动加载器**处找到)
- en: 'It is also recommended that you read the official documentation about packages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议您阅读有关包的官方文档：
- en: '[http://fuelphp.com/docs/general/packages.html](http://fuelphp.com/docs/general/packages.html)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/general/packages.html](http://fuelphp.com/docs/general/packages.html)'
- en: (This can be accessed by navigating to the FuelPHP website at **DOCS** | **TABLE
    OF CONTENTS** | **FuelPHP** | **General** | **Packages**.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: (可以通过访问FuelPHP网站在**DOCS** | **目录** | **FuelPHP** | **通用** | **包**处找到)
- en: Generating the Captcha_Answer model
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成Captcha_Answer模型
- en: 'For speeding up the process, we will again use the `oil` command line:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快进程，我们再次使用`oil`命令行：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will print the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印以下输出：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Before doing anything else, you need to move these files into our package:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何其他操作之前，您需要将这些文件移动到我们的包中：
- en: Move `APPPATH/classes/model/captcha/answer.php` to `PKGPATH/captcha/classes/model/captcha/answer.php`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`APPPATH/classes/model/captcha/answer.php`移动到`PKGPATH/captcha/classes/model/captcha/answer.php`。
- en: Also, move `APPPATH/migrations/002_create_captcha_answers.php` to `PKGPATH/captcha/migrations/001_create_captcha_answers.php`
    (don't forget to rename the file).
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，将`APPPATH/migrations/002_create_captcha_answers.php`移动到`PKGPATH/captcha/migrations/001_create_captcha_answers.php`（别忘了重命名文件）。
- en: 'Once it is done, open `PKGPATH/captcha/classes/model/captcha/answer.php` and
    add the following at the beginning of the file (after `<?php`):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开`PKGPATH/captcha/classes/model/captcha/answer.php`，并在文件开头（在`<?php`之后）添加以下内容：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You also need to add the following property inside the model, in order to automatically
    fill the `created_at` property:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在模型内部添加以下属性，以便自动填充`created_at`属性：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `bootstrap` file located at `PKGPATH/captcha/bootstrap.php`, and add
    the following code at the end of the array passed to `Autoloader::add_classes`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`PKGPATH/captcha/bootstrap.php`的`bootstrap`文件，并在传递给`Autoloader::add_classes`的数组末尾添加以下代码：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Migrating the package
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移包
- en: 'We now need to execute the migration file in the `Captcha` package. In order
    to do this, simply enter the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要执行`Captcha`包中的迁移文件。为了做到这一点，只需输入以下命令：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Integrating the package into our application
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将包集成到我们的应用程序中
- en: In this section, for the sake of clarity, we will assume that you haven't implemented
    the reCAPTCHA solution. Although, it is worth noting that this new implementation
    will clearly be inspired from it. Thus, if you have implemented the reCAPTCHA
    solution, simply replace the old code by the new one as you go.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，为了清晰起见，我们假设您尚未实现reCAPTCHA解决方案。尽管如此，值得注意的是，这个新的实现将明显受到它的启发。因此，如果您已经实现了reCAPTCHA解决方案，只需在执行过程中用新代码替换旧代码即可。
- en: 'First, add the following methods in the `Captcha` class located at `PKGPATH/captcha/classes/captcha.php`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `PKGPATH/captcha/classes/captcha.php` 中 `Captcha` 类的位置添加以下方法：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can notice we didn''t implement anything inside those methods; these are
    just dummy methods. As they are a little bit complex, we will complete them in
    the next section, but for now we will connect them to the test application. Open
    the `APPPATH/views/item/_form.php`, and between the two `div` elements with the
    `form-group` class, add the following lines of code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到我们并没有在那些方法中实现任何功能；这些只是占位方法。由于它们稍微有些复杂，我们将在下一节中完成它们，但现在我们将它们连接到测试应用程序。打开
    `APPPATH/views/item/_form.php`，并在具有 `form-group` 类的两个 `div` 元素之间添加以下代码行：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the beginning of the `create` and `edit` action of the `Item` controller,
    add the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Item` 控制的 `create` 和 `edit` 动作的开头添加以下代码：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We have now to check whether the value entered by the user is correct. Open
    the `Item` controller, and in the `create` and `edit` actions, surround the following
    code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要检查用户输入的值是否正确。打开 `Item` 控制器，并在 `create` 和 `edit` 动作中，围绕以下代码：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, still in the `Item` controller, add the CAPTCHA verification method:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，仍然在 `Item` 控制器中，添加 CAPTCHA 验证方法：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you now test your application, the message **Will be implemented in the
    next section** will appear under **Please verify that you are human**, and any
    item will be added or updated without any checking, as shown in the following
    screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在测试您的应用程序，您将在 **请验证您是人类** 下方看到 **将在下一节实现** 的消息，并且任何项目都将被添加或更新而无需任何检查，如下面的截图所示：
- en: '![Integrating the package into our application](img/5401OS_04_03.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![将包集成到我们的应用程序中](img/5401OS_04_03.jpg)'
- en: Implementing the get_html method
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 get_html 方法
- en: 'Open the `Captcha` class and replace the `get_html` method by the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `Captcha` 类，并用以下代码替换 `get_html` 方法：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, we are calling the `captcha` view inside the `get_html` method.
    Thus, we need to implement it. Create the `PKGPATH/captcha/views/captcha.php`
    view file and add the following content:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在 `get_html` 方法中调用了 `captcha` 视图。因此，我们需要实现它。创建 `PKGPATH/captcha/views/captcha.php`
    视图文件，并添加以下内容：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, as you probably noticed in the `new get_html` method, we get `min_number`
    and `max_number` from the configuration file, so we need to define these values
    (feel free to change them). Open the `PKGPATH/captcha/config/captcha.php` configuration
    file, and replace its content by the following lines of code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如您可能在 `new get_html` 方法中注意到的那样，我们从配置文件中获取 `min_number` 和 `max_number`，因此我们需要定义这些值（请随意更改它们）。打开
    `PKGPATH/captcha/config/captcha.php` 配置文件，并用以下代码替换其内容：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you reload the creation or edition form, you will now see the CAPTCHA verification
    form:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重新加载创建或编辑表单，您现在将看到 CAPTCHA 验证表单：
- en: '![Implementing the get_html method](img/5401OS_04_04.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![实现 get_html 方法](img/5401OS_04_04.jpg)'
- en: Implementing the CAPTCHA verification method
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 CAPTCHA 验证方法
- en: 'The `check_answer` method is pretty simple; as we saved the expected answer
    into a `Model_Captcha_Answer` instance, we just have to retrieve it and check
    whether the posted answer is correct. In the `Captcha` class, replace the `check_answer`
    method by the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`check_answer` 方法相当简单；因为我们已经将预期的答案保存到了一个 `Model_Captcha_Answer` 实例中，所以我们只需要检索它并检查提交的答案是否正确。在
    `Captcha` 类中，用以下代码替换 `check_answer` 方法：'
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Cleaning old captchas
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理旧的 CAPTCHA
- en: As you might have noticed, each time we display a CAPTCHA, we add a new row
    into the `captcha_answers` table, and this row will be cleared when, or rather
    if, the user submits their answer. If the user leaves the form without submitting
    it, the row will never be deleted. A good practice would be to periodically delete
    these rows. We could use the model's delete method for this, but since there can
    be several rows to be removed, we will instead simply execute a SQL request.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已注意到，每次我们显示 CAPTCHA 时，我们都会在 `captcha_answers` 表中添加一行新数据，并且当用户提交答案时，这一行数据将被清除，或者说，如果用户没有提交表单，这一行数据将永远不会被删除。一个良好的做法是定期删除这些行。我们可以使用模型的删除方法来做这件事，但由于可能需要删除多行，我们将会简单地执行一个
    SQL 请求。
- en: 'Still in the `Captcha` class, add the following method:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在 `Captcha` 类中，添加以下方法：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can then add the following at the beginning of the `get_html` and `check_answer`
    methods:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `get_html` 和 `check_answer` 方法的开头添加以下内容：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Since we are using `$this->get_config(''captcha_expiration'')` to determine
    when a `CAPTCHA` expires, we need to define the `captcha_expiration` key in the
    `PKGPATH/captcha/config/captcha.php` configuration file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用`$this->get_config('captcha_expiration')`来确定`CAPTCHA`何时过期，我们需要在`PKGPATH/captcha/config/captcha.php`配置文件中定义`captcha_expiration`键：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Possible improvements
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能的改进
- en: As we explained in the beginning of this section, the package can certainly
    be improved. Instead of displaying the addition in plain text, you could display
    it inside an image. You could then make it a little difficult to read, for example,
    by adding noise and alternating colors. This is out of scope of this chapter,
    since we want to focus on packages, but it is recommended that you add such features
    to improve your PHP and FuelPHP skills.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节开头所解释的，这个包当然可以改进。你可以在图片中显示添加的内容，而不是以纯文本形式显示。例如，你可以通过添加噪声和交替颜色使其稍微难以阅读。这超出了本章的范围，因为我们想专注于包，但建议你添加这样的功能来提高你的PHP和FuelPHP技能。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The main focus of this chapter was packages: how to install external packages
    and how to create your own packages. You have therefore learned how to create
    and use reusable code. We have used the **fuel-recaptcha** package, but if you
    go to the URL [https://github.com/fuel-packages?tab=repositories](https://github.com/fuel-packages?tab=repositories),
    you will see there are a lot of different packages available. Since FuelPHP also
    uses Composer, you can look into [https://packagist.org/search/?q=fuel](https://packagist.org/search/?q=fuel)
    and install additional packages using Composer.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容是关于包：如何安装外部包以及如何创建自己的包。因此，你已经学会了如何创建和使用可重用的代码。我们使用了**fuel-recaptcha**包，但如果你访问网址[https://github.com/fuel-packages?tab=repositories](https://github.com/fuel-packages?tab=repositories)，你会看到那里有很多不同的包可供选择。由于FuelPHP也使用Composer，你可以查看[https://packagist.org/search/?q=fuel](https://packagist.org/search/?q=fuel)并使用Composer安装额外的包。
- en: When you think about adding a new feature in your application, it is always
    a good idea to see if there is an existing project fulfilling your needs. If you
    can't find one, you can improve a close enough package or create your own, as
    we did with our custom `Captcha` package. Once finished, consider sharing it,
    for instance, by publishing it on GitHub; you can then give back to the community
    who brought you this amazing framework.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑在你的应用程序中添加新功能时，查看是否已有满足你需求的项目总是一个好主意。如果你找不到，你可以改进一个足够接近的包或者创建自己的，就像我们用我们的自定义`Captcha`包所做的那样。一旦完成，考虑分享它，例如，通过在GitHub上发布；这样你就可以回馈给你带来这个令人惊叹框架的社区。
- en: In the next chapter, you will see how you can create an application providing
    and using its own API. We will also tackle how you can automatically test your
    application to prevent unwanted regressions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将看到如何创建一个提供并使用其自身API的应用程序。我们还将探讨如何自动测试你的应用程序以防止不希望的反向回归。
