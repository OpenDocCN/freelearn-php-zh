- en: Chapter 4. Creating and Using Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to install, use, and create FuelPHP packages.
    For illustration purposes, we suppose that we want to prevent spammers and bots
    from polluting our website, and we will explore two different solutions for solving
    this issue. We will first use an existing package (recatpcha), and then we will
    create our own package.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: What are CAPTCHAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install an external package manually or with the oil command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is reCAPTCHA and how to use the associated FuelPHP package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create your own package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a bootstrap file and how to use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are CAPTCHAs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CAPTCHA**s (**Completely Automated Public Turing test to tell Computers and
    Humans Apart**) are generally used to prevent bots or programs from accessing
    some features of a website. For instance, in a blog, you may want to prevent bots
    from adding unsolicited and unrelated ads in the comments section. If you want
    your users to pay a membership fee to access your content, you might also want
    to prevent programs from aspiring this restricted content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have probably already seen a lot of CAPTCHAs, generally displayed as distorted
    text inside images. A well-known service is reCAPTCHA, whose verification form
    looks like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What are CAPTCHAs?](img/5401OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unfortunately, since there are a lot of incentives to create Spam bots, no CAPTCHA
    system is perfect, but at least they make the bots' work more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Preliminary steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You first need to follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a new FuelPHP instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Apache and your host file to handle it. In this chapter, we will access
    our application by requesting `http://mytest.app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update Composer if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new database for your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure FuelPHP in order to allow your application to access this database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These steps have been covered in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application,* so
    you might want to take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the sample application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to test our packages, we will create a simple application that will
    handle dummy items. Just to be perfectly clear, we are not interested here by
    the ultimate goal of the application; this is just a test application. Most of
    the work will be done inside the packages. The user interface and the model will
    therefore be very simple and will be fully generated by the scaffold command of
    the `oil` utility. The packages will later be connected to the creation and edition
    features to determine whether or not the visitor is human.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, generate the scaffold using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It will print the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the generated migration file by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now request the following URL, our test application should work perfectly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mytest.app/item`'
  prefs: []
  type: TYPE_NORMAL
- en: The reCAPTCHA solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first method for integrating a CAPTCHA system into your website is to use
    FuelPHP's **recaptcha package**. This is a convenient solution, since there is
    not much to be implemented and it allows you to integrate a well-known CAPTCHA
    system that your visitors are used to dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the recaptcha package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will install the recaptcha package, which easily integrates the **reCAPTCHA
    service** into your FuelPHP application.
  prefs: []
  type: TYPE_NORMAL
- en: The reCAPTCHA service is a popular and free service provided by Google that
    allows you to check whether or not your visitor is a bot by asking him/her to
    enter words seen in distorted text images on screen. An interesting fact is that
    it helps to digitize the text of actual images and books.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the package is very simple. Visit the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/fuel-packages/fuel-recaptcha](https://github.com/fuel-packages/fuel-recaptcha)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the **Download ZIP** button and then unzip the file inside the
    `PKGPATH` directory (`fuel/packages`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are alternative ways of downloading packages. You can use the `oil` utility
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It is recommended that you read the official documentation about this `oil`
    feature available at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/packages/oil/package.html](http://fuelphp.com/docs/packages/oil/package.html)'
  prefs: []
  type: TYPE_NORMAL
- en: (Can be accessed through the FuelPHP website by navigating to **DOCS** | **TABLE
    OF CONTENTS** | **Oil** | **Package**)
  prefs: []
  type: TYPE_NORMAL
- en: Some packages can also be installed through the Composer utility.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the recaptcha package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before proceeding, you need to create an account on the reCAPTCHA website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.google.com/recaptcha](http://www.google.com/recaptcha)'
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, you have to copy the `PKGPATH/fuel-recaptcha/config/recaptcha.php`
    configuration file to `APPPATH/config/recaptcha.php` and set inside the new file
    the `private_key` and `public_key` keys provided in the reCAPTCHA website.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the recaptcha package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have installed and configured the recaptcha package in our FuelPHP
    instance, we just have to integrate it into our creation and edition forms. Open
    the `APPPATH/views/item/_form.php` file, and between the two `div` elements with
    the `form-group` class, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At the beginning of the `create` and `edit` action of the `Item` controller,
    add the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you display the creation or edition form, the reCAPTCHA validation system
    will appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating the recaptcha package](img/5401OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All we have to do now is to check whether the value entered by the user is
    correct. Open the `Item` controller, and in the `create` and `edit` actions, surround
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'By:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Item` controller, add the CAPTCHA verification method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Any item addition/edition will now fail if you enter an invalid value for the
    CAPTCHA.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The solution we saw previously can be implemented quickly, but there is a major
    flaw; reCAPTCHA is very well known, and there are various online services that
    offer to decode thousands of them for a few dollars (they can use Optical Character
    Recognition or even actual human solvers). In fact, any well-known system has
    the same problem, so sometimes the best solution lies more in the originality
    of the system than its absolute robustness. Indeed, even if the new system is
    much simpler, it will force spammers to specifically create new bots if they want
    to pollute your website, thus creating a kind of resistance (as long as your website
    is not popular).
  prefs: []
  type: TYPE_NORMAL
- en: We will therefore build a new CAPTCHA package in order to create our own original
    solution. Instead of displaying an image containing distorted text, we will simply
    ask the visitor to calculate a simple addition.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the solution is only implemented to demonstrate how a package
    can be built. We will therefore, choose a very simple solution that can potentially
    be easily decoded. You are welcome to adapt this modest package to create your
    own robust verification system.
  prefs: []
  type: TYPE_NORMAL
- en: Conception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we need to check whether the user has entered the correct number on the server,
    we will save the expected answer in the database. For doing this, we will generate
    the `Captcha_Answer` model that will only contain the `id`, `expected_value`,
    and `created_at` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will again use the `oil` command to generate a scaffold for our package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that several files have been generated. If you open the `Captcha`
    class located at `PKGPATH/captcha/classes/captcha.php`, you will see that the
    class is in the `Captcha` namespace and several methods are already implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'There are five methods, as follows: The constructor, where you pass the package
    configuration as a parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The static `forge` method, which gets the package configuration file located
    at `PKGPATH/captcha/config/captcha.php` and passes it to the constructor. This
    means that if you create a `Captcha` object using the `forge` method, its configuration
    will automatically be loaded from the configuration file, whereas if you create
    it using the constructor, you will have to define the package configuration manually.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `get_config` and `set_config` methods are self-explanatory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `_init` method, which is called when the `Captcha` class is initialized.
    In a general manner, in any class, if you define a static `_init` method, it will
    be called when the class is loaded by FuelPHP. In our class, the method loads
    the configuration file located at `PKGPATH/captcha/config/captcha.php`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `PKGPATH/captcha/config/captcha.php` configuration file is currently an
    empty array, but you are free to add as many parameters as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: The `captcha` package we generated also has a `bootstrap` file located at `PKGPATH/captcha/bootstrap.php`.
    This `bootstrap` file is executed when the package is loaded. Similarly, the `APPPATH/bootstrap.php`
    file is executed when your application is loaded (almost each time a web page
    is requested).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the `PKGPATH/captcha/bootstrap.php` file, you will see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `Autoloader::add_classes` method specifies to the Autoloader where classes
    can be found. For instance, after executing the `bootstrap` file, FuelPHP will
    know that the `Captcha\Captcha` class is located in the `PKGPATH/captcha/classes/captcha.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The `Autoloader::add_core_namespace` method specifies to the `Autoloader` a
    namespace that needs to be added to the core namespace. In practical terms, after
    executing the `bootstrap` file, `\Captcha\Captcha` and `\Captcha` will both refer
    to the same class.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is recommended that you read the Autoloader official documentation that
    can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/autoloader.html](http://fuelphp.com/docs/classes/autoloader.html)'
  prefs: []
  type: TYPE_NORMAL
- en: (This can be accessed by navigating to the FuelPHP website at **DOCS** | **TABLE
    OF CONTENTS** | **Core** | **Autoloader**)
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also recommended that you read the official documentation about packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/general/packages.html](http://fuelphp.com/docs/general/packages.html)'
  prefs: []
  type: TYPE_NORMAL
- en: (This can be accessed by navigating to the FuelPHP website at **DOCS** | **TABLE
    OF CONTENTS** | **FuelPHP** | **General** | **Packages**.)
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Captcha_Answer model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For speeding up the process, we will again use the `oil` command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Before doing anything else, you need to move these files into our package:'
  prefs: []
  type: TYPE_NORMAL
- en: Move `APPPATH/classes/model/captcha/answer.php` to `PKGPATH/captcha/classes/model/captcha/answer.php`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, move `APPPATH/migrations/002_create_captcha_answers.php` to `PKGPATH/captcha/migrations/001_create_captcha_answers.php`
    (don't forget to rename the file).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once it is done, open `PKGPATH/captcha/classes/model/captcha/answer.php` and
    add the following at the beginning of the file (after `<?php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to add the following property inside the model, in order to automatically
    fill the `created_at` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `bootstrap` file located at `PKGPATH/captcha/bootstrap.php`, and add
    the following code at the end of the array passed to `Autoloader::add_classes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Migrating the package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now need to execute the migration file in the `Captcha` package. In order
    to do this, simply enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Integrating the package into our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, for the sake of clarity, we will assume that you haven't implemented
    the reCAPTCHA solution. Although, it is worth noting that this new implementation
    will clearly be inspired from it. Thus, if you have implemented the reCAPTCHA
    solution, simply replace the old code by the new one as you go.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following methods in the `Captcha` class located at `PKGPATH/captcha/classes/captcha.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can notice we didn''t implement anything inside those methods; these are
    just dummy methods. As they are a little bit complex, we will complete them in
    the next section, but for now we will connect them to the test application. Open
    the `APPPATH/views/item/_form.php`, and between the two `div` elements with the
    `form-group` class, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'At the beginning of the `create` and `edit` action of the `Item` controller,
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now to check whether the value entered by the user is correct. Open
    the `Item` controller, and in the `create` and `edit` actions, surround the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'By:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, still in the `Item` controller, add the CAPTCHA verification method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now test your application, the message **Will be implemented in the
    next section** will appear under **Please verify that you are human**, and any
    item will be added or updated without any checking, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating the package into our application](img/5401OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the get_html method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `Captcha` class and replace the `get_html` method by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are calling the `captcha` view inside the `get_html` method.
    Thus, we need to implement it. Create the `PKGPATH/captcha/views/captcha.php`
    view file and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, as you probably noticed in the `new get_html` method, we get `min_number`
    and `max_number` from the configuration file, so we need to define these values
    (feel free to change them). Open the `PKGPATH/captcha/config/captcha.php` configuration
    file, and replace its content by the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you reload the creation or edition form, you will now see the CAPTCHA verification
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the get_html method](img/5401OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the CAPTCHA verification method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `check_answer` method is pretty simple; as we saved the expected answer
    into a `Model_Captcha_Answer` instance, we just have to retrieve it and check
    whether the posted answer is correct. In the `Captcha` class, replace the `check_answer`
    method by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Cleaning old captchas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you might have noticed, each time we display a CAPTCHA, we add a new row
    into the `captcha_answers` table, and this row will be cleared when, or rather
    if, the user submits their answer. If the user leaves the form without submitting
    it, the row will never be deleted. A good practice would be to periodically delete
    these rows. We could use the model's delete method for this, but since there can
    be several rows to be removed, we will instead simply execute a SQL request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the `Captcha` class, add the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then add the following at the beginning of the `get_html` and `check_answer`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using `$this->get_config(''captcha_expiration'')` to determine
    when a `CAPTCHA` expires, we need to define the `captcha_expiration` key in the
    `PKGPATH/captcha/config/captcha.php` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Possible improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we explained in the beginning of this section, the package can certainly
    be improved. Instead of displaying the addition in plain text, you could display
    it inside an image. You could then make it a little difficult to read, for example,
    by adding noise and alternating colors. This is out of scope of this chapter,
    since we want to focus on packages, but it is recommended that you add such features
    to improve your PHP and FuelPHP skills.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main focus of this chapter was packages: how to install external packages
    and how to create your own packages. You have therefore learned how to create
    and use reusable code. We have used the **fuel-recaptcha** package, but if you
    go to the URL [https://github.com/fuel-packages?tab=repositories](https://github.com/fuel-packages?tab=repositories),
    you will see there are a lot of different packages available. Since FuelPHP also
    uses Composer, you can look into [https://packagist.org/search/?q=fuel](https://packagist.org/search/?q=fuel)
    and install additional packages using Composer.'
  prefs: []
  type: TYPE_NORMAL
- en: When you think about adding a new feature in your application, it is always
    a good idea to see if there is an existing project fulfilling your needs. If you
    can't find one, you can improve a close enough package or create your own, as
    we did with our custom `Captcha` package. Once finished, consider sharing it,
    for instance, by publishing it on GitHub; you can then give back to the community
    who brought you this amazing framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will see how you can create an application providing
    and using its own API. We will also tackle how you can automatically test your
    application to prevent unwanted regressions.
  prefs: []
  type: TYPE_NORMAL
