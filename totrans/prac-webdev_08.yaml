- en: Chapter 8. Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To some, Ajax is the name of a Dutch soccer team out of Amsterdam. To web developers,
    Ajax (also **Asynchronous JavaScript And XML** (**AJAX**)) is the collective name
    for a number of web techniques used on the client side to asynchronously retrieve
    data from the server. I started this chapter with this heavily loaded sentence
    because I always like to explain an acronym when I use it.
  prefs: []
  type: TYPE_NORMAL
- en: The A (asynchronous) is almost always present, the J (JavaScript) is a sure
    thing, as we are talking client side, but the X (XML) is not mandatory. Usually
    **JSON** is used as the data format between client and server. We will discuss
    both XML and JSON in [Chapter 10](ch10.html "Chapter 10. XML and JSON"), *XML
    and JSON*. In our examples, we will use the already familiar HTML format instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using these techniques, a website can be modified after data is retrieved in
    the background, and parts of the screen can be updated without having to load
    a brand new page. This way, our website will begin to behave more like a desktop
    application, so we can safely call it a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Unless properly managed, Ajax has its drawbacks. As it is all implemented using
    JavaScript, the desired behavior will not occur if JavaScript is switched off.
    In 2015, this should not be a concern. There are other drawbacks, but not without
    solutions to address them. That we will do, without delay, in [Chapter 9](ch09.html
    "Chapter 9. The History API – Not Forgetting Where We Are"), *The History API–Not
    Forgetting Where We Are*.
  prefs: []
  type: TYPE_NORMAL
- en: XMLHttpRequest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ajax technologies rely on the **XMLHttpRequest** (**XHR**) object that can
    be used in JavaScript code. It is used to send HTTP or HTTPS requests to a web
    server and load the server response data back into the script. As is the case
    with many other web technologies, implementations of XMLHttpRequest differ in
    various browsers. Here, again, jQuery will come to the rescue. By using jQuery
    and the Ajax related methods it comes with, those incompatibilities do not have
    any cause for concern.
  prefs: []
  type: TYPE_NORMAL
- en: Ajax and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several methods that come with jQuery that you can use to make what
    we like to refer to as Ajax calls. The most complete one is, not surprisingly,
    called .`ajax()`. We will start with a simple one.
  prefs: []
  type: TYPE_NORMAL
- en: Many Ajax-based sites are like that—an omnipresent menu on top, some other navigation
    in a footer at the bottom, and a center piece with constantly changing content.
    We cannot stress early enough that when we use Ajax the way we describe here,
    and our website is called `index.php`, no matter how often the content of the
    center piece changes, our current web page will still be `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's assume that we have a website with a main menu on top, and some basic
    content in the middle, inside a `<div>` with the id `varicontent`. It does not
    really matter what is inside `#varicontent` on the initial load—it is typically
    a nice photo banner—this is the chapter that explains what goes on when we change
    its content and replace it with something different.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Ajax methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will walk you through some of the most useful jQuery methods to use Ajax,
    from the very simple to more complex. Imagine a corporate website of a company
    that organizes seminars and exhibits. The home page, and all pages for that matter,
    as we never leave the page, contains a menu that visitors can use to navigate
    and select the topic of their choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s show some code first - just a snippet to illustrate how it is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: $.load() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will use the `load()` method to load not an entirely new page, but exactly
    the HTML we need in the section of the page where we want to replace the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the sample code just given, we address any menu items that we have given
    the class `htmla`. The intent is to replace the content of what is inside `#varicontent`
    with the HTML that is inside a file that resides on the server. Notice that there
    is a `href` attribute in the example as well. We intend not to use it, but it
    can be present if we want a fallback plan in case JavaScript is not supported.
    We will readdress that when we discuss **progressive enhancement**. In the example,
    we include a link to a file located in a folder called `oldsite`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in the preceding code, we have an event handler for when an `<a>` tag with
    the class `htmla` is clicked. The first thing we do is to actually prevent users
    going to the link specified in the `href` tag that would cause a brand new page
    to be loaded. The following line takes care of that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Instead, we are going to use the jQuery Ajax method `.load()`. We use the value
    of the ID of the anchor to determine what the name of the file is, and then we
    call the function `updateHTMLcontent()`.
  prefs: []
  type: TYPE_NORMAL
- en: Inside that function, we call `load()`, which will make the necessary Ajax calls
    underneath to go and fetch the contents of the file. Then, we replace `#varicontent
    <div>` with that content. Now, that part of the screen is updated, but we remain
    on the same page, and the rest of the screen is left intact.
  prefs: []
  type: TYPE_NORMAL
- en: $.post()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, all we needed to do was to load some HTML. What if
    we want to execute PHP code on the server to dynamically create HTML and want
    to insert that inside our page? This is where the `.ajax()` method fits in, and
    in particular, the two special cases of `.ajax()`, `.post()`, and `.get()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have guessed, the difference is, just as with HTML forms, the way
    that values are passed along to the server - whether as POST variables or as GET
    variables. Let''s use the example of the second menu item, which contains an `<a>`
    tag of the class `agenda`. Like the previous example, we first prevent the browser
    from loading the file that is specified in the `href` attribute. This time, we
    grab the value of the ID of the parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are asking the server to go and find the PHP file `showagendalist.php`
    on the server and pass it some values as POST variables, or just one, as in our
    example. The PHP code will be executed on the server and whatever it generates,
    we can catch inside a function. We will use this to insert inside the appropriate
    part of our page using the convenient JavaScript method `replaceWith()`. The default
    format expected back is HTML, but we can also use other formats, such as JSON
    and XML, which we will discuss in [Chapter 10](ch10.html "Chapter 10. XML and
    JSON"), *XML and JSON*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what this PHP code could be like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding PHP code, we look at the value of the single POST variable
    `$POST['nav']` to determine which section of the agenda the visitor has selected
    from the menu. The name of that section has to somehow match a table in our database.
    Next, we pull out all articles from our database, assuming that there is a column
    for `title`, stored as text, and `summary` and `body` as HTML. We then generate
    the entire HTML for all the articles. The final statement is an `echo` statement
    of the entire HTML generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a practical example to show how Ajax works, but not practical at all
    in a real-life application. There are two reasons why the content inside `#varicontent
    <div>` will quickly become too large: not only do we show the entire content of
    each article, we also show all of them.'
  prefs: []
  type: TYPE_NORMAL
- en: Rather than show the entire content of each article, we should only show the
    title and the summary, not the body text. Inside our generated HTML, we can have
    an `<input>` of the type `hidden` to carry the ID of the article, and we then
    turn the title into an anchor tag so that it becomes clickable. The jQuery event
    handler behind this anchor will trigger another Ajax call, and our `#varicontent
    <div>` that contains a list of article titles and summaries will be replaced by
    the complete content of single article upon clicking. But, yet again, we remain
    on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Even doing this is not going to be sufficient. Once the number of articles becomes
    large, the length of our `#varicontent` section is going to become unpleasantly
    long. To overcome this, we need to apply some kind of pagination and only show
    a given number of articles at a time. We will discuss a framework that has a **pagination**
    widget in [Chapter 13](ch13.html "Chapter 13. Foundation – A Responsive CSS/JavaScript
    Framework"), *Foundation - A Responsive CSS/JavaScript Framework*. In the following
    sample code , we have already taken into account an extra parameter we need, `offset`.
    The updated code to accommodate these changes follows later. We left out the `switch`
    statement in the PHP code. The only difference in the existing JavaScript code
    is that now `UpdateAgendaContent()` will take an extra argument for the offset.
    We only include the extra bits for the additional Ajax call.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated PHP is this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Additional JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have now added an event handler inside the `updateAgendaContent()`
    function to trigger the right things happening when a visitor clicks on an article
    title. This is often necessary as, like in our example of the HTML tag, we want
    to trigger the event that did not exist on the page prior to the Ajax call.
  prefs: []
  type: TYPE_NORMAL
- en: $.ajax()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned, the `$.post()` method (and there is a `$.get()` as well) is
    a special case of the `$.ajax()` method. The ones we used take fewer arguments
    than `.ajax()`, as some of them are predefined (not surprisingly, POST or GET),
    so, once again, jQuery makes things easier for us to write. To conclude this chapter,
    we will give you a summary on how the `.ajax()` methods can be used. Please check
    the full jQuery documentation for more details. It will be worth reading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These parameters specify one or more name/value pairs. Here is an overview
    of the most commonly used parameters and their meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**: This is data to be sent to the server. It is converted to a query
    string, if it is not already a string. It can be passed as an object, a string,
    or an array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dataType**: This is the data type expected of the server response. It can
    be XML, HTML, text, JSON, or script. In our examples, we assumed HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**url**: This specifies the URL to send the request to. The default is the
    current page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**error(xhr,status,error)**: This is a function to be run if the request fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**success(result,status,xhr)**: This is a function to be run when the request
    succeeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**type**: This specifies the type of request (GET or POST).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, the `$.post()` call in our last example is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It could also have been written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Ajax, a collection of web techniques to asynchronously
    collect data from the server. It is used to update only parts of the screen on
    websites and web applications, rather than loading an entirely new page each time.
  prefs: []
  type: TYPE_NORMAL
- en: Ajax techniques are based on the XMLHttpRequest object, but thanks to jQuery
    and its `$.ajax()` methods, you learned how to use Ajax in your applications without
    having to know anything about that object. We used the `$.load` and `$.post` methods
    in our examples to replace parts of our screen with HTML that is either stored
    or generated on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Ajax can be used with other data formats, such as XML and JSON. It also has
    potential drawbacks, because now that we constantly update the page without actually
    leaving it, it will be perceived as different pages by the visitor of our site,
    particularly when they press the browser's back button.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two topics: making the back key do what is expected of it, and using
    different data formats between the client and server are the subject matter of
    our next two chapters.'
  prefs: []
  type: TYPE_NORMAL
