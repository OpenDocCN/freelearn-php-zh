- en: Chapter 8. Creating a To-do List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a good little project; it''s something nearly everyone might need in
    their day-to-day work: a to-do list. This project will give you a small application
    to create tasks and set them as complete. There''s also a good level of scope
    for you to expand on the project and really make it your own.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right; in this project, we will create an application that allows users to create
    tasks and view these tasks as a list. Tasks can also have a due date; late tasks
    will appear in red so that you know it's important to execute that task as soon
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: To create this app, we will create one controller; this will handle the displaying
    of tasks, creating these tasks, setting these tasks as done or still to do, and
    handling the deletion of these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a language file to store the text, allowing you to have multiple
    language support should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and a model to interface with the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should take a look at what we plan to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    allow people to add tasks that they need to do. It will also allow users to view
    these tasks as a list and set them as done. They can also delete old or unneeded
    tasks should they wish.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So that''s the site map; the first thing to notice is how simple the site is.
    There are only four main areas to this project. Let''s go over each item and get
    a brief idea of what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View All**: This displays a form to create a task and also displays all tasks
    in a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: This processes the creation of tasks saved to the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Done/Not Done**: This sets a task to either done or to-do'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: This removes the task from the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: View All/Create
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **1** (the View All
    item) and point **2** (the Create item) of the preceding site map. Initially,
    the user is shown a list of tasks. They are able to click on the **It's Done**
    or **Still Todo** button to go to point **3** (the Done/Not Done item) shown in
    the site map.
  prefs: []
  type: TYPE_NORMAL
- en: '![View All/Create](img/7093OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Delete
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **4** (the Delete
    item) in the site map. The user views the task description (`tasks.task_desc`)
    and is given the option to delete (to process the deletion of the task from the
    database) or cancel to return to point **1** (the View All item) of the site map.
  prefs: []
  type: TYPE_NORMAL
- en: '![Delete](img/7093OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a relatively small project, and all in all, we''re only going to create
    six files; these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/tasks_model.php`: This provides read/write
    access to the `tasks` database table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/tasks/delete.php`: This displays a
    form to the user, asking them to confirm the deletion of a task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/tasks/view.php`: This is the view for
    the `tasks` controller''s `index()` function. It displays a list of tasks to the
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/tasks.php`: This contains three
    main functions: `index()`, `apply()` and `create()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding six files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already setup CodeIgniter and Bootstrap, as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't—the
    code can easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we''ll build the database. Copy the following MySQL code to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, take a look at that last bit of SQL code, it's quite big and fiddly. Don't
    panic; all SQL code is available online from this book's support page on the Packt
    website.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that the first table we create is `ci_sessions`, which we need to
    allow CodeIgniter to manage sessions, specifically logged-in users. However, this
    is just the standard session table available from the *CodeIgniter User Guide*,
    so I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, let''s take a look at each item in each table, and see what it means:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: tasks |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `task_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `task_desc` | There is no title field or body to our tasks as such—only a
    brief description of what needs to be done; this is that description. |'
  prefs: []
  type: TYPE_TB
- en: '| `task_due_date` | This is the date by which the task needs to be done. If
    a task is late, we will color the background of the table row red to indicate
    that a particular task remains to be done and is late. |'
  prefs: []
  type: TYPE_TB
- en: '| `task_created_at` | as such MySQL timestamp of the date on which the row
    was created in the database. |'
  prefs: []
  type: TYPE_TB
- en: '| `task_status` | This indicates whether the task still remains to be done
    or not. This is an `enum` field with the two values: `done` and `todo`. If a task
    is set to `done`, then we will use the `<strike>` HTML markup to strike through
    the text; if, however, is it set to `todo` (as it is by default), then the task
    isn''t struck through and remains to be done. |'
  prefs: []
  type: TYPE_TB
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation; so, enter your username,
    password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few things in this file that we''ll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key—both sessions and CodeIgniter''s encryption
    functionality require an encryption key to be set in the `$config` array, so find
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the preceding line with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now obviously, don't actually change the preceding value to literally a-random-string-of-alphanum-characters
    but change it to, er, a random string of alphanum characters instead—if that makes
    sense? Yeah, you know what I mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the preceding line with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to redirect the user to the `tasks` controller rather than the default
    CodeIgniter `welcome` controller. To do this, we will need to amend the default
    controller settings in the `routes.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this—instead, we want the default controller to be `tasks`. So find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one model in this project, `tasks_model.php`, that contains functions
    that are specific to searching and writing tasks to the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is our one and only model for this project. Let's briefly go over each
    function in it to give us a general idea of what it does, and then we will go
    into more detail in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five main functions in this model, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_tasks()`: This serves two functions: firstly, to display all tasks—for
    example, when a user first visits the site and when a user enters a new task in
    the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`change_task_status()`: This changes the `tasks.task_status` value in the database
    from either `todo` or `done`. A task that is set to `done` appears struck through
    in the list, whereas tasks that are set to `todo` are not struck through and are
    displayed normally; this way, a user can easily work out what is done and not
    done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_task()`: This saves a task to the database when a user submits the form
    from point **3** (the Create item) of the site map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_task()`: This fetches an individual task from the `tasks` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete()`: This deletes a task from the `tasks` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That was a quick overview, so let's create the model and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/tasks_model.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `get_tasks()` function takes no argument. It returns all tasks from the
    database and returns it to the `tasks` controller''s `index()` function. The `tasks/view.php`
    view file will loop over the database result object and display tasks in an HTML
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `change_task_status()` function changes the status of a task from either
    `todo` or `done`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It takes two arguments: `$task_id` and `$save_data`. The `$task_id` and `$save_data`
    values are passed from the `tasks` controller''s `status()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: The value of `$task_id` is set when the user clicks on either **It's Done**
    or **Still Todo** in the `views/tasks/view.php` view file; the fourth parameter
    of the `uri` segment of either option is the primary key (`tasks.task_id`) of
    the task in the `tasks` table and by using the CodeIgniter function `$this->uri->segment(4)`,
    we grab the value and store in a `$task_id` local variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `$save_data` value is populated in the `tasks` controller. It contains
    only one item, `task_status`, that is populated in the `status()` function with
    the third parameter of the `uri` segment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `save_task()` function accepts one argument—an array of data. This data
    is supplied by the `tasks` controller''s `index()` function. The function will
    save a task to the `tasks` table, returning `true` if successful and `false` if
    an error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `get_task()` function takes one argument—`$task_id` (that is, the primary
    key of the task in the database). It is supplied by the `tasks` controller's `delete()`
    function, which uses it to supply information about the task in the delete confirmation
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user clicks on **Delete** in the `views/tasks/view.php` file, the third
    parameter of which is the task''s primary key. The `tasks` controller''s `delete()`
    function will then grab that ID from the URI with the `$this->uri->segment(3)`
    CodeIgniter function. This ID is passed to the `get_task()`model function, which
    will return the details of the task in the database or `false` if no ID was found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `delete()` function performs an operation on the database to remove a task.
    It accepts one argument—the ID of the task, which is the primary key of that task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three views in this project, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/tasks/view.php`: This displays a list
    of current tasks to the user as well as a form that allows the user to create
    new tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/tasks/delete.php`: This displays a
    confirmation message to the users, asking them to confirm whether they really
    want to delete the task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this is very simple; it contains a project name
    and link to go to the `tasks` controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are our three view files. Now let's go over each one, build the code,
    and discuss how they function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/tasks/view.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding block of code is the form that the user can use to create a new
    task. Also in this block is the validation error code (`validation_errors()`)
    where we will display any errors with the data submitted form the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding table echoes out any tasks in the database. The actions are also
    in this block, that is, the PHP ternary operator that switches the status from
    **It's Done** to **Still Todo** and the **Delete** link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/tasks/delete.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block of code contains the form that asks the user to confirm
    whether they really wish to delete the task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This view is quite basic but still serves an important role. It displays an
    option to return to the `tasks` controller's `index()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/tasks.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go over that controller now, look at the code, and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/tasks.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index()` function performs a couple of tasks: displaying a list of tasks
    and handling the form submission (validation, error checking, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we set the validation rules for the form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If there were errors in the form or if it is the first time the page is accessed,
    then we''ll build the form elements, defining their settings and be ready to draw
    them in the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll fetch all tasks in the database and store them in the `$page_data[''query'']`
    array. We will send this array to the `tasks/view.php` file where it will be looped
    over using `foreach($query->result as $row)`—where each task will be written out
    in a table along with the **It''s Done**, **Still Todo**, and **Delete** options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If there were no errors with the form, then we try to create the task in the
    database. First, we look to see whether the user has tried to set a due date for
    the task. We do this by looking for the date fields in the `post` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'We require all three (day, month, and year) items to create a due date, so
    we check to see whether all three have been set. If all three are set, then we
    build a string that will be the date. This is saved in the `$task_due_date` variable.
    If all three date items haven''t been set (perhaps only two were), then we just
    set the `$task_due_date` value to `null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create an array to pass to the `save_task()` function of `Tasks_model`.
    The `$save_data` array contains the task description, any date that might have
    been applied (or `null` value), and a default value for `task_status`; this is
    initially set to `todo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$save_data` array is then sent to the `save_task()` function of `Tasks_model`.
    This function will return `true` if the save operation was successful or `false`
    if there was an error. Whatever the outcome, we''ll set a message using the `$this->session->set_flashdata()`CodeIgniter
    function with a success message or an error message (the content for these messages
    is in the language file) and redirect to the `tasks` controller''s `index()` function,
    which will display all tasks (and hopefully, the one just created) to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `status()` function is used to change a task status from `done` to `todo`.
    If you hover over either the **It's Done** or **Still Todo** links, you'll see
    the URI. The format will look something like `http://www.domain.com/tasks/status/todo/1`
    (if the task is set to `done` in the database) or `http://www.domain.com/tasks/status/done/1`
    (if the task is set to `todo` in the database). The third parameter is always
    the opposite to whatever is the current status of the task, so if a task is set
    to `done`, the URI will display `todo`, and if it is set to `todo`, the URI will
    display `done`.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth parameter is the primary key (in the preceding example, this is `1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on either **It''s Done** or **Still Todo**, the `status()`
    function grabs the third and fourth parameters and sends them to the `status()`
    function of `Tasks_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We take the third and fourth parameters and send them to the `change_task_status()`
    function of `Tasks_model`. The `change_task_status()` function will return `true`
    if the update was successful or `false` if there was an error. We set a message
    to the user using the `$this->session->set_flashdata()`CodeIgniter function and
    redirect to the `tasks` controller''s `index()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `delete()` function does two things. It displays information about the
    task to the user so that they are able to decide whether they really want to delete
    the task, and it also processes the deletion of that task should it be confirmed
    by the user. First off, we set the validation rules for the form. This is the
    form that the user uses to confirm the deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the function can be accessed by the user by clicking on **Delete**
    or submitting the form, the task ID can be supplied either from the URI (in the
    case of **Delete**) or in a hidden form element in the form. So, we check whether
    the form is being posted or accessed for the first time and grab the ID from either
    `post` or `get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We then send the ID to the `get_task()` function of `Tasks_model`, which will
    return the details of the task as a database object. This is saved in `$data[''query'']`
    and sent to the `tasks/delete.php` view file, where the user is asked to confirm
    whether they wish to really delete the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If there were no errors with the form submission, then we call the `delete()`
    function of `Tasks_model` so that the task is deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, here are a few examples that will help put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: User adds a task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sequence of events in order to add a task is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and CodeIgniter routes them to the `tasks` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `tasks` controller loads (by default) the `index()` function. The `index()`
    function checks whether the form validation is false:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As this is the first load and the form has not been submitted, it will equal
    `false`. The `index()` function then defines the settings for the `task_desc`
    text field, calls the `get_tasks()` function of `Tasks_model` (which returns all
    tasks from the database), and then loads the view files, passing the database
    object to the `views/tasks/view.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters the `Chase meeting room booking` string, selects a date three
    days into the future, and clicks on **Add** to submit the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is submitted and `index()` validates the `task_desc` form elements
    and the three date dropdowns' values. The validation is now passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The three date fields are strung together to form a date string to be entered
    into the database and saved as `$task_due_date`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These `$task_due_date` and `task_desc` values are saved to an array called `$save_data`.
    Also saved is a default value for the `task_status` field in the `tasks` table.
    This value is set to `todo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a successful save operation to the database. the user is redirected to
    `index()`, where their new task is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User changes the task status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The events performed while a user changes the task status are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and CodeIgniter routes them to the `tasks` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `tasks` controller loads (by default) the `index()` function. The `index()`
    function checks whether the form validation is false:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As this is the first load and the form has not been submitted, it will equal
    false. The `index()` function then defines the settings for the `task_desc` text
    field, calls the `get_tasks()` function of `Tasks_model` (which returns all tasks
    from the database), and then loads the view files, passing the database object
    to the `views/tasks/view.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user sees the task "Chase meeting room booking" and (knowing that this task
    is done) clicks on **It's Done**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `status()` task function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `status()` function takes the third (`todo` or `done`) and fourth (the task's
    primary key) parameters of the URI and sets them to the `$page_data[' task_status']`
    and `$task_id` local variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These two variables are sent to the `change_task_status()` function of `Tasks_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `change_task_status()` function takes the `$task_id` value and the new status
    and performs an Active Record update on this task, returning true or false values
    if successful or if an error occurred.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `status()` function looks at the return value and sets a session flash
    message accordingly: a success message if successful and an error if not.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is then redirected to `index()`, where they can see the updated task
    status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So. this is a fairly small application—perhaps one of the smallest in the book—but
    it''s by no means not useful. You can use this to-do list as a really easy way
    to manage any tasks you might have on your plate; however, there''s always room
    for improvement. There are a few things that you can do to add greater functionalities
    to the project, and these might include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding a sorting feature**: You could add sorting functions to only display
    late (overdue), done, or still-to-do tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding a category**: You could add a dropdown to the form that creates the
    tasks. This dropdown could (for example) have the colors Red, Green, Blue, Yellow,
    Orange, and so on. A task can be assigned a color and this color could be displayed
    in the table that displays each task. You could use the Bootstrap label markup;
    for example, the `span` warning label (`<span class="label label-warning">Warning</span>`)
    would give you a great block of color—change the word `Warning`, though!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding progress and progress bar**: You could add an HTML dropdown with set
    percentage values: 25 percent, 50 percent 75 percent, 100 percent, and so on,
    which allow you to define how much of the task has been completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
