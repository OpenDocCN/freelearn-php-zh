- en: Designing Flexible Frontends with Theme Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主题开发设计灵活的前端
- en: The design of a website plays a vital role in attracting visitors. WordPress
    themes are used as a standard technique for designing the frontend of a site.
    The availability of thousands of existing themes makes the design process simple
    as well as flexible. This means that developers have the ability to build custom
    designs in a rapid process. Building advanced designs via the modification of
    existing theme files is a common problem in development, and is often realized
    in the late stages of site development. Developers should have the ability to
    turn default WordPress themes into amazing frontends and also build custom themes,
    while being compatible with the WordPress core and theme upgrades.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的设计在吸引访客方面起着至关重要的作用。WordPress主题被用作设计网站前端的标准技术。数千种现有主题的可用性使得设计过程既简单又灵活。这意味着开发者能够以快速的过程构建自定义设计。通过修改现有主题文件构建高级设计是开发中的常见问题，通常在网站开发的后期阶段实现。开发者应该能够将默认的WordPress主题转变为惊人的前端，并构建自定义主题，同时与WordPress核心和主题升级兼容。
- en: In this chapter, you will gain knowledge of what should be in a theme and how
    you should use the theme files hierarchy to build flexible designs using custom
    templates. You will also learn to extend themes by using child themes, actions,
    filters, and page templates. From there, you will learn the process of understanding
    and modifying the templates of various themes in existing sites. Understanding
    how different theme components fit into your design and modifying these components
    in existing sites without breaking the theme is the highlight of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解主题中应该包含什么，以及如何使用主题文件层级结构通过自定义模板构建灵活的设计。你还将学习通过使用子主题、动作、过滤器和页面模板来扩展主题。从那里，你将学习理解并修改现有网站中各种主题模板的过程。理解不同的主题组件如何融入你的设计，并在不破坏主题的情况下修改这些组件是本章的亮点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the role of themes in development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解主题在开发中的作用
- en: Tracking and understanding theme components in existing sites
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪和理解现有网站中的主题组件
- en: Using child themes to extend existing themes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用子主题扩展现有主题
- en: An in-depth overview of the theme template hierarchy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对主题模板层级的深入概述
- en: Extending theme features using actions and filters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动作和过滤器扩展主题功能
- en: Techniques for conditionally changing theme design
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件更改主题设计的技巧
- en: By the end of this chapter, you will have the ability to understand the role
    of themes and knowledge to build highly customizable theme templates to design
    modern websites.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够理解主题的作用，并拥有构建高度可定制主题模板以设计现代网站的知识。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have WordPress 4.9.8 installed to follow this procedure.
    Even if you have a later version of WordPress, the described examples should work
    with no significant problems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循此程序需要安装WordPress 4.9.8。即使你有WordPress的更高版本，描述的示例也应该没有重大问题地工作。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/WordPress-Development-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/WordPress-Development-Quick-Start-Guide/tree/master/Chapter03)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/WordPress-Development-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/WordPress-Development-Quick-Start-Guide/tree/master/Chapter03)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际应用：
- en: '[http://bit.ly/2EPpNIR](http://bit.ly/2EPpNIR)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2EPpNIR](http://bit.ly/2EPpNIR)'
- en: Introduction to WordPress themes
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress主题简介
- en: A WordPress theme is a set of files, created using a predefined structure and
    features, to act as the presentation layer of the website. In simple terms, the
    presentation layer should contain the HTML needed to generate the layout and all
    the data passed by the models. WordPress is built to create content management
    systems, and hence it doesn't focus on separating the presentation layer from
    its business logic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress主题是一组文件，使用预定义的结构和功能创建，作为网站的展示层。简单来说，展示层应包含生成布局和所有由模型传递的数据所需的HTML。WordPress旨在创建内容管理系统，因此它不关注将展示层与其业务逻辑分离。
- en: Themes contain template files as a mix of both HTML code and PHP logic. As a
    developer, you need to have knowledge of both designing layouts and applying logic
    to work with themes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 主题包含模板文件，这些文件是HTML代码和PHP逻辑的混合。作为一个开发者，你需要了解设计和应用逻辑以与主题一起工作。
- en: The themes in your WordPress site are located in the `wp-content/themes` directory,
    with each theme using its own folder. A theme is identified by the predefined
    set of comments used in the `style.css` file. If this file is not available or
    the comment is broken, WordPress will not list it as a theme, even though the
    theme files have been placed in the `wp-content/themes` directory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你WordPress网站中的主题位于`wp-content/themes`目录中，每个主题使用自己的文件夹。一个主题通过在`style.css`文件中使用的预定义注释集来识别。如果此文件不可用或注释损坏，即使主题文件已放置在`wp-content/themes`目录中，WordPress也不会将其列为主题。
- en: Installing and configuring themes
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置主题
- en: The process of installing a WordPress theme is super simple, even for a person
    who has no prior experience with CMS. WordPress includes a few basic themes upon
    initial installation and activates the latest theme on your site. The Twenty Seventeen
    theme is the one activated by default in the latest version of WordPress.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装WordPress主题的过程非常简单，即使对于一个没有CMS先前经验的人也是如此。WordPress在初始安装时包含了一些基本主题，并激活了网站上最新的主题。Twenty
    Seventeen主题是最新版WordPress默认激活的主题。
- en: 'Let''s go through the process of installing a theme:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看安装主题的过程：
- en: First, you have to log in as administrator and go to the **Appearance** | **Themes**
    section. You will see a list of available themes, with the first one being the
    active theme. You can change the theme by clicking the **Activate** button of
    other available themes in the list.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你必须以管理员身份登录并转到“外观”|“主题”部分。你将看到可用主题的列表，第一个是活动主题。你可以通过点击列表中其他可用主题的“激活”按钮来更改主题。
- en: Once the new theme has been activated, the previous one will be automatically
    deactivated. Usually, we will not be using the existing themes unless your site
    needs basic features. Therefore, we need a way to install new themes.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦新主题被激活，旧的主题将被自动停用。通常，除非你的网站需要基本功能，否则我们不会使用现有的主题。因此，我们需要一种安装新主题的方法。
- en: 'We can install themes by using the **Add New** button in the Appearance | Themes
    section. You will get a list of free themes from the WordPress theme directory,
    as shown in the following screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在“外观”|“主题”部分使用“添加新主题”按钮来安装主题。你将获得来自WordPress主题目录的免费主题列表，如下面的截图所示：
- en: '![](img/eaad08c7-3a29-412b-9706-1eb7a841bb27.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eaad08c7-3a29-412b-9706-1eb7a841bb27.png)'
- en: 'You have two options: installing a theme from the free theme directory or uploading
    a theme that''s not available in the directory. The first option only requires
    you to click the **Activation** button of the theme in the list. The other option
    requires you to click on the **Upload Theme** button and upload a .zip file with
    a valid WordPress theme. After installation, you can activate the theme from a
    separate screen.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有两种选择：从免费主题目录安装主题或上传目录中不可用的主题。第一种选项只需要你点击列表中主题的“激活”按钮。另一种选项需要你点击“上传主题”按钮并上传一个有效的WordPress主题的.zip文件。安装后，你可以从单独的屏幕激活主题。
- en: The files for the new theme will be located in the `wp-content/themes` directory,
    with a new directory by the theme name. Once a new theme has been installed, you
    will see changes in the Customize, Widgets, and Menus sections of the **Appearance**
    menu. The theme-specific settings and components will be added to these menu items.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 新主题的文件将位于`wp-content/themes`目录中，以主题名称创建一个新的目录。一旦安装了新主题，你将在“外观”菜单的“自定义”、“小工具”和“菜单”部分看到变化。主题特定的设置和组件将被添加到这些菜单项中。
- en: We will be using the default Twenty Seventeen theme throughout this chapter.
    Since it's a free, built-in theme, you won't find a separate options panel. In
    advanced premium themes, you will find an options panel in a separate menu item,
    where you can configure the theme's features and layouts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中始终使用默认的Twenty Seventeen主题。由于它是一个免费的内建主题，因此你不会找到一个单独的选项面板。在高级付费主题中，你会在一个单独的菜单项中找到一个选项面板，在那里你可以配置主题的功能和布局。
- en: This kind of basic installation is good enough that you can now dive into the
    development aspects of a theme. We will start by understanding how we can use
    a theme in development.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基本的安装方式已经足够好，你现在可以深入到主题的开发方面。我们将从了解如何在使用开发中利用主题开始。
- en: Understanding the role of themes in development
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解主题在开发中的作用
- en: The ability to choose an existing theme among thousands of free and premium
    themes is one of the reasons for the success of WordPress as a CMS. Using an existing
    theme dramatically reduces both development time and cost, as opposed to designing
    the site from scratch.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在成千上万的免费和付费主题中选择现有主题的能力是WordPress作为CMS成功的原因之一。使用现有主题可以显著减少开发时间和成本，相比之下，从头开始设计网站。
- en: 'The primary intention of a theme is to function as the presentation layer of
    the site. However, WordPress has evolved into a state where a basic theme, designed
    to act only as a presentation layer, no longer works. As a result, developers
    are including more and more advanced functionalities and logic within their themes
    to compete with other themes. In modern sites, the developer''s role may involve
    customizing theme design, building themes from scratch, and even creating application-specific
    themes. Therefore, we need to be aware of the type of development involved in
    a theme. Let''s take a look at some of the most common tasks as a developer:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 主题的主要目的是作为网站的展示层。然而，WordPress已经发展到这样一个状态，即仅作为展示层设计的简单主题不再适用。因此，开发者们在他们的主题中包含越来越多的高级功能和逻辑，以与其他主题竞争。在现代网站上，开发者的角色可能包括自定义主题设计、从头开始构建主题，甚至创建特定应用的主题。因此，我们需要了解主题中涉及的开发类型。让我们看看作为开发者最常见的任务：
- en: '**Customizing post and page designs**: This is the most common task developers
    face in the beginning of their developer role. There are millions of websites
    that have been created with WordPress, and a high percentage of them are created
    by non-technical site owners who are using existing themes and plugins. So, when
    there is a need for a change in theme, owners have no option other than to look
    for a third-party developer. In such scenarios, you will be asked to modify the
    existing theme designs to match a client''s requirements. Therefore, developers
    need to be familiar with various types of modern themes and design techniques.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义文章和页面设计**：这是开发者在其开发者角色初期面临的最常见任务。已有数百万个网站使用WordPress创建，其中很大一部分是由使用现有主题和插件的非技术性网站所有者创建的。因此，当需要更改主题时，所有者除了寻找第三方开发者外别无选择。在这种情况下，你将被要求修改现有主题设计以符合客户的要求。因此，开发者需要熟悉各种类型的现代主题和设计技术。'
- en: '**Creating page templates**: This is the next step for a developer, where clients
    ask you to create different types of landing pages to promote their products,
    services, and other businesses.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建页面模板**：这是开发者的下一步，客户会要求你创建不同类型的着陆页来推广他们的产品、服务和其他业务。'
- en: '**Integrate UI components**: Modern websites are filled with interactive components
    such as sliders, galleries, accordions, graphs, and so on. Most of these are generated
    from open source libraries. Many premium themes have built-in support for these
    types of components. But in scenarios where your site is using a basic theme,
    you may be asked to integrate these components to make them attractive and deliver
    lots of information in a limited space. Therefore, you need to be aware of the
    techniques for integrating these libraries into themes.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成UI组件**：现代网站充满了各种交互式组件，如滑块、画廊、手风琴、图表等。其中大部分都是从开源库中生成的。许多付费主题内置了对这些类型组件的支持。但在你的网站使用基本主题的情况下，你可能会被要求集成这些组件，使它们更具吸引力，并在有限的空间内提供大量信息。因此，你需要了解将这些库集成到主题中的技术。'
- en: '**Converting designs into a theme**: This will require you to build a theme
    from scratch. In the old days, we got a PSD from the designer, and the developer''s
    role was to turn it into HTML. With WordPress, you need to go the extra step and
    convert the HTML into a WordPress theme. It''s a very difficult process unless
    you understand the WordPress template hierarchy, theme functions, and the necessary
    WordPress conventions.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将设计转换为主题**：这需要你从头开始构建一个主题。在以前，我们从设计师那里获得PSD文件，开发者的角色是将它转换为HTML。使用WordPress，你需要额外的一步，将HTML转换为WordPress主题。除非你了解WordPress模板层次结构、主题函数和必要的WordPress约定，否则这是一个非常困难的过程。'
- en: The preceding list goes over some of the tasks involved in working with themes
    in sites intended to function as a basic CMS. However, modern WordPress sites
    go beyond the norm by creating full-fledged web applications. In such applications,
    we can see the use of application themes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表概述了在旨在作为基本CMS运行的网站上与主题一起工作的任务。然而，现代WordPress网站通过创建完整的Web应用超越了常规。在这些应用中，我们可以看到应用主题的使用。
- en: What are application-specific themes?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用特定主题是什么？
- en: 'General-purpose WordPress themes mostly use a standard set of theme files,
    with the primary intention of providing awesome blog posts and page features.
    On the other hand, application-specific themes use a lot more application-specific
    files, which are intended to build application-specific features. These files
    include application-specific features, business logic, and templates. The advantage
    of such themes is the ability to use them right away in a site, as opposed to
    developing these features on top of a generic theme. However, the limitation of
    application themes is the inability to switch themes, as most features are bound
    to the theme. Let''s take a look at some of the common application theme types
    to understand the concept of application themes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通用WordPress主题主要使用一组标准主题文件，主要目的是提供出色的博客文章和页面功能。另一方面，应用特定主题使用更多应用特定文件，旨在构建应用特定功能。这些文件包括应用特定功能、业务逻辑和模板。这类主题的优势在于可以直接在网站上使用，而不是在通用主题之上开发这些功能。然而，应用主题的局限性在于无法切换主题，因为大多数功能都绑定在主题上。让我们看看一些常见的应用主题类型，以了解应用主题的概念：
- en: '**Buddypress**: This is a plugin that allows you to add social networking features
    to WordPress. Nowadays, BuddyPress-specific themes are built to extend basic social
    networking capabilities. The functionality of a BuddyPress theme includes user
    management, user group management, user activities, user messaging, and so on.
    You can check out the amazing features of BuddyPress specific-themes at [https://themeforest.net/category/wordpress/buddypress](https://themeforest.net/category/wordpress/buddypress).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Buddypress**: 这是一个允许您将社交网络功能添加到WordPress的插件。如今，专为BuddyPress设计的主题旨在扩展基本社交网络功能。BuddyPress主题的功能包括用户管理、用户群组管理、用户活动、用户消息等。您可以在[https://themeforest.net/category/wordpress/buddypress](https://themeforest.net/category/wordpress/buddypress)查看BuddyPress特定主题的惊人功能。'
- en: '**Real estate**: These types of themes are built for creating property listings
    and selling. Apart from the basic posts and page templates, such themes contain
    various advanced templates and features for property maps, agent management, property
    comparison, and searching. You can check out the features of real estate-specific
    themes at [https://themeforest.net/category/wordpress/real-estate](https://themeforest.net/category/wordpress/real-estate).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**房地产**: 这类主题是为创建房产列表和销售而设计的。除了基本的帖子模板和页面模板外，这类主题还包含各种高级模板和功能，如房产地图、经纪人管理、房产比较和搜索。您可以在[https://themeforest.net/category/wordpress/real-estate](https://themeforest.net/category/wordpress/real-estate)查看房地产特定主题的功能。'
- en: '**LMS**: These types of themes are built for learning management systems where
    there are teachers, students, and courses. Apart from basic theme features, these
    themes include templates and features for managing courses, instructors, students,
    exams, and grades, with advanced searching features for all of the preceding data.
    You can check out the features of LMS-specific themes at [https://themeforest.net/category/wordpress/education?term=lms](https://themeforest.net/category/wordpress/education?term=lms).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LMS**: 这类主题是为学习管理系统而设计的，其中包含教师、学生和课程。除了基本主题功能外，这些主题还包括管理课程、讲师、学生、考试和成绩的模板和功能，以及所有上述数据的先进搜索功能。您可以在[https://themeforest.net/category/wordpress/education?term=lms](https://themeforest.net/category/wordpress/education?term=lms)查看LMS特定主题的功能。'
- en: After looking at the use of application-specific themes, you will understand
    that such themes contain the functionality of an entire plugin or maybe an entire
    application. This might not be the ideal implementation according to development
    best practices. However, we have to get used to building or using such themes
    in order to provide cost-effective solutions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看特定应用主题的使用后，您将了解到这些主题包含整个插件或可能整个应用的功能。这可能不符合开发最佳实践的理想实现。然而，我们必须习惯于构建或使用这样的主题，以便提供成本效益的解决方案。
- en: As you may have noticed, your role as a developer has a very wide scope in regard
    to themes. More often than not, you will have to take responsibility for the design
    part, along with the functionalities of the theme. It's important to understand
    how theme components work together to build the design and functionality of the
    site.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，作为开发者，您在主题方面的角色非常广泛。大多数情况下，您将不得不承担设计部分的责任，以及主题的功能性。了解主题组件如何协同工作以构建网站的设计和功能非常重要。
- en: Understanding built-in theme components
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解内置主题组件
- en: The design of any WordPress frontend screen consists of many components on top
    of the template files. These components act as the location placeholders for the
    site data. By understanding these components, you can let administrators change
    the content and locations dynamically based on various needs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 任何WordPress前端屏幕的设计都由许多组件组成，这些组件位于模板文件之上。这些组件充当网站数据的占位符位置。通过了解这些组件，您可以允许管理员根据各种需求动态更改内容和位置。
- en: 'Let''s take a look at these components and their roles within the theme:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些组件及其在主题中的角色：
- en: '**Menu**: This is a collection of links consisting of posts, pages, custom
    post types, and custom links. The navigation menu is a must-use feature in any
    site to traverse through the available pages without losing the path. In the old
    days, we only had one menu placed in the header section of the site. Modern websites
    contain multiple menus and also place the same menu in multiple locations to simplify
    the navigation. The number of menus in your site varies based on the supported
    menu locations of the theme. You have the option to use one or more menu locations
    that are supported by the theme. The menus supported in a theme can be identified
    by visiting [http://www.example.com/wp-admin/nav-menus.php?action=locations](http://www.example.com/wp-admin/nav-menus.php?action=locations).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单**：这是一个包含帖子、页面、自定义帖子类型和自定义链接的链接集合。导航菜单是任何网站中必须使用的功能，可以在不丢失路径的情况下浏览可用的页面。在以前，我们只有位于网站页眉部分的单个菜单。现代网站包含多个菜单，并将相同的菜单放置在多个位置以简化导航。您网站上的菜单数量取决于主题支持的菜单位置。您可以选择使用一个或多个主题支持的菜单位置。可以通过访问[http://www.example.com/wp-admin/nav-menus.php?action=locations](http://www.example.com/wp-admin/nav-menus.php?action=locations)来识别主题中支持的菜单。'
- en: '**Widget**: This is a block that allows you to display static content, display
    dynamic content from a database, capture user data, or provide specific functions
    for the user. Widgets can be placed in the sidebars of your site. The default
    set of widgets includes Archives, Calendar, Categories, Meta Info, Recent Posts,
    and Search. Apart from these default widgets that are provided by WordPress, you
    will also get a considerable amount of themes that are plugin-specific. The widgets
    that are available in a theme can be identified by deactivating all plugins and
    visiting [http://www.example.com/wp-admin/widgets.php](http://www.example.com/wp-admin/widgets.php).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小工具**：这是一个允许您显示静态内容、从数据库显示动态内容、捕获用户数据或为用户提供特定功能的块。小工具可以放置在您网站的侧边栏中。默认的小工具集合包括存档、日历、分类、元信息、最近的文章和搜索。除了WordPress提供的这些默认小工具之外，您还将获得相当数量的特定于插件的主题。可以通过停用所有插件并访问[http://www.example.com/wp-admin/widgets.php](http://www.example.com/wp-admin/widgets.php)来识别主题中可用的小工具。'
- en: '**Sidebar**: This was intended to work as a column on the left or right of
    any page/post in the site. The content for sidebars is added by dragging the widgets
    from the backend of WordPress. However, modern websites require advanced layouts
    and hence sidebars are used as widget areas instead of just a column. With modern
    themes, you can have sidebars everywhere in the site to reuse the widgets as well
    as dynamically change the content. The sidebars available in a theme can be identified
    by visiting [http://www.example.com/wp-admin/widgets.php](http://www.example.com/wp-admin/widgets.php)
    and checking the right-hand side of the screen.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏**：这原本是为了在网站的任何页面/帖子左侧或右侧作为一列来工作的。侧边栏的内容是通过从WordPress的后端拖动小工具来添加的。然而，现代网站需要更高级的布局，因此侧边栏被用作小工具区域，而不仅仅是作为一列。在现代主题中，您可以在网站的任何地方都有侧边栏，以便重复使用小工具以及动态更改内容。可以通过访问[http://www.example.com/wp-admin/widgets.php](http://www.example.com/wp-admin/widgets.php)并检查屏幕的右侧来识别主题中可用的侧边栏。'
- en: In this section, we have had a brief overview of the functionality of built-in
    theme components, and where we can find them in the WordPress backend. These details
    will help you in the process of creating websites from scratch. However, when
    working with existing sites, you may have to track them down backwards by identifying
    them in the frontend and then moving to the backend. The next section covers the
    identification of these components.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们简要概述了内置主题组件的功能以及我们可以在WordPress后端找到它们的位置。这些细节将帮助您在从头创建网站的过程中。然而，当与现有网站一起工作时，您可能需要通过在前端识别它们然后移动到后端来反向追踪它们。下一节将涵盖这些组件的识别。
- en: Identifying theme components that are used in existing sites
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别现有网站中使用的主题组件
- en: 'As we have already discussed, developing themes from scratch is not a main
    requirement in small to medium sites that are built with WordPress. On most occasions,
    developers will have to work in existing sites with existing themes that have
    been chosen by the owner. So, you should have the skills to look at any given
    post/page in the site, and then identify the templates and theme components used
    in order to rapidly convert the requirements into solutions. Let''s take a look
    at the process of identifying important theme components that are displayed in
    posts or pages:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过的，从头开始开发主题不是使用WordPress构建的小型到中型网站的主要要求。在大多数情况下，开发者将不得不与现有网站和现有主题一起工作，这些主题是由所有者选择的。因此，您应该具备查看网站中任何给定帖子/页面的技能，然后识别用于帖子或页面的模板和主题组件，以便快速将需求转化为解决方案。让我们看看识别在帖子或页面上显示的重要主题组件的过程：
- en: '**Menus**: In existing sites, we need to be able to identify the menus in certain
    screens in order to customize them. We don''t have built-in or external features
    for tracking menus.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单**：在现有网站上，我们需要能够识别某些屏幕中的菜单以便进行自定义。我们没有内置或外部的跟踪菜单的功能。'
- en: 'Usually, menus are located in the header and footer parts of the site. First,
    you will have to look for a set of links that looks like a menu and points to
    the posts and pages of your site. Then, you can use browser inspection tools to
    look for the menu container. Generally, you will find the menu container will
    have the menu name in the element ID or class. Let''s inspect the elements of
    the top menu of the Twenty Seventeen theme, as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，菜单位于网站的页眉和页脚部分。首先，您需要寻找一组看起来像菜单并指向您网站文章和页面的链接。然后，您可以使用浏览器检查工具查找菜单容器。通常，您会发现菜单容器将在元素ID或类中包含菜单名称。让我们检查Twenty
    Seventeen主题顶部菜单的元素，如下面的截图所示：
- en: '![](img/4a5a5a4f-fada-4ecd-8c7d-8070c6852711.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a5a5a4f-fada-4ecd-8c7d-8070c6852711.png)'
- en: As you can see, the `<ul>` element uses an ID called **top-menu**, while the
    `<nav>` element uses an **Area Label** called Top Menu. So, now we can go to [http://www.example.com/wp-admin/nav-menus.php?action=locations](http://www.example.com/wp-admin/nav-menus.php?action=locations)
    and find **Top Menu**. Next, we can change the menu or menu items for that location.
    If you need to customize the code for the menu location, you can search for the
    `wp_nav_menu` function in the theme with **menu_id** as **top-menu**. The use
    of these menu names in elements differs from one theme to another. However, you
    should be able to find hints about the menu's location by inspecting the elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`<ul>`元素使用了一个名为**top-menu**的ID，而`<nav>`元素使用了一个名为**区域标签**的**Top Menu**。因此，现在我们可以访问[http://www.example.com/wp-admin/nav-menus.php?action=locations](http://www.example.com/wp-admin/nav-menus.php?action=locations)并找到**Top
    Menu**。接下来，我们可以更改该位置的菜单或菜单项。如果您需要自定义菜单位置的代码，您可以在主题中搜索以**menu_id**为**top-menu**的`wp_nav_menu`函数。这些菜单名称在元素中的使用因主题而异。然而，您应该能够通过检查元素找到有关菜单位置的提示。
- en: '**Used templates**: When we are asked to do a customization for an existing
    site screen, the most difficult part is identifying the theme templates used to
    generate the screen. However, we have the option of using the **What The File**
    ([https://wordpress.org/plugins/what-the-file/](https://wordpress.org/plugins/what-the-file/))
    plugin, which we discussed in [Chapter 1](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml),
    *Introduction to WordPress Development*. Once this plugin is installed, you will
    get a menu item called What The File on each frontend screen. Then, you can view
    a screen and hover over the What The File menu item to see the templates used
    for that screen, as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用的模板**：当我们被要求为现有网站屏幕进行定制时，最难的部分是识别用于生成屏幕的主题模板。然而，我们有使用**What The File**
    ([https://wordpress.org/plugins/what-the-file/](https://wordpress.org/plugins/what-the-file/))插件的选项，我们在[第1章](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml)，*WordPress开发简介*中讨论过。一旦安装了这个插件，你将在每个前端屏幕上获得一个名为What
    The File的菜单项。然后，你可以查看一个屏幕，并将鼠标悬停在What The File菜单项上，以查看用于该屏幕的模板，如下面的截图所示：'
- en: '![](img/c827de68-c603-4ac9-834f-66a04eb6c4a9.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c827de68-c603-4ac9-834f-66a04eb6c4a9.png)'
- en: The preceding screenshot shows a single post of a premium theme. You can easily
    notice the main template and sub-templates that are used for the given screen.
    You can find these templates within the theme to make the necessary modifications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了一个付费主题的单个帖子。你可以很容易地注意到用于给定屏幕的主要模板和子模板。你可以在主题中找到这些模板以进行必要的修改。
- en: '**Sidebars and widgets**: Usually, the sidebars are located at the left or
    right of any screen with widgets placed inside them. However, modern themes use
    many dynamic widget areas and hence sidebars can be placed anywhere in the site.
    This makes it difficult to track the sidebars without a tool. Fortunately, we
    can use the Debug Bar ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/))
    plugin, which we discussed in [Chapter 1](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml),
    *Introduction to WordPress Development*, along with an add-on called Debug Bar
    – Sidebars & Widgets ([https://wordpress.org/plugins/debug-bar-sidebars-widgets/](https://wordpress.org/plugins/debug-bar-sidebars-widgets/)).
    This add-on plugin hasn''t been updated in four years. However, it seems to work
    well and it''s the best tool I found for this task.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏和小工具**：通常，侧边栏位于任何屏幕的左侧或右侧，小工具被放置在其中。然而，现代主题使用许多动态小工具区域，因此侧边栏可以放置在网站的任何位置。这使得在没有工具的情况下跟踪侧边栏变得困难。幸运的是，我们可以使用调试栏([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/))插件，我们在[第1章](205a9625-512c-4925-a3a8-bfe8a1784773.xhtml)，*WordPress开发简介*中讨论过，以及一个名为调试栏
    – 侧边栏与小工具([https://wordpress.org/plugins/debug-bar-sidebars-widgets/](https://wordpress.org/plugins/debug-bar-sidebars-widgets/))的附加插件。这个附加插件已经四年没有更新了。然而，它似乎运行良好，并且是我找到的完成这项任务的最佳工具。'
- en: 'Once both plugins have been installed, you can view a screen and click on **Debug
    | Sidebars** from the top menu. You will get a screen similar to the following:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦安装了这两个插件，你可以在屏幕上查看并从顶部菜单点击**调试 | 侧边栏**。你将获得一个类似于以下屏幕：
- en: '![](img/ad39a7b9-3d64-45a2-8566-174a11c3ebad.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad39a7b9-3d64-45a2-8566-174a11c3ebad.png)'
- en: This tool clearly displays the details of the sidebars loaded in any given screen
    and a widget loaded within each sidebar with its details. Now, we can use this
    information to visit the backend widgets section and make the necessary modifications
    for the current screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具清楚地显示了在任何给定屏幕中加载的侧边栏及其细节，以及每个侧边栏中加载的小工具及其细节。现在，我们可以使用这些信息访问后端小工具部分，并对当前屏幕进行必要的修改。
- en: You should use these techniques to quickly track the components in any existing
    site and build solutions in a rapid process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用这些技术来快速跟踪任何现有网站中的组件，并在快速过程中构建解决方案。
- en: Getting started with developing themes
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始开发主题
- en: 'We discussed the development tasks involved in themes in the preceding section.
    Building a theme from scratch is a process with a very wide scope and hence not
    feasible to discuss in this type of book. Therefore, we will focus on customizing
    existing themes while providing the necessary knowledge to build themes from scratch.
    There are two ways of adding or modifying features in an existing theme:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中讨论了主题中涉及的开发任务。从头开始构建主题是一个范围非常广泛的过程，因此在这种类型的书中讨论是不可行的。因此，我们将专注于定制现有主题，同时提供构建主题所需的知识。在现有主题中添加或修改功能有两种方法：
- en: Building and customizing features of a design by modifying template files
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过修改模板文件来构建和定制设计功能
- en: Extending theme features through available filters and actions
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过可用的过滤器和动作扩展主题功能
- en: Both of these techniques require us to modify the files of an existing theme.
    In most sites, we will be using existing, free, or premium themes that have developed
    by third-party developers. So, it's obvious that we will receive updated versions
    of the theme with more features, bug fixes, and improved code. The theme update
    process wipes out all of the changes that have been made to core theme files.
    This means that we need a way to customize a theme without losing the changes
    on theme updates. This is where the concept of a child theme is used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种技术都需要我们修改现有主题的文件。在大多数网站上，我们将使用由第三方开发者开发的现有、免费或付费主题。因此，我们显然会收到带有更多功能、错误修复和改进代码的主题更新版本。主题更新过程会清除对核心主题文件所做的所有更改。这意味着我们需要一种方法来定制主题，而不会在主题更新时丢失更改。这就是子主题概念被使用的地方。
- en: What is a child theme?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是子主题？
- en: A child theme is a sub-version of a theme, inheriting its features, design,
    and styles. We call the main theme the parent theme. Based on its name and purpose,
    you may think that a child theme is part of a parent theme. However, a child theme
    has its own directory inside the `wp-content/themes` directory, and relates to
    the parent theme through a few lines of comments. The child theme doesn't get
    updated with the parent theme and hence we can use it for custom development.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 子主题是主题的一个子版本，继承了其功能、设计和样式。我们将主主题称为父主题。根据其名称和目的，你可能认为子主题是父主题的一部分。然而，子主题在`wp-content/themes`目录内有自己的目录，并通过几行注释与父主题相关联。子主题不会随着父主题更新而更新，因此我们可以用它来进行定制开发。
- en: Creating a child theme
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子主题
- en: Developers who are new to WordPress may assume that this is a considerable process
    involving many steps and configurations. However, it's a straightforward process
    that takes less than a minute. Let's create a child theme called `WPQuickStart`
    for the existing **Twenty Seventeen** theme.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于WordPress新手开发者来说，可能会认为这是一个相当复杂的过程，涉及许多步骤和配置。然而，这是一个简单的过程，只需不到一分钟。让我们为现有的**Twenty
    Seventeen**主题创建一个名为`WPQuickStart`的子主题。
- en: 'The first step is creating a directory in the `wp-content/themes` directory
    and naming it `wpquickstart`. Next, we need to create a `style.css` file inside
    the `wpquickstart` directory and add the following comment:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在`wp-content/themes`目录中创建一个名为`wpquickstart`的目录。接下来，我们需要在`wpquickstart`目录中创建一个`style.css`文件，并添加以下注释：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The highlighted line in the code defines the directory as a child theme and
    defines the parent theme. You should use the directory name of the parent theme
    for the Template setting. The final step of this process is to create a `functions.php`
    file in the `wpquickstart` directory and add the following code to load the parent
    theme styles:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中高亮显示的行定义了目录为子主题，并定义了父主题。你应该使用父主题的目录名称作为模板设置。此过程的最后一步是在`wpquickstart`目录中创建一个`functions.php`文件，并添加以下代码以加载父主题样式：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code includes the `style.css` file of both the parent and child
    themes. We have added a dependency to the child theme style file by passing `twenty-seventeen-style`
    to the dependency array. As the child theme's `style.css` file is dependent on
    the parent theme, it will load after the `style.css` of the **Twenty Seventeen**
    theme. Therefore, we override the necessary parent theme styles using the `WPQuickStart
    style.css` file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含了父主题和子主题的`style.css`文件。我们通过将`twenty-seventeen-style`传递到依赖数组中，为子主题样式文件添加了一个依赖。由于子主题的`style.css`文件依赖于父主题，它将在`Twenty
    Seventeen`主题的`style.css`文件之后加载。因此，我们使用`WPQuickStart style.css`文件覆盖必要的父主题样式。
- en: In just three steps, our child theme is ready to function with all of the features
    of the parent theme. The other files follow the opposite process, with the exception
    of the `functions.php` file. If a template file is available in the child theme,
    it will be loaded instead of the parent file template. On the other hand, missing
    template files in the child theme will be loaded from the parent theme.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 只需三个步骤，我们的子主题就可以具备父主题的所有功能。其他文件遵循相反的过程，除了`functions.php`文件。如果子主题中有模板文件，它将加载而不是父主题的模板文件。另一方面，子主题中缺失的模板文件将从父主题加载。
- en: Modifying parent themes with a child theme
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用子主题修改父主题
- en: Now, the most important thing to know is how a child theme can be used to implement
    the two techniques discussed in the preceding section. Let's start by using template
    files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最重要的了解是如何使用子主题来实现前面章节中讨论的两个技术。让我们从使用模板文件开始。
- en: Building and customizing designs by modifying template files
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过修改模板文件来构建和定制设计
- en: 'We created a child theme to customize the designs of parent themes without
    losing the changes on theme updates. This can be achieved by either modifying
    the entire template of the parent theme or part of the template in the parent
    theme. Let''s learn this by using an example template design change. Consider
    the following screenshot for our requirements:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个子主题来定制父主题的设计，而不会在主题更新时丢失更改。这可以通过修改父主题的整个模板或部分模板来实现。让我们通过使用一个示例模板设计更改来学习这一点。考虑以下截图，以满足我们的需求：
- en: '![](img/f5e0d1af-14e9-4596-9e4e-c54039965e70.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5e0d1af-14e9-4596-9e4e-c54039965e70.png)'
- en: The screen on the left displays the default single post design of the **Twenty
    Seventeen** theme. Let's assume that we want to change the post template to remove
    the sidebar and display the comment form in a way that the user can add comments
    while reading the post. So, we have to change the left screen to match the screen
    on the right.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的屏幕显示了**Twenty Seventeen**主题的默认单篇帖子设计。假设我们想要更改帖子模板以移除侧边栏，并显示评论表单，以便用户在阅读帖子时可以添加评论。因此，我们必须将左侧的屏幕更改为与右侧的屏幕相匹配。
- en: 'In order to achieve our requirement, we have to override the parent file template.
    So, we need to copy the `single.php` file of the Twenty Seventeen theme to the
    root folder of the WPQuickStart child theme. We don''t need the sidebar for the
    new design and hence the following line needs to be removed from the `single.php`
    file we created in our child theme:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足我们的要求，我们必须覆盖父文件模板。因此，我们需要将Twenty Seventeen主题的`single.php`文件复制到WPQuickStart子主题的根文件夹中。对于新的设计，我们不需要侧边栏，因此以下行需要从我们在子主题中创建的`single.php`文件中删除：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead, we need to add the comment form to the same location. The comment
    template is already loaded inside `single.php` using the following code, after
    the post content:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们需要将评论表单添加到相同的位置。评论模板已经通过以下代码加载到`single.php`中，在帖子内容之后：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We need to remove this code from the existing location of the `single.php`
    file and add it to the location where we had the sidebar. Consider the following
    code, where we have placed the `comments` code within a container element called
    `wpquickstart-comments`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从`single.php`文件的现有位置删除此代码，并将其添加到我们之前放置侧边栏的位置。考虑以下代码，其中我们将`comments`代码放置在一个名为`wpquickstart-comments`的容器元素中：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we need to change the CSS class of the element with the `primary` ID
    from `content-area` to `wpquickstart-content-area`. Now, we can apply the CSS
    to reduce the size of the post content elements and get the comments to the right
    of the post content. Add the following CSS to the `style.css` file of the child
    theme:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将具有`primary` ID的元素的CSS类从`content-area`更改为`wpquickstart-content-area`。现在，我们可以应用CSS来减小帖子内容元素的大小，并将评论移至帖子内容右侧。将以下CSS添加到子主题的`style.css`文件中：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you can refresh the browser to check the new design with the comment form
    on the right side. This is a very basic example of how we can change the designs
    of parent themes for our needs. By using a few lines of styles and moving the
    existing elements, we were able to create a new design in minutes. In real site
    development, you can turn simple designs into advanced, feature-rich designs by
    using the same process.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以刷新浏览器以检查带有右侧评论表单的新设计。这是一个如何根据我们的需求更改父主题设计的非常基础的例子。通过使用几行样式和移动现有元素，我们能够在几分钟内创建一个新的设计。在实际网站开发中，您可以通过使用相同的过程将简单的设计转变为高级、功能丰富的设计。
- en: Extending theme features through available filters and actions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过可用的过滤器和动作来扩展主题功能
- en: We already discussed the importance of using child themes to customize and extend
    theme templates. Using the WordPress filter and action hooks is another way of
    customizing theme features. We will mainly use these hooks to extend the functions
    provided by the theme. However, we can use some of the filter and action hooks
    to change parts of templates without needing to replace them completely.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了使用子主题来定制和扩展主题模板的重要性。使用WordPress过滤器和动作钩子是另一种定制主题功能的方法。我们将主要使用这些钩子来扩展主题提供的功能。然而，我们可以使用一些过滤器和动作钩子来更改模板的部分，而无需完全替换它们。
- en: In WordPress, an action is a PHP function that is executed at specific points
    in a process. A filter is a function that is used to modify the existing data
    or features in a process. Even though actions are intended to do something before
    or after an event, they are used frequently to add content to templates. More
    about actions and filters will be covered in upcoming chapters.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中，一个动作是一个在过程特定点执行的PHP函数。一个过滤器是一个用于修改过程中的现有数据或功能的函数。尽管动作旨在在事件前后执行某些操作，但它们经常用于向模板添加内容。关于动作和过滤器的更多内容将在后续章节中介绍。
- en: 'Once we choose a theme, we can explore the actions and filters within the theme
    to understand its extendable features and locations. The simplest way to identify
    these actions and filters is to use the directory or project search feature in
    your code editor. Most quality code editors provide this feature by default. You
    should use the term `apply_filters` to search for filters in the theme, and `do_action`
    to find out the actions defined in it. You may find a small number of these hooks
    in free themes and hundreds in premium themes. These hooks consist of built-in
    WordPress hooks as well as theme-specific hooks. As a developer, you need to have
    a thorough knowledge of the common built-in WordPress hooks in themes. Let''s
    take a look at some of the common filters and actions used in themes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了一个主题，我们就可以探索主题内的动作和过滤器，以了解其可扩展功能和位置。识别这些动作和过滤器的最简单方法是使用代码编辑器的目录或项目搜索功能。大多数高质量的代码编辑器默认提供此功能。你应该使用术语`apply_filters`来搜索主题中的过滤器，并使用`do_action`来查找其中定义的动作。你可能会在免费主题中找到少量这些钩子，在付费主题中找到数百个。这些钩子包括内置的WordPress钩子以及主题特定的钩子。作为一个开发者，你需要对主题中常见的内置WordPress钩子有深入的了解。让我们看看在主题中常用的某些过滤器和动作：
- en: '`the_content`: This is the most commonly used filter in themes, intended to
    modify the post content. We can either modify the entire post content or add dynamic
    content before or after a post. Usually, this is used to display additional data
    for posts such as related posts, advertisements, and social sharing buttons. Consider
    the following code for adding custom content after each post. This code should
    be placed in the `functions.php` file of the child theme:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_content`: 这是在主题中最常用的过滤器，旨在修改帖子内容。我们可以修改整个帖子内容，或者在一个帖子前后添加动态内容。通常，这用于显示有关帖子（如相关帖子、广告和社交分享按钮）的附加数据。以下代码用于在每个帖子后添加自定义内容。此代码应放置在子主题的`functions.php`文件中：'
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The post content is passed as a parameter to this function. Here, we use the `is_single`
    template tag to make sure that the custom content is only applied to individual
    posts, and not to archives. The other two conditions restrict this text from applying
    to posts outside the main query and loop. This is a very basic illustration of
    the functionality of the `the_content` filter. You can add more content and different
    conditions to handle various requirements.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子内容作为参数传递给这个函数。在这里，我们使用`is_single`模板标签来确保自定义内容仅应用于单个帖子，而不是存档。其他两个条件限制此文本不应用于主查询和循环之外的帖子。这是`the_content`过滤器功能的一个非常基本的示例。你可以添加更多内容并设置不同的条件来处理各种需求。
- en: '`the_permalink`: This filters the display of the permalink for the current
    post. You can use code similar to the preceding example for modifying a post link.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_permalink`: 这个过滤器会过滤当前帖子的永久链接显示。你可以使用与前面示例类似的代码来修改帖子链接。'
- en: '`the_title`: This filters the title of the post. Used for modifying a post
    title based on certain conditions.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`the_title`: 这个过滤器会过滤帖子的标题。用于根据某些条件修改帖子标题。'
- en: '`comment_form_default_fields`: This filters the fields of a comment form. By
    default, the comment form contains fields for comment, name, email, and website.
    The fields are passed as an array type parameter to this filter. You can use this
    filter to add new fields or remove existing fields from the comment form. The
    following code removes the `website` field from the comment form using this filter:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment_form_default_fields`: 这个过滤器会过滤评论表单的字段。默认情况下，评论表单包含评论、姓名、电子邮件和网站字段。字段作为数组类型参数传递给此过滤器。你可以使用此过滤器添加新字段或从评论表单中删除现有字段。以下代码使用此过滤器从评论表单中删除`website`字段：'
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`wp_nav_menu_item_custom_fields`: The name suggests that this as a filter,
    but it''s actually an action executed in WordPress. The process of adding custom
    fields to menu items is one of the common tasks for features such as menu item-specific
    CSS and menu item restrictions. In such cases, we can use this action to add custom
    fields, as shown in the following code:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wp_nav_menu_item_custom_fields`：名称表明这是一个过滤器，但实际上它是在WordPress中执行的动作。将自定义字段添加到菜单项的过程是菜单项特定CSS和菜单项限制等功能的常见任务之一。在这种情况下，我们可以使用此动作来添加自定义字段，如下面的代码所示：'
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code will add a new text field named `Menu Class` to menu items
    in the backend menu.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述代码将在后端菜单中的菜单项中添加一个名为`菜单类`的新文本字段。
- en: These are some of the frequently used ones, among hundreds of possible WordPress
    actions and filters. You should explore these hooks by using various WordPress
    themes in order to identify the necessary ones for your implementations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是数百个可能的WordPress动作和过滤器中常用的一些。您应该通过使用各种WordPress主题来探索这些钩子，以确定您实现所需的钩子。
- en: 'The filters and actions discussed in the preceding section are used for common
    WordPress purposes and hence can be used in any theme. Theme-specific actions
    and filters, on the other hand, are designed for advanced theme features. Most
    of these actions and filters cannot be used in other themes. We can easily identify
    theme-specific hooks by looking at the prefix used for hook names. The **Twenty
    Seventeen** theme uses `twentyseventeen_` as the prefix for theme-specific hooks.
    Let''s consider one of the filters that''s available in the Twenty Seventeen theme
    to understand the use of theme-specific hooks:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中讨论的过滤器和动作用于常见的WordPress用途，因此可以在任何主题中使用。另一方面，特定于主题的动作和过滤器是为高级主题功能设计的。大多数这些动作和过滤器不能在其他主题中使用。我们可以通过查看钩点名使用的前缀来轻松识别特定于主题的钩子。**Twenty
    Seventeen**主题使用`twentyseventeen_`作为特定于主题钩子的前缀。让我们考虑在Twenty Seventeen主题中可用的一个过滤器，以了解特定于主题钩子的使用：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This filter is used to customize the width of the page based on page layout.
    Let''s see how we can implement this filter to modify the width:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器用于根据页面布局自定义页面宽度。让我们看看我们如何实现此过滤器来修改宽度：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we changed the width of pages in the **Twenty Seventeen**
    theme by using the theme-specific filter. We can add more conditions to change
    the width and display different types of layouts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们通过使用特定于主题的过滤器更改了**Twenty Seventeen**主题中页面的宽度。我们可以添加更多条件来更改宽度和显示不同类型的布局。
- en: Steps for extending theme-specific hooks
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展特定于主题钩子的步骤
- en: 'Now, you should have a brief understanding of built-in hooks in themes, as
    well as theme-specific hooks. Let''s take a look at the basic steps for customizing
    themes using these hooks:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对主题中内置的钩子和特定于主题的钩子有一个简要的了解。让我们看看使用这些钩子自定义主题的基本步骤：
- en: Execute a directory search on the theme and identify the hooks by tracking the
    `apply_filters` and `do_action` functions.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主题上执行目录搜索，通过跟踪`apply_filters`和`do_action`函数来识别钩子。
- en: For the filters, check whether more than two parameters have been passed to
    the `apply_filters` function. The second parameter will be the variable you will
    be filtering, and additional parameters will be used to support the filtering
    process.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于过滤器，检查是否已向`apply_filters`函数传递了超过两个参数。第二个参数将是您将要过滤的变量，额外的参数将用于支持过滤过程。
- en: 'If the `apply_filters` function contains two parameters, you can implement
    it by using following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`apply_filters`函数包含两个参数，您可以使用以下代码实现它：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the `apply_filters` function contains more than two parameters, you can
    use following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`apply_filters`函数包含超过两个参数，您可以使用以下代码：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, 10 will be the priority. The number 3 will be the number
    of parameters used in the `apply_filters` function, after the hook name.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述代码中，10将是优先级。数字3将是`apply_filters`函数中在钩子名称之后的参数数量。
- en: For actions, check whether more than one parameter has been passed to the `do_action`
    function. These parameters will be used to support the execution of our custom
    action code.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于动作，检查是否已向`do_action`函数传递了多个参数。这些参数将用于支持我们自定义动作代码的执行。
- en: 'Use the following code to implement the actions:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码实现动作：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should change 2 based on the number of parameters. If the hook contains
    only one parameter, you can omit both 10 and 2.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应根据参数的数量更改2。如果钩子只有一个参数，则可以省略10和2。
- en: In this section, we have looked at two techniques for modifying or extending
    theme features. You should check the requirements of the site and decide whether
    you can do certain customizations with existing hooks or whether you need a complete
    replacement of template files in child themes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了两种修改或扩展主题功能的技术。您应该检查网站的要求，并决定您是否可以使用现有的钩子进行某些自定义，或者是否需要在子主题中完全替换模板文件。
- en: Working with the WordPress theme template hierarchy
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WordPress主题模板层次结构
- en: 'A WordPress theme can be built with just three files: **style.css**, **index.php**,
    and **comments.php**. However, the complete template hierarchy can support quite
    a large number of sub-templates, flexible enough to cater for the advanced requirements
    of many sites. More often than not, developers will be working on less than ten
    files in this hierarchy. However, the knowledge of the complete template hierarchy
    may come handy in projects with advanced requirements. Let''s take a look at the
    following diagram, which consists of the types of pages used in WordPress to handle
    the initial request:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个WordPress主题可以用仅三个文件来构建：**style.css**、**index.php**和**comments.php**。然而，完整的模板层次结构可以支持相当多的子模板，足够灵活以满足许多网站的先进需求。通常情况下，开发者将在层次结构中工作少于十个文件。然而，对于具有高级需求的项目，了解完整的模板层次结构可能会很有用。让我们看看以下图表，它由WordPress用于处理初始请求的页面类型组成：
- en: '![](img/09c260b3-6d13-415b-814a-7a31dc4efd85.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09c260b3-6d13-415b-814a-7a31dc4efd85.png)'
- en: 'There are six paths to handle the user request based on the loaded content.
    **Archive Page** and **Singular Page** are the most complex yet flexible among
    these, and have a tall structure. Let''s identify the main purpose of each of
    these pages before moving into the complete template hierarchy:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据加载的内容，有六种路径来处理用户请求。**归档页面**和**单页**是其中最复杂且最灵活的，结构较高。在深入了解完整的模板层次结构之前，让我们确定这些页面的主要用途：
- en: '**Archive Page**: This is usually used to display the posts list, category
    posts, tag posts, author posts, and custom post types, with a short summary about
    the post'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**归档页面**：通常用于显示文章列表、分类文章、标签文章、作者文章和自定义文章类型，并附带关于文章的简要摘要'
- en: '**Singular Page**: This is used to display individual posts, pages, or custom
    post types'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单页**：用于显示单个文章、页面或自定义文章类型'
- en: '**Site Front Page**: This is used to display the home page of your site'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站首页**：用于显示您网站的首页'
- en: '**Blog Posts Index Page**: This is used to display the list of posts on your
    site'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**博客文章索引页面**：此页面用于显示您网站上的文章列表'
- en: '**Error 404 Page**: This is used when WordPress can''t find a matching template
    for the request'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**404错误页面**：当WordPress找不到请求的匹配模板时使用'
- en: '**Search Result Page**: This displays the search results that contain a list
    of posts and pages'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索结果页面**：显示包含帖子列表和页面的搜索结果'
- en: You can find more details about template hierarchy at [https://developer.wordpress.org/themes/basics/template-hierarchy/](https://developer.wordpress.org/themes/basics/template-hierarchy/).
    Now, we need to go through the complete hierarchy for each of these page types
    to get the knowledge to handle advanced application requirements. Let's start
    with the **Archive Page**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developer.wordpress.org/themes/basics/template-hierarchy/](https://developer.wordpress.org/themes/basics/template-hierarchy/)找到更多关于模板层次结构的详细信息。现在，我们需要遍历每种页面类型的完整层次结构，以获取处理高级应用需求的知识。让我们从**归档页面**开始。
- en: Archive Page hierarchy
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归档页面层次结构
- en: 'This path is divided into six sub-types, and WordPress will use one of these
    sub-types for any given request with a collection of post data. Let''s consider
    the following diagram for the Archive Page''s hierarchy:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径分为六个子类型，WordPress将为任何给定请求的帖子数据集合使用这些子类型之一。让我们考虑以下图表，用于归档页面层次结构：
- en: '![](img/ea6f5787-9fe5-4a2c-9178-734ac31fee70.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea6f5787-9fe5-4a2c-9178-734ac31fee70.png)'
- en: We use the `archive.php` file as the main template in this path. It's an optional
    file for a theme, with the `index.php` file handling the archives when this template
    is missing in a theme. However, almost all of these themes will include the `archive.php`
    file for handling the collection of data. Let's take a look at the various types
    of Archive Pages, starting with Author Archive.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路径中，我们使用`archive.php`文件作为主要模板。对于主题而言，这是一个可选文件，当此模板在主题中缺失时，`index.php`文件将处理归档。然而，几乎所有的这些主题都会包含`archive.php`文件来处理数据集合。让我们看看各种类型的归档页面，从作者归档开始。
- en: Author archive pages
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作者归档页面
- en: In WordPress, posts are created by an administrator or users with post creation
    capabilities. In most themes, you will see a linked author name alongside the
    post title. Once you click on the link, you will be redirected to a page with
    all the posts that have been created by the specified user. This is the Author
    Archive page, and it's usually handled by the `archive.php` file. Let's take a
    look at the author archive page of the Twenty Seventeen theme.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中，帖子是由管理员或具有帖子创建能力的用户创建的。在大多数主题中，您会在帖子标题旁边看到一个链接的作者名称。一旦您点击链接，您将被重定向到一个包含指定用户创建的所有帖子的页面。这是作者存档页面，通常由`archive.php`文件处理。让我们看看Twenty
    Seventeen主题的作者存档页面。
- en: 'Basically, we have the display name of the author and the description. This
    might be good enough for basic WordPress sites with blogs and one or two authors.
    In situations where you have a large number of writers with the primary site feature
    being publishing articles, this might look modest. Instead, such sites requires
    you to have a well-designed profile, including a profile image, website details,
    and social account details. The following screenshot is a preview of a modified
    author template from a popular theme:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们拥有作者的显示名称和描述。这可能对于拥有博客和一到两个作者的简单WordPress站点来说已经足够好了。在拥有大量作者且主要站点功能是发布文章的情况下，这可能看起来有些朴素。相反，这类网站需要您拥有一个精心设计的个人资料，包括个人照片、网站详情和社交媒体账户详情。以下截图是来自一个流行主题修改后的作者模板预览：
- en: '![](img/24de8d7f-dd29-4816-808c-5acbfc7d3e35.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24de8d7f-dd29-4816-808c-5acbfc7d3e35.png)'
- en: 'As you can see, this site uses a complete user profile as well as a modified
    post list with two columns. We can''t build such a design using `archive.php`
    without complicating the template with lots of conditions. Instead, we can leverage
    the additional templates in the author archive path, as shown in the preceding
    diagram. There are three templates in the author archive path, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个网站使用了一个完整的用户个人资料以及一个修改后的两列帖子列表。我们无法在不使模板变得过于复杂的情况下使用`archive.php`来构建这种设计。相反，我们可以利用作者存档路径中的额外模板，如前图所示。作者存档路径中有三个模板，如下所示：
- en: '`author.php`: This is the main template for customizing the author archive.
    Many themes, including premium themes, use `archive.php` to generate the author
    archive, instead of a separate template. Therefore, we can add our own `author.php`
    file to the child theme and design a separate author archive. This template is
    executed before `archive.php` and `index.php`.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author.php`：这是自定义作者存档的主要模板。许多主题，包括付费主题，使用`archive.php`来生成作者存档，而不是单独的模板。因此，我们可以在子主题中添加自己的`author.php`文件，并设计一个单独的作者存档。这个模板在`archive.php`和`index.php`之前执行。'
- en: '`author-$id.php`: This is one of two dynamic templates that''s executed before
    the `author.php` template. The ID of the user is used as part of the template
    name and hence this template will only be loaded for a single user. Since this
    is a dynamic template, you won''t find it in any of the themes. This is something
    a developer should create to cater for the specific requirements of a site. Creating
    a theme template for each author is not practical, unless you have a limited and
    fixed number of authors. Therefore, you will rarely find requirements to use this
    kind of template in development.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author-$id.php`：这是在`author.php`模板之前执行的两种动态模板之一。用户的ID作为模板名称的一部分，因此这个模板只为单个用户加载。由于这是一个动态模板，您在任何主题中都不会找到它。这是开发者应该创建以适应网站特定需求的东西。为每个作者创建主题模板并不实际，除非您有数量有限且固定的作者。因此，在开发中很少需要使用这种模板。'
- en: '`author-$nicename.php`: This is similar to `author-$id.php` and is executed
    before the preceding template. This template uses a WordPress nicename instead
    of ID.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author-$nicename.php`：这与`author-$id.php`类似，并且在之前的模板之前执行。这个模板使用WordPress的昵称而不是ID。'
- en: In scenarios where you need a custom author archive page, you should copy the
    content of the `archive.php` page into the `author.php` file and change the design
    as needed. More about author templates and the implementation of author data is
    available at [https://codex.wordpress.org/Author_Templates](https://codex.wordpress.org/Author_Templates).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要自定义作者存档页面的情况下，您应将`archive.php`页面的内容复制到`author.php`文件中，并根据需要更改设计。有关作者模板和作者数据的实现，更多信息请参阅[https://codex.wordpress.org/Author_Templates](https://codex.wordpress.org/Author_Templates)。
- en: Categories, tags, and custom taxonomy archives
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类、标签和自定义分类法存档
- en: Taxonomy is a term used by WordPress to group things into different sections.
    If you have already worked with WordPress posts, you should be familiar with **Categories**
    and **Post Tags** in the post creation screen. These are two built-in taxonomies
    that are assigned to normal posts by default. On the other hand, custom taxonomies
    are the grouping types we create for certain post types based on the requirements
    in different sites. We can assign one or more taxonomy values to posts or custom
    post type items. Once posts are assigned, we get an archive page with a list of
    posts for the specific taxonomy.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 分类是WordPress用来将事物分组到不同部分的一个术语。如果你已经使用过WordPress文章，你应该熟悉在文章创建屏幕中的**分类**和**文章标签**。这两个是默认分配给普通文章的内置分类。另一方面，自定义分类是根据不同网站的需求为特定文章类型创建的分组类型。我们可以将一个或多个分类值分配给文章或自定义文章类型项。一旦文章被分配，我们就会得到一个包含特定分类文章列表的存档页面。
- en: Categories, tags, and custom taxonomies work in the exact same way, with similar
    template hierarchies. The `archive.php` file is used to load these three types
    by default, by using taxonomy title and description. In the author archive, we
    needed a way to display complete author details with an attractive design. In
    this case, we don't need to focus on such details, as taxonomies rarely use additional
    details. Instead, we might need to change the design and display of posts in taxonomy
    archive pages. We can use the `category.php`, `tag.php`, and `taxonomy.php` templates
    in such scenarios, similar to the way we used `author.php`. These templates need
    to be added to child themes based on your requirements as most of the themes only
    use the `archive.php` file for all three types.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 分类、标签和自定义分类以完全相同的方式工作，具有类似的模板层次结构。`archive.php`文件默认使用分类标题和描述来加载这三种类型。在作者存档中，我们需要一种方式来以吸引人的设计显示完整的作者详情。在这种情况下，我们不需要关注这些细节，因为分类很少使用附加详情。相反，我们可能需要更改分类存档页面中文章的设计和显示。在这种情况下，我们可以使用`category.php`、`tag.php`和`taxonomy.php`模板，类似于我们使用`author.php`的方式。这些模板需要根据你的需求添加到子主题中，因为大多数主题只使用`archive.php`文件来处理这三种类型。
- en: Similar to author archives, each of these three types also has two dynamic sub-templates
    that use a taxonomy ID or slug. However, we rarely use them as the template needs
    to be created dynamically based on the taxonomies we use in development.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与作者存档类似，这三种类型各自也有两个使用分类ID或短语的动态子模板。然而，我们很少使用它们，因为模板需要根据我们在开发中使用的分类动态创建。
- en: Date Archive pages
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期存档页面
- en: This is another type of archive page where we can see a list of posts for year,
    month, or date. We are using the **Twenty Seventeen** theme and hence you will
    see a widget in the sidebar called **Archives** with a list of values, such as
    August 2018, July 2018, and so on. Once you click on one of these links, it will
    load the posts that were created in that month. The URL of the site may look similar
    to `http://www.example.com/2018/07`. We can check yearly archives by removing
    07 from the URL and daily archives by adding the date after 07\. One again, `archive.php`
    is used by default to handle all three of these archive pages.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种另一种存档页面，我们可以看到按年、月或日排列的文章列表。我们正在使用**Twenty Seventeen**主题，因此你会在侧边栏看到一个名为**存档**的部件，其中包含一系列值，如2018年8月、2018年7月等。一旦你点击这些链接之一，它将加载该月创建的文章。网站的URL可能看起来类似于`http://www.example.com/2018/07`。我们可以通过从URL中删除07来检查年度存档，通过在07之后添加日期来检查每日存档。再次强调，默认情况下使用`archive.php`来处理这三种存档页面。
- en: Now, if you consider our archive page diagram, you will notice the use of the
    `date.php` file to separate the date archives from the `archive.php` file. This
    template works similar to the author and taxonomy templates that we have discussed
    so far. Even though it's not used frequently, we can add the `date.php` file to
    our child theme and display any additional information about each year, month,
    or date.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你考虑我们的存档页面图，你会注意到使用`date.php`文件将日期存档与`archive.php`文件分开。这个模板与我们已经讨论过的作者和分类模板类似工作。尽管它不常被使用，但我们可以在子主题中添加`date.php`文件，并显示关于每年、每月或每天的任何附加信息。
- en: Custom Post Type Archive
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义文章类型存档
- en: The use of custom post types is common in modern WordPress sites. Unlike a normal
    blog post, custom post types can contain a considerable amount of data and design
    requirements. Therefore, it may not be feasible to use `archive.php` to load the
    list of custom posts in most scenarios.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代WordPress网站上，自定义文章类型的使用很常见。与普通博客文章不同，自定义文章类型可以包含相当多的数据和设计要求。因此，在大多数情况下，使用`archive.php`来加载自定义文章列表可能不可行。
- en: 'Instead, we can observe the preceding diagram to identify the use of additional
    template files. Unlike the previous paths, we only have one dynamic template for
    custom post archives, called `archive-$post_type.php`. The post type variable
    should be replaced by post types in your sites such as product, topic, and forum.
    Even though this is a dynamic template type, we can create and add this template
    to child themes, since custom post types in a site are fixed in most scenarios.
    In this case, WordPress will only load archive.php when it can''t find a template
    with `archive-$post_type.php`. Nowadays, many premium themes comes with built-in
    custom post type support and hence you will find such templates within the theme
    files. Let''s take a look at the following screenshot for use as the archive page:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以观察前面的图表来识别额外模板文件的使用。与之前的路径不同，我们只有一个用于自定义文章存档的动态模板，称为`archive-$post_type.php`。文章类型变量应该被替换成你网站上的文章类型，如产品、主题和论坛。尽管这是一个动态模板类型，但我们可以创建并添加这个模板到子主题中，因为大多数情况下，一个网站中的自定义文章类型是固定的。在这种情况下，当WordPress找不到带有`archive-$post_type.php`的模板时，它将只加载`archive.php`。如今，许多高级主题都内置了自定义文章类型支持，因此你将在主题文件中找到这样的模板。让我们看看以下截图，用作存档页面：
- en: '![](img/c631376e-be8b-43dc-8a7f-1cb51173b23a.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c631376e-be8b-43dc-8a7f-1cb51173b23a.png)'
- en: The screen on the left displays a normal blog post archive, which is displayed
    using the `archive.php` file. The screen on the right displays a custom post type,
    with a completely different design and various pieces of data, in a user-friendly
    manner. We need `archive-$post_type.php` to build such designs as it's not possible
    to generate both screens using the same `archive.php` file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的屏幕显示了一个正常的博客文章存档，它使用`archive.php`文件进行显示。右侧的屏幕显示了一个自定义文章类型，以用户友好的方式展示了一个完全不同的设计和各种数据。我们需要`archive-$post_type.php`来构建这样的设计，因为使用同一个`archive.php`文件无法生成这两个屏幕。
- en: Singular Page Hierarchy
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页层次结构
- en: 'This path is divided into two sub-types for displaying the data for individual
    posts or pages. Let''s consider the following diagram for the **Singular page**
    hierarchy:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路径分为两个子类型，用于显示单个文章或页面的数据。让我们考虑以下图表，用于**单页**层次结构。
- en: '![](img/ba70fe80-baad-4194-9177-51e02b032c9f.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba70fe80-baad-4194-9177-51e02b032c9f.png)'
- en: In the archives, we displayed a collection of posts with summarized details.
    In this path, we need to display the complete data for an individual post or page.
    We use the `single.php` file as the main template in this path. It's an optional
    file for a theme, with the `index.php` file handling the posts and pages when
    this template is missing in a theme. However, almost all of the themes will include
    the `single.php` file for individual post data. Let's take a look at the various
    types of Singular Pages, starting with the Static Page.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在存档中，我们展示了带有摘要详情的文章集合。在这个路径中，我们需要显示单个文章或页面的完整数据。我们使用`single.php`文件作为这个路径的主要模板。这是一个主题的可选文件，当这个模板在主题中缺失时，`index.php`文件将处理文章和页面。然而，几乎所有的主题都会包含`single.php`文件以用于单个文章数据。让我们看看以下各种单页类型，从静态页面开始。
- en: Static Page Hierarchy
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态页面层次结构
- en: In WordPress, pages are used to manage the structure of the website and contain
    timeless content. Usually, we call pages static, even though they're not as same
    as the pages of pure HTML websites we had in the old days. However, the content
    doesn't change often and hence is considered static compared to posts. In a basic
    site, you will find WordPress pages for contact, about, services, and so on. This
    path is divided into two types called **Custom Template** and **Default Template**.
    Let's start with **Default Template** so that we can understand the need for custom
    templates.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中，页面用于管理网站的架构并包含永恒的内容。通常，我们称页面为静态的，尽管它们与我们过去拥有的纯HTML网站的页面不完全相同。然而，内容不经常改变，因此与文章相比被认为是静态的。在一个基本网站上，你会找到WordPress页面用于联系、关于、服务等等。这个路径分为两种类型，称为**自定义模板**和**默认模板**。让我们从**默认模板**开始，这样我们可以理解自定义模板的需求。
- en: By default, WordPress pages are handled by either `page.php`, `singular.php`,
    or `index.php`. Most themes contain a separate `page.php` file for handling pages
    and hence `singular.php` and `index.php` may not be used.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WordPress页面由`page.php`、`singular.php`或`index.php`处理。大多数主题包含一个单独的`page.php`文件来处理页面，因此`singular.php`和`index.php`可能不会被使用。
- en: 'We can build most of our page designs with the `page.php` file. However, there
    are two other optional templates preceding `page.php` in cases where you want
    to handle different pages with a different design:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`page.php`文件构建我们的大部分页面设计。然而，在某些情况下，如果你想用不同的设计处理不同的页面，`page.php`之前还有两个可选模板：
- en: '`page-$slug.php`: This uses the slug to identify the page and provide a separate
    design. This template can only be used to design one page.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page-$slug.php`：这个模板使用别名来识别页面并提供单独的设计。这个模板只能用来设计一个页面。'
- en: '`page-$id.php`: This uses the page ID to provide a separate design for chosen
    pages. This template can only be used to design one page.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page-$id.php`：这个模板使用页面ID为选定的页面提供单独的设计。这个模板只能用来设计一个页面。'
- en: Many sites contain a limited number of pages, and the design of these pages
    is usually different from one another. So, it's possible to use different page
    templates by specifying the ID or slug. However, these two templates might not
    be used in modern sites as the same functionality can be achieved with custom
    page templates, which will be discussed in the next section. The default template
    works for most sites where the page design is simple and only intended to provide
    content to the user.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站包含有限数量的页面，这些页面的设计通常各不相同。因此，可以通过指定ID或别名来使用不同的页面模板。然而，在现代网站上，这两个模板可能不会被使用，因为可以通过自定义页面模板实现相同的功能，这将在下一节中讨论。默认模板适用于大多数页面设计简单且仅旨在向用户提供内容的网站。
- en: The custom page templates, on the other hand, are templates varying from the
    default design, and are used to change the look and feel of one or more pages
    in the site. This template is loaded before the `page.php` template. Unlike other
    templates in the hierarchy, there is no predefined naming pattern for page templates.
    Instead, we can name it whatever we like and specify it as a template using PHP
    comments in the template file.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，自定义页面模板是不同于默认设计的模板，用于更改网站中一个或多个页面的外观和感觉。这个模板在`page.php`模板之前加载。与其他层次结构中的模板不同，页面模板没有预定义的命名模式。相反，我们可以将其命名为我们想要的任何名称，并在模板文件中使用PHP注释将其指定为模板。
- en: Creating and using custom page templates
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用自定义页面模板
- en: 'The process of creating a new page template is relatively simple. First, we
    need to create a file on the root folder of the theme. Let''s name the template
    `fullwidth.php`. Next, we need to add the following comment to the top of the
    `fullwidth.php` file, as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的页面模板的过程相对简单。首先，我们需要在主题的根目录下创建一个文件。让我们将其命名为`fullwidth.php`。接下来，我们需要在`fullwidth.php`文件的顶部添加以下注释，如下所示：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding comment will register this as a page template, and WordPress will
    load it as an option in the page creation screen. In the **Twenty Seventeen**
    theme, page design contains two columns where the title is displayed on the left
    and the content is displayed on the right. The left column takes almost half of
    the page and hence is not ideal for some pages in websites. Therefore, our full
    width template will remove the left column and increase the width of the content
    section to 100%.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上述注释将注册此为页面模板，WordPress将在页面创建屏幕中将其作为选项加载。在**Twenty Seventeen**主题中，页面设计包含两列，其中标题显示在左侧，内容显示在右侧。左侧列几乎占据页面的一半，因此对于网站上的某些页面来说并不理想。因此，我们的全宽模板将删除左侧列并将内容区域的宽度增加到100%。
- en: 'First, we have to copy the content from the `page.php` file and add it to our
    `fullwidth.php` template. Next, replace the following line with the content from
    the `twentyseventeen/template-parts/post/content.php` file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须从`page.php`文件中复制内容并将其添加到我们的`fullwidth.php`模板中。接下来，将以下行替换为来自`twentyseventeen/template-parts/post/content.php`文件的内容：
- en: '[PRE15]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we have to remove the complete header tag to omit the left column. Then,
    we need to increase the width of the `<div>` element containing the **entry-content**
    class to 100%. Finally, add the page title within the **entry-content** div element.
    Now, we have a full width page template ready.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须删除完整的标题标签以省略左侧列。然后，我们需要将包含**entry-content**类的`<div>`元素的宽度增加到100%。最后，在**entry-content**
    div元素内添加页面标题。现在，我们已经准备好了一个全宽页面模板。
- en: 'Now, we can go to Pages | Add New from the admin section to create a new page.
    The available page templates of your theme will be listed, as shown in the following
    screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从管理部分转到“页面 | 添加新页面”来创建一个新的页面。你的主题提供的可用页面模板将列出，如下面的截图所示：
- en: '![](img/3c3f424f-d3ee-44f3-94bb-ed4eb7b39fd3.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c3f424f-d3ee-44f3-94bb-ed4eb7b39fd3.png)'
- en: The Template setting allows us to assign a page template for any given page.
    Therefore, we can use such templates when multiple pages require the same design.
    In the default template section, we discussed the availability of the `page-$slug.php`
    and `page-$id.php` files. With this technique, we have to create templates for
    each and every page we need. We also have to manually modify the templates when
    we remove or change the existing pages. Custom page templates don't have these
    limitations and we can use one template to design multiple pages. We can also
    quickly change the template from the page creation section. So, we should prefer
    custom page templates over the dynamic page types that are available in the default
    path.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 模板设置允许我们为任何给定页面分配一个页面模板。因此，当多个页面需要相同的设计时，我们可以使用此类模板。在默认模板部分，我们讨论了`page-$slug.php`和`page-$id.php`文件的可用性。使用这种技术，我们必须为每个需要的页面创建模板。当我们删除或更改现有页面时，我们还需要手动修改模板。自定义页面模板没有这些限制，我们可以使用一个模板来设计多个页面。我们还可以从页面创建部分快速更改模板。因此，我们应该优先考虑自定义页面模板，而不是默认路径中可用的动态页面类型。
- en: In their basic form, we use page templates to change the structure of pages.
    We already changed the structure of the page by introducing a full width template.
    The most basic types of templates include two columns, three columns, full width,
    sidebar on the right, and sidebar on the left templates. These are very basic
    types of templates compared to what we get in modern premium themes. These modern
    themes include templates such as portfolios with lists, grids and galleries, contact
    forms, home page templates with various sliders, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在其基本形式中，我们使用页面模板来改变页面的结构。我们已经通过引入全宽模板来改变了页面的结构。最基本的模板类型包括两列、三列、全宽、右侧边栏和左侧边栏模板。与我们在现代高级主题中获得的模板相比，这些都是非常基本的模板类型。这些现代主题包括具有列表、网格和相册的精选集模板、联系表单、带有各种滑块的首页模板等等。
- en: This is a just a list of template types, and you need to check out these template
    designs in order to understand the real power of page templates. You can find
    these types of templates in many premium themes. I recommend that you visit [https://themeforest.net/category/wordpress](https://themeforest.net/category/wordpress)
    and check out the page types provided by the modern themes. You will be amazed
    by the innovative use of page templates.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个模板类型的列表，你需要查看这些模板设计，以便了解页面模板的实际功能。你可以在许多高级主题中找到这些类型的模板。我建议你访问[https://themeforest.net/category/wordpress](https://themeforest.net/category/wordpress)，并查看现代主题提供的页面类型。你会对页面模板的创新使用感到惊讶。
- en: It's very important to know how to build a page template from scratch. Basically,
    you can add anything after the **Template Name** comment. As you are starting
    WordPress development, you can use the various functions from the `page.php` file
    in your template and build on top of them. Once you are experienced, you should
    create advanced templates from scratch without needing any code from existing
    templates.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何从头开始构建页面模板非常重要。基本上，你可以在**模板名称**注释之后添加任何内容。由于你刚开始WordPress开发，你可以在模板中使用`page.php`文件中的各种函数，并在其基础上构建。一旦你有了经验，你应该从头开始创建高级模板，而不需要从现有模板中获取任何代码。
- en: Single Post Page hierarchy
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个帖子页面层次结构
- en: In the preceding section, we discussed pages as static elements. On the other
    hand, posts are highly dynamic and provide time critical information. Usually,
    the post list page changes frequently, with the new posts being displayed at the
    top of the list. In this path, we are considering the display of the complete
    details for individual posts or custom post types.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了页面作为静态元素。另一方面，帖子是高度动态的，并提供了时间敏感的信息。通常，帖子列表页面会频繁更改，新帖子会显示在列表的顶部。在本路径中，我们考虑的是显示单个帖子或自定义帖子类型的完整详情。
- en: By default, WordPress posts are handled by either `single.php`, `singular.php`,
    or `index.php`, depending on the availability of the preceding template files
    in the hierarchy. Most themes contain a separate `single.php` file for handling
    posts and hence `singular.php` and `index.php` may not be used. The `single.php`
    template is quite similar to `page.php`. However, posts have options such as categories,
    tags, featured images, and pagination for other posts. So, including these details
    changes `single.php` from `page.php`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WordPress帖子由`single.php`、`singular.php`或`index.php`处理，具体取决于层次结构中先前模板文件的可用性。大多数主题包含一个单独的`single.php`文件来处理帖子，因此`singular.php`和`index.php`可能不会被使用。`single.php`模板与`page.php`非常相似。然而，帖子有诸如分类、标签、特色图片和其他帖子的分页等选项。因此，包括这些细节将使`single.php`从`page.php`中改变。
- en: This path is divided into three types called **Attachment Post, Custom Post**,
    and **Blog Post**. Let's start with **Attachment Post**-specific templates.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径分为三种类型，称为**附件帖子、自定义帖子**和**博客帖子**。让我们从**附件帖子**特定的模板开始。
- en: Attachment Post hierarchy
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附件帖子层次结构
- en: In WordPress, files uploaded to the media library or assigned to posts are considered
    attachments. The diagram shows templates going up to seven levels for attachments.
    However, we rarely use these templates unless the primary feature of the site
    is managing attachments. Therefore, the `single.php` template will be responsible
    for handling attachments in most themes. We are not going to discuss the optional
    templates due to their lack of use.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中，上传到媒体库或分配给帖子的文件被视为附件。图中显示了附件模板的上至七级。然而，除非网站的主要功能是管理附件，我们很少使用这些模板。因此，`single.php`模板将负责处理大多数主题中的附件。由于这些可选模板使用较少，我们不会讨论它们。
- en: You can go to Media | Library and click on one of the attachments. Then, you
    can click the View Attachment Page link to view the attachment using the `single.php`
    file. If your site requires that you change the default template, you should add
    the `attachment.php` file to the child theme and try out the custom designs.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以转到媒体 | 库，点击其中一个附件。然后，您可以点击查看附件页面链接，使用`single.php`文件查看附件。如果您的网站需要您更改默认模板，您应该在子主题中添加`attachment.php`文件并尝试自定义设计。
- en: Blog post hierarchy
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 博客帖子层次结构
- en: The default post in WordPress is often known as a blog post, as it's intended
    to provide content for blogs. By default, the `single.php` file is responsible
    for handling the template for blog posts. In the archives section, we understood
    the difference between the normal post list and the custom post type list with
    regard to advanced features. Similarly, we need even more specific templates for
    custom post types, and hence using `single.php` for all three types may not possible.
    In such scenarios, we can make use of the `single-post.php` template, which was
    designed exactly for normal blog posts. The content of the `single-post.php` file
    will be similar to `single.php`, and we can add more elements and styles to change
    the design.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress中的默认帖子通常被称为博客帖子，因为它旨在为博客提供内容。默认情况下，`single.php`文件负责处理博客帖子的模板。在存档部分，我们了解了正常帖子列表与自定义帖子类型列表在高级功能方面的区别。同样，我们需要更多特定于自定义帖子类型的模板，因此使用`single.php`处理所有三种类型可能不可行。在这种情况下，我们可以使用`single-post.php`模板，该模板正是为正常博客帖子设计的。`single-post.php`文件的内容将与`single.php`类似，我们可以添加更多元素和样式来改变设计。
- en: We can also find the optional `$custom.php` template in the blog post path.
    This is a variation of page templates, where we can specify templates for specific
    post types. This feature was introduced in WordPress version 4.7.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在博客帖子路径中找到可选的`$custom.php`模板。这是页面模板的一种变体，我们可以为特定帖子类型指定模板。此功能是在WordPress
    4.7版本中引入的。
- en: Creating and assigning page templates for posts
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和分配帖子页面模板
- en: 'The process of creating post-specific templates is similar to the process we
    used earlier. We can just create a template file with the preferred name in the
    root folder of the theme and add the following comments to the top of the file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 创建特定帖子模板的过程与我们之前使用的过程类似。我们只需在主题的根目录中创建一个带有首选名称的模板文件，并将以下注释添加到文件的顶部：
- en: '[PRE16]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this template, we have to add an additional comment called **Template Post
    Type**, with the list of supported post types. Based on our comment, this template
    will be available for both normal blog posts and the product custom post type.
    The process of assigning a template to a post is the same as the process we used
    for pages.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，我们必须添加一个额外的注释，称为**模板帖子类型**，列出支持的帖子类型。根据我们的注释，此模板将适用于正常博客文章和产品自定义帖子类型。将模板分配给帖子的过程与我们用于页面的过程相同。
- en: Custom post hierarchy
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义帖子层级
- en: This is the path for custom post types that are used in the website, with `single.php`
    being the default template. Usually, custom post type designs differ considerably
    from the blog post designs, and hence the use of the dynamic `single-$post_type.php`
    template is almost guaranteed. We have to create a new template inside the root
    folder of the theme and name it with the slug post type. These templates are frequently
    used in premium themes and hence you can look for templates with the **single-**
    preference.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是网站中使用的自定义帖子类型的路径，其中`single.php`是默认模板。通常，自定义帖子类型的设计与博客文章的设计有很大差异，因此几乎可以保证使用动态的`single-$post_type.php`模板。我们必须在主题的根目录中创建一个新的模板，并以帖子类型的slug命名。这些模板在高级主题中经常被使用，因此您可以寻找带有**single-**偏好的模板。
- en: 'Apart from the main template, we also get the two preceding templates by using
    the slug of the post and using post templates, as we discussed in the previous
    section. The use of `single-$post_type-$slug.php` will not be essential as the
    same functionality can be achieved by using the `$custom.php` template with additional
    benefits. Let''s take a look at the following screenshot so that we can understand
    the difference between a normal `single.php` template and a custom designed `single-$post_type.php`
    template:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主模板外，我们还可以通过使用帖子的slug和帖子模板，如前节所述，获得两个前置模板。使用`single-$post_type-$slug.php`将不再是必需的，因为可以通过使用带有额外优点的`$custom.php`模板来实现相同的功能。让我们看一下下面的截图，以便我们了解正常`single.php`模板和自定义设计的`single-$post_type.php`模板之间的区别：
- en: '![](img/b656e788-9104-46e6-ab0f-c49c74ac94e6.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b656e788-9104-46e6-ab0f-c49c74ac94e6.png)'
- en: The screen on the left displays a normal blog post using the `single.php` design.
    The screen on the right contains advanced designs for the `Vehicle` custom post
    type with the use of the `single-vehicle.php` template. You can clearly see the
    difference in designs and the need for the `single-$post_type.php` template in
    custom post types. In WordPress site development, you will need the skills to
    build advanced templates for custom post types and hence it's very important to
    know these additional templates and their code.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的屏幕显示了一个使用`single.php`设计的正常博客文章。右侧的屏幕包含使用`single-vehicle.php`模板的`Vehicle`自定义帖子类型的先进设计。您可以清楚地看到设计上的差异以及自定义帖子类型中`single-$post_type.php`模板的需求。在WordPress网站开发中，您将需要构建自定义帖子类型的先进模板的技能，因此了解这些额外的模板及其代码非常重要。
- en: Other Pages in the template hierarchy
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板层级中的其他页面
- en: 'So far, we have discussed the hierarchy of the two main starting template types
    of WordPress. There are four other page types with limited depth that play a lesser
    role than the archive and singular page types. Let''s take a look at the following
    diagram to understand the hierarchy of these four types:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了WordPress两个主要起始模板类型的层级。还有四种其他页面类型，深度有限，其作用不如存档和单页类型重要。让我们看一下下面的图表，以了解这些四种类型的层级：
- en: '![](img/bc815581-1ec6-4f3b-80be-f814af23bc0e.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc815581-1ec6-4f3b-80be-f814af23bc0e.png)'
- en: Site Front Page template path
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站首页模板路径
- en: In basic themes, the front page of the site is handled by `index.php`, where
    all of the blog posts are shown as a list. Unless your primary site functionality
    is blogging, it will require a separate template for the front page's design.
    According to the template hierarchy, `home.php` can be used to design the front
    page of the site. This template is available in most premium themes and contains
    very advanced designs. There is also an optional template in this path called
    `front-page.php`. However, it's not available in most themes and hence you may
    not have to use it in common development tasks.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本主题中，网站的首页由`index.php`处理，其中所有博客文章都显示为列表。除非您的网站主要功能是博客，否则将需要一个单独的模板来设计首页的设计。根据模板层级，`home.php`可以用来设计网站的首页。这个模板在大多数高级主题中都是可用的，并包含非常先进的设计。在这个路径中还有一个可选的模板，称为`front-page.php`。然而，它在大多数主题中不可用，因此在常规开发任务中可能不需要使用它。
- en: 'Apart from using either the `home.php` or `front-page.php` templates, we can
    also use any default page as the homepage of our site. This is handled by a setting
    in the WordPress backend. We can use WordPress'' Settings | Reading | Your homepage
    displays setting to change the front page, as shown in the following screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`home.php`或`front-page.php`模板之外，我们还可以使用任何默认页面作为我们网站的首页。这由WordPress后端的一个设置处理。我们可以使用WordPress的“设置
    | 阅读设置 | 您的首页显示设置”来更改首页，如下面的截图所示：
- en: '**![](img/88cdb2b3-3b12-444d-b844-9d13af45af67.png)**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/88cdb2b3-3b12-444d-b844-9d13af45af67.png)**'
- en: By default, this setting will use the Your latest posts option. It's a common
    technique to change this setting to A static page and use custom pages.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此设置将使用“您最新的文章”选项。将此设置更改为“静态页面”并使用自定义页面是一种常见的技术。
- en: Blog Posts Index Page template path
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 博客文章索引页面模板路径
- en: This path defines the template used for the main blog page, where a list of
    normal posts is displayed. By default, this is handled by the `index.php` file
    and loads as the home page of the site. We have the ability to create any page
    and use it as the blog post index by using the setting explained in the preceding
    section. This template path is straightforward and generally doesn't change based
    on different scenarios.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此路径定义了用于主博客页面的模板，其中显示一系列常规文章。默认情况下，这由`index.php`文件处理，并作为网站的首页加载。我们可以创建任何页面并将其用作博客文章索引，通过使用前述章节中解释的设置。此模板路径简单直接，通常不会根据不同场景而改变。
- en: Error 404 Page template path
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误 404 页面模板路径
- en: This path is used when WordPress is unable to find a suitable template within
    the template hierarchy or within any template modification hooks. Most themes
    have a built-in 404 template containing a `content not found` message. It's essential
    to have this template in a theme in order to help the user with a meaningful message
    and provide links to other important content on your site.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当WordPress无法在模板层次结构或任何模板修改钩子中找到合适的模板时，将使用此路径。大多数主题都内置了一个包含“内容未找到”信息的404模板。在主题中拥有此模板对于帮助用户以有意义的信息和提供到网站上其他重要内容的链接至关重要。
- en: Search Result Page template path
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索结果页面模板路径
- en: WordPress has a built-in search feature, and the search results usually contain
    posts and pages. These results are similar to the archive page, with searched
    text on the top. By default, this path is handled by the `index.php` file. However,
    there can be scenarios where the search results page needs to differ from the
    normal archive page. The need for highlighting search tem in content, are some
    of the instances where we need a separate design. In such scenarios, we can use
    the `search.php` file, which includes the same content as the `index.php` file,
    and modify it according to the client's custom requirements.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress具有内置的搜索功能，搜索结果通常包含文章和页面。这些结果类似于存档页面，顶部有搜索文本。默认情况下，此路径由`index.php`文件处理。然而，可能存在搜索结果页面需要与常规存档页面不同的场景。在内容中突出显示搜索项的需求，是我们需要单独设计的实例之一。在这种情况下，我们可以使用包含与`index.php`文件相同内容的`search.php`文件，并根据客户的定制要求进行修改。
- en: In this section, we had an extensive walkthrough of the complete WordPress theme
    template hierarchy. You might be exhausted by all of the theoretical aspects of
    templates. However, knowing about these templates in depth is crucial for building
    advanced site designs as well as customizing existing sites, where you will need
    to work with new themes all the time.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们对完整的WordPress主题模板层次结构进行了详细的介绍。您可能已经对模板的所有理论方面感到疲惫。然而，深入了解这些模板对于构建高级网站设计和定制现有网站至关重要，在这些网站中，您将需要不断与新的主题合作。
- en: Conditionally changing template design and content
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件性更改模板设计和内容
- en: The main purpose of the theme is to provide consistent layouts for your site.
    We can only use one theme, as mixing different layouts from different themes creates
    contrasting designs, confusing the end user. Instead, we can conditionally change
    the designs within the theme without losing consistency.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 主题的主要目的是为您的网站提供一致的布局。我们只能使用一个主题，因为混合来自不同主题的不同布局会创建对比鲜明的设计，使最终用户感到困惑。相反，我们可以在主题内部条件性地更改设计，而不会失去一致性。
- en: Now, you may be wondering, what are consistent layouts? Basically, the elements
    in the design should be similar across all screens. Let's say we have a form in
    a page built with a UI component library. Then, it should be stated that forms
    on other parts of your site should use the same UI component library. If you use
    different UI elements in other parts of the site, users may feel confused. Similarly,
    every other element in the design needs to be consistent. However, this doesn't
    mean that we can't change the design in different parts of the site. More on this
    will be discussed in the following sections.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道，什么是统一的布局？基本上，设计中的元素应该在所有屏幕上保持相似。假设我们在页面上使用UI组件库构建了一个表单。那么，应该声明的是，网站上其他部分的表单应该使用相同的UI组件库。如果你在其他部分使用不同的UI元素，用户可能会感到困惑。同样，设计中的每个其他元素都需要保持一致性。然而，这并不意味着我们不能在不同部分的网站上改变设计。更多关于这一点将在接下来的章节中讨论。
- en: What is conditional template design?
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是条件模板设计？
- en: 'In site development, we may have to change the design and content in different
    sections in order to do the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站开发中，我们可能需要改变不同部分的设计和内容，以便进行以下操作：
- en: '**Match user preferences**: Many modern sites allow users to choose content
    preferences. Therefore, the user has various options, such as choosing which components
    are displayed on any given screen, filtering content from certain categories,
    and even the layout and color scheme.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匹配用户偏好**：许多现代网站允许用户选择内容偏好。因此，用户有多种选择，例如选择在任何给定屏幕上显示哪些组件，从某些类别过滤内容，甚至布局和配色方案。'
- en: '**Display only relevant content for a post/page**: Usually, we have a sidebar
    filled with many widgets. In some scenarios, this content may not be directly
    related to the main content. Let''s assume that we have normal articles and another
    post type called books. In books, we may have a sidebar widget for displaying
    information such as ratings, ISBN, number of pages, and paper type. This is not
    relevant to normal articles and hence needs to be removed conditionally.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅显示帖子/页面的相关内容**：通常，我们有一个侧边栏，里面充满了许多小工具。在某些情况下，这些内容可能与主要内容没有直接关系。假设我们有普通文章和另一种称为书籍的帖子类型。在书籍中，我们可能有一个侧边栏小工具来显示诸如评分、ISBN、页数和纸张类型等信息。这与普通文章不相关，因此需要有条件地移除。'
- en: '**Highlight different sections in various content types**: Different content
    types require content-specific layouts. Let''s assume we have normal articles
    and electronic products on our site. For normal articles, we display the title,
    image, and content. This style is not going to work for products as we need a
    way to attract customers. Therefore, we need to highlight product features by
    using image galleries, image sliders, or expandable tabs. All in all, we need
    to conditionally change the layout to highlight content based on the content type.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突出显示不同内容类型的各个部分**：不同的内容类型需要特定的布局。假设我们网站上既有普通文章也有电子产品。对于普通文章，我们显示标题、图片和内容。这种风格对于产品来说是不适用的，因为我们需要一种吸引顾客的方式。因此，我们需要通过使用图片画廊、图片滑块或可展开的标签来突出产品特性。总的来说，我们需要根据内容类型有条件地改变布局以突出内容。'
- en: We already discussed the WordPress template hierarchy. The built-in template
    hierarchy provides many template types for conditional changes. It's important
    to know the possibilities for template and content changes without requiring major
    effort as a developer. We can apply conditional changes from basic styles to headers,
    footers, sidebars, menus, and even entire templates.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了WordPress模板层次结构。内置的模板层次结构提供了许多模板类型，以便进行有条件的变化。了解模板和内容变化的可能，而不需要作为开发者付出太多努力，这是很重要的。我们可以从基本样式到页眉、页脚、侧边栏、菜单，甚至整个模板应用有条件的变化。
- en: There are several ways to conditionally change the design based on the type
    of change. In this section, we are going to discuss two simple techniques.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 根据变化类型，有几种方式可以有条件地改变设计。在本节中，我们将讨论两种简单的技术。
- en: Adding conditions to theme files
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主题文件中添加条件
- en: This is the simplest way to start as a developer. In this technique, we modify
    the existing theme files, add the conditions, and load different elements and
    content within those conditions. We already discussed the disadvantages of changing
    core theme files. Here, we need to implement this technique within the child theme.
    You can implement these techniques in the Twenty Seventeen child theme we created
    earlier in this chapter.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的作为开发者开始的方式。在这种技术中，我们修改现有的主题文件，添加条件，并在这些条件内加载不同的元素和内容。我们已经讨论了更改核心主题文件的缺点。在这里，我们需要在子主题中实现这项技术。你可以在本章前面创建的Twenty
    Seventeen子主题中实现这些技术。
- en: 'Let''s understand this technique by creating conditional headers for our site.
    Usually, pages on a WordPress site are static and provide information about the
    site. About us, services, and contact are some of the common uses of such pages.
    On the other hand, posts or custom post type pages are highly dynamic and filled
    with various pieces of content such as promotions, advertisements, social sharing
    options, and so on. So, there are scenarios where we need different headers for
    posts and pages. Let''s keep the header for pages as it is for now and modify
    the header for posts with advertisements on top. Consider the following screenshot
    for the default header section of the **Twenty Seventeen** theme:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过为我们的网站创建有条件的页眉来理解这项技术。通常，WordPress网站上的页面是静态的，提供有关网站的信息。关于我们、服务和联系是一些常见的页面用途。另一方面，帖子或自定义帖子类型页面高度动态，包含各种内容，如促销、广告、社交分享选项等。因此，存在需要为帖子页面使用不同页眉的场景。现在让我们保持页眉不变，并修改带有顶部广告的帖子页眉。以下是对**Twenty
    Seventeen**主题默认页眉部分的截图：
- en: '![](img/bd0da049-2250-4fa3-8530-19ee5e9bd743.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bd0da049-2250-4fa3-8530-19ee5e9bd743.png)'
- en: 'First, you need to copy the `header.php` file of **Twenty Seventeen** to the
    root directory of the child theme. Next, you can define the conditions to change
    the header section for posts. The following code adds an advertisement bar to
    the top of the header section for the normal post template:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要将**Twenty Seventeen**的`header.php`文件复制到子主题的根目录。接下来，你可以定义条件来更改帖子页眉部分。以下代码为正常帖子模板的页眉部分添加了一个广告栏：
- en: '[PRE17]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code should be added right after the `<header>` tag of the `header.php`
    file in the child theme. Now, you can view a single post and the header will contain
    the dynamic advertisement bar, as shown in the following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码应在子主题中的`header.php`文件的`<header>`标签之后添加。现在，你可以查看单个帖子，页眉将包含动态广告栏，如下面的截图所示：
- en: '![](img/43215c28-cd5e-4274-ac34-053b51742bdb.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43215c28-cd5e-4274-ac34-053b51742bdb.png)'
- en: This technique can be used effectively to conditionally change templates in
    scenarios where you have a limited number of different conditions. However, it's
    not feasible for handling complex conditions as it complicates the template file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术可以有效地用于在只有有限不同条件的情况下有条件地更改模板。然而，由于它会复杂化模板文件，因此不适合处理复杂条件。
- en: 'We can use the same process to conditionally change other important parts of
    the site. Let''s a take quick look at the steps involved in changing each of those
    parts:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的过程有条件地更改网站的其他重要部分。让我们快速看一下更改这些部分所涉及的步骤：
- en: '**Footer**: We need to copy the `footer.php` file from the parent theme to
    the child theme. Then, we follow the same process for adding/removing content
    based on the necessary conditions.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页脚**：我们需要将父主题中的`footer.php`文件复制到子主题中。然后，我们根据必要条件遵循相同的流程来添加/删除内容。'
- en: '**Sidebar**: We need to copy the `sidebar.php` file from the parent theme to
    the child theme. Then, we follow the same process for loading different sidebars
    or adding static content to the existing sidebar template based on the necessary
    conditions.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏**：我们需要将父主题中的`sidebar.php`文件复制到子主题中。然后，我们根据必要条件遵循相同的流程来加载不同的侧边栏或向现有的侧边栏模板中添加静态内容。'
- en: '**Menu**: Usually, the menu is generated by the `wp_nav_menu` function, which
    is located in the `header.php` file of the theme. In this case, we are using the
    **Twenty Seventeen** theme and hence you can find this function inside the `template-parts/navigation/navigation-top.php`
    file. You can copy this template and modify it to load different menus based on
    the necessary conditions.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单**：通常，菜单是通过 `wp_nav_menu` 函数生成的，该函数位于主题的 `header.php` 文件中。在这种情况下，我们使用的是
    **Twenty Seventeen** 主题，因此你可以在 `template-parts/navigation/navigation-top.php`
    文件中找到这个函数。你可以复制这个模板并修改它，以便根据必要的条件加载不同的菜单。'
- en: In this section, we looked at the process of conditionally changing the header
    of the site. You can extend this technique to make major design changes in headers,
    as well as use other conditions such as front page, category pages, specific pages,
    and so on. You can find a list of available template tags for adding various types
    of conditions at [https://codex.wordpress.org/Template:Conditional_Tags](https://codex.wordpress.org/Template:Conditional_Tags).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了根据条件更改网站标题的过程。你可以扩展这项技术，在标题中进行重大设计更改，以及使用其他条件，如主页、分类页面、特定页面等。你可以在
    [https://codex.wordpress.org/Template:Conditional_Tags](https://codex.wordpress.org/Template:Conditional_Tags)
    找到用于添加各种类型条件的可用模板标签列表。
- en: Conditionally loading template files
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件加载模板文件
- en: 'In this technique, we use existing WordPress filters to dynamically change
    the template based on custom conditions. WordPress executes a filter called `template_include`,
    just before loading the default template, based on the hierarchy we discussed
    earlier. In the template hierarchy section, we changed the template by using the
    preceding templates in a given path. The use of this filter allows us to change
    any template in any given path. Let''s take a look the following code to understand
    the implementation of this technique:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项技术中，我们使用现有的 WordPress 过滤器根据自定义条件动态更改模板。WordPress 在加载默认模板之前执行一个名为 `template_include`
    的过滤器，基于我们之前讨论的层次结构。在模板层次结构部分，我们通过使用给定路径中的前一个模板来更改模板。使用此过滤器允许我们在任何给定路径中更改任何模板。让我们看一下以下代码，以了解这项技术的实现：
- en: '[PRE18]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The location of the default template is passed as the parameter to this filter.
    In this scenario, we check whether the page with the name `portfolio` is loaded.
    If the condition is matched, we return a dynamic new template instead of the default
    template. The preceding code will look for the template in the root folder of
    the theme. The advantage of this method is the ability to use different conditions
    on different template paths at once and load the necessary templates. We can also
    use this technique to load dynamic templates based on conditions such as URL parameters,
    the logged in user or user role, and the referrer of a request.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 默认模板的位置作为参数传递给此过滤器。在这种情况下，我们检查名为 `portfolio` 的页面是否被加载。如果条件匹配，我们将返回一个动态的新模板而不是默认模板。前面的代码将在主题的根目录中查找模板。这种方法的优势在于能够同时在不同模板路径上使用不同的条件并加载必要的模板。我们还可以使用这项技术根据条件如
    URL 参数、登录用户或用户角色以及请求的引用来加载动态模板。
- en: As a developer, you must be aware of this technique. There may be sites that
    use this technique in the `functions.php` file of the theme, as well as with custom
    plugins. If you are not aware of this technique, you will have to waste considerable
    time going through the template hierarchy to find out the template that is loaded.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，你必须了解这项技术。可能有网站在主题的 `functions.php` 文件中以及使用自定义插件时使用这项技术。如果你不了解这项技术，你将不得不浪费大量时间浏览模板层次结构以找出加载的模板。
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The frontend of an application is the main interaction point for users and hence
    the possibility of requesting frontend changes is relatively high. Therefore,
    it's important to use the existing features of a theme to make templates as flexible
    as possible. In this chapter, we looked at the importance of a theme and its components
    in development. Then, we started extending existing themes with the use of child
    themes, actions, and filters. Next, we had an in-depth overview of the theme template
    hierarchy in order to build new themes as well as customize existing themes in
    a flexible way. Finally, we looked at the techniques for conditionally changing
    the design to cater for advanced site requirements.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的前端是用户的主要交互点，因此请求前端更改的可能性相对较高。因此，使用主题的现有功能来使模板尽可能灵活是非常重要的。在本章中，我们探讨了主题及其组件在开发中的重要性。然后，我们开始使用子主题、动作和过滤器扩展现有主题。接下来，我们深入概述了主题模板层次结构，以便以灵活的方式构建新主题以及自定义现有主题。最后，我们探讨了根据高级站点需求有条件地更改设计的技巧。
- en: In [Chapter 4](6bc0e5d5-b12d-4710-ac11-a600af054efa.xhtml), *Building Custom
    Modules with Plugin Development*, we will be looking at the process of building
    different types of WordPress plugins and adding the features, beyond the functionality
    of a them.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](6bc0e5d5-b12d-4710-ac11-a600af054efa.xhtml)《使用插件开发构建自定义模块》中，我们将探讨构建不同类型WordPress插件的过程，以及添加超出主题功能之外的功能。
