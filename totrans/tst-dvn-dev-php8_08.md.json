["```php\ncurl -Lo phptdd.zip \"https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/raw/main/Chapter%208/base.zip\" && unzip -o phptdd.zip && cd base && ./demoSetup.sh\n```", "```php\ndocker ps\n```", "```php\ndocker-compose build && docker-compose up -d\ndocker exec -it docker-server-web-1 /bin/bash\n```", "```php\n/var/www/html/symfony# ./setup.sh\n/var/www/html/behat# ./setup.sh \n```", "```php\nFeature: Clerk creates new toy car record\n  In order to have a collection of toy car model records\n  As an Inventory Clerk\n  I need to be able to create a single record\n  Scenario: Create new record\n    Given I am in the inventory system page\n    When I submit the form with correct details\n    Then I should see a success message\n```", "```php\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext\n        - HomeContext\n    suite_a:\n      contexts:\n        - InventoryClerkRegistrationContext\n    suite_create:\n      contexts:\n        - CreateToyCarRecordContext\n```", "```php\n    /var/www/html/behat# ./vendor/bin/behat --init\n    ```", "```php\n    /var/www/html/behat# ./vendor/bin/behat features/\n    ```", "```php\n     create_toy_car_record.feature --append-snippets –\n    ```", "```php\n     suite=suite_create\n    ```", "```php\n    /var/www/html/behat# ./vendor/bin/behat features/\n    ```", "```php\n    create_toy_car_record.feature --suite=suite_create\n    ```", "```php\n<?php\nnamespace App\\Tests\\Functional\\Controller;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nclass InventoryControllerTest extends WebTestCase\n{\n    public function testCanLoadIndex(): void\n    {\n        $client     = static::createClient();\n        $client->request(‘GET’, ‘/inventory-admin’);\n        $this->assertResponseIsSuccessful();\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./vendor/bin/phpunit --filter \n    ```", "```php\n     InventoryAdminControllerTest\n    ```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Repository;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\\n    KernelTestCase;\nclass ToyCarProcessorTest extends KernelTestCase\n{\n    public function testCanCreate()\n    {\n        $this->fail(“--- RED ---”);\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./vendor/bin/phpunit --filter ToyCarRepositoryTest\n    ```", "```php\n<?php\nnamespace App\\Model;\nclass ToyCar\n{\n    /**\n     * @var int\n     */\n    private $id;\n    /**\n     * @var string\n     */\n    private $name;\n    /**\n     * @var CarManufacturer\n     */\n    private $manufacturer;\n    /**\n     * @var ToyColor\n     */\n    private $colour;\n    /**\n     * @var int\n     */\n    private $year; \n}\n```", "```php\n<?php\nnamespace App\\Model;\nclass ToyColor\n{\n    /**\n     * @var int\n     */\n    private $id;\n    /**\n     * @var string\n     */\n    private $name; \n}\n```", "```php\n<?php\nnamespace App\\Model;\nclass CarManufacturer\n{\n    /**\n     * @var int\n     */\n    private $id;\n    /**\n     * @var string\n     */\n    private $name; \n}\n```", "```php\n<?php\nnamespace App\\DAL\\Writer;\ninterface WriterInterface\n{\n    /**\n     * @param $model\n     * @return bool\n     */\n    public function write($model): bool;\n}\n```", "```php\n<?php\nnamespace App\\Processor;\nuse App\\DAL\\Writer\\WriterInterface;\nuse App\\Model\\ToyCar;\nuse App\\Validator\\ToyCarValidationException;\nclass ToyCarProcessor\n{\n    /**\n     * @var WriterInterface\n     */\n    private $dataWriter;\n    /**\n     * @param ToyCar $toyCar\n     * @return bool\n     * @throws ToyCarValidationException\n     */\n    public function create(ToyCar $toyCar)\n    {\n        // Do some validation here\n        $this->validate($toyCar);\n        // Write the data\n        $result = $this->getDataWriter()->\n            write($toyCar);\n        // Do other stuff.\n        return $result;\n    }\n    /**\n     * @param ToyCar $toyCar\n     * @throws ToyCarValidationException\n     */\n    public function validate(ToyCar $toyCar)\n    {\n        if (is_null($toyCar->getName())) {\n            throw new ToyCarValidationException\n                (‘Invalid Toy Car Data’);\n        }\n    }\n    /**\n     * @return WriterInterface\n     */\n    public function getDataWriter(): WriterInterface\n    {\n        return $this->dataWriter;\n    }\n    /**\n     * @param WriterInterface $dataWriter\n     */\n    public function setDataWriter(WriterInterface \n        $dataWriter): void\n    {\n        $this->dataWriter = $dataWriter;\n    }\n}\n```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Repository;\nuse App\\DAL\\Writer\\WriterInterface;\nuse App\\Model\\CarManufacturer;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ToyColor;\nuse App\\Processor\\ToyCarProcessor;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\\n    KernelTestCase;\nclass ToyCarProcessorTest extends KernelTestCase\n{\n    /**\n     * @param ToyCar $toyCarModel\n     * @throws \\App\\Validator\n         \\ToyCarValidationException\n     * @dataProvider provideToyCarModel\n     */\n    public function testCanCreate\n       (ToyCar $toyCarModel): void\n    {\n        // Mock: Data writer\n        $toyWriterStub = $this->createMock\n            (WriterInterface::class);\n        $toyWriterStub\n            ->method(‘write’)\n            ->willReturn(true);\n        // Processor Class\n        $processor = new ToyCarProcessor();\n        $processor->setDataWriter($toyWriterStub);\n        // Execute\n        $result = $processor->create($toyCarModel);\n        $this->assertTrue($result);\n    }\n    public function provideToyCarModel(): array\n    {\n        // Toy Car Color\n        $toyColor = new ToyColor();\n        $toyColor->setName(‘Black’);\n        // Car Manufacturer\n        $carManufacturer = new CarManufacturer();\n        $carManufacturer->setName(‘Ford’);\n        // Toy Car\n        $toyCarModel = new ToyCar();\n        $toyCarModel->setName(‘Mustang’);\n        $toyCarModel->setColour($toyColor);\n        $toyCarModel->setManufacturer\n            ($carManufacturer);\n        $toyCarModel->setYear(1968);\n        return [\n            [$toyCarModel],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./vendor/bin/phpunit --filter ToyCarProcessorTest\n    ```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Repository;\nuse App\\DAL\\Writer\\WriterInterface;\nuse App\\Model\\CarManufacturer;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ToyColor;\nuse App\\Processor\\ToyCarCreator;\nuse App\\Validator\\ValidatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nclass ToyCarCreatorTest extends KernelTestCase\n{\n    /**\n     * @param ToyCar $toyCarModel\n     * @throws \\App\\Validator\n         \\ToyCarValidationException\n     * @dataProvider provideToyCarModel\n     */\n    public function testCanCreate\n        (ToyCar $toyCarModel): void\n    {\n        // Mock 1: Validator\n        $validatorStub = $this->createMock\n            (ValidatorInterface::class);\n        $validatorStub\n            ->method(‘validate’)\n            ->willReturn(true);\n        // Mock 2: Data writer\n        $toyWriterStub = $this->createMock\n            (WriterInterface::class);\n        $toyWriterStub\n            ->method(‘write’)\n            ->willReturn(true);\n        // Processor Class\n        $processor = new ToyCarCreator();\n        $processor->setValidator($validatorStub);\n        $processor->setDataWriter($toyWriterStub);\n        // Execute\n        $result = $processor->create($toyCarModel);\n        $this->assertTrue($result);\n    }\n    public function provideToyCarModel(): array\n    {\n        // Toy Car Color\n        $toyColor = new ToyColor();\n        $toyColor->setName(‘Black’);\n        // Car Manufacturer\n        $carManufacturer = new CarManufacturer();\n        $carManufacturer->setName(‘Ford’);\n        // Toy Car\n        $toyCarModel = new ToyCar();\n        $toyCarModel->setName(‘Mustang’);\n        $toyCarModel->setColour($toyColor);\n        $toyCarModel->setManufacturer\n            ($carManufacturer);\n        $toyCarModel->setYear(1968);\n        return [\n            [$toyCarModel],\n        ];\n    }\n}\n```", "```php\n<?php\nnamespace App\\Validator;\ninterface ValidatorInterface\n{\n    /**\n     * @param $input\n     * @return bool\n     * @throws ToyCarValidationException\n     */\n    public function validate($input): bool;\n}\n```", "```php\n    <?php\n    ```", "```php\n    namespace App\\Processor;\n    ```", "```php\n    use App\\DAL\\Writer\\WriterInterface;\n    ```", "```php\n    use App\\Model\\ToyCar;\n    ```", "```php\n    use App\\Validator\\ToyCarValidationException;\n    ```", "```php\n    use App\\Validator\\ValidatorInterface;\n    ```", "```php\n    class ToyCarCreator\n    ```", "```php\n    {\n    ```", "```php\n        /**\n    ```", "```php\n         * @var ValidatorInterface\n    ```", "```php\n         */\n    ```", "```php\n        private $validator;\n    ```", "```php\n        /**\n    ```", "```php\n         * @var WriterInterface\n    ```", "```php\n         */\n    ```", "```php\n        private $dataWriter;\n    ```", "```php\n        /**\n    ```", "```php\n         * @param ToyCar $toyCar\n    ```", "```php\n         * @return bool\n    ```", "```php\n         * @throws ToyCarValidationException\n    ```", "```php\n         */\n    ```", "```php\n        public function create(ToyCar $toyCar): bool\n    ```", "```php\n        {\n    ```", "```php\n            // Do some validation here and so on...\n    ```", "```php\n            $this->getValidator()->validate($toyCar);\n    ```", "```php\n            // Write the data\n    ```", "```php\n            $result = $this->getDataWriter()->write\n    ```", "```php\n                ($toyCar);\n    ```", "```php\n            // Do other stuff.\n    ```", "```php\n            return $result;\n    ```", "```php\n        }\n    ```", "```php\n    }\n    ```", "```php\n    /var/www/html/symfony# ./vendor/bin/phpunit --filter ToyCarCreatorTest\n    ```", "```php\n<?php\nnamespace App\\Tests\\Unit\\Validator;\nuse App\\Model\\CarManufacturer;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ToyColor;\nuse App\\Validator\\ToyCarValidator;\nuse PHPUnit\\Framework\\TestCase;\nclass ToyCarValidatorTest extends TestCase\n{\n    /**\n     * @param ToyCar $toyCar\n     * @param bool $expected\n     * @dataProvider provideToyCarModel\n     */\n    public function testCanValidate(ToyCar $toyCar, \n        bool $expected): void\n    {\n        $validator  = new ToyCarValidator();\n        $result     = $validator->validate($toyCar);\n        $this->assertEquals($expected, $result);\n    }\n    public function provideToyCarModel(): array\n    {\n        // Toy Car Color\n        $toyColor = new ToyColor();\n        $toyColor->setName(‘White’);\n        // Car Manufacturer\n        $carManufacturer = new CarManufacturer();\n        $carManufacturer->setName(‘Williams’);\n        // Toy Car\n        $toyCarModel = new ToyCar();\n        $toyCarModel->setName(‘’); // Should fail.\n        $toyCarModel->setColour($toyColor);\n        $toyCarModel->setManufacturer\n            ($carManufacturer);\n        $toyCarModel->setYear(2004);\n        return [\n            [$toyCarModel, false],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./vendor/bin/phpunit --testsuite=Unit --filter ToyCarValidatorTest \n    ```", "```php\n<?php\nnamespace App\\Validator;\nuse App\\Model\\ToyCar;\nclass ToyCarValidator\n{\n    public function validate(ToyCar $toyCar): bool\n    {\n        if (!$toyCar->getName()) {\n            return false;\n        }\n        return true;\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter ToyCarValidatorTest\n    ```", "```php\n<?php\nnamespace App\\Validator;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ValidationModel;\ninterface ToyCarValidatorInterface\n{\n    public function validate(ToyCar $toyCar): \n        ValidationModel;\n}\n```", "```php\n<?php\nnamespace App\\Model;\nclass ValidationModel\n{\n    /**\n     * @var bool\n     */\n    private $valid = false;\n    /**\n     * @var array\n     */\n    private $report = [];\n}\n```", "```php\n<?php\nnamespace App\\Tests\\Unit\\Validator;\nuse PHPUnit\\Framework\\TestCase;\nuse App\\Validator\\YearValidator;\nclass YearValidatorTest extends TestCase\n{\n    /**\n     * @param $data\n     * @param $expected\n     * @dataProvider provideYear\n     */\n    public function testCanValidateYear(int $year, \n        bool $expected): void\n    {\n        $validator  = new YearValidator();\n        $isValid    = $validator->validate($year);\n        $this->assertEquals($expected, $isValid);\n    }\n    /**\n     * @return array\n     */\n    public function provideYear(): array\n    {\n        return [\n            [1,     false],\n            [2005,  true],\n            [1955,  true],\n            [312,   false],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter YearValidatorTest --debug\n    ```", "```php\n<?php\nnamespace App\\Validator;\nclass YearValidator implements ValidatorInterface\n{\n    /**\n     * @param $input\n     * @return bool\n     */\n    public function validate($input): bool\n    {\n        if (preg_match(“/^(\\d{4})$/”, $input, \n            $matches)) {\n            return true;\n        }\n        return false;\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter YearValidatorTest --debug\n    ```", "```php\n<?php\nnamespace App\\Tests\\Unit\\Validator;\nuse App\\Validator\\NameValidator;\nuse PHPUnit\\Framework\\TestCase;\nclass NameValidatorTest extends TestCase\n{\n    /**\n     * @param $data\n     * @param $expected\n     * @dataProvider provideNames\n     */\n    public function testCanValidateName(string $name, \n        bool $expected): void\n    {\n        $validator  = new NameValidator();\n        $isValid    = $validator->validate($name);\n        $this->assertEquals($expected, $isValid);\n    }\n    /**\n     * @return array\n     */\n    public function provideNames(): array\n    {\n        return [\n            [‘’,            false],\n            [‘$50’,         false],\n            [‘Mercedes’,    true],\n            [‘RedBull’,     true],\n            [‘Williams’,    true],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter NameValidatorTest\n    ```", "```php\n<?php\nnamespace App\\Validator;\nclass NameValidator implements ValidatorInterface\n{\n    public function validate($input): bool\n    {\n        if (preg_match(“/^([a-zA-Z’ ]+)$/”, $input)) {\n            return true;\n        }\n        return false;\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter NameValidatorTest\n    ```", "```php\n<?php\nnamespace App\\Validator;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ValidationModel as ValidationResult;\nclass ToyCarValidator implements \n    ToyCarValidatorInterface\n{\n    /**\n     * @var array\n     */\n    private $validators = [];\n    public function __construct()\n    {\n        $this->setValidators([\n            ‘year’  => new YearValidator(),\n            ‘name’  => new NameValidator(),\n        ]);\n    }\n    /**\n     * @param ToyCar $toyCar\n     * @return ValidationResult\n     */\n    public function validate(ToyCar $toyCar\n        ValidationResult\n    {\n        $result     = new ValidationResult();\n        $allValid   = true;\n        foreach ($this->getValidators() as $key => \n            $validator) {\n            $accessor   = ‘get’ . ucfirst(strtolower\n                ($key));\n            $value      = $toyCar->$accessor();\n            $isValid    = false;\n            try {\n                $isValid = $validator->validate\n                    ($value);\n                $results[$key][‘message’]   = ‘’;\n            } catch (ToyCarValidationException $ex) {\n                $results[$key][‘message’]   = $ex->\n                    getMessage();\n            } finally {\n                $results[$key][‘is_valid’]  = \n                     $isValid;\n            }\n            if (!$isValid) {\n                $allValid = false;\n            }\n        }\n        $result->setValid($allValid);\n        $result->setReport($results);\n        return $result;\n    }\n}\n```", "```php\n<?php\nnamespace App\\Tests\\Unit\\Validator;\nuse App\\Model\\CarManufacturer;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ToyColor;\nuse App\\Validator\\ToyCarValidator;\nuse PHPUnit\\Framework\\TestCase;\nclass ToyCarValidatorTest extends TestCase\n{\n    /**\n     * @param ToyCar $toyCar\n     * @param array $expected\n     * @dataProvider provideToyCarModel\n     */\n    public function testCanValidate(ToyCar $toyCar, \n        array $expected): void\n    {\n        $validator  = new ToyCarValidator();\n        $result     = $validator->validate($toyCar);\n        $this->assertEquals($expected[‘is_valid’], \n            $result->isValid());\n        $this->assertEquals($expected[‘name’], \n            $result->getReport()[‘name’][‘is_valid’]);\n        $this->assertEquals($expected[‘year’], \n            $result->getReport()[‘year’][‘is_valid’]);\n    }\n    public function provideToyCarModel(): array\n    {\n        // Toy Car Color\n        $toyColor = new ToyColor();\n        $toyColor->setName(‘White’);\n        // Car Manufacturer\n        $carManufacturer = new CarManufacturer();\n        $carManufacturer->setName(‘Williams’);\n        // Toy Car\n        $toyCarModel = new ToyCar();\n        $toyCarModel->setName(‘’); // Should fail.\n        $toyCarModel->setColour($toyColor);\n        $toyCarModel->setManufacturer\n            ($carManufacturer);\n        $toyCarModel->setYear(2004);\n        return [\n            [$toyCarModel, [‘is_valid’ => false, \n                ‘name’ => false, ‘year’ => true]],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter ToyCarValidatorTest\n    ```", "```php\n<?php\nnamespace App\\Tests\\Unit\\Validator;\nuse App\\Validator\\ToyCarTooOldException;\nuse PHPUnit\\Framework\\TestCase;\nuse App\\Validator\\YearValidator;\nclass YearValidatorTest extends TestCase\n{\n    /**\n     * @param $data\n     * @param $expected\n     * @dataProvider provideYear\n     */\n    public function testCanValidateYear(int $year, \n        bool $expected): void\n    {\n        $validator  = new YearValidator();\n        $isValid    = $validator->validate($year);\n        $this->assertEquals($expected, $isValid);\n    }\n    /**\n     * @return array\n     */\n    public function provideYear(): array\n    {\n        return [\n            [1,     false],\n            [2005,  true],\n            [1955,  true],\n            [312,   false],\n        ];\n    }\n    /**\n     * @param int $year\n     * @dataProvider provideOldYears\n     */\n    public function testCanRejectVeryOldCar(int \n        $year): void\n    {\n        $this->expectException\n            (ToyCarTooOldException::class);\n        $validator  = new YearValidator();\n        $validator->validate($year);\n    }\n    /**\n     * @return array\n     */\n    public function provideOldYears(): array\n    {\n        return [\n            [1944],\n            [1933],\n            [1922],\n            [1911],\n        ];\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter testCanRejectVeryOldCar\n    ```", "```php\n<?php\nnamespace App\\Validator;\nclass ToyCarTooOldException extends \\Exception\n{\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter testCanRejectVeryOldCar\n    ```", "```php\npublic function provideToyCarModel(): array\n{\n    // Toy Car Color\n    $toyColor = new ToyColor();\n    $toyColor->setName(‘White’);\n    // Car Manufacturer\n    $carManufacturer = new CarManufacturer();\n    $carManufacturer->setName(‘Williams’);\n    // Toy Car\n    $toyCarModel = new ToyCar();\n    $toyCarModel->setName(‘’); // Should fail.\n    $toyCarModel->setColour($toyColor);\n    $toyCarModel->setManufacturer($carManufacturer);\n    $toyCarModel->setYear(1935);\n    return [\n        [$toyCarModel, [‘is_valid’ => false, ‘name’ => \n            false, ‘year’ => false]],\n    ];\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --filter ToyCarValidatorTest \n    ```", "```php\n<?php\nnamespace App\\Validator;\nclass ToyCarTooOldException extends \n    ToyCarValidationException\n{\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --filter ToyCarValidatorTest\n    ```", "```php\n    /var/www/html/symfony# ./runDebug.sh --filter ToyCarValidatorTest\n    ```", "```php\n    /**\n    ```", "```php\n     * @param $data\n    ```", "```php\n     * @param $expected\n    ```", "```php\n     * @dataProvider provideLongNames\n    ```", "```php\n     */\n    ```", "```php\n    public function testCanValidateNameLength(string \n    ```", "```php\n        $name, bool $expected): void\n    ```", "```php\n    {\n    ```", "```php\n        $validator  = new NameValidator();\n    ```", "```php\n        $isValid    = $validator->validateLength($name);\n    ```", "```php\n        $this->assertEquals($expected, $isValid);\n    ```", "```php\n    }\n    ```", "```php\n    /**\n    ```", "```php\n     * @return array\n    ```", "```php\n     */\n    ```", "```php\n    public function provideLongNames(): array\n    ```", "```php\n    {\n    ```", "```php\n        return [\n    ```", "```php\n            [‘TheQuickBrownFoxJumpsOverTheLazyDog’, \n    ```", "```php\n                false],\n    ```", "```php\n        ];\n    ```", "```php\n    }\n    ```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter testCanValidateNameLength\n    ```", "```php\n<?php\nnamespace App\\Validator;\ninterface ValidatorInterface\n{\n    /**\n     * @param $input\n     * @return bool\n     * @throws ToyCarValidationException\n     */\n    public function validate($input): bool;\n    /**\n     * @param string $input\n     * @return bool\n     */\n    public function validateLength(string $input): \n        bool;\n}\n```", "```php\n<?php\nnamespace App\\Validator;\ninterface StringValidatorInterface\n{\n    /**\n     * @param string $input\n     * @return bool\n     */\n    public function validateLength(string $input): \n        bool;\n}\n```", "```php\n<?php\nnamespace App\\Validator;\nclass NameValidator implements ValidatorInterface, \n    StringValidatorInterface\n{\n    const MAX_LENGTH = 10;\n    /**\n     * @param $input\n     * @return bool\n     */\n    public function validate($input): bool\n    {\n        $isValid = false;\n        if (preg_match(“/^([a-zA-Z’ ]+)$/”, $input)) {\n            $isValid = true;\n        }\n        if ($isValid) {\n            $isValid = $this->validateLength($input);\n        }\n        return $isValid;\n    }\n    /**\n     * @param string $input\n     * @return bool\n     */\n    public function validateLength(string $input): \n        bool\n    {\n        if (strlen($input) > self::MAX_LENGTH) {\n            return false;\n        }\n        return true;\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter testCanValidateNameLength\n    ```", "```php\n/**\n * @param ToyCar $toyCar\n * @param array $expected\n * @dataProvider provideToyCarModel\n */\npublic function testCanValidate(ToyCar $toyCar, array \n    $expected): void\n{\n    $validators = [\n        ‘year’  => new YearValidator(),\n        ‘name’  => new NameValidator(),\n    ];\n    // Inject the validators\n    $validator = new ToyCarValidator();\n    $validator->setValidators($validators);\n    $result = $validator->validate($toyCar);\n    $this->assertEquals($expected[‘is_valid’], \n        $result->isValid());\n    $this->assertEquals($expected[‘name’], \n        $result->getReport()[‘name’][‘is_valid’]);\n    $this->assertEquals($expected[‘year’], \n        $result->getReport()[‘year’][‘is_valid’]);\n}\n```", "```php\n<?php\nnamespace App\\Validator;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ValidationModel as ValidationResult;\nclass ToyCarValidator implements \n    ToyCarValidatorInterface\n{\n    /**\n     * @var array\n     */\n    private $validators = [];\n    /**\n     * @param ToyCar $toyCar\n     * @return ValidationResult\n     */\n    public function validate(ToyCar $toyCar): \n        ValidationResult\n    {\n        $result     = new ValidationResult();\n        $allValid   = true;\n        $results    = [];\n        foreach ($this->getValidators() as $key => \n            $validator) {\n            $accessor   = ‘get’ . ucfirst(strtolower\n                ($key));\n            $value      = $toyCar->$accessor();\n            $isValid    = false;\n            try {\n                $isValid = $validator->validate\n                    ($value);\n                $results[$key][‘message’]   = ‘’;\n            } catch (ToyCarValidationException $ex) {\n                $results[$key][‘message’]   = \n                    $ex->getMessage();\n            } finally {\n                $results[$key][‘is_valid’]  = \n                    $isValid;\n            }\n            if (!$isValid) {\n                $allValid = false;\n            }\n        }\n        $result->setValid($allValid);\n        $result->setReport($results);\n        return $result;\n    }\n    /**\n     * @return array\n     */\n    public function getValidators(): array\n    {\n        return $this->validators;\n    }\n    /**\n     * @param array $validators\n     */\n    public function setValidators(array $validators): \n        void\n    {\n        $this->validators = $validators;\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite=Unit --filter testCanValidateNameLength\n    ```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Repository;\nuse App\\DAL\\Writer\\WriterInterface;\nuse App\\Model\\CarManufacturer;\nuse App\\Model\\ToyCar;\nuse App\\Model\\ToyColor;\nuse App\\Model\\ValidationModel;\nuse App\\Processor\\ToyCarCreator;\nuse App\\Validator\\ToyCarValidatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nclass ToyCarCreatorTest extends KernelTestCase\n{\n    /**\n     * @param ToyCar $toyCarModel\n     * @throws \\App\\Validator\n           \\ToyCarValidationException\n     * @dataProvider provideToyCarModel\n     */\n    public function testCanCreate(ToyCar \n        $toyCarModel): void\n    {\n        $validationResultStub = $this->createMock\n            (ValidationModel::class);\n        $validationResultStub\n            ->method(‘isValid’)\n            ->willReturn(true);\n        // Mock 1: Validator\n        $validatorStub = $this->createMock\n            (ToyCarValidatorInterface::class);\n        $validatorStub\n            ->method(‘validate’)\n            ->willReturn($validationResultStub);\n        // Mock 2: Data writer\n        $toyWriterStub = $this->createMock\n            (WriterInterface::class);\n        $toyWriterStub\n            ->method(‘write’)\n            ->willReturn(true);\n        // Processor Class\n        $processor = new ToyCarCreator($validatorStub, \n            $toyWriterStub);\n        // Execute\n        $result = $processor->create($toyCarModel);\n        $this->assertTrue($result);\n    }\n    public function provideToyCarModel(): array\n    {\n        // Toy Car Color\n        $toyColor = new ToyColor();\n        $toyColor->setName(‘Black’);\n        // Car Manufacturer\n        $carManufacturer = new CarManufacturer();\n        $carManufacturer->setName(‘Ford’);\n        // Toy Car\n        $toyCarModel = new ToyCar();\n        $toyCarModel->setName(‘Mustang’);\n        $toyCarModel->setColour($toyColor);\n        $toyCarModel->setManufacturer\n            ($carManufacturer);\n        $toyCarModel->setYear(1968);\n        return [\n            [$toyCarModel],\n        ];\n    }\n}\n```", "```php\n<?php\nnamespace App\\Processor;\nuse App\\DAL\\Writer\\WriterInterface;\nuse App\\Model\\ToyCar;\nuse App\\Validator\\ToyCarValidationException;\nuse App\\Validator\\ToyCarValidatorInterface;\nclass ToyCarCreator\n{\n    /**\n     * @var ToyCarValidatorInterface\n     */\n    private $validator;\n    /**\n     * @var WriterInterface\n     */\n    private $dataWriter;\n    public function __construct\n        (ToyCarValidatorInterface $validator, \n            WriterInterface $dataWriter)\n    {\n        $this->setValidator($validator);\n        $this->setDataWriter($dataWriter);\n    }\n    /**\n     * @param ToyCar $toyCar\n     * @return bool\n     * @throws ToyCarValidationException\n     */\n    public function create(ToyCar $toyCar): bool\n    {\n        // Do some validation here and so on...\n        $this->getValidator()->validate($toyCar);\n        // Write the data\n        $result = $this->getDataWriter()->write\n            ($toyCar);\n        // Do other stuff.\n        return $result;\n    }\n    /**\n     * @return WriterInterface\n     */\n    public function getDataWriter(): WriterInterface\n    {\n        return $this->dataWriter;\n    }\n    /**\n     * @param WriterInterface $dataWriter\n     */\n    public function setDataWriter(WriterInterface \n        $dataWriter): void\n    {\n        $this->dataWriter = $dataWriter;\n    }\n    /**\n     * @return ToyCarValidatorInterface\n     */\n    public function getValidator(): \n        ToyCarValidatorInterface\n    {\n        return $this->validator;\n    }\n    /**\n     * @param ToyCarValidatorInterface $validator\n     */\n    public function setValidator\n        (ToyCarValidatorInterface $validator): void\n    {\n        $this->validator = $validator;\n    }\n}\n```", "```php\n/var/www/html/symfony# ./runDebug.sh --testsuite=Integration --filter ToyCarCreatorTest\n```"]