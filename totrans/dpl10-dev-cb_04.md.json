["```php\n    mkdir -p web/modules/custom/mymodule\n    ```", "```php\n    name: My Module\n    ```", "```php\n    type: module\n    ```", "```php\n    description: This is an example module from the Drupal\n    ```", "```php\n    Development Cookbook!\n    ```", "```php\n    core_version_requirement: '>=10'\n    ```", "```php\n    name: My Module\n    ```", "```php\n    type: module\n    ```", "```php\n    description: This is an example module from the Drupal\n    ```", "```php\n      Development Cookbook!\n    ```", "```php\n    core_version_requirement: '>=10'\n    ```", "```php\n    <?php\n    ```", "```php\n    /**\n    ```", "```php\n     * Implements hook_page_top().\n    ```", "```php\n     */\n    ```", "```php\n    function mymodule_page_top() {\n    ```", "```php\n      \\Drupal::messenger()->addStatus('Hello world!');\n    ```", "```php\n    }\n    ```", "```php\n    php vendor/bin/drush en mymodule --yes\n    ```", "```php\n{\n    \"name\": \"drupal/mymodule\",\n    \"type\": \"drupal-module\",\n    \"description\": \"This is an example module from the Dru\n        pal Development Cookbook!\",\n    \"require\": {\n        \"drupal/core\": \">=10\"\n    }\n}\n```", "```php\nname: 'Pathauto'\ndescription: 'Provides a mechanism for modules to automati\n    cally generate aliases for the content they manage.'\ntype: module\ndependencies:\n- ctools:ctools\n- drupal:path\n- token:token\n```", "```php\n    mkdir -p config/install\n    ```", "```php\n    langcode: en\n    ```", "```php\n    status: true\n    ```", "```php\n    dependencies: { }\n    ```", "```php\n    id: contactus\n    ```", "```php\n    label: 'Contact Us'\n    ```", "```php\n    recipients:\n    ```", "```php\n    - webmaster@example.com\n    ```", "```php\n    reply: ''\n    ```", "```php\n    weight: 0\n    ```", "```php\n    php vendor/bin/drush en mymodule --yes\n    ```", "```php\n    <?php\n    ```", "```php\n    /**\n    ```", "```php\n     * Update \"Contact Us\" form to have a reply message.\n    ```", "```php\n     */\n    ```", "```php\n    function mymodule_post_update_change_contactus_reply()\n    ```", "```php\n      {\n    ```", "```php\n      $contact_form = \\Drupal\\contact\\Entity\\Contact\n    ```", "```php\n        Form::load('contactus');\n    ```", "```php\n      $contact_form->setReply(t('Thank you for contacting\n    ```", "```php\n        us, we will reply shortly'));\n    ```", "```php\n      $contact_form->save();\n    ```", "```php\n    }\n    ```", "```php\n    php vendor/bin/drush updb\n    ```", "```php\n<?php\n/**\n* Implements hook_install().\n*/\nfunction mymodule_install() {\n  // Set the site name.\n  \\Drupal::configFactory()\n    ->getEditable('system.site')\n    ->set('name', 'Drupal Development Cookbook!')\n    ->save();\n}\n```", "```php\n    can promote nodes:\n    ```", "```php\n    can promote nodes:\n    ```", "```php\n      title: 'Can promote content'\n    ```", "```php\n    can promote nodes:\n    ```", "```php\n      title: 'Can promote content'\n    ```", "```php\n      description: 'Determines if the user can change pro\n    ```", "```php\n        motion fields on content.'\n    ```", "```php\n    function mymodule_entity_field_access(\n    ```", "```php\n      $operation,\n    ```", "```php\n      \\Drupal\\Core\\Field\\FieldDefinitionInterface\n    ```", "```php\n        $field_definition,\n    ```", "```php\n      \\Drupal\\Core\\Session\\AccountInterface $account\n    ```", "```php\n    ) {\n    ```", "```php\n      return \\Drupal\\Core\\Access\\AccessResult::neutral();\n    ```", "```php\n    }\n    ```", "```php\n    function mymodule_entity_field_access(\n    ```", "```php\n      $operation,\n    ```", "```php\n      \\Drupal\\Core\\Field\\FieldDefinitionInterface\n    ```", "```php\n        $field_definition,\n    ```", "```php\n      \\Drupal\\Core\\Session\\AccountInterface $account\n    ```", "```php\n    ) {\n    ```", "```php\n      $field_name = $field_definition->getName();\n    ```", "```php\n      if ($field_name === 'promote' || $field_name ===\n    ```", "```php\n        'sticky') {\n    ```", "```php\n        $can_promote_nodes = $account->hasPermission('can\n    ```", "```php\n            promote nodes');\n    ```", "```php\n        return Drupal\\Core\\Access\\AccessResult::allowedIf\n    ```", "```php\n             ($can_promote_nodes);\n    ```", "```php\n      }\n    ```", "```php\n      return \\Drupal\\Core\\Access\\AccessResult::neutral();\n    ```", "```php\n    }\n    ```", "```php\ncan promote nodes:\n  title: 'Can promote content'\n  description: 'Determines if the user can change promotion\n    fields on content.'\n  Restrict access: TRUE\n```", "```php\npermission_callbacks:\n  -Drupal\\filter\\FilterPermissions::permissions\n```", "```php\n    <?php\n    ```", "```php\n    function mymodule_node_insert(\\Drupal\\node\\\n    ```", "```php\n        NodeInterface $node) {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    function mymodule_node_insert(\\Drupal\\node\\\n    ```", "```php\n        NodeInterface $node) {\n    ```", "```php\n      if ($node->isPublished()) {\n    ```", "```php\n        $site_mail = \\Drupal::config('system.site')->\n    ```", "```php\n            get('mail');\n    ```", "```php\n        /** @var \\Drupal\\Core\\Mail\\MailManager\n    ```", "```php\n            $mail_service */\n    ```", "```php\n        $mail_service = \\Drupal::service(\n    ```", "```php\n            'plugin.manager.mail');\n    ```", "```php\n        $mail_service->mail(\n    ```", "```php\n          module: 'mymodule',\n    ```", "```php\n          key: 'node_published',\n    ```", "```php\n          to: $site_mail,\n    ```", "```php\n          langcode: 'en',\n    ```", "```php\n          params: ['node' => $node],\n    ```", "```php\n        );\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    function mymodule_node_update(\\Drupal\\node\\NodeInter\n    ```", "```php\n        face $node) {\n    ```", "```php\n    }\n    ```", "```php\n    function mymodule_node_update(\\Drupal\\node\\NodeInter\n    ```", "```php\n        face $node) {\n    ```", "```php\n      if ($node->isPublished()) {\n    ```", "```php\n        /** @var \\Drupal\\node\\NodeInterface $original */\n    ```", "```php\n        $original = $node->original;\n    ```", "```php\n        if (!$original->isPublished()) {\n    ```", "```php\n          $site_mail = \\Drupal::config('system.site')->\n    ```", "```php\n            get('mail');\n    ```", "```php\n          /** @var \\Drupal\\Core\\Mail\\MailManager\n    ```", "```php\n            $mail_service */\n    ```", "```php\n          $mail_service = \\Drupal::service('plugin\n    ```", "```php\n            .manager.mail');\n    ```", "```php\n          $mail_service->mail(\n    ```", "```php\n            module: 'mymodule',\n    ```", "```php\n            key: 'node_published_update',\n    ```", "```php\n            to: $site_mail,\n    ```", "```php\n            langcode: 'en',\n    ```", "```php\n            params: ['node' => $node],\n    ```", "```php\n          );\n    ```", "```php\n        }\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    function mymodule_mail($key, array &$message, $params) {\n    ```", "```php\n    }\n    ```", "```php\n    function mymodule_mail($key, array &$message, $params)\n    ```", "```php\n    {\n    ```", "```php\n      /** @var \\Drupal\\node\\NodeInterface $node */\n    ```", "```php\n      $node = $params['node'];\n    ```", "```php\n      if ($key === 'node_published_insert') {\n    ```", "```php\n        $message['subject'] = 'Newly published node: ' .\n    ```", "```php\n            $node->label();\n    ```", "```php\n      }\n    ```", "```php\n      elseif ($key === 'node_published_update') {\n    ```", "```php\n        $message['subject'] = 'Existing node published: '\n    ```", "```php\n            . $node->label();\n    ```", "```php\n      }\n    ```", "```php\n      else {\n    ```", "```php\n        // Unknown key.\n    ```", "```php\n        Return;\n    ```", "```php\n      }\n    ```", "```php\n      $message['body'][] = 'The following node has been\n    ```", "```php\n        published:';\n    ```", "```php\n      $message['body'][] = $node->label();\n    ```", "```php\n      $message['body'][] = $node->toUrl()->setAbsolute()\n    ```", "```php\n        ->toString();\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\EventSubscriber;\n    ```", "```php\n    use Symfony\\Component\\EventDispatcher\\EventSubscriber\n    ```", "```php\n        Interface;\n    ```", "```php\n    class RequestSubscriber implements EventSubscriber\n    ```", "```php\n        Interface {\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\EventSubscriber;\n    ```", "```php\n    use Symfony\\Component\\EventDispatcher\\EventSubscriber\n    ```", "```php\n        Interface;\n    ```", "```php\n    use Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n    ```", "```php\n    class RequestSubscriber implements EventSubscriber\n    ```", "```php\n        Interface {\n    ```", "```php\n      /**\n    ```", "```php\n        * {@inheritdoc}\n    ```", "```php\n        */\n    ```", "```php\n      public static function getSubscribedEvents() {\n    ```", "```php\n        return [\n    ```", "```php\n          RequestEvent::class => ['doAnonymousRedirect',\n    ```", "```php\n            28],\n    ```", "```php\n        ];\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    <?php\n    ```", "```php\n    namespace Drupal\\mymodule\\EventSubscriber;\n    ```", "```php\n    use Drupal\\Core\\Url;\n    ```", "```php\n    use Symfony\\Component\\EventDispatcher\\EventSubscriber\n    ```", "```php\n        Interface;\n    ```", "```php\n    use Symfony\\Component\\HttpFoundation\\RedirectResponse;\n    ```", "```php\n    use Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n    ```", "```php\n    class RequestSubscriber implements EventSubscriber\n    ```", "```php\n        Interface {\n    ```", "```php\n      /**\n    ```", "```php\n        * Redirects all anonymous users to the login page.\n    ```", "```php\n        *\n    ```", "```php\n        * @param \\Symfony\\Component\\HttpKernel\\Event\\\n    ```", "```php\n            RequestEvent $event\n    ```", "```php\n        *    The event.\n    ```", "```php\n        */\n    ```", "```php\n      public function doAnonymousRedirect(RequestEvent\n    ```", "```php\n        $event) {\n    ```", "```php\n        // Make sure we are not on the user login route.\n    ```", "```php\n        if (\\Drupal::routeMatch()->getRouteName() ==\n    ```", "```php\n            'user.login') {\n    ```", "```php\n          return;\n    ```", "```php\n        }\n    ```", "```php\n        // Check if the current user is logged in.\n    ```", "```php\n        if (\\Drupal::currentUser()->isAnonymous()) {\n    ```", "```php\n          // If they are not logged in, create a redirect\n    ```", "```php\n            response.\n    ```", "```php\n          $url = Url::fromRoute('user.login')->toString();\n    ```", "```php\n          $redirect = new RedirectResponse($url);\n    ```", "```php\n          // Set the redirect response on the event,\n    ```", "```php\n            canceling default response.\n    ```", "```php\n          $event->setResponse($redirect);\n    ```", "```php\n        }\n    ```", "```php\n      }\n    ```", "```php\n      /**\n    ```", "```php\n        * {@inheritdoc}\n    ```", "```php\n        */\n    ```", "```php\n      public static function getSubscribedEvents() {\n    ```", "```php\n        return [\n    ```", "```php\n          RequestEvent::class => ['doAnonymousRedirect',\n    ```", "```php\n            28],\n    ```", "```php\n        ];\n    ```", "```php\n      }\n    ```", "```php\n    }\n    ```", "```php\n    services:\n    ```", "```php\n      mymodule.request_subscriber:\n    ```", "```php\n        class: Drupal\\mymodule\\EventSubscriber\\\n    ```", "```php\n            RequestSubscriber\n    ```", "```php\n        tags:\n    ```", "```php\n          - { name: event_subscriber }\n    ```", "```php\n  /**\n    * The route match.\n    *\n    * @var \\Drupal\\Core\\Routing\\RouteMatchInterface\n    */\n  protected $routeMatch;\n  /**\n    * Account proxy.\n    *\n    * @var \\Drupal\\Core\\Session\\AccountProxyInterface\n    */\n  protected $accountProxy;\n  /**\n    * Creates a new RequestSubscriber object.\n    *\n    * @param \\Drupal\\Core\\Routing\\RouteMatchInterface\n        $route_match\n    * The route match.\n    * @param \\Drupal\\Core\\Session\\AccountProxyInterface\n        $account_proxy\n    * The current user.\n    */\n  public function __construct(RouteMatchInterface\n    $route_match, AccountProxyInterface $account_proxy) {\n    $this->routeMatch = $route_match;\n    $this->accountProxy = $account_proxy;\n  }\n```", "```php\n  /**\n    * Redirects all anonymous users to the login page.\n    *\n    * @param \\Symfony\\Component\\HttpKernel\\Event\\Request\n        Event $event\n    *    The event.\n    */\n  public function doAnonymousRedirect(RequestEvent $event)\n{\n    // Make sure we are not on the user login route.\n    if ($this->routeMatch->getRouteName() == 'user.login') {\n      return;\n    }\n    // Check if the current user is logged in.\n    if ($this->accountProxy->isAnonymous()) {\n      // If they are not logged in, create a redirect\n        response.\n      $url = Url::fromRoute('user.login')->toString();\n      $redirect = new RedirectResponse($url);\n      // Set the redirect response on the event, canceling\n        default response.\n      $event->setResponse($redirect);\n    }\n  }\n```", "```php\nservices:\n  mymodule.request_subscriber:\n    class: Drupal\\mymodule\\EventSubscriber\\\n        RequestSubscriber\n    arguments: ['@current_route_match', '@current_user']\n    tags:\n      - { name: event_subscriber }\n```", "```php\n    php vendor/bin/drush generate drush-command-file\n    ```", "```php\n    services:\n    ```", "```php\n      mymodule.commands:\n    ```", "```php\n        class: \\Drupal\\mymodule\\Commands\\MymoduleCommands\n    ```", "```php\n        tags:\n    ```", "```php\n          - { name: drush.command }\n    ```", "```php\n      public function helloWorld() {\n    ```", "```php\n      }\n    ```", "```php\n      public function helloWorld() {\n    ```", "```php\n        $this->io()->writeln('Hello world!');\n    ```", "```php\n        $self_alias = \\Drush\\Drush::aliasManager()->get\n    ```", "```php\n            Self();\n    ```", "```php\n        $drupal_root = $self_alias->root();\n    ```", "```php\n        $this->io()->writeln(\"Drupal is located at: {$dru\n    ```", "```php\n        pal_root}\");\n    ```", "```php\n      }\n    ```", "```php\n      /**\n    ```", "```php\n       * @command mymodule:hello-world\n    ```", "```php\n       */\n    ```", "```php\n      public function helloWorld() {\n    ```", "```php\n        $this->io()->writeln('Hello world!');\n    ```", "```php\n        $self_alias = \\Drush\\Drush::aliasManager()->get\n    ```", "```php\n            Self();\n    ```", "```php\n        $drupal_root = $self_alias->root();\n    ```", "```php\n        $this->io()->writeln(\"Drupal is located at: {\n    ```", "```php\n            $drupal_root}\");\n    ```", "```php\n      }\n    ```", "```php\n    php vendor/bin/drush cache-rebuild\n    ```", "```php\n    php vendor/bin/drush mymodule:hello-world\n    ```", "```php\nservices:\n  pathauto.commands:\n    class: \\Drupal\\pathauto\\Commands\\PathautoCommands\n    arguments:\n      - '@config.factory'\n      - '@plugin.manager.alias_type'\n      - '@pathauto.alias_storage_helper'\n    tags:\n      - { name: drush.command }\n```"]