- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plug and Play with Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugins power many items in **Drupal**, such as blocks, field types, and field
    formatters. Plugins and plugin types are provided by modules. They provide a swappable
    and specific functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will implement a **block plugin**. We will use the Plugin
    API to provide a custom field type along with a widget and formatter for the field.
    The last recipe will show you how to create and use a custom plugin type.
  prefs: []
  type: TYPE_NORMAL
- en: Upcoming changes to the plugin system in Drupal minor versions
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP 8** provides a feature called **PHP attributes** ([https://www.php.net/manual/en/language.attributes.overview.php](https://www.php.net/manual/en/language.attributes.overview.php)).
    With **Drupal 10**’s adoption of **PHP 8.1**, there is consideration to adopt
    PHP attributes over code document annotations, which are used in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Support for PHP attributes instead of annotations may be available in **Drupal
    10.1**, the first minor release of Drupal 10\. Annotations will be supported throughout
    Drupal 10 but may become deprecated. Deprecating annotations in favor of PHP attributes
    is discussed in the following issue: [https://www.drupal.org/project/drupal/issues/3252386](https://www.drupal.org/project/drupal/issues/3252386).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will dive into the Plugin API provided in Drupal with the
    following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating blocks using plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field formatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom plugin type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will require a custom module to be installed. In the following
    recipes, the module name is `mymodule`. Replace as appropriate. You can find the
    full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp08)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating blocks using plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal, a **block** is a piece of content that can be placed in a region
    provided by a theme. Blocks are used to present specific kinds of content, such
    as a user login form, a snippet of text, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks are annotated plugins. Annotated plugins use documentation blocks to
    provide details of the plugin. They are discovered in the module’s `Plugin` class
    namespace. Each class in the `Plugin/Block` namespace will be discovered by the
    `Block` module’s plugin manager.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will define a block that will display a copyright snippet
    and the current year and place it in the footer region.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Plugin/Block` directory in the module’s directory.
    This will translate the `\Drupal\mymodule\Plugin\Block` namespace and allow block
    plugin discovery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `Copyright.php` in the newly created directory so that we
    can define the `Copyright` class for our block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Copyright` class will extend the `\``Drupal\Core\Block\BlockBase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will extend the `BlockBase` class, which implements `\Drupal\Core\Block\BlockPluginInterface`
    and provides us with an implementation of nearly all of the interface’s methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write the plugin annotation in a class document block. We will
    provide the block’s identifier, administrative label, and category as annotation
    tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Annotations are provided in code comments and are prefixed with `@`. The `@`
    symbol in `@Block` specifies that this is a `Block` annotation. Drupal will parse
    this and create a plugin definition based on the provided properties. `id` is
    the internal machine name, `admin_label` is displayed on the block listing page,
    and `category` shows up in the block select list.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to implement the `build` method to satisfy the `\Drupal\Core\Block\BlockPluginInterface`
    interface. This returns the output to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `build` method returns a render array that uses Drupal’s `t` function to
    substitute `@year` for the `\DateTime` object’s output that is formatted as a
    full year.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to rebuild the block plugin definitions cache,
    causing a rediscovery of plugin definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the **Block layout** page from **Structure** in the administrative menu.
    In the Footer fourth region, click on **Place block**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the block list and add the custom block to your regions, for instance,
    the footer region. Find the **Copyright** block and click on **Place block** in
    the dialog form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Place block dialog for the Copyright block](img/Figure_8.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Place block dialog for the Copyright block
  prefs: []
  type: TYPE_NORMAL
- en: Uncheck the **Display title** checkbox so that only our block’s content will
    be rendered. Click on **Save blocks** and accept all other defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit your Drupal site and verify that the copyright statement displays the
    current year:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Copyright block in the footer of a Drupal site](img/Figure_8.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Copyright block in the footer of a Drupal site
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin system is comprised of multiple instantiable classes that share a
    similar interface. Using annotations and plugin managers, Drupal makes these classes
    discoverable. This allows for interacting with plugins and executing their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Block\BlockManager` class specifies that the block plugins
    must be located in the `Plugin\Block` namespace. It also defines the base interface
    that needs to be implemented, along with the `Annotation` class, which is to be
    used when parsing the class’s document block.
  prefs: []
  type: TYPE_NORMAL
- en: When retrieving plugin definitions, the plugin manager first checks whether
    definitions have been previously discovered and cached. If there are no cached
    plugin definitions, the available namespaces registered in Drupal are scanned
    for plugins in the `\Drupal\{extension}\Plugin\Block` namespace. The discovered
    classes are then processed with the class documentation, which contains annotation
    data, and are then cached as the available plugin definitions.
  prefs: []
  type: TYPE_NORMAL
- en: When viewing the `label` method on `\Drupal\Core\Block\BlockBase` is invoked
    to display the human-readable name defined in the plugin’s annotation. When a
    block is displayed on a rendered page, the `build` method is invoked and passed
    to the theming layer to be output.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more in-depth items that can be used when creating a block plugin.
    We will cover those in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Altering blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blocks can be altered in three different ways: the **plugin definition**, the
    **build array**, or the **view array output** can be altered.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A module can implement `hook_block_alter` in its `.module` file and modify
    the annotation definitions of all the discovered blocks. This will allow a module
    to change the default `user_login_block` from **User Login** to **Login**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A module can implement `hook_block_build_alter` and modify the build information
    of a block. The hook is passed through the build array and the instance for the
    current block. Module developers can use this to add cache contexts or alter the
    cacheability of the cache metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You can test the modification of the cache metadata by altering the block created
    in this recipe to output a timestamp instead of a year format. With caching enabled,
    you will see that the value persists on the same URL, but it will be different
    across each page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, a module can implement `hook_block_view_alter` in order to modify
    the output of the block to be rendered. A module can add content to be rendered
    or removed. This can be used to remove the `contextual_links` item, which allows
    inline editing on the front page of a site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Block settings form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blocks can provide a settings form. This recipe provides the text *My Company*
    for the copyright text. Instead of being set in code, this can be defined through
    a text field in the block’s setting form.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s readdress the `Copyright.php` file that holds our block’s class. We will
    override methods provided by our base class. The following methods will be added
    to the class written in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'A block can override the default `defaultConfiguration` method, which returns
    an array of setting keys and their default values. The `blockForm` method can
    then be overridden to return a `Form` API array to represent the settings form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `blockSubmit` method must then be implemented, which updates the block’s
    configuration. The following code retrieves the `company_name` value from the
    form’s state, which contains submitted values, and sets it to the `configuration`
    property in its `company_name` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `build` method can be updated to use the new configuration item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can now return to the `Copyright` block. The new setting will be available
    in the block instance’s configuration form.
  prefs: []
  type: TYPE_NORMAL
- en: Defining access to a block
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Blocks, by default, are rendered for all users. The default access method can
    be overridden. This allows a block to only be displayed to authenticated users
    or based on specific permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is taken from `user_login_block`. It allows access to the
    block if the user is logged out and is not on the login or logout page. The access
    is cached based on the current route name and the user’s current role being anonymous.
    If these are not passed, the access returned is forbidden and the block is not
    built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other modules can implement `hook_block_access` to override the access of a
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: A module implementing the preceding hook will deny access to our `Copyright`
    block if it is not placed in the footer region. If the block operation is not
    `view` and the block is not our `Copyright` block, a `neutral` access result is
    passed. A `neutral` result allows the system to process other access results.
    Otherwise, `AccessResult::forbiddenIf` will return `neutral` or `forbidden` based
    on the Boolean value passed to it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the *Creating a custom plugin type* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Annotation-based plugin documentation: [https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins](https://www.drupal.org/docs/drupal-apis/plugin-api/annotations-based-plugins
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Information about hooks provided by the `Block` module: [https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10](https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Field types** are defined using the plugin system. Each field type has its
    own class and definition. A new field type can be defined through a custom class
    that will provide schema and property information.'
  prefs: []
  type: TYPE_NORMAL
- en: Field types define ways in which data can be stored and handled through the
    **Field** API on entities. Field widgets provide means for editing a field type
    in the user interface. Field formatters provide means for displaying the field
    data to users. Both are plugins and will be covered in later recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will create a simple field type called `realname` to store
    the first and last names and add it to a `comment` type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe adds a field to a `comment` type, which requires the `Comment` module
    to be installed. The `Comment` module is installed by default with a standard
    Drupal installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Plugin/Field/FieldType` directory in the
    module’s directory. The `Field` module discovers field types in the `Plugin\Field\FieldType`
    namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `RealName.php` in the newly created directory so that we
    can define the `RealName` class. This will provide our `realname` field type for
    the first and last names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `RealName` class will extend the `\``Drupal\Core\Field\FieldItemBase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will extend the `FieldItemBase` class, which satisfies methods defined by
    inherited interfaces for the `FieldType` plugin type, except for the `schema`
    and `propertyDefinitions` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write the plugin annotation in a class document block. We will
    provide the field type’s identifier, label, description, category, default widget,
    and formatter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `@FieldType` annotation tells Drupal that this is a `FieldType` plugin.
    The following properties are defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the plugin’s machine name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: This is the human-readable name for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is the human-readable description of the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category`: This is the category where the field shows up in the user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_widget`: This is the default form widget to be used for editing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_formatter`: This is the default formatter with which you can display
    the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `RealName` class needs to implement the `schema` method defined in `\Drupal\Core\Field\FieldItemInterface`.
    This returns an array of the database API schema information. Add the following
    method to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `schema` method defines the database columns in the field’s data table.
    We define a column to hold the `first_name` and `last_name` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to implement the `propertyDefinitions` method. This returns
    a data definition of the values defined in the `schema` method. Add the following
    method to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns an array that is keyed with the same column names provided
    in the schema. It returns data definitions to represent the properties in the
    field type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will override one more method, the `mainPropertyName` method, to specify
    that `first_name` is the main property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method allows specifying the main property to be used for retrieving the
    field value automatically when there are multiple values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rebuild your Drupal site’s cache to build the field type plugin definitions
    cache, causing a rediscovery of plugin definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The field will now appear on the field type management screen. To use it, go
    to **Structure** and then to **Comment types**. You can now go to **Manage fields**
    and click on **Add field** to add a real name entry for your comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The field appearing in the Add a new field list](img/Figure_8.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The field appearing in the Add a new field list
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin manager for field types is the `plugin.manager.field.field_type`
    service. This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldType`
    namespace and implement `\Drupal\Core\Field\FieldItemInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: When adding a new field to an entity type, the definitions are retrieved from
    the field type manager to populate the list of field types. When a field is added
    to an entity type, that entity type’s database storage is updated based on the
    properties provided by the field in `propertyDefinitions` with the schema from
    the `schema` method.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field types can implement a method to define whether the value is empty or not.
    We will cover this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining whether a field is empty
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Field type classes have an `isEmpty` method that is used to determine whether
    the field has no values.
  prefs: []
  type: TYPE_NORMAL
- en: Field types extend `Drupal\Core\TypedData\Plugin\DataType\Map`, which is a class
    representation of an associative array in Drupal’s `\Drupal\Core\TypedDate\ComplexDataInterface`
    interface, which provides the `isEmpty` method.
  prefs: []
  type: TYPE_NORMAL
- en: The default functionality is that a field is not considered empty as long as
    one property has values. For instance, our real name field would not be considered
    empty if the first name or last name had values.
  prefs: []
  type: TYPE_NORMAL
- en: Field types can provide their own implementations to provide a more robust verification.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom field widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Field widgets** provide the form component to a field in an entity form.
    These integrate with the Form API to define how a field can be edited and the
    way in which the data can be formatted before it is saved. Field widgets are chosen
    and customized through the form display interface.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a widget for the field created in the *Creating
    a custom field type* recipe in this chapter. The field widget will provide two
    text fields for entering the first and last name items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a field widget for the field type created in the previous
    recipe, *Creating a custom* *field type*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Plugin/Field/FieldWidget` directory in the
    module’s directory. The `Field` module discovers field widgets in the `Plugin\Field\FieldWidget`
    namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `RealNameDefaultWidget.php` file in the newly created directory so
    that we can define the `RealNameDefaultWidget` class. This will provide a custom
    form element to edit the first and last name values of our field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `RealNameDefaultWidget` class will extend the `\``Drupal\Core\Field\WidgetBase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will extend the `WidgetBase` class, which satisfies methods defined by inherited
    interfaces for the `FieldWidget` plugin type, except the `formElement` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will provide the field widget’s identifier, label, and supported field types
    in the plugin’s annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`@FieldWidget` tells Drupal that this is a field widget plugin. It defines
    `id` to represent the machine name, the human-readable name as `label`, and the
    field types that the widget interacts with as the `field_types` property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to implement the `formElement` method to satisfy the remaining interface
    methods after extending `\Drupal\Core\Field\WidgetBase`. Add the following method
    to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `formElement` method returns the Form API array structure, which should
    be added to an entity form for each field item. The names of the element items
    – `first_name` and `last_name` – map to the field property names so that they
    are saved correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need to modify our original `RealName` field type plugin class
    to use the default widget that we created. Modify the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_widget` annotation property as `realname_default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to update the field type definition and discovery
    of the new field widget plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The field added to **Comment type** will now use the field widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Real name widget on a comment form](img/Figure_8.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Real name widget on a comment form
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin manager for field types is the `plugin.manager.field.widget` service.
    This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldWidget`
    namespace and implement `\Drupal\Core\Field\WidgetInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: The entity form display system uses the plugin manager to load field definitions
    as options on the form display configuration form. When the entity form is built
    using the form display configuration, the form-building process adds the element
    returned from the `formElement` method to the entity form.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field widgets have additional methods to provide more information; they are
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Field widget settings and summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Field\WidgetInterface` interface defines three methods that
    can be overridden to provide a settings form and a summary of the current settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget settings can be used to alter the form presented to the user. A setting
    can be created that allows the field element to be limited to only entering the
    first or last name with one text field.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom field formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Field formatters** define the way in which a field type will be presented.
    These formatters return the render array information to be processed by the theming
    layer. Field formatters are configured on the display mode interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a formatter for the field created in the *Creating
    a custom field type* recipe in this chapter. The field formatter will display
    the first and last name values inline, as a full name.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe provides a field formatter for the field type created in the previous
    recipe, *Creating a custom* *field type*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Plugin/Field/FieldFormatter` directory in
    the module’s directory. The `Field` module discovers field formatters in the `Plugin\Field\FieldFormatter`
    namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `RealNameFormatter.php` file in the newly created directory so that
    we can define the `RealNameFormatter` class. This will provide a custom formatter
    to display the field’s values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `RealNameFormatter` class will extend the `\``Drupal\Core\Field\FormatterBase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We extend the `FormatterBase` class, which satisfies methods defined by inherited
    interfaces for the `FieldFormatter` plugin type, except the `viewElements` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will provide the field widget’s identifier, label, and supported field types
    in the plugin’s annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`@FieldFormatter` tells Drupal that this is a field formatter plugin. It defines
    `id` to represent the machine name, the human-readable name as `label`, and the
    field types that the formatter interacts with as the `field_types` property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to implement the `viewElements` method to satisfy the `\Drupal\Core\Field\FormatterInferface`
    interface. This is used to render the field data. Add the following method to
    your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The field values are provided to the `viewElements` method as a `FieldItemListInterface`
    iterable that contains each field item. Fields in Drupal can contain a single
    value, or an unlimited number of values. We iterate over each value and create
    a templated string that displays the first name and last name values in one line
    as a full name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need to modify our original `RealName` field type’s plugin class
    to use the default formatter that we created. Open the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_formatter` annotation property as `realname_one_line`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild your Drupal site’s cache to update the field type definition and discovery
    of the new field formatter plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The field added to **Comment type** will now use the field formatter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Output of the real name formatter](img/Figure_8.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Output of the real name formatter
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin manager for field types is the `plugin.manager.field.formatter` service.
    This plugin manager defines that field type plugins must be in the `Plugin\Field\FieldFormatter`
    namespace and implement `\Drupal\Core\Field\FormatterInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: The entity view display system uses the plugin manager to load field definitions
    as options on the view display configuration form. When the entity is built using
    the view display configuration, the process iterates through each field on the
    entity and invokes the configured formatter’s `viewElements` method. The final
    result is used to render the display of the entity.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field formatters have additional methods to provide more information; they are
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Formatter settings and summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Field\FormatterInterface` interface defines three methods
    that can be overridden to provide a settings form and a summary of the current
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Settings can be used to alter how the formatter displays information. For example,
    these methods can be implemented to provide settings to hide or display the first
    or last name.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom plugin type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **plugin system** provides a means to create specialized objects in Drupal
    that do not require the data storage features of the entity system. As we have
    seen with the block and field plugins, each plugin type serves a specific purpose
    and allows for extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new plugin type called `GeoLocator`, which
    will return the country code for a given IP address. We will create a plugin manager,
    a default plugin interface, a plugin annotation definition, and plugin implementations.
    A **Content Delivery Network** (**CDN**) commonly provides HTTP headers with the
    visitor’s country code. We will provide plugins for **Cloudflare** and **AWS CloudFront**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All plugins need to have a service that acts as a plugin manager. Create a file
    in the `src` directory of your module called `GeoLocatorManager.php`. This will
    hold the `GeoLocatorManager` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `GeoLocatorManager` class by extending the `\Drupal\Core\Plugin\DefaultPluginManager`
    class provided by Drupal core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`DefaultPluginManager` provides the essential functionality for a plugin manager,
    requiring implementors to only override its constructor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need to override the `__construct` method from the `DefaultPluginManager`
    class to define information about our plugin type. Note, it will reference code
    created in the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first argument to the parent construct call of `Plugin/GeoLocator` specifies
    that the namespace `GeoLocator` plugins must reside in a module. The fourth argument,
    `Drupal\mymodule\Plugin\GeoLocator\GeoLocatorInterface`, identifies the interface
    that `GeoLocator` plugins must implement. The fifth argument, `Drupal\mymodule\Annotation\GeoLocator`,
    specifies the annotation class, so that plugins may register themselves with `@``GeoLocator`
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we create the `GeoLocator` plugin interface and annotation, we will
    create the service definition to register our plugin manager. Create a `mymodule.services.yml`
    file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While not required, it is a pattern to name plugin manager services with `plugin.manager.`
    and then the plugin type name. We can use the parent definition to tell the service
    container to use the same arguments as the `default_plugin_manager` definition
    when constructing our class.
  prefs: []
  type: TYPE_NORMAL
- en: 'All annotation-based plugins must provide an annotation class. Create `GeoLocator.php`
    in `src/Annotation` to provide the `GeoLocator` annotation class, as we specified
    in our plugin manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each property is an item that can be defined in the plugin’s annotation. The
    annotated definition will be `@GeoLocator` for our plugins, as the annotation’s
    class name is `GeoLocator`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define the plugin interface that we defined in the plugin manager.
    The discovery process for plugins validates that `GeoLocator` plugins implement
    this interface. Create a `GeoLocatorInterface.php` file in our module’s `src/Plugin/GeoLocator`
    directory to hold the interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We provide an interface so that we can guarantee that we have these expected
    methods when working with a `GeoLocator` plugin. The `geolocate` method receives
    a request object and returns a country code, or `null` if one could not be found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our plugin type set up, we will create our first plugin to
    support the Cloudflare country code header. Create the `src/Plugin/GeoLocator/Cloudflare.php`
    file for the `Cloudflare` plugin class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Cloudflare provides the visitor’s country code in an HTTP header named `CF-IPCountry`.
    This plugin returns the value from that header, or `null` if it is missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a plugin for AWS CloudFront’s country code header. Create the
    `src/Plugin/GeoLocator/CloudFront.php` file for the `CloudFront` plugin class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: AWS CloudFront provides the visitor’s country code in an HTTP header named `CloudFront-Viewer-Country`.
    This plugin returns the value from that header, or `null` if it is missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will create a demonstration plugin that reads the country code
    from a query parameter. Create the `src/Plugin/GeoLocator/RequestQuery.php` file
    for the `RequestQuery` plugin class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Unlike the other plugins, this plugin returns the value of the `countryCode`
    query parameter in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example that will set a message of the country code, if
    one can be detected by a plugin, on each page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We fetch the definitions from the plugin manager and create an instance of each
    plugin. We then check whether the plugin returns a result. If the plugin returns
    a country code, the country code is added as a message and then the loop is stopped.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plugins and plugin types are a way of grouping classes that operate with specific
    functionality. The plugin manager provides a way of discovering these classes
    and instantiating them. In the last step of this recipe, we used the plugin manager
    to find each definition, create an instance of the plugin, and then call the `geolocate`
    method to find a country code from the request object.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin managers utilize discovery methods to find plugin classes. By default,
    the `\Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery` discovery method is
    used. The subdirectory is used to look for plugins, which we specified as `Plugin/GeoLocator`
    in our plugin manager’s `__construct` method. The annotated class discovery then
    iterates through the mapping of namespaces to their directories. It discovers
    PHP files in the desired directory. These classes are then inspected for the proper
    `@GeoLocator` annotation and to make sure that they implement the `GeoLocatorInterface`
    interface. Discovered classes are then registered as plugin definitions.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many additional items for creating a custom plugin type; we will discuss
    some of them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying an alter hook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plugin managers have the ability to define an alter hook. The following line
    of code will be added to the `GeoLocatorManager` class’s constructor to provide
    the `hook_geolocator_plugins_alter` alter hook. This is passed to the module handler
    service for invocations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: Modules implementing `hook_geolocator_plugins_alter` in their `.module` file
    have the ability to modify all the discovered plugin definitions. They also have
    the ability to remove defined plugin entries or alter any information provided
    for the annotation definition.
  prefs: []
  type: TYPE_NORMAL
- en: Using a cache backend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plugins can use a cache backend to improve performance. This can be done by
    specifying a cache backend with the `setCacheBackend` method in the plugin manager’s
    constructor. The following line of code will allow the `GeoLocator` plugin definitions
    to be cached and only discovered on a cache rebuild:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Without specifying a cache backend, Drupal will scan the filesystem for any
    annotated `GeoLocator` plugins provided by modules. The `$cache_backend` variable
    is passed to the constructor. The second parameter provides the cache key. The
    cache key will have the current language code added as a suffix.
  prefs: []
  type: TYPE_NORMAL
- en: There is an optional third parameter that takes an array of strings to represent
    cache tags that will cause the plugin definitions to be cleared. This is an advanced
    feature, and plugin definitions should normally be cleared through the manager’s
    `clearCachedDefinitions` method. The cache tags allow the plugin definitions to
    be cleared when a relevant cache is cleared as well.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing plugins through the manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plugins are loaded through the manager service. Plugin managers have various
    methods for retrieving plugin definitions, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getDefinitions`: This method will return an array of plugin definitions. It
    first makes an attempt to retrieve cached definitions, if any, and sets the cache
    of discovered definitions before returning them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDefinition`: This takes an expected plugin ID and returns its definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createInstance`: This takes an expected plugin ID and returns an initiated
    class for the plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getInstance`: This takes an array that acts as a plugin definition and returns
    an initiated class from the definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
