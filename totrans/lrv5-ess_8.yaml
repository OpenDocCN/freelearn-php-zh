- en: Appendix A. An Arsenal of Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel comes with several utilities that help you perform specific tasks, such
    as sending e-mails, queuing functions, and manipulating files. It ships with a
    ton of handy utilities that it uses internally; the good news is that you can
    also use them in your applications. This chapter will present the most useful
    utilities so you do not end up rewriting a function that already exists in the
    framework!
  prefs: []
  type: TYPE_NORMAL
- en: The structure of this chapter is partly based on *Jesse O'Brien's* cheat sheet,
    which is accessible at [http://cheats.jesse-obrien.ca/](http://cheats.jesse-obrien.ca/).
    The examples are based on Laravel's tests as well as its official documentation
    and API.
  prefs: []
  type: TYPE_NORMAL
- en: Array helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Arrays are the bread and butter of any web application that deals with data.
    PHP already offers nearly 80 functions to perform various operations on arrays,
    and Laravel complements them with a handful of practical functions that are inspired
    by certain functions found in Python and Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several of Laravel's classes, including Eloquent collections, implement the
    PHP `ArrayAccess` interface. This means that you can use them like a normal array
    in your code and, for instance, iterate over the items in a `foreach` loop or
    use them with the array functions described here.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the functions support a **dot notation** to refer to nested values,
    which is similar to JavaScript objects. For example, rather than writing `$arr['foo']['bar']['baz']`,
    you can use the `array_get` helper and write `array_get($arr, 'foo.bar.baz');`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following usage examples, we will use three dummy arrays and assume
    that they are reset for each example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The usage examples of array helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now take a look at how we can use Laravel''s array helper functions
    to extract and manipulate the values of those arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve a value with a fallback value if the key does not exist, we use
    the `array_get` function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is helpful if you are referencing an array key that may or may not exist
    (that is, in an array of request data). If the key does not exist, then the default
    value will be returned instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To remove a value from an array using the dot notation, we use the `array_forget`
    function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove a value from an array and return it, we use the `array_pull` function
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To set a nested value using the dot notation, we use the `array_set` function
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To flatten a multidimensional associative array, we use the `array_dot` function
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return all of the keys and their values from the array except for the ones
    that are specified, we use the `array_except` function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To only extract some keys from an array, we use the `array_only` function as
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return a flattened array containing all of the nested values (the keys are
    dropped), we use the `array_fetch` function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To iterate over the array and return the first value for which the closure
    returns true, we use the `array_first` function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To generate a one-dimensional array containing only the values that are found
    in a multidimensional array, we use the `array_flatten` function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To extract an array of values from a list of key-value pairs, we use the `array_pluck`
    function as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get the first or last item of an array (this also works with the values
    returned by functions), we use the `head` and `last` functions as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: String and text manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The string manipulation functions are found in the `Illuminate\Support` namespace
    and are callable on the `Str` object.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the functions also have shorter `snake_case` aliases. For example, the
    `Str::endsWith()` method is identical to the global `ends_with()` function. We
    are free to use whichever one we prefer in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following functions return the `true` or `false` values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `is` method checks whether a value matches a pattern. The asterisk can
    be used as a wildcard character as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `contains` method, as shown in the following code, checks whether a string
    contains a given substring:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `startsWith` and `endsWith` methods, as shown in the following code, check
    whether a string starts or ends with one or more substrings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from the preceding examples, these methods are handy for validation
    filenames and similar data.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, you need to transform a string before displaying it to the user
    or using it in a URL. Laravel provides the following helpers to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function generates a URL-friendly string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function generates a title where every word is capitalized:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function caps a string with an instance of a given character:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function limits the number of **characters** in a string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function limits the number of **words** in a string:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inflection functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following functions help you find out the plural or singular form of a
    word, even if it is irregular:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function finds out the plural form of a word:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function finds out the singular form of a word:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Dealing with files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel 5 includes the excellent **Flysystem** project for interacting with
    files both in the application filesystem, as well as popular cloud-based storage
    solutions such as **Amazon Simple Storage Service** (**Amazon S3**) and **Rackspace**.
    Filesystems are configured as *disks* in the `config/filesystems.php` file. You
    can then use a consistent API to manage files, whether they are located locally
    or in an external cloud store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling methods directly on the `Storage` façade will call those methods on
    the default disk as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also explicitly specify the disk to perform actions on, in case you
    have more than one disk configured, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read and write data to files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also prepend or append data instead as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can copy and move files with the aptly-named methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can also delete files, either one at a time or multiple files in one
    go, by supplying an array of files to delete, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also various other helpful methods that allow you to retrieve useful
    information about a file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Apart from working with files, you can work with directories. To list all files
    within a particular directory use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will only list files in the current directory. If you wanted
    to list all files recursively (that is, files in the current directory and any
    subdirectories), then you can use the `allFiles` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create directories as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And you can also delete directories as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: File uploads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Handling file uploads is easy in Laravel 5\. The first step is to create a
    form that will send files when submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will set the `enctype` attribute to `multipart/form-data`. You then need
    an HTML `file` input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'On submission, you can access the file from the `Request` object in your controller
    actions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, you will normally move the file to a directory of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `$file` is an instance of the `Symfony\Component\HttpFoundation\File\UploadedFile`
    class, which provides a number of handy methods for interacting with the uploaded
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the full path to the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get the name of the file as uploaded by the user as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also retrieve just the extension of the original file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Sending e-mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Laravel''s `Mail` class extends the popular Swift Mailer package, which makes
    sending e-mails a breeze. The e-mail templates are loaded in the same way as views,
    which means you can use the Blade syntax and inject data into your templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To inject some data into a template located inside `resources/views/email/view.blade.php`,
    we use the following function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To send both an HTML and a plain text version, we use the following function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To delay the e-mail by 5 minutes (this requires a queue), we use the following
    function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the $`callback` closure that receives the message object, we can call
    the following methods to alter the message that is to be sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$message->subject(''Welcome to the Jungle'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->from(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->to(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the less common methods include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$message->sender(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->returnPath(''email@example.com'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->cc(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->bcc(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->replyTo(''email@example.com'', ''Mr. Example'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->priority(2);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To attach or embed files, you can use the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$message->attach(''path/to/attachment.txt'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->embed(''path/to/attachment.jpg'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you already have the data in memory, and you do not want to create additional
    files, you can use either the `attachData` or the `embedData` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$message->attachData($data, ''attachment.txt'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->embedData($data, ''attachment.jpg'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Embedding is generally done with image files, and you can use either the `embed`
    or the `embedData` method directly inside the body of a message, as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Easier date and time handling with Carbon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel bundles Carbon ([https://github.com/briannesbitt/Carbon](https://github.com/briannesbitt/Carbon)),
    which extends and augments PHP's native `DateTime` object with more expressive
    methods. Laravel uses it mainly to provide more expressive methods on the date
    and time properties (`created_at`, `updated_at`, and `deleted_at`) of an Eloquent
    object. However, since the library is already there, it would be a shame not to
    use it elsewhere in the code of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating Carbon objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carbon objects are meant to be instantiated like normal `DateTime` objects.
    They do, however, support a handful of more expressive methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Carbon objects can be instantiated using the default constructor that will
    use the current date and time as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$now = new Carbon();`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using the current date and time in a given timezone
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$jetzt = new Carbon(''Europe/Berlin'');`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using expressive methods as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$yesterday = Carbon::yesterday();`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$demain = Carbon::tomorrow(''Europe/Paris'');`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using exact parameters as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::createFromDate($year, $month, $day, $tz);`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::createFromTime($hour, $minute, $second, $tz);`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::create($year, $month, $day, $hour, $minute, $second, $tz);`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputting user-friendly timestamps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can generate human-readable, relative timestamps such as *5 minutes ago*,
    *last week*, or *in a year* with the `diffForHumans()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Boolean methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carbon also provides a handful of simple and expressive methods that will come
    in handy in your controllers and views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$date->isWeekday();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isWeekend();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isYesterday();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isToday();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isTomorrow();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isFuture();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isPast();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isLeapYear();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carbon for Eloquent DateTime properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to call Carbon''s methods on attributes stored as `DATE` or `DATETIME`
    types in the database, you need to list them in a `$dates` property in the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You don't need to include `created_at` or `updated_at`, as these are automatically
    treated as dates.
  prefs: []
  type: TYPE_NORMAL
- en: Don't wait any longer with queues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Queues allow you to defer the execution of functions without blocking the script.
    They can be used to run all sorts of functions, from e-mailing a large number
    of users to generating PDF reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Laravel 5 is compatible with the following queue drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: Beanstalkd, with the `pda/pheanstalk` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SQS, with the `aws/aws-sdk-php` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IronMQ, with the `iron-io/iron_mq` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each queue system has its advantages. Beanstalkd can be installed on your own
    server; Amazon SQS might be more cost-effective and require less maintenance,
    as will IronMQ, which is also cloud-based. The latter also lets you set up *push
    queues*, which are great if you cannot run background jobs on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a command and pushing it onto the queue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jobs come in the form of commands. Commands can be either self-handling or not.
    In the latter case, a corresponding handler class would take the data from the
    command class and then act upon it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command classes reside in the `app/Commands` directory, and command handler
    classes can be found in the `app/Handlers/Commands` directory. Classes for a command
    and its handler can be generated with an Artisan command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The `--handler` option tells Artisan to create a handler class (omitting this
    option would create a self-handling command class only), and the `--queued` option
    designates that this should be added to the queue, instead of being handled synchronously.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then use the `Queue` façade to add the command to the queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can dispatch commands using the **command bus**. The command
    bus is set up by default in controllers using the `DispatchesCommands` trait.
    This means in your controller actions you could use the `dispatch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Commands are simple classes that contain the data needed to execute an action—the
    handler then performs the actual processing at a later stage using the data provided
    by the command. An example may be sending a confirmation e-mail after an order
    is placed. The command for this will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The handler—when executed by the queue—will then perform the actual sending
    of the e-mail, passing the order to the e-mail template to display the details
    of the customer''s purchase as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As command handlers are resolved via the service container, we can type-hint
    dependencies. In the preceding case, we need the mailer service, so we type-hint
    the contract to get an implementation. We can then use the mailer to send an e-mail
    to the customer using the order data received from the command class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `app/Commands` directory will be renamed `app/Jobs` from Laravel 5.1 to
    indicate it is primarily for queued jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Listening to a queue and executing jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the functions used for listening to a queue and executing
    jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can listen to the default queue as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can specify the connection on which to listen as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can specify multiple connections in the order of their priority as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `queue:listen` command has to run in the background in order to process
    the jobs as they arrive from the queue. To make sure that it runs permanently,
    you have to use a process control system such as **forever** ([https://github.com/nodejitsu/forever](https://github.com/nodejitsu/forever))
    or **supervisor** ([http://supervisord.org/](http://supervisord.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Getting notified when a job fails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get notified when a job fails, we use the following functions and commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following event listener is used for finding the failed jobs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Any of the failed jobs can be stored in a database table and viewed with the
    following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Queues without background processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Push queues do not require a background process but they only work with the
    `iron.io` driver. Push queues will call an endpoint in your application when a
    job is received, rather than to a queue that is handled by a constantly-running
    worker process. This is handy if you do not have the ability to define the processes,
    which run on your application''s server (such as is the case on shared hosting
    packages). After signing up for an account on `iron.io` and adding your credentials
    to `app/config/queue.php`, you use them by defining a `POST` route that receives
    all the incoming jobs. This route calls `Queue::marshal()`, which is the method
    responsible for firing the correct job handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This route then needs to be registered as a subscriber with the `queue:subscribe`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Once the URL is subscribed on [http://iron.io/](http://iron.io/), any newly
    created jobs with `Queue::push()` will be sent from Iron back to your application
    via a `POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: Where to go next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the resources and sites that you can visit to keep
    up with the latest changes in Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://twitter.com/laravelphp](http://twitter.com/laravelphp) on Twitter for
    regular updates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://laravel.com/docs](http://laravel.com/docs) for the complete documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://laravel.com/api](http://laravel.com/api) for the browsable API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://laracasts.com](http://laracasts.com) for screencast tutorials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
