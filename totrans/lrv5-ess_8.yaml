- en: Appendix A. An Arsenal of Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 工具箱
- en: Laravel comes with several utilities that help you perform specific tasks, such
    as sending e-mails, queuing functions, and manipulating files. It ships with a
    ton of handy utilities that it uses internally; the good news is that you can
    also use them in your applications. This chapter will present the most useful
    utilities so you do not end up rewriting a function that already exists in the
    framework!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了一些实用工具，可以帮助你执行特定任务，例如发送电子邮件、排队函数和文件操作。它自带了大量内部使用的实用工具；好消息是，你也可以在应用程序中使用它们。本章将介绍最有用的实用工具，这样你就不会重写框架中已经存在的函数！
- en: The structure of this chapter is partly based on *Jesse O'Brien's* cheat sheet,
    which is accessible at [http://cheats.jesse-obrien.ca/](http://cheats.jesse-obrien.ca/).
    The examples are based on Laravel's tests as well as its official documentation
    and API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结构部分基于*Jesse O'Brien*的速查表，可在[http://cheats.jesse-obrien.ca/](http://cheats.jesse-obrien.ca/)找到。示例基于Laravel的测试以及其官方文档和API。
- en: Array helpers
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组辅助函数
- en: Arrays are the bread and butter of any web application that deals with data.
    PHP already offers nearly 80 functions to perform various operations on arrays,
    and Laravel complements them with a handful of practical functions that are inspired
    by certain functions found in Python and Ruby.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何处理数据的Web应用程序来说，数组都是基础。PHP已经提供了近80个函数来执行数组上的各种操作，而Laravel通过一些受Python和Ruby中某些函数启发的实用函数来补充它们。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Several of Laravel's classes, including Eloquent collections, implement the
    PHP `ArrayAccess` interface. This means that you can use them like a normal array
    in your code and, for instance, iterate over the items in a `foreach` loop or
    use them with the array functions described here.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的几个类，包括Eloquent集合，实现了PHP的`ArrayAccess`接口。这意味着你可以在代码中使用它们像普通数组一样，例如，在`foreach`循环中迭代项目或使用这里描述的数组函数。
- en: Most of the functions support a **dot notation** to refer to nested values,
    which is similar to JavaScript objects. For example, rather than writing `$arr['foo']['bar']['baz']`,
    you can use the `array_get` helper and write `array_get($arr, 'foo.bar.baz');`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数函数支持点符号来引用嵌套值，这与JavaScript对象类似。例如，你不必编写`$arr['foo']['bar']['baz']`，而是可以使用`array_get`辅助函数并编写`array_get($arr,
    'foo.bar.baz');`。
- en: 'In the following usage examples, we will use three dummy arrays and assume
    that they are reset for each example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下使用示例中，我们将使用三个虚拟数组，并假设每个示例都会重置它们：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The usage examples of array helpers
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组辅助函数的使用示例
- en: 'We will now take a look at how we can use Laravel''s array helper functions
    to extract and manipulate the values of those arrays:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看看如何使用Laravel的数组辅助函数提取和操作这些数组的值：
- en: 'To retrieve a value with a fallback value if the key does not exist, we use
    the `array_get` function as follows:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在键不存在时使用回退值检索值，我们使用`array_get`函数，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is helpful if you are referencing an array key that may or may not exist
    (that is, in an array of request data). If the key does not exist, then the default
    value will be returned instead.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你引用的数组键可能存在或不存在（即在请求数据数组中），这将很有用。如果键不存在，则将返回默认值。
- en: 'To remove a value from an array using the dot notation, we use the `array_forget`
    function as follows:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用点符号从数组中删除值，我们使用`array_forget`函数，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To remove a value from an array and return it, we use the `array_pull` function
    as follows:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从数组中删除值并返回它，我们使用`array_pull`函数，如下所示：
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To set a nested value using the dot notation, we use the `array_set` function
    as follows:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用点符号设置嵌套值，我们使用`array_set`函数，如下所示：
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To flatten a multidimensional associative array, we use the `array_dot` function
    as follows:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将多维关联数组展平，我们使用`array_dot`函数，如下所示：
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To return all of the keys and their values from the array except for the ones
    that are specified, we use the `array_except` function as follows:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从数组中返回所有键及其值（除了指定的那些），我们使用`array_except`函数，如下所示：
- en: '[PRE6]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To only extract some keys from an array, we use the `array_only` function as
    follows:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要只从数组中提取一些键，我们使用`array_only`函数，如下所示：
- en: '[PRE7]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To return a flattened array containing all of the nested values (the keys are
    dropped), we use the `array_fetch` function as follows:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要返回包含所有嵌套值（键被丢弃）的展平数组，我们使用`array_fetch`函数，如下所示：
- en: '[PRE8]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To iterate over the array and return the first value for which the closure
    returns true, we use the `array_first` function as follows:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要遍历数组并返回闭包返回true的第一个值，我们使用`array_first`函数如下：
- en: '[PRE9]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To generate a one-dimensional array containing only the values that are found
    in a multidimensional array, we use the `array_flatten` function as follows:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要生成一个只包含在多维数组中找到的值的单维数组，我们使用`array_flatten`函数如下：
- en: '[PRE10]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To extract an array of values from a list of key-value pairs, we use the `array_pluck`
    function as follows:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从键值对列表中提取值数组，我们使用`array_pluck`函数如下：
- en: '[PRE11]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To get the first or last item of an array (this also works with the values
    returned by functions), we use the `head` and `last` functions as follows:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取数组的第一个或最后一个项目（这也适用于函数返回的值），我们使用`head`和`last`函数如下：
- en: '[PRE12]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: String and text manipulation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串和文本操作
- en: The string manipulation functions are found in the `Illuminate\Support` namespace
    and are callable on the `Str` object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串操作函数位于`Illuminate\Support`命名空间中，并且可以在`Str`对象上调用。
- en: Most of the functions also have shorter `snake_case` aliases. For example, the
    `Str::endsWith()` method is identical to the global `ends_with()` function. We
    are free to use whichever one we prefer in our application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数函数也有更短的`snake_case`别名。例如，`Str::endsWith()`方法与全局`ends_with()`函数相同。我们可以在应用程序中自由选择我们喜欢的任何一个。
- en: Boolean functions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔函数
- en: 'The following functions return the `true` or `false` values:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数返回`true`或`false`值：
- en: 'The `is` method checks whether a value matches a pattern. The asterisk can
    be used as a wildcard character as shown here:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is`方法检查一个值是否与一个模式匹配。星号可以用作通配符，如下所示：'
- en: '[PRE13]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `contains` method, as shown in the following code, checks whether a string
    contains a given substring:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如以下代码所示，`contains`方法检查一个字符串是否包含给定的子字符串：
- en: '[PRE14]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `startsWith` and `endsWith` methods, as shown in the following code, check
    whether a string starts or ends with one or more substrings:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startsWith`和`endsWith`方法，如以下代码所示，检查一个字符串是否以一个或多个子字符串开始或结束：'
- en: '[PRE15]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see from the preceding examples, these methods are handy for validation
    filenames and similar data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的示例所示，这些方法对于验证文件名和类似数据非常方便。
- en: Transformation functions
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换函数
- en: 'In some cases, you need to transform a string before displaying it to the user
    or using it in a URL. Laravel provides the following helpers to achieve this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您需要在向用户显示或将其用于URL之前转换字符串。Laravel提供了以下辅助函数来实现这一点：
- en: 'This function generates a URL-friendly string:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数生成一个对URL友好的字符串：
- en: '[PRE16]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This function generates a title where every word is capitalized:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数生成一个每个单词都大写的标题：
- en: '[PRE17]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This function caps a string with an instance of a given character:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数将给定字符的实例添加到字符串的开头：
- en: '[PRE18]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This function limits the number of **characters** in a string:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数限制字符串中的**字符**数量：
- en: '[PRE19]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This function limits the number of **words** in a string:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数限制字符串中的**单词**数量：
- en: '[PRE20]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Inflection functions
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逆变换函数
- en: 'The following functions help you find out the plural or singular form of a
    word, even if it is irregular:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数帮助您找出单词的复数或单数形式，即使它是不规则的形式：
- en: 'This function finds out the plural form of a word:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数找出单词的复数形式：
- en: '[PRE21]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This function finds out the singular form of a word:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数找出单词的单数形式：
- en: '[PRE22]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Dealing with files
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件处理
- en: Laravel 5 includes the excellent **Flysystem** project for interacting with
    files both in the application filesystem, as well as popular cloud-based storage
    solutions such as **Amazon Simple Storage Service** (**Amazon S3**) and **Rackspace**.
    Filesystems are configured as *disks* in the `config/filesystems.php` file. You
    can then use a consistent API to manage files, whether they are located locally
    or in an external cloud store.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5 包含了优秀的**Flysystem**项目，用于与应用程序文件系统以及流行的基于云的存储解决方案（如**Amazon Simple
    Storage Service**（**Amazon S3**）和**Rackspace**）交互。文件系统在`config/filesystems.php`文件中配置为*磁盘*。然后您可以使用一致的API来管理文件，无论它们位于本地还是外部云存储中。
- en: 'Calling methods directly on the `Storage` façade will call those methods on
    the default disk as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在`Storage`外观上调用方法将在默认磁盘上调用这些方法，如下所示：
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also explicitly specify the disk to perform actions on, in case you
    have more than one disk configured, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您配置了多个磁盘，您也可以显式指定要执行操作的磁盘，如下所示：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can read and write data to files as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照如下方式读取和写入文件：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also prepend or append data instead as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以按照如下方式添加或附加数据：
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can copy and move files with the aptly-named methods as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用命名恰当的方法来复制和移动文件，如下所示：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And you can also delete files, either one at a time or multiple files in one
    go, by supplying an array of files to delete, as shown in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过提供要删除的文件数组来删除文件，无论是单个文件还是一次删除多个文件，如下所示：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There are also various other helpful methods that allow you to retrieve useful
    information about a file as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些其他有用的方法，允许你获取有关文件的有用信息，如下所示：
- en: '[PRE29]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Apart from working with files, you can work with directories. To list all files
    within a particular directory use the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了处理文件外，你还可以处理目录。要列出特定目录中的所有文件，请使用以下代码：
- en: '[PRE30]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding code will only list files in the current directory. If you wanted
    to list all files recursively (that is, files in the current directory and any
    subdirectories), then you can use the `allFiles` method as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将只列出当前目录中的文件。如果你想要递归地列出所有文件（即当前目录及其子目录中的文件），那么你可以使用`allFiles`方法，如下所示：
- en: '[PRE31]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can create directories as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式创建目录：
- en: '[PRE32]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And you can also delete directories as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以按照以下方式删除目录：
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: File uploads
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件上传
- en: 'Handling file uploads is easy in Laravel 5\. The first step is to create a
    form that will send files when submitted:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Laravel 5 中处理文件上传很容易。第一步是创建一个在提交时发送文件的表单：
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will set the `enctype` attribute to `multipart/form-data`. You then need
    an HTML `file` input:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置`enctype`属性为`multipart/form-data`。然后你需要一个HTML的`file`输入：
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'On submission, you can access the file from the `Request` object in your controller
    actions as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交时，你可以在控制器操作中按照以下方式从`Request`对象访问文件：
- en: '[PRE36]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'From here, you will normally move the file to a directory of your choice:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你通常会将文件移动到你的选择目录：
- en: '[PRE37]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding example, `$file` is an instance of the `Symfony\Component\HttpFoundation\File\UploadedFile`
    class, which provides a number of handy methods for interacting with the uploaded
    file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`$file` 是 `Symfony\Component\HttpFoundation\File\UploadedFile` 类的一个实例，它提供了一系列方便的方法来与上传的文件交互。
- en: 'You can get the full path to the file as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式获取文件的完整路径：
- en: '[PRE38]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can get the name of the file as uploaded by the user as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式获取用户上传的文件名：
- en: '[PRE39]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can also retrieve just the extension of the original file as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以按照以下方式检索原始文件的扩展名：
- en: '[PRE40]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Sending e-mails
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送电子邮件
- en: 'Laravel''s `Mail` class extends the popular Swift Mailer package, which makes
    sending e-mails a breeze. The e-mail templates are loaded in the same way as views,
    which means you can use the Blade syntax and inject data into your templates:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的`Mail`类扩展了流行的Swift Mailer包，这使得发送电子邮件变得轻而易举。电子邮件模板的加载方式与视图相同，这意味着你可以使用Blade语法并将数据注入到模板中：
- en: 'To inject some data into a template located inside `resources/views/email/view.blade.php`,
    we use the following function:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将一些数据注入到位于 `resources/views/email/view.blade.php` 内的模板中，我们使用以下函数：
- en: '[PRE41]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'To send both an HTML and a plain text version, we use the following function:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送HTML和纯文本版本，我们使用以下函数：
- en: '[PRE42]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To delay the e-mail by 5 minutes (this requires a queue), we use the following
    function:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要延迟邮件5分钟（这需要队列），我们使用以下函数：
- en: '[PRE43]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Inside the $`callback` closure that receives the message object, we can call
    the following methods to alter the message that is to be sent:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收消息对象的 `$callback` 闭包内部，我们可以调用以下方法来修改要发送的消息：
- en: '`$message->subject(''Welcome to the Jungle'');`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->subject(''Welcome to the Jungle'');`'
- en: '`$message->from(''email@example.com'', ''Mr. Example'');`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->from(''email@example.com'', ''Mr. Example'');`'
- en: '`$message->to(''email@example.com'', ''Mr. Example'');`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->to(''email@example.com'', ''Mr. Example'');`'
- en: 'Some of the less common methods include:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一些不太常见的方法包括：
- en: '`$message->sender(''email@example.com'', ''Mr. Example'');`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->sender(''email@example.com'', ''Mr. Example'');`'
- en: '`$message->returnPath(''email@example.com'');`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->returnPath(''email@example.com'');`'
- en: '`$message->cc(''email@example.com'', ''Mr. Example'');`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->cc(''email@example.com'', ''Mr. Example'');`'
- en: '`$message->bcc(''email@example.com'', ''Mr. Example'');`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->bcc(''email@example.com'', ''Mr. Example'');`'
- en: '`$message->replyTo(''email@example.com'', ''Mr. Example'');`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->replyTo(''email@example.com'', ''Mr. Example'');`'
- en: '`$message->priority(2);`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->priority(2);`'
- en: 'To attach or embed files, you can use the following methods:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要附加或嵌入文件，你可以使用以下方法：
- en: '`$message->attach(''path/to/attachment.txt'');`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->attach(''path/to/attachment.txt'');`'
- en: '`$message->embed(''path/to/attachment.jpg'');`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$message->embed(''path/to/attachment.jpg'');`'
- en: 'If you already have the data in memory, and you do not want to create additional
    files, you can use either the `attachData` or the `embedData` method as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`$message->attachData($data, ''attachment.txt'');`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$message->embedData($data, ''attachment.jpg'');`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Embedding is generally done with image files, and you can use either the `embed`
    or the `embedData` method directly inside the body of a message, as shown in the
    following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Easier date and time handling with Carbon
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel bundles Carbon ([https://github.com/briannesbitt/Carbon](https://github.com/briannesbitt/Carbon)),
    which extends and augments PHP's native `DateTime` object with more expressive
    methods. Laravel uses it mainly to provide more expressive methods on the date
    and time properties (`created_at`, `updated_at`, and `deleted_at`) of an Eloquent
    object. However, since the library is already there, it would be a shame not to
    use it elsewhere in the code of your application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating Carbon objects
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carbon objects are meant to be instantiated like normal `DateTime` objects.
    They do, however, support a handful of more expressive methods:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Carbon objects can be instantiated using the default constructor that will
    use the current date and time as follows:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$now = new Carbon();`'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using the current date and time in a given timezone
    as follows:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$jetzt = new Carbon(''Europe/Berlin'');`'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using expressive methods as follows:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$yesterday = Carbon::yesterday();`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$demain = Carbon::tomorrow(''Europe/Paris'');`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be instantiated using exact parameters as follows:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::createFromDate($year, $month, $day, $tz);`'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::createFromTime($hour, $minute, $second, $tz);`'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Carbon::create($year, $month, $day, $hour, $minute, $second, $tz);`'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputting user-friendly timestamps
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can generate human-readable, relative timestamps such as *5 minutes ago*,
    *last week*, or *in a year* with the `diffForHumans()` method as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Boolean methods
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carbon also provides a handful of simple and expressive methods that will come
    in handy in your controllers and views:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '`$date->isWeekday();`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isWeekend();`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isYesterday();`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isToday();`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isTomorrow();`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isFuture();`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isPast();`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$date->isLeapYear();`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carbon for Eloquent DateTime properties
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to call Carbon''s methods on attributes stored as `DATE` or `DATETIME`
    types in the database, you need to list them in a `$dates` property in the model:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You don't need to include `created_at` or `updated_at`, as these are automatically
    treated as dates.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Don't wait any longer with queues
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Queues allow you to defer the execution of functions without blocking the script.
    They can be used to run all sorts of functions, from e-mailing a large number
    of users to generating PDF reports.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Laravel 5 is compatible with the following queue drivers:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Beanstalkd, with the `pda/pheanstalk` package
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SQS, with the `aws/aws-sdk-php` package
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IronMQ, with the `iron-io/iron_mq` package
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IronMQ，使用`iron-io/iron_mq`包
- en: Each queue system has its advantages. Beanstalkd can be installed on your own
    server; Amazon SQS might be more cost-effective and require less maintenance,
    as will IronMQ, which is also cloud-based. The latter also lets you set up *push
    queues*, which are great if you cannot run background jobs on your server.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 每个队列系统都有其优点。Beanstalkd可以安装在自己的服务器上；Amazon SQS可能更经济实惠且维护成本更低，IronMQ也是如此，它也是基于云的。后者还允许您设置*推送队列*，如果您无法在服务器上运行后台作业，这会非常好。
- en: Creating a command and pushing it onto the queue
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个命令并将其推送到队列中
- en: Jobs come in the form of commands. Commands can be either self-handling or not.
    In the latter case, a corresponding handler class would take the data from the
    command class and then act upon it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 作业以命令的形式出现。命令可以是自我处理的，也可以不是。在后一种情况下，相应的处理器类将取命令类中的数据并对其采取行动。
- en: 'Command classes reside in the `app/Commands` directory, and command handler
    classes can be found in the `app/Handlers/Commands` directory. Classes for a command
    and its handler can be generated with an Artisan command as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 命令类位于`app/Commands`目录中，命令处理器类可以在`app/Handlers/Commands`目录中找到。可以使用Artisan命令生成命令及其处理器的类，如下所示：
- en: '[PRE47]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `--handler` option tells Artisan to create a handler class (omitting this
    option would create a self-handling command class only), and the `--queued` option
    designates that this should be added to the queue, instead of being handled synchronously.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`--handler`选项告诉Artisan创建一个处理器类（省略此选项将仅创建一个自我处理的命令类），而`--queued`选项指定应将其添加到队列中，而不是同步处理。'
- en: 'You can then use the `Queue` façade to add the command to the queue:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`Queue`外观将命令添加到队列中：
- en: '[PRE48]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Alternatively, you can dispatch commands using the **command bus**. The command
    bus is set up by default in controllers using the `DispatchesCommands` trait.
    This means in your controller actions you could use the `dispatch` method:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用**命令总线**来调度命令。命令总线默认在控制器中使用`DispatchesCommands`特质设置。这意味着在您的控制器操作中，您可以使用`dispatch`方法：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Commands are simple classes that contain the data needed to execute an action—the
    handler then performs the actual processing at a later stage using the data provided
    by the command. An example may be sending a confirmation e-mail after an order
    is placed. The command for this will look like the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 命令是包含执行动作所需数据的简单类——处理器随后在稍后的阶段使用命令提供的数据执行实际处理。一个例子是在下单后发送确认电子邮件。此命令看起来如下所示：
- en: '[PRE50]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The handler—when executed by the queue—will then perform the actual sending
    of the e-mail, passing the order to the e-mail template to display the details
    of the customer''s purchase as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当队列执行处理器时，将执行实际发送电子邮件的操作，将订单传递给电子邮件模板以显示客户购买详情，如下所示：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As command handlers are resolved via the service container, we can type-hint
    dependencies. In the preceding case, we need the mailer service, so we type-hint
    the contract to get an implementation. We can then use the mailer to send an e-mail
    to the customer using the order data received from the command class.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命令处理器是通过服务容器解析的，因此我们可以进行类型提示依赖项。在前面的例子中，我们需要邮件服务，因此我们类型提示合约以获取实现。然后我们可以使用邮件服务，通过从命令类接收到的订单数据向客户发送电子邮件。
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `app/Commands` directory will be renamed `app/Jobs` from Laravel 5.1 to
    indicate it is primarily for queued jobs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 从Laravel 5.1开始，`app/Commands`目录将被重命名为`app/Jobs`，以表明它主要用于队列作业。
- en: Listening to a queue and executing jobs
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听队列并执行作业
- en: 'The following are the functions used for listening to a queue and executing
    jobs:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用作监听队列和执行作业的函数：
- en: 'We can listen to the default queue as follows:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以如下监听默认队列：
- en: '[PRE52]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We can specify the connection on which to listen as follows:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以指定要监听的连接，如下所示：
- en: '[PRE53]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can specify multiple connections in the order of their priority as follows:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以按优先级顺序指定多个连接，如下所示：
- en: '[PRE54]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `queue:listen` command has to run in the background in order to process
    the jobs as they arrive from the queue. To make sure that it runs permanently,
    you have to use a process control system such as **forever** ([https://github.com/nodejitsu/forever](https://github.com/nodejitsu/forever))
    or **supervisor** ([http://supervisord.org/](http://supervisord.org/)).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`queue:listen`命令必须在后台运行，以便处理从队列中到达的作业。为了确保它永久运行，您必须使用进程控制系统，如**forever** ([https://github.com/nodejitsu/forever](https://github.com/nodejitsu/forever))或**supervisor**
    ([http://supervisord.org/](http://supervisord.org/))。'
- en: Getting notified when a job fails
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当作业失败时接收通知
- en: 'To get notified when a job fails, we use the following functions and commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要在作业失败时接收通知，我们使用以下函数和命令：
- en: 'The following event listener is used for finding the failed jobs:'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下事件监听器用于查找失败的作业：
- en: '[PRE55]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Any of the failed jobs can be stored in a database table and viewed with the
    following commands:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何失败的作业都可以存储在数据库表中，并使用以下命令查看：
- en: '[PRE56]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Queues without background processes
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有后台进程的队列
- en: 'Push queues do not require a background process but they only work with the
    `iron.io` driver. Push queues will call an endpoint in your application when a
    job is received, rather than to a queue that is handled by a constantly-running
    worker process. This is handy if you do not have the ability to define the processes,
    which run on your application''s server (such as is the case on shared hosting
    packages). After signing up for an account on `iron.io` and adding your credentials
    to `app/config/queue.php`, you use them by defining a `POST` route that receives
    all the incoming jobs. This route calls `Queue::marshal()`, which is the method
    responsible for firing the correct job handler:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 推送队列不需要后台进程，但它们只与`iron.io`驱动程序一起工作。推送队列在接收到作业时将调用应用程序中的端点，而不是由持续运行的工人进程处理的队列。如果您无法定义在应用程序服务器上运行的过程（例如在共享主机套餐中），这将非常有用。在`iron.io`上注册账户并将凭据添加到`app/config/queue.php`后，您可以通过定义一个接收所有传入作业的`POST`路由来使用它们。此路由调用`Queue::marshal()`，这是负责触发正确作业处理程序的方法：
- en: '[PRE57]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This route then needs to be registered as a subscriber with the `queue:subscribe`
    command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由需要使用`queue:subscribe`命令注册为订阅者：
- en: '[PRE58]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Once the URL is subscribed on [http://iron.io/](http://iron.io/), any newly
    created jobs with `Queue::push()` will be sent from Iron back to your application
    via a `POST` request.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦URL在[http://iron.io/](http://iron.io/)上订阅，任何使用`Queue::push()`创建的新作业将通过`POST`请求从Iron发送回您的应用程序。
- en: Where to go next?
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来去哪里？
- en: 'The following is a list of the resources and sites that you can visit to keep
    up with the latest changes in Laravel:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以访问的资源站点列表，您可以访问它们以了解Laravel的最新更改：
- en: '[http://twitter.com/laravelphp](http://twitter.com/laravelphp) on Twitter for
    regular updates'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Twitter上关注[http://twitter.com/laravelphp](http://twitter.com/laravelphp)以获取定期更新
- en: '[http://laravel.com/docs](http://laravel.com/docs) for the complete documentation'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Laravel完整文档](http://laravel.com/docs)以获取更多信息'
- en: '[http://laravel.com/api](http://laravel.com/api) for the browsable API'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Laravel API浏览器](http://laravel.com/api)以查看可浏览的API'
- en: '[http://laracasts.com](http://laracasts.com) for screencast tutorials'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[laracasts教程网站](http://laracasts.com)'
