- en: Chapter 6. Asset Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications are made up of many different components. Second only
    to functionality, the presentation of our application might be considered the
    most important aspect of our application. Presentation of our user interface and
    the corresponding user experience is vital to building excellent web applications.
    In web applications, the presentation and experience is usually defined by **Cascading
    Style Sheets** (**CSS**), and JavaScript files. With raw HTML, we can include
    any necessary scripts and styles we need to, however often we need to handle our
    assets in a programmatic way (such as when using modules, components, or widgets).
    To help manage our assets, we can use a combination of third-party tools and Yii2's
    built-in asset manager. In this chapter, we'll cover how to use Yii2's asset management
    tools, as well as cover several third-party tools we can use to simplify management
    of our asset files.
  prefs: []
  type: TYPE_NORMAL
- en: Asset bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assets in Yii2 are managed through an asset bundle. An asset bundle in Yii2
    is simply a class that declares all the assets that we want to use in our application,
    and resides within the `assets/` directory of our application, usually within
    the `AppAsset.php` file that declares an `AppAsset` class that extends `yii\web\AssetBundle`.
    Since our default application comes within a pre-defined `AppAsset` class, let's
    take a look at what is already defined in that file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Our example asset bundle file declares several public properties. The first
    properties are the base path and base URL for our application which define where
    our assets should be loaded from. The second properties are an array of CSS and
    JavaScript files which define which assets should be registered with our asset
    bundle. Finally our asset bundle defines which asset bundles our current asset
    bundle depends upon. The details of the most common properties are outlined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `basePath` | The string or path alias to the public directory of our web
    server contains the asset files. |'
  prefs: []
  type: TYPE_TB
- en: '| `baseUrl` | The base URL for the relative assets listed in the JS or CSS
    property. |'
  prefs: []
  type: TYPE_TB
- en: '| `css` | An array of CSS files to include in the asset bundle. |'
  prefs: []
  type: TYPE_TB
- en: '| `cssOptions` | An array of options and conditionals that will be rendered
    with the generated `<link>` tag. |'
  prefs: []
  type: TYPE_TB
- en: '| `depends` | A array of asset bundles that this asset bundle depends upon.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `js` | An array of JavaScript files to be included in the asset bundle. |'
  prefs: []
  type: TYPE_TB
- en: '| `jsOptions` | An array of options and conditionals that will be rendered
    with the generated `<script>` tag. |'
  prefs: []
  type: TYPE_TB
- en: '| `publishOptions` | Options to be passed to the `publish()` method of `yii\web\AssetManager`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sourcePath` | Defines the directory that contains the asset files we want
    to include in our bundle. Setting this property will override `basePath` and `baseUrl`.
    |'
  prefs: []
  type: TYPE_TB
- en: Using asset bundles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After defining our asset bundles, we then need to include them in our layout
    files. We can do that by adding the following to the beginning of our main layout
    file (in our case this is `views/layouts/main.php`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: On page load, our asset bundle will register all of its dependent asset bundles,
    and publish any and all non-web accessible files to a web-accessible directory.
    Then during the view rendering stage, it will generate all the necessary HTML
    markup to be included in our view.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous instance, `$this` is an instance of `yii\web\View`. When working
    in widgets or components, you can retrieve the view object within a component
    or widget by using `$this->view`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internally, Yii2 manages asset bundles and their configuration through the `assetManager`
    application component, which is implemented by the `yii\web\AssetManager` class.
    By configuring the `$bundles` property of this component, we can customize how
    our asset bundles behave. Take for instance the `yii\web\JQueryAsset` bundle;
    by default, it provides a version of jQuery from **Bower** (a third-party asset
    dependency manager we'll cover later in the chapter) when our Yii2 project is
    installed. If we wanted this asset bundle to use a different version of jQuery,
    or wanted to improve performance by using a third-party CDN, we could override
    the jQuery asset bundle options as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, we're redefining the JavaScript files for the asset bundle
    by setting the `js` parameter to a CloudFlare CDN, and telling our `JQueryAsset`
    bundle to not push the asset as it is being rendered from a third-party CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can also conditionally redefine which files are rendering,
    say in the instance where we have a minified version of a script we want to display
    in production, but a non-minified version we'd like to use in other environments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a reminder, our `APPLICATION_ENV` constant is dependent upon our multi-environment
    setup we established in [Chapter 1](part0014_split_000.html#DB7S2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 1. Composer, Configuration, Classes, and Path Aliases"), *Composer, Configuration,
    Classes, and Path Aliases*.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we can disable specific asset bundles by setting that bundle to
    `false`, as shown in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Moreover, we can completely disable all included asset bundles within our application
    by setting the `bundles` property to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Asset mapping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some instances, multiple asset bundles may define different versions of the
    same script. For example, one asset bundle may include jQuery version 2.1.3, and
    another may define 2.1.4\. To resolve these conflicts, we can set the `assetMap`
    property of our configuration file to resolve any named instances of an asset
    file to a single dependency that will be included in our view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, any asset bundle that has an instance of `jquery.js` and `jquery.min.js`
    defined within the `js` section of the asset bundle will have that asset re-mapped
    to our CloudFlare CDN asset.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `assetMap` property matches on the last part of an asset file within bundles
    as a key-value pair.
  prefs: []
  type: TYPE_NORMAL
- en: Asset types and locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending upon their location, Yii2 will classify an asset in one of three different
    ways. Assets will be classified as a source asset, a published asset, or an external
    asset. Source assets are asset files that are mixed in within our source code
    and are not in a web-accessible directory. Such assets are often included with
    modules, widgets, extensions, or components. Any assets that Yii2 defines as source
    assets will need to be published by Yii2 to a web-accessible directory. Published
    assets are source assets that have been published to a web-accessible directory.
    And finally, external assets are assets that are located in a web-accessible location,
    such as on our current server or on another server or CDN. Unlike published assets,
    Yii2 will not publish these assets to our assets directory, and will instead reference
    them directly as an external resource.
  prefs: []
  type: TYPE_NORMAL
- en: When working with asset bundles, if the `sourcePath` property is specified,
    Yii2 will consider any assets listed with a relative path as a source asset, and
    will attempt to publish those assets during runtime. If the `sourcePath` property
    is not specified, Yii2 will assume the listed assets are in a web-accessible directory
    and are published. In this case, it is necessary to specify either the `basePath`
    property, or the `baseUrl` property to tell Yii2 where the assets are located.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not use the `@webroot/assets` alias for the `sourcePath` property, as this
    directory is used by asset manager to save the asset files published from their
    source location. Any data stored in this directory could be removed at any time
    by Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: Asset options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the `yii\web\View` methods `registerJsFile()` and `registerCssFile()`,
    asset bundles can be rendered with a given set of options by setting the respective
    `$jsOptions` and `$cssOptions` properties of our asset bundle.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can have our asset bundle include our listed JavaScript files
    at the end of the `<body>` tag within our view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `yii\web\View` class also provides position methods for the beginning of
    the body (`yii\web\View::POS_BEGIN`), the end of the body (`yii\web\View::POS_END`),
    within a `jQuery(window).load()` event (`yii\web\View::POS_LOAD`), and within
    a `jQuery(window).ready()` event (`yii\web\View::POS_READY`).
  prefs: []
  type: TYPE_NORMAL
- en: 'With CSS, we can also define `<noscript>` blocks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we can wrap our CSS blocks in conditionals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following HTML being rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting the `$jsOptions` or `$cssOptions` property will apply the specified
    options to all CSS and JavaScript files defined in the asset bundle. To apply
    different conditionals to each asset individually, you'll need to create a separate
    asset bundle defining those conditionals, or inline the assets within the view
    using `theregisterCssFile()` or `registerJsFile()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Asset publication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously mentioned, if the assets referenced by an asset bundle are located
    in a directory that is not publicly accessible from a web browser (or has the
    `sourcePath` property set), its assets will be copied to `@webroot/assets` (which
    corresponds to the web path of `@web/assets`) as part of the automatic publication
    process the asset manager performs when the bundle is registered with the view.
    As previously mentioned, the publication path can be altered by setting the `baseUrl`
    and `basePath` properties of the asset bundle.
  prefs: []
  type: TYPE_NORMAL
- en: As you may expect, the process of copying over files on a web request can be
    rather expensive, and can cause performance-related issues in production environments
    if allowed to continually run. To help alleviate this problem, Yii2 provides two
    alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than copying over files, Yii''s asset manager can be configured to create
    a symbolic link between the origin asset files and the web-accessible directory
    by setting the `linkAssets` property of `assetManager` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The publication process usually only occurs once. Once Yii2 has published our
    assets, it won't publish them again unless we remove our assets directory or tell
    Yii2 to republish our assets.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Yii2 will run the publication process on every file listed in the
    `sourcePath` property, which means if you have a large directory then every file
    will be copied over regardless of whether it is actually used. To have Yii2's
    asset manager only copy over the files you need, you can modify the `publishOptions`
    property of the asset bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Take for instance if we're using Yahoo's popular CSS library, `purecss`. To
    build `purecss` from source, we need to run Bower, NPM, and Grunt, which will
    leave behind build files we shouldn't publish to our web directory.
  prefs: []
  type: TYPE_NORMAL
- en: By setting the `publishOptions` property as shown in the following example,
    we can ensure only the build files are published, which can drastically improve
    performance during initial publication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Client cache management with asset bundles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When running applications in production, we often set long-lived cache expiration
    dates on our JavaScript and CSS assets to improve performance. When pushing out
    new code, often our assets will change, but their file locations will not, which
    will prevent clients from receiving our updated assets when we make changes. The
    simplest way to overcome this issue is to append a version or timestamp to the
    end of our assets so that browsers can cache a specific version of our assets,
    and be able to re-cache new assets as we push to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Yii2, we can configure our asset manager to automatically append the last
    modified timestamp to our assets by setting the `appendTimestamp` property of
    our `assetManager` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Using preprocessor with asset bundles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make asset development simpler and easy to manage, many developers have
    moved to extended syntax languages such as LESS and CoffeeScript, and rely on
    their corresponding tools to convert those assets into CSS and JavaScript files.
    Yii2 can help facilitate this process by enabling asset manager to take care of
    this build process for you. Using Yii2''s asset bundles, you can list LESS, SCSS,
    Stylus, CoffeeScript, and TypeScript files directly in asset bundles and Yii2
    will identify them and automatically run them through their corresponding preprocessor.
    Take for instance the following asset bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When our asset bundle is registered with our view, Yii2 will automatically run
    the appropriate pre-processor tool to convert the assets to CSS and JavaScript
    to include in our views.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 is dependent upon the corresponding pre-processor software to be installed
    on your computer for this feature to work.
  prefs: []
  type: TYPE_NORMAL
- en: When working with pre-processors it may be necessary to specify additional arguments
    to the pre-processor for your assets to be generated correctly. To set this in
    Yii2, you can set the `converter` property of our `assetManager` instance as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While convenient to use, it's generally not a good idea to let Yii2 build our
    asset files in production, as it introduces unnecessary software into production
    environments that may not match that in your development environment or have security
    vulnerabilities, and can seriously hinder application performance as Yii2 will
    need to build out the asset files on its initial run. When working in production,
    it's usually a better idea to build all of your asset files on a build server
    before pushing your application out to production. We'll cover how to build asset
    files with Grunt, NodeJS, and Bower later on in this chapter, and cover some basic
    deployment strategies in [Chapter 13](part0079_split_000.html#2BASE2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 13. Debugging and Deploying"), *Debugging and Deploying*.
  prefs: []
  type: TYPE_NORMAL
- en: The asset command line tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With HTTP/1.1 applications, to save bandwidth and requests, it's often better
    to combine and compress multiple asset files together. Yii2 can help facilitate
    this process through the `asset` command, which can help you use Yii2, and some
    third-party Java tools to compress and combine your asset files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to changes in the HTTP/2 protocol, it's often more beneficial to serve asset
    files individually rather than combining them. As more web servers such as Nginx
    and Apache start supporting the HTTP/2 protocol, you should run your own experiments
    to determine if combining assets or not is the best choice for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `asset` command-line tool provides two options `asset/template`, which
    is used to generate an instruction file called `asset.php` for use by the second
    command `asset/compress`, which is used to compress files together. The first
    tool, `asset/template`, is invoked as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After running this command, a file called `assets.php` will be generated in
    the `config` directory of our application, and by default will have the following
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To compress assets, Yii2 by default will try to use Closure Compiler ([https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/))
    and YUI Compressor ([https://github.com/yui/yuicompressor/](https://github.com/yui/yuicompressor/)).
    You will need to install both of these tools for the `asset` command to function
    as intended.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration file defines several different options. The first two options,
    `jsCompressor` and `cssCompressor`, define what commands should be run to compress
    both JavaScript and CSS files. By default, these tools will try to use Closure
    Compile and YUI Compressor; both can be configured as needed if you wish to use
    other tools.
  prefs: []
  type: TYPE_NORMAL
- en: The second option, `bundles`, defines the asset bundles that you wish to compress
    together. The third option, `assetManager`, defines some basic options that the
    asset manager component should use, such as the `basePath` and `baseUrl` for the
    compressed assets. Finally, the `targets` option defines the output asset bundles
    that will be generated. By default, Yii2 will create a target called `all`, and
    will generate compressed assets for all asset bundles listed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In many cases, we often have assets split among several different asset bundles,
    such as a shared, frontend, and backend tool. As the frontend assets don''t need
    to be included with our backend assets, we can define multiple targets, which
    will generate separate assets after compression, allowing us to include those
    assets specifically, thus saving bandwidth for our end user. An example is shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After writing our asset configuration file, we can then generate our compressed
    asset files by running the asset command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The asset configuration file is provided as convenience should desire to keep
    everything in Yii2 as much as possible. While Closure Compiler and YUI Compressor
    are good tools, tools like Grunt and NodeJS can often provide a solution that
    is easier to work with and develop for, while eliminating much of the configuration
    you need to do in Yii2 to compile and compress assets. When working with assets,
    be sure to find a tool that works best with your development workflow, team, and
    build process.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party asset tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with modern web applications, we often need to include many different
    types of asset from various sources. Including these assets directly in our application
    can cause several problems, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Licensing of third-party assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of versions and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than including assets directly in our application, we can utilize third-party
    asset management tools such as NodeJS and Bower, which can alleviate all of the
    issues outlined previously.
  prefs: []
  type: TYPE_NORMAL
- en: With Yii2, we can work directly with Node and Bower packages. For simple applications,
    we can include these packages directly in our `composer.json` file by including
    `bower-asset/PackageName` and `npm-asset/PackageName` within the `require` section.
    Yii2's post-scripts will automatically take care of including these assets within
    the `@bower` folder and the `@npm` folder, which we can then reference in our
    asset bundle. In a typical Yii2 instance, this will correspond to `vendor/bower`
    and `vendor/npm`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'With more complicated projects, it may make more sense to utilize those third-party
    tools directly in our application, and included the requisite CSS and JavaScript
    files later. In this next section, we''ll take a look at three tools: NodeJS,
    Bower, and Grunt, and explore how we can use them in conjunction with Yii2.'
  prefs: []
  type: TYPE_NORMAL
- en: NodeJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first and most important tool we'll often use to manage our assets is called
    **NodeJS**, and is a tool that we can use to install the other two packages, Bower
    and Grunt. To get started with node, we'll first need to download the software
    from [https://nodejs.org/download/](https://nodejs.org/download/) and install
    it on our system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, NodeJS will provide us with the tools and packages that we
    need to automatically download and build our asset files. To get started with
    NodeJS, we first need to include a `package.json` file within our application.
    This file will define all the dependencies we want to use. A typical NodeJS file
    for asset management will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two different ways of working with other packages such as Bower and
    Grunt within NodeJS. The first way is to include them as dependencies within our
    `package.json` file. This is advantageous as we can version lock our build tools
    to our application. Alternatively, we can globally install these tools so that
    we can run them directly through the command line. When working with many developers
    and teams, it's generally better to use the tools as defined in the `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In our `package.json` file, we defined a few details about our repository such
    as the name, description, and repository details, as well as several of the tools
    we want to use, such as Bower, Grunt, and a few Grunt tools to concatenate and
    minify our CSS and JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our NodeJS configuration file setup; we can now use NodeJS to add these
    tools to our repository by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This will install our build tools to the `node_modules` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since this directory contains build tools, we should exclude it from our repository
    by adding it to our `.gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: Bower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage CSS and JavaScript libraries, we can utilize an asset dependency
    management tool called Bower. To get started with Bower, we first need to create
    a `bower.json` file in the root directory of our application, and populate it
    with the libraries we want to include. As an example, let''s include the popular
    CSS library PureCSS in our application. We can do that by writing out a basic
    `bower.json` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A full list of package names can be discovered at [http://bower.io/](http://bower.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install these packages, we can then run Bower from our `node_modules` directory
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will add our libraries and CSS to the `vendor/bower` directory in the root
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Bower will install itself to the `bower_components` directory. Since,
    however, Yii2 has already defined the installation directory, it is re-mapped
    to `vendor/bower`.
  prefs: []
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we already know how to use YUI Compressor and Closure Compiler and the
    Yii2 `asset` command, one option we have at this point is to direct our asset
    bundle and asset configuration file to the `node_modules` and `bower_components`
    directory. While this eliminates many of the issues listed previously, we can
    alternatively use another third-party tool called Grunt to take care of compressing
    and concatenating our files together.
  prefs: []
  type: TYPE_NORMAL
- en: In short, Grunt is JavaScript task-runner, designed to help automate much of
    the trivial tasks that need to be repeated, such as building asset files. The
    main benefit of using a tool like Grunt is that you can automate your workflow
    both for development and for your build server.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with Grunt, we first need to create a file called `Gruntfile.js`,
    which will contain all the build instructions for our app.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in creating our `Gruntfile.js` file is to declare that we're
    using Grunt, and to specify the Grunt modules we want to use (the names of which
    we specified in our `package.json` file).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within this section, we'll then want to declare our default task by specifying
    which tasks we want to run when we run Grunt. In our case, we want to concatenate
    our JavaScript and CSS files, then minify both our JavaScript and CSS files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We then begin configuring our Grunt tasks by telling Grunt where it can find
    our `package.json` file, and setting up some basic path aliases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within this section we then define our task to concatenate our JavaScript and
    CSS files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our task to minify our CSS assets after concatenating them together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And finally, the task to compress our JavaScript files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our `Gruntfile.js` file now configured, we can then build our asset files
    by running Grunt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything ran well, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the output of Grunt, we generated four files for us, a compressed
    and uncompressed JavaScript and CSS file containing all the assets we want to
    include in our website. From this point, we can then conditionally include our
    asset files in our asset bundle, and toggle off our `APPLICATION_ENV` or `YII_ENV_<ENV>`
    environment so that we use the minified versions in production, and the non-minified
    versions in our non-production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NodeJS, Bower, and Grunt each provide powerful tools to accomplish certain tasks
    automatically, and work well with Yii2\. Before deciding on a specific technology
    to use however, be sure to consult your team to determine what works best for
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered how assets work and are managed in Yii2\. We explored
    the basics of asset bundle files and their integration with Yii2''s asset manager.
    We also explored how we can use the `asset` command to build configuration files
    and to combine and compress our assets. Finally, we explored three third-party
    tools: NodeJS, Bower, and Grunt, and illustrated how we can use those tools in
    conjunction with our asset bundle to automate the building of our asset files.'
  prefs: []
  type: TYPE_NORMAL
- en: Having explored the front-end aspect of Yii, in the next chapter, we're going
    to return to the backend to learn how we can handle user authentication and authorization
    within our application, as well as cover how we can set up access control filters
    and rule-based authentication within our app.
  prefs: []
  type: TYPE_NORMAL
