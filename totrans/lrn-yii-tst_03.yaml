- en: Chapter 3. Entering Codeception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the installation of Yii 2, as discussed in the previous chapter, in this
    chapter we will cover installation of the Codeception suite ([http://codeception.com](http://codeception.com))
    and go through the folder structure to describe how Codeception works, its extensions,
    modularization, syntax, and the jargon used.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to have a good grasp of its concepts and details as Codeception
    will become the main tool we will use to interact with our tests throughout the
    rest of this book. In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Codeception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Codeception in Yii 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding your way around Codeception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with Codeception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please keep in mind that the folder structure of Yii 2 might change when it
    reaches a stable release (which might be after the release of this book) and together
    with it, the structure used to organize tests. Always try to take notes and understand
    what you're looking at, since the way Codeception works and interacts with Yii
    won't massively change, if not improve.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Codeception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Not everyone has been exposed to testing. The ones who actually have are aware
    of the quirks and limitations of the testing tools they''ve used. Some might be
    more efficient than others, and in either case, you had to rely on the situation
    that was presented to you: legacy code, hard to test architectures, no automation,
    no support whatsoever on the tools, and other setup problems, just to name a few.
    Only certain companies, because they have either the right skillsets or the budget,
    invest in testing, but most of them don''t have the capacity to see beyond the
    point that quality assurance is important. Getting the testing infrastructure
    and tools in place is the immediate step following getting developers to be responsible
    for their own code and to test it.'
  prefs: []
  type: TYPE_NORMAL
- en: Even if testing is something not particularly new in the programming world,
    PHP always had a weak point regarding it. Its history is not the one of a pure-bred
    programming language done with all the nice little details, and only just recently
    has PHP found itself in a better position and started to become more appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, the only and most important tool that came out has been PHPUnit,
    which was released just 10 years ago, in 2004, thanks to the efforts of Sebastian
    Bergmann.
  prefs: []
  type: TYPE_NORMAL
- en: PHPUnit was and sometimes is still difficult to master and understand. It requires
    time and dedication, particularly if you are coming from a non-testing experience.
    PHPUnit simply provided a low-level framework to implement unit tests and, up
    to a certain point, integration tests, with the ability to create mocks and fakes
    when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Although it still is the quickest way to discover bugs, given the limitations
    we've seen in the previous chapters, it didn't cover everything and using it to
    create large integration tests will end up being an almost impossible task.
  prefs: []
  type: TYPE_NORMAL
- en: On top of this, PHPUnit since version 3.7, when it switched to a different autoloading
    mechanism and moved away from PEAR, caused several headaches rendering most of
    the installations unusable.
  prefs: []
  type: TYPE_NORMAL
- en: Other tools developed since mostly come from other environments and requirements,
    programming languages, and frameworks. Some of these tools were incredibly strong
    and well-built, but they came with their own way of declaring tests and interacting
    with the application, set of rules, and configuration specifics.
  prefs: []
  type: TYPE_NORMAL
- en: A modular framework rather than just another tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clearly, mastering all these tools required a bit of understanding, and the
    learning curve wasn't promised to be the same among all of them.
  prefs: []
  type: TYPE_NORMAL
- en: So, if this is the current panorama, why create another tool if you will end
    up in the same situation we were in before?
  prefs: []
  type: TYPE_NORMAL
- en: Well, one of the most important things to be understood about Codeception is
    that it's not just a tool, rather a full stack, as noted on the Codeception site,
    a suite of frameworks, or if you want to go meta, a framework for frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Codeception provides a uniform way to design different types of test by using
    as much as possible the same semantic and logic, a way to make the whole testing
    infrastructure more coherent and approachable.
  prefs: []
  type: TYPE_NORMAL
- en: Outlining concepts behind Codeception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Codeception has been created with the following basic concepts in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to read**: By using a declarative syntax close to the natural language,
    tests can be read and interpreted quite easily, making them an ideal candidate
    to be used as documentation for the application. Any stakeholder and engineer
    close to the project can ensure that tests are written correctly and cover the
    required scenarios without knowing any special lingo. It can also generate BDD-style
    test scenarios from code test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to write**: As we already underlined, every testing framework uses its
    own syntax or language to write tests, resulting in some degree of difficulty
    when switching from one suite to the other, without taking into account the learning
    curve each one has. Codeception tries to bridge this gap of knowledge by using
    a common declarative language. Further, abstractions provide a comfortable environment
    that makes maintenance simple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to debug**: Codeception is born with the ability to see what''s behind
    the scenes without messing around with the configuration files or doing random
    `print_r` around your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On top of this all, Codeception has also been written with modularity and extensibility
    in mind, so that organizing your code is simple while also promoting code reuse
    throughout your tests.
  prefs: []
  type: TYPE_NORMAL
- en: But let's see what's provided by Codeception in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Types of tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''ve seen, Codeception provides three basic types of test:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each one of them is self-contained in its own folder where you can find anything
    needed, from the configuration and the actual tests to any additional piece of
    information that is valuable, such as the fixtures, database snapshots, or specific
    data to be fed to your tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start writing tests, you need to initialize all the required classes
    that will allow you to run your tests, and you can do this by invoking `codecept`
    with the `build` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `codecept build` command needs to be run every time you modify any configuration
    file owned by Codeception when adding or removing any module, in other words,
    whenever you modify any of the `.suite.yml` files available in the `/tests` folder.
  prefs: []
  type: TYPE_NORMAL
- en: What you have probably already noticed in the preceding output is the presence
    of a very peculiar naming system for the test classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Codeception introduces the **Guys** that have been renamed in Yii terminology
    as **Testers**, and are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AcceptanceTester`: This is used for acceptance tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FunctionalTester`: This is used for functional tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnitTester`: This is used for unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These will become your main interaction points with (most of) the tests and
    we will see why. By using such nomenclature, Codeception shifts the point of attention
    from the code itself to the person that is meant to be *acting* the tests you
    will be writing.
  prefs: []
  type: TYPE_NORMAL
- en: This way we will become more fluent in thinking in a more BDD-like mindset rather
    than trying to figure out all the possible solutions that could be covered, while
    losing the focus of what we're trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, BDD is an improvement over TDD, because it declares in a more detailed
    way what needs to be tested and *what doesn't*.
  prefs: []
  type: TYPE_NORMAL
- en: AcceptanceTester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AcceptanceTester` can be seen as a person who does not have any knowledge
    of the technologies used and tries to verify the acceptance criteria that have
    been defined at the beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to re-write our previously defined acceptance tests in a more standardized
    BDD way, we need to remember the structure of a so-called *user story*. The story
    should have a clear title, a short introduction that specifies the *role* that
    is involved in obtaining a certain *result* or *effect*, and the *value* that
    this will reflect. Following this, we will then need to specify the various scenarios
    or *acceptance criteria*, which are defined by outlining the initial *scenario*,
    the *trigger event*, and the *expected outcome* in one or more clauses.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss login using a modal window, which is one of the two features we
    are going to implement in our application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Story title – successful user login**'
  prefs: []
  type: TYPE_NORMAL
- en: I, as an acceptance tester, want to log in into the application from any page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**: Log in from the homepage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am on the homepage.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I click on the login link.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I enter my username.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I enter my password.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I press submit.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The login link now reads "logout (<username>)" and I'm still on the homepage.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scenario 2**: Log in from a secondary page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am on a secondary page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I click on the login link.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I enter my username.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I enter my password.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: I press Submit.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The login link now reads "logout (<username>)" and I'm still on the secondary
    page.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: As you might have noticed I am limiting the preceding example to successful
    cases. There is more than this, and we will discuss in more detail all the relevant
    stories and scenarios before we implement the actual features further on in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding story can be immediately translated into something along the
    lines of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see this is totally straightforward and easy to read, to the point
    that anyone in the business should be able to write any case scenario (this is
    an overstatement, but you get the idea).
  prefs: []
  type: TYPE_NORMAL
- en: 'Clearly, the only thing that is needed to understand is what the `AcceptanceTester`
    is able to do: The class generated by the `codecept build` command can be found
    in `tests/codeception/acceptance/AcceptanceTester.php`, which contains all the
    available methods. You might want to skim through it if you need to understand
    how to assert a particular condition or perform an action on the page. The online
    documentation available at [http://codeception.com/docs/04-AcceptanceTests](http://codeception.com/docs/04-AcceptanceTests)
    will also give you a more readable way to get this information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget that at the end `AcceptanceTester` is just a name of a class,
    which is defined in the YAML file for the specific test type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Acceptance tests are the topmost level of tests, as some sort of high-level
    user-oriented integration tests. Because of this, acceptance tests end up using
    an almost real environment, where no mocks or fakes are required. Clearly, we
    would need some sort of initial state that we can revert to, particularly if we're
    causing actions that modify the state of the database.
  prefs: []
  type: TYPE_NORMAL
- en: As per Codeception documentation, we could have used a snapshot of the database
    to be loaded at the beginning of each test. Unfortunately, I didn't have much
    luck in finding this feature working. So later on, we'll be forced to use the
    fixtures. Everything will then make more sense.
  prefs: []
  type: TYPE_NORMAL
- en: When we will write our acceptance tests, we will also explore the various modules
    that you can also use with it, such as PHPBrowser and Selenium WebDriver and their
    related configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: FunctionalTester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we said earlier, `FunctionalTester` represents our character when dealing
    with functional tests.
  prefs: []
  type: TYPE_NORMAL
- en: You might think of functional tests as a way to leverage on the correctness
    of the implementation from a higher standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to implement functional tests bears the same structure as that of acceptance
    tests, to the point that most of the time the code we''ve written for an acceptance
    test in Codeception can be easily swapped with that for a functional test, so
    you might ask yourself: "where are the differences?"'
  prefs: []
  type: TYPE_NORMAL
- en: It must be noted that the concept of functional tests is something specific
    to Codeception and can be considered almost the same as that of integration tests
    for the mid-layer of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important thing is that functional tests do not require a web server
    to run, and they''re called **headless**: For this reason, they are not only quicker
    than acceptance tests, but also less "real" with all the implications of running
    on a specific environment. And it''s not the case that the acceptance tests provided
    by default by the basic application are, almost, the same as the functional tests.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, and as highlighted in [Chapter 2](ch02.html "Chapter 2. Tooling
    up for Testing"), *Tooling up for Testing*, we will end up having more functional
    tests that will cover more use cases for specific parts of our application.
  prefs: []
  type: TYPE_NORMAL
- en: '`FunctionalTester` is somehow setting the `$_GET`, `$_POST` and `$_REQUEST`
    variables and running the application from within a test. For this reason, Codeception
    ships with modules that let it interact with the underlying framework, be it Symfony2,
    Laravel4, Zend, or, in our case, Yii 2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the configuration file, you will notice the module for Yii 2 already enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`FunctionalTester` has got a better understanding of the technologies used
    although he might not have the faintest idea of how the various features he''s
    going to test have been implemented in detail; he just knows the specifications.'
  prefs: []
  type: TYPE_NORMAL
- en: This makes a perfect case for the functional tests to be owned or written by
    the developers or anyone that is close to the knowledge of how the various features
    have been exposed for general consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'The base functionality of the REST application, exposed through the API, will
    also be heavily tested, and in this case, we will have the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: I can use POST to send correct authentication data and will receive a JSON containing
    the successful authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I can use POST to send bad authentication data and will receive a JSON containing
    the unsuccessful authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a correct authentication, I can use GET to retrieve the user data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a correct authentication, I will receive an error when doing a GET for
    a user stating that it's me
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I can use POST to send my updated hashed password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without a correct authentication, I cannot perform any of the preceding actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most important thing to remember is that at the end of each test, it''s
    your responsibility to keep the memory clean: The PHP application will not terminate
    after processing a request. All requests happening in the same memory container
    are not isolated.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you see your tests failing for some unknown reason when they shouldn't, try
    to execute a single test separately.
  prefs: []
  type: TYPE_NORMAL
- en: UnitTester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've left `UnitTester` for the end as it's a very special guy. For all we know,
    until now, Codeception must have used some other framework to cover unit tests,
    and we're pretty much sure that PHPUnit is the only candidate to achieve this.
    If any of you have already worked with PHPUnit, you will remember the learning
    curve together with the initial problem of understanding its syntax and performing
    even the simplest of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'I found that most developers have a love-and-hate relationship with PHPUnit:
    either you learn its syntax or you spend half of the time looking at the manual
    to get to a single point. And I won''t blame you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see that Codeception will come to our aid once again if we''re struggling
    with tests: remember that these unit tests are the simplest and most atomic part
    of the work we''re going to test. Together with them come the integration tests
    that cover the interaction of different components, most likely with the use of
    fake data and fixtures.'
  prefs: []
  type: TYPE_NORMAL
- en: As we will see in [Chapter 4](ch04.html "Chapter 4. Isolated Component Testing
    with PHPUnit"), *Isolated Component Testing with PHPUnit*, if you're used to working
    with PHPUnit, you won't find any particular problems writing tests; otherwise,
    you can make use of `UnitTester` and implement the same tests by using the Verify
    and Specify syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '`UnitTester` assumes a deep understanding of the signature and how the infrastructure
    and framework work, so these tests can be considered the cornerstone of testing.'
  prefs: []
  type: TYPE_NORMAL
- en: They are super fast to run, compared to any other type of test, and they should
    also be relatively easy to write.
  prefs: []
  type: TYPE_NORMAL
- en: You can start with adequately simple assertions and move to data providers before
    needing to deal with fixtures. More of this is covered in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Other features provided by Codeception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On top of the types of tests, Codeception provides some more aids to help you
    organize, modularize, and extend your test code.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, functional and acceptance tests have a very plain and declarative
    structure, and all the code and the scenarios related to specific acceptance criteria
    are kept in the same file at the same level and these are executed linearly.
  prefs: []
  type: TYPE_NORMAL
- en: In most of the situations, as it is in our case, this is good enough, but when
    your code starts growing and the number of components and features become more
    and more complex, the list of scenarios and steps to perform an acceptance or
    functional test can be quite lengthy.
  prefs: []
  type: TYPE_NORMAL
- en: Further, some tests might end up depending on others, so you might want to start
    considering writing more compact scenarios and promote code reuse throughout your
    tests or split your test into two or more tests.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your code needs a better organization and structure, you might want
    to start generating `CEST` classes instead of normal tests, which are called `CEPT`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `CEST` class groups the scenarios all together as methods as highlighted
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Any method that is not preceded by the underscore is considered a test, and
    the reserved methods `_before` and `_after` are executed at the beginning and
    at the end of the list of tests contained in the test class, while the `_fail`
    method is used as a cleanup method in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: This alone might not be enough, and you can use document annotations to create
    reusable code to be run before and after the tests with the use of `@before <methodName>`
    and `@after <methodName>`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also be stricter and require a specific test to pass before any other
    by using the document annotation `@depends <methodName>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use some of these document annotations, but before we start
    installing Codeception, I''d like to highlight two more features: **PageObjects**
    and **StepObjects**.'
  prefs: []
  type: TYPE_NORMAL
- en: The PageObject is a common pattern amongst test automation engineers. It represents
    a web page as a class, where its DOM elements are properties of the class, and
    methods instead provide some basic interactions with the page. The main reason
    for using PageObjects is to avoid hardcoding CSS and XPATH locators in your tests.
    Yii provides some example implementation of the PageObjects used in `/tests/codeception/_pages`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'StepObject is another way to promote code reuse in your tests: It will define
    some common actions that can be used in several tests. Together with PageObjects,
    StepObjects can become quite powerful. StepObject extends the `Tester` class and
    can be used to interact with the PageObject. This way your tests will become less
    dependent on a specific implementation and will save you the cost of refactoring
    when the markup and the way to interact with each component in the page changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For future reference, you can find all of these in the Codeception documentation
    in the section regarding the advanced use at [http://codeception.com/docs/07-AdvancedUsage](http://codeception.com/docs/07-AdvancedUsage)
    together with other features, like grouping and an interactive console that you
    can use to test your scenarios at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Codeception in Yii 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen what we can theoretically do with Codeception, let's move
    on and install it.
  prefs: []
  type: TYPE_NORMAL
- en: Yii comes with its own Codeception extension that provides a base class for
    unit tests (`yii\codeception\TestCase`), a class for tests that require database
    interaction (`yii\codeception\DbTestCase`), and a base class for Codeception page
    objects (`yii\codeception\BasePage`).
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, our preferred method is using Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a specific reason to use `–prefer-dist`; if you''re using Git, you
    can get into a hairy situation with Git submodules (but again excluding the `/vendor`
    folder should solve most of these problems). To avoid repeating it every time
    we use Composer, just add the following to your `composer.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, remember that using `composer install` will not work if you''ve added
    the component manually to your `composer.json` file as it would consider it a
    mismatch and raise an error. To install the package, you need to run `composer
    update` either for all the packages you have installed, or specifically with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As highlighted before, you might also be interested in two additional packages
    `codeception/specify` and `codeception/verify`. These two packages provide a further
    level of abstraction that allows you to write more human readable tests by using
    a business-oriented syntax, close to what BDD definitions will look like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `composer.json` file will contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finding your way around Codeception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All our tests are available within the `/tests/codeception` folder. In version
    2.0 this folder contains directly all the suites and configuration files needed
    by them and Codeception as well. The following configuration steps are based on
    this structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'By listing the content of the `/tests` folder, we will see the main Codeception
    configuration file, while each single suite has its own configuration file inside
    of the `/tests/codeception` folder, which we can modify accordingly to override
    or further configure our tests. Starting from our `/tests` folder, the following
    are the configuration files we will be dealing with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`codeception.yml`: This is for all the suites and Codeception in general'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`codeception/acceptance.suite.yml`: This is for the acceptance tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`codeception/functional.suite.yml`: This is for the functional tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`codeception/unit.suite.yml`: This is for the unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Together with these files, there are some additional configuration files that
    are mostly needed by Yii: `_bootstrap.php` and the content of the `config/` folder.
    The underscore prefixing some of these files just marks them in a way such that
    Codeception will ignore them. Keep this in mind in case you need to create new
    files in the various suite folders.'
  prefs: []
  type: TYPE_NORMAL
- en: Within the `/tests/codeception` folder, you will find the folders containing
    the tests for each single testing suite, `unit/`, `functional/`, and `acceptance/`.
    Each of them will contain a `_bootstrap.php` file for the suite, the actual tests,
    and other folders for fixtures for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The few other folders contained in `/tests/codeception` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin/`: It contains the test-bound `yii` CLI command, which we will use to
    run migrations against our test database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_data/`: It contains a snapshot of the database (`dump.sql`) normally used
    to bring it to an initial state for the acceptance tests, but it can contain anything,
    for instance, this folder will be used by Codeception in case you want it to generate
    (and publish) the various scenarios from the tests you''ve created in plain English
    (run the `codecept help generate:scenarios` command for more information).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_output/`: This folder will become quite useful, as it will contain the output
    of the fetched pages when your acceptance or functional tests are failing, giving
    you another way to inspect and understand what''s wrong.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_pages/`: This is where Codeception page objects are stored. There are already
    three page objects provided by the basic application, namely `AboutPage.php`,
    `ContactPage.php`, and `LoginPage.php`. We will explore this part further down
    the line as they will prove to be extremely useful as they simplify our lives
    quite substantially and promote modularity and reuse of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_support/`: This is used for additional support files, which currently hold
    the `FixtureHelper` class used to populate the database with the provided fixtures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Codeception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we should pretty much know where all the configuration files live, so we're
    going to review their content and adjust it before we can start interacting with
    Codeception and first run all the provided tests and then our own tests.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the YAML configuration files for the different suites.
  prefs: []
  type: TYPE_NORMAL
- en: 'The acceptance tests are configured by default to use PHPBrowser. We will see
    how things need to be adjusted to use Selenium WebDriver, but generally speaking,
    both tools require at least a URL to access our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The default URL is `http://localhost:8080`, which you won't need to change when,
    for instance, you're using Vagrant or the PHP built-in server. In the preceding
    example, I've set up a custom domain name; this is not required in order to run
    your tests as it might require additional configuration steps that won't be needed,
    unless you're in a larger environment and your configuration is a bit more complex
    (for instance in case your tests are being executed remotely). We'll see more
    of this in the final chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Please also note that you don't need to specify the entry file, `index-test.php`,
    as you want Yii to resolve the routing for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The base URL for our application isn''t needed for our functional tests, as
    I highlighted before. In fact what Codeception cares about for our functional
    tests is the entry script for the application: all the functionality is provided
    by the `yii2-codeception` package (which should come pre-installed in your application),
    so in the configuration file, you have just a reference pointing to the configuration
    of your test application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Heading over to this file, we will find that at the very beginning we have
    a couple of `$_SERVER` variables set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'These two constants have been defined in the overall Yii bootstrap file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In other words, the entry file is always the one found in `/web/index-test.php`
    while the URL can be configured in the main configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to adjust the hostname to the one you will use, or leave the default,
    which is `localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: For unit tests, there isn't much to be configured, as Codeception is just wrapping
    around PHPUnit, and the two packages, *verify* and *specify*, will work out of
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing left to update is the configuration of the database: as we said
    earlier, currently, you can simply update the DSN in `/tests/codeception/config/config.php`,
    in the same way that the main Yii database configuration is defined.'
  prefs: []
  type: TYPE_NORMAL
- en: Tests available in Yii 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compared to what Yii 1 was offering, Yii 2 now comes with examples of working
    tests for any suite of tests available. This is a great thing as it would help
    us understand how to structure and implement our tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve got the server running and all the configuration set up properly,
    we can just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run all the tests and see them passing. At the end, you will see
    a nice summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The tests provided for acceptance and functional tests are quite self-explanatory;
    they're basically ensuring the four pages, namely the homepage, the about page,
    the contact page and the login page, available in the basic application work as
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tests are exactly the same, with the only difference that acceptance
    tests take into consideration the ability for you to run the tests via Selenium
    and include specific directives for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is just an example, and it shouldn't really matter to you right now, as
    we're going to see how Selenium WebDriver works in detail further down the line
    in [Chapter 7](ch07.html "Chapter 7. Having Fun Doing Browser Testing"), *Having
    Fun Doing Browser Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: The unit tests shipped by Yii 2 are the ones that are unsurprisingly different;
    they mostly cover integration tests between various components, for instance,
    for the login form and the contact form, while they leave to us the burden of
    implementing any test for the user. We will get there, in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing worth noticing in the unit tests is that they make use of *Specify*
    for a more declarative way to write units, instead of the more common PHPUnit
    syntax. Again, this is just syntactic sugar and it might be easier for you to
    start with it.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Codeception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve seen two arguments of the `codecept` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build`: This is used for building the "testers" and any additional code when
    using any additional module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run`: This is used to execute the tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are a few parameters you can invoke `run` with that I''d like to bring
    to your attention, as these will come handy when running and debugging the tests.
    The syntax of the `run` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'First of all, you can run a specific suite, such as unit, acceptance, or functional,
    or be more specific and run a single test file, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, you can also use the `--steps` option, which is a
    way to be more verbose showing all the single steps taken by your tests while
    running them.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you also have `--debug`, which will not only show the steps taken
    by your application, but also display what's happening behind the scenes, such
    as the POST request of data to a specific URL, the loading of a page, or the list
    of cookies set.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While running tests and seeing them passing will be all you care about once
    you've written your tests, you first need to write them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Codeception helps us get started by providing a code generation argument on
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`generate:cept`: This is used for generating CEPT tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate:cest`: This is used for generating CEST tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate:phpunit`: This is used for generating PHPUnit tests, without the
    Codeception additions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate:test`: This is used for generating unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the preceding arguments will require as parameters the suite name and the
    name of the file to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can review these and more commands by running `codecept` without arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Migrations on the test database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the things that I have found particularly handy and that we're going
    to use extensively is the ability to run the same migrations that we will create
    for our application on your test database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Migrations are a concept that is not exclusive to Yii, and you can read more
    about it in the documentation at [http://www.yiiframework.com/doc-2.0/guide-db-migrations.html](http://www.yiiframework.com/doc-2.0/guide-db-migrations.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the `/tests/codeception/bin/` folder, you will find the `yii` CLI command
    line that you can use against the test database you've configured previously to
    run the migrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you''re in the root of your project, the following sequence of commands
    will show you how to run the migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `yii` CLI is exactly the same as the main one residing in the root of your
    project, with the only difference that it will read the test configuration, particularly
    the one regarding the database.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we came to appreciate the breadth and the quality of Codeception.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen the three types of tests, namely unit, functional, and acceptance,
    which we'll be using throughout the rest of the book. We've also touched some
    additional features provided by the tool and by the Yii 2 Codeception module.
    We've learned how to interact with it, generate tests, and deal with debugging
    and keeping the test databases in sync with the database of the main application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to start refactoring our `User` class, adding
    our tests first and progressing through all the most important PHPUnit features.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
