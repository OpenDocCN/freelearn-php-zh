- en: Chapter 3. Entering Codeception
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。进入Codeception
- en: After the installation of Yii 2, as discussed in the previous chapter, in this
    chapter we will cover installation of the Codeception suite ([http://codeception.com](http://codeception.com))
    and go through the folder structure to describe how Codeception works, its extensions,
    modularization, syntax, and the jargon used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章讨论的Yii 2安装之后，在这一章中，我们将介绍Codeception套件的安装（[http://codeception.com](http://codeception.com)）并遍历文件夹结构，描述Codeception是如何工作的，它的扩展，模块化，语法以及使用的术语。
- en: 'We will need to have a good grasp of its concepts and details as Codeception
    will become the main tool we will use to interact with our tests throughout the
    rest of this book. In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对其概念和细节有一个很好的掌握，因为Codeception将成为我们在本书剩余部分与测试交互的主要工具。在这一章中，我们将涵盖以下主题：
- en: Getting started with Codeception
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Codeception
- en: Installing Codeception in Yii 2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Yii 2中安装Codeception
- en: Finding your way around Codeception
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Codeception中找到你的路径
- en: Interacting with Codeception
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Codeception交互
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please keep in mind that the folder structure of Yii 2 might change when it
    reaches a stable release (which might be after the release of this book) and together
    with it, the structure used to organize tests. Always try to take notes and understand
    what you're looking at, since the way Codeception works and interacts with Yii
    won't massively change, if not improve.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当Yii 2达到稳定版本时（可能是在本书发布之后），其文件夹结构可能会发生变化，以及用于组织测试的结构。始终尝试做笔记并理解你所看到的内容，因为Codeception的工作方式和与Yii的交互方式不会发生重大变化，如果不是改善的话。
- en: Getting started with Codeception
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Codeception
- en: 'Not everyone has been exposed to testing. The ones who actually have are aware
    of the quirks and limitations of the testing tools they''ve used. Some might be
    more efficient than others, and in either case, you had to rely on the situation
    that was presented to you: legacy code, hard to test architectures, no automation,
    no support whatsoever on the tools, and other setup problems, just to name a few.
    Only certain companies, because they have either the right skillsets or the budget,
    invest in testing, but most of them don''t have the capacity to see beyond the
    point that quality assurance is important. Getting the testing infrastructure
    and tools in place is the immediate step following getting developers to be responsible
    for their own code and to test it.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个人都接触过测试。真正接触过的人都知道他们所使用的测试工具的怪癖和限制。有些可能比其他更有效率，但在任何情况下，你都必须依赖于你所面对的情况：遗留代码、难以测试的架构、没有自动化、工具没有支持，以及其他设置问题，仅举几例。只有某些公司，因为它们拥有正确的技能集或预算，才会投资于测试，但大多数公司没有能力看到质量保证的重要性。在让开发者对自己的代码负责并进行测试之后，建立测试基础设施和工具是紧接着的下一步。
- en: Even if testing is something not particularly new in the programming world,
    PHP always had a weak point regarding it. Its history is not the one of a pure-bred
    programming language done with all the nice little details, and only just recently
    has PHP found itself in a better position and started to become more appreciated.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在编程世界中，测试并不是什么特别新的东西，PHP在这方面一直有一个弱点。它的历史并不是一个纯种编程语言，没有所有那些细微的细节，而且PHP直到最近才找到了一个更好的位置，开始受到更多的重视。
- en: Because of this, the only and most important tool that came out has been PHPUnit,
    which was released just 10 years ago, in 2004, thanks to the efforts of Sebastian
    Bergmann.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，唯一且最重要的工具就是PHPUnit，它是在10年前，2004年发布的，归功于Sebastian Bergmann的努力。
- en: PHPUnit was and sometimes is still difficult to master and understand. It requires
    time and dedication, particularly if you are coming from a non-testing experience.
    PHPUnit simply provided a low-level framework to implement unit tests and, up
    to a certain point, integration tests, with the ability to create mocks and fakes
    when needed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit曾经是，有时至今仍然难以掌握和理解。它需要时间和投入，尤其是如果你是从非测试经验过来的。PHPUnit仅仅提供了一个低级框架来实施单元测试，以及在一定范围内，集成测试，并在需要时能够创建模拟和伪造对象。
- en: Although it still is the quickest way to discover bugs, given the limitations
    we've seen in the previous chapters, it didn't cover everything and using it to
    create large integration tests will end up being an almost impossible task.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它仍然是发现bug的最快方式，但鉴于我们在前几章中看到的限制，它并没有涵盖所有内容，使用它来创建大型集成测试最终将是一项几乎不可能完成的任务。
- en: On top of this, PHPUnit since version 3.7, when it switched to a different autoloading
    mechanism and moved away from PEAR, caused several headaches rendering most of
    the installations unusable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从3.7版本开始，PHPUnit切换到不同的自动加载机制，并远离了PEAR，这导致了许多头痛的问题，使得大多数安装变得无法使用。
- en: Other tools developed since mostly come from other environments and requirements,
    programming languages, and frameworks. Some of these tools were incredibly strong
    and well-built, but they came with their own way of declaring tests and interacting
    with the application, set of rules, and configuration specifics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自那时以来开发的其他工具大多来自其他环境和需求，编程语言和框架。其中一些工具非常强大且构建良好，但它们带来了自己声明测试和与应用程序交互的方式，一套规则和配置细节。
- en: A modular framework rather than just another tool
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个模块化框架，而不仅仅是另一个工具
- en: Clearly, mastering all these tools required a bit of understanding, and the
    learning curve wasn't promised to be the same among all of them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，掌握所有这些工具需要一定的理解，而且学习曲线并不保证在所有工具中都是相同的。
- en: So, if this is the current panorama, why create another tool if you will end
    up in the same situation we were in before?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果这是当前的格局，为什么还要创建另一个工具，如果你最终会陷入我们之前所处的相同境地呢？
- en: Well, one of the most important things to be understood about Codeception is
    that it's not just a tool, rather a full stack, as noted on the Codeception site,
    a suite of frameworks, or if you want to go meta, a framework for frameworks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，关于Codeception需要理解的最重要的事情之一是，它不仅仅是一个工具，而是一个完整的栈，正如Codeception网站所注明的，一套框架，或者如果你愿意更元地看待它，一个框架的框架。
- en: Codeception provides a uniform way to design different types of test by using
    as much as possible the same semantic and logic, a way to make the whole testing
    infrastructure more coherent and approachable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception通过尽可能使用相同的语义和逻辑来设计不同类型的测试，从而提供了一种使整个测试基础设施更加一致和易于接近的方法。
- en: Outlining concepts behind Codeception
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阐述Codeception背后的概念
- en: 'Codeception has been created with the following basic concepts in mind:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception的创建是基于以下基本概念：
- en: '**Easy to read**: By using a declarative syntax close to the natural language,
    tests can be read and interpreted quite easily, making them an ideal candidate
    to be used as documentation for the application. Any stakeholder and engineer
    close to the project can ensure that tests are written correctly and cover the
    required scenarios without knowing any special lingo. It can also generate BDD-style
    test scenarios from code test cases.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于阅读**：通过使用接近自然语言的声明性语法，测试可以很容易地阅读和解释，这使得它们成为用作应用程序文档的理想候选者。任何接近项目的利益相关者和工程师都可以确保测试被正确编写并覆盖所需的场景，而无需了解任何特殊术语。它还可以从代码测试用例生成BDD风格的测试场景。'
- en: '**Easy to write**: As we already underlined, every testing framework uses its
    own syntax or language to write tests, resulting in some degree of difficulty
    when switching from one suite to the other, without taking into account the learning
    curve each one has. Codeception tries to bridge this gap of knowledge by using
    a common declarative language. Further, abstractions provide a comfortable environment
    that makes maintenance simple.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于编写**：正如我们之前强调的，每个测试框架都使用自己的语法或语言来编写测试，这导致在从一个套件切换到另一个套件时存在一定程度的难度，而没有考虑到每个套件的学习曲线。Codeception试图通过使用一种常见的声明性语言来弥合这种知识差距。此外，抽象提供了一个舒适的环境，使得维护变得简单。'
- en: '**Easy to debug**: Codeception is born with the ability to see what''s behind
    the scenes without messing around with the configuration files or doing random
    `print_r` around your code.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于调试**：Codeception天生具有在不乱动配置文件或在你代码周围随机使用`print_r`的情况下查看幕后情况的能力。'
- en: On top of this all, Codeception has also been written with modularity and extensibility
    in mind, so that organizing your code is simple while also promoting code reuse
    throughout your tests.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些之上，Codeception还考虑了模块化和可扩展性，这使得组织代码变得简单，同时也在测试中促进了代码的重用。
- en: But let's see what's provided by Codeception in more detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们更详细地看看Codeception提供了什么。
- en: Types of tests
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试类型
- en: 'As we''ve seen, Codeception provides three basic types of test:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，Codeception提供了三种基本的测试类型：
- en: Unit tests
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional tests
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Acceptance tests
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受测试
- en: Each one of them is self-contained in its own folder where you can find anything
    needed, from the configuration and the actual tests to any additional piece of
    information that is valuable, such as the fixtures, database snapshots, or specific
    data to be fed to your tests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个都包含在其自己的文件夹中，你可以在这里找到所需的一切，从配置和实际测试到任何有价值的信息，例如夹具、数据库快照或要提供给测试的特定数据。
- en: 'In order to start writing tests, you need to initialize all the required classes
    that will allow you to run your tests, and you can do this by invoking `codecept`
    with the `build` argument:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始编写测试，你需要初始化所有必要的类，这将允许你运行测试，你可以通过使用带有`build`参数的`codecept`来做到这一点：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `codecept build` command needs to be run every time you modify any configuration
    file owned by Codeception when adding or removing any module, in other words,
    whenever you modify any of the `.suite.yml` files available in the `/tests` folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每次当你修改Codeception拥有的任何配置文件，添加或删除任何模块时，都需要运行`codecept build`命令，换句话说，每次你修改`/tests`文件夹中可用的`.suite.yml`文件中的任何内容时。
- en: What you have probably already noticed in the preceding output is the presence
    of a very peculiar naming system for the test classes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到的前一个输出中存在一个非常独特的测试类命名系统。
- en: 'Codeception introduces the **Guys** that have been renamed in Yii terminology
    as **Testers**, and are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception引入了被Yii术语重命名为**测试者**的**Guys**，如下所示：
- en: '`AcceptanceTester`: This is used for acceptance tests'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AcceptanceTester`：这用于验收测试'
- en: '`FunctionalTester`: This is used for functional tests'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FunctionalTester`：这用于功能测试'
- en: '`UnitTester`: This is used for unit tests'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnitTester`：这用于单元测试'
- en: These will become your main interaction points with (most of) the tests and
    we will see why. By using such nomenclature, Codeception shifts the point of attention
    from the code itself to the person that is meant to be *acting* the tests you
    will be writing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将成为你与（大多数）测试的主要交互点，我们将看到原因。通过使用这样的命名法，Codeception将注意力从代码本身转移到那些将要*执行*你将要编写的测试的人。
- en: This way we will become more fluent in thinking in a more BDD-like mindset rather
    than trying to figure out all the possible solutions that could be covered, while
    losing the focus of what we're trying to achieve.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就会更加熟练地以BDD思维模式思考，而不是试图找出所有可能被覆盖的解决方案，同时失去我们试图实现的目标的焦点。
- en: Once again, BDD is an improvement over TDD, because it declares in a more detailed
    way what needs to be tested and *what doesn't*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，BDD比TDD是一个改进，因为它以更详细的方式声明了需要测试的内容以及*不需要测试的内容*。
- en: AcceptanceTester
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AcceptanceTester
- en: '`AcceptanceTester` can be seen as a person who does not have any knowledge
    of the technologies used and tries to verify the acceptance criteria that have
    been defined at the beginning.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`AcceptanceTester`可以看作是一个对所使用的技术一无所知的人，试图验证最初定义的验收标准。'
- en: If we want to re-write our previously defined acceptance tests in a more standardized
    BDD way, we need to remember the structure of a so-called *user story*. The story
    should have a clear title, a short introduction that specifies the *role* that
    is involved in obtaining a certain *result* or *effect*, and the *value* that
    this will reflect. Following this, we will then need to specify the various scenarios
    or *acceptance criteria*, which are defined by outlining the initial *scenario*,
    the *trigger event*, and the *expected outcome* in one or more clauses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要以前定义的验收测试以更标准化的BDD方式进行重写，我们需要记住所谓的*用户故事*的结构。故事应该有一个清晰的标题，一个简短介绍，指定参与获得一定*结果*或*效果*的*角色*，以及这将反映的*价值*。随后，我们需要指定各种场景或*验收标准*，这些通过概述初始*场景*、*触发事件*和*预期结果*在一个或多个子句中定义。
- en: Let's discuss login using a modal window, which is one of the two features we
    are going to implement in our application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论使用模态窗口进行登录，这是我们将在应用程序中实现的两个功能之一。
- en: '**Story title – successful user login**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**故事标题 – 成功的用户登录**'
- en: I, as an acceptance tester, want to log in into the application from any page.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我，作为一个验收测试者，希望从任何页面登录到应用程序。
- en: '**Scenario 1**: Log in from the homepage'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 1**：从主页登录'
- en: I am on the homepage.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我在主页上。
- en: I click on the login link.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我点击登录链接。
- en: I enter my username.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我输入我的用户名。
- en: I enter my password.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我输入我的密码。
- en: I press submit.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我点击提交。
- en: The login link now reads "logout (<username>)" and I'm still on the homepage.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录链接现在显示为“注销 (<用户名>)”，而我仍然在主页上。
- en: '**Scenario 2**: Log in from a secondary page'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 2**：从次要页面登录'
- en: I am on a secondary page.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我在二级页面上。
- en: I click on the login link.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我点击了登录链接。
- en: I enter my username.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我输入我的用户名。
- en: I enter my password.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我输入我的密码。
- en: I press Submit.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我按下提交按钮。
- en: The login link now reads "logout (<username>)" and I'm still on the secondary
    page.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录链接现在显示为“注销 (<用户名>)”，我仍然在二级页面上。
- en: As you might have noticed I am limiting the preceding example to successful
    cases. There is more than this, and we will discuss in more detail all the relevant
    stories and scenarios before we implement the actual features further on in this
    book.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，我正在将前面的例子限制在成功案例中。还有更多，我们将在本书进一步实现实际功能之前，更详细地讨论所有相关的故事和场景。
- en: 'The preceding story can be immediately translated into something along the
    lines of the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的故事可以立即翻译成以下代码：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see this is totally straightforward and easy to read, to the point
    that anyone in the business should be able to write any case scenario (this is
    an overstatement, but you get the idea).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这完全直截了当且易于阅读，以至于业务中的任何人都能编写任何案例场景（这是一个夸张的说法，但你应该明白这个意思）。
- en: 'Clearly, the only thing that is needed to understand is what the `AcceptanceTester`
    is able to do: The class generated by the `codecept build` command can be found
    in `tests/codeception/acceptance/AcceptanceTester.php`, which contains all the
    available methods. You might want to skim through it if you need to understand
    how to assert a particular condition or perform an action on the page. The online
    documentation available at [http://codeception.com/docs/04-AcceptanceTests](http://codeception.com/docs/04-AcceptanceTests)
    will also give you a more readable way to get this information.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们需要理解的是`AcceptanceTester`能够做什么：由`codecept build`命令生成的类可以在`tests/codeception/acceptance/AcceptanceTester.php`中找到，其中包含所有可用方法。如果你需要了解如何断言特定条件或对页面执行操作，你可能想浏览一下。[http://codeception.com/docs/04-AcceptanceTests](http://codeception.com/docs/04-AcceptanceTests)上的在线文档也会以更易读的方式提供这些信息。
- en: 'Don''t forget that at the end `AcceptanceTester` is just a name of a class,
    which is defined in the YAML file for the specific test type:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，在最后`AcceptanceTester`只是一个类的名称，它在YAML文件中定义为特定测试类型：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Acceptance tests are the topmost level of tests, as some sort of high-level
    user-oriented integration tests. Because of this, acceptance tests end up using
    an almost real environment, where no mocks or fakes are required. Clearly, we
    would need some sort of initial state that we can revert to, particularly if we're
    causing actions that modify the state of the database.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试是测试的最高级别，作为一种高级用户导向的集成测试。正因为如此，验收测试最终会使用几乎真实的测试环境，其中不需要任何模拟或伪造。显然，我们需要某种初始状态，我们可以回退到这个状态，尤其是如果我们执行的动作会修改数据库的状态。
- en: As per Codeception documentation, we could have used a snapshot of the database
    to be loaded at the beginning of each test. Unfortunately, I didn't have much
    luck in finding this feature working. So later on, we'll be forced to use the
    fixtures. Everything will then make more sense.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Codeception文档，我们本可以使用数据库快照在每次测试开始时加载。不幸的是，我没有找到这个功能正常工作的。所以后来，我们将被迫使用固定值。然后一切都会更有意义。
- en: When we will write our acceptance tests, we will also explore the various modules
    that you can also use with it, such as PHPBrowser and Selenium WebDriver and their
    related configuration options.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写验收测试时，我们还将探索你可以与之一起使用的各种模块，例如PHPBrowser和Selenium WebDriver及其相关配置选项。
- en: FunctionalTester
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FunctionalTester
- en: As we said earlier, `FunctionalTester` represents our character when dealing
    with functional tests.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说的，`FunctionalTester`代表我们在处理功能测试时的角色。
- en: You might think of functional tests as a way to leverage on the correctness
    of the implementation from a higher standpoint.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将功能测试视为从更高角度利用实现正确性的方式。
- en: 'The way to implement functional tests bears the same structure as that of acceptance
    tests, to the point that most of the time the code we''ve written for an acceptance
    test in Codeception can be easily swapped with that for a functional test, so
    you might ask yourself: "where are the differences?"'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实现功能测试的方式与验收测试的结构相同，以至于我们为Codeception中的验收测试编写的代码大多数时候可以轻松地与功能测试的代码交换，所以你可能自己会问：“差异在哪里？”
- en: It must be noted that the concept of functional tests is something specific
    to Codeception and can be considered almost the same as that of integration tests
    for the mid-layer of your application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 必须注意的是，功能测试的概念是 Codeception 的特定概念，可以被认为是与应用程序中中间层集成测试几乎相同。
- en: 'The most important thing is that functional tests do not require a web server
    to run, and they''re called **headless**: For this reason, they are not only quicker
    than acceptance tests, but also less "real" with all the implications of running
    on a specific environment. And it''s not the case that the acceptance tests provided
    by default by the basic application are, almost, the same as the functional tests.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，功能测试不需要 web 服务器来运行，并且被称为 **无头测试**：因此，它们不仅比验收测试更快，而且由于在特定环境中运行的所有影响，它们也更不“真实”。并且默认情况下由基本应用程序提供的验收测试几乎与功能测试相同。
- en: Because of this, and as highlighted in [Chapter 2](ch02.html "Chapter 2. Tooling
    up for Testing"), *Tooling up for Testing*, we will end up having more functional
    tests that will cover more use cases for specific parts of our application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，并且正如在[第 2 章](ch02.html "第 2 章。为测试做准备")中强调的，“为测试做准备”，我们将最终拥有更多的功能测试，这些测试将涵盖我们应用程序特定部分更多的用例。
- en: '`FunctionalTester` is somehow setting the `$_GET`, `$_POST` and `$_REQUEST`
    variables and running the application from within a test. For this reason, Codeception
    ships with modules that let it interact with the underlying framework, be it Symfony2,
    Laravel4, Zend, or, in our case, Yii 2.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`FunctionalTester` 以某种方式设置了 `$_GET`、`$_POST` 和 `$_REQUEST` 变量，并在测试中运行应用程序。因此，Codeception
    随带模块，允许它与底层框架交互，无论是 Symfony2、Laravel4、Zend，还是在我们的案例中，Yii 2。'
- en: 'In the configuration file, you will notice the module for Yii 2 already enabled:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，你会注意到为 Yii 2 启用的模块：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`FunctionalTester` has got a better understanding of the technologies used
    although he might not have the faintest idea of how the various features he''s
    going to test have been implemented in detail; he just knows the specifications.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`FunctionalTester` 对所使用的技术的理解更好，尽管他可能对将要测试的各种功能如何详细实现一无所知；他只知道规格说明。'
- en: This makes a perfect case for the functional tests to be owned or written by
    the developers or anyone that is close to the knowledge of how the various features
    have been exposed for general consumption.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是功能测试应由开发者或任何接近了解如何将各种功能公开给大众的人拥有或编写的一个完美案例。
- en: 'The base functionality of the REST application, exposed through the API, will
    also be heavily tested, and in this case, we will have the following scenarios:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 API 暴露的 REST 应用程序的基本功能也将进行大量测试，在这种情况下，我们将有以下场景：
- en: I can use POST to send correct authentication data and will receive a JSON containing
    the successful authentication
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以使用 POST 发送正确的认证数据，并将收到包含成功认证的 JSON
- en: I can use POST to send bad authentication data and will receive a JSON containing
    the unsuccessful authentication
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以使用 POST 发送错误的认证数据，并将收到包含失败认证的 JSON
- en: After a correct authentication, I can use GET to retrieve the user data
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过正确的认证后，我可以使用 GET 来检索用户数据
- en: After a correct authentication, I will receive an error when doing a GET for
    a user stating that it's me
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过正确的认证后，当进行 GET 请求以获取用户信息并指出是我时，我会收到一个错误信息
- en: I can use POST to send my updated hashed password
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以使用 POST 发送我的更新后的哈希密码
- en: Without a correct authentication, I cannot perform any of the preceding actions
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有正确的认证，我无法执行前面的任何操作
- en: 'The most important thing to remember is that at the end of each test, it''s
    your responsibility to keep the memory clean: The PHP application will not terminate
    after processing a request. All requests happening in the same memory container
    are not isolated.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的最重要的事情是，在每个测试结束时，你有责任保持内存清洁：PHP 应用程序在处理请求后不会终止。在同一个内存容器中发生的所有请求都不是隔离的。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you see your tests failing for some unknown reason when they shouldn't, try
    to execute a single test separately.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到你的测试在某些未知原因下失败，而它们本不应该失败，尝试单独执行一个测试。
- en: UnitTester
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试器
- en: I've left `UnitTester` for the end as it's a very special guy. For all we know,
    until now, Codeception must have used some other framework to cover unit tests,
    and we're pretty much sure that PHPUnit is the only candidate to achieve this.
    If any of you have already worked with PHPUnit, you will remember the learning
    curve together with the initial problem of understanding its syntax and performing
    even the simplest of tasks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我将`UnitTester`放在最后，因为它是一个非常特殊的存在。据我们所知，到目前为止，Codeception可能已经使用了一些其他框架来覆盖单元测试，我们相当确信PHPUnit是唯一能够实现这一目标的候选框架。如果你已经使用过PHPUnit，你会记得学习曲线以及理解其语法和执行最简单任务时的初始问题。
- en: 'I found that most developers have a love-and-hate relationship with PHPUnit:
    either you learn its syntax or you spend half of the time looking at the manual
    to get to a single point. And I won''t blame you.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现大多数开发者对PHPUnit有着爱恨交加的关系：要么你学会了它的语法，要么你花了一半的时间查阅手册才能找到一点线索。我不会责怪你。
- en: 'We will see that Codeception will come to our aid once again if we''re struggling
    with tests: remember that these unit tests are the simplest and most atomic part
    of the work we''re going to test. Together with them come the integration tests
    that cover the interaction of different components, most likely with the use of
    fake data and fixtures.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到，如果我们遇到测试难题时，Codeception将再次伸出援手：记住，这些单元测试是我们将要测试的工作中最简单、最原子化的部分。与之相伴的是集成测试，它们覆盖了不同组件的交互，很可能是使用模拟数据和固定值。
- en: As we will see in [Chapter 4](ch04.html "Chapter 4. Isolated Component Testing
    with PHPUnit"), *Isolated Component Testing with PHPUnit*, if you're used to working
    with PHPUnit, you won't find any particular problems writing tests; otherwise,
    you can make use of `UnitTester` and implement the same tests by using the Verify
    and Specify syntax.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](ch04.html "第4章。使用PHPUnit进行隔离组件测试")中将要看到的，*使用PHPUnit进行隔离组件测试*，如果你习惯于使用PHPUnit，你不会在编写测试时遇到任何特别的问题；否则，你可以使用`UnitTester`并通过使用Verify和Specify语法来实现相同的测试。
- en: '`UnitTester` assumes a deep understanding of the signature and how the infrastructure
    and framework work, so these tests can be considered the cornerstone of testing.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`UnitTester`假设对签名和基础设施以及框架的工作有深入的理解，因此这些测试可以被认为是测试的基石。'
- en: They are super fast to run, compared to any other type of test, and they should
    also be relatively easy to write.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何类型的测试相比，它们运行得超级快，而且它们也应该相对容易编写。
- en: You can start with adequately simple assertions and move to data providers before
    needing to deal with fixtures. More of this is covered in the following chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从足够简单的断言开始，在需要处理固定值之前转向数据提供者。更多内容将在下一章中介绍。
- en: Other features provided by Codeception
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Codeception提供的其他功能
- en: On top of the types of tests, Codeception provides some more aids to help you
    organize, modularize, and extend your test code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了测试类型之外，Codeception还提供了一些辅助工具，帮助你组织、模块化并扩展你的测试代码。
- en: As we've seen, functional and acceptance tests have a very plain and declarative
    structure, and all the code and the scenarios related to specific acceptance criteria
    are kept in the same file at the same level and these are executed linearly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，功能测试和验收测试具有非常简单和声明性的结构，所有与特定验收标准相关的代码和场景都保存在同一文件中，并且这些测试是线性执行的。
- en: In most of the situations, as it is in our case, this is good enough, but when
    your code starts growing and the number of components and features become more
    and more complex, the list of scenarios and steps to perform an acceptance or
    functional test can be quite lengthy.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，就像在我们的例子中一样，这已经足够好了，但是当你的代码开始增长，组件和功能的数量变得越来越复杂时，执行验收或功能测试的场景列表和步骤可能会相当长。
- en: Further, some tests might end up depending on others, so you might want to start
    considering writing more compact scenarios and promote code reuse throughout your
    tests or split your test into two or more tests.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些测试可能最终会依赖于其他测试，因此你可能需要开始考虑编写更紧凑的场景，并在你的测试中推广代码重用，或者将测试拆分为两个或更多个测试。
- en: If you feel your code needs a better organization and structure, you might want
    to start generating `CEST` classes instead of normal tests, which are called `CEPT`
    instead.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得你的代码需要更好的组织结构，你可能想要开始生成`CEST`类而不是普通的测试，这些普通的测试被称为`CEPT`。
- en: 'A `CEST` class groups the scenarios all together as methods as highlighted
    in the following snippet:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`CEST`类将所有场景作为一个方法分组，如下面的代码片段所示：'
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Any method that is not preceded by the underscore is considered a test, and
    the reserved methods `_before` and `_after` are executed at the beginning and
    at the end of the list of tests contained in the test class, while the `_fail`
    method is used as a cleanup method in case of failure.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 任何不以下划线开头的函数都被视为测试，而保留方法`_before`和`_after`分别在测试类中测试列表的开始和结束时执行，而`_fail`方法在失败时用作清理方法。
- en: This alone might not be enough, and you can use document annotations to create
    reusable code to be run before and after the tests with the use of `@before <methodName>`
    and `@after <methodName>`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 仅此可能还不够，你可以使用文档注释来创建可重用的代码，在测试前后使用`@before <methodName>`和`@after <methodName>`来运行这些代码。
- en: You can also be stricter and require a specific test to pass before any other
    by using the document annotation `@depends <methodName>`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以更加严格，要求在运行任何其他测试之前先通过特定的测试，可以使用文档注释`@depends <methodName>`来实现。
- en: 'We''re going to use some of these document annotations, but before we start
    installing Codeception, I''d like to highlight two more features: **PageObjects**
    and **StepObjects**.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用其中的一些文档注释，但在开始安装Codeception之前，我想强调两个额外的功能：**PageObjects**和**StepObjects**。
- en: The PageObject is a common pattern amongst test automation engineers. It represents
    a web page as a class, where its DOM elements are properties of the class, and
    methods instead provide some basic interactions with the page. The main reason
    for using PageObjects is to avoid hardcoding CSS and XPATH locators in your tests.
    Yii provides some example implementation of the PageObjects used in `/tests/codeception/_pages`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PageObject是测试自动化工程师中的一种常见模式。它将网页表示为一个类，其中其DOM元素是类的属性，而方法则提供与页面的一些基本交互。使用PageObjects的主要原因是为了避免在测试中硬编码CSS和XPATH定位器。Yii在`/tests/codeception/_pages`中提供了一些PageObjects的示例实现。
- en: 'StepObject is another way to promote code reuse in your tests: It will define
    some common actions that can be used in several tests. Together with PageObjects,
    StepObjects can become quite powerful. StepObject extends the `Tester` class and
    can be used to interact with the PageObject. This way your tests will become less
    dependent on a specific implementation and will save you the cost of refactoring
    when the markup and the way to interact with each component in the page changes.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StepObject是提高测试中代码复用性的另一种方式：它将定义一些可以在多个测试中使用的常见操作。与PageObjects一起，StepObjects可以变得相当强大。StepObject扩展了`Tester`类，并可以用来与PageObject交互。这样，你的测试将减少对特定实现的依赖，并在标记和与页面中每个组件交互的方式发生变化时节省重构的成本。
- en: For future reference, you can find all of these in the Codeception documentation
    in the section regarding the advanced use at [http://codeception.com/docs/07-AdvancedUsage](http://codeception.com/docs/07-AdvancedUsage)
    together with other features, like grouping and an interactive console that you
    can use to test your scenarios at runtime.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将来参考，你可以在Codeception文档的“高级使用”部分找到所有这些内容，包括其他功能，如分组和一个交互式控制台，你可以用它来在运行时测试你的场景。[http://codeception.com/docs/07-AdvancedUsage](http://codeception.com/docs/07-AdvancedUsage)
- en: Installing Codeception in Yii 2
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Yii 2中安装Codeception
- en: Now that we've seen what we can theoretically do with Codeception, let's move
    on and install it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了理论上我们可以用Codeception做什么，让我们继续并安装它。
- en: Yii comes with its own Codeception extension that provides a base class for
    unit tests (`yii\codeception\TestCase`), a class for tests that require database
    interaction (`yii\codeception\DbTestCase`), and a base class for Codeception page
    objects (`yii\codeception\BasePage`).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Yii自带了它的Codeception扩展，该扩展提供了一个单元测试的基础类(`yii\codeception\TestCase`)，一个需要数据库交互的测试类(`yii\codeception\DbTestCase`)，以及Codeception页面对象的基础类(`yii\codeception\BasePage`)。
- en: 'As usual, our preferred method is using Composer:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，我们首选的方法是使用Composer：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There''s a specific reason to use `–prefer-dist`; if you''re using Git, you
    can get into a hairy situation with Git submodules (but again excluding the `/vendor`
    folder should solve most of these problems). To avoid repeating it every time
    we use Composer, just add the following to your `composer.json` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`–prefer-dist`有特定的原因；如果你使用Git，你可能会因为Git子模块而陷入困境（但再次排除`/vendor`文件夹应该解决这些问题）。为了避免每次使用Composer时都重复，只需将以下内容添加到你的`composer.json`文件中：
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, remember that using `composer install` will not work if you''ve added
    the component manually to your `composer.json` file as it would consider it a
    mismatch and raise an error. To install the package, you need to run `composer
    update` either for all the packages you have installed, or specifically with this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，如果您已手动将组件添加到您的 `composer.json` 文件中，则使用 `composer install` 将不会工作，因为它会将其视为不匹配并引发错误。要安装包，您需要运行
    `composer update`，无论是针对您安装的所有包，还是专门针对此包：
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As highlighted before, you might also be interested in two additional packages
    `codeception/specify` and `codeception/verify`. These two packages provide a further
    level of abstraction that allows you to write more human readable tests by using
    a business-oriented syntax, close to what BDD definitions will look like.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可能还对两个额外的包 `codeception/specify` 和 `codeception/verify` 感兴趣。这两个包提供了一层额外的抽象，允许您使用面向业务的语言编写更易于阅读的测试，接近
    BDD 定义的外观。
- en: 'Your `composer.json` file will contain the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `composer.json` 文件将包含以下内容：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finding your way around Codeception
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Codeception 中找到您的路径
- en: All our tests are available within the `/tests/codeception` folder. In version
    2.0 this folder contains directly all the suites and configuration files needed
    by them and Codeception as well. The following configuration steps are based on
    this structure.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的所有测试都位于 `/tests/codeception` 文件夹中。在 2.0 版本中，此文件夹直接包含所有套件及其所需的配置文件以及 Codeception
    本身。以下配置步骤基于此结构。
- en: 'By listing the content of the `/tests` folder, we will see the main Codeception
    configuration file, while each single suite has its own configuration file inside
    of the `/tests/codeception` folder, which we can modify accordingly to override
    or further configure our tests. Starting from our `/tests` folder, the following
    are the configuration files we will be dealing with:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过列出 `/tests` 文件夹的内容，我们将看到主要的 Codeception 配置文件，而每个单独的套件在 `/tests/codeception`
    文件夹内都有自己的配置文件，我们可以相应地修改以覆盖或进一步配置我们的测试。从我们的 `/tests` 文件夹开始，以下是我们将处理的配置文件：
- en: '`codeception.yml`: This is for all the suites and Codeception in general'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeception.yml`：这是用于所有套件和 Codeception 的通用配置'
- en: '`codeception/acceptance.suite.yml`: This is for the acceptance tests'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeception/acceptance.suite.yml`：这是用于验收测试的'
- en: '`codeception/functional.suite.yml`: This is for the functional tests'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeception/functional.suite.yml`：这是用于功能测试的'
- en: '`codeception/unit.suite.yml`: This is for the unit tests'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codeception/unit.suite.yml`：这是用于单元测试的'
- en: 'Together with these files, there are some additional configuration files that
    are mostly needed by Yii: `_bootstrap.php` and the content of the `config/` folder.
    The underscore prefixing some of these files just marks them in a way such that
    Codeception will ignore them. Keep this in mind in case you need to create new
    files in the various suite folders.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些文件一起，还有一些额外的配置文件，这些文件主要用于 Yii：`_bootstrap.php` 和 `config/` 文件夹的内容。一些文件使用下划线前缀仅是为了让
    Codeception 忽略它们。如果您需要在各种套件文件夹中创建新文件，请记住这一点。
- en: Within the `/tests/codeception` folder, you will find the folders containing
    the tests for each single testing suite, `unit/`, `functional/`, and `acceptance/`.
    Each of them will contain a `_bootstrap.php` file for the suite, the actual tests,
    and other folders for fixtures for example.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/tests/codeception` 文件夹内，您将找到包含每个单独测试套件测试的文件夹，`unit/`、`functional/` 和 `acceptance/`。每个文件夹都将包含套件的自定义
    `_bootstrap.php` 文件、实际测试以及其他用于示例的文件夹。
- en: 'The few other folders contained in `/tests/codeception` are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`/tests/codeception` 中包含的其他几个文件夹如下：'
- en: '`bin/`: It contains the test-bound `yii` CLI command, which we will use to
    run migrations against our test database.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/`：它包含用于对测试数据库运行迁移的测试-bound `yii` CLI 命令，我们将使用它。'
- en: '`_data/`: It contains a snapshot of the database (`dump.sql`) normally used
    to bring it to an initial state for the acceptance tests, but it can contain anything,
    for instance, this folder will be used by Codeception in case you want it to generate
    (and publish) the various scenarios from the tests you''ve created in plain English
    (run the `codecept help generate:scenarios` command for more information).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_data/`：它包含数据库的快照（`dump.sql`），通常用于将数据库恢复到初始状态以进行验收测试，但它可以包含任何内容，例如，此文件夹将由
    Codeception 使用，如果您希望它从您用纯英语创建的测试中生成（并发布）各种场景（运行 `codecept help generate:scenarios`
    命令以获取更多信息）。'
- en: '`_output/`: This folder will become quite useful, as it will contain the output
    of the fetched pages when your acceptance or functional tests are failing, giving
    you another way to inspect and understand what''s wrong.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_output/`：这个文件夹将非常有用，因为它将包含在您的验收或功能测试失败时获取的页面输出，这为您提供了另一种检查和理解问题的方式。'
- en: '`_pages/`: This is where Codeception page objects are stored. There are already
    three page objects provided by the basic application, namely `AboutPage.php`,
    `ContactPage.php`, and `LoginPage.php`. We will explore this part further down
    the line as they will prove to be extremely useful as they simplify our lives
    quite substantially and promote modularity and reuse of code.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_pages/`：这是 Codeception 页面对象存储的地方。基本应用程序已经提供了三个页面对象，分别是 `AboutPage.php`、`ContactPage.php`
    和 `LoginPage.php`。我们将在稍后进一步探讨这部分，因为它们将证明极其有用，因为它们极大地简化了我们的生活，并促进了代码的模块化和重用。'
- en: '`_support/`: This is used for additional support files, which currently hold
    the `FixtureHelper` class used to populate the database with the provided fixtures.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_support/`：这部分用于存放额外的支持文件，目前包含用于用提供的 fixtures 填充数据库的 `FixtureHelper` 类。'
- en: Configuring Codeception
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Codeception
- en: Now, we should pretty much know where all the configuration files live, so we're
    going to review their content and adjust it before we can start interacting with
    Codeception and first run all the provided tests and then our own tests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们基本上应该知道所有配置文件的位置，因此在我们开始与 Codeception 交互并首先运行所有提供的测试以及我们自己的测试之前，我们将审查它们的内容并对其进行调整。
- en: Let's start with the YAML configuration files for the different suites.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从不同套件的 YAML 配置文件开始。
- en: 'The acceptance tests are configured by default to use PHPBrowser. We will see
    how things need to be adjusted to use Selenium WebDriver, but generally speaking,
    both tools require at least a URL to access our application:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，验收测试配置为使用 PHPBrowser。我们将看到如何调整以使用 Selenium WebDriver，但一般来说，这两个工具都需要至少一个
    URL 来访问我们的应用程序：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The default URL is `http://localhost:8080`, which you won't need to change when,
    for instance, you're using Vagrant or the PHP built-in server. In the preceding
    example, I've set up a custom domain name; this is not required in order to run
    your tests as it might require additional configuration steps that won't be needed,
    unless you're in a larger environment and your configuration is a bit more complex
    (for instance in case your tests are being executed remotely). We'll see more
    of this in the final chapters.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 默认 URL 是 `http://localhost:8080`，当您使用 Vagrant 或 PHP 内置服务器时，您不需要更改它。在先前的示例中，我已经设置了一个自定义域名；为了运行您的测试，这并不是必需的，因为它可能需要额外的配置步骤，而这些步骤通常是不需要的，除非您在一个更大的环境中，并且您的配置稍微复杂一些（例如，如果您的测试是在远程执行的）。我们将在最后一章中看到更多关于这方面的内容。
- en: Please also note that you don't need to specify the entry file, `index-test.php`,
    as you want Yii to resolve the routing for you.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不需要指定入口文件`index-test.php`，因为您希望 Yii 为您解析路由。
- en: 'The base URL for our application isn''t needed for our functional tests, as
    I highlighted before. In fact what Codeception cares about for our functional
    tests is the entry script for the application: all the functionality is provided
    by the `yii2-codeception` package (which should come pre-installed in your application),
    so in the configuration file, you have just a reference pointing to the configuration
    of your test application:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的功能测试，我们的应用程序的基本 URL 不是必需的，正如我之前指出的。事实上，Codeception 对于我们的功能测试所关心的是应用程序的入口脚本：所有功能都是由
    `yii2-codeception` 包提供的（这个包应该已经预安装在您的应用程序中），因此，在配置文件中，您只有一个指向测试应用程序配置的引用：
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Heading over to this file, we will find that at the very beginning we have
    a couple of `$_SERVER` variables set:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 转到这个文件，我们会发现一开始就设置了一些 `$_SERVER` 变量：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These two constants have been defined in the overall Yii bootstrap file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个常量已在 Yii 启动文件中定义：
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In other words, the entry file is always the one found in `/web/index-test.php`
    while the URL can be configured in the main configuration file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，入口文件始终是位于 `/web/index-test.php` 的那个，而 URL 可以在主配置文件中进行配置：
- en: '[PRE13]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to adjust the hostname to the one you will use, or leave the default,
    which is `localhost:8080`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住将主机名调整为您将使用的名称，或者保留默认值，即 `localhost:8080`。
- en: For unit tests, there isn't much to be configured, as Codeception is just wrapping
    around PHPUnit, and the two packages, *verify* and *specify*, will work out of
    the box.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单元测试，没有太多需要配置的，因为 Codeception 只是围绕 PHPUnit 进行封装，而 *verify* 和 *specify* 这两个包将直接使用。
- en: 'The only thing left to update is the configuration of the database: as we said
    earlier, currently, you can simply update the DSN in `/tests/codeception/config/config.php`,
    in the same way that the main Yii database configuration is defined.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的唯一要更新的是数据库的配置：正如我们之前所说的，目前，你只需在`/tests/codeception/config/config.php`中更新DSN，就像定义主Yii数据库配置一样。
- en: Tests available in Yii 2
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii 2中可用的测试
- en: Compared to what Yii 1 was offering, Yii 2 now comes with examples of working
    tests for any suite of tests available. This is a great thing as it would help
    us understand how to structure and implement our tests.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 与Yii 1提供的相比，Yii 2现在为任何测试套件提供了工作测试的示例。这是一件好事，因为它将帮助我们了解如何构建和实现我们的测试。
- en: 'Once we''ve got the server running and all the configuration set up properly,
    we can just run the following command:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器运行正常并且所有配置都设置妥当，我们就可以运行以下命令：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will run all the tests and see them passing. At the end, you will see
    a nice summary:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行所有测试并查看它们通过。最后，你将看到一个漂亮的总结：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The tests provided for acceptance and functional tests are quite self-explanatory;
    they're basically ensuring the four pages, namely the homepage, the about page,
    the contact page and the login page, available in the basic application work as
    expected.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的验收和功能测试的测试相当直观；它们基本上确保了四个页面，即主页、关于页面、联系页面和登录页面，在基本应用程序中按预期工作。
- en: 'These tests are exactly the same, with the only difference that acceptance
    tests take into consideration the ability for you to run the tests via Selenium
    and include specific directives for it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试完全相同，唯一的区别是验收测试考虑了您通过Selenium运行测试的能力，并包含针对它的特定指令：
- en: '[PRE16]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is just an example, and it shouldn't really matter to you right now, as
    we're going to see how Selenium WebDriver works in detail further down the line
    in [Chapter 7](ch07.html "Chapter 7. Having Fun Doing Browser Testing"), *Having
    Fun Doing Browser Testing*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个例子，现在对你来说可能并不重要，因为我们将在[第7章](ch07.html "第7章。享受浏览器测试的乐趣")中详细探讨Selenium WebDriver的工作原理，*享受浏览器测试的乐趣*。
- en: The unit tests shipped by Yii 2 are the ones that are unsurprisingly different;
    they mostly cover integration tests between various components, for instance,
    for the login form and the contact form, while they leave to us the burden of
    implementing any test for the user. We will get there, in the next chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 2提供的单元测试与预期不同；它们主要覆盖各种组件之间的集成测试，例如登录表单和联系表单，而将用户测试的实现负担留给了我们。我们将在下一章中实现这一点。
- en: The only thing worth noticing in the unit tests is that they make use of *Specify*
    for a more declarative way to write units, instead of the more common PHPUnit
    syntax. Again, this is just syntactic sugar and it might be easier for you to
    start with it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试中唯一值得注意的事情是，它们使用*Specify*以更声明性的方式编写单元测试，而不是更常见的PHPUnit语法。再次强调，这只是一个语法糖，它可能对你开始时更容易。
- en: Interacting with Codeception
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Codeception交互
- en: 'So far, we''ve seen two arguments of the `codecept` command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了`codecept`命令的两个参数：
- en: '`build`: This is used for building the "testers" and any additional code when
    using any additional module'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`: 这个命令用于构建“测试器”以及在使用任何附加模块时所需的任何附加代码'
- en: '`run`: This is used to execute the tests'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`: 这个命令用于执行测试'
- en: 'There are a few parameters you can invoke `run` with that I''d like to bring
    to your attention, as these will come handy when running and debugging the tests.
    The syntax of the `run` command is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个参数你可以与`run`一起使用，我想提醒你注意，因为这些在运行和调试测试时将很有用。`run`命令的语法如下：
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First of all, you can run a specific suite, such as unit, acceptance, or functional,
    or be more specific and run a single test file, for example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以运行特定的测试套件，例如单元测试、验收测试或功能测试，或者更具体地运行单个测试文件，例如：
- en: '[PRE18]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding command, you can also use the `--steps` option, which is a
    way to be more verbose showing all the single steps taken by your tests while
    running them.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，你还可以使用`--steps`选项，这是一种更详细地显示测试运行时所有单个步骤的方法。
- en: Alternatively, you also have `--debug`, which will not only show the steps taken
    by your application, but also display what's happening behind the scenes, such
    as the POST request of data to a specific URL, the loading of a page, or the list
    of cookies set.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用`--debug`选项，它不仅会显示应用程序执行的步骤，还会显示幕后发生的事情，例如向特定URL发送数据POST请求、页面加载或设置的cookie列表。
- en: Creating tests
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试
- en: While running tests and seeing them passing will be all you care about once
    you've written your tests, you first need to write them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写了测试并看到它们通过时，您可能只会关心这些，但在编写测试之前，您首先需要编写它们。
- en: 'Codeception helps us get started by providing a code generation argument on
    the command line:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception通过在命令行上提供代码生成参数来帮助我们开始：
- en: '`generate:cept`: This is used for generating CEPT tests'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate:cept`：此命令用于生成CEPT测试'
- en: '`generate:cest`: This is used for generating CEST tests'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate:cest`：此命令用于生成CEST测试'
- en: '`generate:phpunit`: This is used for generating PHPUnit tests, without the
    Codeception additions'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate:phpunit`：此命令用于生成PHPUnit测试，不包含Codeception的附加功能'
- en: '`generate:test`: This is used for generating unit tests'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate:test`：此命令用于生成单元测试'
- en: 'All the preceding arguments will require as parameters the suite name and the
    name of the file to create:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的先前参数都需要参数套件名称和要创建的文件名称：
- en: '[PRE19]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can review these and more commands by running `codecept` without arguments.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行不带参数的`codecept`来查看这些命令以及更多命令。
- en: Migrations on the test database
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试数据库上的迁移
- en: One of the things that I have found particularly handy and that we're going
    to use extensively is the ability to run the same migrations that we will create
    for our application on your test database.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现特别方便并且我们将广泛使用的一项功能是能够在您的测试数据库上运行与我们为应用程序创建的相同迁移。
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Migrations are a concept that is not exclusive to Yii, and you can read more
    about it in the documentation at [http://www.yiiframework.com/doc-2.0/guide-db-migrations.html](http://www.yiiframework.com/doc-2.0/guide-db-migrations.html).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移这个概念并不仅限于Yii，您可以在[http://www.yiiframework.com/doc-2.0/guide-db-migrations.html](http://www.yiiframework.com/doc-2.0/guide-db-migrations.html)的文档中了解更多相关信息。
- en: In the `/tests/codeception/bin/` folder, you will find the `yii` CLI command
    line that you can use against the test database you've configured previously to
    run the migrations.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/tests/codeception/bin/`文件夹中，您将找到可以用于之前配置的测试数据库的`yii` CLI命令行，以运行迁移。
- en: 'Assuming you''re in the root of your project, the following sequence of commands
    will show you how to run the migrations:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您位于项目的根目录，以下命令序列将向您展示如何运行迁移：
- en: '[PRE20]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `yii` CLI is exactly the same as the main one residing in the root of your
    project, with the only difference that it will read the test configuration, particularly
    the one regarding the database.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`yii` CLI与位于项目根目录的主程序完全相同，唯一的区别是它将读取测试配置，特别是关于数据库的那部分。'
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we came to appreciate the breadth and the quality of Codeception.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们体会到了Codeception的广度和质量。
- en: We've seen the three types of tests, namely unit, functional, and acceptance,
    which we'll be using throughout the rest of the book. We've also touched some
    additional features provided by the tool and by the Yii 2 Codeception module.
    We've learned how to interact with it, generate tests, and deal with debugging
    and keeping the test databases in sync with the database of the main application.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了三种测试类型，即单元测试、功能测试和验收测试，这些测试我们将贯穿整本书。我们还接触了一些由工具和Yii 2 Codeception模块提供的附加功能。我们学习了如何与之交互、生成测试以及处理调试和保持测试数据库与主应用程序数据库同步。
- en: In the next chapter, we're going to start refactoring our `User` class, adding
    our tests first and progressing through all the most important PHPUnit features.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始重构我们的`User`类，首先添加测试，然后逐步通过所有最重要的PHPUnit特性。
- en: Tip
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有Packt Publishing书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
