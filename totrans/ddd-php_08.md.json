["```php\nUPDATE accounts\n    SET balance = balance - 100.00\nWHERE name = 'Alice';\n\nUPDATE branches\n    SET balance = balance - 100.00\nWHERE name = (SELECT branch_name FROM accounts WHERE name ='Alice');\n\nUPDATE accounts\n    SET balance = balance + 100.00\nWHERE name = 'Bob';\n\nUPDATE branches\n    SET balance = balance + 100.00\nWHERE name = (SELECT branch_name FROM accounts WHERE name ='Bob');\n\n```", "```php\nBEGIN;\nUPDATE accounts \n    SET balance = balance - 100.00 \nWHERE name = 'Alice';\n-- etc etc\nCOMMIT;\n\n```", "```php\n    PUT /website/blog/1/_create\n    { \n       \"title\": \"My first blog entry\",\n       \"text\": \"Just trying this out...\" \n    } \n\n```", "```php\n    GET /website/blog/1\n\n```", "```php\n{ \n    \"index\": \"website\", \n    \"type\": \"blog\", \n    \"id\": \"1\", \n    \"version\": 1, \n    \"found\": true, \n    \"_source\": { \n        \"title\": \"My first blog entry\", \n        \"text\": \"Just trying this out...\" \n    } \n}\n\n```", "```php\n   PUT /website/blog/1?version=1\n   { \n      \"title\": \"My first blog entry\", \n      \"text\": \"Starting to get the hang of this...\"  \n   }\n\n```", "```php\n   { \n      \"index\": \"website\", \n      \"type\": \"blog\", \n      \"id\": \"1\", \n      \"version\": 2,\n      \"created\": false \n   }\n\n```", "```php\n{\n    \"error\": {\n        \"root_cause\": [{ \n             \"type\": \"version_conflict_engine_exception\",\n             \"reason\":\n                 \"[blog][1]: version conflict,current[2],provided [1]\",   \n             \"index\": \"website\",\n             \"shard\": \"3\"\n        }],\n        \"type\": \"version_conflict_engine_exception\" ,\n        \"reason\":\n            \"[blog][1]:version conflict,current [2],provided[1]\",\n        \"index\": \"website\",\n        \"shard\": \"3\"\n    },\n    \"status\": 409\n}\n\n```", "```php\n   class User\n   { \n       // ... \n       /** @Version @Column(type=\"integer\") */ \n       private $version; \n       // ... \n   }\n\n```", "```php\nuse Doctrine\\DBAL\\LockMode; \nuse Doctrine\\ORM\\OptimisticLockException;\n\n$theEntityId = 1; \n$expectedVersion = 184;\ntry{\n   $entity = $em->find(\n       'User',\n       $theEntityId,\n       LockMode::OPTIMISTIC,\n       $expectedVersion\n   );\n   // do the work\n   $em->flush();\n} catch (OptimisticLockException $e){\n    echo\n        'Sorry, someone has already changed this entity.' .\n        'Please apply the changes again!';\n}\n\n```", "```php\nuse DoctrineDBALLockMode; \nuse DoctrineORMOptimisticLockException;\n\n$theEntityId = 1;\n$expectedVersion = 184;\n$entity = $em->find('User', $theEntityId);\ntry {\n    // assert version em−>lock(entity, LockMode::OPTIMISTIC,\n    $expectedVersion);\n} catch (OptimisticLockException $e){\n    echo\n        'Sorry, someone has already changed this entity.' .\n        'Please apply the changes again!';\n}\n\n```", "```php\n$post = $em->find('BlogPost', 123456);\necho '<input type=\"hidden\" name=\"id\" value=\"' .\n         $post->getId() . '\"/>';\necho '<input type=\"hidden\" name=\"version\" value=\"' .\n         $post->getCurrentVersion() . '\" />';\n\n```", "```php\n$postId = (int) $_GET['id']; \n$postVersion = (int) $_GET['version'];                \n$post = $em->find(\n    'BlogPost',\n    $postId,\n    DoctrineDBALLockMode::OPTIMISTIC,\n    $postVersion\n);\n\n```", "```php\n$order = ...\n$orderLine = new OrderLine(\n    'Domain-Driven Design in PHP', 24.99\n);\n$order->addOrderLine($orderLine);\n\n```", "```php\n$order = ...\n$orderLine = $order->addOrderLine(\n    'Domain-Driven Design in PHP', 24.99\n);\n\n```", "```php\n$order = ...\n$order->addOrderLine(\n    'Domain-Driven Design in PHP', 24.99\n);\n\n```", "```php\nclass Stack \n{   \n    private $data;\n\n    public function __construct()\n    {\n        $this->data = [];\n    }\n\n    public function push($value)\n    {\n        $this->data[] = $value;\n    }\n\n    public function size()\n    {\n        $size = 0;\n        for ($i = 0; $i < count($this->data); $i++) {\n            $size++;\n        }\n\n        return $size;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function pop()\n    {\n        $topIndex = $this->size() - 1;\n        $top = $this->data[$topIndex];\n        unset($this->data[$topIndex]);\n        return $top;\n    }\n}\n\n```", "```php\nclass Stack \n{ \n    private $data; \n    private $size;\n\n    public function __construct()\n    {\n        $this->data = [];\n        $this->size = 0;\n    }\n\n    public function push($value)\n    {\n        $this->data[] = $value;\n        $this->size++;\n    }\n\n    public function size()\n    {\n       return $this->size;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function pop()\n    {\n        $topIndex = $this->size--;\n        $top = $this->data[$topIndex];\n        unset($this->data[$topIndex]);\n\n        return $top;\n    }\n}\n\n```", "```php\nclass MakeWishService\n{\n    private $wishRepository;\n\n    public function __construct(WishRepository $wishRepository)\n    {\n        $this->wishRepository = $wishRepository;\n    }\n\n    public function execute(MakeWishRequest $request)\n    {\n        $userId = $request->userId();\n        $address = $request->address();\n        $content = $request->content();\n\n        $wish = new Wish(\n            $this->wishRepository->nextIdentity(),\n            new UserId($userId),\n            $address,\n            $content\n        );\n\n        $this->wishRepository->add($wish);\n    }\n}\n\n```", "```php\nclass MakeWishService\n{\n    // ...\n    public function execute(MakeWishRequest $request)\n    {\n        $userId = $request->userId();\n        $address = $request->address();\n        $content = $request->content();\n\n        $user = $this->userRepository->ofId(new UserId($userId));\n        if (null === $user) {\n            throw new UserDoesNotExistException();\n        }\n\n        $wish = new Wish(\n            $this->wishRepository->nextIdentity(),\n            $user->id(),\n            $address,\n            $content\n        );\n\n        $this->wishRepository->add($wish);\n    }\n}\n\n```", "```php\n// Somewhere in a Domain Service or Entity\n$nonExistingUserId = new UserId('non-existing-user-id');\n    $wish = new Wish(\n        $this->wishRepository->nextIdentity(),\n        $nonExistingUserId,\n        $address,\n        $content\n);\n\n```", "```php\nabstract class WishService\n{\n    protected $userRepository;\n    protected $wishRepository;\n\n    public function __construct(\n        UserRepository $userRepository,\n        WishRepository $wishRepository\n    ) {\n        $this->userRepository = $userRepository;\n        $this->wishRepository = $wishRepository;\n    }\n\n    protected function findUserOrFail($userId)\n    {\n        $user = $this->userRepository->ofId(new UserId($userId));\n        if (null === $user) {\n            throw new UserDoesNotExistException();\n        }\n\n        return $user;\n    }\n\n    protected function findWishOrFail($wishId)\n    {\n        $wish = $this->wishRepository->ofId(new WishId($wishId));\n        if (!$wish) {\n            throw new WishDoesNotExistException();\n        }\n\n        return $wish;\n    }\n\n    protected function checkIfUserOwnsWish(User $user, Wish $wish)\n    {\n        if (!$wish->userId()->equals($user->id())) {\n            throw new \\InvalidArgumentException(\n                'User is not authorized to update this wish'\n            );\n        }\n    }\n}\n\nclass MakeWishService extends WishService\n{\n    public function execute(MakeWishRequest $request)\n    {\n        $userId = $request->userId();\n        $address = $request->address();\n        $content = $request->content();\n\n        $user = $this->findUserOrFail($userId);\n\n        $wish = $user->makeWish(\n            $this->wishRepository->nextIdentity(),\n            $address,\n            $content\n        );\n\n        $this->wishRepository->add($wish);\n    }\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    /**\n     * @return Wish\n     */\n    public function makeWish(WishId $wishId, $address, $content)\n    {\n        return new Wish(\n            $wishId,\n            $this->id(),\n            $address,\n            $content\n        );\n    }\n\n    // ...\n}\n\n```", "```php\ninterface WishRepository\n{\n    /**\n     * @param WishId $wishId\n     *\n     * @return Wish\n     */\n    public function ofId(WishId $wishId);\n\n    /**\n     * @param UserId $userId\n     *\n     * @return Wish[]\n     */\n    public function ofUserId(UserId $userId);\n\n    /**\n     * @param Wish $wish\n     */\n    public function add(Wish $wish);\n\n    /**\n     * @param Wish $wish\n     */\n    public function remove(Wish $wish);\n\n    /**\n     * @return WishId\n     */\n    public function nextIdentity();\n}\n\n```", "```php\nLw\\Domain\\Model\\User\\User:\n    type: entity\n    id:\n        userId:\n            column: id\n            type: UserId\n    table: user\n    repositoryClass:\n        Lw\\Infrastructure\\Domain\\Model\\User\\DoctrineUser\\Repository\n    fields:\n        email:\n            type: string\n        password:\n            type: string\n\nLw\\Domain\\Model\\Wish\\Wish:\n    type: entity\n    table: wish\n    repositoryClass:\n        Lw\\Infrastructure\\Domain\\Model\\Wish\\DoctrineWish\\Repository\n    id:\n        wishId:\n            column: id\n            type: WishId\n    fields:\n        address:\n            type: string\n        content:\n            type: text\n        userId:\n            type: UserId\n        column: user_id\n\n```", "```php\nclass UpdateWishService extends WishService\n{\n    public function execute(UpdateWishRequest $request)\n    {\n        $userId = $request->userId();\n        $wishId = $request->wishId();\n        $email = $request->email();\n        $content = $request->content();\n\n        $user = $this->findUserOrFail($userId);\n        $wish = $this->findWishOrFail($wishId);\n        $this->checkIfUserOwnsWish($user, $wish);\n\n        $wish->changeContent($content);\n        $wish->changeAddress($email);\n    }\n}\n\n```", "```php\nclass RemoveWishService extends WishService\n{\n    public function execute(RemoveWishRequest $request)\n    {\n        $userId = $request->userId();\n        $wishId = $request->wishId();\n\n        $user = $this->findUserOrFail($userId);\n        $wish = $this->findWishOrFail($wishId);\n        $this->checkIfUserOwnsWish($user, $wish);\n\n        $this->wishRepository->remove($wish);\n    }\n}\n\n```", "```php\nclass ViewWishesService extends WishService\n{\n    /**\n     * @return Wish[]\n     */\n    public function execute(ViewWishesRequest $request)\n    { \n        $userId = $request->userId();\n        $wishId = $request->wishId();\n\n        $user = $this->findUserOrFail($userId);\n        $wish = $this->findWishOrFail($wishId);\n        $this->checkIfUserOwnsWish($user, $wish);\n\n        return $this->wishRepository->ofUserId($user->id());\n     }\n}\n\n```", "```php\nclass MakeWishService\n{\n   // ...\n\n    public function execute(MakeWishRequest $request)\n    {\n        $userId = $request->userId();\n        $address = $request->email();\n        $content = $request->content();\n\n        $count = $this->wishRepository->numberOfWishesByUserId(\n            new UserId($userId)\n        );\n        if ($count >= 3) {\n            throw new MaxNumberOfWishesExceededException();\n        }\n\n        $wish = new Wish(\n            $this->wishRepository->nextIdentity(),\n            new UserId($userId),\n            $address,\n            $content\n        );\n\n        $this->wishRepository->add($wish);\n    }\n}\n\n```", "```php\nERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction\n\n```", "```php\nclass WishAggregateService\n{\n    protected $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    protected function findUserOrFail($userId)\n    {\n        $user = $this->userRepository->ofId(new UserId($userId));\n        if (null === $user) {\n            throw new UserDoesNotExistException();\n        }\n\n        return $user;\n    }\n}\n\nclass MakeWishService extends WishAggregateService\n{\n    public function execute(MakeWishRequest $request)\n    {\n        $userId = $request->userId();\n        $address = $request->address();\n        $content = $request->content();\n\n        $user = $this->findUserOrFail($userId);\n\n        $user->makeWish($address, $content);\n\n        // Uncomment if your ORM can not flush\n        // the changes at the end of the request\n        // $this->userRepository->add($user);\n    }\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    /**\n     * @var ArrayCollection\n     */\n    protected $wishes;\n\n    public function __construct(UserId $userId, $email, $password)\n    {\n        // ...\n        $this->wishes = new ArrayCollection();\n        // ...\n    }\n\n    // ...\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    /**\n     * @return void\n     */\n    public function makeWish($address, $content)\n    {\n        if (count($this->wishes) >= 3) {\n            throw new MaxNumberOfWishesExceededException();\n        }\n\n        $this->wishes[] = new Wish(\n            new WishId,\n            $this->id(),\n            $address,\n            $content\n        );\n    }\n\n    // ...\n}\n\n```", "```php\nclass UpdateWishService extends WishAggregateService\n{\n    public function execute(UpdateWishRequest $request)\n    {\n        $userId = $request->userId();\n        $wishId = $request->wishId();\n        $email = $request->email();\n        $content = $request->content();\n\n        $user = $this->findUserOrFail($userId);\n\n        $user->updateWish(new WishId($wishId), $email, $content);\n    }\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    public function updateWish(WishId $wishId, $email, $content)\n    {\n        foreach ($this->wishes as $wish) {\n            if ($wish->id()->equals($wishId)) {\n                $wish->changeContent($content);\n                $wish->changeAddress($address);\n                break;\n            }\n        }\n    }\n}\n\n```", "```php\nclass RemoveWishService extends WishAggregateService\n{\n    public function execute(RemoveWishRequest $request)\n    {\n        $userId = $request->userId();\n        $wishId = $request->wishId();\n\n        $user = $this->findUserOrFail($userId);\n\n        $user->removeWish($wishId):\n    }\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    public function removeWish(WishId $wishId)\n    {\n        foreach ($this->wishes as $k => $wish) {\n            if ($wish->id()->equals($wishId)) {\n                unset($this->wishes[$k]);\n                break;\n            }\n        }\n    }\n\n    // ...\n}\n\n```", "```php\nLw\\Domain\\Model\\Wish\\Wish:\n    type: entity\n    table: lw_wish\n    repositoryClass:\n        Lw\\Infrastructure\\Domain\\Model\\Wish\\DoctrineWish\\Repository\n    id:\n        wishId:\n            column: id\n            type: WishId\n     fields:\n         address: \n             type: string\n         content:\n             type: text\n         userId:\n             type: UserId\n             column: user_id\n\nLw\\Domain\\Model\\User\\User:\n    type: entity\n    id:\n    userId:\n        column: id\n        type: UserId\n    table: user\n    repositoryClass:\n        Lw\\Infrastructure\\Domain\\Model\\User\\DoctrineUser\\Repository\n    fields:\n        email:\n            type: string\n        password:\n            type: string\n    manyToMany:\n        wishes:\n            orphanRemoval: true\n            cascade: [\"all\"]\n            targetEntity: Lw\\Domain\\Model\\Wish\\Wish\n            joinTable:\n                name: user_wishes\n                joinColumns:\n                    user_id:\n                        referencedColumnName: id\n                inverseJoinColumns:\n                    wish_id:\n                        referencedColumnName: id\n                        unique: true\n\n```", "```php\nclass ViewWishesService extends WishService\n{\n    /**\n     * @return Wish[]\n     */\n    public function execute(ViewWishesRequest $request)\n    {\n        return $this\n            ->findUserOrFail($request->userId())\n            ->wishes();\n    }\n}\n\n```"]