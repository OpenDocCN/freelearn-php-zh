- en: Chapter 2. User Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating passwords with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating passwords with CodeIgniter – the bare bones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forgot password? – resetting passwords with CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chances are that a lot of the sites and apps you'll build with CodeIgniter will
    need users, and there will be a need to manage them and their details directly,
    that is create, update, edit, and delete them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at basic user management and, build a simple CRUD
    interface to manage and maintain those users in a database. Later, in [Chapter
    7](ch07.html "Chapter 7. Creating a Secure User Environment"), *Creating a Secure
    User Environment*, we will be looking at securing your user information with login
    and session functionality, but for now, we will concentrate on building a user
    management interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, we''ll need to alter some settings in a couple of config files
    in the `application/config` folder. We''ll be editing the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/config/config.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/config/database.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Find the following config values in the `path/to/codeigniter/application/config/config.php`
    file and amend them to reflect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Config item | Change to | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_cookie_name'']` | `ci_session` | This should be the name
    of the cookie written to the users computer. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_expiration'']` | `7200` | This is the number of seconds a
    session should remain active after a period of no activity before becoming void.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_expire_on_close'']` | `TRUE` | This specifies that if the
    user closes their browser, the session becomes void. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_encrypt_cookie'']` | `TRUE` | This specifies that if the
    cookie should be encrypted on the user''s computer; for security purposes, this
    should be set to `TRUE`. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_use_database'']` | `TRUE` | This specifies whether or not
    to store sessions in the database. For security purposes, this should be set to
    `TRUE`. You will also need to create the session table, which can be found in
    the *Database schema* section. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_table_name'']` | `sessions` | This specifies the name of
    the database table used to store session data. |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_match_ip'']` | `TRUE` | This specifies CodeIgniter should
    monitor the IP address of requests and against that of the `session_id`. If the
    IP of an incoming request doesn''t match the previous values, the session is disallowed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$config[''sess_match_useragent'']` | `TRUE` | This specifies CodeIgniter
    should monitor the user agent address of requests and against that of the `session_id`.
    If the user agent of an incoming request doesn''t match the previous values, the
    session is disallowed. |'
  prefs: []
  type: TYPE_TB
- en: 'Find the following config values in the `path/to/codeigniter/application/config/database.php`
    file and amend them to reflect the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Config item | Change to value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''hostname'']` | `localhost` | The hostname of your database;
    this is usually either `localhost` or an IP address |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''username'']` | ? | The username you wish to use to connect
    to your database |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''password'']` | ? | The password used to connect to your
    database |'
  prefs: []
  type: TYPE_TB
- en: '| `$db[''default''][''database'']` | ? | The name of the database, which you
    wish to connect to, for example, `users` |'
  prefs: []
  type: TYPE_TB
- en: Database schema
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the method of your choice (command line, phpmyadmin, and so on) enter
    the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What are the columns for and what type of data will we store in them? The following
    table is a guide to the preceding database schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item name | Attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `user_id` | `INTEGER(11)` | The table primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_first_name` | `VARCHAR(125)` | The user''s first name. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_last_name` | `VARCHAR(125)` | The user''s last name. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_email` | `VARCHAR(255)` | The user''s e-mail address, for example,
    `<[name@example.org](mailto:name@example.org)>`. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_created_date` | `INTEGER(11)` | The unix timestamp for the date the
    user was created within the database. |'
  prefs: []
  type: TYPE_TB
- en: '| `user_is_active` | `INTEGER(1)` | The Boolean value represented as `0` or
    `1`, if the user is active. This variable specifies whether the user is active
    within the system. An active user can login, while inactive users cannot. |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have already created a sessions table, then you can omit that table.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good place for us to begin is to display a list of our users. We're going
    to create a model, view, and controller to provide the functionality to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/models/users_model.php`: This file gives us
    CRUD support with the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/view_all_users.php`: This file
    contains a `foreach` loop, which runs through the results array, writing all users
    to a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/controllers/users.php`: This file contains
    the code necessary to handle the CRUD functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code into the, `path/to/codeigniter/application/controllers/users.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into the, `path/to/codeigniter/application/models/users_model.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into the, `path/to/codeigniter/application/views/users/view_all_users.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is fairly standard stuff and there's nothing complicated going on. We have
    a controller running the show, which loads some useful helpers to provide support
    with functions such as `redirect()`, other security functions, and the `Users_model`
    in its constructor. `public function index()` redirects to `public function view_users()`,
    which in turn connects to the, `get_all_users()`function in the, `Users_model
    model`, using the, `$this->Users_model->get_all_users()`syntax to return an Active
    Record result set. This result set is then passed to the, `users/view_all_users
    view`, where it is displayed in a `foreach` loop in a table. See...I told you
    it was simple!
  prefs: []
  type: TYPE_NORMAL
- en: Creating users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will always need a method to create users yourself from within an application,
    and will need to; manually enter their data rather than the user entering the
    data themselves. We're going to build functionality to allow you to create users
    one by one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need to create one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/new_user.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/controllers/users.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/models/users_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code into the, `path/to/codeigniter/application/views/users/new_user.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `path/to/codeigniter/application/controllers/users.php` file, with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `path/to/codeigniter/application/models/users_model.php` file, with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's a little more going on here than with the preceding `view_users` code,
    but it's still simple and straightforward. `public function new_user()` performs
    several functions, such as loading the view file, to validating any data inputted
    after submission, and displaying a view.
  prefs: []
  type: TYPE_NORMAL
- en: If `public function new_user()` is being called for the first time (that is,
    it is not being called by a form submission), then the validation check (`$this->form_validation->run()`)
    will equal `FALSE` and the code within the parentheses will be executed. In this
    case, the code will load the, `cust/new_user` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if the function is loaded as the result of a form submission, then
    CodeIgniter will begin checking the user input. The first line of the function
    loads the necessary library to enable checking the user''s input: `$this->library(''form_validation'')`,
    and our error delimiters are set with the function, `set_error_deimiters()`. Each
    item in the form is then checked against the criteria we specify. A full list
    of validation criteria options are available at: [http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: We will also discuss form validation in greater detail in [Chapter 5](ch05.html
    "Chapter 5. Managing Data In and Out"), *Managing Data In and Out*.
  prefs: []
  type: TYPE_NORMAL
- en: If validation isn't passed (the input from the user didn't meet the requirements
    we set), then `$this->form_validation->run()` will return `FALSE` and the form
    will be displayed again. The form elements in the view are able to display the
    user's input (so they don't have to re-enter everything from scratch).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once validation is passed (`$this->form_validation->run()` returns `TRUE`),
    then we''ll package up the input into an array: `$data`. As we''re using Active
    Record to interact with the database, the keys of the `$data` array must match
    the column names of our database table.The `$data` array is then sent to the `Users_model`
    for writing to the database using the syntax: `$this->Users_model->get_all_users()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Editing users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will always need some method to edit users yourself from within an application.
    In this section, we will look at creating functionality to do just that: to update
    and edit user details.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need to create one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/edit_user.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And amend the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/controllers/users.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/models/users_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code to the, `path/to/codeigniter/application/views/users/edit_user.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `path/to/codeigniter/application/controllers/users.php` file, with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `path/to/codeigniter/application/models/users_model.php` file, with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is similar functionality to creating a new user (mentioned earlier), but
    instead of writing a row to the users table, we're removing a row based on the
    user's primary key.
  prefs: []
  type: TYPE_NORMAL
- en: First we'll need to grab the user's ID. At this point, the user's ID is probably
    coming from an URL, but may also be coming from a post array (for example, if
    returned `FALSE`). The following code works out how the `$id` variable is coming
    in (either post or URL), and stores it in the `$id` variable ready for later processing:.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We then validate the users edited data—if the data passes validation we package
    up the incoming form data into an associative array (called `$data`). We use the
    array keys as a mapper to the column names in our database—that is to say that
    the keys in the array match the database column—stake a look at the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the keys of the associative array match the column names in
    the database table; so the key `first_name` in the array will map to `first_name`
    column in the table. The key `last_name` in the array will map to the `last_name`
    column in the table.
  prefs: []
  type: TYPE_NORMAL
- en: Next we write the users edited information to the database. We do this by sending
    the `$data` array we just created (along with the `$id` variable) to our `Users_model`
    function `process_update_user()`, which will perform the task of updating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Deleting users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's always a good idea to be able to delete users from an interface rather
    than removing them from the database directly or not deleting them at all. We're
    going to create a CRUD interface to allow us to remove users from the database.
    Here's how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need to create one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/users/delete_user.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code into the, `views/users/delete_user.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the following two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/controllers/users.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/models/users_model.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amend the, `controllers/users.php` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `controllers/users_model.php` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is similar functionality to creating a new user (explained earlier), but
    instead of writing a row to the users table, we're removing a row based on the
    user's primary key.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll need to grab the user's ID. At this point the user's ID is probably
    coming from an URL, but may also be coming from the post array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code works out how the `$id` variable is coming in (either from
    post or by URL) and stores it in the `$id` variable ready for processing later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If `public function delete_user()` is being called for the first time (that
    is, it is not being called by a form submission), then the user's primary key
    is passed to `public function delete_user()` from within the URL. It is picked
    up by `$this->uri->segment(3)`and is sent to the, `users/delete_user.php` view
    by assigning it in `$this->load->view('user/delete_user', $data['id])`. Within
    the view, the `$id` value is written as a hidden HTML form the element.
  prefs: []
  type: TYPE_NORMAL
- en: It is necessary to assign the user's ID as a hidden element in the form because
    when the form is submitted, `public function delete_user()` will require the ID
    of the user. A the form is being submitted rather than a first load, the ID will
    not be available from `$this->uri->segment(3)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`public function delete_user()` performs several functions similar to `public
    function new_user()`. These are loading the view file, validating any data inputted
    after submission, and displaying a view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If `public function delete_user()` is being called as the result of a form
    submission, CodeIgniter will begin checking and validating the user input; in
    this case, submitted input consists only of the users ID, which is written as
    a hidden form element in the view. The first line of the function loads the necessary
    library to enable checking the user''s input: `$this->library(''form_validation'')`,
    and our error delimiters are set with the function, `set_error_deimiters()`. The
    user ID is then checked against the criteria we specify. A full list of validation
    criteria options are available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html](http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html).
    We will also discuss form validation in greater detail in [Chapter 5](ch05.html
    "Chapter 5. Managing Data In and Out"), *Managing Data In and Out*.'
  prefs: []
  type: TYPE_NORMAL
- en: If validation isn't passed (the input from the user didn't meet the requirements
    we set), then `$this->form_validation->run()` will return `FALSE`, and the form
    will be displayed again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once validation is passed (`$this->form_validation->run()` returns `TRUE`),
    then we''ll package up the input into an array: `$data`. As we''re using Active
    Record to interact with the database, the keys of the `$data` array must match
    the column names of our database table.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `$data` array is then sent to the `Users_model` for deletion from the database
    using the syntax: `$this->Users_model->delete_user($id)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Generating passwords with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to explain this. As this is a recipe book, I'm going to give
    you the structure for a user to register (part of this process is creating a hash
    from the password the user will provide) and also the signin form (part of this
    process is to validate a password against a hash). But I'm aware that you won't
    necessarily need all the following files, the lines which focus on password hashing
    in the following examples. This way, you can quickly see how the process works
    and apply it to your situation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s make the database schema to support the recipe. If you have your
    own table ready and are just looking for the hashing code, you can probably skip
    this part. Otherwise, copy the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit h
  prefs: []
  type: TYPE_NORMAL
- en: 'The register table description is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item name | Attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `user_id` | `INTEGER(11)` | Table primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `user_first_name` | `VARCHAR(125)` | The user''s first name |'
  prefs: []
  type: TYPE_TB
- en: '| `user_last_name` | `VARCHAR(125)` | The user''s last name |'
  prefs: []
  type: TYPE_TB
- en: '| `user_email` | `VARCHAR(255)` | The user''s e-mail address, for example,
    `<[name@example.org](mailto:name@example.org)>` |'
  prefs: []
  type: TYPE_TB
- en: '| `user_hash` | `TEXT` | The hash of their password generated by `$this->encrypt->sha1($string_to_hash
    [, $key])` |'
  prefs: []
  type: TYPE_TB
- en: You'll also have to create a sessions table and ensure that the config file
    is set up to handle database stored sessions. For instructions on how to do that,
    see
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s the database done! We''re going to use the CodeIgniter **encrypt**
    library to do the heavy lifting of hashing the password for us, specifically,
    `$this->encrypt->sha1($string_to_hash [, $key])`, where `$key` is optional. There
    are a few things we need to set up first.You''ll need to decide on the encryption
    key you want to use: this can either be the encryption key that you''ve set in
    `$config[''encryption_key'']` in `config.php`, or you can pass a new key as a
    second parameter to CodeIgniter. The presence of this second parameter overrides
    the value set in `$config[''encryption_key'']`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we are using the value in `$config['encryption_key']`
    to serve as our encryption key; as such, we won't be passing a second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating a key, try not to use just a single word as this may be cracked
    using a rainbow table; instead use a fairly long string with random alphanumeric
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''re going to create the following seven files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/register.php`: This file contains
    a form allowing the user to sign up, and a record is then added to the database
    table (SQL in the *Getting ready* section)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/register_model.php`: This file interacts
    with the database for the controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/register/register.php`: This file is
    for the registration form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/signin.php`: This file handles
    the login process, including comparing the password against the hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/signin_model.php`: This file interacts
    with the database for the controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signin/signin.php`: This file is for
    the signin form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signin/loggedin.php`: This file presents
    a page indicating a successful sign-in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code into the, `/path/to/codeigniter/application/controllers/register.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into the, `/path/to/codeigniter/application/models/register_model.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into the, `/path/to/codeigniter/application/views/register/register.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code in to the, `/path/to/codeigniter/application/controllers/signin.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code in to the, `/path/to/codeigniter/application/models/signin_model.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then copy the following code in to the, `/path/to/codeigniter/application/views/signin/signin.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then copy the following code in to the, `/path/to/codeigniter/application/views/signin/loggedin.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, there's a lot going on in this example but it's actually fairly simple.
    Take a look at the preceding code again—specifically the lines which are highlighted
    as these are the lines that are password specific. The files created in the preceding
    section show the creation of a user and the logging in of that user. Of course,
    your code will be different; but let's concentrate on those highlighted lines.
  prefs: []
  type: TYPE_NORMAL
- en: They show the code that performs the hashing and comparison of passwords (a
    concise version can be found in the following recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let''s look at the register user process. The register controller
    accepts user-submitted information from the `/path/to/codeigniter/application/views/register/register.php`
    view. Upon successfully passing the following validation line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: will generate a hashed value using the password the user supplied, this hashed
    value is stored in the, `$hash` variable (obvious huh?).
  prefs: []
  type: TYPE_NORMAL
- en: '`$hash` is then added to the `$data` array for insertion into the database
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s take a look at the sign-in process. `public function login()` accepts
    the e-mail address and password from the user (from the, `/path/to/codeigniter/application/views/signin/signin.php`
    view), and upon successfully passing validation, we look up the user-supplied
    e-mail address in the register table as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If the e-mail exists, we generate a hash from the user-supplied password. This
    process is the same as the functionality found in the registration process as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, take a look at the highlighted line in the preceding code. We're comparing
    the hash we generated from the user-supplied password against `user_hash` in the
    record we pulled from the register table. If the two hashes do not match, then
    the user must not have supplied the correct password, so we send them back to
    the signin form and wait for another attempt. However, if the two hashes do match,
    then the user must have supplied the correct password, so we'll start a session
    for them and redirect them to `public function loggedin()`.In this case, it is
    a brief message, indicating that they are successfully logged in. However, in
    your application, this would be some sort of password protected member area, perhaps
    a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Generating passwords with CodeIgniter – the bare bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, this is just the bare bones process. If you want a full example, then
    the preceding recipe is for you. This recipe is for people who already have a
    create-user process, but wish to integrate some password protection into an existing
    process.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t need the preceding recipe and only require the bare bones of
    hashing/comparing; please refer to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating a hash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To generate a hash, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a hash with a key in `$config[''encryption_key'']` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a hash with a key other than that in `$config[''encryption_key'']`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In a production environment, replace the `$key` value (`This-is-the-key`) with
    a realistic value. Make it a long string of alphanumeric characters; the more
    random the better!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Comparing hashed values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The hash values are compared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Generating a hash with the $config[''encryption_key''] value**: First, we
    load the encrypt library with `$this->load->library(''encrypt'')`, then we call
    the `sha1` function in the encrypt library and pass to it the, `$text_to_be_hashed`
    variable. The key used to encrypt the `$text_to_be_hashed string`, comes from
    the value set in the config array item, `$config[''encryption_key'']`, in the
    `config.php` file. `$this->encrypt->sha1($text_to_be_hashed)` will return a string
    that we''ll store in the, `$hash` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generating a hash without the $config[''encryption_key''] value (that is
    adding a second parameter)**: First, we load the encrypt library with `$this->load->library(''encrypt'')`,
    then we call the `sha1` function in the encrypt library and pass to it the, `$text_to_be_hashed`,
    and also an encryption key as a second parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Adding this key as a second parameter (`$key`) will cause CodeIgniter to use
    that key rather than any value set in `$config['encryption_key']`. `$this->encrypt->sha1($text_to_be_hashed,
    $key)` will return a string that we'll store in the variable, `$hash`.
  prefs: []
  type: TYPE_NORMAL
- en: After loading the encryption support library with `$this->load->library('encrypt')`,
    a string of text (in this case, in the, `$password` variable) is passed to the
    `sha1` function in the encrypt library, storing its product in the, `$hash` variable.
    We can now use this variable to compare a stored value, such as from a database
    select result. In this example, we compare `$hash` with the value in `$row->user_hash`.
    If they do not match, we send `redirect()` to the login screen, but you could
    easily code any action, such as logging the event or displaying a message rather
    than a redirect. If the `$hash` and `$row->user_hash` values do match, then you
    could perform an action based on this confirmation; an example would be logging
    the user in.
  prefs: []
  type: TYPE_NORMAL
- en: Forgot password? – resetting passwords with CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Everyone forgets their password from time to time and it's likely that a user
    may wish to be reminded of their password. However, we cannot send them their
    password as we don't have it; we are only storing a hash of it—the password isn't
    actually stored in the database. The user will have to reset their password; generating
    a new hash as they do so.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to be sure that a user has genuinely requested a new password, therefore,
    we''re going to add a column in the register table to support this. The new column
    called `forgot_password` will contain a code which we will generate when a new
    password is requested; and we will check that code when the user is redirected
    back to the site from a url in an e-mail, which we will also send to them. Copy
    the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signin/forgot_password.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signin/new_password.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And amend the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/signin.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/signin_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signin/signin.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code into `/path/to/codeigniter/application/views/signin/forgot_password.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code into `/path/to/codeigniter/application/views/signin/new_password.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend `/path/to/codeigniter/application/controllers/signin.php`, adding the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, amend `/path/to/codeigniter/application/models/signin_model.php`, adding
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, amend `/path/to/codeigniter/application/views/signin.php`, adding the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''re only changing one line from this file: the highlighted line is an `anchor()`
    statement, which displays a link to the forgot password form.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, take a look at the following flowchart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's imagine that a user has forgotten their password and wishes to be
    reminded of it. The user will click on the forgot password link in the amended
    signin form (`/path/to/codeigniter/application/views/signin/signin.php`), which
    redirects them to `public function forgot_password()` in the signin controller.
    The `forgot_password()` function immediately displays the, `/path/to/codeigniter/application/views/signin/forgot_password.php
    view`. The user enters an e-mail address and submits the form using the **Submit**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Next the `forgot_password()` function will validate the input supplied by the
    user and if that input passes the validation rules the `forgot_password()` function
    will look in the database to see if a row exists in the register table whose e-mail
    matches the supplied e-mail in the form submission. If a match is found a tracking
    code (this is used for the hidden form element in the form view file) is generated
    and assigned to the `$data` array. This code is then written to the row in the
    database we just looked for, and an e-mail is sent to the e-mail address associated
    with the account (or row). In this case we're using the PHPs `mail()` function
    rather than CodeIgniter's mail functionality; you can of course use CodeIgniter
    to send the e-mail rather than PHP `mail()`—we discuss sending e-mails in CodeIgniter
    in [Chapter 4](ch04.html "Chapter 4. Email, HTML Table, and Text Libraries"),
    *Email, HTML Table, and Text Libraries*, anyway—back to the story.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it's over to our user. They should look in their e-mail inbox for the
    e-mail we've just sent them, if they do they'll see a link in that e-mail directing
    them back to our system and to `public function new_password()`. Clicking on that
    link will open the, `/path/to/codeigniter/application/views/signin/new_password.php
    view`, which will display the reset password form.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the `$code` we parameter generated? `$code` was the third URL
    parameter and is now set as a hidden form element. The user enters their e-mail
    and password (twice to confirm) and clicks on **Submit**. The form then posts
    to `public function new_password()`, which validates for form.
  prefs: []
  type: TYPE_NORMAL
- en: Upon passing validation, the e-mail address and code are looked up in the register
    table. If found (and they match), a new `$hash` array is made and saved to their
    record in the database. Finally, they're redirected to the signin form, where
    they can log()in using their new password.
  prefs: []
  type: TYPE_NORMAL
