- en: Chapter 7. Search Using Lucene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*More often than not, we will come across web applications that need support
    for built-in search capabilities. Sometimes the search could involve searching
    a simple field in a MySQL table, or at times you may want to search a document
    or a plain text file; there are multiple ways to address the search requirements
    using various search libraries. Lucene is one such library that offers excellent
    search capabilities for implementing full text search.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will be using Zend Framework''s Lucene search implementation.
    Zend Framework 1.0 had a built-in `Zend_Search_Lucene` library which supported
    indexing and searching with Lucene; in ZF 2.0, this library is available as `ZendSearch\Lucene`,
    which can be downloaded and installed on your web application. In this chapter,
    we will be learning the fundamentals of implementing a full-text search using
    the Lucene search library in the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the `ZendSearch` library in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating data index for simple MySQL data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying the Lucene index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new documents files to the index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Lucene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lucene is a high-performance, scalable information retrieval (search) library
    developed by Apache Foundation, which can be used for implementing free-text search
    in web applications. Lucene provides a simple-to-use API, which will provide powerful
    indexing and searching capability to your web application. To read more about
    Lucene visit [http://lucene.apache.org/](http://lucene.apache.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important components of the Lucene search library are explained as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Index**: Lucene index is the data store that holds all the indexed documents;
    queries are executed against the index to fetch the documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document**: A document is the default building block for a Lucene index;
    documents can be compared to records in a table. Each document holds a number
    of fields upon which queries can be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field**: Each Lucene document comprises of one or more fields; it is not
    necessary that all the fields are indexed, fields can also be stored without indexing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Lucene search works based on the index, so it is necessary to have the
    index updated with the latest content to get the best search results. The following
    diagram explains the overview of the Lucene search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Lucene](img/1929OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – installing ZendSearch\Lucene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for installing `ZendSearch\Lucene`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ZendSearch\Lucene` was not available as a composer package at the time of
    writing this book. So, we will check out the source from the GitHub repository.
    The repository is available at [https://github.com/zendframework/ZendSearch](https://github.com/zendframework/ZendSearch).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next we need to navigate to the `vendor` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the Zend search repository into the `vendor` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next we should configure the ZendSearch library using composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the library is configured, we will need to define a module-level configuration
    to store the index location. To do this, we need to modify `CommunicationApp/module/Users/config/module.config.php`,
    and add a new configuration for `search_index`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now downloaded and configured the `ZendSearch` library for Zend Framework
    2.0; the previous tutorial also provides us with a guideline for downloading and
    installing packages which cannot be downloaded directly from Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the `ZendSearch\Lucene` search library installed, our next
    task will be to create a Lucene index for some of the data that is already stored
    in our communication application.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Indexing is a fairly straightforward process using `ZendSearch\Lucene`. All
    we need is to create documents with fields and values, and keep adding the document
    to the index. You can also remove documents, update documents, and clear an index.
    The following classes are used in index generation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Field` – The `ZendSearch\Lucene\Document\Field` class allows users to define
    a new document field; this field can be classified into one the following types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Field::keyword($name, $value, $encoding = ''UTF-8'')`: the `keyword` field
    type is used to identify string fields that don''t have to be tokenized, yet need
    to be indexed and stored. For example, date and URL.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Field::unIndexed($name, $value, $encoding = ''UTF-8'')`: The `unIndexed` field
    type is used to store fields in the index without having to index/tokenize them.
    For example, ID fields.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Field::binary($name, $value)`: The `binary` field type is used for storing
    binary values in the index.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Field::text($name, $value, $encoding = ''UTF-8'')`: The `text` field type
    is the most common field type used for describing short strings which are tokenized
    and stored in the index.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Field::unStored($name, $value, $encoding = ''UTF-8'')`: The `unStored` field
    type is used to identify fields that will be tokenized and indexed, but not stored
    in the index.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Document` – The `ZendSearch\Lucene\Document` class allows definition of a
    new index document. Some of the most commonly-used methods in this class are described
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addField(Document\Field $field)`: Adds a new field to the document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFieldNames()`: Used to retrieve all field names from the document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getField($fieldName)`: Used to retrieve a specific field from the document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFieldValue($fieldName)`: Used to retrieve a specific field value from the
    document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index` – `Index` can be retrieved using the `create()` and `open()` methods
    in the `ZendSearch\Lucene` class. Both the methods take the index path as the
    parameter and return an index of type `ZendSearch\Lucene\SearchIndexInterface`.
    The `SearchIndexInterface` provides the following methods for manipulating the
    documents inside the index:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addDocument(Document $document)`: Adds a new document to the index'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete($id)`: Deletes the indexed document based on the internal document
    ID'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optimize()`: Helps in optimizing the index, by merging all segments into a
    single segment, thereby increasing the performance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit()`: Used to commit transactions to the search index'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have learned about the methods that are used for index generation,
    let's get started and generate the index for the `uploads` table that is available
    in our communication application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – generating a Lucene index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for generating a Lucene index:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new search controller, `CommunicationApp/module/Users/src/Users/Controller/SearchController.php`,
    which will be used for searching and generating indexes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add references to `ZendSearch\Lucene`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to fetch the index location from the module configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The index document needs to be generated in the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Index field | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `upload_id` | This is non-indexed field which will be used for retrieving
    the uploaded file that gets returned in the search results |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `label` | This field is used to index the `label` field of the `uploads`
    table |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `owner` | This field is used to index the `name` field of the user who uploaded
    the document |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Create a new action to generate the index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now open the action URL (`http://comm-app.local/users/search/generateIndex`)
    in your web browser, and if everything works as expected, you will see that the
    index files that created in the `search_index` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the browser response upon a successful index
    update:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – generating a Lucene index](img/1929OS_07_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You can see in the following screenshot that the index files are generated
    and stored in the `search_index` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – generating a Lucene index](img/1929OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we have created a method to index the data stored in the `MySQL` table to
    the Lucene data store; our next step will be to have some queries executed against
    the Lucene index and to fetch and show the results.
  prefs: []
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Searching the index is relatively simple using `ZendSearch\Lucene`. The index
    needs to be opened for querying and the query string needs to be passed to the
    `find()` method in `ZendSearch\Lucene\Index`. The `find` methods return an array
    matching the hits for the specific query, and this in turn can be used to render
    the search results.
  prefs: []
  type: TYPE_NORMAL
- en: There are two options for querying the index—you can pass the plain text query
    string to the find function or you can build your own `Query` object using `ZendSearch\Lucene\Search\Query`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To read more about various query options in ZendSearch\Lucene, check the following
    developer documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://zf2.readthedocs.org/en/release-2.2.0/modules/zendsearch.lucene.queries.html](https://zf2.readthedocs.org/en/release-2.2.0/modules/zendsearch.lucene.queries.html
    )'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we will be using plain text queries, and you can
    manipulate the search results by using operators such as `:`,`+`,`-`, and field
    searches. For example, see the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A search for all documents uploaded by Anne could be retrieved by the following
    query:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A search for all documents having the word `report` and uploaded by the user
    named `Anne` could be retrieved by the following query:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A search for all documents having the word `report` and excluding the ones
    uploaded by `Anne` could be retrieved by the following query:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Time for action – displaying search results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for displaying search results:'
  prefs: []
  type: TYPE_NORMAL
- en: For displaying the search results, we will need to create a new form which will
    display the search textbox and render the search results right below the search
    form. The form will be placed in `SearchController` under `CommunicationApp/module/Users/src/Users/Controller/SearchController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new view which will be used for displaying the query window and also
    rendering search results. This will be placed under `CommunicationApp/module/Users/view/users/search/index.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now create a new action which will display the `Search` form and also query
    the Lucene index with the input provided in the `Search` form. This will be placed
    in `SearchController` under `CommunicationApp/module/Users/src/Users/Controller/SearchController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the page in your browser; you should be able to see search results for
    keywords that are available in the `label` and `owner` fields:![Time for action
    – displaying search results](img/1929OS_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On searching using `Owner Name`, you will get the following search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – displaying search results](img/1929OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now implemented the search results page, which allows us to query for
    uploaded documents using their labels and owners. The retrieved search results
    are displayed in a customized view which allows us to download the document from
    the search result.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step will be to expand the search to search the contents of the uploaded
    documents; for this we will need to make changes to the way we generate the index.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing Microsoft Office documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen in the previous example, it is usually insufficient to index
    the documents'' meta information. Most of the time the query string is only present
    in the document''s content. In order to achieve that, we need to parse the document
    and index the content; `ZendSearch\Lucene` provides support indexing the contents
    of the following document types:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For HTML documents the following are the index document creation methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Word 2007 documents the following is the index document creation method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Powerpoint 2007 documents the following is the index document creation
    method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Excel 2007 documents the following is the index document creation method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All these methods return a document of type `ZendSearch\Lucene\Document`, which
    can be improvised further by adding more index fields to it.
  prefs: []
  type: TYPE_NORMAL
- en: So let's get started by indexing the documents that are available in the `uploads`
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – indexing document files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for indexing document files:'
  prefs: []
  type: TYPE_NORMAL
- en: To index office documents, add a new `uploads` section for sample Word and Excel
    documents. In this case, we will upload a Word document and an Excel spreadsheet
    as follows:![Time for action – indexing document files](img/1929OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sample Word 2007 document
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – indexing document files](img/1929OS_07_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Sample Excel 2007 spreadsheet
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines to the indexing function present in `SearchController`,
    which is present in `CommunicationApp/module/Users/src/Users/Controller/SearchController.php`,
    so that the method picks up and indexes Word documents and Excel spreadsheets
    separately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now update the index (navigate to `http://comm-app.local/users/search/generateIndex`),
    come back to the **Document Search** page, and try searching for keywords that
    are present in the document. You should be able to see the search results as shown
    in the following screenshot:![Time for action – indexing document files](img/1929OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search results for the content inside Office documents will be as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – indexing document files](img/1929OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last task we saw the implementation of indexing and searching the content
    of Microsoft Office documents. As you can see, it is relatively easy to implement
    these features using `ZendSearch\Lucene`.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a simple task for you before you move on to the next chapter. Now that
    we have implemented indexing and searching, your task will be to modify the entities
    so that the index is updated each time changes are made to uploads. If a new upload
    is made, a document needs to be added to the index, and if an upload is deleted,
    it should be removed from the index, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following field types is not tokenized, yet is indexed and
    stored?
  prefs: []
  type: TYPE_NORMAL
- en: '`keyword ()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`unStored ()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`text()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`unIndexed()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which of the following file formats is not supported for `ZendSearch\Lucene`
    as a valid document format for content indexing?
  prefs: []
  type: TYPE_NORMAL
- en: '`.docx`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.pdf`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.xslx`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.html`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learned about implementing a simple search interface
    using `ZendSearch\Lucene`. This would be very useful when implementing search
    in any web application that you work with. In the next chapter we will be learning
    about implementing a simple e-commerce store using Zend Framework 2.0.
  prefs: []
  type: TYPE_NORMAL
