["```php\nCREATE TABLE `categories`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`name` VARCHAR(255) NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nCREATE TABLE `articles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`category_id` INT UNSIGNED NOT NULL,\n`title` VARCHAR(255) NOT NULL,\n`body` TEXT NOT NULL,\nPRIMARY KEY(`id`),\nKEY `category_id`(`category_id`),\nFOREIGN KEY `articles__categories`(`category_id`) REFERENCES `categories`(`id`)\n);\n\n```", "```php\nINSERT INTO `categories`(`id`, `name`) VALUES\n(1, 'Frameworks'),\n(2, 'Databases');\nINSERT INTO `articles`(`id`, `category_id`, `title`, `body`) VALUES\n(1, 1, 'Understanding Containable', 'Body of article'),\n(2, 1, 'Creating your first test case', 'Body of article'),\n(3, 1, 'Using bake to start an application', 'Body of article'),\n(4, 1, 'Creating your first helper', 'Body of article'),\n(5, 2, 'Adding indexes', 'Body of article');\n\n```", "```php\n<?php\nclass Article extends AppModel {\npublic $belongsTo = array(\n'Category'\n);\n}\n?>\n\n```", "```php\n<?php\nclass ArticlesController extends AppController {\npublic function view($id) {\n$article = $this->Article->find('first', array(\n'conditions' => array('Article.id' => $id)\n));\nif (empty($article)) {\n$this->cakeError('error404');\n}\n$articles = $this->Article->find('all', array(\n'conditions' => array(\n'Category.id' => $article['Category']['id'],\n'Article.id !=' => $article['Article']['id']\n),\n'order' => 'RAND()'\n));\n$this->set(compact('article', 'articles'));\n}\n}\n?>\n\n```", "```php\n<h1><?php echo $article['Article']['title']; ?></h1>\n<p><?php echo $article['Article']['body']; ?></p>\n<?php if (!empty($articles)) { ?>\n<br /><p>Related articles:</p>\n<ul>\n<?php foreach($articles as $related) { ?>\n<li><?php echo $this->Html->link(\n$related['Article']['title'],\narray(\n'action'=>'view',\n$related['Article']['id']\n)\n); ?></li>\n<?php } ?>\n</ul>\n<?php } ?>\n\n```", "```php\n    public function view($id) {\n    $article = $this->Article->find('first', array(\n    'conditions' => array('Article.id' => $id)\n    ));\n    if (empty($article)) {\n    $this->cakeError('error404');\n    }\n    $limit = !empty($this->params['url']['related']) ?\n    $this->params['url']['related'] :\n    0;\n    $articles = $this->Article->find('all', array(\n    'conditions' => array(\n    'Category.id' => $article['Category']['id'],\n    'Article.id !=' => $article['Article']['id']\n    ),\n    'order' => 'RAND()',\n    'limit' => $limit > 0 ? $limit : null\n    ));\n    $this->set(compact('article', 'articles', 'limit'));\n    }\n\n    ```", "```php\n    $slug = !empty($this->params['named']['title']) ?\n    $this->params['named']['title'] :\n    null;\n    $categorySlug = !empty($this->params['named']['category']) ?\n    $this->params['named']['category'] :\n    null;\n    $this->set(compact('slug', 'categorySlug'));\n\n    ```", "```php\n    <?php if (!empty($slug)) { ?>\n    Slug: <?php echo $this->Html->clean($slug); ?><br />\n    <?php } ?>\n    <?php if (!empty($categorySlug)) { ?>\n    Category slug: <?php echo $this->Html->clean($categorySlug); ?><br />\n    <?php } ?>\n    <h1><?php echo $article['Article']['title']; ?></h1>\n    <p><?php echo $article['Article']['body']; ?></p>\n    <?php if (!empty($articles)) { ?>\n    <br /><p>Related articles:</p>\n    <ul>\n    <?php foreach($articles as $related) { ?>\n    <li><?php echo $this->Html->link(\n    $related['Article']['title'],\n    array(\n    'action'=>'view',\n    $related['Article']['id'],\n    '?' => array('related' => $limit),\n    'category' => strtolower(Inflector::slug($related['Category']['name'])),\n    'title' => strtolower(Inflector::slug($related['Article']['title']))\n    )\n    ); ?></li>\n    <?php } ?>\n    </ul>\n    <?php } ?>\n\n    ```", "```php\nRouter::connectNamed(\narray('title' => array('match' => '^[a-z0-9_]+$', 'controller' => 'articles')),\narray('default' => true)\n);\n\n```", "```php\nRouter::connectNamed(\narray('title' => array('match' => '^[a-z0-9_]+$', 'controller'=>'articles', 'action'=>'view')),\narray('greedy' => false)\n);\n\n```", "```php\nCREATE TABLE `profiles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`name` VARCHAR(255) NOT NULL,\n`email` VARCHAR(255) NOT NULL,\n`active` TINYINT(1) NOT NULL default 1,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nINSERT INTO `profiles`(`id`, `name`, `email`, `active`) VALUES\n(1, 'John Doe', 'john.doe@email.com', 1),\n(2, 'Jane Doe', 'jane.doe@email.com', 1),\n(3, 'Mark Doe', 'mark.doe@email.com', 0);\n\n```", "```php\n<?php\nclass ProfilesController extends AppController {\npublic function index() {\n$profiles = $this->paginate();\n$this->set(compact('profiles'));\n}\npublic function edit($id) {\nif (!empty($this->data)) {\nif ($this->Profile->save($this->data)) {\n$this->Session->setFlash('Profile saved');\n$this->redirect(array('action'=>'index'));\n} else {\n$this->Session->setFlash('Please correct the errors');\n}\n} else {\n$this->data = $this->Profile->find('first', array(\n'conditions' => array('Profile.id' => $id),\n'recursive' => -1\n));\n}\n}\n}\n?>\n\n```", "```php\n<p>\n<?php echo $this->Paginator->prev(); ?>&nbsp;\n<?php echo $this->Paginator->numbers(); ?>&nbsp;\n<?php echo $this->Paginator->next(); ?>\n</p>\n<table>\n<thead><tr><th>Name</th><th>Email</th><th>Actions</th></tr></thead>\n<tbody>\n<?php foreach($profiles as $profile) { ?>\n<tr>\n<td><?php echo $profile['Profile']['name']; ?></td>\n<td><?php echo $profile['Profile']['email']; ?></td>\n<td>\n<?php echo $this->Html->link('Edit', array('action'=>'edit', $profile['Profile']['id'])); ?>\n</td>\n</tr>\n<?php } ?>\n</tbody></table>\n\n```", "```php\n<?php echo $this->Form->create('Profile'); ?>\n<?php echo $this->Form->input('name'); ?>\n<?php echo $this->Form->input('email'); ?>\n<?php echo $this->Form->end('Save'); ?>\n\n```", "```php\n    Configure::write('Routing.prefixes', array('admin', 'manager'));\n\n    ```", "```php\n    public function beforeFilter() {\n    parent::beforeFilter();\n    $prefixes = Configure::read('Routing.prefixes');\n    if (!empty($prefixes)) {\n    foreach($prefixes as $prefix) {\n    $hasPrefix = false;\n    if (!empty($this->params['prefix'])) {\n    $hasPrefix = ($this->params['prefix'] == $prefix);\n    }\n    $prefixName = 'is' . Inflector::classify($prefix);\n    $this->$prefixName = $hasPrefix;\n    $this->set($prefixName, $hasPrefix);\n    }\n    }\n    }\n    public function manager_index() {\n    $this->setAction('index');\n    }\n    public function manager_edit($id) {\n    $this->setAction('edit', $id);\n    }\n    public function admin_index() {\n    $this->setAction('index');\n    }\n    public function admin_edit($id) {\n    $this->setAction('edit', $id);\n    }\n    public function admin_add() {\n    $this->setAction('edit');\n    }\n    public function index() {\n    $profiles = $this->paginate();\n    $this->set(compact('profiles'));\n    }\n\n    ```", "```php\n    public function edit($id = null) {\n    if (!empty($id) && !$this->isAdmin && !$this->isManager) {\n    $this->redirect(array('action' => 'index'));\n    }\n    if (!empty($this->data)) {\n    if (empty($id)) {\n    $this->Profile->create();\n    }\n    if ($this->Profile->save($this->data)) {\n    $this->Session->setFlash('Profile saved');\n    $this->redirect(array('action'=>'index'));\n    } else {\n    $this->Session->setFlash('Please correct the errors');\n    }\n    } elseif (!empty($id)) {\n    $this->data = $this->Profile->find('first', array(\n    'conditions' => array('Profile.id' => $id),\n    'recursive' => -1\n    ));\n    }\n    }\n\n    ```", "```php\n    <?php\n    if ($isAdmin) {\n    echo $this->Html->link('Create Profile', array('admin' => true, 'action'=>'add'));\n    }\n    ?>\n\n    ```", "```php\n    <?php echo $this->Form->create('Profile'); ?>\n    <?php echo $this->Form->input('name'); ?>\n    <?php echo $this->Form->input('email'); ?>\n    <?php\n    if ($isManager || $isAdmin) {\n    echo $this->Form->input('active', array(\n    'options' => array(1 => 'Yes', 0 => 'No')\n    ));\n    }\n    ?>\n    <?php echo $this->Form->end('Save'); ?>\n\n    ```", "```php\n    Router::connect('/article/:category/:id-:title',\n    array('controller' => 'articles', 'action' => 'view'),\n    array(\n    'pass' => array('id'),\n    'id' => '\\d+',\n    'category' => '[^-]+',\n    'title' => '[^-]+'\n    )\n    );\n\n    ```", "```php\n    <h1><?php echo $article['Article']['title']; ?></h1>\n    <p><?php echo $article['Article']['body']; ?></p>\n    <?php if (!empty($articles)) { ?>\n    <br /><p>Related articles:</p>\n    <ul>\n    <?php foreach($articles as $related) { ?>\n    <li><?php echo $this->Html->link(\n    $related['Article']['title'],\n    array(\n    'action'=>'view',\n    'id' => $related['Article']['id'],\n    'category' => strtolower(Inflector::slug($related['Category']['name'])),\n    'title' => strtolower(Inflector::slug($related['Article']['title']))\n    )\n    ); ?></li>\n    <?php } ?>\n    </ul>\n    <?php } ?>\n\n    ```", "```php\n<?php echo $this->Html->link(\n'My article',\narray(\n'controller' => 'articles',\n'action' => 'view',\n'id' => 1,\n'category' => 'my_category',\n'title' => 'my_title'\n)\n); ?>\n\n```", "```php\n$category = $this->params['category']\n\n```", "```php\nCREATE TABLE `profiles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`username` VARCHAR(255) NOT NULL,\n`name` VARCHAR(255) NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nINSERT INTO `profiles`(`id`, `username`, `name`) VALUES\n(1, 'john', 'John Doe'),\n(2, 'jane', 'Jane Doe');\n\n```", "```php\n<?php\nclass Profile extends AppModel {\n}\n?>\n\n```", "```php\n<?php\nclass ProfilesController extends AppController {\npublic function index() {\n$profiles = $this->Profile->find('all');\n$this->set(compact('profiles'));\n}\npublic function view($username) {\n$profile = $this->Profile->find('first', array(\n'conditions' => array('Profile.username' => $username)\n));\nif (empty($profile)) {\n$this->cakeError('error404');\n}\n$this->set(compact('profile'));\n}\n}\n?>\n\n```", "```php\n<ul>\n<?php foreach($profiles as $profile) { ?>\n<li><?php echo $this->Html->link($profile['Profile']['name'], array(\n'action' => 'view',\n'userName' => $profile['Profile']['username']\n)); ?></li>\n<?php } ?>\n</ul>\n\n```", "```php\n<h1><?php echo $profile['Profile']['name']; ?></h1>\nUsername: <?php echo $profile['Profile']['username']; ?>\n<p><?php echo $this->Html->link('Profiles', array('action'=>'index')); ?></p>\n\n```", "```php\nRouter::connect('/:userName',\narray('controller' => 'profiles', 'action' => 'view'),\narray(\n'userName' => '[A-Za-z0-9\\._-]+',\n'pass' => array('userName')\n)\n);\nRouter::connect('/:controller/index/*', array('action' => 'index'));\n\n```", "```php\n<?php echo $this->Html->link('My Profile', array(\n'controller' => 'profiles',\n'action' => 'view',\n'userName' => 'john'\n)); ?>\n\n```", "```php\n<?php echo $this->Html->link('Profiles', array(\n'controller' => 'profiles',\n'action' => 'index'\n)); ?>\n\n```", "```php\npublic function add() {\nif (!empty($this->data)) {\n$this->Profile->create($this->data);\nif ($this->Profile->save()) {\n$this->Session->setFlash('Profile created');\n$this->redirect(array(\n'action'=>'view',\n'userName' => $this->data['Profile']['username']\n));\n} else {\n$this->Session->setFlash('Please correct the errors below');\n}\n}\n}\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'username',\n'name'\n));\necho $this->Form->end('Save');\n?>\n\n```", "```php\nRouter::connect('/home', array(\n'controller' => 'pages', 'action' => 'display', 'home'\n));\n\n```", "```php\n    <?php\n    class Profile extends AppModel {\n    public $validate = array(\n    'username' => array(\n    'notEmpty',\n    'valid' => array(\n    'rule' => 'validateUsername',\n    'message' => 'This user name is reserved'\n    )\n    ),\n    'name' => 'notEmpty'\n    );\n    }\n    ?>\n\n    ```", "```php\n    public function validateUsername($value, $params) {\n    $reserved = Router::prefixes();\n    $controllers = array_diff(\n    Configure::listObjects('controller'),\n    (array) 'App'\n    );\n    if (!empty($controllers)) {\n    $reserved = array_merge($reserved, array_map(array('Inflector', 'underscore'), $controllers));\n    }\n    $routes = Router::getInstance()->routes;\n    if (!empty($routes)) {\n    foreach($routes as $route) {\n    if (!empty($route->template) && preg_match('/^\\/([^\\/:]+)/', $route->template, $matches)) {\n    $reserved[] = strtolower($matches[1]);\n    }\n    }\n    }\n    return !in_array(strtolower(array_shift($value)), $reserved);\n    }\n\n    ```", "```php\n    App::import('Lib', 'ProfileRoute');\n    Router::connect('/:userName',\n    array('controller' => 'profiles', 'action' => 'view'),\n    array(\n    'routeClass' => 'ProfileRoute',\n    'pass' => array('userName')\n    )\n    );\n\n    ```", "```php\n    <?php\n    App::import('Core', 'Router');\n    class ProfileRoute extends CakeRoute {\n    public function match($url) {\n    if (!empty($url['userName']) && $this->_exists($url['userName'])) {\n    return parent::match($url);\n    }\n    return false;\n    }\n    public function parse($url) {\n    $params = parent::parse($url);\n    if (!empty($params) && $this->_exists($params['userName'])) {\n    return $params;\n    }\n    return false;\n    }\n    protected function _exists($userName) {\n    $userNames = Cache::read('usernames');\n    if (empty($userNames)) {\n    $profiles = ClassRegistry::init('Profile')->find('all', array(\n    'fields' => array('username'),\n    'recursive' => -1\n    ));\n    if (!empty($profiles)) {\n    $userNames = array_map(\n    'strtolower',\n    Set::extract('/Profile/username', $profiles)\n    );\n    Cache::write('usernames', $userNames);\n    }\n    }\n    return in_array($userName, (array) $userNames);\n    }\n    }\n    ?>\n\n    ```", "```php\n    public function afterSave($created) {\n    parent::afterSave($created);\n    Cache::delete('usernames');\n    }\n    public function afterDelete() {\n    parent::afterDelete();\n    Cache::delete('usernames');\n    }\n\n    ```"]