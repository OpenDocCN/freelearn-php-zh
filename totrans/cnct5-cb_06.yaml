- en: Chapter 6. Creating CRUD Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating controller files for single pages on the dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating view files for single pages on the dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding single pages to the dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a form to create items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving data to the database from a controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view to display a list of database items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding editing capabilities to create a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a delete action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the features that has made concrete5 such an increasingly popular choice
    as a content management system is the fact that it allows developers to customize
    it quickly and easily. A common task when customizing content management systems
    is to create customized interfaces to allow site editors edit special content
    in a consistent manner.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a website that manages a list of books in the database. Sure, a site
    editor could simply maintain this list as a typical block of content, but this
    can be tedious, and the results aren't guaranteed to be consistent. This is where
    creating CRUD interfaces can be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD (short for create, read, update, and delete) interfaces can easily be added
    to concrete5 to allow users to easily manage custom data in the database. In this
    chapter, we will learn how to create CRUD interfaces in the concrete5 dashboard.
    Combining the different recipes in this chapter will result in a fully functional
    CRUD to manage blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD interfaces largely revolve around **single pages**. Single pages in concrete5
    are just like regular pages, except that they can have a PHP controller file and
    a separate view file, allowing for advanced functionality. This allows developers
    to use MVC conventions and keep their code organized. Single pages are also considered
    to be more permanent than regular pages, as they aren't added or removed as frequently.
  prefs: []
  type: TYPE_NORMAL
- en: A note about the data in this chapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The chapter will revolve around managing simple blog posts in the database.
    To work with this data, execute the following SQL code on your database. The code
    will also be available for download on the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating controller files for single pages on the dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in creating single pages for use on the dashboard is to create
    the controller files for each page. Since we will be creating pages to add, edit,
    and list the blog posts, we will need to add two single pages to the dashboard,
    a default view (which will list the blog posts) and an add view (which will be
    a form to add and edit posts).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The names of files and directories are important; concrete5 will need them to
    match up with the path that displays in the URL of the site. For example, if we
    want our list of blog posts to appear at `http://example.com/dashboard/posts`,
    we will have to be conscious of that fact when naming files and classes. In this
    recipe, we will add single pages to `/dashboard/posts` and `/dashboard/posts/add`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating controller files for simple pages on the dashboard are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using your operating system's file manager (or your favorite FTP tool or text
    editor), create a directory in `/controllers` called `dashboard/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a file called `posts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a new directory called `posts/` in `/controllers/dashboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the controller file for the add/edit form in `/controllers/dashboard/posts/add.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your files and directories should look like the following screenshot:![How to
    do it...](img/4548_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `/controllers/dashboard/posts.php` file in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare the controller class, extending the core controller class, as shown
    in the following code snippet. Save this file and close it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the file in `/controllers/dashboard/posts/add.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare the class for the form controller, being sure to extend the core controller
    as well, as shown in the following code snippet. Close this file and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 makes use of the convention over configuration concept when it comes
    to single pages. Developers simply have to remember how concrete5 expects files
    to appear and then concrete5 will do all of the work in terms of loading classes
    and instantiating them. As a result, file and directory names, as well as the
    class names of the controllers are important. The files we have created here will
    (eventually) be available at `http://example.com/dashboard/posts` and `http://example.com/dashboard/posts/add`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating view files for single pages on the dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Single pages need both controller and view files. Adhering to MVC design principles
    dictates that the presentation code (HTML) should be separate from the controller
    logic. Adding view files is very similar to adding controllers, which we learned
    in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just how it was when we added controllers, the file and directory names are
    important here as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating view files for simple pages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in `/single_pages` called `dashboard/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a file called `posts.php` in `/single_pages/dashboard/posts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a directory called `posts/` in `/single_pages/dashboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create a file called `add.php` in `/single_pages/dashboard/posts/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The contents of your `single_pages/` directory should look like the following
    screenshot:![How to do it...](img/4548_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The file and directory names should conform to how the pages will appear in
    the sitemap and in the URLs. The files and directories in this recipe would produce
    single pages at `http://example.com/dashboard/posts` and `http://example.com/dashboard/posts/add`.
    The make it PHP files that we added do not need to contain anything yet.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding single pages to the dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the controller and view files have been created in the concrete5 filesystem,
    there is still one more step that needs to be performed before we can visit these
    pages in the browser and begin adding custom CRUD logic. The pages must be added
    in the concrete5 sitemap so that the CMS knows the pages exist and can direct
    requests to them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can add single pages to the site, the view and controller files must
    exist in the filesystem. Refer to the previous two recipes on how to do this correctly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the single pages manager of the dashboard by visiting `/dashboard/pages/single`
    (you may be asked to log in). The page will look like the following screenshot:![How
    to do it...](img/4548_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the path of the posts page (`/dashboard/posts`) and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the path of the add page (`/dashboard/posts/add`) and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pages have now been added and can be viewed by visiting their respective
    URLs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will verify whether the controller and view files exist, and then
    will add the new single page to the sitemap. This makes the page available to
    access via URL, and if the page is stored on the dashboard, concrete5 will automatically
    perform access control checks on the user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a form to create items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to add bare bones single pages to the dashboard, we can
    create the real CRUD interfaces. The first interface that we will program is the
    form for creating and editing blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you will need to make sure that you know how to add controller and view
    files for the single pages. Refer to the first three recipes in this chapter for
    guidance on how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our blog posts in this chapter will have three fields: `title`, `content`,
    and `post date`. The `title` and `content` fields will be set by the user with
    the form in this recipe, and the `post date` will be set by our controller once
    the form has been submitted.'
  prefs: []
  type: TYPE_NORMAL
- en: To keep this chapter on point, much of the irrelevant HTML surrounding our form
    has been omitted. Refer to the book's website to see the complete HTML code if
    you are having trouble with the markup of your form.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a form to create items are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/single_pages/dashboard/posts/add.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will make use of the form helper, so load that helper at the top of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wrap everything in a `div` tag with the class of `ccm-ui` so our form will take
    advantage of the Bootstrap styles included in concrete5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the Dashboard helper to output the appropriate HTML for the header of the
    form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the form's `action` to the `save` function of the controller and make sure
    it is sending the data as a `POST` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Echo the input for the `title` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Echo the input for the `content` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the submit button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a cancel button and have it take the user back to the posts listing when
    clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `add.php` view file, as it is time to move to the controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `add.php` view file is an interface for a concrete5 `View` object. As a
    result, the `$this` keyword is set to an instance of the `View` class. Using functions
    such as `action` and `url` on the `$this` keyword will generate URLs that are
    aware of the concrete5 site's settings, such as if the site has pretty URLs enabled,
    or if the site is located in a sub-directory.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Form helper, we can quickly output the fields that we need to display
    on the form. The Form helper will be even more useful when we add the ability
    to edit data, which will happen later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned at the beginning of this chapter, most of the boilerplate HTML
    surrounding the form here was left out of the chapter. Please download the complete
    source code from the book's website if you wish to see how the entire page is
    structured.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe in [Chapter 4](ch04.html "Chapter 4. Using
    the Core Helpers"), *Using the Core Helpers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom forms with the Form helper* recipe in [Chapter 4](ch04.html
    "Chapter 4. Using the Core Helpers"), *Using the Core Helpers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving data to the database from a controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving data to the database from a controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have the HTML (and related helper PHP) for your form created, it is
    time to make that form do something. In the previous recipe, we set the action
    of our HTML form to the `save` action of the controller. In this recipe, we will
    write the code of that save action, so that our blog posts will be stored in the
    database once the save button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is continuing the chapter's theme of creating a CRUD interface for
    managing simple blog posts. Make sure the previous recipes in this chapter have
    been completed before working on this part. Also, make sure that the database
    table specified in the chapter introduction exists.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for saving data to the database from a controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new model in `/models/blog_post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `/models/blog_post.php` in your code editor and create the `BlogPost` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `/controllers/dashboard/posts/add.php` in your preferred code or text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the `save` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `save` function, load the `BlogPost` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new instance of the `BlogPost` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the `title` to the value that was submitted in the HTTP `POST` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the `content` to the value that was submitted in the form `POST` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the `post date` to the current date/time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Redirect the user to the listing of the posts, which will indicate that the
    save was successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `save` function is run whenever an HTTP request (`GET` or `POST`) is made
    to `/dashboard/posts/add/save`, and that is exactly where the HTML form sends
    its data when it is submitted. We load the `BlogPost` model and set each of its
    attributes, finally saving the new item to the database and redirecting the user
    to the post listing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In real life usage, you would want to use the Validation Helper to make sure
    that users have filled out the form correctly and that both the title and content
    fields were not empty.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a form to create items* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Working with Databases and Models"), *Working
    with Databases and Models*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view to display a list of database items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can add items to our database, it sure would be nice to have an
    interface to show what items already exist in our table, and to add, edit, and
    delete those items from there.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will handle the Read aspect of CRUD interfaces by creating
    an HTML table that lists all of the blog posts stored in the database, as well
    as provide buttons to edit and delete those items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the rest of the recipes in this chapter, we will be dealing with simple
    blog posts. Make sure that the previous recipes have been completed prior to working
    with this recipe, otherwise there may be a step missing!
  prefs: []
  type: TYPE_NORMAL
- en: Some of the boilerplate HTML in this recipe has been omitted from this chapter
    in order to keep the focus on the code that is important to know. The website
    for this book does contain a complete source code download that will allow you
    to explore the entire HTML code in this interface.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a view to display a list of database items are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/controllers/dashboard/posts.php` in your preferred text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the `view` function, which will automatically get run when the page loads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `view` function, load the `BlogPost` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new instance of `BlogPost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find all of the blog posts by passing a truthy condition (1=1) to the `find`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set a variable called `$posts` on the view that is equal to the results of the
    model query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the controller file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the posts index view which is located at `/single_pages/dashboard/posts.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure to create a `div` tag that has a class of `ccm-ui` in order to make
    use of the built-in Bootstrap styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the Dashboard helper to generate the HTML for the header section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a table to hold the posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will need headings for the four columns we will be displaying.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loop through the `$posts` variable that was set in the controller and output
    each row of posts. The last column will contain the buttons to edit or delete
    each post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the view file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an HTTP `GET` or `POST` request is made to `/dashboard/posts/`, the `view`
    function on the posts controller is automatically executed. In this function,
    we load data from the `BlogPost` model, and then send that data to the view. This
    allows us to keep the real business logic out of our view files and create more
    reusable and maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a form to create items* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving data to the database from a controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding editing capabilities to create a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have added the ability to create and view items, it is time for
    the third facet of CRUD interfaces: editing. In this recipe, we will implement
    the logic necessary to be able to edit items using the form that we created in
    the recipe *Creating a form to create item*.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the rest of the recipes in this chapter, this recipe revolves around
    the concept of managing simple blog posts, each with a title, a block of content
    text, and a post date. Make sure that the previous recipes have been completed
    before embarking on this latest journey! The MySQL data for this recipe is also
    included at the beginning of this chapter as well as on the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for adding editing capabilities to create a form are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the controller file for the add form (located at `/controllers/dashboard/posts/add.php`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare the `edit` function, with a single parameter for the `ID` parameter
    of the post to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `edit` function, load the `blog post` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new instance of the `model` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `post` object using the `ID` parameter that was passed in via the edit
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the `post` variable to the view, casting the `post` object into an array
    to prevent the add form from breaking when there is no post object set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `save` function of the controller, add the following code just below
    `$post = new BlogPost()`;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the `save` function call to use the `replace` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the controller file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `view` file, located at `/single_pages/dashboard/posts/add.php`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a second parameter to the `title` input that will populate the field with
    the post's title if it exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a second parameter to the `content` input that will pre-fill the contents
    when the form is in edit mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just below the closing table tag, add the following snippet to add a hidden
    input when the form is in edit mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the `view` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a request is made to the URL `/dashboard/posts/add/edit/<id>`, concrete5
    will automatically fire the `edit` function of the controller and pass the `ID`
    parameter as the first parameter. Then we can load the corresponding model and
    send the data to the view. We need to cast the post data into an array so that
    the form will still work even if it is not in edit mode.
  prefs: []
  type: TYPE_NORMAL
- en: We also add a little snippet to the `save` function to make sure that if there
    is an ID included in the `POST` request, then we need to save an existing post
    rather than create a new one. By changing the `save` function call to `replace`,
    we are telling the model to create a brand new record if one does not exist, otherwise
    it will simply update the existing model.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In real life usage, it would be smart to check the `ID` parameter in the edit
    function to make sure that it is set. Also, it would be a good idea to handle
    requests in which a post is loaded that doesn't exist.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controller files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a form to create items* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving data to the database from a controller* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a delete action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final pillar of the CRUD interface is the ability to delete items. In concrete5,
    this is a little bit more simple than the other CRUD tasks, as deleting items
    typically doesn't require a visual component. In this recipe, we will delete a
    blog post and simply redirect the user back to the index view of the posts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue working with the concept of simple blog posts. This recipe
    assumes that you have completed the previous recipes in this chapter and have
    the appropriate database tables created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the controller file located at `/controllers/dashboard/posts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare a new function called `delete` that has one parameter, `$id`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `delete` function, load the `blog posts` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new instance of the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the post by its ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the post by calling the `delete` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Redirect the user back to the posts index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a request is made to `/dashboard/posts/delete/<id>`, the `delete` function
    of the posts controller is executed. In this controller, we simply load a post
    by its ID, and then call the built-in `delete` function of the model. Then, we
    just redirect users back to the post listing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It would be wise to verify that the post with the specified ID exists before
    deleting. Also, most users would expect some kind of confirmation dialogue before
    performing such a destructive action, so that would be a nice thing to add in
    a real life situation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating controllers for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating view files for single pages on the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding single pages to the dashboard* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
