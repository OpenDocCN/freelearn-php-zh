- en: Chapter 6. Creating CRUD Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：创建 CRUD 接口
- en: 'In this chapter we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Creating controller files for single pages on the dashboard
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仪表板上创建单页的控制器文件
- en: Creating view files for single pages on the dashboard
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仪表板上创建单页的视图文件
- en: Adding single pages to the dashboard
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将单页添加到仪表板
- en: Creating a form to create items
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建创建项的表单
- en: Saving data to the database from a controller
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器将数据保存到数据库
- en: Creating a view to display a list of database items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于显示数据库项列表的视图
- en: Adding editing capabilities to create a form
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加编辑功能以创建表单
- en: Creating a delete action
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建删除操作
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the features that has made concrete5 such an increasingly popular choice
    as a content management system is the fact that it allows developers to customize
    it quickly and easily. A common task when customizing content management systems
    is to create customized interfaces to allow site editors edit special content
    in a consistent manner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 作为内容管理系统越来越受欢迎的一个特性是它允许开发者快速轻松地自定义它。在自定义内容管理系统时，一个常见的任务是创建自定义界面，以便网站编辑以一致的方式编辑特殊内容。
- en: Consider a website that manages a list of books in the database. Sure, a site
    editor could simply maintain this list as a typical block of content, but this
    can be tedious, and the results aren't guaranteed to be consistent. This is where
    creating CRUD interfaces can be beneficial.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个管理数据库中书籍列表的网站。当然，网站编辑可以简单地像典型内容块一样维护这个列表，但这可能很繁琐，而且结果可能无法保证一致。这就是创建 CRUD
    接口可以有益的地方。
- en: CRUD (short for create, read, update, and delete) interfaces can easily be added
    to concrete5 to allow users to easily manage custom data in the database. In this
    chapter, we will learn how to create CRUD interfaces in the concrete5 dashboard.
    Combining the different recipes in this chapter will result in a fully functional
    CRUD to manage blog posts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD（代表创建、读取、更新和删除）接口可以轻松添加到 concrete5 中，使用户能够轻松管理数据库中的自定义数据。在本章中，我们将学习如何在 concrete5
    仪表板中创建 CRUD 接口。结合本章中的不同菜谱将产生一个完全功能的 CRUD，用于管理博客文章。
- en: CRUD interfaces largely revolve around **single pages**. Single pages in concrete5
    are just like regular pages, except that they can have a PHP controller file and
    a separate view file, allowing for advanced functionality. This allows developers
    to use MVC conventions and keep their code organized. Single pages are also considered
    to be more permanent than regular pages, as they aren't added or removed as frequently.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 接口主要围绕 **单页** 展开。在 concrete5 中，单页就像常规页面一样，只不过它们可以有一个 PHP 控制器文件和一个单独的视图文件，这允许高级功能。这允许开发者使用
    MVC 规范并保持代码整洁。单页也被认为比常规页面更永久，因为它们不会被频繁地添加或删除。
- en: A note about the data in this chapter
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本章数据的说明
- en: The chapter will revolve around managing simple blog posts in the database.
    To work with this data, execute the following SQL code on your database. The code
    will also be available for download on the book's website.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将围绕在数据库中管理简单的博客文章。要处理这些数据，请在您的数据库上执行以下 SQL 代码。代码也将可在本书的网站上下载。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating controller files for single pages on the dashboard
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在仪表板上创建单页的控制器文件
- en: The first step in creating single pages for use on the dashboard is to create
    the controller files for each page. Since we will be creating pages to add, edit,
    and list the blog posts, we will need to add two single pages to the dashboard,
    a default view (which will list the blog posts) and an add view (which will be
    a form to add and edit posts).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板上创建用于显示的单页的第一步是为每个页面创建控制器文件。由于我们将创建用于添加、编辑和列出博客文章的页面，我们需要在仪表板上添加两个单页，一个是默认视图（将列出博客文章）和一个添加视图（将是一个用于添加和编辑文章的表单）。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The names of files and directories are important; concrete5 will need them to
    match up with the path that displays in the URL of the site. For example, if we
    want our list of blog posts to appear at `http://example.com/dashboard/posts`,
    we will have to be conscious of that fact when naming files and classes. In this
    recipe, we will add single pages to `/dashboard/posts` and `/dashboard/posts/add`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和目录的名称很重要；concrete5 需要它们与网站 URL 中显示的路径相匹配。例如，如果我们想让我们的博客文章列表出现在 `http://example.com/dashboard/posts`，我们命名文件和类时必须考虑到这一点。在这个菜谱中，我们将向
    `/dashboard/posts` 和 `/dashboard/posts/add` 添加单页。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps for creating controller files for simple pages on the dashboard are
    as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仪表板简单页面控制器文件的步骤如下：
- en: Using your operating system's file manager (or your favorite FTP tool or text
    editor), create a directory in `/controllers` called `dashboard/`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的操作系统文件管理器（或您喜欢的FTP工具或文本编辑器），在`/controllers`目录下创建一个名为`dashboard/`的目录。
- en: Now, add a file called `posts.php`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个名为`posts.php`的文件。
- en: Next, add a new directory called `posts/` in `/controllers/dashboard`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`/controllers/dashboard`中添加一个名为`posts/`的新目录。
- en: Add the controller file for the add/edit form in `/controllers/dashboard/posts/add.php`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/controllers/dashboard/posts/add.php`中添加添加/编辑表单的控制器文件。
- en: Your files and directories should look like the following screenshot:![How to
    do it...](img/4548_06_01.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的文件和目录应如下截图所示：![如何做...](img/4548_06_01.jpg)
- en: Open the `/controllers/dashboard/posts.php` file in your preferred code editor.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开`/controllers/dashboard/posts.php`文件。
- en: Declare the controller class, extending the core controller class, as shown
    in the following code snippet. Save this file and close it.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明控制器类，扩展核心控制器类，如下代码片段所示。保存此文件并关闭它。
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open the file in `/controllers/dashboard/posts/add.php`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/controllers/dashboard/posts/add.php`中打开文件。
- en: Declare the class for the form controller, being sure to extend the core controller
    as well, as shown in the following code snippet. Close this file and save it.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明表单控制器类，确保扩展核心控制器，如下代码片段所示。关闭此文件并保存它。
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 makes use of the convention over configuration concept when it comes
    to single pages. Developers simply have to remember how concrete5 expects files
    to appear and then concrete5 will do all of the work in terms of loading classes
    and instantiating them. As a result, file and directory names, as well as the
    class names of the controllers are important. The files we have created here will
    (eventually) be available at `http://example.com/dashboard/posts` and `http://example.com/dashboard/posts/add`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5在处理单页时采用了约定优于配置的概念。开发者只需记住concrete5期望文件如何呈现，然后concrete5将负责加载类和实例化它们的所有工作。因此，文件和目录名称，以及控制器的类名都很重要。我们在这里创建的文件最终将在`http://example.com/dashboard/posts`和`http://example.com/dashboard/posts/add`处可用。
- en: See also
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建视图文件*配方'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将单页添加到仪表板*配方'
- en: Creating view files for single pages on the dashboard
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建视图文件*'
- en: Single pages need both controller and view files. Adhering to MVC design principles
    dictates that the presentation code (HTML) should be separate from the controller
    logic. Adding view files is very similar to adding controllers, which we learned
    in the previous recipe.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单页需要控制器和视图文件。遵循MVC设计原则规定，表示代码（HTML）应与控制器逻辑分开。添加视图文件与添加控制器非常相似，我们在前面的配方中已经学习过。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Just how it was when we added controllers, the file and directory names are
    important here as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们添加控制器时一样，文件和目录名称在这里也很重要。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for creating view files for simple pages are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建简单页面视图文件的步骤如下：
- en: Create a new directory in `/single_pages` called `dashboard/`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/single_pages`目录下创建一个名为`dashboard/`的新目录。
- en: Add a file called `posts.php` in `/single_pages/dashboard/posts.php`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/single_pages/dashboard/posts.php`中添加一个名为`posts.php`的文件。
- en: Add a directory called `posts/` in `/single_pages/dashboard`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/single_pages/dashboard`中添加一个名为`posts/`的目录。
- en: Now, create a file called `add.php` in `/single_pages/dashboard/posts/`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`/single_pages/dashboard/posts/`中创建一个名为`add.php`的文件。
- en: The contents of your `single_pages/` directory should look like the following
    screenshot:![How to do it...](img/4548_06_02.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`single_pages/`目录的内容应如下截图所示：![如何做...](img/4548_06_02.jpg)
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The file and directory names should conform to how the pages will appear in
    the sitemap and in the URLs. The files and directories in this recipe would produce
    single pages at `http://example.com/dashboard/posts` and `http://example.com/dashboard/posts/add`.
    The make it PHP files that we added do not need to contain anything yet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和目录名称应与页面在网站地图和URL中显示的方式一致。本配方中的文件和目录将生成位于`http://example.com/dashboard/posts`和`http://example.com/dashboard/posts/add`的单页。我们添加的PHP文件目前不需要包含任何内容。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建控制器文件*配方'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将单页添加到仪表板* 菜谱'
- en: Adding single pages to the dashboard
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将单页添加到仪表板
- en: Once the controller and view files have been created in the concrete5 filesystem,
    there is still one more step that needs to be performed before we can visit these
    pages in the browser and begin adding custom CRUD logic. The pages must be added
    in the concrete5 sitemap so that the CMS knows the pages exist and can direct
    requests to them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在 concrete5 文件系统中创建了控制器和视图文件，在我们可以通过浏览器访问这些页面并开始添加自定义 CRUD 逻辑之前，还需要执行一个步骤。页面必须添加到
    concrete5 网站地图中，这样 CMS 就知道页面存在，并且可以将请求定向到它们。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before you can add single pages to the site, the view and controller files must
    exist in the filesystem. Refer to the previous two recipes on how to do this correctly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以将单页添加到网站之前，视图和控制器文件必须在文件系统中存在。请参考之前的两个菜谱了解如何正确执行此操作。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Go to the single pages manager of the dashboard by visiting `/dashboard/pages/single`
    (you may be asked to log in). The page will look like the following screenshot:![How
    to do it...](img/4548_06_03.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `/dashboard/pages/single`（你可能需要登录）进入仪表板的单页管理器。页面将看起来像以下截图：![如何操作...](img/4548_06_03.jpg)
- en: Type the path of the posts page (`/dashboard/posts`) and click on **Add**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入文章页面的路径（`/dashboard/posts`）并点击 **添加**。
- en: Type the path of the add page (`/dashboard/posts/add`) and click on **Add**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入添加页面的路径（`/dashboard/posts/add`）并点击 **添加**。
- en: The pages have now been added and can be viewed by visiting their respective
    URLs.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面现在已经被添加，可以通过访问它们的相应 URL 来查看。
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: concrete5 will verify whether the controller and view files exist, and then
    will add the new single page to the sitemap. This makes the page available to
    access via URL, and if the page is stored on the dashboard, concrete5 will automatically
    perform access control checks on the user.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将验证控制器和视图文件是否存在，然后会将新的单页添加到网站地图中。这使得页面可以通过 URL 访问，如果页面存储在仪表板中，concrete5
    将自动对用户执行访问控制检查。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建控制器文件* 菜谱'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建视图文件* 菜谱'
- en: Creating a form to create items
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于创建项目的表单
- en: Now that we know how to add bare bones single pages to the dashboard, we can
    create the real CRUD interfaces. The first interface that we will program is the
    form for creating and editing blog posts.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何将裸骨单页添加到仪表板中，我们可以创建真正的 CRUD 接口。我们将要编写的第一个接口是用于创建和编辑博客文章的表单。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you will need to make sure that you know how to add controller and view
    files for the single pages. Refer to the first three recipes in this chapter for
    guidance on how to do that.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要确保你知道如何为单页添加控制器和视图文件。请参考本章前三个菜谱，了解如何进行操作。
- en: 'Our blog posts in this chapter will have three fields: `title`, `content`,
    and `post date`. The `title` and `content` fields will be set by the user with
    the form in this recipe, and the `post date` will be set by our controller once
    the form has been submitted.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中的博客文章将包含三个字段：`标题`、`内容`和`发布日期`。`标题`和`内容`字段将由用户通过本菜谱中的表单设置，而`发布日期`将由我们的控制器在表单提交后设置。
- en: To keep this chapter on point, much of the irrelevant HTML surrounding our form
    has been omitted. Refer to the book's website to see the complete HTML code if
    you are having trouble with the markup of your form.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本章内容集中，我们省略了围绕表单的大部分无关 HTML。如果你在表单的标记方面遇到麻烦，请参考本书的网站以查看完整的 HTML 代码。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for creating a form to create items are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于创建项目的表单的步骤如下：
- en: Open `/single_pages/dashboard/posts/add.php` in your preferred code editor.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的代码编辑器中打开 `/single_pages/dashboard/posts/add.php`。
- en: We will make use of the form helper, so load that helper at the top of the file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用表单助手，所以请将此助手加载到文件顶部。
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Wrap everything in a `div` tag with the class of `ccm-ui` so our form will take
    advantage of the Bootstrap styles included in concrete5.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容包裹在一个带有 `ccm-ui` 类的 `div` 标签中，这样我们的表单就能利用 concrete5 中包含的 Bootstrap 样式。
- en: '[PRE4]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use the Dashboard helper to output the appropriate HTML for the header of the
    form.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用仪表板助手输出表单标题的适当 HTML。
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Set the form's `action` to the `save` function of the controller and make sure
    it is sending the data as a `POST` request.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表单的 `action` 设置为控制器的 `save` 函数，并确保它以 `POST` 请求发送数据。
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Echo the input for the `title` field.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出 `title` 字段的输入。
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Echo the input for the `content` field.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出 `content` 字段的输入。
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create the submit button.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建提交按钮。
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create a cancel button and have it take the user back to the posts listing when
    clicked.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个取消按钮，并在点击时将用户带回到文章列表。
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the `add.php` view file, as it is time to move to the controller.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `add.php` 视图文件，因为现在是时候移动到控制器了。
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `add.php` view file is an interface for a concrete5 `View` object. As a
    result, the `$this` keyword is set to an instance of the `View` class. Using functions
    such as `action` and `url` on the `$this` keyword will generate URLs that are
    aware of the concrete5 site's settings, such as if the site has pretty URLs enabled,
    or if the site is located in a sub-directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`add.php` 视图文件是一个 concrete5 `View` 对象的界面。因此，`$this` 关键字被设置为 `View` 类的一个实例。在
    `$this` 关键字上使用 `action` 和 `url` 等函数将生成了解 concrete5 网站设置的 URL，例如，如果网站启用了漂亮 URL，或者网站位于子目录中。'
- en: Using the Form helper, we can quickly output the fields that we need to display
    on the form. The Form helper will be even more useful when we add the ability
    to edit data, which will happen later in this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用表单辅助工具，我们可以快速输出需要在表单上显示的字段。当我们在本章后面添加编辑数据的能力时，表单辅助工具将更加有用。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As mentioned at the beginning of this chapter, most of the boilerplate HTML
    surrounding the form here was left out of the chapter. Please download the complete
    source code from the book's website if you wish to see how the entire page is
    structured.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，这里围绕表单的大多数样板 HTML 都被省略了。如果您想查看整个页面的结构，请从本书的网站上下载完整的源代码。
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建控制器文件* 的菜谱'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单页创建视图文件* 的菜谱'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将单页添加到仪表板* 的菜谱'
- en: The *Loading a helper class* recipe in [Chapter 4](ch04.html "Chapter 4. Using
    the Core Helpers"), *Using the Core Helpers*
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 [第 4 章](ch04.html "第 4 章。使用核心辅助工具") 中加载辅助类* 的菜谱，*使用核心辅助工具*'
- en: The *Creating custom forms with the Form helper* recipe in [Chapter 4](ch04.html
    "Chapter 4. Using the Core Helpers"), *Using the Core Helpers*
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Form 辅助工具创建自定义表单* 的菜谱在 [第 4 章](ch04.html "第 4 章。使用核心辅助工具")，*使用核心辅助工具*'
- en: The *Saving data to the database from a controller* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从控制器将数据保存到数据库* 的菜谱'
- en: Saving data to the database from a controller
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器将数据保存到数据库
- en: Once you have the HTML (and related helper PHP) for your form created, it is
    time to make that form do something. In the previous recipe, we set the action
    of our HTML form to the `save` action of the controller. In this recipe, we will
    write the code of that save action, so that our blog posts will be stored in the
    database once the save button is clicked.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了表单的 HTML（和相关辅助 PHP），就是时候让这个表单做些事情了。在前一个菜谱中，我们将 HTML 表单的动作设置为控制器的 `save`
    动作。在这个菜谱中，我们将编写那个保存动作的代码，这样一旦点击保存按钮，我们的博客文章就会被存储到数据库中。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is continuing the chapter's theme of creating a CRUD interface for
    managing simple blog posts. Make sure the previous recipes in this chapter have
    been completed before working on this part. Also, make sure that the database
    table specified in the chapter introduction exists.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱继续本章的主题，为管理简单的博客文章创建一个 CRUD 接口。在开始这一部分之前，请确保本章中之前的菜谱已经完成。同时，请确保在章节介绍中指定的数据库表存在。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The steps for saving data to the database from a controller are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制器将数据保存到数据库的步骤如下：
- en: Create a new model in `/models/blog_post.php`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/models/blog_post.php` 中创建一个新的模型。
- en: Open `/models/blog_post.php` in your code editor and create the `BlogPost` class.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/models/blog_post.php` 并创建 `BlogPost` 类。
- en: '[PRE11]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Open `/controllers/dashboard/posts/add.php` in your preferred code or text editor.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码或文本编辑器中打开 `/controllers/dashboard/posts/add.php`。
- en: Define the `save` function.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `save` 函数。
- en: '[PRE12]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `save` function, load the `BlogPost` model.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `save` 函数中，加载 `BlogPost` 模型。
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a new instance of the `BlogPost` model.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `BlogPost` 模型的新实例。
- en: '[PRE14]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Set the `title` to the value that was submitted in the HTTP `POST` request.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `title` 设置为 HTTP `POST` 请求中提交的值。
- en: '[PRE15]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Set the `content` to the value that was submitted in the form `POST` request.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `内容` 设置为表单 `POST` 请求中提交的值。
- en: '[PRE16]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Set the `post date` to the current date/time.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `发布日期` 设置为当前日期/时间。
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the model.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存模型。
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Redirect the user to the listing of the posts, which will indicate that the
    save was successful.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户重定向到帖子列表，这将表明保存成功。
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `save` function is run whenever an HTTP request (`GET` or `POST`) is made
    to `/dashboard/posts/add/save`, and that is exactly where the HTML form sends
    its data when it is submitted. We load the `BlogPost` model and set each of its
    attributes, finally saving the new item to the database and redirecting the user
    to the post listing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当对 `/dashboard/posts/add/save` 发起 HTTP 请求（`GET` 或 `POST`）时，会运行 `save` 函数，这正是
    HTML 表单提交数据的地方。我们加载 `BlogPost` 模型并设置其每个属性，最后将新项目保存到数据库中，并将用户重定向到帖子列表。
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In real life usage, you would want to use the Validation Helper to make sure
    that users have filled out the form correctly and that both the title and content
    fields were not empty.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际使用中，您可能希望使用验证助手来确保用户已正确填写表单，并且标题和内容字段均不为空。
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在仪表板上为单页创建控制器文件* 菜谱'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在仪表板上为单页创建视图文件* 菜谱'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将单页添加到仪表板* 菜谱'
- en: The *Creating a form to create items* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建用于创建项目的表单* 菜谱'
- en: '[Chapter 5](ch05.html "Chapter 5. Working with Databases and Models"), *Working
    with Databases and Models*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。使用数据库和模型"), *使用数据库和模型*'
- en: Creating a view to display a list of database items
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于显示数据库项目列表的视图
- en: Now that we can add items to our database, it sure would be nice to have an
    interface to show what items already exist in our table, and to add, edit, and
    delete those items from there.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向数据库中添加项目，确实很希望有一个界面来显示表中已经存在的项目，并从那里添加、编辑和删除这些项目。
- en: In this recipe, we will handle the Read aspect of CRUD interfaces by creating
    an HTML table that lists all of the blog posts stored in the database, as well
    as provide buttons to edit and delete those items.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将通过创建一个列出数据库中所有博客文章的 HTML 表格来处理 CRUD 接口的读取方面，并提供编辑和删除这些项目的按钮。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As with the rest of the recipes in this chapter, we will be dealing with simple
    blog posts. Make sure that the previous recipes have been completed prior to working
    with this recipe, otherwise there may be a step missing!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的其他菜谱一样，我们将处理简单的博客文章。确保在处理此菜谱之前已完成前面的菜谱，否则可能会有缺失的步骤！
- en: Some of the boilerplate HTML in this recipe has been omitted from this chapter
    in order to keep the focus on the code that is important to know. The website
    for this book does contain a complete source code download that will allow you
    to explore the entire HTML code in this interface.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持本章重点在重要的代码上，本节中省略了此菜谱中的一些样板 HTML。本书的网站包含一个完整的源代码下载，允许您探索此界面中的整个 HTML 代码。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for creating a view to display a list of database items are as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于显示数据库项目列表的视图的步骤如下：
- en: Open `/controllers/dashboard/posts.php` in your preferred text editor.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的文本编辑器中打开 `/controllers/dashboard/posts.php`。
- en: Define the `view` function, which will automatically get run when the page loads.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `view` 函数，该函数将在页面加载时自动运行。
- en: '[PRE20]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `view` function, load the `BlogPost` model.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `view` 函数中，加载 `BlogPost` 模型。
- en: '[PRE21]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new instance of `BlogPost`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `BlogPost` 的新实例。
- en: '[PRE22]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Find all of the blog posts by passing a truthy condition (1=1) to the `find`
    function.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `find` 函数传递一个真值条件（1=1）来查找所有博客文章。
- en: '[PRE23]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Set a variable called `$posts` on the view that is equal to the results of the
    model query.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图中设置一个名为 `$posts` 的变量，其值等于模型查询的结果。
- en: '[PRE24]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save the controller file.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存控制器文件。
- en: Open the posts index view which is located at `/single_pages/dashboard/posts.php`
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于 `/single_pages/dashboard/posts.php` 的帖子索引视图。
- en: Make sure to create a `div` tag that has a class of `ccm-ui` in order to make
    use of the built-in Bootstrap styles.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保创建一个具有 `ccm-ui` 类的 `div` 标签，以便使用内置的 Bootstrap 样式。
- en: '[PRE25]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use the Dashboard helper to generate the HTML for the header section.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用仪表板助手生成标题部分的 HTML。
- en: '[PRE26]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a table to hold the posts.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表格来存放帖子。
- en: '[PRE27]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We will need headings for the four columns we will be displaying.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为将要显示的四个列添加标题。
- en: '[PRE28]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Loop through the `$posts` variable that was set in the controller and output
    each row of posts. The last column will contain the buttons to edit or delete
    each post.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历控制器中设置的`$posts`变量，输出每行的帖子。最后一列将包含编辑或删除每个帖子的按钮。
- en: '[PRE29]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Save the view file.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存视图文件。
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When an HTTP `GET` or `POST` request is made to `/dashboard/posts/`, the `view`
    function on the posts controller is automatically executed. In this function,
    we load data from the `BlogPost` model, and then send that data to the view. This
    allows us to keep the real business logic out of our view files and create more
    reusable and maintainable code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当对`/dashboard/posts/`进行HTTP `GET`或`POST`请求时，帖子控制器的`view`函数会自动执行。在这个函数中，我们从`BlogPost`模型加载数据，然后将这些数据发送到视图。这允许我们将真实业务逻辑从视图文件中分离出来，创建更多可重用和可维护的代码。
- en: See also
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在仪表板上创建单页控制器文件*的配方'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在仪表板上创建单页视图文件*的配方'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将单页添加到仪表板*的配方'
- en: The *Creating a form to create items* recipe
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建创建项的表单*的配方'
- en: The *Saving data to the database from a controller* recipe
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从控制器将数据保存到数据库*的配方'
- en: Adding editing capabilities to create a form
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为创建表单添加编辑功能
- en: 'Now that we have added the ability to create and view items, it is time for
    the third facet of CRUD interfaces: editing. In this recipe, we will implement
    the logic necessary to be able to edit items using the form that we created in
    the recipe *Creating a form to create item*.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了创建和查看项的功能，是时候为CRUD界面添加第三个方面：编辑。在这个配方中，我们将实现编辑项所需的逻辑，使用我们在*创建创建项的表单*配方中创建的表单。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As with the rest of the recipes in this chapter, this recipe revolves around
    the concept of managing simple blog posts, each with a title, a block of content
    text, and a post date. Make sure that the previous recipes have been completed
    before embarking on this latest journey! The MySQL data for this recipe is also
    included at the beginning of this chapter as well as on the book's website.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中其他配方一样，这个配方围绕管理简单博客文章的概念展开，每篇文章都有一个标题、一段内容文本和一个帖子日期。在开始这段最新的旅程之前，请确保已经完成了之前的配方！本配方的MySQL数据也包含在本章的开头以及本书的网站上。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps for adding editing capabilities to create a form are as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为创建表单添加编辑功能的步骤如下：
- en: Open the controller file for the add form (located at `/controllers/dashboard/posts/add.php`).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开添加表单的控制器文件（位于`/controllers/dashboard/posts/add.php`）。
- en: Declare the `edit` function, with a single parameter for the `ID` parameter
    of the post to edit.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`edit`的函数，该函数有一个参数用于编辑帖子的`ID`参数。
- en: '[PRE30]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `edit` function, load the `blog post` model.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`edit`函数中，加载`blog post`模型。
- en: '[PRE31]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Create a new instance of the `model` class.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`model`类的实例。
- en: '[PRE32]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Load the `post` object using the `ID` parameter that was passed in via the edit
    URL.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用通过编辑URL传递的`ID`参数加载`post`对象。
- en: '[PRE33]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Set the `post` variable to the view, casting the `post` object into an array
    to prevent the add form from breaking when there is no post object set.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`post`变量设置到视图中，将`post`对象转换为数组，以防止在没有设置帖子对象时添加表单损坏。
- en: '[PRE34]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the `save` function of the controller, add the following code just below
    `$post = new BlogPost()`;
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器的`save`函数中，在`$post = new BlogPost()`下方添加以下代码；
- en: '[PRE35]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Change the `save` function call to use the `replace` function.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`save`函数调用更改为使用`replace`函数。
- en: '[PRE36]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save the controller file.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存控制器文件。
- en: Open the `view` file, located at `/single_pages/dashboard/posts/add.php`
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`/single_pages/dashboard/posts/add.php`的`view`文件
- en: Add a second parameter to the `title` input that will populate the field with
    the post's title if it exists.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`title`输入添加第二个参数，如果存在，将填充帖子的标题。
- en: '[PRE37]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Add a second parameter to the `content` input that will pre-fill the contents
    when the form is in edit mode.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`content`输入参数添加第二个参数，当表单处于编辑模式时将预填充内容。
- en: '[PRE38]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Just below the closing table tag, add the following snippet to add a hidden
    input when the form is in edit mode:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭表格标签下方，添加以下代码片段以在表单处于编辑模式时添加一个隐藏的输入：
- en: '[PRE39]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Save the `view` file.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`view`文件。
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a request is made to the URL `/dashboard/posts/add/edit/<id>`, concrete5
    will automatically fire the `edit` function of the controller and pass the `ID`
    parameter as the first parameter. Then we can load the corresponding model and
    send the data to the view. We need to cast the post data into an array so that
    the form will still work even if it is not in edit mode.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求 URL `/dashboard/posts/add/edit/<id>` 时，concrete5 将自动触发控制器的 `edit` 函数，并将
    `ID` 参数作为第一个参数传递。然后我们可以加载相应的模型并将数据发送到视图。我们需要将帖子数据转换为数组，这样即使在非编辑模式下表单也能正常工作。
- en: We also add a little snippet to the `save` function to make sure that if there
    is an ID included in the `POST` request, then we need to save an existing post
    rather than create a new one. By changing the `save` function call to `replace`,
    we are telling the model to create a brand new record if one does not exist, otherwise
    it will simply update the existing model.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在 `save` 函数中添加了一个小片段，以确保如果 `POST` 请求中包含 ID，则需要保存现有帖子而不是创建一个新的。通过将 `save`
    函数调用更改为 `replace`，我们告诉模型如果不存在，则创建一个新的记录，否则将简单地更新现有的模型。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In real life usage, it would be smart to check the `ID` parameter in the edit
    function to make sure that it is set. Also, it would be a good idea to handle
    requests in which a post is loaded that doesn't exist.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际使用中，检查编辑函数中的 `ID` 参数以确保它已设置是明智的。同时，处理加载不存在的帖子请求也是一个好主意。
- en: See also
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating controller files for single pages on the dashboard* recipe
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单个页面创建控制器文件* 配方'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单个页面创建视图文件* 配方'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加单个页面到仪表板* 配方'
- en: The *Creating a form to create items* recipe
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建创建项的表单* 配方'
- en: The *Saving data to the database from a controller* recipe
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从控制器将数据保存到数据库* 配方'
- en: Creating a delete action
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建删除操作
- en: The final pillar of the CRUD interface is the ability to delete items. In concrete5,
    this is a little bit more simple than the other CRUD tasks, as deleting items
    typically doesn't require a visual component. In this recipe, we will delete a
    blog post and simply redirect the user back to the index view of the posts.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD 界面的最后一个支柱是删除项的能力。在 concrete5 中，这比其他 CRUD 任务要简单一些，因为删除项通常不需要视觉组件。在这个配方中，我们将删除一个博客文章，并将用户简单地重定向回帖子的索引视图。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue working with the concept of simple blog posts. This recipe
    assumes that you have completed the previous recipes in this chapter and have
    the appropriate database tables created.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用简单博客文章的概念。这个配方假设你已经完成了本章中的前一个配方，并且创建了适当的数据库表。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the controller file located at `/controllers/dashboard/posts.php`.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于 `/controllers/dashboard/posts.php` 的控制器文件。
- en: Declare a new function called `delete` that has one parameter, `$id`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个新的名为 `delete` 的函数，它有一个参数，`$id`。
- en: '[PRE40]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the `delete` function, load the `blog posts` model.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `delete` 函数中，加载 `博客帖子` 模型。
- en: '[PRE41]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Create a new instance of the model.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型的新实例。
- en: '[PRE42]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Load the post by its ID.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过其 ID 加载帖子。
- en: '[PRE43]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Delete the post by calling the `delete` function.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用 `delete` 函数删除帖子。
- en: '[PRE44]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Redirect the user back to the posts index.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户重定向回帖子索引。
- en: '[PRE45]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When a request is made to `/dashboard/posts/delete/<id>`, the `delete` function
    of the posts controller is executed. In this controller, we simply load a post
    by its ID, and then call the built-in `delete` function of the model. Then, we
    just redirect users back to the post listing.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求 `/dashboard/posts/delete/<id>` 时，将执行帖子控制器的 `delete` 函数。在这个控制器中，我们简单地通过其
    ID 加载一个帖子，然后调用模型的内置 `delete` 函数。然后，我们只需将用户重定向回帖子列表。
- en: There's more...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: It would be wise to verify that the post with the specified ID exists before
    deleting. Also, most users would expect some kind of confirmation dialogue before
    performing such a destructive action, so that would be a nice thing to add in
    a real life situation.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除之前验证指定 ID 的帖子是否存在是明智的。此外，大多数用户在执行此类破坏性操作之前都会期望某种类型的确认对话框，所以在现实生活中添加这个功能会很好。
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating controllers for single pages on the dashboard* recipe
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单个页面创建控制器* 配方'
- en: The *Creating view files for single pages on the dashboard* recipe
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为仪表板上的单个页面创建视图文件* 配方'
- en: The *Adding single pages to the dashboard* recipe
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加单个页面到仪表板* 配方'
