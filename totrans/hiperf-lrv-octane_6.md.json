["```php\nphp artisan queue:table\n```", "```php\n{\n  \"displayName\" : \"App\\\\Jobs\\\\ProcessSomething\",\n  \"failOnTimeout\" : false,\n  \"retryUntil\" : null,\n  \"data\" : {\n    \"command\" :\n      \"O:25:\\\"App\\\\Jobs\\\\ProcessSomething\\\":0:{}\",\n    \"commandName\" : \"App\\\\Jobs\\\\ProcessSomething\"\n  },\n  \"maxExceptions\" : null,\n  \"maxTries\" : null,\n  \"uuid\" : \"e8b0c6c7-29ce-4108-a74c-08c70bb679a6\",\n  \"timeout\" : null,\n  \"backoff\" : null,\n  \"job\" : \"Illuminate\\\\Queue\\\\CallQueuedHandler@call\"\n}\n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan db:table jobs\n```", "```php\nphp artisan make:job ProcessSomething\n```", "```php\npublic function handle()\n{\n    Log::info('Job processed START');\n    sleep(3);\n    Log::info('Job processed   END');\n}\n```", "```php\nRoute::get('/time-consuming-request-sync', function () {\n    $start = hrtime(true);\n    ProcessSomething::dispatchSync();\n    $time = hrtime(true) - $start;\n    return view('result', [\n        'title' => url()->current(),\n        'description' => 'the task has been complete with\n                          dispatchSync()',\n        'time' => $time,\n    ]);\n});\n```", "```php\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,\n    initial-scale=1\">\n  <title>Laravel</title>\n</head>\n<body class=\"antialiased\">\n  <div class=\"relative flex items-top justify-center\n    min-h-screen bg-gray-100 dark:bg-gray-900\n    sm:items-center py-4 sm:pt-0\">\n    <div class=\"max-w-6xl mx-auto sm:px-6 lg:px-8\">\n      <div class=\"mt-8 bg-white dark:bg-gray-800\n        overflow-hidden shadow sm:rounded-lg\">\n        <div class=\"grid grid-cols-1\">\n          <div class=\"p-6\">\n            <div class=\"flex items-center\">\n              <div class=\"ml-4 text-lg leading-7\n                font-semibold\">{{ $title}}</div>\n            </div>\n            <div class=\"ml-12\">\n              <div class=\"mt-2 text-gray-900\n                dark:text-gray-900 text-2xl\">\n                {{ $description }}\n              </div>\n              <div class=\"mt-2 text-gray-900\n                dark:text-gray-900 text-2xl\">\n                {{ $time / 1_000_000 }} milliseconds\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n```", "```php\nphp artisan queue:work\n```", "```php\nRoute::get('/time-consuming-request-async', function () {\n    $start = hrtime(true);\n    dispatch(new ProcessSomething());\n// OR you can use ProcessSomething::dispatch();\n    $time = hrtime(true) - $start;\n    return view('result', [\n        'title' => url()->current(),\n        'description' => 'the task has been queued',\n        'time' => $time,\n    ]);\n});\n```", "```php\nphp artisan queue:monitor default\n```", "```php\nphp artisan db\n```", "```php\nselect count(id) as jobs_count, queue\nfrom jobs\ngroup by queue;\n```", "```php\nphp artisan queue:work\n```", "```php\nProcessSomething::dispatch()->onQueue(\"first\");\n```", "```php\nphp artisan queue:monitor first,second\n```", "```php\nphp artisan queue:work --queue=first\n```", "```php\nphp artisan queue:work --queue=second\n```", "```php\nphp artisan queue:work --queue=first\nphp artisan queue:work --queue=first\nphp artisan queue:work --queue=second\n```", "```php\nphp artisan queue:clear database --queue=first\n```", "```php\nphp artisan queue:clear database --queue=first,second\n```", "```php\nbrew install redis\nbrew services start redis\n```", "```php\nphp artisan sail:install\n```", "```php\nQUEUE_CONNECTION=redis\nREDIS_CLIENT=predis\nREDIS_HOST=localhost\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n```", "```php\nREDIS_QUEUE=yourdefaultqueue\n```", "```php\ncomposer require predis/predis\n```", "```php\nREDIS_CLIENT=predis\n```", "```php\n'aliases' => Facade::defaultAliases()->merge([\n    // 'ExampleClass' => App\\Example\\ExampleClass::class,\n    'Redis' => Illuminate\\Support\\Facades\\Redis::class,\n])->toArray(),\n```", "```php\nRoute::get('/time-consuming-request-async', function () {\n    $start = hrtime(true);\n    ProcessSomething::dispatch()->onQueue(\"first\");\n    $time = hrtime(true) - $start;\n    return view('result', [\n        'title' => url()->current(),\n        'description' => 'the task has been queued',\n        'time' => $time,\n    ]);\n});\n```", "```php\nphp artisan about --only=drivers\n```", "```php\ncomposer require laravel/horizon\n```", "```php\nphp artisan horizon:install\n```", "```php\nphp artisan octane:start\n```", "```php\nphp artisan horizon\n```", "```php\nphp artisan queue:work --queue=first\n```", "```php\n{\n    \"failedJobs\": 0,\n    \"jobsPerMinute\": 1,\n    \"pausedMasters\": 0,\n    \"periods\": {\n        \"failedJobs\": 10080,\n        \"recentJobs\": 60\n    },\n    \"processes\": 1,\n    \"queueWithMaxRuntime\": \"first\",\n    \"queueWithMaxThroughput\": \"first\",\n    \"recentJobs\": 0,\n    \"status\": \"running\",\n    \"wait\": {\n        \"redis:default\": 0\n    }\n}\n```"]