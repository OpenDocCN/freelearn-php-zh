- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ruby Scripting versus PHP Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the similarities we found when we looked at Ruby’s and PHP’s syntax,
    we are going to take things a step further and dive into the similarities between
    Ruby scripts and PHP scripts. A script is a piece of code that will run a task
    and then stop its execution. Said task may be simple or complex, but it is not
    considered an application as it stops once the task is done and only performs
    the task. Let’s take this step together and start writing simple scripts so that
    we can eventually write full-fledged applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Useful scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, we will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Any IDE to view/edit code (for example, SublimeText, Visual Studio Code, Notepad++
    Vim, Emacs, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For macOS users, you will also need to have XCode Command Line Tools installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby version 2.6 or later must be installed and ready to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/).
  prefs: []
  type: TYPE_NORMAL
- en: Beyond Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to run (or execute) Ruby code. However,
    we only focused on the syntax and not the usefulness of the code. The famous Hello
    World script we write in any language is, by itself, useless, at least from a
    practical sense. So, let’s start learning how to use some tools to give our scripts
    a little bit of usefulness.
  prefs: []
  type: TYPE_NORMAL
- en: 'One useful tool in any language is having a way to verify the version of the
    programming language that we are currently using. Once we obtain the version,
    we can stop the execution if the version we are using is incorrect. So, our first
    step is to get the current Ruby version. Let’s create a file called `version_verification.rb`
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run this script on our shell by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It should output something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this script, we are using the `RUBY_VERSION` constant to get the current
    version of Ruby that we are using and interpolating this constant with a string
    to view the whole message regarding the Ruby version. By itself, this constant
    is useless, but let’s give it some practical use. Let’s say we wanted to share
    our script with other teams, where it would be used in different computers and/or
    environments. To make sure our script works properly, we would have to provide
    certain requirements or conditions for our script. It would be also useful to
    verify that said requirements are being met. We have a couple of options to accomplish
    this. We could simply compare the version we obtain from the `RUBY_VERSION` constant
    to another string, such as `''2.6.8''`. That would be the most straightforward
    way to do this. However, the problem with this approach is that you would have
    to have the same Ruby version everywhere and that is rarely the case. We almost
    always have small variations of the version. If we were to take the preceding
    example of `''2.6.8''`, in other systems, we could get `''2.6.5''`, `''2.6.7''`,
    or even `''2.6.9''`. And all of these versions would not only be equivalent but
    also valid to what we are requiring. So, let’s just say our requirement is 2.6
    and above, which would be equivalent to any version above `''2.5.9''`. We could
    split the obtained version from the `RUBY_VERSION` constant, split its value by
    the dots, and start comparing away. However, this is too much work; this is where
    comes Ruby to the rescue. Ruby comes with a library called `stdlib` that comes
    with several utilities that are extremely useful when encountering these types
    of problems. Specifically, Ruby has the `Gem::Version` class, which will solve
    our problem at hand. We’ll include it in our example, but to make sure that the
    validation works, we will compare it to version `''3.0''`. Once we’ve tested the
    validation, we can add the correct version (`''2.6''`). Our code now looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to run this script on our shell, we would get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our validation worked, but the problem now is that we are not stopping the
    execution if we don’t have the correct Ruby version. The message showing the Ruby
    version should not be shown. If we were writing our script in PHP, we could simply
    use the `die()` function (which is equivalent to the `exit()` language construct)
    and the script would stop then and there. However, since we are writing scripts,
    certain practices can make our script even more useful. If our program was running
    on the web, we would rely on HTTP response status codes ([https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status))
    to tell the browser that our page was rendered and an error occurred. Similarly,
    in scripts, we rely on exit codes ([https://www.baeldung.com/linux/status-codes](https://www.baeldung.com/linux/status-codes))
    to tell the shell that our program failed. Taking that into account, we would
    then use the `Kernel::exit()` method to both stop the execution and send the shell
    a signal that our script failed. This method receives an argument that is then
    sent to the shell. This argument is an error code that can be used by the operating
    system. We will be using error code `1` as it refers to a general error. After
    making this adjustment, our code would now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this script on the shell, there would be no output as the script
    stops the execution before the message. In Unix-based systems, right after our
    script stops, we can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This would return `1`, which is the same as the argument we passed to the `exit()`
    method. `$?` returns the exit code of the last command that was run.
  prefs: []
  type: TYPE_NORMAL
- en: Note for Windows users
  prefs: []
  type: TYPE_NORMAL
- en: For Windows users, the shell will have a different output, depending on what
    Windows shell you use. If you’re using Powershell, you could obtain the same output
    by executing the `echo $LastExitCode` command in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the Windows documentation for more information regarding this variable:
    [https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.3).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is still one last tweak we need for our Ruby version verification script
    to be complete. As I mentioned previously, we only added version `''3.0''` to
    make sure our code worked, but in reality, we want to verify that our installed
    version is greater than `''2.6''`. So, our final verification will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we executed our script on the shell, we would get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And with that, we have made sure that if our script is executed with a Ruby
    version lower than `'2.6'` (for example, `'2.5.7'` or `'2.2.1'`), then the script
    will stop and send an error signal. Congratulations! We’ve created our first useful
    piece of code. This technique is often used by seasoned Ruby developers who are
    very aware of version changes. It will be up to you to improve this snippet as
    you could add an error message and also add an upper limit (for example, greater
    than `'2.5.9'` but lower than `'3.0'`). Now that we’ve created our first truly
    useful script, let’s take a look at some other useful Ruby tools for handling
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Text handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will most likely encounter strings (texts) in your journey to becoming
    a Ruby developer, so it’s important to know how to handle and manipulate this
    type of data. Whether you need to capitalize, get a partial string, or even trim
    a string, Ruby comes with a vast arsenal of tools to manipulate text as we see
    fit. Most programming languages have this type of tool, and Ruby is not an exception.
    As an example, let’s say we wanted to grab a previously entered name and make
    sure that all the letters were in uppercase or lowercase. Ruby has two methods
    to do exactly that: `upcase()` and `downcase()`. Let’s try them out by creating
    a file called `string_cases.rb` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we’ve declared two variables and used interpolation to output the full
    name. Let’s say we were to run this script on the shell with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The output is nothing unexpected, given that we declared the name with lowercase
    letters and the last name with uppercase letters. However, it doesn’t make sense
    to have a first name in one case and a last name in another. So, we can either
    make them both uppercase or both lowercase. Let’s try both solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The upcase method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make them both uppercase, we can use the `upcase()` method. Our code will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If we tested this code by running it again on the shell, we would get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The downcase method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarly, we could make all characters lowercase with `downcase()`. In this
    case, our code would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'So, with this last change, if we ran the script, we would obtain the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we can change the variable’s case with both `upcase()` and
    `downcase()`. However, we can also do the same directly to a string and not just
    a variable. To see that in action, let’s change our code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we took the whole output string and changed it to uppercase. The
    output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And while this is fun and all, it’s only useful for learning purposes. So, let’s
    add some usefulness to our script with an additional method. For users, reading
    the full name in either all uppercase or all lowercase will not make sense and
    certainly not look professional. So, let’s capitalize only the first letter of
    both the `first_name` and `last_name` variables.
  prefs: []
  type: TYPE_NORMAL
- en: The capitalize method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can do this with the `capitalize()` method. Now, our code will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this example, the output on the shell will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that Ruby “knows” what characters to make uppercase and what characters
    to make lowercase to get this “capitalized” output. Ruby has many other methods
    to handle and manipulate text. We could spend the rest of this chapter looking
    at many of these methods, but I’d like to focus more on other tools and challenge
    you to check out the text methods for yourself. The documentation for these methods
    is pretty clear, and it helps that these methods were built using the Ruby philosophy
    and best practices. I recommend that you take a look at the `strip`, `lstrip`,
    `rstrip`, `start_with?`, `end_with?`, `rindex, gsub`, `chomp`, and `chop` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/strip](https://apidock.com/ruby/String/strip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/lstrip](https://apidock.com/ruby/String/lstrip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/rstrip](https://apidock.com/ruby/String/rstrip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/start_with%3F](https://apidock.com/ruby/String/start_with%3F)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/end_with%3F](https://apidock.com/ruby/String/end_with%3F)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/rindex](https://apidock.com/ruby/String/rindex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/gsub](https://apidock.com/ruby/String/gsub)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/chomp](https://apidock.com/ruby/String/chomp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://apidock.com/ruby/String/chop](https://apidock.com/ruby/String/chop)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might be more familiar with the names of these methods as PHP has similar
    methods as the ones I just mentioned: `trim`, `ltrim`, `rtrim`, `str_starts_with`,
    `str_ends_with`, `strpos`, and `str_replace`. The `chomp` and `chop` methods are
    very different in PHP, so I suggest that you take a close look at them in Ruby
    as they can be extremely useful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ease of use and usefulness of the aforementioned methods are proof of why
    we should rely on Ruby’s string methods to do our string manipulation. We could
    certainly write all of this functionality on our own, but that would be just reinventing
    the wheel and we would be wasting time and energy. Should you choose to do that,
    I certainly won’t stop you as you would probably learn a lot of Ruby in the process.
    However, in this guided tour that I’m giving you, we will stick to learning more
    of the tools that Ruby provides for us. Now, let’s look at how Ruby allows us
    to do another powerful action: handle files.'
  prefs: []
  type: TYPE_NORMAL
- en: File manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some decades ago, one of the few options (if not the only option) for saving
    information was storing it in files. All sort of data was stored in these files:
    passwords, user data, config data, and more. Saving information in plain text
    files was, at the time, the most feasible option to save information. It all came
    to an end with the advent of **databases** (**DBs**) and DB usage. DBs became
    a more feasible and popular option, and they now came in different flavors. While
    this is still true today, using a DB comes with a quite expensive cost. I’m not
    only talking about a monetary cost – I’m talking about it in terms of memory,
    disk, and processing time. So, in certain use cases, it’s still a much better
    option to use plain text files to store information. To that purpose, most programming
    languages, including Ruby and PHP, make this task straightforward. Let’s take
    a look at how we can take advantage of the file manipulation tooling that comes
    with Ruby.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s suppose we wanted to grab a user’s first name from a file. For this,
    we must create a file. The file will be called `name.txt`. We could name it without
    the file extension (`.txt`) and it would have no impact on the functionality of
    our script, but it’s always a good practice to give hints to our fellow developers
    as to the intent of our script. It’s pretty easy to assume that a file named `name.txt`
    will most probably contain text, and that text will be a name. So, let’s create
    the text file and add some text to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s focus on opening this file. There are different modes when opening
    files in Ruby, but for now, we will focus on reading data from the file. Let’s
    create a file called `reading_file.rb` and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we have to get Ruby to open the file so that it can handle and manipulate
    it. The `File.open()` method does exactly that. But now, we need to fetch the
    file’s contents to be able to use it in our script. First, we will assign the
    `File.open()` result to a variable. Our code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, we saved the result of the `File.open()` method to the `file_instance`
    variable, which, in turn, now lets us have access to the file’s contents. Ruby
    has a very intuitive method for grabbing a file’s contents: the `read()` method.
    The `read()` method grabs a file’s contents and casts it into a string. So, let’s
    grab that string and output it to make sure our script is working. Now, our script
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to run our script on the shell with `ruby reading_file.rb`, the
    output would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And voilà – we have successfully read a value from a text file. In the code,
    we got Ruby to open the `name.txt` file. Then, from the instance we got as a result,
    we obtained the original file’s contents as a string. Lastly, we used the value
    in a string to output something useful to the user. We can get fancy and capitalize
    the username with our already acquainted `capitalize()` method. We can also test
    that our script is reading from the `name.txt` file. Let’s open the `name.txt`
    file and change the name contained in the file to something else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s run our script in the shell again with `ruby reading_file.rb`. The
    output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: paul smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: full_name.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("full_name.txt")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "The user''s name is #{user_name}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is paul smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'puts "The user''s name is #{user_name.capitalize}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is Paul smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: full_name.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("full_name.txt")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read.split
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "The user''s name is #{user_name[0]} #{user_name[1]}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: full_name.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("full_name.txt")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read.split.map(&:capitalize)
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "The user''s name is #{user_name}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is ["Paul", "Smith"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: full_name.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("full_name.txt")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read.split.map(&:capitalize).join(' ')
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "The user''s name is #{user_name}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is Paul Smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: paul isaac smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is Paul Isaac Smith
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: benjamin eliseo pineda avendaño
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The user's name is Benjamin Eliseo Pineda Avendaño
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: counter.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("counter.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: counter = file_instance.read
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Time(s) script has been run: #{counter}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'counter.rb:3:in ''read'': not opened for reading (IOError)'
  prefs: []
  type: TYPE_NORMAL
- en: from counter.rb:3:in '<main>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: counter.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("counter.txt", "a+")
  prefs: []
  type: TYPE_NORMAL
- en: counter = file_instance.read
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Time(s) script has been run: #{counter}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Time(s) script has been run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: counter.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("counter.txt", "a+")
  prefs: []
  type: TYPE_NORMAL
- en: counter = file_instance.read.to_i
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Time(s) script has been run: #{counter}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Time(s) script has been run: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: counter.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("counter.txt", "a+")
  prefs: []
  type: TYPE_NORMAL
- en: counter = file_instance.read.to_i
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Time(s) script has been run: #{counter}"'
  prefs: []
  type: TYPE_NORMAL
- en: counter += 1
  prefs: []
  type: TYPE_NORMAL
- en: File.write("counter.txt", counter)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Time(s) script has been run: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Time(s) script has been run: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Time(s) script has been run: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Time(s) script has been run: 3'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: command_line.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{input_arguments[0]}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Hello
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb marco
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Hello marco
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb ben franco
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Hello ben
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: command_line.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{input_arguments.map(&:capitalize).join('' '')}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb ben aaron jones
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Hello Ben Aaron Jones
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb gaby audra luna WOODHOUSE
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Hello Gaby Audra Luna Woodhouse
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: ruby command_line.rb al
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Hello Al
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: validate_arguments.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: name = input_arguments.first
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times = input_arguments.last.to_i
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times.times { puts name }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb gabriela 5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: gabriela
  prefs: []
  type: TYPE_NORMAL
- en: gabriela
  prefs: []
  type: TYPE_NORMAL
- en: gabriela
  prefs: []
  type: TYPE_NORMAL
- en: gabriela
  prefs: []
  type: TYPE_NORMAL
- en: gabriela
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb 5 gabriela
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: validate_arguments.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if ARGV.size != 2
  prefs: []
  type: TYPE_NORMAL
- en: puts "Error. The script has failed!"
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: name = input_arguments.first
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times = input_arguments.last.to_i
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times.times { puts name }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Error. The script has failed!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: validate_arguments.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if ARGV.size != 2
  prefs: []
  type: TYPE_NORMAL
- en: puts "Error. The script has failed!"
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: name = input_arguments.first
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times = input_arguments.last.to_i
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times.times { puts name }
  prefs: []
  type: TYPE_NORMAL
- en: puts "But we are still running the script"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Error. The script has failed!
  prefs: []
  type: TYPE_NORMAL
- en: But we are still running the script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: validate_arguments.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if ARGV.size != 2
  prefs: []
  type: TYPE_NORMAL
- en: puts "Error. The script has failed!"
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  prefs: []
  type: TYPE_NORMAL
- en: Kernel::exit(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: name = input_arguments.first
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times = input_arguments.last.to_i
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times.times { puts name }
  prefs: []
  type: TYPE_NORMAL
- en: puts "But we are still running the script"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Error. The script has failed!
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage: ruby validate_arguments.rb name times_to_repeat'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb 3 henry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: We are still running the script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: validate_arguments.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if ARGV.size != 2
  prefs: []
  type: TYPE_NORMAL
- en: puts "Error. The script has failed!"
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  prefs: []
  type: TYPE_NORMAL
- en: Kernel::exit(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: input_arguments = ARGV
  prefs: []
  type: TYPE_NORMAL
- en: name = input_arguments.first
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times = input_arguments.last.to_i
  prefs: []
  type: TYPE_NORMAL
- en: if cycle_times < 1
  prefs: []
  type: TYPE_NORMAL
- en: puts "Error. The second argument has to be an integer!"
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Usage: ruby validate_arguments.rb name times_to_repeat"'
  prefs: []
  type: TYPE_NORMAL
- en: Kernel::exit(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: cycle_times.times { puts name }
  prefs: []
  type: TYPE_NORMAL
- en: puts "But we are still running the script"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: ruby validate_arguments.rb 3 henry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Error. The second argument has to be an integer!
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage: ruby validate_arguments.rb name times_to_repeat'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: user_input.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{name}"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: ruby user_input.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: brandon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: brandon
  prefs: []
  type: TYPE_NORMAL
- en: Hello brandon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: user_input.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{name}" if name == "brandon"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: ruby user_input.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: brandon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: user_input.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets.chomp
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{name}" if name == "brandon"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: ruby user_input.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: brandon
  prefs: []
  type: TYPE_NORMAL
- en: Hello brandon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: user_input.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets.chomp
  prefs: []
  type: TYPE_NORMAL
- en: 'puts "Hello #{name}" if name == "brandon"'
  prefs: []
  type: TYPE_NORMAL
- en: puts "Enter the number of times to try the process"
  prefs: []
  type: TYPE_NORMAL
- en: repeat_n = gets.chomp.to_i
  prefs: []
  type: TYPE_NORMAL
- en: repeat_n.times do
  prefs: []
  type: TYPE_NORMAL
- en: puts "trying…"
  prefs: []
  type: TYPE_NORMAL
- en: sleep(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: ruby user_input.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: brandon
  prefs: []
  type: TYPE_NORMAL
- en: Hello brandon
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter times you would like to try the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: trying...
  prefs: []
  type: TYPE_NORMAL
- en: trying...
  prefs: []
  type: TYPE_NORMAL
- en: trying...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: main.rb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Section 1: Ruby version validation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
  prefs: []
  type: TYPE_NORMAL
- en: puts "Please verify the Ruby version!"
  prefs: []
  type: TYPE_NORMAL
- en: Kernel::exit(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 2: Open or create user_name file'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("user_name.txt", "a+")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 3: Empty name validation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if user_name.empty?
  prefs: []
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets.chomp
  prefs: []
  type: TYPE_NORMAL
- en: File.write("user_name.txt", name)
  prefs: []
  type: TYPE_NORMAL
- en: '# Section 4: Program main log'
  prefs: []
  type: TYPE_NORMAL
- en: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
  prefs: []
  type: TYPE_NORMAL
- en: user_name =  name
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 5: Program title'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'puts "Hello #{user_name.capitalize}"'
  prefs: []
  type: TYPE_NORMAL
- en: puts "Welcome to Chapter 4"
  prefs: []
  type: TYPE_NORMAL
- en: puts "Please enter how many times you would like to make a log entry"
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 6: Program cycle'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: repeat_n = gets.chomp.to_i
  prefs: []
  type: TYPE_NORMAL
- en: repeat_n.times do
  prefs: []
  type: TYPE_NORMAL
- en: puts "Adding log entry..."
  prefs: []
  type: TYPE_NORMAL
- en: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
  prefs: []
  type: TYPE_NORMAL
- en: sleep(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 1: Ruby version validation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if Gem::Version.new(RUBY_VERSION) < Gem::Version.new('2.6')
  prefs: []
  type: TYPE_NORMAL
- en: puts "Please verify the Ruby version!"
  prefs: []
  type: TYPE_NORMAL
- en: Kernel::exit(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 2: Open or create user_name file'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: file_instance = File.open("user_name.txt", "a+")
  prefs: []
  type: TYPE_NORMAL
- en: user_name = file_instance.read
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 3: Empty name validation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: if user_name.empty?
  prefs: []
  type: TYPE_NORMAL
- en: puts "Enter your name:"
  prefs: []
  type: TYPE_NORMAL
- en: name = gets.chomp
  prefs: []
  type: TYPE_NORMAL
- en: File.write("user_name.txt", name)
  prefs: []
  type: TYPE_NORMAL
- en: '# Section 4: Program main log'
  prefs: []
  type: TYPE_NORMAL
- en: 'File.write("main.log", "Writing #{name} as the entry to user_name.txt at #{Time.now}\n",
    mode: "a")'
  prefs: []
  type: TYPE_NORMAL
- en: user_name =  name
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 5: Program title'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'puts "Hello #{user_name.capitalize}"'
  prefs: []
  type: TYPE_NORMAL
- en: puts "Welcome to Chapter 4"
  prefs: []
  type: TYPE_NORMAL
- en: puts "Please enter how many times you would like to make a log entry"
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: 'Section 6: Program cycle'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: repeat_n = gets.chomp.to_i
  prefs: []
  type: TYPE_NORMAL
- en: repeat_n.times do
  prefs: []
  type: TYPE_NORMAL
- en: puts "Adding log entry..."
  prefs: []
  type: TYPE_NORMAL
- en: 'File.write("main.log", "Adding entry to log at #{Time.now}\n", mode: "a")'
  prefs: []
  type: TYPE_NORMAL
- en: sleep(1)
  prefs: []
  type: TYPE_NORMAL
- en: end
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: ruby main.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter your name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Hello Daniel
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to chapter 4
  prefs: []
  type: TYPE_NORMAL
- en: Please enter how many times you would like to make a log entry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Adding log entry...
  prefs: []
  type: TYPE_NORMAL
- en: Adding log entry...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: daniel
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Writing daniel as the entry to user_name.txt at 2022-12-25 16:33:24 -0600
  prefs: []
  type: TYPE_NORMAL
- en: Adding entry to log at 2022-12-25 16:34:53 -0600
  prefs: []
  type: TYPE_NORMAL
- en: Adding entry to log at 2022-12-25 16:34:54 -0600
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: ruby main.rb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Hello Daniel
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to Chapter 4
  prefs: []
  type: TYPE_NORMAL
- en: Please enter how many times you would like to make a log entry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Adding log entry...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
