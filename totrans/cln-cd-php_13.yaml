- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Creating Effective Documentation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建有效的文档
- en: Many developers consider documentation as a burden rather than a meaningful
    activity. This is comprehensible since often enough, the documentation is not
    updated anymore after it has been written. Soon, it is full of wrong statements
    and outdated information, which is indeed something that nobody wants.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者认为文档是一种负担，而不是有意义的活动。这是可以理解的，因为通常文档在编写后就不再更新。很快，它就会充满错误陈述和过时信息，这确实是没有人希望看到的。
- en: We are convinced that documentation is too important to abandon it. If done
    right, it will be a valuable addition and an important building block for writing
    clean code, especially when Working in a Team.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们坚信，文档的重要性不容忽视，不能放弃。如果做得恰当，它将是一个宝贵的补充，也是编写干净代码的重要基石，尤其是在团队工作中。
- en: Therefore, in the last chapter of this book, we want to give you some ideas
    about how to write documentation that is practical and maintainable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本书的最后一章，我们想给你一些关于如何编写实用且可维护的文档的想法。
- en: 'We are going to cover the following main topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要主题：
- en: Why documentation matters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么文档很重要
- en: Creating documentation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档
- en: Inline documentation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联文档
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, there are no additional technical requirements. All code
    samples can be found in our GitHub repository: [https://github.com/PacktPublishing/Clean-Code-in-PHP](https://github.com/PacktPublishing/Clean-Code-in-PHP).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，没有额外的技术要求。所有代码示例都可以在我们的GitHub仓库中找到：[https://github.com/PacktPublishing/Clean-Code-in-PHP](https://github.com/PacktPublishing/Clean-Code-in-PHP)。
- en: Why documentation matters
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么文档很重要
- en: Welcome to the last chapter of this book. You have come a long way, and before
    you put this book down, for the time being, we want to draw your attention to
    the often-neglected topic of creating documentation. Let us convince you on the
    following pages that documentation does not necessarily have to be tiring and
    annoying, but instead has valuable benefits.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的最后一章。你已经走得很远了，在你暂时放下这本书之前，我们想将你的注意力引向经常被忽视的话题——创建文档。让我们在接下来的几页中说服你，文档并不一定必须是枯燥乏味的，反而可以带来宝贵的益处。
- en: Why documentation is important
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么文档很重要
- en: Why should we actually create any documentation? Is our code, or our tests,
    not enough documentation already? There is some truth in these thoughts, and we
    will discuss this topic further in this section. Yet over the years, countless
    developers have never stopped creating countless documents, so there must be something
    about it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要创建任何文档呢？我们的代码或测试不是已经足够作为文档了吗？这些想法中有些是真实的，我们将在本节中进一步讨论这个话题。然而，多年来，无数的开发者从未停止过创建无数的文档，这肯定有它的道理。
- en: We create documentation because we can make it easier for other people to work
    with our software. It is about context, which cannot be easily extracted from
    reading the code of a couple of classes. Documentation is often not only about
    the *what* or *how*, but also about the *why*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建文档是因为我们可以让其他人更容易地使用我们的软件。这关乎上下文，而这些上下文往往不能从阅读几个类的代码中轻易提取出来。文档往往不仅关乎“什么”或“如何”，还关乎“为什么”。
- en: Knowing the motivation or the external factors that lead to a decision is crucial
    to understanding and accepting why a project was built in a certain way. For example,
    you might complain about your former colleague who has implemented a brittle,
    cronjob-triggered download of **comma-separated values** (**CSV**) files from
    an external **File Transfer Protocol** (**FTP**) server, unless you learn from
    the documentation that the customer was simply unable to provide a **REpresentational
    State Transfer** (**REST**) **application programming interface** (**API**) endpoint
    to deliver the data before the project deadline.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 了解导致决策的动机或外部因素对于理解和接受为什么项目以某种方式构建至关重要。例如，你可能会抱怨你的前同事实现了一个脆弱的、由cronjob触发的从外部**文件传输协议**（**FTP**）服务器下载**逗号分隔值**（**CSV**）文件的下载，除非你从文档中了解到客户在项目截止日期前根本无法提供一个**表示状态转移**（**REST**）**应用程序编程接口**（**API**）端点来提供数据。
- en: A new colleague who starts on your project will surely be happy to have at least
    some documentation to read, to not need to ask (and probably disturb) other developers
    for every little question. And let us not forget our future selves, who have not
    touched that project for many months and must fix a critical bug now. If only
    we knew what our past selves did back in the day... and why.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新同事加入你的项目，如果至少有一些文档可以阅读，就不需要（可能还会打扰）其他开发者询问每一个小问题，这肯定会让他感到高兴。而且让我们不要忘记我们的未来自己，他们已经好几个月没有接触那个项目了，现在必须修复一个关键错误。如果我们当时知道我们过去自己做了什么……以及为什么。
- en: If you create **open source software** (**OSS**), then documentation is also
    important. If you need to evaluate several third-party packages to decide which
    one to use in a project, it is more likely that a package will be considered if
    it has good documentation. Wouldn’t it be a shame if you invested countless hours
    in a tool, but nobody uses it because it has no or no good documentation?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开发**开源软件**（**OSS**），那么文档也同样重要。如果你需要评估几个第三方软件包以决定在项目中使用哪一个，那么拥有良好文档的软件包更有可能被考虑。如果你在一个工具上投入了无数小时，但没有人使用它，因为它没有或没有良好的文档，这难道不是一件遗憾的事情吗？
- en: Lastly, if you do software development for a living, you should consider it
    part of the duty of a professional developer to write documentation. This is what
    you get paid for.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你以软件开发为职业，你应该将其视为专业开发者职责的一部分，即编写文档。这正是你获得报酬的原因。
- en: Developer documentation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者文档
- en: 'When we think of documentation, it is usually *user documentation* that comes
    to our minds first: long, hard-to-read, and boring texts about how to use every
    single feature of a software product, such as—for example—a word processor. Of
    course, this documentation exists for a good reason, but that should not interest
    us in the context of this book, as it is usually not written by (and for) developers.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到文档时，通常首先想到的是**用户文档**：关于如何使用软件产品的每个功能的冗长、难以阅读且无聊的文本，例如——例如——文字处理器。当然，这份文档存在有很好的理由，但在本书的背景下，这不应该引起我们的兴趣，因为它通常不是由（和为）开发者编写的。
- en: '*Software documentation* is an extensive field, and as such, cannot be covered
    in total in this chapter. We rather want to focus on documentation that supports
    you in the development process and enables you to write *clean code*, as described
    in the following, non-exhaustive list:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件文档**是一个广泛的领域，因此在本章中无法全面涵盖。我们更希望关注那些支持你在开发过程中，并使你能够编写如以下非详尽列表中所述的**清洁代码**的文档：'
- en: '**Administration and configuration guides**: Besides the obvious need to describe
    how to install and configure the software, make sure to include a section about
    *code quality*. This should contain information about which tools are used locally,
    and how they are configured.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理和配置指南**：除了描述如何安装和配置软件的明显需求外，确保包括一个关于**代码质量**的部分。这应该包含有关本地使用哪些工具以及它们如何配置的信息。'
- en: '**System architecture documentation**: As soon as your project becomes big
    enough that the basic server setup (usually a web server and database on one physical
    machine) becomes a bottleneck, and you start scaling it, you should think about
    documenting your infrastructure as well. Eventually, this will save you and others
    a lot of time searching for the correct **Uniform Resource Locators** (**URLs**)
    or server accesses, especially in critical situations. It might be a good place
    to add information about the **continuous integration** (**CI**) pipeline as well.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统架构文档**：一旦你的项目变得足够大，以至于基本的服务器设置（通常是一个物理机器上的Web服务器和数据库）成为瓶颈，并且你开始对其进行扩展，你应该考虑记录你的基础设施。最终，这将为你和其他人节省大量时间寻找正确的**统一资源定位符**（**URLs**）或服务器访问，尤其是在关键情况下。也许这是一个添加有关**持续集成**（**CI**）管道信息的好地方。'
- en: '**Software architecture documentation**: How is your software built internally?
    Does it use *events* to communicate between the modules? Are there any queues
    that should be used? Questions such as these should be answered in the *software
    architecture documentation*. This makes it easier for other developers to follow
    the principles.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件架构文档**：你的软件是如何构建的内部结构？它是否使用**事件**在模块之间进行通信？是否有应该使用的队列？这些问题应该在**软件架构文档**中得到解答。这使得其他开发者更容易遵循原则。'
- en: '**Coding guidelines**: In addition to the software architecture documentation,
    *coding guidelines* offer advice on how to write the code. We discussed this topic
    in depth in [*Chapter 12*](B19050_12.xhtml#_idTextAnchor174)*, Working in a Team*.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码规范**：除了软件架构文档之外，*编码规范*还提供了关于如何编写代码的建议。我们在[*第12章*](B19050_12.xhtml#_idTextAnchor174)*，*团队合作*中深入讨论了这一主题。'
- en: '**API documentation**: If your **PHP: Hypertext Preprocessor** (**PHP**) application
    has an API that is used by other developers or even customers, you need to provide
    a good overview of the API functionality. This makes theirs and your life easier,
    as you will have fewer interruptions from people who want to know how the API
    works. You can also give good examples of how to build additional API endpoints.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API文档**：如果你的**PHP：超文本预处理器**（**PHP**）应用程序有一个由其他开发者甚至客户使用的API，你需要提供一个关于API功能的良好概述。这使他们的生活和你自己的生活都变得更轻松，因为你会收到更少的关于API如何工作的询问。你还可以提供如何构建额外API端点的良好示例。'
- en: In the next section, we would like to have a closer look at how writing these
    types of documentation can be made easier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们想更详细地看看如何使编写这些类型的文档变得更加容易。
- en: Creating documentation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文档
- en: Documentation can be written in many ways. There is no one correct approach,
    and it is often predetermined by the tools already in use, such as the repository
    service or the company wiki. Still, there are a few tips and tricks that will
    help you to write and maintain it, and we want to introduce you to these in this
    section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可以以多种方式编写。没有一种正确的方法，通常它是由已经使用的工具预先决定的，例如存储库服务或公司维基。尽管如此，还有一些技巧和窍门可以帮助你编写和维护文档，我们希望在本节中向你介绍这些技巧。
- en: Text documents
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本文档
- en: Let us first focus on the typical, manually written text documents. The classic
    approach is to set up a wiki, as these have the great advantage that they can
    be accessed and used even by less-technical people. This makes them a great choice
    for companies. Modern wikis, either self-hosted or **software-as-a-service** (**SaaS**),
    offer a lot of reassurance and useful features such as inline comments or versioning.
    They also can connect with many external tools, such as ticket systems.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先关注典型的、手动编写的文本文档。经典的方法是建立一个维基，因为它们有一个很大的优点，那就是即使是技术不那么熟练的人也可以访问和使用。这使得它们成为公司的绝佳选择。现代维基，无论是自托管还是**软件即服务**（**SaaS**），提供了许多保证和有用的功能，如内联注释或版本控制。它们还可以连接到许多外部工具，例如票务系统。
- en: Another option is to keep the documentation close to your code by adding it
    to the repository—for example, within a subfolder. This is a valid approach as
    well, especially for smaller teams or open source projects. You should not use
    bloated formats such as **Word** or **Portable Document Format** (**PDF**), though,
    and rather focus on text-based formats such as **Markdown**. They are many times
    smaller, and changes to them are easy to track through the version control history.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是将文档添加到存储库中，使其靠近代码——例如，在子文件夹中。这也是一个有效的方法，特别是对于小型团队或开源项目。不过，你不应该使用像**Word**或**便携式文档格式**（**PDF**）这样的膨胀格式，而应该专注于基于文本的格式，如**Markdown**。它们通常要小得多，而且通过版本控制历史记录跟踪对它们的更改也很容易。
- en: The crux with manually written documentation is to keep it up to date. Text
    files or wikis are patient and do not forget, and over time, many pages of documentation
    virtually pile up in their storage. It gets problematic when it is unclear which
    documentation is correct and which is outdated. Once in doubt, it is not trustworthy
    at all anymore.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 手动编写文档的关键是要保持其更新。文本文件或维基很有耐心且不会忘记，随着时间的推移，许多页面的文档几乎堆积在它们的存储中。当不清楚哪些文档是正确的，哪些是过时的时，就会变得有问题。一旦产生怀疑，就完全不可信了。
- en: 'The only way to address this problem is to set up a process that makes sure
    that the documents get updated. In the previous chapter, we already introduced
    a possible way: *code reviews* in combination with a **Definition of Done** (**DoD**).
    This makes sure that, whenever we are about to add some new or changed code to
    our code base, we get reminded by a checklist to update the documentation, if
    necessary.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的唯一方法就是建立一个确保文档得到更新的流程。在前一章中，我们已经介绍了一种可能的方法：与**完成定义**（**DoD**）相结合的*代码审查*。这确保了每次我们即将向代码库添加一些新代码或更改代码时，都会通过清单提醒我们更新文档（如果需要的话）。
- en: In particular, system and software architecture are documented using diagrams.
    Therefore, in the next section, we want to show you how to effectively create
    these.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是系统和软件架构通常使用图表进行文档化。因此，在下一节中，我们想向您展示如何有效地创建这些图表。
- en: Diagrams
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表
- en: A good diagram is usually much more telling than a long text. There are many
    free-to-use *diagramming tools* available, and you can choose to either manually
    draw the diagrams or generate them from text definitions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的图表通常比长篇大论更有说服力。有许多免费使用的*图表工具*可供选择，您可以选择手动绘制图表或从文本定义中生成它们。
- en: Drawing diagrams manually
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动绘制图表
- en: The classical way of creating a diagram is by using a diagramming tool that
    allows you to draw it manually. These tools are specifically designed to assist
    you in the creation process—for example, by offering templates and icon sets,
    or by maintaining the connecting arrows between objects if they are moved.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图表的传统方式是使用允许您手动绘制的图表工具。这些工具专门设计用于协助您在创建过程中的工作——例如，通过提供模板和图标集，或者当对象移动时保持连接箭头。
- en: A versatile tool that we want to present to you in this chapter is *diagrams.net*
    ([https://www.diagrams.net](https://www.diagrams.net)). In fact, we also used
    it to create illustrations for this book. It offers a library of elements that,
    for example, can be used to create diagrams such as **Unified Modeling Language**
    (**UML**) diagrams and *flow charts*. It also offers icons for the most popular
    cloud providers, such as **Google Cloud Platform** (**GCP**), **Amazon Web Services**
    (**AWS**), and Microsoft Azure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们想向您介绍的一个多功能工具是*diagrams.net*（[https://www.diagrams.net](https://www.diagrams.net)）。实际上，我们也用它来创建本书的插图。它提供了一个元素库，例如，可以用来创建**统一建模语言**（**UML**）图表和*流程图*。它还提供了最受欢迎的云服务提供商的图标，例如**谷歌云平台**（**GCP**）、**亚马逊网络服务**（**AWS**）和微软Azure。
- en: If you intend to use it, we recommend saving your diagrams as **Scalable Vector
    Graphics** (**SVG**). SVG is based on **Extensible Markup Language** (**XML**),
    and although XML is quite verbose, it still consumes less disk space than graphic
    formats such as **Portable Network Graphics** (**PNG**).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算使用它，我们建议将您的图表保存为**可缩放矢量图形**（**SVG**）。SVG基于**可扩展标记语言**（**XML**），尽管XML相当冗长，但它仍然比**便携式网络图形**（**PNG**）等图形格式消耗更少的磁盘空间。
- en: More importantly, it can be loaded and amended in the editor repeatedly, so
    you do not have to start over again every time your system changes. Most **integrated
    development environments** (**IDEs**) and all browsers will display SVG files
    as graphical images that can even be scaled indefinitely, and if necessary, they
    can easily be exported into the most popular image formats.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，它可以在编辑器中反复加载和修改，因此每次系统发生变化时，您不必重新开始。大多数**集成开发环境**（**IDE**）和所有浏览器都将SVG文件作为可以无限缩放的图形图像显示，如果需要，它们可以轻松地导出为最流行的图像格式。
- en: Generating diagrams from definitions
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从定义生成图表
- en: Not everybody likes to use fiddly editors to draw diagrams, though. Luckily,
    there is a variety of *diagramming tools* that can generate diagrams from definitions.
    To demonstrate how they work in general, we chose *Mermaid.js* ([https://mermaid-js.github.io](https://mermaid-js.github.io))
    as an example. It is written in *JavaScript* and utilizes a Markdown-inspired
    language to define the diagrams.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是每个人都喜欢使用繁琐的编辑器来绘制图表，但幸运的是，有多种*图表工具*可以从定义中生成图表。为了展示它们的一般工作原理，我们选择了*Mermaid.js*（[https://mermaid-js.github.io](https://mermaid-js.github.io)）作为示例。它是用*JavaScript*编写的，并使用Markdown启发的语言来定义图表。
- en: 'Before we check out the advantages of this approach, let us first have a look
    at a simple example of a flow chart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们检查这种方法的优势之前，让我们先看看一个简单的流程图示例：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code would render a diagram, as shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将渲染一个图表，如下所示：
- en: '![](img/Figure_13.01_B19050.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_13.01_B19050.jpg)'
- en: 'Figure 13.1: Mermaid diagram example'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：Mermaid图表示例
- en: Diagram generation tools help you to create several diagram types, such as *sequence
    diagrams*, *Gantt charts*, or even the well-known *pie charts*. You do not have
    to think about how to style them or how they are arranged. The main work is taken
    over by the diagramming tool. Of course, Mermaid.js offers many ways to affect
    the appearance of generated diagrams.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图表生成工具可以帮助您创建多种图表类型，例如*序列图*、*甘特图*，甚至是众所周知的*饼图*。您无需考虑如何设计它们或它们的布局。主要工作由图表工具接管。当然，Mermaid.js提供了许多方法来影响生成图表的外观。
- en: Since the diagram definitions are simple text blocks, they can be added to the
    code repository. Changes to them are comfortably traceable through the version
    history. Mermaid diagrams integrate especially well in Markdown documents since
    the most popular IDEs can display these diagrams directly in the document through
    additional extensions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图表定义是简单的文本块，它们可以被添加到代码仓库中。对这些更改的追踪通过版本历史记录非常舒适。Mermaid 图表与 Markdown 文档集成得非常好，因为最流行的
    IDE 可以通过额外的扩展直接在文档中显示这些图表。
- en: Lastly, if you just want to play around with the possibilities of Mermaid, you
    can use the *Mermaid Live Editor* ([https://mermaid.live](https://mermaid.live))
    to better understand how it works.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您只是想探索 Mermaid 的可能性，可以使用 *Mermaid Live Editor* ([https://mermaid.live](https://mermaid.live))
    来更好地理解它是如何工作的。
- en: Mermaid alternatives
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Mermaid 的替代方案
- en: Other noteworthy diagramming tools are *PlantUML* ([https://plantuml.com](https://plantuml.com)),
    which offers even more practical diagram types to document software architecture,
    and *Diagrams* ([https://diagrams.mingrammer.com](https://diagrams.mingrammer.com)),
    which is strong in documenting system architecture.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 其他值得注意的绘图工具包括 *PlantUML* ([https://plantuml.com](https://plantuml.com))，它提供了更多实用的绘图类型来记录软件架构，以及
    *Diagrams* ([https://diagrams.mingrammer.com](https://diagrams.mingrammer.com))，它在记录系统架构方面表现强劲。
- en: Documentation generators
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档生成器
- en: Probably the best documentation is one we do not need to create ourselves and
    is still as useful as human written content. Unfortunately, this will continue
    to be a dream for now, although we do not know where **machine learning** (**ML**)
    will take us in the future.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最好的文档是我们不需要自己创建的，但仍然像人类编写的内容一样有用。不幸的是，这现在仍然是一个梦想，尽管我们不知道机器学习（**ML**）在未来会带我们走向何方。
- en: Right now, we can already use tools to create documentation from our code. At
    least, we can use them to aggregate information that is spread across the many
    classes of our projects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已可以使用工具从我们的代码中创建文档。至少，我们可以使用它们来汇总项目众多类中分散的信息。
- en: API documentation
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 文档
- en: In this section, we will show you how to create documentation from code using
    an example of API documentation. If your application provides an API, it is fundamental
    to have up-to-date documentation for it. Writing such documentation is a time-consuming
    and error-prone process, but we can at least make it a bit easier.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过 API 文档的示例向您展示如何从代码中创建文档。如果您的应用程序提供了 API，那么拥有最新的文档是至关重要的。编写此类文档是一个耗时且容易出错的过程，但我们至少可以使其变得容易一些。
- en: 'There exist many approaches to documenting APIs. In this book, we will introduce
    you to one format that has become more and more popular: **OpenAPI**. This format,
    formerly known as **Swagger**, describes all aspects of an API in a **YAML Ain’t
    Markup Language** (**YAML**) document, which could look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多记录 API 的方法。在本书中，我们将向您介绍一种越来越受欢迎的格式：**OpenAPI**。这种格式，以前称为 **Swagger**，在 YAML
    Ain’t Markup Language（**YAML**）文档中描述了 API 的所有方面，可能看起来像这样：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This might be a bit too much information at first glance. Do not worry, though—it
    is not that complicated. In a nutshell, the preceding YAML describes the `Product`
    API in its version `0.1`, which offers one endpoint, `/product`. This endpoint
    can be called using the `GET` and accepts the optional parameter `limit`, which
    is of type `integer` and must be written in the URL query (for example, `/product?limit=50`).
    If all goes well, the endpoint will return with the HTTP code `200`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，这可能会有些信息过多。不过，请放心——它并不那么复杂。简而言之，前面的 YAML 描述了 `Product` API 的 `0.1` 版本，它提供了一个端点
    `/product`。这个端点可以通过 `GET` 方法调用，并接受可选参数 `limit`，该参数类型为 `integer`，必须写入 URL 查询中（例如，`/product?limit=50`）。如果一切顺利，端点将以
    HTTP 状态码 `200` 返回。
- en: OpenAPI documentation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 文档
- en: 'The `OpenAPI` format is quite extensive, so we cannot cover it in this book.
    If you are interested in learning more about it, please look at the official documentation:
    [https://oai.github.io/Documentation](https://oai.github.io/Documentation).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 格式相当广泛，所以我们无法在本书中涵盖它。如果您想了解更多关于它的信息，请查看官方文档：[https://oai.github.io/Documentation](https://oai.github.io/Documentation)。
- en: As a welcome benefit, IDEs such as *PhpStorm* by default support you in writing
    these YAML files by checking the validity of the schema. If you, for example,
    wrote `operation` instead of `operationId`, the IDE would highlight the wrong
    usage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项受欢迎的好处，IDEs，例如默认支持 *PhpStorm*，会通过检查模式的有效性来帮助你编写这些 YAML 文件。例如，如果你将 `operation`
    错误地写成了 `operationId`，IDE 会突出显示错误的使用。
- en: You can either write a YAML file manually or have it generated. We want to have
    a closer look at the latter use case. To achieve this, we need the help of a *Composer*
    package called `swagger-php` ([https://github.com/zircote/swagger-php](https://github.com/zircote/swagger-php)).
    Please refer to the package documentation on how to install it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以手动编写一个YAML文件，或者让它自动生成。我们想更仔细地看看后者的情况。为了实现这一点，我们需要一个名为`swagger-php`的*Composer*包的帮助（[https://github.com/zircote/swagger-php](https://github.com/zircote/swagger-php)）。请参考包文档了解如何安装它。
- en: Of course, the package cannot magically create documentation out of nothing.
    Instead, `swagger-php` parses meta information that is written directly in the
    PHP code, either as *DocBlock annotations* or, with PHP `8.1`, as *attributes*.
    In other words, we need to make sure that the meta information is already there
    before we can generate the YAML file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个包不能从无到有地神奇地创建文档。相反，`swagger-php`解析直接写在PHP代码中的元信息，无论是作为*DocBlock注解*，还是从PHP
    `8.1`开始作为*属性*。换句话说，我们需要确保在生成YAML文件之前，元信息已经存在。
- en: 'What does this information look like? Let us have a look at the first example,
    using *annotations*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息看起来是什么样子？让我们看看第一个示例，使用*注解*：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Based on the information inside the DocBlocks, `swagger-php` will return the
    documentation of our API as a YAML file that will look exactly like the preceding
    example. But why should we use `swagger-php` when we could write the YAML directly?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 基于DocBlocks内的信息，`swagger-php`将返回我们的API文档作为一个YAML文件，其外观将完全像前面的示例。但为什么我们要使用`swagger-php`，而不是直接编写YAML文件呢？
- en: 'Indeed, not everybody wants to have big blocks of documentation within the
    code, and depending on the level of detail you want to document, they can become
    much bigger than in our previous example. If you think of an API with many endpoints
    that are scattered across various controllers in your code, though, you might
    already realize the benefits: all required meta information is stored close to
    the code, so if changes are made on the endpoint, it is much easier for the developer
    to simply amend the DocBlock annotations than to do these changes in some additional
    document or wiki. Since the comments are part of the code, the changes are also
    already under version control. In the end, the decision to use `swagger-php` is
    up to you or the team.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，并不是每个人都想在代码中包含大块的文档，而且根据你想要记录的详细程度，它们可能会比我们之前的示例大得多。如果你想到一个API，它有多个端点分散在你的代码中的各种控制器上，那么你可能已经意识到了好处：所有必要的元信息都存储在代码附近，所以如果端点有变化，开发者只需简单地修改DocBlock注解，而不是在额外的文档或维基上做这些更改，这要容易得多。由于注释是代码的一部分，这些更改也已经处于版本控制之下。最终，是否使用`swagger-php`的决定取决于你或你的团队。
- en: In the *Inline documentation* section of this chapter, we will discuss why DocBlocks
    are not the best place to store meta information. Since PHP `8.0`, we luckily
    have a better place for them—namely, attributes, which we already talked about
    in [*Chapter 6*](B19050_06.xhtml#_idTextAnchor069)*, PHP is Evolving- Deprecations
    and Revolutions*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*内联文档*部分，我们将讨论为什么DocBlocks不是存储元信息的最佳位置。自从PHP `8.0`以来，我们幸运地有了更好的地方来存储它们——即属性，我们已经在[*第6章*](B19050_06.xhtml#_idTextAnchor069)*，PHP
    is Evolving- Deprecations and Revolutions*中讨论过。
- en: 'Before we discuss why they are the better option, let us have a look here at
    how our endpoint would be documented by using attributes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论为什么它们是更好的选择之前，让我们看看如何使用属性来记录我们的端点文档：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Admittedly, the attribute syntax might look a bit unfamiliar. We recommend using
    attributes instead of annotations, however, because they come with convenient
    advantages. Firstly, they are real code; they get parsed by the PHP interpreter,
    and your IDE will be able to support you in writing them. In the first line of
    the preceding example, you can see that we need to import the `OpenApi\Attributes`
    namespace to make this example work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然属性语法可能看起来有些不熟悉，但我们仍然建议使用属性而不是注解，因为它们带来了方便的优势。首先，它们是真正的代码；它们会被PHP解释器解析，并且你的IDE将能够支持你编写它们。在前面的示例的第一行，你可以看到我们需要导入`OpenApi\Attributes`命名空间才能使这个示例工作。
- en: Within this namespace, you will find actual classes that are referenced here.
    The files are located inside the `vendor` folder of your project. This enables
    you to use features such as autocompletion, and you will get immediate feedback
    from your IDE if something is not correct, which makes the writing of such documentation
    much easier.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命名空间中，你可以找到这里引用的实际类。这些文件位于你的项目的 `vendor` 文件夹中。这使得你可以使用诸如自动完成等功能，如果你的 IDE
    发现某些内容不正确，你会立即得到反馈，这使得编写此类文档变得更加容易。
- en: As the last step, you need to generate a YAML file from the code. This step
    can, of course, be automated in the *CI pipeline*, which we introduced in [*Chapter
    11*](B19050_11.xhtml#_idTextAnchor145)*, Continuous Integration*. You can find
    examples of the usage in our Git repository for this book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，你需要从代码生成一个 YAML 文件。当然，这一步可以在我们介绍的 *CI 流水线* 中自动化[*第 11 章*](B19050_11.xhtml#_idTextAnchor145)*，持续集成*。你可以在我们这本书的
    Git 仓库中找到使用示例。
- en: 'You might wonder: what can I do with this API documentation? Surely, it can
    already function as documentation for other developers, but there is much more
    to it. You can, for example, import it into HTTP clients such as *Insomnia* or
    *Postman*. That way, you can immediately start to interact with the API without
    having to look up the exact schema.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：我能用这个 API 文档做什么呢？当然，它已经可以作为其他开发者的文档使用，但还有更多。例如，你可以将其导入到 *Insomnia* 或 *Postman*
    这样的 HTTP 客户端。这样，你就可以立即开始与 API 交互，而无需查找确切的模式。
- en: Another use case is to help you write functional tests for your API. There are
    packages such as *PHP Swagger Test* ([https://github.com/byjg/php-swagger-test](https://github.com/byjg/php-swagger-test))
    or *Spectator* ([https://github.com/hotmeteor/spectator](https://github.com/hotmeteor/spectator))
    that can assist you in writing tests against the `contract`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例是帮助你为你的 API 编写功能测试。有一些包，如 *PHP Swagger Test* ([https://github.com/byjg/php-swagger-test](https://github.com/byjg/php-swagger-test))
    或 *Spectator* ([https://github.com/hotmeteor/spectator](https://github.com/hotmeteor/spectator))，可以帮助你编写针对
    `contract` 的测试。
- en: Lastly, and probably the most important use case, is to use the OAS specification
    with *Swagger UI* ([https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui)),
    which is a visual and interactive documentation of your API.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可能是最重要的用例，是使用 OAS 规范与 *Swagger UI* ([https://github.com/swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui))，这是一个
    API 的视觉和交互式文档。
- en: 'The following screenshot shows what our example API would look like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的示例 API 的外观：
- en: '![](img/Figure_13.02_B19050.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_13.02_B19050.jpg)'
- en: 'Figure 13.2: Swagger UI'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：Swagger UI
- en: Exploring all possibilities of `OpenAPI` and Swagger UI would go beyond the
    scope of our book. We recommend you check out both tools if you want to learn
    more about them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `OpenAPI` 和 Swagger UI 的所有可能性超出了我们这本书的范围。如果你想了解更多关于这两个工具的信息，我们建议你检查一下。
- en: OpenAPI alternatives
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 替代方案
- en: There are other formats such as **RESTful API Modeling Language** (**RAML**)
    ([https://raml.org](https://raml.org)) or *API Blueprint* ([https://apiblueprint.org](https://apiblueprint.org))
    that you could use, and we are not opinionated toward any solution.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他格式，例如 **RESTful API Modeling Language** (**RAML**) ([https://raml.org](https://raml.org))
    或 *API Blueprint* ([https://apiblueprint.org](https://apiblueprint.org))，你可以使用，我们不对任何解决方案有偏见。
- en: Inline documentation
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联文档
- en: 'A special case is documentation that many of us have done regularly since we
    started writing software: comments. These are written directly in the code, where
    the developers can immediately see them, so that seems to be a good place to put
    documentation. But should comments really be seen as or used for documentation?'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特殊情况是我们中的许多人自从开始编写软件以来就一直在做的文档：注释。这些注释直接写在代码中，开发者可以立即看到它们，所以这似乎是一个放置文档的好地方。但是，注释真的应该被视为或用于文档吗？
- en: In our opinion, comments should generally be avoided. Let us have a look at
    some arguments on the next pages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看来，通常应该避免注释。让我们看看下一页的一些论点。
- en: Annotations are no code
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注解不是代码
- en: Comments are not part of the code. Although it is possible to parse comments
    through the Reflection API of PHP, they were originally not meant to store meta
    information. Ideally, your software should still work the same after stripping
    out all comments.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注释不是代码的一部分。虽然可以通过 PHP 的反射 API 解析注释，但它们最初并不是为了存储元信息而设计的。理想情况下，你的软件在移除所有注释后仍然应该能够正常工作。
- en: Today, though, this is often not the case anymore. Frameworks and packages such
    as **object-relational mappers** (**ORMs**) use DocBlock annotations to store
    information in them, such as route definitions or relations between database objects.
    Some *code quality tools* use annotations to control their behavior on certain
    parts of the code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在这种情况往往不再是这样了。框架和包，如**对象关系映射器**（**ORMs**）使用DocBlock注释来存储信息，例如路由定义或数据库对象之间的关系。一些*代码质量工具*使用注释来控制它们在代码某些部分的行为。
- en: PHP cannot throw error messages if your annotations are wrong. If they serve
    an important purpose, your tests will hopefully catch the bug before they are
    deployed to production. A better choice is attributes, which are a real language
    construct. We discussed these in more detail earlier in this chapter when we talked
    about API documentation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: PHP无法在您的注释错误时抛出错误信息。如果它们有重要的用途，您的测试可能会在它们部署到生产环境之前发现这些错误。更好的选择是属性，它们是真正的语言结构。我们在本章前面讨论API文档时已经详细讨论了这些内容。
- en: Unreadable code
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可读的代码
- en: Furthermore, as we already discussed in [*Chapter 12*](B19050_12.xhtml#_idTextAnchor174),
    *Working in a team*, comments are often an indicator of code that is too complex.
    Instead of explaining your code, you should rather aim to write code that does
    not need to be commented in the first place.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们在[*第12章*](B19050_12.xhtml#_idTextAnchor174)中已经讨论过的，*团队合作*，注释通常是代码过于复杂的指标。与其解释你的代码，你更应该努力编写不需要注释的代码。
- en: It can be a fun exercise to compress a whole function into a one-liner—for example,
    by using some quadruple-nested ternary operators or a frighteningly complicated
    `if` clause that nobody will understand. You will regret having written it latest
    at the point when there is a high-priority bug in the production environment,
    and it is on you to fix it without having the slightest idea anymore what your
    cryptic masterpiece is supposed to do.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个函数压缩成一行代码可能是一种有趣的练习——例如，通过使用一些四重嵌套的三元运算符或一个令人恐惧的复杂`if`条件，没有人会理解。当你发现生产环境中有一个高优先级的错误，而你又完全不知道你的神秘杰作原本应该做什么时，你将后悔写下它。
- en: Or, even worse, your new colleague on their first on-call shift has the honor
    of debugging late at night, when the alerts keep coming in. There are better ways
    to start a working relationship.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更糟糕的是，你的新同事在他们的第一次值班时，有幸在深夜调试，这时警报不断传来。有更好的方式开始一段工作关系。
- en: Outdated comments
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过时的注释
- en: A comment is quickly written, but also quickly forgotten. Since comments are
    not parsed by the PHP interpreter, you will not get informed when they are not
    correct anymore—for example, when the function they are supposed to explain gets
    rewritten and suddenly serves a different purpose. There is no other way to validate
    the comments than a developer trying to read and understand their meaning, and
    comparing it with the actual function code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注释很快就能写出来，但也很快会被忘记。由于PHP解释器不会解析注释，当它们不再正确时，你将不会得到通知——例如，当它们应该解释的函数被重写并突然服务于不同的目的时。除了开发者尝试阅读和理解它们的含义，并将其与实际函数代码进行比较之外，没有其他方法来验证注释。
- en: At the time of writing, this might not sound like a problem but imagine coming
    back to a class after a year and finding a comment that you do not understand
    anymore. Why did you write it in the first place? And if you do not know why,
    how is anybody else supposed to know?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，这可能听起来不是问题，但想象一下一年后回到一个类，发现你不再理解的注释。你当初为什么要写它？如果你不知道原因，其他人又怎么知道呢？
- en: Outdated comments are wrong information within your code. They are distracting
    and costly since the developer time does not come for free. Therefore, think twice
    before you add them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的注释是代码中的错误信息。它们会分散注意力，并且成本高昂，因为开发者的时间不是免费的。因此，在添加它们之前，请三思。
- en: Useless comments
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无用的注释
- en: 'Try to avoid comments that state the obvious and do not add any further information.
    The following code snippet is a real-life example of this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量避免那些陈述明显事实且不提供任何额外信息的注释。以下代码片段是这种情况的真实例子：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Although it could be considered a nice gesture that the developer took the time
    to explain the `file_put_contents` function, it does not add value to the code.
    If you do not know a function, you can look it up. Other than that, it is just
    an unnecessary line of code you need to scan when reading the code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然开发者花时间解释`file_put_contents`函数可能是一种好的姿态，但这并不增加代码的价值。如果你不知道一个函数，你可以查阅它。除此之外，它只是一行不必要的代码，你需要在阅读代码时扫描。
- en: It is sometimes not easy to draw a line between useful and useless comments.
    You could use code reviews to cope with this problem; as discussed in [*Chapter
    12*](B19050_12.xhtml#_idTextAnchor174), *Working in a Team*, having somebody else
    from your team do honest reviews of your code will help to avoid comments such
    as these.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有时很难在有用的和无用的注释之间划清界限。你可以使用代码审查来解决这个问题；如[*第12章*](B19050_12.xhtml#_idTextAnchor174)中讨论的，*在团队中工作*，让团队中的其他人诚实地审查你的代码将有助于避免这些注释。
- en: Wrong or useless DocBlocks
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误或无用的DocBlocks
- en: We already discussed DocBlocks and what makes them problematic in [*Chapter
    12*](B19050_12.xhtml#_idTextAnchor174)*, Working in a Team,* when we introduced
    coding guidelines. In short, since DocBlocks are basically comments (yet following
    a certain structure), they can get outdated or simply go wrong quickly if— for
    example—the parameters of a function call change and necessary changes were not
    updated in the DocBlock too. Your IDE might throw warnings, but PHP will not.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了DocBlocks以及它们在[*第12章*](B19050_12.xhtml#_idTextAnchor174)中造成的问题，*在团队中工作*，当我们介绍编码指南时。简而言之，由于DocBlocks基本上是注释（但遵循一定的结构），如果函数调用的参数发生变化而DocBlock中的必要更改没有更新，它们可能会很快过时或出错。你的IDE可能会抛出警告，但PHP不会。
- en: With the introduction of better type hinting in PHP, many DocBlocks can simply
    be removed. The redundancy is of no benefit and can rather confuse the reader
    if the actual code diverges from the annotations.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 随着PHP中更好的类型提示的引入，许多DocBlocks可以简单地被移除。这种冗余没有任何好处，如果实际代码与注释不符，反而可能会让读者感到困惑。
- en: TODO comments
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TODO注释
- en: 'Comments are not a suitable place to store tasks. You probably know comments
    such as this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注释不是存储任务的合适地方。你可能知道这样的注释：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: While some IDEs can assist you in managing your `TODO` comments, this approach
    will only work if you are the only one on the project. As soon as you are Working
    in a Team, using a work management tool such as JIRA, Asana, or even Trello, writing
    such a comment is simply a way of creating *technical debt*, or, in other words,
    you are offloading the task into some uncertain day in the future. Somebody else
    will hopefully fix it one day—most of the time, this will not happen, though.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些IDE可以帮助你管理你的`TODO`注释，但这种方法只有在你是项目唯一成员的情况下才会有效。一旦你在团队中工作，使用JIRA、Asana或甚至Trello这样的工作管理工具，写这样的注释就只是创建*技术债务*的一种方式，换句话说，你是在将任务推迟到未来的某个不确定的日子。希望有人有一天能修复它——但大多数情况下，这种情况是不会发生的。
- en: Instead of a comment, consider creating a task in your work management tool
    of choice. This way, it is transparent to your colleagues, and it is much easier
    to plan this work.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不要用注释，而是考虑在你的首选工作管理工具中创建一个任务。这样，你的同事可以清楚地看到，而且更容易规划这项工作。
- en: When commenting is useful
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当注释有用时
- en: 'After discussing what should not be commented, are there any use cases left
    where comments are useful? Indeed, not so many, but there are some occasions where
    comments still make sense, such as in the following cases:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了不应该注释的内容之后，还有哪些情况下注释是有用的呢？确实，并不多，但仍然有一些场合下注释是有意义的，例如以下情况：
- en: '**To avoid confusion**: If you can anticipate that other developers might wonder
    why you chose that implementation, you should add more context by adding a comment.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为了避免混淆**：如果你能预见到其他开发者可能会对你的实现选择感到疑惑，你应该通过添加注释来提供更多的上下文。'
- en: '**When implementing complex algorithms**: Even if we try to avoid it, we sometimes
    have to write code that is hard to understand—for example, if we need to implement
    a certain algorithm or some unknown business logic. In these cases, a brief comment
    can be a lifesaver.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在实现复杂算法时**：即使我们试图避免，有时我们不得不编写难以理解的代码——例如，如果我们需要实现某个算法或某些未知的业务逻辑。在这些情况下，简短的注释可能是一个救命稻草。'
- en: '**For reference purposes**: If your code implements some logic that is already
    explained elsewhere—for example, in a wiki or a ticket—you can add a link to the
    corresponding source to make it easier for others to find more information about
    it. This should only be an exception and not the rule.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅供参考**：如果你的代码实现了某些已经在其他地方解释过的逻辑——例如，在维基或工单中——你可以添加一个链接到相应的源，以便其他人更容易找到更多关于它的信息。这应该只是一种例外，而不是规则。'
- en: Please bear in mind that we do not want to be dogmatic. If you feel a comment
    is needed at some point, write it. It can still be deleted, probably after discussing
    the topic with another developer in the code review.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们不想过于教条。如果你觉得在某些地方需要注释，就写下来。它仍然可以被删除，可能是在与另一位开发者在代码审查中讨论了该主题之后。
- en: Tests as documentation
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试作为文档
- en: Developers who write tests often say that these tests also function as documentation.
    We, too, made the claim in [*Chapter 10*](B19050_10.xhtml#_idTextAnchor128)*,
    Automated Testing* when we talked about the benefits of *automated tests*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 经常编写测试的开发者常说，这些测试也起到了文档的作用。我们也在[*第10章*](B19050_10.xhtml#_idTextAnchor128)*自动化测试*中提出了这个观点，当时我们讨论了*自动化测试*的好处。
- en: 'If you do not know what the purpose of a class is, you can at least infer its
    expected behavior from the tests, because this is precisely what tests do: they
    make assertions that the code will be tested against. By looking at these assertions,
    you know what the code is supposed to do.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道一个类的目的是什么，你至少可以从测试中推断出它的预期行为，因为这正是测试所做的：它们对代码进行断言，代码将被测试。通过查看这些断言，你知道代码应该做什么。
- en: If the tests fail, you at least know that there is a discrepancy between the
    assertions and the actual code, and you cannot trust them now. Unless test failures
    are not generally ignored in your project, you can be sure that someone will fix
    them soon—or, in other words, the implicit documentation gets updated.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，你至少知道断言和实际代码之间存在差异，你现在不能信任它们。除非在你的项目中通常不忽略测试失败，你可以确信有人会很快修复它们——换句话说，隐含的文档会得到更新。
- en: If all the tests pass, you know that you can trust the class implementation—given
    the tests are well written and do not just test the implementation of a mock object,
    as discussed in [*Chapter 10*](B19050_10.xhtml#_idTextAnchor128)*, Automated Testing*,
    when we talked about *unit tests*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有测试都通过，你就知道你可以信任类的实现——前提是测试写得很好，并且不仅仅测试模拟对象的实现，正如我们在[*第10章*](B19050_10.xhtml#_idTextAnchor128)*自动化测试*中讨论的，当时我们讨论了*单元测试*。
- en: Surely, reading and understanding tests are not the easiest form of documentation,
    but they can be a reliable **source of truth** (**SOT**) if there is no other
    documentation. They should, however, not be the only type of documentation in
    your project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，阅读和理解测试并不是最容易的文档形式，但如果没有其他文档，它们可以是一个可靠的**真相来源**（**SOT**）。然而，它们不应该成为你项目中唯一的文档类型。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Writing clean code is not only knowing how to do it yourself but also about
    making sure that other developers will follow this path too. To be able to do
    this, they need to know the rules that apply to the project.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 编写干净的代码不仅要知道如何自己做到，还要确保其他开发者也会遵循这条道路。为了做到这一点，他们需要知道适用于项目的规则。
- en: In this chapter, we discussed how to create documentation that can help you
    to achieve this goal. We discussed best practices for manually writing documentation,
    as well as creating informative and at the same time maintainable diagrams. Lastly,
    we introduced ways to generate documentation from the code and elaborated on the
    pros and cons of inline documentation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何创建可以帮助你实现这一目标的文档。我们讨论了手动编写文档的最佳实践，以及创建信息丰富且同时易于维护的图表。最后，我们介绍了从代码生成文档的方法，并详细阐述了内联文档的优缺点。
- en: Congratulations! You made it to the end of this book. We hope you enjoyed reading
    it and are now fully motivated to write clean code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经读完了这本书的结尾。我们希望你喜欢阅读它，并且现在已经完全有动力去编写干净的代码。
- en: You will probably not succeed with it right away. Strengthening your coding
    skills is a process that can be frustrating and sometimes even hard to do when
    working on a commercial project. Try to be patient, and over time you will get
    better and better.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能一开始不会成功。加强你的编码技能是一个可能令人沮丧，有时甚至在商业项目中很难做到的过程。试着保持耐心，随着时间的推移，你会越来越好。
- en: Reading just one book about clean code is surely not enough. Over the course
    of this book, we were often only able to merely scratch topics on the surface,
    and we encourage you to dive deeper into the topics that interest you—and into
    those that you might not consider interesting in the first place. It requires
    more studies, an open mind, and the willingness to accept feedback from others
    to grow your skills.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅阅读一本关于编写清洁代码的书肯定是不够的。在这本书的过程中，我们往往只能仅仅触及表面的话题，我们鼓励你深入探索那些你感兴趣的话题——以及那些你一开始可能并不认为有趣的话题。这需要更多的研究、开放的心态，以及愿意接受他人反馈的意愿来提升你的技能。
- en: Yet we are convinced that with this book, we gave you more than a solid starting
    point for your future journey as a great PHP developer. We would be glad if you
    think that too.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们确信，通过这本书，我们为你未来的PHP开发者之路提供了不仅仅是坚实的起点。如果你也这样认为，我们将非常高兴。
- en: Further reading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: If you want to learn more about Mermaid.js, we recommend the book *The Official
    Guide to Mermaid.js* by *Knut Sveidqvist* and *Ashish Jain*, published by Packt
    in 2021.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于Mermaid.js的信息，我们推荐由Knut Sveidqvist和Ashish Jain合著，并由Packt在2021年出版的《Mermaid.js官方指南》一书。
