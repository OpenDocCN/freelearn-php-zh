- en: Chapter 3. Handling and Decorating Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using form view helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom form element and form view helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will be discussing forms, and specifically the generation
    and manipulation of them. Forms are a very important part in the communication
    with the user, as it is one of the ways to receive information from the user.
    It is also a great way to use forms to do a lot of validation of the elements
    by combining JavaScript and PHP. If we then can make it so that it looks great
    as well, why would we not do that?
  prefs: []
  type: TYPE_NORMAL
- en: Creating forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe involves different ways of creating forms, and after that we will
    talk about how elements are added to the form. In the last part of this recipe
    we will discuss how to validate forms, and the best way of accomplishing this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A basic ZF2 skeleton application, with at least one module where we can work
    in, is necessary to create and output forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to use form annotations, we also require `Doctrine\Common` to be
    initiated in the skeleton as it has the parsing engine to parse the annotations.
    If we are using composer (which comes with the Zend Framework 2 skeleton) we can
    simply update our `composer.json` by adding the following line to the required
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure the comma on the end of the line is only there when there are still
    lines beneath it. If there are no lines coming after this line except for a closing
    brace, please refrain from adding the comma as it will fail the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is to run the composer update to make sure it gets installed, by using
    a command like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If we are not using a composer we are best off looking at the Doctrine project
    website ([http://www.doctrine-project.org/projects/common.html](http://www.doctrine-project.org/projects/common.html))
    to find more information on how to install this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll first be talking about creating forms and elements, after that we'll talk
    about adding filters and validations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A form always needs to be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A class that is extended from the `Zend\Form` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class that is using the `Zend\Form\Annotation` defining method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a form that is extended from Zend\Form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will start with defining a form from the first method, by extending it from
    the `Zend\Form` class. This is probably the easiest way to begin if we are new
    in Zend Framework 2 (ZF2).
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea is that our form class should extend from the `Zend\Form` class,
    and has at least a `__construct` method that defines our elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example in the `/module/Application/src/Application/Form/NormalForm.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now go to our controller, say `IndexController` of the `Application`
    module we can output the form to View by doing the following in file `/module/Application/src/Application/Controller/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now take a look at our view script, we can see that we have the variable
    available. We will now output the form actually to the screen by the following
    example (`/module/Application/view/application/index/index.phtml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code example will be somewhat like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This tells us that the instantiating went well, and that it is fully functional.
    As we also can see the name that we defined (`"normalform"`) is coming back as
    the `name` and `id` of the form.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a form that uses the Zend\Form\Annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at an empty form (`/module/Application/src/Application/Form/AnnotationForm.php`)
    in an annotated form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If we now want to begin outputting our form to our user we can do that in a
    similar way to the normal form (luckily). The first thing we need to do for that
    is actually assigning the form to the View (`/module/Application/src/Application/Controller/IndexController.php`)
    again, which is the only thing that is a bit different to the normal form creation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now want to output the form to our View (file `/module/Application/view/application/index/index.phtml`),
    we can simply do the same as we did with the other form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML output of this example would result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding elements to a Zend\Form extend form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating elements in this kind of form is pretty simple, let''s see what it
    looks like with a short example (file `/module/Application/src/Form/NormalForm.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Adding elements to an annotated form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take an example of an annotated element creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Validating form input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most important things of having forms is to use the data in our application,
    because why else would we have forms to begin with?
  prefs: []
  type: TYPE_NORMAL
- en: Let's go and create a simple model (`/module/Application/src/Application/Model/SampleModel.php`)
    that we can use for an example later on, but has absolutely no other use for this
    recipe at all.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As we can see this model doesn't do anything at all, but we need it later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now created our own form extension, so it is time to create our `InputFilter`
    class which will filter and validate the values that we are going to put in the
    form, and attach to our form through `setInputFilter` later on (we''ll edit the
    file `/module/Application/src/Application/Form/NormalFormValidator.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now started creating our input filter class, and already created one
    of the two required methods of `InputFilterAwareInterface`. Now, let''s continue
    further to the point where we implement the second method, and construct the actual
    filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We just added a simple validator that makes sure the length of the string is
    not smaller than 5 and not longer than 50 characters, and of course in our case
    we also want `UTF-8` characters, but obviously we can either drop this or change
    the character set if we need to.
  prefs: []
  type: TYPE_NORMAL
- en: We'll add a simple password field validator and filter now, but the next one
    after that checks if the `repeat_password` field is identical in value to our
    password field. Personally, I really like that validator because of its simplicity
    and yet being powerful enough to take away some manual labor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After that nifty validator we will now add a simple e-mail validator, which
    will also have a not empty validator that checks if the field is empty or not.
    We will use the following code for e-mail validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Even dates are not a problem for validation, and we can make it even this good
    that we are only allowed to select ranges of dates as well, which in some cases
    (for example 18+ websites) is nice to have.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s jump in immediately and take a look at a simple example that uses our
    `normalform` like before (`/module/Application/src/Application/Controller/IndexController.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's understand how we achieved what we achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding first example, creating a form class that extended from `Zend\Form`
    is the bare minimum to set a form up. As we can see, this form doesn't have any
    elements or properties set up at the moment, the only thing it defines is the
    `name/id` of the DOM element of the form object. What we did after that is first
    initialize the form, and then assign the `ViewModel` to it as that will be the
    View that is going to be outputted to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing that we did in the example is output the `<form>` tag first—with
    all its properties, such as `method`, `action`, and `etcetera`. The second thing
    is that we do output all the elements in the form (which in this case are none),
    and as a last thing that we do is we output the end form tag `</form>`, which
    now ends our form declaration.
  prefs: []
  type: TYPE_NORMAL
- en: If we open up a browser and look at our code, we will see no much different
    than we saw before, probably an empty page. However, when we open out the source
    code of that page (in Firefox this is right-clicking on the page and clicking
    on **View Page Source**) we see that we actually did instantiate the form properly
    in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Our basic form instantiation is now concluded, if we want a more advanced, but
    more attractive as well, way of defining our form, we should continue reading
    the next bit as well.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an annotated form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Defining an annotated form is a bit different than a normal form, the main difference
    being that an annotated form is just a class with properties, which isn't extended
    from any other class, while the other method requires us to extend from the `Zend\Form`
    class. In the preceding example, we first created a very simple and empty form
    using the annotation method. We can also see that we require a Hydrator to make
    the Annotation Engine understand what we are on about, but we do not need to extend
    the class, so we are free to do what we want there.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing we should be wary about is that every element that we require
    in our form, should have the property access set to public, otherwise technically
    the Annotation Engine can't pick it up. We don't have to make getters/setters
    for the properties (unless we want to use it for ourselves), as the Annotation
    Engine just uses the public properties directly.
  prefs: []
  type: TYPE_NORMAL
- en: Using the form in a controller is slightly different then a normal form, because
    when we would just instantiate the class and use that as a form it would end up
    as an error. The class needs to go through `AnnotationBuilder` first to actually
    build up the form. That is why we need to do `createForm()`, which then outputs
    a form.
  prefs: []
  type: TYPE_NORMAL
- en: This will output nothing visible, but if we then look at the page source code
    (in Firefox this is achieved by right-clicking on the page and then clicking on
    **View Page Source**) we see that we have a new form opening tag `<form>` and
    a form closing tag `</form>`. In between those tags you can see that our form,
    which was named `annotationform` is now set as the `name` and the `id` of the
    form.
  prefs: []
  type: TYPE_NORMAL
- en: Some developers find this way of defining a form a bit overdone, because in
    the end it might seem that we are not adding a lot of usability, which in all
    fairness is a bit true. It all depends on the situation when something is better
    than other methods, but in all fairness it is a pretty slick way of defining forms!
  prefs: []
  type: TYPE_NORMAL
- en: Adding elements to the form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have set up the forms in the same way as the previous method then we have
    two ways of defining elements to the form. The first one will be the normal method
    of defining a form, which is an extension of `Zend\Form\Form`, just like the form
    example in the *How to do it...* section, and the annotation form of it, like
    the second example of an `AnnotationForm` in the *How to do it...* section.
  prefs: []
  type: TYPE_NORMAL
- en: The first example assumes that we are defining `__construct()` in a form that
    has been extended from `Zend\Form\Form`. What it does is call the `add()` method
    of `Zend\Form\Form` where we give the method an array of methods (yes, you can
    just as well create the whole form in a configuration file!).
  prefs: []
  type: TYPE_NORMAL
- en: It is as simple as that to add an element. Obviously, there are more elements
    available, and all of them have their own options and attributes, but we won't
    go into all of those as it would be way too long to discuss.
  prefs: []
  type: TYPE_NORMAL
- en: Adding elements to an annotated form is both easy and complicated. It is easy
    because in the most basic idea it only requires you to add a property to the class,
    which is simple enough. But if you want to go further than that, and add validations
    or filters, it requires you to add Annotation comments above the property.
  prefs: []
  type: TYPE_NORMAL
- en: As we could see in the preceding example, the way of defining elements through
    annotation isn't particularly difficult, it is just that we need to know which
    `@Annotation` to use. When setting attributes/options or sometimes other annotations,
    we will see the two curly braces `{}`, which represent an object in JavaScript
    and is used for JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, it isn't that difficult, but it requires us to have a bit of a different
    train of thought.
  prefs: []
  type: TYPE_NORMAL
- en: Forms, filtering, and validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A normal form that extends from `Zend\Form\Form` creates the elements by looking
    into `$this->elements` of the form, where all the form elements will be stored.
    Once it triggers the form renderer, all these elements will be decorated into
    real HTML tags. In an annotated form the process of transforming the class into
    HTML requires one more step, which is put simply transforming the annotated class
    into a frame that looks like a `Zend\Form\Form` extended class. That way we can
    use the build form from the annotated class just like a real form object.
  prefs: []
  type: TYPE_NORMAL
- en: When we post the form (you don't necessarily need to specify a post as it is
    already a `POST` by default), we let the form check if the values are correct,
    and more importantly we want to make sure that we are getting the values that
    we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Not only is validating forms important security wise but also filtering wise.
    If we put multiple filters on our elements (for example, string trim and strip
    tags), we would like to have that all ready for us to use instead of using the
    filters afterwards again. Obviously, the bigger issue is having our application
    protected from malicious users, and to validate the input of the user.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the very last preceding code example, we first create the form
    and we will then look if the user tried posting the form. If this is true, we
    will set up our form validator that we created specifically for that form. We
    then assign the request data (this is what the user filled in our form) to the
    form. After we assigned the data to the form we call `isValid()` to see if the
    data is valid or not. If it is, we assign the filtered data with `getData()` to
    our sample model to save it.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will assign the form to the view again so we can display any validation
    errors that happened through the validation process. Easy!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also define a form solely through the configuration, this is called form
    creation by factory and we encourage you to see how that works, as it is also
    a great way of creating forms.
  prefs: []
  type: TYPE_NORMAL
- en: To add some form security, one would be looking to add a `Zend\Form\Element\Csrf`
    element to our form, which looks at the source of the form to make sure no Cross-site
    Request Forgeries (CSRF) are done. This is a unique key that is added to the form
    that is used in the validation process. We would even go as far as to say that
    it is recommended to create a base form that has the CSRF element already added
    to it, so that we don't have to worry that we forgot or not, as long as we extend
    from the base form.
  prefs: []
  type: TYPE_NORMAL
- en: Using form view helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of the Zend Framework 1 Decorators (where it was a key in the creation
    and rendering of forms) we now know in Zend Framework 2 that it is better to use
    different view helpers and renderers to render the forms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: View helpers are very important tools to a developer, here we will discuss how
    to use them in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The rendered output of this would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: FormButton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now look at the rendered output, it should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: FormCaptcha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: FormCheckbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The rendered output would be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: FormCollection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This has the incredibly vague rendered output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This is enough for the collection to know what it needs to do, as in this case
    it holds the template of our `input` field.
  prefs: []
  type: TYPE_NORMAL
- en: FormColor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: FormDate, FormDateTime, and FormDateTimeLocal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: FormEmail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: FormFile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: FormHidden
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: FormImage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: FormInput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: FormLabel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: FormElementErrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The form element view helpers are a great way to render your form elements.
    In the previous version of Zend Framework this was done by form decorators, which
    were different to view helpers in ZF2 because they were used before the form reached
    the view script. The way it now works is that a form is still in its original
    state when it reaches the view script, which means we can fully manipulate the
    form to the way our layout looks. This creates a more dynamic output where we
    can define layouts per view script (something that was very hard to achieve in
    ZF1).
  prefs: []
  type: TYPE_NORMAL
- en: Because the form element view helpers are in charge of the rendering of the
    element in the view script, they can also be more in touch with the requirements
    of the developer. All in all, this is a great way to create a form that looks
    and works brilliantly.
  prefs: []
  type: TYPE_NORMAL
- en: Various view helpers and/or renderers can be used in order to create the perfect
    layout. There are a lot of standard view helpers that can be used in order to
    mark up your form.
  prefs: []
  type: TYPE_NORMAL
- en: Form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This helper renders your `<form />` tag, which can—if wanted—pull some attributes
    out of our `Zend\Form` object to use as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The attributes the form helper (by parsing the form) supports is `accept-charset`,
    `action`, `autocomplete`, `enctype`, `method`, `name`, `novalidate`, and `target`.
  prefs: []
  type: TYPE_NORMAL
- en: FormButton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can render our `<button />` tag with this helper, and obviously it can work
    in different ways, just like we want it to. It can either render the button through
    `Zend\Form\Element` or do it in a three-step way, where we can make up our own
    stuff in between.
  prefs: []
  type: TYPE_NORMAL
- en: The attributes the `FormButton` helper (by parsing the `Element`) supports are
    `name`, `autofocus`, `disabled`, `form`, `formaction`, `formenctype`, `formmethod`,
    `formnovalidate`, `formtarget`, `type`, and `value`.
  prefs: []
  type: TYPE_NORMAL
- en: FormCaptcha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Captcha` is used to prevent users from submitting forms without validating
    that they are human. Occasionally, we will get forms that will be spammed with
    ridiculous amounts of spam. That is why we, nowadays, have this little tool that
    generates a small image, which is an automated Turing test to find out if we are
    human or not.'
  prefs: []
  type: TYPE_NORMAL
- en: This helper can only be rendered through a `Zend\Element\Captcha` object, so
    there is not a lot to further explain on that.
  prefs: []
  type: TYPE_NORMAL
- en: FormCheckbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helper will render two elements by default:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<input />` element of type `checkbox`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `<input />` element of type `hidden`, with the value of the checkbox state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates the hidden input because a checkbox will not get posted if it is
    left unchecked, so we can imagine the consequences of form validation when an
    element is not there. That is why there is always a hidden field that is rendered
    before the checkbox element to make sure at least something is posted.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the checkbox element has some other cool options such as using a hidden
    field. For the developers out there that have any experience with checkboxes,
    they can sigh in relief as an unchecked checkbox is never posted by the browser
    in a form.
  prefs: []
  type: TYPE_NORMAL
- en: That is why a hidden field is placed before the checkbox element with the same
    name as the checkbox element, but filled with the unchecked value. This means
    that whenever the checkbox isn't checked, it will send the hidden field's value,
    otherwise the checkbox checked value would override that.
  prefs: []
  type: TYPE_NORMAL
- en: FormCollection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This helper is used, for example, when we want to render a complete form in
    one instance. If we use a `Zend\Form` object as parameter to this helper, we will
    get a completely rendered HTML form returned. If we use `Zend\Form\Element\Collection`
    on the other hand, we will get a fully rendered HTML collection back, with template
    if required.
  prefs: []
  type: TYPE_NORMAL
- en: FormColor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a HTML5 element, which is a `<input />` element with the type color.
    It creates an input form in which the user can select a color, or when used in
    a non HTML5 compatible browsers, it will simply display an input field.
  prefs: []
  type: TYPE_NORMAL
- en: FormDate, FormDateTime, and FormDateTimeLocal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another HTML5 element that outputs an `<input />` element with the type `date`
    is `FormDate`. In an HTML5 compatible browser it will usually output a calendar
    dropdown where the user can select the date they like, in a non-compatible browser
    it again just shows a text input field.
  prefs: []
  type: TYPE_NORMAL
- en: FormEmail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This HTML5 field is a nice field that ships in an HTML5 compatible browser with
    a nifty validation which checks if the typed value is an actual e-mail address
    or not. It is best not to rely on that too much and still validate the values
    ourselves just in case the user isn't using an HTML5 compatible browser.
  prefs: []
  type: TYPE_NORMAL
- en: The attributes that can be set on a `FormEmail` are `name`, `autocomplete`,
    `autofocus`, `disabled`, `form`, `list`, `maxlength`, `multiple`, `pattern`, `placeholder`,
    `readonly`, `required`, `size`, `type`, and `value`.
  prefs: []
  type: TYPE_NORMAL
- en: FormFile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `FormFile` helper is helpful for displaying an `<input />` with the type
    file. Not only does it show the input element, but it can also prepare the element
    for any upload progress we want to monitor. Like many other element helpers, this
    helper also supports the attributes: `name`, `accept`, `autofocus`, `disabled`,
    `form`, `multiple`, `required`, `type`, and `value`.'
  prefs: []
  type: TYPE_NORMAL
- en: FormHidden
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hidden `<input />` field is handy for posting information to the application
    without requiring user input. Nothing fancy about this helper, but it does support
    the `name`, `disabled`, `form`, `type`, and `value` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: FormImage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FormImage` `<input />` tag is mainly used as a replacement for a **Submit**
    button in a form. It is simple to use and only requires the `src` attribute (the
    location of the image). It also supports the `name`, `alt` (recommended), `autofocus`,
    `disabled`, `form`, `formaction`, `formenctype`, `formmethod`, `formnovalidate`,
    `formtarget`, `height`, `type`, and `width` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: FormInput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `FormInput` is a simple `<input />` element that renders an element for us
    by naturally selecting the type. Not necessarily recommended to use this one as
    it is pretty generic and would have its flaws (for example, when it isn't an `input`
    tag that is required).
  prefs: []
  type: TYPE_NORMAL
- en: FormLabel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to display a `<label />`, then using this helper is the perfect thing,
    as we can declare the position of the label (`FormLabel::APPEND` or `FormLabel::PREPEND`)
    and we can also add the content of the label. It only supports `for` and `form`
    as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: FormElementErrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This helper is used for displaying form validation errors. By default, this
    will be displayed underneath the form element, but with this helper we can customize
    the display of this error a bit more.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom form element and form view helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we keep on developing in Zend Framework 2, and our application keeps on
    growing, the more it is necessary to stop copy-pasting and just replace all those
    replicating bits by a class that simply outputs what we want. In ZF2 this can
    be done easily through view helpers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we'll create our own form element, and corresponding view helper
    to display it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All we have to do is set the type of the element, and that''s it. We do the
    following alterations to the `/module/Application/src/Application/Form/Element/Video.php`
    file, let''s take a look on what the code should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As we can see this is a pretty easy job to do, and we have now successfully
    created a new element to use in ZF2.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new view helper
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The view helper will create the HTML element that we just declared, so let''s
    take a look on how the view helper should look like in the `/module/Application/src/Application/Form/View/Helper/FormVideo.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: First, we added the attributes that this element can have, this is necessary
    to make sure we are not declaring attributes that don't exist (although that would
    in most cases not be that much of a problem).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `__invoke` method is created so that we don't have to initialize
    the class before we want to call the view helper. This way we can use it in the
    view scripts by using `formVideo()`, instead of instantiating a new `FormVideo()`
    first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `createSourcesString` method gets the string or array containing all our
    video URLs. As said this can be either a string or an array, which in the last
    case will just iterate through the array and output the string with the source
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Adding view helper to the configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we need to add the view helper to the module configuration to make sure
    the view helper can be found in the view scripts. We can simply do this by adding
    another method to our `/module/Application/Module.php` as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We didn't put the whole class in there, as that would be too much useless information
    for this example. The idea however is that we can simply put this method in our
    `Module.php` to make sure our view helper will be located.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the new element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We do the following alterations to the `/module/Application/view/application/index/video.phtml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We have now created a new form element, and a new form view helper!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating the element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First of all we need to create the new element before we work with it within
    ZF2\. This can be easily done by extending from the base element of `Zend\Form\Element`.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is the view helper as we want to make sure that our element is also
    rendered correctly to the user. As our element is not of any existing type (otherwise
    this would be a very boring recipe) we need to make sure that we create a view
    helper for ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: The last bit of our code is creating the actual render method, which—as the
    name tells us—renders the actual HTML object.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we want to trigger an exception whenever the `src` has not been
    defined, as without it, this would be a pretty useless HTML element. Now, we have
    everything set up, we can use the element either in a form, or on its own in the
    view script. In the last example, we just declared the form element in the view
    script to show how it can work; however using logic in the view script is not
    something that is advised to do as we want to keep the view as clean as possible,
    and only output code with it. Anything remotely unrelated to HTML or the output
    to the user should go in the controller or models.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What we did is create a new form element, which was supposed to be a `<video
    />` tag, a new HTML5 element. This video tag can have several attributes, one
    of it being an `src`. The `src` in this case tells the video element where we
    can find the video that we want to play.
  prefs: []
  type: TYPE_NORMAL
- en: A good reason to create our own view helper would be if we have a piece of HTML
    that is constantly recurring throughout our application (think of a tool tip or
    a help text), and which only needs to be copy-pasted and changed some properties
    for it to work. To save us time and space (code and readability wise), we would
    transform this into a simple view helper class that replicates the exact object,
    which we can transform by adding options to it.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we simply use the `formVideo` view helper in the view script to
    actually render the object for us, which takes a bit of a load off our hands by
    rendering a piece of code that is easy to replicate.
  prefs: []
  type: TYPE_NORMAL
