- en: Chapter 3. Handling and Decorating Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章. 处理和装饰表单
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating forms
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表单
- en: Using form view helpers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单视图辅助工具
- en: Creating a custom form element and form view helper
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义表单元素和表单视图辅助工具
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter we will be discussing forms, and specifically the generation
    and manipulation of them. Forms are a very important part in the communication
    with the user, as it is one of the ways to receive information from the user.
    It is also a great way to use forms to do a lot of validation of the elements
    by combining JavaScript and PHP. If we then can make it so that it looks great
    as well, why would we not do that?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论表单，特别是它们的生成和处理。表单在与用户通信中起着非常重要的作用，因为它是从用户那里接收信息的一种方式。同时，结合 JavaScript
    和 PHP，使用表单对元素进行大量验证也是一个很好的方法。如果我们还能让它看起来很棒，我们为什么不这样做呢？
- en: Creating forms
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单
- en: This recipe involves different ways of creating forms, and after that we will
    talk about how elements are added to the form. In the last part of this recipe
    we will discuss how to validate forms, and the best way of accomplishing this.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方涉及创建表单的不同方法，然后我们将讨论如何将元素添加到表单中。在这个配方的最后部分，我们将讨论如何验证表单，以及完成此任务的最佳方式。
- en: Getting ready…
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: A basic ZF2 skeleton application, with at least one module where we can work
    in, is necessary to create and output forms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和输出表单所需的至少有一个模块的基本 ZF2 骨架应用程序是必要的。
- en: 'If we want to use form annotations, we also require `Doctrine\Common` to be
    initiated in the skeleton as it has the parsing engine to parse the annotations.
    If we are using composer (which comes with the Zend Framework 2 skeleton) we can
    simply update our `composer.json` by adding the following line to the required
    section:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用表单注解，我们也需要在骨架中初始化 `Doctrine\Common`，因为它有解析注解的解析引擎。如果我们使用 composer（它包含在
    Zend Framework 2 骨架中），我们可以简单地更新我们的 `composer.json` 文件，在所需部分添加以下行：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make sure the comma on the end of the line is only there when there are still
    lines beneath it. If there are no lines coming after this line except for a closing
    brace, please refrain from adding the comma as it will fail the process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确保行尾的逗号只有在还有行在其下方时才存在。如果除了一个闭合括号之外没有其他行跟在此行之后，请勿添加逗号，因为它将导致过程失败。
- en: 'Next is to run the composer update to make sure it gets installed, by using
    a command like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是运行 composer update 命令以确保其被安装，可以使用以下类似命令：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we are not using a composer we are best off looking at the Doctrine project
    website ([http://www.doctrine-project.org/projects/common.html](http://www.doctrine-project.org/projects/common.html))
    to find more information on how to install this.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用 composer，我们最好查看 Doctrine 项目网站 ([http://www.doctrine-project.org/projects/common.html](http://www.doctrine-project.org/projects/common.html))
    以获取有关如何安装此项目的更多信息。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We'll first be talking about creating forms and elements, after that we'll talk
    about adding filters and validations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将讨论创建表单和元素，然后我们将讨论添加过滤器和验证。
- en: Creating a basic form
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本表单
- en: 'A form always needs to be one of the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表单始终需要是以下之一：
- en: A class that is extended from the `Zend\Form` class
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `Zend\Form` 类扩展的类
- en: A class that is using the `Zend\Form\Annotation` defining method
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Zend\Form\Annotation` 定义方法的类
- en: Defining a form that is extended from Zend\Form
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个从 Zend\Form 扩展的表单
- en: We will start with defining a form from the first method, by extending it from
    the `Zend\Form` class. This is probably the easiest way to begin if we are new
    in Zend Framework 2 (ZF2).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从定义第一个方法开始，通过从 `Zend\Form` 类扩展它。如果我们是 Zend Framework 2 (ZF2) 的新手，这可能是开始的最简单方法。
- en: The basic idea is that our form class should extend from the `Zend\Form` class,
    and has at least a `__construct` method that defines our elements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是我们的表单类应该从 `Zend\Form` 类扩展，并且至少有一个 `__construct` 方法来定义我们的元素。
- en: 'Let''s take a look at the following example in the `/module/Application/src/Application/Form/NormalForm.php`
    file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `/module/Application/src/Application/Form/NormalForm.php` 文件中的以下示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we now go to our controller, say `IndexController` of the `Application`
    module we can output the form to View by doing the following in file `/module/Application/src/Application/Controller/IndexController.php`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在去我们的控制器，比如 `Application` 模块的 `IndexController`，我们可以通过在文件 `/module/Application/src/Application/Controller/IndexController.php`
    中执行以下操作将表单输出到视图：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we now take a look at our view script, we can see that we have the variable
    available. We will now output the form actually to the screen by the following
    example (`/module/Application/view/application/index/index.phtml`):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的视图脚本，我们可以看到我们有一个可用的变量。现在，我们将通过以下示例将表单实际输出到屏幕（文件`/module/Application/view/application/index/index.phtml`）：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of this code example will be somewhat like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例的输出将类似于以下内容：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This tells us that the instantiating went well, and that it is fully functional.
    As we also can see the name that we defined (`"normalform"`) is coming back as
    the `name` and `id` of the form.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们实例化进行得很顺利，并且它是完全功能的。正如我们也可以看到，我们定义的名称（`"normalform"`）正在作为表单的`name`和`id`返回。
- en: Defining a form that uses the Zend\Form\Annotation
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个使用 Zend\Form\Annotation 的表单
- en: 'Let''s take a look at an empty form (`/module/Application/src/Application/Form/AnnotationForm.php`)
    in an annotated form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个空表单（`/module/Application/src/Application/Form/AnnotationForm.php`）在注解表单中的样子：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we now want to begin outputting our form to our user we can do that in a
    similar way to the normal form (luckily). The first thing we need to do for that
    is actually assigning the form to the View (`/module/Application/src/Application/Controller/IndexController.php`)
    again, which is the only thing that is a bit different to the normal form creation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想开始将表单输出给用户，我们可以用类似正常表单的方式来做（幸运的是）。为此，我们首先需要做的是实际上再次将表单分配给视图（`/module/Application/src/Application/Controller/IndexController.php`），这是与正常表单创建略有不同的一点。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we now want to output the form to our View (file `/module/Application/view/application/index/index.phtml`),
    we can simply do the same as we did with the other form:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想将表单输出到我们的视图（文件`/module/Application/view/application/index/index.phtml`），我们可以简单地像处理其他表单一样做：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The HTML output of this example would result in the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的HTML输出将产生以下内容：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding elements to a Zend\Form extend form
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 Zend\Form 扩展表单添加元素
- en: 'Creating elements in this kind of form is pretty simple, let''s see what it
    looks like with a short example (file `/module/Application/src/Form/NormalForm.php`):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种表单中创建元素相当简单，让我们通过一个简短的例子来看看它是什么样子（文件`/module/Application/src/Form/NormalForm.php`）：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Adding elements to an annotated form
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向注解表单添加元素
- en: 'Let''s take an example of an annotated element creation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个注解元素创建的例子为例：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Validating form input
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证表单输入
- en: One of the most important things of having forms is to use the data in our application,
    because why else would we have forms to begin with?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有表单最重要的一个方面是使用我们应用程序中的数据，因为如果不是为了使用这些数据，我们最初为什么要创建表单呢？
- en: Let's go and create a simple model (`/module/Application/src/Application/Model/SampleModel.php`)
    that we can use for an example later on, but has absolutely no other use for this
    recipe at all.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去创建一个简单的模型（`/module/Application/src/Application/Model/SampleModel.php`），稍后我们可以用它作为例子，但这个模型对这道菜谱来说完全没有其他用途。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see this model doesn't do anything at all, but we need it later on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个模型根本什么都没做，但我们稍后还需要它。
- en: 'We have now created our own form extension, so it is time to create our `InputFilter`
    class which will filter and validate the values that we are going to put in the
    form, and attach to our form through `setInputFilter` later on (we''ll edit the
    file `/module/Application/src/Application/Form/NormalFormValidator.php`):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了自己的表单扩展，所以现在是时候创建我们的`InputFilter`类了，这个类将过滤和验证我们将要放入表单中的值，稍后通过`setInputFilter`将其附加到表单上（我们将编辑文件`/module/Application/src/Application/Form/NormalFormValidator.php`）：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have now started creating our input filter class, and already created one
    of the two required methods of `InputFilterAwareInterface`. Now, let''s continue
    further to the point where we implement the second method, and construct the actual
    filter:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经开始创建我们的输入过滤器类，并且已经创建了`InputFilterAwareInterface`的两个必需方法之一。现在，让我们继续到实现第二个方法，并构建实际的过滤器：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We just added a simple validator that makes sure the length of the string is
    not smaller than 5 and not longer than 50 characters, and of course in our case
    we also want `UTF-8` characters, but obviously we can either drop this or change
    the character set if we need to.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了一个简单的验证器，确保字符串的长度不小于5个字符，也不大于50个字符，当然，在我们的案例中，我们还想使用`UTF-8`字符，但显然，如果我们需要的话，我们可以取消选择这个选项或更改字符集。
- en: We'll add a simple password field validator and filter now, but the next one
    after that checks if the `repeat_password` field is identical in value to our
    password field. Personally, I really like that validator because of its simplicity
    and yet being powerful enough to take away some manual labor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个简单的密码字段验证器和过滤器，但下一个验证器将检查`repeat_password`字段是否与密码字段值相同。我个人非常喜欢这个验证器，因为它简单而且足够强大，可以减少一些手动劳动。
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After that nifty validator we will now add a simple e-mail validator, which
    will also have a not empty validator that checks if the field is empty or not.
    We will use the following code for e-mail validation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个巧妙的验证器之后，我们现在将添加一个简单的电子邮件验证器，它也将有一个非空验证器，用于检查字段是否为空。我们将使用以下代码进行电子邮件验证：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Even dates are not a problem for validation, and we can make it even this good
    that we are only allowed to select ranges of dates as well, which in some cases
    (for example 18+ websites) is nice to have.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是日期验证也不是问题，我们甚至可以做得更好，只允许我们选择日期范围，这在某些情况下（例如18+网站）是非常有用的。
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s jump in immediately and take a look at a simple example that uses our
    `normalform` like before (`/module/Application/src/Application/Controller/IndexController.php`):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即开始，看看一个简单的例子，它使用我们的`normalform`，就像之前一样（`/module/Application/src/Application/Controller/IndexController.php`）：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Let's understand how we achieved what we achieved.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解我们是如何实现我们所实现的。
- en: Setting up a basic form
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置基本表单
- en: The preceding first example, creating a form class that extended from `Zend\Form`
    is the bare minimum to set a form up. As we can see, this form doesn't have any
    elements or properties set up at the moment, the only thing it defines is the
    `name/id` of the DOM element of the form object. What we did after that is first
    initialize the form, and then assign the `ViewModel` to it as that will be the
    View that is going to be outputted to the screen.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的第一例，创建一个从`Zend\Form`扩展的表单类，这是设置表单的最基本要求。正如我们所看到的，这个表单目前没有任何元素或属性设置，它唯一定义的是表单对象的DOM元素的`name/id`。在那之后我们所做的是首先初始化表单，然后将`ViewModel`分配给它，因为这将是要输出到屏幕的视图。
- en: The only thing that we did in the example is output the `<form>` tag first—with
    all its properties, such as `method`, `action`, and `etcetera`. The second thing
    is that we do output all the elements in the form (which in this case are none),
    and as a last thing that we do is we output the end form tag `</form>`, which
    now ends our form declaration.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在例子中我们所做的唯一一件事是首先输出`<form>`标签——包括它的所有属性，如`method`、`action`等。第二件事是我们确实输出了表单中的所有元素（在这个例子中是没有的），最后我们输出表单结束标签`</form>`，这现在结束了表单声明。
- en: If we open up a browser and look at our code, we will see no much different
    than we saw before, probably an empty page. However, when we open out the source
    code of that page (in Firefox this is right-clicking on the page and clicking
    on **View Page Source**) we see that we actually did instantiate the form properly
    in HTML.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开浏览器查看我们的代码，我们将看到与之前没有太大的不同，可能是一个空页面。然而，当我们打开该页面的源代码（在Firefox中，这是在页面上右键单击并点击**查看页面源代码**）时，我们看到我们实际上已经正确地实例化了表单，在HTML中。
- en: Our basic form instantiation is now concluded, if we want a more advanced, but
    more attractive as well, way of defining our form, we should continue reading
    the next bit as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本表单实例化现在已经完成，如果我们想要一个更高级但同时也更吸引人的定义表单的方式，我们应该继续阅读下一部分。
- en: Setting up an annotated form
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置带注释的表单
- en: Defining an annotated form is a bit different than a normal form, the main difference
    being that an annotated form is just a class with properties, which isn't extended
    from any other class, while the other method requires us to extend from the `Zend\Form`
    class. In the preceding example, we first created a very simple and empty form
    using the annotation method. We can also see that we require a Hydrator to make
    the Annotation Engine understand what we are on about, but we do not need to extend
    the class, so we are free to do what we want there.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 定义带注释的表单与普通表单略有不同，主要区别在于带注释的表单只是一个具有属性的类，它没有从任何其他类扩展，而另一种方法要求我们扩展`Zend\Form`类。在先前的例子中，我们首先使用注释方法创建了一个非常简单且为空的表单。我们还可以看到，我们需要一个Hydrator来让注释引擎理解我们在说什么，但我们不需要扩展类，所以我们可以在那里自由地做我们想做的事情。
- en: The only thing we should be wary about is that every element that we require
    in our form, should have the property access set to public, otherwise technically
    the Annotation Engine can't pick it up. We don't have to make getters/setters
    for the properties (unless we want to use it for ourselves), as the Annotation
    Engine just uses the public properties directly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一需要小心的是，我们表单中需要的每个元素，都应该将属性访问设置为public，否则从技术上讲，注解引擎无法识别它。我们不需要为属性创建getter/setter（除非我们想为自己使用它），因为注解引擎直接使用公共属性。
- en: Using the form in a controller is slightly different then a normal form, because
    when we would just instantiate the class and use that as a form it would end up
    as an error. The class needs to go through `AnnotationBuilder` first to actually
    build up the form. That is why we need to do `createForm()`, which then outputs
    a form.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中使用表单与正常表单略有不同，因为如果我们只是实例化类并使用它作为表单，最终会出错。类需要首先通过`AnnotationBuilder`来实际构建表单。这就是为什么我们需要执行`createForm()`，然后输出一个表单。
- en: This will output nothing visible, but if we then look at the page source code
    (in Firefox this is achieved by right-clicking on the page and then clicking on
    **View Page Source**) we see that we have a new form opening tag `<form>` and
    a form closing tag `</form>`. In between those tags you can see that our form,
    which was named `annotationform` is now set as the `name` and the `id` of the
    form.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将不会输出任何可见的内容，但如果我们查看页面源代码（在Firefox中，这是通过右键单击页面然后点击**查看页面源代码**来实现的），我们会看到我们有一个新的表单开启标签`<form>`和一个表单结束标签`</form>`。在这些标签之间，你可以看到我们的表单，名为`annotationform`，现在被设置为表单的`name`和`id`。
- en: Some developers find this way of defining a form a bit overdone, because in
    the end it might seem that we are not adding a lot of usability, which in all
    fairness is a bit true. It all depends on the situation when something is better
    than other methods, but in all fairness it is a pretty slick way of defining forms!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者认为这种定义表单的方式有点过度，因为最终可能看起来我们没有增加很多可用性，这在所有公平的讨论中确实有点道理。这完全取决于具体情况，某种方法是否比其他方法更好，但公平地说，这是一种相当流畅的定义表单的方式！
- en: Adding elements to the form
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向表单添加元素
- en: If we have set up the forms in the same way as the previous method then we have
    two ways of defining elements to the form. The first one will be the normal method
    of defining a form, which is an extension of `Zend\Form\Form`, just like the form
    example in the *How to do it...* section, and the annotation form of it, like
    the second example of an `AnnotationForm` in the *How to do it...* section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以与之前相同的方式设置了表单，那么我们有两种定义元素到表单的方法。第一种将是定义表单的正常方法，它是对`Zend\Form\Form`的扩展，就像在*如何做...*部分中的表单示例一样，以及它的注解表单，就像在*如何做...*部分中的`AnnotationForm`第二个示例。
- en: The first example assumes that we are defining `__construct()` in a form that
    has been extended from `Zend\Form\Form`. What it does is call the `add()` method
    of `Zend\Form\Form` where we give the method an array of methods (yes, you can
    just as well create the whole form in a configuration file!).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例假设我们在扩展自`Zend\Form\Form`的表单中定义了`__construct()`。它所做的就是调用`Zend\Form\Form`的`add()`方法，我们向该方法提供一个方法数组（是的，你同样可以在配置文件中创建整个表单！）。
- en: It is as simple as that to add an element. Obviously, there are more elements
    available, and all of them have their own options and attributes, but we won't
    go into all of those as it would be way too long to discuss.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个元素就像那样简单。显然，还有更多的元素可供选择，它们都有自己的选项和属性，但我们不会深入讨论所有这些，因为讨论起来会非常冗长。
- en: Adding elements to an annotated form is both easy and complicated. It is easy
    because in the most basic idea it only requires you to add a property to the class,
    which is simple enough. But if you want to go further than that, and add validations
    or filters, it requires you to add Annotation comments above the property.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向注解表单添加元素既简单又复杂。说它简单是因为在最基本的概念中，它只需要你向类中添加一个属性，这已经足够简单了。但如果你想做得更多，添加验证或过滤器，你需要在属性上方添加注解注释。
- en: As we could see in the preceding example, the way of defining elements through
    annotation isn't particularly difficult, it is just that we need to know which
    `@Annotation` to use. When setting attributes/options or sometimes other annotations,
    we will see the two curly braces `{}`, which represent an object in JavaScript
    and is used for JSON.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的例子中所看到的，通过注解定义元素的方式并不特别困难，只是我们需要知道使用哪个`@Annotation`。当设置属性/选项或有时其他注解时，我们会看到两个花括号`{}`，这代表JavaScript中的一个对象，并用于JSON。
- en: Obviously, it isn't that difficult, but it requires us to have a bit of a different
    train of thought.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这并不困难，但需要我们稍微改变一下思维方式。
- en: Forms, filtering, and validation
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单、过滤和验证
- en: A normal form that extends from `Zend\Form\Form` creates the elements by looking
    into `$this->elements` of the form, where all the form elements will be stored.
    Once it triggers the form renderer, all these elements will be decorated into
    real HTML tags. In an annotated form the process of transforming the class into
    HTML requires one more step, which is put simply transforming the annotated class
    into a frame that looks like a `Zend\Form\Form` extended class. That way we can
    use the build form from the annotated class just like a real form object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从`Zend\Form\Form`扩展的普通表单通过查看表单的`$this->elements`来创建元素，其中所有表单元素都将被存储。一旦触发表单渲染器，所有这些元素都将装饰成真实的HTML标签。在注解表单中，将类转换为HTML的过程需要额外一步，简单来说就是将注解类转换成一个类似于`Zend\Form\Form`扩展类的框架。这样我们就可以像使用真实表单对象一样使用从注解类构建的表单。
- en: When we post the form (you don't necessarily need to specify a post as it is
    already a `POST` by default), we let the form check if the values are correct,
    and more importantly we want to make sure that we are getting the values that
    we expect.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提交表单时（你不必一定指定一个POST，因为它默认已经是`POST`了），我们让表单检查值是否正确，更重要的是，我们想要确保我们得到的是我们预期的值。
- en: Not only is validating forms important security wise but also filtering wise.
    If we put multiple filters on our elements (for example, string trim and strip
    tags), we would like to have that all ready for us to use instead of using the
    filters afterwards again. Obviously, the bigger issue is having our application
    protected from malicious users, and to validate the input of the user.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅从安全角度验证表单很重要，从过滤角度也很重要。如果我们对我们的元素应用多个过滤器（例如，字符串修剪和去除标签），我们希望它们都为我们准备好了，而不是在之后再次使用这些过滤器。显然，更大的问题是保护我们的应用程序免受恶意用户的侵害，并验证用户的输入。
- en: As we can see in the very last preceding code example, we first create the form
    and we will then look if the user tried posting the form. If this is true, we
    will set up our form validator that we created specifically for that form. We
    then assign the request data (this is what the user filled in our form) to the
    form. After we assigned the data to the form we call `isValid()` to see if the
    data is valid or not. If it is, we assign the filtered data with `getData()` to
    our sample model to save it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在最后一个前面的代码示例中所看到的，我们首先创建表单，然后检查用户是否尝试提交表单。如果是这样，我们将设置我们为该表单创建的特定表单验证器。然后，我们将请求数据（这是用户填写我们的表单的内容）分配给表单。在将数据分配给表单后，我们调用`isValid()`来查看数据是否有效。如果是，我们使用`getData()`将过滤后的数据分配给我们的示例模型以保存它。
- en: Lastly, we will assign the form to the view again so we can display any validation
    errors that happened through the validation process. Easy!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将表单再次分配给视图，这样我们就可以显示在验证过程中发生的任何验证错误。很简单！
- en: There's more…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can also define a form solely through the configuration, this is called form
    creation by factory and we encourage you to see how that works, as it is also
    a great way of creating forms.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以仅通过配置来定义一个表单形式，这被称为通过工厂创建表单形式，我们鼓励您看看它是如何工作的，因为这同样是一种创建表单的极好方式。
- en: To add some form security, one would be looking to add a `Zend\Form\Element\Csrf`
    element to our form, which looks at the source of the form to make sure no Cross-site
    Request Forgeries (CSRF) are done. This is a unique key that is added to the form
    that is used in the validation process. We would even go as far as to say that
    it is recommended to create a base form that has the CSRF element already added
    to it, so that we don't have to worry that we forgot or not, as long as we extend
    from the base form.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加表单的安全性，人们可能会考虑向我们的表单中添加一个 `Zend\Form\Element\Csrf` 元素，该元素检查表单的来源以确保没有执行跨站请求伪造（CSRF）。这是一个添加到表单中的唯一密钥，用于验证过程。我们甚至会进一步说，建议创建一个已经添加了
    CSRF 元素的基础表单，这样我们就不必担心是否忘记了，只要我们扩展自基础表单即可。
- en: Using form view helpers
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用表单视图助手
- en: Instead of the Zend Framework 1 Decorators (where it was a key in the creation
    and rendering of forms) we now know in Zend Framework 2 that it is better to use
    different view helpers and renderers to render the forms.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Zend Framework 1 的装饰器（在表单的创建和渲染中是一个关键）不同，我们现在知道在 Zend Framework 2 中，使用不同的视图助手和渲染器来渲染表单会更好。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: View helpers are very important tools to a developer, here we will discuss how
    to use them in our code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 视图助手对于开发者来说是非常重要的工具，在这里我们将讨论如何在我们的代码中使用它们。
- en: Form
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Form
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The rendered output of this would be the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染出以下内容：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: FormButton
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormButton
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we now look at the rendered output, it should look like the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看渲染输出，它应该看起来像以下这样：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: FormCaptcha
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCaptcha
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: FormCheckbox
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCheckbox
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The rendered output would be something like the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染输出可能如下所示：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: FormCollection
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCollection
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This has the incredibly vague rendered output like the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染出如下极其模糊的输出：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is enough for the collection to know what it needs to do, as in this case
    it holds the template of our `input` field.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于集合了解它需要做什么已经足够了，就像在这个例子中，它持有我们的 `input` 字段的模板。
- en: FormColor
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormColor
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: FormDate, FormDateTime, and FormDateTimeLocal
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormDate, FormDateTime, 和 FormDateTimeLocal
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: FormEmail
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormEmail
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: FormFile
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormFile
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: FormHidden
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormHidden
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: FormImage
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormImage
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: FormInput
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormInput
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: FormLabel
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormLabel
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: FormElementErrors
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormElementErrors
- en: 'We do the following alterations to a view script called `example-viewscript.phtml`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对名为 `example-viewscript.phtml` 的视图脚本进行了以下修改：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works…
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The form element view helpers are a great way to render your form elements.
    In the previous version of Zend Framework this was done by form decorators, which
    were different to view helpers in ZF2 because they were used before the form reached
    the view script. The way it now works is that a form is still in its original
    state when it reaches the view script, which means we can fully manipulate the
    form to the way our layout looks. This creates a more dynamic output where we
    can define layouts per view script (something that was very hard to achieve in
    ZF1).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 表单元素视图助手是一种渲染表单元素的好方法。在 Zend Framework 的上一个版本中，这是通过表单装饰器完成的，这些装饰器与 ZF2 中的视图助手不同，因为它们是在表单到达视图脚本之前使用的。现在的工作方式是，当表单到达视图脚本时，它仍然处于其原始状态，这意味着我们可以完全操纵表单以符合我们的布局。这创建了一个更动态的输出，我们可以为每个视图脚本定义布局（这在
    ZF1 中非常难以实现）。
- en: Because the form element view helpers are in charge of the rendering of the
    element in the view script, they can also be more in touch with the requirements
    of the developer. All in all, this is a great way to create a form that looks
    and works brilliantly.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于表单元素视图助手负责在视图脚本中渲染元素，它们也可以更贴近开发者的需求。总的来说，这是一种创建外观和功能都出色的表单的绝佳方法。
- en: Various view helpers and/or renderers can be used in order to create the perfect
    layout. There are a lot of standard view helpers that can be used in order to
    mark up your form.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用各种视图助手和/或渲染器来创建完美的布局。有许多标准视图助手可以用来标记你的表单。
- en: Form
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Form
- en: This helper renders your `<form />` tag, which can—if wanted—pull some attributes
    out of our `Zend\Form` object to use as attributes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个助手渲染你的 `<form />` 标签，如果需要，可以从我们的 `Zend\Form` 对象中提取一些属性作为属性使用。
- en: The attributes the form helper (by parsing the form) supports is `accept-charset`,
    `action`, `autocomplete`, `enctype`, `method`, `name`, `novalidate`, and `target`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 表单助手（通过解析表单）支持的属性有 `accept-charset`、`action`、`autocomplete`、`enctype`、`method`、`name`、`novalidate`
    和 `target`。
- en: FormButton
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormButton
- en: We can render our `<button />` tag with this helper, and obviously it can work
    in different ways, just like we want it to. It can either render the button through
    `Zend\Form\Element` or do it in a three-step way, where we can make up our own
    stuff in between.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个助手来渲染 `<button />` 标签，显然它可以根据我们的需求以不同的方式工作。它可以通过 `Zend\Form\Element`
    来渲染按钮，或者以三步法来完成，其中我们可以在中间添加自己的内容。
- en: The attributes the `FormButton` helper (by parsing the `Element`) supports are
    `name`, `autofocus`, `disabled`, `form`, `formaction`, `formenctype`, `formmethod`,
    `formnovalidate`, `formtarget`, `type`, and `value`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormButton` 助手（通过解析 `Element`）支持的属性有 `name`、`autofocus`、`disabled`、`form`、`formaction`、`formenctype`、`formmethod`、`formnovalidate`、`formtarget`、`type`
    和 `value`。'
- en: FormCaptcha
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCaptcha
- en: '`Captcha` is used to prevent users from submitting forms without validating
    that they are human. Occasionally, we will get forms that will be spammed with
    ridiculous amounts of spam. That is why we, nowadays, have this little tool that
    generates a small image, which is an automated Turing test to find out if we are
    human or not.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`Captcha` 用于防止用户在不验证其为人类的情况下提交表单。偶尔，我们会收到被大量垃圾邮件填满的表单。这就是为什么我们现在有了这个小工具，它可以生成一个小图像，这是一个自动化的图灵测试，用来确定我们是否是人类。'
- en: This helper can only be rendered through a `Zend\Element\Captcha` object, so
    there is not a lot to further explain on that.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个助手只能通过 `Zend\Element\Captcha` 对象来渲染，所以在这方面没有太多可以进一步解释的。
- en: FormCheckbox
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCheckbox
- en: 'This helper will render two elements by default:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个助手将渲染两个元素：
- en: The `<input />` element of type `checkbox`
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型为 `checkbox` 的 `<input />` 元素
- en: An `<input />` element of type `hidden`, with the value of the checkbox state
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个类型为 `hidden` 的 `<input />` 元素，其值为复选框状态
- en: It creates the hidden input because a checkbox will not get posted if it is
    left unchecked, so we can imagine the consequences of form validation when an
    element is not there. That is why there is always a hidden field that is rendered
    before the checkbox element to make sure at least something is posted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建隐藏输入，因为如果复选框未被选中，则不会提交，所以我们可以想象当元素不存在时表单验证的后果。这就是为什么总是在复选框元素之前渲染一个隐藏字段，以确保至少有某些内容被提交。
- en: Also, the checkbox element has some other cool options such as using a hidden
    field. For the developers out there that have any experience with checkboxes,
    they can sigh in relief as an unchecked checkbox is never posted by the browser
    in a form.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，复选框元素还有一些其他酷炫的选项，例如使用隐藏字段。对于那些有复选框经验的开发者来说，他们可以松一口气，因为未选中的复选框永远不会在表单中由浏览器提交。
- en: That is why a hidden field is placed before the checkbox element with the same
    name as the checkbox element, but filled with the unchecked value. This means
    that whenever the checkbox isn't checked, it will send the hidden field's value,
    otherwise the checkbox checked value would override that.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在复选框元素之前放置了一个隐藏字段，其名称与复选框元素相同，但填充了未选中的值。这意味着每当复选框未选中时，它将发送隐藏字段的值，否则复选框的选中值将覆盖它。
- en: FormCollection
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormCollection
- en: This helper is used, for example, when we want to render a complete form in
    one instance. If we use a `Zend\Form` object as parameter to this helper, we will
    get a completely rendered HTML form returned. If we use `Zend\Form\Element\Collection`
    on the other hand, we will get a fully rendered HTML collection back, with template
    if required.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助器在例如我们想要在一个实例中渲染一个完整的表单时使用。如果我们使用`Zend\Form`对象作为此辅助器的参数，我们将得到一个完全渲染的HTML表单返回。如果我们使用`Zend\Form\Element\Collection`，另一方面，我们将得到一个完全渲染的HTML集合返回，如果需要，还包括模板。
- en: FormColor
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormColor
- en: This is a HTML5 element, which is a `<input />` element with the type color.
    It creates an input form in which the user can select a color, or when used in
    a non HTML5 compatible browsers, it will simply display an input field.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个HTML5元素，它是一个具有类型color的`<input />`元素。它创建一个用户可以选择颜色的输入表单，或者当在非HTML5兼容的浏览器中使用时，它将简单地显示一个输入字段。
- en: FormDate, FormDateTime, and FormDateTimeLocal
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormDate、FormDateTime和FormDateTimeLocal
- en: Another HTML5 element that outputs an `<input />` element with the type `date`
    is `FormDate`. In an HTML5 compatible browser it will usually output a calendar
    dropdown where the user can select the date they like, in a non-compatible browser
    it again just shows a text input field.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个输出具有类型`date`的`<input />`元素的HTML5元素是`FormDate`。在HTML5兼容的浏览器中，它通常会输出一个日历下拉菜单，用户可以选择他们喜欢的日期；在非兼容的浏览器中，它再次只显示一个文本输入字段。
- en: FormEmail
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormEmail
- en: This HTML5 field is a nice field that ships in an HTML5 compatible browser with
    a nifty validation which checks if the typed value is an actual e-mail address
    or not. It is best not to rely on that too much and still validate the values
    ourselves just in case the user isn't using an HTML5 compatible browser.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML5字段是一个很好的字段，它随HTML5兼容的浏览器一起提供，具有巧妙的验证功能，可以检查输入的值是否为实际的电子邮件地址。最好不要过于依赖它，我们仍然需要自行验证值，以防用户没有使用HTML5兼容的浏览器。
- en: The attributes that can be set on a `FormEmail` are `name`, `autocomplete`,
    `autofocus`, `disabled`, `form`, `list`, `maxlength`, `multiple`, `pattern`, `placeholder`,
    `readonly`, `required`, `size`, `type`, and `value`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`FormEmail`上设置的属性有`name`、`autocomplete`、`autofocus`、`disabled`、`form`、`list`、`maxlength`、`multiple`、`pattern`、`placeholder`、`readonly`、`required`、`size`、`type`和`value`。
- en: FormFile
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormFile
- en: 'The `FormFile` helper is helpful for displaying an `<input />` with the type
    file. Not only does it show the input element, but it can also prepare the element
    for any upload progress we want to monitor. Like many other element helpers, this
    helper also supports the attributes: `name`, `accept`, `autofocus`, `disabled`,
    `form`, `multiple`, `required`, `type`, and `value`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormFile`辅助器对于显示具有类型file的`<input />`非常有帮助。它不仅显示了输入元素，还可以为任何我们想要监控的上传进度准备元素。像许多其他元素辅助器一样，此辅助器也支持属性：`name`、`accept`、`autofocus`、`disabled`、`form`、`multiple`、`required`、`type`和`value`。'
- en: FormHidden
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormHidden
- en: The hidden `<input />` field is handy for posting information to the application
    without requiring user input. Nothing fancy about this helper, but it does support
    the `name`, `disabled`, `form`, `type`, and `value` attributes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏的`<input />`字段便于在不要求用户输入的情况下将信息发布到应用程序。这个辅助器没有什么特别之处，但它支持`name`、`disabled`、`form`、`type`和`value`属性。
- en: FormImage
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormImage
- en: The `FormImage` `<input />` tag is mainly used as a replacement for a **Submit**
    button in a form. It is simple to use and only requires the `src` attribute (the
    location of the image). It also supports the `name`, `alt` (recommended), `autofocus`,
    `disabled`, `form`, `formaction`, `formenctype`, `formmethod`, `formnovalidate`,
    `formtarget`, `height`, `type`, and `width` attributes.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormImage` `<input />`标签主要用于在表单中替代**提交**按钮。使用简单，只需`src`属性（图像的位置）。它还支持`name`、`alt`（推荐）、`autofocus`、`disabled`、`form`、`formaction`、`formenctype`、`formmethod`、`formnovalidate`、`formtarget`、`height`、`type`和`width`属性。'
- en: FormInput
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormInput
- en: A `FormInput` is a simple `<input />` element that renders an element for us
    by naturally selecting the type. Not necessarily recommended to use this one as
    it is pretty generic and would have its flaws (for example, when it isn't an `input`
    tag that is required).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormInput` 是一个简单的 `<input />` 元素，通过自然选择类型为我们渲染元素。并不一定推荐使用这个，因为它相当通用，并且会有其缺陷（例如，当它不是一个必需的
    `input` 标签时）。'
- en: FormLabel
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormLabel
- en: If we want to display a `<label />`, then using this helper is the perfect thing,
    as we can declare the position of the label (`FormLabel::APPEND` or `FormLabel::PREPEND`)
    and we can also add the content of the label. It only supports `for` and `form`
    as attributes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想显示一个 `<label />`，那么使用这个助手是完美的，因为我们可以声明标签的位置（`FormLabel::APPEND` 或 `FormLabel::PREPEND`），我们还可以添加标签的内容。它只支持
    `for` 和 `form` 作为属性。
- en: FormElementErrors
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FormElementErrors
- en: This helper is used for displaying form validation errors. By default, this
    will be displayed underneath the form element, but with this helper we can customize
    the display of this error a bit more.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此助手用于显示表单验证错误。默认情况下，这将在表单元素下方显示，但使用此助手我们可以更自定义地显示此错误。
- en: Creating a custom form element and form view helper
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义表单元素和表单视图助手
- en: Once we keep on developing in Zend Framework 2, and our application keeps on
    growing, the more it is necessary to stop copy-pasting and just replace all those
    replicating bits by a class that simply outputs what we want. In ZF2 this can
    be done easily through view helpers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续在 Zend Framework 2 中开发，并且我们的应用程序不断增长，就越有必要停止复制粘贴，只是用简单地输出我们想要的类的复制部分来替换所有这些重复的部分。在
    ZF2 中，这可以通过视图助手轻松完成。
- en: How to do it…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In this recipe we'll create our own form element, and corresponding view helper
    to display it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建我们自己的表单元素，以及相应的视图助手来显示它。
- en: Creating the new element
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新元素
- en: 'All we have to do is set the type of the element, and that''s it. We do the
    following alterations to the `/module/Application/src/Application/Form/Element/Video.php`
    file, let''s take a look on what the code should look like:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的只是设置元素的类型，然后就这样了。我们对 `/module/Application/src/Application/Form/Element/Video.php`
    文件进行了以下修改，让我们看看代码应该是什么样子：
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As we can see this is a pretty easy job to do, and we have now successfully
    created a new element to use in ZF2.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这是一项相当容易的工作，我们现在已经成功创建了一个新元素，可以在 ZF2 中使用。
- en: Creating the new view helper
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新的视图助手
- en: 'The view helper will create the HTML element that we just declared, so let''s
    take a look on how the view helper should look like in the `/module/Application/src/Application/Form/View/Helper/FormVideo.php`
    file:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 视图助手将创建我们刚刚声明的 HTML 元素，让我们看看视图助手在 `/module/Application/src/Application/Form/View/Helper/FormVideo.php`
    文件中应该是什么样子：
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: First, we added the attributes that this element can have, this is necessary
    to make sure we are not declaring attributes that don't exist (although that would
    in most cases not be that much of a problem).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加了此元素可以拥有的属性，这是为了确保我们不会声明不存在的属性（尽管在大多数情况下这不会造成太大的问题）。
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding `__invoke` method is created so that we don't have to initialize
    the class before we want to call the view helper. This way we can use it in the
    view scripts by using `formVideo()`, instead of instantiating a new `FormVideo()`
    first.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了前面的 `__invoke` 方法，这样我们就不必在我们想要调用视图助手之前初始化类。这样我们就可以通过使用 `formVideo()` 来在视图脚本中使用它，而不是首先实例化一个新的
    `FormVideo()`。
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `createSourcesString` method gets the string or array containing all our
    video URLs. As said this can be either a string or an array, which in the last
    case will just iterate through the array and output the string with the source
    tags.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`createSourcesString` 方法获取包含所有视频 URL 的字符串或数组。如前所述，这可以是字符串或数组，在后一种情况下，它将遍历数组并输出带有源标签的字符串。'
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Adding view helper to the configuration
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将视图助手添加到配置中
- en: 'Now we need to add the view helper to the module configuration to make sure
    the view helper can be found in the view scripts. We can simply do this by adding
    another method to our `/module/Application/Module.php` as shown in the following
    code:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将视图助手添加到模块配置中，以确保视图助手可以在视图脚本中找到。我们可以简单地通过在我们的 `/module/Application/Module.php`
    中添加另一个方法来实现，如下面的代码所示：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We didn't put the whole class in there, as that would be too much useless information
    for this example. The idea however is that we can simply put this method in our
    `Module.php` to make sure our view helper will be located.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有把整个类放进去，因为这会对这个例子来说太多无用的信息。然而，想法是，我们可以简单地把这个方法放在我们的 `Module.php` 中，以确保我们的视图助手会被定位。
- en: Displaying the new element
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示新的元素
- en: 'We do the following alterations to the `/module/Application/view/application/index/video.phtml`
    file:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 `/module/Application/view/application/index/video.phtml` 文件做了以下修改：
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We have now created a new form element, and a new form view helper!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个新的表单元素和一个新的表单视图助手！
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Creating the element
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建元素
- en: First of all we need to create the new element before we work with it within
    ZF2\. This can be easily done by extending from the base element of `Zend\Form\Element`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在 ZF2 中创建新的元素，然后再使用它。这可以通过扩展 `Zend\Form\Element` 的基本元素来轻松完成。
- en: Next up is the view helper as we want to make sure that our element is also
    rendered correctly to the user. As our element is not of any existing type (otherwise
    this would be a very boring recipe) we need to make sure that we create a view
    helper for ourselves.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是视图助手，因为我们想确保我们的元素也能正确地渲染给用户。由于我们的元素不是任何现有类型（否则这将是一个非常无聊的食谱），我们需要确保我们为自己创建一个视图助手。
- en: The last bit of our code is creating the actual render method, which—as the
    name tells us—renders the actual HTML object.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码的最后一部分是创建实际的渲染方法，正如其名称所表明的，它渲染实际的 HTML 对象。
- en: In our case, we want to trigger an exception whenever the `src` has not been
    defined, as without it, this would be a pretty useless HTML element. Now, we have
    everything set up, we can use the element either in a form, or on its own in the
    view script. In the last example, we just declared the form element in the view
    script to show how it can work; however using logic in the view script is not
    something that is advised to do as we want to keep the view as clean as possible,
    and only output code with it. Anything remotely unrelated to HTML or the output
    to the user should go in the controller or models.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们希望在 `src` 未定义时触发一个异常，因为没有它，这个 HTML 元素将非常无用。现在，我们已经设置好了一切，我们可以使用这个元素在表单中，或者在其自身的视图脚本中单独使用。在上一个例子中，我们只是在视图脚本中声明了表单元素来展示它如何工作；然而，在视图脚本中使用逻辑并不是一个建议的做法，因为我们希望保持视图尽可能干净，并且只输出与之相关的代码。任何与
    HTML 或用户输出相关的内容都应该放在控制器或模型中。
- en: What did we do
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们做了什么
- en: What we did is create a new form element, which was supposed to be a `<video
    />` tag, a new HTML5 element. This video tag can have several attributes, one
    of it being an `src`. The `src` in this case tells the video element where we
    can find the video that we want to play.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是创建了一个新的表单元素，它原本应该是一个 `<video />` 标签，一个全新的 HTML5 元素。这个视频标签可以拥有几个属性，其中之一就是
    `src`。在这个例子中，`src` 属性告诉视频元素我们可以在哪里找到我们想要播放的视频。
- en: A good reason to create our own view helper would be if we have a piece of HTML
    that is constantly recurring throughout our application (think of a tool tip or
    a help text), and which only needs to be copy-pasted and changed some properties
    for it to work. To save us time and space (code and readability wise), we would
    transform this into a simple view helper class that replicates the exact object,
    which we can transform by adding options to it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们自己的视图助手的一个好理由是，如果我们有一段 HTML 代码在我们的应用程序中反复出现（比如工具提示或帮助文本），并且只需要复制粘贴并更改一些属性就可以使用。为了节省我们的时间和空间（从代码和可读性的角度来看），我们会将其转换成一个简单的视图助手类，它复制了确切的对象，我们可以通过添加选项来转换这个对象。
- en: In the end, we simply use the `formVideo` view helper in the view script to
    actually render the object for us, which takes a bit of a load off our hands by
    rendering a piece of code that is easy to replicate.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在视图脚本中简单地使用 `formVideo` 视图助手来实际渲染对象，这样就可以减轻我们的负担，因为它渲染了一段易于复制的代码。
