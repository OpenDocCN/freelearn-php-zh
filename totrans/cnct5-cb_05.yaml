- en: Chapter 5. Working with Databases and Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：与数据库和模型一起工作
- en: 'In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Configuring database credentials
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据库凭据
- en: Loading the database object
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载数据库对象
- en: Retrieving data from the database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: Writing data to the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据写入数据库
- en: Guarding against SQL injections with prepared statements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预处理语句防范 SQL 注入
- en: Creating a custom model class
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义模型类
- en: Reading from the database with active record
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录从数据库读取
- en: Writing to the database with active record
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录向数据库写入
- en: Updating a database record with active record
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录更新数据库记录
- en: Searching the database using active record
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录搜索数据库
- en: Deleting objects using active record and model classes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录和模型类删除对象
- en: Defining relationships with active record
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用活动记录定义关系
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Web applications get a great deal of their capabilities from being connected
    to a database. concrete5 is a **LAMP** application (runs on Linux, Apache, MySQL,
    and PHP). MySQL is the database that concrete5 uses, which is the most popular
    open source database in the world.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序从连接到数据库中获得了许多功能。concrete5 是一个 **LAMP** 应用程序（在 Linux、Apache、MySQL 和 PHP
    上运行）。MySQL 是 concrete5 使用的数据库，它是世界上最受欢迎的开源数据库。
- en: In this chapter, we will discover the ways to interact with the database in
    concrete5, both with plain SQL queries, and with the more object-oriented active
    record approach. We will learn how to safeguard against SQL injection attacks,
    create custom model classes, and query the database using objects and active record.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨在 concrete5 中与数据库交互的方法，包括使用原始 SQL 查询和更面向对象的 active record 方法。我们将学习如何防范
    SQL 注入攻击，创建自定义模型类，并使用对象和 active record 查询数据库。
- en: This chapter will use some basic SQL queries, so some familiarity with writing
    database queries is recommended.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用一些基本的 SQL 查询，因此建议您对编写数据库查询有一定的了解。
- en: Configuring database credentials
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置数据库凭据
- en: Before we are able to read and write to the database, we need to make sure concrete5
    has the correct database credentials. Typically these credentials are set during
    installation, but if you are moving a concrete5 to another server or changing
    the username or password of the concrete5 user, it is important to know how to
    configure database access.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够读取和写入数据库之前，我们需要确保 concrete5 有正确的数据库凭据。通常这些凭据是在安装期间设置的，但如果您将 concrete5 移动到另一个服务器或更改
    concrete5 用户的用户名或密码，了解如何配置数据库访问是很重要的。
- en: In this recipe, we will act as though we are specifying the credentials from
    scratch. This will allow us to explore each value that is stored in the database.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将假设我们从零开始指定凭据。这将使我们能够探索数据库中存储的每个值。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Have a look at the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤：
- en: Open `/config/site.php` in your preferred code editor.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中打开 `/config/site.php`。
- en: 'Specify the host name of the database server. In many instances, this is simply
    `localhost`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定数据库服务器的名称。在许多情况下，这仅仅是 `localhost`：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set the username that concrete5 will use to connect to the database:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 concrete5 连接到数据库时使用的用户名：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set the password for that users:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该用户设置密码：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, specify the name of the database that concrete5 will connect to:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，指定 concrete5 将连接到的数据库名称：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `site.php` file is automatically loaded by concrete5 when the site is accessed.
    Developers can define configuration constants here using PHP's `define` function.
    The first parameter of the `define` function is the constant's name, do *not*
    change this. The second parameter, however, should contain the corresponding value
    for the particular setting.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当网站被访问时，`site.php` 文件会被 concrete5 自动加载。开发者可以使用 PHP 的 `define` 函数在这里定义配置常量。`define`
    函数的第一个参数是常量的名称，**不要**更改此参数。然而，第二个参数应包含特定设置的相应值。
- en: Make sure that the user that you choose for concrete5 has sufficient access
    to the database and is allowed to perform all of the necessary queries.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您为 concrete5 选择的用户有足够的数据库访问权限，并且允许执行所有必要的查询。
- en: Improperly configured database settings in this file will result in the website
    displaying an error.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中配置不当的数据库设置将导致网站显示错误。
- en: Loading the database object
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据库对象
- en: At the heart of performing queries on the database in concrete5, is the database
    object. The database object exposes several methods that allow developers to perform
    queries on the database.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 concrete5 中执行数据库查询的核心是数据库对象。数据库对象公开了几个方法，允许开发者对数据库执行查询。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Have a look at the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: We will need a place to play around with some test code. Open `/config/site_post.php`
    which will serve us well in your code editor.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个地方来测试一些测试代码。打开`/config/site_post.php`，这将很好地服务于你的代码编辑器。
- en: 'Write the following code snippet to load the database object:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码片段以加载数据库对象：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that the database object is loaded, take a look at some of the methods
    that it exposes:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在数据库对象已加载，看看它公开的一些方法：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Dump the array of methods to the screen:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方法数组输出到屏幕：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: concrete5 will use the database settings from your configuration file (likely
    located at `/config/site.php`) and connect to the database, returning an object
    containing several useful methods for interacting with the database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 将使用配置文件中的数据库设置（可能位于`/config/site.php`）并连接到数据库，返回一个包含与数据库交互的几个有用方法的对象。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you''d like to connect to a database other than the one specified in `site.php`,
    you can pass in the new database credentials as parameters to the database loader,
    as shown in the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想连接到`site.php`中指定的数据库以外的数据库，你可以将新的数据库凭据作为参数传递给数据库加载器，如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Retrieving data from the database
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: Once you have loaded the database object, you can perform queries against it.
    In this recipe, we will select the contents of the `Users` table, and echo out
    each username.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了数据库对象，你就可以对其执行查询。在这个菜谱中，我们将选择`Users`表的内容，并输出每个用户名。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you understand how to write database queries with SQL before diving
    into writing queries by hand in concrete5\. There are dozens of MySQL resources
    available online and in print that go far beyond the scope of this book!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编写 concrete5 中的手动查询之前，请确保你理解如何使用SQL编写数据库查询。网上和印刷品中有成百上千的MySQL资源，远远超出了本书的范围！
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Have a look at the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: 'Load the database object:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载数据库对象：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Write the query to select from the `Users` table:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写查询以从`Users`表中选择：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Execute the query:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询：
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Loop through the results and echo each user''s username:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历结果并输出每个用户的用户名：
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This function works as you'd expect, but it takes a little of the tedium out
    of performing raw database queries with PHP and MySQL. Calling `getAll` function
    on the database object returns an array of all of the results. Each result is
    also an array, with keys that correspond to each column in the row.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数按预期工作，但它减少了使用PHP和MySQL执行原始数据库查询时的繁琐。在数据库对象上调用`getAll`函数会返回一个包含所有结果的数组。每个结果也是一个数组，其键对应于行中的每一列。
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you are performing a query where you are only selecting one column and expect
    one result (for instance, a `COUNT` query) you can use the `getOne` method to
    get the exact value that you need as shown in the following code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在执行只选择一个列并期望一个结果的查询（例如，一个`COUNT`查询），你可以使用`getOne`方法来获取你需要的确切值，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Writing data to the database* recipe
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将数据写入数据库* 菜谱'
- en: Writing data to the database
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据写入数据库
- en: Of course, the majority of queries that can be performed on a MySQL database
    don't return any data. What if a developer needs to insert a row into a table?
    For that, we can use the `execute` method of the database object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在MySQL数据库上可以执行的查询中，大多数不会返回任何数据。如果开发者需要向表中插入一行怎么办？为此，我们可以使用数据库对象的`execute`方法。
- en: In this recipe, we will insert a new row into a table called `CustomTable`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向名为`CustomTable`的表中插入一行新数据。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will want to insert some rows to the database here, but we don''t want to
    mess anything up in the normal concrete5 database tables. Create a dummy table
    to run some queries on by executing the following statement on your MySQL database
    (this SQL file is also included with the free code download from this book''s
    website):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里向数据库中插入一些行，但我们不想在正常的 concrete5 数据库表中搞乱任何东西。通过在你的MySQL数据库上执行以下语句创建一个虚拟表来运行一些查询（此SQL文件也包含在此书的免费代码下载中）：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Have a look at the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the database object:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载数据库对象：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Write the `INSERT` query:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 `INSERT` 查询：
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Execute the `INSERT` query:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `INSERT` 查询：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Output a success message, so that you know the update worked:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出一条成功消息，以便您知道更新已成功执行：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `execute` function allows a developer to run, literally, any query that
    the user has permission to run. In this case, we are simply executing a statement
    to add a new row to a custom table.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute` 函数允许开发者运行用户有权运行的任何查询。在这种情况下，我们只是执行一个语句来向自定义表中添加新行。'
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `execute` function can be used to run any arbitrary query on the database.
    For example, if we want to `TRUNCATE` (empty) the contents of `CustomTable`, we
    could write the following code snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute` 函数可以用来在数据库上运行任何任意查询。例如，如果我们想将 `CustomTable` 的内容清空（`TRUNCATE`），我们可以编写以下代码片段：'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Guarding against SQL injections using prepared statements
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预定义语句防止 SQL 注入
- en: A major source of security headaches in web applications has been SQL injection
    attacks. **SQL injections** can occur when user-supplied data is not properly
    escaped and sanitized before being inserted into an SQL command. Malicious users
    could use this as an opportunity to run arbitrary commands on the database, either
    exposing sensitive data, or performing destructive actions such as altering or
    removing data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络应用程序中，SQL 注入攻击一直是安全问题的主要来源。**SQL 注入**可能发生在用户提供的输入在插入 SQL 命令之前没有得到适当的转义和净化。恶意用户可能会利用这个机会在数据库上运行任意命令，要么泄露敏感数据，要么执行破坏性操作，如更改或删除数据。
- en: Fortunately, this is an easy problem to solve. Indeed, one could manually sanitize
    all user input before concatenating those inputs into SQL queries, but that is
    tedious and prone to human error (forgetting to sanitize one portion of the application
    could still leave it vulnerable to attack). The preferred way to guard against
    SQL injection is to use prepared statements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这是一个容易解决的问题。确实，一个人可以在将输入拼接成 SQL 查询之前手动净化所有用户输入，但这很繁琐且容易出错（忘记净化应用程序的一部分仍然可能使其容易受到攻击）。防止
    SQL 注入的最佳方式是使用预定义语句。
- en: Prepared statements (or parameterized statements) are just like regular SQL
    queries. The only difference is, instead of directly inserting the user-supplied
    parameters into the query, the database will run the base query and the parameter
    portions at separate times. Therefore, prepared statements will not be vulnerable
    to SQL injections.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义语句（或参数化语句）与常规 SQL 查询类似。唯一的区别是，不是直接将用户提供的参数插入到查询中，数据库将在不同的时间运行基础查询和参数部分。因此，预定义语句不会受到
    SQL 注入的威胁。
- en: When running queries that contain user-supplied data, it is important to use
    only prepared statements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行包含用户提供的数据的查询时，使用仅预定义语句非常重要。
- en: The database object in concrete5 supports prepared statements, and in this recipe,
    we will create a prepared statement which allow guests to search the `Users` table
    by username and get that user's email address in return.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5 中的数据库对象支持预定义语句，在这个配方中，我们将创建一个预定义语句，允许访客通过用户名搜索 `Users` 表，并返回该用户的电子邮件地址。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe will assume that your concrete5 system has a user with the username
    of `admin`. Feel free to adjust this code to make it suit your environment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将假设您的 concrete5 系统有一个用户名为 `admin` 的用户。请随意调整此代码以适应您的环境。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Have a look at the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the database object:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载数据库对象：
- en: '[PRE19]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create our prepared statement:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的预定义语句：
- en: '[PRE20]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Store the value that the user provided on an HTML form. We will pretend it
    was equal to `admin`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户在 HTML 表单中提供的值存储起来。我们将假设它等于 `admin`：
- en: '[PRE21]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the prepared query, with the statement as the first parameter, and the
    filter value as the second:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行预定义查询，将语句作为第一个参数，将过滤器值作为第二个参数：
- en: '[PRE22]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Loop through the results and echo out each user''s email address (there should
    be only one):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历结果并输出每个用户的电子邮件地址（应该只有一个）：
- en: '[PRE23]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Prepared statements are a feature of the database management system, in this
    case, MySQL. The database object in concrete5 utilizes this native feature to
    make it easy to use in a single-line function. This is because the query is prepared
    and executed before the parameters are applied; there is no risk of SQL injection.
    In addition to the security benefits, prepared statements are a great way to improve
    the performance on queries that are run several times.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句是数据库管理系统的一个特性，在本例中是MySQL。在concrete5中，数据库对象利用了这一原生特性，使其在单行函数中使用变得简单。这是因为查询在参数应用之前就已经准备并执行了；不存在SQL注入的风险。除了安全优势外，预处理语句也是提高多次运行的查询性能的绝佳方式。
- en: There's more...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The database object supports executing prepared statements with more than one
    parameter. In these instances, simply provide the parameters in an array, with
    each value in the same order that it is specified in the query. Have a look at
    the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库对象支持执行带有多个参数的预处理语句。在这些情况下，只需以查询中指定的相同顺序提供一个包含每个值的数组即可。看看以下代码片段：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Learn more about prepared statements in PHP at [http://php.net/manual/en/mysqli.quickstart.prepared-statements.php](http://php.net/manual/en/mysqli.quickstart.prepared-statements.php)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://php.net/manual/en/mysqli.quickstart.prepared-statements.php](http://php.net/manual/en/mysqli.quickstart.prepared-statements.php)了解更多关于PHP中预处理语句的信息
- en: Creating a custom model class
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义模型类
- en: Writing SQL commands is a quick and easy way to interact with the database in
    concrete5, but it isn't the best way. Since concrete5 is an **MVC** (**Model View
    Controller**) application, all data actions should really live in models. A **model**
    is a representation of an object that exists in the database, which will contain
    methods to read and write data to that object and have it persist in the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在concrete5中编写SQL命令是快速轻松地与数据库交互的方式，但这并不是最佳方式。由于concrete5是一个**MVC**（**模型-视图-控制器**）应用程序，所有数据操作都应该真正存在于模型中。**模型**是数据库中存在的对象的表示，它将包含读取和写入该对象的方法，并使其在数据库中持久化。
- en: In this recipe, we will create a new table called `Books`, which will contain
    several book records. We will then create a `Book` model that will represent book
    data within the database.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个名为`Books`的新表，其中将包含多个书籍记录。然后我们将创建一个`Book`模型，它将在数据库中表示书籍数据。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: concrete5 follows specific conventions in the naming of database tables. If
    you open the concrete5 database in an SQL query browser (such as phpMyAdmin or
    Sequel Pro on OS X), you will see that each of the tables begins with a capital
    letter and subsequent words in the table name are also camel-cased. In addition,
    tables should be plural in concrete5, since they contain multiple instances of
    items. Models should be singular, since they represent an individual item in the
    database (most of the time). Therefore, the new table that we will create will
    be called `Books` and the model will be called `Book`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: concrete5在数据库表命名方面遵循特定的约定。如果你在SQL查询浏览器（如phpMyAdmin或OS X上的Sequel Pro）中打开concrete5数据库，你会看到每个表都以大写字母开头，并且表名中的后续单词也是驼峰式命名。此外，在concrete5中，表应该是复数形式，因为它们包含多个项目实例。模型应该是单数形式，因为它们代表数据库中的单个项目（大多数情况下）。因此，我们将创建的新表将被称为`Books`，模型将被称为`Book`。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: 'First, create the `Books` table that we will be using for the new `Book` model.
    We recommend using a database browser tool such as phpMyAdmin, MySQL Workbench,
    Sequel Pro (OS X), or Heidi SQL (Windows). The query can also be performed from
    the following:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建我们将用于新`Book`模型的`Books`表。我们建议使用数据库浏览器工具，如phpMyAdmin、MySQL Workbench、Sequel
    Pro（OS X）或Heidi SQL（Windows）。查询也可以从以下操作执行：
- en: '[PRE25]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a new file for the `Book` model. In `/models` folder, create a file called
    `book.php`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Book`模型创建一个新文件。在`/models`文件夹中，创建一个名为`book.php`的文件。
- en: 'Add the `defined` or `die` statement to the top of the file. This is required
    on all PHP files in concrete5 to prevent scripts from getting executed on their
    own:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加`defined`或`die`语句。这是在concrete5中所有PHP文件中必需的，以防止脚本自行执行：
- en: '[PRE26]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create the class definition for the `Book` model, extending the core `Model`
    class.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Book`模型创建类定义，扩展核心`Model`类。
- en: '[PRE27]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add a method to create a new book, accepting a title, and author name as parameters:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个创建新书籍的方法，接受标题和作者名称作为参数：
- en: '[PRE28]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add another method to load a book by its ID:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个方法来通过ID加载书籍：
- en: '[PRE29]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, add a method to get a book''s title:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个获取书籍标题的方法：
- en: '[PRE30]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save `book.php`. Now that the `Book` model has been created and saved, let's
    try using it to write to and read from the database. To keep things simple, we
    will just stick this code in `/config/site_post.php`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `book.php`。现在 `Book` 模型已经创建并保存，让我们尝试使用它来写入和读取数据库。为了简化，我们将这段代码放在 `/config/site_post.php`
    中。
- en: 'Load the `Book` model using the `Loader` class:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Loader` 类加载 `Book` 模型：
- en: '[PRE31]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new instance of `Book`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Book` 的新实例：
- en: '[PRE32]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add a new book to the database using the `createBook` function we declared
    previously:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前声明的 `createBook` 函数向数据库中添加一本新书：
- en: '[PRE33]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Get the book's title using the function that we declared.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们声明的函数获取书籍的标题。
- en: '[PRE34]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's walk through the code that we just wrote. First, we made sure to create
    a table in the database called `Books`. This table has three columns, an `ID`
    field (which auto-increments every time a row is created), a `title` field, and
    an `author` field.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们刚刚编写的代码。首先，我们确保在数据库中创建了一个名为 `Books` 的表。这个表有三个列，一个 `ID` 字段（每次创建行时自动递增），一个
    `title` 字段和一个 `author` 字段。
- en: Next, we created a class called `Book` in `/models/book.php`. This class will
    represent an instance of an individual record in the `Books` table. The class
    extends the core `Model` class (which is just a basic implementation defined in
    `/concrete/core/libraries/model.php`). We then added a method to add new books
    to the database. The `createBook` method first loaded the database object, then
    it assigned the `title` and `author` to the current `Book` object. After performing
    the `INSERT` query, the method sets the book's `ID` using the `mysql_insert_id()`
    function. Finally, the function returns the new `ID` of the row we just added.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在 `/models/book.php` 中创建了一个名为 `Book` 的类。这个类将代表 `Books` 表中单个记录的一个实例。该类扩展了核心
    `Model` 类（它是在 `/concrete/core/libraries/model.php` 中定义的一个基本实现）。然后我们添加了一个方法来向数据库中添加新书。`createBook`
    方法首先加载数据库对象，然后将 `title` 和 `author` 赋值给当前的 `Book` 对象。执行 `INSERT` 查询后，该方法使用 `mysql_insert_id()`
    函数设置书籍的 `ID`。最后，函数返回我们刚刚添加的行的新的 `ID`。
- en: The `loadById` function was added next. This function will accept an `ID` as
    the parameter, and then perform a `SELECT` query on the database to find the corresponding
    row. Notice that in this demonstration we never actually verified that the record
    exists. In real-world use, you will want to make sure to account for that. Once
    we have the `Book` object loaded, we assign the three properties (`ID`, `title`,
    and `author`) to the class object.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加了 `loadById` 函数。这个函数将接受一个 `ID` 作为参数，然后在数据库上执行一个 `SELECT` 查询以找到对应的行。注意，在这个演示中，我们从未实际验证记录是否存在。在实际应用中，你将想要确保考虑到这一点。一旦我们加载了
    `Book` 对象，我们将三个属性（`ID`、`title` 和 `author`）赋值给类对象。
- en: Finally, we added a simple getter function to return the title of the book.
    Note that this function will only work after the `Book` class has been loaded,
    either by calling `loadById`, or by creating a new book with the `createBook`
    function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个简单的获取器函数来返回书籍的标题。请注意，这个函数只有在 `Book` 类被加载后才会工作，无论是通过调用 `loadById`，还是通过使用
    `createBook` 函数创建一个新的书籍。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It should be pretty clear that by creating models to handle data object, developers
    can save a ton of work and keep their code clean. Rather than having SQL statements
    spread all over the code, all of the database-related logic is contained in the
    model. This allows for fast and easy creation and access of database rows.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很明显，通过创建处理数据对象的模型，开发者可以节省大量工作并保持代码整洁。而不是让 SQL 语句散布在代码中，所有与数据库相关的逻辑都包含在模型中。这允许快速轻松地创建和访问数据库行。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Loading the database object* recipe
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加载数据库对象* 的配方'
- en: The *Retrieving data from the database* recipe
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从数据库中检索数据* 的配方'
- en: The *Writing data to the database* recipe
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将数据写入数据库* 的配方'
- en: The *Guarding against SQL injections with prepared statements* recipe
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用预处理语句防止 SQL 注入* 的配方'
- en: Reading from the database with active record
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录从数据库中读取
- en: Now that we have created a `Model` class, it is easy to see how this can be
    a huge benefit to developers, wanting to keep their codebase clean and maintainable.
    However, we can take this one step further using active record. The reality is,
    the tasks in the previous recipe could have been performed with less than half
    of the code that was written.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个 `Model` 类，很容易看出这对想要保持其代码库干净和可维护的开发者来说可以是一个巨大的好处。然而，我们可以通过使用活动记录更进一步。现实是，在先前的食谱中，这些任务可以用不到一半的代码来完成。
- en: If you are familiar with frameworks such as Ruby on Rails or CakePHP, then you
    may have some experience with active record already. **Active record** is a convention
    of using classes that contain create, update, read, and delete functionality,
    as well as properties mapped to a record in the database.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Ruby on Rails 或 CakePHP 等框架，那么你可能已经对活动记录有一些经验。**活动记录** 是一种使用包含创建、更新、读取和删除功能以及映射到数据库中记录的属性的类的约定。
- en: In this recipe, we will explore how to use active record to load models from
    the database.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将探讨如何使用活动记录从数据库中加载模型。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will be using the same `Books` table in the database from the previous recipe.
    If you need to create this table, run the following SQL on your database:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前面食谱中数据库中的相同 `Books` 表。如果你需要创建此表，请在你的数据库上运行以下 SQL：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Also, make sure that a record with the ID of `1` exists in that table. If you
    ran through the previous recipe, it should exist already.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保表中存在 ID 为 `1` 的记录。如果你已经完成了前面的食谱，它应该已经存在。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Have a look at the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: If the record with the ID of `1` doesn't exist, create a `Book` class in `/models/book.php`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 ID 为 `1` 的记录不存在，请在 `/models/book.php` 中创建一个 `Book` 类。
- en: 'Make sure the contents of `book.php` look like the following:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保文件 `book.php` 的内容如下：
- en: '[PRE36]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, let's write a little code to make this model come to life. For this demo,
    we will just be writing the code in `/config/site_post.php` since it is just temporary
    dummy code.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们写一点代码来让这个模型变得生动起来。对于这个演示，我们只需在 `/config/site_post.php` 中编写代码，因为这只是临时的示例代码。
- en: 'Load the model:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE37]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a new instance of the `Book` class:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Book` 类的新实例：
- en: '[PRE38]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Load the book with the ID of `1`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 ID 为 `1` 的书籍：
- en: '[PRE39]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Get the book''s title:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取书籍的标题：
- en: '[PRE40]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Output the title to the screen:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题输出到屏幕：
- en: '[PRE41]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, the `Book` model contained no SQL, yet it was still able to
    perform a lookup on the database and load the book with the ID of `1`. The `Book`
    class extends the `Model` class, which extends the `ADOdb_Active_Record` class.
    The `ADOdb_Active_Record` class implements several functions to provide typical
    read, update, create, and delete functionality.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Book` 模型不包含任何 SQL，但它仍然能够对数据库进行查找并加载 ID 为 `1` 的书籍。`Book` 类扩展了 `Model` 类，而
    `Model` 类又扩展了 `ADOdb_Active_Record` 类。`ADOdb_Active_Record` 类实现了几个函数，以提供典型的读取、更新、创建和删除功能。
- en: One important change to note is that early in the class body, we added a member
    variable called `$_table`. If we would have left that out, everything still would
    have worked. The `ADOdb_Active_Record` class actually does some basic inflection
    (converting the singular class name (`Book`) into the plural database table name
    (`Books`)). However, the inflection is essentially only good at adding `s` to
    the end of class names and that's about it. More complex pluralizations can fail,
    so it's a good idea to always specify the table name.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个重要变化是，在类体开始处，我们添加了一个名为 `$_table` 的成员变量。如果我们省略了它，一切仍然会正常工作。实际上，`ADOdb_Active_Record`
    类进行了一些基本的屈折变化（将单数类名（`Book`）转换为复数数据库表名（`Books`））。然而，屈折变化基本上只擅长在类名末尾添加 `s`，这就是全部。更复杂的复数化可能会失败，所以始终指定表名是一个好主意。
- en: 'The `load` function of the `ADOdb_Active_Record` class expects the same syntax
    that one would find in an SQL `WHERE` statement. Writing `load(''id = ?'')` is
    equivalent to writing the following prepared statement:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`ADOdb_Active_Record` 类的 `load` 函数期望的语法与在 SQL `WHERE` 语句中找到的语法相同。编写 `load(''id
    = ?'')` 等同于编写以下预编译语句：'
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `load` function then assigns all of the properties to the object. It's clear
    how this can eliminate a lot of code when performing simple **CRUD** tasks in
    concrete5.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `load` 函数将所有属性分配给对象。很明显，当在 concrete5 中执行简单的 **CRUD** 任务时，这可以消除大量的代码。
- en: See also
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a custom model class* recipe
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类* 食谱'
- en: The *Guarding against SQL injections with prepared statements* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用预处理语句防止 SQL 注入* 菜谱'
- en: Writing to the database with active record
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录写入数据库
- en: Active record can also be used to write to the database. In this recipe, we
    will use the `Book` class created in the previous recipe to add a new book record
    to the database.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 活动记录也可以用于写入数据库。在这个菜谱中，我们将使用之前菜谱中创建的 `Book` 类向数据库添加新的书籍记录。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that the `Book` model and `Books` table have been created. Refer to
    the *Reading from the database with active record* recipe to see how that class
    should be created.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已创建 `Book` 模型和 `Books` 表。请参阅 *使用活动记录从数据库中读取* 菜谱，了解该类应该如何创建。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: We will enter the code in `/config/site_post.php`, so open that file in your
    code editor.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 `/config/site_post.php` 中输入代码，所以请打开该文件在您的代码编辑器中。
- en: 'Load the model:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE43]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new instance of the `Book` class:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Book` 类的新实例：
- en: '[PRE44]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Set the title of the book:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置书籍的标题：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Set the author of the book:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置书籍的作者：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Save the new book data:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存新的书籍数据：
- en: '[PRE47]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After setting the `title` and `author` properties to the `Book` object, calling
    the `save` function will automatically save the item to the database, and creating
    a new row.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `title` 和 `author` 属性设置为 `Book` 对象后，调用 `save` 函数将自动将项目保存到数据库中，并创建新行。
- en: See also
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a custom model class* recipe
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类* 菜谱'
- en: The *Reading from the database with active record* recipe
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用活动记录从数据库中读取* 菜谱'
- en: Updating a database record with active record
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录更新数据库记录
- en: Updating database items is very similar to creating them. In this recipe, we
    will load a book with the ID of `1` and change its title.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更新数据库项与创建它们非常相似。在这个菜谱中，我们将加载 ID 为 `1` 的书籍并更改其标题。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the same `Book` model and `Books` table from the previous,
    the *Reading from the database with active record* recipe. Make sure those files
    are in place before beginning this recipe.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用与之前的 *使用活动记录从数据库中读取* 菜谱相同的 `Book` 模型和 `Books` 表。在开始此菜谱之前，请确保这些文件已就位。
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the model:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE48]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a new instance of the book class:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个书籍类的新实例：
- en: '[PRE49]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Load the book by its ID:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过其 ID 加载书籍：
- en: '[PRE50]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Change the title of the book:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改书籍的标题：
- en: '[PRE51]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Save the changes to the database:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改保存到数据库中：
- en: '[PRE52]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the book record is loaded, the `ID` property of the object is set. The
    `Model` class uses this `ID` to update the correct record when `update` is called.
    If the `ID` of the object doesn't exist or isn't set when `update` is called,
    a new record will be created.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了书籍记录，对象的 `ID` 属性就会被设置。当调用 `update` 时，`Model` 类使用这个 `ID` 来更新正确的记录。如果对象的
    `ID` 在调用 `update` 时不存在或未设置，将创建一个新的记录。
- en: See also
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a custom model class* recipe
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类* 菜谱'
- en: The *Reading from the database with active record* recipe
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用活动记录从数据库中读取* 菜谱'
- en: Searching the database using active record
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录在数据库中搜索
- en: Often, web applications will need to retrieve multiple records. In this recipe,
    we will continue working with the concepts of `Books` stored in the database and
    retrieve an array of all of the books in the database.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Web 应用程序将需要检索多个记录。在这个菜谱中，我们将继续使用存储在数据库中的 `Books` 概念，并检索数据库中所有书籍的数组。
- en: Getting ready
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Like the other recipes before this one, we are using the same `Book` model and
    `Books` table from the previous, the *Reading from the database with active record*
    recipe. Make sure those files are in place before beginning this recipe.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的其他菜谱一样，我们使用相同的 `Book` 模型和 `Books` 表，来自之前的 *使用活动记录从数据库中读取* 菜谱。在开始此菜谱之前，请确保这些文件已就位。
- en: How to do it...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the model:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE53]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a new instance of the `Book` model:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Book` 模型的新实例：
- en: '[PRE54]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Find all of the book records:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找所有书籍记录：
- en: '[PRE55]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Loop through the array and echo each book''s title:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历数组并输出每本书的标题：
- en: '[PRE56]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `find` function of the `Model` class searches the database and returns the
    resulting objects in an array. Since the `find` function is already including
    `WHERE` in the query, we need to filter by a truth condition to find all of the
    records, so `1=1` does the job here.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model` 类的 `find` 函数搜索数据库，并以数组的形式返回结果对象。由于 `find` 函数已经在查询中包含了 `WHERE`，因此我们需要通过一个真值条件来过滤，以找到所有记录，所以这里
    `1=1` 就可以完成这个任务。'
- en: There's more...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The `find` function also supports using prepared statements to search the table.
    Here, we will look for books that have `''concrete5''` in the title: Have a look
    at the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`find` 函数还支持使用预处理语句来搜索表。这里，我们将查找标题中包含 `''concrete5''` 的书籍：看看以下：'
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom model class* recipe
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类* 的菜谱'
- en: The *Reading from the database with active record* recipe
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用活动记录从数据库中读取* 的菜谱'
- en: Deleting objects using active record and model classes
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录和模型类删除对象
- en: The final facet of CRUD actions with active record is deleting entries. In this
    recipe, we will load a book with the ID of `1` and delete it from the database.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用活动记录进行 CRUD 操作的最后一个方面是删除条目。在这个菜谱中，我们将加载 ID 为 `1` 的书籍并将其从数据库中删除。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the same `Book` model and `Books` table from the previous the
    *Reading from the database with active record* recipe. Make sure that file is
    in place before beginning this recipe.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前 *使用活动记录从数据库中读取* 菜谱中相同的 `Book` 模型和 `Books` 表。确保在开始此菜谱之前文件已经就绪。
- en: How to do it...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: Open `/config/site_post.php` in your code editor.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `/config/site_post.php`。
- en: 'Load the model:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE58]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create a new instance of the model:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型的新实例：
- en: '[PRE59]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Load the book with the ID of `1`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 ID 为 `1` 的书籍。
- en: '[PRE60]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Delete that book:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除那本书：
- en: '[PRE61]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How it works...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Calling the `delete` function of the `Model` class will run the `DELETE` query
    on the database, permanently deleting the record associated with that item. Using
    your preferred SQL browsing tool, you can see that the record has been removed
    from the database.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `Model` 类的 `delete` 函数将在数据库上运行 `DELETE` 查询，永久删除与该条目关联的记录。使用你喜欢的 SQL 浏览工具，你可以看到记录已经被从数据库中删除。
- en: See also
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom model class* recipe
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类* 的菜谱'
- en: The *Reading from the database with active record* recipe
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用活动记录从数据库中读取* 的菜谱'
- en: Defining relationships with active record
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用活动记录定义关系
- en: The primary feature of relational database systems (such as MySQL) is the ability
    to link data to other bits of data using relationships. Consider a database that
    stores states and cities in the United States. Each state can have many cities,
    but each city belongs to only one state. These relationships, "has many" and "belongs
    to", are definable using concrete5's active record support.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库系统（如 MySQL）的主要特性是能够通过关系将数据链接到其他数据。考虑一个存储美国州和城市的数据库。每个州可以有多个城市，但每个城市只属于一个州。这些关系，“拥有多个”和“属于”，可以使用
    concrete5 的活动记录支持来定义。
- en: In this recipe, we will link two tables, `States` and `Cities`, and use the
    relationships to retrieve the related data.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将链接两个表，`States` 和 `Cities`，并使用这些关系来检索相关数据。
- en: Getting ready
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, we will need to create tables for both `Cities` and `States`. Use the
    following SQL to populate those tables (this SQL is also available for download
    from the book''s website):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为 `Cities` 和 `States` 两个表创建表。使用以下 SQL 来填充这些表（此 SQL 也可从本书的网站上下载）：
- en: '[PRE62]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: How to do it...
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following steps:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下步骤：
- en: 'Create a model for state in `/models/state.php`:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/models/state.php` 中为州创建一个模型：
- en: '[PRE63]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Create a model for `city` in `/models/city.php`:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/models/city.php` 中为 `city` 创建一个模型：
- en: '[PRE64]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'At the bottom of the `state` model file (outside of the class body), define
    the relationship to `city`:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `state` 模型文件底部（类体外部），定义与 `city` 的关系：
- en: '[PRE65]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Save both of these class files.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这两个类文件。
- en: Now, we will get the cities that belong to California (state with ID = `4`).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将获取属于加利福尼亚州（ID 为 `4` 的州）的城市。
- en: Open `/config/site_post.php` in your code editor, so that we can run some code.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开 `/config/site_post.php`，这样我们就可以运行一些代码。
- en: 'Load the `state` model:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 `state` 模型：
- en: '[PRE66]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Create a new instance of the `state` model:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `state` 模型的新实例：
- en: '[PRE67]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Load the `state` with the ID of `4` (California in our data example):'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 ID 为 `4` 的 `state`（在我们的数据示例中是加利福尼亚州）：
- en: '[PRE68]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Get the state''s cities using the active record relationship:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用活动记录关系获取州的城市：
- en: '[PRE69]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Loop through the cities and output each city''s name:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历城市并输出每个城市的名称：
- en: '[PRE70]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The static function called `ClassHasMany` on the `Model` class accepts three
    parameters. The first parameter is the name of the class that we are assigning
    this relationship to (in this case, `State`). The second parameter is the name
    of the database table that contains the child content. The third column is the
    name of the foreign key, which will be used to determine which rows are children
    of the parent class.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Model`类上调用静态函数`ClassHasMany`接受三个参数。第一个参数是我们将此关系分配给类的名称（在这种情况下，`State`）。第二个参数是包含子内容的数据库表名称。第三个参数是外键的名称，它将用于确定哪些行是父类的子行。
- en: There's more...
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One can also declare `belongs to` relationships in a similar manner.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以用类似的方式声明`属于`关系。
- en: '[PRE71]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom model class* recipe
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义模型类*的配方'
- en: The *Reading from the database with active record* recipe
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用活动记录从数据库中读取*的配方'
