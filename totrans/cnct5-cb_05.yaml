- en: Chapter 5. Working with Databases and Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring database credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the database object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving data from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing data to the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guarding against SQL injections with prepared statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom model class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from the database with active record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to the database with active record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a database record with active record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching the database using active record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting objects using active record and model classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relationships with active record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications get a great deal of their capabilities from being connected
    to a database. concrete5 is a **LAMP** application (runs on Linux, Apache, MySQL,
    and PHP). MySQL is the database that concrete5 uses, which is the most popular
    open source database in the world.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discover the ways to interact with the database in
    concrete5, both with plain SQL queries, and with the more object-oriented active
    record approach. We will learn how to safeguard against SQL injection attacks,
    create custom model classes, and query the database using objects and active record.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will use some basic SQL queries, so some familiarity with writing
    database queries is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring database credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we are able to read and write to the database, we need to make sure concrete5
    has the correct database credentials. Typically these credentials are set during
    installation, but if you are moving a concrete5 to another server or changing
    the username or password of the concrete5 user, it is important to know how to
    configure database access.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will act as though we are specifying the credentials from
    scratch. This will allow us to explore each value that is stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the host name of the database server. In many instances, this is simply
    `localhost`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the username that concrete5 will use to connect to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the password for that users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, specify the name of the database that concrete5 will connect to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `site.php` file is automatically loaded by concrete5 when the site is accessed.
    Developers can define configuration constants here using PHP's `define` function.
    The first parameter of the `define` function is the constant's name, do *not*
    change this. The second parameter, however, should contain the corresponding value
    for the particular setting.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the user that you choose for concrete5 has sufficient access
    to the database and is allowed to perform all of the necessary queries.
  prefs: []
  type: TYPE_NORMAL
- en: Improperly configured database settings in this file will result in the website
    displaying an error.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the database object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the heart of performing queries on the database in concrete5, is the database
    object. The database object exposes several methods that allow developers to perform
    queries on the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will need a place to play around with some test code. Open `/config/site_post.php`
    which will serve us well in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following code snippet to load the database object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the database object is loaded, take a look at some of the methods
    that it exposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the array of methods to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will use the database settings from your configuration file (likely
    located at `/config/site.php`) and connect to the database, returning an object
    containing several useful methods for interacting with the database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''d like to connect to a database other than the one specified in `site.php`,
    you can pass in the new database credentials as parameters to the database loader,
    as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving data from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have loaded the database object, you can perform queries against it.
    In this recipe, we will select the contents of the `Users` table, and echo out
    each username.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you understand how to write database queries with SQL before diving
    into writing queries by hand in concrete5\. There are dozens of MySQL resources
    available online and in print that go far beyond the scope of this book!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the database object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the query to select from the `Users` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the results and echo each user''s username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function works as you'd expect, but it takes a little of the tedium out
    of performing raw database queries with PHP and MySQL. Calling `getAll` function
    on the database object returns an array of all of the results. Each result is
    also an array, with keys that correspond to each column in the row.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are performing a query where you are only selecting one column and expect
    one result (for instance, a `COUNT` query) you can use the `getOne` method to
    get the exact value that you need as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Writing data to the database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing data to the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the majority of queries that can be performed on a MySQL database
    don't return any data. What if a developer needs to insert a row into a table?
    For that, we can use the `execute` method of the database object.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will insert a new row into a table called `CustomTable`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will want to insert some rows to the database here, but we don''t want to
    mess anything up in the normal concrete5 database tables. Create a dummy table
    to run some queries on by executing the following statement on your MySQL database
    (this SQL file is also included with the free code download from this book''s
    website):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the database object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the `INSERT` query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `INSERT` query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output a success message, so that you know the update worked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `execute` function allows a developer to run, literally, any query that
    the user has permission to run. In this case, we are simply executing a statement
    to add a new row to a custom table.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `execute` function can be used to run any arbitrary query on the database.
    For example, if we want to `TRUNCATE` (empty) the contents of `CustomTable`, we
    could write the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Guarding against SQL injections using prepared statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A major source of security headaches in web applications has been SQL injection
    attacks. **SQL injections** can occur when user-supplied data is not properly
    escaped and sanitized before being inserted into an SQL command. Malicious users
    could use this as an opportunity to run arbitrary commands on the database, either
    exposing sensitive data, or performing destructive actions such as altering or
    removing data.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, this is an easy problem to solve. Indeed, one could manually sanitize
    all user input before concatenating those inputs into SQL queries, but that is
    tedious and prone to human error (forgetting to sanitize one portion of the application
    could still leave it vulnerable to attack). The preferred way to guard against
    SQL injection is to use prepared statements.
  prefs: []
  type: TYPE_NORMAL
- en: Prepared statements (or parameterized statements) are just like regular SQL
    queries. The only difference is, instead of directly inserting the user-supplied
    parameters into the query, the database will run the base query and the parameter
    portions at separate times. Therefore, prepared statements will not be vulnerable
    to SQL injections.
  prefs: []
  type: TYPE_NORMAL
- en: When running queries that contain user-supplied data, it is important to use
    only prepared statements.
  prefs: []
  type: TYPE_NORMAL
- en: The database object in concrete5 supports prepared statements, and in this recipe,
    we will create a prepared statement which allow guests to search the `Users` table
    by username and get that user's email address in return.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will assume that your concrete5 system has a user with the username
    of `admin`. Feel free to adjust this code to make it suit your environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the database object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create our prepared statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store the value that the user provided on an HTML form. We will pretend it
    was equal to `admin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the prepared query, with the statement as the first parameter, and the
    filter value as the second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the results and echo out each user''s email address (there should
    be only one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prepared statements are a feature of the database management system, in this
    case, MySQL. The database object in concrete5 utilizes this native feature to
    make it easy to use in a single-line function. This is because the query is prepared
    and executed before the parameters are applied; there is no risk of SQL injection.
    In addition to the security benefits, prepared statements are a great way to improve
    the performance on queries that are run several times.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database object supports executing prepared statements with more than one
    parameter. In these instances, simply provide the parameters in an array, with
    each value in the same order that it is specified in the query. Have a look at
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Learn more about prepared statements in PHP at [http://php.net/manual/en/mysqli.quickstart.prepared-statements.php](http://php.net/manual/en/mysqli.quickstart.prepared-statements.php)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom model class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing SQL commands is a quick and easy way to interact with the database in
    concrete5, but it isn't the best way. Since concrete5 is an **MVC** (**Model View
    Controller**) application, all data actions should really live in models. A **model**
    is a representation of an object that exists in the database, which will contain
    methods to read and write data to that object and have it persist in the database.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new table called `Books`, which will contain
    several book records. We will then create a `Book` model that will represent book
    data within the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 follows specific conventions in the naming of database tables. If
    you open the concrete5 database in an SQL query browser (such as phpMyAdmin or
    Sequel Pro on OS X), you will see that each of the tables begins with a capital
    letter and subsequent words in the table name are also camel-cased. In addition,
    tables should be plural in concrete5, since they contain multiple instances of
    items. Models should be singular, since they represent an individual item in the
    database (most of the time). Therefore, the new table that we will create will
    be called `Books` and the model will be called `Book`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the `Books` table that we will be using for the new `Book` model.
    We recommend using a database browser tool such as phpMyAdmin, MySQL Workbench,
    Sequel Pro (OS X), or Heidi SQL (Windows). The query can also be performed from
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new file for the `Book` model. In `/models` folder, create a file called
    `book.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `defined` or `die` statement to the top of the file. This is required
    on all PHP files in concrete5 to prevent scripts from getting executed on their
    own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the class definition for the `Book` model, extending the core `Model`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to create a new book, accepting a title, and author name as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another method to load a book by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a method to get a book''s title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `book.php`. Now that the `Book` model has been created and saved, let's
    try using it to write to and read from the database. To keep things simple, we
    will just stick this code in `/config/site_post.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the `Book` model using the `Loader` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of `Book`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new book to the database using the `createBook` function we declared
    previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get the book's title using the function that we declared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's walk through the code that we just wrote. First, we made sure to create
    a table in the database called `Books`. This table has three columns, an `ID`
    field (which auto-increments every time a row is created), a `title` field, and
    an `author` field.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we created a class called `Book` in `/models/book.php`. This class will
    represent an instance of an individual record in the `Books` table. The class
    extends the core `Model` class (which is just a basic implementation defined in
    `/concrete/core/libraries/model.php`). We then added a method to add new books
    to the database. The `createBook` method first loaded the database object, then
    it assigned the `title` and `author` to the current `Book` object. After performing
    the `INSERT` query, the method sets the book's `ID` using the `mysql_insert_id()`
    function. Finally, the function returns the new `ID` of the row we just added.
  prefs: []
  type: TYPE_NORMAL
- en: The `loadById` function was added next. This function will accept an `ID` as
    the parameter, and then perform a `SELECT` query on the database to find the corresponding
    row. Notice that in this demonstration we never actually verified that the record
    exists. In real-world use, you will want to make sure to account for that. Once
    we have the `Book` object loaded, we assign the three properties (`ID`, `title`,
    and `author`) to the class object.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added a simple getter function to return the title of the book.
    Note that this function will only work after the `Book` class has been loaded,
    either by calling `loadById`, or by creating a new book with the `createBook`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should be pretty clear that by creating models to handle data object, developers
    can save a ton of work and keep their code clean. Rather than having SQL statements
    spread all over the code, all of the database-related logic is contained in the
    model. This allows for fast and easy creation and access of database rows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading the database object* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Retrieving data from the database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Writing data to the database* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Guarding against SQL injections with prepared statements* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from the database with active record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created a `Model` class, it is easy to see how this can be
    a huge benefit to developers, wanting to keep their codebase clean and maintainable.
    However, we can take this one step further using active record. The reality is,
    the tasks in the previous recipe could have been performed with less than half
    of the code that was written.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with frameworks such as Ruby on Rails or CakePHP, then you
    may have some experience with active record already. **Active record** is a convention
    of using classes that contain create, update, read, and delete functionality,
    as well as properties mapped to a record in the database.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to use active record to load models from
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using the same `Books` table in the database from the previous recipe.
    If you need to create this table, run the following SQL on your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Also, make sure that a record with the ID of `1` exists in that table. If you
    ran through the previous recipe, it should exist already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If the record with the ID of `1` doesn't exist, create a `Book` class in `/models/book.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the contents of `book.php` look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's write a little code to make this model come to life. For this demo,
    we will just be writing the code in `/config/site_post.php` since it is just temporary
    dummy code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `Book` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the book with the ID of `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the book''s title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the title to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, the `Book` model contained no SQL, yet it was still able to
    perform a lookup on the database and load the book with the ID of `1`. The `Book`
    class extends the `Model` class, which extends the `ADOdb_Active_Record` class.
    The `ADOdb_Active_Record` class implements several functions to provide typical
    read, update, create, and delete functionality.
  prefs: []
  type: TYPE_NORMAL
- en: One important change to note is that early in the class body, we added a member
    variable called `$_table`. If we would have left that out, everything still would
    have worked. The `ADOdb_Active_Record` class actually does some basic inflection
    (converting the singular class name (`Book`) into the plural database table name
    (`Books`)). However, the inflection is essentially only good at adding `s` to
    the end of class names and that's about it. More complex pluralizations can fail,
    so it's a good idea to always specify the table name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `load` function of the `ADOdb_Active_Record` class expects the same syntax
    that one would find in an SQL `WHERE` statement. Writing `load(''id = ?'')` is
    equivalent to writing the following prepared statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `load` function then assigns all of the properties to the object. It's clear
    how this can eliminate a lot of code when performing simple **CRUD** tasks in
    concrete5.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Guarding against SQL injections with prepared statements* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to the database with active record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Active record can also be used to write to the database. In this recipe, we
    will use the `Book` class created in the previous recipe to add a new book record
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the `Book` model and `Books` table have been created. Refer to
    the *Reading from the database with active record* recipe to see how that class
    should be created.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will enter the code in `/config/site_post.php`, so open that file in your
    code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `Book` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the title of the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the author of the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the new book data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting the `title` and `author` properties to the `Book` object, calling
    the `save` function will automatically save the item to the database, and creating
    a new row.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading from the database with active record* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a database record with active record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Updating database items is very similar to creating them. In this recipe, we
    will load a book with the ID of `1` and change its title.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the same `Book` model and `Books` table from the previous,
    the *Reading from the database with active record* recipe. Make sure those files
    are in place before beginning this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the book class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the book by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the title of the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the changes to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the book record is loaded, the `ID` property of the object is set. The
    `Model` class uses this `ID` to update the correct record when `update` is called.
    If the `ID` of the object doesn't exist or isn't set when `update` is called,
    a new record will be created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading from the database with active record* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching the database using active record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, web applications will need to retrieve multiple records. In this recipe,
    we will continue working with the concepts of `Books` stored in the database and
    retrieve an array of all of the books in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the other recipes before this one, we are using the same `Book` model and
    `Books` table from the previous, the *Reading from the database with active record*
    recipe. Make sure those files are in place before beginning this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `Book` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find all of the book records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the array and echo each book''s title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `find` function of the `Model` class searches the database and returns the
    resulting objects in an array. Since the `find` function is already including
    `WHERE` in the query, we need to filter by a truth condition to find all of the
    records, so `1=1` does the job here.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `find` function also supports using prepared statements to search the table.
    Here, we will look for books that have `''concrete5''` in the title: Have a look
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading from the database with active record* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting objects using active record and model classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final facet of CRUD actions with active record is deleting entries. In this
    recipe, we will load a book with the ID of `1` and delete it from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the same `Book` model and `Books` table from the previous the
    *Reading from the database with active record* recipe. Make sure that file is
    in place before beginning this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the book with the ID of `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete that book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calling the `delete` function of the `Model` class will run the `DELETE` query
    on the database, permanently deleting the record associated with that item. Using
    your preferred SQL browsing tool, you can see that the record has been removed
    from the database.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading from the database with active record* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining relationships with active record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary feature of relational database systems (such as MySQL) is the ability
    to link data to other bits of data using relationships. Consider a database that
    stores states and cities in the United States. Each state can have many cities,
    but each city belongs to only one state. These relationships, "has many" and "belongs
    to", are definable using concrete5's active record support.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will link two tables, `States` and `Cities`, and use the
    relationships to retrieve the related data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will need to create tables for both `Cities` and `States`. Use the
    following SQL to populate those tables (this SQL is also available for download
    from the book''s website):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a model for state in `/models/state.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a model for `city` in `/models/city.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the `state` model file (outside of the class body), define
    the relationship to `city`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both of these class files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will get the cities that belong to California (state with ID = `4`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor, so that we can run some code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the `state` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `state` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `state` with the ID of `4` (California in our data example):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the state''s cities using the active record relationship:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the cities and output each city''s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The static function called `ClassHasMany` on the `Model` class accepts three
    parameters. The first parameter is the name of the class that we are assigning
    this relationship to (in this case, `State`). The second parameter is the name
    of the database table that contains the child content. The third column is the
    name of the foreign key, which will be used to determine which rows are children
    of the parent class.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One can also declare `belongs to` relationships in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a custom model class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reading from the database with active record* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
