- en: Chapter 7. Advanced Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of our dealings with content so far have been fairly basic in that they
    require us only to learn which settings to enable and what text to enter. There
    is a fundamental difference between this and what is coming in this chapter, mainly
    because the content in this chapter requires us to think ahead and plan what we
    want ahead of time, in order to prevent things going awry at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, after hearing so much about taxonomy and categorization in previous
    chapters, you might be wondering what all the fuss is about. The main reason for
    concerning ourselves with categorization is that in order to make Drupal's classification
    system so powerful, it must be left for us to decide how best to implement. This
    might sound a little strange at first, but we will see later on in the chapter
    why this faculty of Drupal is one of the things that distinguish it from everything
    else out there—it's really a good thing!
  prefs: []
  type: TYPE_NORMAL
- en: 'Accordingly, this chapter discusses the following subjects:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML, PHP, and Content Posting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't be fooled by the fact that there are only two items listed here as they
    both represent a step up in complexity from all the other topics we have discussed
    so far. However, once these topics are under your belt, you will be more or less
    on the home straight in terms of the site's development—with only the topic of
    theming to come before we can begin looking at more administrative-type tasks.
  prefs: []
  type: TYPE_NORMAL
- en: As well as this, the skills learned during the process of honing your content
    creation and management techniques will prove useful not only for this website
    but also in other aspects of your life—whether it is creating and managing office
    reports for your boss, building a new website, or even writing a book. The reason
    for this is because, by and large, we are now going to learn *how content should
    be managed and created* rather than how to click buttons and links to enable or
    disable settings.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, I'm sure you're eager to get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: HTML, PHP, and Content Posting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We briefly touched upon the fact that it is possible to include HTML or PHP
    within our posts earlier in [Chapter 3](ch03.html "Chapter 3. Basics I: Site Configuration"),
    where we added some formatting and a hyperlink to some of our text—we also saw
    a short PHP script in the section on **Adding Blocks** in [Chapter 4](ch04.html
    "Chapter 4. Basics II: Adding Functionality"), which provided the site with nice
    *Quote of the Day* functionality. So, at this point you should be comfortable
    with the fact that given sufficient permissions, it is possible to post some fairly
    unique and interesting content.'
  prefs: []
  type: TYPE_NORMAL
- en: It is likely that at some stage you will want to upgrade at least some of your
    content from plain text to something that looks a little *out of the ordinary*.
    If it's layout you are talking about, then HTML is what you need to know. Alternatively,
    if you want to create some dynamic content, which can change depending on the
    state of your site, or respond to user interaction, then PHP is the way forward.
    More than likely, you will end up using a combination of both, once you have gained
    a bit of experience.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, we can't possibly hope to give you a comprehensive introduction
    into either technology in the space we have here. However, there are tons of online
    resources available where you can learn about HTML and PHP for free and we will
    list a bunch of them throughout this section.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will look at how to achieve some fairly useful tasks by way of demonstrating
    how to create an *about us* page that will contain links to other useful sites,
    pictures of the *imaginary team* as well as some dynamic content.
  prefs: []
  type: TYPE_NORMAL
- en: Input Formats and Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing you need to understand is that it is necessary to stipulate
    which type of content we will be posting, in any given post. This is done through
    the use of the **input format** setting, which is displayed when posting content
    to the site—assuming the user in question has sufficient permissions to post different
    types of content. In order to control what is and is not allowed, head on over
    to the **input formats** link under the **administer** main menu item. This will
    bring up a list of the currently defined input formats, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the moment, you might be wondering why we need to go to all this trouble
    to decide whether people can add certain tags to their content. The answer to
    this is that because both HTML and PHP are such powerful internet technologies,
    it is not hard to subvert even fairly simple abilities for malicious purposes.
    For example, you might decide you would like to allow authenticated users the
    ability to link to their homepages from their blogs. Using the ability to add
    a hyperlink to their postings, a malicious user could create a virus or some other
    harmful content, and link to it from an innocuous and friendly looking piece of
    HTML like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This snippet simply writes out a short paragraph with a link, supposedly to
    the author's homepage, but in reality the hyperlink reference attribute points
    to a virus, `link_to_virus.exe`. That's just HTML; PHP can do a lot more damage—to
    the extent that if you don't have proper security or disaster-recovery policies
    in place, then it is possible that your site can be rendered useless or destroyed
    entirely. Security is the main reason why, as you may have noticed from the previous
    screenshot, anything other than **Filtered HTML** is unavailable for use by anyone
    except you as the administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, it is important to re-iterate the tenet:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Never allow users more permissions than they require to complete their intended
    tasks!
  prefs: []
  type: TYPE_NORMAL
- en: 'As they stand, you might not find the input formats to your liking, and so
    Drupal provides us with some functionality to modify them. Click on the **configure**
    link adjacent to the **Filtered HTML** option, and this will bring up the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **view** tab provides you with the option to alter the **Name** property
    of the input format; the **Roles** section in this case cannot be changed, but
    as you will see when we come round to creating our own input format, roles can
    be assigned however you wish. The final section provides us with a checklist of
    the types of **Filters** we would like to apply when using this input format.
    In this case the first two have been selected, and this causes the input format
    to apply the **HTML filter** (discussed in a moment) as well as the **Line break
    converter**, but not the **PHP evaluator.**
  prefs: []
  type: TYPE_NORMAL
- en: 'The line break converter simply makes it easier for users to format their content
    because it means that they do not have to explicitly enter`<br>` or`<p>` HTML
    tags in order to display new lines or paragraph breaks. If this is disabled, then
    unless the user has the ability to add the relevant HTML tags, you might end up
    with all your content looking like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The PHP evaluator simply causes posts to be sent for PHP processing, so that
    any code that falls between the PHP delimiters`<?php` and `?>` gets executed properly.
    This should not be enabled for anyone other than yourself or a highly trusted
    administrator who needs it to complete his or her work. There is, however, no
    other work to be done for either of these options. The only additional settings
    we need to look at here are for the **HTML filter**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **configure** tab at the top of the page in order to begin working
    with the **HTML filter**. You should be presented with something like this (once
    you have clicked on the **HTML filter** link to expand its content):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To start with, it is possible to decide, using the first two options, whether
    you would like to strip HTML tags that are disallowed, or simply ignore all tags
    from any posts (Escape **all tags** causes any tags that are present in the post
    to be displayed as is). Remember that if you strip all the tags from the content,
    you should enable the **Line break converter** so that users can at least paragraph
    their content properly. Which tags are to be stripped is decided in the following
    section, where you can enter a list of all the tags that *are* to be allowed—anything
    else gets removed!
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot you can see that there are eleven different types
    of tags allowed in this input format. Notice that the first one is in fact the**<a>**
    tag, which can be used to insert links into content—so be wary of this!
  prefs: []
  type: TYPE_NORMAL
- en: 'Following on, the next setting allows us to specify whether users are given
    HTML help when posting content—try enabling and disabling this option and browsing
    to this relative URL in each case to see the difference: `filter/tips`. There
    is quite a bit of helpful information on HTML in the long filter tips; so take
    a moment to read over those. The **Spam link deterrent** is a useful tool if you
    find that the site is being used to bombard members with links to products not
    sanctioned by you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not the end of the story, because we also need to be able to create
    input formats in the event we require something that the default options can''t
    cater for. In this case, let''s assume that we want to add some picture files
    to the *about us* page, which we will create in due course. Now, there are several
    ways in which this can be done, but there are two main criteria that need to be
    satisfied before we can consider creating our page. We need to be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload image files and attach them to the post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert and display the image files within the body of the post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have already seen how to perform task number one when we discussed *Upload*
    in [Chapter 4](ch04.html "Chapter 4. Basics II: Adding Functionality") on *Adding
    Functionality*. So assuming that you are able to attach files to your posts, this
    leaves us to deal with the second criterion. There are several methods for displaying
    image files within your posts. The one we will discuss here does not require us
    to download and install any contribution modules such as **Img_assist**. Instead
    we will use HTML directly to achieve this—specifically, we will need the`<img>`
    tag.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the previous screenshot that shows the **configure** page of
    the **Filtered HTML** input format. You will notice that the`<img>` tag is not
    available for use. Let''s create our own input format to cater for this instead
    of modifying this default option. Head on back to the main **input formats** page
    under **administer** and click on **add input format**. This will bring up the
    following page, from which you can build your new input format as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we will need to make use of some PHP code a bit later on, we have enabled
    the **PHP evaluator** option, as well as prevented the use of this format for
    anyone but ourselves—normally you would create a format for a group of users who
    require the modified posting abilities, but in this case we are simply demonstrating
    how to create a new input format; so this is fine for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking **Save configuration** adds this new format to the list, and it can
    now be configured by clicking on the **configure** link adjacent to its name in
    the list in order to bring up its configuration pages. Now, the only difference
    between this input format and the default **Filtered HTML** in terms of HTML is
    the addition of the`<img>` tag followed by a space in the **Allowed HTML tags**
    list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is one other thing we need to look at before we are done with this input
    format. As things stand at the moment, we will run into problems with adding PHP
    code to any content postings. This is because at the moment the **HTML filter**
    has its way with the content first, and mangles the code for the **PHP evaluator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply click on the **rearrange** tab when configuring your input format and
    give the **PHP evaluator** a lighter weight, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Input Formats and Filters](img/1800_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, the PHP evaluator gets dibs on the content and can process the PHP properly.
    For the purposes of adding images to your posts, this is all that is needed for
    now. Once that has been done, save the changes before using this to create the
    *about us* page. Before you do, though, it is probably most useful to have a short
    discourse on HTML since you will find that you need to be able to work with HTML
    as you attempt more complex postings.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For your browser to render the neatly laid out and colorful pages that we are
    used to seeing everyday, it needs instructions on what goes where and what color
    to give everything. This is the domain of **HyperText Markup Language** (HTML),
    and Drupal is no exception in its use of HTML here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a quick crash course on various aspects of HTML before we go any
    further:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simplicity:** From tables and frames to lists and images, as well as specifying
    fonts and styles, HTML is a convenient and readily understandable convention for
    web-page creation and layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform independence:** HTML is platform independent (although not all browsers
    are exactly the same), which makes sense if you think about it; the last thing
    you would want, as the builder of a website, is to have to cater for every different
    type of machine that could make use of HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags:** HTML comes in the form of opening and closing tags, which tell your
    browser how to display the information enclosed within them. For example, the
    title of a page would be enclosed within the title tags like this:`<title>My Title
    Page</title>`. Notice that a forward slash is used to distinguish a closing tag
    from an opening tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attributes:** Tags can have attributes, which can modify or define certain
    aspects of a tag''s behavior. For example, the `size` attribute in the following
    HTML snippet defines the size of the font,`<font size="2">I have a font size of
    2</font>`, when it is rendered in a browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sections:** An HTML page is enclosed within`<html></html>` tags and is divided
    into`<head></head>` and`<body></body>` sections. The body tags enclose the bulk
    of the page and contain the information seen on the actual web page. In our case,
    we need not worry about this because all content is automatically posted between
    the`<body>` tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This gives us a fair overview of what HTML is and does, but for practical purposes
    it is important to see what can be achieved right here and now using the HTML
    that is available to us. Actually, all HTML tags are available for you as the
    administrator to use, but recall that you should only use this account during
    development; once your site has gone live, you should post content using an input
    format that you have designed for the task. Because of this you will need to know
    what the tags actually do.
  prefs: []
  type: TYPE_NORMAL
- en: The following table discusses each of the default allowed tags along with the`<img>`
    tag that has just been added. Bear in mind that it is not really practical to
    show each and every attribute for each tag here, so if you would like to learn
    more about each tag individually, then please take a look at `http://www.w3schools.com`,
    which is an excellent resource for all things HTML and more.
  prefs: []
  type: TYPE_NORMAL
- en: '| Tag | Important Attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `<img>` | `src:` gives the path to the image file`alt:` holds a description
    of the image | The`<img>` tag, unlike other tags, does not require a closing`</img>`
    tag. It is used to display images within HTML pages, and through the use of optional
    attributes can accurately control the appearance and layout of images. |'
  prefs: []
  type: TYPE_TB
- en: '| `<a>` | `href:` specifies the destination URL of the link`name:` allows bookmarks
    to be created within web pages.`target:` defines where to open the link—most often
    this is a new page, `_blank`, or the same page, `_self`. | The anchor element
    facilitates the creation of hyperlinks or bookmarks, which can be navigated by
    users. |'
  prefs: []
  type: TYPE_TB
- en: '| `<em>` |   | The emphasis tag converts standard text to italics. |'
  prefs: []
  type: TYPE_TB
- en: '| `<strong>` |   | The strong tag renders text in bold. |'
  prefs: []
  type: TYPE_TB
- en: '| `<cite>` | `title:` can be used to specify the source or author of the citation
    in question | The citation tag allows text to be referenced as coming from another
    source or author. It is often rendered in italics. |'
  prefs: []
  type: TYPE_TB
- en: '| `<code>` |   | The code tag changes the style of the enclosed text to mimic
    computer code''s style. |'
  prefs: []
  type: TYPE_TB
- en: '| `<ul>` | `type:` defines the type of bullet point to be used: `disc, square`,
    or `circle`. | The unordered list creates a list of bullet points—it requires
    the use of the`<li>` tag to stipulate items in the list. |'
  prefs: []
  type: TYPE_TB
- en: '| `<ol>` |   | The order list creates a numbered list of bullets—it requires
    the use of the`<li>` tag to stipulate items in the list. |'
  prefs: []
  type: TYPE_TB
- en: '| `<li>` |   | The list item tag creates a new item within either an ordered
    or unordered list; because of this it is contained within`<ul></ul>or <ol></ol>`
    tags. |'
  prefs: []
  type: TYPE_TB
- en: '| `<dl>` |   | The definition list tag creates a structured list of items that
    are defined by the`<dt>` and`<dd>` tags. |'
  prefs: []
  type: TYPE_TB
- en: '| `<dt>` |   | The definition term tag creates a term within a definition list.
    It is contained within`<dl></dl>` tags. |'
  prefs: []
  type: TYPE_TB
- en: '| `<dd>` |   | The definition description tag creates a description of its
    parent term—it is contained within`<dl></dl>` tags. |'
  prefs: []
  type: TYPE_TB
- en: This table really only lists a fraction of all the tags that are available to
    you to use. Most tags also have a wide variety of required, optional, or event-based
    attributes that you can play around with in order to achieve the desired effect.
    There is one other tag that we will need to make use of in order to lay out pages
    properly, and that is the all important`<table>` element. Tables are used to order
    and place content within a page and make use of the`<tr>` tag, which defines a
    new row in the table, and`<td>` tags, which define new cells within that row.
    As an exercise, head on back to your newly created input format, and add these
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: This table really only lists a fraction of all the tags that are available to
    you to use. Most tags also have a wide variety of required, optional, or event-based
    attributes that you can play around with in order to achieve the desired effect.
    There is one other tag that we will need to make use of in order to lay out pages
    properly, and that is the all important`<table>` element. Tables are used to order
    and place content within a page and make use of the`<tr>` tag, which defines a
    new row in the table, and`<td>` tags, which define new cells within that row.
    As an exercise, head on back to your newly created input format, and add these
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: With that out of the way, we are ready to begin creating a slightly more advanced
    posting than all the previous ones.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Feature-Rich Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the cool things about creating a new page like this is that once it is
    done, you can reuse the code pretty much anywhere else, substituting in only those
    values or content that need to change. Obviously, you want the site to look fairly
    uniform and this supports the principle of code reuse—at least in terms of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: It is quite likely that at some stage you will want to create more than just
    one standalone page. If this is the case, simply cut and paste whatever page you
    have created here and make whatever modification you need, before posting. Doing
    things in this way will lend all your pages a similar look and feel above and
    beyond the attributes already given to them by the current theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *about us* page is going to have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Well-structured content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of objectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline pictures of the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of important links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some dynamic, PHP-based content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advertising
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to meet the requirements stated, we are going to need to make use
    of the following tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<table>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ol>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ul>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<img>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<a>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: along with a few others, which we will use to demonstrate the various types
    of font styles available. In order to create a slightly more complex page like
    this, you should consider working with a proper code/HTML editor (something like
    EditPlus,[http://www.editplus.com](http://www.editplus.com) , will do— alternatively,
    a simple search on Google will turn up many results, some of which are free) that
    can indent your code automatically as well as color code the various tags and
    content, to make life easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK; we are pretty much ready to begin. I am going to list the entire page''s
    code piece by piece instead of all at once because there are quite a few important
    things that are worth discussing as we go. However, nothing here is too complicated
    once you have the hang of HTML and PHP. Before we begin, it is better that we
    look at the resulting page to get a good idea of what we are working towards.
    The following screenshot shows the bulk of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Feature-Rich Page](img/1800_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I hope you'll agree that this page is fairly pleasing to the eye! For very little
    work it is quite easy to achieve a look and layout such as this. What isn't apparent
    from this page is that the list of names given here, along with their email links,
    was provided by a short PHP script that was embedded into the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get on with the code—to start with, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This first section is used to declare the table, which will ultimately be responsible
    for laying out all the content in the places we want to put it. Notice that I
    have used two table attributes here. The first one, `border`, is set to `0`, which
    means that the border is invisible. *Why have I done this?* It's a good idea while
    you are building your table to set the border to `1`, so that you can see what
    you are doing. When you begin making complex, nested tables and so on, you will
    find that errors sometimes creep in. Being able to see what your table border
    looks like is a great help in this case. Once you are finished, simply set the
    border value to `0` to remove the frames from the page.
  prefs: []
  type: TYPE_NORMAL
- en: The next option, `cellpadding`, gives each cell in the table a bit of space
    (or padding, if you prefer) so that content doesn't appear all bunched up together.
    You can also see that we have a series of table rows and table cells declared
    in the form of`<tr>` and`<td>` tags. However, the first`<td>` tag has two attributes,
    which control where the content is placed within the cell (align) and how many
    columns this cell spans (colspan). This was necessary because at a later stage
    the image to be added took up a cell on the right-hand side of the table, but
    the rows above and below still needed to fill the whole page (the whole page being
    two columns in this case, hence the setting `colspan="2")`.
  prefs: []
  type: TYPE_NORMAL
- en: To get a clearer picture of what I mean, take a look at the following screenshot
    with the `border` attribute set to `1:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Feature-Rich Page](img/1800_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the rows, above and below, all span both columns of the center rows.
    You will often need to play around a bit in order to get things right when working
    on more complicated tables.
  prefs: []
  type: TYPE_NORMAL
- en: If you look past this snippet of code in the previous listing you will notice
    the use of the`<cite>` tag, with a `title` attribute defined. This is here to
    show you a novel use for providing references. If a user hovers their cursor over
    the text contained within the`<cite>` tag (in this instance, `Cape Town)`, the
    text defined in the `title` attribute (in this case, `South Africa)` will be displayed
    on screen. In this way you can clarify or explain important terms without cluttering
    up your pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing along, we get the following ordered list of goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, each list item contains exactly one line of content (or one
    goal, in this case), and all are contained within the`<ol>` and`</ol>` tags. This
    is simple enough, but is fairly effective as I am sure you will agree. The next
    section is where we meet some PHP code as well as insert our image of the team:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we have been quite sneaky, as you will see! To summarize, in
    this section we:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an unordered list with the`<ul>` tag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Opened up a PHP script by using the`<?php` tag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created an array of team member names
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Used a `foreach` loop, to iterate through each name in the array
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtained the first name of each member by using the built-in `explode` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Echoed the results, replete with HTML tags to the screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The actual email links were created using the`<a>` tag and the special `mailto`
    option within the `href` attribute. The email addresses were built from the first
    name of the team member so the first two addresses are`<[Tolis@cwc.org](mailto:Tolis@cwc.org)>`
    and`<[David@cwc.org](mailto:David@cwc.org)>`. This is slightly contrived as you
    might not have such an ordered system to your email addresses, but it serves to
    demonstrate how PHP can be embedded into your pages quite nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the email addresses have all been listed, we create a table cell adjacent
    to them and use the image tag to insert the picture of the team. As you can see,
    there are three attributes used here to get things done. The first, `src`, gives
    the path to the image file to be displayed; the second gives a description of
    the photo so that if someone hovers their cursor over the picture, the text **The
    Team** will be displayed; finally, we picked a size for the width of the photo
    in order to fit it to the page properly. Take note:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep image files small! You can reduce their quality and size using image editing
    software—large images slow down your site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following section of HTML prints out a list of links to a few other organizations
    that may be of interest to users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This part is fairly straightforward, with the exception of the fact that we
    are now using a new attribute for the`<a>` tag. Because we would rather have people
    remaining on the site without moving off to visit our friends, we have set the
    target attribute to `_blank` to force the browser to open up a new window to display
    the target URL. Other than that, this section is pretty clear, so we move on to
    the last item on the page—the advertisement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes use of both a hyperlink and an image file. In effect, we have turned
    the image, the *Packt* logo, into a hyperlink by enclosing it within`<a>` and`</a>`
    tags. This means that people can not only view the sponsor''s logo, but if they
    wish, they can also visit the sponsor''s site directly by clicking on the image.
    If your sponsors wished to track how many times people followed links from your
    site, they might require you to modify the target URL to provide them with some
    additional information. For example, you might end up making the hyperlink reference
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Actually, things like tracking banner ads can get fairly complicated, but that
    is a whole other story; so we won't go into it here!
  prefs: []
  type: TYPE_NORMAL
- en: With that done, you not only have a nice, shiny new *about us* page, but you
    also have a rough template from which to make other pages with a similar look
    and feel. There is actually a lot more that goes into giving your pages their
    look and feel, but this involves the use of themes, which we have not yet discussed
    (these will actually be discussed in detail in the following chapter).
  prefs: []
  type: TYPE_NORMAL
- en: With the page completed, we are not quite finished yet, because it still needs
    to be added to the site. In order to do this, we need to look at how to actually
    work with the content we are adding.
  prefs: []
  type: TYPE_NORMAL
- en: Posting a Feature-Rich Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We saw earlier in the *Working with Content* section how to post pages, although
    we didn''t really have any fairly complex pages to work with at that stage. This
    brief section will show you the process for getting your more complex pages up
    and on the site. The following list shows the steps required:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new content post, or edit one that is to be modified. In our case,
    we have an *about us* page already, so as the administrator we can simply click
    on the **edit** tab when viewing the **about us** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter or modify the title of the page accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct input format. In this case we have a specially created format
    called **Inline images**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the HTML created in your HTML or code editor into the **Body**
    text area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **Authoring information** and **Publishing options** are all correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload any image files that are needed for this post and ensure that you enter
    the correct file path and name into your code. For example, the **File attachments**
    section of the **about us** page looks like this:![Posting a Feature-Rich Page](img/1800_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, I have not decolorized the bnmv.jpg image as I wanted to preserve
    its quality for the purposes of the book—however, you should probably aim for
    image sizes under 10KB.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compare the file paths shown in this screenshot to the ones presented in the
    code (these file paths are what you would expect when the download method for
    files is set to Public):'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: src="img/bnmv.jpg" src="img/PacktLogosmall.png"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that in the code, we need to give only the relative file path and not
    the fully qualified one. Because the page is being called from the drupal directory,
    which contains the files directory, we need to show only the file path and name
    from files onwards.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you find that instead of getting a file path like the ones shown in this
    demonstration, you get something like `http://localhost/drupal/system/files?file=PacktLogoSmall.png`,
    then it is because you have the **Download method** set to **Private** in the
    **File system settings** section of the **settings** menu item under **administer**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that files are uploaded somewhere outside of the document root (this
    is set in the same section under **File system path)**, and you need to enter
    the fully qualified file path instead of simply the relative file path as we did
    here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For something like the *about us* page it is probably best to disable comments
    as you really want this to be a standalone page and not subject to any debate
    from the rest of the community.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, ensure that the menu settings are appropriate for the page you are adding.
    In this case, we have the following settings in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Posting a Feature-Rich Page](img/1800_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! Once you are ready to view the page, click on **Preview**, and if
    everything looks in order, submit it. You can easily edit it again if anything
    is wrong; so don't fret too much about getting everything just right before you
    look at it on the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this section should hopefully have you feeling quite good about how easy
    it is to create really nice pages for your site. Obviously, if you are not familiar
    with either HTML or PHP, you will need to practice a bit with these, but the following
    links should give you a good start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.php.net](http://www.php.net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.phpbuilder.com](http://www.phpbuilder.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.htmlgoodies.com](http://www.htmlgoodies.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.w3schools.com](http://www.w3schools.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know how to post and work with content, it is important that you
    learn how to classify and organize that content so that the archive of information
    that piles up on your site over time doesn't simply become an unsorted heap of
    laundry, but instead becomes an intuitive and easy-to-use resource of information.
    In order to achieve this, we need to discuss…
  prefs: []
  type: TYPE_NORMAL
- en: Categorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first glance it might seem that categorization and taxonomy are yet more
    terms used as indicators that your job is going to be more complex for some reason
    or other. After all, it's perfectly reasonable to set up a website facility to
    allow blog writers to blog, forum posters to post, administrators to administer,
    or any other type of content producer to produce content and leave it at that.
    With what we have covered so far this is all quite possible, so *why does Drupal
    insist on adding the burden of learning about new concepts and terms?*
  prefs: []
  type: TYPE_NORMAL
- en: If you know that your site is never going to gather a substantial amount of
    content, then spending time working with taxonomies and so on is probably not
    going to bring much advantage—you can simply go ahead and enable whatever content
    types you require and let users add whatever they please. However, our aim is
    not generally to remain in obscurity when creating a website, so assuming that
    you want to attract a large community of users, you will find that the method
    of categorizing content in Drupal makes it one of the most sophisticated content
    management systems around—no kidding!
  prefs: []
  type: TYPE_NORMAL
- en: Take the time to master working with categories and taxonomy in Drupal, because
    not only will this help you to work out how to manage your content better, but
    it will also really set your site apart from others because of the flexible and
    intuitive manner in which the content is organized. You will also find that you
    can manage a site of pretty much any size imaginable (just in case what you are
    working on is what becomes *the next big thing)*, because of the manner in which
    content is associated with terms and categories.
  prefs: []
  type: TYPE_NORMAL
- en: What and Why?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Taxonomy** is described as the science of classification. In terms of how
    it applies to Drupal, it is the *method by which content is organized* using several
    distinct types of relationship between terms. Simple as that! This doesn''t really
    encompass how useful it is, though, but before we move on to that, there is a
    bit of terminology that we should pick up first:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Descriptor:** A term used to describe content (also known as a *term)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vocabulary:** A grouping of related descriptors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Category:** A synonym for vocabulary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thesaurus:** A categorization of content, which describes *is similar to*
    relationships'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taxonomy:** A categorization of content into a hierarchical structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tagging:** The process of associating a term (descriptor) with content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synonym:** Can be thought of as *another word for* the current descriptor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It may help to view the following diagram in order to properly grasp how these
    terms inter-relate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What and Why?](img/1800_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This serves to illustrate the fact that there are two main types of vocabulary.
    Each type consists of a set of descriptors, but the relationship between them
    are different in that taxonomy deals with a hierarchy of information, and thesaurus
    deals with relationships between terms. The descriptors (shown as small boxes)
    and their relationships (shown as arrows) play a critical role in which type of
    vocabulary you use.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen an example of a taxonomy when the forum module was discussed.
    In this case there was a hierarchical relationship between forum containers and
    the forum topics they contained. But what would we need thesauri for? Well, if
    you were working on creating a scientific document and you wanted to allow plenty
    of references between terms so that users could browse related pages, which didn't
    necessarily have child-parent relationships, then you would go for this type of
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: So we know that we can classify content in Drupal, but *why is this useful?*
    One of the things that makes the Drupal taxonomy system so powerful is that it
    allows content to be categorized when it is created. This removes the burden on
    the administrators of the site in terms of manpower, because it is no longer necessary
    to moderate every bit of content coming into the site in order to put it into
    pre-determined categories.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to tag a given node more than once. This means that content
    can belong to several vocabularies at once. This is very useful for cross-referencing
    purposes because it highlights relationships between descriptors or vocabularies
    through the actual nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Taxonomies in Drupal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to talk about how to implement some form of categorization is to
    see it in action. As you might expect from Drupal by now, there are quite a few
    settings to work with and consider, in order to get things up and running. Let's
    assume that the CWC demo site has enlisted a large number of specialists who will
    maintain their own blogs on the website so that interested parties can keep tabs
    on what's news according to the people in the know.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is assumed that some people will be happy with visiting their blog of
    choice and reading over any new postings there, but some people might want to
    be able to search for specific topics in order to see if there are correlations
    or disagreements between bloggers on certain subjects. Since there is going to
    be a lot of content posted once the site has been up and running for a few months,
    we need some way to ensure that specific topics are easy to find regardless of
    who has been discussing them on their blogs.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Vocabularies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s quickly discuss how categories are dealt with in the administration
    tool in order to work out how to go about making sure this requirement is satisfied.
    If you click on the **categories** link under **administer**, you will be presented
    with a page listing the current vocabularies. Assuming you have created a forum
    during the last few chapters, you should have something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Vocabularies](img/1800_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we look at editing terms and vocabularies, let''s take a look at how
    to create a vocabulary for ourselves. Click on the **add vocabulary** tab to bring
    up the following page, which we can use to create our first vocabulary manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Vocabularies](img/1800_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By way of example, this vocabulary will deal with the topic of hunting, and
    there are a couple of friendly notes to guide users when they intend to submit
    a blog entry. This only applies to blog entries because that is the only content
    (or node) type for which this vocabulary is enabled—you can select as many or
    as few as you like, depending on how many content types you want this vocabulary
    to apply to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking further down the page, there are several other options, which we will
    discuss in more detail shortly. Clicking on **Submit** adds this vocabulary to
    the list, so that the main page now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Vocabularies](img/1800_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So far so good, but this will not be of much use to us as it stands! We need
    to add some terms (descriptors) in order to allow tagging to commence.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Descriptors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on **list terms** and then select the **add term** tab to bring up the
    following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with Descriptors](img/1800_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The term **Trapping** has been added here, with a brief description of the
    term itself, which can be used to guide contributors. We could, if we choose,
    associate the term **Snaring** with **Trapping** by making it a synonym. In this
    case, the term **Snaring** (or any other synonym you care to add) gets treated
    as the term **Trapping**. Edit the term **Trapping** so that the **Synonyms**
    option looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with Descriptors](img/1800_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Synonyms don''t actually do anything useful at the moment, unless you make
    use of the Glossary module—while it is not covered here, feel free to download
    and try it out for a bit of practice. Add a few more terms of your choice to this
    vocabulary so that your list looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dealing with Descriptors](img/1800_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now it's time to make use of these terms by posting some blog content.
  prefs: []
  type: TYPE_NORMAL
- en: Posting Content with Categories Enabled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using any account with the requisite permissions to add blog content, attempt
    to post to the site. You should now be able to view the newly inserted **Categories**
    section as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting Content with Categories Enabled](img/1800_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now comes the really, really clever bit! Once this blog node has been posted,
    users can view the blog as normal except that it now has its tagged descriptor
    displayed below the title as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting Content with Categories Enabled](img/1800_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice there is a pop-up window that holds the description of the term that
    will be displayed if the user hovers the cursor over the descriptor's link. *Talking
    of which, where does the descriptor link take us?* If you click on the term, in
    this case, **Canned**, you will be taken to a page listing all of the content
    that has been tagged with this term. This should really have you quite excited
    about using Drupal, because with very little work, users can now find focused
    content without having to look that hard—this is what content management is all
    about!
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What we have seen thus far is really only the start of things. As you can imagine,
    you can build an entire hierarchy of terms in a vocabulary to give you a fairly
    complex taxonomy. Remember that if it is a hierarchy you are building, then the
    broadest terms should be towards the top of the pile with the more focused terms
    near the bottom. At the moment, though, we don't really have a *hierarchy*, but
    rather, more of a *flat* structure.
  prefs: []
  type: TYPE_NORMAL
- en: '*What if we wanted a set of more specific descriptors, which would allow bloggers
    to tag their content (which focuses on specific types of Trapping, for example)?*
    The answer lies in editing the vocabulary to select a **Hierarchy** (under **categories)**
    option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchies](img/1800_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we wanted to add a term entitled **Snaring** to our vocabulary, specifically,
    under the term **Trapping**, we would simply click on the **add term** tab and
    select the relevant parent from the new **Parent** drop-down list that should
    now be available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchies](img/1800_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With this addition saved, the list of terms looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchies](img/1800_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That was fairly easy to do, and now we are free to create as complex a structure
    as we require by adding terms to their correct place in the hierarchy. You might
    expect Drupal to show you a breadcrumb trail of the hierarchy, but alas this functionality
    is not yet present. It is possible to add it manually, but that requires some
    PHP coding and modifications to the source files, which fall outside the scope
    of this book. If you are feeling adventurous, take a look at [http://www.greenash.net.au/posts/thoughts/basic_breadcrumbs_and_taxonomy](http://www.greenash.net.au/posts/thoughts/basic_breadcrumbs_and_taxonomy),
    which outlines a process to include the full hierarchy breadcrumb into your content
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what happens if your topic is slightly more complex than a straightforward
    hierarchy? For example, snaring is also a commonly used method of poaching, so
    it should also appear under **Poaching** in the hierarchy. This is easily achieved
    by selecting the **Multiple** option under the **Hierarchy** section when editing
    your vocabulary. Once this change is saved, you can edit the terms that you would
    like to fall under multiple categories, by holding down the **Shift** or **Control**
    key when making your selection in the **Parents** section of the **edit term**
    page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchies](img/1800_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That takes care of how the **Hierarchy** options affect the structure of Drupal's
    content. But it's not the end of the story yet.
  prefs: []
  type: TYPE_NORMAL
- en: Content Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*What if, in the demo site''s case, we have the term* **Trapping** *available
    to tag content (blog posts in this case) with, but someone is really talking about
    something other than hunting entirely and there happens to be some sort of content
    overlap?* An example scenario might be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Several specialists are contracted to maintain blogs about the African continent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They tag their content using a new **Africa** vocabulary, which contains terms
    like **nature, gazelle, predators, lakes, rivers, mountains, hunting, weather**,
    and **tourism**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You wish to be able to allow material that is created from the Africa blogs
    to be cross-referenced by hunting-related topics in the **Hunting** specialists'
    blogs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to achieve this it is necessary to create a new vocabulary called
    **Africa**. Attach this vocabulary to the blog content type, and then create several
    descriptors, ensuring that one of them is entitled **Hunting** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now when users attempt to post content, they are presented with not one but
    two options to classify their content, and assuming you have used the **Weight**
    option correctly, you can apply a kind of hierarchy to your tags. For example,
    a blog post on poaching by one of the **Africa** bloggers might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is posted to the site, it is then possible to view both categories
    on the content page instead of just one. In other words, the node has been tagged
    with several descriptors in what is known as **faceted tagging**. Basically, faceted
    tagging uses a *bottom up* system of classification, where facets or properties
    of the content are described by the terms. In this way a very intuitive method
    of classifying content can be created without users needing to understand the
    top-down path of a content hierarchy in order to find the content they are after.
    Ironically, in this case, the specific method of tagging used here helps to elucidate
    the hierarchy of terms too.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at this posting on the site confirms that users can now go directly
    to both the **Hunting** and **Poaching** category pages by clicking on the links
    provided in the posting.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is something slightly more subtle in all of this though. *Can you see
    it?* Drupal, by default, and at the time of writing, doesn''t provide us with
    a breadcrumb trail of categories so that we can view any category further up the
    hierarchy simply by viewing its content type. However, structuring your hierarchy
    using this method does exactly this. Take a look at the poaching post on the page
    we have just submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We know already from the **Hunting** vocabulary that it is the parent of **Poaching**.
    Yet, using only the single vocabulary, there is no way that a user could tell
    which category the **Poaching** term fell under. Doing things this way allows
    users to effectively navigate up a level by visiting **Hunting**, or staying at
    the same level by visiting **Poaching**. But there's a problem with this too.
  prefs: []
  type: TYPE_NORMAL
- en: '*What happens if one of the Hunting bloggers simply wants to make an entry
    and tag it with the* **Canned** *term from the* **Hunting** *vocabulary without
    having to first specify that this content also belongs to the* **Africa** *vocabulary?*
    The answer lies once again in editing the vocabulary page, which contains a **Required**
    checkbox right at the bottom. If this option is enabled, then posters must select
    at least one tag, but if we leave it unselected, then posters can choose whether
    to include a term from that vocabulary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Talking of new options, there are three others present here that we should
    take a look at quickly. Related terms does nothing on a standard Drupal site at
    the time of writing, although you might wish to play around with the *Glossary*
    module, which makes use of this feature. A related term can be considered to be
    a kind of cross-reference at the *vocabulary level*—as opposed to a synonym, which
    works at the *term level*. **Free tagging** is an interesting option because it
    allows posters to decide on their own terms for their content. Enabling this option
    for the **Hunting** vocabulary, for example, means posters are given the following
    category options when creating a blog entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that there is a red asterisk superscript above the **Hunting** category.
    This is because despite the fact that we are using free tagging, the **Required**
    option on the **edit vocabulary** page is still enabled—so something *has* to
    be entered here. Secondly, there is a drop-down list of all the tags available
    (starting with whatever letter you type). This means that giving people free reign
    to type in their own tags is not as random as it may at first seem, because they
    can still be guided as to what terms are already available using this drop-down
    list. In this way, Drupal can encourage a more coherent body of descriptors.
  prefs: []
  type: TYPE_NORMAL
- en: Free tagging has some pros in that it is far more flexible to allow free tagging
    because people can really tag their content exactly as they please—making the
    tagging system fit the content far more snugly. The problem is, however, that
    your vocabulary may well become unwieldy, because similar content could be tagged
    with entirely different descriptors, making it hard for users to find what they
    are looking for. If you are to allow this option, then you should ensure that
    the people who are using it are made aware of the fact that they should tag their
    content sensibly and in as uniform a manner as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'At any rate, if we were to continue with our posting on hunting, we might end
    up with something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, we have entered four descriptors for this blog entry; so when
    someone visits the site, they are presented with all four tags associated with
    this post, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should make note of the fact that it is not possible to create a hierarchy
    of terms using the free tagging system because every new tag is on the same level
    as all the other tags. So what you end up with is really a thesaurus instead of
    a taxonomy.
  prefs: []
  type: TYPE_NORMAL
- en: This can be very useful for someone who is using the content as reference material
    because if, for example, they clicked on the descriptor name of a post, which
    was only tagged with **clamps**, the page that displays all the posts associated
    with that tag would no doubt display the post we have just added. Because of this,
    the person would be able to see that **Trapping, bear traps**, and **gin-traps**
    are all related topics, and would be able to research related material by hopping
    around from post to post.
  prefs: []
  type: TYPE_NORMAL
- en: The final option available to us on the **edit vocabulary** page is **Multiple
    select**. This relates to free tagging in that if you have free tagging enabled,
    it is possible to enter more than one descriptor for each post—you simply separate
    each descriptor with a comma. However, if you want to allow for a more thesaurus-like
    structure of descriptors for your content, without enabling free tagging, you
    would simply enable **Multiple select**, and this would allow users to tag their
    posts with as many descriptors as are made available by the creator of the vocabulary.
    Effectively, this is a middle ground in terms of allowing some flexibility in
    the tagging while retaining control over how content is tagged.
  prefs: []
  type: TYPE_NORMAL
- en: 'With **Multiple select** enabled, and **Free tagging** disabled, you would
    then select the terms you would like to tag a post with in the same way as you
    selected multiple parents in the hierarchy section earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content Structure](img/1800_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With that we come to the end of the discussion on categorization. As mentioned
    when we first began working on this section, it may take a little while to get
    the hang of things, because the way in which the categorization works in Drupal
    is atypical and not obviously intuitive. However, once you have mastered it you
    will find that your content is readily accessible and well organized with little
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter out of the way, you will hopefully have a good understanding
    of the tasks that lie ahead in creating a fully functional, content-focused website.
    If you are not already familiar with HTML and PHP, then I recommend you spend
    some time learning a bit about HTML before continuing on with the next chapter.
    That said, you have seen how to create input formats to allow different types
    of HTML or PHP content into your posts, as well as looking at how to create a
    fairly nice HTML-based dynamic web page.
  prefs: []
  type: TYPE_NORMAL
- en: While this is certainly important in terms of creating an aesthetically pleasing
    site, the real nuts and bolts of your content management lesson came with the
    discussion on categorization. Drupal's taxonomy system sets it apart from other
    CMS technologies and provides the flexibility and power to implement pretty much
    any type of structure that we can imagine for our content. With powerful features
    like free tagging available at the click of a button, you are sitting at the controls
    of one of the best systems around.
  prefs: []
  type: TYPE_NORMAL
- en: Just because it is useful doesn't make it easy though, and you will no doubt
    need to spend some time putting into practice what has been discussed here. Once
    you are confident that you have set things up in line with the site's envisaged
    needs, you should also be able to make any modifications that might be required
    along the way with the minimum of fuss.
  prefs: []
  type: TYPE_NORMAL
- en: With much of the hard work out of the way, we can turn our attention to the
    most creative and, in my opinion, fun part of creating a Drupal site. The following
    chapter will discuss themes and how to create a unique and appealing look for
    the new site.
  prefs: []
  type: TYPE_NORMAL
