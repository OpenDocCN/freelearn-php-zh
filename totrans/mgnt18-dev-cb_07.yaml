- en: Chapter 7. Magento Backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering a backend controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an ACL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the system configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a grid from a database table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding customer attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with source models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a store owner, the backend is the interface to manage everything in their
    store. It is very important that everything is secured against visitors with bad
    intentions. The backend of a standard Magento installation is extendible in many
    ways, so everyone can extend it with custom pages, configuration, roles, and more.
  prefs: []
  type: TYPE_NORMAL
- en: By following the configuration patterns of Magento, all the security issues
    (access for anonymous users, a secured environment, and so on) are covered by
    the backend system of Magento. The recipes in this chapter describe all the ways
    in which you can extend your backend using Magento's best practices of extending
    the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a backend controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing that we will learn is how to extend the backend with a custom
    controller action. For this, we have to create a controller that is secured so
    that only logged-in backend users can see the content of this page.
  prefs: []
  type: TYPE_NORMAL
- en: You need a backend controller when you want to add an extra page to your backend.
    This is mostly the case when you are working with a custom form or overview that
    you need for your module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make the testing of the admin URLs easier, we will remove the secret key
    (the hash in the URL of a backend page) from the admin URLs. You can configure
    this in **System** | **Configuration** | **Admin** | **Security**. Change the
    configuration as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3329OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you want to add an extra page to your backend, you have to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app/code/local/Packt/Helloworld/etc/config.xml` file and add the
    following configuration under the `global` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration will initialize the `Adminhtml` module to look for controllers
    in the folders of the `Packt_Helloworld` module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following folders in the directories as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/controllers/Adminhtml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/controllers/Adminhtml/Helloworld`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the last folder, create the `IndexController.php` file with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you extend from the `Mage_Adminhtml_Controller_Action` class
    so that all the security cases are covered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache and navigate to the controller by going to the URL `http://magento-dev.local/index.php/admin/helloworld_index/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will give you a white page. This is normal because the action is empty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code in your `indexAction` function and reload the page.
    You will see that an empty backend page is returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The difference between a frontend and backend controller is the parent class.
    A backend controller extends another class as the frontend controller. A backend
    controller always extends from the `Mage_Adminhtml_Controller_Action` class. This
    class adds the security to the controller so that only authenticated users can
    have access to the controller action(s).
  prefs: []
  type: TYPE_NORMAL
- en: When we add the configuration in the `config.xml` file, we will extend the `controllers`
    folder of the `Mage_Adminhtml` module with the `controllers/Adminhtml` folder
    of our module. With the `before="Mage_Adminhtml"` option, Magento will look for
    a controller file in the folder of the module. Later, it will look in the `Mage_Adminhtml`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you create a backend controller for your module, make sure that you add
    the `Adminhtml/Modulename` folder in the `controllers` folder to avoid conflicts
    with the existing `Mage_Adminhtml` controllers.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some modules and tutorials, you will find the following configuration to
    link your backend controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is *not* recommended to do the configuration in this way because this will
    create issues when you work with frontend and backend controllers in the same
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While extending the backend, it is important to make sure that the user can
    easily navigate to your customized pages. The only alternative that you can use
    for this is to extend the **Admin** menu with your own items. With the Magento
    framework, it is possible to add menu items at every level in that menu.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, the only task that we have to do is add the right configuration,
    which is in the `adminhtml.xml` file, into the `etc` folder of the `Packt_Helloworld`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how you can add an extra menu item to the **Admin**
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we have to think about is where will we place an extra
    menu item in the **Admin** menu. For this test, we will place it under the **System**
    menu. Keep the system ID in mind. We have to use this for the menu configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second thing is to add the configuration in the `adminhtml.xml` file. Paste
    the following code under the `config` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `<helloworld>` tag, you see the `translate` and `module` attributes.
    When these attributes are set, the title will be translated using the helper class
    of the `helloworld` module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear the cache and reload the backend. While hovering over the system menu,
    you will see that a **Helloworld** link is displayed as shown the following screenshot:![How
    to do it...](img/3329OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To change the position of the menu item, we have to add the following `sort_order`
    tag in the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Admin** menu of Magento comprises all menu configuration data from the
    modules. The standard menu contains the following 10 root items:'
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promotions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newsletter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you want to add an item as a child of one of the root items, you have to
    use these tags in your configuration as we did for this recipe. The IDs of these
    menu items are declared in the configuration XML files of the Magento `core` modules.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily add extra root items to the menu, but you have to make sure that
    the menu doesn't become too long. When the root menu becomes too long, it will
    cause layout issues for smaller screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an ACL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, we created a backend controller action to which you
    can navigate. However, when you want to configure a custom admin role, you can't
    restrict the access to this page for a specific role. In this recipe, we will
    create an **ACL** (**Access Control List**) for our backend page and configure
    a role with restricted access to this page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every admin user has a role. These roles contain access permissions, so you
    can restrict access to some user roles. In this recipe, we will add an extra permission
    to the roles so that we can configure the access for our previously created page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how you can restrict the access to a backend page
    for specific users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we have to do is to check which ACLs are available. To know
    this, we can run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Or, we can navigate to the **Roles** page in the backend. This is located in
    **System** | **Permissions** | **Roles**. Click on **Add new role** and open the
    **Resources** tab. This will give you a list of all the available ACLs in the
    backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second step is to add an extra ACL to it. To do this, we can add the following
    configuration in the `adminhtml.xml` file under the `<config>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your cache and reload the **Resources** page in the backend. When you
    search for `Helloworld`, you will see that there is a checkbox available for our
    previously created ACL as shown in the following screenshot:![How to do it...](img/3329OS_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, our ACL is working. To verify this, we have to create a role
    with a user and log in to see that the user has access to the page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new role on the **Roles** page in **System** | **Permissions**. Name
    it `Test Helloworld` and check the **Helloworld test** and **Manage Products**
    ACL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a backend user on the **Users** page at **System** | **Permissions**.
    Fill the form and add the user to the role that we have just created, as shown
    in the following screenshot:![How to do it...](img/3329OS_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as the new user, and you will see that this user has access only to the
    pages that we have configured in the role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ACL system, it is possible to restrict backend pages for specific roles
    of users. For example, a product manager only has the rights to manage the products,
    categories, and promotion rules and the logistic partner only has access to the
    order pages.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Magento Community Edition, it is not possible to restrict the access
    to the data of a specific store. For example, a logistic partner can only see
    the orders of Store 1\. The restrictions are based on the controller actions.
  prefs: []
  type: TYPE_NORMAL
- en: When you don't create an ACL for a page, only the roles that have access to
    all resources can access the page. In most cases, this is the administrator. For
    other roles, it is not possible to access a page without an ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the system configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to save some configuration parameters for you module, you can
    use the Magento configuration table to save your configuration in it. You can
    find the configuration forms under **Configuration** in the **System** menu. In
    this recipe, we will add a configuration page in the system configuration with
    some configuration parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prepare yourselves to extend the `Packt_Helloworld` module with some extra configuration.
    Also, connect to your database because we will have to look at some tables.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps describe the procedure to create extra configuration parameters
    in the **Configuration** page under **System**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following files in the `app/code/local/Packt/Helloworld/etc/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`system.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminhtml.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second step is to create the configuration page. We will create a new tab
    in the left-hand side column under a new section. To create a section with the
    name `packt`, we have to add the following code in the `system.xml` file that
    we have just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add a configuration page, we have to add the following code under the `global`
    tag of the `system.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you clear the cache and reload the page, the **PACKT** section with the
    **Helloworld** tab appears in the menu as shown in the following screenshot:![How
    to do it...](img/3329OS_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you click on the link, you will see a 404 error. This is because we haven''t
    created an ACL for this configuration section. To add an ACL, we have to add the
    following code in the `adminhtml.xml` file that we have created in the first step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have to make sure that the ACL is added. To test this, you have to clear
    your cache and go to the **Roles** page at **System** | **Permissions**. On that
    page, click on the **Administrator** role, open the **Role Resources** tab, and
    change it to **Custom**. You will see your ACL entry in the list as shown in the
    following screenshot:![How to do it...](img/3329OS_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we see **Helloworld section** in the list, it means that the ACL is added.
    Don't save the role because this was just to verify ACL's addition. To make sure
    that all the ACL settings are in the backend session, we have to create a new
    backend session by logging out and then logging in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating an ACL, make sure that your custom ACL configuration follows the
    Magento XML tree where you have placed your page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you log in again, navigate to the configuration page and you will see an
    empty page. It's because the fields aren't added in the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new configuration field has to be in a configuration group. To add a new
    group, we have to add some configuration in the `system.xml` file. Add the following
    code under the `config/sections/helloworld` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On reloading the page, you will see nothing because there are no fields defined
    in the `<fields>` tag. To add a field (for example, `header_title`), we have to
    add the following code in the `<fields>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After clearing the cache and reloading the page, you will see a field in the
    configuration page as shown in the following screenshot:![How to do it...](img/3329OS_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a value in the field and save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see where the value is saved, we have to look in the `core_config_data`
    table. Run the following query to see the record of our field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This query returns all the values of the field as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_07_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To read the config data, we can use the `Mage::getStoreConfig('<path>')` function.
    In our case, the path is `helloworld/hellopage/header_title`. You can determine
    the path from the path column of the `core_config_data` table or from the `system.xml`
    files of the modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Magento configuration is saved in the `core_config_data` table. This table
    contains all the configuration values that you can set in **System** | **Configuration**
    from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every config setting can be configured at three levels:'
  prefs: []
  type: TYPE_NORMAL
- en: Global configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store view configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are working with multiple stores, this setup makes it possible to
    save a configuration value for every store view. You can switch the scope with
    the drop-down field in the upper-left corner of the screen, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3329OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The type of every configuration value is stored in the scope column. This scope
    has a different code for every level:'
  prefs: []
  type: TYPE_NORMAL
- en: default (for global configuration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: websites (for website configuration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stores (for stores)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For every configuration field, you can configure the scope in your `system.xml`
    file. This is done with the `use_in_store`, `use_in_website`, and `use_in_default`
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration path of a configuration parameter is set in the `system.xml`
    files of the modules. In the following XML path, you can determine the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When you convert this XML path to a configuration path, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, `$1` corresponds to `helloworld`, `$2` corresponds to `hellopage`,
    and `$3` corresponds to `header_title` or `is_enabled`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a grid from a database table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a Magento entity that was linked to a database
    table. In this recipe, we will create a backend interface so that backend users
    can see the data from this table in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an overview that will use the standard backend grid widget of
    Magento. This widget is widely used in the backend to display information in a
    grid as the **Manage Products** page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have to configure a backend controller, a menu item, an
    ACL, and the right `Block` files to render the grid output. Prepare yourselves
    to extend the backend with a custom grid.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we have to do is to create a backend controller for our grid.
    We will create a grid based on the subscription entity, so we will create `SubscriptionController`.
    Create a `SubscriptionController.php` file in the `app/code/local/Packt/Helloworld/controllers/Adminhtml/Helloworld/`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a menu item for the controller. When you add the following code in the
    `adminhtml.xml` file of the module, it will create a menu item under the **Customer**
    item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an ACL for the controller action. This can be done by adding the following
    code in the same `adminhtml.xml` file as we did for the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload your backend. The menu item is now in the menu under
    **Customer**. When you navigate to the page, you will see an empty backend page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a backend page that is linked to the menu. In the next steps, we
    will add a grid in the page. To do this, we have to create two blocks. The first
    block is for the wrapper (title, classes). The second one is for the grid where
    we will define the columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To create the wrapper block, create the `app/code/local/Packt/Helloworld/Block/Adminhtml`
    folder. In that folder, create a `Subscription.php` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `app/code/local/Packt/Helloworld/Block/Adminhtml/Subscription` folder
    with a `Grid.php` file in it. In that file, add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the blocks to the page, add the following code in the `indexAction()`
    function of the previously created controller file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the page and you will get the following output:![How to do it...](img/3329OS_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To change the page title, we have to go to the wrapper block class. This is
    the `app/code/local/Packt/Helloworld/Block/Adminhtml/Subscription.php` file. The
    `$this->_headerText` variable in the `__contsruct()` action contains the title
    of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the grid contains the **Subscription id**, **Firstname**, **Lastname**,
    and **Email**. In `_prepareColumns()`, we will add more columns to the grid so
    that it shows all the columns of the database table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `created_at` field is of the type `datetime`. When we add the following
    code in the `_prepareColumns()` function, we will see the `created_at` column
    with a date filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last column that we will add is the **status** column. In this column,
    we will add some HTML markup to the values. For this, we need to add the following
    code in the `_prepareColumns()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `frame_callback` column requires the `prepareStatusLayout()` function.
    Create the following function in the `grid` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The backend grid is one of the backend widgets that is available in Magento.
    Other widgets that are widely used are the forms or the tabbed left menu. The
    grid widget is made to display the content of a collection in a grid, where you
    can sort and filter on the columns. A pager is automatically included, which prevents
    out-of-memory exceptions when there is a very large number of records in a collection.
  prefs: []
  type: TYPE_NORMAL
- en: The rendering of the grid is done in the `Mage_Adminhtml_Block_Widget_Grid`
    class. Our grid directly extends this class and overwrites the functions that
    were needed to customize the output for our entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `_prepareCollection()` function, we initialize the collection where
    we will work. The `_prepareColumns()` function is used to define the columns of
    the grid. In the `_prepareColumns()` function, we can play with the definition
    of the columns. A column definition is done with the `$this->addColumn()` function.
    In this function, we will initialize an array with the parameters for the column.
    It is recommended to use the following parameters for every column:'
  prefs: []
  type: TYPE_NORMAL
- en: '`header` (column title)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index` (column in database)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sortable` (enables sorting for the column when true)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following parameters are optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width` (defines a width for the column)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frame_callback` (calls a function to render the value of a cell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` (defines the filter widget such as number, datetime, and options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options` (defines a source model when the type is `options`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding customer attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it is easy if we can add an attribute to a customer as we can do
    with products. This is possible, but there is no interface for adding attributes
    in the backend. We have to create it using a module that adds the attributes to
    the `customer` object. In this recipe, we will add a `loyaltynumber` field to
    the customer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For adding a `customer` attribute, the only task is to create an upgrade script
    which adds the attribute. Then, we have to link the attribute in the `form` table.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add the `loyaltynumber` attribute to your customer
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the upgrade script. In the previous chapters, we
    have created an `install` and `upgrade` script in the `app/code/local/Packt/Helloworld/sql/helloworld_setup`
    folder. Create an extra install script with the name `upgrade-002-003.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install the `customer` attribute, add the following code in that `install`
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a `text` attribute to the `customer` entity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The previous code was to create the attribute for the customer. In this step,
    we will add the attribute to the customer form in the backend. We can do this
    by adding the following code under the `@todo` comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To execute the upgrade script, update the version number from `0.0.2` to `0.0.3`
    in `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run the script, clear the caches and reload the page. When you navigate
    to a customer in the backend, you will see that the attribute is added in the
    form as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation of the `customer` attribute works in the same way as adding
    a `product` attribute via code. The only big difference is the entity type. Adding
    the field to the backend form of a customer is not as easy as for a product. For
    a customer, the fields to be displayed in the form are stored in the `eav_form_attribute`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: While rendering the form, Magento will get the data from this table and render
    the fields based on the configuration in the attribute. The customer address is
    another EAV entity related to the customer entity. Adding attributes to a customer
    address works in the same way as adding a customer entity.
  prefs: []
  type: TYPE_NORMAL
- en: Working with source models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento works with a lot of drop-down fields that you can select in the forms
    of the application. Also, we can make use of drop-down fields in our custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: A drop-down or multiselect field always has options that you can choose in this
    field. To render these options, Magento uses a class that returns the options.
    Such a class is called a **source model**.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see which source models Magento uses and how we can
    create a custom source model for a custom configuration field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will create a source model that is linked to a custom configuration
    field. This is done in the `Packt_Helloworld` module, which we will extend in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps describe how you can create your own source models for your
    form fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing that we have to create is a configuration field of the type
    drop-down. This has the same syntax as a normal configuration. In the `system.xml`
    file of the `Packt_Helloworld` module, add the following configuration under the
    `<fields>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear your cache and go to the configuration page. You will see that there
    is an additional drop-down field without options. To create the options, we have
    to link a source model to it. The next code adds a **Yes**/**No** option to the
    field. Add this under the `is_enabled` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create our own source model, we have to create a `Model` instance. Create
    the `Packt_Helloworld_Model_Source_Config_Relation` class. We can do this by creating
    a `Relation.php` file in the `app/code/local/Packt/Helloworld/Model/Source/Config`
    folder. Add the following content to that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To link the previously created source model to the block, we have to change
    the `source_model` line in the `system.xml` file. Change the line to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear your cache and you will see that the options of the field are changed
    based on the output from the source model, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A source model is a model instance with a `toOptionArray()` function. This
    function returns an array with all the items of the source array. This array has
    the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `value` key is the value of the `<option>` in the drop-down list. The `label`
    key is the text that appears in the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we configured a source model for a configuration field. We
    can also use source models in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: The product attribute in the backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer attribute in the backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The additional backend form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drop-down filter in backend grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration of the source model is mostly done in the configuration of
    the field. For EAV forms, the information of the source model is stored in the
    attribute configuration that is in the database.
  prefs: []
  type: TYPE_NORMAL
- en: When a drop-down or multiselect field is saved, it is always saved in a single
    field of the database. If a field is a drop-down, a value will be stored in that
    field. When the field is a multiselect field, a comma-separated list of the selected
    values will be saved in that field.
  prefs: []
  type: TYPE_NORMAL
