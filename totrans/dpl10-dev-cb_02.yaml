- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Content Building Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, Drupal is a content management system that excels in its editorial
    capabilities and content modeling. In this chapter, we will cover how to set up
    your content editing experience and add an editorial review workflow.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter dives into creating custom types and harnessing different fields
    to create advanced structured content. We will walk through customizing the forms
    used for creating content and learn how to customize the content’s display. The
    next thing we will learn is how to build custom landing pages using the `Layout
    Builder` module. We’ll also learn how to add and manage content and utilize menus
    for linking to content. At the end of this chapter, you will be able to create
    a custom authoring experience for your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s take a look at what topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the WYSIWYG editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an editorial workflow with content moderation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom content type with custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the form display for editing content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the display output of content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using layouts to build landing pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating menus and linking content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Workspaces to create content staging areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the WYSIWYG editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal is integrated with `Editor` module provides an API to integrate WYSIWYG
    editors, although CKEditor (the default editor) contributed modules can provide
    integrations with other WYSIWYG editors.
  prefs: []
  type: TYPE_NORMAL
- en: Text formats control the formatting of content and the WYSIWYG editor configuration
    for content authors. The standard Drupal installation profile provides a fully
    configured text format with the enabled CKEditor. We will walk through the steps
    of recreating this text format.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new text format with a custom CKEditor WYSIWYG
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before getting started, make sure the `CKEditor` module is installed. This module
    is automatically installed with Drupal’s standard installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create a new text format with a custom CKEditor WYSIWYG configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **Configuration** from the administrative toolbar and head to **Text formats
    and editors** under the **Content** **Authoring** heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add text format** to begin creating the next text format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the text format, such as the Editor format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select which roles have access to this format – this allows you to have granular
    control over what users can use when authoring content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CKEditor** from the **Text editor** select list. The configuration
    form for **CKEditor** will then be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may now use an in-place editor to drag buttons onto the provided toolbar
    to configure your **CKEditor** toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The text format edit form](img/Figure_2.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The text format edit form
  prefs: []
  type: TYPE_NORMAL
- en: 'Select any of the **Enabled filters** options, as shown in *Figure 2**.2*,
    except for **Display any HTML as plain text**. That would be counterintuitive
    to using a WYSIWYG editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Enabled filters checkboxes](img/Figure_2.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – The Enabled filters checkboxes
  prefs: []
  type: TYPE_NORMAL
- en: Once you’re satisfied, click on **Save configuration** to save your configuration
    and create the text filter. It will now be available to users when adding content
    to rich text fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Filter` modules provide text formats that control how rich text fields
    are presented to the user. Drupal will render rich text saved in a text area based
    on the defined text format for the field. Text fields with “*formatted*” in their
    title will respect text format settings; others will render in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The text formats and editor’s screen warns of a security risk due to improper
    configuration. This is because you could grant an anonymous user access to a text
    format that allows full HTML or allows image sources to be from remote URLs. This
    may leave your site open to **Cross-Site Scripting** (**XSS**) attacks. A cross-site
    scripting attack is when attackers can inject malicious client-side scripts into
    your site.
  prefs: []
  type: TYPE_NORMAL
- en: The `Editor` module provides a bridge to WYSIWYG editors and text formats. It
    alters the text format form and rendering to allow the integration of WYSIWYG
    editor libraries. This allows each text format to have a configuration for its
    WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, the `Editor` module alone does not provide an editor. The `CKEditor`
    module works with the Editor API to enable the usage of the WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: Contributed modules can provide support for other WYSIWYG editors. For instance,
    the `TinyMCE` module ([https://www.drupal.org/project/tinymce](https://www.drupal.org/project/tinymce))
    integrates Drupal with the `TinyMCE` editor (https://www.tiny.cloud/tinymce).
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal provides granular control of how rich text is rendered and in extensible
    ways, which we will discuss further.
  prefs: []
  type: TYPE_NORMAL
- en: Filter module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When string data is added to a field that supports text formats, the data is
    saved and preserved as it was originally entered. Enabled filters for a text format
    will not be applied until the content is viewed. Drupal works in such a way that
    it saves the original content and only filters on display.
  prefs: []
  type: TYPE_NORMAL
- en: With the `Filter` module enabled, you can specify how text is rendered based
    on the roles of the user who created the text. It is important to understand the
    filters that are applied to a text format that uses a WYSIWYG editor. For example,
    if you selected the **Display any HTML as plain text** option, the formatting
    done by the WYSIWYG editor would be stripped out when viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Improved links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A major component of WYSIWYG editing is the ability to insert links into other
    pieces of content or external sites. The default link button integrated with CKEditor
    allows for basic link embedding. This means that your content editors must know
    their internal content URLs ahead of time to link to them. A solution to this
    issue is the `Linkit` module at https://www.drupal.org/project/linkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `LinkIt` module can be installed with the following Composer and Drush
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Linkit` module provides a drop-in replacement for the default link functionality.
    It adds an auto-complete search for internal content and adds additional options
    for displaying the field. `Linkit` works by creating different profiles that allow
    you to control what content can be referenced, what attributes can be managed,
    and which users and roles can use a Linkit profile.
  prefs: []
  type: TYPE_NORMAL
- en: CKEditor plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CKEditor` module provides a plugin type called **CKEditorPlugin**. Plugins
    are small pieces of swappable functionality within Drupal. Plugins and plugin
    development will be covered in [*Chapter 8*](B18548_08.xhtml#_idTextAnchor264),
    *Plug and Play With Plugins*. This type provides integration between CKEditor
    and Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: The image and link capabilities are plugins defined within the `CKEditor` module.
    Additional plugins can be provided through contributed projects or custom development.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the `\Drupal\ckeditor5\Annotation\CKEditor5Plugin` class ([https://git.drupalcode.org/project/drupal/-/blob/10.0.x/core/modules/ckeditor5/src/Annotation/CKEditor5Plugin.php](https://git.drupalcode.org/project/drupal/-/blob/10.0.x/core/modules/ckeditor5/src/Annotation/CKEditor5Plugin.php))
    for the plugin definition and the `\Drupal\ckeditor5\Plugin\CKEditor5Plugin\ImageUpload`
    class (https://git.drupalcode.org/project/drupal/-/blob/10.0.x/core/modules/ckeditor5/src/Plugin/CKEditor5Plugin/ImageUpload.php)
    as a working example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [*Chapter 8*](B18548_08.xhtml#_idTextAnchor264), *Plug and Play With
    Plugins*, for the CKEditor 5 documentation (https://www.drupal.org/docs/core-modules-and-themes/core-modules/ckeditor-5-module).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an editorial workflow with content moderation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many organizations have an editorial workflow that must be followed before content
    can be published on the website. The `Content Moderation` module allows content
    created in Drupal to go through an editorial process before it is published. In
    this recipe, we will create a content moderation workflow that puts content in
    a draft state and then reviews, approves, and publishes it. The content remains
    in a draft state and is hidden from site visitors until it is published.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will be using the standard installation, which provides the
    Article content type. Any content type will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by installing the `Content Moderation` module and its dependent module,
    `Workflows`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit **Configuration** and then **Workflows**. This page lists all configured
    content moderation workflows. Click **Add workflow** to create a new workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Label** field, give it a label of **Approval workflow** and select
    **Content moderation** for **Workflow type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The workflow has two default states of **Draft** and **Published**. We need
    to add **Review** and **Approval** states. For each of our new states, click the
    **Add a new state** link. Fill in the **State** label and press **Save**. Leave
    the **Published** and **Default revision** checkboxes unchecked. Those should
    only be used for a published state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rearrange the states’ ordering so that it is **Draft**, **Review**, **Approval**,
    **Published**. Press **Save** at the bottom of the form so that our ordering is
    saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to create a transition to move a **Draft** to **Review**. Click
    **Add a new transition**. Set the **Transition** label to **Ready for review**.
    Select **Draft as a From state**. Then, select **Review as the To state** and
    press **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will create the Review to Approval transition. Click **Add a new transition**.
    Set the **Transition** label to **Needs approval**. Select **Review as a From
    state**. Then, select **Approval as the To state** and press **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must edit the default Publish transition. Uncheck **Draft from the From checkboxes**
    and select **Approval**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we must assign this workflow to content entities. Under **This workflow
    applies to**, look for **Content types**. Press **Select** and a dialog will open.
    Check **Article**, then press **Save** in the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Save** at the bottom of the form. Our content moderation workflow is
    now complete!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Without `Content Moderation`, publishable content entities only have two states:
    unpublished or published. There also are no permissions to control who can make
    an unpublished piece of content published or vice versa. `Content Moderation`
    solves this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Workflows` module provides an API for defining states and transitions.
    It is up to modules such as `Content Moderation` to provide Workflow Type plugins
    to bring meaningful functionality. The `Content Moderation` module integrates
    with the revision capabilities of Drupal content entities.
  prefs: []
  type: TYPE_NORMAL
- en: When editing a content entity that uses `Content Moderation`, there will be
    a **Moderation State** field. This field contains the states that a piece of content
    can transition to, based on the current user’s permissions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Content Moderation module documentation on [Drupal.org](https://Drupal.org):
    https://www.drupal.org/docs/8/core/modules/content-moderation/overview'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Workflows module documentation on `Drupal.org`: [https://www.drupal.org/docs/8/core/modules/workflows/overview](https://www.drupal.org/docs/8/core/modules/workflows/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom content type with custom fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal excels in the realm of content management by allowing different types
    of content. In this recipe, we will walk you through creating a custom content
    type. We will create a Services type that has some basic fields and can be used
    in a scenario that brings attention to a company’s provided services.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to add fields to a content type in this recipe, which
    generally goes hand in hand with making a new content type on a Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to **Structure** and then **Content types**. Click on **Add content type**
    to begin creating a new content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Services` as the name, and an optional description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Display settings** and uncheck the **Display author and date information**
    checkbox. This will hide the author and submitted time from services pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and manage fields** button to save the new content type
    and manage its fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, new content types have a **Body** field automatically added to them.
    We will keep this field in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will add a field that will provide a way to enter a marketing headline for
    the service. Click on **Add field**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Text (plain)** from the dropdown and enter **Marketing headline** as
    the label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The **Text (plain)** option is a regular text field. The **Text (formatted)**
    option will allow you to use text formats on the displayed text in the field.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save field settings** on the next form. On the following form, click
    on **Save settings** to finish adding the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The field has now been added, and content of this type can be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Drupal, content entities can have different bundles. A bundle refers to a
    different type of that entity type. The word *bundle* comes from it being a bundle
    of fields since each bundle of a content entity type can have different fields.
    When working with nodes, they are synonymous with content, and bundles for nodes
    are referred to as content types.
  prefs: []
  type: TYPE_NORMAL
- en: When a content type is created, a default body field is created for it. This
    is performed by calling the `node_add_body_field()` function in the `node.module`
    file. It is a great reference point for those who wish to see the steps for programmatically
    defining a bundle field outside of the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Fields can only be managed or added if the `Field UI` module is enabled. The
    `Field UI` module exposes the **Manage Fields**, **Manage Form Display**, and
    **Manage Display** options for entities, such as **Nodes**, **Blocks**, and **Taxonomy
    Terms**.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the form display for editing content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form modes allow a site administrator to customize the edit form when modifying
    a content entity. In the case of nodes, you can rearrange the order of fields
    and change the form elements used for a fields node edit form. There is also the
    `Field Group` module. The `Field Group` module allows you to group fields into
    fieldsets.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will install `Field Group` and modify the form display to
    create an `Article` content type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must add the `Field Group` module to the Drupal site using Composer
    and then install it with Drush:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To customize the form’s display mode, go to **Structure** and then **Content
    Types**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will modify the Article content type’s form. Click on and expand the **Operations**
    button and select **Manage** **form display**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add field group** to begin adding a new field group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Details Sidebar** from **Add a new group**, give this a **Label** of
    **Metadata**, and click **Save** and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Create group** on the next form and use the default values to finish
    creating the group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the newly created **Metata** group (as shown in *Figure 2**.3*) up from
    the **Disabled** section so that is it enabled. Directly above the **Disabled**
    label is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take the **Tags** field and drag it so that it is nested under the **Metadata**
    group – below it, and slightly to the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Manage Display form with the Tags widget moved underneath
    the Metadata field group component](img/Figure_2.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The Manage Display form with the Tags widget moved underneath the
    Metadata field group component
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Save** button at the bottom of the page to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to **Create a New Article**; you will find the **Metadata** tab in the sidebar,
    which contains the **Tags** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Article edit form, with the Tags element in the sidebar](img/Figure_2.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – The Article edit form, with the Tags element in the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a content entity form is built, the form is aware of the display mode to
    be used. Then, it invokes the display mode to build the components for each field
    using the specified field widgets.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to customize specific parts of the form without having to replace
    the entire form. Developers can create new field widgets or leverage ones from
    contributed modules to enhance the functionality of forms.
  prefs: []
  type: TYPE_NORMAL
- en: '`Field Group` does not create field widgets, but a new structure inside of
    the form display. It will then arrange field widgets into groupings. This provides
    a more organized content editing experience.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discuss more items for managing the form of a content entity in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing form display modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Additional form display modes can be added by visiting **Structure** and then
    **Display Modes** under **Form Modes**. Each content entity type has a hidden
    default form mode that always exists. Additional form display modes can be added
    and configured using the display management form.
  prefs: []
  type: TYPE_NORMAL
- en: On their own, these forms and their configured field widgets are not directly
    integrated with Drupal. Using custom code, or even contributed projects, they
    can be used to embed for special uses.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, there is the Register form mode for users. The user registration
    form is built using this display mode and the configured widgets instead of what
    is normally available when editing an existing user.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the display output of content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides display view modes that allow you to customize the fields and
    other properties attached to an entity. In this recipe, we will adjust the teaser
    display mode of an `Article` content type. Each field or property has controls
    for displaying the label, the format to display the information in, and additional
    settings for the format.
  prefs: []
  type: TYPE_NORMAL
- en: Harnessing view displays allows you to have full control over how content is
    viewed on your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, it is time to customize the form display mode by navigating to **Structure**
    and then **Content Types**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will modify the `Article` content type’s display. Click on the drop button
    arrow and select **Manage display**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Teaser view mode** option to modify it. **Teaser view mode**
    is used in node listings, such as the default home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Tags** field to the hidden section. The tags on an article will no
    longer be displayed when viewing a **Teaser** **view mode**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the settings cog icon for the `600` to `300`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save all the changes that you have made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the home page and review the changes that have taken effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default rendering system for an entity uses view displays. View display
    modes are configuration entities. Since view display modes are configuration entities,
    they can be exported using configuration management.
  prefs: []
  type: TYPE_NORMAL
- en: When a content entity is rendered, the view display goes through each field
    formatter configured in the display. The field formatter is the option chosen
    from the **Format** property of the **Manage Display** form and identifies what
    code should be used to render the field value. The field value is retrieved from
    the entity and passed to the field formatter plugin that has been instantiated
    with the configuration provided to the view display. This collection of render
    data is then passed through the rest of Drupal’s render pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discuss more items for managing the form of a content entity in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing view display modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Additional form display modes can be added by visiting **Structure** and then
    **Display Modes** under **View Modes**. Each content entity type has a hidden
    default view mode that always exists. Additional view display modes can be added
    and configured using the display management form.
  prefs: []
  type: TYPE_NORMAL
- en: These view modes can then be leveraged when displaying content with views, the
    Rendered entity field formatter for entity references, or when rendering entities
    with custom code.
  prefs: []
  type: TYPE_NORMAL
- en: Using layouts to build landing pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Layout Builder` module allows content creators to use a drag-and-drop interface
    to customize how content is displayed on a page. Unlike using field formatters
    in view display modes, this does not require a developer and can be customized
    for individual pieces of content. With `Layout Builder`, content creators select
    from different layouts available in the system and place blocks in them to build
    the page’s content. In this recipe, we will walk through installing `Layout Builder`
    and setting up the layout for the `Article` content type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will be using the standard installation, which provides the
    `Article` content type. Any content type will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by installing the `Layout Builder` module and its dependent module, `Layout
    Discovery`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We must opt into using `Layout Builder` for the display mode of our content
    type. Visit **Structure** and then **Content Types** and use the drop button for
    **Article** to click **Manage Display**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the section labeled **Layout options** and check the **Use Layout** **Builder**
    checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** to enable **Layout Builder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Manage Display** form should now show a **Manage** **layout** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Layout Builder` user interface to customize the **Article** layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the **Show content preview** checkbox is turned on. Uncheck this
    checkbox to turn off the generated sample preview content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add section** to create a new section and select **Two** **column layout**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **33%/67%** for the **Column** width and click **Add section**, leaving
    the administrative label empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have added our two-column section, we can move fields into those
    layout parts. Drag the **Image** field to the left part and the **Body** field
    to the right part of the new section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save** layout to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Without using code, we have now created a layout for Articles that places the
    image in a sidebar next to the article content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Layout Builder` module provides an alternative render system for entity
    types. Using `Layout Builder` is an opt-in process for each display mode of a
    content entity type. If the entity type’s display mode is not managed by `Layout
    Builder`, it falls back to the regular render system using field formatters.
  prefs: []
  type: TYPE_NORMAL
- en: Layouts are provided by layout plugins, which have matching Twig templates.
    Modules and themes can define new templates that can be used. `Layout Builder`
    leverages blocks to display content. The kinds of blocks available to be embedded
    in `Layout Builder` are based on blocks available to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '`Layout Builder` also exposes each field on the content entity as a block,
    allowing you to place each field in a different section.'
  prefs: []
  type: TYPE_NORMAL
- en: Like custom nodes or other entity templates, if you make changes to the layout
    plugin or nested elements without updating the corresponding Twig templates for
    the layout, you may see things render incorrectly. Be sure to review the Twig
    template accordingly when making such changes.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Layout Builder` was an exciting addition to Drupal when it first arrived and
    has many more features and customizations far beyond what was covered in this
    recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Layout Builder` user interface went through rigorous accessibility testing.
    The entire `Layout Builder` user interface can be navigated using a keyboard or
    other accessibility devices.
  prefs: []
  type: TYPE_NORMAL
- en: Custom layouts for each piece of content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When configuring the layout options, the `Layout Builder` user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The layout override is also stored in field data attached to the content entity,
    making it tracked with revisions! That means new drafts can be created for a piece
    of content with layout changes and they can be published through `Content` `Moderation`
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Additional modules to extend Layout Builder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a copious number of modules that extend `Layout Builder` to customize
    its experience and provide default layouts. For instance, if you use the Bootstrap
    front-end framework, the **Bootstrap Layout Builder** ([https://www.drupal.org/project/bootstrap_layout_builder](https://www.drupal.org/project/bootstrap_layout_builder))
    module provides a user interface for building layouts that use Bootstrap’s styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of modules that extend `Layout Builder` can be found on `Drupal.org`:
    [https://www.drupal.org/docs/8/core/modules/layout-builder/additional-modules](https://www.drupal.org/docs/8/core/modules/layout-builder/additional-modules).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Layout Builder module documentation on `Drupal.org`: [https://www.drupal.org/docs/8/core/modules/layout-builder](https://www.drupal.org/docs/8/core/modules/layout-builder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating menus and linking content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal allows you to link content being authored to a specified menu on the
    website, generally the main menu. You can, however, create a custom menu to provide
    links to content. In this recipe, we will show you how to create a custom menu
    and link content to it. We will then place the menu as a block on the page, in
    the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you have installed the standard installation profile
    and have the default node content types available for use. You should have some
    content created to create a link.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit **Structure** and click on **Menus**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add menu**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a title of **Sidebar menu** and an optional summary and then click on
    **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the menu has been saved, click on the **Add** **link** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a link title and then type in the title for a piece of content. The form
    will provide autocomplete suggestions for linkable content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** to save the menu link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the menu link saved, go to **Structure**, and then **Block layout**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Sidebar menu` and click on **Place block**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following form, click on **Save block**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View your Drupal site by clicking on **Home** in the administration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Menus and links are part of Drupal core. The ability to make custom menus and
    menu links is provided through the `Menu UI` module. This module is enabled on
    the standard installation but may not be in others.
  prefs: []
  type: TYPE_NORMAL
- en: The Link input of the menu link form allows you to begin typing content titles
    and easily link them to existing content. It will automatically convert the title
    into the internal path for you. Link input also accepts a regular path, such as
    `/node/1` or an external path. You may use `<front>` to link to the home page,
    `<nolink>` to render a non-linked anchor tag, and `<button>` for a keyboard-accessible
    text-only link.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Links can be managed through the content edit form itself, which will be covered
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Managing a contents menu link from its form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A piece of content can be added to a menu from the add or edit form. The menu
    settings section allows you to toggle the availability of a menu link. The menu
    link title will reflect the content’s title by default.
  prefs: []
  type: TYPE_NORMAL
- en: The parent item allows you to decide which menu and which item it will appear
    under. By default, content types only have the main menu allowed. Editing a content
    type can allow for multiple menus or only choosing a custom menu.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to populate the main menu or complimentary menu without having
    to visit the menu management screens.
  prefs: []
  type: TYPE_NORMAL
- en: Using Workspaces to create content staging areas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Workspaces` module provides a new way of working with content on your Drupal
    site. It allows you to have a live version of your site’s content and parallel
    draft versions. Normal content workflows involve multiple pieces of content that
    may be drafted and published at various times. The `Workspaces` module provides
    a way to create and prepare published drafts that release at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, during a big sporting event, articles are prepared based on whichever
    team wins. Once the winner is announced, that version of the site’s content can
    be published. In this recipe, we will install the `Workspaces` module and walk
    through using site versions.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the `Workspaces` module is an `Experimental` module.
    Modules that are marked as experimental are under active development and not considered
    stable. Experimental modules provide a way of adding new functionality to Drupal
    core more easily. You can read more about the experimental module policy on `Drupal.org`:
    [https://www.drupal.org/about/core/policies/core-change-policies/experimental/policy-and-list](https://www.drupal.org/about/core/policies/core-change-policies/experimental/policy-and-list).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will be using the Standard installation, which provides the
    `Basic Page` content type. Any content type will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by installing the `Workspaces` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit your Drupal site; you will notice the **Live** tab on the right of the
    toolbar; this is the current workspace identifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Live** to open the **Workspaces** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Stage workspace’s name and then click **Confirm** in the modal
    asking if we would like to activate and switch to the Stage workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create three or four new basic pages while using the Stage workspace and be
    sure to check **Promoted to front page** in the **Promotion** **options** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you visit the front page of your Drupal site, you should see the pages
    you created in the front page list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open your Drupal site in another browser, or private mode, where you are
    not logged in. You will see that the home page shows **No front-page content has
    been created yet.** This shows that the content is only published in the Stage
    workspace, not the live site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in your Drupal site, click on the **Stage** tab in your toolbar to open
    the workspace menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Publish content** to begin publishing your Stage content into the Live
    site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A confirmation form will appear. Click **Publish items to Live** to finish the
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you test your site in another browser, or private mode, again, you will see
    the home page now lists all your new pages!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Workspace` module uses the existing revision capabilities of content entities.
    Revisions are then tracked against a workspace until they are published to the
    Live workspace. The `Workspace` module also adds safeguards. Forms that manipulate
    site configuration cannot be saved unless in the Live workspace; the module displays
    a warning and disables the `Workspace` module only allows a piece of content to
    be edited in one workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Workspaces also have a user account associated with them. This allows segmented
    workspaces for specific users. This allows content creators to create a new workspace,
    but not view or modify another content creator’s workspace.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Workspaces` module provides other user interfaces not covered in this recipe,
    and there is another way to use a workspace beyond just content.
  prefs: []
  type: TYPE_NORMAL
- en: When will Workspaces become a stable module?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Effort is being made to make the `Workspaces` module stable. These issues are
    tagged in the Drupal core issue queue as **WI critical** (short for **Workflow
    Initiative Critical**). The list of issues can be found here: [https://www.drupal.org/project/issues/search/drupal?status%5B%5D=Open&issue_tags_op=%3D&issue_tags=WI+critical](https://www.drupal.org/project/issues/search/drupal?status%5B%5D=Open&issue_tags_op=%3D&issue_tags=WI+critical).'
  prefs: []
  type: TYPE_NORMAL
- en: Managing content changes in a workspace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the workspace menu is open in the toolbar, you can click the **Manage workspace**
    link to see all of the active changes in the workspace. This makes it easier for
    a content manager to review what content has been modified in a workspace. It
    also allows for deleting those changes to revert to the original content.
  prefs: []
  type: TYPE_NORMAL
- en: This overview is useful for reviewing all the changes that may be published
    to the Live workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Creating child workspaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A workspace may also have a parent workspace. This allows you to maintain a
    centralized Stage workspace but forces content creators to have their child workspace
    under Stage. All content modifications can then merge into Stage instead of each
    contributor’s workspace publishing to Live.
  prefs: []
  type: TYPE_NORMAL
- en: Using a workspace to test a new site redesign
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal has a mechanism for determining the active theme, which, by default,
    is the default theme. Code can be written to override the current theme based
    on specific conditions. The `Workspace Theme` module ([https://www.drupal.org/project/workspace_theme](https://www.drupal.org/project/workspace_theme))
    does just that.
  prefs: []
  type: TYPE_NORMAL
- en: It adds a new field to a workspace that allows you to specify a different theme
    to be used when that workspace is active. This allows you to preview a site’s
    redesign with a new theme without making it the default theme on the production
    site, or purely relying on a test server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Workspaces module documentation on `Drupal.org`: [https://www.drupal.org/docs/8/core/modules/workspace/](https://www.drupal.org/docs/8/core/modules/workspace/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
