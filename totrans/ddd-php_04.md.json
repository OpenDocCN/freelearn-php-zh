["```php\nnamespace Ddd\\Identity\\Domain\\Model;\n\nclass Person\n{\n    private $identificationNumber;\n    private $firstName;\n    private $lastName;\n\n    public function __construct(\n        $anIdentificationNumber, $aFirstName, $aLastName\n    ) {\n        $this->identificationNumber = $anIdentificationNumber;\n        $this->firstName = $aFirstName;\n        $this->lastName  = $aLastName;\n    }\n\n    public function identificationNumber()\n    {\n        return $this->identificationNumber;\n    }\n\n    public function firstName()\n    {\n        return $this->firstName;\n    }\n\n    public function lastName()\n    {\n        return $this->lastName;\n    }\n }\n\n```", "```php\nnamespace Ddd\\Billing\\Domain\\Model\\Order;\n\nclass Order\n{\n    private $id;\n    private $amount;\n    private $firstName;\n    private $lastName;\n\n    public function __construct(\n        $anId, Amount $amount, $aFirstName, $aLastName\n    ) {\n        $this->id = $anId;\n        $this->amount = $amount;\n        $this->firstName = $aFirstName;\n        $this->lastName = $aLastName;\n    }\n\n    public function id()\n    {\n        return $this->id;\n    }\n\n    public function firstName()\n    {\n        return $this->firstName;\n    }\n\n    public function lastName()\n    {\n        return $this->lastName;\n    }\n}\n\n```", "```php\nnamespace Ddd\\Billing\\Domain\\Model;\n\nclass OrderId\n{\n    private $id;\n\n    public function __construct($anId)\n    {\n        $this->id = $anId;\n    }\n\n    public function id()\n    {\n        return $this->id;\n    }\n\n    public function equalsTo(OrderId $anOrderId)\n    {\n        return $anOrderId->id === $this->id;\n    }\n}\n\n```", "```php\n class Order\n {\n     private $id;\n     private $amount;\n     private $firstName;\n     private $lastName;\n\n     public function __construct(\n         OrderId $anOrderId, Amount $amount, $aFirstName, $aLastName\n     ) {\n         $this->id = $anOrderId;\n         $this->amount = $amount;\n         $this->firstName = $aFirstName;\n         $this->lastName = $aLastName;\n     }\n\n     public function id()\n     {\n         return $this->id;\n     }\n\n     public function firstName()\n     {\n         return $this->firstName;\n     }\n\n     public function lastName()\n     {\n         return $this->lastName;\n     }\n\n     public function amount()\n     {\n         return $this->amount;\n     }\n}\n\n```", "```php\nCREATE TABLE `orders` (\n    `id` int(11) NOT NULL auto_increment,\n    `amount` decimal (10,5) NOT NULL,\n    `first_name` varchar(100) NOT NULL,\n    `last_name` varchar(100) NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nnamespace Ddd\\Identity\\Domain\\Model;\n\nclass Person\n{\n    private $identificationNumber;\n    private $firstName;\n    private $lastName;\n\n    public function __construct(\n        $anIdentificationNumber, $aFirstName, $aLastName\n    ) {\n        $this->identificationNumber = $anIdentificationNumber;\n        $this->firstName = $aFirstName;\n        $this->lastName = $aLastName;\n    } \n\n    public function identificationNumber()\n    {\n        return $this->identificationNumber;\n    }\n\n    public function firstName()\n    {\n        return $this->firstName;\n    }\n\n    public function lastName()\n    {\n        return $this->lastName;\n    }\n}\n\n```", "```php\nnamespace Ddd\\Common\\Domain\\Model;\n\nabstract class IdentifiableDomainObject\n{\n    private $id;\n\n    protected function id()\n    {\n        return $this->id;\n    }\n\n    protected function setId($anId)\n    {\n        $this->id = $anId;\n    }\n}\n\nnamespace Acme\\Billing\\Domain;\n\nuse Acme\\Common\\Domain\\IdentifiableDomainObject;\n\nclass Order extends IdentifiableDomainObject\n{\n    private $orderId;\n\n    public function orderId()\n    {\n        if (null === $this->orderId) {\n           $this->orderId = new OrderId($this->id());\n        }\n\n        return $this->orderId;\n    }\n }\n\n```", "```php\nnamespace Ddd\\Catalog\\Domain\\Model\\Book;\n\nclass ISBN\n{\n    private $isbn;\n\n    private function __construct($anIsbn)\n    {\n        $this->setIsbn($anIsbn);\n    }\n\n    private function setIsbn($anIsbn)\n    {\n        $this->assertIsbnIsValid($anIsbn, 'The ISBN is invalid.');\n\n        $this->isbn = $anIsbn;\n    }\n\n    public static function create($anIsbn)\n    {\n        return new static($anIsbn);\n    }\n\n    private function assertIsbnIsValid($anIsbn, $string)\n    {\n        // ... Validates an ISBN code\n    }\n}\n\n```", "```php\nclass Book\n{\n   private $isbn;\n   private $title;\n\n   public function __construct(ISBN $anIsbn, $aTitle)\n   {\n       $this->isbn  = $anIsbn;\n       $this->title = $aTitle;\n   }\n} \n\n```", "```php\n $book = new Book(\n     ISBN::create('...'),\n     'Domain-Driven Design in PHP'\n ); \n\n```", "```php\nnamespace Ddd\\Billing\\Domain\\Model\\Order;\n\ninterface OrderRepository\n{\n    public function nextIdentity();\n    public function add(Order $anOrder);\n    public function remove(Order $anOrder);\n}\n\n```", "```php\nnamespace Ddd\\Billing\\Infrastructure\\Domain\\Model\\Order;\n\nuse Ddd\\Billing\\Domain\\Model\\Order\\Order;\nuse Ddd\\Billing\\Domain\\Model\\Order\\OrderId;\nuse Ddd\\Billing\\Domain\\Model\\Order\\OrderRepository;\n\nuse Doctrine\\ORM\\EntityRepository;\n\nclass DoctrineOrderRepository\n    extends EntityRepository\n    implements OrderRepository\n{\n    public function nextIdentity()\n    {\n        return OrderId::create();\n    }\n\n    public function add(Order $anOrder)\n    {\n        $this->getEntityManager()->persist($anOrder);\n    }\n\n    public function remove(Order $anOrder)\n    {\n       $this->getEntityManager()->remove($anOrder);\n    }\n}\n\n```", "```php\nnamespace Ddd\\Billing\\Domain\\Model\\Order;\n\nuse Ramsey\\Uuid\\Uuid;\n\nclass OrderId\n{\n    private $id;\n\n    private function __construct($anId = null)\n    {\n        $this->id = $id ? :Uuid::uuid4()->toString();\n    }\n\n    public static function create($anId = null )\n    {\n        return new static($anId);\n    }\n}\n\n```", "```php\n > php composer.phar require \"doctrine/orm=^2.5\"\n\n```", "```php\nrequire_once '/path/to/vendor/autoload.php';\n\nuse Doctrine\\ORM\\Tools\\Setup;\nuse Doctrine\\ORM\\EntityManager;\n\n$paths = ['/path/to/entity-files'];\n$isDevMode = false;\n\n// the connection configuration\n$dbParams = [\n    'driver'   => 'pdo_mysql',\n    'user'     => 'the_database_username',\n    'password' => 'the_database_password',\n    'dbname'   => 'the_database_name',\n];\n\n$config = Setup::createAnnotationMetadataConfiguration($paths, $isDevMode);\n$entityManager = EntityManager::create($dbParams, $config);\n\n```", "```php\nuse Doctrine\\ORM\\Mapping\\Entity;\nuse Doctrine\\ORM\\Mapping\\Id;\nuse Doctrine\\ORM\\Mapping\\GeneratedValue;\nuse Doctrine\\ORM\\Mapping\\Column;\n\n/** @Entity */\nclass Order\n{\n    /** @Id @GeneratedValue(strategy=\"AUTO\") */\n    private $id;\n\n    /** @Column(type=\"decimal\", precision=\"10\", scale=\"5\") */\n    private $amount;\n\n    /** @Column(type=\"string\") */\n    private $firstName;\n\n    /** @Column(type=\"string\") */\n    private $lastName;\n\n    public function __construct(\n        Amount $anAmount,\n        $aFirstName,\n        $aLastName\n    ) {\n        $this->amount = $anAmount;\n        $this->firstName = $aFirstName;\n        $this->lastName = $aLastName;\n    }\n\n    public function id()\n    {\n        return $this->id;\n    }\n\n    public function firstName()\n    {\n        return $this->firstName;\n    }\n\n    public function lastName()\n    {\n        return $this->lastName;\n    }\n\n    public function amount()\n    {\n        return $this->amount;\n    }\n}\n\n```", "```php\n$order = new Order(\n    new Amount(15, Currency::EUR()),\n    'AFirstName',\n    'ALastName'\n);\n$entityManager->persist($order);\n$entityManager->flush();\n\n```", "```php\nrequire_once '/path/to/vendor/autoload.php';\n\nuse Doctrine\\ORM\\Tools\\Setup;\nuse Doctrine\\ORM\\EntityManager;\n\n$paths = ['/path/to/mapping-files'];\n$isDevMode = false;\n\n// the connection configuration\n$dbParams = [\n    'driver'   => 'pdo_mysql',\n    'user'     => 'the_database_username',\n    'password' => 'the_database_password',\n    'dbname'   => 'the_database_name',\n];\n\n$config = Setup::createXMLMetadataConfiguration($paths, $isDevMode);\n$entityManager = EntityManager::create($dbParams, $config);\n\n```", "```php\nAcme\\Billing\\Domain\\Model\\Order\n\n```", "```php\nAcme.Billing.Domain.Model.Order.dcm.xml\n\n```", "```php\nhttps://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\n\n```", "```php\nnamespace Ddd\\Billing\\Domain\\Model\\Order;\n\nuse Ramsey\\Uuid\\Uuid;\n\nclass OrderId\n{\n    // ...\n\n    public function __toString()\n    {\n        return $this->id;\n    }\n}\n\n```", "```php\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Doctrine\\DBAL\\Types\\GuidType;\n\nclass DoctrineOrderId extends GuidType\n{\n    public function getName()\n    {\n        return 'OrderId';\n    }\n\n    public function convertToDatabaseValue(\n        $value, AbstractPlatform $platform\n    ) {\n        return $value->id();\n    }\n\n    public function convertToPHPValue(\n        $value, AbstractPlatform $platform\n    ) {\n        return new OrderId($value);\n    }\n}\n\n```", "```php\nrequire_once '/path/to/vendor/autoload.php';\n\n// ...\n\n\\Doctrine\\DBAL\\Types\\Type::addType(\n     'OrderId',\n     'Ddd\\Billing\\Infrastructure\\Domain\\Model\\DoctrineOrderId'\n);\n\n$config = Setup::createXMLMetadataConfiguration($paths, $isDevMode);\n$entityManager = EntityManager::create($dbParams, $config);\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Ddd\\Billing\\Domain\\Model\\Order\"\n        table=\"orders\">\n\n        <id name=\"id\" column=\"id\" type=\"OrderId\" />\n\n        <field\n            name=\"amount\"\n            type=\"decimal\"\n            nullable=\"false\"\n            scale=\"10\"\n            precision=\"5\"\n        />\n        <field\n            name=\"firstName\"\n            type=\"string\"\n            nullable=\"false\"\n        />\n        <field\n            name=\"lastName\"\n            type=\"string\"\n            nullable=\"false\"\n        />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\nclass Post\n{\n    private $title;\n    private $content;\n    private $status;\n    private $createdAt;\n    private $publishedAt;\n\n    public function __construct($aContent, $title)\n    {\n        $this->setContent($aContent);\n        $this->setTitle($title);\n\n        $this->unpublish();\n        $this->createdAt(new DateTimeImmutable());\n    }\n\n    private function setContent($aContent)\n    {\n        $this->assertNotEmpty($aContent);\n\n        $this->content = $aContent;\n    }\n\n    private function setTitle($aPostTitle)\n    {\n        $this->assertNotEmpty($aPostTitle);\n\n        $this->title = $aPostTitle;\n    }\n\n    private function setStatus(Status $aPostStatus)\n    {\n        $this->assertIsAValidPostStatus($aPostStatus);\n\n        $this->status = $aPostStatus;\n    }\n\n    private function createdAt(DateTimeImmutable $aDate)\n    {\n        $this->assertIsAValidDate($aDate);\n\n        $this->createdAt = $aDate;\n    }\n\n    private function publishedAt(DateTimeImmutable $aDate)\n    {\n        $this->assertIsAValidDate($aDate);\n\n        $this->publishedAt = $aDate;\n    }\n\n    public function publish()\n    {\n        $this->setStatus(Status::published());\n        $this->publishedAt(new DateTimeImmutable());\n    }\n\n    public function unpublish()\n    {\n        $this->setStatus(Status::draft());\n        $this->publishedAt = null ;\n    }\n\n    public function isPublished()\n    {\n        return $this->status->equalsTo(Status::published());\n    }\n\n    public function publicationDate()\n    {\n        return $this->publishedAt;\n    }\n}\n\nclass Status\n{\n    const PUBLISHED = 10;\n    const DRAFT = 20;\n\n    private $status;\n\n    public static function published()\n    {\n        return new self(self::PUBLISHED);\n    }\n\n    public static function draft()\n    {\n        return new self(self::DRAFT);\n    }\n\n    private function __construct($aStatus)\n    {\n        $this->status = $aStatus;\n    }\n\n    public function equalsTo(self $aStatus)\n    {\n        return $this->status === $aStatus->status;\n    }\n}\n\n```", "```php\nclass PostTest extends PHPUnit_Framework_TestCase\n{\n     /** @test */\n     public function aNewPostIsNotPublishedByDefault()\n     {\n          $aPost = new Post(\n              'A Post Content',\n              'A Post Title'\n          );\n\n          $this->assertFalse(\n              $aPost->isPublished()\n          );\n\n          $this->assertNull(\n              $aPost->publicationDate()\n          );\n      }\n\n    /** @test */\n    public function aPostCanBePublishedWithAPublicationDate()\n    {\n        $aPost = new Post(\n            'A Post Content',\n            'A Post Title'\n        );\n\n        $aPost->publish();\n\n        $this->assertTrue(\n            $aPost->isPublished()\n        );\n\n        $this->assertInstanceOf(\n            'DateTimeImmutable',\n            $aPost->publicationDate()\n        );\n    }\n}\n\n```", "```php\nclass Post\n{\n    const NEW_TIME_INTERVAL_DAYS = 15;\n\n    // ...\n    private $createdAt;\n\n    public function __construct($aContent, $title)\n    {\n        // ...\n        $this->createdAt(new DateTimeImmutable());\n    }\n\n    // ...\n\n    public function isNew()\n    {\n        return\n            (new DateTimeImmutable())\n                 ->diff($this->createdAt)\n                 ->days <= self::NEW_TIME_INTERVAL_DAYS;\n    }\n}\n\n```", "```php\nclass Post\n{\n    // ...\n\n    public function __construct($aContent, $title, $createdAt = null)\n    {\n        // ...\n        $this->createdAt($createdAt ?: new DateTimeImmutable());\n    }\n\n    // ...\n\n    public function isNew($today = null)\n    {\n        return\n            ($today ? :new DateTimeImmutable())\n                ->diff($this->createdAt)\n                ->days <= self::NEW_TIME_INTERVAL_DAYS;\n    }\n}\n\n```", "```php\n$aPost = new Post(\n    'Hello world!',\n    'Hi',\n    new DateTimeImmutable()\n);\n\n$aPost->isNew(\n    new DateTimeImmutable()\n);\n\n```", "```php\nclass Post\n{\n    protected $createdAt;\n\n    public function isNew()\n    {\n        return\n            ($this->today())\n                ->diff($this->createdAt)\n                ->days <= self::NEW_TIME_INTERVAL_DAYS;\n    }\n\n    protected function today()\n    {\n        return new DateTimeImmutable();\n    }\n\n    protected function createdAt(DateTimeImmutable $aDate)\n    {\n        $this->assertIsAValidDate($aDate);\n\n        $this->createdAt = $aDate;\n    }\n}\n\n```", "```php\nclass PostTestClass extends Post\n{\n    private $today;\n\n    protected function today()\n    {\n       return $this->today;\n    }\n\n    public function setToday($today)\n    {\n       $this->today = $today;\n    }\n}\n\n```", "```php\nclass PostTest extends PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /** @test */\n    public function aPostIsNewIfIts15DaysOrLess()\n    {\n        $aPost = new PostTestClass(\n            'A Post Content' ,\n            'A Post Title'\n        );\n\n        $format = 'Y-m-d';\n        $dateString = '2016-01-01';\n        $createdAt = DateTimeImmutable::createFromFormat(\n            $format,\n            $dateString\n        );\n\n        $aPost->createdAt($createdAt);\n        $aPost->setToday(\n            $createdAt->add(\n                new DateInterval('P15D')\n            )\n        );\n\n        $this->assertTrue(\n            $aPost->isNew()\n        );\n\n        $aPost->setToday(\n            $createdAt->add(\n               new DateInterval('P16D')\n            )\n        );\n\n        $this->assertFalse(\n            $aPost->isNew()\n        );\n    }\n}\n\n```", "```php\nclass Post\n{\n    // ...\n    private $createdAt;\n\n    public function __construct($aContent, $title)\n    {\n        // ...\n        $this->createdAt(MyCustomDateTimeBuilder::today());\n    }\n\n    // ...\n\n    public function isNew()\n    {\n        return\n            (MyCustomDateTimeBuilder::today())\n                ->diff($this->createdAt)\n                ->days <= self::NEW_TIME_INTERVAL_DAYS;\n    }\n}\n\n```", "```php\nclass PostTest extends PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /** @test */\n    public function aPostIsNewIfIts15DaysOrLess()\n    {\n        $createdAt = DateTimeImmutable::createFromFormat(\n            'Y-m-d',\n            '2016-01-01'\n        );\n\n        MyCustomDateTimeBuilder::setReturnDates(\n            [\n                $createdAt,\n                $createdAt->add(\n                    new DateInterval('P15D')\n                ),\n                $createdAt->add(\n                    new DateInterval('P16D')\n                )\n            ] \n        );\n\n        $aPost = new Post(\n            'A Post Content' ,\n            'A Post Title'\n        );\n\n        $this->assertTrue(\n            $aPost->isNew()\n        );\n\n        $this->assertFalse(\n            $aPost->isNew()\n        );\n    } \n}\n\n```", "```php\nnamespace Domain;\n\nuse mimic as m;\n\nclass ComputerScientist {\n    private $name;\n    private $surname;\n\n    public function __construct($name, $surname) \n    {\n        $this->name = $name;\n        $this->surname = $surname;\n    }\n\n    public function rocks() \n    {\n        return $this->name . ' ' . $this->surname . ' rocks!';\n    }\n}\n\nassert(m\\prototype('Domain\\ComputerScientist')\n    instanceof Domain\\ComputerScientist);\n\nm\\hydrate('Domain\\ComputerScientist', [\n    'name'   =>'John' ,\n    'surname'=>'McCarthy'\n])->rocks(); //John McCarthy rocks!\n\nassert(m\\expose(\n    new Domain\\ComputerScientist('Grace', 'Hopper')) ==\n    [\n        'name'    => 'Grace' ,\n        'surname' => 'Hopper'\n    ]\n)\n\n```", "```php\nclass Username\n{\n    const MIN_LENGTH = 5;\n    const MAX_LENGTH = 10;\n    const FORMAT = '/^[a-zA-Z0-9_]+$/';\n\n    private $username;\n\n    public function __construct($username)\n    {\n        $this->setUsername($username);\n    }\n\n    private setUsername($username)\n    {\n        $this->assertNotEmpty($username);\n        $this->assertNotTooShort($username);\n        $this->assertNotTooLong($username);\n        $this->assertValidFormat($username);\n        $this->username = $username;\n    }\n\n    private function assertNotEmpty($username)\n    {\n        if (empty($username)) {\n            throw new InvalidArgumentException('Empty username');\n        }  \n    }\n\n    private function assertNotTooShort($username)\n    {\n        if (strlen($username) < self::MIN_LENGTH) {\n            throw new InvalidArgumentException(sprintf(\n                'Username must be %d characters or more',\n                self::MIN_LENGTH\n            ));\n        }\n    }\n\n    private function assertNotTooLong($username)\n    {\n        if (strlen( $username) > self::MAX_LENGTH) {\n            throw new InvalidArgumentException(sprintf(\n                'Username must be %d characters or less',\n                self::MAX_LENGTH\n            ));\n        }\n    }\n\n    private function assertValidFormat($username)\n    {\n        if (preg_match(self:: FORMAT, $username) !== 1) {\n            throw new InvalidArgumentException(\n                'Invalid username format'\n            );\n        }\n    }\n}\n\n```", "```php\nabstract class Validator\n{\n    private $validationHandler;\n\n    public function __construct(ValidationHandler $validationHandler)\n    {\n        $this->validationHandler = $validationHandler;\n    }\n\n    protected function handleError($error)\n    {\n        $this->validationHandler->handleError($error);\n    }\n\n    abstract public function validate();\n}\n\n```", "```php\nclass Location\n{\n    private $country;\n    private $city;\n    private $postcode;\n\n    public function __construct(\n        Country $country, City $city, Postcode $postcode\n    ) {\n        $this->country = $country;\n        $this->city = $city;\n        $this->postcode = $postcode;\n    }\n\n    public function country()\n    {\n        return $this->country;\n    }\n\n    public function city()\n    {\n        return $this->city;\n    }\n\n    public function postcode()\n    {\n        return $this->postcode;\n    }\n}\n\n```", "```php\nclass LocationValidator extends Validator\n{\n    private $location;\n\n    public function __construct(\n        Location $location, ValidationHandler $validationHandler\n    ) {\n        parent:: __construct($validationHandler);\n        $this->location = $location;\n    }\n\n    public function validate()\n    {\n        if (!$this->location->country()->hasCity(\n            $this->location->city()\n        )) {\n            $this->handleError('City not found');\n        }\n\n        if (!$this->location->city()->isPostcodeValid(\n            $this->location->postcode()\n        )) {\n            $this->handleError('Invalid postcode');\n        }\n    }\n}\n\n```", "```php\nclass Location\n{\n    // ...\n\n    public function validate(ValidationHandler $validationHandler)\n    {\n     $validator = new LocationValidator($this, $validationHandler);\n     $validator->validate();\n    }\n}\n\n```", "```php\nclass LocationValidationHandler implements ValidationHandler\n{\n    public function handleCityNotFoundInCountry();\n\n    public function handleInvalidPostcodeForCity();\n}\n\nclass LocationValidator\n{\n    private $location;\n    private $validationHandler;\n\n    public function __construct(\n        Location $location,\n        LocationValidationHandler $validationHandler\n    ) {\n        $this->location = $location;\n        $this->validationHandler = $validationHandler;\n    }\n\n    public function validate()\n    {\n        if (!$this->location->country()->hasCity(\n            $this->location->city()\n        )) {\n            $this->validationHandler->handleCityNotFoundInCountry();\n        } \n\n        if (! $this->location->city()->isPostcodeValid(\n            $this->location->postcode()\n        )) {\n            $this->validationHandler->handleInvalidPostcodeForCity();\n        }\n    }\n}\n\n```", "```php\nclass Location\n{\n   // ...\n\n    public function validate(\n        LocationValidationHandler $validationHandler\n    ) {\n        $validator = new LocationValidator($this, $validationHandler);\n        $validator->validate();\n    }\n}\n\n```", "```php\nclass Post\n{\n   // ...\n\n    public function publish()\n    {\n        $this->setStatus(\n            Status::published()\n        );\n\n        $this->publishedAt(new DateTimeImmutable());\n\n        DomainEventPublisher::instance()->publish(\n            new PostPublished($this->id)\n        );\n    }\n\n    public function unpublish()\n    {\n        $this->setStatus(\n            Status::draft()\n        );\n\n        $this-> publishedAt = null;\n\n        DomainEventPublisher::instance()->publish(\n            new PostUnpublished($this->id)\n        );\n    }\n\n    // ...\n}\n\n```", "```php\nclass User\n{\n    // ...\n\n    public function __construct(UserId $userId, $email, $password)\n    {\n        $this->setUserId($userId);\n        $this->setEmail($email);\n        $this->setPassword($password);\n\n        DomainEventPublisher::instance()->publish(\n            new UserRegistered($this->userId)\n        );\n    }\n}\n\n```"]