- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Setting Up Our Local Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的本地环境
- en: As a developer, you probably already know that one of the key skillsets that
    you need to start programming is to install the programming language itself onto
    your computer. We need a way to start testing code besides our head, as our brains
    are not the best language compilers. But what does installing the language really
    mean?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，你可能已经知道，你需要掌握的关键技能之一是将编程语言本身安装到你的电脑上。我们需要一种方法来开始测试代码，除了我们的大脑，因为我们的大脑不是最好的语言编译器。但安装语言到底意味着什么呢？
- en: Coming from PHP, this could mean installing the binary interpreter of PHP on
    our computer so that we can run PHP, open a browser, and then away we go. Or it
    could mean downloading the PHP source code, compiling it, and generating our own
    binary with the compilation options we choose. In Ruby, we not only have very
    similar options to these, but also many more ways to install the Ruby interpreter
    on our local machine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 来自PHP，这可能意味着在我们的电脑上安装PHP的二进制解释器，以便我们可以运行PHP，打开浏览器，然后就可以开始了。或者，这也可能意味着下载PHP源代码，编译它，并使用我们选择的编译选项生成自己的二进制文件。在Ruby中，我们不仅有与这些相似的选择，还有许多安装Ruby解释器到本地机器的方法。
- en: 'In this chapter, we will explore different ways of setting up our development
    environments. We will analyze the pros and cons of each to give you different
    options to choose from so that any errors will be consistent between developers,
    in order to avoid the wretched phrase all developers have heard and unfortunately
    used: *“It works on* *my machine.”*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨设置我们的开发环境的不同方法。我们将分析每种方法的优缺点，为您提供不同的选择，以便开发者在出现错误时能够保持一致性，从而避免所有开发者都听过并不幸使用过的讨厌短语：“*在我的机器上它运行正常。*”
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Installing Ruby locally
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地安装Ruby
- en: Using a virtual machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟机
- en: Using Docker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker
- en: Using rbenv
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用rbenv
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, we will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，我们需要以下内容：
- en: Any IDE to view/edit code (e.g. SublimeText, Visual Studio Code, Notepad++ Vim,
    Emacs, etc.)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用于查看/编辑代码的IDE（例如SublimeText、Visual Studio Code、Notepad++ Vim、Emacs等）
- en: For macOS users, you will also need to have the Xcode Command Line Tools installed
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS用户，您还需要安装Xcode命令行工具
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的代码可在[https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails)找到。
- en: Installing Ruby locally
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地安装Ruby
- en: We are ready to set up our Ruby environment. Probably the most convenient way
    to install Ruby on our machines is with a package manager or an installer, depending
    on your operating system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好设置我们的Ruby环境。可能在我们机器上安装Ruby最方便的方式是使用包管理器或安装程序，这取决于您的操作系统。
- en: macOS users
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS用户
- en: For macOS users, the brew package manager is the way to go.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS用户，brew包管理器是最佳选择。
- en: 'To install brew, using the Finder window, navigate to the **Applications**
    folder, then to the **Utilities** folder, and then scroll until you find **Terminal**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装brew，使用Finder窗口，导航到**应用程序**文件夹，然后到**实用工具**文件夹，然后滚动直到找到**终端**：
- en: '![Figure 2.1: The Application Utilities](img/B19230_02_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1：应用程序实用工具](img/B19230_02_01.jpg)'
- en: 'Figure 2.1: The Application Utilities'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：应用程序实用工具
- en: 'Double click on the **Terminal** icon and you should see a Terminal with a
    shell prompt waiting for commands:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 双击**终端**图标，你应该会看到一个带有shell提示符的终端，等待输入命令：
- en: '![Figure 2.2: The Terminal](img/B19230_02_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2：终端](img/B19230_02_02.jpg)'
- en: 'Figure 2.2: The Terminal'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：终端
- en: 'Then copy the command from the brew homepage ([https://brew.sh/](https://brew.sh/))
    that you can see here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从brew主页（[https://brew.sh/](https://brew.sh/））复制以下命令：
- en: '![Figure 2.3: Homebrew installing instructions](img/B19230_02_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3：Homebrew安装说明](img/B19230_02_03.jpg)'
- en: 'Figure 2.3: Homebrew installing instructions'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：Homebrew安装说明
- en: Now paste the command into the Terminal to install brew.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将命令粘贴到终端以安装brew。
- en: 'Once brew is installed, installing Ruby (or its variations) is easy. If brew
    was already installed, you might just want to update it by running the `brew update`
    command. You may have to open up a new Terminal window, but once you’ve done that,
    you can install Ruby by simply running the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 brew，安装 Ruby（或其变体）就变得简单。如果 brew 已经安装，你可能只想通过运行 `brew update` 命令来更新它。你可能需要打开一个新的终端窗口，但一旦你做了，你只需运行以下命令即可安装
    Ruby：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will result in the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code shown here has been redacted for brevity and may vary from version
    to version of macOS, but in essence, you should see the same (or very similar)
    output after brew has been installed. As long as there are no errors, you should
    be good to go. As a side note, I’d like to emphasize that brew is a package manager
    used by many developers working on macOS and some Linux environments, but it’s
    not the only path to install Ruby.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的代码已被简化以节省篇幅，并且可能与不同版本的 macOS 版本有所不同，但本质上，在安装了 brew 之后，你应该会看到相同（或非常相似）的输出。只要没有错误，你应该就可以正常使用了。作为旁注，我想强调
    brew 是许多在 macOS 和一些 Linux 环境中工作的开发者使用的包管理器，但它并不是安装 Ruby 的唯一途径。
- en: As a last step we should open up a new Terminal window. This will load the `$PATH`
    variable again and make Ruby available for us to use. This a very pragmatic way
    of installing Ruby because we can start using the Ruby interpreter right away.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，我们应该打开一个新的终端窗口。这将重新加载 `$PATH` 变量，并使我们能够使用 Ruby。这是一种非常实用的安装 Ruby 的方法，因为我们可以直接开始使用
    Ruby 解释器。
- en: 'Now let’s confirm that Ruby is in fact installed. In the Terminal, type the
    following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确认 Ruby 确实已经安装。在终端中，输入以下内容：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should return the Ruby version that was installed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会返回已安装的 Ruby 版本：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have successfully installed Ruby. Nowadays, most Macs already come with Ruby
    installed out of the box. However, it is an outdated version of Ruby, therefore
    it’s still a good practice exercise to install it on our own.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功安装 Ruby。如今，大多数 Mac 电脑出厂时已经预装了 Ruby。然而，这是一个过时的 Ruby 版本，因此自己安装它仍然是一个很好的实践练习。
- en: Windows users
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 用户
- en: 'For Windows users, the simplest way to install Ruby is with an installer from
    [https://rubyinstaller.org/](https://rubyinstaller.org/):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，安装 Ruby 最简单的方法是使用来自 [https://rubyinstaller.org/](https://rubyinstaller.org/)
    的安装程序：
- en: '![Figure 2.4: Ruby Windows installer](img/B19230_02_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4：Ruby Windows 安装程序](img/B19230_02_04.jpg)'
- en: 'Figure 2.4: Ruby Windows installer'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：Ruby Windows 安装程序
- en: 'I chose the latest version as it is best practice to install this one, or at
    least the latest stable version. Be sure to select the correct version (either
    32-bit or 64-bit) depending on your machine architecture. Once it’s downloaded,
    double-click on the installer and you will see this screen:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了最新版本，因为它是最推荐的安装版本，或者至少是最新稳定版本。务必根据您的机器架构选择正确的版本（32 位或 64 位）。下载完成后，双击安装程序，你将看到这个屏幕：
- en: '![Figure 2.5: Windows Installer License Agreement](img/B19230_02_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5：Windows 安装程序许可协议](img/B19230_02_05.jpg)'
- en: 'Figure 2.5: Windows Installer License Agreement'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：Windows 安装程序许可协议
- en: Accept the license and click **Next**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接受许可协议并点击**下一步**。
- en: 'Then choose the default options for the location and the addition of the binary
    to our PATH:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择默认的安装位置和将二进制文件添加到我们的 PATH 中的选项：
- en: '![Figure 2.6: Windows Installer installation location](img/B19230_02_06.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6：Windows 安装程序安装位置](img/B19230_02_06.jpg)'
- en: 'Figure 2.6: Windows Installer installation location'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：Windows 安装程序安装位置
- en: 'After that, select **Install**. Once this process is finished, we are prompted
    with a **Run ‘ridk** **install’** option:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，选择**安装**。一旦这个过程完成，我们会看到一个**运行‘ridk install’**的选项：
- en: '![Figure 2.7: Windows Installer finishing the setup](img/B19230_02_07.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7：Windows 安装程序完成设置](img/B19230_02_07.jpg)'
- en: 'Figure 2.7: Windows Installer finishing the setup'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：Windows 安装程序完成设置
- en: 'While `sh`, `make`, and `gcc` available. These tools need to be compiled for
    some libraries (or gems) that we may use in the future. By setting this option,
    we will have another prompt pop up:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `sh`、`make` 和 `gcc` 可用。这些工具需要为一些我们可能在未来使用的库（或 gems）进行编译。通过设置此选项，将弹出一个新的提示：
- en: '![Figure 2.8: MSYS2 installation prompt](img/B19230_02_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8：MSYS2 安装提示](img/B19230_02_08.jpg)'
- en: 'Figure 2.8: MSYS2 installation prompt'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：MSYS2 安装提示
- en: Press *Enter* for all options until the installation is done. These options
    install and update MSYS2, which provides a Unix-like environment for compatibility
    with software built on Windows systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有选项，按下 *Enter* 键直到安装完成。这些选项会安装和更新 MSYS2，它为与在 Windows 系统上构建的软件兼容提供了类似 Unix
    的环境。
- en: 'Once done, make sure that Ruby was installed correctly. To do this, open Windows
    PowerShell. Then use the `ruby -v` command, and you should see the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请确保 Ruby 已正确安装。为此，请打开 Windows PowerShell。然后使用 `ruby -v` 命令，你应该会看到以下内容：
- en: '![Figure 2.9: Windows Ruby version confirmation](img/B19230_02_09.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9：Windows Ruby 版本确认](img/B19230_02_09.jpg)'
- en: 'Figure 2.9: Windows Ruby version confirmation'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：Windows Ruby 版本确认
- en: With that, we have confirmed that Ruby is installed correctly on our Windows
    system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经确认 Ruby 已正确安装在我们的 Windows 系统上。
- en: Linux users
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 用户
- en: For Linux users, we have different distributions and while some of them share
    package managers, for the most part, each family uses its own package manager.
    As an example, the Red Hat family distros (Red Hat and CentOS) use `yum`, Ubuntu
    uses `apt`, and Debian uses `dpk` but also supports `apt`. We are going to focus
    on the most popular distribution used as a desktop operating system, which is
    Ubuntu.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 用户，我们有不同的发行版，尽管其中一些共享包管理器，但大多数情况下，每个系列都使用自己的包管理器。例如，Red Hat 系列的发行版（Red
    Hat 和 CentOS）使用 `yum`，Ubuntu 使用 `apt`，而 Debian 使用 `dpk`，但也支持 `apt`。我们将重点关注作为桌面操作系统最常用的发行版，即
    Ubuntu。
- en: 'In Ubuntu, navigate to the `sudo apt install ruby`. Ubuntu will then confirm
    that you are in fact trying to install Ruby. When this confirmation comes up,
    just type *Y*, as you can see here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 中，导航到 `sudo apt install ruby`。然后 Ubuntu 将确认你确实正在尝试安装 Ruby。当出现此确认时，只需输入
    *Y*，正如你所看到的那样：
- en: '![Figure 2.10: Ruby installation prompt](img/B19230_02_10.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：Ruby 安装提示](img/B19230_02_10.jpg)'
- en: 'Figure 2.10: Ruby installation prompt'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：Ruby 安装提示
- en: 'We use the `sudo` command because we require root privileges to install applications
    on our system. It might take a while to install depending on our internet speed
    and machine’s specifications but once the process is finished, let’s again verify
    the installation with `ruby -v`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `sudo` 命令，因为我们需要在系统上安装应用程序需要 root 权限。根据我们的互联网速度和机器的配置，安装可能需要一段时间，但一旦过程完成，我们再次使用
    `ruby -v` 验证安装：
- en: '![Figure 2.11: Ubuntu Ruby version confirmation](img/B19230_02_11.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11：Ubuntu Ruby 版本确认](img/B19230_02_11.jpg)'
- en: 'Figure 2.11: Ubuntu Ruby version confirmation'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：Ubuntu Ruby 版本确认
- en: So, there we have it, you now know how to install Ruby on whichever operating
    system you use. Let’s now take a look at using a virtual environment to work with
    Ruby.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经完成了，你现在知道如何在任何你使用的操作系统上安装 Ruby。现在让我们看看如何使用虚拟环境来与 Ruby 一起工作。
- en: Using a virtual machine
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟机
- en: So far, we have seen how to install Ruby on our own local machine, that is,
    the machine we use daily for work. This is the best way to install Ruby when starting
    out, but once you start working on more complex applications and with other developers,
    you will want to have consistency in the behavior of everyone’s local environments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何在我们的本地机器上安装 Ruby，即我们每天用于工作的机器。这是开始安装 Ruby 的最佳方式，但一旦你开始处理更复杂的应用程序与其他开发者合作，你将希望确保每个人的本地环境行为的一致性。
- en: 'Why, you may ask? The simple answer is that we want to avoid the dreaded phrase
    that all developers have either heard or even used at some point in our careers:
    *“It works on my machine.”* What is important to remember is that every local
    environment is different, from the processor to the OS version and Ruby version,
    and this can get in the way of more important work.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你会问？简单的答案是，我们想要避免所有开发者都曾听说过或在某些时候在我们的职业生涯中使用过的那个可怕的短语：“在我的机器上它运行正常。”重要的是要记住，每个本地环境都是不同的，从处理器到操作系统版本和
    Ruby 版本，这可能会妨碍更重要的工作。
- en: As an example that I personally experienced, we once wasted almost a week when
    we deployed a PHP application to a Linux server that was developed on Windows
    local machines. The problem was that one of the developers forgot that Windows
    (at the time) did not distinguish between uppercase and lowercase letters in folder
    names. While this might seem a silly example, we should try to avoid these issues
    as much as we can, as time can quickly be wasted while dealing with issues of
    this nature.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以我个人的经历为例，我们曾经在一次将 PHP 应用程序部署到在 Windows 本地机器上开发的 Linux 服务器时浪费了近一周的时间。问题是其中一位开发者忘记当时
    Windows（当时）在文件夹名称中不区分大小写。虽然这听起来可能是个愚蠢的例子，但我们应尽可能避免这类问题，因为在处理这类问题时，时间会迅速被浪费。
- en: Virtualization can play an important role in the creation of equivalent environments
    between the developers in your team, and fortunately, we have several options
    that we can explore in the virtual realm to help us with this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化在创建团队中开发者的等效环境方面可以发挥重要作用，幸运的是，我们在虚拟领域有几种选项可以探索，以帮助我们实现这一点。
- en: VMware
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VMware
- en: The first option is VMware ([https://vmware.com](https://vmware.com)). VMware
    lets you emulate a complete operating system within your machine. This setup,
    of course, takes longer than the others as you have to first install VMware, create
    a virtual machine, then install the operating system within this virtual machine,
    and then install Ruby. It would be certainly complex and time consuming, but once
    you have it up and running, you can share the environment with other members of
    your team. This would mean that everyone in the team would have the exact same
    environment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是 VMware ([https://vmware.com](https://vmware.com))。VMware 允许你在机器内模拟完整的操作系统。当然，这种设置比其他方式花费的时间更长，因为你必须首先安装
    VMware，创建虚拟机，然后在虚拟机中安装操作系统，最后安装 Ruby。这确实很复杂，也很耗时，但一旦设置好并运行起来，你就可以与其他团队成员共享环境。这意味着团队中的每个人都会拥有完全相同的环境。
- en: VirtualBox
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VirtualBox
- en: VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)) is an
    Oracle product that behaves and has a similar workflow to VMware. Some people
    prefer VirtualBox and others prefer VMware. In my personal experience, VirtualBox
    is the better choice for beginners as it is open source, free to use, has a better
    UI, and works great for small to mid-sized projects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)) 是一个 Oracle
    产品，其行为和工作流程与 VMware 类似。有些人喜欢 VirtualBox，有些人喜欢 VMware。根据我个人的经验，对于初学者来说，VirtualBox
    是更好的选择，因为它是开源的，免费使用，有更好的用户界面，并且非常适合小型到中型项目。
- en: Vagrant
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vagrant
- en: 'Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/)) is a tool
    that helps us automate and manage our environments. Both VMware and VirtualBox
    have mechanisms in place to be able to share files and other resources with our
    host machine; however, they’re not that easy to use, and sometimes it take up
    a lot of time to configure them. Vagrant comes in to solve that: it lets us specify
    shared folders between our local machine and the virtual one, allows us to replicate
    configurations through a configuration file, and also makes it much easier to
    connect to the virtual machine. The coolest part is that Vagrant can work seamlessly
    with both VMware and VirtualBox.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/)) 是一个帮助我们自动化和管理环境的工具。VMware
    和 VirtualBox 都有机制可以与宿主机共享文件和其他资源；然而，它们的使用并不那么简单，有时配置它们会花费很多时间。Vagrant 出现就是为了解决这个问题：它允许我们指定本地机器和虚拟机之间的共享文件夹，允许我们通过配置文件复制配置，并且使连接到虚拟机变得更加容易。最酷的部分是
    Vagrant 可以无缝地与 VMware 和 VirtualBox 一起工作。
- en: Laravel developers might be familiar with Vagrant as Homestead can be set up
    with VirtualBox. Even if you are not going to use this option as it may not be
    very practical, I would recommend at least trying it once to play around with
    Ruby on an operating system other than the one you have installed on your machine.
    This type of virtualization consumes a lot of resources, including memory, processor,
    and even disk space. It’s a high price to pay for convenience, but worthwhile
    in the long run.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 开发者可能对 Vagrant 很熟悉，因为 Homestead 可以与 VirtualBox 配合使用。即使你不想使用这个选项，因为它可能不太实用，我也建议至少尝试一次，以便在除你机器上安装的操作系统之外的环境中玩转
    Ruby。这种虚拟化消耗大量资源，包括内存、处理器，甚至磁盘空间。为了方便而付出高昂的代价，但从长远来看是值得的。
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'As this goes beyond the scope of the book and is not necessary for initial
    Ruby developers; we will not be looking at how to carry out such installations.
    But it does make sense for a newbie Ruby developer to at least be familiar with
    these tools, only if by name. Should you be more curious about these implementations,
    particularly Vagrant and VirtualBox, you might want to head to the following site:
    [https://www.taniarascia.com/what-are-vagrant-and-virtualbox-and-how-do-i-use-them/](https://www.taniarascia.com/what-are-vagrant-and-virtualbox-and-how-do-i-use-them/).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这超出了本书的范围，并且对于初学Ruby的开发者来说不是必需的；我们不会探讨如何执行此类安装。但对于一个新手Ruby开发者来说，至少应该熟悉这些工具，哪怕只是知道它们的名字。如果您对这些实现更感兴趣，尤其是Vagrant和VirtualBox，您可能想访问以下网站：[https://www.taniarascia.com/what-are-vagrant-and-virtualbox-and-how-do-i-use-them/](https://www.taniarascia.com/what-are-vagrant-and-virtualbox-and-how-do-i-use-them/)。
- en: Lastly, there is a different type of virtualization provided by Docker, which
    is lighter than both VMware and VirtualBox, and this is what we will look at next.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Docker提供了一种不同于VMware和VirtualBox的虚拟化类型，它比两者都要轻量，这是我们接下来要探讨的内容。
- en: Using Docker
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker
- en: 'Docker ([https://www.docker.com/](https://www.docker.com/)) is yet another
    virtualization technology that has become the go-to option for a lot of medium
    and large enterprises. While it’s still a virtualized environment and comes with
    its own set of disadvantages, the advantages overshadow them. Let’s take a look
    at a few advantages:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Docker([https://www.docker.com/](https://www.docker.com/))是另一种虚拟化技术，已成为许多中型和大型企业的首选选项。虽然它仍然是一个虚拟化环境，并带有它自己的缺点，但优点超过了它们。让我们看看一些优点：
- en: Docker is not fully virtual – it creates a container that shares resources with
    the host in which it is running. Because of this, it runs significantly faster
    than a virtualized environment. I’m oversimplifying the Docker technology, but
    in essence it’s an improved (in my opinion) virtualized environment.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker不是完全虚拟化的——它创建了一个与运行它的主机共享资源的容器。正因为如此，它的运行速度比虚拟化环境要快得多。我在过度简化Docker技术，但本质上它是一个改进的（在我看来）虚拟化环境。
- en: You can package your Docker environment into a Docker image (similar to a virtual
    machine), which can be deployed and used by others with ease.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将您的Docker环境打包成一个Docker镜像（类似于虚拟机），这样其他人就可以轻松地部署和使用它。
- en: With the advent of cloud computing, Docker has become more and more popular.
    Amazon (AWS), Microsoft (Azure), and Google (GCP) all support Docker and little
    by little have made it much easier to implement.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着云计算的出现，Docker变得越来越受欢迎。亚马逊（AWS）、微软（Azure）和谷歌（GCP）都支持Docker，并且逐渐使其实现变得更加容易。
- en: With Docker, you can replicate practically any error that occurred on another
    developer’s machine, as well as in production environments (given the correct
    circumstances). Imagine a hypothetical developer world where you can take a production
    server and test things there, making sure that any error that was seen in the
    past is corrected before showing it to the public. Well, this is almost possible
    with Docker. Certainly, I’m simplifying the process, but essentially, the Docker
    image you use locally has the potential to be the same image used in production.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker，您可以在本地复制另一台开发者的机器上发生的几乎所有错误，以及在生产环境中（在正确的情况下）。想象一个假设的开发者世界，您可以在生产服务器上进行测试，确保在向公众展示之前，过去看到的任何错误都得到了纠正。好吧，这几乎就是Docker所能实现的。当然，我在简化这个过程，但本质上，您在本地使用的Docker镜像有可能与生产环境中使用的镜像相同。
- en: The main disadvantage with Docker is that it’s more complicated to understand
    how to use images and containers and build microservices. If you’ve never heard
    of microservices, the concept might take you aback as they are different than
    traditional applications and deployments. Microservices are an architectural style
    used to build applications by separating the application into a collection of
    services. Docker Compose might make it easier to implement microservices locally,
    but it’s still a complex topic.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的主要缺点是，理解如何使用镜像和容器以及构建微服务更为复杂。如果您从未听说过微服务，这个概念可能会让您感到惊讶，因为它们与传统应用程序和部署不同。微服务是一种用于通过将应用程序分割成一系列服务来构建应用程序的架构风格。Docker
    Compose可能会使在本地实现微服务变得更容易，但这仍然是一个复杂的话题。
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Should you be more interested in the topic of microservices, you should take
    look at [https://microservices.io/](https://microservices.io/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对微服务主题更感兴趣，您应该查看[https://microservices.io/](https://microservices.io/)。
- en: I honestly think it’s worth exploring Docker more than other virtualization
    options simply because it’s gained so much popularity among the developer and
    infrastructure communities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我真心认为探索Docker比其他虚拟化选项更有价值，因为它在开发者和基础设施社区中获得了如此多的流行。
- en: 'While we won’t take a deep dive into Docker, we can take some baby steps to
    learn how to use it on our local environment. The first step is to install Docker
    through an installer or package manager. Depending on your OS and distribution,
    use one of the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会深入探讨Docker，但我们可以迈出一些小步来学习如何在本地环境中使用它。第一步是通过安装程序或包管理器安装Docker。根据您的操作系统和发行版，使用以下之一：
- en: 'For Mac: [https://docs.docker.com/desktop/install/mac-install/](https://docs.docker.com/desktop/install/mac-install/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Mac：[https://docs.docker.com/desktop/install/mac-install/](https://docs.docker.com/desktop/install/mac-install/)
- en: 'For Windows: [https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows：[https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/)
- en: 'For Linux: [https://docs.docker.com/desktop/install/linux-install/](https://docs.docker.com/desktop/install/linux-install/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux：[https://docs.docker.com/desktop/install/linux-install/](https://docs.docker.com/desktop/install/linux-install/)
- en: 'After that, we can run the following command to verify that Docker has been
    installed:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以运行以下命令来验证Docker是否已安装：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This should return the current Docker version found on your machine:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会返回您机器上找到的当前Docker版本：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once Docker is available, we can download a Ruby image and run a Ruby command
    with this one liner:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Docker可用，我们可以下载一个Ruby镜像并使用这个单行命令运行Ruby命令：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we are telling the Docker agent to get the latest Ruby Docker image and
    then run `ruby -v`. The command should output something similar to this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在告诉Docker代理获取最新的Ruby Docker镜像，然后运行`ruby -v`。命令应该输出类似以下内容：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first time you run this command, it might take a while because it will have
    to download the Ruby Docker image. Once the Docker image is downloaded, it starts
    a container with said image and runs the command. Once the command has been run,
    the container is halted.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行此命令时，可能需要一段时间，因为它将不得不下载Ruby Docker镜像。一旦下载了Docker镜像，它将启动一个带有该镜像的容器并运行命令。一旦命令运行完毕，容器将被停止。
- en: And with that, we have successfully run a Ruby command with Docker. While actually
    using Docker for development in a more practical way is more complicated, this
    is a great starting point.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经成功使用Docker运行了一个Ruby命令。虽然实际上以更实用的方式使用Docker进行开发更复杂，但这是一个很好的起点。
- en: Now that we’ve seen a couple of options to set up our local environment, we’ll
    move to the next essential tool for Ruby development, that is, rbenv.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了设置本地环境的一些选项，我们将转向Ruby开发的下一个基本工具，那就是rbenv。
- en: Using rbenv
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用rbenv
- en: 'While it is highly recommended to use some sort of homogeneous environment
    for all members of the team (such as the virtual ones previously mentioned), a
    simpler and quicker way to create equivalent environments is to use some sort
    of Ruby version management tool. These types of tools allow us to install different
    versions of Ruby and for the most part will behave similarly, even if they are
    installed on different operating systems. We have a couple of options, but for
    simplicity, we will use rbenv: [https://github.com/rbenv/rbenv](https://github.com/rbenv/rbenv).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然强烈建议为团队的所有成员使用某种同质化环境（如之前提到的虚拟环境），但创建等效环境的一种更简单、更快捷的方法是使用某种Ruby版本管理工具。这类工具允许我们安装不同的Ruby版本，并且大部分情况下它们的行为相似，即使它们安装在不同的操作系统上。我们有几种选择，但为了简单起见，我们将使用rbenv：[https://github.com/rbenv/rbenv](https://github.com/rbenv/rbenv)。
- en: 'rbenv allows us to install multiple versions of Ruby and manage these versions.
    By *managing them*, I mean we can define what version of Ruby the whole system
    uses (global), or we can define a specific version to be used on each project
    (local). For macOS and Linux users, you should follow the instructions on the
    previously mentioned GitHub repository, which also serves as the official website.
    If you run into any issues while trying to install the tool, you could also follow
    these two tutorials for installing rbenv:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: rbenv允许我们安装多个版本的Ruby并管理这些版本。通过“管理”我指的是我们可以定义整个系统使用的Ruby版本（全局），或者我们可以定义每个项目使用的特定版本（局部）。对于macOS和Linux用户，您应遵循之前提到的GitHub仓库中的说明，该仓库也作为官方网站。如果在尝试安装工具时遇到任何问题，您还可以遵循以下两个教程来安装rbenv：
- en: '[https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos](https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos](https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos)'
- en: '[https://collectionbuilder.github.io/cb-docs/docs/software/ruby_mac/](https://collectionbuilder.github.io/cb-docs/docs/software/ruby_mac/)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://collectionbuilder.github.io/cb-docs/docs/software/ruby_mac/](https://collectionbuilder.github.io/cb-docs/docs/software/ruby_mac/)'
- en: 'Lastly, for Windows users, we have rbenv-for-windows: [https://github.com/ccmywish/rbenv-for-windows](https://github.com/ccmywish/rbenv-for-windows).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于 Windows 用户，我们有 rbenv-for-windows：[https://github.com/ccmywish/rbenv-for-windows](https://github.com/ccmywish/rbenv-for-windows)。
- en: Beware that the version for Windows might be a little limited and you may encounter
    issues with certain versions of Ruby.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows 的版本可能有点有限，你可能会遇到某些 Ruby 版本的问题。
- en: 'Once we’ve installed rbenv, we should list the Ruby versions we have installed
    on the machine. Let’s open a shell and run the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安装 rbenv 之后，我们应该列出机器上安装的 Ruby 版本。让我们打开一个 shell 并运行以下命令：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should show the following output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示以下输出：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding output means that we only have one version of Ruby installed.
    Let’s add Ruby 2.6.10 to use throughout the examples of this book. We’ll do so
    by typing the following command on the shell:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出意味着我们只安装了一个版本的 Ruby。让我们添加 Ruby 2.6.10 以用于本书的示例。我们将在 shell 中输入以下命令：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This should throw the following output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会抛出以下输出：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have Ruby 2.6.10 available for use, we can start using said version
    with the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以使用 Ruby 2.6.10，我们可以使用以下命令开始使用该版本：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once the preceding command has been run, make sure to test it with the following
    command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述命令之后，请确保使用以下命令进行测试：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should show the current version of Ruby to be 2.6.10:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示当前的 Ruby 版本为 2.6.10：
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The output may vary from system to system, but the version should be the same.
    I won’t dwell too much on how rbenv works, but I will say that by running this
    command on a folder, any work you do while in said folder (or subfolders within
    this folder) will have Ruby 2.6.10 for use. If we move to a different folder,
    the Ruby version available will be different. It’s an important best practice
    to set the Ruby version for each project and not just rely on the one installed
    on the computer. Switching Ruby versions is now as easy as installing the required
    version and applying said version with the aforementioned command. For the exercises
    in this book, I highly recommend relying on rbenv.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能会因系统而异，但版本应该相同。我不会过多地讨论 rbenv 的工作原理，但我会说，通过在文件夹上运行此命令，你在此文件夹（或此文件夹内的子文件夹）中进行的任何工作都将使用
    Ruby 2.6.10。如果我们移动到不同的文件夹，可用的 Ruby 版本将不同。为每个项目设置 Ruby 版本而不是仅仅依赖计算机上安装的版本是一个重要的最佳实践。切换
    Ruby 版本现在就像安装所需的版本并使用上述命令应用该版本一样简单。对于本书的练习，我强烈建议依赖 rbenv。
- en: 'As an alternative to rbenv, we have rvm: https://rvm.io/.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 rbenv 的替代方案，我们有 rvm：[https://rvm.io/](https://rvm.io/)。
- en: However, I highly recommend choosing rbenv over rvm as most developers use rbenv.
    You can give rvm a try, if you’re up to the challenge.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我强烈建议选择 rbenv 而不是 rvm，因为大多数开发者使用 rbenv。如果你愿意接受挑战，可以尝试使用 rvm。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So far, we’ve learned how to install Ruby on macOS, Windows, and Linux systems.
    While some operating systems may already come with Ruby installed, it is almost
    always outdated. We should always install the latest version of Ruby, as installing
    Ruby is part of our own development process as Ruby developers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何在 macOS、Windows 和 Linux 系统上安装 Ruby。虽然某些操作系统可能已经预装了 Ruby，但它几乎总是过时的。我们应该始终安装
    Ruby 的最新版本，因为安装 Ruby 是我们作为 Ruby 开发者自身开发过程的一部分。
- en: We also learned about virtualization with VMware, VirtualBox, and Docker. I
    want to point out that the theory regarding virtualization technologies might
    be a little overwhelming for a beginner developer – I personally did not work
    with any of these virtual technologies when I started with Ruby, mainly because
    it was not a practical option, but also because they had not become so popular
    at that time – but I can now confidently say that I wish I had had those resources
    when I started, as it would have saved me some major headaches. Having said that,
    I can guarantee you that they will come in handy (at least Docker), but to start
    programming in Ruby they are not compulsory. Lastly, we learned about rbenv, its
    basic commands, and why it has become the go-to Ruby version manager in the Ruby
    community.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了关于虚拟化的知识，包括VMware、VirtualBox和Docker。我想指出，关于虚拟化技术的理论可能对初学者开发者来说有点令人难以承受——我本人刚开始学习Ruby时并没有使用过这些虚拟技术，主要是因为当时这并不是一个实用的选择，而且它们在那个时期还没有变得如此流行——但现在我可以自信地说，如果我当时有那些资源，将会节省我很多麻烦。话虽如此，我可以保证，它们将会非常有用（至少是Docker），但开始用Ruby编程它们并不是必需的。最后，我们还学习了rbenv的基本命令以及为什么它已经成为Ruby社区中首选的Ruby版本管理器。
- en: Moving on to our next chapter, we are now ready to start writing some Ruby ourselves.
    We will also take a look at the Ruby syntax compared to PHP and analyze how we
    can take advantage of what we already know from PHP and port it to Ruby. Lastly,
    we will learn about the Ruby language enhancements that PHP does not have but
    which make perfect sense in the Ruby world.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进入下一章，现在我们已经准备好开始自己编写一些Ruby代码了。我们还将对比PHP和Ruby的语法，分析如何利用我们从PHP中已有的知识并将其迁移到Ruby。最后，我们将了解Ruby语言中PHP所不具备但非常适合Ruby世界的增强功能。
