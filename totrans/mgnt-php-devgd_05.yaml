- en: Chapter 5. The Magento API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：Magento API
- en: In the previous chapter, we extended the Magento backend and learned how to
    use some of the backend components, so that store owners can manage and manipulate
    the gift registry data of each customer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们扩展了 Magento 后端，并学习了如何使用一些后端组件，以便店主可以管理和操作每位客户的礼品登记数据。
- en: 'In this chapter, we will go over the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: The Magento Core API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento 核心API
- en: The multiple API protocols available (**REST**, **SOAP**, and **XML-RPC**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的多个 API 协议（**REST**、**SOAP** 和 **XML-RPC**）
- en: How to use the Core API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用核心API
- en: How to extend the API to implement a new functionality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何扩展 API 以实现新功能
- en: How to restrict parts of the API to specific web user roles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何限制 API 的部分功能以特定于网络用户角色
- en: While the backend provides an interface for day-to-day operations, sometimes,
    we will need to access and transmit data to and from third-party systems. Magento
    already provides the API functionality for most of the core functionalities, but
    for our custom gift registry extension, we will need to extend the `Mage_Api`
    functionality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然后端提供了日常操作的接口，但有时我们需要访问和从第三方系统中传输数据。Magento 已经为大多数核心功能提供了 API 功能，但为了我们的自定义礼品登记扩展，我们需要扩展
    `Mage_Api` 功能。
- en: The Core API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心API
- en: Often, while talking about the API, I heard developers talk about the Magento
    SOAP API, the Magento XML-RPC API, or the RESTful API, but there is the important
    fact that these are not separate APIs for each of these protocols. Instead, Magento
    has a single Core API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 经常在谈论 API 时，我听到开发者谈论 Magento SOAP API、Magento XML-RPC API 或 RESTful API，但有一个重要的事实是，这些不是针对这些协议的单独
    API。相反，Magento 有一个单一的 Core API。
- en: As you might notice, Magento is built mostly around abstraction and configuration
    (mostly XML), and the Magento API is no exception. We have a single Core API and
    adapters for each of the different protocol types. This is incredibly flexible,
    and if we want to, we can implement our adapter for another protocol.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能注意到的，Magento 主要建立在抽象和配置（主要是XML）的基础上，而 Magento API 也不例外。我们有一个单一的 Core API
    和针对不同协议类型的适配器。这非常灵活，如果我们愿意，我们可以为其他协议实现我们的适配器。
- en: 'The core Magento API gives us the ability to manage products, categories, attributes,
    orders, and invoices; this is done by exposing three of the core modules:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Magento API为我们提供了管理产品、分类、属性、订单和发票的能力；这是通过公开三个核心模块来实现的：
- en: '`Mage_Catalog`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Catalog`'
- en: '`Mage_Sales`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Sales`'
- en: '`Mage_Customer`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Customer`'
- en: 'The API supports three different types: SOAP, XML-RPC, and REST. Now, if you
    have done web development outside Magento and with other APIs, it is most likely
    that these APIs have been RESTful APIs.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该API支持三种不同类型：SOAP、XML-RPC和REST。现在，如果你在 Magento 外部以及使用其他API进行过Web开发，那么这些API很可能是RESTful
    API。
- en: Before we jump into the specifics of the Magento API architecture, it is important
    that we understand the differences between each of the supported API types.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨 Magento API 架构的具体细节之前，了解每种支持的 API 类型之间的区别非常重要。
- en: XML-RPC
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML-RPC
- en: 'XML-RPC was one of the first supported protocols by Magento, and is the oldest
    of them all. This protocol has a single endpoint on which all the functions are
    called and accessed. The definition for XML-RPC is quoted on Wikipedia as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: XML-RPC是 Magento 支持的第一种协议之一，也是其中最古老的。这个协议有一个单一的端点，所有函数都通过这个端点被调用和访问。XML-RPC的定义在维基百科上引用如下：
- en: '*XML-RPC is a remote procedure call (RPC) protocol that uses XML to encode
    its calls and HTTP as a transport mechanism.*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*XML-RPC 是一种使用 XML 编码其调用并使用 HTTP 作为传输机制的远程过程调用 (RPC) 协议。*'
- en: Since there is only a single endpoint, XML-RPC is easy to use and maintain;
    its purpose is to be a simple and effective protocol to send and receive data;
    and implementation uses straightforward XML to encode and decode a remote procedure
    call along with the parameters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有一个单一端点，XML-RPC 使用起来简单且易于维护；其目的是成为一个简单有效的协议，用于发送和接收数据；实现使用简单的 XML 对远程过程调用及其参数进行编码和解码。
- en: 'However, this comes at a cost, and there are several problems with the whole
    XML-RPC protocol:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这也有代价，整个 XML-RPC 协议存在一些问题：
- en: Lack of discoverability and documentation.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏可发现性和文档。
- en: Anonymous parameters, XML-RPC relies on the order of the parameters to differentiate
    them.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名参数，XML-RPC依赖于参数的顺序来区分它们。
- en: Simplicity is both the greatest strength and the greatest issue with XML-RPC.
    While most of the tasks can easily be achieved with XML-RPC some tasks will require
    you to bend over backwards to achieve something that should be straightforward
    to implement.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性既是XML-RPC的最大优势，也是其最大的问题。虽然大多数任务都可以通过XML-RPC轻松完成，但有些任务可能需要你费尽周折才能实现本应简单易行的功能。
- en: Soap was designed to address XML-RPC limitations and provide a more robust protocol.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Soap是为了解决XML-RPC的局限性并提供一个更健壮的协议而设计的。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about XML-RPC, you can refer to [http://en.wikipedia.org/wiki/XML-RPC](http://en.wikipedia.org/wiki/XML-RPC).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于XML-RPC的更多信息，您可以参考[http://en.wikipedia.org/wiki/XML-RPC](http://en.wikipedia.org/wiki/XML-RPC)。
- en: SOAP
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOAP
- en: SOAP v1 was one of the first supported protocols by Magento along with XML-RPC,
    and SOAP v2 has been supported since the release of **Magento CE 1.3**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP v1是Magento最初支持的协议之一，与XML-RPC一起，自从**Magento CE 1.3**发布以来，SOAP v2也得到了支持。
- en: 'The definition for SOAP is quoted on Wikipedia as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科上对SOAP的定义如下：
- en: '*SOAP, originally an acronym for Simple Object Access protocol, is a protocol
    specification for exchanging structured information in the implementation of web
    services in computer networks.*'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*SOAP，最初是Simple Object Access Protocol的缩写，是一种在计算机网络中实现Web服务的结构化信息交换的协议规范。*'
- en: A SOAP request is an `HTTP POST` request that contains a SOAP envelope, header,
    and body.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP请求是一个包含SOAP信封、头和主体的`HTTP POST`请求。
- en: 'The core of SOAP is the **Web Services Description Language** (**WSDL**), which
    is XML. WSDL is used to describe the functionality of the web service, in this
    case, our API methods. This is achieved by using the following series of predetermined
    objects:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP的核心是**Web服务描述语言**（**WSDL**），它是一种XML格式。WSDL用于描述Web服务的功能，在本例中，是我们的API方法。这是通过以下一系列预定义对象实现的：
- en: '`types`: The `types` elements are used to describe the data transmitted with
    the API; the `type` elements are defined using XML Schema, a special language
    for this purpose'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`types`：`types`元素用于描述API传输的数据；`type`元素使用XML Schema定义，这是一种为此目的而设计的特殊语言'
- en: '`message`: The `message` element is used to specify the information needed
    to perform each operation; in the case of Magento, our API methods will always
    use a request and a respond `message`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`：`message`元素用于指定执行每个操作所需的信息；在Magento的情况下，我们的API方法将始终使用请求和响应`message`'
- en: '`portType`: The `portType` elements are used the define the operations that
    can be performed and the corresponding messages'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`portType`：`portType`元素用于定义可以执行的操作和相应的消息'
- en: '`port`: The `port` element is used to define the connection point; in the case
    of Magento, a simple string is used'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：`port`元素用于定义连接点；在Magento的情况下，使用一个简单的字符串'
- en: '`service`: The `service` element is used to specify which functions are exposed
    through the API'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service`：`service`元素用于指定通过API公开哪些功能'
- en: '`binding`: The `binding` elements are used to define the operations and the
    interface with the SOAP protocol'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binding`：`binding`元素用于定义操作和与SOAP协议的接口'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the SOAP protocol, you can refer to [http://en.wikipedia.org/wiki/SOAP](http://en.wikipedia.org/wiki/SOAP).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关于SOAP协议的更多信息，您可以参考[http://en.wikipedia.org/wiki/SOAP](http://en.wikipedia.org/wiki/SOAP)。
- en: 'All the WSDL configuration is contained inside each module''s `wsdl.xml` file;
    for example, let''s take a look at an excerpt of the `Catalog Product` API, located
    at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所有WSDL配置都包含在每个模块的`wsdl.xml`文件中；例如，让我们看一下`Catalog Product` API的摘录，位于`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using WSDL, we can document, list, and support more complex data types.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WSDL，我们可以记录、列出并支持更复杂的数据类型。
- en: The RESTful API
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful API
- en: The RESTful API is a new addition to the family of protocols supported by Magento
    and is only available on **Magento CE 1.7** or higher.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是Magento支持的协议家族中的新成员，并且仅在**Magento CE 1.7**或更高版本中可用。
- en: 'The definition for a RESTful web service can be quoted as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于RESTful Web服务的定义可以引用如下：
- en: '*A RESTful web service (also called a RESTful web API) is the web service implemented
    using HTTP and the principles of REST.*'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*RESTful Web服务（也称为RESTful Web API）是使用HTTP和REST原则实现的Web服务。*'
- en: 'A RESTful API can be defined by the following three aspects:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API可以通过以下三个方面来定义：
- en: It makes use of the standard of HTTP methods, such as `GET`, `POST`, `DELETE`,
    and `PUT`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用了标准的HTTP方法，例如`GET`、`POST`、`DELETE`和`PUT`
- en: It exposes the URIs formatted in a directory-like structure
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它暴露了以目录结构格式化的URI。
- en: It uses JSON or XML to transfer information
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用JSON或XML来传输信息。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The REST API supports the response in two formats, which are XML and JSON.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: REST API支持两种响应格式，即XML和JSON。
- en: One the advantages that REST has over SOAP and XML-RPC is that all interaction
    with the REST API is done through the HTTP protocol, which means that it can be
    used by virtually any programming language.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与SOAP和XML-RPC相比，REST的一个优点是，所有与REST API的交互都是通过HTTP协议完成的，这意味着它几乎可以用任何编程语言使用。
- en: 'The Magento REST API has the following characteristics:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Magento REST API具有以下特点：
- en: Resources are accessed by making an HTTP request to the Magento API service
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源通过向Magento API服务发送HTTP请求来访问。
- en: The service will reply with the data for the request, a status indicator, or
    even both
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务将回复请求的数据、状态指示器，甚至两者都有。
- en: All resources can be accessed by using `https://magento.localhost.com/api/rest/`
    as URL
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有资源都可以通过使用`https://magento.localhost.com/api/rest/`作为URL来访问。
- en: Resources return **HTTP status codes**, such as `HTTP Status Code 200`, to indicate
    success on a response or `HTTP Status Code 400` to indicate a bad request
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源返回**HTTP状态码**，例如`HTTP状态码200`，以指示响应成功或`HTTP状态码400`以指示请求错误。
- en: Requests to a particular resource are done by adding a particular path to the
    base URL (`https://magento.localhost.com/api/rest/`)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向特定资源发送请求是通过向基本URL（`https://magento.localhost.com/api/rest/`）添加特定的路径来完成的。
- en: 'REST uses **HTTP verbs** to manage the states of resources. In the Magento
    implementation, four verbs are available: `GET`, `POST`, `PUT`, and `DELETE`.
    For this reason, using the RESTful API is easy in most cases.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: REST使用**HTTP动词**来管理资源的状态。在Magento实现中，有四个动词可用：`GET`、`POST`、`PUT`和`DELETE`。因此，在大多数情况下，使用RESTful
    API都很简单。
- en: Using the API
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API
- en: Now that we have clarified each of the available protocols, let's explore what
    we can do with the Magento API and how we can use it with each of the available
    protocols.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经澄清了每个可用的协议，让我们探索我们可以使用Magento API做什么，以及我们如何使用每个可用的协议来使用它。
- en: We will use the product endpoint as an example to access and work with the different
    API protocols.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以产品端点为例，来访问和使用不同的API协议。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The examples are provided in PHP and use the three different protocols. For
    complete examples in other programming languages, check out [http://magedevguide.com](http://magedevguide.com).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 示例提供的是PHP，并使用了三种不同的协议。要查看其他编程语言的完整示例，请访问[http://magedevguide.com](http://magedevguide.com)。
- en: Setting up the API credentials for XML-RPC/SOAP
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置XML-RPC/SOAP的API凭证
- en: Before we get started we, need to create a set of web service credentials in
    order to access the API functions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要创建一组网络服务凭证，以便访问API功能。
- en: The first thing that we need to set up is the API user role. **Roles** control
    the permissions for the API using **Access Control List** (**ACL**). By implementing
    this design pattern, Magento is able to restrict certain parts of its API to specific
    users.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置的第一件事是API用户角色。**角色**通过**访问控制列表**（**ACL**）控制API的权限。通过实现此设计模式，Magento能够将其API的某些部分限制给特定用户。
- en: 'Later on this chapter, we will learn how we can add our custom functions to
    the ACL and secure our custom extensions API methods. For now, we just need to
    create a role with full permissions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将学习如何将自定义函数添加到ACL中，并确保我们的自定义扩展API方法的安全性。现在，我们只需要创建一个具有完全权限的角色：
- en: Go to the Magento backend.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Magento后端。
- en: Navigate to **System** | **Web Services** | **Roles** from the main navigation
    menu.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主导航菜单导航到**系统** | **网络服务** | **角色**。
- en: Click on the **Add New Role** button.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新角色**按钮。
- en: As shown in the following screenshot, you will be requested to provide a role
    name and specify the role resources:![Setting up the API credentials for XML-RPC/SOAP](img/4195OS_05_02.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，您将被要求提供角色名称并指定角色资源：![设置XML-RPC/SOAP的API凭证](img/4195OS_05_02.jpg)
- en: By default, the **Resource Access** option is set to **Custom** and no resources
    are selected. In our case, we will change the **Resource Access** option by selecting
    **All** from the drop-down menu.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，**资源访问**选项设置为**自定义**，没有选择任何资源。在我们的情况下，我们将通过从下拉菜单中选择**所有**来更改**资源访问**选项。
- en: Click on the **Save Role** button.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存角色**按钮。
- en: 'Now that we have a valid role in our store, let''s proceed to create a web
    API user:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们商店中有一个有效的角色，让我们继续创建网络API用户：
- en: Go to the Magento backend.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Magento后端。
- en: Navigate to **System** | **Web Services** | **Users** from the main navigation
    menu.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主导航菜单导航到**系统** | **Web服务** | **用户**。
- en: Click on the **Add New User** button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新用户**按钮。
- en: As shown in the following screenshot, you will be asked for the user information:![Setting
    up the API credentials for XML-RPC/SOAP](img/4195OS_05_01.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，您将被要求提供用户信息：![设置XML-RPC/SOAP的API凭证](img/4195OS_05_01.jpg)
- en: In the **API Key** and **API Key Confirmation** fields, input your desired password.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**API密钥**和**API密钥确认**字段中，输入您希望使用的密码。
- en: Click on the **User Role** tab.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**用户角色**标签。
- en: Select the user role that we just created.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们刚刚创建的用户角色。
- en: Click on the **Save User** button.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存用户**按钮。
- en: The reason that we need to create username and role to access the API is that
    every single API function requires a **session token** to be passed as a parameter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建用户名和角色来访问API的原因是，每个API函数都需要一个**会话令牌**作为参数传递。
- en: For this reason, every time we need to use the API, the first call that we have
    to make is to the `login` function, which will return a valid session token id.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次我们需要使用API时，我们必须首先调用`login`函数，该函数将返回一个有效的会话令牌ID。
- en: Setting up the REST API credentials
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置REST API凭证
- en: The new RESTful API is slightly different in terms of authentication; instead
    of using the traditional Magento web service users, it uses a three-legged **OAuth
    1.0** protocol to provide authentication.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 新的RESTful API在认证方面略有不同；它不是使用传统的Magento网络服务用户，而是使用三脚的**OAuth 1.0**协议来提供认证。
- en: 'OAuth works by asking the user to authorize its application. When the user
    registers an application, he/she needs to fill in the following fields:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth通过请求用户授权其应用程序来工作。当用户注册应用程序时，他/她需要填写以下字段：
- en: '**User**: This refers to a customer who has an account with Magento, and can
    user the services with the API.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：这指的是拥有Magento账户并可以使用API服务的客户。'
- en: '**Consumer**: This refers to a third-party application that uses OAuth to access
    the Magento API.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：这指的是使用OAuth访问Magento API的第三方应用程序。'
- en: '**Consumer key**: This refers to a unique value used to identify a user with
    Magento.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者密钥**：这指的是一个唯一值，用于识别使用Magento的用户。'
- en: '**Consumer secret**: This refers to a secret used by the customer to guarantee
    the ownership of the consumer key. This value is never passed on the request.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者密钥**：这指的是消费者用来保证消费者密钥所有权的秘密。此值永远不会在请求中传递。'
- en: '**Request token**: This value is used by the consumer (application) to obtain
    authorization from the user to access the API resources.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求令牌**：此值由消费者（应用程序）用于从用户那里获取访问API资源的授权。'
- en: '**Access token**: This is returned in exchange of the request token and on
    successful authentication.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问令牌**：这是在交换请求令牌和成功认证后返回的。'
- en: 'Let''s proceed to register our application by going to **System** | **Web Services**
    | **REST - OAuth Consumers**, and selecting **Add New** in the **Admin** panel.
    We will get the following screen:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过访问**系统** | **Web服务** | **REST - OAuth消费者**并选择**管理员面板中的“添加新”**来注册我们的应用程序。我们将看到以下屏幕：
- en: '![Setting up the REST API credentials](img/4195OS_05_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![设置REST API凭证](img/4195OS_05_03.jpg)'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One important thing to notice is that a callback URL must be defined, to which
    the user will be redirected after successfully authorizing the application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的重要事项是必须定义一个回调URL，用户在成功授权应用程序后将被重定向到该URL。
- en: 'So, our first step is to learn how to get this session token ID on each of
    the available API protocols:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的第一步是学习如何在每个可用的API协议上获取此会话令牌ID：
- en: 'To get session the token ID in XML-RPC, we need to execute the following code:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在XML-RPC中获取会话令牌ID，我们需要执行以下代码：
- en: '[PRE1]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To get a session token ID in SOAP v2, we need to execute the following code:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在SOAP v2中获取会话令牌ID，我们需要执行以下代码：
- en: '[PRE2]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To get a session token ID in REST, we need to execute the following code:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在REST中获取会话令牌ID，我们需要执行以下代码：
- en: '[PRE3]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading and reading data
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载和读取数据
- en: 'The `Mage_Catalog` module product endpoint has the following exposed methods
    that we can use to manage products:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mage_Catalog`模块的产品端点公开以下方法，我们可以使用这些方法来管理产品：'
- en: '`catalog_product.currentStore`: This can be used to set/get the current store
    view'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.currentStore`：此命令可以用来设置/获取当前商店视图'
- en: '`catalog_product.list`: This retrieves the products list using filters'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.list`：此命令使用过滤器检索产品列表'
- en: '`catalog_product.info`: This retrieves a product'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.info`：此命令检索一个产品'
- en: '`catalog_product.create`: This creates a new product'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.create`：这会创建一个新的产品'
- en: '`catalog_product.update`: This updates a product'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.update`：这会更新一个产品'
- en: '`catalog_product.setSpecialPrice`: This sets a special price for a product'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.setSpecialPrice`：这会为产品设置一个特殊价格'
- en: '`catalog_product.getSpecialPrice`: This gets a special price for a product'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.getSpecialPrice`：这会获取产品的特殊价格'
- en: '`catalog_product.delete`: This deletes a product'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.delete`：这会删除一个产品'
- en: Right now, the functions that are of particular interest to us are `catalog_product.list`
    and `catalog_product.info`. Let's see how we can use the API to retrieve product
    data from our staging store.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，对我们特别感兴趣的函数是`catalog_product.list`和`catalog_product.info`。让我们看看我们如何使用API从我们的预发布商店检索产品数据。
- en: 'To retrieve product data from our staging store in XML-RPC, execute the following
    code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的预发布商店在XML-RPC中检索产品数据，执行以下代码：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To retrieve product data from our staging store in SOAP v2, execute the following
    code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的预发布商店在SOAP v2中检索产品数据，执行以下代码：
- en: '[PRE5]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To retrieve product data from our staging store in REST, execute the following
    code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的预发布商店在REST中检索产品数据，执行以下代码：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Regardless of the protocol, we will get back a list of all the products' **SKUs**
    (short for **Stock Keeping Units**), but what if we want to filter that product
    list based on an attribute? Well, the Magento lists functions that allows us to
    do this by passing a parameter. That said, let's see how we can add filters to
    our product list call.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 无论协议如何，我们都会得到所有产品**SKU**（缩写为**库存单位**）的列表，但如果我们想根据属性过滤该产品列表怎么办？嗯，Magento列出了允许我们通过传递参数来完成此操作的函数。话虽如此，让我们看看我们如何向我们的产品列表调用添加过滤器。
- en: 'To add filters to our product list call in XML-RPC, execute the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中为我们的产品列表调用添加过滤器，执行以下代码：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To add filters to our product list call in SOAP v2, execute the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAP v2中为我们的产品列表调用添加过滤器，执行以下代码：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using REST, things are not that simple, and it is not possible to retrieve a
    product collection filtered by an attribute. However, we can retrieve all the
    products that belong to a specific category
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用REST，事情并不那么简单，无法通过属性过滤检索产品集合。然而，我们可以检索属于特定类别的所有产品
- en: 'To add filters to our product list call in REST, execute the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在REST中为我们的产品列表调用添加过滤器，执行以下代码：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Updating data
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新数据
- en: Now that we can retrieve product information from the Magento API, we can start
    updating the content of each product.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从Magento API中检索产品信息，我们可以开始更新每个产品的内容。
- en: 'The `catalog_product.update` method will allow us to modify any of the product
    attributes; the function call takes the following parameters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`catalog_product.update`方法将允许我们修改任何产品属性；函数调用需要以下参数：'
- en: 'To update data in XML-RPC, execute the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中更新数据，执行以下代码：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To update data in SOAP v2, execute the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAP v2中更新数据，执行以下代码：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To update data in REST, execute the following code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要在REST中更新数据，执行以下代码：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Deleting a product
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除产品
- en: Deleting products using the API is very simple, and is probably one of the most
    common operations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API删除产品非常简单，可能是最常见的操作之一。
- en: 'To delete products in XML-RPC, execute the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中删除产品，执行以下代码：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To delete products in SOAP v2, execute the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAP v2中删除产品，执行以下代码：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To delete the code in REST, execute the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在REST中删除代码，执行以下代码：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Extending the API
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展API
- en: 'Now that we have a basic understanding of how to use the Magento Core API,
    we can proceed to extend and add our custom functionality. In order to add new
    API functionality, we have to modify/create the following files:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对如何使用 Magento 核心API有了基本了解，我们可以继续扩展并添加我们的自定义功能。为了添加新的API功能，我们必须修改/创建以下文件：
- en: '`wsdl.xml`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsdl.xml`'
- en: '`api.xml`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.xml`'
- en: '`api.php`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.php`'
- en: In order to make our registries accessible for third-party systems, we need
    to create and expose the following functions
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的注册信息对第三方系统可访问，我们需要创建并公开以下函数
- en: '`giftregistry_registry.list`: This retrieves a list of all the registry IDs;
    it takes an optional customer ID parameter'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_registry.list`：这会检索所有注册ID的列表；它接受一个可选的客户ID参数'
- en: '`giftregistry_registry.info`: This retrieves all the registry information;
    it takes a required registry_id parameter'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_registry.info`：这会检索所有注册信息；它需要一个必需的registry_id参数'
- en: '`giftregistry_item.list`: This retrieves a list of all the registry item IDs
    associated with a registry; it takes a required `registry_id` parameter'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_item.list`：此操作检索与登记册关联的所有登记项 ID 的列表；它需要一个必需的 `registry_id` 参数'
- en: '`giftregistry_item.info`: This retrieves the product and detailed information
    of a registry item; it takes a required `item_id` parameter'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_item.info`：此操作检索登记项的产品和详细信息；它需要一个必需的 `item_id` 参数'
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There's a challenge here. So far, we have only added reading operations; try
    to include API methods to update, delete, and create registries and registry items.
    To see the answer with the complete code and full breakdown, refer to [http://www.magedevguide.com/](http://www.magedevguide.com/).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战。到目前为止，我们只添加了读取操作；尝试包括用于更新、删除和创建登记册和登记项的 API 方法。要查看完整的代码和详细分解，请参阅 [http://www.magedevguide.com/](http://www.magedevguide.com/)。
- en: 'Our first step is to implement the API class and the required functions:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是实现 API 类和所需的函数：
- en: Navigate to the `Model` directory.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `Model` 目录。
- en: 'Create a new class called `Api.php` at `app/code/local/Mdg/Giftregistry/Model/Api.php`,
    and place the following placeholder content inside it:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Mdg/Giftregistry/Model/Api.php` 创建一个名为 `Api.php` 的新类，并在其中放置以下占位符内容：
- en: '[PRE16]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory called `Api/`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Api/` 的新目录。
- en: 'Inside `Api/`, create a new class called `V2.php` at `app/code/local/Mdg/Giftregistry/Model/Api/V2.php`
    and place the following placeholder content inside it:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Api/` 目录下，在 `app/code/local/Mdg/Giftregistry/Model/Api/V2.php` 创建一个名为 `V2.php`
    的新类，并在其中放置以下占位符内容：
- en: '[PRE17]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first thing you might notice is that `V2.php` extends the API class that
    we just created. The only difference is that the `V2` class is used by the `SOAP_v2`
    protocol, while the regular API class is used for all other requests.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会首先注意到 `V2.php` 扩展了我们刚刚创建的 API 类。唯一的区别是 `V2` 类用于 `SOAP_v2` 协议，而常规 API 类用于所有其他请求。
- en: 'Let''s update the API class with some working code located at `app/code/local/Mdg/Giftregistry/Model/Api.php`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用位于 `app/code/local/Mdg/Giftregistry/Model/Api.php` 的有效代码更新 API 类：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we can see from the preceding code, we are not doing anything new. Each function
    is in charge of loading either a collection of Magento objects, or a specific
    object based on the required parameters.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们并没有做任何新的事情。每个函数负责根据所需的参数加载 Magento 对象的集合或特定对象。
- en: 'In order to expose this new function to the Magento API, we need to configure
    the XML files we created previously. Let''s start by updating `api.xml`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将此新功能暴露给 Magento API，我们需要配置我们之前创建的 XML 文件。让我们首先更新 `api.xml`：
- en: Open the `api.xml` file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `api.xml` 文件。
- en: 'Add the following XML code to this file located at `app/code/local/Mdg/Giftregistry/etc/api.xml`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 XML 代码添加到位于 `app/code/local/Mdg/Giftregistry/etc/api.xml` 的此文件中：
- en: '[PRE19]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There is one more file we need to update in order to make sure the SOAP adapters
    pick up our new API functions:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 SOAP 适配器能够获取我们的新 API 函数，我们还需要更新一个文件：
- en: Open the `wsdl.xml` file.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wsdl.xml` 文件。
- en: 'Since WSDL is normally very long in extend, we will break it down in several
    places. Let''s start by defining the skeleton of the `wsdl.xml` file, located
    at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 WSDL 通常非常长，我们将它在几个地方进行拆分。让我们首先定义位于 `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`
    的 `wsdl.xml` 文件的基本框架：
- en: '[PRE20]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is the basic placeholder where we have all the main nodes that we defined
    at the beginning of the chapter. The first thing that we have to define is the
    custom data type that our API will use, located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是基本占位符，其中包含我们在本章开头定义的所有主要节点。我们必须定义的第一件事是我们 API 将使用的自定义数据类型，位于 `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`：
- en: '[PRE21]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complex data types allow us to map which attributes and objects are transmitted
    through the API.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复杂数据类型允许我们映射通过 API 传输的属性和对象。
- en: 'Messages allow us to define which of the complex types are transmitted on each
    API call request and response. Let''s proceed by adding the respective messages
    in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息允许我们定义在每次 API 调用请求和响应中传输的复杂类型。让我们继续在我们的 `wsdl.xml` 文件中添加相应的消息，该文件位于 `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`：
- en: '[PRE22]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'One important thing to notice is that each request message will always include
    a `sessionId` that is used to validate and authenticate each request. On the other
    hand, the response is used to specify which complex data types or values are returned.
    Adding the respective messages in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的一个重要事项是，每个请求消息都将始终包含一个用于验证和认证每个请求的`sessionId`。另一方面，响应用于指定返回哪些复杂的数据类型或值。在位于`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`的`wsdl.xml`文件中添加相应的消息：
- en: '[PRE23]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The next thing that is required to properly add a new API endpoint is to define
    the bindings, which are used to specify the methods that are exposed. Adding the
    respective messages in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确添加新的API端点所需做的下一件事是定义绑定，这些绑定用于指定暴露的方法。在位于`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`的`wsdl.xml`文件中添加相应的消息：
- en: '[PRE24]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see the complete `wsdl.xml` in one piece at [http://magedevguide.com/chapter6/wsdl](http://magedevguide.com/chapter6/wsdl).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://magedevguide.com/chapter6/wsdl](http://magedevguide.com/chapter6/wsdl)中看到完整的`wsdl.xml`。
- en: 'Even after we broke it down, the WSDL code can still seem overwhelming. To
    be honest, it took me some time to get used to such a massive XML file, so let''s
    review what each section does:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们将它分解了，WSDL代码仍然可能显得令人难以置信。说实话，我花了一些时间才习惯这样一个庞大的XML文件，所以让我们回顾一下每个部分的作用：
- en: '`types`: These are used to describe the data transmitted with the API; types
    are defined using XML Schema, a special language for this purpose'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`types`：这些用于描述API传输的数据；类型使用XML Schema定义，这是一种专门用于此目的的语言'
- en: '`message`: This is used to specify the information needed to perform each operation;
    in the case of Magento, our API methods will always use a request and respond
    message'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`：用于指定执行每个操作所需的信息；在Magento的情况下，我们的API方法将始终使用请求和响应消息'
- en: '`portType`: This is used to define the operations that can be performed and
    the corresponding messages'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`portType`：用于定义可以执行的操作和相应的消息'
- en: '`port`: This is used to define the connection point; in the case of Magento,
    a simple string is used'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：用于定义连接点；在Magento的情况下，使用一个简单的字符串'
- en: '`service`: This is used to specify which functions are exposed through the
    API'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service`：用于指定通过API暴露哪些功能'
- en: '`bindings`: These are used to define the operations and the interface with
    the SOAP protocol'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bindings`：这些用于定义操作和与SOAP协议的接口'
- en: Extending the REST API
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展REST API
- en: So far, we have only worked on extending the SOAP and XML-RPC parts of the API;
    the process involved in extending the RESTful API is slightly different.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只扩展了API的SOAP和XML-RPC部分；扩展RESTful API的过程略有不同。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The REST API was introduced with Magento Community Edition 1.7 and Enterprise
    Edition 1.12.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: REST API是在Magento社区版1.7和企业版1.12中引入的。
- en: 'In order to expose the new API methods to the REST API, we need to create a
    new file called `api2.xml`; the configuration in this file is a little more complex
    than the normal `api.xml`, so we will break it down after adding the full code:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将新的API方法暴露给REST API，我们需要创建一个名为`api2.xml`的新文件；这个文件中的配置比正常的`api.xml`要复杂一些，所以我们将在添加完整代码后进行分解：
- en: Create a new file called `api2.xml` under the `etc/` folder.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`etc/`文件夹下创建一个名为`api2.xml`的新文件。
- en: Open `api2.xml`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`api2.xml`。
- en: 'Copy the following code in `api2.xml` located at `app/code/local/Mdg/Giftregistry/etc/api2.xml`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位于`app/code/local/Mdg/Giftregistry/etc/api2.xml`的`api2.xml`中复制以下代码：
- en: '[PRE25]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: One important thing to notice is that we are defining a route node inside this
    configuration file. This is treated by Magento as a frontend route, and is used
    to access the RESTful API function. Also, notice that we don't need to create
    a new controller for this to work.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个重要事项是，我们在配置文件中定义了一个路由节点。这被Magento视为前端路由，并用于访问RESTful API功能。另外，请注意，我们不需要为这个功能创建一个新的控制器。
- en: 'Now, we also need to include a new class to handle the REST requests and implement
    each of the defined privileges:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要包含一个新的类来处理REST请求并实现每个定义的权限：
- en: Create a new class called `V1.php` under `Model/Api/Registry/Rest/Admin`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model/Api/Registry/Rest/Admin`下创建一个名为`V1.php`的新类。
- en: 'Open the `V1.php` class located at `app/code/local/Mdg/Giftregistry/Model/Api/Registry/Rest/Admin/V1.php`
    and copy the following code:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`app/code/local/Mdg/Giftregistry/Model/Api/Registry/Rest/Admin/V1.php`的`V1.php`类，并复制以下代码：
- en: '[PRE26]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Securing the API
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API
- en: Securing our API is already part of the process of creating our module, and
    is also handled by the configuration. The way Magento restrict access to their
    API is using ACL.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 保护我们的 API 已经是创建我们模块的过程的一部分，并且也由配置处理。Magento 限制对其 API 的访问方式是使用 ACL。
- en: 'As we learned earlier, these ACL allows us to set up roles with access to different
    parts of the API. Now what we have to do is make our new custom functions available
    to the ACL:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所学，这些 ACL 允许我们设置具有访问 API 不同部分的角色的权限。现在我们所要做的就是让我们的新自定义函数对 ACL 可用：
- en: Open the `api.xml` file.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `api.xml` 文件。
- en: 'Add the following code after the `</v2>` node located at `app/code/local/Mdg/Giftregistry/etc/api.xml`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Mdg/Giftregistry/etc/api.xml` 中 `</v2>` 节点之后添加以下代码：
- en: '[PRE27]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: While we learned how to extend Magento to add new functionalities to both store
    owners and customers in previous chapters, knowing how to extend and work with
    the Magento API opens a world of possibilities.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在前几章中我们学习了如何扩展 Magento 以向店主和顾客添加新功能，但了解如何扩展和使用 Magento API 则打开了无限可能的世界。
- en: Using the API, we can integrate Magento with third-party systems, such as ERP
    and **Point of Sale** (**POS**) both by importing and exporting data.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 API，我们可以通过导入和导出数据将 Magento 与第三方系统（如 ERP 和 **销售点**（**POS**））集成。
- en: In the next chapter, we will learn how to properly build a test for all the
    code we have been building so far, and we will also explore multiple testing frameworks.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何正确构建迄今为止所构建的所有代码的测试，我们还将探索多个测试框架。
