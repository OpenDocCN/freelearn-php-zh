- en: Chapter 5. The Magento API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we extended the Magento backend and learned how to
    use some of the backend components, so that store owners can manage and manipulate
    the gift registry data of each customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go over the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Magento Core API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The multiple API protocols available (**REST**, **SOAP**, and **XML-RPC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Core API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to extend the API to implement a new functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to restrict parts of the API to specific web user roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the backend provides an interface for day-to-day operations, sometimes,
    we will need to access and transmit data to and from third-party systems. Magento
    already provides the API functionality for most of the core functionalities, but
    for our custom gift registry extension, we will need to extend the `Mage_Api`
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The Core API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, while talking about the API, I heard developers talk about the Magento
    SOAP API, the Magento XML-RPC API, or the RESTful API, but there is the important
    fact that these are not separate APIs for each of these protocols. Instead, Magento
    has a single Core API.
  prefs: []
  type: TYPE_NORMAL
- en: As you might notice, Magento is built mostly around abstraction and configuration
    (mostly XML), and the Magento API is no exception. We have a single Core API and
    adapters for each of the different protocol types. This is incredibly flexible,
    and if we want to, we can implement our adapter for another protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core Magento API gives us the ability to manage products, categories, attributes,
    orders, and invoices; this is done by exposing three of the core modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mage_Catalog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage_Sales`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage_Customer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The API supports three different types: SOAP, XML-RPC, and REST. Now, if you
    have done web development outside Magento and with other APIs, it is most likely
    that these APIs have been RESTful APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump into the specifics of the Magento API architecture, it is important
    that we understand the differences between each of the supported API types.
  prefs: []
  type: TYPE_NORMAL
- en: XML-RPC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'XML-RPC was one of the first supported protocols by Magento, and is the oldest
    of them all. This protocol has a single endpoint on which all the functions are
    called and accessed. The definition for XML-RPC is quoted on Wikipedia as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*XML-RPC is a remote procedure call (RPC) protocol that uses XML to encode
    its calls and HTTP as a transport mechanism.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since there is only a single endpoint, XML-RPC is easy to use and maintain;
    its purpose is to be a simple and effective protocol to send and receive data;
    and implementation uses straightforward XML to encode and decode a remote procedure
    call along with the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this comes at a cost, and there are several problems with the whole
    XML-RPC protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: Lack of discoverability and documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymous parameters, XML-RPC relies on the order of the parameters to differentiate
    them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplicity is both the greatest strength and the greatest issue with XML-RPC.
    While most of the tasks can easily be achieved with XML-RPC some tasks will require
    you to bend over backwards to achieve something that should be straightforward
    to implement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soap was designed to address XML-RPC limitations and provide a more robust protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about XML-RPC, you can refer to [http://en.wikipedia.org/wiki/XML-RPC](http://en.wikipedia.org/wiki/XML-RPC).
  prefs: []
  type: TYPE_NORMAL
- en: SOAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SOAP v1 was one of the first supported protocols by Magento along with XML-RPC,
    and SOAP v2 has been supported since the release of **Magento CE 1.3**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition for SOAP is quoted on Wikipedia as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*SOAP, originally an acronym for Simple Object Access protocol, is a protocol
    specification for exchanging structured information in the implementation of web
    services in computer networks.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A SOAP request is an `HTTP POST` request that contains a SOAP envelope, header,
    and body.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core of SOAP is the **Web Services Description Language** (**WSDL**), which
    is XML. WSDL is used to describe the functionality of the web service, in this
    case, our API methods. This is achieved by using the following series of predetermined
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`types`: The `types` elements are used to describe the data transmitted with
    the API; the `type` elements are defined using XML Schema, a special language
    for this purpose'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: The `message` element is used to specify the information needed
    to perform each operation; in the case of Magento, our API methods will always
    use a request and a respond `message`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portType`: The `portType` elements are used the define the operations that
    can be performed and the corresponding messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`: The `port` element is used to define the connection point; in the case
    of Magento, a simple string is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service`: The `service` element is used to specify which functions are exposed
    through the API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binding`: The `binding` elements are used to define the operations and the
    interface with the SOAP protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the SOAP protocol, you can refer to [http://en.wikipedia.org/wiki/SOAP](http://en.wikipedia.org/wiki/SOAP).
  prefs: []
  type: TYPE_NORMAL
- en: 'All the WSDL configuration is contained inside each module''s `wsdl.xml` file;
    for example, let''s take a look at an excerpt of the `Catalog Product` API, located
    at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using WSDL, we can document, list, and support more complex data types.
  prefs: []
  type: TYPE_NORMAL
- en: The RESTful API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The RESTful API is a new addition to the family of protocols supported by Magento
    and is only available on **Magento CE 1.7** or higher.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition for a RESTful web service can be quoted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A RESTful web service (also called a RESTful web API) is the web service implemented
    using HTTP and the principles of REST.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A RESTful API can be defined by the following three aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: It makes use of the standard of HTTP methods, such as `GET`, `POST`, `DELETE`,
    and `PUT`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It exposes the URIs formatted in a directory-like structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses JSON or XML to transfer information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The REST API supports the response in two formats, which are XML and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: One the advantages that REST has over SOAP and XML-RPC is that all interaction
    with the REST API is done through the HTTP protocol, which means that it can be
    used by virtually any programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Magento REST API has the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Resources are accessed by making an HTTP request to the Magento API service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The service will reply with the data for the request, a status indicator, or
    even both
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All resources can be accessed by using `https://magento.localhost.com/api/rest/`
    as URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources return **HTTP status codes**, such as `HTTP Status Code 200`, to indicate
    success on a response or `HTTP Status Code 400` to indicate a bad request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requests to a particular resource are done by adding a particular path to the
    base URL (`https://magento.localhost.com/api/rest/`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST uses **HTTP verbs** to manage the states of resources. In the Magento
    implementation, four verbs are available: `GET`, `POST`, `PUT`, and `DELETE`.
    For this reason, using the RESTful API is easy in most cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have clarified each of the available protocols, let's explore what
    we can do with the Magento API and how we can use it with each of the available
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the product endpoint as an example to access and work with the different
    API protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The examples are provided in PHP and use the three different protocols. For
    complete examples in other programming languages, check out [http://magedevguide.com](http://magedevguide.com).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the API credentials for XML-RPC/SOAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started we, need to create a set of web service credentials in
    order to access the API functions.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we need to set up is the API user role. **Roles** control
    the permissions for the API using **Access Control List** (**ACL**). By implementing
    this design pattern, Magento is able to restrict certain parts of its API to specific
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Later on this chapter, we will learn how we can add our custom functions to
    the ACL and secure our custom extensions API methods. For now, we just need to
    create a role with full permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **System** | **Web Services** | **Roles** from the main navigation
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add New Role** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, you will be requested to provide a role
    name and specify the role resources:![Setting up the API credentials for XML-RPC/SOAP](img/4195OS_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the **Resource Access** option is set to **Custom** and no resources
    are selected. In our case, we will change the **Resource Access** option by selecting
    **All** from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save Role** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have a valid role in our store, let''s proceed to create a web
    API user:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **System** | **Web Services** | **Users** from the main navigation
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add New User** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, you will be asked for the user information:![Setting
    up the API credentials for XML-RPC/SOAP](img/4195OS_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **API Key** and **API Key Confirmation** fields, input your desired password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **User Role** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the user role that we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save User** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reason that we need to create username and role to access the API is that
    every single API function requires a **session token** to be passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, every time we need to use the API, the first call that we have
    to make is to the `login` function, which will return a valid session token id.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the REST API credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new RESTful API is slightly different in terms of authentication; instead
    of using the traditional Magento web service users, it uses a three-legged **OAuth
    1.0** protocol to provide authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'OAuth works by asking the user to authorize its application. When the user
    registers an application, he/she needs to fill in the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: This refers to a customer who has an account with Magento, and can
    user the services with the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer**: This refers to a third-party application that uses OAuth to access
    the Magento API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer key**: This refers to a unique value used to identify a user with
    Magento.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumer secret**: This refers to a secret used by the customer to guarantee
    the ownership of the consumer key. This value is never passed on the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request token**: This value is used by the consumer (application) to obtain
    authorization from the user to access the API resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access token**: This is returned in exchange of the request token and on
    successful authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s proceed to register our application by going to **System** | **Web Services**
    | **REST - OAuth Consumers**, and selecting **Add New** in the **Admin** panel.
    We will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the REST API credentials](img/4195OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important thing to notice is that a callback URL must be defined, to which
    the user will be redirected after successfully authorizing the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, our first step is to learn how to get this session token ID on each of
    the available API protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get session the token ID in XML-RPC, we need to execute the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get a session token ID in SOAP v2, we need to execute the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get a session token ID in REST, we need to execute the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loading and reading data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Mage_Catalog` module product endpoint has the following exposed methods
    that we can use to manage products:'
  prefs: []
  type: TYPE_NORMAL
- en: '`catalog_product.currentStore`: This can be used to set/get the current store
    view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.list`: This retrieves the products list using filters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.info`: This retrieves a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.create`: This creates a new product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.update`: This updates a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.setSpecialPrice`: This sets a special price for a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.getSpecialPrice`: This gets a special price for a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`catalog_product.delete`: This deletes a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right now, the functions that are of particular interest to us are `catalog_product.list`
    and `catalog_product.info`. Let's see how we can use the API to retrieve product
    data from our staging store.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve product data from our staging store in XML-RPC, execute the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve product data from our staging store in SOAP v2, execute the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve product data from our staging store in REST, execute the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Regardless of the protocol, we will get back a list of all the products' **SKUs**
    (short for **Stock Keeping Units**), but what if we want to filter that product
    list based on an attribute? Well, the Magento lists functions that allows us to
    do this by passing a parameter. That said, let's see how we can add filters to
    our product list call.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add filters to our product list call in XML-RPC, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To add filters to our product list call in SOAP v2, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using REST, things are not that simple, and it is not possible to retrieve a
    product collection filtered by an attribute. However, we can retrieve all the
    products that belong to a specific category
  prefs: []
  type: TYPE_NORMAL
- en: 'To add filters to our product list call in REST, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Updating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can retrieve product information from the Magento API, we can start
    updating the content of each product.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `catalog_product.update` method will allow us to modify any of the product
    attributes; the function call takes the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To update data in XML-RPC, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To update data in SOAP v2, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To update data in REST, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deleting products using the API is very simple, and is probably one of the most
    common operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete products in XML-RPC, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete products in SOAP v2, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete the code in REST, execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Extending the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a basic understanding of how to use the Magento Core API,
    we can proceed to extend and add our custom functionality. In order to add new
    API functionality, we have to modify/create the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wsdl.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to make our registries accessible for third-party systems, we need
    to create and expose the following functions
  prefs: []
  type: TYPE_NORMAL
- en: '`giftregistry_registry.list`: This retrieves a list of all the registry IDs;
    it takes an optional customer ID parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`giftregistry_registry.info`: This retrieves all the registry information;
    it takes a required registry_id parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`giftregistry_item.list`: This retrieves a list of all the registry item IDs
    associated with a registry; it takes a required `registry_id` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`giftregistry_item.info`: This retrieves the product and detailed information
    of a registry item; it takes a required `item_id` parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's a challenge here. So far, we have only added reading operations; try
    to include API methods to update, delete, and create registries and registry items.
    To see the answer with the complete code and full breakdown, refer to [http://www.magedevguide.com/](http://www.magedevguide.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first step is to implement the API class and the required functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new class called `Api.php` at `app/code/local/Mdg/Giftregistry/Model/Api.php`,
    and place the following placeholder content inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new directory called `Api/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Api/`, create a new class called `V2.php` at `app/code/local/Mdg/Giftregistry/Model/Api/V2.php`
    and place the following placeholder content inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first thing you might notice is that `V2.php` extends the API class that
    we just created. The only difference is that the `V2` class is used by the `SOAP_v2`
    protocol, while the regular API class is used for all other requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the API class with some working code located at `app/code/local/Mdg/Giftregistry/Model/Api.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As we can see from the preceding code, we are not doing anything new. Each function
    is in charge of loading either a collection of Magento objects, or a specific
    object based on the required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to expose this new function to the Magento API, we need to configure
    the XML files we created previously. Let''s start by updating `api.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `api.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following XML code to this file located at `app/code/local/Mdg/Giftregistry/etc/api.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There is one more file we need to update in order to make sure the SOAP adapters
    pick up our new API functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `wsdl.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since WSDL is normally very long in extend, we will break it down in several
    places. Let''s start by defining the skeleton of the `wsdl.xml` file, located
    at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the basic placeholder where we have all the main nodes that we defined
    at the beginning of the chapter. The first thing that we have to define is the
    custom data type that our API will use, located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Complex data types allow us to map which attributes and objects are transmitted
    through the API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Messages allow us to define which of the complex types are transmitted on each
    API call request and response. Let''s proceed by adding the respective messages
    in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'One important thing to notice is that each request message will always include
    a `sessionId` that is used to validate and authenticate each request. On the other
    hand, the response is used to specify which complex data types or values are returned.
    Adding the respective messages in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next thing that is required to properly add a new API endpoint is to define
    the bindings, which are used to specify the methods that are exposed. Adding the
    respective messages in our `wsdl.xml` file located at `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see the complete `wsdl.xml` in one piece at [http://magedevguide.com/chapter6/wsdl](http://magedevguide.com/chapter6/wsdl).
  prefs: []
  type: TYPE_NORMAL
- en: 'Even after we broke it down, the WSDL code can still seem overwhelming. To
    be honest, it took me some time to get used to such a massive XML file, so let''s
    review what each section does:'
  prefs: []
  type: TYPE_NORMAL
- en: '`types`: These are used to describe the data transmitted with the API; types
    are defined using XML Schema, a special language for this purpose'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message`: This is used to specify the information needed to perform each operation;
    in the case of Magento, our API methods will always use a request and respond
    message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`portType`: This is used to define the operations that can be performed and
    the corresponding messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`port`: This is used to define the connection point; in the case of Magento,
    a simple string is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`service`: This is used to specify which functions are exposed through the
    API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bindings`: These are used to define the operations and the interface with
    the SOAP protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the REST API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have only worked on extending the SOAP and XML-RPC parts of the API;
    the process involved in extending the RESTful API is slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The REST API was introduced with Magento Community Edition 1.7 and Enterprise
    Edition 1.12.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to expose the new API methods to the REST API, we need to create a
    new file called `api2.xml`; the configuration in this file is a little more complex
    than the normal `api.xml`, so we will break it down after adding the full code:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `api2.xml` under the `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `api2.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code in `api2.xml` located at `app/code/local/Mdg/Giftregistry/etc/api2.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One important thing to notice is that we are defining a route node inside this
    configuration file. This is treated by Magento as a frontend route, and is used
    to access the RESTful API function. Also, notice that we don't need to create
    a new controller for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we also need to include a new class to handle the REST requests and implement
    each of the defined privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class called `V1.php` under `Model/Api/Registry/Rest/Admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `V1.php` class located at `app/code/local/Mdg/Giftregistry/Model/Api/Registry/Rest/Admin/V1.php`
    and copy the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Securing the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing our API is already part of the process of creating our module, and
    is also handled by the configuration. The way Magento restrict access to their
    API is using ACL.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we learned earlier, these ACL allows us to set up roles with access to different
    parts of the API. Now what we have to do is make our new custom functions available
    to the ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `api.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the `</v2>` node located at `app/code/local/Mdg/Giftregistry/etc/api.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we learned how to extend Magento to add new functionalities to both store
    owners and customers in previous chapters, knowing how to extend and work with
    the Magento API opens a world of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Using the API, we can integrate Magento with third-party systems, such as ERP
    and **Point of Sale** (**POS**) both by importing and exporting data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to properly build a test for all the
    code we have been building so far, and we will also explore multiple testing frameworks.
  prefs: []
  type: TYPE_NORMAL
