- en: Chapter 5. Datasources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Improving the SQL datasource query log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing CSV files with a datasource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming RSS feeds with a datasource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Twitter datasource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding transaction and locking support to the MySQL datasource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Datasources are the backbone of almost all model operations. They provide an
    abstraction between model logic and the underlying data layer, allowing a more
    flexible approach to data manipulation. Through this abstraction, CakePHP applications
    are able to manipulate data without knowing the specifics of how it's stored or
    fetched.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows how to get information from existing datasources, use pre-built
    datasources to deal with non-relational data, and teaches us how to create a full-featured
    Twitter datasource.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the SQL datasource query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to create a component that will offer extended logging
    of all queries executed on any SQL-based datasource that supports the `EXPLAIN`
    command (this recipe is designed to work with MySQL, but can be adapted to other
    SQL based datasources), and show that information when the appropriate debug setting
    is set.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `accounts`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table named `profiles`, using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model `Profile` in
    a file named `profile.php` and place it in your `app/models` folder with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller `ProfilesController` in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `profiles` in your `app/views` folder, and then create
    the view in a file named `index.ctp` and place it in your `app/views/profiles`
    folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t have a layout, copy the layout file named `default.ctp` from
    your `cake/libs/view/layouts` folder to your application `app/views/layouts` folder.
    If you do have a layout, make sure it includes the standard SQL view element where
    you want the SQL logging placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, set your debug level to `2` by editing your `app/config/core.php`
    file and changing the `Configure::write(''debug'')` line to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a file named `query_log.php` and place it in your `app/controllers/components`
    folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While still editing the `query_log.php` file, add the following method to the
    `QueryLogComponent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `QueryLog` component to all your controllers. Create a file named `app_controller.php`
    and place it in your `app/` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you already have an `app_controller.php` file, make sure your `components`
    property includes the `QueryLog` component as shown previously.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a file named `query_log.ctp` and place it in your `app/views/elements`
    folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit your `app/views/layouts/default.ctp` file and replace the line
    that reads `<?php echo $this->element(''sql_dump''); ?>` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/profiles`, we should see the improved
    query log that includes the explanation of `SELECT` queries, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SQL command `EXPLAIN` is used to obtain the execution plan for a `SELECT`
    query. When using `EXPLAIN`, MySQL includes information such as which tables are
    joined in the query, in which order they are joined, and what keys (if any) are
    used to optimize the query. This information can be used to optimize queries and
    considerably reduce their execution time.
  prefs: []
  type: TYPE_NORMAL
- en: The `QueryLog` component checks the `debug` setting to determine if it should
    process the query log, and uses the `minimumTime` setting to add more information
    about those queries that took a certain number of milliseconds, or more. In our
    example, we set this value to `0` when we added the component to `AppController`
    to make sure all `SELECT` queries are properly explained.
  prefs: []
  type: TYPE_NORMAL
- en: The component uses the `beforeRender` callback to perform its processing right
    before a view is to be rendered. It starts by using the `ConnectionManager::sourceList()`
    method to obtain a list of all available datasources (that is, the name of all
    connections defined in the `app/config/database.php` file). For each of those
    connection names, it gets the actual datasource object using the `ConnectionManager::getDataSource()`
    method. As we will see in other recipes in this chapter, a datasource may not
    implement all methods, so the component then uses the `isInterfaceSupported()`
    method, available in all datasources, to see if that particular source implements
    the `getLog()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `getLog()` method, the component obtains the list of queries issued
    on a particular source, and filters those to check for only `SELECT` queries that
    run for the minimum time specified in the `minimumTime` setting. Once it has the
    list of `SELECT` queries that need to be explained, it issues an `EXPLAIN` SQL
    statement, and processes the result into a more readable format, ensuring that
    all fields obtained are lower case.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, and now that the query log is properly processed, it sets the appropriate
    view variable, which is utilized by the `query_log.ctp` element to show the log.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing CSV files with a datasource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to parse **comma-separated values** (**CSV**) files using
    a datasource, showing a clean approach to CSV processing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing CakePHP's datasources plugin. Download the latest release
    from [http://github.com/mariano/datasources/downloads](http://github.com/mariano/datasources/downloads)
    and uncompress the downloaded file into your `app/plugins` folder. You should
    now have a directory named `datasources` inside `app/plugins`.
  prefs: []
  type: TYPE_NORMAL
- en: The datasources plugin, located at [http://github.com/cakephp/datasources](http://github.com/cakephp/datasources),
    is an official CakePHP plugin that offers several community-provided datasources,
    such as XML-RPC and SOAP. This and other recipes use a customized version of the
    plugin, modified for the purpose of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need some sample data to work with. Create a file named `contacts.csv` and
    place it in a folder of your choice (such as `/home/mariano`), with contents similar
    to the ones shown below. This example includes only two rows of data, but the
    file used in this recipe uses several more rows, and should include the starting
    header row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by creating a connection to use the CSV datasource. Open your `app/config/database.php`
    file and add the following connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a model named `Contact` in a file named `contact.php` and place it in
    your `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create its controller in a file named `contacts_controller.php` and place it
    in your `app/controllers` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to create the view. Create a folder named `contacts` in your
    `app/views` folder, and in that folder create a file named `index.ctp` with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/contacts`, we should see a paginated
    list, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_05_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating a new connection named `csv`, specifying `datasources.CsvSource`
    as its type, that is, a datasource named `CsvSource` that is a part of a plugin
    named `datasources`. We set the path to our CSV files to CakePHP's temporary directory
    using the `path` setting, and we specify that we don't want that path to be created
    if it doesn't exist, by setting `readonly` to true.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The fork we are using in this recipe adds a feature to the original plugin:
    allowing one to change the CSV file used via the model property `table`'
  prefs: []
  type: TYPE_NORMAL
- en: We then create the `Contact` model, specifying its underlying connection to
    be `csv` through the `useDbConfig` property. The CSV data source will then use
    the respective table name as the name of the file, attaching the `csv` extension
    to it. In this case, the CSV data source will use contacts for the `Contact` model,
    which can be changed through the model property table.
  prefs: []
  type: TYPE_NORMAL
- en: Using that file name, it will look for it in the path that was defined in the
    connection settings. If the file cannot be loaded, or if the path does not exist,
    it will throw a missing table error, just as any model with a missing table would.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default `csv` extension can be changed by specifying the `extension` setting
    in the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is properly loaded, the datasource allows us to fetch records
    by issuing simple `find()` calls. It supports some of the most common find settings:
    `limit, page, fields`, and includes basic support for defining the setting `conditions`
    to limit the obtained records (see the *There''s more* section below).'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the recipe shows how we use our `Contact` model just as we would
    use any model, exemplifying this flexibility with a paginated list of parsed CSV
    records.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other than being able to define which page to obtain (through the `page` find
    setting) and how many records to obtain (using the `limit` find setting), the
    CSV datasource allows for some basic filtering, by means of the handy `Set::matches()`
    method. For example, we can modify our paginated list to obtain contacts whose
    ages are over 30, by adding the following `conditions` setting to our `index()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic loading of CSV files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The example used in this recipe is bound to the file `contacts.csv` by means
    of the default table named for the `Contact` model, but what would be required
    if we needed to process several CSV files and we don't want to create a model
    for each of those files?
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `table` model property, we can dynamically change the underlying
    CSV file a model is importing from, and execute our `find` operations just as
    if we would''ve created a model specifically for this file. We start by creating
    a model that uses the `csv` connection, but that is not tied to any file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting `useTable` to `false` allows us to avoid any file loading. We can then
    use the `listSources()` datasource method to obtain a list of all CSV files available
    for importing, and then dynamically change the `table` model property for each
    of those files, and fetch the actual records. We do this in the following `controller`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of files obtained through the `listSources()` method is fetched from
    the `path` setting specified in the datasource configuration, as defined in `app/config/database.php`.
    This path can be changed by first cleaning up the current connection, which releases
    the handle to the previously configured path, by using the datasource `setConfig()`
    method to change the `path` setting, and then calling it''s `connect()` method
    to load the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Consuming RSS feeds with a datasource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to get content from remote RSS feeds using a datasource.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing the fork of CakePHP's datasources plugin. Download the
    latest release from [http://github.com/mariano/datasources/downloads](http://github.com/mariano/datasources/downloads)
    and uncompress the downloaded file into your `app/plugins` folder. You should
    now have a directory named `datasources`. The fork used in this recipe uses a
    refactored version of the RSS datasource developed by Donatas Kairys, member of
    Loadsys Consulting. This modified version improves the datasource performance,
    and adds the possibility of changing the feed URL through a find setting. More
    information about the original datasource can be obtained at [http://blog.loadsys.com/2009/06/19/cakephp-rss-feed-datasource](http://blog.loadsys.com/2009/06/19/cakephp-rss-feed-datasource).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by creating a connection to use the RSS datasource. Open your `app/config/database.php`
    file and add the following connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a model named `Post` in a file named `post.php` and place it in your
    `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create its controller in a file named `posts_controller.php` and place it in
    your `app/controllers` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to create the view. Create a folder named `posts` in your
    `app/views` folder, and in that folder create a file named `index.ctp` with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/posts`, we should see a paginated list
    of posts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by creating a new connection named `feed`, specifying `datasources.FeedSource`
    as its type. We use the setting `url` to specify the address of the feed source.
    Among other available connection settings we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`encoding`: Sets the character encoding to use. Defaults to the CakePHP `App.encoding`
    configuration setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache`: If set to `false`, no caching will be done. Otherwise this is the
    cache configuration name to use. Defaults to the configuration named `default`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then create the `Post` model, specifying its underlying connection to be
    `feed` through the `useDbConfig` property. We then proceed to setup a paginated
    list of posts sorting by publication date (pubDate field) in descending order,
    and limiting to nine posts per page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as with the CSV datasource shown in the recipe, *Parsing CSV files with
    a datasource*, the RSS datasource allows some basic filtering. For example, to
    only show posts that were created in the year 2009 or later, we would add the
    following `conditions` setting to our `index()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are cases where we might not be able to define the feed URL in a configuration
    file, for example, if the URL comes from a dynamic data source. Fortunately, for
    these cases we have the option to define the feed address through a custom find
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the above example, we could remove the feed URL from the connection settings,
    and specify it as a find setting named `url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Changing connection settings at runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve seen how we can change the feed URL by using a custom find setting.
    However, we could also change this address by modifying the connection settings.
    Using the method `setConfig()`, available in all datasources, we can make changes
    to any connection setting. For example, instead of using the `url` custom find
    setting, we''ll change the feed URL by changing the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Building a Twitter datasource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to implement our own datasource by providing
    a way to read from and post messages to a Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will integrate this datasource with OAuth, which is an authentication mechanism
    supported by Twitter. To do so, we will use a class named `HttpSocketOauth` developed
    by Neil Crookes, which is an extension to CakePHP's own `HttpSocket` class that
    adds OAuth support in a clean and elegant way. Download the file named `http_socket_oauth.php`
    from the URL [http://github.com/neilcrookes/http_socket_oauth/raw/master/http_socket_oauth.php](http://github.com/neilcrookes/http_socket_oauth/raw/master/http_socket_oauth.php)
    and place it in your `app/vendors` folder.
  prefs: []
  type: TYPE_NORMAL
- en: There are other ways to communicate with an `OAuth` provider such as Twitter,
    most noticeably using the **PHP OAuth library** available at [http://code.google.com/p/oauth-php](http://code.google.com/p/oauth-php).
    This recipe uses Neil's approach for its simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us continue by creating the `Tweet` model. Create a file named `tweet.php`
    and place it in your `app/models` folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its controller in a file named `tweets_controller.php` and place it
    in your `app/controllers` with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need the appropriate view. Create a folder named `tweets` in your `app/views`
    folder, and inside it, create a file named `index.ctp` with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will need to register our application on Twitter. Go to the URL [http://twitter.com/apps/new](http://twitter.com/apps/new)
    and fill in the form (an example is shown in the following figure.) Make sure
    you specify a domain different than `localhost` when asked for your **Application
    Website**, and that you select **Read & Write** when asked for the **Default Access
    Type**. You will also need to specify **Browser** as the **Application Type**,
    and `http://localhost/tweets` as the **Callback URL**, replacing `localhost` with
    your own host. This callback won't actually be utilized, as we will define it
    at runtime, but it is mandatory, so we need to fill it in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1926_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you successfully submit this form, Twitter will give you some information
    regarding your newly registered application. In that screen, make sure to grab
    what is shown as **Consumer key** and **Consumer secret**, as we will need it
    when going through this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new connection named `$twitter` to your `app/config/database.php`, by
    using the following contents and replacing `KEY` with your **Consumer key** and
    `SECRET_KEY` with the **Consumer secret** you obtained above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by fully implementing the datasource. Create a file named `twitter_source.php`
    and place it in your `app/models/datasources` folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the basic datasource skeleton, we need to add the ability
    for our datasorce to connect to Twitter, using OAuth. Add the following methods
    to the `TwitterSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Our datasource is now able to connect by requesting the proper authorization
    from Twitter. The next step is adding support to fetch tweets by implementing
    the datasource `read()` method. Add the following method to the `TwitterSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The job would not be complete if we are unable to post new tweets with our
    datasource. To finish our implementation, add the following method to the `TwitterSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'For the datasource to work, we will have to get OAuth authorization on all
    our requests to Twitter. To do so, we implement a method that will talk with the
    datasource to get the authorization keys, and handle the authorization callbacks
    Twitter will issue. Edit your `app/controllers/tweets_controller.php` and add
    the following contents at the beginning of the `TweetsController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming your twitter account name is **cookbook5**, we now browse to `http://localhost/tweets/index/cookbook5`,
    and should see a paginated list of our tweets as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the form to post new tweets should submit our text to Twitter, and show
    us our new tweet in the listing.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Twitter datasource starts by specifying two new connection settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key`: A Twitter application consumer key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`secret`: A Twitter application consumer secret key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It then defines a static schema, through the `_schema` property and the `listSources()`
    and `describe()` method implementations, to describe how a tweet post is built.
    This is done purely to add support for a Twitter based model to work with CakePHP's
    `FormHelper`. Doing so allows the `FormHelper` to determine what type of field
    to use when rendering a form for a Twitter-based model.
  prefs: []
  type: TYPE_NORMAL
- en: The `connect()` and `close()` methods simply instantiate and erase respectively
    an instance of the `HttpSocketOauth` class, which is our handler to communicate
    with the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OAuth is a complicated process, and understanding it may prove to be a challenge.
    If you wish to obtain more detailed information about this protocol, there is
    probably no better resource than the *Beginner's Guide to OAuth*, available at
    [http://hueniverse.com/oauth](http://hueniverse.com/oauth).
  prefs: []
  type: TYPE_NORMAL
- en: The `token()` method uses the connection to request a token from Twitter, which
    is needed for our requests to be successful. When one is obtained, we take the
    user to a specific Twitter URL using this token (the redirection takes place in
    the controller's `_authorize()` method), which is then used by Twitter to request
    the user for authorization.
  prefs: []
  type: TYPE_NORMAL
- en: If the user allows the access to his/her Twitter account, the Twitter API will
    redirect the browser to the URL specified in the `callback` argument of the datasource
    `token()` method. This callback was set in `_authorize()` as the current URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the user is brought back to our application, the `_authorize()` method
    will check for the existence of two parameters sent by Twitter: `oauth_token`
    and `oauth_verifier`. These parameters are passed as arguments to the datasource
    `authorize()` method, which talks back to the Twitter API for the final stage
    in the OAuth authorization procedure. This stage ends with Twitter giving back
    a valid token, and a token secret key. They are saved in the controller as a session
    variable, to avoid doing this on every request.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the authorization information, we set it as a connection setting
    by using the `setConfig()` method available in all datasources, and setting this
    information in a setting named `authorize`, because we won't be able to read from
    or post to our Twitter account without this authorization.
  prefs: []
  type: TYPE_NORMAL
- en: The datasource `read()` method is the implementation of all read procedures
    on our datasource. In our case, we only allow find operations that contain a condition
    on the field `username`. This condition tells us from which user account we want
    to obtain tweets. Using this account name and the authorization information, we
    make a request to the Twitter API to obtain the user timeline. Because the request
    was made using JSON, which can be identified from the request URL), we use PHP's
    `json_decode()` function to parse the response. We then browse through the resulting
    items (if no error was thrown) and change them into a more friendly format.
  prefs: []
  type: TYPE_NORMAL
- en: The datasource `write()` method is the implementation of save operations, that
    is, the creating of new tweets (modification of existing tweets is not supported
    in this implementation). Similarly to the `read()` method, we use the authorization
    information to make a POST request to the Twitter API, specifying as the tweet
    data whatever fields were sent to the method (combination of the `fields` and
    `values` arguments).
  prefs: []
  type: TYPE_NORMAL
- en: Adding transaction and locking support to the MySQL datasource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CakePHP's built-in MySQL datasource provides some basic transaction support
    by sending all unknown method calls directly to the datasource. However, this
    only enables us to use some basic transaction commands, and any locking would
    have to be performed through manual SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Table locking is a mechanism to effectively manage concurrent access to table
    contents by different client sessions. More information about locking in MySQL
    is available at [http://dev.mysql.com/doc/refman/5.5/en/internal-locking.html](http://dev.mysql.com/doc/refman/5.5/en/internal-locking.html).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to modify an existing datasource by implementing better
    transaction support to the MySQL driver, adding locking operations, and finally
    allowing a recovery procedure for locked queries.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about transaction support in MySQL databases is available at
    [http://dev.mysql.com/doc/refman/5.5/en/commit.html](http://dev.mysql.com/doc/refman/5.5/en/commit.html).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through this recipe we need a sample table to work with. Create a table
    named `profiles` using the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The above query includes the specification of the MySQL database engine. Even
    when MyISAM (another available engine) can handle table level locking, row level
    locking is only possible on InnoDb tables. Furthermore, transactions are only
    supported on InnoDb. More information about the different engines and their supported
    features is available at [http://dev.mysql.com/doc/refman/5.5/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.5/en/storage-engines.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add some sample data using the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We proceed now to create the required model. Create the model `Profile` in
    a file named `profile.php` and place it in your `app/models` folder with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create its appropriate controller `ProfilesController` in a file named `profiles_controller.php`
    and place it in your `app/controllers` folder with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by creating the skeleton of our datasource. Create a folder named
    `dbo` inside your `app/models/datasources` folder. In the `dbo` folder, create
    a file named `dbo_mysql_transaction.php` with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We continue by adding methods to lock and unlock tables. Edit your `app/models/datasources/dbo/dbo_mysql_transaction.php`
    file and add the following methods to the `DboMysqlTransaction` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add our basic transaction commands. Edit your `app/models/datasources/dbo/dbo_mysql_transaction.php`
    file and add the following methods to the `DboMysqlTransaction` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We end by adding methods to recover from a locked query, and to log those locks.
    Once again, edit your `app/models/datasources/dbo/dbo_mysql_transaction.php` file
    and add the following methods to the `DboMysqlTransaction` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test what happens when you reach a lock, edit your `app/controllers/profiles_controller.php`
    file and add the following method to the `ProfilesController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your MySQL client and issue the following SQL commands (don''t close the
    client after you issue these commands as you may want to release the lock as shown
    later):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now browse to `http://localhost/profiles` we should get an SQL error
    message that reads **SQL Error: 1205: Lock wait timeout exceeded; try restarting
    transaction**. A file named `locks.log` should have been created in your `app/tmp/logs`
    folder with the following contents (the database name `cookbook_chapter5_transaction`
    should change to the name of the database you are using):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the recovery of locked queries, we could release the lock in our MySQL
    client by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: and do so somewhere between the first failed transaction and the next recovery
    attempt. To change how much time MySQL waits to see if a lock can be obtained,
    access MySQL documentation for the server setting `innodb_lock_wait_timeout`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we are extending a DBO based datasource, we name our class using the `Dbo`
    prefix (DboMysqlTransaction), and place it in the `dbo` folder which is itself
    in our `app/models/datasources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial implementation includes two class properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`backAutoCommit:Utilized` by the helper methods `_startTransaction()` and `_endTransaction()`,
    is used to temporarily change the auto commit setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lockTimeoutErrorCode`: Specifies MySQL''s code number for identifying deadlock
    time expired errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our first method is the class constructor, which is overridden to add our own
    connection settings, and the actual SQL commands to lock and unlock tables and
    to change the auto commit setting. The connection settings we added are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lock`: It is a set of settings that specify what to do when dealing with locked
    queries. Its subset of settings are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: It is path to the file where to store logging information. If set to
    `false`, logging will be disabled. Defaults to a file named `locks.log` that is
    created in the `app/tmp/logs` directory.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recover`: It decides whether to try to recover from locked queries. If set
    to `false`, no recovery will be attempted. Defaults to `true`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retries`: It decides if `recover` is set to `true`, how many attempts to rerun
    the failed (locked) query. Defaults to `1`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoCommit`: It gives the initial autocommit value (true for enabled, `false`
    for disabled). If set to `null`, it will get its value from the database server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We then implement the `lock()` and `unlock()` methods. The `lock()` method
    allows us to lock a table for a certain operation. We can use it directly from
    a model to lock its underlying table for a `read` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change the locking operation to be `write`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use it to lock a specific table, using either the `lock()` method
    available on all models using this datasource, or directly invoking the method
    in the datasource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `unlock()` method is used similarly, either through the model, or directly
    using the datasource) and unlocks all locked tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you do lock table, make sure you disable auto commit, by using the `setAutoCommit()`
    method, like so: `$this->Profile->setAutoCommit(false)`;'
  prefs: []
  type: TYPE_NORMAL
- en: In the next block of code, we add the implementation for starting, committing
    and rolling back transactions. There is not much detail needed for these methods
    except that they take care of disabling auto-commit upon starting a transaction,
    and reset its status after a transaction is finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `query()` method is overridden to allow executing some of our datasource
    methods directly from our models. That is the case for the three methods we added:
    `lock(), unlock()`, and `setAutoCommit().`'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we override the `_execute()` method to detect when a lock wait timeout
    error is thrown. In these cases, we use the `lockLog()` method to LOG the situation,
    and we proceed to retry the query if we were told to do so.
  prefs: []
  type: TYPE_NORMAL
