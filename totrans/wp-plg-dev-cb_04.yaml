- en: The Power of Custom Post Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers one of the most powerful features of WordPress, custom
    post types, through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom post type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new section to the custom post type editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying single custom post type items using custom layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom post type data in shortcodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom categories for custom post types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom fields to categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding the category editor from the custom post type editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying additional columns in the custom post list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding filters for custom categories to the custom post list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Quick Edit fields for custom categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a page title to include custom post data using plugin filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building on its history of openness and ease of use, WordPress reached new heights
    in customization when it introduced custom post types.
  prefs: []
  type: TYPE_NORMAL
- en: Custom post types are new categories of items that are created by using the
    WordPress API and that appear in the WordPress administration interface as complete
    new sections, next to the default Posts and Pages sections. These custom items
    can be used to store any type of information, including events, bug reports, recipes,
    movie reviews, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: When using custom post types to implement this kind of functionality, developers
    are able to take advantage of WordPress internal content editing capabilities,
    including its powerful text editor and user-friendly media uploader. Custom post
    types also simplify data management for developers, since all of the information
    related to these new entries is stored in the site database using the existing
    table structures. Finally, custom post types can leverage the established theme
    and template system to display the information that site administrators store
    in these new content types.
  prefs: []
  type: TYPE_NORMAL
- en: If you have ever taken a peek at the MySQL database behind a WordPress site,
    you know that posts, pages, attachments, revisions, and navigation menu items
    share the same tables. In essence, all of these data elements are custom post
    types, with some of them using the standard text editor, while others, such as
    the navigation menus, have a custom management interface. Each of these types
    of items also has a different mechanism to be displayed on a site.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom post types opens up endless possibilities to tailor the functionality
    of a WordPress installation and provide a custom solution to end users without
    needing to invest a large amount of time re-inventing the wheel. This chapter
    covers all facets of creating custom post types through the creation of a Book
    Review system, including the creation of new types of elements, displaying the
    newly stored information on the website, and customizing the environment to create
    an editor with unique capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom post type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The initial creation of a custom post type is extremely easy. It only requires
    a single function to be called from an action hook callback. Once in place, a
    lot of functionality immediately becomes available to administrators and site
    visitors. This recipe shows how to create a new custom post type that will be
    used to store Book Reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch4-book-reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch4-book-reviews.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 4 - Book Reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be executed
    during the initialization phase every time WordPress generates a page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code block to provide an implementation for the `ch4_br_create_book_post_type`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and download a PNG format book icon measuring 24 x 24 pixels from a site,
    such as IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com)),
    resize it to 20 x 20 pixels, and save it as `book-reviews.png` in the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 4 - Book Reviews`
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the newly available Book Reviews menu item, located under the Pages
    section, to see the Book Review creation and management interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01ea80ec-5a51-4f57-86c2-9c0ec0b879f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Add New button, next to the section title, to display the Book
    Review editor featuring the complete WordPress text editor, the custom fields
    editor, comments control, publishing controls, and the featured image section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the new entry by specifying the Book Review title (for example, `WordPress
    Plugin Development Cookbook`) and a short description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the Custom Fields section and type `book_author` as the Name of the
    field and `Yannick Lefebvre` as the Value. Click Add Custom Field to create a
    second field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If some custom fields already exist in your WordPress installation (from other
    plugin data entry), you will need to click on Enter new before being able to set
    the Name to `book_author`.
  prefs: []
  type: TYPE_NORMAL
- en: Set the Name of the second field to `book_rating` and its Value to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and download a book cover image from a website such as Google Images ([https://images.google.com](https://images.google.com))
    or Packt ([https://www.packtpub.com](https://www.packtpub.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Set featured image link located in the right-hand sidebar of the
    editing interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Select Files to pick the image that you downloaded to your computer
    and have WordPress upload it to the `wp-content/uploads` folder of your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the file is uploaded and WordPress displays information about it, look
    at the bottom of the media upload dialog and click on the Set featured image link
    to associate it with the Book Review that you are creating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64748c33-ebf0-42ea-bc16-422e02a3e563.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Publish button to save this first Book Review.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Permalinks section of the Settings menu and click on the Save Changes
    button (without changing your Permalinks settings).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Book Review you created and click on the View Book Review button
    to see the newly created content in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By making a call to the `register_post_type` function, the entire WordPress
    environment becomes aware of the existence of this new post type. This awareness
    includes the creation of a dedicated section to create and edit posts of this
    type and the ability to process web page requests for Book Reviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning of this recipe, the function is quite simple
    to use and only requires two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is a text string that indicates the name of the post type.
    Please note when choosing this name that it will be used as the default value
    for the permalinks of all items that use the new type, and that it should be unique
    enough to avoid potential conflicts with other plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument is an array of properties that specify the characteristics
    of the new post type and determine how this type will be edited.
  prefs: []
  type: TYPE_NORMAL
- en: In this specific example, the first element of the properties array is actually
    another array, which contains a number of labels. These labels indicate the text
    strings that should be displayed when managing items created under the new post
    type. For example, if we look at the screenshot before step 11, the message No
    Book Reviews found came directly from the definition of the `not_found` label
    in this array.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument, named `public`, determines whether the post type's administration
    interface should be shown to manage it and if visitors should be able to view
    single items. Next is the `menu_position` member of the configuration array, indicating
    the desired position of the new element in the administration menu. In this example,
    a value of 20 indicates that it should be displayed following to the Pages menu
    item. Visit the WordPress Codex ([https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type))
    for a full list of potential values for this parameter and their associated positions.
  prefs: []
  type: TYPE_NORMAL
- en: The `supports` parameter is another array that indicates which parts of the
    content editor should be displayed for items that use the custom post type. In
    this case, we left out some sections, such as `author`, `excerpt`, `trackbacks`,
    `revisions`, `page-attributes`, and `post-formats`, as they were not desirable
    for Book Reviews.
  prefs: []
  type: TYPE_NORMAL
- en: The next few parameters in the configuration array indicate that we do not want
    to define custom taxonomies at this time, and specify the path and name of the
    image file that should be displayed next to the post type's name in the administration
    menu. Finally, the last two arguments determines whether WordPress should present
    an archive listing page for the new type when users visit the `/book_reviews`
    page on the site and whether or not book reviews should be excluded from search
    results.
  prefs: []
  type: TYPE_NORMAL
- en: There are actually many other parameters that can be included in the configuration
    array to get more precise control over some aspects of the new custom post type.
    Please visit the WordPress Codex ([https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type))
    to learn more about them.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the internal post type name is used by default to generate post permalinks,
    it can actually be overridden to create better-looking URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the custom post type permalinks slug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An optional member of the custom post type configuration is the `rewrite` parameter.
    It can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Although this may seem very simple, the permalinks will only change over after
    you go to the Permalinks section and Save Changes, as we did in the recipe. Alternatively,
    it is possible to make calls from the WordPress rewrite module to programmatically
    request for the permalinks configuration to be rebuilt. As this is not something
    that should be done every time WordPress displays a page, but would be too early
    to do when a plugin gets initialized or upgraded, a good place to call these functions
    would be within the plugin options storage function. You might even decide to
    give administrators the ability to specify their own slug in a plugin configuration
    page. The code to reset the permalinks rules is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding a new section to the custom post type editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the custom post editor that has been put in place so far is functional,
    it is not the friendliest of user interfaces, especially with the custom fields
    section, where users need to type or select the names of each field as they create
    new items. A cleaner approach is to create a custom interface using the meta box
    mechanism that we saw in the previous chapter to display all the data associated
    with Book Reviews.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a meta box that will be associated with a custom
    post type and how to save the information that is entered in that new interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating a custom post type* recipe to
    have a starting point for this recipe, and the resulting plugin should still be
    active in your development site. Alternatively, you can get the resulting code
    (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v1.php`) from the code bundle downloaded
    from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when the administration interface is visited:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_admin_init`
    function and register a meta box to be associated with the `book_reviews` post
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert this function to implement the `ch4_br_display_review_details_meta_box`
    function and render the meta box contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to register a function that will be called when
    posts are saved to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an implementation for the `ch4_br_add_book_review_fields` function defined
    in the previous `add_action` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `ch4_br_create_book_post_type` function, where the new book type was
    originally created, and remove the `custom-fields` element from the `supports`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the previously created Book Review to see the new Book Review Details
    meta box, containing a text field to specify the author and a drop-down list for
    the rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5237db71-726c-4529-b963-f2b23b86295c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the WordPress built-in meta box system to create a clean interface
    that will allow users to manage fields specific to custom post types without having
    to use the cumbersome default Custom Fields editor. As we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*, custom meta boxes can be created using
    the `add_meta_box` function. In addition to declaring the meta box and associating
    it with the custom post type, `add_meta_box` defines a callback that is responsible
    for rendering the contents of the box.
  prefs: []
  type: TYPE_NORMAL
- en: The next section of the recipe implements the function that renders the meta
    box content. As we can see, this box receives an object variable that contains
    information about the Book Review that is being displayed in the post editor.
    Using this object, our code retrieves the post ID and uses it to query the site
    database for a book author and rating associated with the entry. Once the custom
    field data has been retrieved from the database, it can be used to render the
    author and rating fields onscreen. When new Book Reviews are created, both calls
    to `get_post_meta` will return an empty string, resulting in the display of an
    empty text field and the last entry in the drop-down list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get_post_meta` function is used to retrieve data that was stored in the
    custom fields section of the post editor and has three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the post ID, which can easily be retrieved using the
    `get_the_ID()` template function. This ID is used to identify the post to which
    the custom information is associated. The second argument is the custom field
    name, which should match the name specified when it is created in the post editor.
    The third and final argument indicates whether the return value should be a single
    value or an array of values. If set to `false`, it will produce an array containing
    a single element even if the custom field only contains a single value. In most
    cases, it should be set to `true` to receive a single value that can be accessed
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: The last steps of this recipe take care of registering a function that will
    be called when posts of all types are saved or deleted by the site administrator.
    Since it will deal with all types of data, the saving callback must first check
    the type of the received post data. If it's a Book Review, the code proceeds to
    check if the received data is valid and stores the information in the post meta
    data table. In this recipe, the parameters for the `update_post_meta` function
    are similar to the `get_post_meta` function, except for the third argument, which
    is used to specify the data to be stored.
  prefs: []
  type: TYPE_NORMAL
- en: One last detail that should be mentioned about this recipe is the use of the
    fourth parameter of the `add_action` function when associating a callback to the
    `save_post` action hook. This argument indicates that two arguments will be received
    by the registered callback. If this argument is not set, the callback function
    will never receive that second piece of data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a custom post type* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Formatting admin pages using meta boxes* recipe in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying single custom post type items using a custom layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When displaying an entry created in our new custom post type, the default layout
    offered by our current site theme may not always be able to pleasantly display
    the information it contains. In most cases, you will be able to see the main post
    content, but not any of the custom fields data that is associated with the post.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a custom layout to display all the elements
    that we stored in the Book Review created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding a new section to the custom post
    type editor* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v2.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is deciding which theme template to use to render
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_template_include`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to implement the `ch4_br_display_single_book_review`
    function to display Book Reviews, including their custom fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and download a PNG format pixel star icon measuring 32 x 32 pixels from
    a site such as IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com)),
    and save it as `star-icon.png` in the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a grayscale version of the star icon using any graphic processing tool
    (for example, the free multi-platform XnViewMP tool, found at [http://www.xnview.com/en/](http://www.xnview.com/en/))
    and save it as `star-icon-grey.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Book Reviews management page and click on the View link under the
    existing entry created in the previous recipe to see the content rendered using
    the new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28bb9f2c-e3fb-411b-96c0-775e634890c3.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When rendering any web page, the default WordPress functionality is to search
    the current theme directory for an applicable template suitable for the content
    at hand. In the case of a single custom post type item, such as a Book Review,
    it first looks for a single item template named `single-<post-type-name>.php`,
    where the latter part is the actual post type name. If it does not find this file,
    it defaults to the general single item template. In the first recipe of this chapter,
    the template that was used to show the Book Review was the default single item
    template, simply named `single.php`.
  prefs: []
  type: TYPE_NORMAL
- en: To add better support for our new post type, this recipe associates a function
    with the `template_include` filter hook to change that behavior. More specifically,
    we use the `locate_template` function to check whether the user provided a template
    for the `book_reviews` post type in the theme directory. If no template is found,
    we register a filter to overwrite the page contents with our own layout. This
    gives users the flexibility to use our predefined layout or to provide their own.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the recipe implements our fallback filter function for Book Review
    content. This code makes use of many WordPress template functions, such as `get_the_ID()`
    and `get_the_content()`, as well as the `get_post_meta` function, to display various
    elements of the current item, including the book author and its rating, as well
    as the main post content and the featured image.
  prefs: []
  type: TYPE_NORMAL
- en: To help users build their own theme template for your custom post type, you
    should provide code snippets in your plugin documentation, showing how to retrieve
    your custom post type's custom fields.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a custom post type* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom post type data in shortcodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To help visitors navigate through the items added using our new custom post
    type, we will need to display a list of all the book reviews on the site, along
    with navigation elements to be able to handle large numbers of items. While WordPress
    offers a built-in mechanism to list post items in the form of the archive page,
    it is not easy for a plugin to be able to modify the layout of the resulting page
    in a consistent way across all possible user themes. A better solution to display
    a list of custom post type items is to create a shortcode that will display one
    or more posts in any place selected by the user, including a page, a post, or
    even on the site's front page.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a shortcode that will retrieve and display five
    book reviews at a time with accompanying navigation links.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying single custom post type items
    using a custom layout* recipe to have a starting point for this recipe, and the
    resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v3.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    that declares the new shortcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_review_list`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page and insert the shortcode `[book-review-list]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and View the page to see that a list of Book Reviews will be displayed
    in place of the shortcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3308719d-7b79-4184-ae00-70e01c961f47.png)'
  prefs: []
  type: TYPE_IMG
- en: If more than five Book Reviews exist in the system, click on the navigation
    links that are displayed. You will see that the URL in the browser address bar
    changes, but the list of entries shows the same first five items as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in the `ch4-book-reviews.php` file, add the following highlighted code
    near the top of `ch4_br_book_review_list`, right after the line initializing the
    value of the `$query_params` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file. Refresh the page that includes our new shortcode
    and use the navigation links to see that the list of items now changes properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User
    Settings and Administration Pages*, shortcodes are text elements that can be inserted
    in any page and post, that will be replaced with the content generated by the
    plugin when they are found. The registered callback function must prepare the
    output and send it back as a return value at the end of its execution.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the `ch4_br_book_review_list` function takes care of preparing
    a query array to be passed to a new instance of the `WP_Query` class. This class
    allows developers to easily extract information from the site database's post
    table. In this example, the parameters that are being set in the query are the
    internal post type name (`post_type`), the status of the items that we want to
    display (`post_status`), and the number of items that should be retrieved at a
    time (`posts_per_page`).
  prefs: []
  type: TYPE_NORMAL
- en: Once the query string is in place, we create a global variable called `book_review_query`
    and assign to it a new instance of a `WP_Query` object. Once created, we initialize
    it using the query string that was just assembled. If posts are found by the object,
    we output HTML code to create a table and use a `while` loop to cycle through
    all the items found and display their title and author using a code similar to
    the previous two recipes.
  prefs: []
  type: TYPE_NORMAL
- en: As part of this recipe, we have seen that if more entries exist for the custom
    post type than the value specified with the `posts_per_page` query argument, navigation
    controls are added under the table of entries but will not work correctly, since
    we manually created the query string. To rectify the situation, we use the `get_query_var`
    function to see if a page number was requested. If that is the case, and the page
    number is not `1`, we add that number to our query parameters.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the beginning of this recipe, there may be instances where a
    list of custom post type items needs to be displayed as part of a theme template.
    The following section shows how to get shortcode content to be displayed as part
    of a template file.
  prefs: []
  type: TYPE_NORMAL
- en: do_shortcode function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `do_shortcode` function can be called from any theme template file, for
    the front page or any other section of the site, to render content associated
    with a shortcode. It takes a single argument, the shortcode string including any
    parameters. To display the content created in this recipe, we would simply need
    to call the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adding custom categories for custom post types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep items organized on a site, administrators often use the built-in WordPress
    categories and terms to identify similar items. Looking back at the Book Reviews
    system that we have been putting in place so far in this chapter, a type of categorization
    that would be helpful is a book type (for example, Science Fiction, Documentary,
    Fiction, Poetry, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a new category (known as a **taxonomy** in the
    WordPress backend) and associate it with the Book Review custom post type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying custom post type data in shortcodes*
    recipe, to have a starting point for this recipe, and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v4.php`) from the downloaded
    code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ch4_br_create_book_post_type` function and add the following code
    after the existing call to `register_post_type` to create the new taxonomy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the previously created Book Reviews to see the newly added Book Type meta
    box on the right-hand side of the post editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the + Add New Book Type link to create a new item and assign it as
    the current item''s type. Click on the Update button in the top-right section
    of the post editor to save the review:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fdd254e-2b3c-4aa0-8ad8-7802dccc2fbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the left-hand administration menu to see that a new menu item was added
    to manage book types, leading to an editor similar to the post and page category
    editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3dc5a5f2-54e9-488f-a9c7-d6f260bb6686.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Back in the plugin file, add the following code to the `ch4_br_display_single_book_review`
    function after the section displaying the rating to display the book type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the template file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit a Book Review page to see the book type displayed under the rating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `register_taxonomy` function is used to create a new type of category in
    WordPress and associate it to a post type. It has three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The first argument is a unique identifier for the taxonomy. The second parameter
    is the post type that it should be associated with, which should match the type
    declared with the `register_post_type` function. The third argument is an array
    of parameters that determine how the new taxonomy will behave.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we have set a few taxonomy options, including a first item
    called **labels** that contains an array of text strings that will be used in
    the interface when referring to the new taxonomy. We also specified a second element,
    called `show_ui`, which controls the display of the taxonomy meta box in the post
    editor and the presence of a link to access the taxonomy editor in the administration
    menu. Next is an option called `show_tagcloud`, which we set to `false` to avoid
    displaying a tag cloud of all taxonomy values. Finally, the last item in the options
    array is called `hierarchical`. When set to `true`, taxonomy items will be able
    to have parent/child relationships and will be accessible as a list of checkboxes
    in the post editor. If set to `false`, all taxonomies are organized as a flat
    list and can be selected using an interface similar to the tag window in the post
    and page editor.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more options available for the `register_taxonomy` function,
    as can be seen if you visit the WordPress Codex website ([https://codex.wordpress.org/Function_Reference/register_taxonomy](https://codex.wordpress.org/Function_Reference/register_taxonomy)),
    but the ones found here are the essential ones to define a basic taxonomy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a custom post type* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom fields to categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to specifying names for categories, it may be useful to attach additional
    information to custom taxonomies created in a WordPress plugin. For example, we
    may want to assign custom colors to categories that will be used when they are
    displayed, or we might want to identify the categories of content that are only
    accessible to paying members on a website.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to display additional fields in the taxonomy editor and
    how to store the additional data in the site's database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding custom categories for custom post
    types* recipe to have a starting point for this recipe, and the resulting plugin
    should still be active in your development site. Alternatively, you can get the
    resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v5.php`) from the
    downloaded code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code after the existing functions to assign a function
    to two action hooks that will be called when users create or edit taxonomy items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_type_new_fields`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines of code at the end of the file to assign a function
    that will be called when users create or update taxonomy items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_save_book_type_new_fields`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit one of the Book Type entries created in the previous recipe to see the
    newly added Color field. Enter a color code and Update the entry to see the data
    saved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ffdbf28-2768-49b2-a96d-7da40cb89367.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses many variable name action hooks to register functions to be
    called when users create or modify book types in the taxonomy editor. The first
    two calls to `add_action` refer to the `<taxonomy>_edit_forms_fields` and `<taxonomy>_add_form_fields`
    hooks. While you might expect to see two different functions associated with each
    of these action hooks, we actually register the same function in both cases, since
    rendering an additional field is similar in both cases. That being said, part
    of the function we register checks to see whether it receives a valid object as
    a parameter to know how it should render the new field so that it fits on the
    page if the user is creating a new category or editing an existing one.
  prefs: []
  type: TYPE_NORMAL
- en: We use a similar technique with the `edited_<taxonomy>` and `created_<taxonomy>`
    action hooks, which are respectively called when you first save a new taxonomy
    and update an existing one. In this case, the code does not have any significant
    differences depending on the action, since we only need to validate and save the
    incoming value for the new field.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom categories for custom post types* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding the category editor from the custom post type editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous recipe, when we associate a new taxonomy with the
    Book Review custom post type, the `show_ui` option controls the visibility of
    the taxonomy assignment meta box and the admin menu link to the taxonomy editor.
    In some cases, it is desirable to give users access to the full taxonomy editor,
    but only let editors choose from a controlled drop-down list when they create
    new entries in the custom post type editor.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to hide the taxonomy interface from the post editor and
    how to update the custom post type meta box created in the previous recipe to
    assign a type to new Book Reviews and save this information in the site's database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding custom fields to categories* recipe
    to have a starting point for this recipe, and the resulting plugin should still
    be active in your development site. Alternatively, you can get the resulting code
    (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v6.php`) from the downloaded code
    bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the call to the `register_taxonomy` function within the `ch4_br_create_book_post_type`
    function and add a new member to the configuration array named `meta_box_cb` with
    a value set to `false` highlighted in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Save the plugin and edit a Book Review to see that the Book Type taxonomy box
    is no longer displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `ch4_br_display_review_details_meta_box` function in the code and
    add the following code within the existing table rendering code to add a new row
    containing a drop-down selection box for the book type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `ch4_br_add_book_review_fields` function and add the following code
    segment within the if statement, checking to see whether the post type is a Book
    Review, to save the selected book type in the site''s database upon the submission
    of the post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a previously created Book Review to see the updated Book Review Details
    meta box containing a new drop-down list to specify Book Type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8591c232-6446-4dac-8954-c9286a02c172.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses one of the many parameters of the `register_taxonomy` function
    to remove the ability for book review creators and editors to create new book
    types and creates a drop-down list to be able to assign a single book type to
    reviews.
  prefs: []
  type: TYPE_NORMAL
- en: In this process, the recipe makes use of three functions related to storing
    and retrieving taxonomy entries related to posts. The first, `wp_get_post_terms`,
    retrieves an array of terms associated with a post based on its ID and the name
    of the taxonomy. The second, `wp_set_post_terms`, assigns a term to a post based
    on its ID and the taxonomy name. Finally, `get_terms` retrieves an array of all
    the terms in the taxonomy, ordered based on the query string found in the second
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom categories for custom post types* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying additional columns in the custom post list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After customizing the post editor to give content creators a tailored environment
    to create and edit custom post type entries, this recipe turns its efforts toward
    the Book Reviews management page, where all the entries for this type are listed.
    By default, custom post type listings are quite simple and only show the title,
    publication date, and the number of comments for each item. To make it easier
    to identify, sort, and find data in this management page, WordPress offers a number
    of customization capabilities, starting with the ability to change the columns
    that are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add and remove columns in the post management page,
    as well as make sorting in new columns possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Hiding the category editor from the custom
    post type editor* recipe to have a starting point for this recipe, and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v7.php`)
    from the downloaded code bundle and rename the file to `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when the Book Reviews listings page is being prepared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_add_columns`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to assign a function to be called when the columns
    data is being retrieved for each row in the post listing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code segment to provide an implementation for the `ch4_br_populate_columns`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Save the plugin file and navigate to the Book Reviews listing page to see that
    the list of columns has been altered and that data stored in the post custom fields
    is now displayed for each item in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in the code editor, add the following code at the end of the plugin file
    to register a function to be called when WordPress identifies columns that will
    be sortable for the Book Reviews custom post type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following code to provide an implementation for the `ch4_br_author_column_sortable`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to register a function that will be called
    when data is requested to display post lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code segment to implement the `ch4_br_column_ordering`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the Book Reviews listing to see that the Author and Rating column headers
    are links that can be clicked to sort these columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2bed1d5-cf0b-4069-bf7d-994e74269711.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing the post listings page requires an intricate mix of action and filter
    hooks to achieve the final goal. The first function we registered is associated
    with the variable filter name `manage_edit-<post_type>_columns`, where `<post_type>`
    is replaced with the internal post type name. When the registered function is
    called, it receives the default column list that will be shown while listing Book
    Reviews entries as an argument. Using this data, it proceeds to add three columns
    for `author`, `rating`, and `type` and removes the `comments` column from the
    array. Once finished, it returns the modified array.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the recipe registers the function that will be responsible
    for populating the new columns. Since this function gets called when any custom
    post type column is rendered, the code checks which column is currently requested
    before echoing the requested data to the browser. The function makes calls to
    `get_the_ID()` to get the index of the currently displayed row and to be able
    to find its associated data using `get_post_meta` and `wp_get_post_terms`.
  prefs: []
  type: TYPE_NORMAL
- en: At this point in the recipe, the new columns are visible in the Book Reviews
    management page and data is displayed for each of them. The purpose of the rest
    of the recipe is to make the `author` and `rating` columns sortable. This is done
    by first registering a function with the variable filter name `manage_edit-<post_type>_sortable_columns`,
    where `<post_type>` is replaced with the post type name. When the function is
    executed, it adds two items to the array of columns that will be sorted. This
    takes care of making the column header links that can be clicked for sorting,
    associated with the appropriate URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The last function that is registered is associated with the request filter and
    takes care of adding elements to the query array based on the variables that came
    through in the query URL.
  prefs: []
  type: TYPE_NORMAL
- en: The final result allows administrators to easily reorder Book Reviews based
    on these two columns which can be sorted, as well as to see information about
    each entry's type.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom categories for custom post types* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding filters for custom categories to the custom post list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A second customization method for the custom post listings is to create a drop-down
    box that will allow administrators to only display items that belong to a single
    category at a time. This can help significantly reduce the number of entries that
    are shown to quickly find the desired entry.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a filter mechanism based on the Book Review type
    to the listings page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying additional columns in the custom
    post list page* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v8.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is preparing the filter drop-down boxes for the post
    listings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_type_filter_list`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following line of code to register a function that will be called
    when the post display query is being prepared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `ch4_br_perform_book_type_filtering` function with the following
    code segment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the Book Reviews listings to see the new dropdown to restrict what book
    types are displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d297246f-28c6-4c7c-92a1-864c089152ac.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe starts by registering an action callback that will be executed when
    WordPress renders the various filter controls that are available for each post
    type listing. When the function is called, it retrieves a global variable to know
    the post type that is currently being displayed and determine if it should show
    the book type filter list. It also accesses the global post query variable to
    see if a book type filter is already in place and sets the correct drop-down list
    entry to be selected, if there is one.
  prefs: []
  type: TYPE_NORMAL
- en: The callback then proceeds to use the `wp_dropdown_categories` function to display
    a list of all of the taxonomy items registered for book types. This utility function
    expects to receive an array of parameters that determine which taxonomy list to
    display, the name of the drop-down list field name, and the label to be displayed
    for the option to show all the types. This array should also contain a few parameters
    to determine the order in which the items should be displayed, specify the item
    to set as selected, indicate the maximum depth to show for hierarchical taxonomies,
    and determine whether or not items count and empty items be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Once the new book type selection list is in place, selecting an entry and clicking
    on the Filter button triggers a refresh of the web page and leads to the second
    registered callback that was put in place after being executed. The filter function
    receives the current WordPress post query object and starts by first getting a
    pointer to the query variables that are stored inside of the query object. With
    this in hand, it moves on to verify that a book type is part of the query variables
    and that it is numeric. If the result is positive, it replaces the numeric value
    with the textual name for the selected book type so that the query can take place.
  prefs: []
  type: TYPE_NORMAL
- en: Once all of this code is executed, users are able to quickly filter which book
    types should be displayed in the Book Reviews management page. They are also still
    able to use the column sorting mechanism implemented in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom categories for custom post types* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Quick Edit fields for custom categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great feature of WordPress is the ability for site editors to quickly make
    changes to any post in the admin section by clicking on the Quick Edit link associated
    with any of the items shown. While our custom post type taxonomy appears in the
    Quick Edit section, it is not a drop-down list of choices as we had in the book
    review editor. Also, the author and rating fields do not appear in any way in
    the Quick Edit section.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add custom fields while quickly editing book reviews.
    As you perform the following steps, you will see that some of the code that we
    put in place is not as cleanly written as code from previous recipes, since the
    WordPress Quick Edit customization infrastructure is not as well-formed as other
    areas of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding filters for custom categories to
    the custom post list page* recipe to have a starting point for this recipe, and
    the resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v9.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the call to the `register_taxonomy` function within the `ch4_br_create_book_post_type`
    function and add a new member to the configuration array named `show_in_quick_edit`
    with a value set to `false` highlighted in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is preparing to render the contents of the Quick Edit
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_display_custom_quickedit_link`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function to be called when WordPress
    is rendering the footer of the administration pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the `ch4_br_quick_edit_js` function with the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to register a function to replace the original Quick
    Edit code that is generated for each post in the book reviews page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to provide an implementation for the `ch4_br_quick_edit_link`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following function call to register a function that will be executed
    when post data is updated from the Quick Edit section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide an implementation for the `ch4_br_save_quick_edit_data` function with
    the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Book Reviews listings page and click on Quick Edit to see the newly
    added Author, Rating, and Type fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f64a179a-1272-44dd-bc7e-7f849ada47ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the values in these fields and save them using the Update button. You
    will see that the values get updated in the Book Reviews list, accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the Quick Edit box is a great tool that WordPress users appreciate, customizing
    it is a bit tricky in current versions of WordPress. While we could easily add
    data to each individual item in sections, such as the post editor, for our new
    custom post type, the Quick Edit section requires more work to add custom fields.
    The root of the issue stems from the fact that there is really only a single instance
    of the Quick Edit section that gets rendered as part of the edit page. That section
    is hidden at first, then appears, and moves to the correct position when a user
    clicks on the Quick Edit link. With this in mind, we cannot assign proper values
    to custom fields in the Quick Edit box and, therefore, need to store hidden information
    as each item gets listed to be able to update each field appropriately based on
    which item is being edited.
  prefs: []
  type: TYPE_NORMAL
- en: The first section of our recipe code starts off by rendering a text input field
    and two drop-down lists within the Quick Edit section. You will notice that we
    do not set the value of the text field or set options to be selected in the select
    lists. Another interesting point with this callback is that it sends us the same
    list of columns that we used in the *Displaying additional columns in the custom
    post list page* recipe. This means that if we wanted to add fields other than
    the ones we have added to the post table, we would still have to place these field
    names in the list of columns and then use some tricks to hide them from the table.
  prefs: []
  type: TYPE_NORMAL
- en: Once these extra fields are in place, we will add the code to the admin page
    footer of the book review editor to create a Javascript function that we will
    call when it is time to update our new custom fields in the Quick Edit section.
    The function receives an array of data, then locates the custom fields in the
    page using the `document.getElementById` function, and updates their values based
    on the incoming data array.
  prefs: []
  type: TYPE_NORMAL
- en: The next block of code we added creates a new Quick Edit link to replace the
    original one for each book review item. The new link not only enables users to
    display the Quick Edit section, but also embeds values for each item within the
    `onclick` Javascript code along with a call to the function that we added to the
    footer so that a new set of values is assigned to each field when the user decides
    to quickly edit a book review.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we store data from our custom fields when the user clicks on the Update
    button. Interestingly, we do this by registering a second callback for the `save_post`
    action. This means that both of our functions will be called when posts are saved.
    However, this second saving function checks for a number of conditions to be true
    before actually saving values, and the names of the fields that it saves are different
    than the save function we put in place for the post editor.
  prefs: []
  type: TYPE_NORMAL
- en: Updating page title to include custom post data using plugin filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A last customization touch that can be put in place to support our Book Reviews
    custom post type is to add custom information about the posts in the title bar
    when displaying them. For example, we could add the author's name next to the
    book title.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use the `document_title_parts` filter to alter the
    post title for Book Reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding Quick Edit fields for custom categories*
    recipe to have a starting point for this recipe, and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v10.php`) from the downloaded
    code bundle and rename the file `ch4-book-reviews.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress prepares the text to be displayed in the browser''s
    title bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch4_br_format_book_review_title`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit a Book Review page. You will see that the book''s author is now displayed
    after the name in the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cc02387-21db-4f4a-84cc-39733dc9dbeb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `document_title_parts` filter allows plugins to modify or completely replace
    the page title contents. In this case, the code of the function that we associated
    with the filter hook receives the title that WordPress intends to display as an
    array. It then proceeds to check whether the item that is being prepared for display
    is a Book Review and whether or not it is a single item. While the first condition
    is something obvious to check for, the `is_single` verification is done to make
    sure that the code does not try to add a book author to the Book Reviews archive
    listing page.
  prefs: []
  type: TYPE_NORMAL
