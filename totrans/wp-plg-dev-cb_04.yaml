- en: The Power of Custom Post Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义帖子类型的强大之处
- en: 'This chapter covers one of the most powerful features of WordPress, custom
    post types, through the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过以下主题涵盖了WordPress最强大的功能之一：自定义帖子类型：
- en: Creating a custom post type
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义帖子类型
- en: Adding a new section to the custom post type editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向自定义帖子类型编辑器添加新部分
- en: Displaying single custom post type items using custom layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义布局显示单个自定义帖子类型项
- en: Displaying custom post type data in shortcodes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在短代码中显示自定义帖子类型数据
- en: Adding custom categories for custom post types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为自定义帖子类型添加自定义分类
- en: Adding custom fields to categories
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向分类添加自定义字段
- en: Hiding the category editor from the custom post type editor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从自定义帖子类型编辑器中隐藏分类编辑器
- en: Displaying additional columns in the custom post list page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自定义帖子列表页面显示额外列
- en: Adding filters for custom categories to the custom post list page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自定义帖子列表页面添加自定义分类过滤器
- en: Adding Quick Edit fields for custom categories
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为自定义分类添加快速编辑字段
- en: Updating a page title to include custom post data using plugin filters
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件过滤器更新页面标题以包含自定义帖子数据
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Building on its history of openness and ease of use, WordPress reached new heights
    in customization when it introduced custom post types.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建立在开放性和易用性的历史基础上，WordPress在引入自定义帖子类型时达到了定制的新的高度。
- en: Custom post types are new categories of items that are created by using the
    WordPress API and that appear in the WordPress administration interface as complete
    new sections, next to the default Posts and Pages sections. These custom items
    can be used to store any type of information, including events, bug reports, recipes,
    movie reviews, and many more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义帖子类型是通过使用WordPress API创建的新类别项目，它们在WordPress管理界面中作为全新的部分出现，位于默认的帖子（Posts）和页面（Pages）部分旁边。这些自定义项目可以用来存储任何类型的信息，包括事件、错误报告、食谱、电影评论等等。
- en: When using custom post types to implement this kind of functionality, developers
    are able to take advantage of WordPress internal content editing capabilities,
    including its powerful text editor and user-friendly media uploader. Custom post
    types also simplify data management for developers, since all of the information
    related to these new entries is stored in the site database using the existing
    table structures. Finally, custom post types can leverage the established theme
    and template system to display the information that site administrators store
    in these new content types.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用自定义帖子类型来实现此类功能时，开发者可以利用WordPress内部内容编辑功能，包括其强大的文本编辑器和用户友好的媒体上传器。自定义帖子类型还简化了开发者的数据管理，因为这些新条目相关的所有信息都使用现有的表结构存储在网站数据库中。最后，自定义帖子类型可以利用已建立的主题和模板系统来显示网站管理员存储在这些新内容类型中的信息。
- en: If you have ever taken a peek at the MySQL database behind a WordPress site,
    you know that posts, pages, attachments, revisions, and navigation menu items
    share the same tables. In essence, all of these data elements are custom post
    types, with some of them using the standard text editor, while others, such as
    the navigation menus, have a custom management interface. Each of these types
    of items also has a different mechanism to be displayed on a site.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经窥视过WordPress网站背后的MySQL数据库，你就会知道帖子（posts）、页面（pages）、附件（attachments）、修订（revisions）和导航菜单项共享相同的表。本质上，所有这些数据元素都是自定义帖子类型，其中一些使用标准文本编辑器，而其他，如导航菜单，则有一个自定义管理界面。这些项目类型中的每一个也有不同的机制在网站上显示。
- en: Using custom post types opens up endless possibilities to tailor the functionality
    of a WordPress installation and provide a custom solution to end users without
    needing to invest a large amount of time re-inventing the wheel. This chapter
    covers all facets of creating custom post types through the creation of a Book
    Review system, including the creation of new types of elements, displaying the
    newly stored information on the website, and customizing the environment to create
    an editor with unique capabilities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义帖子类型可以打开无限的可能性来定制WordPress安装的功能，并为最终用户提供定制解决方案，而无需投入大量时间重新发明轮子。本章通过创建一个书评系统，涵盖了创建自定义帖子类型的所有方面，包括创建新类型的元素，在网站上显示新存储的信息，以及定制环境以创建具有独特功能的编辑器。
- en: Creating a custom post type
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义帖子类型
- en: The initial creation of a custom post type is extremely easy. It only requires
    a single function to be called from an action hook callback. Once in place, a
    lot of functionality immediately becomes available to administrators and site
    visitors. This recipe shows how to create a new custom post type that will be
    used to store Book Reviews.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义文章类型的初始创建非常简单。它只需要从动作钩子回调中调用一个函数。一旦设置好，许多功能立即对管理员和网站访客可用。本菜谱展示了如何创建一个新自定义文章类型，该类型将用于存储书籍评论。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问一个WordPress开发环境，无论是在您的本地计算机上还是在远程服务器上，您将能够加载您的新插件文件。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch4-book-reviews`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch4-book-reviews`的新目录。
- en: Navigate to this directory and create a new text file called `ch4-book-reviews.php`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch4-book-reviews.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 4 - Book Reviews`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，命名为`第4章 - 书籍评论`。
- en: 'Add the following line of code to register a function that will be executed
    during the initialization phase every time WordPress generates a page:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，该函数将在WordPress生成页面时的初始化阶段执行：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code block to provide an implementation for the `ch4_br_create_book_post_type`
    function:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以提供`ch4_br_create_book_post_type`函数的实现：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save and close the plugin file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Find and download a PNG format book icon measuring 24 x 24 pixels from a site,
    such as IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com)),
    resize it to 20 x 20 pixels, and save it as `book-reviews.png` in the plugin directory.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网站，例如IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com))，找到并下载一个24
    x 24像素的PNG格式书籍图标，将其调整大小为20 x 20像素，并将其保存为`book-reviews.png`到插件目录中。
- en: Navigate to the Plugins management page and Activate the `Chapter 4 - Book Reviews`
    plugin.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活`第4章 - 书籍评论`插件。
- en: Click on the newly available Book Reviews menu item, located under the Pages
    section, to see the Book Review creation and management interface.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新出现的“书籍评论”菜单项，位于页面部分下，以查看书籍评论创建和管理界面。
- en: '![](img/01ea80ec-5a51-4f57-86c2-9c0ec0b879f0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/01ea80ec-5a51-4f57-86c2-9c0ec0b879f0.png)'
- en: Click on the Add New button, next to the section title, to display the Book
    Review editor featuring the complete WordPress text editor, the custom fields
    editor, comments control, publishing controls, and the featured image section.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标题旁边的“添加新内容”按钮，以显示具有完整WordPress文本编辑器、自定义字段编辑器、评论控制、发布控制和特色图片部分的书籍评论编辑器。
- en: Fill in the new entry by specifying the Book Review title (for example, `WordPress
    Plugin Development Cookbook`) and a short description.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过指定书籍评论标题（例如，`WordPress插件开发秘籍`）和简短描述来填写新条目。
- en: Scroll to the Custom Fields section and type `book_author` as the Name of the
    field and `Yannick Lefebvre` as the Value. Click Add Custom Field to create a
    second field.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到“自定义字段”部分，将字段的名称输入为`book_author`，其值为`Yannick Lefebvre`。点击“添加自定义字段”以创建第二个字段。
- en: If some custom fields already exist in your WordPress installation (from other
    plugin data entry), you will need to click on Enter new before being able to set
    the Name to `book_author`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的WordPress安装中已经存在一些自定义字段（来自其他插件的数据输入），您需要点击“输入新内容”才能将名称设置为`book_author`。
- en: Set the Name of the second field to `book_rating` and its Value to `5`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个字段的名称设置为`book_rating`，其值为`5`。
- en: Find and download a book cover image from a website such as Google Images ([https://images.google.com](https://images.google.com))
    or Packt ([https://www.packtpub.com](https://www.packtpub.com)).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网站，例如Google图片 ([https://images.google.com](https://images.google.com)) 或Packt
    ([https://www.packtpub.com](https://www.packtpub.com))，找到并下载书籍封面图片。
- en: Click on the Set featured image link located in the right-hand sidebar of the
    editing interface.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击编辑界面右侧侧边栏中的“设置特色图片”链接。
- en: Click on Select Files to pick the image that you downloaded to your computer
    and have WordPress upload it to the `wp-content/uploads` folder of your site.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“选择文件”以选择您下载到计算机上的图片，并让WordPress将其上传到您网站的`wp-content/uploads`文件夹。
- en: Once the file is uploaded and WordPress displays information about it, look
    at the bottom of the media upload dialog and click on the Set featured image link
    to associate it with the Book Review that you are creating.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件上传并且WordPress显示其信息，请查看媒体上传对话框的底部并点击“设置特色图片”链接，将其与您正在创建的图书评论关联。
- en: '![](img/64748c33-ebf0-42ea-bc16-422e02a3e563.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64748c33-ebf0-42ea-bc16-422e02a3e563.png)'
- en: Click on the Publish button to save this first Book Review.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“发布”按钮以保存第一个图书评论。
- en: Visit the Permalinks section of the Settings menu and click on the Save Changes
    button (without changing your Permalinks settings).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问设置菜单中的“永久链接”部分，并点击“保存更改”按钮（不更改您的永久链接设置）。
- en: Go back to the Book Review you created and click on the View Book Review button
    to see the newly created content in your web browser.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您创建的图书评论，并点击“查看图书评论”按钮，在您的网页浏览器中查看新创建的内容。
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By making a call to the `register_post_type` function, the entire WordPress
    environment becomes aware of the existence of this new post type. This awareness
    includes the creation of a dedicated section to create and edit posts of this
    type and the ability to process web page requests for Book Reviews.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`register_post_type`函数，整个WordPress环境都会意识到这个新帖子类型的存在。这种意识包括创建一个专门的区域来创建和编辑此类型的帖子，以及处理图书评论的网页请求的能力。
- en: 'As mentioned at the beginning of this recipe, the function is quite simple
    to use and only requires two arguments:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如本食谱开头所述，该函数非常简单易用，只需两个参数：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first argument is a text string that indicates the name of the post type.
    Please note when choosing this name that it will be used as the default value
    for the permalinks of all items that use the new type, and that it should be unique
    enough to avoid potential conflicts with other plugins.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个表示帖子类型的文本字符串。请注意，在选择此名称时，它将用作所有使用新类型的项目的默认永久链接值，并且它应该足够独特，以避免与其他插件发生潜在冲突。
- en: The second argument is an array of properties that specify the characteristics
    of the new post type and determine how this type will be edited.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是一个属性数组，它指定了新帖子类型的特点并决定了如何编辑此类型。
- en: In this specific example, the first element of the properties array is actually
    another array, which contains a number of labels. These labels indicate the text
    strings that should be displayed when managing items created under the new post
    type. For example, if we look at the screenshot before step 11, the message No
    Book Reviews found came directly from the definition of the `not_found` label
    in this array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定示例中，属性数组的第一个元素实际上是一个数组，它包含了一些标签。这些标签指示在管理在新帖子类型下创建的项目时应显示的文本字符串。例如，如果我们查看步骤11之前的截图，消息“未找到图书评论”直接来自此数组中`not_found`标签的定义。
- en: The second argument, named `public`, determines whether the post type's administration
    interface should be shown to manage it and if visitors should be able to view
    single items. Next is the `menu_position` member of the configuration array, indicating
    the desired position of the new element in the administration menu. In this example,
    a value of 20 indicates that it should be displayed following to the Pages menu
    item. Visit the WordPress Codex ([https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type))
    for a full list of potential values for this parameter and their associated positions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数名为`public`，它决定了帖子类型的行政界面是否应该显示以管理它，以及访客是否能够查看单个项目。接下来是配置数组中的`menu_position`成员，它表示新元素在行政菜单中的期望位置。在这个例子中，值20表示它应该显示在“页面”菜单项之后。访问WordPress
    Codex（[https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type)）以获取此参数所有潜在值及其相关位置的完整列表。
- en: The `supports` parameter is another array that indicates which parts of the
    content editor should be displayed for items that use the custom post type. In
    this case, we left out some sections, such as `author`, `excerpt`, `trackbacks`,
    `revisions`, `page-attributes`, and `post-formats`, as they were not desirable
    for Book Reviews.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`supports`参数是另一个数组，它指示对于使用自定义帖子类型的项，内容编辑器应显示哪些部分。在这种情况下，我们省略了一些部分，如“作者”、“摘要”、“引用”、“修订”、“页面属性”和“帖子格式”，因为它们对于图书评论来说不是必需的。'
- en: The next few parameters in the configuration array indicate that we do not want
    to define custom taxonomies at this time, and specify the path and name of the
    image file that should be displayed next to the post type's name in the administration
    menu. Finally, the last two arguments determines whether WordPress should present
    an archive listing page for the new type when users visit the `/book_reviews`
    page on the site and whether or not book reviews should be excluded from search
    results.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 配置数组中的下几个参数表示我们目前不想定义自定义分类法，并指定在管理菜单中显示在帖子类型名称旁边的图像文件的路径和名称。最后，最后两个参数确定当用户访问网站的
    `/book_reviews` 页面时，WordPress 是否应该为新的类型提供一个存档列表页面，以及书籍评论是否应该从搜索结果中排除。
- en: There are actually many other parameters that can be included in the configuration
    array to get more precise control over some aspects of the new custom post type.
    Please visit the WordPress Codex ([https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type))
    to learn more about them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，还有许多其他参数可以包含在配置数组中，以更精确地控制新自定义帖子类型的一些方面。请访问 WordPress Codex ([https://codex.wordpress.org/Function_Reference/register_post_type](https://codex.wordpress.org/Function_Reference/register_post_type))
    了解更多相关信息。
- en: There's more...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While the internal post type name is used by default to generate post permalinks,
    it can actually be overridden to create better-looking URLs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认情况下使用内部帖子类型名称来生成帖子永久链接，但实际上可以覆盖它以创建更美观的 URL。
- en: Changing the custom post type permalinks slug
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改自定义帖子类型永久链接的别名
- en: 'An optional member of the custom post type configuration is the `rewrite` parameter.
    It can be defined as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义帖子类型配置的可选成员是 `rewrite` 参数。它可以定义如下：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Although this may seem very simple, the permalinks will only change over after
    you go to the Permalinks section and Save Changes, as we did in the recipe. Alternatively,
    it is possible to make calls from the WordPress rewrite module to programmatically
    request for the permalinks configuration to be rebuilt. As this is not something
    that should be done every time WordPress displays a page, but would be too early
    to do when a plugin gets initialized or upgraded, a good place to call these functions
    would be within the plugin options storage function. You might even decide to
    give administrators the ability to specify their own slug in a plugin configuration
    page. The code to reset the permalinks rules is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来可能非常简单，但只有在您进入“永久链接”部分并保存更改后，永久链接才会更改，就像我们在食谱中所做的那样。或者，您可以从 WordPress
    重写模块中调用程序来请求重新构建永久链接配置。由于这不是每次 WordPress 显示页面时都应该做的事情，而且在插件初始化或升级时做这件事可能太早了，所以一个好的调用这些函数的地方是在插件选项存储函数中。您甚至可以决定在插件配置页面上允许管理员指定他们自己的别名。重置永久链接规则的代码如下：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding a new section to the custom post type editor
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义帖子类型编辑器中添加新部分
- en: While the custom post editor that has been put in place so far is functional,
    it is not the friendliest of user interfaces, especially with the custom fields
    section, where users need to type or select the names of each field as they create
    new items. A cleaner approach is to create a custom interface using the meta box
    mechanism that we saw in the previous chapter to display all the data associated
    with Book Reviews.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然到目前为止已经实施的自定义帖子编辑器是功能性的，但它并不是最友好的用户界面，尤其是在自定义字段部分，用户在创建新项目时需要输入或选择每个字段的名称。一种更干净的方法是使用我们在上一章中看到的元框机制创建一个自定义界面，以显示与书籍评论相关联的所有数据。
- en: This recipe shows how to create a meta box that will be associated with a custom
    post type and how to save the information that is entered in that new interface.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何创建一个与自定义帖子类型相关联的元框，以及如何保存在新界面中输入的信息。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating a custom post type* recipe to
    have a starting point for this recipe, and the resulting plugin should still be
    active in your development site. Alternatively, you can get the resulting code
    (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v1.php`) from the code bundle downloaded
    from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file `ch4-book-reviews.php`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *创建自定义文章类型* 的配方，以便为本配方提供一个起点，并且生成的插件仍然在您的开发站点中处于活动状态。或者，您可以从 Packt
    网站下载的代码包（[https://www.packtpub.com/support](https://www.packtpub.com/support)）中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v1.php`），并将文件重命名为 `ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到开发安装的 WordPress 插件目录中的 `ch4-book-reviews` 文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开 `ch4-book-reviews.php` 文件。
- en: 'Add the following line of code after the existing functions to register a function
    to be called when the administration interface is visited:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行以注册一个在访问管理界面时调用的函数：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_admin_init`
    function and register a meta box to be associated with the `book_reviews` post
    type:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加以提供 `ch4_br_admin_init` 函数的实现并注册一个与 `book_reviews` 文章类型关联的元框：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Insert this function to implement the `ch4_br_display_review_details_meta_box`
    function and render the meta box contents:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入此函数以实现 `ch4_br_display_review_details_meta_box` 函数并渲染元框内容：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code segment to register a function that will be called when
    posts are saved to the database:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以注册一个在将帖子保存到数据库时调用的函数：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add an implementation for the `ch4_br_add_book_review_fields` function defined
    in the previous `add_action` call:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为之前 `add_action` 调用中定义的 `ch4_br_add_book_review_fields` 函数添加实现：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Find the `ch4_br_create_book_post_type` function, where the new book type was
    originally created, and remove the `custom-fields` element from the `supports`
    array:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发安装的 WordPress 插件目录的 `ch4-book-reviews` 文件夹中找到 `ch4_br_create_book_post_type`
    函数，其中最初创建了新的书籍类型，并从 `supports` 数组中删除 `custom-fields` 元素：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save and close the plugin file.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Open the previously created Book Review to see the new Book Review Details
    meta box, containing a text field to specify the author and a drop-down list for
    the rating:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开之前创建的图书评论，查看新的图书评论详情元框，其中包含一个文本字段用于指定作者和一个下拉列表用于评分：
- en: '![](img/5237db71-726c-4529-b963-f2b23b86295c.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5237db71-726c-4529-b963-f2b23b86295c.png)'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe uses the WordPress built-in meta box system to create a clean interface
    that will allow users to manage fields specific to custom post types without having
    to use the cumbersome default Custom Fields editor. As we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*, custom meta boxes can be created using
    the `add_meta_box` function. In addition to declaring the meta box and associating
    it with the custom post type, `add_meta_box` defines a callback that is responsible
    for rendering the contents of the box.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用 WordPress 内置的元框系统创建一个干净的界面，允许用户管理特定于自定义文章类型的字段，而无需使用繁琐的默认自定义字段编辑器。正如我们在[第
    3 章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)，“用户设置和管理页面”中看到的，可以使用 `add_meta_box`
    函数创建自定义元框。除了声明元框并将其与自定义文章类型关联外，`add_meta_box` 还定义了一个回调，负责渲染框的内容。
- en: The next section of the recipe implements the function that renders the meta
    box content. As we can see, this box receives an object variable that contains
    information about the Book Review that is being displayed in the post editor.
    Using this object, our code retrieves the post ID and uses it to query the site
    database for a book author and rating associated with the entry. Once the custom
    field data has been retrieved from the database, it can be used to render the
    author and rating fields onscreen. When new Book Reviews are created, both calls
    to `get_post_meta` will return an empty string, resulting in the display of an
    empty text field and the last entry in the drop-down list.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 配方的下一部分实现了渲染元框内容的函数。正如我们所见，这个框接收一个包含正在显示在文章编辑器中的书评信息的对象变量。使用这个对象，我们的代码检索文章 ID，并使用它来查询网站数据库以获取与条目关联的书籍作者和评分。一旦从数据库中检索到自定义字段数据，就可以用于在屏幕上渲染作者和评分字段。当创建新的书评时，对
    `get_post_meta` 的两次调用都将返回空字符串，导致显示一个空文本字段和下拉列表中的最后一个条目。
- en: 'The `get_post_meta` function is used to retrieve data that was stored in the
    custom fields section of the post editor and has three parameters:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_post_meta` 函数用于检索存储在文章编辑器自定义字段部分的已存储数据，并具有三个参数：'
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first parameter is the post ID, which can easily be retrieved using the
    `get_the_ID()` template function. This ID is used to identify the post to which
    the custom information is associated. The second argument is the custom field
    name, which should match the name specified when it is created in the post editor.
    The third and final argument indicates whether the return value should be a single
    value or an array of values. If set to `false`, it will produce an array containing
    a single element even if the custom field only contains a single value. In most
    cases, it should be set to `true` to receive a single value that can be accessed
    directly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是文章 ID，这个 ID 可以通过使用 `get_the_ID()` 模板函数轻松获取。这个 ID 用于识别与自定义信息关联的文章。第二个参数是自定义字段名称，它应该与在文章编辑器中创建时指定的名称相匹配。第三个和最后一个参数表示返回值应该是单个值还是值的数组。如果设置为
    `false`，即使自定义字段只包含单个值，它也会生成包含单个元素的数组。在大多数情况下，应该将其设置为 `true` 以接收可以直接访问的单个值。
- en: The last steps of this recipe take care of registering a function that will
    be called when posts of all types are saved or deleted by the site administrator.
    Since it will deal with all types of data, the saving callback must first check
    the type of the received post data. If it's a Book Review, the code proceeds to
    check if the received data is valid and stores the information in the post meta
    data table. In this recipe, the parameters for the `update_post_meta` function
    are similar to the `get_post_meta` function, except for the third argument, which
    is used to specify the data to be stored.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的最后几个步骤负责注册一个函数，当网站管理员保存或删除所有类型的文章时，该函数将被调用。由于它将处理所有类型的数据，保存回调必须首先检查接收到的文章数据的类型。如果是书评，代码将接着检查接收到的数据是否有效，并将信息存储在文章元数据表中。在此配方中，`update_post_meta`
    函数的参数与 `get_post_meta` 函数类似，除了第三个参数，它用于指定要存储的数据。
- en: One last detail that should be mentioned about this recipe is the use of the
    fourth parameter of the `add_action` function when associating a callback to the
    `save_post` action hook. This argument indicates that two arguments will be received
    by the registered callback. If this argument is not set, the callback function
    will never receive that second piece of data.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此配方需要提到的最后一个细节是，在将回调关联到 `save_post` 动作钩子时使用 `add_action` 函数的第四个参数。此参数表示注册的回调将接收两个参数。如果此参数未设置，回调函数将永远不会收到那第二份数据。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom post type* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义文章类型* 的配方'
- en: The *Formatting admin pages using meta boxes* recipe in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 3 章 *用户设置和管理页面* 中的 *使用元框格式化管理页面* 配方 [0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml]
- en: Displaying single custom post type items using a custom layout
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义布局显示单个自定义文章类型项
- en: When displaying an entry created in our new custom post type, the default layout
    offered by our current site theme may not always be able to pleasantly display
    the information it contains. In most cases, you will be able to see the main post
    content, but not any of the custom fields data that is associated with the post.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示我们在新自定义帖子类型中创建的条目时，我们当前网站主题提供的默认布局可能无法始终愉快地显示其中包含的信息。在大多数情况下，您将能够看到主要帖子内容，但看不到与帖子关联的任何自定义字段数据。
- en: This recipe shows how to create a custom layout to display all the elements
    that we stored in the Book Review created in the previous recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了如何创建一个自定义布局来显示我们在上一个配方中创建的书籍评论中存储的所有元素。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding a new section to the custom post
    type editor* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v2.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*向自定义帖子类型编辑器添加新部分*的配方，以便为本配方提供一个起点，并且生成的插件仍然在您的开发站点中处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v2.php`），并将文件重命名为`ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录中的`ch4-book-reviews`文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch4-book-reviews.php`文件。
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is deciding which theme template to use to render
    content:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册一个函数以在WordPress决定使用哪个主题模板来渲染内容时，在现有函数之后添加以下代码行：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_template_include`
    function:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到为`ch4_br_template_include`函数提供一个实现的代码部分：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code section to implement the `ch4_br_display_single_book_review`
    function to display Book Reviews, including their custom fields:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到实现`ch4_br_display_single_book_review`函数以显示书籍评论，包括它们的自定义字段：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save and close the plugin file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Find and download a PNG format pixel star icon measuring 32 x 32 pixels from
    a site such as IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com)),
    and save it as `star-icon.png` in the plugin directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从像IconArchive([http://www.iconarchive.com](http://www.iconarchive.com))这样的网站找到一个32
    x 32像素的PNG格式像素星形图标，并将其保存为`star-icon.png`在插件目录中。
- en: Create a grayscale version of the star icon using any graphic processing tool
    (for example, the free multi-platform XnViewMP tool, found at [http://www.xnview.com/en/](http://www.xnview.com/en/))
    and save it as `star-icon-grey.png`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用任何图形处理工具（例如，位于[http://www.xnview.com/en/](http://www.xnview.com/en/)的免费多平台XnViewMP工具）创建星形图标的灰度版本，并将其保存为`star-icon-grey.png`。
- en: Go to the Book Reviews management page and click on the View link under the
    existing entry created in the previous recipe to see the content rendered using
    the new template.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往书籍评论管理页面，并点击之前配方中创建的现有条目下的查看链接，以查看使用新模板渲染的内容。
- en: '![](img/28bb9f2c-e3fb-411b-96c0-775e634890c3.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28bb9f2c-e3fb-411b-96c0-775e634890c3.png)'
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When rendering any web page, the default WordPress functionality is to search
    the current theme directory for an applicable template suitable for the content
    at hand. In the case of a single custom post type item, such as a Book Review,
    it first looks for a single item template named `single-<post-type-name>.php`,
    where the latter part is the actual post type name. If it does not find this file,
    it defaults to the general single item template. In the first recipe of this chapter,
    the template that was used to show the Book Review was the default single item
    template, simply named `single.php`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染任何网页时，WordPress的默认功能是在当前主题目录中搜索适用于当前内容的适用模板。在单个自定义帖子类型项的情况下，例如书籍评论，它首先寻找一个名为`single-<post-type-name>.php`的单个项模板，其中后一部分是实际的帖子类型名称。如果找不到此文件，它将默认使用通用单个项模板。在本章的第一个配方中，用于显示书籍评论的模板是默认的单个项模板，简单地命名为`single.php`。
- en: To add better support for our new post type, this recipe associates a function
    with the `template_include` filter hook to change that behavior. More specifically,
    we use the `locate_template` function to check whether the user provided a template
    for the `book_reviews` post type in the theme directory. If no template is found,
    we register a filter to overwrite the page contents with our own layout. This
    gives users the flexibility to use our predefined layout or to provide their own.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地支持我们新的文章类型，此配方将一个函数与`template_include`过滤器钩子关联起来，以改变该行为。更具体地说，我们使用`locate_template`函数来检查用户是否在主题目录中为`book_reviews`文章类型提供了一个模板。如果没有找到模板，我们将注册一个过滤器来用我们自己的布局覆盖页面内容。这使用户能够灵活地使用我们预定义的布局或提供他们自己的。
- en: The rest of the recipe implements our fallback filter function for Book Review
    content. This code makes use of many WordPress template functions, such as `get_the_ID()`
    and `get_the_content()`, as well as the `get_post_meta` function, to display various
    elements of the current item, including the book author and its rating, as well
    as the main post content and the featured image.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 配方的其余部分实现了我们的Book Review内容的后备过滤器函数。此代码使用了多个WordPress模板函数，如`get_the_ID()`和`get_the_content()`，以及`get_post_meta`函数，以显示当前项目的各种元素，包括书籍作者和其评分，以及主要文章内容和特色图像。
- en: To help users build their own theme template for your custom post type, you
    should provide code snippets in your plugin documentation, showing how to retrieve
    your custom post type's custom fields.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助用户为您的自定义文章类型构建自己的主题模板，您应该在插件文档中提供代码片段，展示如何检索您的自定义文章类型的自定义字段。
- en: See also
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom post type* recipe
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建自定义文章类型**的配方'
- en: Displaying custom post type data in shortcodes
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在短代码中显示自定义文章类型数据
- en: To help visitors navigate through the items added using our new custom post
    type, we will need to display a list of all the book reviews on the site, along
    with navigation elements to be able to handle large numbers of items. While WordPress
    offers a built-in mechanism to list post items in the form of the archive page,
    it is not easy for a plugin to be able to modify the layout of the resulting page
    in a consistent way across all possible user themes. A better solution to display
    a list of custom post type items is to create a shortcode that will display one
    or more posts in any place selected by the user, including a page, a post, or
    even on the site's front page.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助访客通过我们使用的新自定义文章类型添加的项目进行导航，我们需要显示网站上所有书评的列表，以及导航元素以便处理大量项目。虽然WordPress提供了一个内置机制以存档页的形式列出文章项目，但插件很难以一致的方式修改所有可能的用户主题中结果页面的布局。更好的解决方案是创建一个短代码，该短代码可以在用户选择的任何位置显示一个或多个文章，包括页面、文章，甚至网站的前页。
- en: This recipe shows how to create a shortcode that will retrieve and display five
    book reviews at a time with accompanying navigation links.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方展示了如何创建一个短代码，该短代码可以一次检索并显示五个书评，并附带导航链接。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying single custom post type items
    using a custom layout* recipe to have a starting point for this recipe, and the
    resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v3.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了**使用自定义布局显示单个自定义文章类型项目**的配方，以便为此配方提供一个起点，并且生成的插件仍然在您的开发站点中处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v3.php`）并将文件重命名为`ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch4-book-reviews`文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch4-book-reviews.php`文件。
- en: 'Add the following line of code after the existing functions to register a function
    that declares the new shortcode:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以注册一个声明新短代码的函数：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_review_list`
    function:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到为`ch4_br_book_review_list`函数提供实现的代码：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the plugin file.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存插件文件。
- en: Create a new page and insert the shortcode `[book-review-list]`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新页面并插入短代码`[book-review-list]`。
- en: Publish and View the page to see that a list of Book Reviews will be displayed
    in place of the shortcode.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布并查看页面，以查看书评列表将显示在短代码的位置。
- en: '![](img/3308719d-7b79-4184-ae00-70e01c961f47.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3308719d-7b79-4184-ae00-70e01c961f47.png)'
- en: If more than five Book Reviews exist in the system, click on the navigation
    links that are displayed. You will see that the URL in the browser address bar
    changes, but the list of entries shows the same first five items as before.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果系统中存在超过五个书评，请点击显示的导航链接。您会看到浏览器地址栏中的URL发生了变化，但条目列表显示的仍然是之前的前五个项目。
- en: 'Back in the `ch4-book-reviews.php` file, add the following highlighted code
    near the top of `ch4_br_book_review_list`, right after the line initializing the
    value of the `$query_params` variable:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`ch4-book-reviews.php`文件，在`ch4_br_book_review_list`的顶部附近添加以下突出显示的代码，在初始化`$query_params`变量值的行之后：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save and close the plugin file. Refresh the page that includes our new shortcode
    and use the navigation links to see that the list of items now changes properly.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。刷新包含我们新短语的页面，并使用导航链接查看项目列表是否已正确更改。
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we saw in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User
    Settings and Administration Pages*, shortcodes are text elements that can be inserted
    in any page and post, that will be replaced with the content generated by the
    plugin when they are found. The registered callback function must prepare the
    output and send it back as a return value at the end of its execution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)“用户设置和管理页面”中看到的，短代码是可以插入任何页面和文章中的文本元素，当它们被找到时，将被插件生成的内容所替换。注册的回调函数必须在执行结束时准备输出并将其作为返回值发送回去。
- en: The first part of the `ch4_br_book_review_list` function takes care of preparing
    a query array to be passed to a new instance of the `WP_Query` class. This class
    allows developers to easily extract information from the site database's post
    table. In this example, the parameters that are being set in the query are the
    internal post type name (`post_type`), the status of the items that we want to
    display (`post_status`), and the number of items that should be retrieved at a
    time (`posts_per_page`).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch4_br_book_review_list`函数的第一部分负责准备一个查询数组，以便传递给`WP_Query`类的新实例。这个类允许开发者轻松地从网站数据库的文章表中提取信息。在这个例子中，正在设置的查询参数包括内部文章类型名称（`post_type`）、我们想要显示的项目状态（`post_status`）以及每次应该检索的项目数量（`posts_per_page`）。'
- en: Once the query string is in place, we create a global variable called `book_review_query`
    and assign to it a new instance of a `WP_Query` object. Once created, we initialize
    it using the query string that was just assembled. If posts are found by the object,
    we output HTML code to create a table and use a `while` loop to cycle through
    all the items found and display their title and author using a code similar to
    the previous two recipes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦查询字符串就绪，我们创建一个名为`book_review_query`的全局变量，并将其分配给一个`WP_Query`对象的新实例。一旦创建，我们使用刚刚组装的查询字符串初始化它。如果对象找到了文章，我们输出HTML代码来创建一个表格，并使用`while`循环遍历找到的所有项目，并使用类似于前两个菜谱的代码显示它们的标题和作者。
- en: As part of this recipe, we have seen that if more entries exist for the custom
    post type than the value specified with the `posts_per_page` query argument, navigation
    controls are added under the table of entries but will not work correctly, since
    we manually created the query string. To rectify the situation, we use the `get_query_var`
    function to see if a page number was requested. If that is the case, and the page
    number is not `1`, we add that number to our query parameters.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这个菜谱的一部分，我们看到了如果自定义文章类型的条目数量超过了`posts_per_page`查询参数指定的值，会在条目表下方添加导航控件，但由于我们手动创建了查询字符串，所以它们将不会正确工作。为了纠正这种情况，我们使用`get_query_var`函数来查看是否请求了页码。如果是这种情况，并且页码不是`1`，我们将该数字添加到我们的查询参数中。
- en: There's more...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As mentioned in the beginning of this recipe, there may be instances where a
    list of custom post type items needs to be displayed as part of a theme template.
    The following section shows how to get shortcode content to be displayed as part
    of a template file.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如本菜谱开头所述，可能存在需要将自定义文章类型的项目列表作为主题模板的一部分显示的情况。以下部分展示了如何将短代码内容作为模板文件的一部分显示。
- en: do_shortcode function
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: do_shortcode 函数
- en: 'The `do_shortcode` function can be called from any theme template file, for
    the front page or any other section of the site, to render content associated
    with a shortcode. It takes a single argument, the shortcode string including any
    parameters. To display the content created in this recipe, we would simply need
    to call the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`do_shortcode`函数可以从任何主题模板文件中调用，用于主页或网站的任何其他部分，以渲染与短代码相关的内容。它接受一个参数，即包含任何参数的短代码字符串。要显示本食谱中创建的内容，我们只需调用以下代码：'
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding custom categories for custom post types
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为自定义帖子类型添加自定义分类
- en: To keep items organized on a site, administrators often use the built-in WordPress
    categories and terms to identify similar items. Looking back at the Book Reviews
    system that we have been putting in place so far in this chapter, a type of categorization
    that would be helpful is a book type (for example, Science Fiction, Documentary,
    Fiction, Poetry, and so on).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在网站上保持项目组织，管理员通常会使用内置的WordPress分类和术语来识别类似的项目。回顾一下我们在本章中迄今为止设置的图书评论系统，一种有用的分类类型是图书类型（例如，科幻小说、纪录片、小说、诗歌等）。
- en: This recipe shows how to create a new category (known as a **taxonomy** in the
    WordPress backend) and associate it with the Book Review custom post type.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何创建一个新的分类（在WordPress后端中称为**分类法**）并将其与图书评论自定义帖子类型关联。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying custom post type data in shortcodes*
    recipe, to have a starting point for this recipe, and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v4.php`) from the downloaded
    code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*在短代码中显示自定义帖子类型数据*的食谱，以为本食谱提供一个起点，并且生成的插件仍然在您的开发站点中处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v4.php`），并将文件重命名为`ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装中WordPress插件目录的`ch4-book-reviews`文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch4-book-reviews.php`文件。
- en: 'Find the `ch4_br_create_book_post_type` function and add the following code
    after the existing call to `register_post_type` to create the new taxonomy:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch4_br_create_book_post_type`函数，并在现有`register_post_type`调用之后添加以下代码以创建新的分类法：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save and close the plugin file.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Open the previously created Book Reviews to see the newly added Book Type meta
    box on the right-hand side of the post editor.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开之前创建的图书评论，查看在帖子编辑器右侧新添加的图书类型元框。
- en: 'Click on the + Add New Book Type link to create a new item and assign it as
    the current item''s type. Click on the Update button in the top-right section
    of the post editor to save the review:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击+添加新图书类型链接创建一个新项目并将其指定为当前项目的类型。点击帖子编辑器右上角的更新按钮以保存评论：
- en: '![](img/5fdd254e-2b3c-4aa0-8ad8-7802dccc2fbe.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5fdd254e-2b3c-4aa0-8ad8-7802dccc2fbe.png)'
- en: 'Look at the left-hand administration menu to see that a new menu item was added
    to manage book types, leading to an editor similar to the post and page category
    editor:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看左侧管理菜单，您会看到添加了一个新的菜单项来管理图书类型，链接到一个类似于帖子和页面分类编辑器的编辑器：
- en: '![](img/3dc5a5f2-54e9-488f-a9c7-d6f260bb6686.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3dc5a5f2-54e9-488f-a9c7-d6f260bb6686.png)'
- en: 'Back in the plugin file, add the following code to the `ch4_br_display_single_book_review`
    function after the section displaying the rating to display the book type:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件文件中，在显示评分的部分之后添加以下代码到`ch4_br_display_single_book_review`函数中，以显示图书类型：
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save and close the template file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭模板文件。
- en: Visit a Book Review page to see the book type displayed under the rating.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问图书评论页面，查看在评分下方显示的图书类型。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `register_taxonomy` function is used to create a new type of category in
    WordPress and associate it to a post type. It has three parameters:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_taxonomy`函数用于在WordPress中创建新的分类类型并将其关联到帖子类型。它有三个参数：'
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first argument is a unique identifier for the taxonomy. The second parameter
    is the post type that it should be associated with, which should match the type
    declared with the `register_post_type` function. The third argument is an array
    of parameters that determine how the new taxonomy will behave.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是分类法的唯一标识符。第二个参数是它应该关联的帖子类型，这应该与`register_post_type`函数中声明的类型相匹配。第三个参数是一个参数数组，它决定了新分类法将如何表现。
- en: In this example, we have set a few taxonomy options, including a first item
    called **labels** that contains an array of text strings that will be used in
    the interface when referring to the new taxonomy. We also specified a second element,
    called `show_ui`, which controls the display of the taxonomy meta box in the post
    editor and the presence of a link to access the taxonomy editor in the administration
    menu. Next is an option called `show_tagcloud`, which we set to `false` to avoid
    displaying a tag cloud of all taxonomy values. Finally, the last item in the options
    array is called `hierarchical`. When set to `true`, taxonomy items will be able
    to have parent/child relationships and will be accessible as a list of checkboxes
    in the post editor. If set to `false`, all taxonomies are organized as a flat
    list and can be selected using an interface similar to the tag window in the post
    and page editor.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们设置了一些分类选项，包括一个名为 **labels** 的第一个项目，它包含一个将用于界面中引用新分类的文本字符串数组。我们还指定了第二个元素，名为
    `show_ui`，它控制分类元框在帖子编辑器中的显示以及访问分类编辑器在管理菜单中的链接的存在。接下来是一个名为 `show_tagcloud` 的选项，我们将其设置为
    `false` 以避免显示所有分类值的标签云。最后，选项数组中的最后一个项目名为 `hierarchical`。当设置为 `true` 时，分类项将能够有父子关系，并且可以在帖子编辑器中以复选框列表的形式访问。如果设置为
    `false`，所有分类都将组织成平面列表，并且可以使用类似于帖子编辑器和页面编辑器中标签窗口的界面进行选择。
- en: There are many more options available for the `register_taxonomy` function,
    as can be seen if you visit the WordPress Codex website ([https://codex.wordpress.org/Function_Reference/register_taxonomy](https://codex.wordpress.org/Function_Reference/register_taxonomy)),
    but the ones found here are the essential ones to define a basic taxonomy.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_taxonomy` 函数有更多可用的选项，如访问 WordPress Codex 网站（[https://codex.wordpress.org/Function_Reference/register_taxonomy](https://codex.wordpress.org/Function_Reference/register_taxonomy)）所示，但这里列出的都是定义基本分类法所必需的。'
- en: See also
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a custom post type* recipe
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建自定义帖子类型* 的食谱'
- en: Adding custom fields to categories
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义字段到分类
- en: In addition to specifying names for categories, it may be useful to attach additional
    information to custom taxonomies created in a WordPress plugin. For example, we
    may want to assign custom colors to categories that will be used when they are
    displayed, or we might want to identify the categories of content that are only
    accessible to paying members on a website.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指定分类的名称外，将附加额外信息到在 WordPress 插件中创建的自定义分类可能很有用。例如，我们可能想要为在显示时使用的分类分配自定义颜色，或者我们可能想要识别只有付费会员才能访问的内容分类。
- en: This recipe shows how to display additional fields in the taxonomy editor and
    how to store the additional data in the site's database.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何在分类编辑器中显示额外字段，以及如何将额外数据存储在网站的数据库中。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding custom categories for custom post
    types* recipe to have a starting point for this recipe, and the resulting plugin
    should still be active in your development site. Alternatively, you can get the
    resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v5.php`) from the
    downloaded code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了 *添加自定义分类以用于自定义帖子类型* 的食谱，以便为本食谱提供一个起点，并且生成的插件仍然在你的开发网站上处于激活状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v5.php`），并将文件重命名为 `ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的 WordPress 插件目录中的 `ch4-book-reviews` 文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开 `ch4-book-reviews.php` 文件。
- en: 'Add the following lines of code after the existing functions to assign a function
    to two action hooks that will be called when users create or edit taxonomy items:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以将函数分配给两个将在用户创建或编辑分类项时被调用的动作钩子：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_type_new_fields`
    function:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `ch4_br_book_type_new_fields` 函数实现的区域：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following lines of code at the end of the file to assign a function
    that will be called when users create or update taxonomy items:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下代码行，以分配一个在用户创建或更新分类项时将被调用的函数：
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_save_book_type_new_fields`
    function:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `ch4_br_save_book_type_new_fields` 函数实现的区域：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save and close the plugin file.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Edit one of the Book Type entries created in the previous recipe to see the
    newly added Color field. Enter a color code and Update the entry to see the data
    saved:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑先前的食谱中创建的其中一个书籍类型条目以查看新添加的颜色字段。输入一个颜色代码并更新条目以查看保存的数据：
- en: '![](img/7ffdbf28-2768-49b2-a96d-7da40cb89367.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7ffdbf28-2768-49b2-a96d-7da40cb89367.png)'
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe uses many variable name action hooks to register functions to be
    called when users create or modify book types in the taxonomy editor. The first
    two calls to `add_action` refer to the `<taxonomy>_edit_forms_fields` and `<taxonomy>_add_form_fields`
    hooks. While you might expect to see two different functions associated with each
    of these action hooks, we actually register the same function in both cases, since
    rendering an additional field is similar in both cases. That being said, part
    of the function we register checks to see whether it receives a valid object as
    a parameter to know how it should render the new field so that it fits on the
    page if the user is creating a new category or editing an existing one.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱使用许多变量名动作钩子来注册在分类编辑器中创建或修改书籍类型时要调用的函数。前两个对 `add_action` 的调用分别指的是 `<taxonomy>_edit_forms_fields`
    和 `<taxonomy>_add_form_fields` 钩子。虽然您可能期望看到与每个动作钩子相关联的两个不同的函数，但实际上我们在两种情况下都注册了相同的函数，因为渲染额外字段在这两种情况下是相似的。话虽如此，我们注册的函数的一部分会检查它是否接收一个有效的对象作为参数，以便知道它应该如何渲染新字段，以便如果用户正在创建新类别或编辑现有类别，它能够适合页面。
- en: We use a similar technique with the `edited_<taxonomy>` and `created_<taxonomy>`
    action hooks, which are respectively called when you first save a new taxonomy
    and update an existing one. In this case, the code does not have any significant
    differences depending on the action, since we only need to validate and save the
    incoming value for the new field.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与 `edited_<taxonomy>` 和 `created_<taxonomy>` 动作钩子类似的技术，这些钩子分别在您首次保存新的分类或更新现有分类时被调用。在这种情况下，代码在动作方面没有显著差异，因为我们只需要验证并保存新字段的传入值。
- en: See also
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding custom categories for custom post types* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为自定义文章类型添加自定义分类* 的食谱'
- en: Hiding the category editor from the custom post type editor
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从自定义文章类型编辑器中隐藏分类编辑器
- en: As we saw in the previous recipe, when we associate a new taxonomy with the
    Book Review custom post type, the `show_ui` option controls the visibility of
    the taxonomy assignment meta box and the admin menu link to the taxonomy editor.
    In some cases, it is desirable to give users access to the full taxonomy editor,
    but only let editors choose from a controlled drop-down list when they create
    new entries in the custom post type editor.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在先前的食谱中看到的，当我们将新的分类与书籍评论自定义文章类型相关联时，`show_ui` 选项控制分类分配元框和到分类编辑器的管理员菜单链接的可见性。在某些情况下，我们希望用户能够访问完整的分类编辑器，但在自定义文章类型编辑器中创建新条目时，只让编辑器从受控的下拉列表中选择。
- en: This recipe shows how to hide the taxonomy interface from the post editor and
    how to update the custom post type meta box created in the previous recipe to
    assign a type to new Book Reviews and save this information in the site's database.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱展示了如何隐藏分类界面从文章编辑器中，以及如何更新在先前的食谱中创建的自定义文章类型元框以分配类型给新的书籍评论并保存此信息到网站的数据库中。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding custom fields to categories* recipe
    to have a starting point for this recipe, and the resulting plugin should still
    be active in your development site. Alternatively, you can get the resulting code
    (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v6.php`) from the downloaded code
    bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *为分类添加自定义字段* 的食谱，以便为此食谱提供一个起点，并且生成的插件仍然在您的开发站点中处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v6.php`）并将文件重命名为 `ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的 WordPress 插件目录中的 `ch4-book-reviews` 文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开代码编辑器中的 `ch4-book-reviews.php` 文件。
- en: 'Find the call to the `register_taxonomy` function within the `ch4_br_create_book_post_type`
    function and add a new member to the configuration array named `meta_box_cb` with
    a value set to `false` highlighted in bold:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ch4_br_create_book_post_type` 函数中找到对 `register_taxonomy` 函数的调用，并添加一个名为 `meta_box_cb`
    的新成员到配置数组中，其值设置为 `false`，如下所示（加粗）：
- en: '[PRE26]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the plugin and edit a Book Review to see that the Book Type taxonomy box
    is no longer displayed.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存插件并编辑一个书评，以查看书评类型分类框不再显示。
- en: 'Locate the `ch4_br_display_review_details_meta_box` function in the code and
    add the following code within the existing table rendering code to add a new row
    containing a drop-down selection box for the book type:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中找到`ch4_br_display_review_details_meta_box`函数，并在现有的表格渲染代码内添加以下代码，以添加一个包含书籍类型下拉选择框的新行：
- en: '[PRE27]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Find the `ch4_br_add_book_review_fields` function and add the following code
    segment within the if statement, checking to see whether the post type is a Book
    Review, to save the selected book type in the site''s database upon the submission
    of the post:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch4_br_add_book_review_fields`函数，并在if语句内添加以下代码段，检查帖子类型是否为书评，以便在提交帖子时将选定的书籍类型保存到网站的数据库中：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save and close the plugin file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Open a previously created Book Review to see the updated Book Review Details
    meta box containing a new drop-down list to specify Book Type:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个之前创建的书评，以查看包含一个新下拉列表以指定书籍类型的更新后的书评详细信息元框：
- en: '![](img/8591c232-6446-4dac-8954-c9286a02c172.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8591c232-6446-4dac-8954-c9286a02c172.png)'
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe uses one of the many parameters of the `register_taxonomy` function
    to remove the ability for book review creators and editors to create new book
    types and creates a drop-down list to be able to assign a single book type to
    reviews.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱使用`register_taxonomy`函数的许多参数之一来移除书评创建者和编辑创建新书籍类型的能力，并创建一个下拉列表，以便能够将单个书籍类型分配给书评。
- en: In this process, the recipe makes use of three functions related to storing
    and retrieving taxonomy entries related to posts. The first, `wp_get_post_terms`,
    retrieves an array of terms associated with a post based on its ID and the name
    of the taxonomy. The second, `wp_set_post_terms`, assigns a term to a post based
    on its ID and the taxonomy name. Finally, `get_terms` retrieves an array of all
    the terms in the taxonomy, ordered based on the query string found in the second
    argument.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，食谱使用了与存储和检索与帖子相关的分类条目相关的三个函数。第一个，`wp_get_post_terms`，根据帖子的ID和分类名称检索与帖子相关的一组术语。第二个，`wp_set_post_terms`，根据帖子的ID和分类名称分配一个术语给帖子。最后，`get_terms`检索分类中所有术语的数组，根据查询字符串按第二个参数中的顺序排列。
- en: See also
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding custom categories for custom post types* recipe
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为自定义帖子类型添加自定义分类* 食谱'
- en: Displaying additional columns in the custom post list page
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义帖子列表页面显示额外的列
- en: After customizing the post editor to give content creators a tailored environment
    to create and edit custom post type entries, this recipe turns its efforts toward
    the Book Reviews management page, where all the entries for this type are listed.
    By default, custom post type listings are quite simple and only show the title,
    publication date, and the number of comments for each item. To make it easier
    to identify, sort, and find data in this management page, WordPress offers a number
    of customization capabilities, starting with the ability to change the columns
    that are displayed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在定制帖子编辑器以给内容创作者一个定制的环境来创建和编辑自定义帖子类型条目之后，这个食谱将注意力转向书评管理页面，其中列出了此类型的所有条目。默认情况下，自定义帖子类型列表相当简单，仅显示每个项目的标题、发布日期和评论数量。为了使在此管理页面中识别、排序和查找数据更容易，WordPress提供了一系列定制功能，首先是更改显示列的能力。
- en: This recipe shows how to add and remove columns in the post management page,
    as well as make sorting in new columns possible.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何在帖子管理页面中添加和删除列，以及在新列中进行排序。
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Hiding the category editor from the custom
    post type editor* recipe to have a starting point for this recipe, and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v7.php`)
    from the downloaded code bundle and rename the file to `ch4-book-reviews.php`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*从自定义帖子类型编辑器中隐藏分类编辑器*食谱，以便为这个食谱提供一个起点，并且生成的插件应该仍然在你的开发站点中处于活动状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v7.php`），并将文件重命名为`ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何去做...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch4-book-reviews`文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch4-book-reviews.php`文件。
- en: 'Add the following line of code after the existing functions to register a function
    to be called when the Book Reviews listings page is being prepared:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以注册一个在准备书籍评论列表页面时将被调用的函数：
- en: '[PRE29]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_add_columns`
    function:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch4_br_add_columns`函数的实现：
- en: '[PRE30]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following line of code to assign a function to be called when the columns
    data is being retrieved for each row in the post listing:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以分配一个函数，当检索帖子列表中每行的列数据时将被调用：
- en: '[PRE31]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Insert the following code segment to provide an implementation for the `ch4_br_populate_columns`
    function:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码段以提供`ch4_br_populate_columns`函数的实现：
- en: '[PRE32]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save the plugin file and navigate to the Book Reviews listing page to see that
    the list of columns has been altered and that data stored in the post custom fields
    is now displayed for each item in the list.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存插件文件并导航到书籍评论列表页面，以查看列列表已被更改，并且存储在帖子自定义字段中的数据现在显示在列表中的每个条目上。
- en: 'Back in the code editor, add the following code at the end of the plugin file
    to register a function to be called when WordPress identifies columns that will
    be sortable for the Book Reviews custom post type:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中，添加以下代码到插件文件的末尾，以注册一个在WordPress识别书籍评论自定义帖子类型可排序列时将被调用的函数：
- en: '[PRE33]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Append the following code to provide an implementation for the `ch4_br_author_column_sortable`
    function:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以提供`ch4_br_author_column_sortable`函数的实现：
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following block of code to register a function that will be called
    when data is requested to display post lists:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以注册一个函数，当请求显示帖子列表的数据时将被调用：
- en: '[PRE35]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Insert the following code segment to implement the `ch4_br_column_ordering`
    function:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码段以实现`ch4_br_column_ordering`函数：
- en: '[PRE36]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save and close the plugin file.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Refresh the Book Reviews listing to see that the Author and Rating column headers
    are links that can be clicked to sort these columns:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新书籍评论列表以查看作者和评分列标题是可点击的链接，可以点击以对这些列进行排序：
- en: '![](img/c2bed1d5-cf0b-4069-bf7d-994e74269711.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2bed1d5-cf0b-4069-bf7d-994e74269711.png)'
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Customizing the post listings page requires an intricate mix of action and filter
    hooks to achieve the final goal. The first function we registered is associated
    with the variable filter name `manage_edit-<post_type>_columns`, where `<post_type>`
    is replaced with the internal post type name. When the registered function is
    called, it receives the default column list that will be shown while listing Book
    Reviews entries as an argument. Using this data, it proceeds to add three columns
    for `author`, `rating`, and `type` and removes the `comments` column from the
    array. Once finished, it returns the modified array.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 定制帖子列表页面需要精心混合动作和过滤器钩子以实现最终目标。我们注册的第一个函数与变量过滤器名称`manage_edit-<post_type>_columns`相关联，其中`<post_type>`被替换为内部帖子类型名称。当注册的函数被调用时，它接收将作为参数显示在列出书籍评论条目时的默认列列表。使用这些数据，它继续添加`author`、`rating`和`type`三个列，并从数组中删除`comments`列。一旦完成，它返回修改后的数组。
- en: The second part of the recipe registers the function that will be responsible
    for populating the new columns. Since this function gets called when any custom
    post type column is rendered, the code checks which column is currently requested
    before echoing the requested data to the browser. The function makes calls to
    `get_the_ID()` to get the index of the currently displayed row and to be able
    to find its associated data using `get_post_meta` and `wp_get_post_terms`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的第二部分注册了负责填充新列的函数。由于此函数在渲染任何自定义帖子类型列时被调用，代码在将请求的数据回显到浏览器之前检查当前请求的是哪个列。该函数调用`get_the_ID()`以获取当前显示行的索引，并使用`get_post_meta`和`wp_get_post_terms`找到其关联数据。
- en: At this point in the recipe, the new columns are visible in the Book Reviews
    management page and data is displayed for each of them. The purpose of the rest
    of the recipe is to make the `author` and `rating` columns sortable. This is done
    by first registering a function with the variable filter name `manage_edit-<post_type>_sortable_columns`,
    where `<post_type>` is replaced with the post type name. When the function is
    executed, it adds two items to the array of columns that will be sorted. This
    takes care of making the column header links that can be clicked for sorting,
    associated with the appropriate URLs.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方的这个阶段，新列在书籍评论管理页面中可见，并且每个列都显示数据。本配方剩余部分的目的是将`author`（作者）和`rating`（评分）列设置为可排序。这是通过首先注册一个名为`manage_edit-<post_type>_sortable_columns`的变量函数来完成的，其中`<post_type>`被帖子类型名称替换。当函数执行时，它向将要排序的列数组中添加两个项目。这处理了使列标题链接（可以点击进行排序）与适当的URL相关联。
- en: The last function that is registered is associated with the request filter and
    takes care of adding elements to the query array based on the variables that came
    through in the query URL.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 最后注册的函数与请求过滤器相关联，负责根据查询URL中传入的变量向查询数组添加元素。
- en: The final result allows administrators to easily reorder Book Reviews based
    on these two columns which can be sorted, as well as to see information about
    each entry's type.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果允许管理员根据这两个可排序的列轻松重新排列书籍评论，同时还可以查看每个条目的类型信息。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding custom categories for custom post types* recipe
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为自定义帖子类型添加自定义类别* 的配方'
- en: Adding filters for custom categories to the custom post list page
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义类别筛选器添加到自定义帖子列表页面
- en: A second customization method for the custom post listings is to create a drop-down
    box that will allow administrators to only display items that belong to a single
    category at a time. This can help significantly reduce the number of entries that
    are shown to quickly find the desired entry.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自定义帖子列表的第二个自定义方法是创建一个下拉框，允许管理员一次只显示属于单个类别的项目。这可以显著减少显示的条目数量，从而快速找到所需的条目。
- en: This recipe shows how to add a filter mechanism based on the Book Review type
    to the listings page.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了如何将基于书籍评论类型的筛选机制添加到列表页面。
- en: Getting ready
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying additional columns in the custom
    post list page* recipe to have a starting point for this recipe and the resulting
    plugin should still be active in your development site. Alternatively, you can
    get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v8.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *在自定义帖子列表页面显示额外列* 的配方，以便为本配方提供一个起点，并且生成的插件仍然在您的开发站点中激活。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    4/ch4-book-reviews/ch4-book-reviews-v8.php`），并将文件重命名为`ch4-book-reviews.php`。
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch4-book-reviews`文件夹。
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开`ch4-book-reviews.php`文件。
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is preparing the filter drop-down boxes for the post
    listings:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有函数之后添加以下代码行，以注册一个在WordPress准备帖子列表的筛选下拉框时调用的函数：
- en: '[PRE37]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_book_type_filter_list`
    function:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch4_br_book_type_filter_list`函数的实现：
- en: '[PRE38]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Insert the following line of code to register a function that will be called
    when the post display query is being prepared:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在准备帖子显示查询时调用函数的注册中插入以下代码行：
- en: '[PRE39]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Implement the `ch4_br_perform_book_type_filtering` function with the following
    code segment:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码段实现`ch4_br_perform_book_type_filtering`函数：
- en: '[PRE40]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Save and close the plugin file.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Visit the Book Reviews listings to see the new dropdown to restrict what book
    types are displayed:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问书籍评论列表，查看新的下拉框以限制显示的书籍类型：
- en: '![](img/d297246f-28c6-4c7c-92a1-864c089152ac.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d297246f-28c6-4c7c-92a1-864c089152ac.png)'
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe starts by registering an action callback that will be executed when
    WordPress renders the various filter controls that are available for each post
    type listing. When the function is called, it retrieves a global variable to know
    the post type that is currently being displayed and determine if it should show
    the book type filter list. It also accesses the global post query variable to
    see if a book type filter is already in place and sets the correct drop-down list
    entry to be selected, if there is one.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: The callback then proceeds to use the `wp_dropdown_categories` function to display
    a list of all of the taxonomy items registered for book types. This utility function
    expects to receive an array of parameters that determine which taxonomy list to
    display, the name of the drop-down list field name, and the label to be displayed
    for the option to show all the types. This array should also contain a few parameters
    to determine the order in which the items should be displayed, specify the item
    to set as selected, indicate the maximum depth to show for hierarchical taxonomies,
    and determine whether or not items count and empty items be shown.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Once the new book type selection list is in place, selecting an entry and clicking
    on the Filter button triggers a refresh of the web page and leads to the second
    registered callback that was put in place after being executed. The filter function
    receives the current WordPress post query object and starts by first getting a
    pointer to the query variables that are stored inside of the query object. With
    this in hand, it moves on to verify that a book type is part of the query variables
    and that it is numeric. If the result is positive, it replaces the numeric value
    with the textual name for the selected book type so that the query can take place.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Once all of this code is executed, users are able to quickly filter which book
    types should be displayed in the Book Reviews management page. They are also still
    able to use the column sorting mechanism implemented in the previous recipe.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom categories for custom post types* recipe
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Quick Edit fields for custom categories
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great feature of WordPress is the ability for site editors to quickly make
    changes to any post in the admin section by clicking on the Quick Edit link associated
    with any of the items shown. While our custom post type taxonomy appears in the
    Quick Edit section, it is not a drop-down list of choices as we had in the book
    review editor. Also, the author and rating fields do not appear in any way in
    the Quick Edit section.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add custom fields while quickly editing book reviews.
    As you perform the following steps, you will see that some of the code that we
    put in place is not as cleanly written as code from previous recipes, since the
    WordPress Quick Edit customization infrastructure is not as well-formed as other
    areas of the platform.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding filters for custom categories to
    the custom post list page* recipe to have a starting point for this recipe, and
    the resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v9.php`)
    from the downloaded code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the call to the `register_taxonomy` function within the `ch4_br_create_book_post_type`
    function and add a new member to the configuration array named `show_in_quick_edit`
    with a value set to `false` highlighted in bold:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress is preparing to render the contents of the Quick Edit
    section:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_display_custom_quickedit_link`
    function:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following line of code to register a function to be called when WordPress
    is rendering the footer of the administration pages:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Implement the `ch4_br_quick_edit_js` function with the following code snippet:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the following code to register a function to replace the original Quick
    Edit code that is generated for each post in the book reviews page:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add the following block of code to provide an implementation for the `ch4_br_quick_edit_link`
    function:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following function call to register a function that will be executed
    when post data is updated from the Quick Edit section:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Provide an implementation for the `ch4_br_save_quick_edit_data` function with
    the following block of code:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Save and close the plugin file.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Book Reviews listings page and click on Quick Edit to see the newly
    added Author, Rating, and Type fields.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f64a179a-1272-44dd-bc7e-7f849ada47ca.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
- en: Change the values in these fields and save them using the Update button. You
    will see that the values get updated in the Book Reviews list, accordingly.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the Quick Edit box is a great tool that WordPress users appreciate, customizing
    it is a bit tricky in current versions of WordPress. While we could easily add
    data to each individual item in sections, such as the post editor, for our new
    custom post type, the Quick Edit section requires more work to add custom fields.
    The root of the issue stems from the fact that there is really only a single instance
    of the Quick Edit section that gets rendered as part of the edit page. That section
    is hidden at first, then appears, and moves to the correct position when a user
    clicks on the Quick Edit link. With this in mind, we cannot assign proper values
    to custom fields in the Quick Edit box and, therefore, need to store hidden information
    as each item gets listed to be able to update each field appropriately based on
    which item is being edited.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: The first section of our recipe code starts off by rendering a text input field
    and two drop-down lists within the Quick Edit section. You will notice that we
    do not set the value of the text field or set options to be selected in the select
    lists. Another interesting point with this callback is that it sends us the same
    list of columns that we used in the *Displaying additional columns in the custom
    post list page* recipe. This means that if we wanted to add fields other than
    the ones we have added to the post table, we would still have to place these field
    names in the list of columns and then use some tricks to hide them from the table.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Once these extra fields are in place, we will add the code to the admin page
    footer of the book review editor to create a Javascript function that we will
    call when it is time to update our new custom fields in the Quick Edit section.
    The function receives an array of data, then locates the custom fields in the
    page using the `document.getElementById` function, and updates their values based
    on the incoming data array.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: The next block of code we added creates a new Quick Edit link to replace the
    original one for each book review item. The new link not only enables users to
    display the Quick Edit section, but also embeds values for each item within the
    `onclick` Javascript code along with a call to the function that we added to the
    footer so that a new set of values is assigned to each field when the user decides
    to quickly edit a book review.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we store data from our custom fields when the user clicks on the Update
    button. Interestingly, we do this by registering a second callback for the `save_post`
    action. This means that both of our functions will be called when posts are saved.
    However, this second saving function checks for a number of conditions to be true
    before actually saving values, and the names of the fields that it saves are different
    than the save function we put in place for the post editor.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Updating page title to include custom post data using plugin filters
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A last customization touch that can be put in place to support our Book Reviews
    custom post type is to add custom information about the posts in the title bar
    when displaying them. For example, we could add the author's name next to the
    book title.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use the `document_title_parts` filter to alter the
    post title for Book Reviews.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding Quick Edit fields for custom categories*
    recipe to have a starting point for this recipe, and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v10.php`) from the downloaded
    code bundle and rename the file `ch4-book-reviews.php`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch4-book-reviews` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch4-book-reviews.php` file in a code editor.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    to be called when WordPress prepares the text to be displayed in the browser''s
    title bar:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following code section to provide an implementation for the `ch4_br_format_book_review_title`
    function:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Save and close the plugin file.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit a Book Review page. You will see that the book''s author is now displayed
    after the name in the title:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cc02387-21db-4f4a-84cc-39733dc9dbeb.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `document_title_parts` filter allows plugins to modify or completely replace
    the page title contents. In this case, the code of the function that we associated
    with the filter hook receives the title that WordPress intends to display as an
    array. It then proceeds to check whether the item that is being prepared for display
    is a Book Review and whether or not it is a single item. While the first condition
    is something obvious to check for, the `is_single` verification is done to make
    sure that the code does not try to add a book author to the Book Reviews archive
    listing page.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
