- en: Chapter 7. jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I find **jQuery** to be one of the coolest things in web development. I was
    doing some self study, following the hours of the class I mentioned, at the wonderful
    university town of Leuven, which had an equally wonderful computer book store.
    This is where I discovered jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Every chapter that follows relies/depends on, and uses, jQuery so it is very
    important to know jQuery well from the get go. So, what exactly is jQuery? It
    is a popular JavaScript library, and the overall benefit of using it is that you
    can write cleaner, more compact code.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is a library? Well, it can be a place with a lot of books in it. I,
    myself, like the one of the Plantijn-Moretus Museum in Antwerp, where they all
    printed their books themselves centuries ago. Rubens was the illustrator and house
    portraitist. UNIX and Java folks think of libraries as already compiled code,
    typically containing predefined functions, which are placed in a file of a special
    format and can be loaded with the program itself. JavaScript libraries also can
    contain predefined functions, but, other than that, they just contain readable
    JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Most JavaScript libraries come in two formats, regular or minimized, typically
    called `name.js` and `name.min.js`. Those minimized versions have all spaces,
    new lines, and so on, stripped out to make them smaller, and thus reduce download
    time. To use them, you can simply include them with your program.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: jQuery uses CSS style selectors, which we already know from [Chapter 3](ch03.html
    "Chapter 3. CSS"), *CSS*, to access DOM elements. Besides allowing you to write
    JavaScript code faster and cleaner, jQuery will take care of certain things, such
    as workarounds for browser incompatibilities, so you no longer have to write these
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the jQuery library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can always download jQuery from [jquery.com](http://jquery.com). You may
    want to use the minimized version once you go to production. During development,
    I would stay with the easier to read version so that you can, from time to time,
    add code for debugging purposes, as long as you do not forget to remove it later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Where to place the jQuery library on your page?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Not everyone agrees on what the right thing to do here is. There is always
    a concern about the amount of time it takes to load a file. There is going to
    be a difference if you put the statement in the `<head>` section of your document
    or right before the closing `</body>` tag to load the jQuery library - for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The concern is the time it takes to load the library. I sometimes place everything
    that is a library, in other words, something that delivers functionality without
    actually doing anything, in the head section of the file. This means that the
    functionality will be loaded before the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will always use jQuery in conjunction with your own JavaScript file, for
    example, `mycode.js`. This file will contain your jQuery lines of code inside
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All the code you put there will be executed after your page is loaded. As a
    consequence, this file needs to be placed in your file after all the HTML that
    makes up your page, preferably right before the closing `</body>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: jQuery UI and jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**jQuery UI** and **jQuery Mobile** are two additional libraries of the jQuery
    family. jQuery **User Interface** (**UI**) offers you a number of widgets that
    you can use in the user interface part of your site. My favorite ones are `accordion`
    and `datepicker`. Unlike jQuery itself, which is JavaScript only, jQuery UI also
    comes with a whole bunch of CSS files. This means that as soon as you use one
    of those widgets, they will have their own look and feel.'
  prefs: []
  type: TYPE_NORMAL
- en: Not to worry, jQuery provides a cool tool called **Themeroller**. With this
    tool, you can generate a customized set of CSS files so that the colors and other
    look and feel features of the jQuery UI elements match those of your own stylesheets.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery mobile is another jQuery based CSS/JavaScript extension that offers you
    user interface elements to create **mobile first** sites and applications. You
    can create web pages that will work on phones, tablets, and desktops. We will
    dedicate an entire chapter to mobile first, and then responsive design later in
    this book. For now, take away that jQuery Mobile is a framework that allows you
    to take advantage of the hardware and gadgets of your phone in your web app, such
    as having a datepicker that behaves in the same way you set your alarm on your
    phone, automatically dialing the phone number that is on a web page by clicking
    on it, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to use jQuery Mobile in this book. Instead, we will present
    a different CSS/JavaScript framework called **Foundation**.
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery selectors and methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the things that make jQuery so easy to use is that you can use CSS style
    selectors to look for elements in your page. So rather than having to learn more
    JavaScript methods, you just use what you already know. In real code, this means
    instead of using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`$ ()` is a shorthand notation for `jQuery()`. If you use jQuery together with
    a similar library, such as `Dojo`, check the documentation on how to keep the
    two apart.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The above statement will create a jQuery object, which will contain zero or
    one DOM elements (because there can only be one element with the `id` content).
    The next statement can potentially contain a lot more elements, as many as there
    are with the class `green`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can tell, this is the same as in CSS, `#` for an `id`, `.` for a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can start using methods. What if we wanted to change all elements of
    the class `green` to be of the class `yellow`? For this purpose, we can use the
    `addClass` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you probably want to replace green with yellow, so the class `green`
    has to be removed as well, for which you can use the `removeClass` method. One
    of the great features of jQuery methods is that you can nest them, so we can do
    all of these things in a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will now walk you through a number of very useful methods that you can use
    to change your web page on the fly, or to figure out what is on the page right
    now. Most of these are *getters* as well as *setters*. What this means is that
    you can `get` the value of an element, or, if you specify an argument, this will
    be used to set the value. Here we go.
  prefs: []
  type: TYPE_NORMAL
- en: html()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this method, you can either get or set the HTML contents of an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The second set of instructions will replace the contents of `#content` with
    the preceding HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: text()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar, but different to the previous method, this gets/sets the text inside
    an HTML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: attr()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method lets us manipulate the value of an attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: .val()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method gets or sets the value of an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: show() and hide()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are extremely useful methods to use in dynamic web pages. Very often,
    you want to generate HTML code for a part of the screen, and then display that
    code, and also do the opposite: make part of the screen disappear. The simple
    technique to achieve this is to prepare the content of a `<div>` element, insert
    it into the `<div>` element, and then make it visible. You would do this by having
    the following statement in your custom JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'These methods are also very useful to prevent a phenomenon known as **Flickering
    Of Unprocessed Content** (**FOUC**). What do we mean by this? Remember the discussion
    about where to place your jQuery library and custom JavaScript files inside the
    page? Let''s assume you use a JavaScript plugin that creates a slideshow by manipulating
    an unordered list (`<ul>`) of images (`<img>`). So, your original HTML may look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The jQuery plugin you are using, for instance, the **OWL Carousel** ([owlgraphic.com](http://owlgraphic.com))
    will take this HTML code and turn it into a fancy slideshow. However, if the connection
    is rather slow, you may end up seeing all your images stacked on top of each other
    first, with a silly bullet in front of them, and only seconds later your slideshow
    appears. You can work your way around this by placing the following in your stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in your custom JavaScript file, after the code that builds the slideshow
    animation, you include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will cause nothing to be rendered on that part of the screen until the
    slideshow is ready.
  prefs: []
  type: TYPE_NORMAL
- en: .find()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `.find` method is extremely powerful. You can find almost anything in your
    page and then do things with the result. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will look for and find all `<p>` elements with the class `address` in
    the element with the ID `record`. Once again, you can nest or chain it with other
    methods. The next example looks for an element with the attribute name set to
    `id` and then looks up its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: .parent()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using `.parent()` can be even more powerful. The first example looks up the
    `<tr>` element(s) of the specified `<td>`, and the next example goes up three
    levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: .next()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `.next()` method looks sideways. It returns the sibling of the element
    to the right of the DOM structure, or not, if the optional selector does not have
    a match .`next()` only looks for the very next, so you will need to chain it if
    you want more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: .css()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using jQuery, you can also get or set the CSS values of any given element.
    In the first example, we retrieve the `background-color`; in the second example,
    we set the `color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: jQuery documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete jQuery documentation and description of many more cool methods
    and features can be found at [jquery.com](http://jquery.com).
  prefs: []
  type: TYPE_NORMAL
- en: There are many jQuery books on the market, maybe too many to determine which
    is the one for you; this book is not one of them. We will only walk you through
    all the technologies you need to do web development - jQuery being an important
    one.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to choose your first book on jQuery, I recommend the latest edition
    of *Learning jQuery* by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Event handlers and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations, you have reached a major milestone in the book. This page
    introduces a few new concepts all at once and you are going to use a lot of them
    daily. Let''s assume that you are building a website with a menu. The menu is
    built using an ordered list, and here is the code for one menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In your custom JavaScript file, you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let's first discuss the `.on()` part. This is the jQuery way of performing **event
    handling**. An event occurs when the visitor of your site performs a certain action.
    A typical action is the click of a mouse on a button or a link. We can then catch
    that event and perform certain tasks inside the function that is our event handler.
    In the previous example, we perform them all in a function that we called `updateNewsContent()`.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to repeat that your jQuery code can only access and manipulate
    DOM elements after they have been loaded. So, if you dynamically create HTML after
    your JavaScript has been executed, they will be not manipulated by your JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The way the `.on()` method is used can only help. In the example, we attach
    the `.on()` method to the `#mainmenu` element; in all likelihood a `<div>` that
    is always there from the initial page loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first argument of the `.on()` method is the event itself; in our example,
    the `click` event. The second argument is optional, but I use all the time, and
    it describes the selector that we want to trigger an event. This makes this event
    a so-called **delegated** event. We could have also written it in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This makes it a so-called **direct event**. What is the difference? If an `<a>`
    tag with class news is dynamically added inside the `#mainmenu` div after the
    initial page load and it is clicked on, the delegated event will catch that, whereas
    the direct event will not.
  prefs: []
  type: TYPE_NORMAL
- en: This is a common surprise during the development process, noticing that what
    worked before, suddenly, does not appear to be doing anything. Often the remedy
    is to start a new event handler inside your event handler. We will provide an
    example in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is the function itself. Notice that it can have an argument.
    Inside the function, you can access that event object and apply methods and access
    properties. You will see some examples in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: preventDefault()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sample HTML code contains an anchor tag (`<a>`) with a `href` attribute,
    basically creating a link to a PHP file `intnews.php`. Let's assume that we use
    an ancient browser, or a browser with JavaScript turned off. The user clicking
    on the `<a>` tag would cause the `intnews.php` to be opened.
  prefs: []
  type: TYPE_NORMAL
- en: With JavaScript, we have determined what we want to happen in our event handler
    code, so we do not want the link to occur, we just want to stay on the same page.
    The `preventDefault()` method will, indeed, do what its name suggests. This technique
    is part of what is referred to as **Progressive Enhancement**, which will be discussed
    in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: $(this)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whereas you may find from time to time **this** in sample JavaScript code, in
    jQuery we use `$(this)`. Inside the function, it represents the jQuery object
    of the matching element(s).
  prefs: []
  type: TYPE_NORMAL
- en: updateNewsContent()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We deliberately did not describe what happens inside this sample function. In
    this section of the program, what typically goes on is that data is retrieved
    from the web server using PHP and possibly a database. You have seen just a few
    examples using classical web development techniques, such as specifying a PHP
    file as the action argument in a form, which will force us to go to another page.
  prefs: []
  type: TYPE_NORMAL
- en: We will, however, use jQuery methods that will allow us to execute PHP code
    on the server while remaining on the same page. The underlying technique used
    by these methods is called **AJAX**, and that is the subject of the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started moving away from classical web development for the
    first time. We introduced jQuery, a powerful JavaScript library that allows us
    to write cleaner and more compact JavaScript code. Moreover, it is going to be
    easier for us to do so, as it uses CSS style selectors to specify DOM elements,
    rather than JavaScript methods that we would have to learn.
  prefs: []
  type: TYPE_NORMAL
- en: How to download and where to place the jQuery library was explained. We illustrated
    the remainder of the chapter with examples using jQuery's most useful and powerful
    methods. To conclude the chapter, we introduced the jQuery way of creating event
    handlers, possibly the most important concept to grasp at this stage of the book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to use jQuery, not to traverse the DOM
    and change a little bit of content here and there, but to generate entire chunks
    of our page on the Web server by executing PHP code that is called using jQuery
    methods. Then we can use the data to update parts of our page, without ever leaving
    it. All of this is using a technique called AJAX.
  prefs: []
  type: TYPE_NORMAL
