- en: Building a Twitter Bootstrap WordPress Theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll integrate Bootstrap with WordPress. The look of the template
    that we created earlier was pretty simple. We didn't go for some spectacular design.
    The goal of this project is to get you to see how we can bring Bootstrap and WordPress
    together and use it to build more Bootstrap themes for WordPress in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a Bootstrap theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with the post loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Navbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the search bar and single post page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the comment functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's build a Twitter Bootstrap WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Bootstrap theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our previously created template, we have a standard Bootstrap navbar up,
    and you can see that we have a drop down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cd18acc-58cf-415b-b821-bc859c709021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The way that we got to do the drop-down functionality was by using the `wp-bootstrap-navwalker`
    class at [www.github.com/twittem/wp-bootstrap-navwalker](http://www.github.com/twittem/wp-bootstrap-navwalker)
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21e5ff02-b589-41b3-b52b-917dd9ef6ee9.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the most common and, probably, the easiest way to integrate a Bootstrap
    navbar with the drop-down functionality in WordPress. Let's implement that.
  prefs: []
  type: TYPE_NORMAL
- en: As seen earlier, we have the search box up on our WordPress page. We have some
    custom code in the `header` file that allows us to use the search box and have
    it work correctly, and this will work for posts and pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if I type `lorem` and hit the Search button, it''s going to bring
    back everything that has the word *lorem* in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/938c55af-e4d9-4993-a0cb-e5ad05c7afcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go to the backend, we can see we have some posts that we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb60038c-c8f0-4fae-887f-a7943c796a0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also have the featured image for it on the main page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d47448c-8a44-4b17-8ca9-85ba6a5bcfcb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is the same image we selected in the backend as the featured image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8a025d8-84a2-4810-b823-35fa4b7429eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the title or the Read More button on the Home page, it takes
    us to an inner page with a larger image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f975cf5-7c3e-40dc-b006-6d03f3e3683f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see that we have the comments down at the bottom of the page and the
    Comment form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8b4e6c8-4e7b-4e15-b511-74a4c30e3982.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now on the right-hand side, we have a widget sidebar shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c063ab0-5cfc-4769-8e10-709d877bc866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We actually took some of the core widgets and just tweaked them a little, so
    that we could use the Bootstrap list group. We''ll tweak the following widgets:
    Categories, Recent Posts, and Recent Comments. This will be done to make them
    fit in with the Bootstrap theme.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and get started on our Bootstrap theme for WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `localhost/wpthemes/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What we can see is just a default installation of WordPress without any posts.
    So we're starting from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Sublime Text editor, we have the sidebar where you can see WordPress
    project root directories, and in the `themes` folder, you can see that we have
    the default themes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a048954-3252-4a4c-bfc5-82e004dc604e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now create a new folder in the `themes` folder called `wordstrap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b33cbca-cace-4548-a5a4-7c88bd3a16de.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will create the `style.css` file for it. This file also acts like a
    manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to put in our comments and then add a `Theme Name` called `Wordstrap`.
    We then need to add the `Author` name, `Author URI`, `Description`, and `Version`
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save that and then let's create an `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we go to Appearance | Themes, you can see that we have this wordstrap theme
    now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/002f13ab-2c43-4e7a-ab39-539f1b527381.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will place an image file in the `theme` folder. You can take any image
    from your project files. Very simple, let's go ahead and reload. We have the wordstrap
    theme, which is very simple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s go into `index.php` and put some base HTML tags: `<head>`, `<title>`,
    and `<body>`. We will add `Wordstrap` as the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need Bootstrap. Let''s go ahead and get that. Go to [https://getbootstrap.com/](https://getbootstrap.com/)
    and let''s download it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86e9bcca-5b16-4d3f-9792-d0a1653ace04.png)'
  prefs: []
  type: TYPE_IMG
- en: Open up the downloaded ZIP file and our `theme` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create a `css` folder within the `wordstrap` folder. We'll now bring `bootstrap.css`
    over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll then create a `js` folder and bring over `bootstrap.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s go back into the `index.php` file and include a couple of the `<link>`
    tags. For that, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll go into the `css` folder and `bootstrap.css`. Next, we also want
    to make sure we include the main stylesheet. To do that, Bootstrap gives us a
    function we can use. We''ll add `stylesheet` and then `href`. We can also put
    in some `php` tags, add `bloginfo`, and here we just want to put in `stylesheet_url`.
    It''ll now bring all the system stylesheets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we want to grab a navbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So on the Bootstrap website, let''s go to Components and then navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b095aca0-4240-469c-942f-6bd9437702a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s copy the entire code example as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d72bb8a1-7944-4d08-b22a-a74913f17362.png)'
  prefs: []
  type: TYPE_IMG
- en: We will paste that in the `body` section of our `index.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save it, and let's go ahead and activate the theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s go to the frontend and reload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a3af90d-410b-4186-92fd-0e7ad7887e07.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason that it looks like this is because it's not seeing the `bootstrap.css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the source code. You can see that the frontend is looking inside
    `/css/bootstrap`, but this file is actually in the `themes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65e4e6f6-1ebd-4c5d-8ac8-54ba2a4116d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to fix this, we will go back to `index.php`. Let''s go to the `<link>`
    tag and update the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll save that, go back, and see that it''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52a3a092-f253-4055-94ec-d54449fe6b7e.png)'
  prefs: []
  type: TYPE_IMG
- en: To change the navbar a little bit, we will indent the `<nav>` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now dump the code quite a bit. First, we will get rid of `fluid`; we
    want it to just be `container`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We'll get rid of the comments we don't need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we have the `navbar-header` class. This button is for responsiveness.
    So when it''s on a mobile or just a smaller screen in general, we''ll have a button
    we can click on that will then show the menu, so we''ll leave all that stuff:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the brand, let''s change the code a little bit. We want it to reflect whatever
    we have as the site name in WordPress. We will add `<?php bloginfo(); ?>` and
    then pass in `name`. For `href`, we will add the `<?php bloginfo(); ?>` link and
    put in `url`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We then have the `<ul>` tag where we'll implement the `wp-nav-walker` class.
    For that we will just get rid of this whole `<ul>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we have our form that is the search form. It's going to be pretty much
    completely redone, so we will take out everything that's in the `<form>` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll then take out the whole `<ul>` with the `nav navbar-nav navbar-right`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the entire `nav`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll hold off just for now with that, let''s see what that looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c3dcca6-a6b9-4bd8-8734-4262fec3fd06.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see it's very basic. We just have our branding, we'll implement the
    `walker-nav` or the `nav-walker` class later; but let's just continue with some
    of the base HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a `<div>` tag right below the ending `</nav>` tag and give it
    a class of `container`, and also add `index`. We will also add a row since we''ll
    use Bootstrap''s grid system. Inside the `row` class, we will add a column using
    `col-md-8`, so that will be an 8-column div, and we''ll also have a 4-column div,
    which will be the sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So inside the 8-column div, we will add a panel by using `class="panel"` and
    `panel-default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then add `panel-heading`, and in `panel-heading` we''ll have an `<h3>`
    tag. We''ll give it a class of `panel-title`, and we''ll give it the title `Blog
    Posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now under the heading `</div>` we will add the `panel-body` div. For that,
    we want the `div class` called `panel-body`. We will then add the post loop, using
    `if(have_posts())`, and the shorthand syntax shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we''ll add the `while` loop as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will add two columns, one for the image and another for all the data.
    So let''s add a class called `row` and then we will add a `div class` whose value
    will be `col-md-3`. We will next add `IMAGE HERE` and then add nine columns by
    using `col-md-9`. We will then add in `the_title()` by using `<h2>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0381bda0-60ed-4169-88d3-26c4c00e8ccf.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have our 3-column div where the image will go and then our
    nine-column with the content. We'll get back to adding all the content but let's
    continue and add the sidebar code first.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is going to be the widget area and for that, we''ll need to do create
    a `functions.php` file first. We''ll need to register the widgets we want which
    will be just the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index.php` file right under the `div class`, we''ll add `<?php`. We''ll
    then see if there''s actually a widget active here using `if(is_active_sidebar)`
    and if we need the actual widget position (which will be `sidebar`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add `<?php dynamic_sidebar(); ?>`. We also need the position,
    which is `sidebar`. It doesn''t have to be called sidebar; you can call it whatever
    you''d like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now let's save that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s quickly add the footer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right under the `container` div, we will create another container. We will
    put a horizontal rule in this container and the `<footer>` tags. Inside `<footer>`
    we''ll have a paragraph and copyright:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we also want to include two things: we want jQuery and the Bootstrap JavaScript
    files. We''ll place JavaScript files right under the ending `</div>` as shown
    in the following code. We''ll paste in the jQuery script, which is just going
    to be the **CDN** (**Content Delivery Network**), and also `bootstrap.js`. We
    will also use `<?php bloginfo(''template_directory''); ?>` just like we did with
    the `css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that and reload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/adbd5be4-9135-4089-9654-19361f67059a.png)'
  prefs: []
  type: TYPE_IMG
- en: Header and footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s split this up into a header and a footer file in addition to `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `index.php` file, we'll grab the code from the top down to the end
    of `</nav>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a new file called `header.php`. We will paste the code that we
    grabbed earlier and into this header file and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In its place inside `index.php`, we''ll open up a set of `php` tags using `get_header()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Our page will look the exact same.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll then do the same thing with `footer`. We''ll grab the code from this
    `container` down to the very bottom, from `<div class="container">` till closing
    `</html>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Create a `footer` file, paste the grabbed content, and save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `index.php` we will add `get_footer()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: OK, now that should look the exact same. That cleans things up a little bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The post loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So until now we went ahead and set up our core template, core theme, with an
    `index`, a `header`, and a `footer` file. We have also implemented the main post
    loop, but we don't have anything else. We just have the title; we need to fix
    that.
  prefs: []
  type: TYPE_NORMAL
- en: But before we do that, we need to make it so that we can actually add images
    to our posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because right now if we go and we try to add a new post, we don''t
    have a Featured Image area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/478442ae-169b-4de2-a603-d5f5d0661160.png)'
  prefs: []
  type: TYPE_IMG
- en: The Featured Image area
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the Featured Image area to show we need to create a `functions.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file and call it `functions.php`. Then let''s create a
    function `theme_setup()`. Now, let''s add a comment `Featured Image Support` and
    also add `add_theme_support()` with the value `post-thumbnails`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Underneath the function declaration, we will place `add_action()` and then
    pass in the hook that we want, which is going to be `after_setup_theme`. Then
    we will place the function that we want to use, which is `theme_setup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that and reload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/417cbe3a-4f6e-4146-a263-b2b4fdc3f4f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can see that we have a Featured Image area.
  prefs: []
  type: TYPE_NORMAL
- en: Creating categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So let''s create a couple of categories first before we add a post. Let''s
    add `Technology`, `Food`, `Entertainment`, and `Business` as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91b00ad1-be89-44b3-93e3-e1dd9d40fbe3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will only select Technology for now and add the title as `Blog Post One`.
    We will copy some text from the Lorem Ipsum site as before and paste that in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab9863f0-7b63-417d-8266-2d5021435481.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to select a featured image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19686de8-2be6-4f14-85e9-d074b7dad75c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can choose any image. In this case, I have selected an image of the Microsoft
    Surface. Click on Set Featured Image and then Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c2211c1-5c31-4dfc-b16b-57da3604d1e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back and reload the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20ad4d38-9323-47db-8ae0-de3a505e8596.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the post but it doesn't look too good. So let's add one more.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we will add `Blog Post Two`, paste some text in, let's choose Food
    for a category, and then upload an image. We'll choose the burger image and click
    on Publish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have a couple of posts to work with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bdf8e9a-4568-4932-89e0-c6a05fb357af.png)'
  prefs: []
  type: TYPE_IMG
- en: We have an issue here because we're putting the image in its own column inside
    the post, and some posts aren't going to have images. For instance, the Hello
    world post does not have an image. So we need to have some kind of a conditional
    statement, where we'll say if this post has an image, then format it in a certain
    way, and then we'll place an else statement; if it doesn't have an image, we'll
    format it differently.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting the post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go into our `index.php` file. You can see that we have our loop and
    a row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Right after the `row` div is where we''ll check to see if there is an image
    using `if(has_post_thumbnail())` and down where the `</div>` ends we''ll add `<?php
    else : ?>` and `<?php endif; ?>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a thumbnail, then it''s going to show a three-column and a nine-column,
    but if there is no thumbnail, then we want it to be a full twelve-column. For
    that we will use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll start with posts that have the thumbnail. We will get rid of the text
    `Image Here`. We will then create `div` with a class of `post-thumbnail` and then
    we can use `the_post_thumbnail()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at that so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d23dd11-e150-4243-96a6-5ecd9916a930.png)'
  prefs: []
  type: TYPE_IMG
- en: So it's showing the images, they're insanely big but that's alright, the functionality
    is there.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping the post in an article tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s wrap the post in an `<article>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right inside the `while` loop, we''ll add `<article>`, give it a class of `post`,
    and end that just after we end `</div>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, open the `style.css` file and add `article.post img`. We'll set `width`
    to `100%`. It's going to be 100% of its container. We'll also set `height` to
    `auto` and let's use `margin-top:30px`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we reload the page, we get this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b654d785-7df4-4744-a33f-62b28218a08a.png)'
  prefs: []
  type: TYPE_IMG
- en: This looks much better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to the `index.php` file. We want the title to be a link.
    Let''s go right to the `<h2>` tag and let''s put in an `<a>` tag using `echo the_permalink()`.
    And that should be a link to that post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now under the `<h2>` tag, we will place the metadata. We will add it in a paragraph
    and give it a class of `meta`. We will then add `Posted at` and get the time by
    using `the_time()` function. We will use `on` and then we''ll add `the_date()`.
    We will open up some `<strong>` tags and add the author''s name using `the_author()`,
    which should be a function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make sure that''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f8745b6-2e4c-4239-85da-2e2de8aa2417.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see it's telling us the time, the date, and also the author. Also, this
    is a link, so if I click on it, it takes us to that page or that post.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to the post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now what we want is the excerpt or the content, but not all of it. We'll use
    an `excerpt` class instead of `content` because that'll truncate the content.
    Let's go!
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to still be in the nine-column div, so we''ll go under the paragraph
    tag and add `<div class="excerpt">`. We will then add `<?php echo get_the_excerpt();
    ?>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see if that works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97e99ba0-6267-403f-810f-d6a1644198b2.png)'
  prefs: []
  type: TYPE_IMG
- en: That looks good!
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Read More button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will also require a Read More button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go right under the excerpt class, and use bootstrap class''s `btn` and
    then `btn-default`. We will then use `href` and set that to `the_permalink()`.
    For the text, we''ll say `Read More` and for the arrow symbol we can use `&raquo;`.
    We will also add a line break above the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload and let''s take a look at that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1a8b8db7-014b-461a-b01b-6d62ccaabe6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Dealing with post without an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So now what we want to do is take care of the posts that don''t have an image.
    Right now the Hello World post doesn''t have one and it''s not showing up because
    we haven''t put any code in that yet. So let''s check for the thumbnails now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This `div` is where the code for the post without an image will go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can have posts without images and not have just an empty space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/772c32bd-cfaa-4121-8ce2-0d34dbfec57f.png)'
  prefs: []
  type: TYPE_IMG
- en: If we didn't use the conditional statement, then this would just have an empty
    space where the image was supposed to go.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a bit of style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will add a little bit of CSS to make the post look a little better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `style.css` and use the `article.post` with a border at the bottom
    of each post. The border will be gray, `solid` and `1px`. Also, let''s add some
    padding using `padding-bottom: 20px` and `margin-bottom: 30px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the last article or post. We don''t want to have a border for it.
    We will add `article.post` and use `last-child` to target that last one and we''ll
    set `border-bottom` to `none`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: For the metadata, we will add a little bit of style using `article.post .meta`
    and give it a light gray background. We will also add a little padding, `8px`
    and `12px`. Let's add a color; we'll use dark gray.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s save that and reload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65987f49-4bb3-45e5-b25e-2146973b7534.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that looks a little better.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to get the navbar set up with the `custom-walker`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Navbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now see how to implement a Bootstrap navbar with a WordPress theme using
    `wp-bootstrap-navwalker`. This is a really popular script that will integrate
    your navbar so that you can create sub-items and things like that.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to [www.github.com/twittem/wp-bootstrap-navwalker](http://www.github.com/twittem/wp-bootstrap-navwalker),
    and we''ll just go ahead and download the ZIP file. Open the ZIP file, and you''ll
    see a folder with the PHP file inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bf2e484-7394-4d68-b5b9-40dd57b787ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's open up our project folder. We will copy the PHP file into our folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `functions.php` file and we want to include the `wp_bootstrap_navwalker.php`
    file as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we have `require_once()` with `wp_bootstrap_navwalker.php`. Save
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the GitHub page where we''ll now deal with the usage. We want to
    use the `wp_nav_menu()` function inside of our navbar. For that, let''s copy the
    highlighted part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/716a5070-bf55-48f0-8e69-0771d0fcceed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go into our `header` file where our navbar is, go down into the `div` where
    we have the `collapse` class, and we will paste the code as shown in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This basically defines a bunch of options for us. We don''t need all of them.
    We will get rid of a few things. Here is the updated code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We have the `theme_location`, which is `primary`, and `depth` is `2`. We have
    set `container` to `false`. Get rid of the quotes, `container_class` or a `container_id`.
    Now save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go back to `functions.php`. Let''s register our nav menus now by adding
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Inside this `theme_setup`, we have `register_nav_menus()` and that's going to
    take in an array, which will be called `primary`. We'll then set that to `__()`
    and then the readable name will be `Primary Menu`. We'll save that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back into the backend and go down to Appearance. You will see the
    Menus option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4d97cfc-f156-490a-bdb7-e78783596343.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now create an extra page called `About` and click on Publish. Let''s create
    one more and we''ll call this `Our Team`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/012783f4-0f32-4780-b287-367b1c343076.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the Menus page and let''s take a look at this menu. Let''s go ahead
    and click on Create Menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01a093b0-7d8d-4547-a6a1-5865db76a384.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ensure that you check the Primary Menu option and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92eff182-cc44-4668-b57c-87b07e8cb833.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to our frontend and reload. You will now see we have our menu and it works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd9ff600-715d-4462-8650-78a5d610d2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s test out the drop-down functionality. All we need to do is select
    Sample Page and Our Team, and place them right under About as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43f16e25-9394-4fd8-b013-06b3618c6fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the menu, go back, and now we have a drop down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/109fef77-9a56-4c1e-a502-93f38a985101.png)'
  prefs: []
  type: TYPE_IMG
- en: So you can see how easy that was to implement a navbar, and this is definitely
    something that you could use in other projects as well, any Bootstrap WordPress
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now get the sidebar set up so that we can add sidebar widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `functions.php` file underneath the `add_action()`, we will create a
    function called `init_widgets()` and that's going to take in an `id`. We will
    add `register_sidebar()` and that's going to take in an `array`. And then we have
    a bunch of options, so let's add `'name' => 'Sidebar'` and `'id' => 'sidebar'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also include other things here; for instance, we can add `''before_widget''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now what this does is it allows us to insert code right before the widget renders.
    We'll need this because we want our widgets to render inside Bootstrap panels,
    so we need to include the panel classes. We can see we have a `div` with a class
    of `panel`, and also `panel-default`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s then add `''after_widget''` and that''s just going to be two ending
    div tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We now also have the ability to add content before and after the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this, we''ll use `''before_title''` and this is going to have a div
    with the class of `panel-heading`. We also want the `<h3>` tag, and we''ll give
    that a class of `panel-title`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll add `''after_title''` with ending `</h3>` and `</div>`, and
    then we also want the start of the `panel-body` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add an action, so we''ll place `add_action()`. The hook will
    be `widgets_init` with the function `init_widgets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it. If we now go to the backend and reload the page, you should now have
    a Widgets option under Appearance, and you should also see Sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c17ea1b1-b648-40e0-853b-18fa08af1286.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s bring over Categories, and hit Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86748060-c583-4b11-a738-8b08bc1a6acd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see if those render:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a64d13db-97e5-4885-ae7e-d64f14ac824a.png)'
  prefs: []
  type: TYPE_IMG
- en: So now we have our categories and you can see that now we have the panel around
    it as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also bring over Recent Posts, change Number of posts to show to `3`,
    and bring over Recent Comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45d55438-64e4-4948-92d7-57bc1c01e23d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at our page now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02c88d4f-0e11-4acb-8d0f-8b6856b1ea49.png)'
  prefs: []
  type: TYPE_IMG
- en: And there they are! Now we have an issue because I want the categories to show
    up as list groups, which are formatted better than this. They take away the bullets,
    add some padding, and add some borders. So what we'll need to do is create our
    own version of these widgets inside our `theme` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `theme` folder, we''ll create another folder called `widgets`. We''ll
    go to this folder through the file manager. Now go to `wp-includes` | `widgets`.
    You''ll see all of the core widget files here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/728d20e1-216e-4c99-a015-63554285730e.png)'
  prefs: []
  type: TYPE_IMG
- en: We want to grab the categories, the recent comments, and the recent posts. We'll
    copy (make sure you don't cut, but copy them) and paste them into our `widgets`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s start with the categories one. Let''s open that up through Sublime
    Text. Here we will change the classname: put an `_` and then `Custom`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will change the class names for the `<ul>` and `<li>` tags. We will
    add the Bootstrap classes. For this, we will add `class="list-group"` to the `<ul>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now we also want the list items to have the class of `list-group-item` but the
    way that this is set up, we can't access the list item tags from within. So we
    need to do a little bit of customization in the `functions.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So let''s open the `function.php` file, go to the very bottom, and add a comment
    first: `Adds ''list-group-item'' to categories li`, just so we know what it does.
    Then we add the function `add_new_class_list_categories()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We will then pass in a variable by adding `$list = str_replace()`, and we'll
    add `cat-item`, which is the original class name, but we want to change that.
    Now we still want it to have the `cat-item` class because it needs that, but we
    also want to add on the `list-group-item class`. Then we just need to return the
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now instead of adding an action, we will add `add_filter()`. Basically, an
    action is used when you want to add something, a filter is when you want to change
    something. So let''s use `add_filter(''wp_list_categories'')` and then we place
    the name of our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re not out of the woods yet with these widgets; we have to register them.
    So before we do that, we need to include them at the top or use `require`. So
    we will add `require_once()`. It''s going to be the `widgets` folder, and then
    we just need to include each widget. We''ll use `class-wp-widget-categories.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We might as well include all of them. So we will get the recent posts and recent
    comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to register.
  prefs: []
  type: TYPE_NORMAL
- en: 'Down at the bottom, we''ll add `function wordstrap_register_widgets()`. We
    need the classname as well, so we add `''WP_Widget_Recent_Posts_Custom''`. Next
    one will be `''WP_Widget_Recent_Comments_Custom''`. The last one will be to add
    `''WP_Widget_Categories_Custom''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we add another `add_action()`, and this is going to be again on `''widgets_init''`,
    and then we just need the name of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that and reload the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4395db0c-136f-454a-b8ad-0c7ed0cf2ece.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get an error: Cannot declare class Recent_Posts. So let''s verify our code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'So these should have `_Custom` as well. Now reload the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cf9cbf5-dbf0-4970-9c8d-562044de5358.png)'
  prefs: []
  type: TYPE_IMG
- en: So we have all of our widgets registered and categories now has the `list-item`
    class, so that looks good. We also want to add these classes to recent posts and
    recent comments as well, so that instead of the bullet points we have it look
    like how categories look.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s go to our `class-wp-widget-recent-posts.php` widget file, and we
    want to go to the `<ul>` tag. We will just add a class of `list-group` and then
    the `<li>` tag will have a class of `list-group-item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Let's reload the page; that looks good!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4797efb3-c356-4127-a0e4-196d36cbe966.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go to `class-wp-widget-recent-comments.php`. We will add a class
    to `<ul>` of `list-group` and then for the `<li>` tag, we''ll add a class of `list-group-item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Save, reload, and there we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be572406-3346-4e6a-9b39-ee5c8a4e3e75.png)'
  prefs: []
  type: TYPE_IMG
- en: So now we have some custom widgets. You could make widgets look totally different
    if you want to, and it would only affect these widgets when your theme is loaded
    so that you're not editing any core WordPress code. We have our navbar set up
    as well as our sidebar widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a search bar and single post page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with the search box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to our `header` file and go to the empty form down at the bottom of the file,
    and we will add some stuff to it. The first thing we'll do is adding a method
    and the method is going to be `get`. We can actually change the class from left
    to right. We also need to add an action. For that, we will use the `php` tags
    and add `echo esc_url()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because we want the URL checked and escaped. We will use `home_url`
    with a `/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we're just submitting to the home URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now as for the fields, we''ll just want one field for Search, but let''s add
    a label. So we will add `<label for ="navbar-search"` and give it a class of `sr-only`.
    Next let''s add `<?php _e(''Search'')`, and this is just for localization of `_e`.
    And then we need a second parameter of `textdomain`. Let''s then close up those
    the `php` tags and under the `</label>` tag, let''s add `<div class="form-group">`.
    In the div class we''ll have an input. We''ll give it a type of `text` and give
    it a `class` of `form-control`, which is just a Bootstrap class. Let''s add a
    name called `s` for search, and let''s give it an `id` of `navbar-search`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need a submit. So we''ll add a button with a type of `submit` and give
    it a class of `btn` and `btn-default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Let's save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s do a search for `lorem`, and it gives us these results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa71a4cc-3749-4a13-9c10-d3ab5a7fbb4e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also try searching for the word `one` or `two`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a search bar and the last thing that we need to do is the single
    post.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with the single post page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a file in our theme root and save the file as `single.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now while creating this file, if we go and click on one of these blog posts,
    it'll be completely blank because it's automatically looking at the `single.php`
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now copy everything that we have in the `index.php` file and paste it
    into the `single.php` file. Save it and reload the page; it looks exactly the
    same way as the index page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8a5f7a9-d668-443b-85e6-48024934a160.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go in and change some of that. First, let's remove `if(has_post_thumbnail())`.
    Now go down to where it says else and cut out from there up to the actual `if`
    statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also get rid of `endif` because of the way we'll be formatting it irrespective
    of the image being present or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We want the image, though, so we''ll put it. Let''s put it right under the
    ending `</h2>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re putting in the thumbnail or the featured image, if there is one. Let''s
    save that and see what that looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69c0f546-8783-4837-93b7-2645100cdd87.png)'
  prefs: []
  type: TYPE_IMG
- en: So we have our big image now, let's put a line break `<br>` underneath it as
    well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: We don't want Read More but we want the full content not the excerpt.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s get rid of Read More, and instead of `get_the_excerpt()` let''s use
    `the_content()`. We will also get rid of `echo`. Let''s also change the class
    to `content`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it and reload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/348365c2-b027-4bfd-98b4-8deba661547d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it renders the HTML as well. So that's the single page.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will deal with the comment functionality as well.
  prefs: []
  type: TYPE_NORMAL
- en: The comment functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last thing we need to do is add some comment functionality to our single
    post page:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go into `single.php` and go down. What we want to do is still within the
    panel body so that ends where it is shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a comment template and add `comments_template()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We'll save that and create a new file. We'll save it as `comments.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That needs to be in your `theme` folder, and then if we go ahead and type something
    in here, we'll say `TEST`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we save and reload, and you can see we''re getting TEST:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee8065ff-e1c8-4eab-9a11-03ce9797978a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's create a div with a class of `comments` and add `<?php if(have_comments);
    ?>`.
  prefs: []
  type: TYPE_NORMAL
- en: We also add heading `<h3>` with class of `comments_title`. We will add `if(get_comments_number()
    == 1)`. We are doing this because if there's only one comment then we should get
    comment singular, if there's more than one then it should say comments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So we''re checking to see if there''s one comment, if there is then we''ll
    `echo get_comments_number()` and then just concatenate the word `Comment`. Then
    we''ll put an `else` and just add an `Comments` to the end here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: So that'll be the heading.
  prefs: []
  type: TYPE_NORMAL
- en: Then under the `</h3>` tag, we'll have a `<ul>` tag, give it a class of `row`
    and `comment-list`. We will add `wp_list_comments()` and that's going to get passed
    in an array. We will also use avatars so let's add `avatar_size` and set that
    to `90`. We then have a `callback`, which we have to create as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For that, we will add `add_theme_comments` and this is going to go inside the
    `functions.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a few big blocks of code that we need to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is going to check if comments are closed, and if they are
    then we can leave a little note.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go under this `div` and we''ll put a horizontal rule. We then need
    to create our comment arguments and then create the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We have a variable called `comment_args` and that's set to an array with a bunch
    of different values. You can have your submit button label, the title reply, notes,
    and things like that. Then down in the code file, we're also calling the `comment_form()`
    function and passing in those arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save it and reload. Now if we go and try to check it out now you can see that
    we have a form here. Let''s try to add something:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39956557-2d7d-4bcb-8a54-c5d9f3670773.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Send:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1477f37e-1f5f-4e6e-9dfd-56e9f99b920d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now what''s going on here is it''s looking for the callback that we specified.
    It is up at `add_theme_comments` as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: It is looking for callback but not finding it. So let's go into `functions.php`
    and we'll fix that.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go ahead and paste the code as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: So we have a function called `add_theme_comments()` and that should match your
    callback. Then we pass in `comment`, `args`, and `depth`. As you can see we have
    added some tags and classes below so that we can style this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll post some other stuff in as well. For that lets add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: You can get the code from the WordPress documentation ([https://codex.wordpress.org/Function_Reference/wp_list_comments](https://codex.wordpress.org/Function_Reference/wp_list_comments)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4705bc74-6489-44ad-9b83-d8afe93cc547.png)'
  prefs: []
  type: TYPE_IMG
- en: So this code will give you correct functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and save the code and see what happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '>![](img/6d49514a-0ddd-4d5b-9aa9-b3b13fd34848.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s open up `style.css` and the class called `comment-item`. So in the
    code we add `.comment-item` and set `overflow` to `auto`. We will also add `comment-list`,
    and set `list-style` to `none` and `margin` to `0`. We then mark that as important
    and set `padding` to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: That looks pretty good. We can reply and leave comments, and that's really awesome.
    So that's it, we are done. We now have a WordPress theme with Bootstrap, and you
    could use this as a base theme to create other Bootstrap themes. You can use the
    `navbar-walker`, which is really helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Awesome!! In this chapter we saw how to build a Twitter Bootstrap WordPress
    theme. We dealt with widgets such as Categories, Recent Posts, and Recent Comments
    to make them fit in with the Bootstrap theme.
  prefs: []
  type: TYPE_NORMAL
- en: We also worked on the posts loop and included the metadata for it. We saw how
    to get the navbar set up as well as our sidebar widgets. We also added a Search
    box and built the single pages. We also dealt with comment functionality – the
    comments section and form. I hope you enjoyed this chapter.
  prefs: []
  type: TYPE_NORMAL
