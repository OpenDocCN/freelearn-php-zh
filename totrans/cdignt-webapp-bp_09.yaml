- en: Chapter 9. Creating a Job Board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some quite complex job boards out there and some that are woefully
    designed. There are some that I can think of that simply don't work as you would
    think they should and some that don't function properly at all. I'm sure they
    all have a heap of VC funding and probably turn some sort of profit, so it is
    beyond me why they don't manage to get it together and make something that actually
    works; the thing is that it's not actually that difficult a thing to do.
  prefs: []
  type: TYPE_NORMAL
- en: The job board in this project is small and concise, but there is scope to expand
    upon—if you skip ahead to the *Summary* section, you'll see some things you can
    add to make it more feature-rich, but I'm sure you have your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So what are we going to do for this project anyway? We'll create an application
    that allows users to create job adverts that will be displayed on a "board". Users
    can search for specific terms and some results will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Other users can create adverts that will be displayed in these boards.
  prefs: []
  type: TYPE_NORMAL
- en: To create this app, we will create one controller; this will handle the display
    of jobs, creation of new jobs, and applying for jobs.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a language file to store text, allowing you to have multiple language
    support should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and a model to interface with the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app along with all the others in this book relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should take a look at what we plan to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, a brief description of our intent: we plan to build an app that will
    allow people to browse job adverts in the form of a job board.'
  prefs: []
  type: TYPE_NORMAL
- en: People will be able to create job adverts that will appear on search listings.
    Others will be allowed to apply for these advertised jobs, and applications are
    sent in an e-mail to the advertiser with details of the job and applicant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So that was the site map; the first thing to notice is how simple the site
    is. There are only three main areas to this project. Let''s go over each item
    and get a brief idea of what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jobs/Search**: Imagine this as the start point. The user is presented with
    a list of active jobs available on the site. The user is able to view the job
    details and apply (taking them to point **2** of the site map), or click on **Create**
    on the navigation bar and go to point **3** (the Create item) of the site map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detail/Apply**: The user is presented with the details of the job advertised,
    such as the start date, location and the job description, and advertiser''s contact
    details. There is also a form below the job details that allows a user to apply
    for the job. Details of the application are sent in an e-mail to the job advertiser
    (`jobs.job_advertiser_email`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: This will display a form to the user, allowing them to create a
    job advert. Once that advert is created, it will be displayed in search listings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: Job/Search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **1** (the Create
    item) in the site map. Initially, the user is shown a list of current jobs. The
    job title and description are shown. The description is kept at a set length—that
    of the first 50 words of a job description. They are able to click on the job
    title or an **Apply** link to go to point **2** (the Detail/Apply item) of the
    site map.
  prefs: []
  type: TYPE_NORMAL
- en: '![Job/Search](img/7093OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Detail/Apply
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **2** (the Detail/Apply
    item) in the site map. The user views the detailed description of the job advertised
    and a form that enables the user to enter their details and send off an application
    for the job—the details of this application are e-mailed to the job advertiser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Detail/Apply](img/7093OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **3** (the Create
    item) of the site map. Any user can post a job advert. This displays a form to
    the user, allowing them to enter the details of their job advert and save it to
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Create](img/7093OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a relatively small project, and all-in-all, we''re only going to create
    seven files; these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/jobs_model.php`: This provides read/write
    access to the `jobs` database table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/apply.php`: This provides us an
    interface that allows the user to view a job advert''s details and also a form
    that allows any user to apply for a job.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/create.php`: This displays a form
    to the user, allowing the user to create a job advert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/view.php`: This is the view for
    the `jobs` controller''s `index()` function. It displays the search form and lists
    any results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/jobs.php`: This contains three
    main functions: `index()`, `apply()` and `create()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding seven files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*; if not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't—the
    code can easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll build the database. Copy the following MySQL code to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, take a look at that last bit of SQL code, it's quite big and fiddly. Don't
    panic, all SQL code is available online from this book's support page on the Packt
    website.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that the first table we create is `ci_sessions`. We need this to
    allow CodeIgniter to manage sessions, specifically, logged-in users. However,
    this is just the standard session table available from *CodeIgniter User Guide*,
    so I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, let''s take a look at each item in each table, and see what it means.
    First, we will take a look at the `categories` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: categories |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_name` | This stores the name of the category. |'
  prefs: []
  type: TYPE_TB
- en: 'Next up, we will see the `types` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: types |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `type_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `type_name` | This stores the name of the type. |'
  prefs: []
  type: TYPE_TB
- en: 'Now, let''s see the `locations` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: locations |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `loc_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `loc_name` | This stores the name of the location. |'
  prefs: []
  type: TYPE_TB
- en: 'Finally, we will see the `jobs` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: jobs |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `job_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_title` | This is the title of the position advertised. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_desc` | This is the general job specification for the position advertised.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_id` | This is foreign key from the `categories` table, indicating the
    category of the position—IT, Management, Manufacturing, Health Care, and so on
    |'
  prefs: []
  type: TYPE_TB
- en: '| `type_id` | This is the foreign key from the `types` table, indicating the
    type of the position—full time, part time, contract, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `loc_id` | This is the foreign key from the `locations` table, indicating
    the location that the position is to be based in. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_start_date` | This is the starting date of the position advertised.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `job_rate` | This is the money offered (remuneration)—salary, day rate, and
    so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_advertiser_name` | This is the name of the person advertising the position
    so that the applicant knows who to contact to chase their application. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_advertiser_email` | This is the contact e-mail of the person who is
    advertising the position. It is to this e-mail address that an application is
    sent. The application is sent when a user fills in and submits the form in `views/jobs/apply.php`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `job_advertiser_phone` | This is the phone number of the person advertising
    the position. This is included if the applicant wishes to call the job advertiser.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `job_sunset_date` | This is the date at which the job will no longer be displayed
    in searches. This is required as jobs will not be advertised forever and applying
    a date that limits the time jobs can be applied for prevents people from applying
    for jobs that have either been filled or no longer exist. |'
  prefs: []
  type: TYPE_TB
- en: '| `job_created_at` | This is the MySQL timestamp that''s applied when a new
    record is added to the database. |'
  prefs: []
  type: TYPE_TB
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation; so, enter your username,
    password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few things in this file that we'll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the following
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key; both sessions and CodeIgniter''s encryption
    functionality require an encryption key to be set in the `$config` array, so find
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now obviously, don't actually change this value to literally a-random-string-of-alphanum-characters
    but change it to, er, a random string of alphanum characters instead—if that makes
    sense? Yeah, you know what I mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change them to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to redirect the user to the `jobs` controller rather than the default
    CodeIgniter `welcome` controller. To do this, we will need to amend the default
    controller setting in the `routes.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this—instead, we want the default controller to be `jobs`. So, find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one model in this project—`jobs_model.php`— that contains functions
    that are specific to searching and writing job adverts to the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is our one and only model for this project, so let's create the model and
    discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/jobs_model.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There are six main functions in this model, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_jobs()`: This serves two functions: firstly, displaying all jobs—for example,
    when a user first visits the site—and secondly, when a user enters a search term,
    the query is then changed to look for the specific search term in `job_title`
    and `job_desc`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_job()`: This fetches the details of a specific job advert for point **2**
    (the Details/Apply item) of the site map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_job()`: This saves a job advert to the database when a user submits the
    form from point **3** (the Create item) of the site map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_categories()`: This fetches categories from the `categories` table. It
    is used to populate the categories dropdown for the create process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_types()`: This fetches types from the `types` table. It is used to populate
    the types dropdown for the create process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_locations()`: This fetches locations from the `locations` table. It is
    used to populate the locations dropdown for the create process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Taking the `get_jobs()` function first, as mentioned, this function has two
    purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: To return all results, that is, to list all jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To return results (jobs) that match a user's search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user visits the site, they are routed to `jobs/index`. This will cause
    the `get_jobs()` model function to search the database. On this initial visit,
    the `$search_string` variable will be empty (as the user isn't searching for anything).
    This will cause the first part of the `if` statement to be run, basically returning
    every valid job.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the user is searching for something, then the `$search_string` variable
    will not be empty; it will contain the search term the user entered in the `views/jobs/view.php`
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will cause the second part of the `if` statement to run, adding `$search_term`
    to the database query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Both queries will only return results whose sunset date has not passed. The
    `jobboarddb.job_sunset_date` field contains a date on which the job advert will
    stop being displayed in search terms.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at the `get_job()` function. This function is passed the `$job_id`
    value from the `jobs` controller. The `jobs` controller gets the ID of the job
    advert from `$this->uri->segment(3)` when the user clicks on the **Apply** link
    in `views/jobs/view.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The `get_job()` function simply returns all the data for point **2** (the Details/Apply
    item) of the site map.
  prefs: []
  type: TYPE_NORMAL
- en: It joins the `categories`, `types`, and `locations` tables to the `jobs` table
    in order to ensure that the correct category, type, and location is displayed
    in the `views/jobs/apply.php` view along with the specific job advert details.
  prefs: []
  type: TYPE_NORMAL
- en: We then move down to the `save_job()` function. This accepts an array of data
    from the `jobs` controller. The `jobs` controller's `create()` function sends
    the `$save_data` array to the `save_job()` model function. The `$save_data` array
    contains the input from the form in the `views/jobs/create.php` view file.
  prefs: []
  type: TYPE_NORMAL
- en: On a successful save, the primary key of the insert is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will cover the three functions—`_categories()`, `get_types()` and `get_locations()`—at
    the same time (as they do pretty similar things). These three functions fetch
    all categories, types, and locations from their respective tables. These functions
    are called by the `jobs` controller's `create()` function to ensure that the dropdowns
    are populated with the correct data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four views in this project, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/view.php`: This displays a list
    of current jobs to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/create.php`: This view allows
    the job advertiser to enter the job advert details. The form submits to the `jobs`
    controller''s `create()` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/jobs/apply.php`: This displays a form
    to the user allowing them to enter information to apply for the job. It also displays
    validation errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this is very simple as it contains a project
    name and link to go to the `jobs` controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are our four view files. Now, let's go over each one, build the code,
    and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/jobs/view.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This view serves two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: To display a simple search form at the top of the page. This is where a user
    can search for jobs that match a search term.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To display a list of jobs in an HTML table. These are the current active jobs
    in the database. A job is considered active if the job's sunset date (`jobs.job_sunset_date`)
    has not passed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The search form is submitted to the `jobs` controller's `index()` function—this
    controller function will pass the search term to the `get_jobs($search_term)`
    function of `Jobs_model`. It will be added to the database query; this query will
    look in `jobs.job_title` and `jobs.job_desc` for text that matches the term.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/jobs/create.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The type dropdown is populated by the `get_types()` function in `Jobs_model`.
    It returns a result object that we loop over, allowing the user to select the
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The category dropdown is populated by the `get_categories()` function in `Jobs_model`.
    It returns a result object that we loop over, allowing the user to select the
    category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The location dropdown is populated by the `get_locations()` function in `Jobs_model`.
    It returns a result object that we loop over, allowing the user to select the
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Any error messages related to the validation process—such as a missing form
    field that's required—are also displayed in this view file next to the form field,
    triggering an error. To do this, we use the `form_error()` CodeIgniter validation
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/jobs/apply.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the top of the view file, specifically, the code in the `foreach($query->result()
    as $row)` loop that displays the details of the job. It is arranged as an HTML
    table, clearly separating the main points of the job advert, such as the start
    date, job location, and contact details. The only thing that's not in the table
    is the job description.
  prefs: []
  type: TYPE_NORMAL
- en: Below the `foreach()` loop is an HTML form that allows the user to enter their
    contact details and a small cover note explaining their interest in the role.
    The form is submitted when the user clicks on **Go**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a hidden field element called `job_id`, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This hidden field that's populated with the ID of the job advert ensures that
    when the form is submitted, the `jobs/apply()` function can query the database
    with the correct ID and fetch the correct e-mail address (`jobs.job_advertiser_email`)
    associated with the job, and using PHP's `mail()` function, it will send an e-mail
    to the job advertiser with the applicants details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This view is quite basic but still serves an important role. It displays an
    option to return to the `jobs` controller's `index()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/jobs.php`.
  prefs: []
  type: TYPE_NORMAL
- en: There is only one controller in this project, so let's go over it now. We will
    look at the code and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main functions in this controller, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: This displays the initial list of job adverts to the user. It also
    displays the search box and displays any results that might be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create()`: This displays a form to the any user, allowing the users create
    a job advert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apply()`: This is accessed if the user clicks on the **Apply** button or the
    job title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/jobs.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Looking at `index()` first, you'll see that one of the first things this function
    does is call the `get_jobs()` function of `Jobs_model`, passing to it the search
    string. If no search string was entered by the user in the search box, then this
    post array item will be empty, but that's okay because we test for it in the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of this query is stored in `$page_data[''query'']`, which is ready
    to be passed to the `views/jobs/view.php` file, where a `foreach()` loop will
    display each job advert:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the validation rules for `search_string`. If this is the first time
    the page is viewed or if the validation fails, then `$this->form_validation()`
    will return a false value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To display a list of jobs to the user, we call the `get_jobs()` function of
    `Jobs_model`, passing to it any search string entered by the user and storing
    the database result object in the `$page_data` array''s item query. We pass the
    `$page_data` array to the `views/jobs/view.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create()` function is a little more meaty; initially, we set out the form
    validation rules—nothing really interesting to see there—but just after, we call
    three model functions: `get_categories()`, `get_types()`, and `get_locations()`,
    the results of which are stored in their own `$save_data` array items, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We'll loop over these results in the `view/jobs/create.php` file and populate
    the HTML select dropdowns.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, after this, we check whether the form has been submitted and if so,
    whether it's submitted with errors. We build the form elements, specifying each
    element's settings and sending them in the `$page_data` array to the `views/jobs/create.php`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: If there were no errors after the form was submitted, we package up all the
    post inputs and send them to the `save_job()` function of `Jobs_model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the save operation worked, we''ll set a success message flash data, indicating
    to the user that their job has been saved so that they know it will now appear
    in searches. However, if it hasn''t, we''ll return an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, the data has passed validation and is stored in the `$save_data`
    array in preparation for saving it to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$save_data` array is then sent to the `save_job()` function of `Jobs_model`,
    which will use `set_flashdata()` to generate a confirmation message if the save
    operation was successful or an error message if it failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we arrive at the `apply()` function. This is a little simpler. Like
    `create()`, we start off by defining our form item validation rules, and then
    we check whether the form is being posted (submitted) or not. We do this because
    the job ID can be passed to it in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first way is using `$this->uri->segment(3)`. The ID is passed to the `apply()`
    function via the third `uri` segment if a user clicks on the **Apply** link or
    the job title in the `views/jobs/view.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way is `$this->input->post(''job_id'')`. The ID is passed to the
    `apply()` function via the post array if the form has been submitted. There is
    a hidden form element in the `views/jobs/view.php` file named `job_id`, the value
    of which is populated with the actual ID of the job being viewed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The ID is stored in the `$page_data` array''s `job_id` item and passed to the
    `get_job()` function of `Jobs_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We then test to see whether anything is returned. We use the `num_rows()` CodeIgniter
    function to see whether there are any rows in the returned database object. If
    there aren't, then we just set a flash message saying that the job is no longer
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'It might be that in the time between the user clicking on the **Apply** link
    and the time when they actually submit their application, the job advert has become
    unavailable; that is, its `job_sunset_date` has passed, or someone might have
    manually typed a random ID and it just so happens that that ID doesn''t exist.
    Anyway, whatever the reason, if no results are returned, a flash message is shown
    to the user. If, however, it is been found, we pull out the data from the database
    and store it as local variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We then move on to the form validation process. If this is the initial page
    view or if there were errors with the submit, then `$this->form_validation->run()`
    will have retuned `FALSE`; if so, then we build our form items, defining their
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If there was no error with the submit, then we will build an e-mail to be sent
    to the advertiser of the job; this e-mail will be sent to the e-mail address contained
    in `jobs.job_advertiser_email`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We substitute the variables in the e-mail using the `str_replace();` PHP function,
    replacing the variables with the details pulled from the database or form submit,
    such as the applicant''s contact details and cover note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If the e-mail is sent successfully, we send a flash message to the applicant,
    informing them that their application has been sent as shown in the following
    code; this isn''t the same as a validation error. Validation errors have been
    handled earlier and we wouldn''t be this far into the processing of the form if
    validating had not been passed. Really, what we''re saying is if the e-mail had
    not been sent correctly—perhaps `mail()` failed for some reason—the application
    would not have been sent. This is what we are indicating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, here are a couple of examples that will help put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: User creates a job advert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how the process of creating a job advert exactly works:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and is presented with a list of jobs, a search box,
    and a navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user wishes to create a new job so they click on the **Create** link contained
    in the `views/nav/top_nav.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `jobs` controller's `create()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` function displays the form in the `views/jobs/create.php` view
    file. There are three HTML dropdown form elements that allow the user to choose
    a job type, category, and location. These dropdowns are populated by the `get_types()`,
    `get_categories()` and `get_locations()` functions of `Jobs_model`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user fills in the form and clicks on **Go** to submit the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is submitted to the `jobs` controller's `create()` function; it is
    validated and passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `jobs` controller's `create()` function sends the validated form input to
    the `save_job()` function of `Jobs_model` where it is saved to the `jobs` database
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User looks at a job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will see how does a user looks at a job:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and is presented with a list of jobs, a search box,
    and a navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user clicks on the job title of the first job in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `jobs` controller's `apply()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `apply()` function looks at the third segment in the URI (this is the `job_id`
    value passed in the URL of the job title in the previous step) and passes this
    to the `get_job()` function in `Jobs_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_job()` function pulls the details of the job from the database and
    returns a database result object to the `jobs` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `jobs` controller sends the database result object to the `views/jobs/apply.php`
    view file where a `foreach()` loop runs over the object, echoing out the details
    of the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User searches for a job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The flow of steps followed when a user searches for a job is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and is presented with a list of jobs, a search box,
    and a navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user types the word `CodeIgniter` into the search box and hits the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CodeIgniter framework then calls the `jobs` controller's `index()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `index()` function calls the `get_jobs` function of `Jobs_model` and passes
    to it the `search_string` post item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `get_jobs()` function of `Jobs_model` recognizes that there is a search
    string as input and runs the correct database query, looking at `jobs.job_title`
    and `jobs.job_desc` to see whether a string of text matches the user's search
    string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A job advert is found to match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result object is returned to the `views/jobs/view.php` file, where a `foreach()`
    loop runs over the result object, displaying the summary details of the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is free to click on the **Apply** link to study the details further
    or apply for the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User applies for a job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a user wants to apply for a job, the following steps are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and is presented with a list of jobs, a search box
    and navigating bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user clicks on the job title of the first job in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `jobs` controller's `apply()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `apply()` function looks at the third segment in the URI (this is the `job_id`
    value passed in the URL of the job title in the previous step) and passes this
    to the `get_job()` function in `Jobs_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_job()` function pulls the details of the job from the database and
    returns a database result object to the `jobs` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `jobs` controller sends the database result object to the `views/jobs/apply.php`
    view file where a `foreach()` loop runs over the object, echoing out the details
    of the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters their details in the form below the job description and clicks
    on **Go**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is submitted to the `jobs` controller's `apply()` function where it
    is validated; once passed, the `jobs` controller queries the `get_job()` function
    of `Jobs_model` to find the `jobs.job_advertiser_email` and `jobs.job_advertiser_name`
    values in order to e-mail the application to the advertiser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, here we have a basic job board application; it is capable of allowing people
    to create jobs, displaying those jobs, searching for jobs, and it also allows
    people to apply for these jobs. However, there are still areas of improvement
    and scope to add greater functionality; perhaps you could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add e-mail confirmation for the applicant. You could add a functionality to
    the `jobs/apply()` function to send a confirmation e-mail to the applicant when
    they apply for a job.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limit the number of applications. You could add a functionality to limit the
    number of job applications per job; logic would be needed to calculate which came
    first: the sunset date or the application limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You could paginate the results. Currently, all active jobs are displayed in
    the `jobs/index()` function. You might wish to add pagination to this, limiting
    the number of jobs per page to a set number—25 per page, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have detailed search options. You could add a more complex search, perhaps
    a dropdown specifying locations or job types, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can delete old job adverts. You could create a small Cron script, deleting
    jobs that are beyond their sunset date (`jobs.job_sunset_date`). This would reduce
    the database to a more reasonable size and ensure that only jobs that are active
    are kept there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So there we are, then—we're at the end! What have we learned… erm, well, you
    should have a whole bunch of projects to be ready to work with—best of all, they're
    all really simple, so you can easily expand upon them and build more features
    and functions as you require; at the very least, you should have a *base* platform
    on which you can build any number of applications.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to check out the CodeIgniter website ([http://www.codeigniter.com/](http://www.codeigniter.com/))
    for regular updates and new releases. Don't forget that the code in this book
    is available online from the Packt website, so you don't have to painfully copy
    from page to screen, and the SQL for each project is there too.
  prefs: []
  type: TYPE_NORMAL
- en: Right—that's it, the end!
  prefs: []
  type: TYPE_NORMAL
