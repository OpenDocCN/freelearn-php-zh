- en: Appendix B. Blueprint – Creating an Events Calendar Add-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many add-ons that developers have to create end up combining dashboard interfaces
    and custom block types to not only provide great editing capabilities on the backend
    of the site, but also unique and powerful interfaces on the frontend of the website.
    A common request on websites is the ability to have an events calendar. This blueprint
    here is going to combine much of the knowledge that we gained in the prior chapters
    to create an events calendar add-on. The add-on will have a CRUD interface on
    the dashboard as well as a custom block type to display the events.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we should note that the blueprint in this chapter is based
    on a fresh installation of concrete5, with all of the sample content loaded. This
    will give us some nice pages and a clean design to work with.
  prefs: []
  type: TYPE_NORMAL
- en: The complete working code for this add-on is available for free from the book's
    website. Feel free to download that as a starting point or to solve any problems
    you may run into.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get moving. First, we will create the package's directory. Add a new directory
    in `/packages` called `cookbook_events`. Inside this directory, create the package's
    controller file.
  prefs: []
  type: TYPE_NORMAL
- en: The package controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be familiar with package controllers already; they tell concrete5 about
    the package, as well as provide functionality for developers to perform advanced
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in `controller.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice the use of the `defined or die` statement at the top of the file. This
    is required at the top of every PHP file in the package, otherwise concrete5 will
    reject your add-on if you submit it to the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note the use of the `t()` function around the package name and description
    strings. This will allow translators to offer translations of these strings in
    an easy and consistent way.
  prefs: []
  type: TYPE_NORMAL
- en: We are setting the minimum concrete5 Version to 5.6.0\. as we are using some
    CSS styles that don't fully work on older versions of concrete5\. With a little
    extra work, however, we could support older versions.
  prefs: []
  type: TYPE_NORMAL
- en: The package database XML file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our package will need to create a database table to store the event data. Rather
    than executing raw SQL, the preferred methodology is to create a `db.xml` file
    that contains all of the tables and fields to be created. concrete5 will read
    this file when the package is installed and will perform the necessary database
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `db.xml` file at `/packages/cookbook_events/db.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following XML code in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save this file. This tells concrete5 to create a table named `CookbookEvents`,
    with fields for a title, date, location, description, and some meta data. The
    use of `db.xml` also makes future database upgrades easier when your add-on is
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: You may recall that this XML file makes use of the ADOdb XML schema format,
    or **AXMLS**. You can learn more about AXMLS and the different field types at
    [http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema](http://phplens.com/lens/adodb/docs-datadict.htm#xmlschema).
  prefs: []
  type: TYPE_NORMAL
- en: The model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know what our database table looks like, let's create the model
    that we will use to interact with the table.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file at `/packages/cookbook_events/models/cookbook_event.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `model` class and specify the name of the database table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we named the class `CookbookEvent` rather than just `Event`. This
    is to prevent collisions with other classes. Since `Event` is a fairly common
    name for a class, it is possible that there could be a conflict. It's always a
    good idea to make your class names as unique as possible, while still following
    convention and being easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: We also added a function to return a formatted version of the event's date.
    This will come in handy later.
  prefs: []
  type: TYPE_NORMAL
- en: Single page controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for our add-on to have interfaces on the dashboard, we will need to
    create a few single pages with controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file in `/packages/cookbook_events/controllers/dashboard/cookbook_events.php`.
    This is the root controller file for the add-on. Give it a basic class file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `on_start` function will make sure that if anyone visits this page, they
    will be redirected to the default view showing the events listing. Let's create
    the controller for that view now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a new directory at `/packages/cookbook_events/controllers/dashboard/cookbook_events/`.
    Add two files to this directory: `add.php` and `list.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `list.php`, add the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now in `add.php`, add another class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Looking good! Our single pages have basic controllers now, but they still need
    view files.
  prefs: []
  type: TYPE_NORMAL
- en: Single page views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the root view file for our interface at `/packages/cookbook_events/single_pages/cookbook_events.php`.
    Leave this file empty. Create a directory at `/packages/cookbook_events/single_pages/cookbook_events`.
    Add the two files, `add.php` and `list.php`, to this directory. We can leave these
    blank for now.
  prefs: []
  type: TYPE_NORMAL
- en: The event list block type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can install our package, we need to make sure that the block type
    exists as well. This will allow us to automatically install the block type during
    the package's installation.
  prefs: []
  type: TYPE_NORMAL
- en: This block type that we are creating will show a list of the events that have
    been entered into the database. It will act as a basic agenda view for the site's
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory at `/packages/cookbook_events/blocks`. Now, create another
    directory in there called `cookbook_events`.
  prefs: []
  type: TYPE_NORMAL
- en: The first file that we will want to add to our block is the controller. Create
    `controller.php` in the block's directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in `controller.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we remembered to include the required `defined or die` statement
    at the top of the file. We'll continue prefixing our class names with `Cookbook`
    to allow our classes to avoid conflicting with existing classes.
  prefs: []
  type: TYPE_NORMAL
- en: We also defined the name of the database table that this block type will use.
    Let's create that table now using the database XML format.
  prefs: []
  type: TYPE_NORMAL
- en: The block's database XML file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new file in the block directory named `db.xml`. Enter the following
    code in the XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This XML code will tell concrete5 to create a new table with two fields: a
    unique ID to identify the block, and a field to store how many events we want
    to display.'
  prefs: []
  type: TYPE_NORMAL
- en: The block view files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you recall from earlier chapters, blocks have three views that can be activated:
    add, edit, and view. Create `add.php`, `edit.php`, and `view.php` to represent
    each of these views. In our block, `add.php` and `edit.php` will show the same
    HTML, so we will create a fourth file for these views to share named `form.php`.
    Also, add a `view.css` file that will be used to apply styles to the frontend
    of the block.'
  prefs: []
  type: TYPE_NORMAL
- en: Leave these files empty for now, as we are ready to install our block!
  prefs: []
  type: TYPE_NORMAL
- en: Installing the package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the package controller (located at `/packages/cookbook_events/controller.php`)
    in your code editor. Add a new method to the controller class named `install`.
    It should look like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What's going on here? Well, if you recall, we created three single pages with
    controllers to be used for the dashboard interface. These pages will need to be
    added to the site map, so we hook into the package's installation routine to make
    sure that they get installed when the package is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we also install the block type. This will ensure that our block is available
    to use on the frontend of the website.
  prefs: []
  type: TYPE_NORMAL
- en: When concrete5 installs the package, it will run our package's `db.xml` file,
    creating the database tables defined in there. This will allow our package to
    remain completely portable, and it can be installed in any concrete5 website.
  prefs: []
  type: TYPE_NORMAL
- en: Let's install the package now.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the package to the dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visit the package installation page on your concrete5 site, located at `/dashboard/extend/install/`.
    You should see the events package awaiting installation, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the package to the dashboard](img/4548OS_AppB_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Install** button on the package. If all goes well, the package
    will be installed! We should have some new pages on the dashboard, so visit `/dashboard/cookbook_events`.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice what happened? When we visit the `/dashboard/cookbook_events`
    page, it redirects us to `/dashboard/cookbook_events/list/`. This is intentional.
    The way that the dashboard is organized requires add-ons to have a parent page.
    That will allow our **Event List** and **Add Event** single pages to appear in
    the dashboard menu correctly.
  prefs: []
  type: TYPE_NORMAL
- en: This list page is still completely empty. Let's add some HTML to it and fill
    it out.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the list single page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we will add some logic to the list page's controller file. Open `/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`
    in your code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a view method to the controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Remember that `view()` is one of the automatic callback functions that gets
    executed when the single page is viewed. Here, we are loading the `model` class
    that we created and are using it to find all instances of the events in the database.
    We then send the array of event objects to the view, using `$this->set()`.
  prefs: []
  type: TYPE_NORMAL
- en: We also added a function to delete events from the system, using the `model`
    class and active record.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the list view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's open up the view and add some HTML to it. Open `/packages/cookbook_events/single_pages/dashboard/cookbook_events/list.php`
    in your editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following HTML code to the view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's a lot here, but it's actually not too complex. First, we make sure to
    include the `defined or die` statement at the top of the file. Next, we output
    the header of the dashboard pane. This includes the controls to navigate around
    our add-on, as well as add the page to the main dashboard menu.
  prefs: []
  type: TYPE_NORMAL
- en: A little further down, we check to see if there's anything in the `$events`
    array. If there are, we can show the list of events in an HTML table. If there
    aren't, we will show a message to the user that there are no events in the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create an HTML table to hold the events. The table has five columns:
    the event ID, the event date, the title, location, and a column for some actions
    to be performed on the event.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we begin looping through the events array, we will output one table row
    for each event in the system. Each column in the event row will output the corresponding
    field on the event. Notice the use of the date getter function to output a nicely
    formatted date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last column contains the buttons to edit and delete an event. We added
    an additional CSS class of `.delete` to the **Delete** button that will allow
    us to use JavaScript to display a confirmation message. Let''s save this file
    and refresh the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/4548OS_AppB_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking good, except we don't have any events in our system yet. Let's create
    the form to add events.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the add form single page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `/packages/cookbook_events/controllers/dashboard/cookbook_events/add.php`
    in your code editor. Let''s add a few functions to this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First, we added a function to provide editing capabilities to this form. Essentially,
    if an ID is provided in the URL, we will use the event model to load the corresponding
    event and send it to the view as an array. We use an array because if the array
    is empty, the view will not produce errors as it would with an object.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the function to actually save the new event. We use the Validation
    helper to verify that the required fields have been filled out. After that, we
    begin populating the event object to be saved to the database. One important thing
    to notice here is that we check for the presence of an event ID in the `POST`
    data. This is to allow us to edit an existing event, rather than create a duplicate
    one. We also use this area to set the metadata for the event, such as the ID of
    the user that added it, and the timestamp of when it was created.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we save the event object to the database and redirect the user back
    to the event list, displaying a success message.
  prefs: []
  type: TYPE_NORMAL
- en: The form view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of course, we still need to write the other half of this single page, the view.
    Let''s open `/packages/cookbook_events/single_pages/dashboard/cookbook_events/add.php`
    and add the following HTML and PHP code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Whoa, that's a lot of code! Don't worry, it's not as complex as it looks. At
    the top of the file, we of course add our `defined or die` statement, and then
    load two helpers, the Form helper and the Date field helper.
  prefs: []
  type: TYPE_NORMAL
- en: As our event's description field can contain HTML formatting, we will need to
    use a WYSIWYG editor. That editor needs some special JavaScript on the page before
    it can load, so we output that right away using the `editor_init` and `editor_config`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we begin our output by displaying any errors that occurred in the save
    procedure (for example, if the title field was left empty). After that, we use
    concrete5's Dashboard helper to output the header of the page, including the native
    page controls.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will define the form, setting the action of the form to use the
    `save` function in this page's controller and setting the HTTP method to `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the form, we use a table to give our form a simple layout. We output
    fields for title, location, date, and description. At the bottom of the page,
    we display some buttons to save the data or to cancel and return to the events
    listing. Let's take a look at this form in our browser now!
  prefs: []
  type: TYPE_NORMAL
- en: '![The form view file](img/4548OS_AppB_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That looks great! Let's add a bunch of events to the site now, using this form.
  prefs: []
  type: TYPE_NORMAL
- en: Adding events to the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fill out the **Add Event** form that comes up with a couple of events to add
    to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding events to the database](img/4548OS_AppB_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have a few events entered, your list view should look something like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding events to the database](img/4548OS_AppB_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Looking great! Let's click on the **Delete** button on one of these events.
    It works, but users don't have any chance to cancel that action if they change
    their mind. We should use JavaScript to ask users if they are sure they want to
    delete the event.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a delete confirmation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a new JavaScript file to `/packages/cookbook_events/js/list.js`.
    Add some JavaScript (using the jQuery library) to listen to the clicks on the
    **Delete** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to make sure this script is included on our list page. Open up
    the controller for the list page located at `/packages/cookbook_events/controllers/dashboard/cookbook_events/list.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new function to include the JavaScript file on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This function will use the HTML helper to automatically add the `<script>` tag
    to the page's `<head>` area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you try to delete an event, you should see a confirmation dialog, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a delete confirmation](img/4548OS_AppB_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Perfect! We can consider the backend of the add-on to be complete! All that
    is left to do is displaying events on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the custom block type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you recall, we created some boilerplate files for our block type, but it
    doesn't actually do anything. We will want to create a block that shows a list
    of the events entered into the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add the HTML form to `form.php` that will be displayed whenever
    site editors add or edit the block on the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Let''s include this file in both `add.php` and `edit.php`. Add the following
    to each of those files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright! All we have to do now is create the frontend view of the block. Open
    `view.php` in your code editor and enter the following HTML and PHP code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: That looks great! Here we are essentially looping through the `$events` array
    and displaying a row for each event. We again make use of the `getDate()` function
    on the event model to output a clean and friendly date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s add some simple CSS styles to `view.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Nice! Now we are ready to see it in action!
  prefs: []
  type: TYPE_NORMAL
- en: Adding the block to a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new page on the site to hold the events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the block to a page](img/4548OS_AppB_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new block to this page. Scroll down to the bottom of the blocks list
    to see the block that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the block to a page](img/4548OS_AppB_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fill out the form to add the block to the page. Set a limit for the amount of
    events to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the block to a page](img/4548OS_AppB_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now publish the changes on the page. You should see a handsome list of events!
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the block to a page](img/4548OS_AppB_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow, we accomplished a lot! We started with absolutely nothing and built a fully
    functioning events calendar add-on. This add-on could be expanded to show alternate
    templates for the events, or to include advanced functionality such as hiding
    events that have already occurred, or giving each event its own page in the site
    map.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully this exercise has helped you get ideas on how to create packages for
    any need or situation.
  prefs: []
  type: TYPE_NORMAL
