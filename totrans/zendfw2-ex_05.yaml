- en: Chapter 5. Chat and E-mail
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：聊天和电子邮件
- en: '*In any web application development, there will be very high dependency on
    client-side scripts primarily including JavaScript and CSS. The MVC model of Zend
    Framework provides basic support of controlling the output that is sent across
    to the browser. The view helper classes in Zend Framework 2 offer maximum control
    over the content that gets rendered in the client browser.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在任何 Web 应用程序开发中，都将非常依赖客户端脚本，主要包括 JavaScript 和 CSS。Zend Framework 的 MVC 模型提供了对发送到浏览器输出的基本支持。Zend
    Framework 2 中的视图辅助工具类提供了对在客户端浏览器中渲染的内容的最大控制。*'
- en: 'In this chapter we will focus on building a simple group chat and e-mail component
    which will make use of various frontend capabilities of Zend Framework 2.0\. Some
    of the important topics covered in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于构建一个简单的群聊和电子邮件组件，该组件将利用 Zend Framework 2.0 的各种前端功能。本章涵盖的一些重要主题包括：
- en: Using external JavaScript libraries in the Zend Framework 2 application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Zend Framework 2 应用程序中使用外部 JavaScript 库
- en: Implementing a simple group chat application using Zend Framework 2 and JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend Framework 2 和 JavaScript 实现一个简单的群聊应用程序
- en: Using Zend\Mail to send e-mails
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend\Mail 发送电子邮件
- en: Introduction to the Zend Framework event manager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Framework 事件管理器简介
- en: Layouts and views
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局和视图
- en: Zend Framework MVC uses layouts and views to render pages in the web browser;
    the overall page content is controlled by the layout specification, and the view
    level information is contained in the views. The concept is to minimize the amount
    of redundant HTML code that needs to be generated for each of these views.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework MVC 使用布局和视图在浏览器中渲染页面；整体页面内容由布局规范控制，视图级别的信息包含在视图中。其概念是尽量减少为每个视图生成冗余
    HTML 代码的数量。
- en: By using layouts, the application can have a consistent user interface, which
    is also easy to customize; the views offer the flexibility to modify the targeted
    content and allow customization to the maximum possible extent. This is also known
    as *two-step* view.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用布局，应用程序可以拥有一致的用户界面，这也便于定制；视图提供了修改目标内容的灵活性，并允许最大程度地定制。这也被称为 *两步* 视图。
- en: When a new view is generated, the appropriate layout is identified from the
    layout definitions in the `view_manager` configuration and the view is rendered
    with that layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成新的视图时，从 `view_manager` 配置中的布局定义中识别适当的布局，并使用该布局渲染视图。
- en: '![Layouts and views](img/1929OS_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![布局和视图](img/1929OS_05_01.jpg)'
- en: The preceding schematic explains how the layout and view are combined to form
    an HTML page, so for each and every view, the view part changes and the layout
    part remains static.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示意图解释了布局和视图是如何组合成 HTML 页面的，因此对于每个视图，视图部分会变化，而布局部分保持静态。
- en: View helpers
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图辅助工具
- en: Zend Framework 2 offers a wide range of view helpers that help us perform complex
    operations on views; if the included helpers are not sufficient, you can define
    your own custom helper by implementing the interface `Zend\View\HelperInterface`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 2 提供了一系列视图辅助工具，帮助我们执行视图上的复杂操作；如果包含的辅助工具不足，你可以通过实现接口 `Zend\View\HelperInterface`
    来定义自己的自定义辅助工具。
- en: In this section, we will quickly review some of the included helpers in Zend
    Framework 2.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速回顾一些包含在 Zend Framework 2 中的辅助工具。
- en: The URL helper
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URL 辅助工具
- en: The syntax for this helper is `url($name, $urlParams, $routeOptions = array(),
    $reuseMatchedParams = array())`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助工具的语法是 `url($name, $urlParams, $routeOptions = array(), $reuseMatchedParams
    = array())`。
- en: 'The URL helper is used to generate the URL for a specific route. The route''s
    segment match parameters can be passed over the URL helper to form a URL based
    on the route option; for example, see the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: URL 辅助工具用于生成特定路由的 URL。可以将路由段匹配参数传递给 URL 辅助工具，根据路由选项形成 URL；例如，参见以下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code will generate `<a href="/users/upload-manager/edit/10">Edit</a>`
    if the route definition is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路由定义如下，此代码将生成 `<a href="/users/upload-manager/edit/10">编辑</a>`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The BasePath helper
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BasePath 辅助工具
- en: The syntax for this helper is `basePath()`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助工具的语法是 `basePath()`。
- en: The `BasePath` helper returns the base URL of the view, this can be used by
    developers to prepend to their custom URLs and form links for various resources.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`BasePath` 辅助工具返回视图的基本 URL，开发者可以使用它来在其自定义 URL 前面添加，并为各种资源创建链接。'
- en: The JSON helper
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 辅助工具
- en: The syntax for this helper is `json($jsonData = array())`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助工具的语法是 `json($jsonData = array())`。
- en: The JSON helper is used to render PHP arrays as JSON-encoded data. Most AJAX
    libraries classify JSON content by its content header, and this helper also sets
    the content type header to `application/json`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 辅助函数用于将 PHP 数组渲染为 JSON 编码的数据。大多数 AJAX 库根据其内容头部分类 JSON 内容，此辅助函数也将内容类型头设置为
    `application/json`。
- en: Concrete placeholder implementations
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具体的占位符实现
- en: Zend Framework makes use of placeholder helpers to perform some standard operations
    on the HTML `head` sections including adding/removing references to new JavaScript
    libraries, linking with new styles, adding and cross referencing scripts, and
    adding/removing HTML `head` section's `meta` content.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Zend 框架利用占位符辅助函数在 HTML `head` 部分执行一些标准操作，包括添加/删除对新 JavaScript 库的引用、链接新样式、添加和交叉引用脚本，以及添加/删除
    HTML `head` 部分的 `meta` 内容。
- en: This is achieved by the following list of helpers called as **concrete placeholder
    helpers**. The reason why they are called placeholder helpers is because the helpers
    themselves don't make any changes to the way in which the content is rendered.
    For example, if you add `<?php echo $this->headLink(); ?>` to the HTML code, this
    won't do anything, until you add something to the `headLink` helper by using `appendStylesheet`
    or some other function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过以下称为**具体占位符辅助函数**的辅助函数列表实现的。之所以称它们为占位符辅助函数，是因为辅助函数本身不会对内容的渲染方式做出任何改变。例如，如果你在
    HTML 代码中添加 `<?php echo $this->headLink(); ?>`，这不会做任何事情，直到你通过使用 `appendStylesheet`
    或其他函数向 `headLink` 辅助函数添加内容。
- en: The HeadLink helper
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HeadLink 辅助函数
- en: The `HeadLink` helper is used to modify the `<link>` tag in the HTML `head`
    section; this helper is used to attach or manage external CSSs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeadLink` 辅助函数用于修改 HTML `head` 部分的 `<link>` 标签；此辅助函数用于附加或管理外部 CSS。'
- en: 'Some of the most-used functions in this helper are listed as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在此辅助函数中最常用的函数如下列出：
- en: '`appendStylesheet($href, $media, $conditionalStylesheet, $extras)`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendStylesheet($href, $media, $conditionalStylesheet, $extras)`'
- en: '`offsetSetStylesheet``($index, $href, $media, $conditionalStylesheet, $extras)`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetStylesheet``($index, $href, $media, $conditionalStylesheet, $extras)`'
- en: '`prependStylesheet``($href, $media, $conditionalStylesheet, $extras)`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependStylesheet``($href, $media, $conditionalStylesheet, $extras)`'
- en: '`setStylesheet($href, $media, $conditionalStylesheet, $extras)`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setStylesheet($href, $media, $conditionalStylesheet, $extras)`'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To render the `Link` tags in an HTML layout/view, use the following script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 布局/视图中渲染 `Link` 标签，请使用以下脚本：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The HeadMeta helper
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HeadMeta 辅助函数
- en: The `HeadMeta` helper is used to modify the `<meta>` tag in the HTML `head`
    section; this helper is used to manipulate the HTML `meta` information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeadMeta` 辅助函数用于修改 HTML `head` 部分的 `<meta>` 标签；此辅助函数用于操作 HTML `meta` 信息。'
- en: 'Some of the most-used functions in this helper are listed as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此辅助函数中最常用的函数如下列出：
- en: '`appendName($keyValue, $content, $conditionalName)`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendName($keyValue, $content, $conditionalName)`'
- en: '`offsetSetName($index, $keyValue, $content, $conditionalName)`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetName($index, $keyValue, $content, $conditionalName)`'
- en: '`prependName($keyValue, $content, $conditionalName)`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependName($keyValue, $content, $conditionalName)`'
- en: '`setName($keyValue, $content, $modifiers)`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setName($keyValue, $content, $modifiers)`'
- en: '`appendHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
- en: '`offsetSetHttpEquiv($index, $keyValue, $content, $conditionalHttpEquiv)`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetHttpEquiv($index, $keyValue, $content, $conditionalHttpEquiv)`'
- en: '`prependHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
- en: '`setHttpEquiv($keyValue, $content, $modifiers)`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setHttpEquiv($keyValue, $content, $modifiers)`'
- en: '`setCharset($charset)`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setCharset($charset)`'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To render the `meta` tags in an HTML layout/view, use the following script:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 布局/视图中渲染 `meta` 标签，请使用以下脚本：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The HeadScript helper
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HeadScript 辅助函数
- en: The `HeadScript` helper is used to modify the `<script>` tag in the HTML `head`
    section; this helper is used to attach external JavaScript and also add the `<script>`
    tags to the HTML `head` section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeadScript` 辅助函数用于修改 HTML `head` 部分的 `<script>` 标签；此辅助函数用于附加外部 JavaScript
    并将 `<script>` 标签添加到 HTML `head` 部分中。'
- en: 'Some of the most-used functions in this helper are listed as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此辅助函数中最常用的函数如下列出：
- en: '`appendFile($src, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendFile($src, $type = ''text/javascript'', $attrs = array())`'
- en: '`offsetSetFile($index, $src, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetFile($index, $src, $type = ''text/javascript'', $attrs = array())`'
- en: '`prependFile($src, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependFile($src, $type = ''text/javascript'', $attrs = array())`'
- en: '`setFile($src, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setFile($src, $type = ''text/javascript'', $attrs = array())`'
- en: '`appendScript($script, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendScript($script, $type = ''text/javascript'', $attrs = array())`'
- en: '`offsetSetScript($index, $script, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetScript($index, $script, $type = ''text/javascript'', $attrs = array())`'
- en: '`prependScript($script, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependScript($script, $type = ''text/javascript'', $attrs = array())`'
- en: '`setScript($script, $type = ''text/javascript'', $attrs = array())`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setScript($script, $type = ''text/javascript'', $attrs = array())`'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To render the `Script` tags in an HTML layout/view use the following script:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 布局/视图中渲染 `Script` 标签，请使用以下脚本：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The HeadStyle helper
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HeadStyle 辅助工具
- en: The `HeadStyle` helper is used to modify the `<style>` tag in HTML `head` section;
    this helper is used to add internal styles by adding the `<style>` tags to the
    HTML `head` section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeadStyle` 辅助工具用于修改 HTML `head` 部分的 `<style>` 标签；此辅助工具通过向 HTML `head` 部分添加
    `<style>` 标签来添加内部样式。'
- en: 'Some of the most-used functions in this helper are listed as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助工具中最常用的函数如下所示：
- en: '`appendStyle($content, $attributes = array())`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendStyle($content, $attributes = array())`'
- en: '`offsetSetStyle($index, $content, $attributes = array())`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offsetSetStyle($index, $content, $attributes = array())`'
- en: '`prependStyle($content, $attributes = array())`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependStyle($content, $attributes = array())`'
- en: '`setStyle($content, $attributes = array())`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setStyle($content, $attributes = array())`'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To render the `Style` tags in an HTML layout/view use the following script:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 布局/视图中渲染 `Style` 标签，请使用以下脚本：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The HeadTitle helper
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HeadTitle 辅助工具
- en: The `HeadTitle` helper is used to render title in the `<title>` tags on the
    HTML `head` section; multiple calls to a `headTitle()` helper create a list of
    titles which are rendered when tag is outputted in the layout/view. The optional
    parameter `$setType` can be set to override the pre-existing array of titles,
    the default is `APPEND`, it can be overridden to `PREPEND` or `SET`(overwrite).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeadTitle` 辅助工具用于在 HTML `head` 部分的 `<title>` 标签中渲染标题；对 `headTitle()` 辅助工具的多次调用会创建一个标题列表，当在布局/视图中输出标签时渲染。可选参数
    `$setType` 可以设置为覆盖现有的标题数组，默认为 `APPEND`，可以覆盖为 `PREPEND` 或 `SET`(覆盖)。'
- en: The syntax for this helper is `headTitle($title, $setType = null);`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助工具的语法是 `headTitle($title, $setType = null);`。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To render the `Title` tags in an HTML layout/view, use the following script:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 HTML 布局/视图中渲染 `Title` 标签，请使用以下脚本：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Time for action – using jQuery UI in a simple page
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery UI 在简单页面中操作的时间
- en: 'In this task we will be converting some of our existing pages to make use of
    the jQuery UI library and render buttons in that page using jQuery UI:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此任务中，我们将将一些现有的页面转换为使用 jQuery UI 库，并在该页面中使用 jQuery UI 渲染按钮：
- en: View the existing application home page as shown in the following screenshot;
    our next task is to convert the **Login** and **Register** links to render as
    jQuery UI buttons:![Time for action – using jQuery UI in a simple page](img/1929OS_05_02.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看如下截图所示的现有应用程序主页；我们的下一个任务是转换**登录**和**注册**链接，使其以 jQuery UI 按钮的形式渲染：![使用 jQuery
    UI 在简单页面中操作的时间 – 使用 jQuery UI](img/1929OS_05_02.jpg)
- en: Existing application home page
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现有的应用程序主页
- en: 'Replace the **Login** and **Register** links in the `index` view (`module/Users/view/users/index/index.html`),
    and add the `ui-button` class to the links as shown in the following code snippet:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `index` 视图（`module/Users/view/users/index/index.html`）中的**登录**和**注册**链接替换，并将
    `ui-button` 类添加到链接中，如下代码片段所示：
- en: '[PRE7]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add external references to jQuery UI towards the beginning of the view:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图的开始处添加对 jQuery UI 的外部引用：
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Referencing custom JavaScript libraries**'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**引用自定义 JavaScript 库**'
- en: Instead of directly referencing the external scripts, you can also optionally
    download the scripts to the `/public` folder in your application and pass relative
    links as parameters to the `appendFile` and `appendStylesheet` functions. You
    can also make use of the `basePath()` helper to prepend the base URL.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了直接引用外部脚本外，你也可以选择将脚本下载到应用程序的 `/public` 文件夹，并将相对链接作为参数传递给 `appendFile` 和 `appendStylesheet`
    函数。你也可以使用 `basePath()` 辅助工具添加基本 URL。
- en: 'Add a UI initialization script to apply the button look and feel to both the
    links:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 UI 初始化脚本以将按钮的外观和感觉应用到链接上：
- en: '[PRE9]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Preview the home page in the browser now, and you will be able to see that both
    the **Login** and **Register** buttons are styled using jQuery UI as shown in
    the following screenshot:![Time for action – using jQuery UI in a simple page](img/1929OS_05_03.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在浏览器中预览主页，你会看到**登录**和**注册**按钮都使用了 jQuery UI 进行样式化，如下截图所示：![使用 jQuery UI 在简单页面中操作的时间
    – 使用 jQuery UI](img/1929OS_05_03.jpg)
- en: 'A **View Source** link on the index page will reveal the application of `headScript()`
    as shown in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 索引页上的 **查看源代码** 链接将揭示 `headScript()` 的应用，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*What just happened?*'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么事？*'
- en: We have made use of Zend Framework's view helpers to connect to the external
    JavaScript library; we then added custom JavaScript to the HTML `head` section
    using the `headScript()` view helper.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 Zend 框架的视图助手来连接到外部 JavaScript 库；然后我们使用 `headScript()` 视图助手在 HTML `head`
    部分添加了自定义 JavaScript。
- en: Now we have integrated our application with an external JavaScript; in the next
    exercise we will learn a little bit more on how scripts can be added to the HTML
    `head` section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将我们的应用程序与外部 JavaScript 集成；在下一个练习中，我们将学习更多关于如何将脚本添加到 HTML `head` 部分的内容。
- en: Have a go hero
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: Before we move on to building the **Group Chat** interface, here is a simple
    task for you to complete. Now that you have understood how to link external JavaScript
    libraries, you can download jQuery UI from its website, extract it to the `public/`
    folder, and modify the previously listed page to use the downloaded version of
    jQuery UI.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续构建 **群聊** 界面之前，这里有一个简单的任务要你完成。现在你已经了解了如何链接外部 JavaScript 库，你可以从其网站下载 jQuery
    UI，将其提取到 `public/` 文件夹中，并修改之前列出的页面以使用下载的 jQuery UI 版本。
- en: jQuery UI can be downloaded from [http://jqueryui.com/](http://jqueryui.com/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 可以从 [http://jqueryui.com/](http://jqueryui.com/) 下载。
- en: Building a simple group chat
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建简单的群聊
- en: Our next task is to build a simple group chat application that allows multiple
    users to log in to our system and chat with each other. The backend for this tool
    is pretty straightforward. We need to create a table that will store all user
    messages and render them in a separate view; we will create a simple form that
    will allow users to send messages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的任务是构建一个简单的群聊应用程序，允许多个用户登录到我们的系统并相互聊天。这个工具的后端相当简单。我们需要创建一个表来存储所有用户消息并在单独的视图中渲染它们；我们将创建一个简单的表单，允许用户发送消息。
- en: Time for action – creating a simple group chat application
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建简单的群聊应用程序
- en: 'Create a new `chat_messages` table to store all user messages:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `chat_messages` 表来存储所有用户消息：
- en: '[PRE11]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create a controller for group chat in `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`
    中创建一个群聊控制器。
- en: 'Make necessary changes to `CommunicationApp/module/Users/config/module.config.php`
    and add the new controller to invokables and routes:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 `CommunicationApp/module/Users/config/module.config.php` 进行必要的修改，并将新的控制器添加到可调用和路由中：
- en: '[PRE12]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new view in `CommunicationApp/module/Users/view/users/group-chat/index.phtml`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `CommunicationApp/module/Users/view/users/group-chat/index.phtml` 中创建一个新的视图：
- en: '[PRE13]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the `messageList` action to `GroupChatController - CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`;
    this action will query the `chat_messages` table and get all the records from
    that table and pass that on to the view:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `messageList` 动作添加到 `GroupChatController - CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`；这个动作将查询
    `chat_messages` 表并获取该表中的所有记录，并将其传递给视图：
- en: '[PRE14]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a simple message listing view, `CommunicationApp/module/Users/view/users/group-chat/message-list.phtml`,
    which will list messages from the `$messageList` array:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的消息列表视图，`CommunicationApp/module/Users/view/users/group-chat/message-list.phtml`，它将列出
    `$messageList` 数组中的消息：
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a method called `sendMessage()`, which is called when a user sends a
    message to store the message in the database, as shown in the following code.
    This needs to be placed in the group chat controller `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `sendMessage()` 的方法，当用户发送消息时调用，将消息存储在数据库中，如下面的代码所示。这需要放在群聊控制器 `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`
    中。
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Modify the `indexAction` function to display a `Send Message` form and to call
    `sendMessage()` on form submission. This needs to be placed in the group chat
    controller `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `indexAction` 函数以显示一个 `发送消息` 表单，并在表单提交时调用 `sendMessage()`。这需要放在群聊控制器 `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`
    中。
- en: '[PRE17]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To test the changes, log in to the browser from two different computers or two
    different browsers using different credentials, and test the **Group Chat** interface.![Time
    for action – creating a simple group chat application](img/1929OS_05_04.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试更改，使用不同的凭据从两个不同的计算机或两个不同的浏览器登录到浏览器，并测试 **群聊** 界面。![行动时间 - 创建简单的群聊应用程序](img/1929OS_05_04.jpg)
- en: '*What just happened?*'
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have now successfully implemented a **Group Chat** interface using Zend Framework;
    the interface is effective for multiple people chatting with each other in a group.
    Our next task will need to build a mechanism to send e-mails to other users in
    the system; for that we will be exhaustively using the Zend Framework's mailing
    capabilities.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功实现了使用 Zend Framework 的 **群组聊天** 界面；该界面适用于多人进行群组聊天。我们的下一个任务将需要构建一个机制向系统中的其他用户发送电子邮件；为此，我们将充分利用
    Zend Framework 的邮件功能。
- en: Have a go hero
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: Here is a simple exercise for you to try before you move on to the next section.
    In the **Group Chat** interface, we have a **Refresh** button that reloads the
    `iframe` tag. Write some JavaScript and attach it to the view, which will reload
    the IFrame every five seconds.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在你进入下一节之前，这里有一个简单的练习供你尝试。在 **群组聊天** 界面中，我们有一个 **刷新** 按钮，用于重新加载 `iframe` 标签。编写一些
    JavaScript 并将其附加到视图上，这将每五秒重新加载 IFrame。
- en: Sending mails
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送邮件
- en: Zend Framework offers the `Zend\Mail` library to send and receive e-mails. In
    this section, we will cover the basics of Zend Framework's mailing capabilities,
    and will also implement a simple mailing script.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 提供了 `Zend\Mail` 库来发送和接收电子邮件。在本节中，我们将介绍 Zend Framework 的邮件功能的基础，并实现一个简单的邮件脚本。
- en: '`Zend\Mail` supports both plain text and MIME complaint multipart e-mail messages.
    The framework by default supports Sendmail, SMTP, and File transports; new transports
    can be implemented using `Zend\Mail\Transport\TransportInterface`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Zend\Mail` 支持纯文本和 MIME 兼容的多部分电子邮件消息。框架默认支持 Sendmail、SMTP 和文件传输；可以使用 `Zend\Mail\Transport\TransportInterface`
    实现新的传输。'
- en: Zend\Mail\Transport
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zend\Mail\Transport
- en: 'The `Mail` transport is used to send the e-mail message to recipients; `Zend\Mail`
    supports the following transports:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mail` 传输用于将电子邮件消息发送给收件人；`Zend\Mail` 支持以下传输：'
- en: Sendmail using `Zend\Mail\Transport\Sendmail`
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Zend\Mail\Transport\Sendmail` 的 Sendmail
- en: SMTP using `Zend\Mail\Transport\Smtp`
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Zend\Mail\Transport\Smtp` 的 SMTP
- en: File Transport using `Zend\Mail\Transport\File`
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Zend\Mail\Transport\File` 的文件传输
- en: The `Mail` transport implements the `send()` method; this method accepts an
    object of type `Zend\Mail\Message` as the parameter; this object (`Zend\Mail\Message`)
    contains all the necessary information for an e-mail message; the message is sent
    using the transport.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mail` 传输实现了 `send()` 方法；此方法接受一个类型为 `Zend\Mail\Message` 的对象作为参数；此对象（`Zend\Mail\Message`）包含电子邮件消息所需的所有必要信息；消息通过传输发送。'
- en: Zend\Mail\Message
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zend\Mail\Message
- en: '`Zend\Mail\Message` is used to compose the mail message in Zend Framework;
    this object takes various parameters including the from address, to address, subject,
    and body. If the message is a MIME complaint multipart message, then the body
    of the message can be set to a `Zend\Mime\Message` mail message object using the
    `setBody()` method, and the message can be sent. Some of the most frequently-used
    methods in `Zend\Mail\Message` are listed as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Zend\Mail\Message` 用于在 Zend Framework 中编写邮件消息；此对象接受包括发件人地址、收件人地址、主题和正文在内的各种参数。如果消息是一个
    MIME 兼容的多部分消息，则可以使用 `setBody()` 方法将消息的正文设置为 `Zend\Mime\Message` 邮件消息对象，然后发送消息。以下列出了
    `Zend\Mail\Message` 中一些最常用的方法：'
- en: '`setFrom()`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setFrom()`'
- en: '`setHeaders`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setHeaders`'
- en: '`setTo()`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTo()`'
- en: '`addCc()` and `addBcc()`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addCc()` 和 `addBcc()`'
- en: '`setSubject()`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setSubject()`'
- en: '`setBody()`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setBody()`'
- en: Zend\Mime\Message and Zend\Mime\Part
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zend\Mime\Message 和 Zend\Mime\Part
- en: For sending HTML or multi-part content, each message part is defined as a `Zend\Mime\Part`
    object along with its type and associated to the `Zend\Mime\Message` object using
    the `setParts()` method. The `Zend\Mime\Message` object is assigned to the `Zend\Mail\Message`
    object using the `setBody()` method.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发送 HTML 或多部分内容，每个消息部分都定义为 `Zend\Mime\Part` 对象，包括其类型，并使用 `setParts()` 方法与 `Zend\Mime\Message`
    对象关联。使用 `setBody()` 方法将 `Zend\Mime\Message` 对象分配给 `Zend\Mail\Message` 对象。
- en: Time for action – creating a simple e-mail form
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践 - 创建简单的电子邮件表单
- en: 'In this activity, we will be creating an e-mail form making use of Zend''s
    mailing capabilities:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将创建一个电子邮件表单，利用 Zend 的邮件功能：
- en: Create a simple e-mail form with input fields for subject, message content,
    and addressee.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的电子邮件表单，包括主题、消息内容和收件人输入字段。
- en: Set up a new controller to display the form and write the necessary views.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个新的控制器以显示表单并编写必要的视图。
- en: Modify the controller so that it references the `Zend\Mail` namespace.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改控制器，使其引用 `Zend\Mail` 命名空间。
- en: '[PRE18]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new controller method that does the actual e-mailing; this can be
    placed within our group chat controller (`CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`)
    using the following code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的控制器方法来执行实际的电子邮件发送；这可以通过以下代码放置在我们的群聊控制器（`CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`）中：
- en: '[PRE19]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `Sendmail` transport (`Zend\Mail\Transport\Sendmail`) is available in Linux
    by default and can be used for sending e-mail messages. Windows users can make
    use of SMTP transport (`Zend\Mail\Transport\Smtp`) to connect an SMTP server to
    send e-mail messages. The following reference link provides a quick example on
    using SMTP transport:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Sendmail`传输（`Zend\Mail\Transport\Sendmail`）在Linux中默认可用，可用于发送电子邮件消息。Windows用户可以使用SMTP传输（`Zend\Mail\Transport\Smtp`）连接SMTP服务器以发送电子邮件消息。以下参考链接提供了一个使用SMTP传输的快速示例：'
- en: '[https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage](https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage](https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage)'
- en: Preview the form in a web browser and test if the e-mail is being received;
    a message similar to the following one would be received by the recipient:![Time
    for action – creating a simple e-mail form](img/1929OS_05_06.jpg)![Time for action
    – creating a simple e-mail form](img/1929OS_05_10.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中预览表单，并测试是否收到电子邮件；收件人将收到类似以下的消息：![行动时间 – 创建简单的电子邮件表单](img/1929OS_05_06.jpg)![行动时间
    – 创建简单的电子邮件表单](img/1929OS_05_10.jpg)
- en: '*What just happened?*'
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have used the `Zend\Mail` object to send e-mails within the system using
    the `Sendmail` mail transport; we have also learned about how to send HTML or
    multi-part mail messages.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`Zend\Mail`对象在系统中通过`Sendmail`邮件传输发送电子邮件；我们还学习了如何发送HTML或多部分邮件消息。
- en: Have a go hero
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: Before moving on to the next section, try to implement the e-mailing form for
    sending out HTML e-mails.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一节之前，尝试实现用于发送HTML电子邮件的电子邮件表单。
- en: Zend\EventManager
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zend\EventManager
- en: 'Zend Framework 2 is an event-driven framework; the event manager allows you
    to attach events to almost any functionality. There are three main terms used
    in Zend Framework''s event management, which are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 2是一个事件驱动的框架；事件管理器允许您将事件附加到几乎任何功能。在Zend Framework的事件管理中，有三个主要术语，如下所述：
- en: '**Event manager**: The `EventManager` object is the object that holds a collection
    of listeners and their relative events'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件管理器**：`EventManager`对象是包含一组监听器和它们相关事件的集合'
- en: '**Listener**: The listener is the callback that reacts to the triggered event'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听器**：监听器是对触发事件做出反应的回调'
- en: '**Event**: The event is the action that is triggered by the event manager'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：事件是事件管理器触发的动作'
- en: 'The event manager provides `attach()` and `trigger()` to create and trigger
    events respectively. Mostly we will be depending on MVC events for various operation,
    and the sequence of execution of MVC application events is described in the following
    diagram:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 事件管理器提供了`attach()`和`trigger()`来分别创建和触发事件。我们主要将依赖于MVC事件进行各种操作，MVC应用程序事件执行的顺序在以下图中描述：
- en: '![Zend\EventManager](img/1929OS_05_09.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Zend\EventManager](img/1929OS_05_09.jpg)'
- en: Tip
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The article at the following link explains the sequence of events in a ZF2
    application:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接中的文章解释了ZF2应用程序中事件序列：
- en: '[http://akrabat.com/zend-framework-2/a-list-of-zf2-events/](http://akrabat.com/zend-framework-2/a-list-of-zf2-events/)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://akrabat.com/zend-framework-2/a-list-of-zf2-events/](http://akrabat.com/zend-framework-2/a-list-of-zf2-events/)'
- en: 'Flow of events for successful execution is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行的事件流如下：
- en: '`Zend\Mvc\Application`: **Bootstrap**'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **引导**'
- en: '`Zend\Mvc\Application`: **Route**'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **路由**'
- en: '`Zend\Mvc\Application`: **Dispatch**'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **分发**'
- en: '`Zend\Mvc\Controller\ActionController`: **Dispatch** (if controller extends
    this class)'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Controller\ActionController`: **分发**（如果控制器扩展此类）'
- en: '`Zend\Mvc\Application`: **Render**'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **渲染**'
- en: '`Zend\View\View`: **Renderer**'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\View\View`: **渲染器**'
- en: '`Zend\View\View`: **Response**'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\View\View`: **响应**'
- en: '`Zend\Mvc\Application`: **Finish**'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **完成**'
- en: 'In case of errors during dispatch (or) route, the flow of events will be as
    follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在分发（或）路由过程中出现错误的情况下，事件流将如下所示：
- en: '`Zend\Mvc\Application`: **Dispatch.error**'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **分发错误**'
- en: '`Zend\Mvc\Application`: **Render**'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **渲染**'
- en: '`Zend\View\View`: **Renderer**'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\View\View`: **渲染器**'
- en: '`Zend\View\View`: **Response**'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\View\View`: **响应**'
- en: '`Zend\Mvc\Application`: **Finish**'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mvc\Application`: **完成**'
- en: In our next activity, we will try to set a new layout for multiple controllers
    using the shared event manager in Zend Framework.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个活动中，我们将尝试使用Zend Framework中的共享事件管理器为多个控制器设置新布局。
- en: Time for action – setting module layout using ZF events
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 使用ZF事件设置模块布局
- en: 'Perform the following steps for setting the module layout using ZF events:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用ZF事件设置模块布局：
- en: Create a new layout for the **My Account** page and save it under `CommunicationApp/module/Users/view/layout/myaccount-layout.phtml`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**我的账户**页面创建一个新的布局并将其保存到`CommunicationApp/module/Users/view/layout/myaccount-layout.phtml`。
- en: 'Add the layout to the `CommunicationApp/module/Users/config/module.config.php`
    file under `view_manager -> template_map`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将布局添加到`CommunicationApp/module/Users/config/module.config.php`文件中的`view_manager
    -> template_map`下：
- en: '[PRE20]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `CommunicationApp/module/Users/module.php` file and add references
    to `MvcEvent`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`CommunicationApp/module/Users/module.php`文件并添加对`MvcEvent`的引用：
- en: '[PRE21]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Overwrite the `onBootStrap()` method with the following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码覆盖`onBootStrap()`方法：
- en: '[PRE22]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open the **Communication Application** page in any web browser; make a note
    of the layout:![Time for action – setting module layout using ZF events](img/1929OS_05_07.jpg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何网络浏览器中打开**通信应用程序**页面；注意布局：![操作时间 – 使用ZF事件设置模块布局](img/1929OS_05_07.jpg)
- en: Log in to the application and see the new layout being applied:![Time for action
    – setting module layout using ZF events](img/1929OS_05_08.jpg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录应用程序并查看新布局的应用：![操作时间 – 使用ZF事件设置模块布局](img/1929OS_05_08.jpg)
- en: '*What just happened?*'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have used the Zend Framework event manager to attach a listener to the `Dispatch`
    event of the module. So every time the controller is dispatched, this event is
    triggered. The callback checks if the controller is valid and if the controller
    is not among the list of controllers that have the `default` layout, then the
    `myaccount` layout is applied to these controllers.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用Zend Framework事件管理器将监听器附加到模块的`Dispatch`事件。因此，每次控制器被分发时，都会触发此事件。回调检查控制器是否有效，如果控制器不在具有`default`布局的控制器列表中，则将这些控制器的`myaccount`布局应用于它们。
- en: Pop quiz – chat and e-mail
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答 – 聊天和电子邮件
- en: Q1\. Which of the following helpers can be used to define/attach CSS styles
    inside the HTML `head` section?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 以下哪些助手可以用来在HTML `head`部分定义/附加CSS样式？
- en: '`HeadLink`'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HeadLink`'
- en: '`HeadScript`'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HeadScript`'
- en: '`HeadCss`'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HeadCss`'
- en: '`HeadStyle`'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HeadStyle`'
- en: Q2\. Which of the following are valid mail transports supported by Zend Framework
    2?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 以下哪些是Zend Framework 2支持的邮件传输方式？
- en: '`Zend\Mail\Transport\Pop`'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mail\Transport\Pop`'
- en: '`Zend\Mail\Transport\Smtp`'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mail\Transport\Smtp`'
- en: '`Zend\Mail\Transport\Imap`'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mail\Transport\Imap`'
- en: '`Zend\Mail\Transport\File`'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Zend\Mail\Transport\File`'
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have covered a wide range of topics in this chapter; first we learned about
    making use of external JavaScripts. Next we created a simple group chat application
    and then we learned about `Zend\Mail` and implemented a simple mailing form. Towards
    the end, we learned about events and how to make use of these events in Zend Framework.
    In the next chapter we will be working on media sharing using Zend Framework by
    working with various media-sharing APIs.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了广泛的主题；首先我们学习了如何使用外部JavaScript。接下来，我们创建了一个简单的群聊应用程序，然后我们学习了`Zend\Mail`并实现了一个简单的邮件表单。最后，我们学习了事件以及如何在Zend
    Framework中使用这些事件。在下一章中，我们将通过处理各种媒体共享API来使用Zend Framework进行媒体共享。
