- en: Chapter 5. Chat and E-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In any web application development, there will be very high dependency on
    client-side scripts primarily including JavaScript and CSS. The MVC model of Zend
    Framework provides basic support of controlling the output that is sent across
    to the browser. The view helper classes in Zend Framework 2 offer maximum control
    over the content that gets rendered in the client browser.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will focus on building a simple group chat and e-mail component
    which will make use of various frontend capabilities of Zend Framework 2.0\. Some
    of the important topics covered in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Using external JavaScript libraries in the Zend Framework 2 application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a simple group chat application using Zend Framework 2 and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Zend\Mail to send e-mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Zend Framework event manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Framework MVC uses layouts and views to render pages in the web browser;
    the overall page content is controlled by the layout specification, and the view
    level information is contained in the views. The concept is to minimize the amount
    of redundant HTML code that needs to be generated for each of these views.
  prefs: []
  type: TYPE_NORMAL
- en: By using layouts, the application can have a consistent user interface, which
    is also easy to customize; the views offer the flexibility to modify the targeted
    content and allow customization to the maximum possible extent. This is also known
    as *two-step* view.
  prefs: []
  type: TYPE_NORMAL
- en: When a new view is generated, the appropriate layout is identified from the
    layout definitions in the `view_manager` configuration and the view is rendered
    with that layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![Layouts and views](img/1929OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding schematic explains how the layout and view are combined to form
    an HTML page, so for each and every view, the view part changes and the layout
    part remains static.
  prefs: []
  type: TYPE_NORMAL
- en: View helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zend Framework 2 offers a wide range of view helpers that help us perform complex
    operations on views; if the included helpers are not sufficient, you can define
    your own custom helper by implementing the interface `Zend\View\HelperInterface`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will quickly review some of the included helpers in Zend
    Framework 2.
  prefs: []
  type: TYPE_NORMAL
- en: The URL helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The syntax for this helper is `url($name, $urlParams, $routeOptions = array(),
    $reuseMatchedParams = array())`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL helper is used to generate the URL for a specific route. The route''s
    segment match parameters can be passed over the URL helper to form a URL based
    on the route option; for example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will generate `<a href="/users/upload-manager/edit/10">Edit</a>`
    if the route definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The BasePath helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The syntax for this helper is `basePath()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `BasePath` helper returns the base URL of the view, this can be used by
    developers to prepend to their custom URLs and form links for various resources.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The syntax for this helper is `json($jsonData = array())`.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON helper is used to render PHP arrays as JSON-encoded data. Most AJAX
    libraries classify JSON content by its content header, and this helper also sets
    the content type header to `application/json`.
  prefs: []
  type: TYPE_NORMAL
- en: Concrete placeholder implementations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zend Framework makes use of placeholder helpers to perform some standard operations
    on the HTML `head` sections including adding/removing references to new JavaScript
    libraries, linking with new styles, adding and cross referencing scripts, and
    adding/removing HTML `head` section's `meta` content.
  prefs: []
  type: TYPE_NORMAL
- en: This is achieved by the following list of helpers called as **concrete placeholder
    helpers**. The reason why they are called placeholder helpers is because the helpers
    themselves don't make any changes to the way in which the content is rendered.
    For example, if you add `<?php echo $this->headLink(); ?>` to the HTML code, this
    won't do anything, until you add something to the `headLink` helper by using `appendStylesheet`
    or some other function.
  prefs: []
  type: TYPE_NORMAL
- en: The HeadLink helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `HeadLink` helper is used to modify the `<link>` tag in the HTML `head`
    section; this helper is used to attach or manage external CSSs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most-used functions in this helper are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`appendStylesheet($href, $media, $conditionalStylesheet, $extras)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetStylesheet``($index, $href, $media, $conditionalStylesheet, $extras)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependStylesheet``($href, $media, $conditionalStylesheet, $extras)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setStylesheet($href, $media, $conditionalStylesheet, $extras)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render the `Link` tags in an HTML layout/view, use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The HeadMeta helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `HeadMeta` helper is used to modify the `<meta>` tag in the HTML `head`
    section; this helper is used to manipulate the HTML `meta` information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most-used functions in this helper are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`appendName($keyValue, $content, $conditionalName)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetName($index, $keyValue, $content, $conditionalName)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependName($keyValue, $content, $conditionalName)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setName($keyValue, $content, $modifiers)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appendHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetHttpEquiv($index, $keyValue, $content, $conditionalHttpEquiv)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependHttpEquiv($keyValue, $content, $conditionalHttpEquiv)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setHttpEquiv($keyValue, $content, $modifiers)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setCharset($charset)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render the `meta` tags in an HTML layout/view, use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The HeadScript helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `HeadScript` helper is used to modify the `<script>` tag in the HTML `head`
    section; this helper is used to attach external JavaScript and also add the `<script>`
    tags to the HTML `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most-used functions in this helper are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`appendFile($src, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetFile($index, $src, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependFile($src, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setFile($src, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appendScript($script, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetScript($index, $script, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependScript($script, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setScript($script, $type = ''text/javascript'', $attrs = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render the `Script` tags in an HTML layout/view use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The HeadStyle helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `HeadStyle` helper is used to modify the `<style>` tag in HTML `head` section;
    this helper is used to add internal styles by adding the `<style>` tags to the
    HTML `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most-used functions in this helper are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`appendStyle($content, $attributes = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsetSetStyle($index, $content, $attributes = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prependStyle($content, $attributes = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setStyle($content, $attributes = array())`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render the `Style` tags in an HTML layout/view use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The HeadTitle helper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `HeadTitle` helper is used to render title in the `<title>` tags on the
    HTML `head` section; multiple calls to a `headTitle()` helper create a list of
    titles which are rendered when tag is outputted in the layout/view. The optional
    parameter `$setType` can be set to override the pre-existing array of titles,
    the default is `APPEND`, it can be overridden to `PREPEND` or `SET`(overwrite).
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for this helper is `headTitle($title, $setType = null);`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To render the `Title` tags in an HTML layout/view, use the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – using jQuery UI in a simple page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will be converting some of our existing pages to make use of
    the jQuery UI library and render buttons in that page using jQuery UI:'
  prefs: []
  type: TYPE_NORMAL
- en: View the existing application home page as shown in the following screenshot;
    our next task is to convert the **Login** and **Register** links to render as
    jQuery UI buttons:![Time for action – using jQuery UI in a simple page](img/1929OS_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Existing application home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the **Login** and **Register** links in the `index` view (`module/Users/view/users/index/index.html`),
    and add the `ui-button` class to the links as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add external references to jQuery UI towards the beginning of the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Referencing custom JavaScript libraries**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Instead of directly referencing the external scripts, you can also optionally
    download the scripts to the `/public` folder in your application and pass relative
    links as parameters to the `appendFile` and `appendStylesheet` functions. You
    can also make use of the `basePath()` helper to prepend the base URL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a UI initialization script to apply the button look and feel to both the
    links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Preview the home page in the browser now, and you will be able to see that both
    the **Login** and **Register** buttons are styled using jQuery UI as shown in
    the following screenshot:![Time for action – using jQuery UI in a simple page](img/1929OS_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A **View Source** link on the index page will reveal the application of `headScript()`
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have made use of Zend Framework's view helpers to connect to the external
    JavaScript library; we then added custom JavaScript to the HTML `head` section
    using the `headScript()` view helper.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have integrated our application with an external JavaScript; in the next
    exercise we will learn a little bit more on how scripts can be added to the HTML
    `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we move on to building the **Group Chat** interface, here is a simple
    task for you to complete. Now that you have understood how to link external JavaScript
    libraries, you can download jQuery UI from its website, extract it to the `public/`
    folder, and modify the previously listed page to use the downloaded version of
    jQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery UI can be downloaded from [http://jqueryui.com/](http://jqueryui.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple group chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next task is to build a simple group chat application that allows multiple
    users to log in to our system and chat with each other. The backend for this tool
    is pretty straightforward. We need to create a table that will store all user
    messages and render them in a separate view; we will create a simple form that
    will allow users to send messages.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a simple group chat application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `chat_messages` table to store all user messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a controller for group chat in `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make necessary changes to `CommunicationApp/module/Users/config/module.config.php`
    and add the new controller to invokables and routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new view in `CommunicationApp/module/Users/view/users/group-chat/index.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `messageList` action to `GroupChatController - CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`;
    this action will query the `chat_messages` table and get all the records from
    that table and pass that on to the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a simple message listing view, `CommunicationApp/module/Users/view/users/group-chat/message-list.phtml`,
    which will list messages from the `$messageList` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a method called `sendMessage()`, which is called when a user sends a
    message to store the message in the database, as shown in the following code.
    This needs to be placed in the group chat controller `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Modify the `indexAction` function to display a `Send Message` form and to call
    `sendMessage()` on form submission. This needs to be placed in the group chat
    controller `CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test the changes, log in to the browser from two different computers or two
    different browsers using different credentials, and test the **Group Chat** interface.![Time
    for action – creating a simple group chat application](img/1929OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now successfully implemented a **Group Chat** interface using Zend Framework;
    the interface is effective for multiple people chatting with each other in a group.
    Our next task will need to build a mechanism to send e-mails to other users in
    the system; for that we will be exhaustively using the Zend Framework's mailing
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a simple exercise for you to try before you move on to the next section.
    In the **Group Chat** interface, we have a **Refresh** button that reloads the
    `iframe` tag. Write some JavaScript and attach it to the view, which will reload
    the IFrame every five seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Sending mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Framework offers the `Zend\Mail` library to send and receive e-mails. In
    this section, we will cover the basics of Zend Framework's mailing capabilities,
    and will also implement a simple mailing script.
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Mail` supports both plain text and MIME complaint multipart e-mail messages.
    The framework by default supports Sendmail, SMTP, and File transports; new transports
    can be implemented using `Zend\Mail\Transport\TransportInterface`.'
  prefs: []
  type: TYPE_NORMAL
- en: Zend\Mail\Transport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Mail` transport is used to send the e-mail message to recipients; `Zend\Mail`
    supports the following transports:'
  prefs: []
  type: TYPE_NORMAL
- en: Sendmail using `Zend\Mail\Transport\Sendmail`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP using `Zend\Mail\Transport\Smtp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File Transport using `Zend\Mail\Transport\File`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Mail` transport implements the `send()` method; this method accepts an
    object of type `Zend\Mail\Message` as the parameter; this object (`Zend\Mail\Message`)
    contains all the necessary information for an e-mail message; the message is sent
    using the transport.
  prefs: []
  type: TYPE_NORMAL
- en: Zend\Mail\Message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Zend\Mail\Message` is used to compose the mail message in Zend Framework;
    this object takes various parameters including the from address, to address, subject,
    and body. If the message is a MIME complaint multipart message, then the body
    of the message can be set to a `Zend\Mime\Message` mail message object using the
    `setBody()` method, and the message can be sent. Some of the most frequently-used
    methods in `Zend\Mail\Message` are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFrom()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setHeaders`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setTo()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addCc()` and `addBcc()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setSubject()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setBody()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zend\Mime\Message and Zend\Mime\Part
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For sending HTML or multi-part content, each message part is defined as a `Zend\Mime\Part`
    object along with its type and associated to the `Zend\Mime\Message` object using
    the `setParts()` method. The `Zend\Mime\Message` object is assigned to the `Zend\Mail\Message`
    object using the `setBody()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a simple e-mail form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this activity, we will be creating an e-mail form making use of Zend''s
    mailing capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple e-mail form with input fields for subject, message content,
    and addressee.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a new controller to display the form and write the necessary views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the controller so that it references the `Zend\Mail` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new controller method that does the actual e-mailing; this can be
    placed within our group chat controller (`CommunicationApp/module/Users/src/Users/Controller/GroupChatController.php`)
    using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Sendmail` transport (`Zend\Mail\Transport\Sendmail`) is available in Linux
    by default and can be used for sending e-mail messages. Windows users can make
    use of SMTP transport (`Zend\Mail\Transport\Smtp`) to connect an SMTP server to
    send e-mail messages. The following reference link provides a quick example on
    using SMTP transport:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage](https://packages.zendframework.com/docs/latest/manual/en/modules/zend.mail.transport.html#zend-mail-transport-quick-start-smtp-usage)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Preview the form in a web browser and test if the e-mail is being received;
    a message similar to the following one would be received by the recipient:![Time
    for action – creating a simple e-mail form](img/1929OS_05_06.jpg)![Time for action
    – creating a simple e-mail form](img/1929OS_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used the `Zend\Mail` object to send e-mails within the system using
    the `Sendmail` mail transport; we have also learned about how to send HTML or
    multi-part mail messages.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before moving on to the next section, try to implement the e-mailing form for
    sending out HTML e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: Zend\EventManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zend Framework 2 is an event-driven framework; the event manager allows you
    to attach events to almost any functionality. There are three main terms used
    in Zend Framework''s event management, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event manager**: The `EventManager` object is the object that holds a collection
    of listeners and their relative events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Listener**: The listener is the callback that reacts to the triggered event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event**: The event is the action that is triggered by the event manager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The event manager provides `attach()` and `trigger()` to create and trigger
    events respectively. Mostly we will be depending on MVC events for various operation,
    and the sequence of execution of MVC application events is described in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zend\EventManager](img/1929OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The article at the following link explains the sequence of events in a ZF2
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://akrabat.com/zend-framework-2/a-list-of-zf2-events/](http://akrabat.com/zend-framework-2/a-list-of-zf2-events/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Flow of events for successful execution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Bootstrap**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Route**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Dispatch**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Controller\ActionController`: **Dispatch** (if controller extends
    this class)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Render**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\View\View`: **Renderer**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\View\View`: **Response**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Finish**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In case of errors during dispatch (or) route, the flow of events will be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Dispatch.error**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Render**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\View\View`: **Renderer**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\View\View`: **Response**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mvc\Application`: **Finish**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our next activity, we will try to set a new layout for multiple controllers
    using the shared event manager in Zend Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting module layout using ZF events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for setting the module layout using ZF events:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new layout for the **My Account** page and save it under `CommunicationApp/module/Users/view/layout/myaccount-layout.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the layout to the `CommunicationApp/module/Users/config/module.config.php`
    file under `view_manager -> template_map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `CommunicationApp/module/Users/module.php` file and add references
    to `MvcEvent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Overwrite the `onBootStrap()` method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the **Communication Application** page in any web browser; make a note
    of the layout:![Time for action – setting module layout using ZF events](img/1929OS_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the application and see the new layout being applied:![Time for action
    – setting module layout using ZF events](img/1929OS_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used the Zend Framework event manager to attach a listener to the `Dispatch`
    event of the module. So every time the controller is dispatched, this event is
    triggered. The callback checks if the controller is valid and if the controller
    is not among the list of controllers that have the `default` layout, then the
    `myaccount` layout is applied to these controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – chat and e-mail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following helpers can be used to define/attach CSS styles
    inside the HTML `head` section?
  prefs: []
  type: TYPE_NORMAL
- en: '`HeadLink`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HeadScript`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HeadCss`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HeadStyle`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which of the following are valid mail transports supported by Zend Framework
    2?
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend\Mail\Transport\Pop`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mail\Transport\Smtp`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mail\Transport\Imap`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Zend\Mail\Transport\File`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a wide range of topics in this chapter; first we learned about
    making use of external JavaScripts. Next we created a simple group chat application
    and then we learned about `Zend\Mail` and implemented a simple mailing form. Towards
    the end, we learned about events and how to make use of these events in Zend Framework.
    In the next chapter we will be working on media sharing using Zend Framework by
    working with various media-sharing APIs.
  prefs: []
  type: TYPE_NORMAL
