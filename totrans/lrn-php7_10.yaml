- en: Chapter 9. Building REST APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most non-developers probably think that creating applications means building
    either software for your PC or Mac, games, or web pages, because that is what
    they can see and use. But once you join the developers' community, either by your
    own or professionally, you will eventually realize how much work is done for applications
    and tools that do not have a user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever wondered how someone's website can access your Facebook profile,
    and later on, post an automatic message on your wall? Or how websites manage to
    send/receive information in order to update the content of the page, without refreshing
    or submitting any form? All of these features, and many more interesting ones,
    are possible thanks to the integration of applications working "behind the scenes".
    Knowing how to use them will open the doors for creating more interesting and
    useful web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to APIs and REST APIs, and their use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The foundation of REST APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for REST API developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing and writing REST APIs with Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different ways of testing your REST APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**API** stands for **Application Program Interface**. Its goal is to provide
    an interface so that other programs can send commands that will trigger some process
    inside the application, possibly returning some output. The concept might seem
    a bit abstract, but in fact, there are APIs virtually in everything which is somehow
    related to computers. Let''s see some real life examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems or OS, like Windows or Linux, are the programs that allow
    you to use computers. When you use any application from your computer, it most
    probably needs to talk to the OS in one way or another, for example by requesting
    a certain file, sending some audio to the speakers, and so on. All these interactions
    between the application and the OS are possible thanks to the APIs that the OS
    provides. In this way, the application need not interact with the hardware straight
    away, which is a very tiring task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To interact with the user, a mobile application provides a GUI. The interface
    captures all the events that the user triggers, like clicking or typing, in order
    to send them to the server. The GUI communicates with the server using an API
    in the same way the program communicates with the OS as explained earlier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you create a website that needs to display tweets from the user's Twitter
    account, you need to communicate with Twitter. They provide an API that can be
    accessed via HTTP. Once authenticated, by sending the correct HTTP requests, you
    can update and/or retrieve data from their application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, there are different places where APIs are useful. In general,
    when you have a system that should be accessed externally, you need to provide
    potential users an API. When we say externally, we mean from another application
    or library, but it can very well be inside the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing REST APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: REST APIs are a specific type of APIs. They use HTTP as the protocol to communicate
    with them, so you can imagine that they will be the most used ones by web applications.
    In fact, they are not very different from the websites that you've already built,
    since the client sends an HTTP request, and the server replies with an HTTP response.
    The difference here is that REST APIs make heavy use of HTTP status codes to understand
    what the response is, and instead of returning HTML resources with CSS and JS,
    the response uses JSON, XML, or any other document format with just information,
    and not a graphic user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example. The Twitter API, once authenticated, allows developers
    to get the tweets of a given user by sending an HTTP GET request to `https://api.twitter.com/1.1/statuses/user_timeline.json`.
    The response to this request is an HTTP message with a JSON map of tweets as the
    body and the status code 200\. We've already mentioned status code in [Chapter
    2](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851 "Chapter 2. Web
    Applications with PHP"), *Web Applications with PHP*, but we will review them
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The REST API also allows developers to post tweets on behalf of the user. If
    you were already authenticated, as in the previous example, you just need to send
    a POST request to `https://api.twitter.com/1.1/statuses/update.json` with the
    appropriate POST parameters in the body, like the text that you want to tweet.
    Even though this request is not a GET, and thus, you are not requesting data but
    rather sending it, the response of this request is quite important too. The server
    will use the status codes of the response to let the requester know if the tweet
    was posted successfully, or if they could not understand the request, there was
    an internal server error, the authentication was not valid, and so on. Each of
    these scenarios has a different status code, which is the same across all applications.
    This makes it very easy to communicate with different APIs, since you will not
    need to learn a new list of status code each time. The server can also add some
    extra information to the body in order to throw some light on why the error happened,
    but that will depend on the application.
  prefs: []
  type: TYPE_NORMAL
- en: You can imagine that these REST APIs are provided to developers so they can
    integrate them with their applications. They are not user-friendly, but HTTP-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: The foundations of REST APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though REST APIs do not have an official standard, most developers agree
    on the same foundation. It helps that HTTP, which is the protocol that this technology
    uses to communicate, does have a standard. In this section, we will try to describe
    how REST APIs should work.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP request methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve already introduced the idea of HTTP methods in [Chapter 2](part0019_split_000.html#I3QM2-edcc22b134104d5db0bf3aa086c86851
    "Chapter 2. Web Applications with PHP"), *Web Applications with PHP*. We explained
    that an HTTP method is just the verb of the request, which defines what kind of
    action it is trying to perform. We''ve already defined this method when working
    with HTML forms: the `form` tag can get an optional attribute, `method`, which
    will make the form submit with that specific HTTP method.'
  prefs: []
  type: TYPE_NORMAL
- en: You will not use forms when working with REST APIs, but you can still specify
    the method of the request. In fact, two requests can go to the same endpoint with
    the same parameters, headers, and so on, and yet have completely different behaviors
    due to their methods, which makes them a very important part of the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are giving so much importance to HTTP methods in order to identify what
    a request is trying to do, it is natural that we will need a handful of them.
    So far, we have introduced GET and POST, but there are actually eight different
    methods: GET, POST, PUT, DELETE, OPTIONS, HEAD, TRACE, and CONNECT. You will usually
    work with just four of them. Let''s look at them in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: GET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a request uses the GET method, it means that it is requesting for information
    about a given entity. The endpoint should contain information of what that entity
    is, like the ID of a book. GET can also be used to query for a list of objects,
    either all of them, filtered, or paginated.
  prefs: []
  type: TYPE_NORMAL
- en: GET requests can add extra information to the request when needed. For example,
    if we are try to retrieve all the books that contain the string "rings", or if
    we want the page number 2 of the full list of books. As you already know, this
    extra information is added to the query string as GET parameters, which is a list
    of key-value pairs concatenated by an ampersand (`&`). So, that means that the
    request for `http://bookstore.com/books?year=2001&page3` is probably used for
    getting the second page of the list of books published during 2001.
  prefs: []
  type: TYPE_NORMAL
- en: REST APIs have extensive documentation on the available endpoints and parameters,
    so it should be easy for you to learn to query properly. Still, even though it
    will be documented, you should expect parameters with intuitive names, like the
    ones in the example.
  prefs: []
  type: TYPE_NORMAL
- en: POST and PUT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: POST is the second type of HTTP method that you already know about. You used
    it in forms with the intention of "posting" data, that is, trying to update a
    resource on the server side. When you wanted to add or update a new book, you
    sent a POST request with the data of the book as the POST parameters.
  prefs: []
  type: TYPE_NORMAL
- en: POST parameters are sent in a format similar to the GET parameters, but instead
    of being part of the query string, they are included as part of the request's
    body. Forms in HTML are already doing that for you, but when you need to talk
    to a REST API, you should know how to do this by yourself. In the next section,
    we will show you how to perform POST using tools other than forms. Also note that
    you can add any data to the body of the request; it is quite common to send JSON
    in the body instead of POST parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PUT method is quite similar to the POST method. This too tries to add or
    update data on the server side, and for this purpose, it also adds extra information
    on the body of the request. Why should we have two different methods that do the
    same thing? There are actually two main differences between these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: PUT requests either create a resource or update it, but the affected resource
    is the one defined by the endpoint and nothing else. That means that if we want
    to update a book, the endpoint should state that the resource is a book, and specify
    it, for example, `http://bookstore.com/books/8734`. On the other hand, if you
    do not identify the resource to be created or updated in the endpoint, or you
    affect other resources at the same time, you should use POST requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Idempotent is a complicated word for a simple concept. An idempotent HTTP method
    is one that can be called many times, and the result will always be the same.
    For example, if you are trying to update the title of a book to "Don Quixote",
    it does not matter how many times you call it, the result will always be the same:
    the resource will have the title "Don Quixote". On the other hand, non-idempotent
    methods might return different results when executing the same request. An example
    could be an endpoint that increases the stock of some book. Each time you call
    it, you will increase the stock more and more, and thus, the result is not the
    same. PUT requests are idempotent, whereas POST requests are not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even with this explanation in mind, misusing POST and PUT is quite a common
    mistake among developers, especially when they lack enough experience in developing
    REST APIs. Since forms in HTML only send data with POST and not PUT, the first
    one is more popular. You might find REST APIs where all the endpoints that update
    data are POST, even though some of them should be PUT.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DELETE HTTP method is quite self-explanatory. It is used when you want to
    delete a resource on the server. As with PUT requests, DELETE endpoints should
    identify the specific resource to be deleted. An example would be when we want
    to remove one book from our database. We could send a DELETE request to an endpoint
    similar to `http://bookstore.com/books/23942`.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE requests just delete resources, and they are already determined by the
    URL. Still, if you need to send extra information to the server, you could use
    the body of the request as you do with POST or PUT. In fact, you can always send
    information within the body of the request, including GET requests, but that does
    not mean it is a good practice to do so.
  prefs: []
  type: TYPE_NORMAL
