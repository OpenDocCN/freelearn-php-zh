["```php\n# cd /var/local/\n# wget http://yii.googlecode.com/files/yii-1.1.13.e9e4a0.tar.gz\n# tar â€“zxf yii-1.1.13.e9e4a0.tar.gz && rm yii-1.1.13.e9e4a0.tar.gz\n# chown -R apache yii-1.1.13.e9e4a0\n\n```", "```php\n$ path-to-yii/framework/yiic webapp sitename\n\n```", "```php\n$ php path-to-yii/framework/yiic.php webapp sitename\n\n```", "```php\n$yii='path-to-yii/framework/yii.php';\n\n```", "```php\n/protected/config/main.php\n\n'components'=>array(\n    /* other components */\n    'db'=>array(\n        'connectionString' => 'mysql:host=localhost;dbname=DB_NAME,\n        'emulatePrepare' => true,\n        'username' => YOUR_USERNAME,\n        'password' => YOUR_PASSWORD,\n        'charset' => 'utf8',\n    ),\n    /* other components */\n),\n```", "```php\n$ /usr/local/yii/framework/yiic shell index.php\nYii Interactive Tool v1.1 (based on Yiiv1.1.13)\nPlease type 'help' for help. Type 'exit' to quit.\n>> model Post tbl_post\n generate models/Post.php\n unchanged fixtures/tbl_post.php\n generate unit/PostTest.php\nThe following model classes are successfully generated:\n Post\nIf you have a 'db' database connection, you can test these models now with:\n $model=Post::model()->find();\n print_r($model);\n\n>> crud Post\n generate PostController.php\n generate PostTest.php\nmkdir /var/www/app/protected/views/post\n generate create.php\n generate update.php\n generate index.php\n generate view.php\n\n```", "```php\n'gii'=>array(\n    'class'=>'system.gii.GiiModule',\n    'password'=>'giiPassword',\n\n    // If removed, Gii defaults to localhost only.\n    // Edit carefully to taste.\n    'ipFilters'=>array('127.0.0.1','::1'),\n\n    // For development purposes,\n    // a wildcard will allow access from anywhere.\n    // 'ipFilters'=>array('*'),\n),\n```", "```php\n$post->title = 'Post Title';\n$post->body = 'Post body content';\n$post->save();\n\n```", "```php\n/* protected/models/Post.php */\npublic function rules()\n{\n    // NOTE: you should only define rules for those \n    //attributes that will receive user inputs.\n    return array(\n        array('title, content, status', 'required'),\n        array('status', 'in', 'range'=>array(1,2,3)),\n        array('title', 'length', 'max'=>128),\n        array('tags', 'match', \n            'pattern'=>'/^[\\w\\s,]+$/', \n            'message'=>'Tags can only contain word characters.'),\n        array('tags', 'normalizeTags'),\n        array('title, status', 'safe', 'on'=>'search'),\n    );\n}\n```", "```php\npublic function relations()\n{\n    // NOTE: you may need to adjust the relation name and the related\n    // class name for the relations automatically generated below.\n    return array(\n        'author' => array(self::BELONGS_TO, 'User', 'author_id'),\n        'comments' => array(self::HAS_MANY, 'Comment', 'post_id',\n            'condition'=>'comments.status='.Comment::STATUS_APPROVED,\n            'order'=>'comments.create_timeDESC'),\n        'commentCount' => array(self::STAT, 'Comment', 'post_id',\n            'condition'=>'status='.Comment::STATUS_APPROVED),\n    );\n}\n```", "```php\npublic function attributeLabels()\n{\n    return array(\n        'id' => 'Id',\n        'title' => 'Title',\n        'content' => 'Content',\n        'tags' => 'Tags',\n        'status' => 'Status',\n        'create_time' => 'Create Time',\n        'update_time' => 'Update Time',\n        'author_id' => 'Author',\n    );\n}\n```", "```php\npublic function search()\n{\n    $criteria=new CDbCriteria;\n    $criteria->compare('title',$this->title,true);\n    $criteria->compare('status',$this->status);\n    return new CActiveDataProvider('Post', array(\n        'criteria'=>$criteria,\n        'sort'=>array(\n            'defaultOrder'=>'status, update_time DESC',\n        ),\n    ));\n}\n```", "```php\npublic function actionView($id)\n{\n    $model=$this->loadModel($id);\n    $this->render('view',array(\n        'model'=>$model,\n    ));\n}\n```", "```php\npublic function loadModel($id)\n{\n    $model=Post::model()->findByPk($id);\n    if($model===null)\n        throw new CHttpException(\n            404,\n            'The requested page does not exist.'\n        );\n    return $model;\n}\n```", "```php\npublic function actionUpdate($id)\n{\n    $model=$this->loadModel($id);\n\n    if (isset($_POST['Post']))\n    {\n        $model->attributes=$_POST['Post'];\n        if ($model->save())\n            $this->redirect(array('view','id'=>$model->id));\n    }\n\n    $this->render('update',array(\n        'model'=>$model,\n    ));\n}\n```", "```php\n<?php\nclass UserIdentity extends CUserIdentity\n{\n    private $_id;\n\n    public function authenticate()\n    {\n        $username=strtolower($this->username);\n        $user=User::model()->find(\n            'LOWER(username)=?',\n            array($username)\n        );\n        if($user===null)\n            $this->errorCode=self::ERROR_USERNAME_INVALID;\n else if(!$user->validatePassword($this->password))\n            $this->errorCode=self::ERROR_PASSWORD_INVALID;\n        else\n        {\n            $this->_id=$user->id;\n            $this->username=$user->username;\n            $this->errorCode=self::ERROR_NONE;\n        }\n        return $this->errorCode==self::ERROR_NONE;\n    }\n\n    public function getId()\n    {\n        return $this->_id;\n    }\n}\n```", "```php\n    public function validatePassword($password)\n    {\n        return crypt($password, $this->password)===$this->password;\n    }\n\n    public function hashPassword($password)\n    {\n return crypt($password, $this->generateSalt());\n    }\n```", "```php\n/**\n * Generate a random salt in the crypt(3) standard Blowfish format.\n *\n * @param int $cost Cost parameter from 4 to 31.\n *\n * @throws Exception on invalid cost parameter.\n * @return string A Blowfish hash salt for use in PHP's crypt()\n */\nprivate function generateSalt($cost = 13)\n{\n    if (!is_numeric($cost) || $cost < 4 || $cost > 31) {\n        throw new Exception(\n            \"cost parameter must be between 4 and 31\"\n        );\n    }\n    $rand = array();\n    for ($i = 0; $i < 8; $i += 1) {\n        $rand[] = pack('S', mt_rand(0, 0xffff));\n    }\n    $rand[] = substr(microtime(), 2, 6);\n    $rand = sha1(implode('', $rand), true);\n    $salt = '$2a$' . sprintf('%02d', $cost) . '$';\n    $salt .= strtr(\n        substr(base64_encode($rand), 0, 22), \n        array('+' => '.')\n    );\n    return $salt;\n}\n```", "```php\n<?php $this->beginWidget('CHtmlPurifier'); ?>\n<?php echo $model->content; ?>\n<?php $this->endWidget(); ?>\n```", "```php\n$p = new CHtmlPurifier();\n$model->content = $p->purify($_POST['Model']['content']);\n```", "```php\n//protected/config/main.php\n'components'=>array(\n  'request'=>array(\n    'enableCsrfValidation'=>true,\n  ),\n);\n```", "```php\necho CHtml::submitButton($model->isNewRecord ? 'Create' : 'Save');\n```", "```php\n<div class=\"row\">\n<?php \n    echo $form->labelEx($model,'name');\n    echo $form->textField(\n        $model, 'name',\n        array('size'=>60,'maxlength'=>90)\n    );\n    echo $form->error($model,'name'); \n?>\n</div>\n\n<div class=\"row buttons\">\n<?php \n    echo CHtml::submitButton(\n        $model->isNewRecord ? 'Create' : 'Save'\n    );\n?>\n</div>\n```", "```php\n<div class=\"row\">\n<?php \n    echo $form->labelEx($model,'category_id');\n    echo $form->textField($model,'category_id');\n    echo $form->error($model,'category_id');\n?>\n</div>\n\n<div class=\"row\">\n<?php \n    echo $form->labelEx($model,'title');\n    echo $form->textField(\n        $model, 'title',\n        array('size'=>60,'maxlength'=>120)\n    );\n    echo $form->error($model,'title');\n?>\n</div>\n\n<div class=\"row\">\n<?php \n    echo $form->labelEx($model,'cotent');\n    echo $form->textArea(\n        $model, 'content',\n        array('rows'=>6, 'cols'=>50)\n    ); \n    echo $form->error($model,'content'); \n?>\n</div>\n\n<div class=\"row buttons\">\n<?php \n    echo CHtml::submitButton(\n        $model->isNewRecord ? 'Create' : 'Save'\n    );\n?>\n</div>\n```", "```php\n<?php \n    echo $form->dropDownList(\n        $model,'category_id', \n        CHtml::listData(\n            Category::model()->findAll(),\n            'id', 'name'\n        )\n     );\n?>\n```", "```php\n// replace this:\n<?php echo $form->textField($model, 'publish_date'); ?>\n\n// with this:\n<?php $this->widget('zii.widgets.jui.CJuiDatePicker',array(\n            'model'=>$model,\n            'attribute'=>'publish_date',\n            'options'=>array(\n                'showAnim'=>'fold',\n            ),\n            'htmlOptions'=>array(\n                'style'=>'height:20px;'\n            ),\n        )); ?>\n```", "```php\nif (isset($_POST['Post2']))\n{\n    $model->attributes=$_POST['Post2'];\n    $model->publish_date = date(\n        'Y-m-d', \n        strtotime($model->publish_date)\n    );\n    if($model->save())\n        $this->redirect(array('view','id'=>$model->id));\n}\n```", "```php\npublic function actionView($id)\n{\n    $this->render('view',array(\n        'model'=>$this->loadModel($id),\n    ));\n}\n```", "```php\npublic function actionView($id)\n{\n    $model = $this->loadModel($id);\n    $model->publish_date = date('m/d/Y', strtotime($model->publish_date));\n    $this->render('view',array(\n        'model'=>$model,\n    ));\n}\n```", "```php\n/**\n * For displaying the model on pages, \n * we convert publishing date to 'MM/DD/YYYY' format.\n */\npublic function afterFind() \n{\n    $this->publish_date = date('m/d/Y', strtotime($this->publish_date));\n}\n\n/**\n * Publish date of Post is being stored in the MySQL in 'YYYY-MM-DD' format.\n*/\npublic function beforeSave() \n{\n    $this->publish_date = date(\n        'Y-m-d', \n        strtotime($this->publish_date)\n    );\n}\n```", "```php\n<?php\n//quick and dirty hide for non-admin users\nif (Yii::app()->user->name == 'admin') {\n    echo CHtml::openTag('div', array('class' => 'row'));\n        echo $form->labelEx($model,'approved');\n        echo $form->checkBox($model,'approved');\n        echo $form->error($model,'approved');\n    echo CHtml::closeTag('div');\n}\n?>\n```", "```php\npublic function actionPending()\n{\n    $dataProvider=new CActiveDataProvider('Post');\n    $criteria = new CDbCriteria;\n    $criteria->condition = 'approved=0';\n    $dataProvider->criteria = $criteria;\n    $this->render('pending',array(\n        'dataProvider'=>$dataProvider,\n    ));\n}\n```", "```php\n<?php $this->widget('zii.widgets.CListView', array(\n  'dataProvider'=>$dataProvider,\n  'itemView'=>'_view',\n)); ?>\n```", "```php\nYii::app()->clientScript->registerScript('search', \"\n$('.search-button').click(function(){\n    $('.search-form').toggle();\n    return false;\n});\n$('.search-form form').submit(function(){\n    $('#post-grid').yiiGridView('update', {\n        data: $(this).serialize()\n    });\n    return false;\n});\n\");\n?>\n\n<h1>Manage Posts</h1>\n\n<p>\nYou may optionally enter a comparison operator (<b>&lt;</b>, <b>&lt;=</b>, <b>&gt;</b>, <b>&gt;=</b>, <b>&lt;&gt;</b>\nor <b>=</b>) at the beginning of each of your search values to specify how the comparison should be done.\n</p>\n\n<?php echo CHtml::link('Advanced Search','#',array('class'=>'search-button')); ?>\n<div class=\"search-form\" style=\"display:none\">\n<?php $this->renderPartial('_search',array(\n  'model'=>$model,\n)); ?>\n</div><!-- search-form -->\n\n<?php $this->widget('zii.widgets.grid.CGridView', array(\n    'id'=>'post-grid',\n    'dataProvider'=>$model->search(),\n    'filter'=>$model,\n    'columns'=>array(\n        'id',\n        'cat_id',\n        'title',\n        'body',\n        'approved',\n        array(\n            'class'=>'CButtonColumn',\n        ),\n    ),\n)); ?>\n```", "```php\n<?php $this->widget('zii.widgets.grid.CGridView', array(\n  'id'=>'post-pending-grid',\n  'dataProvider'=>$model->search(),\n  'columns'=>array(\n    array(\n      'name'=>'cat_id',\n      'value'=>'$data->category->name',\n    ),\n    'title',\n    array(\n      'class'=>'CButtonColumn',\n 'template'=>'{approve} {view} {update} {delete}',\n 'buttons'=>array(\n 'approve' => array(\n 'url'=>'', //need to set this\n          'imageUrl'=>Yii::app()->request->baseUrl\n            .'/images/approve.png',\n        ),\n      ),\n    ),\n  ),\n)); ?>\n```", "```php\n'buttons'=>array(\n    'approve' => array(\n        'imageUrl'=>Yii::app()->request->baseUrl.'/images/approve.png',\n        'url'=>'Yii::app()->createUrl(\"post/approve\", array(\"id\"=>$data->id))',\n 'options' => array(\n 'ajax' => array(\n 'type' => 'post',\n 'url'=>'js:$(this).attr(\"href\")',\n 'success' => 'js:function(data) { $(\"#post-pending-grid\"). yiiGridView('update'); }'\n            )),\n    ),\n),\n```", "```php\npublic function actionApprove($id)\n{\n    $model= Post::model()->findByPk($id);\n    if (!$model)\n        throw new CHttpException(404);\n\n    $model->approved = 1;\n    $model->save();\n}\n```", "```php\npublic function actionPending()\n{\n    $model=new Post('search');\n    $model->unsetAttributes();  // clear any default values\n $model->approved = 0;\n    if(isset($_GET['Post']))\n        $model->attributes=$_GET['Post'];\n\n    $this->render('pending',array(\n        'model'=>$model,\n    ));\n}\n```", "```php\n<?php $this->widget('application.extensions.tinymce.ETinyMce', array(\n            'model'=>$model,\n            'attribute'=>'content',\n            'editorTemplate'=>'full',\n            'htmlOptions'=>array('rows'=>6, 'cols'=>50, 'class'=>'tinymce')\n)); ?>\n```", "```php\n<div id=\"mainmenu\">\n  <?php $this->widget('zii.widgets.CMenu',array(\n    'items'=>array(\n      array(\n        'label'=>'Home', \n        'url'=>array('/site/index')\n      ),\n      array(\n        'label'=>'About', \n        'url'=>array('/site/page', 'view'=>'about')\n      ),\n      array(\n        'label'=>'Contact', \n        'url'=>array('/site/contact')\n      ),\n      array(\n        'label'=>'Login', \n        'url'=>array('/site/login'), \n        'visible'=>Yii::app()->user->isGuest\n      ),\n      array(\n        'label'=>'Logout ('.Yii::app()->user->name.')',\n        'url'=>array('/site/logout'), \n        'visible'=>!Yii::app()->user->isGuest\n      )\n    ),\n  )); ?>\n</div><!-- mainmenu -->\n```", "```php\n<div id=\"mainmenu\">\n  <?php $this->widget('zii.widgets.CMenu',array(\n    'items'=>array(\n      array(\n        'label'=>'Home', \n        'url'=>array('/site/index')\n      ),\n array(\n 'label'=>'Posts', \n 'url'=>array('/post/index')\n ),\n      array(\n        'label'=>'About', \n        'url'=>array('/site/page', 'view'=>'about')\n      ),\n      array(\n        'label'=>'Contact', \n        'url'=>array('/site/contact')\n      ),\n      array(\n        'label'=>'Login', \n        'url'=>array('/site/login'), \n        'visible'=>Yii::app()->user->isGuest\n      ),\n      array(\n        'label'=>'Logout ('.Yii::app()->user->name.')',\n        'url'=>array('/site/logout'), \n        'visible'=>!Yii::app()->user->isGuest\n      )\n    ),\n  )); ?>\n</div><!-- mainmenu -->\n```", "```php\n<div id=\"mainMbMenu\">\n<?php\n  $this->widget('application.extensions.mbmenu.MbMenu', array(\n    'items'=>array(\n      array(\n        'label'=>'Home', \n        'url'=>array('/site/index')\n      ),\n      array(\n       'label'=>'Posts', \n       'url'=>array('/post/index'),\n       'items'=>array(\n          array(\n            'label'=>'All Posts', \n            'url'=>array('/post/index')\n          ),\n          array(\n            'label'=>'Add Post', \n            'url'=>array('/post/create'), \n            'visible'=>!Yii::app()->user->isGuest\n          ),\n          array(\n            'label'=>'Pending', \n            'url'=>array('/post/pending'), \n            'visible'=>Yii::app()->user->name=='admin'\n          ),\n        ),\n      ),\n      array(\n        'label'=>'About', \n        'url'=>array('/site/page', 'view'=>'about')\n      ),\n      array(\n        'label'=>'Contact', \n        'url'=>array('/site/contact')\n      ),\n      array(\n        'label'=>'Login', \n        'url'=>array('/site/login'), \n        'visible'=>Yii::app()->user->isGuest\n      ),\n      array(\n        'label'=>'Logout ('.Yii::app()->user->name.')',\n        'url'=>array('/site/logout'), \n        'visible'=>!Yii::app()->user->isGuest\n      )\n    ),\n  )); ?>\n</div><!-- mainmenu -->\n```", "```php\n'srbac' => array(\n  'userclass'=>'User',\n  'userid'=>'id',\n  'username'=>'username',\n  'delimeter'=>'@',\n  'debug'=>true,\n  'pageSize'=>10,\n  'superUser' =>'Authority',\n  'css'=>'srbac.css',\n  'layout'=>\n  'application.views.layouts.main',\n  'notAuthorizedView'=> 'srbac.views.authitem.unauthorized',\n  'alwaysAllowed'=>array(\n    'SiteLogin','SiteLogout','SiteIndex','SiteAdmin',\n    'SiteError', 'SiteContact'),\n  'userActions'=>array('Show','View','List'),\n  'listBoxNumberOfLines' => 15,\n  'imagesPath' => 'srbac.images',\n  'imagesPack'=>'noia',\n  'iconText'=>true,\n  'header'=>'srbac.views.authitem.header',\n  'footer'=>'srbac.views.authitem.footer',\n  'showHeader'=>true,\n  'showFooter'=>true,\n  'alwaysAllowedPath'=>'srbac.components',\n)\n```", "```php\n'authManager'=>array(\n  'class'=>'application.modules.srbac.components.SDbAuthManager',\n  'connectionID'=>'db',\n  'itemTable'=>'authitem',\n  'assignmentTable'=>'authassignment',\n  'itemChildTable'=>'authitemchild',\n),\n```", "```php\nclass PostController extends SBaseController\n```", "```php\npublic $layout='//layouts/column2';\npublic $breadcrumbs;\npublic $menu;\n```", "```php\n/**\n * @return array action filters\n */\npublic function filters()\n{\n    return array(\n        'accessControl', // perform access control for CRUD operations\n        'postOnly + delete', // we only allow deletion via POST request\n    );\n}\n\n/**\n * Specifies the access control rules.\n * This method is used by the 'accessControl' filter.\n * @return array access control rules\n */\npublic function accessRules()\n{\n    return array(\n        array('allow',  // allow all users to perform 'index' and 'view' actions\n            'actions'=>array('index','view'),\n            'users'=>array('*'),\n        ),\n        array('allow', // allow authenticated user to perform 'create' and 'update' actions\n            'actions'=>array('create','update'),\n            'users'=>array('@'),\n        ),\n        array('allow', // allow admin user to perform 'admin' and 'delete' actions\n            'actions'=>array('admin','delete', 'pending'),\n            'users'=>array('admin'),\n        ),\n        array('deny',  // deny all users\n            'users'=>array('*'),\n        ),\n    );\n}\n```", "```php\narray(\n  'label'=>'Pending', \n  'url'=>array('/post/pending'), \n  'visible'=>Yii::app()->user->name=='admin'\n),\n```", "```php\narray(\n  'label'=>'Pending', \n  'url'=>array('/post/pending'),\n  'visible'=>Yii::app()->user->checkAccess('Admin')\n),\n```"]