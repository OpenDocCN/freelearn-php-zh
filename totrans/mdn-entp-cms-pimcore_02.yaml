- en: '*Chapter 2*: Setting Up Your Pimcore Development Environment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：设置您的Pimcore开发环境'
- en: In the first chapter, we took a wide-angle overview of Pimcore. Now it's time
    to start getting our hands dirty with some code!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们对Pimcore进行了广泛的概述。现在是时候开始动手编写一些代码了！
- en: In this chapter, we will learn how to set up a development environment and start
    developing using Pimcore. This chapter is mandatory for having a working local
    environment and playing with Pimcore.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何设置开发环境并开始使用Pimcore进行开发。这一章对于拥有一个可工作的本地环境并尝试使用Pimcore是必需的。
- en: 'This chapter is organized as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的组织结构如下：
- en: Installing Pimcore from Composer (without Docker)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Composer从Composer安装Pimcore（不使用Docker）
- en: Installing Pimcore using Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker安装Pimcore
- en: Exploring folder conventions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索文件夹约定
- en: Let's start our Pimcore setup!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置Pimcore！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Writing code in Pimcore is very easy and does not require any paid tools. Despite
    the added value of most paid tools, we decided to use only free tools to make
    the content of this book available to you without any limitations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pimcore中编写代码非常简单，且不需要任何付费工具。尽管大多数付费工具都增加了附加值，但我们决定只使用免费工具，以便您不受任何限制地获取本书的内容。
- en: 'You will require the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下内容：
- en: Visual Studio Code as the **Integrated Development Environment** (**IDE**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 作为 **集成开发环境**（**IDE**）
- en: A decent web browser (Chrome, Firefox, or Edge, for instance)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个不错的网页浏览器（例如Chrome、Firefox或Edge）
- en: Docker (optional, but strongly recommended)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker（可选，但强烈推荐）
- en: Why use Docker?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Docker？
- en: 'If you use Docker, all the additional requirements (Apache, the necessary libraries,
    PHP, and so on) will be managed automatically. Moreover, using Docker removes
    any friction between development and the production environments, offering a virtual
    environment that''s the same at all stages. That is why, nowadays, using Docker
    is the recommended approach for developing applications, an approach that we adopt
    in this book. And that is why we based this book''s examples on this technology.
    For those of you who are not familiar with Docker, it is a system that can download
    (pull) a ready-to-go environment (container) and run it on your local PC. All
    the samples we will provide are wrapped in a `docker-compose` file (a file that
    lists and configures the container for you), so all you need to do is to activate
    the environment and Docker will download all the assets required and will start
    it transparently. So, even if you are not well-versed with Docker, all you need
    to know for the purpose of this book is the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Docker，所有额外的需求（Apache、必要的库、PHP等）都将自动管理。此外，使用Docker消除了开发和生产环境之间的任何摩擦，提供了一个在所有阶段都相同的虚拟环境。这就是为什么，如今，使用Docker是开发应用程序的首选方法，这也是我们在本书中采用的方法。因此，本书的示例基于这项技术。对于那些不熟悉Docker的读者，它是一个可以下载（拉取）一个现成的环境（容器）并在您的本地PC上运行的系统。我们将提供的所有示例都包含在一个
    `docker-compose` 文件中（一个为您列出和配置容器的文件），所以您需要做的只是激活环境，Docker将下载所有所需的资产并透明地启动它。因此，即使您对Docker不太熟悉，为了本书的目的，您只需要了解以下内容：
- en: '`docker-compose.yml` file is contained, run `docker-compose up`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 `docker-compose.yml` 文件，运行 `docker-compose up`。
- en: '**Stop your environment**: Press *Ctrl+C* on the terminal where Docker Compose
    was launched; this will stop everything.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止您的环境**：在启动Docker Compose的终端上按 *Ctrl+C*；这将停止一切。'
- en: '`docker-compose exec php <command>` for running a command inside the container
    named `php` (in our setup, this is the Pimcore one), or just enter the container
    with bash and launch whatever you want by means of `docker-compose exec php bash`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose exec php <command>` 用于在名为 `php` 的容器内运行命令（在我们的设置中，这是Pimcore的容器），或者只需使用bash进入容器，并通过
    `docker-compose exec php bash` 启动您想要的任何内容。'
- en: 'For install Docker, which is available on Windows, Mac, and Linux, just navigate
    to the official documentation: [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安装Docker，它可在Windows、Mac和Linux上使用，只需导航到官方文档：[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)。
- en: For manual installation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于手动安装
- en: If you want to install Pimcore manually, you will have to configure your local
    machine (or server) and all its dependencies by hand. This is only if you're not
    using Docker, so if you want to use Docker, you can skip this section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动安装Pimcore，您将不得不手动配置您的本地机器（或服务器）及其所有依赖项。这仅适用于您不使用Docker的情况，所以如果您想使用Docker，您可以跳过这一部分。
- en: The only part of the book where we use this manual approach is in the following
    section, *Installing Pimcore with Composer (without Docker)*, where we will explain
    how to carry out a Pimcore installation from scratch.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书唯一使用这种手动方法的章节是以下部分，*使用Composer安装Pimcore（不使用Docker）*，我们将解释如何从头开始执行Pimcore的安装。
- en: 'For a manual installation, you need to install all the dependencies manually,
    including Composer, Apache, MySQL, PHP, and the PHP libraries. The prerequisites
    may change with the arrival of new Pimcore versions and technology updates. So,
    instead of adding a copy of the official system requirements of Pimcore, we have
    instead provided a link to the official page with the exact specifications: [https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Requirements.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Requirements.html).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于手动安装，您需要手动安装所有依赖项，包括Composer、Apache、MySQL、PHP以及PHP库。这些先决条件可能会随着新Pimcore版本和技术更新的到来而改变。因此，我们不是添加Pimcore的官方系统要求副本，而是提供了指向包含确切规格的官方页面的链接：[https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Requirements.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Requirements.html)。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Pimcore supports MySQL and the MariaDB database engine, which is, in fact, a
    fork of MySQL. In this chapter, we refer to MySQL because it is the most common
    option. We used the official `docker-compose` file based on MariaDB. To avoid
    confusion, please consider MySQL and MariaDB as one and the same in this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore支持MySQL和MariaDB数据库引擎，实际上MariaDB是MySQL的一个分支。在本章中，我们使用MySQL作为参考，因为它是最常见的选项。我们基于MariaDB使用了官方的`docker-compose`文件。为了避免混淆，请在本章中将MySQL和MariaDB视为同一事物。
- en: 'All the source code is contained in the official GitHub repository for this
    book, which you can find at this URL: [https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore).
    In this repository, you will find a folder for each chapter. Inside each folder,
    there will be a `Readme` file with all the instructions for running the code.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的所有源代码都包含在官方GitHub仓库中，您可以通过此URL找到：[https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore](https://github.com/PacktPublishing/Modernizing-Enterprise-CMS-using-Pimcore)。在这个仓库中，您将找到每个章节的文件夹。在每个文件夹内，将有一个包含运行代码所有说明的`Readme`文件。
- en: For those of you who are using Docker as the environment, there are no restrictions
    for you regarding the operating system. For Docker compatibility and system requirements,
    you can check the **Download** section of the official Docker website.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Docker作为环境的人来说，关于操作系统没有限制。有关Docker兼容性和系统要求，您可以查看官方Docker网站上的**下载**部分。
- en: Installing Pimcore from Composer (without Docker)
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Composer安装Pimcore（不使用Docker）
- en: Even though we encourage the use of Docker and the book is based on Docker containers,
    we should not fail to explain how to perform a vanilla installation. As you will
    learn after following all the steps, the process of installing Pimcore the vanilla
    way is basically the same as what is done internally by the Docker container.
    The most important difference is that using Docker, you do not have to grapple
    with the server, dependencies, and so on. This is because Pimcore is released
    through **Composer**, the PHP package manager. This makes the installation the
    same in all possible scenarios. If you are inside a Docker container, a virtual
    machine, or your PC, Composer is the same.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们鼓励使用Docker，本书也是基于Docker容器编写的，但我们不应忽视解释如何进行纯安装。正如您在完成所有步骤后将会了解到的，以纯方式安装Pimcore的过程基本上与Docker容器内部执行的操作相同。最重要的区别是，使用Docker，您无需与服务器、依赖项等打交道。这是因为Pimcore是通过**Composer**（PHP包管理器）发布的。这使得安装在各种可能的情况下都是相同的。如果您在Docker容器内、虚拟机或您的PC上，Composer都是一样的。
- en: 'So, all you need to do to install Pimcore in your local environment is to run
    a few commands in the terminal after you have installed all the required dependencies
    mentioned in the *Technical requirements* section:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您要在本地环境中安装Pimcore，只需在安装了*技术要求*部分中提到的所有必需依赖项之后，在终端中运行几个命令即可：
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This book uses a ready-to-use Docker container for this process. We are including
    this section to explain how a low-level installation of Pimcore works, but if
    you are interested in starting Pimcore quickly, you can skip this section and
    go to *Installing Pimcore using Docker*. Moreover, unlike Docker, using Composer
    in your local environment has a lot of dependencies (MySQL, Composer, and others)
    and needs complex PHP tuning. This is well covered by the Pimcore documentation
    and you can follow the official guidance for that. In this section, we will cover
    Pimcore's installation, assuming that you already have your environment set up
    and you just need to install Pimcore.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder in your filesystem. We assume that this folder is named `my-project`.
    There are no restrictions from Pimcore about where you can create that folder.
    It depends on your local settings (that is, it has to be accessible to your web
    server). For example, when using Apache, a common value is `/var/www/html`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you do not have one yet, you will need to create a database. To do this,
    type the following command in your terminal:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Edit your Apache virtual host. It needs to point to the web folders inside
    `my-project`, so your Apache file should have the document root set as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that Pimcore needs to be installed outside of the document root. So, if
    you installed it inside `my-project`, you cannot use this folder as the document
    root. This, besides causing functional issues, will expose you to security issues
    in terms of allowing access to protected content. A complete configuration for
    Apache can be found here: [https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/Apache_Configuration.html](https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/Apache_Configuration.html).'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set the filesystem permissions. The Apache user (or the Nginx user, depending
    on which web server you are using) will need to access all the files inside the
    Pimcore directory and will need additional write permission for the `/var` and
    `/public/var` folders. In most cases, this is done by entering the following code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Navigate to the Pimcore directory and type the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Launch the Pimcore installation by typing the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will be prompted to enter the username and password of the Pimcore administration
    user, and then you will be asked to confirm the installation.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final step is to set up the maintenance job. Like many platforms, Pimcore
    needs to perform periodic maintenance tasks, such as log rotation and cleaning
    temporary or old data. Pimcore''s guidelines ask us to execute this task every
    5 minutes to make sure the environment is always efficient. To do this, we need
    to add a `cron` job. Type the following:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, enter the following content into `crontab`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The configuration activates the maintenance job by running the `console` executable,
    with the `maintenance` parameter, which invokes the standard Pimcore maintenance
    job.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 配置通过运行带有 `maintenance` 参数的 `console` 可执行文件来激活维护任务，这调用了标准的 Pimcore 维护任务。
- en: In this section, we introduced the Pimcore installation process. These instructions
    are quite easy to follow, but you need to have the hosting environment already
    installed. Installing Apache, MySQL, and configuring the network part is standard
    for most developers, but some system engineering knowledge is required that not
    all developers have (and maybe do not want to learn). Moreover, with this setup,
    you may have to replicate most of your jobs each time you set up a new project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了 Pimcore 的安装过程。这些说明非常容易遵循，但你需要已经安装了托管环境。安装 Apache、MySQL 以及配置网络部分对于大多数开发者来说是标准的，但需要一些系统工程知识，并非所有开发者都具备（也许他们也不想学习）。此外，使用这种设置，你可能每次设置新项目时都需要复制你大部分的工作。
- en: In the next section, we will learn how things are so much easier with Docker,
    seeing how you can do the same as what we achieved here (and maybe more) in just
    two commands.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 Docker 使事情变得如此简单，看看你如何只需两个命令就能完成我们在这里所实现的事情（也许还有更多）。
- en: Installing Pimcore using Docker
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 安装 Pimcore
- en: Docker is the leading solution for developing containerized applications, allowing
    developers to configure a virtual environment in their PC that can easily be transferred
    to a server and be used by the user. In fact, using Docker is the modern way to
    develop web applications. It accelerates the setup, reduces the friction between
    environments, and ensures an easy-to-use, replicable system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是开发容器化应用程序的领先解决方案，允许开发者在其 PC 上配置一个虚拟环境，该环境可以轻松地转移到服务器上并由用户使用。实际上，使用 Docker
    是开发 Web 应用程序的现代方式。它加速了设置过程，减少了环境之间的摩擦，并确保了一个易于使用、可复制的系统。
- en: Pimcore embraces Docker development and has released Docker images that are
    ready to be used. Moreover, it has released a `docker-compose` file that orchestrates
    all the containers needed to run Pimcore.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore 拥抱 Docker 开发，并已发布可用于使用的 Docker 镜像。此外，它还发布了一个 `docker-compose` 文件，该文件协调运行
    Pimcore 所需的所有容器。
- en: Using Docker, you will be able to set up and start Pimcore in minutes. Using
    the script provided in the GitHub repository for this book, most of the process
    is easy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker，你将能够在几分钟内设置和启动 Pimcore。使用本书 GitHub 仓库中提供的脚本，大多数过程都很简单。
- en: 'The first step is to clone the Pimcore repository and navigate to the `2\.
    Setting up Pimcore Development Environment` folder. You can copy the files from
    there and paste them into your target folder. The files are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是克隆 Pimcore 仓库并导航到 `2. 设置 Pimcore 开发环境` 文件夹。你可以从那里复制文件并将它们粘贴到你的目标文件夹中。文件如下：
- en: '`docker-compose.yml`: This contains the definition of the container; it is
    quite similar to the default Pimcore file.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`：这包含容器的定义；它与默认的 Pimcore 文件非常相似。'
- en: '`install.sh`: This contains the installation script, which is an automated
    version of the installation steps from the official guide.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install.sh`：这包含安装脚本，它是官方指南中安装步骤的自动化版本。'
- en: Let's see these two files and how we can use them.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这两个文件以及我们如何使用它们。
- en: The docker-compose file
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker-compose 文件
- en: 'The `docker-compose` file contains many container definitions for enabling
    all the required components. The first one is the `database` component:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose` 文件包含许多容器定义，用于启用所有必需的组件。第一个是 `database` 组件：'
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the previous snippet, we have an instance of MariaDB tuned for Pimcore usage.
    Using the environment variables, we set the most important parameters of the database:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我们有一个针对 Pimcore 使用的 MariaDB 实例。使用环境变量，我们设置了数据库最重要的参数：
- en: 'The credentials of the root user: `MYSQL_ROOT_PASSWORD`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根用户凭据：`MYSQL_ROOT_PASSWORD`
- en: 'The database name: `MYSQL_DATABASE`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库名称：`MYSQL_DATABASE`
- en: 'The credentials of the service user: `MYSQL_USER` and `MYSQL_PASSWORD`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务用户凭据：`MYSQL_USER` 和 `MYSQL_PASSWORD`
- en: With this configuration, we need to connect to the host database using Pimcore/Pimcore
    credentials.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，我们需要使用 Pimcore/Pimcore 凭据连接到主机数据库。
- en: 'The second container to take into account is the Pimcore container. Refer to
    the following code snippet from the `docker-compose` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的第二个容器是 Pimcore 容器。请参考以下来自 `docker-compose` 文件的代码片段：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The name of this container is `php` because Pimcore relies on a PHP image. Using
    volume mapping, we mount the folder where the `docker-compose` file is located
    on the Pimcore directory inside the container.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个容器的名字是`php`，因为Pimcore依赖于PHP镜像。使用卷映射，我们在容器内的Pimcore目录上挂载了`docker-compose`文件所在的文件夹。
- en: The installation file
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装文件
- en: The installation file is just a set of commands that you should run individually,
    but condensed into a single script. This prevents any manual errors and reduces
    the effort needed to set up a new environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 安装文件只是一组您应该单独运行的命令，但被压缩成单个脚本。这可以防止任何手动错误，并减少设置新环境所需的努力。
- en: 'The script covers the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本涵盖了以下步骤：
- en: 'The first step is the Pimcore download. To do this, we need to add the following
    command to the script:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是Pimcore下载。为此，我们需要将以下命令添加到脚本中：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The problem here is with the container image settings. It is created for listening
    to the `/var/www/html/public` folder, so the Pimcore installation must be done
    at the `/var/www/html/` level. The problem is that the Composer command will need
    a folder to download the files from. This will create a subfolder and necessitate
    a change to the default container settings. So, the most common approach is to
    download Pimcore in a temporary folder and then move the contents of the temporary
    folder to the standard Apache folder. This trick is done using the following commands:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的问题是容器镜像设置。它是为监听`/var/www/html/public`文件夹而创建的，因此Pimcore的安装必须在`/var/www/html/`级别进行。问题是Composer命令需要一个文件夹来下载文件。这将创建一个子文件夹，并需要更改默认的容器设置。所以，最常见的方法是在临时文件夹中下载Pimcore，然后将临时文件夹的内容移动到标准的Apache文件夹中。这个技巧使用以下命令执行：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we need to fix the memory usage of PHP. Pimcore requires 512 MB for the
    installation process, and in most cases, the default value from PHP is not sufficient.
    What we will do in our script is increase the memory limit by changing the configuration
    files with the following commands:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要修复PHP的内存使用。Pimcore在安装过程中需要512 MB，而在大多数情况下，PHP的默认值是不够的。在我们的脚本中，我们将通过更改以下命令中的配置文件来增加内存限制：
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we are ready to start the Pimcore installation. We will install Pimcore
    using the settings hardcoded into the `docker-compose` file. To do this, we need
    to add the following command to our script:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始Pimcore的安装。我们将使用硬编码在`docker-compose`文件中的设置来安装Pimcore。为此，我们需要将以下命令添加到我们的脚本中：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we have to remember that all the commands we have launched so far
    have been done on behalf of the root user. So, all the files and folders created
    belong to the root user and group. The user running the web server will be different
    and will belong to the `www-data` group. This means that the web server cannot
    write or read the files, based on the `chmod` settings. That''s why we need to
    reset permissions at the end of this process. The following line of code does
    that:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须记住，我们迄今为止启动的所有命令都是以root用户的身份执行的。因此，所有创建的文件和文件夹都属于root用户和组。运行Web服务器的用户将不同，并将属于`www-data`组。这意味着Web服务器无法根据`chmod`设置写入或读取文件。这就是为什么我们需要在过程结束时重置权限。以下代码行执行此操作：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The final version of the script is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最终版本如下：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding script is contained in the source code and is called `install.sh`.
    You can just copy and paste it to your source code directory and follow the instructions
    in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本包含在源代码中，被称为`install.sh`。您只需将其复制粘贴到源代码目录中，并遵循下一节的说明。
- en: Starting Pimcore with Docker
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker启动Pimcore
- en: 'Now that we have understood how Pimcore using Docker works, we can use our
    script to start Pimcore:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Pimcore如何使用Docker工作，我们可以使用我们的脚本启动Pimcore：
- en: The first step is to navigate to the folder with the Pimcore setup files; in
    our case, the folder is called `/my/project`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是导航到包含Pimcore设置文件的文件夹；在我们的案例中，文件夹被称为`/my/project`。
- en: 'Open the terminal here and run the following command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里打开终端并运行以下命令：
- en: '[PRE16]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, open another terminal and run the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开另一个终端并运行以下命令：
- en: '[PRE17]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, open a web browser and enter the URL [http://localhost/](http://localhost/).
    You will see the standard Pimcore page, as indicated in the following screenshot:![Figure
    2.2 – The Pimcore welcome page
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开一个网页浏览器并输入URL [http://localhost/](http://localhost/)。您将看到标准的Pimcore页面，如下面的截图所示：![Figure
    2.2 – Pimcore欢迎页面
- en: '](img/Figure_2.02_B17073.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_2.02_B17073.jpg](img/Figure_2.02_B17073.jpg)'
- en: Figure 2.2 – The Pimcore welcome page
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.2 – Pimcore欢迎页面
- en: 'Now we can test the credential used during the setup by visiting [http://localhost/](http://localhost/)`admin`
    in the address bar. You will be redirected to the login page and you will be able
    to enter credentials and log in to the administrative section of Pimcore. The
    following screenshot shows the login page:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过访问地址栏中的`http://localhost/`admin来测试设置期间使用的凭证。您将被重定向到登录页面，并能够输入凭证并登录到Pimcore的管理部分。以下截图显示了登录页面：
- en: '![Figure 2.3 – The Pimcore login page'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.3 – Pimcore登录页面'
- en: '](img/Figure_2.03_B17073.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_2.03_B17073.jpg)'
- en: Figure 2.3 – The Pimcore login page
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – Pimcore登录页面
- en: From now on, performing *Step 2* will be enough to run Pimcore!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，执行*步骤2*就足以运行Pimcore！
- en: What we learned in this section was how to install Pimcore using Docker in minutes.
    As you saw in the *Starting Pimcore with Docker* section, we just ran two commands
    and all the processes were set. This reduces the time and effort needed from hours
    (installing and configuring Apache, Redis, MySQL, and so on) to minutes. Now it's
    clear why we decided to use Docker in this book.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中我们学到的是如何在几分钟内使用Docker安装Pimcore。如您在*使用Docker启动Pimcore*部分所看到的，我们只运行了两个命令，所有进程都已设置。这减少了从小时（安装和配置Apache、Redis、MySQL等）到分钟的时间和精力。现在很清楚为什么我们决定在这本书中使用Docker。
- en: In the next section, we will enter the Pimcore folder structure and we will
    learn about what is inside each folder.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将进入Pimcore文件夹结构，并了解每个文件夹中有什么内容。
- en: Exploring folder conventions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索文件夹约定
- en: In the previous section, we downloaded and installed Pimcore on our PC. Before
    starting with Pimcore development, it's important to understand how the files
    are structured inside the filesystem.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们在我们的PC上下载并安装了Pimcore。在开始Pimcore开发之前，了解文件系统内部的文件结构非常重要。
- en: 'Let''s start by exploring our filesystem. In the following screenshot, we will
    see the Pimcore folder expanded:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索我们的文件系统开始。在以下截图中，我们将看到Pimcore文件夹已展开：
- en: '![Figure 2.4 – The Pimcore folders'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.4 – Pimcore文件夹'
- en: '](img/Figure_2.04_B17073.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_2.04_B17073.jpg)'
- en: Figure 2.4 – The Pimcore folders
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – Pimcore文件夹
- en: 'The Pimcore folder structure is very similar to the Symphony standard. Let''s
    look at the first-level content:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Pimcore的文件夹结构非常类似于Symphony标准。让我们看看第一级内容：
- en: '`bin`: This folder contains the executables.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这个文件夹包含可执行文件。'
- en: '`config`: This folder contains the YAML configuration files.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：这个文件夹包含YAML配置文件。'
- en: '`src`: This folder contains the source code related to your project.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这个文件夹包含与您的项目相关的源代码。'
- en: '`var`: This folder contains data saved from Pimcore, such as logs or cache
    data.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`：这个文件夹包含从Pimcore保存的数据，如日志或缓存数据。'
- en: '`vendor`: This is the standard folder used by Composer to store application
    requirements.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`：这是Composer用于存储应用程序要求的标准文件夹。'
- en: '`public`: This is your document root.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`：这是您的文档根目录。'
- en: '`templates`: This is the folder that contains all the template files.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`：这是包含所有模板文件的文件夹。'
- en: '`translations`: This is the folder for translation files.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translations`：这是翻译文件的文件夹。'
- en: Let's look at these in detail, one by one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一详细查看这些内容。
- en: The config folder
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件夹
- en: This contains all the YAML configuration files and settings. For example, inside
    `/config/local/database.yml`, you will find the connection settings for accessing
    the database. As an additional example, if you want to manage routing, override
    services, or tune security settings, you can go here and play with the configuration
    files (the `config.yml` file is the main configuration file and is usually split
    into submodules, such as `routing.yml`, `services.yml`, and `security.yml`).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含所有YAML配置文件和设置。例如，在`/config/local/database.yml`中，您将找到访问数据库的连接设置。作为额外的例子，如果您想管理路由、覆盖服务或调整安全设置，您可以在这里玩配置文件（`config.yml`文件是主要配置文件，通常分为子模块，如`routing.yml`、`services.yml`和`security.yml`）。
- en: The templates folder
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板文件夹
- en: This folder contains the templates. You can have one subdirectory for each bundle.
    Adding a file into the bundle folder will override the default template file shipped
    with the bundle. This override mechanism is a standard Symfony feature, and all
    you need to override a template file is to create a folder inside `templates`
    with the name of the bundle and then replicate the folder structure inside the
    bundle.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '这个文件夹包含模板。你可以为每个包创建一个子目录。将文件添加到包文件夹将覆盖包附带默认模板文件。这种覆盖机制是标准的Symfony功能，要覆盖模板文件，你只需要在`templates`内部创建一个以包命名的文件夹，并在包内部复制文件夹结构。 '
- en: The bin folder
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bin文件夹
- en: This folder contains the binaries. By default, it contains the console executables
    only, but you can add your own scripts here. The console executables form the
    program that we use to run maintenance jobs. Adding more jobs to Pimcore won't
    require you to create multiple executables; you will just need to run a command
    such as `./bin console <myjobname>`. That is why, in most cases, this folder doesn't
    contain anything more than the console file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含二进制文件。默认情况下，它只包含控制台可执行文件，但你可以在这里添加自己的脚本。控制台可执行文件构成了我们用来运行维护任务的程序。向Pimcore添加更多任务不需要你创建多个可执行文件；你只需要运行一个如`./bin
    console <myjobname>`的命令。这就是为什么在大多数情况下，这个文件夹除了控制台文件之外不包含任何其他内容。
- en: The src folder
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: src文件夹
- en: Inside the `src` folder, you will also find the `Kernel.php` file, which represents
    your application kernel. The `Kernel` class is the main entry point of the Symfony
    application configuration, and as such, is stored in the `src/` directory.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src`文件夹内部，你还会找到`Kernel.php`文件，它代表你的应用程序内核。`Kernel`类是Symfony应用程序配置的主要入口点，因此存储在`src/`目录中。
- en: The var folder
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: var文件夹
- en: The `var` folder is designed to contain all the private Pimcore files and is
    divided into many subfolders, each one storing a different kind of file. This
    folder must be writable from the web server.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`文件夹被设计用来包含所有私有的Pimcore文件，并且被划分为多个子文件夹，每个子文件夹存储不同类型的文件。这个文件夹必须可以从网络服务器进行写入。'
- en: 'This folder is composed of the following subfolders:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹由以下子文件夹组成：
- en: '`application-logger`: Here, Pimcore saves the files from the application logger.
    The application logger is the system that traces events relevant to the application.
    Such logs are stored here and can be read from the Pimcore administrative interface.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application-logger`：在这里，Pimcore保存应用程序日志器生成的文件。应用程序日志器是追踪与应用程序相关事件的系统。这些日志存储在这里，并且可以从Pimcore管理界面中读取。'
- en: '`cache`: This is the Symfony cache folder. Here you will find all the generated
    files.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache`：这是Symfony缓存文件夹。在这里，你可以找到所有生成的文件。'
- en: '`classes`: This contains files related to classes. In fact, each class definition
    is stored in many files inside this folder.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classes`：这个文件夹包含与类相关的文件。实际上，每个类的定义都存储在这个文件夹内的多个文件中。'
- en: '`config`: This contains the base settings files that are overridden and extended
    from the `app/config` structure.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：这个文件夹包含从`app/config`结构覆盖和扩展的基本设置文件。'
- en: '`email`: This stores the history of sent transactional emails.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：这里存储了发送的交易性电子邮件的历史记录。'
- en: '`installer`: This relates to the installer kernel. It contains cached data
    and other information related to the installer.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installer`：这与安装器内核相关。它包含缓存数据和与安装器相关的其他信息。'
- en: '`logs`: This folder contains the logs from Apache and PHP. It is related to
    the Docker installation.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`：这个文件夹包含Apache和PHP的日志。它与Docker安装相关。'
- en: '`recyclebin`: This contains the data deleted from the user.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recyclebin`：这个文件夹包含从用户那里删除的数据。'
- en: '`tmp`: Used for temporary file storage, such as for creating dynamic minified
    JavaScript files.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp`：用于临时文件存储，例如创建动态压缩的JavaScript文件。'
- en: The vendor folder
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: vendor文件夹
- en: This folder is the standard Composer folder, so there isn't any real need to
    spend more time talking about it. The Pimcore core bundle is stored here just
    like any other package.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹是标准的Composer文件夹，因此没有必要花费更多时间来讨论它。Pimcore核心包就像任何其他包一样存储在这里。
- en: The public folder
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共文件夹
- en: This is the document root of your application, and it is exposed to the web.
    This folder is protected by a `.htaccess` file and implements some rewriting rules.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的应用程序的文档根目录，并且它暴露给网络。这个文件夹由`.htaccess`文件保护，并实现了某些重写规则。
- en: 'This folder is composed of the following subfolders:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹由以下子文件夹组成：
- en: '`bundles`: You will find a folder for each bundle; each of these subfolders
    has a symbolic link to the folder inside the bundle (so, `/src/bundlename` will
    be visible in `/public/bundlename`). This is because you can change the files
    inside the bundle and see the change without any copying or compilation having
    to take place.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bundles`：您将为每个包找到一个文件夹；这些子文件夹中的每个都指向包内部的文件夹的符号链接（因此，`/src/bundlename` 将在 `/public/bundlename`
    中可见）。这是因为您可以在包内部更改文件，而无需复制或编译即可看到更改。'
- en: '`var`: This contains the uploaded files: images, video files, or simple attachments.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`：此文件夹包含上传的文件：图像、视频文件或简单的附件。'
- en: This folder also contains the `index.php` file, which contains the PHP application
    where all requests are routed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件夹还包含 `index.php` 文件，其中包含所有请求的路由的 PHP 应用程序。
- en: In this section, we learned how the folders and files of Pimcore are arranged
    inside the source code. This was important to cover so that you can use the source
    code samples without any difficulty. Now you won't be lost in [*Chapter 4*](B17073_04_ePub_RK.xhtml#_idTextAnchor083),
    *Creating Documents in Pimcore*, when we will need this feature to start a working
    Pimcore's instance and view the examples shown in this book.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了 Pimcore 的文件夹和文件如何在源代码内部组织。这一点非常重要，以便您能够无任何困难地使用源代码示例。现在，当我们需要这个功能来启动一个正在运行的
    Pimcore 实例并查看本书中展示的示例时，您不会在[*第 4 章*](B17073_04_ePub_RK.xhtml#_idTextAnchor083)“在
    Pimcore 中创建文档”中迷失方向。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install and start a Pimcore installation
    from scratch. Using Docker images, we reduced the complexity of the first installation,
    we made our environment independent from different operating systems, and we managed
    to speed up the setup time. Just by typing a few commands in the terminal, all
    the complex processes were done automatically. This is not only valid for a development
    environment, but also for production. Moreover, using a container will keep things
    easy if you would want to move to the cloud. Pimcore can also be installed in
    a regular environment by taking charge of all the dependency configurations.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始安装和启动 Pimcore 环境。通过使用 Docker 镜像，我们简化了首次安装的复杂性，使我们的环境独立于不同的操作系统，并成功缩短了设置时间。只需在终端中输入几个命令，所有复杂的流程都会自动完成。这不仅适用于开发环境，也适用于生产环境。此外，如果您想迁移到云端，使用容器将使事情变得简单。Pimcore
    还可以通过负责所有依赖配置来在常规环境中安装。
- en: In the following chapters, we will use this knowledge to run the examples provided
    in this book. Moreover, the installation script provided can be used as a quick
    start guide if you want to start a new project on your own and play in the real
    world with Pimcore. In the next chapter, we will discover the administration UI
    of Pimcore, and we will learn how to move between menu items. After this step,
    you will be able to navigate Pimcore's functionalities, which is fundamental for
    following the books' tutorials.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将利用这些知识来运行本书中提供的示例。此外，提供的安装脚本可以作为快速入门指南使用，如果您想自己开始一个新项目并在现实世界中与 Pimcore
    玩耍。在下一章中，我们将发现 Pimcore 的管理界面，并学习如何在菜单项之间切换。完成这一步后，您将能够导航 Pimcore 的功能，这对于遵循本书的教程是基本要求。
