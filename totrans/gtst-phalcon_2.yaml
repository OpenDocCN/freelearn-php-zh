- en: Chapter 2. Setting Up a Phalcon Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing the code for our blog, we are going to take a look at
    the skeleton we need to have in place for our project. First, we will walk through
    creating the folder structure and necessary files manually. After we have finished
    doing it the hard way, we will learn how to use Phalcon Developer Tools in order
    to do all of this automatically with a few simple terminal commands. Our code
    will change and morph as we go. This is because as we delve deeper into the framework,
    we will be refactoring our old code to handle new features that we want to add
    to our blog application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The folder structure of Phalcon project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Phalcon .htaccess file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a .ini file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a Phalcon bootstrap file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Phalcon Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike many PHP frameworks, Phalcon doesn''t care about your folder structure.
    You can create any folder structure you want, but for our blog tutorial, we are
    going to use a basic MVC-structured site. There are many different variations
    of the folder structure in various frameworks. We will start out with the following
    code snippet, which has the same structure that the Phalcon Developer Tools will
    be generating for us later in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The only executable file we have in our `public` folder is our bootstrap file,
    `index.php`, which we will learn about later in this chapter. Everything else
    are static files loaded by the browser. In our `app` folder, we have folders for
    our `models`, `views`, and `controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: There are MVC file structures smaller than this, and there are structures that
    contain the `template`, `partial`, and `module` folders. As your project gets
    bigger and more complicated, you may want to switch to a multimodule folder structure,
    about which you can read at [http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html).
    And for simpler sites, such as a basic API, you may want to opt for a much smaller
    structure such as the micro application structure. You can find an example of
    the micro MVC structure at [http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html](http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using .htaccess files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use `.htaccess` files in our application, and for this step,
    you need to make sure `mod_rewrite` is enabled on your Apache server. On many
    Apache installations, this mod is installed and enabled by default. If `mod_rewrite`
    is not enabled on your server, you will need to enable it, which could involve
    running the `sudo a2enmod rewrite` command or uncommenting the `LoadModule mod_rewrite.so`
    line in the `httpd.conf` or `apache2.conf` file. It all depends on your Apache
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: For Nginx configuration, you can read the section at the end of this chapter
    and skip using `.htaccess` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to tell Apache how to serve our Phalcon project. First, we will
    have to hide our `app` folder from public view and redirect all visitors to our
    `public` folder. Therefore, we need to create a `.htaccess` file for our project''s
    root folder, the `phalconBlog` folder. So, open a text editor, create a new file,
    and insert the following lines of code in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save this file as `.htaccess` in the `phalconBlog` folder. Now, all visitors
    to the `phalconBlog` folder will be directed to the `public` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This is not the only option when it comes to serving our `public` folder in
    Apache. We could edit our Apache configuration file for the virtual host serving
    our project and set the document root to our `public/` directory. In this case,
    we would not need this first `.htaccess` file, only the `.htaccess` file we are
    about to create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Phalcon has beautiful URLs built in. In other words, URLs can have a more appealing
    structure; for example, [http://www.blog.com/post/1](http://www.blog.com/post/1)
    is better than [http://www.blog.com/?post=1](http://www.blog.com/?post=1). Since
    every visit must go through the bootstrap file that we will learn about next,
    we will also have to create a `.htaccess` file for the `public` folder. So, create
    the file in the `public` folder and insert the following lines of code in the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This `.htaccess` file tells Apache to load a file or folder in the `public`
    folder if it exists, and if not, send the visitor to the `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `index.php` file that we are redirecting all of our requests to is the cornerstone
    of our application. In this file, we load any configuration we set up and put
    together the various pieces of the Phalcon framework into a complete application.
    In this step, we will start with a simple bootstrap file and then make it more
    configurable in the next step with the use of a `.ini` file.
  prefs: []
  type: TYPE_NORMAL
- en: Handling exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we want to make sure we catch any exceptions our application may throw
    at us. So, open up your text editor or IDE and create an `index.php` file and
    place it in the `public` directory. In the `index.php` file, insert the following
    code snipppet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first thing you should notice is that we haven't included a file in our
    application, yet we can still reference a Phalcon exception. Phalcon is a PHP
    extension and is now part of your PHP installation. There is no need to include
    any PHP files. We are using a PHP try-catch construction to catch any exception
    that Phalcon may throw.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phalcon uses a Dependency Injection container to handle all the services you
    may need to use in your application. Whenever our application needs one of these
    services, it asks for it by name from the container. Phalcon is designed to be
    decoupled, meaning that you can use all or part of its features rather than being
    required to use a specific base set of services. This Dependency Injection container,
    or DI, is the glue that holds all of our chosen services together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a DI. We will be using Phalcon''s `FactoryDefault` DI. So, in
    the `try` brackets of your `index.php`, insert the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So, we have created our DI. Next, we register our view service with it, telling
    Phalcon where to find our view files. Now, let's set the model and controller
    folders for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Autoloaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we add our autoloaders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will tell Phalcon where to find our controller and model files. Currently,
    we are using only two folders in our blog project, but it is possible to load
    more folders with Phalcon Loader if we need to. We also created `library` and
    `plugin` folders, which we will be using later.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we only have to add a couple more lines of code to initialize our application
    to handle requests. We create an instance of `Phalcon\MVC\Application` and name
    it `$application`. Then, we invoke `$application->handle->getContent()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have hardcoded everything into our bootstrap file, we are going
    to change it up a bit and make our application a bit more flexible. Also, we are
    going to use the classic `.ini` file as the configuration file for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using a configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a configuration file gives the developer a simple place to edit various
    settings on a website that might otherwise change in different environments. If
    you move a project from your localhost to another server, all you have to do is
    edit this file, and the application should run wherever you put it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a standard PHP array to store Phalcon configurations, JSON files,
    or the `.ini` file format. We will be using a `.ini` file for readability, but
    the PHP array format is native to PHP and loads quicker. Later in this book, we
    will add more settings to our file, but for now, our project''s folder paths look
    like good additions to our `.ini` file. Most likely, we won''t have to change
    these settings, but it gives us the option to change our mind later. So, you should
    create a new folder, `config`, in the `app` folder of your blog project, and create
    a new file, `config.ini`, in your editor and save it in this folder. In this file,
    add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a `.ini` file hanging out all alone. It's time to load it in our
    bootstrap file. So, open up the `index.php` file again. We are going to make some
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: The `Phalcon\Config` component can currently read the configuration files of
    either the `.ini` or PHP array types. For our project, it is `.ini` all the way.
    Right after you create the DI, you are going to load the `.ini` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have our configuration file loaded, but it's not doing anything; it's
    just taking up space. It is time to replace our hardcoded file paths with our
    configuration data. The only path we cannot replace is the location of the `.ini`
    file itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are going to take the following bit of code out of our index file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Each heading in our `.ini` file became a child object of our `$config` object,
    and each setting under the header became a variable in that Phalcon child object.
    Now that we have a `.ini` file, we can choose a few deployment methods to ensure
    our application will run on each environment we need to put it on. We could create
    a `dev.ini` file for our development server and a `prod.ini` file for our production
    server. Our bootstrap file could then load a `.ini` file based on an Apache environmental
    variable. Alternatively, we could use a build script that uploads the correct
    `.ini` file to the correct environment.
  prefs: []
  type: TYPE_NORMAL
- en: Phalcon Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have done everything the hard way to get a feel of how Phalcon works,
    let's try doing the same in a quick, easy way. Phalcon Developer Tools are a set
    of tools that will help you get your project up and running quickly by generating
    a skeleton code for you. We will be using these in the upcoming chapters to generate
    a lot of things and then review the files that were created to learn how they
    work.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to install the developer tools, no problem. The current skeleton
    we created manually will work as a base for the rest of the application with a
    few modifications that we will cover in this section. Phalcon is a very flexible
    framework. We will also be going through everything we generate with the developer
    tools in sufficient detail so that you will be able to create all your code manually
    if you so choose to. But I would advise you to use developer tools wherever you
    can and then fill in the gaps with custom code. It can really shorten your development
    time. First, let's install these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Phalcon Developer Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phalcon Developer Tools can be downloaded from the official Git repository available
    at [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools).
    Alternatively, you can use Composer to install it as a library in your project.
    The reason why we have a `library` folder in our project's `app` folder is so
    that we can store PHP libraries that we may need in our application. Composer
    is a PHP package manager that will take care of these libraries with only a few
    commands. You can read more about Composer at [http://getcomposer.org/](http://getcomposer.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create a new file, `composer.json`, in the `library` folder, add the
    following lines of code in it, and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is simply a `.json` file telling Composer that we want to include Phalcon
    Developer Tools in our project. If you have `curl` installed on your computer,
    open a terminal or an SSH window and browse to your `library` folder located at
    `phalconBlog` and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In Linux, you will most likely have `curl` installed. If you do not, you can
    simply download `composer.phar` from [http://getcomposer.org/download/](http://getcomposer.org/download/)
    and put the file in your `lib` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we tell Composer to add Phalcon Developer Tools in our `lib` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will work for you if your system's `PATH` variable has the location of
    your PHP executable in it. If you are working on Linux and PHP was installed with
    a package manager, then it most likely is. In Windows, you may have to locate
    your PHP executable and put its location in your path.
  prefs: []
  type: TYPE_NORMAL
- en: After Phalcon Developer Tools are downloaded via Composer, you must add the
    path `phalconBlog/app/library/vendor/phalcon/devtools/phalcon.php` to your system's
    `PATH` variable so that the Phalcon command will work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Phalcon can also be installed with PEAR, the PHP package manager. For the purposes
    of this book, we have glossed over the details of installing the developer tools.
    Covering each operating system would be beyond the scope of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more details on all installations at [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on installing Phalcon Developer Tools on Windows, please visit
    [http://docs.phalconphp.com/en/latest/reference/wintools.html](http://docs.phalconphp.com/en/latest/reference/wintools.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For details on installing these tools on Mac, see [http://docs.phalconphp.com/en/latest/reference/mactools.html](http://docs.phalconphp.com/en/latest/reference/mactools.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And for Linux, visit [http://docs.phalconphp.com/en/latest/reference/linuxtools.html](http://docs.phalconphp.com/en/latest/reference/linuxtools.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a project skeleton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using one command, we are going to do just about everything we have already
    done in this chapter. Open up the command-line interface and browse to where you
    want to generate your project. You can actually delete our previously created
    project. You can either start over or build your new project in another location.
    Now, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Suddenly, we will have a complete project structure built for us. You will notice
    a few differences between the generated project and the one we built from scratch.
    We will go over a few of those differences to see what has changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you didn''t use Phalcon Developer Tools, you will want to change your `config.ini`
    file to this version. This configuration file is going to have a few more settings,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'It adds a set of dummy database configurations. It adds a few more folders
    to the application section of our `.ini` file. The `baseUri` setting may cause
    you some issues. If the project you are creating is running in a subdirectory
    of your localhost, the generated setting will work. If you browse directly to
    the localhost and see the following message, you will have to change this `baseUri`
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a project skeleton](img/7873OS_02_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will not notice any issues with the `baseUri` setting until you start including
    CSS and JavaScript files in your application and these files don''t load. So,
    if your site is running in the main directory, change that line to the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You will also notice that the `views` folder has some new files in it with the
    `.volt` extension. There is an `index.volt` file in your index folder located
    at `app/views` and another `index.volt` file in the `views` folder located at
    `app`. Let's take a look at the file in your `views` folder located at `app`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This file is the main layout for your whole application. Every view that your
    application serves will be wrapped by this file. The content of the body tags
    will be provided by the view. That is what the `{{ content() }}` tag is for. This
    is a Volt template tag. Volt is a template engine that is built into Phalcon.
    We will learn more about it in [Chapter 3](ch03.html "Chapter 3. Using Phalcon
    Models, Views, and Controllers"), *Using Phalcon Models, Views, and Controllers*.
  prefs: []
  type: TYPE_NORMAL
- en: The view that is served when you browse to your localhost is in the `index.volt`
    file in your `index` folder located at `app/views`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is just static HTML that lets you know everything has worked.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also notice that your bootstrap or your `index.php` file located at
    `public` is different. It now looks like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'It still loads our `.ini` file from the same place. However, it now loads two
    new files, `loader.php` and `services.php`, from our `config` folder. The rest
    of the file is about the same. The generated version simply breaks up the autoloader
    and the Dependency Injection container into separate files and includes them as
    configuration files, which does make a lot more sense. First, let''s take a look
    at `loader.php` file located at `app/config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is basically the same code that we used to have in our old bootstrap file.
    Now, let''s look at `services.php` file located at `app/config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There is definitely a lot more going on in this file than we can cover in this
    chapter. However, we will touch up on the new services that got added here in
    later chapters, and will end up adding a few more ourselves. You can see where
    we set our views directory with this line of code: `$view->setViewsDir($config->application->viewsDir);`.
    But, we definitely have more services loaded now than in our old bootstrap file.
    Now, we have a URL resolver, a template engine service, a database adapter, and
    a session service. These will become important later on in the book.'
  prefs: []
  type: TYPE_NORMAL
- en: Available commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be exploring more commands in future chapters to generate the files
    we will need for our application, but here are some commands to get you started
    in exploring what these tools can do for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typing `Phalcon` in your command line will give you the output (as shown in
    the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Available commands](img/7873OS_02_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `commands` command will actually print out this same list of available commands.
    We have already taken a look at the project command. We will explore the rest
    in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, you may have noticed that when we built our project with Phalcon Developer
    Tools, we used the `–enable-webtools` command. We have an even easier option while
    writing code for our application; we can generate code right in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we create a project with the command-line tool, we can do just about everything
    else that Phalcon Developer Tools can do in the browser. Navigate to `http://localhost/phalconBlog/webtools.php`,
    and you should see a page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The web interface](img/7873OS_02_03.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will learn about the power of this amazing tool in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: IDE stubs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another feature of Phalcon Developer Tools is that they contain IDE stubs for
    the code hint and autocomplete features of your IDE. Because Phalcon is compiled
    in C, your IDE won't be able to index the classes and functions of the actual
    framework, like it could with the Zend framework, for example, which is written
    in PHP. The IDE stub files mirror the classes and functions in the Phalcon framework
    so that an IDE has access to their names and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the `devtools` folder of our project located at `app/library/vendor/phalcon`,
    an `ide` folder will be present, and there are stubs for various versions of Phalcon
    in this `ide` folder. To use the current version of the stubs in our IDE, we would
    just add the path to the `1.2.4` folder of our project's external libraries in
    our IDE. The process of doing this will differ depending on which IDE you use,
    but you can find specific instructions to add the Phalcon IDE stubs to PhpStorm
    at [http://phalconphp.com/en/download/stubs](http://phalconphp.com/en/download/stubs).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Phalcon\Debug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An optional step is to add the `Phalcon\Debug` component to the application.
    It only takes two lines of code to add it, and it will go a long way in helping
    you track down the causes of errors when they occur.
  prefs: []
  type: TYPE_NORMAL
- en: To add `Phalcon\Debug`, we are going to open up our bootstrap file, `index.php`
    file located at `public`, and add a couple of lines of code at the beginning of
    our code, remove the try-catch construction, leaving all the code in the `try`
    part untouched, and add our debugger.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we have an exception, instead of a standard ugly error, we will see
    a page that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Phalcon\Debug](img/7673OS_02_04.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of the standard stack trace, we are presented with the section of the
    code where the exception arose to examine for possible issues. We can also click
    on the Phalcon functions listed in our trace in order to be taken to the official
    Phalcon documentation page. `Phalcon\Debug` has a lot of features. You can learn
    about them more by creating exceptions in the application on purpose and examining
    the output or by reading more about the debugger at [http://docs.phalconphp.com/en/latest/reference/debug.html](http://docs.phalconphp.com/en/latest/reference/debug.html).
  prefs: []
  type: TYPE_NORMAL
- en: Nginx configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is also possible to run Phalcon on Nginx. To run our project in Nginx, we
    would use the following configuration and skip using the `.htaccess` files, which
    are of no use in Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You should only have to edit the `server_name` variable if yours is not `localhost`
    and the `$root_path` variable to the path to the `public` folder in your project.
    For more details on configuring Nginx for Phalcon projects, see [http://docs.phalconphp.com/en/latest/reference/nginx.html](http://docs.phalconphp.com/en/latest/reference/nginx.html),
    and for configuring Cherokee web server, see [http://docs.phalconphp.com/en/latest/reference/cherokee.html](http://docs.phalconphp.com/en/latest/reference/cherokee.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up our skeleton application. We created
    folders, `.htaccess` files, and our bootstrap file. Then, we made our application
    more configurable by using a `.ini` file. Finally, we used Phalcon Developer Tools
    to make the whole job a lot quicker and easier.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will finally be serving pages in the browser when we
    learn about Phalcon's models, views, and controllers.
  prefs: []
  type: TYPE_NORMAL
