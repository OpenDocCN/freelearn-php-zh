- en: Chapter 2. Setting Up a Phalcon Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：设置Phalcon项目
- en: Before we start writing the code for our blog, we are going to take a look at
    the skeleton we need to have in place for our project. First, we will walk through
    creating the folder structure and necessary files manually. After we have finished
    doing it the hard way, we will learn how to use Phalcon Developer Tools in order
    to do all of this automatically with a few simple terminal commands. Our code
    will change and morph as we go. This is because as we delve deeper into the framework,
    we will be refactoring our old code to handle new features that we want to add
    to our blog application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写博客代码之前，我们将先查看我们项目需要具备的基本框架。首先，我们将手动创建文件夹结构和必要的文件。完成这一艰难的过程后，我们将学习如何使用Phalcon开发者工具，通过几个简单的终端命令自动完成所有这些操作。我们的代码将在过程中不断变化和演变。这是因为随着我们深入框架，我们将重构旧代码以处理我们想要添加到博客应用程序中的新功能。
- en: 'In this chapter, we will learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: The folder structure of Phalcon project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phalcon项目的文件夹结构
- en: The Phalcon .htaccess file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phalcon .htaccess文件
- en: How to use a .ini file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用.ini文件
- en: How to create a Phalcon bootstrap file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建Phalcon引导文件
- en: How to use Phalcon Developer Tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Phalcon开发者工具
- en: Folder structure
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: 'Unlike many PHP frameworks, Phalcon doesn''t care about your folder structure.
    You can create any folder structure you want, but for our blog tutorial, we are
    going to use a basic MVC-structured site. There are many different variations
    of the folder structure in various frameworks. We will start out with the following
    code snippet, which has the same structure that the Phalcon Developer Tools will
    be generating for us later in the chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多PHP框架不同，Phalcon不关心你的文件夹结构。你可以创建任何你想要的文件夹结构，但为了我们的博客教程，我们将使用一个基本的MVC结构网站。各种框架中文件夹结构的变体有很多。我们将从以下代码片段开始，它具有Phalcon开发者工具将在本章后面为我们生成的相同结构：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The only executable file we have in our `public` folder is our bootstrap file,
    `index.php`, which we will learn about later in this chapter. Everything else
    are static files loaded by the browser. In our `app` folder, we have folders for
    our `models`, `views`, and `controllers`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`public`文件夹中，我们只有一个可执行文件，那就是我们的引导文件`index.php`，我们将在本章后面学习它。其他所有内容都是浏览器加载的静态文件。在我们的`app`文件夹中，我们有`models`、`views`和`controllers`文件夹。
- en: There are MVC file structures smaller than this, and there are structures that
    contain the `template`, `partial`, and `module` folders. As your project gets
    bigger and more complicated, you may want to switch to a multimodule folder structure,
    about which you can read at [http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html).
    And for simpler sites, such as a basic API, you may want to opt for a much smaller
    structure such as the micro application structure. You can find an example of
    the micro MVC structure at [http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html](http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有比这更小的MVC文件结构，也有包含`template`、`partial`和`module`文件夹的结构。随着你的项目变得更大、更复杂，你可能想要切换到多模块文件夹结构，关于这一点，你可以在[http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html)中阅读。对于像基本API这样的简单网站，你可能想要选择一个更小的结构，比如微应用结构。你可以在[http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html](http://docs.phalconphp.com/en/latest/reference/tutorial-rest.html)中找到一个微MVC结构的示例。
- en: Using .htaccess files
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.htaccess文件
- en: We are going to use `.htaccess` files in our application, and for this step,
    you need to make sure `mod_rewrite` is enabled on your Apache server. On many
    Apache installations, this mod is installed and enabled by default. If `mod_rewrite`
    is not enabled on your server, you will need to enable it, which could involve
    running the `sudo a2enmod rewrite` command or uncommenting the `LoadModule mod_rewrite.so`
    line in the `httpd.conf` or `apache2.conf` file. It all depends on your Apache
    installation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序中使用`.htaccess`文件，对于这一步骤，你需要确保你的Apache服务器上启用了`mod_rewrite`。在许多Apache安装中，这个模块默认安装并启用。如果你的服务器上没有启用`mod_rewrite`，你需要启用它，这可能涉及运行`sudo
    a2enmod rewrite`命令或在`httpd.conf`或`apache2.conf`文件中取消注释`LoadModule mod_rewrite.so`行。这取决于你的Apache安装。
- en: For Nginx configuration, you can read the section at the end of this chapter
    and skip using `.htaccess` files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Nginx配置，你可以阅读本章末尾的部分，并跳过使用`.htaccess`文件。
- en: 'Now, we need to tell Apache how to serve our Phalcon project. First, we will
    have to hide our `app` folder from public view and redirect all visitors to our
    `public` folder. Therefore, we need to create a `.htaccess` file for our project''s
    root folder, the `phalconBlog` folder. So, open a text editor, create a new file,
    and insert the following lines of code in the file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要告诉Apache如何为我们提供Phalcon项目。首先，我们必须隐藏我们的`app`文件夹，使其对公众不可见，并将所有访客重定向到我们的`public`文件夹。因此，我们需要为项目根文件夹`phalconBlog`创建一个`.htaccess`文件。所以，打开一个文本编辑器，创建一个新文件，并在文件中插入以下代码行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save this file as `.htaccess` in the `phalconBlog` folder. Now, all visitors
    to the `phalconBlog` folder will be directed to the `public` folder.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`phalconBlog`文件夹中的`.htaccess`。现在，所有访问`phalconBlog`文件夹的访客都将被重定向到`public`文件夹。
- en: This is not the only option when it comes to serving our `public` folder in
    Apache. We could edit our Apache configuration file for the virtual host serving
    our project and set the document root to our `public/` directory. In this case,
    we would not need this first `.htaccess` file, only the `.htaccess` file we are
    about to create.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在Apache中提供我们的`public`文件夹时，这并不是唯一的选择。我们可以编辑为我们的项目提供虚拟主机的Apache配置文件，并将文档根设置为我们的`public/`目录。在这种情况下，我们就不需要这个第一个`.htaccess`文件，只需要我们即将创建的`.htaccess`文件。
- en: 'Phalcon has beautiful URLs built in. In other words, URLs can have a more appealing
    structure; for example, [http://www.blog.com/post/1](http://www.blog.com/post/1)
    is better than [http://www.blog.com/?post=1](http://www.blog.com/?post=1). Since
    every visit must go through the bootstrap file that we will learn about next,
    we will also have to create a `.htaccess` file for the `public` folder. So, create
    the file in the `public` folder and insert the following lines of code in the
    file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon内置了美丽的URL。换句话说，URL可以有更吸引人的结构；例如，[http://www.blog.com/post/1](http://www.blog.com/post/1)
    比较于 [http://www.blog.com/?post=1](http://www.blog.com/?post=1) 更好。由于每次访问都必须通过我们接下来将要学习的引导文件，我们还需要为`public`文件夹创建一个`.htaccess`文件。所以，在`public`文件夹中创建文件，并在文件中插入以下代码行：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This `.htaccess` file tells Apache to load a file or folder in the `public`
    folder if it exists, and if not, send the visitor to the `index.php` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`.htaccess`文件告诉Apache如果`public`文件夹中存在文件或文件夹，则加载它；如果不存在，则将访客重定向到`index.php`文件。
- en: The bootstrap file
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导文件
- en: The `index.php` file that we are redirecting all of our requests to is the cornerstone
    of our application. In this file, we load any configuration we set up and put
    together the various pieces of the Phalcon framework into a complete application.
    In this step, we will start with a simple bootstrap file and then make it more
    configurable in the next step with the use of a `.ini` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有请求重定向到的`index.php`文件是我们应用程序的基石。在这个文件中，我们加载我们设置的任何配置，并将Phalcon框架的各个部分组合成一个完整的应用程序。在这个步骤中，我们将从一个简单的引导文件开始，然后在下一个步骤中使用`.ini`文件使其更具可配置性。
- en: Handling exceptions
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理异常
- en: 'First, we want to make sure we catch any exceptions our application may throw
    at us. So, open up your text editor or IDE and create an `index.php` file and
    place it in the `public` directory. In the `index.php` file, insert the following
    code snipppet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要确保我们能够捕获我们的应用程序可能抛给我们的任何异常。所以，打开你的文本编辑器或IDE，创建一个`index.php`文件，并将其放置在`public`目录中。在`index.php`文件中，插入以下代码片段：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first thing you should notice is that we haven't included a file in our
    application, yet we can still reference a Phalcon exception. Phalcon is a PHP
    extension and is now part of your PHP installation. There is no need to include
    any PHP files. We are using a PHP try-catch construction to catch any exception
    that Phalcon may throw.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意的第一件事是我们还没有在我们的应用程序中包含任何文件，但我们仍然可以引用Phalcon异常。Phalcon是一个PHP扩展，现在它是PHP安装的一部分。没有必要包含任何PHP文件。我们使用PHP的try-catch结构来捕获Phalcon可能抛出的任何异常。
- en: Dependency Injection
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Phalcon uses a Dependency Injection container to handle all the services you
    may need to use in your application. Whenever our application needs one of these
    services, it asks for it by name from the container. Phalcon is designed to be
    decoupled, meaning that you can use all or part of its features rather than being
    required to use a specific base set of services. This Dependency Injection container,
    or DI, is the glue that holds all of our chosen services together.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon使用依赖注入容器来处理您在应用程序中可能需要使用的所有服务。每当我们的应用程序需要这些服务之一时，它会通过名称从容器中请求它。Phalcon被设计为解耦的，这意味着您可以使用其所有或部分功能，而不是必须使用特定的基础服务集。这个依赖注入容器，或DI，是我们选择的所有服务的粘合剂。
- en: 'Let''s create a DI. We will be using Phalcon''s `FactoryDefault` DI. So, in
    the `try` brackets of your `index.php`, insert the following code snippet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个DI。我们将使用Phalcon的`FactoryDefault` DI。所以，在`index.php`的`try`括号中，插入以下代码片段：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, we have created our DI. Next, we register our view service with it, telling
    Phalcon where to find our view files. Now, let's set the model and controller
    folders for our application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经创建了我们的DI。接下来，我们将注册我们的视图服务，告诉Phalcon在哪里可以找到我们的视图文件。现在，让我们设置我们的应用程序的模型和控制器文件夹。
- en: Autoloaders
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动加载器
- en: Now, we add our autoloaders.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们添加我们的自动加载器。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will tell Phalcon where to find our controller and model files. Currently,
    we are using only two folders in our blog project, but it is possible to load
    more folders with Phalcon Loader if we need to. We also created `library` and
    `plugin` folders, which we will be using later.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉Phalcon在哪里可以找到我们的控制器和模型文件。目前，我们在我们的博客项目中只使用两个文件夹，但如果我们需要，可以使用Phalcon Loader加载更多文件夹。我们还创建了`library`和`plugin`文件夹，我们将在以后使用。
- en: Initializing our application
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化我们的应用程序
- en: Now, we only have to add a couple more lines of code to initialize our application
    to handle requests. We create an instance of `Phalcon\MVC\Application` and name
    it `$application`. Then, we invoke `$application->handle->getContent()`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需添加几行代码来初始化我们的应用程序以处理请求。我们创建一个`Phalcon\MVC\Application`的实例，并将其命名为`$application`。然后，我们调用`$application->handle->getContent()`。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have hardcoded everything into our bootstrap file, we are going
    to change it up a bit and make our application a bit more flexible. Also, we are
    going to use the classic `.ini` file as the configuration file for our application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有内容硬编码到我们的引导文件中，我们将对其进行一些更改，使我们的应用程序更加灵活。此外，我们将使用经典的`.ini`文件作为我们应用程序的配置文件。
- en: Using a configuration file
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置文件
- en: Using a configuration file gives the developer a simple place to edit various
    settings on a website that might otherwise change in different environments. If
    you move a project from your localhost to another server, all you have to do is
    edit this file, and the application should run wherever you put it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置文件为开发者提供了一个简单的地方来编辑网站上可能在不同环境中更改的各种设置。如果您将项目从本地主机移动到另一个服务器，您只需编辑此文件，应用程序就应该可以在您放置它的任何地方运行。
- en: 'You can use a standard PHP array to store Phalcon configurations, JSON files,
    or the `.ini` file format. We will be using a `.ini` file for readability, but
    the PHP array format is native to PHP and loads quicker. Later in this book, we
    will add more settings to our file, but for now, our project''s folder paths look
    like good additions to our `.ini` file. Most likely, we won''t have to change
    these settings, but it gives us the option to change our mind later. So, you should
    create a new folder, `config`, in the `app` folder of your blog project, and create
    a new file, `config.ini`, in your editor and save it in this folder. In this file,
    add the following lines of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用标准的PHP数组来存储Phalcon配置、JSON文件或`.ini`文件格式。我们将使用`.ini`文件以提高可读性，但PHP数组格式是PHP的本地格式，加载速度更快。在本书的后续部分，我们将向我们的文件添加更多设置，但到目前为止，我们的项目文件夹路径看起来是`.ini`文件的不错补充。我们很可能不需要更改这些设置，但这给了我们将来改变主意的选项。因此，您应该在博客项目的`app`文件夹中创建一个新的文件夹`config`，并在您的编辑器中创建一个新的文件`config.ini`，并将其保存在这个文件夹中。在这个文件中，添加以下代码行：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we have a `.ini` file hanging out all alone. It's time to load it in our
    bootstrap file. So, open up the `index.php` file again. We are going to make some
    changes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个孤零零的`.ini`文件。是时候在我们的引导文件中加载它了。所以，再次打开`index.php`文件。我们将进行一些更改。
- en: The `Phalcon\Config` component can currently read the configuration files of
    either the `.ini` or PHP array types. For our project, it is `.ini` all the way.
    Right after you create the DI, you are going to load the `.ini` file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Phalcon\Config` 组件目前可以读取 `.ini` 或 PHP 数组类型的配置文件。对于我们的项目，一直是 `.ini` 类型。在你创建
    DI 之后，你将加载 `.ini` 文件。'
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we have our configuration file loaded, but it's not doing anything; it's
    just taking up space. It is time to replace our hardcoded file paths with our
    configuration data. The only path we cannot replace is the location of the `.ini`
    file itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经加载了配置文件，但它并没有做任何事情；它只是在占用空间。是时候用我们的配置数据替换硬编码的文件路径了。唯一不能替换的是 `.ini` 文件本身的存储位置。
- en: 'So, we are going to take the following bit of code out of our index file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将从我们的索引文件中移除以下代码段：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change it to the following code snippet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下代码片段：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Each heading in our `.ini` file became a child object of our `$config` object,
    and each setting under the header became a variable in that Phalcon child object.
    Now that we have a `.ini` file, we can choose a few deployment methods to ensure
    our application will run on each environment we need to put it on. We could create
    a `dev.ini` file for our development server and a `prod.ini` file for our production
    server. Our bootstrap file could then load a `.ini` file based on an Apache environmental
    variable. Alternatively, we could use a build script that uploads the correct
    `.ini` file to the correct environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 `.ini` 文件中的每个标题都成为我们的 `$config` 对象的子对象，每个标题下的设置成为该 Phalcon 子对象中的变量。现在我们有了
    `.ini` 文件，我们可以选择几种部署方法来确保我们的应用程序可以在我们需要放置的每个环境中运行。我们可以为开发服务器创建一个 `dev.ini` 文件，为生产服务器创建一个
    `prod.ini` 文件。然后我们的引导文件可以根据 Apache 环境变量加载一个 `.ini` 文件。或者，我们可以使用一个构建脚本，将正确的 `.ini`
    文件上传到正确的环境中。
- en: Phalcon Developer Tools
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Phalcon 开发者工具
- en: Now that we have done everything the hard way to get a feel of how Phalcon works,
    let's try doing the same in a quick, easy way. Phalcon Developer Tools are a set
    of tools that will help you get your project up and running quickly by generating
    a skeleton code for you. We will be using these in the upcoming chapters to generate
    a lot of things and then review the files that were created to learn how they
    work.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过艰难的方式完成了所有工作，以了解 Phalcon 的工作方式，让我们尝试以快速、简单的方式进行同样的操作。Phalcon 开发者工具是一套工具，可以帮助你通过为你生成骨架代码来快速启动你的项目。我们将在接下来的章节中使用这些工具生成很多东西，然后审查创建的文件，以了解它们是如何工作的。
- en: If you don't want to install the developer tools, no problem. The current skeleton
    we created manually will work as a base for the rest of the application with a
    few modifications that we will cover in this section. Phalcon is a very flexible
    framework. We will also be going through everything we generate with the developer
    tools in sufficient detail so that you will be able to create all your code manually
    if you so choose to. But I would advise you to use developer tools wherever you
    can and then fill in the gaps with custom code. It can really shorten your development
    time. First, let's install these tools.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想安装开发者工具，也没有问题。我们手动创建的当前骨架经过一些修改后，将作为应用程序其余部分的基础。Phalcon 是一个非常灵活的框架。我们还将详细说明使用开发者工具生成的一切，以便你可以在需要时手动创建所有代码。但我建议你在可能的情况下使用开发者工具，然后用自定义代码来填补空白。这真的可以缩短你的开发时间。首先，让我们安装这些工具。
- en: Installing Phalcon Developer Tools
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Phalcon 开发者工具
- en: Phalcon Developer Tools can be downloaded from the official Git repository available
    at [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools).
    Alternatively, you can use Composer to install it as a library in your project.
    The reason why we have a `library` folder in our project's `app` folder is so
    that we can store PHP libraries that we may need in our application. Composer
    is a PHP package manager that will take care of these libraries with only a few
    commands. You can read more about Composer at [http://getcomposer.org/](http://getcomposer.org/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方 Git 仓库下载 Phalcon 开发者工具，该仓库位于 [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)。或者，你可以使用
    Composer 将其作为库安装到你的项目中。我们在项目 `app` 文件夹中有一个 `library` 文件夹的原因是，我们可以存储我们可能在应用程序中需要的
    PHP 库。Composer 是一个 PHP 包管理器，它只需几个命令就可以处理这些库。你可以在 [http://getcomposer.org/](http://getcomposer.org/)
    上了解更多关于 Composer 的信息。
- en: 'Firstly, create a new file, `composer.json`, in the `library` folder, add the
    following lines of code in it, and save the file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`library`文件夹中创建一个新的文件，命名为`composer.json`，在其中添加以下代码行，并保存文件：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is simply a `.json` file telling Composer that we want to include Phalcon
    Developer Tools in our project. If you have `curl` installed on your computer,
    open a terminal or an SSH window and browse to your `library` folder located at
    `phalconBlog` and run the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的`.json`文件，告诉Composer我们希望在项目中包含Phalcon开发者工具。如果您在计算机上安装了`curl`，请打开终端或SSH窗口，浏览到位于`phalconBlog`的`library`文件夹，并运行以下命令：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In Linux, you will most likely have `curl` installed. If you do not, you can
    simply download `composer.phar` from [http://getcomposer.org/download/](http://getcomposer.org/download/)
    and put the file in your `lib` folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，您很可能已经安装了`curl`。如果没有，您可以直接从[http://getcomposer.org/download/](http://getcomposer.org/download/)下载`composer.phar`并将其放入您的`lib`文件夹。
- en: Next, we tell Composer to add Phalcon Developer Tools in our `lib` folder.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们告诉Composer在`lib`文件夹中添加Phalcon开发者工具。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will work for you if your system's `PATH` variable has the location of
    your PHP executable in it. If you are working on Linux and PHP was installed with
    a package manager, then it most likely is. In Windows, you may have to locate
    your PHP executable and put its location in your path.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统`PATH`变量中包含PHP可执行文件的位置，这将适用于您。如果您在Linux上工作，并且PHP是通过包管理器安装的，那么这很可能是正确的。在Windows上，您可能需要找到PHP可执行文件并将其位置添加到您的路径中。
- en: After Phalcon Developer Tools are downloaded via Composer, you must add the
    path `phalconBlog/app/library/vendor/phalcon/devtools/phalcon.php` to your system's
    `PATH` variable so that the Phalcon command will work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Composer下载Phalcon开发者工具后，您必须将路径`phalconBlog/app/library/vendor/phalcon/devtools/phalcon.php`添加到您的系统`PATH`变量中，以便Phalcon命令可以正常工作。
- en: 'Phalcon can also be installed with PEAR, the PHP package manager. For the purposes
    of this book, we have glossed over the details of installing the developer tools.
    Covering each operating system would be beyond the scope of this book:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon也可以通过PEAR，PHP包管理器进行安装。为了本书的目的，我们省略了安装开发者工具的细节。涵盖每个操作系统将超出本书的范围：
- en: You can find out more details on all installations at [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)上找到所有安装的更多详细信息。
- en: For more details on installing Phalcon Developer Tools on Windows, please visit
    [http://docs.phalconphp.com/en/latest/reference/wintools.html](http://docs.phalconphp.com/en/latest/reference/wintools.html)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在Windows上安装Phalcon开发者工具的更多详细信息，请访问[http://docs.phalconphp.com/en/latest/reference/wintools.html](http://docs.phalconphp.com/en/latest/reference/wintools.html)
- en: For details on installing these tools on Mac, see [http://docs.phalconphp.com/en/latest/reference/mactools.html](http://docs.phalconphp.com/en/latest/reference/mactools.html)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在Mac上安装这些工具的详细信息，请参阅[http://docs.phalconphp.com/en/latest/reference/mactools.html](http://docs.phalconphp.com/en/latest/reference/mactools.html)
- en: And for Linux, visit [http://docs.phalconphp.com/en/latest/reference/linuxtools.html](http://docs.phalconphp.com/en/latest/reference/linuxtools.html)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux，请访问[http://docs.phalconphp.com/en/latest/reference/linuxtools.html](http://docs.phalconphp.com/en/latest/reference/linuxtools.html)
- en: Generating a project skeleton
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成项目骨架
- en: 'Using one command, we are going to do just about everything we have already
    done in this chapter. Open up the command-line interface and browse to where you
    want to generate your project. You can actually delete our previously created
    project. You can either start over or build your new project in another location.
    Now, type the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一条命令，我们将完成本章中已经做过的几乎所有事情。打开命令行界面，浏览到您想要生成项目的位置。您实际上可以删除我们之前创建的项目。您可以重新开始，或者在新位置构建新项目。现在，输入以下命令：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Suddenly, we will have a complete project structure built for us. You will notice
    a few differences between the generated project and the one we built from scratch.
    We will go over a few of those differences to see what has changed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 突然之间，我们将有一个为我们构建的完整项目结构。您将注意到生成的项目和从头开始构建的项目之间有一些差异。我们将探讨其中的一些差异，看看有什么变化。
- en: 'If you didn''t use Phalcon Developer Tools, you will want to change your `config.ini`
    file to this version. This configuration file is going to have a few more settings,
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Phalcon开发者工具，您可能需要将您的`config.ini`文件更改为这个版本。此配置文件将包含一些额外的设置，如下所示：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It adds a set of dummy database configurations. It adds a few more folders
    to the application section of our `.ini` file. The `baseUri` setting may cause
    you some issues. If the project you are creating is running in a subdirectory
    of your localhost, the generated setting will work. If you browse directly to
    the localhost and see the following message, you will have to change this `baseUri`
    setting:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它添加了一组虚拟数据库配置。它还向我们的`.ini`文件的应用程序部分添加了几个更多文件夹。`baseUri`设置可能会给您带来一些问题。如果您创建的项目在本地主机的子目录中运行，生成的设置将有效。如果您直接浏览到localhost并看到以下消息，您将不得不更改此`baseUri`设置：
- en: '![Generating a project skeleton](img/7873OS_02_01.png.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![生成项目骨架](img/7873OS_02_01.png.jpg)'
- en: 'You will not notice any issues with the `baseUri` setting until you start including
    CSS and JavaScript files in your application and these files don''t load. So,
    if your site is running in the main directory, change that line to the following
    line of code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不会注意到`baseUri`设置有任何问题，直到您开始在您的应用程序中包含CSS和JavaScript文件，而这些文件没有加载。所以，如果您的网站正在主目录中运行，将那一行改为以下代码：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You will also notice that the `views` folder has some new files in it with the
    `.volt` extension. There is an `index.volt` file in your index folder located
    at `app/views` and another `index.volt` file in the `views` folder located at
    `app`. Let's take a look at the file in your `views` folder located at `app`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，`views`文件夹中有些新文件，具有`.volt`扩展名。在`app/views`的`index`文件夹中有一个`index.volt`文件，在`app`的`views`文件夹中还有一个`index.volt`文件。让我们看看位于`app`的`views`文件夹中的文件。
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This file is the main layout for your whole application. Every view that your
    application serves will be wrapped by this file. The content of the body tags
    will be provided by the view. That is what the `{{ content() }}` tag is for. This
    is a Volt template tag. Volt is a template engine that is built into Phalcon.
    We will learn more about it in [Chapter 3](ch03.html "Chapter 3. Using Phalcon
    Models, Views, and Controllers"), *Using Phalcon Models, Views, and Controllers*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件是您整个应用程序的主要布局。您应用程序提供的每个视图都将被此文件包裹。body标签的内容将由视图提供。这就是`{{ content() }}`标签的作用。这是一个Volt模板标签。Volt是一个内置在Phalcon中的模板引擎。我们将在[第3章](ch03.html
    "第3章。使用Phalcon模型、视图和控制器")中了解更多关于它的内容，*使用Phalcon模型、视图和控制器*。
- en: The view that is served when you browse to your localhost is in the `index.volt`
    file in your `index` folder located at `app/views`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当您浏览到您的localhost时，所提供的服务视图位于`app/views`的`index`文件夹中的`index.volt`文件。
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is just static HTML that lets you know everything has worked.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个静态的HTML页面，用来告知您一切工作正常。
- en: 'You will also notice that your bootstrap or your `index.php` file located at
    `public` is different. It now looks like the following code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，您的引导文件或位于`public`的`index.php`文件有所不同。现在它看起来像以下代码片段：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It still loads our `.ini` file from the same place. However, it now loads two
    new files, `loader.php` and `services.php`, from our `config` folder. The rest
    of the file is about the same. The generated version simply breaks up the autoloader
    and the Dependency Injection container into separate files and includes them as
    configuration files, which does make a lot more sense. First, let''s take a look
    at `loader.php` file located at `app/config`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然从相同的位置加载我们的`.ini`文件。然而，现在它还从我们的`config`文件夹中加载两个新文件，`loader.php`和`services.php`。其余的文件大致相同。生成的版本只是将自动加载器和依赖注入容器拆分成单独的文件，并将它们作为配置文件包含进来，这确实更有意义。首先，让我们看看位于`app/config`的`loader.php`文件：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is basically the same code that we used to have in our old bootstrap file.
    Now, let''s look at `services.php` file located at `app/config`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是我们以前在旧的引导文件中使用的相同代码。现在，让我们看看位于`app/config`的`services.php`文件：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There is definitely a lot more going on in this file than we can cover in this
    chapter. However, we will touch up on the new services that got added here in
    later chapters, and will end up adding a few more ourselves. You can see where
    we set our views directory with this line of code: `$view->setViewsDir($config->application->viewsDir);`.
    But, we definitely have more services loaded now than in our old bootstrap file.
    Now, we have a URL resolver, a template engine service, a database adapter, and
    a session service. These will become important later on in the book.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中肯定有比我们本章能涵盖的更多内容。然而，我们将在后面的章节中简要介绍这里添加的新服务，并最终添加一些自己的服务。你可以通过以下代码行看到我们设置视图目录的位置：`$view->setViewsDir($config->application->viewsDir);`。但现在，我们加载的服务肯定比我们旧的引导文件要多。现在，我们有一个
    URL 解析器、一个模板引擎服务、一个数据库适配器和会话服务。这些将在本书的后面部分变得很重要。
- en: Available commands
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用命令
- en: We will be exploring more commands in future chapters to generate the files
    we will need for our application, but here are some commands to get you started
    in exploring what these tools can do for you.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在未来的章节中探索更多命令，以生成我们应用程序所需的文件，但这里有一些命令可以帮助你开始探索这些工具能为你做什么。
- en: 'Typing `Phalcon` in your command line will give you the output (as shown in
    the following screenshot):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的命令行中键入 `Phalcon` 将会给出如下截图所示的输出：
- en: '![Available commands](img/7873OS_02_02.png.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![可用命令](img/7873OS_02_02.png.jpg)'
- en: The `commands` command will actually print out this same list of available commands.
    We have already taken a look at the project command. We will explore the rest
    in the upcoming chapters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`commands` 命令实际上会打印出这个相同的可用命令列表。我们已经查看过项目命令。我们将在接下来的章节中探索其余的命令。'
- en: Yet, you may have noticed that when we built our project with Phalcon Developer
    Tools, we used the `–enable-webtools` command. We have an even easier option while
    writing code for our application; we can generate code right in the browser.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能已经注意到，当我们使用 Phalcon 开发工具构建我们的项目时，我们使用了 `–enable-webtools` 命令。在为我们的应用程序编写代码时，我们有一个更简单的选项；我们可以在浏览器中直接生成代码。
- en: The web interface
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络界面
- en: 'Once we create a project with the command-line tool, we can do just about everything
    else that Phalcon Developer Tools can do in the browser. Navigate to `http://localhost/phalconBlog/webtools.php`,
    and you should see a page as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用命令行工具创建了一个项目，我们就可以在浏览器中完成 Phalcon 开发工具能做的几乎所有其他事情。导航到 `http://localhost/phalconBlog/webtools.php`，你应该会看到一个如下截图所示的页面：
- en: '![The web interface](img/7873OS_02_03.png.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![网络界面](img/7873OS_02_03.png.jpg)'
- en: We will learn about the power of this amazing tool in the next chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中了解这个神奇工具的强大功能。
- en: IDE stubs
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE 框架
- en: Another feature of Phalcon Developer Tools is that they contain IDE stubs for
    the code hint and autocomplete features of your IDE. Because Phalcon is compiled
    in C, your IDE won't be able to index the classes and functions of the actual
    framework, like it could with the Zend framework, for example, which is written
    in PHP. The IDE stub files mirror the classes and functions in the Phalcon framework
    so that an IDE has access to their names and documentation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Phalcon 开发工具的另一个特性是它们包含了 IDE 框架，用于你的 IDE 的代码提示和自动完成功能。因为 Phalcon 是用 C 编译的，所以你的
    IDE 将无法索引实际框架的类和函数，例如，与用 PHP 编写的 Zend 框架相比。IDE 框架文件反映了 Phalcon 框架中的类和函数，以便 IDE
    可以访问它们的名称和文档。
- en: In the `devtools` folder of our project located at `app/library/vendor/phalcon`,
    an `ide` folder will be present, and there are stubs for various versions of Phalcon
    in this `ide` folder. To use the current version of the stubs in our IDE, we would
    just add the path to the `1.2.4` folder of our project's external libraries in
    our IDE. The process of doing this will differ depending on which IDE you use,
    but you can find specific instructions to add the Phalcon IDE stubs to PhpStorm
    at [http://phalconphp.com/en/download/stubs](http://phalconphp.com/en/download/stubs).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目位于 `app/library/vendor/phalcon` 的 `devtools` 文件夹中，将存在一个 `ide` 文件夹，这个 `ide`
    文件夹中有 Phalcon 的各种版本的框架。要使用我们 IDE 中的当前版本框架，我们只需将项目外部库的 `1.2.4` 文件夹的路径添加到我们的 IDE
    中。这个过程的步骤会根据你使用的 IDE 而有所不同，但你可以在 [http://phalconphp.com/en/download/stubs](http://phalconphp.com/en/download/stubs)
    找到将 Phalcon IDE 框架添加到 PhpStorm 的具体说明。
- en: Setting up Phalcon\Debug
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Phalcon\Debug
- en: An optional step is to add the `Phalcon\Debug` component to the application.
    It only takes two lines of code to add it, and it will go a long way in helping
    you track down the causes of errors when they occur.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可选步骤是向应用程序添加`Phalcon\Debug`组件。添加它只需要两行代码，并且在出现错误时，它将大大帮助您追踪错误的原因。
- en: To add `Phalcon\Debug`, we are going to open up our bootstrap file, `index.php`
    file located at `public`, and add a couple of lines of code at the beginning of
    our code, remove the try-catch construction, leaving all the code in the `try`
    part untouched, and add our debugger.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`Phalcon\Debug`，我们将打开我们的引导文件，位于`public`目录下的`index.php`文件，并在代码的开头添加几行代码，移除try-catch结构，保留`try`部分的所有代码不变，并添加我们的调试器。
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, when we have an exception, instead of a standard ugly error, we will see
    a page that looks like the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们遇到异常时，而不是一个标准的丑陋错误，我们将看到一个类似于以下截图的页面：
- en: '![Setting up Phalcon\Debug](img/7673OS_02_04.png.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![设置Phalcon\Debug](img/7673OS_02_04.png.jpg)'
- en: Instead of the standard stack trace, we are presented with the section of the
    code where the exception arose to examine for possible issues. We can also click
    on the Phalcon functions listed in our trace in order to be taken to the official
    Phalcon documentation page. `Phalcon\Debug` has a lot of features. You can learn
    about them more by creating exceptions in the application on purpose and examining
    the output or by reading more about the debugger at [http://docs.phalconphp.com/en/latest/reference/debug.html](http://docs.phalconphp.com/en/latest/reference/debug.html).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准的堆栈跟踪不同，我们展示的是异常出现的代码部分，以便检查可能的问题。我们还可以点击在跟踪中列出的Phalcon函数，以便跳转到官方的Phalcon文档页面。`Phalcon\Debug`有很多功能。您可以通过在应用程序中故意创建异常并检查输出，或者通过阅读更多关于调试器的信息来了解更多关于它们。[http://docs.phalconphp.com/en/latest/reference/debug.html](http://docs.phalconphp.com/en/latest/reference/debug.html)。
- en: Nginx configuration
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nginx配置
- en: 'It is also possible to run Phalcon on Nginx. To run our project in Nginx, we
    would use the following configuration and skip using the `.htaccess` files, which
    are of no use in Nginx:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以在Nginx上运行Phalcon。要在Nginx上运行我们的项目，我们将使用以下配置，并跳过使用`.htaccess`文件，因为在Nginx中它们没有用：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You should only have to edit the `server_name` variable if yours is not `localhost`
    and the `$root_path` variable to the path to the `public` folder in your project.
    For more details on configuring Nginx for Phalcon projects, see [http://docs.phalconphp.com/en/latest/reference/nginx.html](http://docs.phalconphp.com/en/latest/reference/nginx.html),
    and for configuring Cherokee web server, see [http://docs.phalconphp.com/en/latest/reference/cherokee.html](http://docs.phalconphp.com/en/latest/reference/cherokee.html).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要编辑`server_name`变量，如果它不是`localhost`，以及将`$root_path`变量设置为项目中`public`文件夹的路径。有关为Phalcon项目配置Nginx的更多详细信息，请参阅[http://docs.phalconphp.com/en/latest/reference/nginx.html](http://docs.phalconphp.com/en/latest/reference/nginx.html)，有关配置Cherokee网络服务器的信息，请参阅[http://docs.phalconphp.com/en/latest/reference/cherokee.html](http://docs.phalconphp.com/en/latest/reference/cherokee.html)。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to set up our skeleton application. We created
    folders, `.htaccess` files, and our bootstrap file. Then, we made our application
    more configurable by using a `.ini` file. Finally, we used Phalcon Developer Tools
    to make the whole job a lot quicker and easier.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何设置我们的骨架应用程序。我们创建了文件夹、`.htaccess`文件和我们的引导文件。然后，我们通过使用`.ini`文件使应用程序更加可配置。最后，我们使用Phalcon开发者工具使整个工作变得更快、更简单。
- en: In the next chapter, we will finally be serving pages in the browser when we
    learn about Phalcon's models, views, and controllers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，当我们学习Phalcon的模型、视图和控制器时，我们将在浏览器中最终开始服务页面。
