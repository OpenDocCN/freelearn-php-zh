- en: Leveraging JavaScript, jQuery, and AJAX Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用JavaScript、jQuery和AJAX脚本
- en: 'This chapter focuses on incorporating JavaScript in plugins by exploring the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过探讨以下主题来专注于在插件中集成JavaScript：
- en: Safely loading jQuery onto WordPress web pages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WordPress网页上安全加载jQuery
- en: Displaying a pop-up dialog using the built-in ThickBox plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置的ThickBox插件显示弹出对话框
- en: Controlling pop-up dialog display using shortcodes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短代码控制弹出对话框显示
- en: Displaying a calendar day selector using the Datepicker plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Datepicker插件显示日历日选择器
- en: Adding tooltips to admin page form fields using the TipTip plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TipTip插件为管理页面表单字段添加工具提示
- en: Using AJAX to dynamically update partial page contents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AJAX动态更新页面部分内容
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: JavaScript libraries, especially the very popular jQuery library and its numerous
    plugins, can do wonders in bringing a website to life with slick animations, dynamic
    data queries, and advanced visual features. Unfortunately, for all of their benefits,
    these scripts can also be difficult to work with. For example, loading more than
    one copy of jQuery can destroy all the setup that was done by the other instances
    and errors in one script usually prevent other scripts from running correctly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript库，特别是非常流行的jQuery库及其众多插件，可以通过流畅的动画、动态数据查询和高级视觉功能使网站焕发生机。不幸的是，尽管它们有诸多好处，但这些脚本也可能很难处理。例如，加载多个jQuery副本可能会破坏其他实例所做的所有设置，并且一个脚本中的错误通常会导致其他脚本无法正确运行。
- en: WordPress' answer to this convoluted architecture is twofold. As a first step,
    it comes pre-packaged with a copy of jQuery and many other popular JavaScript
    libraries that plugin developers can use without having to load their own versions.
    Then, to prevent multiple copies from being loaded on a page, it offers easy-to-use
    functions that queue up scripts and styles to identify duplicates before rendering
    pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress对这种复杂架构的回答有两个方面。首先，它预包装了jQuery和其他许多流行的JavaScript库的副本，插件开发者可以使用这些库而无需加载自己的版本。然后，为了防止在页面上加载多个副本，它提供了易于使用的函数，这些函数在渲染页面之前排队脚本和样式以识别重复项。
- en: This chapter shows how to safely load JavaScript and jQuery files that are provided
    with WordPress or that come from external sources to add powerful new functionalities
    to front-facing pages and plugin configuration panels. It also explains how to
    securely run AJAX queries to refresh partial page sections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何安全地加载与WordPress一起提供的或来自外部来源的JavaScript和jQuery文件，以便为前端页面和插件配置面板添加强大的新功能。它还解释了如何安全地运行AJAX查询以刷新页面部分内容。
- en: Safely loading jQuery onto WordPress web pages
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WordPress网页上安全加载jQuery
- en: While it might be tempting to provide your own copy of jQuery as part of a new
    plugin that uses the popular JavaScript library or to access a copy from the Google
    API website, WordPress actually provides a copy of jQuery in its installation
    and makes it very easy to load it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能很诱人，但作为使用流行JavaScript库的新插件的一部分提供自己的jQuery副本，或者从Google API网站获取副本，但实际上WordPress在其安装中提供了一个jQuery副本，并使其加载变得非常简单。
- en: By using the appropriate utility function to load jQuery, developers make a
    request to WordPress to load this library instead of doing it themselves. Once
    all the requests have been received, they are analyzed for duplicates and a single
    instance of each script is loaded to reduce the chance of conflicts between multiple
    copies of the same library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用适当的实用函数来加载jQuery，开发者向WordPress请求加载此库而不是自己加载。一旦收到所有请求，它们将被分析以查找重复项，并加载每个脚本的单一实例以减少同一库多个副本之间的冲突机会。
- en: This recipe shows how to load the jQuery script for use on front-facing website
    pages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何加载jQuery脚本以用于前端网站页面。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问WordPress开发环境。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch9-load-jquery`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch9-load-jquery`的新目录。
- en: Navigate to the directory and create a text file called `ch9-load-jquery.php`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录并创建一个名为`ch9-load-jquery.php`的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Load jQuery`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为“第9章 - 加载jQuery”。
- en: 'Add the following line of code to register a function to be called when script
    loading requests are processed:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册在处理脚本加载请求时将被调用的函数：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code segment to provide an implementation for the `ch9lj_front_facing_pages`
    function:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供`ch9lj_front_facing_pages`函数实现的代码中：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save and close the plugin file.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Go to the Themes menu section located under Appearance in the WordPress administration
    interface.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往WordPress管理界面中的“外观”下的“主题”菜单部分。
- en: Click on Add New and search for a theme called `Twenty Eleven`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加新主题”并搜索名为`Twenty Eleven`的主题。
- en: Install the theme on your website and Activate it.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网站上安装该主题并激活它。
- en: Visit your website and view the page source, searching for instances of the
    `jquery.js` library. Your search should come up empty unless you have activated
    other plugins that are asking for jQuery to be loaded.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问你的网站并查看页面源代码，搜索`jquery.js`库的实例。除非你已激活要求加载jQuery的其他插件，否则你的搜索结果应该是空的。
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Load jQuery`
    plugin.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活`第9章 - 加载jQuery`插件。
- en: Go back to any page on your website and view the page source.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的网站上的任何页面并查看页面源代码。
- en: 'Search for the keyword `jquery` to see that a copy of the script is now loaded
    from the WordPress `wp-includes` folder, along with the `jquery-migrate` script
    for backward compatibility:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索关键字`jquery`以查看脚本现在是从WordPress的`wp-includes`文件夹加载的，包括用于向后兼容的`jquery-migrate`脚本：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The key component of this recipe is the `wp_enqueue_script` function, which
    allows developers to load their own JavaScript files or to ask WordPress to load
    one of the scripts that it comes packaged with. While the function requires many
    arguments when loading your own scripts, which we'll cover in a later recipe,
    it only needs a single argument to load built-in scripts. In this example, that
    argument is `jquery`. To get a full list of default scripts available with WordPress,
    check out the code reference page for the function ([https://developer.wordpress.org/reference/functions/wp_enqueue_script/](https://developer.wordpress.org/reference/functions/wp_enqueue_script/)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的关键组件是`wp_enqueue_script`函数，它允许开发者加载他们自己的JavaScript文件或请求WordPress加载它附带的一个脚本。虽然加载自己的脚本时该函数需要许多参数，我们将在后面的菜谱中介绍，但它只需要一个参数来加载内置脚本。在这个例子中，该参数是`jquery`。要获取WordPress附带的所有默认脚本的完整列表，请查看该函数的代码参考页面（[https://developer.wordpress.org/reference/functions/wp_enqueue_script/](https://developer.wordpress.org/reference/functions/wp_enqueue_script/))）。
- en: Once you know which script to load, the call to `wp_enqueue_script` should be
    made from one of three action hooks, depending on the target page(s) where the
    script should be loaded. These are `wp_enqueue_scripts` for front-facing pages,
    `admin_enqueue_scripts` for administration pages, and `login_enqueue_scripts`
    for the login page, with the first one fulfilling our requirement for this recipe.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你知道要加载哪个脚本，就应该从以下三个动作钩子之一调用`wp_enqueue_script`，具体取决于脚本应该加载的目标页面。这些是用于前端页面的`wp_enqueue_scripts`，用于管理页面的`admin_enqueue_scripts`，以及用于登录页面的`login_enqueue_scripts`，其中第一个满足本菜谱的要求。
- en: We had to go back and install an older theme to be able to see a change after
    activating our plugin. Many modern themes already make a request for jQuery to
    be loaded since it is used to animate menus or provide many other common functionalities.
    That being said, we cannot assume that this will be the case if we plan to distribute
    our work to a larger audience.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不退回去安装一个较旧的主题，以便在激活我们的插件后看到变化。许多现代主题已经请求加载jQuery，因为它是用于动画菜单或提供许多其他常见功能。话虽如此，如果我们计划将我们的作品分发给更广泛的受众，我们不能假设这一点。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Veteran jQuery developers should be aware that the copy delivered with WordPress
    has a small caveat.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 经验丰富的jQuery开发者应该知道WordPress附带的内容有一个小瑕疵。
- en: jQuery noconflict mode
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery noconflict模式
- en: To avoid internal conflicts with other JavaScript and jQuery libraries, the
    version of jQuery that comes bundled with WordPress is configured in the `noconflict`
    mode. This means that the `$` shortcut that can normally be used to access jQuery
    will not be available. As such, all the examples found in this chapter spell out
    the jQuery keyword.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与其他JavaScript和jQuery库发生内部冲突，WordPress捆绑的jQuery版本被配置在`noconflict`模式下。这意味着通常可以用来访问jQuery的`$`快捷键将不可用。因此，本章中找到的所有示例都明确指出了jQuery关键字。
- en: 'To regain access to this shortcut, you can use the following syntax in your
    code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新获取此快捷方式的访问权限，你可以在代码中使用以下语法：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Displaying a pop-up dialog using the built-in ThickBox plugin
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置的 ThickBox 插件显示弹出对话框
- en: As annoying as they can be to visitors, pop-up dialogs are a feature that many
    website administrators are using to help them advertise special offers or get
    readers to subscribe to their content. Since it uses pop-up dialogs in its own
    administrative pages, WordPress comes bundled with a jQuery script called ThickBox
    that can be used to display these types of dialogs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管弹出对话框可能会让访客感到烦恼，但许多网站管理员都在使用这一功能来帮助他们推广特别优惠或让读者订阅他们的内容。由于它在其管理页面中使用了弹出对话框，WordPress
    预装了一个名为 ThickBox 的 jQuery 脚本，可用于显示这些类型的对话框。
- en: This recipe shows how to load the ThickBox script and use it to render a pop-up
    dialog.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何加载 ThickBox 脚本并使用它来渲染弹出对话框。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够访问 WordPress 开发环境。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch9-pop-up-dialog`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch9-pop-up-dialog` 的新目录。
- en: Navigate to the directory and create a text file called `ch9-pop-up-dialog.php`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录并创建一个名为 `ch9-pop-up-dialog.php` 的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Pop-Up Dialog`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为 `第 9 章 - 弹出对话框`。
- en: 'Add the following line of code to register a function to be called when script
    loading requests are made:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到注册一个在脚本加载请求时被调用的函数：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code segment to provide an implementation for the `ch9pud_load_scripts`
    function:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供 `ch9pud_load_scripts` 函数的实现：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Insert the following line of code to register a function to display content
    in the page footer:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码行以注册一个在页面页脚显示内容的函数：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Append the following block of code to provide an implementation for the `ch9pud_footer_code`
    function:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以提供 `ch9pud_footer_code` 函数的实现：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save and close the plugin file.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Create a new HTML file named `content.html` and open it in a code editor.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `content.html` 的新 HTML 文件，并在代码编辑器中打开它。
- en: 'Insert the following HTML code as the file''s content:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码作为文件内容插入：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save and close the HTML file.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭 HTML 文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Pop-Up
    Dialog` plugin.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活 `第 9 章 - 弹出对话框` 插件。
- en: 'Visit any page of the website to see the new pop-up dialog appear two seconds
    after the whole page is displayed:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站的任何页面，以查看新弹出对话框在整页显示两秒后出现：
- en: '![](img/2cc0b3fe-9ab2-4cd6-88b5-c1b148c8b6c6.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2cc0b3fe-9ab2-4cd6-88b5-c1b148c8b6c6.png)'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similarly to the previous recipe, we start by assigning a function to the `wp_enqueue_scripts`
    action hook. When executed, the callback makes a call to `wp_enqueue_script` to
    request for jQuery to be loaded from the local copy of WordPress. The next line
    calls the `add_thickbox` function, which is a utility function that makes multiple
    calls to `wp_enqueue_script` and `wp_enqueue_style` to load the appropriate JavaScript
    and stylesheet in the page header.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的食谱类似，我们首先将一个函数分配给 `wp_enqueue_scripts` 动作钩子。当执行时，回调函数调用 `wp_enqueue_script`
    以请求从 WordPress 的本地副本加载 jQuery。下一行调用 `add_thickbox` 函数，这是一个实用函数，它会对 `wp_enqueue_script`
    和 `wp_enqueue_style` 进行多次调用，以在页面页眉中加载适当的 JavaScript 和样式表。
- en: Once all the required elements are loaded, the next section of the recipe outputs
    a block of JavaScript code to the page footer which uses jQuery to register a
    function that will be called when the entire page is loaded. When this happens,
    the `setTimeout` JavaScript function is used to register a function that will
    be called 2000 milliseconds later and will take care of calling `tb_show` to display
    the pop-up dialog. `tb_show` has three arguments, with the first one indicating
    the dialog title, the second containing the address of the content to render within
    the box, and the third expecting a path to a group of images to be displayed.
    In our case, the last argument is left null. Notice that the width and height
    (in pixels) of the dialog are indicated as part of the address of the content
    page to be displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有必需的元素都加载完毕，菜谱的下一部分将输出一段 JavaScript 代码到页面页脚，该代码使用 jQuery 注册一个函数，该函数将在整个页面加载时被调用。当发生这种情况时，`setTimeout`
    JavaScript 函数用于注册一个将在 2000 毫秒后调用的函数，并负责调用 `tb_show` 来显示弹出对话框。`tb_show` 有三个参数，第一个参数指示对话框标题，第二个包含要在框内渲染的内容的地址，第三个期望一个要显示的图像组的路径。在我们的情况下，最后一个参数留为空。请注意，对话框的宽度和高度（以像素为单位）作为要显示的内容页面地址的一部分给出。
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While the recipe displays a valid dialog, developers might want a bit more control
    over how it can be closed and when it gets displayed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然菜谱显示了一个有效的对话框，但开发者可能希望对如何关闭对话框以及何时显示它有更多的控制。
- en: Removing the dialog close button
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除对话框关闭按钮
- en: 'By default, the ThickBox script offers a close button in the top-right corner
    of the pop-up dialog that can be used to close it at any time. This may not be
    desirable if you expect visitors to provide feedback or perform a specific action
    before dismissing the dialog. By adding the `modal` keyword to the content URL--set
    to the value of `true`--ThickBox will remove the dialog title bar, including the
    close button:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ThickBox 脚本在弹出对话框的右上角提供了一个关闭按钮，可以随时使用它来关闭对话框。如果您期望访客在关闭对话框之前提供反馈或执行特定操作，这可能不是您想要的。通过将
    `modal` 关键字添加到内容 URL（设置为 `true` 的值），ThickBox 将移除对话框标题栏，包括关闭按钮：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the close button is gone, we can call the `tb_remove` JavaScript function
    to close the dialog. The following is an example of a simple link that could be
    added in `content.html` that will close the dialog:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦关闭按钮消失，我们可以调用 `tb_remove` JavaScript 函数来关闭对话框。以下是在 `content.html` 中可以添加的简单链接示例，它将关闭对话框：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Displaying pop-up dialogs on select pages
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在选定页面上显示弹出对话框
- en: 'While the recipe''s original code displays a pop-up dialog on every single
    page of a website, it may be better to show it only on specific pages, such as
    the front page, to avoid over-exposition. To accomplish this, we can move the
    two `add_action` calls inside of an action hook callback and check whether the
    visitor is making a request to see the front page before loading our scripts:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然菜谱的原始代码在网站的每个页面上都显示弹出对话框，但最好只在前页等特定页面上显示，以避免过度展示。为了实现这一点，我们可以将两个 `add_action`
    调用移动到动作钩子回调内部，并在加载我们的脚本之前检查访客是否正在请求查看前页：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A similar technique can be used by substituting the `is_front_page` function
    with the `is_page( 'id_title_or_slug' )` function, which checks whether the current
    page numeric ID, title, or post slug matches the value that it receives as an
    argument. In that situation, a plugin configuration page could allow users to
    easily select one or more pages on which the dialog should appear.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似的技术，通过将 `is_front_page` 函数替换为 `is_page( 'id_title_or_slug' )` 函数，该函数检查当前页面的数字
    ID、标题或文章缩略语是否与它接收的参数值匹配。在这种情况下，插件配置页面可以允许用户轻松选择一个或多个应显示对话框的页面。
- en: Controlling pop-up dialog display using shortcodes
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用短代码控制弹出对话框显示
- en: As you may be aware, loading scripts and styles on a page where they won't be
    used unnecessarily slows down that page's rendering time, since the browser will
    still need to download and validate the content of these external files. While
    the previous recipe's *There's More...* section offered one way to select specific
    pages where scripts and styles should be loaded, a different approach is to analyze
    the page contents for the presence of a special code to make that decision.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，在不必要使用的情况下在页面上加载脚本和样式会减慢该页面的渲染时间，因为浏览器仍然需要下载和验证这些外部文件的内容。虽然先前的菜谱 *还有更多...*
    部分提供了一种选择应加载脚本和样式的特定页面的方法，但另一种方法是通过分析页面内容以查找特殊代码来做出这个决定。
- en: This recipe shows how to add a filter to the previous recipe to search for a
    shortcode in posts and pages to decide when to display a pop-up dialog.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了如何向之前的菜谱添加一个过滤器，以在帖子页面中搜索短代码，以决定何时显示弹出对话框。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying a pop-up dialog using the built-in
    ThickBox plugin* recipe to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 9/ch9-pop-up-dialog/ch9-pop-up-dialog-v1.php`)
    from the code bundle and rename the file as `ch9-pop-up-dialog.php`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*使用内置的ThickBox插件显示弹出对话框*的菜谱，以便为本菜谱提供一个起点。或者，您可以从代码包中获取结果代码（`第9章/ch9-pop-up-dialog/ch9-pop-up-dialog-v1.php`），并将文件重命名为`ch9-pop-up-dialog.php`。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch9-pop-up-dialog` directory and then edit `ch9-pop-up-dialog.php`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch9-pop-up-dialog`目录，然后编辑`ch9-pop-up-dialog.php`。
- en: 'Find the `ch9pud_load_scripts` function and add the following highlighted lines
    of code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch9pud_load_scripts`函数，并添加以下突出显示的代码行：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Locate the `ch9pud_footer_code` function and modify the code, adding the following
    highlighted lines of code to the function body:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ch9pud_footer_code`函数，并修改代码，将以下突出显示的代码行添加到函数体中：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following line of code to register a function that will filter post
    and page contents before any other parsing and formatting is performed:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行代码以注册一个函数，该函数将在任何其他解析和格式化之前过滤帖子页面内容：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Append the following block of code to provide an implementation for the
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以提供对`ch9pud_popup_shortcode`函数的实现：
- en: '`ch9pud_conditionally_add_scripts_and_styles` function:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ch9pud_conditionally_add_scripts_and_styles`函数：'
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Insert the following function call to declare a new shortcode along with a
    function responsible for replacing it with content:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下函数调用以声明一个新的短代码以及一个负责将其替换为内容的函数：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following code block to provide a simple implementation for the `ch9pud_popup_shortcode`
    function:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到为`ch9pud_popup_shortcode`函数提供一个简单实现的代码块：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save and close the plugin file.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Visit the website's front page and you will notice that the pop-up dialog is
    no longer displayed.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站的前页，您会注意到弹出对话框不再显示。
- en: Create a new page and insert the `[popup]` shortcode in the page contents.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新页面，并在页面内容中插入`[popup]`短代码。
- en: View the new page to see that the new pop-up dialog appears, while the `[popup]`
    shortcode is not shown.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看新页面，以查看新的弹出对话框出现，而`[popup]`短代码没有显示。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While the existing action hooks were first modified to create and query a global
    variable to determine whether or not they should load scripts and output code
    to the page footer, the bulk of the work is actually done by the filter function
    that gets associated to `the_posts` hook. This function receives an array of all
    the posts and pages that are destined to be displayed and must determine if a
    special keyword is present to set the `load_scripts` variable appropriately.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现有的动作钩子首先被修改以创建和查询一个全局变量，以确定是否应该加载脚本并将代码输出到页面页脚，但实际上大部分工作是由与`the_posts`钩子相关联的过滤器函数完成的。这个函数接收一个数组，包含所有预定要显示的帖子页面，并必须确定是否存在特殊关键字，以适当地设置`load_scripts`变量。
- en: As you can see from the recipe's code, the text that we chose to look for, `[popup]`,
    is a shortcode. While we could have selected any text as the trigger to display
    a pop-up dialog, we chose a shortcode, since it would be easy to make it disappear
    by providing a simple rendering function for it that returns no content.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从菜谱的代码中看到的，我们选择查找的文本`[popup]`是一个短代码。虽然我们可以选择任何文本作为触发显示弹出对话框的触发器，但我们选择了一个短代码，因为它可以通过提供一个简单的渲染函数来轻松消失，该函数返回无内容。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The *Displaying a pop-up dialog using the built-in ThickBox plugin* recipe
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用内置的ThickBox插件显示弹出对话框*的菜谱'
- en: Displaying a calendar day selector using the Datepicker plugin
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Datepicker插件显示日历日选择器
- en: For all of its great administrative control panels and user interface elements,
    WordPress still has a simplistic approach to date selection, making users interact
    with a drop-down box and text fields to indicate the month, day, year, and time
    when a post or page is to be published. A much more interesting way to enter this
    type of information is to use a pop-up calendar that allows users to navigate
    through visual representations of each month and pick the desired date.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管WordPress拥有众多优秀的行政控制面板和用户界面元素，但在日期选择方面仍然采用了一种简单的方法，即让用户通过下拉框和文本字段来选择月份、日期、年份和时间，以指示发布帖子或页面。一种更有趣的方法是使用弹出日历，允许用户通过每个月份的视觉表示进行导航并选择所需的日期。
- en: This recipe shows how to use the jQuery Datepicker script that is provided by
    default with WordPress to display a pop-up calendar to provide an easy way to
    select dates.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何使用WordPress默认提供的jQuery Datepicker脚本显示弹出日历，以提供一种轻松选择日期的方法。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have access to a WordPress development environment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够访问WordPress开发环境。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch9-calendar-picker` along with a subdirectory
    called `css`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch9-calendar-picker`的新目录，以及一个名为`css`的子目录。
- en: Visit [https://](https://www.jqueryui.com/download)[www.jqueryui.com/download](http://www.jqueryui.com/download),
    toggle all the components to be unchecked, and select only Datepicker. Then, select
    UI lightness as the theme to be included and download the latest version of the
    jQuery UI package.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://](https://www.jqueryui.com/download)[www.jqueryui.com/download](http://www.jqueryui.com/download)，取消选中所有组件，仅选择日期选择器。然后，选择UI
    lightness作为要包含的主题，并下载jQuery UI包的最新版本。
- en: Open the resulting file with an archive management tool and extract the file
    `jquery-ui.min.css` to the `css` folder of the newly created plugin directory.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用归档管理工具打开生成的文件，并将文件`jquery-ui.min.css`提取到新创建的插件目录的`css`文件夹中。
- en: Extract the entire `images` directory from the archive to the `css` folder.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个`images`目录从归档中提取到`css`文件夹中。
- en: Create a text file called `ch9-calendar-picker.php` in the plugin directory.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件目录中创建一个名为`ch9-calendar-picker.php`的文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Calendar Picker`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个合适的标题，将插件命名为“第9章 - 日历选择器”。
- en: 'Add the following line of code to register a function to be called when script
    loading requests are made:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册在脚本加载请求时被调用的函数：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following code segment to provide an implementation for the `ch9cp_admin_scripts`
    function:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch9cp_admin_scripts`函数的实现：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Insert the following line of code to register a function to be called when
    meta boxes are created:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码行以注册一个在创建元框时被调用的函数：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Append the following block of code to provide an implementation for the `ch9cp_register_meta_box`
    function:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到提供`ch9cp_register_meta_box`函数实现的代码中：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Insert the following code block to implement the `ch9cp_date_meta_box` function
    that was declared in the call to `add_meta_box`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以实现`add_meta_box`调用中声明的`ch9cp_date_meta_box`函数：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save and close the plugin file.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Calendar
    Picker plugin`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件管理页面并激活“第9章 - 日历选择器插件”。
- en: Select any item in the Posts management section and edit it to see the new date
    assignment meta box.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“帖子管理”部分选择任何项目并编辑它，以查看新的日期分配元框。
- en: 'Click on the ... button or click on the Assign Date textbox to display the
    pop-up calendar and select a date:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击...按钮或点击“分配日期”文本框以显示弹出日历并选择一个日期：
- en: '![](img/235cae37-5891-43b1-ae74-d3d39dd7aafe.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/235cae37-5891-43b1-ae74-d3d39dd7aafe.png)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Just like we saw with jQuery and ThickBox in the previous recipes, WordPress
    comes bundled with many jQuery libraries. Two of these libraries, jQuery UI and
    jQuery UI Datepicker, can be used to display a pop-up calendar and associate it
    with a text field on a form. That being said, the distribution of these scripts
    is missing the associated stylesheet and images that are required to display a
    fully rendered calendar.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在前面的菜谱中看到的那样，WordPress附带了许多jQuery库。其中两个库，jQuery UI和jQuery UI Datepicker，可以用来显示弹出日历并将其与表单上的文本字段关联。话虽如此，这些脚本的分发缺少显示完整渲染日历所需的关联样式表和图像。
- en: This recipe starts by visiting the jQuery UI website and downloading a copy
    of the complete library, which includes all the required layout files. Once the
    download is complete, we are only interested in getting a copy of the style data,
    since all the other necessary scripts are provided by WordPress. After registering
    a function with `admin_enqueue_scripts`, we make three function calls to load
    the required JavaScript files in the admin page header. We also make a call to
    load the stylesheet that we just downloaded. When copying files from the downloaded
    archive, we selected the minified versions of the CSS files to have the smallest
    versions available.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱首先访问jQuery UI网站并下载完整库的副本，其中包括所有必需的布局文件。下载完成后，我们只对获取样式数据的副本感兴趣，因为所有其他必要的脚本都由WordPress提供。在通过`admin_enqueue_scripts`注册函数后，我们在管理页面头部调用三个函数来加载所需的JavaScript文件。我们还调用了一个函数来加载我们刚刚下载的样式表。在从下载的存档中复制文件时，我们选择了CSS文件的压缩版本，以获得最小的版本。
- en: The `wp_enqueue_style` function has many parameters. In this example, we are
    providing values for the first four of them to indicate the name of the style,
    the path to the style file, an empty list of dependencies, and a version number.
    This function also has a fifth parameter, which we are not using here, to indicate
    if the script should be loaded in the header or footer, where the default is the
    header.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp_enqueue_style`函数有很多参数。在这个例子中，我们为前四个参数提供了值，以指示样式的名称、样式的路径、一个空的依赖项列表和一个版本号。此函数还有一个第五个参数，我们在这里没有使用，用于指示脚本是否应在头部或页脚加载，默认为头部。'
- en: Once all of the required scripts are in place, the remainder of the code creates
    a meta box in the post editor, displays a text field in that box, and outputs
    JavaScript code that will be called when the page is completely rendered to associate
    the pop-up calendar with the text field. As part of the calendar's options, we
    specify that the user will only be able to select future dates with the `minDate`
    parameter along with the desired date format.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有必需的脚本都已就绪，代码的其余部分在帖子编辑器中创建一个元数据框，在该框中显示一个文本字段，并输出当页面完全渲染时将被调用的JavaScript代码，以将弹出日历与文本字段关联。作为日历选项的一部分，我们指定用户只能通过`minDate`参数以及所需的日期格式选择未来的日期。
- en: Adding tooltips to admin page form fields using the TipTip plugin
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TipTip插件向管理页面表单字段添加工具提示
- en: Documentation is a very important step of plugin development, as it allows users
    to understand how to configure the plugins you create. That being said, users
    will not typically go very far to find the information they need, resulting in
    many unnecessary questions in discussion forums or in emails.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是插件开发的重要步骤，因为它使用户能够理解如何配置你创建的插件。换句话说，用户通常不会走得太远去寻找他们需要的信息，这导致在讨论论坛或电子邮件中有很多不必要的提问。
- en: As discussed in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User
    Settings and Administration Pages*, one way to provide documentation is to create
    a help tab that appears in the top-right corner of the plugin's configuration
    panel. While that approach is much easier for users than to find a Readme file
    or go back to the official WordPress plugin repository, it still requires them
    to actively seek and click a link to open that section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第3章](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml)“用户设置和管理页面”中所述，提供文档的一种方法是在插件配置面板的右上角创建一个帮助标签。虽然这种方法对于用户来说比找到Readme文件或返回官方WordPress插件仓库要容易得多，但它仍然要求他们主动寻找并点击链接来打开该部分。
- en: That's where tooltips come into play. Using a jQuery plugin to render clean,
    good looking tooltips, we can add documentation to a plugin that will be displayed
    contextually based on the configuration fields that the user is currently interacting
    with.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是工具提示发挥作用的地方。使用 jQuery 插件来渲染干净、美观的工具提示，我们可以向插件添加文档，这些文档将根据用户当前交互的配置字段上下文显示。
- en: This recipe shows how to download and integrate the TipTip jQuery library to
    display tooltips when configuration fields are used.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱展示了如何下载和集成 TipTip jQuery 库，以便在配置字段使用时显示工具提示。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying a calendar day selector using
    the Datepicker plugin* recipe to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 9/ch9-calendar-picker/ch9-calendar-picker-v1.php`)
    from the code bundle and rename the file as `ch9-calendar-picker.php`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了 *使用 Datepicker 插件显示日历日选择器* 的食谱，以便为本食谱提供一个起点。或者，您可以从代码包中获取结果代码（`第 9
    章/ch9-calendar-picker/ch9-calendar-picker-v1.php`），并将文件重命名为 `ch9-calendar-picker.php`。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的 WordPress 插件目录。
- en: Navigate to the `ch9-calendar-picker` directory.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `ch9-calendar-picker` 目录。
- en: Create a new subdirectory called `tiptip`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `tiptip` 的新子目录。
- en: Visit the TipTip jQuery home page, available at [https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads](https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads).
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 TipTip jQuery 主页，网址为 [https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads](https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads)。
- en: Download Version 1.3 of the plugin source code to your local computer.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载插件源代码的版本 1.3 到您的本地计算机。
- en: Open the resulting file with an archive management tool and extract the `jquery.tipTip.minified.js`
    and `tipTip.css` files to the `tiptip` directory.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用归档管理工具打开生成的文件，并将 `jquery.tipTip.minified.js` 和 `tipTip.css` 文件提取到 `tiptip`
    目录。
- en: Open the main plugin file `ch9-calendar-picker.php` in a code editor.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开主插件文件 `ch9-calendar-picker.php`。
- en: 'Find the `ch9cp_admin_scripts` function and add the following lines of code
    at the end of the `if` condition, so that the new scripts are only loaded on the
    page and post editors, like the others:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `ch9cp_admin_scripts` 函数，并在 `if` 条件语句的末尾添加以下代码行，以便新脚本仅在页面和帖子编辑器上加载，就像其他脚本一样：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Locate the `ch9cp_date_meta_box` function and modify the line that renders
    the textbox, as shown in the following highlighted code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 `ch9cp_date_meta_box` 函数，并修改渲染文本框的行，如下所示突出显示的代码：
- en: '[PRE24]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Again, in the `ch9cp_date_meta_box` function, add the following highlighted
    block of code to the existing block of JavaScript code:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在 `ch9cp_date_meta_box` 函数中，将以下突出显示的代码块添加到现有的 JavaScript 代码块中：
- en: '[PRE25]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save and close the plugin file.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Select any item in the Posts management section and edit it.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在帖子管理部分选择任何项目并编辑它。
- en: 'Move the mouse over the date field to see the new tooltip appear:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标移至日期字段上，以查看新工具提示的出现：
- en: '![](img/f664d963-4f0f-4461-910d-34a5e8af215a.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f664d963-4f0f-4461-910d-34a5e8af215a.png)'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The TipTip library turns regular HTML `title` tags into nice looking tooltips
    that appear when users position their mouse cursor over an item or select it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: TipTip 库将常规的 HTML `title` 标签转换为当用户将鼠标悬停在项目上或选择它时出现的漂亮工具提示。
- en: This recipe starts by downloading the TipTip script from the plugin author's
    website. Once downloaded, we only extract two of the three files that the archive
    contains. The third file is not needed, as it is a non-compact version of the
    script.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱首先从插件作者的网站上下载 TipTip 脚本。下载后，我们只提取归档中包含的三个文件中的两个。第三个文件不需要，因为它是一个非压缩版本的脚本。
- en: Once we have the desired files in place, we load them in the admin page header
    by adding calls to the `wp_enqueue_script` and `wp_enqueue_style` functions in
    the callback that was already associated with the `admin_enqueue_script` action
    hook. Similar to `wp_enqueue_style`, the `wp_enqueue_script` function has five
    parameters, which indicate the name of the script, the location of the script
    file, a list of any dependencies for the script, a version number, and an option
    to indicate if the script should be loaded in the site header or footer.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了所需的文件，我们就在与`admin_enqueue_script`动作钩子已关联的回调函数中添加对`wp_enqueue_script`和`wp_enqueue_style`函数的调用，将它们加载到管理页面标题中。与`wp_enqueue_style`类似，`wp_enqueue_script`函数有五个参数，分别表示脚本的名称、脚本文件的存储位置、脚本的依赖项列表、版本号以及一个选项，用于指示脚本是否应加载到网站标题或页脚中。
- en: Once the library is loaded, activating the tooltips is quite simple. First,
    we select a class name for our items and add it to all the items that are destined
    to have help text associated with them. Then, we add the help text in a `title`
    tag on each item. Note that the item in question could be anything from a div
    to a form input component or a table row. Finally, we make a call to a jQuery
    function to find all the items that have the right class and execute the TipTip
    function on them. After execution, all the selected items will have their title
    text appear as tooltips.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦库被加载，激活工具提示就相当简单。首先，我们为我们的项目选择一个类名，并将其添加到所有预定与它们关联帮助文本的项目中。然后，我们在每个项目的`title`标签中添加帮助文本。请注意，相关项目可以是div、表单输入组件或表格行等任何内容。最后，我们调用一个jQuery函数来查找所有具有正确类名的项目，并在它们上执行TipTip函数。执行后，所有选定的项目都将显示其标题文本作为工具提示。
- en: See also
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying a calendar day selector using the Datepicker plugin* recipe
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Datepicker插件显示日历日选择器的配方
- en: Using AJAX to dynamically update partial page contents
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AJAX动态更新部分页面内容
- en: When users create complex websites with lots of dynamic content, such as Twitter
    widgets or other components that fetch external data, refreshing the entire page
    every time a user interacts with the website can quickly become a gruelling experience
    for visitors.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户创建具有大量动态内容（如Twitter小部件或其他获取外部数据的组件）的复杂网站时，每次用户与网站交互时刷新整个页面可能会迅速变成对访客来说令人疲惫不堪的经历。
- en: In such situations, using **Asynchronous JavaScript and XML** (**AJAX**) can
    greatly accelerate user navigation by only displaying subsets of data on visitor-facing
    pages and dynamically retrieving updates to isolated sections. More specifically,
    AJAX allows the browser to send requests to a web server, including data parameters,
    and to insert the data that it receives back in the web page, replacing or augmenting
    the original content.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用**异步JavaScript和XML**（**AJAX**）可以通过仅在访客页面显示数据子集并动态检索独立部分的更新来大大加快用户导航。更具体地说，AJAX允许浏览器向Web服务器发送请求，包括数据参数，并将它接收到的数据插入到网页中，替换或增强原始内容。
- en: This recipe shows how to add AJAX support to the bug tracking system created
    in [Chapter 8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating Custom MySQL
    Database Tables*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了如何将AJAX支持添加到[第8章](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml)中创建的bug跟踪系统，*创建自定义MySQL数据库表*。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Importing data from a user file into custom
    tables* recipe in [Chapter 8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating
    Custom MySQL Database Tables*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v8.php`)
    from the code bundle and rename the file as `ch8-bug-tracker.php`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了[第8章](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml)，*创建自定义MySQL数据库表*中的*从用户文件导入数据到自定义表*配方，以便为本配方提供一个起点。或者，你也可以从代码包中获取生成的代码（`Chapter
    8/ch8-bug-tracker/ch8-bug-tracker-v8.php`），并将文件重命名为`ch8-bug-tracker.php`。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`ch8-bug-tracker`目录并编辑`ch8-bug-tracker.php`。
- en: Locate the `ch8bt_shortcode_list` function and find the section where the SQL
    query is being prepared.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`ch8bt_shortcode_list`函数，并找到准备SQL查询的部分。
- en: 'Add an extra line to the query (the highlighted line of code in the following
    code block) to show only open bugs (bugs with a `bug_status` field set to `0`):'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询中添加额外的行（以下代码块中高亮的代码行）以仅显示打开的bug（`bug_status`字段设置为`0`的bug）：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Make the change highlighted in the following code to the code building the
    search query:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码中突出显示的部分更改到构建搜索查询的代码中：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Find the code responsible for drawing the search form, and add the following
    highlighted block of code after it to display a link to be clicked to show closed
    bugs:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到负责绘制搜索表单的代码，并在其后添加以下突出显示的代码块以显示一个可点击的链接来显示已关闭的错误：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Insert this code segment after the bug display table to add the JavaScript
    responsible for providing the AJAX-based data replacement functionality:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在错误显示表单之后插入此代码段，以添加提供基于AJAX的数据替换功能的JavaScript：
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following line of code at the end of the plugin file to register a
    function to add content to the page header:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件文件末尾添加以下代码行以注册一个函数，用于向页面标题添加内容：
- en: '[PRE30]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Append the following block of code to provide an implementation for the `ch8bt_declare_ajaxurl`
    function:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到提供`ch8bt_declare_ajaxurl`函数实现的代码中：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Insert the following lines of code to register functions that will be called
    when AJAX requests are received from public or logged in users with an action
    variable set to `ch8bt_buglist_ajax`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码行以注册在接收到来自公共用户或已登录用户且操作变量设置为`ch8bt_buglist_ajax`的AJAX请求时将调用的函数：
- en: '[PRE32]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following block of code to provide an implementation for the `ch8bt_buglist_ajax`
    function:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到提供`ch8bt_buglist_ajax`函数实现的代码中：
- en: '[PRE33]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following line of code to register a function to be called when scripts
    are being queued up:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在脚本排队时调用的函数：
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Insert the following code block to provide an implementation for the `ch8bt_load_query`
    function:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码块以提供`ch8bt_load_query`函数的实现：
- en: '[PRE35]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Save and close the plugin file.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Create a new text file named `stylesheet.css` in the plugin directory and insert
    the following content in the file:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件目录中创建一个名为`stylesheet.css`的新文本文件，并在文件中插入以下内容：
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Visit the bug listing page that was previously created to see that only opened
    bugs are displayed.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问之前创建的错误列表页面，以查看仅显示已打开的错误。
- en: 'Click on the link to display closed bugs to see how the list gets quickly replaced
    with closed issues:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击显示已关闭错误的链接，以查看列表如何快速替换为已关闭的问题：
- en: '![](img/7233c716-dd0b-4bbd-a5b2-acfa93834a6c.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7233c716-dd0b-4bbd-a5b2-acfa93834a6c.png)'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: AJAX page interactions are powered by JavaScript code and allow users to create
    pages with content that gets dynamically updated. To add this functionality to
    our bug tracking system, we start this recipe by modifying the existing shortcode
    bug query to only retrieve entries that have an open status (value of `0`).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX页面交互由JavaScript代码提供支持，并允许用户创建内容动态更新的页面。为了将此功能添加到我们的错误跟踪系统中，我们首先通过修改现有的短代码错误查询，仅检索具有打开状态（值为`0`）的条目来开始这个菜谱。
- en: Once this is done, we move on to add two new elements to the initial shortcode
    output, a link to display closed bugs and a block of JavaScript code. The link
    itself is quite simple, containing a class name and a text label that visitors
    will be able to click. The JavaScript code is a bit more complex. Essentially,
    the script makes a request for the `replacecontent` function to be called when
    the `show_closed_bugs` link is clicked by visitors. In turn, the `replacecontent`
    function contains a single call to the jQuery `ajax` function. This function takes
    a number of arguments, starting with the type of operation, which is set to `POST`.
    This indicates that all the variables sent in the request URL will be stored in
    a standard `$_POST` variable array.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们继续添加两个新的元素到初始短代码输出中，一个是显示已关闭错误的链接，另一个是JavaScript代码块。链接本身相当简单，包含一个类名和一个文本标签，访客可以点击。JavaScript代码稍微复杂一些。基本上，脚本会在访客点击`show_closed_bugs`链接时请求调用`replacecontent`函数。反过来，`replacecontent`函数包含对jQuery
    `ajax`函数的单次调用。此函数接受多个参数，从操作类型开始，设置为`POST`。这表示请求URL中发送的所有变量都将存储在标准的`$_POST`变量数组中。
- en: The second parameter is the URL to which the request should be sent. The variable
    used here is defined in the header code that is generated by the `ch8bt_declare_ajaxurl`
    function and points to the WordPress `admin-ajax.php` script URL. While the name
    of this script starts with the word `admin`, it can also be used to process AJAX
    requests from visitor-facing pages.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是要发送请求的URL。这里使用的变量在`ch8bt_declare_ajaxurl`函数生成的标题代码中定义，指向WordPress的`admin-ajax.php`脚本URL。虽然此脚本的名称以单词`admin`开头，但它也可以用于处理访客页面上的AJAX请求。
- en: After these first two arguments is a `data` array that contains a number of
    data elements, such as the name of the action, a nonce field to secure the request,
    and the status of the bugs that should be retrieved. Finally, the `success` parameter
    indicates that the data received back from the AJAX request should be used to
    replace the HTML content of the `bug-tracker-list` div section of the existing
    page.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个初始参数之后是一个包含多个数据元素的 `data` 数组，例如动作名称、用于保护请求的nonce字段以及应检索的错误状态。最后，`success`
    参数表示从AJAX请求返回的数据应用于替换现有页面中 `bug-tracker-list` div部分的HTML内容。
- en: 'To process this request, our plugin goes on to register the function `ch8bt_buglist_ajax`
    to be called when one of two variable name actions are matched: `wp_ajax_<actionname>`
    or `wp_ajax_nopriv_<actionname>`. In both cases, `<actionname>` is the string
    that was sent as part of the data parameters in the AJAX request. Upon receiving
    the request, the callback generates an updated bug table, echoes the resulting
    HTML code, and makes a call to the standard PHP `die()` function. While this last
    step might seem strange, it is needed to avoid having a trailing `1` at the end
    of the new HTML, indicating that AJAX processing was successfully performed by
    WordPress.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个请求，我们的插件继续注册 `ch8bt_buglist_ajax` 函数，以便在匹配以下两个变量名操作之一时被调用：`wp_ajax_<actionname>`
    或 `wp_ajax_nopriv_<actionname>`。在两种情况下，`<actionname>` 是作为AJAX请求中的数据参数发送的字符串。在收到请求后，回调函数生成一个更新的错误表，回显生成的HTML代码，并调用标准的PHP
    `die()` 函数。虽然这一步可能看起来有些奇怪，但它是为了避免在新的HTML末尾出现尾随的 `1`，这表明WordPress成功执行了AJAX处理。
- en: While the `ch8bt_buglist_ajax` function shares a lot of code with the existing
    `ch8bt_shortcode_list` function, it is easier to create a separate code block
    that only contains the necessary elements for this example. That being said, combining
    the two functions would make future updates to the table layout easier to maintain.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `ch8bt_buglist_ajax` 函数与现有的 `ch8bt_shortcode_list` 函数共享大量代码，但创建一个只包含此示例所需元素的独立代码块会更简单。话虽如此，合并这两个函数将使未来更新表格布局更容易维护。
- en: See also
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Importing data from a user file into custom tables* recipe in [Chapter
    8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating Custom MySQL Database
    Tables*
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第8章 *创建自定义MySQL数据库表* 中的 *从用户文件导入到自定义表* 菜单
