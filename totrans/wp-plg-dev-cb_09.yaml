- en: Leveraging JavaScript, jQuery, and AJAX Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter focuses on incorporating JavaScript in plugins by exploring the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Safely loading jQuery onto WordPress web pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a pop-up dialog using the built-in ThickBox plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling pop-up dialog display using shortcodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a calendar day selector using the Datepicker plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tooltips to admin page form fields using the TipTip plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AJAX to dynamically update partial page contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript libraries, especially the very popular jQuery library and its numerous
    plugins, can do wonders in bringing a website to life with slick animations, dynamic
    data queries, and advanced visual features. Unfortunately, for all of their benefits,
    these scripts can also be difficult to work with. For example, loading more than
    one copy of jQuery can destroy all the setup that was done by the other instances
    and errors in one script usually prevent other scripts from running correctly.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress' answer to this convoluted architecture is twofold. As a first step,
    it comes pre-packaged with a copy of jQuery and many other popular JavaScript
    libraries that plugin developers can use without having to load their own versions.
    Then, to prevent multiple copies from being loaded on a page, it offers easy-to-use
    functions that queue up scripts and styles to identify duplicates before rendering
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows how to safely load JavaScript and jQuery files that are provided
    with WordPress or that come from external sources to add powerful new functionalities
    to front-facing pages and plugin configuration panels. It also explains how to
    securely run AJAX queries to refresh partial page sections.
  prefs: []
  type: TYPE_NORMAL
- en: Safely loading jQuery onto WordPress web pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it might be tempting to provide your own copy of jQuery as part of a new
    plugin that uses the popular JavaScript library or to access a copy from the Google
    API website, WordPress actually provides a copy of jQuery in its installation
    and makes it very easy to load it.
  prefs: []
  type: TYPE_NORMAL
- en: By using the appropriate utility function to load jQuery, developers make a
    request to WordPress to load this library instead of doing it themselves. Once
    all the requests have been received, they are analyzed for duplicates and a single
    instance of each script is loaded to reduce the chance of conflicts between multiple
    copies of the same library.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to load the jQuery script for use on front-facing website
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch9-load-jquery`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch9-load-jquery.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Load jQuery`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when script
    loading requests are processed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch9lj_front_facing_pages`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Themes menu section located under Appearance in the WordPress administration
    interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add New and search for a theme called `Twenty Eleven`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the theme on your website and Activate it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit your website and view the page source, searching for instances of the
    `jquery.js` library. Your search should come up empty unless you have activated
    other plugins that are asking for jQuery to be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Load jQuery`
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to any page on your website and view the page source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for the keyword `jquery` to see that a copy of the script is now loaded
    from the WordPress `wp-includes` folder, along with the `jquery-migrate` script
    for backward compatibility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key component of this recipe is the `wp_enqueue_script` function, which
    allows developers to load their own JavaScript files or to ask WordPress to load
    one of the scripts that it comes packaged with. While the function requires many
    arguments when loading your own scripts, which we'll cover in a later recipe,
    it only needs a single argument to load built-in scripts. In this example, that
    argument is `jquery`. To get a full list of default scripts available with WordPress,
    check out the code reference page for the function ([https://developer.wordpress.org/reference/functions/wp_enqueue_script/](https://developer.wordpress.org/reference/functions/wp_enqueue_script/)).
  prefs: []
  type: TYPE_NORMAL
- en: Once you know which script to load, the call to `wp_enqueue_script` should be
    made from one of three action hooks, depending on the target page(s) where the
    script should be loaded. These are `wp_enqueue_scripts` for front-facing pages,
    `admin_enqueue_scripts` for administration pages, and `login_enqueue_scripts`
    for the login page, with the first one fulfilling our requirement for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We had to go back and install an older theme to be able to see a change after
    activating our plugin. Many modern themes already make a request for jQuery to
    be loaded since it is used to animate menus or provide many other common functionalities.
    That being said, we cannot assume that this will be the case if we plan to distribute
    our work to a larger audience.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Veteran jQuery developers should be aware that the copy delivered with WordPress
    has a small caveat.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery noconflict mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To avoid internal conflicts with other JavaScript and jQuery libraries, the
    version of jQuery that comes bundled with WordPress is configured in the `noconflict`
    mode. This means that the `$` shortcut that can normally be used to access jQuery
    will not be available. As such, all the examples found in this chapter spell out
    the jQuery keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'To regain access to this shortcut, you can use the following syntax in your
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Displaying a pop-up dialog using the built-in ThickBox plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As annoying as they can be to visitors, pop-up dialogs are a feature that many
    website administrators are using to help them advertise special offers or get
    readers to subscribe to their content. Since it uses pop-up dialogs in its own
    administrative pages, WordPress comes bundled with a jQuery script called ThickBox
    that can be used to display these types of dialogs.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to load the ThickBox script and use it to render a pop-up
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch9-pop-up-dialog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch9-pop-up-dialog.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Pop-Up Dialog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when script
    loading requests are made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch9pud_load_scripts`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following line of code to register a function to display content
    in the page footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following block of code to provide an implementation for the `ch9pud_footer_code`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new HTML file named `content.html` and open it in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following HTML code as the file''s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the HTML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Pop-Up
    Dialog` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit any page of the website to see the new pop-up dialog appear two seconds
    after the whole page is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2cc0b3fe-9ab2-4cd6-88b5-c1b148c8b6c6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly to the previous recipe, we start by assigning a function to the `wp_enqueue_scripts`
    action hook. When executed, the callback makes a call to `wp_enqueue_script` to
    request for jQuery to be loaded from the local copy of WordPress. The next line
    calls the `add_thickbox` function, which is a utility function that makes multiple
    calls to `wp_enqueue_script` and `wp_enqueue_style` to load the appropriate JavaScript
    and stylesheet in the page header.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the required elements are loaded, the next section of the recipe outputs
    a block of JavaScript code to the page footer which uses jQuery to register a
    function that will be called when the entire page is loaded. When this happens,
    the `setTimeout` JavaScript function is used to register a function that will
    be called 2000 milliseconds later and will take care of calling `tb_show` to display
    the pop-up dialog. `tb_show` has three arguments, with the first one indicating
    the dialog title, the second containing the address of the content to render within
    the box, and the third expecting a path to a group of images to be displayed.
    In our case, the last argument is left null. Notice that the width and height
    (in pixels) of the dialog are indicated as part of the address of the content
    page to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the recipe displays a valid dialog, developers might want a bit more control
    over how it can be closed and when it gets displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the dialog close button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the ThickBox script offers a close button in the top-right corner
    of the pop-up dialog that can be used to close it at any time. This may not be
    desirable if you expect visitors to provide feedback or perform a specific action
    before dismissing the dialog. By adding the `modal` keyword to the content URL--set
    to the value of `true`--ThickBox will remove the dialog title bar, including the
    close button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the close button is gone, we can call the `tb_remove` JavaScript function
    to close the dialog. The following is an example of a simple link that could be
    added in `content.html` that will close the dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Displaying pop-up dialogs on select pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the recipe''s original code displays a pop-up dialog on every single
    page of a website, it may be better to show it only on specific pages, such as
    the front page, to avoid over-exposition. To accomplish this, we can move the
    two `add_action` calls inside of an action hook callback and check whether the
    visitor is making a request to see the front page before loading our scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: A similar technique can be used by substituting the `is_front_page` function
    with the `is_page( 'id_title_or_slug' )` function, which checks whether the current
    page numeric ID, title, or post slug matches the value that it receives as an
    argument. In that situation, a plugin configuration page could allow users to
    easily select one or more pages on which the dialog should appear.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling pop-up dialog display using shortcodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may be aware, loading scripts and styles on a page where they won't be
    used unnecessarily slows down that page's rendering time, since the browser will
    still need to download and validate the content of these external files. While
    the previous recipe's *There's More...* section offered one way to select specific
    pages where scripts and styles should be loaded, a different approach is to analyze
    the page contents for the presence of a special code to make that decision.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a filter to the previous recipe to search for a
    shortcode in posts and pages to decide when to display a pop-up dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying a pop-up dialog using the built-in
    ThickBox plugin* recipe to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 9/ch9-pop-up-dialog/ch9-pop-up-dialog-v1.php`)
    from the code bundle and rename the file as `ch9-pop-up-dialog.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch9-pop-up-dialog` directory and then edit `ch9-pop-up-dialog.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ch9pud_load_scripts` function and add the following highlighted lines
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch9pud_footer_code` function and modify the code, adding the following
    highlighted lines of code to the function body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function that will filter post
    and page contents before any other parsing and formatting is performed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Append the following block of code to provide an implementation for the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ch9pud_conditionally_add_scripts_and_styles` function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following function call to declare a new shortcode along with a
    function responsible for replacing it with content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code block to provide a simple implementation for the `ch9pud_popup_shortcode`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the website's front page and you will notice that the pop-up dialog is
    no longer displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new page and insert the `[popup]` shortcode in the page contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the new page to see that the new pop-up dialog appears, while the `[popup]`
    shortcode is not shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the existing action hooks were first modified to create and query a global
    variable to determine whether or not they should load scripts and output code
    to the page footer, the bulk of the work is actually done by the filter function
    that gets associated to `the_posts` hook. This function receives an array of all
    the posts and pages that are destined to be displayed and must determine if a
    special keyword is present to set the `load_scripts` variable appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the recipe's code, the text that we chose to look for, `[popup]`,
    is a shortcode. While we could have selected any text as the trigger to display
    a pop-up dialog, we chose a shortcode, since it would be easy to make it disappear
    by providing a simple rendering function for it that returns no content.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying a pop-up dialog using the built-in ThickBox plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a calendar day selector using the Datepicker plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all of its great administrative control panels and user interface elements,
    WordPress still has a simplistic approach to date selection, making users interact
    with a drop-down box and text fields to indicate the month, day, year, and time
    when a post or page is to be published. A much more interesting way to enter this
    type of information is to use a pop-up calendar that allows users to navigate
    through visual representations of each month and pick the desired date.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use the jQuery Datepicker script that is provided by
    default with WordPress to display a pop-up calendar to provide an easy way to
    select dates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch9-calendar-picker` along with a subdirectory
    called `css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit [https://](https://www.jqueryui.com/download)[www.jqueryui.com/download](http://www.jqueryui.com/download),
    toggle all the components to be unchecked, and select only Datepicker. Then, select
    UI lightness as the theme to be included and download the latest version of the
    jQuery UI package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the resulting file with an archive management tool and extract the file
    `jquery-ui.min.css` to the `css` folder of the newly created plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the entire `images` directory from the archive to the `css` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a text file called `ch9-calendar-picker.php` in the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 9 - Calendar Picker`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when script
    loading requests are made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch9cp_admin_scripts`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following line of code to register a function to be called when
    meta boxes are created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following block of code to provide an implementation for the `ch9cp_register_meta_box`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code block to implement the `ch9cp_date_meta_box` function
    that was declared in the call to `add_meta_box`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 9 - Calendar
    Picker plugin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select any item in the Posts management section and edit it to see the new date
    assignment meta box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the ... button or click on the Assign Date textbox to display the
    pop-up calendar and select a date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/235cae37-5891-43b1-ae74-d3d39dd7aafe.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like we saw with jQuery and ThickBox in the previous recipes, WordPress
    comes bundled with many jQuery libraries. Two of these libraries, jQuery UI and
    jQuery UI Datepicker, can be used to display a pop-up calendar and associate it
    with a text field on a form. That being said, the distribution of these scripts
    is missing the associated stylesheet and images that are required to display a
    fully rendered calendar.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts by visiting the jQuery UI website and downloading a copy
    of the complete library, which includes all the required layout files. Once the
    download is complete, we are only interested in getting a copy of the style data,
    since all the other necessary scripts are provided by WordPress. After registering
    a function with `admin_enqueue_scripts`, we make three function calls to load
    the required JavaScript files in the admin page header. We also make a call to
    load the stylesheet that we just downloaded. When copying files from the downloaded
    archive, we selected the minified versions of the CSS files to have the smallest
    versions available.
  prefs: []
  type: TYPE_NORMAL
- en: The `wp_enqueue_style` function has many parameters. In this example, we are
    providing values for the first four of them to indicate the name of the style,
    the path to the style file, an empty list of dependencies, and a version number.
    This function also has a fifth parameter, which we are not using here, to indicate
    if the script should be loaded in the header or footer, where the default is the
    header.
  prefs: []
  type: TYPE_NORMAL
- en: Once all of the required scripts are in place, the remainder of the code creates
    a meta box in the post editor, displays a text field in that box, and outputs
    JavaScript code that will be called when the page is completely rendered to associate
    the pop-up calendar with the text field. As part of the calendar's options, we
    specify that the user will only be able to select future dates with the `minDate`
    parameter along with the desired date format.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tooltips to admin page form fields using the TipTip plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is a very important step of plugin development, as it allows users
    to understand how to configure the plugins you create. That being said, users
    will not typically go very far to find the information they need, resulting in
    many unnecessary questions in discussion forums or in emails.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User
    Settings and Administration Pages*, one way to provide documentation is to create
    a help tab that appears in the top-right corner of the plugin's configuration
    panel. While that approach is much easier for users than to find a Readme file
    or go back to the official WordPress plugin repository, it still requires them
    to actively seek and click a link to open that section.
  prefs: []
  type: TYPE_NORMAL
- en: That's where tooltips come into play. Using a jQuery plugin to render clean,
    good looking tooltips, we can add documentation to a plugin that will be displayed
    contextually based on the configuration fields that the user is currently interacting
    with.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to download and integrate the TipTip jQuery library to
    display tooltips when configuration fields are used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying a calendar day selector using
    the Datepicker plugin* recipe to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 9/ch9-calendar-picker/ch9-calendar-picker-v1.php`)
    from the code bundle and rename the file as `ch9-calendar-picker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch9-calendar-picker` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new subdirectory called `tiptip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the TipTip jQuery home page, available at [https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads](https://drew.tenderapp.com/kb/tiptip-jquery-plugin/tiptip-downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download Version 1.3 of the plugin source code to your local computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the resulting file with an archive management tool and extract the `jquery.tipTip.minified.js`
    and `tipTip.css` files to the `tiptip` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the main plugin file `ch9-calendar-picker.php` in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `ch9cp_admin_scripts` function and add the following lines of code
    at the end of the `if` condition, so that the new scripts are only loaded on the
    page and post editors, like the others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch9cp_date_meta_box` function and modify the line that renders
    the textbox, as shown in the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, in the `ch9cp_date_meta_box` function, add the following highlighted
    block of code to the existing block of JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select any item in the Posts management section and edit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the mouse over the date field to see the new tooltip appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f664d963-4f0f-4461-910d-34a5e8af215a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TipTip library turns regular HTML `title` tags into nice looking tooltips
    that appear when users position their mouse cursor over an item or select it.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts by downloading the TipTip script from the plugin author's
    website. Once downloaded, we only extract two of the three files that the archive
    contains. The third file is not needed, as it is a non-compact version of the
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the desired files in place, we load them in the admin page header
    by adding calls to the `wp_enqueue_script` and `wp_enqueue_style` functions in
    the callback that was already associated with the `admin_enqueue_script` action
    hook. Similar to `wp_enqueue_style`, the `wp_enqueue_script` function has five
    parameters, which indicate the name of the script, the location of the script
    file, a list of any dependencies for the script, a version number, and an option
    to indicate if the script should be loaded in the site header or footer.
  prefs: []
  type: TYPE_NORMAL
- en: Once the library is loaded, activating the tooltips is quite simple. First,
    we select a class name for our items and add it to all the items that are destined
    to have help text associated with them. Then, we add the help text in a `title`
    tag on each item. Note that the item in question could be anything from a div
    to a form input component or a table row. Finally, we make a call to a jQuery
    function to find all the items that have the right class and execute the TipTip
    function on them. After execution, all the selected items will have their title
    text appear as tooltips.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying a calendar day selector using the Datepicker plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AJAX to dynamically update partial page contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users create complex websites with lots of dynamic content, such as Twitter
    widgets or other components that fetch external data, refreshing the entire page
    every time a user interacts with the website can quickly become a gruelling experience
    for visitors.
  prefs: []
  type: TYPE_NORMAL
- en: In such situations, using **Asynchronous JavaScript and XML** (**AJAX**) can
    greatly accelerate user navigation by only displaying subsets of data on visitor-facing
    pages and dynamically retrieving updates to isolated sections. More specifically,
    AJAX allows the browser to send requests to a web server, including data parameters,
    and to insert the data that it receives back in the web page, replacing or augmenting
    the original content.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add AJAX support to the bug tracking system created
    in [Chapter 8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating Custom MySQL
    Database Tables*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Importing data from a user file into custom
    tables* recipe in [Chapter 8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating
    Custom MySQL Database Tables*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 8/ch8-bug-tracker/ch8-bug-tracker-v8.php`)
    from the code bundle and rename the file as `ch8-bug-tracker.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch8-bug-tracker` directory and edit `ch8-bug-tracker.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `ch8bt_shortcode_list` function and find the section where the SQL
    query is being prepared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an extra line to the query (the highlighted line of code in the following
    code block) to show only open bugs (bugs with a `bug_status` field set to `0`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the change highlighted in the following code to the code building the
    search query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the code responsible for drawing the search form, and add the following
    highlighted block of code after it to display a link to be clicked to show closed
    bugs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert this code segment after the bug display table to add the JavaScript
    responsible for providing the AJAX-based data replacement functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code at the end of the plugin file to register a
    function to add content to the page header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the following block of code to provide an implementation for the `ch8bt_declare_ajaxurl`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following lines of code to register functions that will be called
    when AJAX requests are received from public or logged in users with an action
    variable set to `ch8bt_buglist_ajax`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to provide an implementation for the `ch8bt_buglist_ajax`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function to be called when scripts
    are being queued up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code block to provide an implementation for the `ch8bt_load_query`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new text file named `stylesheet.css` in the plugin directory and insert
    the following content in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Visit the bug listing page that was previously created to see that only opened
    bugs are displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the link to display closed bugs to see how the list gets quickly replaced
    with closed issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7233c716-dd0b-4bbd-a5b2-acfa93834a6c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AJAX page interactions are powered by JavaScript code and allow users to create
    pages with content that gets dynamically updated. To add this functionality to
    our bug tracking system, we start this recipe by modifying the existing shortcode
    bug query to only retrieve entries that have an open status (value of `0`).
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, we move on to add two new elements to the initial shortcode
    output, a link to display closed bugs and a block of JavaScript code. The link
    itself is quite simple, containing a class name and a text label that visitors
    will be able to click. The JavaScript code is a bit more complex. Essentially,
    the script makes a request for the `replacecontent` function to be called when
    the `show_closed_bugs` link is clicked by visitors. In turn, the `replacecontent`
    function contains a single call to the jQuery `ajax` function. This function takes
    a number of arguments, starting with the type of operation, which is set to `POST`.
    This indicates that all the variables sent in the request URL will be stored in
    a standard `$_POST` variable array.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is the URL to which the request should be sent. The variable
    used here is defined in the header code that is generated by the `ch8bt_declare_ajaxurl`
    function and points to the WordPress `admin-ajax.php` script URL. While the name
    of this script starts with the word `admin`, it can also be used to process AJAX
    requests from visitor-facing pages.
  prefs: []
  type: TYPE_NORMAL
- en: After these first two arguments is a `data` array that contains a number of
    data elements, such as the name of the action, a nonce field to secure the request,
    and the status of the bugs that should be retrieved. Finally, the `success` parameter
    indicates that the data received back from the AJAX request should be used to
    replace the HTML content of the `bug-tracker-list` div section of the existing
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To process this request, our plugin goes on to register the function `ch8bt_buglist_ajax`
    to be called when one of two variable name actions are matched: `wp_ajax_<actionname>`
    or `wp_ajax_nopriv_<actionname>`. In both cases, `<actionname>` is the string
    that was sent as part of the data parameters in the AJAX request. Upon receiving
    the request, the callback generates an updated bug table, echoes the resulting
    HTML code, and makes a call to the standard PHP `die()` function. While this last
    step might seem strange, it is needed to avoid having a trailing `1` at the end
    of the new HTML, indicating that AJAX processing was successfully performed by
    WordPress.'
  prefs: []
  type: TYPE_NORMAL
- en: While the `ch8bt_buglist_ajax` function shares a lot of code with the existing
    `ch8bt_shortcode_list` function, it is easier to create a separate code block
    that only contains the necessary elements for this example. That being said, combining
    the two functions would make future updates to the table layout easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Importing data from a user file into custom tables* recipe in [Chapter
    8](9b139a97-7147-49cf-bd06-d370c6777c86.xhtml), *Creating Custom MySQL Database
    Tables*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
