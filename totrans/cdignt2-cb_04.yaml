- en: Chapter 4. Email, HTML Table, and Text Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending plain e-mails with CodeIgniter Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending HTML e-mails with CodeIgniter Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending attachments with CodeIgniter Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending bulk e-mails with CodeIgniter Email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an HTML table with DataTable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an HTML table with DataTable and a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `word_limiter()` for table output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `word_censor()` for cleaning input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter comes with some useful libraries and functions for handling many
    aspects of application development. In this chapter we will look at Email and
    HTML tables. The CodeIgniter Email library is capable of sending plain text and
    HTML e-mails, with and without attachments that can be used (with a little configuration)
    instead of the standard PHP `mail()` function. CodeIgniter's HTML Table library
    is excellent at generating the HTML necessary for pretty much most of what you
    will need a table for—and, together with DataTable, can provide excellent interactive
    tables for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Sending plain e-mails with CodeIgniter Email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's always useful to be able to send e-mails and CodeIgniter comes with an
    excellent library for sending e-mails. There are a few recipes in this chapter,
    which deal with sending e-mails. However, this is the basic Hello World type example
    that is very simple.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A simple way to send plain e-mails using CodeIgniter Email is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file `email.php` at `path/to/codeigniter/application/controllers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the controller file `email.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support to send e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `public function index()` redirects us to the function `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send e-mail on your system, the `mailtype` variable
    (text or HTML), and so on. Take a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're telling CodeIgniter to send the e-mail as just plain text rather
    than HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'These configuration settings are initialized (that is, passed to the Email
    library), and we begin to build the e-mail by setting the `to`, `from, subject`,
    and `message` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, send the e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If all works out as planned, you should see an output similar to the following
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sending HTML e-mails with CodeIgniter Email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be times when you wish to display formatted e-mails rather than
    just plain text, so you may wish to include images, text formatting, and URLs
    in the body of your e-mail. HTML e-mails will allow you to do this and CodeIgniter
    Email library can easily be set to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML e-mails can be sent by executing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the controller file `email.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support for us to send e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `public function index()` redirects us to the function `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send e-mail on your system, the `mailtype` variable
    (text or HTML), and so on. Take a look at the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're telling CodeIgniter to send the e-mail as HTML rather than as text.
  prefs: []
  type: TYPE_NORMAL
- en: 'These configuration settings are initialized (that is, passed to the Email
    library) and we begin to build the e-mail by setting the `to`, `from, subject`,
    and `message` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, send the e-mail using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If all works out as planned, you should see an output similar to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sending attachments with CodeIgniter Email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be times when you wish to send an attachment along with the e-mail,
    such as an invoice to a customer for a recent purchase or perhaps an image. The
    CodeIgniter Email library can easily be set to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can send attachments with CodeIgniter Email by executing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the controller file, `email.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support to send e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `public function index()` redirects us to the function, `public function
    send_mail()`, which sets some initial configuration variables for the CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send mail on your system, the `mailtype` variable
    (text or HTML), and so on. These configuration settings are initialized (that
    is, passed to the Email library) and we begin to build the e-mail; setting the
    `to`, `from, subject`, and `message` attributes, as well as the path to the attachment
    we''re sending in the e-mail (highlighted in the following code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, send the e-mail using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Sending bulk e-mails with CodeIgniter Email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you wish to send out bulk e-mails; perhaps to all the
    people who have paid to go on a tour. You may wish to send them each a personalized
    e-mail, and also add an attachment. You may also want to pull their e-mail preference
    (plain text or HTML) from the account on your database and send them the correct
    format of e-mail. That's what we're going to do here.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to know each person''s preferences such as whether they want HTML e-mails
    or text, and also their individual reference number (or booking ID) for their
    trip. As per this requirement, we are going to have a database to hold all the
    information; so copy the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the controller file, `email.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support for us to send e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, `public function index()` redirects us to the function, `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send mail from your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then query the database for each of the customer''s booking details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The query will loop through each result and send a specific e-mail based on
    the values retrieved from the database in each loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we give ourselves a clean slate by clearing all the settings and variables
    from a previous loop iteration by using the CodeIgniter `email` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We then look at their e-mail preference and set the e-mail sending (`mailtype`)
    variable accordingly, along with the text for the body of the e-mails. So, if
    someone prefers HTML, we look for that preference and define the body of the HTML
    e-mail, otherwise for a text e-mail, we look for the text e-mail preference and
    define the body for the text e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we initialize the configuration variables. Those of you who have
    looked at the previous few recipes will notice that the initialization takes place
    later in the code of this recipe than in others. This is because we cannot initialize
    the `config` variables earlier as some of the variables rely on the preferences
    of individual customers, which are fetched from the database. So, we have to wait
    until each user''s details are fetched from a database to initialize each iteration
    of the configuration settings. And finally, we send the e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If all goes well, you should see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Using an HTML table with DataTable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataTable is a free to use library that turns your normal looking html table
    into an interactive marvel with sortable and searchable columns and a whole lot
    more; we're going to use it with CodeIgniter, merging DataTable and CodeIgniter
    table functionality. It's simple to use and is able to handle most of the things
    you will need it for. Here, in this recipe, we're going to use it with DataTable
    to create an interactive HTML table that is sortable and searchable. It has pagination
    too! If you want database results, move on to the next recipe, *Using an HTML
    table with DataTable and a database*, where we'll look at populating a table from
    a database query.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to follow the given procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you''ve downloaded DataTable from the following link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://datatables.net/download/](https://datatables.net/download/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unzip the downloaded `.zip` file, and move the files to a location on your web
    server or localhost, which will be accessible by CodeIgniter. For this recipe,
    I have put the folder at `application/views`; but you can make your own choice
    if you wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create four files as given:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/table.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_header.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_body.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_footer.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `table.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file, `table_header.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Take a look at the `<script>` tag:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#example` parameter is the ID of the table (detailed in the following *How
    it works...* section). Ensure that the value `example` in `<script>` and table
    markup is the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the view file, `table_body.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the controller file, t`able_footer.php`, and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constructor in the table controller loads the CodeIgniter''s Table library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `public function index()` function is called. We then define how we want
    our HTML table markup to appear. This is where you can place any markup for the
    specific CSS, using which you can style the elements of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Take a closer look at the `table_open` element of the `$tmpl` array. Look for
    the item highlighted in the preceding code. The `id="example"` item is used by
    DataTable (in the `<script>` tag of the file `table_header.php`) to apply its
    CSS and functionality. You can, of course, name it anything you like, but be sure
    to reflect that change in the JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then call `$this->table->set_template()` to apply the HTML table markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set the table headers and apply the data for our rows. Ensure that
    the number of items in the table headers is the same as the number of items in
    the table data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We then generate the table. The `$this->table->generate()` function will return
    a string of HTML, which we save in `$data['table']`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$data` array is then passed to our view files for rendering to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Using an HTML table with DataTable and a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter comes with a useful library to handle HTML tables. It's simple to
    use and is able to handle most of the things you would need it for. Here, in this
    recipe, we're going to use it with DataTable to create an interactive HTML table
    that is sortable and searchable. It even has pagination! This recipe populates
    the table using a database query. If you're not looking for that and just want
    a simple table, try the preceding recipe—*Using an HTML table with DataTable*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you've downloaded DataTable from [https://datatables.net/download/](https://datatables.net/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the downloaded `.zip` file, and move the files to a location on your web
    server or localhost, which will be accessible by CodeIgniter. For this recipe,
    I have put the folder in the `application/views` folder; but you can make your
    own choice if you wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we''re using CodeIgniter''s HTML Table library to create a table for us
    with data from a table, we will first need to create that table; so, copy the
    following code into your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create four files as given:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/table.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_header.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_body.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/table_footer.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `table.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file, `table_header.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#example` parameter is the ID of the table (detailed in the following *How
    it works* section). Ensure that the value `example` in `<script>` and the table
    markup is the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the view file `table_body.php` and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the controller file `table_footer.php` and add the following code to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constructor in the `table` controller loads CodeIgniter''s Table library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `public function index()` function is called. We then define how we want
    our HTML table markup to look. This is where you can place any markup for the
    specific CSS, using which you can style the elements of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Take a closer look at the `table_open` element of the `$tmpl` array. Look for
    the item I've highlighted in the preceding code. The `id="example"` item is used
    by DataTable (in the `<script>` tag of the file, `table_header.php`) to apply
    its CSS and functionality. You can, of course, name it anything you like but be
    sure to reflect that change in the JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then call `$this->table->set_template()` to apply the HTML table markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set the table headers and apply the data for our rows from a database
    query. Ensure that the number of items in the table headers is the same as the
    number of items in the table data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We then generate the table. The `$this->table->generate()` function will return
    a string of HTML, which we save in `$data['table']`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$data` array is then passed to our view files for rendering to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Using word_limiter() for table output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose that you're making a CMS or some sort of admin interface and you're
    currently making a view which lists—oh I don't know—articles. Suppose that there
    are some articles in your database and you have to list them. It might be considered
    useful to the user of the CMS to provide them with a brief preview of the article
    so that they can be sure that they're deleting, editing, or just looking at the
    correct one. A preview—similar to the one found in an e-mail client—displays the
    first few lines, so that a user can be sure of what they're looking at. CodeIgniter
    comes with a handy function for limiting the number of words displayed from a
    string of text; this function is perfect for such a purpose. Here, we're going
    to build a very small example for our recipe of a view, listing some articles
    and previewing the first few lines of each article.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the articles will be stored in the database we will need to build a table
    to store them in; this will be just a simple table containing the articles. In
    any application, you''ll likely build the database tables for the articles and
    article management (or whatever content you’re hosting) yourself and have many
    more tables of a different design and schema than is in the example recipe here.
    However, this is merely a brief example—feel free to adapt and amend the recipe
    as you require:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following table in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following entries into the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We're displaying articles here (which in general are fairly long). So, to save
    on space in the book and limit the amount of typing you need to do, I've only
    included 2 short articles. I got the text for the articles from the Space Ipsum
    website ([http://spaceipsum.com/](http://spaceipsum.com/)). If you don't want
    to type all that text from the preceding code (and why would you), you can go
    to Space Ipsum and get your own article content for this recipe. Either way it's
    good.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be creating the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`limit.php` at `/path/to/codeigniter/application/controllers/`: This will be
    running the show for us, calling the model and passing data to the view file `view_all.php`
    under `limit/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/limit/view_all.php`: This will display
    a table summary of each article with the content for the body field limited by
    `word_limiter()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/limit_model.php`: This will retrieve
    the articles from the database with Active Record'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will be creating the following three files: Create the controller file,
    `limit.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file, `views/limit/view_all.php`, and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model file, `limit_model.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by loading the support assets in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `url` and `text` variable will provide support for the `redirect()` and
    `word_limit()` functions respectively, and the `Limit_model` class will support
    access with the database for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `public function index()` function redirects us to the public function
    `view_all`, which calls the `get_all()` function of `Limit_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `get_all()` function will query the database with Active Record and pull
    out the contents, passing this back to our controller and saving it in the `$data`
    array (highlighted in the following code) where it is passed to the `limit/view_all`
    view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If all works out as planned, you should see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the word count of the **Preview** column is limited to 15 words,
    where it is capped and appended with three periods (**...**).
  prefs: []
  type: TYPE_NORMAL
- en: Using word_censor() for cleaning input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you're building your application that you'll need to
    not only validate against unwanted data, but also check the content of that data
    for any unwanted words or phrases. For example, imagine that you're building a
    simple blogging engine and you don't want people replying to your blog posts with
    rude words and phrases—fair enough. So, what you need to do is to be able to look
    through the user input and filter out any unwanted content that might be present.
    CodeIgniter provides just this facility with the function `word_censor()`. Let's
    look at how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to store our censored words in a database; so, we'll look for words
    that we'll use in place of actual rude words, such as `rude_word_number_1`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following MySQL code in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We will store the censored text in another table. For want of a better title,
    I''ve called that table `censor`. The following code is the schema for that table,
    which you can run in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create three files as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/censor.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/censor/create.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/censor_model.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `censor.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `create.php` at `/path/to/codeigniter/application/views/censor/`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model file `censor_model.php` at `/path/to/codeigniter/application/models/`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constructor in our `Censor` class loads our support files: the helpers
    `url` and `text`, and our model `Censor_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `public function index()` function redirects us to `public function create()`
    where we begin form validation. We load the form validation library and set the
    error delimiters, after which we set the rules for the form elements in the view
    file `create.php` at `/path/to/codeigniter/application//views/censor/`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is an error, or the controller is being accessed for the first time,
    `$this->form_validation->run()` will equal `FALSE` and we shall just display the
    view file for the user to fill in.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, once the form has been submitted (and assuming that there were no
    errors picked up by CodeIgniter''s validation functionality), we now want to check
    the input for any unwanted words. To do that, we must first get a list of the
    unwanted words. As we''re storing those words in the database table `censored_words`,
    we also should fetch them. So, we grab them from the database with the `censor_model`
    function `get_censored_words()`, and add them to an array called `$censored_words`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We then build the `$data` array ready to be passed to the `Censor_model` function,
    `create()`. Take a look at the `body` element of the array, which I''ve highlighted
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Here, we call the text helper function, `word_censor()`, passing the string
    that we wish to check. In this case, the body forms items from the submitted form,
    along with the array of censored words as a second parameter; the third parameter
    is optional. Leaving the third parameter blank will cause CodeIgniter to replace
    a censored word with the default string `####`. However, for this recipe we're
    replacing each censored word with the string `BOOM`.
  prefs: []
  type: TYPE_NORMAL
- en: The `$data` array is then written to the database table, `censor` (I really
    must think of a better name for that table).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take it for a spin. Run the censor controller in your browser and you
    should see an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we have entered the values `Rob` and `rude_word_number_1 TOWN`. When
    you click on the **Submit** button you should see the array `var_dump` of `$data`
    showing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: If you see **BOOM TOWN**, you know it has worked!
  prefs: []
  type: TYPE_NORMAL
