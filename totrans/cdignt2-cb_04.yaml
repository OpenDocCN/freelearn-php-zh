- en: Chapter 4. Email, HTML Table, and Text Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：电子邮件、HTML表格和文本库
- en: 'In this chapter, you will learn:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Sending plain e-mails with CodeIgniter Email
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送纯文本电子邮件
- en: Sending HTML e-mails with CodeIgniter Email
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送HTML电子邮件
- en: Sending attachments with CodeIgniter Email
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送附件
- en: Sending bulk e-mails with CodeIgniter Email
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送批量电子邮件
- en: Using an HTML table with DataTable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataTable中的HTML表格
- en: Using an HTML table with DataTable and a database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataTable和数据库中的HTML表格
- en: Using `word_limiter()` for table output
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`word_limiter()`进行表格输出
- en: Using `word_censor()` for cleaning input
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`word_censor()`进行输入清理
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: CodeIgniter comes with some useful libraries and functions for handling many
    aspects of application development. In this chapter we will look at Email and
    HTML tables. The CodeIgniter Email library is capable of sending plain text and
    HTML e-mails, with and without attachments that can be used (with a little configuration)
    instead of the standard PHP `mail()` function. CodeIgniter's HTML Table library
    is excellent at generating the HTML necessary for pretty much most of what you
    will need a table for—and, together with DataTable, can provide excellent interactive
    tables for your users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter附带了一些有用的库和函数，用于处理应用程序开发的许多方面。在本章中，我们将探讨电子邮件和HTML表格。CodeIgniter电子邮件库能够发送纯文本和HTML电子邮件，包括和不包括附件，这些附件可以用作（经过一些配置）替代标准的PHP
    `mail()`函数。CodeIgniter的HTML表格库在生成所需的HTML方面非常出色，几乎可以满足你对表格的所有需求——并且与DataTable一起，可以为用户提供出色的交互式表格。
- en: Sending plain e-mails with CodeIgniter Email
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送纯文本电子邮件
- en: It's always useful to be able to send e-mails and CodeIgniter comes with an
    excellent library for sending e-mails. There are a few recipes in this chapter,
    which deal with sending e-mails. However, this is the basic Hello World type example
    that is very simple.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 能够发送电子邮件总是很有用的，CodeIgniter附带了一个用于发送电子邮件的优秀库。本章中有几个关于发送电子邮件的食谱。然而，这是一个非常简单的Hello
    World类型示例。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'A simple way to send plain e-mails using CodeIgniter Email is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送纯文本电子邮件的简单方法如下：
- en: Create a file `email.php` at `path/to/codeigniter/application/controllers/`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`path/to/codeigniter/application/controllers/`路径下创建一个名为`email.php`的文件。
- en: 'Add the following code to the controller file `email.php`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到控制器文件`email.php`中：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support to send e-mails:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数控制器中，我们加载了电子邮件库（以下代码中突出显示），它提供了发送电子邮件的支持：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, `public function index()` redirects us to the function `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send e-mail on your system, the `mailtype` variable
    (text or HTML), and so on. Take a look at the following line of code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`public function index()`将我们重定向到`public function send_mail()`函数，该函数为CodeIgniter电子邮件库设置了一些初始配置变量，以便与它一起工作，例如用于发送电子邮件的系统（在本例中为`sendmail`）、在系统上发送电子邮件的路径、`mailtype`变量（文本或HTML）等。看看以下代码行：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we're telling CodeIgniter to send the e-mail as just plain text rather
    than HTML.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉CodeIgniter以纯文本而不是HTML的形式发送电子邮件。
- en: 'These configuration settings are initialized (that is, passed to the Email
    library), and we begin to build the e-mail by setting the `to`, `from, subject`,
    and `message` attributes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置设置被初始化（即传递给电子邮件库），然后我们通过设置`to`、`from`、`subject`和`message`属性来开始构建电子邮件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, send the e-mail:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，发送电子邮件：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If all works out as planned, you should see an output similar to the following
    one:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你应该会看到一个类似以下输出的结果：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Sending HTML e-mails with CodeIgniter Email
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CodeIgniter电子邮件发送HTML电子邮件
- en: There might be times when you wish to display formatted e-mails rather than
    just plain text, so you may wish to include images, text formatting, and URLs
    in the body of your e-mail. HTML e-mails will allow you to do this and CodeIgniter
    Email library can easily be set to do just that.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能希望显示格式化的电子邮件而不是纯文本，因此你可能希望在电子邮件正文中包含图片、文本格式和URL。HTML电子邮件将允许你这样做，并且CodeIgniter电子邮件库可以轻松地设置为执行此操作。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'HTML e-mails can be sent by executing the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤可以发送HTML电子邮件：
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/path/to/codeigniter/application/controllers/`路径下创建一个名为`email.php`的文件。
- en: 'Add the following code to the controller file `email.php`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到控制器文件 `email.php` 中：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support for us to send e-mails:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数控制器中，我们加载了 Email 库（以下代码中突出显示），它为我们提供了发送电子邮件的支持：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, `public function index()` redirects us to the function `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send e-mail on your system, the `mailtype` variable
    (text or HTML), and so on. Take a look at the following line of code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`public function index()` 将我们重定向到函数 `public function send_mail()`，该函数为 CodeIgniter
    Email 库设置了一些初始配置变量，以便与电子邮件发送系统（在这种情况下，`sendmail`）、系统上发送电子邮件的路径、`mailtype` 变量（文本或
    HTML）等一起工作。请看以下代码行：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we're telling CodeIgniter to send the e-mail as HTML rather than as text.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉 CodeIgniter 以 HTML 格式而不是文本格式发送电子邮件。
- en: 'These configuration settings are initialized (that is, passed to the Email
    library) and we begin to build the e-mail by setting the `to`, `from, subject`,
    and `message` attributes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置设置被初始化（即传递给 Email 库），我们通过设置 `to`、`from`、`subject` 和 `message` 属性来开始构建电子邮件：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, send the e-mail using the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下代码发送电子邮件：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If all works out as planned, you should see an output similar to the following
    code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你应该会看到以下类似的输出代码：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sending attachments with CodeIgniter Email
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter Email 发送附件
- en: There might be times when you wish to send an attachment along with the e-mail,
    such as an invoice to a customer for a recent purchase or perhaps an image. The
    CodeIgniter Email library can easily be set to do just that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能希望在电子邮件中发送附件，例如向客户发送最近购买的发票或图片。CodeIgniter Email 库可以轻松设置以实现这一点。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You can send attachments with CodeIgniter Email by executing the following
    steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤使用 CodeIgniter Email 发送附件：
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/path/to/codeigniter/application/controllers/` 创建一个名为 `email.php` 的文件。
- en: 'Add the following code to the controller file, `email.php`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到控制器文件 `email.php` 中：
- en: '[PRE12]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support to send e-mails:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数控制器中，我们加载了 Email 库（以下代码中突出显示），它为我们提供了发送电子邮件的支持：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, `public function index()` redirects us to the function, `public function
    send_mail()`, which sets some initial configuration variables for the CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send mail on your system, the `mailtype` variable
    (text or HTML), and so on. These configuration settings are initialized (that
    is, passed to the Email library) and we begin to build the e-mail; setting the
    `to`, `from, subject`, and `message` attributes, as well as the path to the attachment
    we''re sending in the e-mail (highlighted in the following code):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`public function index()` 将我们重定向到函数，`public function send_mail()`，该函数为 CodeIgniter
    Email 库设置了一些初始配置变量，以便与电子邮件发送系统（在这种情况下，`sendmail`）、系统上发送电子邮件的路径、`mailtype` 变量（文本或
    HTML）等一起工作。这些配置设置被初始化（即传递给 Email 库），我们开始构建电子邮件；设置 `to`、`from`、`subject` 和 `message`
    属性，以及我们发送电子邮件中附件的路径（以下代码中突出显示）：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, send the e-mail using the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下代码发送电子邮件：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Sending bulk e-mails with CodeIgniter Email
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CodeIgniter Email 发送大量电子邮件
- en: There may be times when you wish to send out bulk e-mails; perhaps to all the
    people who have paid to go on a tour. You may wish to send them each a personalized
    e-mail, and also add an attachment. You may also want to pull their e-mail preference
    (plain text or HTML) from the account on your database and send them the correct
    format of e-mail. That's what we're going to do here.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能希望发送大量电子邮件；也许是要发送给所有支付了旅行费用的人。你可能希望给他们每个人发送个性化的电子邮件，并附加文件。你可能还希望从数据库中的账户中提取他们的电子邮件偏好（纯文本或
    HTML）并发送正确的电子邮件格式。这正是我们要做的。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to know each person''s preferences such as whether they want HTML e-mails
    or text, and also their individual reference number (or booking ID) for their
    trip. As per this requirement, we are going to have a database to hold all the
    information; so copy the following code into your database:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file `email.php` at `/path/to/codeigniter/application/controllers/`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the controller file, `email.php`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the constructor controller we load the Email library (highlighted in the
    following code), which provides support for us to send e-mails:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, `public function index()` redirects us to the function, `public function
    send_mail()`, which sets some initial configuration variables for CodeIgniter
    Email library to work with, such as the system used to send the e-mail (in this
    case, `sendmail`), the path to send mail from your system.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'We then query the database for each of the customer''s booking details:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The query will loop through each result and send a specific e-mail based on
    the values retrieved from the database in each loop.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we give ourselves a clean slate by clearing all the settings and variables
    from a previous loop iteration by using the CodeIgniter `email` function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We then look at their e-mail preference and set the e-mail sending (`mailtype`)
    variable accordingly, along with the text for the body of the e-mails. So, if
    someone prefers HTML, we look for that preference and define the body of the HTML
    e-mail, otherwise for a text e-mail, we look for the text e-mail preference and
    define the body for the text e-mail:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'After this, we initialize the configuration variables. Those of you who have
    looked at the previous few recipes will notice that the initialization takes place
    later in the code of this recipe than in others. This is because we cannot initialize
    the `config` variables earlier as some of the variables rely on the preferences
    of individual customers, which are fetched from the database. So, we have to wait
    until each user''s details are fetched from a database to initialize each iteration
    of the configuration settings. And finally, we send the e-mail:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If all goes well, you should see an output similar to the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using an HTML table with DataTable
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataTable is a free to use library that turns your normal looking html table
    into an interactive marvel with sortable and searchable columns and a whole lot
    more; we're going to use it with CodeIgniter, merging DataTable and CodeIgniter
    table functionality. It's simple to use and is able to handle most of the things
    you will need it for. Here, in this recipe, we're going to use it with DataTable
    to create an interactive HTML table that is sortable and searchable. It has pagination
    too! If you want database results, move on to the next recipe, *Using an HTML
    table with DataTable and a database*, where we'll look at populating a table from
    a database query.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to follow the given procedure:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你需要遵循给定的程序：
- en: 'Ensure that you''ve downloaded DataTable from the following link:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经从以下链接下载了DataTable：
- en: '[https://datatables.net/download/](https://datatables.net/download/)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://datatables.net/download/](https://datatables.net/download/)'
- en: Unzip the downloaded `.zip` file, and move the files to a location on your web
    server or localhost, which will be accessible by CodeIgniter. For this recipe,
    I have put the folder at `application/views`; but you can make your own choice
    if you wish.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的`.zip`文件，并将文件移动到你的Web服务器或本地主机上的一个位置，这样CodeIgniter就可以访问了。对于这个示例，我已经将文件夹放在了`application/views`；但如果你愿意，你可以自己选择位置。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create four files as given:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照要求创建四个文件：
- en: '`/path/to/codeigniter/application/controllers/table.php`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/table.php`'
- en: '`/path/to/codeigniter/application/views/table_header.php`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_header.php`'
- en: '`/path/to/codeigniter/application/views/table_body.php`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_body.php`'
- en: '`/path/to/codeigniter/application/views/table_footer.php`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_footer.php`'
- en: 'Create the controller file, `table.php`, and add the following code to it:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件，`table.php`，并将以下代码添加到其中：
- en: '[PRE24]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the view file, `table_header.php`, and add the following code to it:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件，`table_header.php`，并将以下代码添加到其中：
- en: '[PRE25]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Take a look at the `<script>` tag:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看一下`<script>`标签：
- en: '[PRE26]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `#example` parameter is the ID of the table (detailed in the following *How
    it works...* section). Ensure that the value `example` in `<script>` and table
    markup is the same.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`#example`参数是表格的ID（在以下*工作原理...*部分中详细说明）。确保`<script>`和表格标记中的`example`值相同。'
- en: 'Create the view file, `table_body.php`, and add the following code to it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件，`table_body.php`，并将以下代码添加到其中：
- en: '[PRE27]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create the controller file, t`able_footer.php`, and add the following code
    to it:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件，`table_footer.php`，并将以下代码添加到其中：
- en: '[PRE28]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The constructor in the table controller loads the CodeIgniter''s Table library:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表格控制器中的构造函数加载了CodeIgniter的表格库：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `public function index()` function is called. We then define how we want
    our HTML table markup to appear. This is where you can place any markup for the
    specific CSS, using which you can style the elements of the table:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`public function index()`函数被调用。然后我们定义我们想要的HTML表格标记的样式。这是你可以放置任何特定CSS标记的地方，使用它可以样式化表格的元素：'
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Take a closer look at the `table_open` element of the `$tmpl` array. Look for
    the item highlighted in the preceding code. The `id="example"` item is used by
    DataTable (in the `<script>` tag of the file `table_header.php`) to apply its
    CSS and functionality. You can, of course, name it anything you like, but be sure
    to reflect that change in the JavaScript.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地看看`$tmpl`数组中的`table_open`元素。查找前面代码中突出显示的项目。`id="example"`项目被DataTable（在`table_header.php`文件的`<script>`标签中）用来应用其CSS和功能。当然，你可以将其命名为任何你喜欢的名字，但请确保在JavaScript中反映这一变化。
- en: 'We then call `$this->table->set_template()` to apply the HTML table markup:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`$this->table->set_template()`来应用HTML表格标记：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We then set the table headers and apply the data for our rows. Ensure that
    the number of items in the table headers is the same as the number of items in
    the table data:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们设置表格标题并应用行数据。确保表格标题中的项目数与表格数据中的项目数相同：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We then generate the table. The `$this->table->generate()` function will return
    a string of HTML, which we save in `$data['table']`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们生成表格。`$this->table->generate()`函数将返回一个HTML字符串，我们将其保存到`$data['table']`。
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `$data` array is then passed to our view files for rendering to the browser:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`$data`数组传递给我们的视图文件以在浏览器中渲染：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Using an HTML table with DataTable and a database
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带有DataTable的HTML表格和数据库
- en: CodeIgniter comes with a useful library to handle HTML tables. It's simple to
    use and is able to handle most of the things you would need it for. Here, in this
    recipe, we're going to use it with DataTable to create an interactive HTML table
    that is sortable and searchable. It even has pagination! This recipe populates
    the table using a database query. If you're not looking for that and just want
    a simple table, try the preceding recipe—*Using an HTML table with DataTable*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter附带了一个有用的库来处理HTML表格。它易于使用，并且能够处理你需要的几乎所有事情。在这个示例中，我们将使用它与DataTable一起创建一个可排序和可搜索的交互式HTML表格。它甚至有分页功能！这个示例使用数据库查询来填充表格。如果你不想要这个功能，只想创建一个简单的表格，请尝试前面的示例——*使用带有DataTable的HTML表格*。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will have to:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你必须：
- en: Ensure that you've downloaded DataTable from [https://datatables.net/download/](https://datatables.net/download/).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经从[https://datatables.net/download/](https://datatables.net/download/)下载了DataTable。
- en: Unzip the downloaded `.zip` file, and move the files to a location on your web
    server or localhost, which will be accessible by CodeIgniter. For this recipe,
    I have put the folder in the `application/views` folder; but you can make your
    own choice if you wish.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的`.zip`文件，并将文件移动到你的Web服务器或本地主机上的一个位置，这将使CodeIgniter能够访问。对于这个食谱，我已经将文件夹放在了`application/views`文件夹中；但如果你愿意，你可以自己选择。
- en: 'As we''re using CodeIgniter''s HTML Table library to create a table for us
    with data from a table, we will first need to create that table; so, copy the
    following code into your database:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在使用CodeIgniter的HTML表格库来创建一个包含数据库表格数据的表格，我们首先需要创建这个表格；因此，将以下代码复制到你的数据库中：
- en: '[PRE35]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create four files as given:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照要求创建四个文件：
- en: '`/path/to/codeigniter/application/controllers/table.php`'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/table.php`'
- en: '`/path/to/codeigniter/application/views/table_header.php`'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_header.php`'
- en: '`/path/to/codeigniter/application/views/table_body.php`'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_body.php`'
- en: '`/path/to/codeigniter/application/views/table_footer.php`'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/table_footer.php`'
- en: 'Create the controller file, `table.php`, and add the following code to it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件`table.php`，并将以下代码添加到其中：
- en: '[PRE36]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create the view file, `table_header.php`, and add the following code to it:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件`table_header.php`，并将以下代码添加到其中：
- en: '[PRE37]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `#example` parameter is the ID of the table (detailed in the following *How
    it works* section). Ensure that the value `example` in `<script>` and the table
    markup is the same.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`#example`参数是表格的ID（在以下*How it works*部分中详细说明）。确保`<script>`和表格标记中的`example`值相同。'
- en: 'Create the view file `table_body.php` and add the following code to it:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件`table_body.php`，并将以下代码添加到其中：
- en: '[PRE38]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create the controller file `table_footer.php` and add the following code to
    it:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件`table_footer.php`，并将以下代码添加到其中：
- en: '[PRE39]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The constructor in the `table` controller loads CodeIgniter''s Table library:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`table`控制器中的构造函数加载了CodeIgniter的表格库：'
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `public function index()` function is called. We then define how we want
    our HTML table markup to look. This is where you can place any markup for the
    specific CSS, using which you can style the elements of the table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 调用了`public function index()`函数。然后我们定义了我们的HTML表格标记应该如何看起来。这就是你可以放置任何用于特定CSS的标记的地方，使用它可以对表格的元素进行样式化：
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Take a closer look at the `table_open` element of the `$tmpl` array. Look for
    the item I've highlighted in the preceding code. The `id="example"` item is used
    by DataTable (in the `<script>` tag of the file, `table_header.php`) to apply
    its CSS and functionality. You can, of course, name it anything you like but be
    sure to reflect that change in the JavaScript code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看`$tmpl`数组中的`table_open`元素。在前面代码中查找我突出显示的项目。`id="example"`项被DataTable（在`table_header.php`文件的`<script>`标签中）用于应用其CSS和功能。当然，你可以将其命名为任何你喜欢的名字，但请确保在JavaScript代码中反映这一变化。
- en: 'We then call `$this->table->set_template()` to apply the HTML table markup:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`$this->table->set_template()`来应用HTML表格标记：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We then set the table headers and apply the data for our rows from a database
    query. Ensure that the number of items in the table headers is the same as the
    number of items in the table data:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们设置表格标题，并从数据库查询中应用我们的行数据。确保表格标题中的项目数与表格数据中的项目数相同：
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We then generate the table. The `$this->table->generate()` function will return
    a string of HTML, which we save in `$data['table']`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们生成表格。`$this->table->generate()`函数将返回一个HTML字符串，我们将它保存到`$data['table']`中。
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `$data` array is then passed to our view files for rendering to the browser:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`$data`数组传递到我们的视图文件中，以便在浏览器中渲染：
- en: '[PRE45]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Using word_limiter() for table output
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用word_limiter()进行表格输出
- en: Suppose that you're making a CMS or some sort of admin interface and you're
    currently making a view which lists—oh I don't know—articles. Suppose that there
    are some articles in your database and you have to list them. It might be considered
    useful to the user of the CMS to provide them with a brief preview of the article
    so that they can be sure that they're deleting, editing, or just looking at the
    correct one. A preview—similar to the one found in an e-mail client—displays the
    first few lines, so that a user can be sure of what they're looking at. CodeIgniter
    comes with a handy function for limiting the number of words displayed from a
    string of text; this function is perfect for such a purpose. Here, we're going
    to build a very small example for our recipe of a view, listing some articles
    and previewing the first few lines of each article.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在制作一个CMS或某种类型的管理员界面，并且你目前正在制作一个列出——哦，我不知道——文章的视图。假设你的数据库中有些文章，你必须列出它们。对于CMS的用户来说，提供文章的简要预览可能是有用的，这样他们就可以确定他们正在删除、编辑或只是查看正确的文章。预览——类似于电子邮件客户端中的预览——显示前几行，这样用户就可以确定他们正在查看的内容。CodeIgniter提供了一个方便的函数，用于限制从文本字符串中显示的单词数量；这个函数非常适合这样的用途。在这里，我们将为我们的视图配方构建一个非常小的示例，列出一些文章并预览每篇文章的前几行。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As the articles will be stored in the database we will need to build a table
    to store them in; this will be just a simple table containing the articles. In
    any application, you''ll likely build the database tables for the articles and
    article management (or whatever content you’re hosting) yourself and have many
    more tables of a different design and schema than is in the example recipe here.
    However, this is merely a brief example—feel free to adapt and amend the recipe
    as you require:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文章将存储在数据库中，我们需要构建一个表来存储它们；这将是一个包含文章的简单表。在任何应用程序中，你很可能会自己构建文章和文章管理（或你托管的内容）的数据库表，并且会有比这里示例中更多的不同设计和模式。然而，这只是一个简短的示例——请随意根据需要调整和修改配方：
- en: 'Create the following table in your database:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的数据库中创建以下表：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Insert the following entries into the table:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下条目插入到表中：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We're displaying articles here (which in general are fairly long). So, to save
    on space in the book and limit the amount of typing you need to do, I've only
    included 2 short articles. I got the text for the articles from the Space Ipsum
    website ([http://spaceipsum.com/](http://spaceipsum.com/)). If you don't want
    to type all that text from the preceding code (and why would you), you can go
    to Space Ipsum and get your own article content for this recipe. Either way it's
    good.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里显示文章（通常相当长）。因此，为了节省书籍的空间并限制你需要输入的代码量，我只包括了2篇简短的文章。我从Space Ipsum网站（[http://spaceipsum.com/](http://spaceipsum.com/)）获取了文章的文本。如果你不想输入前面代码中的所有文本（你为什么要这样做呢），你可以去Space
    Ipsum获取你自己的文章内容用于这个配方。无论如何，这都是好的。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will be creating the following three files:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下三个文件：
- en: '`limit.php` at `/path/to/codeigniter/application/controllers/`: This will be
    running the show for us, calling the model and passing data to the view file `view_all.php`
    under `limit/`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/` 下的 `limit.php`：这将为我们运行程序，调用模型并将数据传递到
    `limit/` 下的视图文件 `view_all.php`。'
- en: '`/path/to/codeigniter/application/views/limit/view_all.php`: This will display
    a table summary of each article with the content for the body field limited by
    `word_limiter()`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/limit/view_all.php`：这将显示每个文章的表格摘要，并通过
    `word_limiter()` 限制正文字段的内容'
- en: '`/path/to/codeigniter/application/models/limit_model.php`: This will retrieve
    the articles from the database with Active Record'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/limit_model.php`：这将使用Active Record从数据库检索文章'
- en: 'We will be creating the following three files: Create the controller file,
    `limit.php`, and add the following code to it:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建以下三个文件：创建控制器文件，`limit.php`，并将以下代码添加到其中：
- en: '[PRE48]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the view file, `views/limit/view_all.php`, and add the following code
    to it:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件，`views/limit/view_all.php`，并将以下代码添加到其中：
- en: '[PRE49]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create the model file, `limit_model.php`, and add the following code to it:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型文件，`limit_model.php`，并将以下代码添加到其中：
- en: '[PRE50]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We start by loading the support assets in the constructor:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在构造函数中加载支持资源：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `url` and `text` variable will provide support for the `redirect()` and
    `word_limit()` functions respectively, and the `Limit_model` class will support
    access with the database for us.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'The `public function index()` function redirects us to the public function
    `view_all`, which calls the `get_all()` function of `Limit_model`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `get_all()` function will query the database with Active Record and pull
    out the contents, passing this back to our controller and saving it in the `$data`
    array (highlighted in the following code) where it is passed to the `limit/view_all`
    view file:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If all works out as planned, you should see something similar to the following
    screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/2308OS_04_01.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: You can see that the word count of the **Preview** column is limited to 15 words,
    where it is capped and appended with three periods (**...**).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Using word_censor() for cleaning input
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when you're building your application that you'll need to
    not only validate against unwanted data, but also check the content of that data
    for any unwanted words or phrases. For example, imagine that you're building a
    simple blogging engine and you don't want people replying to your blog posts with
    rude words and phrases—fair enough. So, what you need to do is to be able to look
    through the user input and filter out any unwanted content that might be present.
    CodeIgniter provides just this facility with the function `word_censor()`. Let's
    look at how to use it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to store our censored words in a database; so, we'll look for words
    that we'll use in place of actual rude words, such as `rude_word_number_1`, and
    so on.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following MySQL code in your database:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We will store the censored text in another table. For want of a better title,
    I''ve called that table `censor`. The following code is the schema for that table,
    which you can run in your database:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create three files as shown:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/censor.php`'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/censor/create.php`'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/censor_model.php`'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `censor.php`, and add the following code to it:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create the view file `create.php` at `/path/to/codeigniter/application/views/censor/`
    and add the following code to it:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create the model file `censor_model.php` at `/path/to/codeigniter/application/models/`
    and add the following code to it:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The constructor in our `Censor` class loads our support files: the helpers
    `url` and `text`, and our model `Censor_model`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `public function index()` function redirects us to `public function create()`
    where we begin form validation. We load the form validation library and set the
    error delimiters, after which we set the rules for the form elements in the view
    file `create.php` at `/path/to/codeigniter/application//views/censor/`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: If there is an error, or the controller is being accessed for the first time,
    `$this->form_validation->run()` will equal `FALSE` and we shall just display the
    view file for the user to fill in.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有错误，或者控制器第一次被访问，`$this->form_validation->run()`将等于`FALSE`，我们将只显示视图文件供用户填写。
- en: 'However, once the form has been submitted (and assuming that there were no
    errors picked up by CodeIgniter''s validation functionality), we now want to check
    the input for any unwanted words. To do that, we must first get a list of the
    unwanted words. As we''re storing those words in the database table `censored_words`,
    we also should fetch them. So, we grab them from the database with the `censor_model`
    function `get_censored_words()`, and add them to an array called `$censored_words`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦表单已经提交（并且假设CodeIgniter的验证功能没有发现任何错误），我们现在想要检查输入中是否有任何不想要的词。为了做到这一点，我们首先需要获取一个不想要的词列表。因为我们把这些词存储在数据库表`censored_words`中，所以我们也应该获取它们。因此，我们使用`censor_model`函数的`get_censored_words()`从数据库中获取它们，并将它们添加到一个名为`$censored_words`的数组中：
- en: '[PRE60]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We then build the `$data` array ready to be passed to the `Censor_model` function,
    `create()`. Take a look at the `body` element of the array, which I''ve highlighted
    in the following code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们构建一个`$data`数组，准备传递给`Censor_model`函数的`create()`。看看数组的`body`元素，我在以下代码中已经突出显示了：
- en: '[PRE61]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Here, we call the text helper function, `word_censor()`, passing the string
    that we wish to check. In this case, the body forms items from the submitted form,
    along with the array of censored words as a second parameter; the third parameter
    is optional. Leaving the third parameter blank will cause CodeIgniter to replace
    a censored word with the default string `####`. However, for this recipe we're
    replacing each censored word with the string `BOOM`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们调用文本辅助函数`word_censor()`，传递我们希望检查的字符串。在这种情况下，`body`包含提交表单的项目，以及一个包含审查词的数组作为第二个参数；第三个参数是可选的。留空第三个参数将导致CodeIgniter用默认字符串`####`替换审查词。然而，对于这个食谱，我们用字符串`BOOM`替换每个审查词。
- en: The `$data` array is then written to the database table, `censor` (I really
    must think of a better name for that table).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`$data`数组被写入数据库表`censor`（我真的必须为这个表想一个更好的名字）。
- en: 'Let''s take it for a spin. Run the censor controller in your browser and you
    should see an output similar to the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试。在你的浏览器中运行审查控制器，你应该会看到一个类似于以下截图的输出：
- en: '![How it works...](img/2308OS_04_02.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/2308OS_04_02.jpg)'
- en: 'Here, we have entered the values `Rob` and `rude_word_number_1 TOWN`. When
    you click on the **Submit** button you should see the array `var_dump` of `$data`
    showing:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们输入了值`Rob`和`rude_word_number_1 TOWN`。当你点击**提交**按钮时，你应该会看到`$data`的`var_dump`数组显示：
- en: '[PRE62]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: If you see **BOOM TOWN**, you know it has worked!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到**BOOM TOWN**，你就知道它已经工作了！
