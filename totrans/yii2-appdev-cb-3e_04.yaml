- en: Chapter 4. Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own validators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and customizing CaptchaWidget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Captcha
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom input widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabular input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex forms with multiple models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX-dependent drop-down list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom client-side validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii makes working with forms a breeze and the documentation on it is almost
    complete. Still, there are some areas that need clarification and examples. We
    will describe them in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own validators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii provides a good set of built-in form validators that cover the most typical
    developer needs and are highly configurable. However, in some cases, a developer
    may need to create a custom validator.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is a good example of creating a standalone validator that checks
    the number of words.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a standalone validator at `@app/components/WordsValidator.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `Article` model at `@app/models/Article.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/controllers/ModelValidationController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `success` action of the `modelValidation` controller by opening the
    `index.php?r=model-validation/success` URL, and you'll get the following:![How
    to do it...](img/image00404.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `failure` action of the `modelValidation` controller by opening the
    `index.php?r=model-validation/failure` URL, and you'll get the following:![How
    to do it...](img/image00406.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `@app/controllers/AdhocValidationController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `success` action of the `AdhocValidationController` by opening the `index.php?r=adhoc-validation/success`
    URL, and you'll get the following:![How to do it...](img/image00408.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `failure` action of the `adhocValidation` controller by opening the
    `index.php?r=adhoc-validation/failure` URL, and you'll get the following:![How
    to do it...](img/image00411.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we created a standalone validator that checks the number of words by
    using the standard `str_word_count` PHP function, and then demonstrated two validator
    use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the validator as a validation rule in the `Article` model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the validator as an ad hoc validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The validator has a size attribute, which sets the maximum value for the number
    of words.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html](http://www.yiiframework.com/doc-2.0/guide-input-validation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling file uploads is a pretty common task for a web application. Yii has
    some helpful classes built in to do this. Let's create a simple form that will
    allow the upload of ZIP archives and store them in `/uploads`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `@app/web/uploads` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start with the model, so create the `@app/models/Upload.php` model
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will move on to the controller, so create `@app/controllers/UploadController.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you can view `@app/views/upload/index.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it. Now, run the upload controller and try uploading both ZIP archives
    and other files, as shown in the following screenshot:![How to do it...](img/image00413.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model we use is pretty simple. We define only one field, named `$file`,
    and a validation rule that uses the `FileValidator` file validator, which reads
    only ZIP files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a model instance and fill it with data from `$_POST` if the form
    is submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We then use `UploadedFile::getInstance`, which gives us access to use the `UploadedFile`
    instance. This class is a wrapper around the `$_FILE` array that PHP fills when
    the file is uploaded. We make sure that the file is a ZIP archive by calling the
    model's `validate` method, then we save the file using `UploadedFile::saveAs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to upload a file, the HTML form must meet the following two important
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Method must be set to `POST`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `enctype` attribute must be set to `multipart/form-data`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to remember that you add the `enctype` option to the form so
    that the file can be properly uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate this HTML using the `Html` helper or `ActiveForm` with `htmlOptions`
    set. Here, HTML was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the end, we display an error and a field for the model's file attribute,
    and render a submit button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To upload multiple files, Yii2 implements two special methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you have defined `$imageFiles` in your model in the view file
    in common all will be the same with a little difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all file instances, you have to call `UploadedFile::getInstances()`
    instead of `UploadedFile::getInstance()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Handling and saving multiple files can be done with a simple code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and customizing CaptchaWidget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, on the Internet, if you leave a form without spam protection, you
    will get a ton of spam data entered in a short time. Yii includes a Captcha component
    that makes adding such protection a breeze. The only problem is that there is
    no systematic guide on how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we will add Captcha protection to a simple form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a form model, `@app/models/EmailForm.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller, `@app/controllers/EmailController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view, `@app/views/email/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we have an e-mail submission form, as shown in the following screenshot,
    which validates the e-mail field. Let's add Captcha:![Getting ready](img/image00414.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to customize the form model. We need to add `$verifyCode`, which
    will hold the verification code entered and add a validation rule for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then need to add an external action to the controller. Add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a view, we need to show an additional field and the Captcha image. The following
    code will do this for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, do not forget to add the `Captcha` import in the header section of the
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it. Now, you can run the e-mail controller and see Captcha in action,
    as shown in the following screenshot:![How to do it...](img/image00416.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are no errors on the screen and no `Captcha` field on the form, most
    probably, you don't have the GD PHP or Imagick extensions installed and configured.
    Imagick or GD is required for Captcha because it generates images. We have added
    several `Captcha::checkRequirements()` checks, so the application will not use
    Captcha if the image cannot be displayed, but it will still work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a view, we call the Captcha widget that renders the `img` tag with a `src`
    attribute pointing to the Captcha action we added to the controller. In this action,
    an image with a random word is generated. The word generated is a code that the
    user should enter into the form. It is stored in a user session and an image is
    displayed to the user. When the user enters the e-mail and verification code into
    the form, we assign these values to the form model and then validate it. For the
    verification of the code field, we use `CaptchaValidator`. It gets the code from
    the user session and compares it to the code entered. If they don't match, the
    model data is considered invalid.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you restrict access to controller actions by using the `accessRules` controller
    method, don''t forget to grant everyone access to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Customizing Captcha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A standard Yii Captcha is good enough to protect you from spam, but there are
    situations where you may want to customize it, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You face a spam bot that can read image text and you need to add more security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to make it more interesting or easier to enter the Captcha text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, we will modify Yii's Captcha so it will require the user to
    solve a really simple arithmetic puzzle instead of just repeating the text in
    an image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a starting point for this example, we will take the result of the *Adding
    and customizing CaptchaWidget* recipe. Alternatively, you can take any form that
    uses Captcha, as we are not modifying the existing code a lot.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to customize `CaptchaAction`, which generates the code and renders
    its image representation. The code should be a random number and the representation
    should be an arithmetic expression that gives the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `@app/components/MathCaptchaAction.php` action as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in our controller''s `actions` method, we need to replace `CaptchaAction`
    with our own Captcha action, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, run your form and try the new Captcha. It will show arithmetic expressions
    with numbers from 1 to 10 and will require entering an answer, as shown in the
    following screenshot:![How to do it...](img/image00418.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We override two `CaptchaAction` methods. In `generateVerifyCode()`, we generate
    a random number instead of text. Then, as we need to render an expression instead
    of just showing text, we override `renderImage`. The expression itself is generated
    in our custom `getText()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `$minLength` and `$maxLenght` properties are already defined in `CaptchaAction`,
    so we don't have to add them to our `Math` `CaptchaAction` class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using standalone actions* recipe in [Chapter 2](part0024.xhtml#MSDG1-ae331331bc644dc9b658d3634f0748da
    "Chapter 2. Routing, Controllers, and Views"), *Routing, Controllers, and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom input widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii has a very good set of form widgets, but as with every framework out there,
    Yii does not have them all. In this recipe, we will learn how to create your own
    input widget. For our example, we will create a range input widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a widget file, `@app/components/RangeInputWidget.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller file, `@app/controllers/RangeController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a form file, `@app/models/RangeForm.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view file, `@app/views/range/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run a `range` controller by opening `index.php?r=range` and you'll get the following:![How
    to do it...](img/image00420.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `200` in the first text input field and `300` in the second, and you'll
    get the following:![How to do it...](img/image00422.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The widget outputs an error if the first value is bigger than the second; that
    is it. Try to input correct values, `100` and `200`, for the first and second
    inputs, respectively:![How to do it...](img/image00424.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We write the range input widget, which requires four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`: If it is not set, an exception will be thrown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attributeFrom`: This is used to set minimum range value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attributeTo`: This is used to set maximum range value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`htmlOptions`: It is passed to each input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This widget is used in form validation, and is set to check that the first value
    is less than or equal to the second value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Yii2 framework has an official Twitter Bootstrap extension that provides
    you with a pack of PHP wrappers over Twitter Bootstrap widgets. Before you write
    your own widget, check whether a Bootstrap widget exists at [http://www.yiiframework.com/doc-2.0/extbootstrap-index.html](http://www.yiiframework.com/doc-2.0/extbootstrap-index.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to learn more about widgets, you can use the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-base-widget.html](http://www.yiiframework.com/doc-2.0/yii-base-widget.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md](https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tabular input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to use a model to save and validate related
    models. Sometimes you will need to handle multiple models of the same kind in
    a single form.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, we have contests and prizes for contests. Any contest might contain
    an unlimited number of prizes. So, we need the ability to create a contest with
    prizes, validate them, display all errors, and save the primary model (contest
    model) and all related models (prize models) to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create migrations for contest and prize tables with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install migration with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With Gii, generate contest, prize, and `ContestPrizeAssn` models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create `@app/controllers/ContestController.php` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/views/contest/update.php` and place the following code inside
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following information shows how to implement tabular input with Yii.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `contest/update` action, we will be able to display all prizes with
    their amounts and edit them all at once. We''ve used two special Yii methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Model::loadMultiple()`: This method populates a set of models with data from
    the end user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Model::validateMultiple()`: This methods takes a set of models and validates
    them all at once'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because we've validated our models before with `validateMultiple()`, we're passing
    `false` as a parameter to `save()` to avoid running validation twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, visit `/index.php?r=contest/create page`. After visiting, you will see
    the page that will validate and create `''Happy New Year''` with two prizes, and
    will pass the prizes to the current contest model. You should note that we will
    only save the contest model and prizes to the database if they are valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00425.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is provided by following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the `/index.php?r=contest/update` page and you will see this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00429.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the `@app/views/contest/update.php` for each prize, we render a name and
    an input with an amount. We must add an index to each input name so that `Model::loadMultiple()`
    may identify which model to fill with which values.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, this approach is used for collecting tabular input data when
    you process all your attributes from a view form and populate parent and related
    models from the form.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input](http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input)'
  prefs: []
  type: TYPE_NORMAL
- en: Conditional validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are cases when it is necessary to enable or disable specific validation
    rules in the model. Yii2 provides a mechanism to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a form file, `@app/models/DeliveryForm.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller file, `@app/controllers/ValidationController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view file, `@app/views/validation/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `validation` controller by opening the `index.php?r=validation` URL,
    and choose the `courier delivery` value for type input; then you'll get the following:![How
    to do it...](img/image00431.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DeliveryForm address` attribute is required when the `type` attribute is
    set to `DeliveryForm::TYPE_COURIER`; otherwise, we choose the `Courier delivery`
    option in `type` select.
  prefs: []
  type: TYPE_NORMAL
- en: Also, to support client-side conditional validation, we configure the `whenClient`
    property, which takes a string representing a JavaScript function whose return
    value determines whether to apply the rule or not.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation](http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation)
  prefs: []
  type: TYPE_NORMAL
- en: Complex forms with multiple models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When dealing with some complex data, it is possible that you may need to use
    multiple different models to collect the user input. For example, you have an
    order form with user information such as first name, last name, and phone number;
    you also have a delivery address and some kind of product.
  prefs: []
  type: TYPE_NORMAL
- en: You would like to save all this data in one form. With Yii models and support
    forms, you can easily do this. Assuming that the user info will be stored in the
    user table and in the order form, we will save product information and the `user_id`
    of the user who has ordered a product. We also have a product table with some
    information in it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manger, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create migrations for contest and prize tables with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the newly-created migration''s `up()` and `down()` methods with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install migration with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With Gii, generate user, order, and product models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create `@app/controllers/TestController` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create a view file, `@app/views/test/order.php`, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can see the form at `http://yii-book.app/index.php?r=test/order`. Our form
    collects information from the user and order models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fill out our form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00434.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After saving, you will see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00436.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the controller, we validate and store it. Of course, this example is very
    simple. In real projects, you may have more than one model and you will be able
    to use this approach for them. This approach is very useful when you want to create
    or update more than one instance in the same form.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html](http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html)
  prefs: []
  type: TYPE_NORMAL
- en: AJAX-dependent drop-down list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you'll need a form with two dropdowns, and one dropdown's values will
    be dependent on the value of the other dropdown. Using Yii's built-in AJAX functionality,
    you can create such a dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `@app/model/Product.php` model as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `@app/models/Category.php` model as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `create_category_and_product_tables` migration with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the just-created migration''s methods and list of imported classes as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a controller file, `@app/controllers/DropdownController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view file, `@app/views/dropdown/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `dropdown` controller by opening `index.php?r=dropdown`, then add a
    new product with the value `Canon - EOS Rebel T6i DSLR` for the title field:![How
    to do it...](img/image00437.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the `Category` input has three options. Let's select the **Photo**
    option and after that, the second input selection will have two further options:![How
    to do it...](img/image00438.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is it. If you select another category, you will get sub-categories of this
    category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we have two dependent lists with categories and sub-categories,
    and one model, `Category`. The main idea is simple: we just bound the JQuery `onChange`
    event to the `category_id` field in our form. Every time a user changes this field,
    our app sends an AJAX request to the `get-sub-categories` action. This action
    returns a JSON-formatted list of sub-categories, and then, on the client-side,
    we build a list of options for our sub-categories list.'
  prefs: []
  type: TYPE_NORMAL
- en: AJAX validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some validations can only be done on the server-side, because only the server
    has the necessary information. For example, to validate that a company name or
    user e-mail is unique, we have to check the corresponding tables on the server
    side. In this case, you should use built-in AJAX validation. Yii2 supports AJAX
    form validation, which essentially sends the form values to the server, validates
    them, and sends back the validation errors, all without leaving the page. It does
    this every time you tab out of a (changed) field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the basic app template, we have a simple contact form. You can see this
    page at `http://yii-book.app/index.php?r=site/contact`. Open and modify the related
    view form, `@app/views/site/contact.php`. To enable AJAX validation for the whole
    form, set up the `enableAjaxValidation` option as `true` in the `form` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, you should add handling for the AJAX validation on the server-side. This
    code snippet just checks whether the current request is AJAX and if it''s a `POST`
    request. If it is, we will receive errors in JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s modify our `actionContact()` in the `SiteController` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous code will check whether the current request is AJAX. If it is,
    it will respond to this request by running the validation and returning the errors
    in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: You can check the response from the server in the debug panel in the browser.
    Try to submit an empty form and you will see the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the Google Chrome browser, press *F12* and select the **Network**
    tab in the development toolbar. You will see the JSON array with errors and messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00439.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom client-side validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Writing your own validators* recipe, we created a standalone validator.
    In this recipe, we will modify a validator to create extra client-side validation,
    which also checks the number of words.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manger, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create `@app/components/WordsValidator.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/models/Article.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/controllers/ValidationController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/views/validation/index.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the validation controller by opening `index.php?r=validation`. You will
    see an example of an incorrect value if you enter more than ten words:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00442.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you enter fewer than ten words, client-side validation will be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00445.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we created `@app/components/WordsValidator.php`, which extends the `@yii\validators\Validator`
    class, and added the newly-created validator class to the title attribute of the
    `Article` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our validator, we''ve defined two special methods: `validateValue()`
    and `clientValidateAttribute()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Our validator class implements the `validateValue()` method to support data
    validation out of the context of a data model. The second method just returns
    the JavaScript needed for performing client-side validation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we would like to hide validator realization, or want to control all validation
    processes only on the server-side, we can create a `Deferred` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, modify the `WordsValidator` validator as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the deferred variable is provided by Yii, which is an
    array of `Deferred` objects. The `$.get() jQuery` method creates a `Deferred`
    object, which is pushed to the `deferred` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, add this `checkWords` action to the `validation` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
