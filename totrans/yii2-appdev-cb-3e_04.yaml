- en: Chapter 4. Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：表单
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Writing your own validators
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自己的验证器
- en: Uploading files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件
- en: Adding and customizing CaptchaWidget
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和自定义 CaptchaWidget
- en: Customizing Captcha
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 Captcha
- en: Creating a custom input widget
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义输入小部件
- en: Tabular input
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格输入
- en: Conditional validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件验证
- en: Complex forms with multiple models
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个模型的复杂表单
- en: AJAX-dependent drop-down list
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX依赖的下拉列表
- en: AJAX validation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX 验证
- en: Creating a custom client-side validation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义客户端验证
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Yii makes working with forms a breeze and the documentation on it is almost
    complete. Still, there are some areas that need clarification and examples. We
    will describe them in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 使处理表单变得简单，其文档几乎已经完成。尽管如此，还有一些需要澄清和示例的区域。我们将在本章中描述它们。
- en: Writing your own validators
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自己的验证器
- en: Yii provides a good set of built-in form validators that cover the most typical
    developer needs and are highly configurable. However, in some cases, a developer
    may need to create a custom validator.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 提供了一套良好的内置表单验证器，它们覆盖了大多数开发者的典型需求，并且可高度配置。然而，在某些情况下，开发者可能需要创建自定义验证器。
- en: This recipe is a good example of creating a standalone validator that checks
    the number of words.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是一个创建独立验证器以检查单词数量的好例子。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Composer 包管理器创建新应用，如官方指南中所述，请参阅 [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a standalone validator at `@app/components/WordsValidator.php` as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@app/components/WordsValidator.php` 中创建一个独立的验证器，如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an `Article` model at `@app/models/Article.php` as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@app/models/Article.php` 中创建一个 `Article` 模型，如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create `@app/controllers/ModelValidationController.php` as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/controllers/ModelValidationController.php`:'
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the `success` action of the `modelValidation` controller by opening the
    `index.php?r=model-validation/success` URL, and you'll get the following:![How
    to do it...](img/image00404.jpeg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=model-validation/success` URL 运行 `modelValidation` 控制器的 `success`
    动作，你将得到以下内容：![如何操作...](img/image00404.jpeg)
- en: Run the `failure` action of the `modelValidation` controller by opening the
    `index.php?r=model-validation/failure` URL, and you'll get the following:![How
    to do it...](img/image00406.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=model-validation/failure` URL 运行 `modelValidation` 控制器的 `failure`
    动作，你将得到以下内容：![如何操作...](img/image00406.jpeg)
- en: 'Create `@app/controllers/AdhocValidationController.php` as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/controllers/AdhocValidationController.php`:'
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run the `success` action of the `AdhocValidationController` by opening the `index.php?r=adhoc-validation/success`
    URL, and you'll get the following:![How to do it...](img/image00408.jpeg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=adhoc-validation/success` URL 运行 `AdhocValidationController`
    的 `success` 动作，你将得到以下内容：![如何操作...](img/image00408.jpeg)
- en: Run the `failure` action of the `adhocValidation` controller by opening the
    `index.php?r=adhoc-validation/failure` URL, and you'll get the following:![How
    to do it...](img/image00411.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=adhoc-validation/failure` URL 运行 `adhocValidation` 控制器的 `failure`
    动作，你将得到以下内容：![如何操作...](img/image00411.jpeg)
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, we created a standalone validator that checks the number of words by
    using the standard `str_word_count` PHP function, and then demonstrated two validator
    use cases:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个独立的验证器，该验证器通过使用标准的 `str_word_count` PHP 函数来检查单词数量，然后演示了两个验证器使用案例：
- en: Using the validator as a validation rule in the `Article` model
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Article` 模型中将验证器用作验证规则
- en: Using the validator as an ad hoc validator
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将验证器用作临时验证器
- en: The validator has a size attribute, which sets the maximum value for the number
    of words.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器有一个大小属性，它设置单词数量的最大值。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'For further information, refer to the following URLs:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参考以下网址：
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html](http://www.yiiframework.com/doc-2.0/guide-input-validation.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html](http://www.yiiframework.com/doc-2.0/guide-input-validation.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-corevalidators.html)'
- en: Uploading files
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: Handling file uploads is a pretty common task for a web application. Yii has
    some helpful classes built in to do this. Let's create a simple form that will
    allow the upload of ZIP archives and store them in `/uploads`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 处理文件上传是Web应用的一个相当常见的任务。Yii内置了一些有用的类来完成这个任务。让我们创建一个简单的表单，允许上传ZIP存档并将它们存储在`/uploads`。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的Composer包管理器创建一个新的应用程序，官方指南在[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: Create the `@app/web/uploads` directory.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`@app/web/uploads`目录。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will start with the model, so create the `@app/models/Upload.php` model
    as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从模型开始，因此创建`@app/models/Upload.php`模型如下：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we will move on to the controller, so create `@app/controllers/UploadController.php`
    as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将转到控制器，因此创建`@app/controllers/UploadController.php`如下：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, you can view `@app/views/upload/index.php` as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以按照以下方式查看`@app/views/upload/index.php`：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That is it. Now, run the upload controller and try uploading both ZIP archives
    and other files, as shown in the following screenshot:![How to do it...](img/image00413.jpeg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这些了。现在，运行上传控制器并尝试上传ZIP存档和其他文件，如下面的截图所示：![如何操作...](img/image00413.jpeg)
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The model we use is pretty simple. We define only one field, named `$file`,
    and a validation rule that uses the `FileValidator` file validator, which reads
    only ZIP files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的模型相当简单。我们只定义了一个字段，名为`$file`，以及一个使用`FileValidator`文件验证器的验证规则，该验证器只读取ZIP文件。
- en: 'We create a model instance and fill it with data from `$_POST` if the form
    is submitted:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单被提交，我们将创建一个模型实例并用`$_POST`中的数据填充它：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We then use `UploadedFile::getInstance`, which gives us access to use the `UploadedFile`
    instance. This class is a wrapper around the `$_FILE` array that PHP fills when
    the file is uploaded. We make sure that the file is a ZIP archive by calling the
    model's `validate` method, then we save the file using `UploadedFile::saveAs`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后使用`UploadedFile::getInstance`，这使我们能够访问使用`UploadedFile`实例。这个类是PHP在文件上传时填充的`$_FILE`数组的包装器。我们通过调用模型的`validate`方法来确保文件是ZIP存档，然后我们使用`UploadedFile::saveAs`来保存文件。
- en: 'In order to upload a file, the HTML form must meet the following two important
    requirements:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了上传文件，HTML表单必须满足以下两个重要要求：
- en: Method must be set to `POST`
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法必须设置为`POST`
- en: The `enctype` attribute must be set to `multipart/form-data`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enctype`属性必须设置为`multipart/form-data`'
- en: It is important to remember that you add the `enctype` option to the form so
    that the file can be properly uploaded.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，你需要将`enctype`选项添加到表单中，以便文件能够正确上传。
- en: 'We can generate this HTML using the `Html` helper or `ActiveForm` with `htmlOptions`
    set. Here, HTML was used:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Html`辅助器或设置`htmlOptions`的`ActiveForm`来生成此HTML。在这里，使用了HTML：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the end, we display an error and a field for the model's file attribute,
    and render a submit button.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们显示一个错误和一个用于模型文件属性的输入字段，并渲染一个提交按钮。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To upload multiple files, Yii2 implements two special methods.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要上传多个文件，Yii2实现了两个特殊的方法。
- en: 'For instance, you have defined `$imageFiles` in your model in the view file
    in common all will be the same with a little difference:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你在视图文件中定义了模型中的`$imageFiles`，在公共文件中所有这些都将相同，只有一点不同：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get all file instances, you have to call `UploadedFile::getInstances()`
    instead of `UploadedFile::getInstance()`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有文件实例，你必须调用`UploadedFile::getInstances()`而不是`UploadedFile::getInstance()`：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Handling and saving multiple files can be done with a simple code snippet:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 处理和保存多个文件可以通过一个简单的代码片段来完成：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考：
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files](http://www.yiiframework.com/doc-2.0/guide-input-file-upload.html#uploading-multiple-files)'
- en: Adding and customizing CaptchaWidget
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和自定义CaptchaWidget
- en: Nowadays, on the Internet, if you leave a form without spam protection, you
    will get a ton of spam data entered in a short time. Yii includes a Captcha component
    that makes adding such protection a breeze. The only problem is that there is
    no systematic guide on how to use it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在互联网上，如果你不添加垃圾邮件保护就留下一个表单，你将在短时间内收到大量的垃圾数据。Yii包括一个验证码组件，使得添加此类保护变得轻而易举。唯一的问题是，没有关于如何使用它的系统指南。
- en: In the following example, we will add Captcha protection to a simple form.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将向一个简单的表单添加验证码保护。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create a form model, `@app/models/EmailForm.php`, as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表单模型，`@app/models/EmailForm.php`，如下所示：
- en: '[PRE12]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a controller, `@app/controllers/EmailController.php`, as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器，`@app/controllers/EmailController.php`，如下所示：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a view, `@app/views/email/index.php`, as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图，`@app/views/email/index.php`，如下所示：
- en: '[PRE14]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, we have an e-mail submission form, as shown in the following screenshot,
    which validates the e-mail field. Let's add Captcha:![Getting ready](img/image00414.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有一个电子邮件提交表单，如下面的截图所示，它验证电子邮件字段。让我们添加验证码：![准备工作](img/image00414.jpeg)
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to customize the form model. We need to add `$verifyCode`, which
    will hold the verification code entered and add a validation rule for it:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要自定义表单模型。我们需要添加`$verifyCode`，它将保存输入的验证码，并为其添加一个验证规则：
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then need to add an external action to the controller. Add the following
    code to it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要向控制器添加一个外部操作。向其中添加以下代码：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In a view, we need to show an additional field and the Captcha image. The following
    code will do this for us:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图中，我们需要显示一个额外的字段和验证码图片。以下代码将为我们完成这项工作：
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, do not forget to add the `Captcha` import in the header section of the
    view:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，别忘了在视图的头部部分添加`Captcha`导入：
- en: '[PRE18]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That is it. Now, you can run the e-mail controller and see Captcha in action,
    as shown in the following screenshot:![How to do it...](img/image00416.jpeg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在，你可以运行电子邮件控制器，并看到验证码的实际效果，如下面的截图所示：![如何操作...](img/image00416.jpeg)
- en: If there are no errors on the screen and no `Captcha` field on the form, most
    probably, you don't have the GD PHP or Imagick extensions installed and configured.
    Imagick or GD is required for Captcha because it generates images. We have added
    several `Captcha::checkRequirements()` checks, so the application will not use
    Captcha if the image cannot be displayed, but it will still work.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果屏幕上没有错误，并且表单上没有`Captcha`字段，那么很可能是你没有安装和配置GD PHP或Imagick扩展。验证码需要GD或Imagick，因为它生成图片。我们添加了几个`Captcha::checkRequirements()`检查，所以如果无法显示图片，应用程序将不会使用验证码，但它仍然可以工作。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In a view, we call the Captcha widget that renders the `img` tag with a `src`
    attribute pointing to the Captcha action we added to the controller. In this action,
    an image with a random word is generated. The word generated is a code that the
    user should enter into the form. It is stored in a user session and an image is
    displayed to the user. When the user enters the e-mail and verification code into
    the form, we assign these values to the form model and then validate it. For the
    verification of the code field, we use `CaptchaValidator`. It gets the code from
    the user session and compares it to the code entered. If they don't match, the
    model data is considered invalid.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们调用验证码小部件，该小部件渲染带有指向我们添加到控制器中的验证码操作的`src`属性的`img`标签。在这个操作中，生成一个带有随机单词的图片。生成的单词是一个用户应该输入到表单中的代码。它存储在用户会话中，并向用户显示一个图片。当用户将电子邮件和验证码输入到表单中时，我们将这些值分配给表单模型，然后对其进行验证。对于验证码字段的验证，我们使用`CaptchaValidator`。它从用户会话中获取代码，并将其与输入的代码进行比较。如果它们不匹配，则模型数据被视为无效。
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you restrict access to controller actions by using the `accessRules` controller
    method, don''t forget to grant everyone access to them:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过使用`accessRules`控制器方法来限制对控制器操作的访问，别忘了授予每个人对这些操作的访问权限：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Customizing Captcha
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义验证码
- en: 'A standard Yii Captcha is good enough to protect you from spam, but there are
    situations where you may want to customize it, such as the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Yii验证码足以保护你免受垃圾邮件的侵扰，但有时你可能想对其进行自定义，例如以下情况：
- en: You face a spam bot that can read image text and you need to add more security
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您面临一个能够读取图像文本的垃圾邮件机器人，您需要增加更多的安全性
- en: You want to make it more interesting or easier to enter the Captcha text
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望使其更有趣或更容易输入 Captcha 文本
- en: In our example, we will modify Yii's Captcha so it will require the user to
    solve a really simple arithmetic puzzle instead of just repeating the text in
    an image.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将修改 Yii 的 Captcha，使其要求用户解决一个真正的简单算术谜题，而不是仅仅重复图像中的文本。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As a starting point for this example, we will take the result of the *Adding
    and customizing CaptchaWidget* recipe. Alternatively, you can take any form that
    uses Captcha, as we are not modifying the existing code a lot.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本例的起点，我们将采用 *添加和自定义 CaptchaWidget* 菜谱的结果。或者，您也可以采用任何使用 Captcha 的表单，因为我们并没有大量修改现有代码。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We need to customize `CaptchaAction`, which generates the code and renders
    its image representation. The code should be a random number and the representation
    should be an arithmetic expression that gives the same result:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要自定义 `CaptchaAction`，该动作生成代码并渲染其图像表示。代码应该是一个随机数，表示应该是一个给出相同结果的算术表达式：
- en: 'Create an `@app/components/MathCaptchaAction.php` action as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `@app/components/MathCaptchaAction.php` 动作，如下所示：
- en: '[PRE20]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, in our controller''s `actions` method, we need to replace `CaptchaAction`
    with our own Captcha action, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的控制器 `actions` 方法中，我们需要将 `CaptchaAction` 替换为我们的 Captcha 动作，如下所示：
- en: '[PRE21]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, run your form and try the new Captcha. It will show arithmetic expressions
    with numbers from 1 to 10 and will require entering an answer, as shown in the
    following screenshot:![How to do it...](img/image00418.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行您的表单并尝试新的 Captcha。它将显示从 1 到 10 的算术表达式，并要求输入答案，如下面的截图所示：![如何实现...](img/image00418.jpeg)
- en: We override two `CaptchaAction` methods. In `generateVerifyCode()`, we generate
    a random number instead of text. Then, as we need to render an expression instead
    of just showing text, we override `renderImage`. The expression itself is generated
    in our custom `getText()` method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写了两个 `CaptchaAction` 方法。在 `generateVerifyCode()` 方法中，我们生成一个随机数而不是文本。然后，由于我们需要渲染一个表达式而不是仅仅显示文本，我们重写了
    `renderImage` 方法。这个表达式本身是在我们的自定义 `getText()` 方法中生成的。
- en: The `$minLength` and `$maxLenght` properties are already defined in `CaptchaAction`,
    so we don't have to add them to our `Math` `CaptchaAction` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`$minLength` 和 `$maxLenght` 属性已经在 `CaptchaAction` 中定义，所以我们不需要将它们添加到我们的 `Math`
    `CaptchaAction` 类中。'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参考以下内容：
- en: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html)'
- en: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html](http://www.yiiframework.com/doc-2.0/yii-captcha-captchaaction.html)'
- en: The *Using standalone actions* recipe in [Chapter 2](part0024.xhtml#MSDG1-ae331331bc644dc9b658d3634f0748da
    "Chapter 2. Routing, Controllers, and Views"), *Routing, Controllers, and Views*
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 2 章 *路由、控制器和视图* 的 *使用独立动作* 菜谱中，*路由、控制器和视图*，请参阅
- en: Creating a custom input widget
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自定义输入小部件
- en: Yii has a very good set of form widgets, but as with every framework out there,
    Yii does not have them all. In this recipe, we will learn how to create your own
    input widget. For our example, we will create a range input widget.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 拥有一套非常好的表单小部件，但就像所有现有的框架一样，Yii 并没有全部拥有它们。在本菜谱中，我们将学习如何创建自己的输入小部件。在我们的例子中，我们将创建一个范围输入小部件。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Composer 软件包管理器创建一个新的应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Create a widget file, `@app/components/RangeInputWidget.php`, as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个小部件文件，`@app/components/RangeInputWidget.php`，如下所示：
- en: '[PRE22]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a controller file, `@app/controllers/RangeController.php`, as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器文件，`@app/controllers/RangeController.php`，如下所示：
- en: '[PRE23]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a form file, `@app/models/RangeForm.php`, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表单文件，`@app/models/RangeForm.php`，如下所示：
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a view file, `@app/views/range/index.php`, as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图文件，`@app/views/range/index.php`，如下所示：
- en: '[PRE25]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run a `range` controller by opening `index.php?r=range` and you'll get the following:![How
    to do it...](img/image00420.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开`index.php?r=range`运行一个`range`控制器，你将得到以下内容：![如何操作...](img/image00420.jpeg)
- en: Enter `200` in the first text input field and `300` in the second, and you'll
    get the following:![How to do it...](img/image00422.jpeg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个文本输入字段中输入`200`，在第二个输入字段中输入`300`，你将得到以下内容：![如何操作...](img/image00422.jpeg)
- en: The widget outputs an error if the first value is bigger than the second; that
    is it. Try to input correct values, `100` and `200`, for the first and second
    inputs, respectively:![How to do it...](img/image00424.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一个值大于第二个值，则小部件输出错误；就是这样。尝试为第一个和第二个输入分别输入正确的值`100`和`200`：![如何操作...](img/image00424.jpeg)
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We write the range input widget, which requires four parameters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了范围输入小部件，它需要四个参数：
- en: '`model`: If it is not set, an exception will be thrown'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：如果没有设置，将抛出异常'
- en: '`attributeFrom`: This is used to set minimum range value'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeFrom`：用于设置最小范围值'
- en: '`attributeTo`: This is used to set maximum range value'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeTo`：用于设置最大范围值'
- en: '`htmlOptions`: It is passed to each input'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`htmlOptions`：它传递给每个输入'
- en: This widget is used in form validation, and is set to check that the first value
    is less than or equal to the second value.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件用于表单验证，并设置为检查第一个值是否小于或等于第二个值。
- en: There's more...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The Yii2 framework has an official Twitter Bootstrap extension that provides
    you with a pack of PHP wrappers over Twitter Bootstrap widgets. Before you write
    your own widget, check whether a Bootstrap widget exists at [http://www.yiiframework.com/doc-2.0/extbootstrap-index.html](http://www.yiiframework.com/doc-2.0/extbootstrap-index.html).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2框架有一个官方的Twitter Bootstrap扩展，它为你提供了一组Twitter Bootstrap小部件的PHP包装器。在编写你自己的小部件之前，请检查[http://www.yiiframework.com/doc-2.0/extbootstrap-index.html](http://www.yiiframework.com/doc-2.0/extbootstrap-index.html)上是否存在Bootstrap小部件。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about widgets, you can use the following resources:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于小部件的信息，您可以使用以下资源：
- en: '[http://www.yiiframework.com/doc-2.0/yii-base-widget.html](http://www.yiiframework.com/doc-2.0/yii-base-widget.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/yii-base-widget.html](http://www.yiiframework.com/doc-2.0/yii-base-widget.html)'
- en: '[https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md](https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md](https://github.com/yiisoft/yii2-bootstrap/blob/master/docs/guide/usage-widgets.md)'
- en: Tabular input
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格输入
- en: In this section, we will show you how to use a model to save and validate related
    models. Sometimes you will need to handle multiple models of the same kind in
    a single form.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何使用模型来保存和验证相关模型。有时您可能需要在单个表单中处理同一类型的多个模型。
- en: For instance, we have contests and prizes for contests. Any contest might contain
    an unlimited number of prizes. So, we need the ability to create a contest with
    prizes, validate them, display all errors, and save the primary model (contest
    model) and all related models (prize models) to the database.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有比赛和比赛的奖品。任何比赛都可能包含无限数量的奖品。因此，我们需要创建带有奖品的比赛，验证它们，显示所有错误，并将主模型（比赛模型）以及所有相关模型（奖品模型）保存到数据库中。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用Composer包管理器创建新应用程序，如官方指南[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)中所述。
- en: 'Create migrations for contest and prize tables with the following commands:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令为比赛和奖品表创建迁移：
- en: '[PRE26]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, install migration with the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令安装迁移：
- en: '[PRE27]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With Gii, generate contest, prize, and `ContestPrizeAssn` models.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成比赛、奖品和`ContestPrizeAssn`模型。
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s create `@app/controllers/ContestController.php` with the following code:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建`@app/controllers/ContestController.php`，并使用以下代码：
- en: '[PRE28]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create `@app/views/contest/update.php` and place the following code inside
    it:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`@app/views/contest/update.php`，并在其中放置以下代码：
- en: '[PRE29]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The following information shows how to implement tabular input with Yii.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息显示了如何在Yii中实现表格输入。
- en: 'In the `contest/update` action, we will be able to display all prizes with
    their amounts and edit them all at once. We''ve used two special Yii methods:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在`contest/update`动作中，我们将能够显示所有奖品及其金额，并一次性编辑它们。我们使用了两个特殊的方法：
- en: '`Model::loadMultiple()`: This method populates a set of models with data from
    the end user'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model::loadMultiple()`：此方法使用来自最终用户的数据填充一组模型'
- en: '`Model::validateMultiple()`: This methods takes a set of models and validates
    them all at once'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model::validateMultiple()`：此方法接受一组模型并将它们一次性全部验证'
- en: Because we've validated our models before with `validateMultiple()`, we're passing
    `false` as a parameter to `save()` to avoid running validation twice.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在使用`validateMultiple()`验证了我们的模型之后，所以我们在`save()`方法中传递`false`作为参数，以避免运行两次验证。
- en: 'First, visit `/index.php?r=contest/create page`. After visiting, you will see
    the page that will validate and create `''Happy New Year''` with two prizes, and
    will pass the prizes to the current contest model. You should note that we will
    only save the contest model and prizes to the database if they are valid:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问`/index.php?r=contest/create`页面。访问后，你会看到将验证并创建带有两个奖项的`'Happy New Year'`页面，并将奖项传递给当前的比赛模型。你应该注意，我们只有在它们有效的情况下才会将比赛模型和奖项保存到数据库中：
- en: '![How it works...](img/image00425.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00425.jpeg)'
- en: 'It is provided by following condition:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过以下条件提供：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Go to the `/index.php?r=contest/update` page and you will see this form:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`/index.php?r=contest/update`页面，你会看到这个表单：
- en: '![How it works...](img/image00429.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image00429.jpeg)'
- en: In the `@app/views/contest/update.php` for each prize, we render a name and
    an input with an amount. We must add an index to each input name so that `Model::loadMultiple()`
    may identify which model to fill with which values.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在`@app/views/contest/update.php`中为每个奖项渲染一个名称和一个金额输入。我们必须为每个输入名称添加一个索引，以便`Model::loadMultiple()`能够识别用哪些值填充哪个模型。
- en: In conclusion, this approach is used for collecting tabular input data when
    you process all your attributes from a view form and populate parent and related
    models from the form.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，这种方法用于在处理来自视图表单的所有属性时收集表格输入数据，并从表单中填充父模型和相关模型。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to the following URL:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅以下URL：
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input](http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input](http://www.yiiframework.com/doc-2.0/guide-input-tabular-input.html#collecting-tabular-input)'
- en: Conditional validation
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件验证
- en: There are cases when it is necessary to enable or disable specific validation
    rules in the model. Yii2 provides a mechanism to do that.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候在模型中启用或禁用特定的验证规则是必要的。Yii2提供了一个机制来实现这一点。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用官方指南中描述的Composer包管理器创建一个新的应用程序，该指南的网址为[http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html)。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a form file, `@app/models/DeliveryForm.php`, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表单文件，`@app/models/DeliveryForm.php`，如下所示：
- en: '[PRE31]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a controller file, `@app/controllers/ValidationController.php`, as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器文件，`@app/controllers/ValidationController.php`，如下所示：
- en: '[PRE32]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a view file, `@app/views/validation/index.php`, as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图文件，`@app/views/validation/index.php`，如下所示：
- en: '[PRE33]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the `validation` controller by opening the `index.php?r=validation` URL,
    and choose the `courier delivery` value for type input; then you'll get the following:![How
    to do it...](img/image00431.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开`index.php?r=validation` URL来运行`validation`控制器，并为类型输入选择`courier delivery`值；然后你会得到以下结果：![如何操作...](img/image00431.jpeg)
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The `DeliveryForm address` attribute is required when the `type` attribute is
    set to `DeliveryForm::TYPE_COURIER`; otherwise, we choose the `Courier delivery`
    option in `type` select.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当`type`属性设置为`DeliveryForm::TYPE_COURIER`时，`DeliveryForm address`属性是必需的；否则，我们在`type`选择中选中`Courier
    delivery`选项。
- en: Also, to support client-side conditional validation, we configure the `whenClient`
    property, which takes a string representing a JavaScript function whose return
    value determines whether to apply the rule or not.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了支持客户端条件验证，我们配置了`whenClient`属性，它接受一个表示JavaScript函数的字符串，其返回值决定是否应用该规则。
- en: See also
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation](http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation](http://www.yiiframework.com/doc-2.0/guideinput-validation.html#conditional-validation)
- en: Complex forms with multiple models
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂的多模型表格
- en: When dealing with some complex data, it is possible that you may need to use
    multiple different models to collect the user input. For example, you have an
    order form with user information such as first name, last name, and phone number;
    you also have a delivery address and some kind of product.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理一些复杂数据时，你可能需要使用多个不同的模型来收集用户输入。例如，你有一个包含用户信息（如名字、姓氏和电话号码）的订单表格；你还有一个送货地址和一些类型的产品。
- en: You would like to save all this data in one form. With Yii models and support
    forms, you can easily do this. Assuming that the user info will be stored in the
    user table and in the order form, we will save product information and the `user_id`
    of the user who has ordered a product. We also have a product table with some
    information in it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在一个表格中保存所有这些数据。使用Yii模型和支持表格，你可以轻松地做到这一点。假设用户信息将存储在用户表中，并在订单表格中，我们将保存产品信息和已订购产品的用户`user_id`。我们还有一个包含一些信息的产品表。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manger, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南中的描述，使用Composer包管理器创建一个新的应用程序，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create migrations for contest and prize tables with the following commands:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令为竞赛和奖品表创建迁移：
- en: '[PRE34]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Update the newly-created migration''s `up()` and `down()` methods with the
    following code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新新创建迁移的`up()`和`down()`方法：
- en: '[PRE35]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, install migration with the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令安装迁移：
- en: '[PRE36]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With Gii, generate user, order, and product models.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Gii生成用户、订单和产品模型。
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create `@app/controllers/TestController` with the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建`@app/controllers/TestController`：
- en: '[PRE37]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then create a view file, `@app/views/test/order.php`, and add the following
    code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个视图文件，`@app/views/test/order.php`，并添加以下代码：
- en: '[PRE38]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: You can see the form at `http://yii-book.app/index.php?r=test/order`. Our form
    collects information from the user and order models.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`http://yii-book.app/index.php?r=test/order`看到这个表格。我们的表格从用户和订单模型收集信息。
- en: 'Let''s fill out our form:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填写我们的表格：
- en: '![How it works...](img/image00434.jpeg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00434.jpeg)'
- en: 'After saving, you will see the following result:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，你会看到以下结果：
- en: '![How it works...](img/image00436.jpeg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00436.jpeg)'
- en: In the controller, we validate and store it. Of course, this example is very
    simple. In real projects, you may have more than one model and you will be able
    to use this approach for them. This approach is very useful when you want to create
    or update more than one instance in the same form.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，我们验证并存储它。当然，这个例子非常简单。在实际项目中，你可能会有多个模型，并且你可以使用这种方法来处理它们。当你想在同一个表格中创建或更新多个实例时，这种方法非常有用。
- en: See also
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html](http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html](http://www.yiiframework.com/doc-2.0/guide-input-multiple-models.html)
- en: AJAX-dependent drop-down list
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX依赖的下拉列表
- en: Often, you'll need a form with two dropdowns, and one dropdown's values will
    be dependent on the value of the other dropdown. Using Yii's built-in AJAX functionality,
    you can create such a dropdown.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可能需要一个带有两个下拉菜单的表格，其中一个下拉菜单的值将依赖于另一个下拉菜单的值。使用Yii内置的AJAX功能，你可以创建这样的下拉菜单。
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照官方指南中的描述，使用composer创建一个新的应用程序，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Create an `@app/model/Product.php` model as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建一个`@app/model/Product.php`模型：
- en: '[PRE39]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create an `@app/models/Category.php` model as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建一个`@app/models/Category.php`模型：
- en: '[PRE40]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a `create_category_and_product_tables` migration with the following
    command:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`create_category_and_product_tables`迁移：
- en: '[PRE41]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Update the just-created migration''s methods and list of imported classes as
    follows:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式更新刚刚创建的迁移的方法和导入的类列表：
- en: '[PRE42]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How to do it...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a controller file, `@app/controllers/DropdownController.php`, as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建控制器文件，`@app/controllers/DropdownController.php`：
- en: '[PRE43]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a view file, `@app/views/dropdown/index.php`, as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图文件，`@app/views/dropdown/index.php`，如下所示：
- en: '[PRE44]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Run the `dropdown` controller by opening `index.php?r=dropdown`, then add a
    new product with the value `Canon - EOS Rebel T6i DSLR` for the title field:![How
    to do it...](img/image00437.jpeg)
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=dropdown` 来运行 `dropdown` 控制器，然后为标题字段添加一个新产品 `Canon - EOS Rebel
    T6i DSLR` 的值：![如何操作...](img/image00437.jpeg)
- en: As you can see, the `Category` input has three options. Let's select the **Photo**
    option and after that, the second input selection will have two further options:![How
    to do it...](img/image00438.jpeg)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，`Category` 输入有三个选项。让我们选择 **照片** 选项，然后第二个输入选择将有两个进一步选项：![如何操作...](img/image00438.jpeg)
- en: That is it. If you select another category, you will get sub-categories of this
    category.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。如果您选择另一个类别，您将得到该类别的子类别。
- en: How it works...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we have two dependent lists with categories and sub-categories,
    and one model, `Category`. The main idea is simple: we just bound the JQuery `onChange`
    event to the `category_id` field in our form. Every time a user changes this field,
    our app sends an AJAX request to the `get-sub-categories` action. This action
    returns a JSON-formatted list of sub-categories, and then, on the client-side,
    we build a list of options for our sub-categories list.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有两个依赖于类别和子类别的列表，以及一个模型 `Category`。主要思想很简单：我们只是将 JQuery 的 `onChange`
    事件绑定到我们表单中的 `category_id` 字段。每次用户更改此字段时，我们的应用程序都会向 `get-sub-categories` 动作发送一个
    AJAX 请求。此操作返回一个以 JSON 格式编写的子类别列表，然后，在客户端，我们为子类别列表构建一个选项列表。
- en: AJAX validation
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX 验证
- en: Some validations can only be done on the server-side, because only the server
    has the necessary information. For example, to validate that a company name or
    user e-mail is unique, we have to check the corresponding tables on the server
    side. In this case, you should use built-in AJAX validation. Yii2 supports AJAX
    form validation, which essentially sends the form values to the server, validates
    them, and sends back the validation errors, all without leaving the page. It does
    this every time you tab out of a (changed) field.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一些验证只能在服务器端进行，因为只有服务器才有必要的信息。例如，为了验证公司名称或用户电子邮件是否唯一，我们必须检查服务器端的相应表。在这种情况下，您应该使用内置的
    AJAX 验证。Yii2 支持AJAX表单验证，它本质上会将表单值发送到服务器，进行验证，并将验证错误以 JSON 格式发送回来。它会在您每次从（更改的）字段中移出标签时执行此操作。
- en: Getting ready
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方指南中描述的 Composer 软件包管理器创建一个新应用程序，[http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html)。
- en: How to do it...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the basic app template, we have a simple contact form. You can see this
    page at `http://yii-book.app/index.php?r=site/contact`. Open and modify the related
    view form, `@app/views/site/contact.php`. To enable AJAX validation for the whole
    form, set up the `enableAjaxValidation` option as `true` in the `form` config:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基本应用模板中，我们有一个简单的联系表单。您可以在 `http://yii-book.app/index.php?r=site/contact` 查看此页面。打开并修改相关的视图表单，`@app/views/site/contact.php`。要为整个表单启用
    AJAX 验证，请在 `form` 配置中将 `enableAjaxValidation` 选项设置为 `true`：
- en: '[PRE45]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Also, you should add handling for the AJAX validation on the server-side. This
    code snippet just checks whether the current request is AJAX and if it''s a `POST`
    request. If it is, we will receive errors in JSON format:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您应该在服务器端添加对 AJAX 验证的处理。此代码片段仅检查当前请求是否为 AJAX，并且是否为 `POST` 请求。如果是，我们将以 JSON
    格式接收错误：
- en: '[PRE46]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s modify our `actionContact()` in the `SiteController` with the following
    code:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用以下代码修改 `SiteController` 中的 `actionContact()`：
- en: '[PRE47]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous code will check whether the current request is AJAX. If it is,
    it will respond to this request by running the validation and returning the errors
    in JSON format.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将检查当前请求是否为 AJAX。如果是，它将通过运行验证并以 JSON 格式返回错误来响应此请求。
- en: You can check the response from the server in the debug panel in the browser.
    Try to submit an empty form and you will see the response.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器的调试面板中检查来自服务器的响应。尝试提交一个空表单，您将看到响应。
- en: 'For example, in the Google Chrome browser, press *F12* and select the **Network**
    tab in the development toolbar. You will see the JSON array with errors and messages:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Google Chrome 浏览器中，按 *F12* 并在开发工具栏中选择 **网络** 选项卡。您将看到包含错误和消息的 JSON 数组：
- en: '![How it works...](img/image00439.jpeg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00439.jpeg)'
- en: See also
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#ajaxvalidation)'
- en: Creating a custom client-side validation
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义客户端验证
- en: In the *Writing your own validators* recipe, we created a standalone validator.
    In this recipe, we will modify a validator to create extra client-side validation,
    which also checks the number of words.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *编写自己的验证器* 菜谱中，我们创建了一个独立的验证器。在这个菜谱中，我们将修改一个验证器以创建额外的客户端验证，该验证器也会检查单词数量。
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new application by using the Composer package manger, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html)。
- en: How to do it...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Create `@app/components/WordsValidator.php` as follows:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/components/WordsValidator.php`:'
- en: '[PRE48]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create `@app/models/Article.php` as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/models/Article.php`:'
- en: '[PRE49]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create `@app/controllers/ValidationController.php` as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/controllers/ValidationController.php`:'
- en: '[PRE50]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create `@app/views/validation/index.php` as follows:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '按照以下方式创建 `@app/views/validation/index.php`:'
- en: '[PRE51]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'Run the validation controller by opening `index.php?r=validation`. You will
    see an example of an incorrect value if you enter more than ten words:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开 `index.php?r=validation` 来运行验证控制器。如果你输入超过十个单词，你会看到一个错误的值示例：
- en: '![How it works...](img/image00442.jpeg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00442.jpeg)'
- en: 'If you enter fewer than ten words, client-side validation will be successful:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入的单词少于十个，客户端验证将成功：
- en: '![How it works...](img/image00445.jpeg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00445.jpeg)'
- en: 'First, we created `@app/components/WordsValidator.php`, which extends the `@yii\validators\Validator`
    class, and added the newly-created validator class to the title attribute of the
    `Article` model:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了 `@app/components/WordsValidator.php`，它扩展了 `@yii\validators\Validator`
    类，并将新创建的验证器类添加到 `Article` 模型的标题属性中：
- en: '[PRE52]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Inside our validator, we''ve defined two special methods: `validateValue()`
    and `clientValidateAttribute()`.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的验证器内部，我们定义了两个特殊方法：`validateValue()` 和 `clientValidateAttribute()`。
- en: Our validator class implements the `validateValue()` method to support data
    validation out of the context of a data model. The second method just returns
    the JavaScript needed for performing client-side validation.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的验证器类实现了 `validateValue()` 方法，以支持在数据模型上下文之外进行数据验证。第二个方法仅返回执行客户端验证所需的JavaScript。
- en: There's more...
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we would like to hide validator realization, or want to control all validation
    processes only on the server-side, we can create a `Deferred` object.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想隐藏验证器的实现，或者只想在服务器端控制所有验证过程，我们可以创建一个 `Deferred` 对象。
- en: 'First, modify the `WordsValidator` validator as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，修改 `WordsValidator` 验证器如下：
- en: '[PRE53]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the preceding code, the deferred variable is provided by Yii, which is an
    array of `Deferred` objects. The `$.get() jQuery` method creates a `Deferred`
    object, which is pushed to the `deferred` array.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，deferred变量是由Yii提供的，它是一个包含 `Deferred` 对象的数组。`$.get() jQuery` 方法创建一个 `Deferred`
    对象，并将其推送到 `deferred` 数组中。
- en: 'Second, add this `checkWords` action to the `validation` controller:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步，将此 `checkWords` 动作添加到 `validation` 控制器中：
- en: '[PRE54]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further information, refer to the following URLs:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多信息，请参考以下URL：
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#implementing-client-side-validation)'
- en: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation](http://www.yiiframework.com/doc-2.0/guide-input-validation.html#deferred-validation)'
