- en: Appendix A. Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The big day has finally arrived! By the end of this appendix your site will
    be live, and only a few minor deployment issues now stand in between you and your
    online aspirations. *Actually that's not quite true!* I should make it clear that
    there's nothing particularly complex about deployment; it's just that you need
    to keep on top of a lot of different issues. Making silly errors at this stage
    can have dramatic effects on the final product because we are dealing mainly with
    configuration issues when we deploy a fully developed application. Of course,
    making errors is not the end of the world, because we are going to test everything
    very thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, deploying a site like Drupal has got to be pretty easy—it's
    just a case of copying the `drupal` folder over to the new server! *Or is it?*
    There are a number of concerns that go hand in hand with ensuring everything goes
    smoothly during the transfer. For example, the database will also have to be rebuilt
    exactly as it is on the development machine—I'm sure that since most of you have
    spent some time configuring everything and populating tables, you'll be anxious
    to not have to do everything all over again. Apart from this, there are the connection
    parameters and some security issues to think about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, the appendix looks at how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Get everything ready for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfer the files to their new home
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the site, including the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test everything thoroughly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chins up, we're nearly at the end; and it hasn't been all that bad, has it?
    I for one will no doubt start my very own blog—it's really tempting!
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready to Deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First thing's first; *are you sure you are completely happy with the site as
    it is?* While it is not a huge problem to make modifications to your site after
    deployment, there is no point in making things hard for yourself by having to
    recode some pages or make design changes then, when you can get them done now.
    If everything is in order, then we can begin with the preparation process.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation comes in three stages. In no particular order, we need to ensure
    that we have a nice, clean, working version of the site, a nice, clean, working
    copy of the database, and finally, a nice, clean file system ready for the files
    on the host site. Let's take a look at how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Make Sure the Host Is Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Intuitively enough, you have to make sure you have an adequate host. By this
    I mean you have a host on which you can *create a MySQL database*, and that allows
    *access to a file system*, and whatever other goodies you think you may need.
    To make your life easy, it is also nice to have an FTP account available so that
    you can transfer files across to the host file system. More often than not, you
    should be able to log on to your FTP account with your administrator''s username
    and password automatically. If you''re not sure what all this is about, then try
    the following URL in your browser (assuming your browser supports FTP):'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp://ftp.your_domain_name.com`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are prompted for a password or are shown the contents of your home directory,
    then congratulations, you have an FTP account. If you don''t have one, then you
    should consider getting your host to give you one, or finding out from them how
    they upload files. Incidentally, instead of being prompted for your username and
    password every time you use your FTP account, you might want to send them in the
    URL, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ftp://username:password@hostname/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re worried about security (by this I mean: you *are* worried about
    security), then it''s best to leave out the password and simply pass the username,
    because otherwise this can cause security problems if URLs are logged in a non-secure
    place. Remember that this information is already being passed in an unencrypted
    format. If you wish to do everything securely, you should speak to your host about
    how to secure file transfers.'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have access to an FTP account, then don't panic! Read the section
    entitled *Transfer the Files* a little later on in this appendix—it will still
    be easy to move your files to the host site.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have made sure that there is somewhere to upload the Drupal files to,
    and something to do it with, you need to create a database. Goodness only knows
    how many different ways this can be done in; so we won't go into each and every
    one here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at your site''s administrative interface and see if there is a
    section that allows you to create and control your MySQL database (you might find
    that your host provides our good friend phpMyAdmin). For example, the demo site''s
    host has the following **Manage Mysql** link in the **Databases** section that
    provides an interface used to create databases. It also provides phpMyAdmin in
    order to administer those databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Make Sure the Host Is Ready](img/1800_0A_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **Manage MySQL** link brings up the following page. Once you
    have the database, ensure that you have made note of its name—often hosts will
    append something to the name you choose as shown here in the demo site''s database
    creation interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Make Sure the Host Is Ready](img/1800_0A_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the database has been called **contechj_contechst**, where
    **contechst** is the name I chose for the live database, and **contechj_** is
    the part that was added. Before we continue, it is important to note that this
    database needs a user, so ensure that it has one, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Make Sure the Host Is Ready](img/1800_0A_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the **contechst** database now has the user **contechj_david**,
    and with that, the host site is pretty much ready to receive the new Drupal website.
    Remember, these usernames, passwords, and database names are all important for
    the configuration of the site, so ensure that you don't forget any of them. If
    you get stuck, get help from your host's support team; that's what they are there
    for.
  prefs: []
  type: TYPE_NORMAL
- en: Get the Files Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you do anything, you will need to make a master copy of the site before
    deployment. Make sure you zip up and store the exact version of the `drupal` directory
    that you send across.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the moment the target URL for the Drupal index page will be something like
    [http://www.domain_name.com/drupal/](http://www.domain_name.com/drupal/). If you
    want it to be [http://www.domain_name.com/](http://www.domain_name.com/), then
    you will need to zip the files without the parent directory so that files are
    extracted directly to the `public_html` folder on the live site.
  prefs: []
  type: TYPE_NORMAL
- en: While we are on the subject, you may as well clean up the Drupal file system
    properly so that you don't end up saving erroneous files.
  prefs: []
  type: TYPE_NORMAL
- en: If you're like me, then you probably create backups of all the files you modify
    as you work. As far as Windows machines go, these are denoted by `.bak`, and placed
    in the same folder as the original file. Make a backup of your `drupal` folder
    before deleting anything, just to be safe. Then remove all backup files from the
    `drupal` folders.
  prefs: []
  type: TYPE_NORMAL
- en: While it might seem a bit excessive to do this at the moment, there are a couple
    of good reasons for it. First, having any sort of unused files lying around on
    your host file system is poor security practice. Second, *why clutter up your
    brand-new installation with files you don't need?* You will find that it is a
    constant battle to keep everything neat and tidy as you go anyway—so start as
    you mean to go on. Finally, if you have worked on a lot of files over the course
    of the development phase, you are adding a lot of unnecessary size to the upload.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For security reasons, you should probably move your `CHANGELOG.txt` file and
    `update.php` files to a different location—take them out of the website and hold
    them elsewhere, where hackers can't get hold of them. If you need to make use
    of the `update.php` script, then you can add it back to the site then.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open up the configuration file, `settings.php`, and remove the username
    and password. As you can probably deduce, the current database name and password
    will change to the ones you set when you created a new database on your host (if
    they're not the same), but there is no point in transferring any type of sensitive
    information like this—especially since people often prefer to use the same username
    and password for a variety of things.
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, you have to wait until the next section to add one more file
    and you can then make a master, zipped copy of your Drupal site—call it RTP (Release
    to Public) or something similar to distinguish it from other versions.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on a Linux box, you can **tar** and **gzip** your files if
    you wish—it will obviously help with the upload time. If you are developing on
    Windows, then you might want to make sure that your host can unzip `.zip` files
    since they will more than likely be using a Linux server—there shouldn't be a
    problem, however. In the unlikely event that there is, the best thing to do is
    download and install a gzip utility for Windows at[http://www.gzip.org/](http://www.gzip.org/)
    , which you can then use to zip up your files in the `.gz` format.
  prefs: []
  type: TYPE_NORMAL
- en: Get the Database Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As it stands, the database might hold plenty of silly posts which you used for
    testing, or it may hold a few important pages. There's no hard and fast rule here;
    just try not to transfer over a whole lot of stuff that you will end up deleting
    straight away anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Talking of backups, that is really the main point of this section. In order
    to deploy the database, you will need to make a backup of it. It is this backup
    file that is then transferred across to the host site and used to create a new
    database there. Since you already have all the information you need regarding
    backups, we need look at them no further here.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created your backup file of the entire Drupal database and added
    the resulting `.sql` file somewhere to the `drupal` folder (anywhere will do so
    long as you can find it again), you are now ready to begin transferring files
    across to your host. Note that you should remove the `.sql` file from your site
    as soon as you have made use of it—hold it somewhere out of the document root
    in case you need to use it again.
  prefs: []
  type: TYPE_NORMAL
- en: Transfer the Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now have a final, clean version of your online store, with a copy
    of the database, all zipped up and ready to go. Assuming there are images and
    a fair bit of data held within the site, you can be sure that the size of the
    upload is quite substantial. For this reason, you need a reasonably high speed
    connection—dial-up connections can be slightly erratic over long periods of time,
    so it may even be worth using a friend's computer or your office connection to
    send the files to the host site.
  prefs: []
  type: TYPE_NORMAL
- en: 'By far the easiest method would be to use a native upload feature from the
    host''s file manager over a quick connection. If this is available to you, simply
    use it to upload the archive file across to the host server. The demo site has
    this facility as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transfer the Files](img/1800_0A_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the ZIP file is being uploaded to the `public_html` folder, since
    this is the document root from which all web pages on this server are served.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, assuming your site has an FTP account enabled, you can either
    attempt to use FTP drag and drop, which is exactly the same as moving files around
    on your PC in Windows, or you can use an FTP utility.
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt, simply get in touch with your host service and ask them for information
    about how to transfer files. The administrative interface and file manager for
    the vast majority of sites are easy to use, and you will have no problems uploading
    files. Because of this, we won't waste time discussing FTP utilities in detail.
    Simply ensure that, ultimately, the ZIP file ends up in the document root of your
    host's server. Remember not to leave the zip folder lying around in the document
    root once it has been used.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, you should have a working database and be aware of what the username
    and password are for that database on your live site. You also have your archive
    file uploaded to the host site. At last, we finally move from working on the development
    machine to working on the live site. First thing's first though; we need to…
  prefs: []
  type: TYPE_NORMAL
- en: Set Up the Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need to extract the archive file to your `public_html` folder—most
    likely your hosts will provide you with this functionality. Take note of the second
    option in the list shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Set Up the Files](img/1800_0A_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With these files extracted, you should now have a replica of the files from
    the development machine on your host''s site. Check this by browsing through the
    live site. You should also find that if you attempt to browse one of the pages
    from a web browser, you no longer get a page‑not‑found error, but some other type
    of error—most likely a MySQL error because we don''t have a database connection
    yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Set Up the Files](img/1800_0A_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is great news because it means that we are able to browse the files that
    are now on the live site with no problem. The fact that there is a Drupal error
    message here confirms that we are in fact browsing Drupal pages—note that the
    error message shown in the previous screenshot mentions a username and server
    that are not correct. This is here to demonstrate more clearly that we are browsing
    Drupal but we have not yet entered the correct database or configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: Set Up the Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have access to phpMyAdmin on your host site, then open it up and follow
    along:'
  prefs: []
  type: TYPE_NORMAL
- en: In the left-hand panel on the phpMyAdmin home page, click on the name of the
    database you installed earlier. (Recall that for the demo site, this was entitled
    `contechj_contechst.)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new page that opens up, click on the **SQL** tab along the top of the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Browse** under the **Location of Textfile** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the file you would like to run against the database, and click **Go**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes according to plan, you will get a message informing you of the successful
    modifications to the database. You can then take a look through phpMyAdmin to
    ensure that the database has got whatever tables are needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible that there may be issues between your host''s system and the
    one you used to create the backup. For example, I initially received the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Set Up the Database](img/1800_0A_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because differing versions of MySQL sometimes use slightly differing
    syntax and it was necessary to remove all the `DEFAULT CHARSET=utf8` statements
    from the `.sql` file before everything ran smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have access to phpMyAdmin, then you will simply need to install
    the database using the `.sql` file in whatever manner is appropriate for your
    particular site. Recall that you are able to run the `.sql` file from the command
    line if you have access to that—if not, it's time to get in touch with the support
    team and find out how they recommend you run the contents of your `.sql` file.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the database in place, go back to your `settings.php` file in the `sites/default/`
    folder on your live site and alter it according to your system's setup—take care
    to ensure that you add precisely the names and passwords required by your *live
    database* to `$db_url` as well as the correct URL for the live site in `$base_url
    if that is required`.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have set the configuration settings appropriately save the file and
    then try browsing some pages. With a bit of luck you will see everything more
    or less as it was on the development machine.
  prefs: []
  type: TYPE_NORMAL
- en: Access Problem?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try to log in to the administrator''s account. I suspect that more than a few
    of you will come across a somewhat nasty surprise in that the browser will no
    doubt tell you that it cannot find the page you are looking for. If this is the
    case, it is more than likely because the `.htaccess` file was not successfully
    ported to the live site:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*You must ensure that Drupal''s* `.htaccess` *file is present on the live site!*
    `.htaccess` in the Drupal parent folder contains instructions and information
    vital to the healthy operation of the site. Ensure that you transfer it directly,
    or cut and paste its contents into the live site''s `.htaccess` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When viewing the contents of the `.htaccess` file on the live site (in Drupal''s
    parent folder, most likely in the document root depending on how you have things
    set up), you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If that is the case, then you should find that it is possible to browse the
    live site as normal. Take heart, we are nearly done! The only thing left on the
    list of things to do for the moment is…
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*What is the goal of testing in this instance?* Well, between now and the end
    of the chapter, we want to go from where we are to a fully functional, and most
    importantly, live and operational site. In order to get there, we need to ensure
    not only that everything works as expected from the customer''s point of view,
    but also that the site is properly implemented and that we can administer it with
    no problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you an example of the type of thing that might rear its ugly head,
    take a look at the following error message I received the first time I tried to
    do a bit of administration on the live site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/1800_0A_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Can you spot the problem straight away?* Drupal is complaining that it cannot
    write to a `files` directory that should be contained within `C:\apache2triad\temp`.
    It''s not surprising that this should be the case, because on the live site, there
    is *no* `C:\apache2triad\temp` directory. In fact, the only reason this fully
    qualified path is here is because I initially wanted to demonstrate the private
    download method despite the fact that public access to files is suitable here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that we need to re-enter the settings that were made with the development
    machine in mind to reflect the specifics of the live system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/1800_0A_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assuming you have the requisite permissions set so that Drupal can write and
    read in these folders, this particular problem is solved. (If you already have
    files on the site then you might need to move them to the directory you specify
    here.) Now, all that's left is to test out everything else in the administration
    tool to ensure it works correctly!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a checklist for you to use in order to ensure that, from a user''s
    point of view, the site works nicely:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Site Checklist
  prefs: []
  type: TYPE_NORMAL
- en: '| **Use at least two different browsers.** | One browser may implement some
    features that others do not—you might find that something you rely on heavily
    works on your browser of choice but not on others. | ![Testing](img/bracket.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Resize your browsers for a variety of pages.** | This helps to determine
    whether you have HTML elements that have not been set correctly. For example,
    some section may use the full page width, while others expand only to a certain
    limit. | ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Access pages from slow as well as fast connections.** | You might find
    that certain pages load very slowly over a dial-up connection. This might mean
    you need to rethink image and page sizes. | ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Check all links—Text and Image.** | Often, links break during deployment
    because of differing file paths and so forth. You should:'
  prefs: []
  type: TYPE_NORMAL
- en: Check all links and buttons on each page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check all links in blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that large as well as small images display appropriately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check that any ads link correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Check each page''s look.** | Important, because not all browsers can render
    certain style sheet settings. | ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Use each page.** | This is vital for ensuring that users can:'
  prefs: []
  type: TYPE_NORMAL
- en: Register accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage their accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add content depending on permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correctly access content depending on their roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of all the site's facilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that:'
  prefs: []
  type: TYPE_NORMAL
- en: The search engine works correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contact emails can be sent properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy and conditions of use are shown along with any important copyright information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: '| **Try to break the site (as a restricted user of course).** | Try to break
    the site (as a restricted user of course). Just as important as ensuring everything
    works properly (if not more important), is ensuring that nothing can be broken
    at will. | ![Testing](img/bracket.jpg) |'
  prefs: []
  type: TYPE_TB
- en: If you can perform everything listed in this checklist with several browsers,
    with no problems, then you can be reasonably certain that the site will hold up
    when it goes live. Of course, you will need to monitor it very closely for the
    first few months of its operation to make sure that nothing drastic goes wrong.
    Providing a webmaster's email address is a good way to let users complain if they
    run into problems. Open lines of communication between you and your users will
    help foster strong ties and improve the quality of your site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a task as important as building a full-featured community-driven website,
    it is necessary that you spend a lot of time considering your options, and developing
    and testing your site. Since it is not really feasible to do this sort of work
    on the live site, you need to employ a development machine to aid you. Because
    of this, the topic of deployment is an important one in the overall scheme of
    things because it is deployment that actually links your finished development
    to the live site.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter outlined a solid process for preparing for deployment. It was also
    necessary to set up a new database on the host site, but this proved to be relatively
    easy because any good host makes the task fairly simple by providing a tool like
    phpMyAdmin to work with the database.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you came to realize that the deployment process itself is not particularly
    complex for a Drupal site, since the only real configuration work that needs to
    be done is modifying the `settings.php` file to reflect your new system's configuration.
    Having the complexity of the site's deployment reduced to configuring a single
    file is a real advantage for Drupal users.
  prefs: []
  type: TYPE_NORMAL
- en: While the actual deployment of the site is fairly simple, it was shown that
    there were quite a few issues to deal with, and not the least of them is testing.
    It is critical that a full suite of tests is carried out on any site before it
    goes live—losing valuable users to silly errors is the last thing that any competitive
    site needs.
  prefs: []
  type: TYPE_NORMAL
