- en: Chapter 3. Discussion Forum
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。讨论论坛
- en: A discussion forum can be quite a useful resource to have on internal company
    projects or to allow clients to interact on projects, for example.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论论坛可以是一个非常有用的内部公司项目资源，或者允许客户在项目上进行互动，例如。
- en: Discussion forums are a great way to create a community around a particular
    subject or topic, acting as a type of wiki. They are a store of knowledge of something
    or a record of a discussion, containing a history of changes of ideas and concepts
    and recording the evolution of thinking around a topic or subject. They can also
    be used to talk about cats.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论论坛是围绕特定主题或话题创建社区的一种极好方式，它充当一种维基。它们是关于某物或讨论的记录，包含观点和概念的变化历史，并记录围绕主题或主题的思考演变。它们也可以用来谈论猫。
- en: 'To create this app, we''ll create three controllers: one to handle discussions,
    one to handle comments, and one to handle any admin functionality that we might
    need, such as moderating comments and discussions.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个应用程序，我们将创建三个控制器：一个用于处理讨论，一个用于处理评论，以及一个用于处理我们可能需要的任何管理功能，例如管理评论和讨论。
- en: We'll create a language file to store text, allowing you to have multiple language
    support, should that be required.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个语言文件来存储文本，以便在需要时提供多语言支持。
- en: We will make amendments to the `config.php` file to allow for encryption support,
    which is necessary for sessions and password support.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对`config.php`文件进行修改，以允许加密支持，这对于会话和密码支持是必要的。
- en: We'll create all the necessary view files and even a `.css` file to help Bootstrap
    with some of the views.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建所有必要的视图文件，甚至一个`.css`文件来帮助Bootstrap处理一些视图。
- en: This app, along with all the others in this book, relies on the basic setup
    we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*, although you can take large sections
    of the code and drop it into pretty much any app you might already have; please
    keep in mind that the setup done in the first chapter acts as the foundation for
    this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序，以及这本书中的所有其他应用程序，都依赖于我们在[第1章](ch01.html "第1章。简介和共享项目资源")中完成的基本设置，*简介和共享项目资源*，尽管你可以将大量代码段放入你可能已经拥有的任何应用程序中；请记住，第一章中完成设置是本章的基础。
- en: It is worth mentioning the limits of the application. This application contains
    the most basic discussion forum functionality. We create users on our way; however,
    there is no user management—to include that would be a large extension of the
    application code and slightly out of scope of a discussion forum.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是应用程序的限制。这个应用程序包含最基本的讨论论坛功能。我们在创建用户的过程中创建用户；然而，没有用户管理——包括这一点将是对应用程序代码的大量扩展，并且稍微超出了讨论论坛的范围。
- en: Users are created when someone creates a comment or discussion using an e-mail
    address that is not currently stored in the `users` table. A password is generated
    for them and a hash is created based on that password.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人使用不在`users`表中存储的电子邮件地址创建评论或讨论时，将创建用户。为他们生成一个密码，并基于该密码创建一个哈希值。
- en: As this application creates a password for them automatically, you might wish
    to tell them what that password is—perhaps by sending them an e-mail. However,
    you might not wish them to be able to log in at all. It's up to you—the functionality
    is there should you wish to expand upon it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用程序会自动为它们创建密码，你可能希望告诉他们密码是什么——也许通过发送电子邮件。然而，你可能不希望他们能够登录。这取决于你——如果你愿意，功能都在那里。
- en: 'In this chapter, we will cover:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Design and wireframes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: Creating the database
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating the models
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Creating the views
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建视图
- en: Creating the controllers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Putting it all together
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: So, without further ado, let's get on with it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无需多言，让我们开始吧。
- en: Design and wireframes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和线框图
- en: As always, before we start building, we should take a look at what we plan to
    build.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，在我们开始构建之前，我们应该看看我们计划构建的内容。
- en: Firstly, we need to give a brief description of our intent; we plan to build
    an app that will let a user view any pre-existing discussion pages and then allow
    that user to comment on a page if they wish. The user can also create new discussions
    and other users can comment on them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要简要描述我们的意图；我们计划开发一个应用程序，让用户可以查看任何现有的讨论页面，并且如果他们愿意，可以对该页面进行评论。用户还可以创建新的讨论，其他用户也可以对它们进行评论。
- en: 'Let''s take a look at a site map:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个网站地图：
- en: '![Design and wireframes](img/7093OS_03_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![设计和线框图](img/7093OS_03_01.jpg)'
- en: 'Now, let''s go over each item and get a brief idea of what it does:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们逐一查看每个项目，并简要了解它们的功能：
- en: '**Home**: Imagine this as the index—the routing start point. The user will
    visit the Home page and will be redirected to point **2** (the View All Discussions
    page).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首页**：想象一下这是一个索引——路由的起点。用户将访问首页，然后被重定向到第2点（查看所有讨论页面）。'
- en: '**View All Discussions**: This will display all discussions in a list format.
    We''ll have some filtering going on as well (the most recent first, most popular
    next, and so on). The user will be able to click on a discussion title and be
    redirected to the View Discussion page.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看所有讨论**：这将以列表形式显示所有讨论。我们还将进行一些筛选（例如，最新的首先，最受欢迎的其次，等等）。用户可以点击讨论标题，然后被重定向到查看讨论页面。'
- en: '**View Discussion/Add Comment**: This page displays the initial comment (written
    by the person who created the discussion) and all subsequent comments and contributions
    added by other users. A user is able to join in a discussion by filling in a form
    at the bottom of the View Discussion page.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看讨论/添加评论**：此页面显示初始评论（由创建讨论的人撰写）以及所有其他用户添加的后续评论和贡献。用户可以通过在查看讨论页面底部填写表格来加入讨论。'
- en: '**New Discussion**: A user can create a new discussion. This discussion will
    then appear on the View All Discussions page as a new discussion.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新建讨论**：用户可以创建新的讨论。然后，这个讨论将作为新的讨论出现在查看所有讨论页面。'
- en: 'We now begin to look at the admin-only functions (largely, discussion and comment
    moderation), which are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始查看仅管理员可用的功能（主要是讨论和评论审核），具体如下：
- en: '**Admin Login**: This is just a simple login script. It is separate from the
    one used in [Chapter 6](ch06.html "Chapter 6. Creating an Authentication System"),
    *Creating an Authentication System*.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员登录**：这是一个简单的登录脚本。它与[第6章](ch06.html "第6章。创建认证系统")中使用的登录脚本不同，*创建认证系统*。'
- en: '**Moderator Dashboard**: This displays all discussions and comments awaiting
    moderation and options in a list format, in order to allow or reject them.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版主仪表板**：此页面以列表形式显示所有待审阅的讨论和评论以及选项，以便允许或拒绝它们。'
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对网站的结构和形式有了相当好的了解，让我们看看每个页面的线框图。
- en: The View All Discussions page
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看所有讨论页面
- en: The following screenshot shows a wireframe of point **2** (the View All Discussions
    page) in the preceding diagram. The user is able to see all current discussions,
    the initial text written by the discussion creator (this acts as a brief introduction
    to the discussion subject), the total number of comments so far, the methods to
    sort the discussions into newest/oldest, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前一个图中第2点（查看所有讨论页面）的线框图。用户可以看到所有当前讨论，讨论创建者撰写的初始文本（这作为讨论主题的简要介绍），迄今为止的总评论数，以及将讨论排序为最新/最旧的排序方法等。
- en: '![The View All Discussions page](img/7093OS_03_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![查看所有讨论页面](img/7093OS_03_02.jpg)'
- en: The View Discussion/Add Comment page
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看讨论/添加评论页面
- en: The following screenshot shows a wireframe from point **3** (the View Discussion/Add
    Comment page). You can see that this page displays the initial discussion text
    and all the replies. At the bottom of the list of replies, there is a form that
    allows the user to join the discussion. There is also a New Discussion link at
    the top; this will take the user to point **4** (the New Discussion page).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了第3点（查看讨论/添加评论页面）的线框图。您可以看到，此页面显示初始讨论文本和所有回复。在回复列表底部有一个表格，允许用户加入讨论。顶部还有一个新建讨论链接；这将用户带到第4点（新建讨论页面）。
- en: Notice the flag link next to each comment title. If a user clicks this, then
    the comment is immediately flagged for review by the admin. For example, let's
    say someone wrote something about a famous Hollywood actor or, something loony
    such as spaceships that might be considered potentially libelous; this comment
    can be flagged for review. If it is considered safe, it can be set as such; however,
    if it is not considered safe, it can be removed to prevent the writer of the comment
    from being followed everywhere by people in vans, turning up at their work, talking
    to their neighbors, and so on—a purely hypothetical, non-real-world, and completely
    made up example of something that has never happened ever, not even once.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![The View Discussion/Add Comment page](img/7093OS_03_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: The New Discussion page
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows a wireframe from point **4** (the New Discussion
    page). You can see the form where the user can create a new discussion. The user
    is invited to enter the discussion title, their name, and the initial discussion
    text. Once the user has entered all relevant information into the form, they press
    the **Go** button, and the form is validated by the `create()` discussion controller
    function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![The New Discussion page](img/7093OS_03_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: The admin Dashboard page
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you the admin dashboard from point **6** (the
    Moderator Dashboard page). From this area, the admin can view any discussions
    and comments that have been flagged and moderate them, approving them or agreeing
    with the flag and deleting them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![The admin Dashboard page](img/7093OS_03_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: File overview
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create 15 files for this application; these files are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/discussions_model.php`: This file
    provides read/write access to the database table `discussions`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/comments_model.php`: This file provides
    read/write access to the database table `comments`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/admin_model.php`: This file provides
    read/write access to the database, enabling an admin to moderate discussions and
    comments.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/discussions/new.php`: This file provides
    an interface to display a form, allowing the user to create a new discussion;
    it also displays any error or success messages to the user.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/discussions/view.php`: This file provides
    us with an interface, allowing the user to view all active discussions. It also
    provides filtering interface options (for example, sorting).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/comments/view.php`: This file provides
    us with an interface to display an individual discussion with all the comments
    other users have written to the user. There is also a form at the bottom of this
    view file that allows the user to join the discussion by creating a comment. Any
    validation or success messages related to adding a comment will be displayed in
    this view file as well.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/comments/view.php`: 此文件为我们提供了一个界面，用于显示与用户相关的所有其他用户所写的单个讨论的所有评论。在此视图文件的底部还有一个表单，允许用户通过创建评论来加入讨论。与添加评论相关的任何验证或成功消息也将在此视图文件中显示。'
- en: '`/path/to/codeigniter/application/views/admin/dashboard.php`: This file displays
    a list of comments and/or discussions that require moderating.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/admin/dashboard.php`: 此文件显示需要审核的评论和/或讨论列表。'
- en: '`/path/to/codeigniter/application/views/admin/login.php`: This file provides
    a login form for admins.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/admin/login.php`: 此文件为管理员提供了一个登录表单。'
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This file provides
    a navigation bar at the top of the page.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/nav/top_nav.php`: 此文件在页面顶部提供了一个导航栏。'
- en: '`/path/to/codeigniter/application/controllers/discussions.php`: The `discussions`
    controller manages the creation of new discussions and displays a list of discussions
    to normal users.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/discussions.php`: `discussions`
    控制器管理新讨论的创建并向普通用户显示讨论列表。'
- en: '`/path/to/codeigniter/application/controllers/comments.php`: The `comments`
    controller manages the creation of new comments and links them to discussions.
    It also displays a list of comments to normal users.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/comments.php`: `comments` 控制器管理新评论的创建并将它们链接到讨论中。它还向普通用户显示评论列表。'
- en: '`/path/to/codeigniter/application/controllers/admin.php`: The `admin` controller
    handles the logging in of admins, the display of discussions and comments awaiting
    moderation, and the moderation of those discussions and comments.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/admin.php`: `admin` 控制器处理管理员的登录、显示待审核的讨论和评论以及审核这些讨论和评论。'
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    file provides language support for the application.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: 此文件为应用程序提供语言支持。'
- en: '`/path/to/codeigniter/application/views/common/login_header.php`: This file
    contains specific HTML markup to display the login form correctly.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/common/login_header.php`: 此文件包含特定的HTML标记，用于正确显示登录表单。'
- en: '`/path/to/codeigniter/bootstrap/css/signin.css`: This is a css script containing
    specific css code to display the login form correctly.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/bootstrap/css/signin.css`: 这是一个包含特定CSS代码的CSS脚本，用于正确显示登录表单。'
- en: 'The file structure of the preceding 15 files is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前述15个文件的文件结构如下：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note the last item in the list: `signin.css`. This sits in the `bootstrap/css/`
    folder, which is at the same level as CodeIgniter''s `application` folder. We
    installed Twitter Bootstrap in [Chapter 1](ch01.html "Chapter 1. Introduction
    and Shared Project Resources"), *Introduction and Shared Project Resources*. In
    this chapter, we will go through placing the `bootstrap` folder at this folder
    level and location.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列表中的最后一项：“`signin.css`”。它位于`bootstrap/css/`文件夹中，与CodeIgniter的`application`文件夹处于同一级别。我们在[第1章](ch01.html
    "第1章。简介和共享项目资源")，*简介和共享项目资源*中安装了Twitter Bootstrap。在本章中，我们将介绍将`bootstrap`文件夹放置在此文件夹级别和位置的方法。
- en: Creating the database
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from the first chapter
    in mind. However, it's not the end of the world if you haven't—the code can easily
    be applied to other situations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你应该已经按照[第1章](ch01.html "第1章。简介和共享项目资源")，*简介和共享项目资源*中描述的方式设置了CodeIgniter和Bootstrap。如果没有，那么你应该知道，本章中的代码是专门针对第一章的设置编写的。然而，如果你没有这样做，也没有关系——代码可以轻松地应用于其他情况。
- en: 'Firstly, we''ll build the database. Copy the following MySQL code to your database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将构建数据库。将以下MySQL代码复制到您的数据库中：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You don't have to call the database `discuss_forum` if you don't want to. Feel
    free to rename it to something else if you wish; just be sure to update `config/database.php`
    accordingly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that the first table that we create is `ci_sessions`; we need this
    in order to allow CodeIgniter to manage sessions, specifically, logged-in users.
    However, this is just the standard session table that is available from *CodeIgniter
    User Guide*, so I'll not include a description of the table as it's not technically
    specific to this application. However if you're interested, there's a description
    at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, let''s take a look at each item in each table and see what it means.
    The following table describes the `comments` table:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: comments |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| `cm_id` | This is the primary key. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| `ds_id` | This is the foreign key from the `discussions` table; it links
    the `comments` table to the `discussions` table. The link is `discussions.ds_id
    = comments.cm_id`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| `cm_body` | This is the body text of a comment. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| `cm_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the foreign Key from the `users` table. A user is created
    when someone enters an e-mail address (when creating a discussion or comment)
    that doesn''t already exist in the `users` table. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| `cm_is_active` | This indicates whether the comment is active (`1`) or inactive
    (`0`); inactive means that a comment is not displayed in a forum but is displayed
    to an admin in the admin dashboard for moderation. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: 'The following table describes the `discussions` table:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: discussions |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| `ds_id` | This is the primary key. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the foreign key from the `users` table. A user is created
    when someone enters an e-mail address (when creating a discussion or comment)
    that doesn''t already exist in the users table. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| `ds_title` | This is the title of a discussion forum. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| `ds_body` | This is the body element of a discussion forum; it is the initial
    text—usually a question—that the creator of a discussion writes to entice people
    to comment. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '| `ds_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '| `ds_is_active` | This indicates whether the discussion forum is active (`1`)
    or inactive (`0`); inactive means that a discussion is not displayed on the page
    but is displayed to an admin in the admin dashboard for moderation. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
- en: 'The following table describes the `users` table:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: users |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the primary key. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| `usr_name` | This is the username of an individual once they''re in the database.
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| `usr_hash` | This is the hashed value of their password. The password is
    generated in the `new_comment()` function of `comments_model` and the `create()`
    function of `discussions_model` and is passed to the `$this->encrypt->sha1()`CodeIgniter
    function to create a hash. The hash is stored in the database in `users.usr_hash`;
    however, the password is not stored (as you would expect). |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| `usr_email` | This is the e-mail of the person writing a comment or creating
    a discussion forum. The application will look in the `users` table to see whether
    the e-mail already exists. If it does, the primary key (`usr_id`) for that record
    is assigned to a comment or discussion forum. If the e-mail does not already exist,
    then a row is created in the `users` table and the primary key is then assigned
    to the comment or discussion. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| `usr_created_at` | This is the MySQL timestamp that is created when the recordis
    created. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| `usr_is_active` | This indicates whether the user is active (`1`) or inactive
    (`0`). Currently, there is no functionality to handle active or inactive users;
    this is something you can implement yourself should you wish. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| `usr_level` | This indicates the permission level of the user. Standard users
    are given the integer value 1, and admins (that is, those who can log in) are
    given the integer value 2\. There is no functionality to use this `usr_level`
    element; however, it is there should you wish to expand upon it. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: At this early stage, it's important to discuss the concept of users in this
    application. We're not really going to employ any detailed user management, and
    users will only be created when someone enters their e-mail address when they
    add a comment or create a discussion. We're creating users here because it'll
    be easy for you to extend this functionality in your own time to manage users,
    should you wish.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also need to make amendments to the `config/database.php` file—namely
    setting the database access details, username password, and so on. The steps are
    as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Edit the values in the preceding lines, ensuring you replace these values with
    values that are more specific to your setup and situation. Enter your username,
    password, and so on.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few things in this file that we'll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the changes
    described in this section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key. Both sessions as well as CodeIgniter''s
    encryption functionality require an encryption key to be set in the `$config`
    array, so perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following line:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change it to the following:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, don't actually change this value to literally a-random-string-of-alphanum-characters
    obviously, but change it to, er, a random string of alphanum characters—if that
    makes sense. Yeah, you know what I mean.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the following lines:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Change them to the following:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将它们更改为以下内容：
- en: '[PRE6]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adjusting the routes.php file
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整`routes.php`文件
- en: 'We want to redirect the user to the `discussions` controller rather than the
    default CodeIgniter `welcome` controller. To do this, we will need to amend the
    default controller setting in the `routes.php` file to reflect this, which can
    be done as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户重定向到`discussions`控制器而不是默认的CodeIgniter `welcome`控制器。为此，我们需要修改`routes.php`文件中的默认控制器设置以反映这一点，可以按照以下方式操作：
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config/routes.php`文件进行编辑，并找到以下行（文件底部附近）：
- en: '[PRE7]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this. We want the default controller to be `discussions` instead. So, find the
    following line:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更改默认控制器。最初在一个CodeIgniter应用程序中，默认控制器设置为`welcome`；然而，我们不需要这个。我们希望默认控制器是`discussions`。所以，找到以下行：
- en: '[PRE8]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change it to the following:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE9]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating the models
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'We''re going to create three models for this application; these are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个应用程序创建三个模型；具体如下：
- en: '`discussions_model.php`: This helps in managing interactions with the `discussions`
    table'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`discussions_model.php`：这有助于管理与`discussions`表的交互'
- en: '`comments_model.php`: This helps in managing interactions with the `comments`
    table'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comments_model.php`：这有助于管理与`comments`表的交互'
- en: '`admin_model.php`: This helps in managing interactions with the `users` table'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin_model.php`：这有助于管理与`users`表的交互'
- en: Creating the model file – models/discussions_model.php
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型文件 - models/discussions_model.php
- en: The `discussions_model.php` model file has three functions; these are `fetch_discussions()`,
    `fetch_discussion()`, and `flag()`. The `fetch_discussions()` function fetches
    many discussions, the `fetch_discussion()` function fetches a single discussion,
    and the `flag()` function sets a discussion as one that requires moderation by
    an admin.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`discussions_model.php`模型文件有三个函数；这些是`fetch_discussions()`、`fetch_discussion()`和`flag()`。`fetch_discussions()`函数获取多个讨论，`fetch_discussion()`函数获取单个讨论，而`flag()`函数将讨论设置为需要管理员审核的讨论。'
- en: 'The steps to create this model file are as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此模型文件的步骤如下：
- en: 'Create the `/path/to/codeigniter/application.models/discussion_model.php` file
    and add the following code to it:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/path/to/codeigniter/application.models/discussion_model.php`文件，并将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's first look at the `fetch_discussions()` function. The `fetch_discussions()`
    function will return the result of a database query to the `discussions` controller's
    `index()` function. It takes two arguments that are set to `null` by default.
    These are `$filter` and `$direction`, and they are used to add filtering and sorting
    to the query string.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看`fetch_discussions()`函数。`fetch_discussions()`函数将返回对`discussions`控制器`index()`函数的数据库查询结果。它接受两个默认设置为`null`的参数。这些是`$filter`和`$direction`，它们用于向查询字符串添加过滤和排序。
- en: 'The following query will only return active discussions—that is, any discussions
    whose `ds_is_active` value is not set to `0`. The `flag()` function of `discussions_model`
    (discussed later) sets a discussion to inactive:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将仅返回活跃的讨论——也就是说，任何`ds_is_active`值未设置为`0`的讨论。`discussions_model`（稍后讨论）的`flag()`函数将一个讨论设置为非活动状态：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the `filter` variable is initially null, then we will need to order the
    results to ascending. In the following code, we test whether `$filter` equals
    `null`; if not, `$dir = ''ASC''` sets the direction to ascending. If, however,
    `$filter` is not `null`, then we go into the PHP `if` statement and look at the
    value of `$direction`. We perform a PHP `switch case` procedure to quickly ascertain
    whether the value of `$direction` is `ASC` or `DESC`, writing the value of `$dir`
    to `ASC` or `DESC` accordingly:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`filter`变量最初为`null`，那么我们需要将结果排序为升序。在以下代码中，我们测试`$filter`是否等于`null`；如果不等于，则`$dir
    = 'ASC'`将方向设置为升序。如果`$filter`不是`null`，那么我们将进入PHP `if`语句并查看`$direction`的值。我们执行PHP
    `switch case`过程以快速确定`$direction`的值是`ASC`还是`DESC`，并相应地将`$dir`的值写入`ASC`或`DESC`：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, the query is executed and its return value is analyzed. If the query
    was successful, then `$result` is returned to the `index()` function of the `discussions`
    controller. The `index()` function of the `discussions` controller then stores
    this query result in the `$page_data[''query'']` array item and passes it to the
    `discussions/view.php` view file. This is shown here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s look at the `create($data)` function. The function takes an array
    (named `$data`) as its only argument. The `$data` array contains the following
    items:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '`usr_email`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_id`: This is populated by the model itself by looking in the database'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_name`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_title`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_body`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to associate this discussion forum with a user. Although we don't really
    manage users in this application, we still want to do this as it might be useful
    for us in the future. To associate a discussion with a user, we'll need to find
    an existing user ID (`users.usr_id`) or create a new user and assign that ID instead.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'This function begins by looking at the `users` table to see whether the e-mail
    address in `$data[''usr_email'']` already exists in the database. If it does,
    then `usr_id` is pulled out of the `users` table and written to `$data[''usr_id'']`;
    this will be stored until we update to the `discussions` table:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the e-mail address doesn''t exist in the `users` table, then a record is
    created. A password is generated using the `random_string()` CodeIgniter function.
    The password is stored in the `$password` variable and is passed to the `sha1`
    CodeIgniter function to generate a hash string:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `$hash` value along with `usr_email` and `usr_name`, submitted by the user,
    is added to the `$user_data` array. Also added to the `$user_data` array are some
    admin flags such as `usr_is_active` and `usr_level`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'The `usr_is_active` flag is set to `1` by default; this can be set to any other
    value you wish should you want to add user management functions. The `usr_level`
    flag is set to `1` by default; this can be set to any other value you wish should
    you want to add user management functions:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `$user_data` array is inserted to the database. Should you wish, you could
    send the user an e-mail containing their password; this will only be because you
    want to add user management functionality. The newly created user ID is returned
    by `$this->db->insert_id()` and stored in `$data[''usr_id'']`. This is shown here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the user ID is stored in the `$data` array, we create a new array, `$discussion_data`.
    The `$discussion_data` array contains all the data required for the creation of
    a discussion, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`ds_title`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_body`: This is populated from the form in `views/discussions/new.php`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_id`: This is populated by a database lookup'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_is_active`: This is set when we create the `$discussion_data` array'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the `$discussion_data` array is created, we write the record to the discussion
    table:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the insertion was successful, we return `TRUE`; if it wasn't successful,
    we return `FALSE`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'This model also contains the `flag()` function. The `flag()` function uses
    an `UPDATE` command to set the `ds_is_active` column to `0`. This means that the
    discussion will not be displayed to users, as the `fetch_discussions()` function
    of `discussions_model` will only return discussions that have `ds_is_active` set
    to `1`. This is shown here:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `flag()` function accepts one argument—that is, the primary key of the discussion
    passed by the `discussions` controller. When the user clicks on the **flag** link
    next to a discussion title in the `views/discussions/view.php` file, the `flag()`
    function of the `discussions` controller is called. The third `uri` segment in
    the **flag** link is the primary key of the discussion.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'We use CodeIgniter''s Active Record functionality to update the discussions
    record in the database, setting `ds_is_active` to `0`. Setting `ds_is_active`
    to `0` will immediately prevent the discussion from being viewed in `views/discussions/view.php`
    and make it appear in the admin section for moderation:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the model file – comments_model.php
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `comments_model.php` model file contains three functions; these are `fetch_comments()`,
    `new_comment()`, and `flag()`. The `fetch_comments()` function fetches all comments
    that belong to a discussion forum and are active. The `new_comment()` function
    adds a comment to the database associated with a discussion forum by means of
    a foreign key. Finally, the `flag()` function will set a comment as one that requires
    moderation.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/comments_model.php` file
    and add the following code to it:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'There are three functions in this model. These are as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch_comments()`: This fetches all active comments that are associated with
    the current discussion from the `comments` table .'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_comments()`: This creates a new record in the `comments` table. The comment
    is associated with `users.usr_id` and `discussions.ds_id`.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This sets a comment as being flagged for moderation by setting `comments.cm_is_active`
    to `0`.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `fetch_comments()` function accepts one argument—`$ds_id`—that is the primary
    key of the discussion in the database. We take this primary key and look in the
    database for comments belonging to that discussion, and users belonging to the
    comments, as shown here:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'These comments are then returned as an Active Record database result object.
    Or, the Boolean value `false` is returned if an error occurred, as shown here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `new_comment()` function takes one argument, the `$data` array. This is
    populated in the `comments` controller, as shown here:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'First off, we check whether the e-mail address used by the person who is commenting
    already exists in the database; we do this as we might want to add functionality
    to ban particular users later, delete posts from specific users, or even develop
    functionality to allow users to log in and view their previous posts:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we arrive here in the code, then the e-mail address is obviously already
    in the database, so we grab the users'' primary key and store it in `$data[''usr_id'']`;
    later, we will save it to the comment:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If we get here, then the user doesn''t exist, so we create them in the `users`
    table, returning the primary key using the `$this->d->insert_id()`CodeIgniter
    function:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we save the comment to the `comments` table using the CodeIgniter Active
    Record function `$this->db->insert()`. This is shown here:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating the model file – admin_model.php
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four functions in the `admin_model.php` model, and these are as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`dashboard_fetch_comments()`: This fetches comments from the databases that
    have been flagged for moderation.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dashboard_fetch_discussions()`: This fetches discussions from the databases
    that have been flagged for moderation.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_comments()`: This updates a comment based on the decision of the moderator,
    changing the value of `cm_is_active` to `1` if the comment is approved or deleting
    it if is unapproved.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_discussions()`: This updates a discussion based on the decision of
    the moderator, changing the value of `cm_is_active` to `1` if approved or deleting
    it if is unapproved. If a discussion is deleted, then all comments associated
    with that discussion will also be deleted.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/admin_model.php` file and
    add the following code to it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following function will fetch all comments for moderation from the database.
    Comments are for moderation if `comments.cm_is_active` is set to `0`. The database
    is queried and all comments for moderation are returned to the `admin` controller.
    This result will eventually be looped over in the `views/admin/dashboard.php`
    file:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following function will fetch all discussions for moderation from the database.
    Discussions are for moderation if `discussions.ds_is_active` is set to `0`. The
    database is queried and all discussions for moderation are returned to the `admin`
    controller. This result will eventually be looped over in the `views/admin/dashboard.php`
    file:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following function is called by the `admin` controller function when an
    admin is moderating comments. If a comment is deemed to be fine, then `comments.cm_is_active`
    is updated and set to `1`. However, if it is not fine, then the comment is deleted
    from the `comments` table:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following function is called by the `admin` controller function when an
    admin is moderating discussions. If a discussion is deemed to be fine, then `discussions.ds_is_active`
    is updated and set to `1`. However, if it is not fine, then the discussion is
    deleted from the `discussions` table. Any comments belonging to that discussion
    are also deleted from the `comments` table:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Creating views
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six view files in this application, and these are as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '`discussions/view.php`: This displays all active discussions'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussions/new.php`: This displays a form to the user, allowing them to create
    a discussion'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comments/view.php`: This displays all active comments within a discussion'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nav/top_nav.php`: This contains the top navigation links'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin/login.php`: This displays a login form for the user; don''t forget to
    add the `signin.css` script, which you can find later in this chapter'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common/login_header.php`: The `views/admin/login.php` view requires different
    resources from the rest of the application, which is supported by this header'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussions
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `discussions/view.php` view file displays a list of all active discussions
    as well as sorting options.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/views/discussions/view.php` file and add the
    following code to it:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Take a look at the first few lines. We open with a CodeIgniter `anchor()` statement.
    Let''s take a closer look at the code for the link:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s break this down into smaller sections:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`anchor(''discussions/index/age/sort/'' .`: This sets the link for the `discussions`
    controller, `index()` function, and sorting by age (the created date—`discussions.ds_created_at`),
    but what is the direction? Well…'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(($dir == ''ASC'') ? ''DESC'' : ''ASC''),`: The value of `$dir` comes from
    the `index()` function of the `discussions` controller. It is the current direction
    of the sort. We then use a PHP ternary operator to switch between the directions.
    It''s a bit like an if/else statement but is more compact. It works like this:
    *if a variable is equal (or not equal) to a variable, then execute A, otherwise
    execute B*. For example, as an if/else statement, the code would be as follows:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: So, the second part of the link will flip-flop between `ASC` and `DESC` depending
    on the value held in `$dir`. Now, let's look at the rest.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Newest '' . (($dir == ''ASC'') ? ''DESC'' : ''ASC''));?>`: This is the text
    that users will see as their link. You can see that we again make use of the ternary
    operator to display the text, flipping between `Newest ASC` and `Newest DESC`.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the view is fairly undramatic; all we do is loop over the database
    result from the discussions' `index()` function, displaying all active discussions
    as we go.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The comments view displays a list of all valid comments to the user for a selected
    discussion.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/comments/view.php` file
    and add the following code to it:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Note the following line in the form:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You will see that we use a line from the `lang` file that is not in the code
    example; this is because the `common_form_elements_go` line is to be found in
    [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: New discussion
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The New Discussion view displays a form to the user and any validation error
    messages that might need to be conveyed.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/discussions/new.php` file
    and add the following code to it:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Note the following line in the form:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You will see that we use a line from the `lang` file that is not in the code
    example; this is because the `common_form_elements_go` line is to be found in
    [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: We provide options to the user to create a new discussion. We display form elements
    for them to enter their username, e-mail, discussion title, and the text of their
    discussion.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: The form is submitted to the `create()` function of the `discussion` controller,
    where is it validated with any validation errors being displayed.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: The top_nav file
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every project in this book has its own navigation file, and this is no exception.
    The `top_nav` file is standard Bootstrap navigation code; however, there are a
    few Codeigniter `anchor()` functions that provide the URL links and text.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/common/top_nav.php` file
    and add the following code to it:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The login view
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The login view displays the form and any errors to the admin user when he/she
    wants to log in.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/admin/login.php` file and
    add the following code to it:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: There's not too much to get into here—everything is as you would expect. We
    display a form to the user, giving them text fields to enter their e-mail address
    and password, and errors are displayed above the form.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: The form is submitted to the `login()` function of the `admin` controller, which
    will handle the technical process of logging the user in. If the login is successful,
    the user is directed to the `dashboard()` function of the `admin` controller.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: The login_header file
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `admin/login.php` file requires different files and resources from the rest
    of the discussion forum application. For this reason, we're going to create a
    header file that's specific to the login page.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/common/login_header.php` file
    and add the following code to it:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Dashboard
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The dashboard view is able to display to the admin user (in this case, a moderator)
    all discussion forums and comments that are awaiting moderation. These are displayed
    in a table in a list format, each item having two options for the moderator: Allow
    and Disallow.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on Allow will set the active status of the discussion (`discussions.ds_is_active`)
    or comment (`comments.cm_is_active`) to `1`, making them appear once more for
    general users to see. However, Disallow will delete them from the database. If
    it is a discussion forum being disallowed, then all comments associated with that
    discussion will also be deleted.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/admin/dashboard.php` file
    and add the following code to it:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The signin.css file
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `signin.css` file is required to display the login form correctly; this
    is the same `signin.css` file as the one that is available from the Twitter Bootstrap
    resource.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/bootstrap/css/signin.css` file and add the
    following code to it:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Creating the controllers
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create three controllers for this application. These are as
    follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`discussions.php`: This fetches discussions from the `discussions` table in
    the database and allows the user to create a new discussion'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comments.php`: This fetches comments from the `comments` table in the database
    and allows the user to join a discussion by adding a comment to a discussion forum'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin.php`: This contains basic admin functions, login functionalities, and
    moderation options'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The discussions controller
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `discussions.php` controller is responsible for the display of all valid
    discussions, processing the creation of new discussions and flagging any discussion
    for moderation. The `discussions` controller contains three functions, and these
    are as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: This displays all valid discussions'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create()`: This creates a new discussion, handling any form validation'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This processes a discussion for moderation by calling the `flag()`
    function of `discussions_model.php`, setting `discussions.ds_is_active` to `0`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/discussions.php` file
    and add the following code to it:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Taking each function one by one, we'll begin with `index()`. The `index()` function
    is responsible for displaying all active discussions to the user.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: The code begins by checking to see whether there is a value in the third `uri`
    segment or not.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: If there is a value present, then this indicates that the user has pressed the
    sort's ascending or descending link; we'll discusses this in a moment but, for
    now, we'll assume that there is no value in the third segment.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: As there is no value present, we set `$filter` and `$direction` to `NULL`, but
    we set `$page_data['dir']` to `ASC` (short for ascending). This is set because,
    initially, the discussion forums are displayed in descending order of their created
    date; however, the sorting link needs to be written in the opposite direction
    from what is currently being displayed. Setting `$page_data['dir']` to `ASC` (ascending)
    will enable the URL in the sort link to be ready for us should we need to click
    it.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'We then ask the `fetch_discussions()` function of `discussions_model.php` to
    get all active discussions, passing to it two variables as arguments: `$filter`
    and `$direction`. These are set to `null` by default. The `fetch_discussions()`
    function will know not to apply these filters.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: The direction of the sort link will flip-flop between ascending and descending—always
    being the opposite of what is currently displayed. This flip-flopping is done
    in the view file (this might not be the best place for it if you're being strict,
    but I thought that this was a location that you would find obvious, so there you
    go).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out the code and explanation for the `discussions/view.php` view file
    earlier in this chapter for a full explanation of how the flip-flopping functions.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at the `create()` function; we initially set the validation
    rules and check to see whether the form has been submitted (or has been submitted
    with errors). Assuming that it has been submitted without errors, we save the
    post data in the `$data` array:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Once all the form elements are packaged into the `$data` array, we send it off
    to the `create()` function of `discussions_model` to write to the database.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: If the insert operation was successful, the model will return the primary key
    of the new discussion but will return `false` if there was an error.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'We test the return value of the insert operation. If the insert was successful,
    we redirect the user to the `index()` function of the `comments` controller, passing
    to it the `$ds_id` value that was returned by the model. The user can then see
    their discussion, which is ready to be commented on:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If there was an error, then we have no new primary key, so we can't redirect
    the user. This has been left blank in this project; you can implement your own
    policy for this behavior; perhaps you can send them an e-mail informing them about
    this or write an error to the screen.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: The comments controller
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `comments` controller manages all matters related to the flagging (for
    moderation) and creation of comments on discussions from users. The `comments`
    controller has two functions, and these are as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: This displays all comments for a specific discussion forum and handles
    the submission—that is, the validation of a user''s comment.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This allows a user to flag a comment for moderation by the admin.
    The `comments.cm_is_active` value in the database is set to `0` for the specific
    comment.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/comments.php` file
    and add the following code to it:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Let's start with the `index()` function. The `index()` function will begin by
    displaying all comments for a specific discussion. To do this, it needs to know
    what discussion to look at. So, let's go a step back. The `discussions` controller
    will display a list of active discussions.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The following is a section of code from `discussions/view.php` that we looked
    at in greater detail earlier. This code will loop through a set of database results,
    displaying each active discussion in table rows.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the line highlighted in bold:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This line displays the URL that enables the user to view the discussion and
    any comments associated with it by clicking on a discussion title link, which
    looks like the following:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We can pass `id-of-discussion` as the third parameter of the link to the `index()`
    function of the `comments` controller. This is where we pick up the story. The
    `index()` function of the `comments` controller checks whether there is a third
    `uri` segment (if not, then it is possible that the form to create a comment has
    been submitted and would not exist in the `uri` segment).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'It will grab the ID of the discussion and store it as the `$ds_id` variable:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We then define some validation rules for CodeIgniter to apply to the Add A Comment
    form at the bottom of the `comments/view.php` file.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: The `comments/view.php` file contains not only a `foreach()` loop to display
    the current comments on the selected discussion, but also a form with a name and
    e-mail text field and a body text area. This is where the user can enter their
    name, e-mail, and comment text and then submit the comment.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: There is also a hidden field, named `ds_id`, that contains the primary key of
    the selected discussion. We need it in the form as a hidden element as, when the
    form is submitted, the third `uri` segment will disappear. Having the discussion
    ID as a hidden form element will allow `index()` to maintain a relationship between
    the comment and the discussion when the new comment form is submitted.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that there were no errors with the form and it is submitted without
    the need to report anything requiring the user's attention, the `index()` function
    attempts to write the comment to the `comments` table in the database.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, however, we need to package all our data into an array that
    will be passed to `Comments_model`. Take a look at the following code:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here, you can see that we''ve got all the post elements including `ds_id` (highlighted
    in bold). This is now ready to be sent to the `new_comment()`model function for
    insertion into the database:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `new_comment()`model function will return `true` on a successful insertion
    and `false` otherwise. If it was successful, then we redirect the user to the
    `comments` controller's `index()` function and pass `$ds_id` as the third parameter
    where the `index()` function will begin, displaying all active comments associated
    with the selected discussion.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the `flag()` function. The `flag()` function will enable
    the user to indicate that a comment requires moderation by an admin.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Stepping back to the `discussions` controller, the `discussions` controller
    will display a list of active discussions.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a section of code from `comments/view.php` that we looked
    at in greater detail earlier. This code will loop through a set of database results,
    displaying each active comment in a table of rows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Take a look at the line highlighted in bold:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This line contains a CodeIgniter `anchor()` statement with the `comments/flag/id-of-comment`
    URL. It is this line of code that creates the **flag** link next to each comment.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the third and fourth parameters. The third parameter is the discussion
    ID (`discussions.ds_id`) and the fourth is the comment ID (`comments.cm_id`);
    both are used in the `flag()` function of `comments_model`. The code for this
    looks as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: If the insert operation returns `true`, then we redirect the user to the `comments`
    controller's `index()` function along with the discussion forum ID.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: The admin controller
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `admin` controller contains all the functions required to run the moderation
    of comments and discussions and to log users in. It contains the following functions:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: Every controller needs an index function and this is it. The `index()`
    function will check whether a user is logged in and redirect them elsewhere if
    not.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login()`: The `login()` function handles the process of logging a user into
    the system.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dashboard()`: This is responsible for displaying all comments and discussions
    that require moderation.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_item()`: This is responsible for applying the decision of the moderator,
    whether to approve or delete a comment or discussion.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/admin.php` file and
    add the following code to it:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Let's tackle this by first looking at the `index()` function. As the `admin`
    controller is only to be used by those logged in, the `index()` function will
    check to see whether an item called `logged_in` exists in the session. If `logged_in`
    is equal to `FALSE`, then it means that the user is not logged in, so they are
    redirected to the `login()` function.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: This is very simple and we won't spend more time on it; however, a more complicated
    function is `login()`. The `login()` function is responsible for—as the name suggests—managing
    the login process for the admin moderator.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: The first thing `login()` does is define form validation rules for the `usr_email`
    and `usr_pwd` form elements. These will govern how the data submitted by the user
    in the `admin/login.php` view file is validated.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'We immediately test to see whether the form has been submitted:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: If the form hasn't been submitted, we'll load the view files to display the
    login form and wait for a response from the user.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if it has been submitted, then the form is validated against the validation
    criteria; if it passes validation, we try to work out whether the user exists
    in the database currently:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If exactly one matching e-mail address has been found, then we will try to
    work out whether the users'' password is correct. We load the CodeIgniter library
    using `$this->load->library(''encrypt'')` and generate a hash from the password
    that the user supplied in the login form:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We then compare that hash with the hash stored in the database belonging to
    the user:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If it does not match, then we load the login form and display an error message.
    However, if it does match, then the user must have typed the correct password;
    so we log them in by creating a CodeIgniter session for them:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The user is then redirected to the dashboard. The dashboard will display any
    comments and discussions that are required for moderation.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Creating the language file
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Putting it all together
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've created each file and resource necessary for the app, let's run
    through a few scenarios so that we can get a good idea of how it all works together.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: A user creates a discussion forum
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where David visits the discussion forum in his browser.
    The following is the sequence of steps:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: David clicks on the **New Discussion** link in the top navigation bar.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `create()` function in the `discussions` controller.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` function displays the `discussions/new.php` view file, which
    displays a form to users, enabling them to enter their name, e-mail, discussion
    title, and discussion body text.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: David presses the **Go** button to submit the form. The form is submitted to
    the `discussion` controller's `create()` function.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `discussion` controller's `create()` function validates the form. Assuming
    there were no errors, the `create()` function packages the post data into an array
    and sends it to the `create()` function of `discussions_model`.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` model function looks in the `users` database table to see whether
    the e-mail address already exists. If it does, the primary key of the user is
    returned and added to the Active Record insertion for the discussion. However,
    if the e-mail address doesn't exist, then the model function creates it. Instead,
    the primary key of this insertion is returned.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password is created and a hash is generated from it. However, the password
    is not stored and David is not told what it is; this is perhaps a functionality
    you might not wish for, but you can easily add code to send David his password
    in an e-mail, should you wish.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A user comments on a discussion forum
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Ed visits the discussion forum in his browser.
    The following is the sequence of events:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter loads the default controller—in this case, the `discussion` controller.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `discussion` controller uses the `fetch_discussions()` function of `discussions_model`
    to get the latest discussions from the `discussions` database table and passes
    them to the `discussions/view.php` view file where they are displayed.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed likes the sound of one of the discussion forums and clicks on the name of
    the forum.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `comments` controller's `index()` function. The `index()`
    function takes the third `uri` segment (the discussion forum ID—`discussions.ds_id`)
    and passes it to the `fetch_comments()` function of `comments_model`.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The comments are displayed in the `comments/view.php` view file.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed reads the comment history and decides that the world would benefit from his
    opinion.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed scrolls to the bottom of the page where the form to add a comment is present.
    Ed enters his name, e-mail, and comment and clicks on **Go**.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is submitted to the `create()` function of `comments`. The `create()`
    function will validate the form. Assuming there were no errors, the `create()`
    function packages the post data into an array and sends it to the `create()` function
    of `comments_model`.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` model function looks in the `users` database table to see whether
    the e-mail address already exists. If it does, the primary key of the user is
    returned and added to the Active Record insertion for the comment. However, if
    the e-mail address doesn't exist, then the model function creates it. Instead,
    the primary key of this insertion is returned.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password is created and a hash is generated from it. However, the password
    is not stored and Ed is not told what it is; this is perhaps a functionality you
    might not wish for, but you can easily add code to send Ed his password in an
    e-mail, should you wish.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed is redirected to the discussion forum where he can see his comment.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A user dislikes a comment and flags it for moderation
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Nigel is looking through a discussion and
    sees a comment that he feels is necessary for moderation. The sequence of steps
    is as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Outraged, he presses the **flag** link next to the comment.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `flag()` function of `comments`. The URL that is used
    to access this is `comments/flag/id-of-discussion/id-of-comment`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter passes `id-of-comment` to the `flag()` function of `comments_model`,
    which will set `comments.cm_is_active` to `0`. This removes the comment from the
    discussion and places it in the moderation dashboard.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the update of the comment was successful, CodeIgniter will redirect Nigel
    to the discussion he was looking at.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A moderator reviews comments awaiting moderation
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Nick logs in to his admin account. The sequence
    of steps is as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: The `admin` controller loads the `dashboard()` function.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `dashboard()` function loads a list of comments and discussions waiting
    for moderation.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nick sees the full text of comments and discussions along with two options:
    **Allow** and **Disallow**.'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick sees that there are two comments that require moderation.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick reads the first comment and decides that it is fine; he clicks on the **Allow**
    link. The structure of the link is `admin/update_item/cm/allow/id-or-comment`.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `update_item()` function of `admin`.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `update_item()` function gets the type of thing that needs to be updated
    (comment: `cm` and discussion: `ds`); in this case, Nick is updating a comment
    to the first segment in `uri`, which is `cm`. The second `uri` segment is `allow`
    and the third `uri` segment is the ID of the comment (`comments.cm_id`).'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `update_comments()` function of `admin_model` is called, setting `comments.cm_is_active`
    to `1`. This allows the comment to be displayed once more.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick also notices the one remaining comment waiting for moderation. He reads
    the comment and decides that it's probably not the best comment and he wishes
    to remove it.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He clicks on the **Disallow** link. The structure of the link is `admin/update_item/cm/disallow/id-or-comment`.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `update_item()` function of `admin`.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `update_item()` function gets the type of thing that needs to be updated
    (comment: `cm` and discussion: `ds`); in this case, Nick is updating a comment
    to the first segment in `uri`, which is `cm`. The second `uri` segment is `disallow`
    and the third `uri` segment is the ID of the comment (`comments.cm_id`).'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `update_comments()` function of `admin_model` is called. As `$is_active`
    is set to `0`, we will not allow the comment to be displayed but will delete it.
    A PHP if/else statement works out the value of `$is_active`, the else section
    is executed, and a MySQL `DELETE` command is called, deleting the comment from
    the database permanently.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have done a lot in this chapter; we've created many files and there's a lot
    to take in. However, this project gives you the base system for a discussion forum.
    You might wish to add user management (particularly when it comes to sending the
    user their password), assuming you want people to log in? What would they do once
    they are logged in? These are for you to define, but you now have the base system;
    this allows you to build more.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
