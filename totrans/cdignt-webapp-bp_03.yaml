- en: Chapter 3. Discussion Forum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A discussion forum can be quite a useful resource to have on internal company
    projects or to allow clients to interact on projects, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion forums are a great way to create a community around a particular
    subject or topic, acting as a type of wiki. They are a store of knowledge of something
    or a record of a discussion, containing a history of changes of ideas and concepts
    and recording the evolution of thinking around a topic or subject. They can also
    be used to talk about cats.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this app, we''ll create three controllers: one to handle discussions,
    one to handle comments, and one to handle any admin functionality that we might
    need, such as moderating comments and discussions.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a language file to store text, allowing you to have multiple language
    support, should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We will make amendments to the `config.php` file to allow for encryption support,
    which is necessary for sessions and password support.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and even a `.css` file to help Bootstrap
    with some of the views.
  prefs: []
  type: TYPE_NORMAL
- en: This app, along with all the others in this book, relies on the basic setup
    we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*, although you can take large sections
    of the code and drop it into pretty much any app you might already have; please
    keep in mind that the setup done in the first chapter acts as the foundation for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning the limits of the application. This application contains
    the most basic discussion forum functionality. We create users on our way; however,
    there is no user management—to include that would be a large extension of the
    application code and slightly out of scope of a discussion forum.
  prefs: []
  type: TYPE_NORMAL
- en: Users are created when someone creates a comment or discussion using an e-mail
    address that is not currently stored in the `users` table. A password is generated
    for them and a hash is created based on that password.
  prefs: []
  type: TYPE_NORMAL
- en: As this application creates a password for them automatically, you might wish
    to tell them what that password is—perhaps by sending them an e-mail. However,
    you might not wish them to be able to log in at all. It's up to you—the functionality
    is there should you wish to expand upon it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should take a look at what we plan to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to give a brief description of our intent; we plan to build
    an app that will let a user view any pre-existing discussion pages and then allow
    that user to comment on a page if they wish. The user can also create new discussions
    and other users can comment on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go over each item and get a brief idea of what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home**: Imagine this as the index—the routing start point. The user will
    visit the Home page and will be redirected to point **2** (the View All Discussions
    page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View All Discussions**: This will display all discussions in a list format.
    We''ll have some filtering going on as well (the most recent first, most popular
    next, and so on). The user will be able to click on a discussion title and be
    redirected to the View Discussion page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Discussion/Add Comment**: This page displays the initial comment (written
    by the person who created the discussion) and all subsequent comments and contributions
    added by other users. A user is able to join in a discussion by filling in a form
    at the bottom of the View Discussion page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New Discussion**: A user can create a new discussion. This discussion will
    then appear on the View All Discussions page as a new discussion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We now begin to look at the admin-only functions (largely, discussion and comment
    moderation), which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Admin Login**: This is just a simple login script. It is separate from the
    one used in [Chapter 6](ch06.html "Chapter 6. Creating an Authentication System"),
    *Creating an Authentication System*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Moderator Dashboard**: This displays all discussions and comments awaiting
    moderation and options in a list format, in order to allow or reject them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: The View All Discussions page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows a wireframe of point **2** (the View All Discussions
    page) in the preceding diagram. The user is able to see all current discussions,
    the initial text written by the discussion creator (this acts as a brief introduction
    to the discussion subject), the total number of comments so far, the methods to
    sort the discussions into newest/oldest, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![The View All Discussions page](img/7093OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The View Discussion/Add Comment page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows a wireframe from point **3** (the View Discussion/Add
    Comment page). You can see that this page displays the initial discussion text
    and all the replies. At the bottom of the list of replies, there is a form that
    allows the user to join the discussion. There is also a New Discussion link at
    the top; this will take the user to point **4** (the New Discussion page).
  prefs: []
  type: TYPE_NORMAL
- en: Notice the flag link next to each comment title. If a user clicks this, then
    the comment is immediately flagged for review by the admin. For example, let's
    say someone wrote something about a famous Hollywood actor or, something loony
    such as spaceships that might be considered potentially libelous; this comment
    can be flagged for review. If it is considered safe, it can be set as such; however,
    if it is not considered safe, it can be removed to prevent the writer of the comment
    from being followed everywhere by people in vans, turning up at their work, talking
    to their neighbors, and so on—a purely hypothetical, non-real-world, and completely
    made up example of something that has never happened ever, not even once.
  prefs: []
  type: TYPE_NORMAL
- en: '![The View Discussion/Add Comment page](img/7093OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The New Discussion page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows a wireframe from point **4** (the New Discussion
    page). You can see the form where the user can create a new discussion. The user
    is invited to enter the discussion title, their name, and the initial discussion
    text. Once the user has entered all relevant information into the form, they press
    the **Go** button, and the form is validated by the `create()` discussion controller
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '![The New Discussion page](img/7093OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The admin Dashboard page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you the admin dashboard from point **6** (the
    Moderator Dashboard page). From this area, the admin can view any discussions
    and comments that have been flagged and moderate them, approving them or agreeing
    with the flag and deleting them.
  prefs: []
  type: TYPE_NORMAL
- en: '![The admin Dashboard page](img/7093OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create 15 files for this application; these files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/discussions_model.php`: This file
    provides read/write access to the database table `discussions`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/comments_model.php`: This file provides
    read/write access to the database table `comments`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/admin_model.php`: This file provides
    read/write access to the database, enabling an admin to moderate discussions and
    comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/discussions/new.php`: This file provides
    an interface to display a form, allowing the user to create a new discussion;
    it also displays any error or success messages to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/discussions/view.php`: This file provides
    us with an interface, allowing the user to view all active discussions. It also
    provides filtering interface options (for example, sorting).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/comments/view.php`: This file provides
    us with an interface to display an individual discussion with all the comments
    other users have written to the user. There is also a form at the bottom of this
    view file that allows the user to join the discussion by creating a comment. Any
    validation or success messages related to adding a comment will be displayed in
    this view file as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/admin/dashboard.php`: This file displays
    a list of comments and/or discussions that require moderating.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/admin/login.php`: This file provides
    a login form for admins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This file provides
    a navigation bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/discussions.php`: The `discussions`
    controller manages the creation of new discussions and displays a list of discussions
    to normal users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/comments.php`: The `comments`
    controller manages the creation of new comments and links them to discussions.
    It also displays a list of comments to normal users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/admin.php`: The `admin` controller
    handles the logging in of admins, the display of discussions and comments awaiting
    moderation, and the moderation of those discussions and comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    file provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/common/login_header.php`: This file
    contains specific HTML markup to display the login form correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/bootstrap/css/signin.css`: This is a css script containing
    specific css code to display the login form correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding 15 files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the last item in the list: `signin.css`. This sits in the `bootstrap/css/`
    folder, which is at the same level as CodeIgniter''s `application` folder. We
    installed Twitter Bootstrap in [Chapter 1](ch01.html "Chapter 1. Introduction
    and Shared Project Resources"), *Introduction and Shared Project Resources*. In
    this chapter, we will go through placing the `bootstrap` folder at this folder
    level and location.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from the first chapter
    in mind. However, it's not the end of the world if you haven't—the code can easily
    be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we''ll build the database. Copy the following MySQL code to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You don't have to call the database `discuss_forum` if you don't want to. Feel
    free to rename it to something else if you wish; just be sure to update `config/database.php`
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that the first table that we create is `ci_sessions`; we need this
    in order to allow CodeIgniter to manage sessions, specifically, logged-in users.
    However, this is just the standard session table that is available from *CodeIgniter
    User Guide*, so I'll not include a description of the table as it's not technically
    specific to this application. However if you're interested, there's a description
    at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, let''s take a look at each item in each table and see what it means.
    The following table describes the `comments` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: comments |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cm_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_id` | This is the foreign key from the `discussions` table; it links
    the `comments` table to the `discussions` table. The link is `discussions.ds_id
    = comments.cm_id`. |'
  prefs: []
  type: TYPE_TB
- en: '| `cm_body` | This is the body text of a comment. |'
  prefs: []
  type: TYPE_TB
- en: '| `cm_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the foreign Key from the `users` table. A user is created
    when someone enters an e-mail address (when creating a discussion or comment)
    that doesn''t already exist in the `users` table. |'
  prefs: []
  type: TYPE_TB
- en: '| `cm_is_active` | This indicates whether the comment is active (`1`) or inactive
    (`0`); inactive means that a comment is not displayed in a forum but is displayed
    to an admin in the admin dashboard for moderation. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table describes the `discussions` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: discussions |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the foreign key from the `users` table. A user is created
    when someone enters an e-mail address (when creating a discussion or comment)
    that doesn''t already exist in the users table. |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_title` | This is the title of a discussion forum. |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_body` | This is the body element of a discussion forum; it is the initial
    text—usually a question—that the creator of a discussion writes to entice people
    to comment. |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_created_at` | This is the MySQL timestamp that is created when the record
    is created. |'
  prefs: []
  type: TYPE_TB
- en: '| `ds_is_active` | This indicates whether the discussion forum is active (`1`)
    or inactive (`0`); inactive means that a discussion is not displayed on the page
    but is displayed to an admin in the admin dashboard for moderation. |'
  prefs: []
  type: TYPE_TB
- en: 'The following table describes the `users` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: users |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_name` | This is the username of an individual once they''re in the database.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_hash` | This is the hashed value of their password. The password is
    generated in the `new_comment()` function of `comments_model` and the `create()`
    function of `discussions_model` and is passed to the `$this->encrypt->sha1()`CodeIgniter
    function to create a hash. The hash is stored in the database in `users.usr_hash`;
    however, the password is not stored (as you would expect). |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_email` | This is the e-mail of the person writing a comment or creating
    a discussion forum. The application will look in the `users` table to see whether
    the e-mail already exists. If it does, the primary key (`usr_id`) for that record
    is assigned to a comment or discussion forum. If the e-mail does not already exist,
    then a row is created in the `users` table and the primary key is then assigned
    to the comment or discussion. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_created_at` | This is the MySQL timestamp that is created when the recordis
    created. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_is_active` | This indicates whether the user is active (`1`) or inactive
    (`0`). Currently, there is no functionality to handle active or inactive users;
    this is something you can implement yourself should you wish. |'
  prefs: []
  type: TYPE_TB
- en: '| `usr_level` | This indicates the permission level of the user. Standard users
    are given the integer value 1, and admins (that is, those who can log in) are
    given the integer value 2\. There is no functionality to use this `usr_level`
    element; however, it is there should you wish to expand upon it. |'
  prefs: []
  type: TYPE_TB
- en: At this early stage, it's important to discuss the concept of users in this
    application. We're not really going to employ any detailed user management, and
    users will only be created when someone enters their e-mail address when they
    add a comment or create a discussion. We're creating users here because it'll
    be easy for you to extend this functionality in your own time to manage users,
    should you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also need to make amendments to the `config/database.php` file—namely
    setting the database access details, username password, and so on. The steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the values in the preceding lines, ensuring you replace these values with
    values that are more specific to your setup and situation. Enter your username,
    password, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few things in this file that we'll need to configure to support
    sessions and encryption. So, open the `config/config.php` file and make the changes
    described in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key. Both sessions as well as CodeIgniter''s
    encryption functionality require an encryption key to be set in the `$config`
    array, so perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, don't actually change this value to literally a-random-string-of-alphanum-characters
    obviously, but change it to, er, a random string of alphanum characters—if that
    makes sense. Yeah, you know what I mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change them to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to redirect the user to the `discussions` controller rather than the
    default CodeIgniter `welcome` controller. To do this, we will need to amend the
    default controller setting in the `routes.php` file to reflect this, which can
    be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    this. We want the default controller to be `discussions` instead. So, find the
    following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create three models for this application; these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`discussions_model.php`: This helps in managing interactions with the `discussions`
    table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comments_model.php`: This helps in managing interactions with the `comments`
    table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin_model.php`: This helps in managing interactions with the `users` table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the model file – models/discussions_model.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `discussions_model.php` model file has three functions; these are `fetch_discussions()`,
    `fetch_discussion()`, and `flag()`. The `fetch_discussions()` function fetches
    many discussions, the `fetch_discussion()` function fetches a single discussion,
    and the `flag()` function sets a discussion as one that requires moderation by
    an admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to create this model file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application.models/discussion_model.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's first look at the `fetch_discussions()` function. The `fetch_discussions()`
    function will return the result of a database query to the `discussions` controller's
    `index()` function. It takes two arguments that are set to `null` by default.
    These are `$filter` and `$direction`, and they are used to add filtering and sorting
    to the query string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following query will only return active discussions—that is, any discussions
    whose `ds_is_active` value is not set to `0`. The `flag()` function of `discussions_model`
    (discussed later) sets a discussion to inactive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `filter` variable is initially null, then we will need to order the
    results to ascending. In the following code, we test whether `$filter` equals
    `null`; if not, `$dir = ''ASC''` sets the direction to ascending. If, however,
    `$filter` is not `null`, then we go into the PHP `if` statement and look at the
    value of `$direction`. We perform a PHP `switch case` procedure to quickly ascertain
    whether the value of `$direction` is `ASC` or `DESC`, writing the value of `$dir`
    to `ASC` or `DESC` accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the query is executed and its return value is analyzed. If the query
    was successful, then `$result` is returned to the `index()` function of the `discussions`
    controller. The `index()` function of the `discussions` controller then stores
    this query result in the `$page_data[''query'']` array item and passes it to the
    `discussions/view.php` view file. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the `create($data)` function. The function takes an array
    (named `$data`) as its only argument. The `$data` array contains the following
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '`usr_email`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_id`: This is populated by the model itself by looking in the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_name`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_title`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_body`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We want to associate this discussion forum with a user. Although we don't really
    manage users in this application, we still want to do this as it might be useful
    for us in the future. To associate a discussion with a user, we'll need to find
    an existing user ID (`users.usr_id`) or create a new user and assign that ID instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function begins by looking at the `users` table to see whether the e-mail
    address in `$data[''usr_email'']` already exists in the database. If it does,
    then `usr_id` is pulled out of the `users` table and written to `$data[''usr_id'']`;
    this will be stored until we update to the `discussions` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If the e-mail address doesn''t exist in the `users` table, then a record is
    created. A password is generated using the `random_string()` CodeIgniter function.
    The password is stored in the `$password` variable and is passed to the `sha1`
    CodeIgniter function to generate a hash string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `$hash` value along with `usr_email` and `usr_name`, submitted by the user,
    is added to the `$user_data` array. Also added to the `$user_data` array are some
    admin flags such as `usr_is_active` and `usr_level`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `usr_is_active` flag is set to `1` by default; this can be set to any other
    value you wish should you want to add user management functions. The `usr_level`
    flag is set to `1` by default; this can be set to any other value you wish should
    you want to add user management functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$user_data` array is inserted to the database. Should you wish, you could
    send the user an e-mail containing their password; this will only be because you
    want to add user management functionality. The newly created user ID is returned
    by `$this->db->insert_id()` and stored in `$data[''usr_id'']`. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user ID is stored in the `$data` array, we create a new array, `$discussion_data`.
    The `$discussion_data` array contains all the data required for the creation of
    a discussion, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ds_title`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_body`: This is populated from the form in `views/discussions/new.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usr_id`: This is populated by a database lookup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ds_is_active`: This is set when we create the `$discussion_data` array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the `$discussion_data` array is created, we write the record to the discussion
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the insertion was successful, we return `TRUE`; if it wasn't successful,
    we return `FALSE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This model also contains the `flag()` function. The `flag()` function uses
    an `UPDATE` command to set the `ds_is_active` column to `0`. This means that the
    discussion will not be displayed to users, as the `fetch_discussions()` function
    of `discussions_model` will only return discussions that have `ds_is_active` set
    to `1`. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `flag()` function accepts one argument—that is, the primary key of the discussion
    passed by the `discussions` controller. When the user clicks on the **flag** link
    next to a discussion title in the `views/discussions/view.php` file, the `flag()`
    function of the `discussions` controller is called. The third `uri` segment in
    the **flag** link is the primary key of the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use CodeIgniter''s Active Record functionality to update the discussions
    record in the database, setting `ds_is_active` to `0`. Setting `ds_is_active`
    to `0` will immediately prevent the discussion from being viewed in `views/discussions/view.php`
    and make it appear in the admin section for moderation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the model file – comments_model.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `comments_model.php` model file contains three functions; these are `fetch_comments()`,
    `new_comment()`, and `flag()`. The `fetch_comments()` function fetches all comments
    that belong to a discussion forum and are active. The `new_comment()` function
    adds a comment to the database associated with a discussion forum by means of
    a foreign key. Finally, the `flag()` function will set a comment as one that requires
    moderation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/comments_model.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three functions in this model. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fetch_comments()`: This fetches all active comments that are associated with
    the current discussion from the `comments` table .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_comments()`: This creates a new record in the `comments` table. The comment
    is associated with `users.usr_id` and `discussions.ds_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This sets a comment as being flagged for moderation by setting `comments.cm_is_active`
    to `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `fetch_comments()` function accepts one argument—`$ds_id`—that is the primary
    key of the discussion in the database. We take this primary key and look in the
    database for comments belonging to that discussion, and users belonging to the
    comments, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'These comments are then returned as an Active Record database result object.
    Or, the Boolean value `false` is returned if an error occurred, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `new_comment()` function takes one argument, the `$data` array. This is
    populated in the `comments` controller, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'First off, we check whether the e-mail address used by the person who is commenting
    already exists in the database; we do this as we might want to add functionality
    to ban particular users later, delete posts from specific users, or even develop
    functionality to allow users to log in and view their previous posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we arrive here in the code, then the e-mail address is obviously already
    in the database, so we grab the users'' primary key and store it in `$data[''usr_id'']`;
    later, we will save it to the comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If we get here, then the user doesn''t exist, so we create them in the `users`
    table, returning the primary key using the `$this->d->insert_id()`CodeIgniter
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we save the comment to the `comments` table using the CodeIgniter Active
    Record function `$this->db->insert()`. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Creating the model file – admin_model.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four functions in the `admin_model.php` model, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dashboard_fetch_comments()`: This fetches comments from the databases that
    have been flagged for moderation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dashboard_fetch_discussions()`: This fetches discussions from the databases
    that have been flagged for moderation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_comments()`: This updates a comment based on the decision of the moderator,
    changing the value of `cm_is_active` to `1` if the comment is approved or deleting
    it if is unapproved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_discussions()`: This updates a discussion based on the decision of
    the moderator, changing the value of `cm_is_active` to `1` if approved or deleting
    it if is unapproved. If a discussion is deleted, then all comments associated
    with that discussion will also be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/admin_model.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function will fetch all comments for moderation from the database.
    Comments are for moderation if `comments.cm_is_active` is set to `0`. The database
    is queried and all comments for moderation are returned to the `admin` controller.
    This result will eventually be looped over in the `views/admin/dashboard.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function will fetch all discussions for moderation from the database.
    Discussions are for moderation if `discussions.ds_is_active` is set to `0`. The
    database is queried and all discussions for moderation are returned to the `admin`
    controller. This result will eventually be looped over in the `views/admin/dashboard.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function is called by the `admin` controller function when an
    admin is moderating comments. If a comment is deemed to be fine, then `comments.cm_is_active`
    is updated and set to `1`. However, if it is not fine, then the comment is deleted
    from the `comments` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function is called by the `admin` controller function when an
    admin is moderating discussions. If a discussion is deemed to be fine, then `discussions.ds_is_active`
    is updated and set to `1`. However, if it is not fine, then the discussion is
    deleted from the `discussions` table. Any comments belonging to that discussion
    are also deleted from the `comments` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Creating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six view files in this application, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`discussions/view.php`: This displays all active discussions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussions/new.php`: This displays a form to the user, allowing them to create
    a discussion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comments/view.php`: This displays all active comments within a discussion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nav/top_nav.php`: This contains the top navigation links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin/login.php`: This displays a login form for the user; don''t forget to
    add the `signin.css` script, which you can find later in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common/login_header.php`: The `views/admin/login.php` view requires different
    resources from the rest of the application, which is supported by this header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `discussions/view.php` view file displays a list of all active discussions
    as well as sorting options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/views/discussions/view.php` file and add the
    following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the first few lines. We open with a CodeIgniter `anchor()` statement.
    Let''s take a closer look at the code for the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down into smaller sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchor(''discussions/index/age/sort/'' .`: This sets the link for the `discussions`
    controller, `index()` function, and sorting by age (the created date—`discussions.ds_created_at`),
    but what is the direction? Well…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(($dir == ''ASC'') ? ''DESC'' : ''ASC''),`: The value of `$dir` comes from
    the `index()` function of the `discussions` controller. It is the current direction
    of the sort. We then use a PHP ternary operator to switch between the directions.
    It''s a bit like an if/else statement but is more compact. It works like this:
    *if a variable is equal (or not equal) to a variable, then execute A, otherwise
    execute B*. For example, as an if/else statement, the code would be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, the second part of the link will flip-flop between `ASC` and `DESC` depending
    on the value held in `$dir`. Now, let's look at the rest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`''Newest '' . (($dir == ''ASC'') ? ''DESC'' : ''ASC''));?>`: This is the text
    that users will see as their link. You can see that we again make use of the ternary
    operator to display the text, flipping between `Newest ASC` and `Newest DESC`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the view is fairly undramatic; all we do is loop over the database
    result from the discussions' `index()` function, displaying all active discussions
    as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The comments view displays a list of all valid comments to the user for a selected
    discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/comments/view.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following line in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You will see that we use a line from the `lang` file that is not in the code
    example; this is because the `common_form_elements_go` line is to be found in
    [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: New discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The New Discussion view displays a form to the user and any validation error
    messages that might need to be conveyed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/discussions/new.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following line in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You will see that we use a line from the `lang` file that is not in the code
    example; this is because the `common_form_elements_go` line is to be found in
    [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: We provide options to the user to create a new discussion. We display form elements
    for them to enter their username, e-mail, discussion title, and the text of their
    discussion.
  prefs: []
  type: TYPE_NORMAL
- en: The form is submitted to the `create()` function of the `discussion` controller,
    where is it validated with any validation errors being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The top_nav file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every project in this book has its own navigation file, and this is no exception.
    The `top_nav` file is standard Bootstrap navigation code; however, there are a
    few Codeigniter `anchor()` functions that provide the URL links and text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/common/top_nav.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The login view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The login view displays the form and any errors to the admin user when he/she
    wants to log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/admin/login.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: There's not too much to get into here—everything is as you would expect. We
    display a form to the user, giving them text fields to enter their e-mail address
    and password, and errors are displayed above the form.
  prefs: []
  type: TYPE_NORMAL
- en: The form is submitted to the `login()` function of the `admin` controller, which
    will handle the technical process of logging the user in. If the login is successful,
    the user is directed to the `dashboard()` function of the `admin` controller.
  prefs: []
  type: TYPE_NORMAL
- en: The login_header file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `admin/login.php` file requires different files and resources from the rest
    of the discussion forum application. For this reason, we're going to create a
    header file that's specific to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/common/login_header.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The dashboard view is able to display to the admin user (in this case, a moderator)
    all discussion forums and comments that are awaiting moderation. These are displayed
    in a table in a list format, each item having two options for the moderator: Allow
    and Disallow.'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on Allow will set the active status of the discussion (`discussions.ds_is_active`)
    or comment (`comments.cm_is_active`) to `1`, making them appear once more for
    general users to see. However, Disallow will delete them from the database. If
    it is a discussion forum being disallowed, then all comments associated with that
    discussion will also be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/admin/dashboard.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The signin.css file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `signin.css` file is required to display the login form correctly; this
    is the same `signin.css` file as the one that is available from the Twitter Bootstrap
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/bootstrap/css/signin.css` file and add the
    following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Creating the controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to create three controllers for this application. These are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`discussions.php`: This fetches discussions from the `discussions` table in
    the database and allows the user to create a new discussion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comments.php`: This fetches comments from the `comments` table in the database
    and allows the user to join a discussion by adding a comment to a discussion forum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin.php`: This contains basic admin functions, login functionalities, and
    moderation options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The discussions controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `discussions.php` controller is responsible for the display of all valid
    discussions, processing the creation of new discussions and flagging any discussion
    for moderation. The `discussions` controller contains three functions, and these
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: This displays all valid discussions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create()`: This creates a new discussion, handling any form validation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This processes a discussion for moderation by calling the `flag()`
    function of `discussions_model.php`, setting `discussions.ds_is_active` to `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/discussions.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Taking each function one by one, we'll begin with `index()`. The `index()` function
    is responsible for displaying all active discussions to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The code begins by checking to see whether there is a value in the third `uri`
    segment or not.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a value present, then this indicates that the user has pressed the
    sort's ascending or descending link; we'll discusses this in a moment but, for
    now, we'll assume that there is no value in the third segment.
  prefs: []
  type: TYPE_NORMAL
- en: As there is no value present, we set `$filter` and `$direction` to `NULL`, but
    we set `$page_data['dir']` to `ASC` (short for ascending). This is set because,
    initially, the discussion forums are displayed in descending order of their created
    date; however, the sorting link needs to be written in the opposite direction
    from what is currently being displayed. Setting `$page_data['dir']` to `ASC` (ascending)
    will enable the URL in the sort link to be ready for us should we need to click
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then ask the `fetch_discussions()` function of `discussions_model.php` to
    get all active discussions, passing to it two variables as arguments: `$filter`
    and `$direction`. These are set to `null` by default. The `fetch_discussions()`
    function will know not to apply these filters.'
  prefs: []
  type: TYPE_NORMAL
- en: The direction of the sort link will flip-flop between ascending and descending—always
    being the opposite of what is currently displayed. This flip-flopping is done
    in the view file (this might not be the best place for it if you're being strict,
    but I thought that this was a location that you would find obvious, so there you
    go).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out the code and explanation for the `discussions/view.php` view file
    earlier in this chapter for a full explanation of how the flip-flopping functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now look at the `create()` function; we initially set the validation
    rules and check to see whether the form has been submitted (or has been submitted
    with errors). Assuming that it has been submitted without errors, we save the
    post data in the `$data` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Once all the form elements are packaged into the `$data` array, we send it off
    to the `create()` function of `discussions_model` to write to the database.
  prefs: []
  type: TYPE_NORMAL
- en: If the insert operation was successful, the model will return the primary key
    of the new discussion but will return `false` if there was an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'We test the return value of the insert operation. If the insert was successful,
    we redirect the user to the `index()` function of the `comments` controller, passing
    to it the `$ds_id` value that was returned by the model. The user can then see
    their discussion, which is ready to be commented on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If there was an error, then we have no new primary key, so we can't redirect
    the user. This has been left blank in this project; you can implement your own
    policy for this behavior; perhaps you can send them an e-mail informing them about
    this or write an error to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The comments controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `comments` controller manages all matters related to the flagging (for
    moderation) and creation of comments on discussions from users. The `comments`
    controller has two functions, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: This displays all comments for a specific discussion forum and handles
    the submission—that is, the validation of a user''s comment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flag()`: This allows a user to flag a comment for moderation by the admin.
    The `comments.cm_is_active` value in the database is set to `0` for the specific
    comment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/comments.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Let's start with the `index()` function. The `index()` function will begin by
    displaying all comments for a specific discussion. To do this, it needs to know
    what discussion to look at. So, let's go a step back. The `discussions` controller
    will display a list of active discussions.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a section of code from `discussions/view.php` that we looked
    at in greater detail earlier. This code will loop through a set of database results,
    displaying each active discussion in table rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the line highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This line displays the URL that enables the user to view the discussion and
    any comments associated with it by clicking on a discussion title link, which
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: We can pass `id-of-discussion` as the third parameter of the link to the `index()`
    function of the `comments` controller. This is where we pick up the story. The
    `index()` function of the `comments` controller checks whether there is a third
    `uri` segment (if not, then it is possible that the form to create a comment has
    been submitted and would not exist in the `uri` segment).
  prefs: []
  type: TYPE_NORMAL
- en: 'It will grab the ID of the discussion and store it as the `$ds_id` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We then define some validation rules for CodeIgniter to apply to the Add A Comment
    form at the bottom of the `comments/view.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `comments/view.php` file contains not only a `foreach()` loop to display
    the current comments on the selected discussion, but also a form with a name and
    e-mail text field and a body text area. This is where the user can enter their
    name, e-mail, and comment text and then submit the comment.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a hidden field, named `ds_id`, that contains the primary key of
    the selected discussion. We need it in the form as a hidden element as, when the
    form is submitted, the third `uri` segment will disappear. Having the discussion
    ID as a hidden form element will allow `index()` to maintain a relationship between
    the comment and the discussion when the new comment form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that there were no errors with the form and it is submitted without
    the need to report anything requiring the user's attention, the `index()` function
    attempts to write the comment to the `comments` table in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, however, we need to package all our data into an array that
    will be passed to `Comments_model`. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that we''ve got all the post elements including `ds_id` (highlighted
    in bold). This is now ready to be sent to the `new_comment()`model function for
    insertion into the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The `new_comment()`model function will return `true` on a successful insertion
    and `false` otherwise. If it was successful, then we redirect the user to the
    `comments` controller's `index()` function and pass `$ds_id` as the third parameter
    where the `index()` function will begin, displaying all active comments associated
    with the selected discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the `flag()` function. The `flag()` function will enable
    the user to indicate that a comment requires moderation by an admin.
  prefs: []
  type: TYPE_NORMAL
- en: Stepping back to the `discussions` controller, the `discussions` controller
    will display a list of active discussions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a section of code from `comments/view.php` that we looked
    at in greater detail earlier. This code will loop through a set of database results,
    displaying each active comment in a table of rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the line highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This line contains a CodeIgniter `anchor()` statement with the `comments/flag/id-of-comment`
    URL. It is this line of code that creates the **flag** link next to each comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the third and fourth parameters. The third parameter is the discussion
    ID (`discussions.ds_id`) and the fourth is the comment ID (`comments.cm_id`);
    both are used in the `flag()` function of `comments_model`. The code for this
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: If the insert operation returns `true`, then we redirect the user to the `comments`
    controller's `index()` function along with the discussion forum ID.
  prefs: []
  type: TYPE_NORMAL
- en: The admin controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `admin` controller contains all the functions required to run the moderation
    of comments and discussions and to log users in. It contains the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index()`: Every controller needs an index function and this is it. The `index()`
    function will check whether a user is logged in and redirect them elsewhere if
    not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`login()`: The `login()` function handles the process of logging a user into
    the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dashboard()`: This is responsible for displaying all comments and discussions
    that require moderation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_item()`: This is responsible for applying the decision of the moderator,
    whether to approve or delete a comment or discussion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/admin.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Let's tackle this by first looking at the `index()` function. As the `admin`
    controller is only to be used by those logged in, the `index()` function will
    check to see whether an item called `logged_in` exists in the session. If `logged_in`
    is equal to `FALSE`, then it means that the user is not logged in, so they are
    redirected to the `login()` function.
  prefs: []
  type: TYPE_NORMAL
- en: This is very simple and we won't spend more time on it; however, a more complicated
    function is `login()`. The `login()` function is responsible for—as the name suggests—managing
    the login process for the admin moderator.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing `login()` does is define form validation rules for the `usr_email`
    and `usr_pwd` form elements. These will govern how the data submitted by the user
    in the `admin/login.php` view file is validated.
  prefs: []
  type: TYPE_NORMAL
- en: 'We immediately test to see whether the form has been submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: If the form hasn't been submitted, we'll load the view files to display the
    login form and wait for a response from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if it has been submitted, then the form is validated against the validation
    criteria; if it passes validation, we try to work out whether the user exists
    in the database currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If exactly one matching e-mail address has been found, then we will try to
    work out whether the users'' password is correct. We load the CodeIgniter library
    using `$this->load->library(''encrypt'')` and generate a hash from the password
    that the user supplied in the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We then compare that hash with the hash stored in the database belonging to
    the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'If it does not match, then we load the login form and display an error message.
    However, if it does match, then the user must have typed the correct password;
    so we log them in by creating a CodeIgniter session for them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The user is then redirected to the dashboard. The dashboard will display any
    comments and discussions that are required for moderation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've created each file and resource necessary for the app, let's run
    through a few scenarios so that we can get a good idea of how it all works together.
  prefs: []
  type: TYPE_NORMAL
- en: A user creates a discussion forum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where David visits the discussion forum in his browser.
    The following is the sequence of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: David clicks on the **New Discussion** link in the top navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `create()` function in the `discussions` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` function displays the `discussions/new.php` view file, which
    displays a form to users, enabling them to enter their name, e-mail, discussion
    title, and discussion body text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: David presses the **Go** button to submit the form. The form is submitted to
    the `discussion` controller's `create()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `discussion` controller's `create()` function validates the form. Assuming
    there were no errors, the `create()` function packages the post data into an array
    and sends it to the `create()` function of `discussions_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` model function looks in the `users` database table to see whether
    the e-mail address already exists. If it does, the primary key of the user is
    returned and added to the Active Record insertion for the discussion. However,
    if the e-mail address doesn't exist, then the model function creates it. Instead,
    the primary key of this insertion is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password is created and a hash is generated from it. However, the password
    is not stored and David is not told what it is; this is perhaps a functionality
    you might not wish for, but you can easily add code to send David his password
    in an e-mail, should you wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A user comments on a discussion forum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Ed visits the discussion forum in his browser.
    The following is the sequence of events:'
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter loads the default controller—in this case, the `discussion` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `discussion` controller uses the `fetch_discussions()` function of `discussions_model`
    to get the latest discussions from the `discussions` database table and passes
    them to the `discussions/view.php` view file where they are displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed likes the sound of one of the discussion forums and clicks on the name of
    the forum.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `comments` controller's `index()` function. The `index()`
    function takes the third `uri` segment (the discussion forum ID—`discussions.ds_id`)
    and passes it to the `fetch_comments()` function of `comments_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The comments are displayed in the `comments/view.php` view file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed reads the comment history and decides that the world would benefit from his
    opinion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed scrolls to the bottom of the page where the form to add a comment is present.
    Ed enters his name, e-mail, and comment and clicks on **Go**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is submitted to the `create()` function of `comments`. The `create()`
    function will validate the form. Assuming there were no errors, the `create()`
    function packages the post data into an array and sends it to the `create()` function
    of `comments_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `create()` model function looks in the `users` database table to see whether
    the e-mail address already exists. If it does, the primary key of the user is
    returned and added to the Active Record insertion for the comment. However, if
    the e-mail address doesn't exist, then the model function creates it. Instead,
    the primary key of this insertion is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A password is created and a hash is generated from it. However, the password
    is not stored and Ed is not told what it is; this is perhaps a functionality you
    might not wish for, but you can easily add code to send Ed his password in an
    e-mail, should you wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ed is redirected to the discussion forum where he can see his comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A user dislikes a comment and flags it for moderation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Nigel is looking through a discussion and
    sees a comment that he feels is necessary for moderation. The sequence of steps
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Outraged, he presses the **flag** link next to the comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `flag()` function of `comments`. The URL that is used
    to access this is `comments/flag/id-of-discussion/id-of-comment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter passes `id-of-comment` to the `flag()` function of `comments_model`,
    which will set `comments.cm_is_active` to `0`. This removes the comment from the
    discussion and places it in the moderation dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the update of the comment was successful, CodeIgniter will redirect Nigel
    to the discussion he was looking at.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A moderator reviews comments awaiting moderation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider an example where Nick logs in to his admin account. The sequence
    of steps is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `admin` controller loads the `dashboard()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `dashboard()` function loads a list of comments and discussions waiting
    for moderation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Nick sees the full text of comments and discussions along with two options:
    **Allow** and **Disallow**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick sees that there are two comments that require moderation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick reads the first comment and decides that it is fine; he clicks on the **Allow**
    link. The structure of the link is `admin/update_item/cm/allow/id-or-comment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `update_item()` function of `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `update_item()` function gets the type of thing that needs to be updated
    (comment: `cm` and discussion: `ds`); in this case, Nick is updating a comment
    to the first segment in `uri`, which is `cm`. The second `uri` segment is `allow`
    and the third `uri` segment is the ID of the comment (`comments.cm_id`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `update_comments()` function of `admin_model` is called, setting `comments.cm_is_active`
    to `1`. This allows the comment to be displayed once more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nick also notices the one remaining comment waiting for moderation. He reads
    the comment and decides that it's probably not the best comment and he wishes
    to remove it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: He clicks on the **Disallow** link. The structure of the link is `admin/update_item/cm/disallow/id-or-comment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter loads the `update_item()` function of `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `update_item()` function gets the type of thing that needs to be updated
    (comment: `cm` and discussion: `ds`); in this case, Nick is updating a comment
    to the first segment in `uri`, which is `cm`. The second `uri` segment is `disallow`
    and the third `uri` segment is the ID of the comment (`comments.cm_id`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `update_comments()` function of `admin_model` is called. As `$is_active`
    is set to `0`, we will not allow the comment to be displayed but will delete it.
    A PHP if/else statement works out the value of `$is_active`, the else section
    is executed, and a MySQL `DELETE` command is called, deleting the comment from
    the database permanently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have done a lot in this chapter; we've created many files and there's a lot
    to take in. However, this project gives you the base system for a discussion forum.
    You might wish to add user management (particularly when it comes to sending the
    user their password), assuming you want people to log in? What would they do once
    they are logged in? These are for you to define, but you now have the base system;
    this allows you to build more.
  prefs: []
  type: TYPE_NORMAL
