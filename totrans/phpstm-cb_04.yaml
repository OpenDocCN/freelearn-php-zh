- en: Chapter 4. Integrating Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cooking with Symfony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a controller with Symfony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a model with Symfony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view with Symfony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a model with the Yii framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a controller with the Yii framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view with the Yii framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a model with the Zend framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a controller with the Zend framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view with the Zend framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start off, try some introspection as homework. Do you believe in
    reinventing the wheel? Do you believe in adding technical debt? If your answer
    to those questions was yes, you probably need to skip this chapter altogether.
    In all other cases, you should use a framework. Frameworks are good and nice with
    you. They help. They save time. They save effort.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move back to questions. What is a technical debt? It is the amount of
    money at stake by a company where the technological architecture has been designed
    in such a way that more effort or man hours (and thus money) will be required
    to maintain the system in future. What is reinventing the wheel? It is the process
    of putting in more effort to carry out a task that was already done in the past.
  prefs: []
  type: TYPE_NORMAL
- en: Will you please stop scratching your head? This isn't rocket science. The analogy
    with software engineering is quite simple. You probably spend time in coding petty
    tasks, such as user input validation and password validation for each and every
    project that you create. While this is a repetition of tasks in the first place,
    it is the most vulnerable part of your code. The vulnerability is not only from
    general attackers, but also from certain very trivial mistakes, such as not cleaning
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: You need to strategize your actions. This reinventing of the wheel is not free
    of cost. You are a highly paid developer (because you purchased a PhpStorm license
    (pun intended). Your billing agency will spend money to get work done by you.
    If you do work that is prone to errors, the billing agency will have to shell
    out more money to fix and/or maintain the same project later. Thus the agency
    is bound to spend money in the future and hence has a technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: Please use a framework. You can take actions rapidly in building up chunks and
    pieces of your code using chunks and pieces from the framework. Your development
    process will be accelerated. You will be exposed to a library of functions for
    common tasks, database queries, and input cleaning, to name a few. The decision
    to choose a framework, however, needs a lot of thought.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are still a few dangling questions that come to mind. You need to hold
    on and stay tuned for loads of important information. There are three frameworks
    that PhpStorm can be easily embedded with: Symfony, Yii, and Zend, in the lexicographic
    order of their names.'
  prefs: []
  type: TYPE_NORMAL
- en: Cooking with Symfony
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Symfony** is a PHP web application framework for MVC applications available
    as free software and released under the MIT license.'
  prefs: []
  type: TYPE_NORMAL
- en: To begin working with Symfony, you need to install Symfony on your local machine
    (also known as your local server). Life never lets you breathe easy. You have
    to choose from two (or more) paths to proceed. So is the case with PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change often leads to confusion, so it is better to make few changes in the
    Symfony directory structure and jump to create a new controller. You create a
    new controller class inside the directory `<Project-Root>/src/Acme/DemoBundle/Controller`.
    Name it `CookingController.php`. Here are a few rules to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, you should create a controller with the suffix `Controller` in the
    name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each controller should extend the class `Controller` that is defined in the
    namespace `Symfony\Bundle\FrameworkBundle\Controller\Controller namespace`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller should be defined in the namespace `Acme\DemoBundle\Controller`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you will require the routing of methods as actions, you will need to use
    namespace `Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`.
  prefs: []
  type: TYPE_NORMAL
- en: You need to define a route in a configuration file (a file with the `.yml` extension)
    so that Symfony knows exactly where your controller is.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Symfony, you can choose from a simple archive download from the Symfony
    website or use Composer for installation. Composer? Yes, it's the same system
    that was described in [Chapter 2](ch02.html "Chapter 2. PHP Development"), *PHP
    Development*, and some keywords to refresh your memory are composer.json, vendor
    directory, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to install Symfony by downloading it from the website, you need
    to go to [http://symfony.com/download](http://symfony.com/download), select any
    of the archive formats, and download the archive to the disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the archive has been downloaded to the disk, you can move the unzipped
    directory inside your web server document root and open it in PhpStorm. There
    are two points worth noting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't want the project to be web-based, you need not move it into the
    document root of your web server.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to create a web-based project, you can also keep the unzipped folders
    anywhere. You can then create a symbolic link inside your web server document
    root to point to this unzipped folder. This is to keep the system clean, you see.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To open the project in PhpStorm, you need to go to **File** | **Open** and open
    the path of the directory where you kept the Symfony directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The composer method is a bit long, but a careful PhpStorm cookbook reader need
    not worry because the information on how to use Composer was provided in [Chapter
    2](ch02.html "Chapter 2. PHP Development"), *PHP Development*. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to specify `symfony/framework-standard-edition` as the package name,
    as shown in the following screenshot. PhpStorm will show you the list of packages
    with similar names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to specify the version number, and PhpStorm will be good to go. It
    will download the required dependencies for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You should take care that you have a consistent Internet connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3878OT_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once the framework has been downloaded, you can restart your IDE (not mandatory)
    to let PhpStorm breathe easy after doing the heavy-duty task of downloading the
    framework for you. As soon as you restart it, PhpStorm will be able to recognize
    which framework needs to be integrated. PhpStorm will guide you through integrating
    the framework usage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can tell PhpStorm about the directory and the type of content it will contain
    by providing the details. You just have to select some values from the dropdown,
    as shown in the following screenshot:![How to do it...](img/3878OT_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, you are good to go with Symfony. There is a `readme.md` file provided
    at the project root level. You are encouraged to read it and follow the checklist
    that is provided with it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Symfony framework adheres to the model-view-controller framework. Besides
    all the benefits that MVC serves, compartmentalizing the functionality is a major
    benefit. Thus, you will group all the database-related functions in the model,
    all the business logic in the controller, and all the presentation-related functions
    (generating the HTML) in the view. So, in order to dive deep into the details
    of Symfony, you need to understand the directory structure first.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The directory structure is the basic skeleton of the project, and it is very
    important to know the directory structure before starting. Let's see the structure
    of Symfony.
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure of Symfony
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you download and install Symfony, you are provided with a directory structure
    by default. There are five directories visible: the `app`, `bin`, `src`, `vendor`,
    and `web` directories.'
  prefs: []
  type: TYPE_NORMAL
- en: The `app` folder is designed to contain the application-specific resources.
    These resources include the configurations for the database connections and the
    like in the `config` directory. The `logs` directory is intended to contain the
    logs to be written by the Symfony framework application. The cache directory is
    intended to contain the cached versions of files and resources required to run
    the application. A cached version is faster than the regular version and is write-protected.
    The resource directory is designed to contain resources such as the view rendering
    pages and the like.
  prefs: []
  type: TYPE_NORMAL
- en: The `bin` folder is designed to keep the binary files (such as `.sh`) that would
    be required by the project. The files under `bin` need to be executable because
    of their nature—to be able to be executed and perform the intended tasks independently.
    You need to be careful while providing execute permissions to files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `src` folder is designed to contain the PHP source code required by the
    project. This PHP source code can be anything: your templates, classes, and anything
    you think is related to your project.'
  prefs: []
  type: TYPE_NORMAL
- en: The `web` folder is designed to keep all the content that has to be rendered
    in a web browser over the Internet. This content includes HTML, JavaScript, CSS,
    images, icons, sprites, `robots.txt`, and so on, as and when required for the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: The `vendor` directory is designed to keep all the third-party tools that are
    required for the project to run. This is an excellent feature because it keeps
    the third-party code in a separate compartment, thus protecting them from accidental
    edits.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting here that a framework sets rules for you to work. If you
    stick to those rules, you will be on the winning side. One example supposes that
    there is the plugin `X`, which you downloaded from the Internet, a part of your
    code depends on it, and there is one `config` directory available for the project
    as a whole. There is a big chance that you might end up making changes or overwriting
    the `config` file. A framework will prevent you from doing that. How? It will
    indicate to you that a configuration inside the vendor directory must not be disturbed.
    If you still proceed to make changes intentionally or unintentionally, there is
    a limit to every warranty.
  prefs: []
  type: TYPE_NORMAL
- en: Mind you, "is designed to contain" means that it was the default intention.
    You can obviously store your classes wherever you want.
  prefs: []
  type: TYPE_NORMAL
- en: After you get yourself set on the directory structure, it is time to get your
    hands really dirty. Friends, Romans, Countrymen! Roll up your sleeves and do remember
    all that you shall see.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `app` folder, there is the `cache` folder. As already stated, it
    is used to cache some contents precooked so that they can be rendered very quickly.
    The caching can be done on commonly used elements, such as the images, strings,
    JavaScript, CSS, and certain preprocessed data. Since the PHP being executed on
    the web server writes the caches, the user running the web server (yes, you heard
    it right) needs permission to write into the `cache` folder. Exactly the same
    is true for the logs directory as well. You need to set permissions to the two
    folders mentioned as `777`. You can do even better. You can change the ownership
    of the two directories such that they are now owned by `www-data` or the Apache
    user (the username under the Linux environment). Try the `chown` or `chmod` command.
    Whatever you do, make sure you are doing it right. Ownership/permission changes
    are actions that can prove to be an issue, so don't do it when you feel sleepy.
  prefs: []
  type: TYPE_NORMAL
- en: Did you enjoy playing in the mud? More mud follows.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to a point in history where you were really very hungry and were attempting
    to bake pizza using some cheese, salt, capsicum, and tomato (as a fallback topping).
    Remember? That was some freestyle cooking. What if you want more disciplined adventures
    in life? Try following the Symfony way.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller with Symfony
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you will have to create a new controller first. This controller will be responsible
    for making decisions about how you will cook your Pizza.
  prefs: []
  type: TYPE_NORMAL
- en: Change often leads to confusion, so it is better to make few changes in the
    Symfony directory structure and just jump to create a new controller.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new controller class inside the directory `<Project-Root>/src/Acme/DemoBundle/Controller`.
    Name it `CookingController.php`. There are a few rules to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, you should create a controller with the suffix `Controller` in the
    name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each controller should extend a class `Controller` that is defined in the namespace
    `Symfony\Bundle\FrameworkBundle\Controller\Controller`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller should be defined in the namespace `Acme\DemoBundle\Controller`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you will be required to route the methods as actions, you will need to
    use namespace `Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to define a route in a configuration file (a file with the `.yml` extension)
    so that Symfony knows exactly where your controller is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can define the route later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So, your first controller looks like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the content of the YML document (located at `<Project-root>/src/Acme/DemoBundle/Resources/config/routing.yml>`)
    will be (appended by):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The human mind is a very lazy machine. No sooner does it see any technical detail,
    than it starts getting confused. In order to eliminate the doubt, the working
    is explained here. Hang on. Begin with the source code because PHP is something
    you are more comfortable with. Here is the working.
  prefs: []
  type: TYPE_NORMAL
- en: The code starts with the declaration of a namespace that means you declared
    a virtual region or boundary for the elements of this controller. Technically,
    it is known as the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The code proceeds by including such namespaces for the base `Controller` and
    the routing system (denoted by `Route`).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to include some presentation-layer templates, you can use the namespace
    of the templating engine as well. Twig is the name given to the default templating
    engine shipped with the default installation of Symfony.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the most important aspect of a controller is that `CookingController`
    is a controller, so it is bound to extend the `Controller` class.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the class are some simple methods that have public access. Did you say
    insecure? No, no dear! Since they are to be made available through a web browser,
    the access level has to be public.
  prefs: []
  type: TYPE_NORMAL
- en: The actual cooking starts by giving your dish a name. For this purpose, the
    method `nameDishAction` has the dish name as the parameter. Until now, things
    have been normal.
  prefs: []
  type: TYPE_NORMAL
- en: There is this annotation `@Route("/nameDish/{dishname}", name="_cook_dish")`,
    which adds the twist to the tale. `Route` creates a map between the action and
    the URL. This is another form of dependency injection. So, the name of the action
    `nameDish` is mapped with a name for the Symfony system (`_cook_dish`). If you
    look more closely, you will see that it also defines the way you will use this
    controller. The value specified in the braces is the placeholder for the argument
    that will be passed to this action.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the YML contents, it is worth mentioning that YML is actually YAML
    and is pronounced yamel. This is similar to any markup language with a key and
    its corresponding values. So, your resource will indicate the name of the controller
    you just created, the type your controller will be referenced as, and the prefix
    that will be required to be put with the actions as (to be) defined in your controller.
  prefs: []
  type: TYPE_NORMAL
- en: You just created a new Symfony controller to kick-start cooking. By the way,
    do you remember the last time you used the terminology dependency injection?
  prefs: []
  type: TYPE_NORMAL
- en: Creating a model with Symfony
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does an application remember things? Persistence is the name of the phenomenon
    by which any application maintains its state. To have persistence, you need to
    have data structure(s). To manage data structures in a typical engineering perspective,
    you can use models—the M in the MVC paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember that you have some toppings as well as some ingredients to be added
    to your pizza dish. So, typically, you need an array to store (represent) the
    toppings and the ingredients. This is a green signal to go ahead and use model.
    But again, there is a twist in the tale. Symfony has no default model system in
    place. Bad design? Maybe not. It was originally designed to be a request-response
    system. Symfony looks to you for this purpose. You can create a model freestyle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by creating a new directory at the same level as the controller. Name
    it `Model`. This is descriptive naming, you see.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Model` directory, use PhpStorm's new class wizard to create a new
    class. Name it `CookingModel.php`. It is not that Symfony will not accept anything
    other than `/*Model$/` in the class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are encouraged to stick to names similar to the default Symfony names.
    Your model will look somewhat like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since you just created a new model, the model will be of no use unless it is
    used inside a controller. Revisit `CookingController`. It had no action to actually
    cook a pizza. `Acme\DemoBundle\Model\CookingModel` should be appended to the controller
    file header. When you add the required action, you will do something like the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you already have some experience in cooking, the model class is quite
    simple. If you recall, the content of the model is just a smart copy-paste from
    the `PizzaDish` class.
  prefs: []
  type: TYPE_NORMAL
- en: The namespace for the `CommonException` class was used to catch some exceptions
    if they occurred while cooking. This is safe cooking indeed.
  prefs: []
  type: TYPE_NORMAL
- en: The `getIngredients` method processes the available ingredients and returns
    an array containing the ingredients. It also prevents your pizza from becoming
    unenjoyable without capsicum—it adds tomato as a fallback ingredient.
  prefs: []
  type: TYPE_NORMAL
- en: The `getToppings` method functions similarly. It provides a list of the toppings
    you would like to add to make your pizza yummier.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the controller, the model is used just like any other class. Inside the
    `startCookingAction`, all you did was create a new model object and obtain the
    value from the model.
  prefs: []
  type: TYPE_NORMAL
- en: Even simpler! So, you created a new model in Symfony. Congratulations! You can
    safely gobble up the pizza you just baked (or cooked—mind you, you are an engineer
    and not a cook, so the difference between cooking and baking should not bother
    you).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view with Symfony
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can skip this section if you have planned to use Symfony to create a command-line
    software. But if you want to write software where you need to show beautiful presentation,
    you need to follow this section very carefully. The face of your application is
    known as view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to create views in a particular directory if you stick to the default
    Symfony settings. The name of the directory in the present installation is `<Project-root>/symfony/src/Acme/DemoBundle/Resources/views`.
    You also have to create a directory that contains the name of the controller minus
    the word `controller`. Thus, you will create a directory with the name `Cooking`
    as you created a controller with the name `CookingController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While naming the file, you have to keep in mind that you will name the view
    file with the extension `.html.twig`, and the filename will be the same as the
    name of the action minus `Action`, which will render the view.
  prefs: []
  type: TYPE_NORMAL
- en: So, you can have views with the name `index.html.twig`, `nameDish.html.twig`,
    and `startCooking.html.twig` as you created `indexAction`, `nameDishAction`, and
    `startCookingAction`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'By this time, you must be asking what bird **TWIG** is. You must also be thinking
    about starting to curse the author for having provided so much information. Dear,
    dear, dear. Art is long and life is short. Twig is a templating engine for PHP.
    It is designed to inject dynamic behavior into HTML pages. This is especially
    helpful for user interface developers who have little knowledge about the server-side
    language, which renders the HTML onto a web browser. Assuming you have to create
    a view, you will do something like this for `startCookingAction`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The immediate remedy for the visual injury caused to you just now is to explain
    to you how this code works. An overview of this code is that it is for an HTML
    page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the HTML `title` tag, there is `{{ dishname }}`, which is the dynamic
    content. If you revisit the method `startCookingAction` inside `CookingController`,
    you will notice that you returned an array with the index `dishname`. The placeholder
    `dishname` assumes its value from the controller action. If the controller returns
    an array, you will obviously require iterating the entire array to use the values
    in the view. A for-loop begins and ends with `for` and `endfor` respectively.
    Thus, the loop iterates over the array returned from the controller (`$ingredients`
    and `$toppings`) with the array index as key and the array values as the ingredient
    and topping respectively. The values thus obtained (ingredient and topping respectively)
    are used in the view.
  prefs: []
  type: TYPE_NORMAL
- en: You just cooked your pizza using a new method. Do you love it? There is no pun
    intended here.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a model with the Yii framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The roadmap begins with creating a model. Then, create a controller and use
    the model you created. Finally, give a face to your application by creating a
    view. Use the model to get data and pass it on to the view.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a new model is extremely easy. It is no different to creating a simple
    PHP class in PhpStorm. To create a new model, you need to create a new PHP class
    inside `<project-root>/app/models`. Your model will look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This model is exactly the same as the model you created in Symfony. Remember?
    The namespace of the model is declared so that any other class is able to access
    the methods defined in the model.
  prefs: []
  type: TYPE_NORMAL
- en: The exception available is defined in the `ErrorException` class, so it is used
    to handle the exception.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is why they say that your business logic is what really matters. So, irrespective
    of the framework, your data class (the model) remained the same.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller with the Yii framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a new controller, create a new PHP class inside the controller folder.
    Name it `CookingController.php`. The reason for this? You have been doing this
    for a while now, so you should continue doing it lest your stomach gets angry.
    Keep cooking, comrade.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new controller, go to a new PHP class. Use the name `CookingController.php`.
    Do remember the directory `<project-root>/app/controllers`. Your controller will
    look somewhat like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On careful examination of the controller, you will have mixed feelings. You
    will be able to see some known-to-you elements in the code and some new elements.
  prefs: []
  type: TYPE_NORMAL
- en: The namespace of the controller is declared as `app\controllers`. This means
    that if some other controller needs to use the methods (actions) defined in this
    controller, that controller will have to use this namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Since the data is being fetched from the model you created, in order to use
    the model's methods, you need to use the namespace in which the model is declared.
  prefs: []
  type: TYPE_NORMAL
- en: You need to use the namespace where the parent controller (defined by the framework)
    is defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller contains an action `actionIndex`. In Yii, the actions defined
    follow this naming convention: the word `action` followed by the actual purpose
    of the action. Thus, the `actionIndex` will be the default action for the controller.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The action requires a view as well. It is called by the method render: the
    first argument being the name of the view and the other argument the list of values
    to be passed on from the controller to the view.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view with the Yii framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, create a view to make your application complete. In creating a new view,
    you need to be careful.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The proper location of a view in a project is the `<project-root>/views/<first-name-of-the-controller>`
    directory. Thus, you will require a new directory under the views. Create a new
    directory with the name `cooking`. Inside this directory, create a new PHP file
    with the name `index.php`. Having done that, you need to write some basic HTML
    code to make a view. You might write something like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `html` part in the code is standard and does not use any other framework.
    The CSS is also kept basic to keep the code readable and simple to understand.
    When you use the namespace `YII/helpers/HTML`, it brings to your control the HTML
    helper class that performs basic HTML operations, such as encoding the input that
    might contain some special characters into HTML entities, and so on. The framework
    sets the charset (the character set) to be used on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: The data that you passed on from the controller is now available in your view.
    The variable name is the name of the array index that you passed, and the value
    of the variable is the array value that was set at that array index. Thus, you
    will have `$dishname`, `$ingredients`, and `$toppings` in your view. In order
    to display the contents of the array, you just need to do a simple PHP `foreach`
    to iterate over the array, and your cooking process will be complete.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not only `foreach` that will do the trick—you can use whichever loop control
    structure you like.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a model with the Zend framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will require a new model to make all the ingredients and the toppings available.
    Then, you would require a controller that would be the entry point for your application,
    and which would control the cooking process. To wrap up things, you require a
    view to which you will pass on the data from the controller, and your cooking
    will conclude.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, creating a new model is not at all difficult.
  prefs: []
  type: TYPE_NORMAL
- en: You just need to create a new PHP class inside the `<project-root>/module/Application/src/Application/Model`
    directory in just the same way as you have done all the while.
  prefs: []
  type: TYPE_NORMAL
- en: Name it `Cooking`, and set the namespace as `Application\Model`. The purpose
    of your model class will be to supply the ingredients to facilitate the cooking
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your model will look somewhat like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model is quite easy to understand because if you are careful enough and
    possess a reasonable memory, you will easily recall that the model is exactly
    the same. The only difference here is the exception-handling class. Zend provides
    `ErrorException` to handle common exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: You must feel better by now since you created a model quite easily.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a controller with the Zend framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now''s the time to create a new controller. To do that, you will have to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class inside `<project root>/module/Application/src/Application/Controller`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it `CookingController`, and set the namespace `Application\Controller`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the namespace for the model since you need the model's methods in your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the namespace for `AbstractActionController` as you need to tell Zend that
    your controller is `AbstractActionController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the namespace for `ViewModel` since you will need to render a view when
    you run the code. Your controller will look like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code that you wrote just now is a controller class that uses some other
    classes to make things work as per your requirements. Thus, the typical thing
    that you might have noticed is the `ViewModel` method. The `ViewModel` method
    is actually a constructor method to the class `ViewModel` defined in the namespace
    `Zend\View\Model\ViewModel`. The purpose of this method is to render the view
    and pass on some values from the controller if need be. The `setTerminal` method
    that belongs to the `ViewModel` class prevents any other layout from rendering
    in your view. Without this, the framework looks for a `layout.phtml` file somewhere,
    which will render the general layout of the view component. Thus, your entire
    presentation will reside inside the `index.phtml` file that you will create next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view with the Zend framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having created the controller and the model, you can proceed to create a view
    and give your application a face.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the `<project-root>/module/Application/view/application/cooking` directory,
    create a new PHP file, and name it `index.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Phtml is a special extension used in the Zend framework that tells the web server
    that the expected content in the file will be more HTML and less PHP.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, it is a way to tell the server that the file is a view component.
    Just as you have been doing all this while to create a view, you will take similar
    actions this time as well. After all, a view is a view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will create something like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we''ve defined the title. Let''s move to other parts of the code, which
    are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A simple-to-understand piece of CSS to garnish the recipes is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML part is quite simple. The difference is in the following two points:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$this->doctype()`: This is a method in the `Zend\View\Renderer\PhpRenderer`
    class that sets the `doctype` declaration for an HTML page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$this->headTitle($title)`: This is a method in the same class that sets the
    title of a page as `$title`. The remaining part is exactly the same in terms of
    usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details! Thunderbolt! Your pizza still won't be cooked. You will have to work
    more in the Zend framework. It's time to move to the *There's more…* section to
    bake your incomplete pizza.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to create a configuration related to your application module. Inside
    `<Project-root>/module/Application/config`, create a new PHP file with the name
    `module.config.php`. You need to tell the Zend framework about the routes, the
    controllers, and the views that you will use to cook the pizza.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your efforts can take the following shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A router contains routes. Routes contain the home route. The home route contains
    the type of route and routing options. The routing options contain the route and
    the default values, such as the controller name and the action name. Thus, you
    will want your `CookingController` to be active by default and the `indexAction`
    to take place by default.
  prefs: []
  type: TYPE_NORMAL
- en: The controllers contain the name that you want Zend to know your controller
    by. Actually, the name that Zend remembers your controllers by are through their
    class names minus the `Controller` word. Thus Zend will invoke your controller
    by the settings you specify for the inviolable.
  prefs: []
  type: TYPE_NORMAL
- en: Having created a view, you will want to tell Zend where your view files are.
    Inside, the `view_manager` does the same by setting the path of the template (`template_path_stack`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Still some work remains. Oh God! When will the pizza get cooked? God says:
    "Be patient and be honest. You will enjoy."'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to create a new PHP class inside `<Project-root>/module/Application`
    (with the name `Module`) so that you are able to use the routing and the related
    settings for your module. Your `Module.php` file will look somewhat like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You need to stick to the Zend system to make things right and standard. To use
    module-specific configurations, you use the settings inside the `getConfig` method.
    In order to tell Zend where the classes to be included for execution are, you
    need to use `getAutoloaderConfig`.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can say that you created the pizza successfully. You can now sit back
    on your couch and enjoy the taste. If you did not quite like the taste, there
    is always a next time!
  prefs: []
  type: TYPE_NORMAL
