- en: Chapter 4. Integrating Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：集成框架
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Cooking with Symfony
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symfony 进行烹饪
- en: Creating a controller with Symfony
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symfony 创建控制器
- en: Creating a model with Symfony
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symfony 创建模型
- en: Creating a view with Symfony
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symfony 创建视图
- en: Creating a model with the Yii framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Yii 框架创建模型
- en: Creating a controller with the Yii framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Yii 框架创建控制器
- en: Creating a view with the Yii framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Yii 框架创建视图
- en: Creating a model with the Zend framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建模型
- en: Creating a controller with the Zend framework
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建控制器
- en: Creating a view with the Zend framework
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建视图
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Before you start off, try some introspection as homework. Do you believe in
    reinventing the wheel? Do you believe in adding technical debt? If your answer
    to those questions was yes, you probably need to skip this chapter altogether.
    In all other cases, you should use a framework. Frameworks are good and nice with
    you. They help. They save time. They save effort.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始之前，试着做一些自我反思作为作业。您相信重新发明轮子吗？您相信增加技术债务吗？如果您的回答是肯定的，您可能需要完全跳过这一章。在其他所有情况下，您应该使用框架。框架对您来说很好，它们有帮助，节省时间，节省精力。
- en: Let's move back to questions. What is a technical debt? It is the amount of
    money at stake by a company where the technological architecture has been designed
    in such a way that more effort or man hours (and thus money) will be required
    to maintain the system in future. What is reinventing the wheel? It is the process
    of putting in more effort to carry out a task that was already done in the past.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到问题。什么是技术债务？它是指公司因技术架构设计得如此之差，以至于在将来维护系统需要更多的努力或人力（从而金钱）的金额。什么是重新发明轮子？它是指投入更多努力去完成过去已经完成过的任务的过程。
- en: Will you please stop scratching your head? This isn't rocket science. The analogy
    with software engineering is quite simple. You probably spend time in coding petty
    tasks, such as user input validation and password validation for each and every
    project that you create. While this is a repetition of tasks in the first place,
    it is the most vulnerable part of your code. The vulnerability is not only from
    general attackers, but also from certain very trivial mistakes, such as not cleaning
    the code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请您停止挠头？这并不是火箭科学。与软件工程的类比相当简单。您可能花费时间在编码琐碎的任务上，比如为每个创建的项目进行用户输入验证和密码验证。虽然这首先是一种任务的重复，但这是您代码中最脆弱的部分。这种脆弱性不仅来自一般的攻击者，还来自某些非常简单的错误，例如没有清理代码。
- en: You need to strategize your actions. This reinventing of the wheel is not free
    of cost. You are a highly paid developer (because you purchased a PhpStorm license
    (pun intended). Your billing agency will spend money to get work done by you.
    If you do work that is prone to errors, the billing agency will have to shell
    out more money to fix and/or maintain the same project later. Thus the agency
    is bound to spend money in the future and hence has a technical debt.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要策略性地采取行动。这种重新发明轮子的行为并非没有成本。您是一位高薪的开发者（因为您购买了 PhpStorm 许可证（有意为之）。您的计费机构将花钱让您完成工作。如果您做的工作容易出错，计费机构将不得不花费更多金钱来修复和/或维护同一项目。因此，该机构注定会在未来花钱，因此有技术债务。
- en: Please use a framework. You can take actions rapidly in building up chunks and
    pieces of your code using chunks and pieces from the framework. Your development
    process will be accelerated. You will be exposed to a library of functions for
    common tasks, database queries, and input cleaning, to name a few. The decision
    to choose a framework, however, needs a lot of thought.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用框架。您可以使用框架中的块和片段快速构建代码的块和片段，从而加快您的开发过程。您将接触到用于常见任务、数据库查询和输入清理等的函数库，仅举几例。然而，选择框架的决定需要深思熟虑。
- en: 'There are still a few dangling questions that come to mind. You need to hold
    on and stay tuned for loads of important information. There are three frameworks
    that PhpStorm can be easily embedded with: Symfony, Yii, and Zend, in the lexicographic
    order of their names.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有一些悬而未决的问题浮现在脑海中。您需要坚持下去，并保持关注，以获取大量重要信息。PhpStorm 可以轻松嵌入三个框架：Symfony、Yii 和
    Zend，按照它们名称的字典顺序排列。
- en: Cooking with Symfony
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Symfony 进行烹饪
- en: '**Symfony** is a PHP web application framework for MVC applications available
    as free software and released under the MIT license.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Symfony** 是一个免费的 MVC Web 应用程序框架，用于 PHP，并遵循 MIT 许可证发布。'
- en: To begin working with Symfony, you need to install Symfony on your local machine
    (also known as your local server). Life never lets you breathe easy. You have
    to choose from two (or more) paths to proceed. So is the case with PhpStorm.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Symfony，您需要在您的本地机器（也称为您的本地服务器）上安装Symfony。生活永远不会让您轻松呼吸。您必须从两个（或更多）路径中选择以继续。PhpStorm也是如此。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Change often leads to confusion, so it is better to make few changes in the
    Symfony directory structure and jump to create a new controller. You create a
    new controller class inside the directory `<Project-Root>/src/Acme/DemoBundle/Controller`.
    Name it `CookingController.php`. Here are a few rules to follow:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 改变往往会导致混淆，因此最好在Symfony目录结构中做出少量更改，然后跳转到创建新的控制器。您在目录`<Project-Root>/src/Acme/DemoBundle/Controller`中创建一个新的控制器类。命名为`CookingController.php`。以下是一些需要遵循的规则：
- en: By default, you should create a controller with the suffix `Controller` in the
    name
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，您应该在名称中创建一个以`Controller`结尾的控制器
- en: Each controller should extend the class `Controller` that is defined in the
    namespace `Symfony\Bundle\FrameworkBundle\Controller\Controller namespace`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个控制器都应该扩展在命名空间`Symfony\Bundle\FrameworkBundle\Controller\Controller`中定义的`Controller`类
- en: The controller should be defined in the namespace `Acme\DemoBundle\Controller`
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器应在命名空间`Acme\DemoBundle\Controller`中定义
- en: Since you will require the routing of methods as actions, you will need to use
    namespace `Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您将需要将方法的路由作为操作，因此您需要使用命名空间`Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`。
- en: You need to define a route in a configuration file (a file with the `.yml` extension)
    so that Symfony knows exactly where your controller is.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在配置文件（具有`.yml`扩展名的文件）中定义一个路由，以便Symfony确切知道您的控制器在哪里。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To install Symfony, you can choose from a simple archive download from the Symfony
    website or use Composer for installation. Composer? Yes, it's the same system
    that was described in [Chapter 2](ch02.html "Chapter 2. PHP Development"), *PHP
    Development*, and some keywords to refresh your memory are composer.json, vendor
    directory, and so on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Symfony，您可以从Symfony网站上的简单存档下载中选择，或者使用Composer进行安装。Composer？是的，它与[第2章](ch02.html
    "第2章。PHP开发")中描述的相同系统，*PHP开发*，以及一些关键词来刷新您的记忆，如composer.json、vendor目录等。
- en: 'Perform the following steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: If you want to install Symfony by downloading it from the website, you need
    to go to [http://symfony.com/download](http://symfony.com/download), select any
    of the archive formats, and download the archive to the disk.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想从网站上下载安装Symfony，您需要访问[http://symfony.com/download](http://symfony.com/download)，选择任何存档格式，并将存档下载到磁盘上。
- en: 'Once the archive has been downloaded to the disk, you can move the unzipped
    directory inside your web server document root and open it in PhpStorm. There
    are two points worth noting:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦将存档下载到磁盘上，您可以将解压缩的目录移动到您的Web服务器文档根目录内，并在PhpStorm中打开它。以下有两点需要注意：
- en: If you don't want the project to be web-based, you need not move it into the
    document root of your web server.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不想将项目作为Web项目，则无需将其移动到Web服务器的文档根目录中。
- en: If you want to create a web-based project, you can also keep the unzipped folders
    anywhere. You can then create a symbolic link inside your web server document
    root to point to this unzipped folder. This is to keep the system clean, you see.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想创建一个基于Web的项目，您也可以将解压缩文件夹放在任何地方。然后您可以在Web服务器文档根目录内创建一个符号链接，指向这个解压缩文件夹。这样做是为了保持系统整洁，您明白的。
- en: To open the project in PhpStorm, you need to go to **File** | **Open** and open
    the path of the directory where you kept the Symfony directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PhpStorm中打开项目，您需要转到**文件** | **打开**并打开您保存Symfony目录的路径。
- en: 'The composer method is a bit long, but a careful PhpStorm cookbook reader need
    not worry because the information on how to use Composer was provided in [Chapter
    2](ch02.html "Chapter 2. PHP Development"), *PHP Development*. Perform the following
    steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Composer方法可能有点长，但仔细阅读PhpStorm食谱的读者不必担心，因为如何使用Composer的信息已在[第2章](ch02.html "第2章。PHP开发")中提供，*PHP开发*。执行以下步骤：
- en: You need to specify `symfony/framework-standard-edition` as the package name,
    as shown in the following screenshot. PhpStorm will show you the list of packages
    with similar names.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要指定`symfony/framework-standard-edition`作为包名，如下截图所示。PhpStorm将显示具有相似名称的包列表。
- en: You need to specify the version number, and PhpStorm will be good to go. It
    will download the required dependencies for you.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要指定版本号，PhpStorm就会一切就绪。它会为您下载所需的依赖。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You should take care that you have a consistent Internet connection.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该确保有一个稳定的互联网连接。
- en: '![How to do it...](img/3878OT_04_01.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/3878OT_04_01.jpg)'
- en: Once the framework has been downloaded, you can restart your IDE (not mandatory)
    to let PhpStorm breathe easy after doing the heavy-duty task of downloading the
    framework for you. As soon as you restart it, PhpStorm will be able to recognize
    which framework needs to be integrated. PhpStorm will guide you through integrating
    the framework usage.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦框架下载完成，您可以重启您的IDE（非强制要求），让PhpStorm在为您下载框架的重任之后轻松一下。一旦重启，PhpStorm就能识别出需要集成的框架。PhpStorm会引导您完成框架集成的过程。
- en: You can tell PhpStorm about the directory and the type of content it will contain
    by providing the details. You just have to select some values from the dropdown,
    as shown in the following screenshot:![How to do it...](img/3878OT_04_02.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过提供详细信息来告诉PhpStorm目录及其包含的内容类型。您只需从下拉菜单中选择一些值，如下面的截图所示：![如何操作...](img/3878OT_04_02.jpg)
- en: Thus, you are good to go with Symfony. There is a `readme.md` file provided
    at the project root level. You are encouraged to read it and follow the checklist
    that is provided with it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您就可以使用Symfony了。在项目根目录提供了一个`readme.md`文件。鼓励您阅读它，并按照其中提供的清单进行操作。
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Symfony framework adheres to the model-view-controller framework. Besides
    all the benefits that MVC serves, compartmentalizing the functionality is a major
    benefit. Thus, you will group all the database-related functions in the model,
    all the business logic in the controller, and all the presentation-related functions
    (generating the HTML) in the view. So, in order to dive deep into the details
    of Symfony, you need to understand the directory structure first.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Symfony框架遵循模型-视图-控制器框架。除了MVC带来的所有好处外，功能模块化也是一个主要优势。因此，您将所有数据库相关的功能放在模型中，所有业务逻辑放在控制器中，所有与展示相关的功能（生成HTML）放在视图中。所以，为了深入了解Symfony，您首先需要了解目录结构。
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The directory structure is the basic skeleton of the project, and it is very
    important to know the directory structure before starting. Let's see the structure
    of Symfony.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目录结构是项目的骨架，在开始之前了解目录结构非常重要。让我们看看Symfony的结构。
- en: Directory structure of Symfony
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Symfony的目录结构
- en: 'When you download and install Symfony, you are provided with a directory structure
    by default. There are five directories visible: the `app`, `bin`, `src`, `vendor`,
    and `web` directories.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当您下载并安装Symfony时，您会默认获得一个目录结构。有五个可见的目录：`app`、`bin`、`src`、`vendor`和`web`目录。
- en: The `app` folder is designed to contain the application-specific resources.
    These resources include the configurations for the database connections and the
    like in the `config` directory. The `logs` directory is intended to contain the
    logs to be written by the Symfony framework application. The cache directory is
    intended to contain the cached versions of files and resources required to run
    the application. A cached version is faster than the regular version and is write-protected.
    The resource directory is designed to contain resources such as the view rendering
    pages and the like.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`app`文件夹设计用来存放应用程序特定的资源。这些资源包括`config`目录中的数据库连接配置等。`logs`目录旨在存放Symfony框架应用程序需要写入的日志。缓存目录旨在存放运行应用程序所需的文件和资源的缓存版本。缓存版本比常规版本更快，且是只读保护的。资源目录设计用来存放如视图渲染页面等资源。'
- en: The `bin` folder is designed to keep the binary files (such as `.sh`) that would
    be required by the project. The files under `bin` need to be executable because
    of their nature—to be able to be executed and perform the intended tasks independently.
    You need to be careful while providing execute permissions to files and folders.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin`文件夹设计用来存放项目所需的二进制文件（如`.sh`文件）。由于这些文件的性质，它们需要可执行权限以便能够独立执行并完成预定的任务。在提供文件和文件夹的执行权限时，您需要小心。'
- en: 'The `src` folder is designed to contain the PHP source code required by the
    project. This PHP source code can be anything: your templates, classes, and anything
    you think is related to your project.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`src` 文件夹被设计用来存放项目所需的 PHP 源代码。这些 PHP 源代码可以是任何东西：你的模板、类，以及你认为与你的项目相关的任何内容。'
- en: The `web` folder is designed to keep all the content that has to be rendered
    in a web browser over the Internet. This content includes HTML, JavaScript, CSS,
    images, icons, sprites, `robots.txt`, and so on, as and when required for the
    project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`web` 文件夹被设计用来保存所有需要在网络浏览器中渲染的内容。这些内容包括 HTML、JavaScript、CSS、图片、图标、精灵、`robots.txt`
    等，根据项目需要随时使用。'
- en: The `vendor` directory is designed to keep all the third-party tools that are
    required for the project to run. This is an excellent feature because it keeps
    the third-party code in a separate compartment, thus protecting them from accidental
    edits.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor` 目录被设计用来保存所有项目运行所需的第三方工具。这是一个非常出色的功能，因为它将第三方代码保存在一个独立的隔间中，从而保护它们免受意外编辑。'
- en: It is worth noting here that a framework sets rules for you to work. If you
    stick to those rules, you will be on the winning side. One example supposes that
    there is the plugin `X`, which you downloaded from the Internet, a part of your
    code depends on it, and there is one `config` directory available for the project
    as a whole. There is a big chance that you might end up making changes or overwriting
    the `config` file. A framework will prevent you from doing that. How? It will
    indicate to you that a configuration inside the vendor directory must not be disturbed.
    If you still proceed to make changes intentionally or unintentionally, there is
    a limit to every warranty.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得注意的是，一个框架为你设定了规则。如果你坚持这些规则，你将站在胜利的一方。一个例子是，假设你从互联网上下载了一个插件 `X`，你的代码的一部分依赖于它，项目整体有一个
    `config` 目录。有很大可能性你可能会修改或覆盖 `config` 文件。框架将阻止你这样做。它是如何做到的？它会指示你，供应商目录内的配置不得被干扰。如果你仍然故意或无意地继续进行更改，每个保证都有其限制。
- en: Mind you, "is designed to contain" means that it was the default intention.
    You can obviously store your classes wherever you want.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，"被设计用来存放"意味着这是默认的意图。你显然可以随意将你的类存储在任何地方。
- en: After you get yourself set on the directory structure, it is time to get your
    hands really dirty. Friends, Romans, Countrymen! Roll up your sleeves and do remember
    all that you shall see.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在你设置好目录结构之后，是时候真正地动手了。朋友们，罗马人，同胞们！卷起袖子，并记住你所看到的一切。
- en: Inside the `app` folder, there is the `cache` folder. As already stated, it
    is used to cache some contents precooked so that they can be rendered very quickly.
    The caching can be done on commonly used elements, such as the images, strings,
    JavaScript, CSS, and certain preprocessed data. Since the PHP being executed on
    the web server writes the caches, the user running the web server (yes, you heard
    it right) needs permission to write into the `cache` folder. Exactly the same
    is true for the logs directory as well. You need to set permissions to the two
    folders mentioned as `777`. You can do even better. You can change the ownership
    of the two directories such that they are now owned by `www-data` or the Apache
    user (the username under the Linux environment). Try the `chown` or `chmod` command.
    Whatever you do, make sure you are doing it right. Ownership/permission changes
    are actions that can prove to be an issue, so don't do it when you feel sleepy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app` 文件夹内部，有一个 `cache` 文件夹。正如之前所述，它用于缓存一些预先准备好的内容，以便可以非常快速地渲染。缓存可以应用于常用的元素，例如图片、字符串、JavaScript、CSS
    以及某些预处理数据。由于在 Web 服务器上执行的 PHP 会写入缓存，因此运行 Web 服务器（是的，你没听错）的用户需要写入 `cache` 文件夹的权限。对于日志目录也是如此。你需要将这两个文件夹的权限设置为
    `777`。你可以做得更好。你可以更改这两个目录的所有权，使它们现在由 `www-data` 或 Apache 用户（Linux 环境下的用户名）拥有。尝试使用
    `chown` 或 `chmod` 命令。无论你做什么，都要确保你做对了。所有权/权限更改是可能引起问题的行为，所以不要在感到困倦时进行更改。
- en: Did you enjoy playing in the mud? More mud follows.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你喜欢在泥潭中玩耍吗？还有更多的泥潭在等着你。
- en: Go back to a point in history where you were really very hungry and were attempting
    to bake pizza using some cheese, salt, capsicum, and tomato (as a fallback topping).
    Remember? That was some freestyle cooking. What if you want more disciplined adventures
    in life? Try following the Symfony way.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下历史上的某个时刻，你非常饿，试图用一些奶酪、盐、辣椒和番茄（作为备用配料）烘焙披萨。还记得吗？那是一种自由式烹饪。如果你想在生活中有更多有纪律的冒险？尝试遵循Symfony的方式。
- en: Creating a controller with Symfony
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Symfony创建控制器
- en: So you will have to create a new controller first. This controller will be responsible
    for making decisions about how you will cook your Pizza.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你首先需要创建一个新的控制器。这个控制器将负责决定你如何烹饪你的披萨。
- en: Change often leads to confusion, so it is better to make few changes in the
    Symfony directory structure and just jump to create a new controller.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 改变往往会导致困惑，所以最好是只在Symfony目录结构中做少量更改，然后直接创建一个新的控制器。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create a new controller class inside the directory `<Project-Root>/src/Acme/DemoBundle/Controller`.
    Name it `CookingController.php`. There are a few rules to follow:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录`<Project-Root>/src/Acme/DemoBundle/Controller`中创建一个新的控制器类。命名为`CookingController.php`。有一些规则需要遵循：
- en: By default, you should create a controller with the suffix `Controller` in the
    name
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，你应该在名称中带有后缀`Controller`的控制器。
- en: Each controller should extend a class `Controller` that is defined in the namespace
    `Symfony\Bundle\FrameworkBundle\Controller\Controller`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个控制器都应该扩展在命名空间`Symfony\Bundle\FrameworkBundle\Controller\Controller`中定义的类`Controller`。
- en: The controller should be defined in the namespace `Acme\DemoBundle\Controller`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器应该定义在命名空间`Acme\DemoBundle\Controller`中。
- en: Since you will be required to route the methods as actions, you will need to
    use namespace `Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于你需要将方法作为操作进行路由，因此你需要使用命名空间`Sensio\Bundle\FrameworkExtraBundle\Configuration\Route`。
- en: You need to define a route in a configuration file (a file with the `.yml` extension)
    so that Symfony knows exactly where your controller is.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要在配置文件（一个以`.yml`扩展名结尾的文件）中定义一个路由，以便Symfony确切知道你的控制器在哪里。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can define the route later.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以稍后定义路由。
- en: 'So, your first controller looks like the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你的第一个控制器看起来像以下代码：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the content of the YML document (located at `<Project-root>/src/Acme/DemoBundle/Resources/config/routing.yml>`)
    will be (appended by):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 并且YML文档的内容（位于`<Project-root>/src/Acme/DemoBundle/Resources/config/routing.yml`）将被（附加）：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The human mind is a very lazy machine. No sooner does it see any technical detail,
    than it starts getting confused. In order to eliminate the doubt, the working
    is explained here. Hang on. Begin with the source code because PHP is something
    you are more comfortable with. Here is the working.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 人类的大脑是一个非常懒惰的机器。它一看到任何技术细节，就会开始感到困惑。为了消除疑惑，这里将进行解释。请耐心等待。我们从源代码开始，因为PHP是你更熟悉的东西。以下是工作原理。
- en: The code starts with the declaration of a namespace that means you declared
    a virtual region or boundary for the elements of this controller. Technically,
    it is known as the namespace.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从声明一个命名空间开始，这意味着你为这个控制器的元素声明了一个虚拟区域或边界。技术上，这被称为命名空间。
- en: The code proceeds by including such namespaces for the base `Controller` and
    the routing system (denoted by `Route`).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过包含这样的命名空间来继续，这些命名空间用于基本的`Controller`和路由系统（用`Route`表示）。
- en: If you want to include some presentation-layer templates, you can use the namespace
    of the templating engine as well. Twig is the name given to the default templating
    engine shipped with the default installation of Symfony.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想包含一些表示层模板，你也可以使用模板引擎的命名空间。在Symfony的默认安装中，默认的模板引擎被命名为Twig。
- en: Here, the most important aspect of a controller is that `CookingController`
    is a controller, so it is bound to extend the `Controller` class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，控制器最重要的一个方面是`CookingController`是一个控制器，因此它必然要扩展`Controller`类。
- en: Inside the class are some simple methods that have public access. Did you say
    insecure? No, no dear! Since they are to be made available through a web browser,
    the access level has to be public.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在类内部有一些简单的公共访问方法。你说这是不安全的吗？不，亲爱的！由于它们将通过网络浏览器提供，访问级别必须是公共的。
- en: The actual cooking starts by giving your dish a name. For this purpose, the
    method `nameDishAction` has the dish name as the parameter. Until now, things
    have been normal.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的烹饪过程从给你的菜肴起一个名字开始。为此，`nameDishAction`方法将菜肴名称作为参数。到目前为止，一切都很正常。
- en: There is this annotation `@Route("/nameDish/{dishname}", name="_cook_dish")`,
    which adds the twist to the tale. `Route` creates a map between the action and
    the URL. This is another form of dependency injection. So, the name of the action
    `nameDish` is mapped with a name for the Symfony system (`_cook_dish`). If you
    look more closely, you will see that it also defines the way you will use this
    controller. The value specified in the braces is the placeholder for the argument
    that will be passed to this action.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有这样一个注解`@Route("/nameDish/{dishname}", name="_cook_dish")`，给故事增添了转折。`Route`在动作和URL之间创建了一个映射。这是另一种形式的依赖注入。所以，动作的名称`nameDish`与Symfony系统的名称`_cook_dish`相映射。如果你更仔细地看，你还会看到它还定义了你将如何使用这个控制器。括号中指定的值是传递给这个动作的参数的占位符。
- en: Regarding the YML contents, it is worth mentioning that YML is actually YAML
    and is pronounced yamel. This is similar to any markup language with a key and
    its corresponding values. So, your resource will indicate the name of the controller
    you just created, the type your controller will be referenced as, and the prefix
    that will be required to be put with the actions as (to be) defined in your controller.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于YML内容，值得一提的是，YML实际上是YAML，发音为yamel。这类似于任何具有键及其对应值的标记语言。所以，你的资源将指示你刚刚创建的控制器名称，你的控制器将被引用的类型，以及需要在控制器中定义的动作前添加的前缀。
- en: You just created a new Symfony controller to kick-start cooking. By the way,
    do you remember the last time you used the terminology dependency injection?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了一个新的Symfony控制器来启动烹饪。顺便问一下，你还记得你上次使用依赖注入这个术语吗？
- en: Creating a model with Symfony
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Symfony创建模型
- en: How does an application remember things? Persistence is the name of the phenomenon
    by which any application maintains its state. To have persistence, you need to
    have data structure(s). To manage data structures in a typical engineering perspective,
    you can use models—the M in the MVC paradigm.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序是如何记住事物的？持久性是任何应用程序维持其状态的名称。为了有持久性，你需要有数据结构。从典型的工程角度来看，你可以使用模型——MVC模式中的M。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Remember that you have some toppings as well as some ingredients to be added
    to your pizza dish. So, typically, you need an array to store (represent) the
    toppings and the ingredients. This is a green signal to go ahead and use model.
    But again, there is a twist in the tale. Symfony has no default model system in
    place. Bad design? Maybe not. It was originally designed to be a request-response
    system. Symfony looks to you for this purpose. You can create a model freestyle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你有一些配料以及一些需要添加到你的披萨菜肴中的配料。所以，通常，你需要一个数组来存储（表示）配料和配料。这是前进并使用模型的绿灯。但故事中还有转折。Symfony没有默认的模型系统。糟糕的设计？也许不是。它最初被设计成一个请求-响应系统。Symfony期望你来完成这个目的。你可以自由地创建模型。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Start by creating a new directory at the same level as the controller. Name
    it `Model`. This is descriptive naming, you see.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在控制器同一级别创建一个新的目录。命名为`Model`。这是描述性命名，你看到了。
- en: Inside the `Model` directory, use PhpStorm's new class wizard to create a new
    class. Name it `CookingModel.php`. It is not that Symfony will not accept anything
    other than `/*Model$/` in the class name.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model`目录内，使用PhpStorm的新类向导创建一个新的类。命名为`CookingModel.php`。并不是说Symfony不会接受除了`/*Model$/`之外的其他类名。
- en: 'You are encouraged to stick to names similar to the default Symfony names.
    Your model will look somewhat like the following code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被鼓励使用与默认Symfony名称相似的名字。你的模型将看起来像以下代码：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since you just created a new model, the model will be of no use unless it is
    used inside a controller. Revisit `CookingController`. It had no action to actually
    cook a pizza. `Acme\DemoBundle\Model\CookingModel` should be appended to the controller
    file header. When you add the required action, you will do something like the
    following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你刚刚创建了一个新的模型，除非它在控制器内部使用，否则模型将没有用处。回顾`CookingController`。它没有实际烹饪披萨的动作。`Acme\DemoBundle\Model\CookingModel`应该附加到控制器文件头部。当你添加所需动作时，你将做如下代码：
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now that you already have some experience in cooking, the model class is quite
    simple. If you recall, the content of the model is just a smart copy-paste from
    the `PizzaDish` class.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有一些烹饪经验了，模型类相当简单。如果你还记得，模型的内容只是从`PizzaDish`类中智能复制粘贴过来的。
- en: The namespace for the `CommonException` class was used to catch some exceptions
    if they occurred while cooking. This is safe cooking indeed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommonException`类的命名空间被用来捕获在烹饪过程中可能发生的异常。这确实是一种安全的烹饪方式。'
- en: The `getIngredients` method processes the available ingredients and returns
    an array containing the ingredients. It also prevents your pizza from becoming
    unenjoyable without capsicum—it adds tomato as a fallback ingredient.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`getIngredients`方法处理可用的配料，并返回一个包含配料的数组。它还防止你的披萨在没有辣椒的情况下变得不好吃——它添加番茄作为后备配料。'
- en: The `getToppings` method functions similarly. It provides a list of the toppings
    you would like to add to make your pizza yummier.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`getToppings`方法的功能类似。它提供了一个你想要添加以使你的披萨更美味的配料列表。'
- en: Inside the controller, the model is used just like any other class. Inside the
    `startCookingAction`, all you did was create a new model object and obtain the
    value from the model.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器内部，模型的使用就像任何其他类一样。在`startCookingAction`中，你所做的只是创建一个新的模型对象并从模型中获取值。
- en: Even simpler! So, you created a new model in Symfony. Congratulations! You can
    safely gobble up the pizza you just baked (or cooked—mind you, you are an engineer
    and not a cook, so the difference between cooking and baking should not bother
    you).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更简单！所以，你在Symfony中创建了一个新的模型。恭喜！你可以安全地享用你刚刚烤好的披萨（或者烹饪——请注意，你是一名工程师而不是厨师，所以烹饪和烘焙之间的区别不应该让你烦恼）。
- en: Creating a view with Symfony
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Symfony创建视图
- en: You can skip this section if you have planned to use Symfony to create a command-line
    software. But if you want to write software where you need to show beautiful presentation,
    you need to follow this section very carefully. The face of your application is
    known as view.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划使用Symfony创建命令行软件，你可以跳过这一部分。但如果你想编写需要展示美丽界面的软件，你需要非常仔细地遵循这一部分。应用程序的面孔被称为视图。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to create views in a particular directory if you stick to the default
    Symfony settings. The name of the directory in the present installation is `<Project-root>/symfony/src/Acme/DemoBundle/Resources/views`.
    You also have to create a directory that contains the name of the controller minus
    the word `controller`. Thus, you will create a directory with the name `Cooking`
    as you created a controller with the name `CookingController`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你坚持默认的Symfony设置，你需要在一个特定的目录中创建视图。当前安装中目录的名称是`<Project-root>/symfony/src/Acme/DemoBundle/Resources/views`。你还必须创建一个包含控制器名称去掉`controller`单词的目录。因此，当你创建名为`CookingController`的控制器时，你会创建一个名为`Cooking`的目录。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: While naming the file, you have to keep in mind that you will name the view
    file with the extension `.html.twig`, and the filename will be the same as the
    name of the action minus `Action`, which will render the view.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名文件时，你必须记住，你将使用扩展名`.html.twig`命名视图文件，文件名将与动作名称相同，去掉`Action`，这将渲染视图。
- en: So, you can have views with the name `index.html.twig`, `nameDish.html.twig`,
    and `startCooking.html.twig` as you created `indexAction`, `nameDishAction`, and
    `startCookingAction`, respectively.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以有名为`index.html.twig`、`nameDish.html.twig`和`startCooking.html.twig`的视图，分别对应你创建的`indexAction`、`nameDishAction`和`startCookingAction`。
- en: 'By this time, you must be asking what bird **TWIG** is. You must also be thinking
    about starting to curse the author for having provided so much information. Dear,
    dear, dear. Art is long and life is short. Twig is a templating engine for PHP.
    It is designed to inject dynamic behavior into HTML pages. This is especially
    helpful for user interface developers who have little knowledge about the server-side
    language, which renders the HTML onto a web browser. Assuming you have to create
    a view, you will do something like this for `startCookingAction`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能想知道**TWIG**是什么鸟。你也可能正在想开始诅咒作者，因为他提供了如此多的信息。亲爱的，亲爱的，亲爱的。艺术是长久的，生命是短暂的。Twig是一个用于PHP的模板引擎。它被设计用来将动态行为注入HTML页面。这对于对服务器端语言知之甚少的用户界面开发者来说特别有帮助，这些语言将HTML渲染到网页浏览器上。假设你必须创建一个视图，你将为`startCookingAction`做如下操作：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The immediate remedy for the visual injury caused to you just now is to explain
    to you how this code works. An overview of this code is that it is for an HTML
    page.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对你刚才所受的视觉伤害的即时补救措施是向你解释这段代码是如何工作的。这段代码的概述是它是为HTML页面而设计的。
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Inside the HTML `title` tag, there is `{{ dishname }}`, which is the dynamic
    content. If you revisit the method `startCookingAction` inside `CookingController`,
    you will notice that you returned an array with the index `dishname`. The placeholder
    `dishname` assumes its value from the controller action. If the controller returns
    an array, you will obviously require iterating the entire array to use the values
    in the view. A for-loop begins and ends with `for` and `endfor` respectively.
    Thus, the loop iterates over the array returned from the controller (`$ingredients`
    and `$toppings`) with the array index as key and the array values as the ingredient
    and topping respectively. The values thus obtained (ingredient and topping respectively)
    are used in the view.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML的`title`标签内，有`{{ dishname }}`，这是动态内容。如果你重新访问`CookingController`中的`startCookingAction`方法，你会注意到你返回了一个包含`dishname`索引的数组。占位符`dishname`从控制器动作中获取其值。如果你控制器返回一个数组，你显然需要迭代整个数组来在视图中使用这些值。for循环以`for`开始，以`endfor`结束。因此，循环遍历控制器返回的数组（`$ingredients`和`$toppings`），数组索引作为键，数组值作为配料和配料分别。因此获得的价值（配料和配料分别）在视图中使用。
- en: You just cooked your pizza using a new method. Do you love it? There is no pun
    intended here.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚使用新方法烤了披萨。你喜欢吗？这里没有双关语。
- en: Creating a model with the Yii framework
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Yii框架创建模型
- en: The roadmap begins with creating a model. Then, create a controller and use
    the model you created. Finally, give a face to your application by creating a
    view. Use the model to get data and pass it on to the view.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 路线图从创建模型开始。然后创建控制器并使用你创建的模型。最后，通过创建视图给你的应用程序一个面孔。使用模型获取数据并将其传递到视图中。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Creating a new model is extremely easy. It is no different to creating a simple
    PHP class in PhpStorm. To create a new model, you need to create a new PHP class
    inside `<project-root>/app/models`. Your model will look like the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的模型非常简单。它与在PhpStorm中创建一个简单的PHP类没有区别。要创建一个新的模型，你需要在`<project-root>/app/models`中创建一个新的PHP类。你的模型看起来可能像以下代码：
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This model is exactly the same as the model you created in Symfony. Remember?
    The namespace of the model is declared so that any other class is able to access
    the methods defined in the model.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型与你创建的Symfony模型完全相同。记得吗？模型的命名空间被声明，以便任何其他类都能访问模型中定义的方法。
- en: The exception available is defined in the `ErrorException` class, so it is used
    to handle the exception.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的异常在`ErrorException`类中定义，因此用于处理异常。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is why they say that your business logic is what really matters. So, irrespective
    of the framework, your data class (the model) remained the same.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为他们说你的业务逻辑才是真正重要的。所以，无论框架如何，你的数据类（模型）保持不变。
- en: Creating a controller with the Yii framework
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Yii框架创建控制器
- en: To create a new controller, create a new PHP class inside the controller folder.
    Name it `CookingController.php`. The reason for this? You have been doing this
    for a while now, so you should continue doing it lest your stomach gets angry.
    Keep cooking, comrade.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的控制器，请在控制器文件夹内创建一个新的PHP类。命名为`CookingController.php`。这样做的原因是什么？你现在已经这样做了一段时间了，所以你应该继续这样做，以免你的胃生气。继续烹饪，同志。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To create a new controller, go to a new PHP class. Use the name `CookingController.php`.
    Do remember the directory `<project-root>/app/controllers`. Your controller will
    look somewhat like the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的控制器，前往一个新的PHP类。使用名称`CookingController.php`。请记住目录`<project-root>/app/controllers`。你的控制器看起来可能像以下代码：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: On careful examination of the controller, you will have mixed feelings. You
    will be able to see some known-to-you elements in the code and some new elements.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查控制器后，你会有复杂的感受。你会在代码中看到一些你熟悉的部分和一些新的元素。
- en: The namespace of the controller is declared as `app\controllers`. This means
    that if some other controller needs to use the methods (actions) defined in this
    controller, that controller will have to use this namespace.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的命名空间声明为`app\controllers`。这意味着如果其他控制器需要使用在此控制器中定义的方法（动作），那么该控制器将必须使用此命名空间。
- en: Since the data is being fetched from the model you created, in order to use
    the model's methods, you need to use the namespace in which the model is declared.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据是从你创建的模型中获取的，为了使用模型的方法，你需要使用模型声明的命名空间。
- en: You need to use the namespace where the parent controller (defined by the framework)
    is defined.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用定义父控制器（由框架定义）的命名空间。
- en: 'The controller contains an action `actionIndex`. In Yii, the actions defined
    follow this naming convention: the word `action` followed by the actual purpose
    of the action. Thus, the `actionIndex` will be the default action for the controller.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器包含一个名为 `actionIndex` 的动作。在 Yii 中，定义的动作遵循以下命名约定：以 `action` 开头，后跟动作的实际目的。因此，`actionIndex`
    将是控制器的默认动作。
- en: 'The action requires a view as well. It is called by the method render: the
    first argument being the name of the view and the other argument the list of values
    to be passed on from the controller to the view.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 动作还需要一个视图。它通过 `render` 方法调用，第一个参数是视图的名称，另一个参数是从控制器传递到视图的值列表。
- en: Creating a view with the Yii framework
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Yii 框架创建视图
- en: Now, create a view to make your application complete. In creating a new view,
    you need to be careful.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个视图以使您的应用程序完整。在创建新视图时，您需要小心。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The proper location of a view in a project is the `<project-root>/views/<first-name-of-the-controller>`
    directory. Thus, you will require a new directory under the views. Create a new
    directory with the name `cooking`. Inside this directory, create a new PHP file
    with the name `index.php`. Having done that, you need to write some basic HTML
    code to make a view. You might write something like the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 视图在项目中的适当位置是 `<project-root>/views/<控制器首字母>` 目录。因此，您需要在视图下创建一个新目录。创建一个名为 `cooking`
    的新目录。在此目录内，创建一个名为 `index.php` 的新 PHP 文件。完成这些后，您需要编写一些基本的 HTML 代码来创建视图。您可能会编写如下代码：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `html` part in the code is standard and does not use any other framework.
    The CSS is also kept basic to keep the code readable and simple to understand.
    When you use the namespace `YII/helpers/HTML`, it brings to your control the HTML
    helper class that performs basic HTML operations, such as encoding the input that
    might contain some special characters into HTML entities, and so on. The framework
    sets the charset (the character set) to be used on the web page.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的 `html` 部分是标准的，不使用任何其他框架。CSS 也保持基本，以保持代码可读性和易于理解。当您使用命名空间 `YII/helpers/HTML`
    时，它将 HTML 辅助类置于您的控制之下，该类执行基本的 HTML 操作，例如将可能包含特殊字符的输入编码为 HTML 实体等。框架设置网页上使用的字符集（字符集）。
- en: The data that you passed on from the controller is now available in your view.
    The variable name is the name of the array index that you passed, and the value
    of the variable is the array value that was set at that array index. Thus, you
    will have `$dishname`, `$ingredients`, and `$toppings` in your view. In order
    to display the contents of the array, you just need to do a simple PHP `foreach`
    to iterate over the array, and your cooking process will be complete.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您从控制器传递的数据现在在您的视图中可用。变量的名称是您传递的数组索引的名称，变量的值是在该数组索引处设置的数组值。因此，您将在视图中拥有 `$dishname`、`$ingredients`
    和 `$toppings`。为了显示数组的内容，您只需要进行简单的 PHP `foreach` 循环来遍历数组，您的烹饪过程将完成。
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is not only `foreach` that will do the trick—you can use whichever loop control
    structure you like.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅 `foreach` 可以做到这一点——您可以使用您喜欢的任何循环控制结构。
- en: Creating a model with the Zend framework
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建模型
- en: You will require a new model to make all the ingredients and the toppings available.
    Then, you would require a controller that would be the entry point for your application,
    and which would control the cooking process. To wrap up things, you require a
    view to which you will pass on the data from the controller, and your cooking
    will conclude.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个新模型来使所有配料和配料可用。然后，您需要一个控制器，它将是您应用程序的入口点，并控制烹饪过程。为了总结，您需要一个视图，您将从中传递控制器中的数据，您的烹饪过程将结束。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: This time, creating a new model is not at all difficult.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，创建新模型一点也不难。
- en: You just need to create a new PHP class inside the `<project-root>/module/Application/src/Application/Model`
    directory in just the same way as you have done all the while.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需在 `<project-root>/module/Application/src/Application/Model` 目录中创建一个新的 PHP
    类，就像您一直做的那样。
- en: Name it `Cooking`, and set the namespace as `Application\Model`. The purpose
    of your model class will be to supply the ingredients to facilitate the cooking
    process.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为 `Cooking`，并将命名空间设置为 `Application\Model`。您的模型类的目的是提供配料以方便烹饪过程。
- en: 'Your model will look somewhat like the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你的模型将类似于以下代码：
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The model is quite easy to understand because if you are careful enough and
    possess a reasonable memory, you will easily recall that the model is exactly
    the same. The only difference here is the exception-handling class. Zend provides
    `ErrorException` to handle common exceptions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 模型很容易理解，因为如果你足够细心并且有合理的记忆力，你将很容易回忆起模型确实是相同的。这里唯一的区别是异常处理类。Zend 提供了 `ErrorException`
    来处理常见的异常。
- en: You must feel better by now since you created a model quite easily.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，因为你很容易就创建了一个模型，你应该感觉好多了。
- en: Creating a controller with the Zend framework
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建控制器
- en: 'Now''s the time to create a new controller. To do that, you will have to perform
    the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一个新的控制器了。为此，你必须执行以下步骤：
- en: Create a new class inside `<project root>/module/Application/src/Application/Controller`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<project root>/module/Application/src/Application/Controller` 中创建一个新的类。
- en: Name it `CookingController`, and set the namespace `Application\Controller`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名为 `CookingController`，并设置名字空间 `Application\Controller`。
- en: Use the namespace for the model since you need the model's methods in your code.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你需要在代码中使用模型的方法，所以使用模型的名字空间。
- en: Use the namespace for `AbstractActionController` as you need to tell Zend that
    your controller is `AbstractActionController`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你需要告诉 Zend 你的控制器是 `AbstractActionController`，所以使用 `AbstractActionController`
    的名字空间。
- en: 'Use the namespace for `ViewModel` since you will need to render a view when
    you run the code. Your controller will look like the following code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ViewModel` 的名字空间，因为当你运行代码时，你需要渲染一个视图。你的控制器将类似于以下代码：
- en: '[PRE9]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code that you wrote just now is a controller class that uses some other
    classes to make things work as per your requirements. Thus, the typical thing
    that you might have noticed is the `ViewModel` method. The `ViewModel` method
    is actually a constructor method to the class `ViewModel` defined in the namespace
    `Zend\View\Model\ViewModel`. The purpose of this method is to render the view
    and pass on some values from the controller if need be. The `setTerminal` method
    that belongs to the `ViewModel` class prevents any other layout from rendering
    in your view. Without this, the framework looks for a `layout.phtml` file somewhere,
    which will render the general layout of the view component. Thus, your entire
    presentation will reside inside the `index.phtml` file that you will create next.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才编写的代码是一个控制器类，它使用其他一些类来按照你的要求使事情正常工作。因此，你可能已经注意到的典型事情是 `ViewModel` 方法。实际上，`ViewModel`
    方法是定义在 `Zend\View\Model\ViewModel` 命名空间中的 `ViewModel` 类的构造方法。这个方法的目的在于渲染视图，并在必要时从控制器传递一些值。属于
    `ViewModel` 类的 `setTerminal` 方法防止在视图中渲染任何其他布局。如果没有这个方法，框架会在某个地方寻找 `layout.phtml`
    文件，这将渲染视图组件的一般布局。因此，你的整个展示将位于你将要创建的 `index.phtml` 文件中。
- en: Creating a view with the Zend framework
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Zend 框架创建视图
- en: Having created the controller and the model, you can proceed to create a view
    and give your application a face.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了控制器和模型之后，你可以继续创建视图，给你的应用程序一个外观。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Go to the `<project-root>/module/Application/view/application/cooking` directory,
    create a new PHP file, and name it `index.phtml`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 `<project-root>/module/Application/view/application/cooking` 目录，创建一个新的 PHP
    文件，并将其命名为 `index.phtml`。
- en: Phtml is a special extension used in the Zend framework that tells the web server
    that the expected content in the file will be more HTML and less PHP.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Phtml 是在 Zend 框架中使用的特殊扩展名，它告诉 web 服务器文件中预期的内容将是更多 HTML 而不是 PHP。
- en: In other words, it is a way to tell the server that the file is a view component.
    Just as you have been doing all this while to create a view, you will take similar
    actions this time as well. After all, a view is a view.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 换句话说，这是一种告诉服务器该文件是一个视图组件的方式。就像你一直这样做来创建视图一样，这次你也将采取类似的行动。毕竟，视图就是视图。
- en: 'You will create something like the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将创建类似于以下代码的内容：
- en: '[PRE10]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we''ve defined the title. Let''s move to other parts of the code, which
    are as follows:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经定义了标题。让我们转到代码的其他部分，如下所示：
- en: '[PRE11]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A simple-to-understand piece of CSS to garnish the recipes is as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一段简单易懂的 CSS 代码，用于装饰食谱：
- en: '[PRE12]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The HTML part is quite simple. The difference is in the following two points:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 部分相当简单。区别在于以下两点：
- en: '`$this->doctype()`: This is a method in the `Zend\View\Renderer\PhpRenderer`
    class that sets the `doctype` declaration for an HTML page'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->doctype()`: 这是 `Zend\View\Renderer\PhpRenderer` 类中的一个方法，用于设置 HTML 页面的
    `doctype` 声明。'
- en: '`$this->headTitle($title)`: This is a method in the same class that sets the
    title of a page as `$title`. The remaining part is exactly the same in terms of
    usage.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$this->headTitle($title)`: 这是同一类中的一个方法，用于将页面的标题设置为 `$title`。在用法方面，剩余部分完全相同。'
- en: Details! Thunderbolt! Your pizza still won't be cooked. You will have to work
    more in the Zend framework. It's time to move to the *There's more…* section to
    bake your incomplete pizza.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息！雷鸣！您的披萨仍然没有做好。您需要在 Zend 框架中做更多的工作。现在是时候转到 *还有更多…* 部分来烘烤您的不完整的披萨了。
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You need to create a configuration related to your application module. Inside
    `<Project-root>/module/Application/config`, create a new PHP file with the name
    `module.config.php`. You need to tell the Zend framework about the routes, the
    controllers, and the views that you will use to cook the pizza.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建与您的应用程序模块相关的配置。在 `<Project-root>/module/Application/config` 目录下，创建一个名为
    `module.config.php` 的新 PHP 文件。您需要告诉 Zend 框架您将用于制作披萨的路由、控制器和视图。
- en: 'Your efforts can take the following shape:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您的努力可以呈现以下形式：
- en: '[PRE13]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A router contains routes. Routes contain the home route. The home route contains
    the type of route and routing options. The routing options contain the route and
    the default values, such as the controller name and the action name. Thus, you
    will want your `CookingController` to be active by default and the `indexAction`
    to take place by default.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器包含路由。路由包含主页路由。主页路由包含路由类型和路由选项。路由选项包含路由和默认值，例如控制器名称和动作名称。因此，您希望您的 `CookingController`
    默认激活，并且 `indexAction` 默认执行。
- en: The controllers contain the name that you want Zend to know your controller
    by. Actually, the name that Zend remembers your controllers by are through their
    class names minus the `Controller` word. Thus Zend will invoke your controller
    by the settings you specify for the inviolable.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器包含您希望 Zend 通过其名称识别的名称。实际上，Zend 通过去除 `Controller` 单词来记住您的控制器名称。因此，Zend 将通过您指定的不可侵犯的设置来调用您的控制器。控制器包含您希望
    Zend 通过其名称识别的名称。实际上，Zend 通过去除 `Controller` 单词来记住您的控制器名称。因此，Zend 将通过您指定的不可侵犯的设置来调用您的控制器。控制器包含您希望
    Zend 通过其名称识别的名称。实际上，Zend 通过去除 `Controller` 单词来记住您的控制器名称。因此，Zend 将通过您指定的不可侵犯的设置来调用您的控制器。
- en: Having created a view, you will want to tell Zend where your view files are.
    Inside, the `view_manager` does the same by setting the path of the template (`template_path_stack`).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了视图后，您将想要告诉 Zend 您的视图文件在哪里。在内部，`view_manager` 通过设置模板路径（`template_path_stack`）来完成同样的工作。
- en: 'Still some work remains. Oh God! When will the pizza get cooked? God says:
    "Be patient and be honest. You will enjoy."'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然还有一些工作要做。哦，上帝！披萨什么时候能做好？上帝说：“要有耐心，要诚实。你会享受的。”
- en: 'You have to create a new PHP class inside `<Project-root>/module/Application`
    (with the name `Module`) so that you are able to use the routing and the related
    settings for your module. Your `Module.php` file will look somewhat like the following
    code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在 `<Project-root>/module/Application` 目录下创建一个新的 PHP 类（命名为 `Module`），这样您才能使用您模块的路由和相关设置。您的
    `Module.php` 文件将看起来像以下代码：
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You need to stick to the Zend system to make things right and standard. To use
    module-specific configurations, you use the settings inside the `getConfig` method.
    In order to tell Zend where the classes to be included for execution are, you
    need to use `getAutoloaderConfig`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要坚持使用 Zend 系统，以确保事情正确且标准化。要使用特定模块的配置，您需要在 `getConfig` 方法内部使用设置。为了告诉 Zend 执行时需要包含的类，您需要使用
    `getAutoloaderConfig`。
- en: Now you can say that you created the pizza successfully. You can now sit back
    on your couch and enjoy the taste. If you did not quite like the taste, there
    is always a next time!
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以宣称您已经成功制作了披萨。您现在可以坐回沙发上，享受美味。如果您不太喜欢这个味道，总有下一次的机会！
