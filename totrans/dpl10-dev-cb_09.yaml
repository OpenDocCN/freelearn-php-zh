- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Creating Custom Entity Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义实体类型
- en: In [*Chapter 6*](B18548_06.xhtml#_idTextAnchor217), *Accessing and Working with
    Entities*, we explored manipulating individual entities. This chapter covers creating
    custom entity types for custom data models. **Entities** in Drupal are made up
    of different entity types. **Entity types** are defined as annotated plugins.
    Each entity is an instance of its entity type class. Entity types can also be
    enhanced to have different classes based on their bundle. You will learn how to
    implement your own custom entity in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B18548_06.xhtml#_idTextAnchor217)，*访问和操作实体*中，我们探讨了操作单个实体。本章涵盖了为自定义数据模型创建自定义实体类型。Drupal中的**实体**由不同的实体类型组成。**实体类型**定义为注解插件。每个实体是其实体类型类的实例。实体类型也可以根据其捆绑进行增强，以具有不同的类。您将在本章中学习如何实现自己的自定义实体。
- en: 'In this chapter, we will go through the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Using custom classes for entity bundles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义类为实体捆绑
- en: Creating a configuration entity type
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建配置实体类型
- en: Creating a content entity type
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建内容实体类型
- en: Creating a bundle for a content entity type
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为内容实体类型创建捆绑
- en: Implementing access control for an entity
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现实体的访问控制
- en: Providing a custom storage handler
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供自定义存储处理程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require a custom module that is not installed. Drupal will
    not register a new entity type or update entity types automatically for already-installed
    modules. The *There’s more…* section of the recipes will explain how to install
    or update entity types for already-installed modules.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一个未安装的自定义模块。Drupal不会自动注册新的实体类型或更新已安装模块的实体类型。菜谱中的*更多内容*部分将解释如何为已安装的模块安装或更新实体类型。
- en: 'In the following recipes, the module name is `mymodule`. Replace instances
    of `mymodule` with your module name as appropriate in your code. You can find
    the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下菜谱中，模块名称为`mymodule`。请根据您的代码适当替换`mymodule`实例。您可以在GitHub上找到本章使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09)。
- en: Using custom classes for entity bundles
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义类为实体捆绑
- en: Each entity is instantiated with its entity type class. A `\Drupal\node\Entity\Node`
    and a `\Drupal\taxonomy\Entity\Term` regardless of the entity’s bundle. Drupal
    allows altering entity information to provide alternative classes when an entity
    of a specific bundle is instantiated. Entity bundles are often used for different
    specific business logic. This feature allows the creation of classes with specific
    business logic associated with fields on the bundle.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个实体都是使用其实体类型类实例化的。一个`\Drupal\node\Entity\Node`和一个`\Drupal\taxonomy\Entity\Term`，无论实体的捆绑如何。Drupal允许在实例化特定捆绑的实体时更改实体信息，以提供替代类。实体捆绑通常用于不同的特定业务逻辑。此功能允许创建与捆绑字段相关的特定业务逻辑的类。
- en: In this recipe, we will create an entity bundle class to be used when there
    is a **Recipe** node.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个实体捆绑类，用于当有**菜谱**节点时使用。
- en: Getting started
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In this recipe, we will be using the **Recipe** content type provided by the
    Umami demo installation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用Umami演示安装提供的**菜谱**内容类型。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace, which is where
    we will create our bundle class:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Entity`目录。这将为`\Drupal\mymodule\Entity`命名空间，我们将在这里创建我们的捆绑类：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a file named `Recipe.php` in the newly created directory so that we can
    define the `Recipe` class to use for our **Recipe** nodes.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个名为`Recipe.php`的文件，以便我们可以定义用于我们的**菜谱**节点的`Recipe`类。
- en: 'The `Recipe` class will extend `\Drupal\node\Entity\Node`. Bundle classes must
    extend the class for its entity type:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Recipe`类将扩展`\Drupal\node\Entity\Node`。捆绑类必须扩展其实体类型的类：'
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If a bundle class does not extend the class for an entity type, Drupal will
    throw a `BundleClassInheritanceException` exception when processing entity type
    definitions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果捆绑类没有扩展实体类型的类，Drupal在处理实体类型定义时将抛出`BundleClassInheritanceException`异常。
- en: 'By default, the `getTags` to return those referenced term entities:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，`getTags`将返回那些引用的术语实体：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Entity reference fields implement `EntityReferenceFieldItemListInterface`, which
    defines the `referencedEntities` method. This loads and returns all referenced
    entity objects.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实体引用字段实现 `EntityReferenceFieldItemListInterface`，该接口定义了 `referencedEntities`
    方法。该方法加载并返回所有引用的实体对象。
- en: 'With the bundle class defined, we must implement `hook_entity_bundle_info_alter`
    to register our bundle class for the **Recipe** content type:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义了捆绑类之后，我们必须实现 `hook_entity_bundle_info_alter` 来注册我们的捆绑类以用于 **Recipe** 内容类型：
- en: '[PRE14]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `$bundles` argument is an array of entity type bundles, keyed by entity
    type. To register an entity bundle, you set the `class` key for that bundle as
    your bundle class’s class name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`$bundles` 参数是一个按实体类型键控的实体类型捆绑数组。要注册实体捆绑，您将该捆绑的 `class` 键设置为捆绑类的类名。'
- en: 'The `getTags` method can then be used in a **Twig** template for **Recipe**
    content:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以在 **Twig** 模板中用于 **Recipe** 内容的 `getTags` 方法：
- en: '[PRE23]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When an entity record is loaded from the database, the values are passed to
    its entity class. Content entity types support bundles and thus allow defining
    classes for each bundle, which extend the entity type class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当从数据库中加载实体记录时，值会被传递到其实体类。内容实体类型支持捆绑，因此允许为每个捆绑定义类，这些类扩展了实体类型类。
- en: 'This is handled in the entity storage `\Drupal\Core\Entity\ContentEntityStorageBase`
    base class and its `getEntityClass` method. This method returns the class that
    should be used when mapping the database records into an instantiated entity object.
    This logic is contained in the `\``Drupal\Core\Entity\EntityStorageBase::mapFromStorageRecords`
    method:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这在实体存储 `\Drupal\Core\Entity\ContentEntityStorageBase` 基类及其 `getEntityClass`
    方法中处理。该方法返回在将数据库记录映射到实例化的实体对象时应使用的类。此逻辑包含在 `\Drupal\Core\Entity\EntityStorageBase::mapFromStorageRecords`
    方法中：
- en: '[PRE26]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Whenever an entity entity is loaded, assertions can be made to check the instance
    of an entity object to verify its bundle and access specific methods for that
    bundle class. These methods are also allowed in Twig template markup. Twig templates
    are covered in [*Chapter 10*](B18548_10.xhtml#_idTextAnchor319), *Theming and*
    *Frontend Development*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每当加载实体实体时，可以做出断言来检查实体对象的实例以验证其捆绑并访问该捆绑类的特定方法。这些方法也允许在 Twig 模板标记中使用。Twig 模板在
    [*第 10 章*](B18548_10.xhtml#_idTextAnchor319)，*主题和* *前端开发* 中有所介绍。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The change record for Drupal 9.3.0 introducing the bundle class feature: [https://www.drupal.org/node/3191609](https://www.drupal.org/node/3191609
    )'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 9.3.0 引入捆绑类功能的变更记录：[https://www.drupal.org/node/3191609](https://www.drupal.org/node/3191609)
- en: Creating a configuration entity type
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建配置实体类型
- en: In this recipe, we will create a configuration entity type called `Announcement`.
    This will provide a **configuration entity** that allows you to create, edit,
    and delete messages that can be displayed on the site for important announcements.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个名为 `Announcement` 的配置实体类型。这将提供一个 **配置实体**，允许您创建、编辑和删除可以在网站上显示的重要公告消息。
- en: Configuration entities do not interact with Drupal’s Field API and do not have
    a user interface to add fields. They have properties defined on their class like
    models in other frameworks. However, configuration entities do not have dedicated
    tables in the database. They are stored in the `config` table as serialized data.
    The purpose of a configuration entity is for configuration. Examples of configuration
    entities are view displays, form displays, and contact forms.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 配置实体不与 Drupal 的字段 API 交互，并且没有用户界面来添加字段。它们在其类上定义属性，就像其他框架中的模型一样。然而，配置实体在数据库中没有专用表。它们以序列化数据的形式存储在
    `config` 表中。配置实体的目的是用于配置。配置实体的例子包括视图显示、表单显示和联系表单。
- en: How to do it…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace and allow for entity
    type discovery:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Entity` 目录。这将转换为 `\Drupal\mymodule\Entity` 命名空间并允许进行实体类型发现：
- en: '[PRE27]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Create a file named `Announcement.php` in the newly created directory so that
    we can define the `Announcement` class for our entity type.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个名为 `Announcement.php` 的文件，这样我们就可以为我们的实体类型定义 `Announcement` 类。
- en: 'The `Announcement` class will extend the `\Drupal\Core\Config\Entity\ConfigEntityBase`
    class and define our entity type’s properties:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Announcement` 类将扩展 `\Drupal\Core\Config\Entity\ConfigEntityBase` 类并定义我们的实体类型的属性：'
- en: '[PRE28]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We extend the `ConfigEntityBase` class, which implements `\Drupal\Core\Config\Entity\ConfigEntityInterface`
    and satisfies all required method implementations so that we only need to define
    our properties. The `label` property will contain the description of the announcement,
    and the `message` property will contain the announcement’s text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了`ConfigEntityBase`类，该类实现了`\Drupal\Core\Config\Entity\ConfigEntityInterface`接口，并满足所有必需的方法实现，这样我们只需要定义我们的属性。`label`属性将包含公告的描述，而`message`属性将包含公告的文本。
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Typically, properties of an entity type are protected and use methods to set
    and get values. To simplify the code in this recipe, we are using public properties.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，实体类型的属性是受保护的，并使用方法来设置和获取值。为了简化此配方中的代码，我们正在使用公共属性。
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our entity type:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的实体类型编写插件注解，在类文档块中：
- en: '[PRE35]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `@ConfigEntityType` symbol specifies that this is a `ConfigEntityType` annotation.
    `id` is the entity type ID, used to retrieve the entity type’s storage and other
    handlers. `label` is the human-readable name of the entity type. The values in
    `entity_keys` instruct Drupal what the `id` and `label` properties are.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ConfigEntityType`符号指定这是一个`ConfigEntityType`注解。`id`是实体类型ID，用于检索实体类型的存储和其他处理程序。`label`是实体类型的可读名称。`entity_keys`中的值指导Drupal`id`和`label`属性是什么。'
- en: When specifying `config_export`, we are telling the configuration management
    system what properties are exportable when our entity type is exported. `admin_permission`
    specifies the permission name required to manage the entity type.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定`config_export`时，我们正在告诉配置管理系统在导出我们的实体类型时哪些属性是可导出的。`admin_permission`指定了管理实体类型所需的权限名称。
- en: 'Next, we will add the `handlers` key to our annotation:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的注解中添加`handlers`键：
- en: '[PRE52]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The handlers array specifies classes that provide the functionality for Drupal
    to interact with our entity type. The `list_builder` class, which we will create,
    is used to show a table of entities for our entity type. The `form` handlers specify
    the form classes to be used when creating, editing, or deleting an entity. The
    `route_provider` handler is an array of handlers that will generate routes for
    our entity type.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序数组指定了提供Drupal与我们的实体类型交互功能的类。我们将创建的`list_builder`类用于显示我们的实体类型的实体表。`form`处理程序指定了在创建、编辑或删除实体时使用的表单类。`route_provider`处理程序是一个将为我们实体类型生成路由的处理程序数组。
- en: 'Lastly, for our entity type’s annotation, we will provide link templates that
    `route_provider` will use to build routes for our entity type:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于我们的实体类型的注解，我们将提供`route_provider`用于构建我们的实体类型路由的链接模板：
- en: '[PRE83]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: The `links` array defines keys expected from the `html` route provider, such
    as `collection` (list), `add-form`, `delete-form`, and `edit-form`. The route
    provider will generate routes for the given paths.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`links`数组定义了从`html`路由提供者期望的键，例如`collection`（列表）、`add-form`、`delete-form`和`edit-form`。路由提供者将为给定的路径生成路由。'
- en: 'Create the `AnnouncementListBuilder` class defined in our `list_builder` handler
    by creating an `AnnouncementListBuilder.php` file in the `src` directory:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`src`目录中创建一个`AnnouncementListBuilder.php`文件，定义我们的`list_builder`处理程序中的`AnnouncementListBuilder`类：
- en: '[PRE124]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Our `AnnouncementListBuilder` class extends `\Drupal\Core\Config\Entity\ConfigEntityListBuilder`,
    which provides all the required methods to build our table of entities. We override
    the `buildHeader` and `buildRow` methods to ensure entity labels are displayed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`AnnouncementListBuilder`类扩展了`\Drupal\Core\Config\Entity\ConfigEntityListBuilder`，它提供了构建我们的实体表所需的所有必需方法。我们重写了`buildHeader`和`buildRow`方法以确保显示实体标签。
- en: 'Now, we will create the entity form that is used for creating and editing our
    entity type. Create the `AnnouncementForm` class, defined as the `default` form
    handler, by creating an `AnnouncementForm.php` file in the `src` directory:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建用于创建和编辑我们的实体类型的实体表单。在`src`目录中创建一个`AnnouncementForm.php`文件，定义`AnnouncementForm`类作为默认表单处理程序：
- en: '[PRE162]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: We override the `form` method to add our form elements. We define a text field
    for our `label` property followed by a `machine_name` element for `id`. This element
    will transliterate and convert the `label` value into a storage-friendly value
    to serve as the entity’s identifier. The `message` property uses a normal text
    area element.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写了`form`方法以添加我们的表单元素。我们为`label`属性定义了一个文本字段，然后是`id`的`machine_name`元素。此元素将转写并将`label`值转换为便于存储的值，作为实体的标识符。`message`属性使用一个普通的文本区域元素。
- en: We also override the `save` method to provide messages about the changes that
    have been made. We also ensure the user is redirected back to the collection page
    for the entity.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还覆盖了 `save` 方法以提供关于已进行的更改的消息。我们还确保用户被重定向回实体的集合页面。
- en: 'To make our announcements accessible from the administrative pages, we need
    to define a menu link. Create a `mymodule.links.menu.yml` file and add the following
    code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的公告可以从管理页面访问，我们需要定义一个菜单链接。创建一个 `mymodule.links.menu.yml` 文件并添加以下代码：
- en: '[PRE237]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在指定的 `parent` 下注册一个针对指定 `route_name` 的菜单链接。
- en: 'Next, we will define an action link. In Drupal, action links are buttons on
    pages generally used to bring the user to a form. Our action link will add an
    `mymodule.links.action.yml` file and add the following:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个动作链接。在 Drupal 中，动作链接是页面上通常用于将用户带到表单的按钮。我们的动作链接将添加一个 `mymodule.links.action.yml`
    文件并添加以下内容：
- en: '[PRE242]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '`route_name` matches the route name generated by our route provider for the
    `add-form` link. The `appears_on` array specifies what routes the action link
    should render on.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`route_name` 与我们为 `add-form` 链接生成的路由名称匹配。`appears_on` 数组指定动作链接应在哪些路由上渲染。'
- en: 'Now that we have provided our entity type and its handlers, we need to create
    a schema file that describes our configuration entity’s properties. We must create
    the `config/schema` directory, which is where the schema file will reside:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经提供了我们的实体类型及其处理程序，我们需要创建一个描述我们配置实体属性的架构文件。我们必须创建 `config/schema` 目录，架构文件将驻留在该目录：
- en: '[PRE247]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Create a file named `mymodule.schema.yml` to contain the schema definition
    for our configuration entity’s properties:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `mymodule.schema.yml` 的文件，用于包含我们配置实体属性的架构定义：
- en: '[PRE248]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: The `mymodule.announcement.*` key instructs Drupal that all of the `announcement`
    configuration entities apply to this schema. The key is built by taking the module
    name, which provides the entity type and the entity type’s ID.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`mymodule.announcement.*` 键指示 Drupal，所有的 `announcement` 配置实体都适用于此架构。该键是通过取模块名称（提供实体类型和实体类型的
    ID）构建的。'
- en: 'Before installing the module, we must define the permission specified in `admin_permission`.
    Create a `mymodule.permissions.yml` file and add the following:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装模块之前，我们必须定义 `admin_permission` 中指定的权限。创建一个 `mymodule.permissions.yml` 文件并添加以下内容：
- en: '[PRE261]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Defining the permission in the entity type’s annotation does not register it
    as a permission with Drupal automatically.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在实体类型的注解中定义权限并不会自动将其注册为 Drupal 的权限。
- en: Install the module. On the **Configuration** page, you will now see **Announcements**,
    which allows you to create announcement configuration entities.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装模块。在 **配置** 页面上，你现在将看到 **公告**，允许你创建公告配置实体。
- en: '![Figure 9.1 – The Announcements link on the configuration page](img/Figure_9.01_B18548.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 配置页面上的公告链接](img/Figure_9.01_B18548.jpg)'
- en: Figure 9.1 – The Announcements link on the configuration page
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 配置页面上的公告链接
- en: How it works…
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Entity types are plugins in Drupal. The entity type manager provides discovery
    of entity types and accesses their handlers. The `ConfigEntityType` plugin type’s
    class is `\Drupal\Core\Config\Entity\ConfigEntityType`. This class sets up the
    default `storage` handler to `\Drupal\Core\Config\Entity\ConfigEntityStorage`
    and the `entity_keys` entries for the `uuid` and `langcode` properties, which
    are defined in the `ConfigEntityBase` class.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型是 Drupal 中的插件。实体类型管理器提供实体类型的发现和访问其处理程序。`ConfigEntityType` 插件类型的类是 `\Drupal\Core\Config\Entity\ConfigEntityType`。这个类设置了默认的
    `storage` 处理程序为 `\Drupal\Core\Config\Entity\ConfigEntityStorage`，以及 `entity_keys`
    条目用于 `uuid` 和 `langcode` 属性，这些属性在 `ConfigEntityBase` 类中定义。
- en: Entity types are expected to define permission for administration, via the `admin_permission`
    annotation value. The de facto pattern is to use the word `administer` and then
    the entity type ID. That is why our permission name is `administered announcement`
    and not `administer announcements`. More about entity type permissions and access
    is covered in the *Implementing access control for an* *entity* recipe.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型预期将定义通过 `admin_permission` 注解值的管理权限。实际模式是使用单词 `administer` 然后跟实体类型 ID。这就是为什么我们的权限名称是
    `administered announcement` 而不是 `administer announcements`。关于实体类型权限和访问的更多内容，请参阅
    *实现实体访问控制的* *食谱*。
- en: The entity system is integrated with the routing system to invoke registered
    `route_provider` handlers. Our entity type uses the `AdminHtmlRouteProvider` class,
    which extends the `DefaultHtmlRouteProvider` class and ensures each route is rendered
    with the administrative theme.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 实体系统与路由系统集成，以调用已注册的`route_provider`处理器。我们的实体类型使用`AdminHtmlRouteProvider`类，它扩展了`DefaultHtmlRouteProvider`类，并确保每个路由都使用管理主题渲染。
- en: There’s more…
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In the following sections, we’ll cover more information about defining configuration
    entity types.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将介绍更多关于定义配置实体类型的信息。
- en: Registering a configuration entity for an installed module
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为已安装的模块注册配置实体
- en: When a module is first installed, Drupal also installs the entity type. If a
    module is already installed, we need to use the entity definition update manager
    to do so. This is accomplished by writing an update hook in the module’s `.``install`
    file.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块首次安装时，Drupal也会安装实体类型。如果模块已经安装，我们需要使用实体定义更新管理器来完成此操作。这是通过在模块的`.install`文件中编写更新钩子来实现的。
- en: 'The following update hook would install the announcement entity type on a Drupal
    site that already has the providing module installed:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 以下更新钩子会在已安装提供模块的Drupal网站上安装公告实体类型：
- en: '[PRE263]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: The entity definition update manager allows retrieving entity type definitions
    that have not yet been installed with its `getEntityType` method. This definition
    must then be passed to `installEntityType` to properly install the new entity
    type.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 实体定义更新管理器允许通过其`getEntityType`方法检索尚未安装的实体类型定义。然后必须将此定义传递给`installEntityType`以正确安装新的实体类型。
- en: Generating configuration entity types with Drush
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Drush生成配置实体类型
- en: '**Drush** provides code-generation tools to automate the steps taken in this
    chapter. The following command will begin the code-generation process:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**Drush**提供了代码生成工具来自动化本章中采取的步骤。以下命令将开始代码生成过程：'
- en: '[PRE264]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: The command will prompt for a module name that should provide the entity type,
    the entity types label, and its ID. The code generated will differ from that described
    in this recipe as the code generation is improved. For instance, at the time of
    writing, it generates `routing.yml` overusing `route_provider`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将提示输入一个模块名称，该模块应提供实体类型、实体类型标签及其ID。生成的代码将与本食谱中描述的代码不同，因为代码生成已得到改进。例如，在撰写本文时，它生成`routing.yml`过度使用`route_provider`。
- en: '![Figure 9.2 – Output from Drush code generation](img/Figure_9.02_B18548.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – Drush代码生成的输出](img/Figure_9.02_B18548.jpg)'
- en: Figure 9.2 – Output from Drush code generation
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – Drush代码生成的输出
- en: Available data types for schema definitions
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构定义可用的数据类型
- en: 'Drupal core provides its own configuration information. There is a `core.data_types.schema.yml`
    file located at `core/config/schema`. These are the base types of data that the
    core provides and can be used when making configuration schema. The file contains
    YAML definitions of data types and the class that represents them:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal核心提供了自己的配置信息。在`core/config/schema`目录下有一个`core.data_types.schema.yml`文件。这些是核心提供的基本数据类型，可以在创建配置架构时使用。该文件包含数据类型的YAML定义以及代表它们的类：
- en: '[PRE265]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: When a configuration schema definition specifies an attribute that has email
    for its type, that value is then handled by the `\Drupal\Core\TypedData\Plugin\DataType\Email`
    class. Data types are a form of plugins, and each plugin’s annotation specifies
    constraints for validation. This is built around the Symfony **Validator** component.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置架构定义指定了一个类型为电子邮件的属性时，该值将由`\Drupal\Core\TypedData\Plugin\DataType\Email`类处理。数据类型是一种插件形式，每个插件的注释指定了验证约束。这是围绕Symfony
    **Validator**组件构建的。
- en: See also
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[*Chapter 4*](B18548_04.xhtml#_idTextAnchor131), *Extending Drupal with* *Custom
    Code*'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B18548_04.xhtml#_idTextAnchor131), *使用自定义代码扩展Drupal*'
- en: '[*Chapter 8*](B18548_08.xhtml#_idTextAnchor264), *Plug and Play* *with Plugins*'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18548_08.xhtml#_idTextAnchor264), *使用插件即插即用*'
- en: '[*Chapter 7*](B18548_07.xhtml#_idTextAnchor240), *Creating forms with the*
    *Form API*'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18548_07.xhtml#_idTextAnchor240), *使用Form API创建表单*'
- en: Refer to configuration schema/metadata at [https://www.drupal.org/node/1905070](https://www.drupal.org/node/1905070
    )
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考配置架构/元数据[https://www.drupal.org/node/1905070](https://www.drupal.org/node/1905070)
- en: Creating a content entity type
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建内容实体类型
- en: '**Content entities** provide base field definitions and configurable fields
    with the **Field UI** module. There is also support for revisions and translations
    with content entities. Display modes, both form and view, are available for content
    entities to control how the fields are edited and displayed. When an entity does
    not specify bundles, there is automatically one bundle instance with the same
    name as the entity.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容实体**通过 **Field UI** 模块提供基础字段定义和可配置字段。内容实体还支持修订和翻译。内容实体提供了表单和视图两种显示模式，用于控制字段的编辑和显示。当实体未指定捆绑包时，将自动有一个与实体同名的捆绑包实例。'
- en: In this recipe, we will create a custom content entity that does not specify
    a bundle. We will create a **Message** entity that can serve as a content entity
    for generic messages.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个自定义内容实体，不指定捆绑包。我们将创建一个 **Message** 实体，它可以作为通用消息的内容实体。
- en: How to do it…
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace and allow for entity
    type discovery:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Entity` 目录。这将转换为 `\Drupal\mymodule\Entity` 命名空间，并允许进行实体类型发现：
- en: '[PRE266]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Create a file named `Message.php` in the newly created directory so that we
    can define the `Message` class for our entity type.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的目录中创建一个名为 `Message.php` 的文件，以便我们可以为我们的实体类型定义 `Message` 类。
- en: 'The `Message` class will extend the `\``Drupal\Core\Entity\ContentEntityBase`
    class:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Message` 类将扩展 `\Drupal\Core\Entity\ContentEntityBase` 类：'
- en: '[PRE267]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: We extend `ContentEntityBase`, which implements `\Drupal\Core\Entity\ContentEntityInterface`
    and satisfies all required methods.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展 `ContentEntityBase`，它实现了 `\Drupal\Core\Entity\ContentEntityInterface` 并满足所有必需的方法。
- en: 'Content entities do not define class properties for their values but instead
    rely on field definitions. We must define the base fields for our content entity
    type:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容实体不为其值定义类属性，而是依赖于字段定义。我们必须为我们的内容实体类型定义基础字段：
- en: '[PRE274]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: The `baseFieldDefinitions` method defines the fields the content entity has.
    It must return an array of field definitions, generated with `BaseFieldDefinition`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`baseFieldDefinitions` 方法定义了内容实体拥有的字段。它必须返回一个字段定义数组，使用 `BaseFieldDefinition`
    生成。'
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our content entity type:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的内容实体类型在类文档块中编写插件注解：
- en: '[PRE309]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: The `@ContentEntityType` symbol specifies that this is a `ContentEntityType`
    annotation. `id` is the entity type ID, used to retrieve the entity type’s storage
    and other handlers. `label` is the human-readable name of the entity type. `base_table`
    is the database table name to be used for the entity type. The values in `entity_keys`
    instruct Drupal what the `id`, `label`, and `uuid` properties are.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ContentEntityType` 符号指定这是一个 `ContentEntityType` 注解。`id` 是实体类型 ID，用于检索实体类型的存储和其他处理器。`label`
    是实体类型的人类可读名称。`base_table` 是用于实体类型的数据库表名称。`entity_keys` 中的值指示 Drupal `id`、`label`
    和 `uuid` 属性是什么。'
- en: '`admin_permission` specifies the permission name required to manage the entity
    type. `field_ui_base_route` contains a route name that the **Field UI** will use
    to provide field management interfaces.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`admin_permission` 指定管理实体类型所需的权限名称。`field_ui_base_route` 包含一个路由名称，**Field UI**
    将使用它来提供字段管理界面。'
- en: 'Next, we will add the `handlers` key to our annotation:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的注解中添加 `handlers` 键：
- en: '[PRE327]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: The handlers array specifies classes that provide the functionality for Drupal
    to interact with our entity type. The `list_builder` class, which we will create,
    is used to show a table of entities for our entity type. The `form` handlers specify
    the form classes to be used when creating, editing, or deleting an entity. The
    `route_provider` handler is an array of handlers that will generate routes for
    our entity type.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器数组指定了提供 Drupal 与我们的实体类型交互功能的类。我们将创建的 `list_builder` 类用于显示我们实体类型的实体表。`form`
    处理器指定了在创建、编辑或删除实体时使用的表单类。`route_provider` 处理器是一个处理器数组，将为我们的实体类型生成路由。
- en: 'For our entity type’s annotation, we will provide link templates that `route_provider`
    will use to build routes for our entity type:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的实体类型的注解，我们将提供 `route_provider` 将用于为我们的实体类型构建路由的链接模板：
- en: '[PRE358]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: The `links` array defines keys expected from the `html` route provider, such
    as `collection` (list), `add-form`, `delete-form`, and `edit-form`. The route
    provider will generate routes for the given paths.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`links` 数组定义了从 `html` 路由提供程序期望的键，例如 `collection`（列表）、`add-form`、`delete-form`
    和 `edit-form`。路由提供程序将为给定的路径生成路由。'
- en: 'Create the `MessageListBuilder` class defined in our `list_builder` handler
    by creating a `MessageListBuilder.php` file in the `src` directory:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`src`目录中创建一个`MessageListBuilder.php`文件来创建在`list_builder`处理器中定义的`MessageListBuilder`类：
- en: '[PRE396]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: Our `MessageListBuilder` class extends `\Drupal\Core\Entity\EntityListBuilder`,
    which provides all the required methods to build our table of entities. We override
    the `builderHeader` and `buildRow` methods to ensure entity labels are displayed
    and linked to view the entity.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`MessageListBuilder`类扩展了`\Drupal\Core\Entity\EntityListBuilder`，它提供了构建我们的实体表所需的所有方法。我们重写了`builderHeader`和`buildRow`方法，以确保实体标签被显示并链接到查看实体。
- en: 'Now, we will create the entity form that is used for creating and editing our
    entity type. Create the `MessageForm` class defined as the default form handler
    by creating a `MessageForm.php` file in the `src` directory:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建用于创建和编辑我们的实体类型的实体表单。通过在`src`目录中创建一个`MessageForm.php`文件来创建作为默认表单处理器的`MessageForm`类：
- en: '[PRE410]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: We override the `save` method to provide messages about the changes that have
    been made. We ensure the user is redirected back to the collection page for the
    entity. All other processing of field values is handled in the base form class.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写了`save`方法以提供关于已进行的更改的消息。我们确保用户被重定向回实体的集合页面。所有其他字段值的处理都在基本表单类中完成。
- en: 'To make our messages accessible from the administrative area on the `mymodule.links.menu.yml`
    file and add the following:'
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使我们的消息在`mymodule.links.menu.yml`文件中的管理区域可访问，并添加以下内容：
- en: '[PRE431]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在指定的`parent`下注册一个菜单链接，对应于指定的`route_name`。
- en: 'Next, we will define an action link. In Drupal, action links are buttons on
    pages generally used to bring the user to a form. Our action link will add an
    `mymodule.links.action.yml` file and add the following:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个操作链接。在Drupal中，操作链接是页面上的按钮，通常用于将用户带到表单。我们的操作链接将添加一个`mymodule.links.action.yml`文件，并添加以下内容：
- en: '[PRE436]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '`route_name` matches the route name generated by our route provider for the
    `add-form` link. The `appears_on` array specifies what routes the action link
    should render on.'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '`route_name`与我们的路由提供程序为`add-form`链接生成的路由名称匹配。`appears_on`数组指定了操作链接应该渲染在哪些路由上。'
- en: 'To display the field management tabs from the `mymodule.links.task.yml` to
    register our route entity collection route as the root task:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从`mymodule.links.task.yml`显示字段管理标签并注册我们的路由实体集合路由作为根任务：
- en: '[PRE441]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'Before installing the module, we must define the permission specified in `admin_permission`.
    Create a `mymodule.permissions.yml` file and add the following:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装模块之前，我们必须定义`admin_permission`中指定的权限。创建一个`mymodule.permissions.yml`文件并添加以下内容：
- en: '[PRE445]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: Defining the permission in the entity type’s annotation does not register it
    as a permission with Drupal automatically.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在实体类型的注解中定义权限不会自动将其注册为Drupal的权限。
- en: Install the module. On the `Structure` page, you will now see `Messages`, which
    allows you to create message content entities.
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装模块。在`结构`页面，你现在将看到`消息`，允许你创建消息内容实体。
- en: '![Figure 9.3 – Messages collection, with field management tabs](img/Figure_9.03_B18548.jpg)'
  id: totrans-567
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 消息收集，带有字段管理标签](img/Figure_9.03_B18548.jpg)'
- en: Figure 9.3 – Messages collection, with field management tabs
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 消息收集，带有字段管理标签
- en: How it works…
  id: totrans-569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `ContentEntityType` plugin type’s class is `\Drupal\Core\Entity\ContentEntityType`.
    This class sets up the `storage` handler to be `\Drupal\Core\Entity\Sql\SqlContentEntityStorage`,
    which controls storing the entity in the database. It also specifies a `view_builder`
    handler, which is used to render entities, to the `\``Drupal\Core\Entity\EntityViewBuilder`
    class.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentEntityType`插件类型的类是`\Drupal\Core\Entity\ContentEntityType`。这个类设置`storage`处理器为`\Drupal\Core\Entity\Sql\SqlContentEntityStorage`，该处理器控制将实体存储在数据库中。它还指定了一个`view_builder`处理器，用于渲染实体，为`\Drupal\Core\Entity\EntityViewBuilder`类。'
- en: Entity types are expected to define permission for administration, via the `admin_permission`
    annotation value. The de facto pattern is to use the word `administer` and then
    the entity type ID. That is why our permission name is `administer announcement`
    and not `administer announcements`. More about entity type permissions and access
    is covered in the *Implementing access control for an* *entity* recipe.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型预期通过`admin_permission`注解值定义管理权限。实际模式是使用单词`administer`然后是实体类型ID。这就是为什么我们的权限名称是`administer
    announcement`而不是`administer announcements`。关于实体类型权限和访问的更多内容，请参阅*为实体实现访问控制*菜谱。
- en: When defining base field definitions, their view and form display mode configuration
    is defined in code. The `setDisplayOptions` method provides the default display
    options that should be used for the field. Calling `setDisplayConfigurable` with
    `TRUE` allows controlling the field with the **Field UI** interface for managing
    view and form display modes.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义基本字段定义时，它们的查看和表单显示模式配置是在代码中定义的。`setDisplayOptions` 方法提供了用于字段的默认显示选项。通过调用
    `setDisplayConfigurable` 并传入 `TRUE`，可以允许使用 **Field UI** 界面来控制字段，以管理查看和表单显示模式。
- en: There’s more…
  id: totrans-573
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: We will discuss how to add additional functionality to our content entity.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论如何为我们的内容实体添加额外的功能。
- en: Registering a content entity for an installed module
  id: totrans-575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为已安装的模块注册内容实体
- en: When a module is first installed, Drupal will also install the entity type.
    If a module is already installed, we need to use the entity definition update
    manager to do so. This is accomplished by writing an update hook in the module’s
    `.``install` file.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个模块首次安装时，Drupal 也会安装实体类型。如果模块已经安装，我们需要使用实体定义更新管理器来完成此操作。这是通过在模块的 `.install`
    文件中编写更新钩子来实现的。
- en: 'The following update hook would install the message entity type on a Drupal
    site that already has the providing module installed:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 以下更新钩子会在已经安装提供模块的 Drupal 网站上安装消息实体类型：
- en: '[PRE447]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: The entity definition update manager allows retrieving entity type definitions
    that have not yet been installed with its `getEntityType` method. This definition
    must then be passed to `installEntityType` to properly install the new entity
    type.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 实体定义更新管理器允许通过其 `getEntityType` 方法检索尚未安装的实体类型定义。然后必须将此定义传递给 `installEntityType`
    以正确安装新的实体类型。
- en: Generating configuration entity types with Drush
  id: totrans-580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Drush 生成配置实体类型
- en: 'Drush provides code-generation tools to automate the steps taken in this chapter.
    The following command will begin the code-generation process:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: Drush 提供了代码生成工具来自动化本章中采取的步骤。以下命令将开始代码生成过程：
- en: '[PRE448]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: The command will prompt for a module name that should provide the entity type,
    the entity types label, and its ID. It allows configuring the entity type to be
    translatable and support revisions, discussed in the following sections. The code
    generated will differ from what’s described in this recipe as the code generation
    is improved.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将提示输入一个模块名称，该模块应提供实体类型、实体类型标签及其 ID。它允许配置实体类型以可翻译并支持修订，这些将在以下章节中讨论。生成的代码将与本菜谱中描述的不同，因为代码生成已得到改进。
- en: Tabs for View, Edit, and Delete
  id: totrans-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看、编辑和删除的标签页
- en: 'When editing content, you may have used the `links.task.yml`, like the one
    defined to enable the **Field UI** in this recipe. The following definitions will
    add the same tabs to the content entity type defined in this recipe:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑内容时，你可能已经使用了 `links.task.yml`，就像在这个菜谱中定义的启用 **Field UI** 一样。以下定义将添加与本章中定义的内容实体类型相同的标签页：
- en: '[PRE449]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: Allowing a content entity type to be translatable
  id: totrans-587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许内容实体类型可翻译
- en: One of Drupal’s major features is its ability to handle multilingual content,
    as we’ll cover in [*Chapter 11*](B18548_11.xhtml#_idTextAnchor354), *Multilingual
    and Internationalization*. For a content entity to be translatable, it must provide
    a `langcode` entity key and mark its base fields as being translatable.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 的一个主要特性是它处理多语言内容的能力，我们将在 [*第 11 章*](B18548_11.xhtml#_idTextAnchor354)，*多语言和国际化*
    中介绍。为了使内容实体可翻译，它必须提供一个 `langcode` 实体键并将其基本字段标记为可翻译。
- en: 'The `Message` entity’s updated `entity_keys` annotation would look like the
    following:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`Message` 实体的更新 `entity_keys` 注解看起来如下：'
- en: '[PRE450]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: The `ContentEntityBase` class will check whether this `langcode` entity key
    exists and automatically generate a language field.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentEntityBase` 类将检查此 `langcode` 实体键是否存在，并自动生成一个语言字段。'
- en: 'By default, fields are not translatable. To mark a field as being translatable,
    the `setTranslatable` method on the field definition object must be called. The
    following code makes the `title` field translatable:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，字段不可翻译。要将字段标记为可翻译，必须在字段定义对象上调用 `setTranslatable` 方法。以下代码使 `title` 字段可翻译：
- en: '[PRE451]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: Allowing a content entity type to support revisions
  id: totrans-594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许内容实体类型支持修订
- en: Drupal has the `Content Moderation and Workspaces` module to provide advanced
    content management workflows using revisions, as we covered in [*Chapter 3*](B18548_03.xhtml#_idTextAnchor101),
    *Displaying Content through Views*. For a content entity to support revisions,
    it must provide additional information in its entity type annotation and mark
    base fields as supporting revisions.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal有`内容审查和工作空间`模块，用于提供使用修订版本的高级内容管理工作流程，正如我们在[*第3章*](B18548_03.xhtml#_idTextAnchor101)中所述，*通过视图显示内容*。为了支持修订版本，内容实体必须在其实体类型注释中提供附加信息，并将基字段标记为支持修订版本。
- en: 'Content entity types that support revisions must define `revision_table` and
    `revision_metadata_keys`. These are similar to `base_table` and `entity_keys`,
    respectively:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 支持修订版本的内容实体类型必须定义`revision_table`和`revision_metadata_keys`。这些与`base_table`和`entity_keys`类似：
- en: '[PRE452]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: The `show_revision_ui` key controls whether the entity form displays the revision
    log whenever modifying an entity.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_revision_ui`键控制是否在修改实体时在实体表单中显示修订日志。'
- en: 'The content entity type must implement `\Drupal\Core\Entity\RevisionLogInterface`
    and can use the `\Drupal\Core\Entity\RevisionLogEntityTrait` trait to automatically
    create the required base fields and methods for revision support:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 内容实体类型必须实现`\Drupal\Core\Entity\RevisionLogInterface`，并可以使用`\Drupal\Core\Entity\RevisionLogEntityTrait`特质来自动创建支持修订版本所需的基本字段和方法：
- en: '[PRE453]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'Finally, fields must be flagged as supporting revisions:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，字段必须被标记为支持修订版本：
- en: '[PRE454]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Creating a bundle for a content entity type
  id: totrans-603
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为内容实体类型创建一个包
- en: '**Bundles** allow you to have different variations of a content entity. All
    bundles share the same base field definitions but not configured fields. This
    allows each bundle to have its own custom fields. Display modes are also dependent
    on a specific bundle. This allows each bundle to have its own configuration for
    the form mode and view mode.'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '**包**允许您拥有内容实体不同变体的版本。所有包共享相同的基字段定义，但不配置字段。这允许每个包都有自己的自定义字段。显示模式也取决于特定的包。这允许每个包都有自己的表单模式和视图模式配置。'
- en: Using the custom entity from the preceding recipe, we will add a configuration
    entity to act as the bundle. This will allow you to have different message types
    for multiple custom field configurations.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面菜谱中的自定义实体，我们将添加一个配置实体作为包。这将允许您为多个自定义字段配置有不同的消息类型。
- en: How to do it…
  id: totrans-606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a file named `MessageType.php` in the `src/Entity` directory so that
    we can define the `MessageType` class for our configuration entity type that will
    provide bundles for our `Message` entity.
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/Entity`目录中创建一个名为`MessageType.php`的文件，以便我们可以为我们的配置实体类型定义`MessageType`类，该类将为我们的`Message`实体提供包：
- en: 'The `MessageType` class will extend the `\Drupal\Core\Config\Entity\ConfigEntityBundleBase`
    class and define our entity type’s properties:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MessageType`类将扩展`\Drupal\Core\Config\Entity\ConfigEntityBundleBase`类，并定义我们的实体类型的属性：'
- en: '[PRE455]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: We extend the `ConfigEntityBundleBase` class. This is a class that extends `ConfigEntityBase`
    and provides various enhancements for configuration entity types that are used
    to provide bundles for a content entity type. The `label` property will contain
    the label of the message type.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了`ConfigEntityBundleBase`类。这是一个扩展`ConfigEntityBase`并提供用于为内容实体类型提供包的配置实体类型的各种增强功能的类。`label`属性将包含消息类型的标签。
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our entity type:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的实体类型在类文档块中编写插件注释：
- en: '[PRE461]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE477]'
- en: The annotation definition is just like other configuration entities, except
    for the `bundle_of` key. The `bundle_of` key defines the entity type that this
    configuration entity type provides bundles for and denotes this as a bundle configuration
    entity type.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 注释定义就像其他配置实体一样，除了`bundle_of`键。`bundle_of`键定义了此配置实体类型提供的包的实体类型，并表明这是一个包配置实体类型。
- en: 'Next, we will add the `handlers` key to our annotation:'
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将向我们的注释中添加`handlers`键：
- en: '[PRE478]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE509]'
- en: We define the entity type’s handlers just as we did in the *Creating a configuration
    entity type* recipe, but with our specific `form` and `list_builder` handlers.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义实体类型的处理程序，就像我们在*创建配置实体类型*菜谱中所做的那样，但使用我们特定的`form`和`list_builder`处理程序。
- en: 'Lastly, for our entity type’s annotation, we will provide link templates that
    `route_provider` will use to build routes for the entity type:'
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了我们实体类型的注释，我们将提供`route_provider`将用于为实体类型构建路由的链接模板：
- en: '[PRE510]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE551]'
- en: This defines routes for our entity at `/admin/structure/message-types`.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们的实体在`/admin/structure/message-types`上定义了路由。
- en: 'Create the `MessageTypeListBuilder` class defined in our `list_builder` handler
    by creating a `MessageTypeListBuilder.php` file in the `src` directory:'
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `src` 目录中创建 `MessageTypeListBuilder.php` 文件，定义我们 `list_builder` 处理器中的 `MessageTypeListBuilder`
    类：
- en: '[PRE552]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE582]'
- en: '[PRE583]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE588]'
- en: 'Next, we will create the entity form that is used for creating and editing
    the entity type. Create the `MessageTypeForm` class defined as the default form
    handler by creating `MessageTypeForm.php` file in the `src` directory:'
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建用于创建和编辑实体类型的实体表单。在 `src` 目录中创建 `MessageTypeForm.php` 文件，定义 `MessageTypeForm`
    类作为默认表单处理器：
- en: '[PRE589]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '[PRE592]'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '[PRE600]'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '[PRE610]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE615]'
- en: '[PRE616]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE618]'
- en: '[PRE619]'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE619]'
- en: '[PRE620]'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE623]'
- en: '[PRE624]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE624]'
- en: '[PRE625]'
  id: totrans-788
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE625]'
- en: '[PRE626]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '[PRE627]'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE627]'
- en: '[PRE628]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '[PRE629]'
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '[PRE637]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-803
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '[PRE643]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '[PRE648]'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE650]'
- en: '[PRE651]'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '[PRE652]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE652]'
- en: '[PRE653]'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '[PRE654]'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE655]'
- en: We extend the `BundleEntityFormBase` form class, which is a special base class
    for configuration entity types that are used as bundles. It provides the `protectBundleIdElement`
    method, which prevents changes to the entity ID.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了 `BundleEntityFormBase` 表单类，这是一个用于作为捆绑使用的配置实体类型的特殊基类。它提供了 `protectBundleIdElement`
    方法，该方法防止对实体ID进行更改。
- en: 'To make the message types accessible from the administrative pages, we need
    to define a menu link. Add the following to `mymodule.links.menu.yml`:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使消息类型可以从管理页面访问，我们需要定义一个菜单链接。将以下内容添加到 `mymodule.links.menu.yml` 文件中：
- en: '[PRE656]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '[PRE659]'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE659]'
- en: '[PRE660]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE660]'
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在指定的 `parent` 下注册一个指向指定 `route_name` 的菜单链接。
- en: 'Next, we need to update the `mymodule.links.action.yml` file:'
  id: totrans-827
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 `mymodule.links.action.yml` 文件：
- en: '[PRE661]'
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '[PRE662]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '[PRE663]'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '[PRE664]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '[PRE665]'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '[PRE666]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '[PRE667]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE667]'
- en: '[PRE668]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE668]'
- en: '[PRE669]'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE669]'
- en: '[PRE670]'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE670]'
- en: Now that the `Message` entity type has bundles, we must use the `add_page` route
    for the `message.add` task so that a message type can be chosen when creating
    a message. We add `message_type.add` to display an **Add message type** button
    on the message type collection page.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于 `Message` 实体类型有了捆绑，我们必须使用 `message.add` 任务的路由来添加 `message_type`，以便在创建消息时可以选择消息类型。我们在消息类型集合页面上添加
    `message_type.add` 以显示 **添加消息类型** 按钮。
- en: 'We must add a task link for the message type’s edit form route so that the
    `mymodule.links.task.yml` file:'
  id: totrans-839
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须为消息类型编辑表单路由添加一个任务链接，以便在 `mymodule.links.task.yml` 文件中：
- en: '[PRE671]'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '[PRE672]'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE672]'
- en: '[PRE673]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '[PRE674]'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE674]'
- en: 'We must define the permission defined in the `admin_permission` annotation
    key. Add the following to the `mymodule.permissions.yml` file:'
  id: totrans-844
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在 `mymodule.permissions.yml` 文件中定义在 `admin_permission` 注解键中定义的权限。将以下内容添加到
    `mymodule.permissions.yml` 文件中：
- en: '[PRE675]'
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '[PRE676]'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'We must define the configuration schema for our configuration entity type.
    Create the `mymodule.schema.yml` file in the `config/schema` directory to contain
    the schema definition:'
  id: totrans-847
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须为我们的配置实体类型定义配置模式。在 `config/schema` 目录中创建 `mymodule.schema.yml` 文件以包含模式定义：
- en: '[PRE677]'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE677]'
- en: '[PRE678]'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE678]'
- en: '[PRE679]'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE679]'
- en: '[PRE680]'
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE680]'
- en: '[PRE681]'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '[PRE682]'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE682]'
- en: '[PRE683]'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '[PRE684]'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE684]'
- en: '[PRE685]'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE685]'
- en: '[PRE686]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'Next, we need to update the `Message` entity type’s annotation to use our bundled
    entity type:'
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 `Message` 实体类型的注解，以使用我们捆绑的实体类型：
- en: '[PRE687]'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE687]'
- en: '[PRE688]'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE688]'
- en: '[PRE689]'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE689]'
- en: '[PRE690]'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE690]'
- en: '[PRE691]'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '[PRE692]'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '[PRE693]'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '[PRE694]'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE694]'
- en: '[PRE695]'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE695]'
- en: '[PRE696]'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE696]'
- en: '[PRE697]'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE697]'
- en: '[PRE698]'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE698]'
- en: '[PRE699]'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE699]'
- en: '[PRE700]'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE700]'
- en: '[PRE701]'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '[PRE702]'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE702]'
- en: '[PRE703]'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE703]'
- en: '[PRE704]'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE704]'
- en: '[PRE705]'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE705]'
- en: '[PRE706]'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE706]'
- en: '[PRE707]'
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE707]'
- en: '[PRE708]'
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE708]'
- en: '[PRE709]'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE709]'
- en: '[PRE710]'
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE710]'
- en: '[PRE711]'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '[PRE712]'
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE712]'
- en: '[PRE713]'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '[PRE714]'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE714]'
- en: '[PRE715]'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE715]'
- en: '[PRE716]'
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '[PRE717]'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '[PRE718]'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '[PRE719]'
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '[PRE720]'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '[PRE721]'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '[PRE722]'
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE722]'
- en: '[PRE723]'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE723]'
- en: '[PRE724]'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE724]'
- en: '[PRE725]'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE725]'
- en: '[PRE726]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE726]'
- en: We add the `bundle_entity_type` key and give it the identifier of our configuration
    entity type, `message_type`. We then move the `field_ui_base_route`.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了 `bundle_entity_type` 键，并给它分配了我们的配置实体类型的标识符，`message_type`。然后我们将 `field_ui_base_route`
    移动。
- en: The links are also modified to support bundles. The `add-page` link has been
    added, which is a landing page to select a bundle when creating a message. The
    `add-form` link has been updated to contain a `message_type` parameter.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 链接也进行了修改以支持捆绑。添加了 `add-page` 链接，这是一个创建消息时选择捆绑的着陆页。`add-form` 链接已更新，包含 `message_type`
    参数。
- en: Install the module. On the **Structure** page, you will now see **Message Types**
    alongside **Messages**, allowing you to manage the message types and their field
    configuration.
  id: totrans-901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装模块。在 **结构** 页面上，你现在将看到 **消息类型** 与 **消息** 并列，允许你管理消息类型及其字段配置。
- en: '![Figure 9.4 – Message type form and tabs overview](img/Figure_9.04_B18548.jpg)'
  id: totrans-902
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 消息类型表单和标签页概览](img/Figure_9.04_B18548.jpg)'
- en: Figure 9.4 – Message type form and tabs overview
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 消息类型表单和标签页概览
- en: How it works…
  id: totrans-904
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Content entity types have bundles as a way to segment the entity type into specific
    types. Bundles can merely be a string value on a content entity or, more commonly,
    a reference to a configuration entity, like in this recipe. When a content entity
    type does not define bundles, it is considered to have a single bundle with the
    same name as the entity type.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 内容实体类型通过捆绑来分割实体类型为特定类型。捆绑可以仅是一个内容实体上的字符串值，或者更常见的是，指向配置实体，如本食谱所示。当一个内容实体类型没有定义捆绑时，它被认为有一个与实体类型同名的单一捆绑。
- en: The `field_ui_base_route` must point to the edit form route of the configuration
    entity type.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '`field_ui_base_route` 必须指向配置实体类型的编辑表单路由。'
- en: Internally, Drupal uses the `bundle_entity_type` and `bundle_of` keys to automatically
    get information about the related entity types, such as building the Field UI
    forms.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，Drupal使用`bundle_entity_type`和`bundle_of`键自动获取有关相关实体类型的信息，例如构建字段UI表单。
- en: When using the code generation commands in Drush, generating a content entity
    type provides an option to generate a configuration entity type for bundles.
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Drush中使用代码生成命令时，生成内容实体类型提供了一个选项来为捆绑生成配置实体类型。
- en: Implementing access control for an entity
  id: totrans-909
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体访问控制实现
- en: All entity types have an `access` handler used to control whether a user has
    access to create, read, update, or delete an entity. Both configuration and content
    entity types default to the `\Drupal\Core\Entity\EntityAccessControlHandler` class
    as their access handler. This handler, however, only supports checking the `admin_permission`
    of the entity type.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实体类型都有一个`access`处理程序，用于控制用户是否有权创建、读取、更新或删除实体。配置和内容实体类型默认使用`\Drupal\Core\Entity\EntityAccessControlHandler`类作为它们的访问处理程序。然而，此处理程序仅支持检查实体类型的`admin_permission`。
- en: The **Entity API** module is a contributed project used to build enhancements
    on the Entity system in Drupal core and improve the developer experience with
    creating and maintaining custom entity types. It provides a permission provider
    to generate create, read, update, and delete permissions for an entity type. To
    complement the permission provider, it also has an access handler that supports
    the generated permissions.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '**Entity API** 模块是一个贡献项目，用于在Drupal核心的实体系统中构建增强功能，并改善创建和维护自定义实体类型的开发者体验。它提供了一个权限提供者，用于为实体类型生成创建、读取、更新和删除权限。为了补充权限提供者，它还包含一个支持生成的权限的访问处理程序。'
- en: In this recipe, we will use the permission provider and access handlers from
    the `Entity API` module for the `Message` entity type created previously in this
    chapter.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用`Entity API`模块提供的权限提供者和访问处理程序，用于在本章先前创建的`Message`实体类型。
- en: Getting ready
  id: totrans-913
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses entity handler classes provided by the `Entity API` module
    and install it to use the entity handler classes it provides:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用`Entity API`模块提供的实体处理程序类，并将其安装以使用它提供的实体处理程序类：
- en: '[PRE727]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: How to do it…
  id: totrans-916
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to update the `mymodule.info.yml` file to mark the `Entity API`
    module as a dependency:'
  id: totrans-917
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更新`mymodule.info.yml`文件，将`Entity API`模块标记为依赖项：
- en: '[PRE728]'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE728]'
- en: '[PRE729]'
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE729]'
- en: '[PRE730]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE730]'
- en: '[PRE731]'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '[PRE732]'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '[PRE733]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE733]'
- en: '[PRE734]'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE734]'
- en: The `dependencies` array contains namespaced module names. Drupal utilizes this
    pattern to support projects that contain submodules and act as a mono-repository.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 数组包含命名空间化的模块名称。Drupal利用此模式来支持包含子模块的项目，并作为单一代码库。'
- en: 'We must update the `Message` entity type’s annotation to specify that permissions
    for the entity type should be granular per bundle:'
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须更新`Message`实体类型的注释，以指定实体类型的权限应按捆绑粒度划分：
- en: '[PRE735]'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE735]'
- en: '[PRE736]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE736]'
- en: '[PRE737]'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE737]'
- en: '[PRE738]'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE738]'
- en: '[PRE739]'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE739]'
- en: The `permission_granularity` key tells the system what permissions should be
    generated and whether access should be checked by just the entity type or also
    take into consideration the bundle. This way, there could be permissions for `Announcement`
    messages but not `Bulletin` messages for a specific user role.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '`permission_granularity` 键告诉系统应该生成哪些权限以及是否只需检查实体类型还是还应考虑捆绑。这样，对于特定用户角色，可能会有`Announcement`消息的权限，但没有`Bulletin`消息的权限。'
- en: 'Next, we add the `permission_provider` handler, which will generate our permissions.
    Note that `{...}` indicates the same code from the previous section, removed for
    readability for what we are adding here:'
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加`permission_provider`处理程序，它将生成我们的权限。请注意，`{...}`表示与上一节相同的代码，为了提高可读性在此处已删除：
- en: '[PRE740]'
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE740]'
- en: '[PRE741]'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE741]'
- en: '[PRE742]'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE742]'
- en: '[PRE743]'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE743]'
- en: '[PRE744]'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE744]'
- en: '[PRE745]'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE745]'
- en: '[PRE746]'
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE746]'
- en: '[PRE747]'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE747]'
- en: 'Then, we provide the access handler, which supports our generated permissions:'
  id: totrans-942
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们提供支持我们生成的权限的访问处理程序：
- en: '[PRE748]'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '[PRE749]'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE749]'
- en: '[PRE750]'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '[PRE751]'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE751]'
- en: '[PRE752]'
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE752]'
- en: '[PRE753]'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE753]'
- en: '[PRE754]'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE754]'
- en: '[PRE755]'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE755]'
- en: '[PRE756]'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE756]'
- en: '[PRE757]'
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE757]'
- en: 'We will add one more handler, a `query_access` handler to implement our access
    controls when querying for entities:'
  id: totrans-953
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加一个额外的处理程序，一个`query_access`处理程序，以在查询实体时实现我们的访问控制：
- en: '[PRE758]'
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE758]'
- en: '[PRE759]'
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE759]'
- en: '[PRE760]'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE760]'
- en: '[PRE761]'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE761]'
- en: '[PRE762]'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE762]'
- en: '[PRE763]'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE763]'
- en: '[PRE764]'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE764]'
- en: '[PRE765]'
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE765]'
- en: '[PRE766]'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE766]'
- en: '[PRE767]'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE767]'
- en: '[PRE768]'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE768]'
- en: '[PRE769]'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE769]'
- en: '[PRE770]'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE770]'
- en: '[PRE771]'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE771]'
- en: '[PRE772]'
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE772]'
- en: '[PRE773]'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE773]'
- en: '[PRE774]'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE774]'
- en: '[PRE775]'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE775]'
- en: '[PRE776]'
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE776]'
- en: The `query_access` handler ensures that entities returned from an entity query
    are accessible to the user.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '`query_access`处理程序确保从实体查询返回的实体对用户是可访问的。'
- en: The permission provider also generates the `admin_permission` specified on the
    entity type. You may remove the `administer message` permission from `mymodule.permissions.yml`.
  id: totrans-974
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 权限提供者还生成了在实体类型上指定的`admin_permission`。您可以从`mymodule.permissions.yml`中删除`administer
    message`权限。
- en: Rebuild Drupal’s caches, or install the module if it is not yet installed. You
    will see the generated permissions on the **Permissions** form.
  id: totrans-975
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重建Drupal的缓存，或者如果尚未安装，则安装模块。您将在**权限**表单上看到生成的权限。
- en: '![Figure 9.5 – Permissions form for a message type](img/Figure_9.05_B18548.jpg)'
  id: totrans-976
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 消息类型的权限表单](img/Figure_9.05_B18548.jpg)'
- en: Figure 9.5 – Permissions form for a message type
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 消息类型的权限表单
- en: How it works…
  id: totrans-978
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `permission_provider` handler. The permission provider then inspects the
    entity type and creates the correct permissions that may be needed. For instance,
    if the entity type implements `\Drupal\Core\Entity\EntityPublishedInterface`,
    it will generate permission to allow viewing unpublished entities of that entity
    type. The permissions are based on the `permission_granularity` value in the entity
    type annotation. The default value is `entity_type`. When using `entity_type`,
    there is one set of permissions for working with the entity type.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '`permission_provider`处理程序。权限提供程序随后检查实体类型并创建可能需要的正确权限。例如，如果实体类型实现了`\Drupal\Core\Entity\EntityPublishedInterface`，它将生成允许查看该实体类型未发布实体的权限。权限基于实体类型注解中的`permission_granularity`值。默认值是`entity_type`。当使用`entity_type`时，有一组权限用于处理该实体类型。'
- en: The correlating `access` handler has logic to match the create, read, update,
    and delete permissions provided by the permission provider. The `query_access`
    handler adds access checks when querying for entities based on the current user’s
    permissions. When using `EntityPublishedInterface`, this ensures unpublished entities
    are not exposed to users without permission to view them.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 相关联的`access`处理程序具有与权限提供程序提供的创建、读取、更新和删除权限相匹配的逻辑。`query_access`处理程序在根据当前用户的权限查询实体时添加访问检查。当使用`EntityPublishedInterface`时，这确保未发布实体不会暴露给没有查看权限的用户。
- en: This allows you to implement robust access control for your custom entity type
    without having to write your own access logic.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您在不编写自己的访问逻辑的情况下，为您的自定义实体类型实现强大的访问控制。
- en: There’s more...
  id: totrans-982
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe showed how to provide permission-based access to entities. The next
    section will show how you can control access to specific fields as well.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何提供基于权限的实体访问。下一节将展示如何控制对特定字段的访问。
- en: Controlling access to entity fields
  id: totrans-984
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制实体字段的访问
- en: 'The `checkFieldAccess` method in the core’s entity access control handler can
    be overridden to control access to specific entity fields when modifying an entity.
    Without being overridden by a child class, the default `\Drupal\Core\Entity\EntityAccessControlHandler`
    class will always return an allowed access result. The method receives the following
    parameters:'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 核心实体访问控制处理程序中的`checkFieldAccess`方法可以被覆盖，以在修改实体时控制对特定实体字段的访问。如果没有被子类覆盖，默认的`\Drupal\Core\Entity\EntityAccessControlHandler`类将始终返回允许的访问结果。该方法接收以下参数：
- en: The view and edit operations
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看和编辑操作
- en: The current field’s definition
  id: totrans-987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前字段的定义
- en: The user session to check against
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要检查的用户会话
- en: A possible list of field item values
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段项值可能的列表
- en: Entity types can implement their own access control handlers and override this
    method to provide granular control over the modification of their base fields.
    A good example would be the `User` module and its `\Drupal\user\UserAccessControlHandler`.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 实体类型可以实现自己的访问控制处理程序并覆盖此方法，以提供对其基本字段修改的细粒度控制。一个很好的例子是`User`模块及其`\Drupal\user\UserAccessControlHandler`。
- en: User entities have a `pass` field that is used for the user’s current password.
    There is also a `created` field that records when the user was added to the site.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 用户实体有一个`pass`字段，用于用户的当前密码。还有一个`created`字段，用于记录用户何时被添加到网站。
- en: 'For the `pass` field, it returns `denied` if the operation is a view, but allows
    access if the `$operation` argument passed to `checkFieldAccess` is `edit`:'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`pass`字段，如果操作是查看，则返回`denied`，但如果传递给`checkFieldAccess`的`$operation`参数是`edit`，则允许访问：
- en: '[PRE777]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: 'The `created` field uses the opposite logic. When a user logs in, the site
    can be viewed but cannot be edited:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '`created`字段使用相反的逻辑。当用户登录时，网站可以查看但不能编辑：'
- en: '[PRE778]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: Providing a custom storage handler
  id: totrans-996
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供自定义存储处理程序
- en: Storage handlers control the loading, saving, and deleting of an entity. Content
    entity types have the default storage handler of `\Drupal\Core\Entity\Sql\SqlContentEntityStorage`.
    Configuration entity types have the default storage handler of `\Drupal\Core\Config\Entity\ConfigEntityStorage`.
    These classes can be extended to implement alternative methods and set as the
    entity type’s `storage` handler.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 存储处理器控制实体的加载、保存和删除。内容实体类型具有默认的存储处理器`\Drupal\Core\Entity\Sql\SqlContentEntityStorage`。配置实体类型具有默认的存储处理器`\Drupal\Core\Config\Entity\ConfigEntityStorage`。这些类可以扩展以实现替代方法，并设置为实体类型的`storage`处理器。
- en: In this recipe, we will create a method for the `Message` entity type created
    previously in this chapter to load all messages of a specific type.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为之前创建的`Message`实体类型创建一个方法来加载特定类型的所有消息。
- en: How to do it…
  id: totrans-999
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create a `MessageStorage` class in the module’s `src` directory. This class
    will extend the `SqlContentEntityStorage` class:'
  id: totrans-1000
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的`src`目录中创建一个`MessageStorage`类。这个类将扩展`SqlContentEntityStorage`类：
- en: '[PRE779]'
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE779]'
- en: '[PRE780]'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE780]'
- en: '[PRE781]'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE781]'
- en: '[PRE782]'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE782]'
- en: '[PRE783]'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE783]'
- en: The default storage for content entity types is the `SqlContentEntityStorage`
    class, which is why we extend that class.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 内容实体类型的默认存储是`SqlContentEntityStorage`类，这就是我们扩展该类的原因。
- en: 'Create a `loadMultipleByType` method; using this method, we will provide a
    simple way to load all messages of a specific bundle:'
  id: totrans-1007
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`loadMultipleByType`方法；使用此方法，我们将提供一个简单的方式来加载特定捆绑的所有消息：
- en: '[PRE784]'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE784]'
- en: '[PRE785]'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE785]'
- en: '[PRE786]'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE786]'
- en: '[PRE787]'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE787]'
- en: '[PRE788]'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE788]'
- en: '[PRE789]'
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE789]'
- en: '[PRE790]'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE790]'
- en: The method performs an entity query with access checks. It performs a condition
    on the `type` field for the bundle value and then passes any returned entity IDs
    to be loaded and returned.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法执行带有访问检查的实体查询。它对捆绑值的`type`字段执行条件，然后将返回的任何实体ID传递给加载和返回。
- en: 'Update the `Message` entity type’s annotation to specify the customized `storage`
    handler:'
  id: totrans-1016
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Message`实体类型的注释以指定定制的`storage`处理器：
- en: '[PRE791]'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE791]'
- en: '[PRE792]'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE792]'
- en: '[PRE793]'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE793]'
- en: '[PRE794]'
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE794]'
- en: '[PRE795]'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE795]'
- en: '[PRE796]'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE796]'
- en: '[PRE797]'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE797]'
- en: '[PRE798]'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE798]'
- en: '[PRE799]'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE799]'
- en: '[PRE800]'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE800]'
- en: '[PRE801]'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE801]'
- en: '[PRE802]'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE802]'
- en: '[PRE803]'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE803]'
- en: '[PRE804]'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE804]'
- en: 'You can now programmatically interact with your message entities using the
    following code:'
  id: totrans-1031
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以使用以下代码以编程方式与您的消息实体进行交互：
- en: '[PRE805]'
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE805]'
- en: '[PRE806]'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE806]'
- en: '[PRE807]'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE807]'
- en: How it works…
  id: totrans-1035
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Extending `SqlContentEntityStorage` ensures that our entity type’s storage matches
    the requirements for content entity storage in the database and allows adding
    custom methods for loading entities.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`SqlContentEntityStorage`确保我们的实体类型存储与数据库中内容实体存储的要求相匹配，并允许添加用于加载实体的自定义方法。
- en: When the entity type storage is retrieved from the entity type manager, the
    methods may be used.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 当从实体类型管理器检索实体类型存储时，可以使用这些方法。
