- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Custom Entity Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B18548_06.xhtml#_idTextAnchor217), *Accessing and Working with
    Entities*, we explored manipulating individual entities. This chapter covers creating
    custom entity types for custom data models. **Entities** in Drupal are made up
    of different entity types. **Entity types** are defined as annotated plugins.
    Each entity is an instance of its entity type class. Entity types can also be
    enhanced to have different classes based on their bundle. You will learn how to
    implement your own custom entity in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using custom classes for entity bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a configuration entity type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a content entity type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bundle for a content entity type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing access control for an entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a custom storage handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require a custom module that is not installed. Drupal will
    not register a new entity type or update entity types automatically for already-installed
    modules. The *There’s more…* section of the recipes will explain how to install
    or update entity types for already-installed modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following recipes, the module name is `mymodule`. Replace instances
    of `mymodule` with your module name as appropriate in your code. You can find
    the full code used in this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp09).'
  prefs: []
  type: TYPE_NORMAL
- en: Using custom classes for entity bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each entity is instantiated with its entity type class. A `\Drupal\node\Entity\Node`
    and a `\Drupal\taxonomy\Entity\Term` regardless of the entity’s bundle. Drupal
    allows altering entity information to provide alternative classes when an entity
    of a specific bundle is instantiated. Entity bundles are often used for different
    specific business logic. This feature allows the creation of classes with specific
    business logic associated with fields on the bundle.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create an entity bundle class to be used when there
    is a **Recipe** node.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will be using the **Recipe** content type provided by the
    Umami demo installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace, which is where
    we will create our bundle class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `Recipe.php` in the newly created directory so that we can
    define the `Recipe` class to use for our **Recipe** nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Recipe` class will extend `\Drupal\node\Entity\Node`. Bundle classes must
    extend the class for its entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If a bundle class does not extend the class for an entity type, Drupal will
    throw a `BundleClassInheritanceException` exception when processing entity type
    definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `getTags` to return those referenced term entities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Entity reference fields implement `EntityReferenceFieldItemListInterface`, which
    defines the `referencedEntities` method. This loads and returns all referenced
    entity objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the bundle class defined, we must implement `hook_entity_bundle_info_alter`
    to register our bundle class for the **Recipe** content type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `$bundles` argument is an array of entity type bundles, keyed by entity
    type. To register an entity bundle, you set the `class` key for that bundle as
    your bundle class’s class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getTags` method can then be used in a **Twig** template for **Recipe**
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an entity record is loaded from the database, the values are passed to
    its entity class. Content entity types support bundles and thus allow defining
    classes for each bundle, which extend the entity type class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is handled in the entity storage `\Drupal\Core\Entity\ContentEntityStorageBase`
    base class and its `getEntityClass` method. This method returns the class that
    should be used when mapping the database records into an instantiated entity object.
    This logic is contained in the `\``Drupal\Core\Entity\EntityStorageBase::mapFromStorageRecords`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Whenever an entity entity is loaded, assertions can be made to check the instance
    of an entity object to verify its bundle and access specific methods for that
    bundle class. These methods are also allowed in Twig template markup. Twig templates
    are covered in [*Chapter 10*](B18548_10.xhtml#_idTextAnchor319), *Theming and*
    *Frontend Development*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The change record for Drupal 9.3.0 introducing the bundle class feature: [https://www.drupal.org/node/3191609](https://www.drupal.org/node/3191609
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a configuration entity type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a configuration entity type called `Announcement`.
    This will provide a **configuration entity** that allows you to create, edit,
    and delete messages that can be displayed on the site for important announcements.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration entities do not interact with Drupal’s Field API and do not have
    a user interface to add fields. They have properties defined on their class like
    models in other frameworks. However, configuration entities do not have dedicated
    tables in the database. They are stored in the `config` table as serialized data.
    The purpose of a configuration entity is for configuration. Examples of configuration
    entities are view displays, form displays, and contact forms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace and allow for entity
    type discovery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `Announcement.php` in the newly created directory so that
    we can define the `Announcement` class for our entity type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Announcement` class will extend the `\Drupal\Core\Config\Entity\ConfigEntityBase`
    class and define our entity type’s properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We extend the `ConfigEntityBase` class, which implements `\Drupal\Core\Config\Entity\ConfigEntityInterface`
    and satisfies all required method implementations so that we only need to define
    our properties. The `label` property will contain the description of the announcement,
    and the `message` property will contain the announcement’s text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Typically, properties of an entity type are protected and use methods to set
    and get values. To simplify the code in this recipe, we are using public properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@ConfigEntityType` symbol specifies that this is a `ConfigEntityType` annotation.
    `id` is the entity type ID, used to retrieve the entity type’s storage and other
    handlers. `label` is the human-readable name of the entity type. The values in
    `entity_keys` instruct Drupal what the `id` and `label` properties are.
  prefs: []
  type: TYPE_NORMAL
- en: When specifying `config_export`, we are telling the configuration management
    system what properties are exportable when our entity type is exported. `admin_permission`
    specifies the permission name required to manage the entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the `handlers` key to our annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The handlers array specifies classes that provide the functionality for Drupal
    to interact with our entity type. The `list_builder` class, which we will create,
    is used to show a table of entities for our entity type. The `form` handlers specify
    the form classes to be used when creating, editing, or deleting an entity. The
    `route_provider` handler is an array of handlers that will generate routes for
    our entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, for our entity type’s annotation, we will provide link templates that
    `route_provider` will use to build routes for our entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `links` array defines keys expected from the `html` route provider, such
    as `collection` (list), `add-form`, `delete-form`, and `edit-form`. The route
    provider will generate routes for the given paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `AnnouncementListBuilder` class defined in our `list_builder` handler
    by creating an `AnnouncementListBuilder.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our `AnnouncementListBuilder` class extends `\Drupal\Core\Config\Entity\ConfigEntityListBuilder`,
    which provides all the required methods to build our table of entities. We override
    the `buildHeader` and `buildRow` methods to ensure entity labels are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create the entity form that is used for creating and editing our
    entity type. Create the `AnnouncementForm` class, defined as the `default` form
    handler, by creating an `AnnouncementForm.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We override the `form` method to add our form elements. We define a text field
    for our `label` property followed by a `machine_name` element for `id`. This element
    will transliterate and convert the `label` value into a storage-friendly value
    to serve as the entity’s identifier. The `message` property uses a normal text
    area element.
  prefs: []
  type: TYPE_NORMAL
- en: We also override the `save` method to provide messages about the changes that
    have been made. We also ensure the user is redirected back to the collection page
    for the entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our announcements accessible from the administrative pages, we need
    to define a menu link. Create a `mymodule.links.menu.yml` file and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define an action link. In Drupal, action links are buttons on
    pages generally used to bring the user to a form. Our action link will add an
    `mymodule.links.action.yml` file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`route_name` matches the route name generated by our route provider for the
    `add-form` link. The `appears_on` array specifies what routes the action link
    should render on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have provided our entity type and its handlers, we need to create
    a schema file that describes our configuration entity’s properties. We must create
    the `config/schema` directory, which is where the schema file will reside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `mymodule.schema.yml` to contain the schema definition
    for our configuration entity’s properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `mymodule.announcement.*` key instructs Drupal that all of the `announcement`
    configuration entities apply to this schema. The key is built by taking the module
    name, which provides the entity type and the entity type’s ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before installing the module, we must define the permission specified in `admin_permission`.
    Create a `mymodule.permissions.yml` file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Defining the permission in the entity type’s annotation does not register it
    as a permission with Drupal automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Install the module. On the **Configuration** page, you will now see **Announcements**,
    which allows you to create announcement configuration entities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – The Announcements link on the configuration page](img/Figure_9.01_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – The Announcements link on the configuration page
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Entity types are plugins in Drupal. The entity type manager provides discovery
    of entity types and accesses their handlers. The `ConfigEntityType` plugin type’s
    class is `\Drupal\Core\Config\Entity\ConfigEntityType`. This class sets up the
    default `storage` handler to `\Drupal\Core\Config\Entity\ConfigEntityStorage`
    and the `entity_keys` entries for the `uuid` and `langcode` properties, which
    are defined in the `ConfigEntityBase` class.
  prefs: []
  type: TYPE_NORMAL
- en: Entity types are expected to define permission for administration, via the `admin_permission`
    annotation value. The de facto pattern is to use the word `administer` and then
    the entity type ID. That is why our permission name is `administered announcement`
    and not `administer announcements`. More about entity type permissions and access
    is covered in the *Implementing access control for an* *entity* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The entity system is integrated with the routing system to invoke registered
    `route_provider` handlers. Our entity type uses the `AdminHtmlRouteProvider` class,
    which extends the `DefaultHtmlRouteProvider` class and ensures each route is rendered
    with the administrative theme.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following sections, we’ll cover more information about defining configuration
    entity types.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a configuration entity for an installed module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a module is first installed, Drupal also installs the entity type. If a
    module is already installed, we need to use the entity definition update manager
    to do so. This is accomplished by writing an update hook in the module’s `.``install`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following update hook would install the announcement entity type on a Drupal
    site that already has the providing module installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: The entity definition update manager allows retrieving entity type definitions
    that have not yet been installed with its `getEntityType` method. This definition
    must then be passed to `installEntityType` to properly install the new entity
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Generating configuration entity types with Drush
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Drush** provides code-generation tools to automate the steps taken in this
    chapter. The following command will begin the code-generation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: The command will prompt for a module name that should provide the entity type,
    the entity types label, and its ID. The code generated will differ from that described
    in this recipe as the code generation is improved. For instance, at the time of
    writing, it generates `routing.yml` overusing `route_provider`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Output from Drush code generation](img/Figure_9.02_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Output from Drush code generation
  prefs: []
  type: TYPE_NORMAL
- en: Available data types for schema definitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Drupal core provides its own configuration information. There is a `core.data_types.schema.yml`
    file located at `core/config/schema`. These are the base types of data that the
    core provides and can be used when making configuration schema. The file contains
    YAML definitions of data types and the class that represents them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: When a configuration schema definition specifies an attribute that has email
    for its type, that value is then handled by the `\Drupal\Core\TypedData\Plugin\DataType\Email`
    class. Data types are a form of plugins, and each plugin’s annotation specifies
    constraints for validation. This is built around the Symfony **Validator** component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18548_04.xhtml#_idTextAnchor131), *Extending Drupal with* *Custom
    Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18548_08.xhtml#_idTextAnchor264), *Plug and Play* *with Plugins*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18548_07.xhtml#_idTextAnchor240), *Creating forms with the*
    *Form API*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to configuration schema/metadata at [https://www.drupal.org/node/1905070](https://www.drupal.org/node/1905070
    )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a content entity type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Content entities** provide base field definitions and configurable fields
    with the **Field UI** module. There is also support for revisions and translations
    with content entities. Display modes, both form and view, are available for content
    entities to control how the fields are edited and displayed. When an entity does
    not specify bundles, there is automatically one bundle instance with the same
    name as the entity.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a custom content entity that does not specify
    a bundle. We will create a **Message** entity that can serve as a content entity
    for generic messages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Entity` directory in the module’s directory.
    This will translate to the `\Drupal\mymodule\Entity` namespace and allow for entity
    type discovery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `Message.php` in the newly created directory so that we
    can define the `Message` class for our entity type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Message` class will extend the `\``Drupal\Core\Entity\ContentEntityBase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We extend `ContentEntityBase`, which implements `\Drupal\Core\Entity\ContentEntityInterface`
    and satisfies all required methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content entities do not define class properties for their values but instead
    rely on field definitions. We must define the base fields for our content entity
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `baseFieldDefinitions` method defines the fields the content entity has.
    It must return an array of field definitions, generated with `BaseFieldDefinition`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our content entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@ContentEntityType` symbol specifies that this is a `ContentEntityType`
    annotation. `id` is the entity type ID, used to retrieve the entity type’s storage
    and other handlers. `label` is the human-readable name of the entity type. `base_table`
    is the database table name to be used for the entity type. The values in `entity_keys`
    instruct Drupal what the `id`, `label`, and `uuid` properties are.
  prefs: []
  type: TYPE_NORMAL
- en: '`admin_permission` specifies the permission name required to manage the entity
    type. `field_ui_base_route` contains a route name that the **Field UI** will use
    to provide field management interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the `handlers` key to our annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The handlers array specifies classes that provide the functionality for Drupal
    to interact with our entity type. The `list_builder` class, which we will create,
    is used to show a table of entities for our entity type. The `form` handlers specify
    the form classes to be used when creating, editing, or deleting an entity. The
    `route_provider` handler is an array of handlers that will generate routes for
    our entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our entity type’s annotation, we will provide link templates that `route_provider`
    will use to build routes for our entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `links` array defines keys expected from the `html` route provider, such
    as `collection` (list), `add-form`, `delete-form`, and `edit-form`. The route
    provider will generate routes for the given paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `MessageListBuilder` class defined in our `list_builder` handler
    by creating a `MessageListBuilder.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our `MessageListBuilder` class extends `\Drupal\Core\Entity\EntityListBuilder`,
    which provides all the required methods to build our table of entities. We override
    the `builderHeader` and `buildRow` methods to ensure entity labels are displayed
    and linked to view the entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create the entity form that is used for creating and editing our
    entity type. Create the `MessageForm` class defined as the default form handler
    by creating a `MessageForm.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We override the `save` method to provide messages about the changes that have
    been made. We ensure the user is redirected back to the collection page for the
    entity. All other processing of field values is handled in the base form class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our messages accessible from the administrative area on the `mymodule.links.menu.yml`
    file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define an action link. In Drupal, action links are buttons on
    pages generally used to bring the user to a form. Our action link will add an
    `mymodule.links.action.yml` file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`route_name` matches the route name generated by our route provider for the
    `add-form` link. The `appears_on` array specifies what routes the action link
    should render on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the field management tabs from the `mymodule.links.task.yml` to
    register our route entity collection route as the root task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before installing the module, we must define the permission specified in `admin_permission`.
    Create a `mymodule.permissions.yml` file and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Defining the permission in the entity type’s annotation does not register it
    as a permission with Drupal automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Install the module. On the `Structure` page, you will now see `Messages`, which
    allows you to create message content entities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Messages collection, with field management tabs](img/Figure_9.03_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Messages collection, with field management tabs
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ContentEntityType` plugin type’s class is `\Drupal\Core\Entity\ContentEntityType`.
    This class sets up the `storage` handler to be `\Drupal\Core\Entity\Sql\SqlContentEntityStorage`,
    which controls storing the entity in the database. It also specifies a `view_builder`
    handler, which is used to render entities, to the `\``Drupal\Core\Entity\EntityViewBuilder`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Entity types are expected to define permission for administration, via the `admin_permission`
    annotation value. The de facto pattern is to use the word `administer` and then
    the entity type ID. That is why our permission name is `administer announcement`
    and not `administer announcements`. More about entity type permissions and access
    is covered in the *Implementing access control for an* *entity* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: When defining base field definitions, their view and form display mode configuration
    is defined in code. The `setDisplayOptions` method provides the default display
    options that should be used for the field. Calling `setDisplayConfigurable` with
    `TRUE` allows controlling the field with the **Field UI** interface for managing
    view and form display modes.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will discuss how to add additional functionality to our content entity.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a content entity for an installed module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a module is first installed, Drupal will also install the entity type.
    If a module is already installed, we need to use the entity definition update
    manager to do so. This is accomplished by writing an update hook in the module’s
    `.``install` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following update hook would install the message entity type on a Drupal
    site that already has the providing module installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: The entity definition update manager allows retrieving entity type definitions
    that have not yet been installed with its `getEntityType` method. This definition
    must then be passed to `installEntityType` to properly install the new entity
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Generating configuration entity types with Drush
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Drush provides code-generation tools to automate the steps taken in this chapter.
    The following command will begin the code-generation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: The command will prompt for a module name that should provide the entity type,
    the entity types label, and its ID. It allows configuring the entity type to be
    translatable and support revisions, discussed in the following sections. The code
    generated will differ from what’s described in this recipe as the code generation
    is improved.
  prefs: []
  type: TYPE_NORMAL
- en: Tabs for View, Edit, and Delete
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When editing content, you may have used the `links.task.yml`, like the one
    defined to enable the **Field UI** in this recipe. The following definitions will
    add the same tabs to the content entity type defined in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: Allowing a content entity type to be translatable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of Drupal’s major features is its ability to handle multilingual content,
    as we’ll cover in [*Chapter 11*](B18548_11.xhtml#_idTextAnchor354), *Multilingual
    and Internationalization*. For a content entity to be translatable, it must provide
    a `langcode` entity key and mark its base fields as being translatable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Message` entity’s updated `entity_keys` annotation would look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: The `ContentEntityBase` class will check whether this `langcode` entity key
    exists and automatically generate a language field.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, fields are not translatable. To mark a field as being translatable,
    the `setTranslatable` method on the field definition object must be called. The
    following code makes the `title` field translatable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: Allowing a content entity type to support revisions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal has the `Content Moderation and Workspaces` module to provide advanced
    content management workflows using revisions, as we covered in [*Chapter 3*](B18548_03.xhtml#_idTextAnchor101),
    *Displaying Content through Views*. For a content entity to support revisions,
    it must provide additional information in its entity type annotation and mark
    base fields as supporting revisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content entity types that support revisions must define `revision_table` and
    `revision_metadata_keys`. These are similar to `base_table` and `entity_keys`,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: The `show_revision_ui` key controls whether the entity form displays the revision
    log whenever modifying an entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content entity type must implement `\Drupal\Core\Entity\RevisionLogInterface`
    and can use the `\Drupal\Core\Entity\RevisionLogEntityTrait` trait to automatically
    create the required base fields and methods for revision support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, fields must be flagged as supporting revisions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Creating a bundle for a content entity type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bundles** allow you to have different variations of a content entity. All
    bundles share the same base field definitions but not configured fields. This
    allows each bundle to have its own custom fields. Display modes are also dependent
    on a specific bundle. This allows each bundle to have its own configuration for
    the form mode and view mode.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the custom entity from the preceding recipe, we will add a configuration
    entity to act as the bundle. This will allow you to have different message types
    for multiple custom field configurations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file named `MessageType.php` in the `src/Entity` directory so that
    we can define the `MessageType` class for our configuration entity type that will
    provide bundles for our `Message` entity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `MessageType` class will extend the `\Drupal\Core\Config\Entity\ConfigEntityBundleBase`
    class and define our entity type’s properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We extend the `ConfigEntityBundleBase` class. This is a class that extends `ConfigEntityBase`
    and provides various enhancements for configuration entity types that are used
    to provide bundles for a content entity type. The `label` property will contain
    the label of the message type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write the plugin annotation in a class documentation block for
    our entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The annotation definition is just like other configuration entities, except
    for the `bundle_of` key. The `bundle_of` key defines the entity type that this
    configuration entity type provides bundles for and denotes this as a bundle configuration
    entity type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the `handlers` key to our annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We define the entity type’s handlers just as we did in the *Creating a configuration
    entity type* recipe, but with our specific `form` and `list_builder` handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, for our entity type’s annotation, we will provide link templates that
    `route_provider` will use to build routes for the entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE545]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE549]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE551]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This defines routes for our entity at `/admin/structure/message-types`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `MessageTypeListBuilder` class defined in our `list_builder` handler
    by creating a `MessageTypeListBuilder.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE553]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE554]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE556]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE569]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE570]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE571]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE572]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE573]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE574]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE575]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE576]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE577]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE578]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE580]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE581]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE582]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE583]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE584]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE585]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE586]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE587]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE588]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will create the entity form that is used for creating and editing
    the entity type. Create the `MessageTypeForm` class defined as the default form
    handler by creating `MessageTypeForm.php` file in the `src` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE590]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE591]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE592]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE593]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE594]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE595]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE596]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE597]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE598]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE599]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE600]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE601]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE602]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE603]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE604]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE605]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE606]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE607]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE608]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE609]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE610]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE611]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE612]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE613]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE614]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE615]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE616]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE617]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE618]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE619]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE620]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE621]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE622]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE623]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE624]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE625]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE626]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE627]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE628]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE629]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE630]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE631]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE632]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE633]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE634]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE635]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE636]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE637]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE638]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE639]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE640]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE641]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE642]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE643]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE644]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE645]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE646]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE647]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE648]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE649]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE650]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE651]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE652]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE653]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE654]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE655]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We extend the `BundleEntityFormBase` form class, which is a special base class
    for configuration entity types that are used as bundles. It provides the `protectBundleIdElement`
    method, which prevents changes to the entity ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the message types accessible from the administrative pages, we need
    to define a menu link. Add the following to `mymodule.links.menu.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE657]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE658]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE659]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE660]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This registers a menu link for the specified `route_name` under the specified
    `parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update the `mymodule.links.action.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE662]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE663]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE664]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE665]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE666]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE667]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE668]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE669]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE670]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the `Message` entity type has bundles, we must use the `add_page` route
    for the `message.add` task so that a message type can be chosen when creating
    a message. We add `message_type.add` to display an **Add message type** button
    on the message type collection page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must add a task link for the message type’s edit form route so that the
    `mymodule.links.task.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE672]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE673]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE674]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must define the permission defined in the `admin_permission` annotation
    key. Add the following to the `mymodule.permissions.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE676]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We must define the configuration schema for our configuration entity type.
    Create the `mymodule.schema.yml` file in the `config/schema` directory to contain
    the schema definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE678]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE679]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE680]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE681]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE682]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE683]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE684]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE685]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE686]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to update the `Message` entity type’s annotation to use our bundled
    entity type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE688]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE689]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE690]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE691]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE692]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE693]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE694]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE695]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE696]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE697]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE698]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE699]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE700]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE701]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE702]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE703]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE704]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE705]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE706]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE707]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE708]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE709]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE710]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE711]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE712]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE713]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE714]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE715]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE716]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE717]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE718]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE719]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE720]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE721]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE722]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE723]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE724]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE725]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE726]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We add the `bundle_entity_type` key and give it the identifier of our configuration
    entity type, `message_type`. We then move the `field_ui_base_route`.
  prefs: []
  type: TYPE_NORMAL
- en: The links are also modified to support bundles. The `add-page` link has been
    added, which is a landing page to select a bundle when creating a message. The
    `add-form` link has been updated to contain a `message_type` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Install the module. On the **Structure** page, you will now see **Message Types**
    alongside **Messages**, allowing you to manage the message types and their field
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Message type form and tabs overview](img/Figure_9.04_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Message type form and tabs overview
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content entity types have bundles as a way to segment the entity type into specific
    types. Bundles can merely be a string value on a content entity or, more commonly,
    a reference to a configuration entity, like in this recipe. When a content entity
    type does not define bundles, it is considered to have a single bundle with the
    same name as the entity type.
  prefs: []
  type: TYPE_NORMAL
- en: The `field_ui_base_route` must point to the edit form route of the configuration
    entity type.
  prefs: []
  type: TYPE_NORMAL
- en: Internally, Drupal uses the `bundle_entity_type` and `bundle_of` keys to automatically
    get information about the related entity types, such as building the Field UI
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: When using the code generation commands in Drush, generating a content entity
    type provides an option to generate a configuration entity type for bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing access control for an entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All entity types have an `access` handler used to control whether a user has
    access to create, read, update, or delete an entity. Both configuration and content
    entity types default to the `\Drupal\Core\Entity\EntityAccessControlHandler` class
    as their access handler. This handler, however, only supports checking the `admin_permission`
    of the entity type.
  prefs: []
  type: TYPE_NORMAL
- en: The **Entity API** module is a contributed project used to build enhancements
    on the Entity system in Drupal core and improve the developer experience with
    creating and maintaining custom entity types. It provides a permission provider
    to generate create, read, update, and delete permissions for an entity type. To
    complement the permission provider, it also has an access handler that supports
    the generated permissions.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the permission provider and access handlers from
    the `Entity API` module for the `Message` entity type created previously in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses entity handler classes provided by the `Entity API` module
    and install it to use the entity handler classes it provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to update the `mymodule.info.yml` file to mark the `Entity API`
    module as a dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE729]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE730]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE731]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE732]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE733]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE734]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dependencies` array contains namespaced module names. Drupal utilizes this
    pattern to support projects that contain submodules and act as a mono-repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'We must update the `Message` entity type’s annotation to specify that permissions
    for the entity type should be granular per bundle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE736]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE737]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE738]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE739]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `permission_granularity` key tells the system what permissions should be
    generated and whether access should be checked by just the entity type or also
    take into consideration the bundle. This way, there could be permissions for `Announcement`
    messages but not `Bulletin` messages for a specific user role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we add the `permission_provider` handler, which will generate our permissions.
    Note that `{...}` indicates the same code from the previous section, removed for
    readability for what we are adding here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE741]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE742]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE743]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE744]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE745]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE746]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE747]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we provide the access handler, which supports our generated permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE749]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE750]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE751]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE752]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE753]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE754]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE755]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE756]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE757]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add one more handler, a `query_access` handler to implement our access
    controls when querying for entities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE759]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE760]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE761]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE762]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE763]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE764]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE765]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE766]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE767]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE768]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE769]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE770]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE771]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE772]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE773]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE774]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE775]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE776]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `query_access` handler ensures that entities returned from an entity query
    are accessible to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The permission provider also generates the `admin_permission` specified on the
    entity type. You may remove the `administer message` permission from `mymodule.permissions.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rebuild Drupal’s caches, or install the module if it is not yet installed. You
    will see the generated permissions on the **Permissions** form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Permissions form for a message type](img/Figure_9.05_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Permissions form for a message type
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `permission_provider` handler. The permission provider then inspects the
    entity type and creates the correct permissions that may be needed. For instance,
    if the entity type implements `\Drupal\Core\Entity\EntityPublishedInterface`,
    it will generate permission to allow viewing unpublished entities of that entity
    type. The permissions are based on the `permission_granularity` value in the entity
    type annotation. The default value is `entity_type`. When using `entity_type`,
    there is one set of permissions for working with the entity type.
  prefs: []
  type: TYPE_NORMAL
- en: The correlating `access` handler has logic to match the create, read, update,
    and delete permissions provided by the permission provider. The `query_access`
    handler adds access checks when querying for entities based on the current user’s
    permissions. When using `EntityPublishedInterface`, this ensures unpublished entities
    are not exposed to users without permission to view them.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to implement robust access control for your custom entity type
    without having to write your own access logic.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed how to provide permission-based access to entities. The next
    section will show how you can control access to specific fields as well.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling access to entity fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `checkFieldAccess` method in the core’s entity access control handler can
    be overridden to control access to specific entity fields when modifying an entity.
    Without being overridden by a child class, the default `\Drupal\Core\Entity\EntityAccessControlHandler`
    class will always return an allowed access result. The method receives the following
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The view and edit operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current field’s definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user session to check against
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A possible list of field item values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity types can implement their own access control handlers and override this
    method to provide granular control over the modification of their base fields.
    A good example would be the `User` module and its `\Drupal\user\UserAccessControlHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: User entities have a `pass` field that is used for the user’s current password.
    There is also a `created` field that records when the user was added to the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `pass` field, it returns `denied` if the operation is a view, but allows
    access if the `$operation` argument passed to `checkFieldAccess` is `edit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: 'The `created` field uses the opposite logic. When a user logs in, the site
    can be viewed but cannot be edited:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: Providing a custom storage handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storage handlers control the loading, saving, and deleting of an entity. Content
    entity types have the default storage handler of `\Drupal\Core\Entity\Sql\SqlContentEntityStorage`.
    Configuration entity types have the default storage handler of `\Drupal\Core\Config\Entity\ConfigEntityStorage`.
    These classes can be extended to implement alternative methods and set as the
    entity type’s `storage` handler.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a method for the `Message` entity type created
    previously in this chapter to load all messages of a specific type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `MessageStorage` class in the module’s `src` directory. This class
    will extend the `SqlContentEntityStorage` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE780]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE781]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE782]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE783]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The default storage for content entity types is the `SqlContentEntityStorage`
    class, which is why we extend that class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `loadMultipleByType` method; using this method, we will provide a
    simple way to load all messages of a specific bundle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE785]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE786]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE787]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE788]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE789]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE790]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The method performs an entity query with access checks. It performs a condition
    on the `type` field for the bundle value and then passes any returned entity IDs
    to be loaded and returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `Message` entity type’s annotation to specify the customized `storage`
    handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE792]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE793]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE794]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE795]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE796]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE797]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE798]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE799]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE800]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE801]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE802]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE803]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE804]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now programmatically interact with your message entities using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE806]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE807]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extending `SqlContentEntityStorage` ensures that our entity type’s storage matches
    the requirements for content entity storage in the database and allows adding
    custom methods for loading entities.
  prefs: []
  type: TYPE_NORMAL
- en: When the entity type storage is retrieved from the entity type manager, the
    methods may be used.
  prefs: []
  type: TYPE_NORMAL
