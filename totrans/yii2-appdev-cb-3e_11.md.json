["```php\n    <?php\n    use yii\\db\\Migration;\n\n    class m160309_070856_create_post extends Migration\n    {\n        public function up()\n        {\n            $this->createTable('{{%post}}', [\n                'id' => $this->primaryKey(),\n                'title' => $this->string()->notNull(),\n                'text' => $this->text()->notNull(),\n                'status' => $this->smallInteger()->notNull()-\n                >defaultValue(0),\n            ]);\n        }\n\n        public function down()\n        {\n            $this->dropTable('{{%post}}');\n        }\n    }\n    ```", "```php\n    namespace app\\models;\n\n    use Yii;\n    use yii\\db\\ActiveRecord;\n\n    /**\n     * @property integer $id\n     * @property string $title\n     * @property string $text\n     * @property integer $status\n     * @property integer $created_at\n     * @property integer $updated_at\n     */\n    class Post extends ActiveRecord\n    {\n        const STATUS_DRAFT = 0;\n        const STATUS_ACTIVE = 1;\n\n        public static function tableName()\n        {\n            return '{{%post}}';\n        }\n\n        public function rules()\n        {\n            return [\n                [['title', 'text'], 'required'],\n                [['text'], 'string'],\n                ['status', 'in', 'range' => [self::STATUS_DRAFT, self::STATUS_ACTIVE]],\n                ['status', 'default', 'value' => self::STATUS_DRAFT],\n                [['title'], 'string', 'max' => 255],\n            ];\n        }\n\n        public function behaviors()\n        {\n            return [\n                TimestampBehavior::className(),\n            ];\n        }\n\n        public static function getStatusList()\n        {\n            return [\n                self::STATUS_DRAFT => 'Draft',\n                self::STATUS_ACTIVE => 'Active',\n            ];\n        }\n        public function publish()\n        {\n            if ($this->status == self::STATUS_ACTIVE) {\n                throw new \\DomainException('Post is already published.');\n            }\n            $this->status = self::STATUS_ACTIVE;\n        }\n\n        public function draft()\n        {\n            if ($this->status == self::STATUS_DRAFT) {\n                throw new \\DomainException('Post is already drafted.');\n            }\n            $this->status = self::STATUS_DRAFT;\n        }\n    }\n    ```", "```php\n    <div class=\"post-form\">\n\n        <?php $form = ActiveForm::begin(); ?>\n\n        <?= $form->field($model, 'title')->textInput(['maxlength' => true])  ?>\n\n        <?= $form->field($model, 'text')->textarea(['rows' => 6]) ?>\n\n        <?= $form->field($model, 'status')->dropDownList(Post::getStatusList()) ?>\n\n        <div class=\"form-group\">\n            <?= Html::submitButton($model->isNewRecord ? 'Create' : 'Update', [\n                'class' => $model->isNewRecord ? 'btn btn-success' : 'btn btn-primary',\n                'name' => 'submit-button',\n            ]) ?>\n        </div>\n\n        <?php ActiveForm::end(); ?>\n\n    </div>\n    ```", "```php\n    tests/bin/yii migrate\n\n    ```", "```php\n    composer exec codecep\n    t build\n\n    ```", "```php\n# run all available tests\ncomposer exec codecept run\n\n# run functional tests\ncomposer exec codecept run functional\n\n# run unit tests\ncomposer exec codecept run unit\n\n```", "```php\ncoverage:\n   enabled: true\n   whitelist:\n       include:\n           - models/*\n           - controllers/*\n           - commands/*\n           - mail/*\n   blacklist:\n       include:\n           - assets/*\n           - config/*\n           - runtime/*\n           - vendor/*\n           - views/*\n           - web/*\n           - tests/*\n```", "```php\nsudo apt-get install php5-xdebug\n\n```", "```php\n[xdebug]\nzend_extension_ts=C:/php/ext/php_xdebug.dll\n```", "```php\n[xdebug]\nzend_extension=C:/php/ext/php_xdebug.dll\n```", "```php\n#collect coverage for all tests\ncomposer exec codecept run --coverage-html\n\n#collect coverage only for unit tests\ncomposer exec codecept run unit --coverage-html\n\n#collect coverage for unit and functional tests\ncomposer exec codecept run functional,unit --coverage-html\n\n```", "```php\nCode Coverage Report: \n 2016-03-31 08:13:05 \n\n Summary: \n Classes: 20.00% (1/5) \n Methods: 40.91% (9/22) \n Lines:   30.65% (38/124)\n\n\\app\\models::ContactForm\n Methods:  33.33% ( 1/ 3)   Lines:  80.00% ( 12/ 15)\n\\app\\models::LoginForm\n Methods: 100.00% ( 4/ 4)   Lines: 100.00% ( 18/ 18)\n\\app\\models::User\n Methods:  57.14% ( 4/ 7)   Lines:  53.33% (  8/ 15)\nRemote CodeCoverage reports are not printed to console\n\nHTML report generated in coverage\n\n```", "```php\n    composer require --dev codeception/codeception\n    composer remove --dev codeception/base\n\n    ```", "```php\n    java -jar -Dwebdriver.gecko.driver=~/geckodriver ~/selenium-server-standalone-x.xx.x.jar\n\n    ```", "```php\n    class_name: AcceptanceTester\n    modules:\n     enabled:\n     - WebDriver:\n     url: http://127.0.0.1:8080/\n     browser: firefox\n     - Yii2:\n     part: orm\n     entryScript: index-test.php\n     cleanup: false\n\n    ```", "```php\n    tests/bin/yii serve\n\n    ```", "```php\n    composer exec codecept run acceptance\n\n    ```", "```php\n    <?php\n    namespace tests\\fixtures;\n\n    use yii\\test\\ActiveFixture;\n\n    class PostFixture extends ActiveFixture\n    {\n        public $modelClass = 'app\\modules\\Post';\n        public $dataFile = '@tests/_data/post.php';\n    }\n    ```", "```php\n    <?php\n    return [\n        [\n            'id' => 1,\n            'title' => 'First Post',\n            'text' => 'First Post Text',\n            'status' => 1,\n            'created_at' => 1457211600,\n            'updated_at' => 1457211600,\n        ],\n        [\n            'id' => 2,\n            'title' => 'Old Title For Updating',\n            'text' => 'Old Text For Updating',\n            'status' => 1,\n            'created_at' => 1457211600,\n            'updated_at' => 1457211600,\n        ],\n        [\n            'id' => 3,\n            'title' => 'Title For Deleting',\n            'text' => 'Text For Deleting',\n            'status' => 1,\n            'created_at' => 1457211600,\n            'updated_at' => 1457211600,\n        ],\n    ];\n    ```", "```php\n    class_name: UnitTester\n    modules:\n       enabled:\n         - Asserts\n         - Yii2:\n               part: [orm, fixtures, email]\n    ```", "```php\n    class_name: AcceptanceTester\n    modules:\n       enabled:\n           - WebDriver:\n               url: http://127.0.0.1:8080/\n               browser: firefox\n           - Yii2:\n               part: [orm, fixtures]\n               entryScript: index-test.php\n               cleanup: false\n    ```", "```php\n    composer exec codecept build\n\n    ```", "```php\n    <?php\n    namespace tests\\unit\\models;\n\n    use app\\models\\Post;\n    use Codeception\\Test\\Unit;\n    use tests\\fixtures\\PostFixture;\n\n    class PostTest extends Unit\n    {\n        /**\n        * @var \\UnitTester\n        */\n        protected $tester;\n\n        public function _before()\n        {\n            $this->tester->haveFixtures([\n                'post' => [\n                    'class' => PostFixture::className(),\n                    'dataFile' => codecept_data_dir() . 'post.php'\n                ]\n            ]);\n        }\n\n        public function testValidateEmpty()\n        {\n            $model = new Post();\n\n            expect('model should not validate', $model->validate())->false();\n\n            expect('title has error', $model->errors)->hasKey('title');\n            expect('title has error', $model->errors)->hasKey('text');\n        }\n\n        public function testValidateCorrect()\n        {\n             $model = new Post([\n                 'title' => 'Other Post',\n                 'text' => 'Other Post Text',\n             ]);\n\n             expect('model should validate', $model->validate())->true();\n        }\n\n        public function testSave()\n        {\n            $model = new Post([\n                'title' => 'Test Post',\n                'text' => 'Test Post Text',\n            ]);\n\n             expect('model should save', $model->save())->true();\n\n            expect('title is correct', $model->title)->equals('Test Post');\n            expect('text is correct', $model->text)->equals('Test Post Text');\n            expect('status is draft', $model->status)->equals(Post::STATUS_DRAFT);\n            expect('created_at is generated', $model->created_at)->notEmpty();\n            expect('updated_at is generated', $model->updated_at)->notEmpty();\n        }\n\n        public function testPublish()\n        {\n            $model = new Post(['status' => Post::STATUS_DRAFT]);\n\n            expect('post is drafted', $model->status)->equals(Post::STATUS_DRAFT);\n            $model->publish();\n            expect('post is published', $model->status)->equals(Post::STATUS_ACTIVE);\n        }\n\n        public function testAlreadyPublished()\n        {\n            $model = new Post(['status' => Post::STATUS_ACTIVE]);\n\n            $this->setExpectedException('\\LogicException');\n            $model->publish();\n        }\n\n        public function testDraft()\n        {\n            $model = new Post(['status' => Post::STATUS_ACTIVE]);\n\n            expect('post is published', $model->status)->equals(Post::STATUS_ACTIVE);\n            $model->draft();\n            expect('post is drafted', $model->status)->equals(Post::STATUS_DRAFT);\n        }\n\n        public function testAlreadyDrafted()\n        {\n            $model = new Post(['status' => Post::STATUS_ACTIVE]);\n\n            $this->setExpectedException('\\LogicException');\n            $model->publish();\n        }\n    }\n    ```", "```php\n    composer exec codecept run unit\n\n    ```", "```php\n    codecept generate:cest functional admin/Posts\n    ```", "```php\n    <?php\n    namespace tests\\functional\\admin;\n\n    use app\\models\\Post;\n    use FunctionalTester;\n    use tests\\fixtures\\PostFixture;\n    use yii\\helpers\\Url;\n\n    class PostsCest\n    {\n        function _before(FunctionalTester $I)\n        {\n            $I->haveFixtures([\n                'user' => [\n                    'class' => PostFixture::className(),\n                    'dataFile' => codecept_data_dir() . 'post.php'\n                ]\n            ]);\n        }\n\n        public function testIndex(FunctionalTester $I)\n        {\n            $I->amOnPage(['admin/posts/index']);\n            $I->see('Posts', 'h1');\n        }\n\n        public function testView(FunctionalTester $I)\n        {\n            $I->amOnPage(['admin/posts/view', 'id' => 1]);\n            $I->see('First Post', 'h1');\n        }\n\n        public function testCreateInvalid(FunctionalTester $I)\n        {\n            $I->amOnPage(['admin/posts/create']);\n            $I->see('Create', 'h1');\n\n            $I->submitForm('#post-form', [\n                'Post[title]' => '',\n                'Post[text]' => '',\n            ]);\n\n            $I->expectTo('see validation errors');\n            $I->see('Title cannot be blank.', '.help-block');\n            $I->see('Text cannot be blank.', '.help-block');\n        }\n\n        public function testCreateValid(FunctionalTester $I)\n        {\n            $I->amOnPage(['admin/posts/create']);\n            $I->see('Create', 'h1');\n\n            $I->submitForm('#post-form', [\n                'Post[title]' => 'Post Create Title',\n                'Post[text]' => 'Post Create Text',\n                'Post[status]' => 'Active',\n            ]);\n\n            $I->expectTo('see view page');\n            $I->see('Post Create Title', 'h1');\n        }\n\n        public function testUpdate(FunctionalTester $I)\n        {\n            // ...\n        }\n        public function testDelete(FunctionalTester $I)\n        {\n            $I->amOnPage(['/admin/posts/view', 'id' => 3]);\n            $I->see('Title For Deleting', 'h1');\n\n            $I->amGoingTo('delete item');\n            $I->sendAjaxPostRequest(Url::to(['/admin/posts/delete', 'id' => 3]));\n            $I->expectTo('see that post is deleted');\n            $I->dontSeeRecord(Post::className(), [\n                'title' => 'Title For Deleting',\n            ]);\n        }\n    }\n    ```", "```php\n    composer exec codecept run functional\n\n    ```", "```php\n    <?php\n    namespace tests\\acceptance\\admin;\n\n    use AcceptanceTester;\n    use tests\\fixtures\\PostFixture;\n    use yii\\helpers\\Url;\n\n    class PostsCest\n    {\n        function _before(AcceptanceTester $I)\n        {\n            $I->haveFixtures([\n                'post' => [\n                    'class' => PostFixture::className(),\n                    'dataFile' => codecept_data_dir() . 'post.php'\n                ]\n            ]);\n        }\n\n        public function testIndex(AcceptanceTester $I)\n        {\n            $I->wantTo('ensure that post index page works');\n            $I->amOnPage(Url::to(['/admin/posts/index']));\n            $I->see('Posts', 'h1');\n        }\n\n        public function testView(AcceptanceTester $I)\n       {\n            $I->wantTo('ensure that post view page works');\n            $I->amOnPage(Url::to(['/admin/posts/view', 'id' => 1]));\n            $I->see('First Post', 'h1');\n        }\n\n        public function testCreate(AcceptanceTester $I)\n        {\n            $I->wantTo('ensure that post create page works');\n            $I->amOnPage(Url::to(['/admin/posts/create']));\n            $I->see('Create', 'h1');\n\n            $I->fillField('#post-title', 'Post Create Title');\n            $I->fillField('#post-text', 'Post Create Text');\n            $I->selectOption('#post-status', 'Active');\n\n            $I->click('submit-button');\n            $I->wait(3);\n\n            $I->expectTo('see view page');\n            $I->see('Post Create Title', 'h1');\n        }\n\n        public function testDelete(AcceptanceTester $I)\n        {\n            $I->amOnPage(Url::to(['/admin/posts/view', 'id' => 3]));\n            $I->see('Title For Deleting', 'h1');\n\n            $I->click('Delete');\n            $I->acceptPopup();\n            $I->wait(3);\n\n            $I->see('Posts', 'h1');\n        }\n    }\n    ```", "```php\n    tests/bin/yii serve\n\n    ```", "```php\n    composer exec codecept run acceptance\n\n    ```", "```php\n    <?php\n    namespace app\\controllers\\api;\n\n    use yii\\rest\\ActiveController;\n\n    class PostsController extends ActiveController\n    {\n        public $modelClass = '\\app\\models\\Post';\n    }\n    ```", "```php\n    'components' => [\n        // ...\n        'urlManager' => [\n            'enablePrettyUrl' => true,\n            'showScriptName' => false,\n            'rules' => [\n                ['class' => 'yii\\rest\\UrlRule', 'controller' => 'api/posts'],\n            ],\n        ],\n    ],\n    ```", "```php\n    'components' => [\n        // ...\n        'urlManager' => [\n            'enablePrettyUrl' => true,\n            'showScriptName' => true,\n            'rules' => [\n                ['class' => 'yii\\rest\\UrlRule', 'controller' => 'api/posts'],\n            ],\n         ],\n    ],\n    ```", "```php\n    RewriteEngine On\n\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule . index.php\n    ```", "```php\n    class_name: ApiTester\n    modules:\n       enabled:\n           - REST:\n               depends: PhpBrowser\n               url: 'http://127.0.0.1:8080/index-test.php'\n               part: [json]\n           - Yii2:\n               part: [orm, fixtures]\n               entryScript: index-test.php\n    ```", "```php\n    composer exec codecept build\n\n    ```", "```php\n    composer exec codecept generate:cest api Posts\n\n    ```", "```php\n    <?php\n    namespace tests\\api;\n\n    use ApiTester;\n    use tests\\fixtures\\PostFixture;\n    use yii\\helpers\\Url;\n\n    class PostsCest\n    {\n       function _before(ApiTester $I)\n       {\n           $I->haveFixtures([\n               'post' => [\n                   'class' => PostFixture::className(),\n                   'dataFile' => codecept_data_dir() . 'post.php'\n               ]\n           ]);\n       }\n\n       public function testGetAll(ApiTester $I)\n       {\n           $I->sendGET('/api/posts');\n           $I->seeResponseCodeIs(200);\n           $I->seeResponseIsJson();\n           $I->seeResponseContainsJson([0 => ['title' => 'First Post']]);\n       }\n\n       public function testGetOne(ApiTester $I)\n       {\n           $I->sendGET('/api/posts/1');\n           $I->seeResponseCodeIs(200);\n           $I->seeResponseIsJson();\n           $I->seeResponseContainsJson(['title' => 'First Post']);\n       }\n\n       public function testGetNotFound(ApiTester $I)\n       {\n           $I->sendGET('/api/posts/100');\n           $I->seeResponseCodeIs(404);\n           $I->seeResponseIsJson();\n           $I->seeResponseContainsJson(['name' => 'Not Found']);\n       }\n\n       public function testCreate(ApiTester $I)\n       {\n           $I->sendPOST('/api/posts', [\n               'title' => 'Test Title',\n               'text' => 'Test Text',\n           ]);\n           $I->seeResponseCodeIs(201);\n           $I->seeResponseIsJson();\n           $I->seeResponseContainsJson(['title' => 'Test Title']);\n       }\n\n       public function testUpdate(ApiTester $I)\n       {\n           $I->sendPUT('/api/posts/2', [\n               'title' => 'New Title',\n           ]);\n           $I->seeResponseCodeIs(200);\n           $I->seeResponseIsJson();\n           $I->seeResponseContainsJson([\n               'title' => 'New Title',\n               'text' => 'Old Text For Updating',\n           ]);\n       }\n\n       public function testDelete(ApiTester $I)\n       {\n           $I->sendDELETE('/api/posts/3');\n           $I->seeResponseCodeIs(204);\n       }\n    }\n    ```", "```php\n    tests/bin yii serve\n\n    ```", "```php\n    composer exec codecept run api\n\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        └── tests\n    ```", "```php\n    {\n        \"name\": \"book/cart\",\n        \"type\": \"yii2-extension\",\n        \"require\": {\n            \"yiisoft/yii2\": \"~2.0\"\n        },\n        \"require-dev\": {\n            \"phpunit/phpunit\": \"4.*\"\n        },\n        \"autoload\": {\n            \"psr-4\": {\n                \"book\\\\cart\\\\\": \"src/\",\n                \"book\\\\cart\\\\tests\\\\\": \"tests/\"\n            }\n        },\n        \"extra\": {\n            \"asset-installer-paths\": {\n                \"npm-asset-library\": \"vendor/npm\",\n                \"bower-asset-library\": \"vendor/bower\"\n            }\n        }\n    }\n    ```", "```php\n    /vendor\n    /composer.lock\n    ```", "```php\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <phpunit bootstrap=\"./tests/bootstrap.php\"\n             colors=\"true\"\n             convertErrorsToExceptions=\"true\"\n             convertNoticesToExceptions=\"true\"\n             convertWarningsToExceptions=\"true\"\n             stopOnFailure=\"false\">\n        <testsuites>\n            <testsuite name=\"Test Suite\">\n                <directory>./tests</directory>\n            </testsuite>\n        </testsuites>\n        <filter>\n            <whitelist>\n                <directory suffix=\".php\">./src/</directory>\n            </whitelist>\n        </filter>\n    </phpunit>\n    ```", "```php\n    composer install\n\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        ├── tests\n        ├── .gitignore\n        ├── composer.json\n        ├── phpunit.xml.dist\n        └── vendor\n    ```", "```php\n    <?php\n    namespace book\\cart;\n\n    use book\\cart\\storage\\StorageInterface;\n    use yii\\base\\Component;\n    use yii\\base\\InvalidConfigException;\n\n    class Cart extends Component\n    {\n        /**\n         * @var StorageInterface\n         */\n        private $_storage;\n        /**\n         * @var array\n         */\n        private $_items;\n\n        public function setStorage($storage)\n        {\n            if (is_array($storage)) {\n                $this->_storage = \\Yii::createObject($storage);\n            } else {\n                $this->_storage = $storage;\n            }\n        }\n\n        public function add($id, $amount = 1)\n        {\n            $this->loadItems();\n            if (isset($this->_items[$id])) {\n                $this->_items[$id] += $amount;\n            } else {\n                $this->_items[$id] = $amount;\n            }\n            $this->saveItems();\n        }\n\n        public function set($id, $amount)\n        {\n            $this->loadItems();\n            $this->_items[$id] = $amount;\n            $this->saveItems();\n        }\n\n        public function remove($id)\n        {\n            $this->loadItems();\n            if (isset($this->_items[$id])) {\n                unset($this->_items[$id]);\n            }\n            $this->saveItems();\n        }\n\n        public function clear()\n        {\n            $this->loadItems();\n            $this->_items = [];\n            $this->saveItems();\n        }\n\n        public function getItems()\n        {\n            $this->loadItems();\n            return $this->_items;\n        }\n\n        public function getCount()\n        {\n            $this->loadItems();\n            return count($this->_items);\n        }\n\n        public function getAmount()\n        {\n            $this->loadItems();\n            return array_sum($this->_items);\n        }\n\n        private function loadItems()\n        {\n            if ($this->_storage === null) {\n                throw new InvalidConfigException('Storage must be set');\n            }\n            if ($this->_items === null) {\n                $this->_items = $this->_storage->load();\n            }\n        }\n\n        private function saveItems()\n        {\n             $this->_storage->save($this->_items);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\storage;\n\n    interface StorageInterface\n    {\n        /**\n         * @return array\n         */\n        public function load();\n\n        /**\n         * @param array $items\n         */\n        public function save(array $items);\n    }\n    ```", "```php\n    namespace book\\cart\\storage;\n\n    use Yii;\n\n    class SessionStorage implements StorageInterface\n    {\n        public $sessionKey = 'cart';\n\n        public function load()\n        {\n            return Yii::$app->session->get($this->sessionKey, []);\n        }\n\n        public function save(array $items)\n        {\n            Yii::$app->session->set($this->sessionKey, $items);\n        }\n    }\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        │   ├── storage\n        │   │   ├── SessionStorage.php\n        │   │   └── StorageInterface.php\n        │   └── Cart.php\n        ├── tests\n        ├── .gitignore\n        ├── composer.json\n        ├── phpunit.xml.dist\n        └── vendor\n    ```", "```php\n    <?php\n\n    defined('YII_DEBUG') or define('YII_DEBUG', true);\n    defined('YII_ENV') or define('YII_ENV', 'test');\n\n    require(__DIR__ . '/../vendor/autoload.php');\n    require(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests;\n\n    use yii\\di\\Container;\n    use yii\\web\\Application;\n\n    abstract class TestCase extends \\PHPUnit_Framework_TestCase\n    {\n        protected function setUp()\n        {\n            parent::setUp();\n            $this->mockApplication();\n        }\n\n        protected function tearDown()\n        {\n            $this->destroyApplication();\n            parent::tearDown();\n        }\n\n        protected function mockApplication()\n        {\n            new Application([\n                'id' => 'testapp',\n                'basePath' => __DIR__,\n                'vendorPath' => dirname(__DIR__) . '/vendor',\n            ]);\n        }\n\n        protected function destroyApplication()\n        {\n            \\Yii::$app = null;\n            \\Yii::$container = new Container();\n        }\n    }\n    ```", "```php\n    <?php\n\n    namespace book\\cart\\tests\\storage;\n\n    use book\\cart\\storage\\StorageInterface;\n\n    class FakeStorage implements StorageInterface\n    {\n        private $items = [];\n\n        public function load()\n        {\n            return $this->items;\n        }\n\n        public function save(array $items)\n        {\n            $this->items = $items;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests;\n\n    use book\\cart\\Cart;\n    use book\\cart\\tests\\storage\\FakeStorage;\n\n    class CartTest extends TestCase\n    {\n        /**\n         * @var Cart\n         */\n        private $cart;\n\n        public function setUp()\n        {\n            parent::setUp();\n            $this->cart = new Cart(['storage' => new FakeStorage()]);\n        }\n\n        public function testEmpty()\n        {\n            $this->assertEquals([], $this->cart->getItems());\n            $this->assertEquals(0, $this->cart->getCount());\n            $this->assertEquals(0, $this->cart->getAmount());\n        }\n\n        public function testAdd()\n        {\n            $this->cart->add(5, 3);\n            $this->assertEquals([5 => 3], $this->cart->getItems());\n\n            $this->cart->add(7, 14);\n            $this->assertEquals([5 => 3, 7 => 14], $this->cart->getItems());\n\n            $this->cart->add(5, 10);\n            $this->assertEquals([5 => 13, 7 => 14], $this->cart->getItems());\n        }\n\n        public function testSet()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->add(7, 14);\n            $this->cart->set(5, 12);\n            $this->assertEquals([5 => 12, 7 => 14], $this->cart->getItems());\n        }\n\n        public function testRemove()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->remove(5);\n            $this->assertEquals([], $this->cart->getItems());\n        }\n\n        public function testClear()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->add(7, 14);\n            $this->cart->clear();\n            $this->assertEquals([], $this->cart->getItems());\n        }\n\n        public function testCount()\n        {\n            $this->cart->add(5, 3);\n            $this->assertEquals(1, $this->cart->getCount());\n\n            $this->cart->add(7, 14);\n            $this->assertEquals(2, $this->cart->getCount());\n        }\n\n        public function testAmount()\n        {\n            $this->cart->add(5, 3);\n            $this->assertEquals(3, $this->cart->getAmount());\n\n            $this->cart->add(7, 14);\n            $this->assertEquals(17, $this->cart->getAmount());\n        }\n\n        public function testEmptyStorage()\n        {\n            $cart = new Cart();\n            $this->setExpectedException('yii\\base\\InvalidConfigException');\n            $cart->getItems();\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests\\storage;\n\n    use book\\cart\\storage\\SessionStorage;\n    use book\\cart\\tests\\TestCase;\n\n    class SessionStorageTest extends TestCase\n    {\n        /**\n         * @var SessionStorage\n         */\n        private $storage;\n\n        public function setUp()\n        {\n            parent::setUp();\n            $this->storage = new SessionStorage(['key' => 'test']);\n        }\n\n        public function testEmpty()\n        {\n            $this->assertEquals([], $this->storage->load());\n        }\n\n        public function testStore()\n        {\n            $this->storage->save($items = [1 => 5, 6 => 12]);\n\n            $this->assertEquals($items, $this->storage->load());\n        }\n    }\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        │   ├── storage\n        │   │   ├── SessionStorage.php\n        │   │   └── StorageInterface.php\n        │   └── Cart.php\n        ├── tests\n        │   ├── storage\n        │   │   ├── FakeStorage.php\n        │   │   └── SessionStorageTest.php\n        │   ├── bootstrap.php\n        │   ├── CartTest.php\n        │   └── TestCase.php\n        ├── .gitignore\n        ├── composer.json\n        ├── phpunit.xml.dist\n        └── vendor\n    ```", "```php\ncd book/cart\nvendor/bin/phpunit\n```", "```php\nPHPUnit 4.8.26 by Sebastian Bergmann and contributors.\n\n..........\n\nTime: 906 ms, Memory: 11.50MB\n\nOK (10 tests, 16 assertions)\n\n```", "```php\nclass Cart extends Component\n{\n    …\n\n    public function remove($id)\n    {\n        $this->loadItems();\n        if (isset($this->_items[$id])) {\n            // unset($this->_items[$id]);\n        }\n        $this->saveItems();\n    }\n\n    ...\n}\n```", "```php\nPHPUnit 4.8.26 by Sebastian Bergmann and contributors.\n\n...F......\n\nTime: 862 ms, Memory: 11.75MB\n\nThere was 1 failure:\n\n1) book\\cart\\tests\\CartTest::testRemove\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n+    5 => 3\n )\n\n/book/cart/tests/CartTest.php:52\n\nFAILURES!\nTests: 10, Assertions: 16, Failures: 1\n\n```", "```php\nsudo apt-get install php5-xdebug\n\n```", "```php\n[xdebug]\nzend_extension_ts=C:/php/ext/php_xdebug.dll\n```", "```php\n[xdebug]\nzend_extension=C:/php/ext/php_xdebug.dll\n```", "```php\nvendor/bin/phpunit --coverage-html tests/_output\n```", "```php\ncomposer require book/cart\n\n```", "```php\n'components' => [\n    // …\n    'cart' => [\n        'class' => 'book\\cart\\Cart',\n        'storage' => [\n            'class' => 'book\\cart\\storage\\SessionStorage',\n        ],\n    ],\n],\n```", "```php\n$config = [\n    'id' => 'basic',\n    'basePath' => dirname(__DIR__),\n    'bootstrap' => ['log'],\n    'aliases' => [\n        '@book' => dirname(__DIR__) . '/book',\n    ],\n    'components' => [\n        'cart' => [\n            'class' => 'book\\cart\\Cart',\n            'storage' => [\n                'class' => 'book\\cart\\storage\\SessionStorage',\n            ],\n        ],\n        // ...\n    ],\n]\n```", "```php\nYii::$app->cart->add($product->id, $amount);\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<phpunit bootstrap=\"./tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">./src/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n```", "```php\n<?php\ndefined('YII_DEBUG') or define('YII_DEBUG', true);\ndefined('YII_ENV') or define('YII_ENV', 'test');\nrequire(__DIR__ . '/../vendor/autoload.php');\nrequire(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');\n```", "```php\nclass MyTest extends TestCase\n{\n    public function testSomeFunction()\n    {\n        $this->assertTrue(true);\n    }\n}\n```", "```php\n$this->assertEqual('Alex', $model->name);\n$this->assertTrue($model->validate());\n$this->assertFalse($model->save());\n$this->assertCount(3, $items);\n$this->assertArrayHasKey('username', $model->getErrors());\n$this->assertNotNull($model->author);\n$this->assertInstanceOf('app\\models\\User', $model->author);\n```", "```php\n<?php\nnamespace book\\cart\\tests;\n\nuse yii\\di\\Container;\nuse yii\\web\\Application;\n\nabstract class TestCase extends \\PHPUnit_Framework_TestCase\n{\n    protected function setUp()\n    {\n        parent::setUp();\n        $this->mockApplication();\n    }\n\n    protected function tearDown()\n    {\n        $this->destroyApplication();\n        parent::tearDown();\n    }\n\n    protected function mockApplication()\n    {\n        new Application([\n            'id' => 'testapp',\n            'basePath' => __DIR__,\n            'vendorPath' => dirname(__DIR__) . '/vendor',\n        ]);\n    }\n\n    protected function destroyApplication()\n    {\n        \\Yii::$app = null;\n        \\Yii::$container = new Container();\n    }\n}\n```", "```php\n    book\n    └── cart\n        ├── src\n        └── tests\n    ```", "```php\n    {\n        \"name\": \"book/cart\",\n        \"type\": \"yii2-extension\",\n        \"require\": {\n            \"yiisoft/yii2\": \"~2.0\"\n        },\n        \"require-dev\": {\n            \"atoum/atoum\": \"^2.7\"\n        },\n        \"autoload\": {\n            \"psr-4\": {\n                \"book\\\\cart\\\\\": \"src/\",\n                \"book\\\\cart\\\\tests\\\\\": \"tests/\"\n            }\n        },\n        \"extra\": {\n            \"asset-installer-paths\": {\n                \"npm-asset-library\": \"vendor/npm\",\n                \"bower-asset-library\": \"vendor/bower\"\n            }\n        }\n    }\n    ```", "```php\n    /vendor\n    /composer.lock\n    ```", "```php\n    composer install\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        ├── tests\n        ├── .gitignore\n        ├── composer.json\n        ├── phpunit.xml.dist\n        └── vendor\n    ```", "```php\nbook\n└── cart\n    ├── src\n    │   ├── storage\n    │   │   ├── SessionStorage.php\n    │   │   └── StorageInterface.php\n    │   └── Cart.php\n    ├── tests\n    ├── .gitignore\n    ├── composer.json\n    └── vendor\n```", "```php\n    <?php\n    defined('YII_DEBUG') or define('YII_DEBUG', true);\n    defined('YII_ENV') or define('YII_ENV', 'test');\n    require(__DIR__ . '/../vendor/autoload.php');\n    require(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');\n    ```", "```php\n    <?php\n\n    namespace book\\cart\\tests;\n\n    use yii\\di\\Container;\n    use yii\\console\\Application;\n    use mageekguy\\atoum\\test;\n\n    abstract class TestCase extends test\n    {\n        public function beforeTestMethod($method)\n        {\n            parent::beforeTestMethod($method);\n            $this->mockApplication();\n        }\n\n        public function afterTestMethod($method)\n        {\n            $this->destroyApplication();\n            parent::afterTestMethod($method);\n        }\n\n        protected function mockApplication()\n        {\n            new Application([\n                'id' => 'testapp',\n                'basePath' => __DIR__,\n                'vendorPath' => dirname(__DIR__) . '/vendor',\n                'components' => [\n                    'session' => [\n                        'class' => 'yii\\web\\Session',\n                    ],\n                ]\n            ]);\n        }\n\n        protected function destroyApplication()\n        {\n            \\Yii::$app = null;\n            \\Yii::$container = new Container();\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests;\n\n    use book\\cart\\storage\\StorageInterface;\n\n    class FakeStorage implements StorageInterface\n    {\n        private $items = [];\n\n        public function load()\n        {\n            return $this->items;\n        }\n\n        public function save(array $items)\n        {\n            $this->items = $items;\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests\\units;\n\n    use book\\cart\\tests\\FakeStorage;\n    use book\\cart\\Cart as TestedCart;\n    use book\\cart\\tests\\TestCase;\n\n    class Cart extends TestCase\n    {\n        /**\n         * @var TestedCart\n         */\n        private $cart;\n\n        public function beforeTestMethod($method)\n        {\n            parent::beforeTestMethod($method);\n            $this->cart = new TestedCart(['storage' => new FakeStorage()]);\n        }\n\n        public function testEmpty()\n        {\n            $this->array($this->cart->getItems())->isEqualTo([]);\n            $this->integer($this->cart->getCount())->isEqualTo(0);\n            $this->integer($this->cart->getAmount())->isEqualTo(0);\n        }\n\n        public function testAdd()\n        {        \n            $this->cart->add(5, 3);\n            $this->array($this->cart->getItems())->isEqualTo([5 => 3]);\n\n            $this->cart->add(7, 14);\n            $this->array($this->cart->getItems())->isEqualTo([5 => 3, 7 => 14]);\n\n            $this->cart->add(5, 10);\n            $this->array($this->cart->getItems())->isEqualTo([5 => 13, 7 => 14]);\n        }\n\n        public function testSet()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->add(7, 14);\n            $this->cart->set(5, 12);\n            $this->array($this->cart->getItems())->isEqualTo([5 => 12, 7 => 14]);\n        }\n\n        public function testRemove()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->remove(5);\n            $this->array($this->cart->getItems())->isEqualTo([]);\n        }\n\n        public function testClear()\n        {\n            $this->cart->add(5, 3);\n            $this->cart->add(7, 14);\n            $this->cart->clear();\n            $this->array($this->cart->getItems())->isEqualTo([]);\n        }\n\n        public function testCount()\n        {\n            $this->cart->add(5, 3);\n            $this->integer($this->cart->getCount())->isEqualTo(1);\n\n            $this->cart->add(7, 14);\n            $this->integer($this->cart->getCount())->isEqualTo(2);\n        }\n\n        public function testAmount()\n        {\n            $this->cart->add(5, 3);\n            $this->integer($this->cart->getAmount())->isEqualTo(3);\n\n            $this->cart->add(7, 14);\n            $this->integer($this->cart->getAmount())->isEqualTo(17);\n        }\n\n        public function testEmptyStorage()\n        {\n            $cart = new TestedCart();\n\n            $this->exception(function () use ($cart) {\n                $cart->getItems();\n            })->hasMessage('Storage must be set');\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\tests\\units\\storage;\n\n    use book\\cart\\storage\\SessionStorage as TestedStorage;\n    use book\\cart\\tests\\TestCase;\n\n    class SessionStorage extends TestCase\n    {\n        /**\n         * @var TestedStorage\n         */\n        private $storage;\n\n        public function beforeTestMethod($method)\n        {\n            parent::beforeTestMethod($method);\n            $this->storage = new TestedStorage(['key' => 'test']);\n        }\n\n        public function testEmpty()\n        {\n            $this\n                ->given($storage = $this->storage)\n                ->then\n                    ->array($storage->load())\n                        ->isEqualTo([]);\n        }\n\n        public function testStore()\n        {\n            $this\n                ->given($storage = $this->storage)\n                ->and($storage->save($items = [1 => 5, 6 => 12]))\n                ->then\n                    ->array($this->storage->load())\n                        ->isEqualTo($items)\n            ;\n        }\n    }\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        │   ├── storage\n        │   │   ├── SessionStorage.php\n        │   │   └── StorageInterface.php\n        │   └── Cart.php\n        ├── tests\n        │   ├── units\n        │   │   ├── storage\n        │   │   │   └── SessionStorage.php\n        │   │   └── Cart.php\n        │   ├── bootstrap.php\n        │   ├── FakeStorage.php\n        │   └── TestCase.php\n        ├── .gitignore\n        ├── composer.json\n        └── vendor\n    ```", "```php\ncd book/cart\nvendor/bin/atoum -d tests/units -bf tests/bootstrap.php\n\n```", "```php\n> atoum path: /book/cart/vendor/atoum/atoum/vendor/bin/atoum\n> atoum version: 2.7.0\n> atoum path: /book/cart/vendor/atoum/atoum/vendor/bin/atoum\n> atoum version: 2.7.0\n> PHP path: /usr/bin/php5\n> PHP version:\n=> PHP 5.5.9-1ubuntu4.16 (cli)\n> book\\cart\\tests\\units\\Cart...\n[SSSSSSSS__________________________________________________][8/8]\n=> Test duration: 1.13 seconds.\n=> Memory usage: 3.75 Mb.\n> book\\cart\\tests\\units\\storage\\SessionStorage...\n[SS________________________________________________________][2/2]\n=> Test duration: 0.03 second.\n=> Memory usage: 1.00 Mb.\n> Total tests duration: 1.15 seconds.\n> Total tests memory usage: 4.75 Mb.\n> Code coverage value: 16.16%\n\n```", "```php\nclass Cart extends Component\n{\n    ...\n\n    public function remove($id)\n    {\n        $this->loadItems();\n        if (isset($this->_items[$id])) {\n            // unset($this->_items[$id]);\n        }\n        $this->saveItems();\n    }\n\n    ...\n}\n```", "```php\n> atoum version: 2.7.0\n> PHP path: /usr/bin/php5\n> PHP version:\n=> PHP 5.5.9-1ubuntu4.16 (cli)\nbook\\cart\\tests\\units\\Cart...\n[SSFSSSSS__________________________________________________][8/8]\n=> Test duration: 1.09 seconds.\n=> Memory usage: 3.25 Mb.\n> book\\cart\\tests\\units\\storage\\SessionStorage...\n[SS________________________________________________________][2/2]\n=> Test duration: 0.02 second.\n=> Memory usage: 1.00 Mb.\n...\nFailure (2 tests, 10/10 methods, 0 void method, 0 skipped method, 0 uncompleted method, 1 failure, 0 error, 0 exception)!\n> There is 1 failure:\n=> book\\cart\\tests\\units\\Cart::testRemove():\nIn file /book/cart/tests/units/Cart.php on line 53, mageekguy\\atoum\\asserters\\phpArray() failed: array(1) is not equal to array(0)\n-Expected\n+Actual\n@@ -1 +1,3 @@\n-array(0) {\n+array(1) {\n+  [5] =>\n+  int(3)\n\n```", "```php\nsudo apt-get install php5-xdebug\n\n```", "```php\n[xdebug]\nzend_extension_ts=C:/php/ext/php_xdebug.dll\n```", "```php\n[xdebug]\nzend_extension=C:/php/ext/php_xdebug.dll\n```", "```php\n<?php\nuse \\mageekguy\\atoum;\n/** @var atoum\\scripts\\runner $script */\n$report = $script->addDefaultReport();\n$coverageField = new atoum\\report\\fields\\runner\\coverage\\html('Cart', __DIR__ . '/tests/coverage');\n$report->addField($coverageField);\n```", "```php\nvendor/bin/atoum -d tests/units -bf tests/bootstrap.php -c coverage.php\n```", "```php\npublic function testSome()\n{\n    $this\n        ->given($cart = new TestedCart())\n        ->and($cart->add(5, 13))\n        ->then\n            ->sizeof($cart->getItems())\n                ->isEqualTo(1)\n            ->array($cart->getItems())\n                ->isEqualTo([5 => 3])\n            ->integer($cart->getCount())\n                ->isEqualTo(1)\n            ->integer($cart->getAmount())\n                ->isEqualTo(3);\n}\n```", "```php\npublic function testSome()\n{\n    $cart = new TestedCart();\n    $cart->add(5, 3);\n\n    $this\n        ->array($cart->getItems())->isEqualTo([5 => 3])\n        ->integer($cart->getCount())->isEqualTo(1)\n        ->integer($cart->getAmount())->isEqualTo(3)\n    ;\n}\n```", "```php\n    book\n    └── cart\n        ├── src\n        └── features\n    ```", "```php\n    {\n        \"name\": \"book/cart\",\n        \"type\": \"yii2-extension\",\n        \"require\": {\n            \"yiisoft/yii2\": \"~2.0\"\n        },\n        \"require-dev\": {\n            \"phpunit/phpunit\": \"4.*\",\n            \"behat/behat\": \"^3.1\"\n        },\n        \"autoload\": {\n            \"psr-4\": {\n                \"book\\\\cart\\\\\": \"src/\",\n                \"book\\\\cart\\\\features\\\\\": \"features/\"\n            }\n        },\n        \"extra\": {\n            \"asset-installer-paths\": {\n                \"npm-asset-library\": \"vendor/npm\",\n                \"bower-asset-library\": \"vendor/bower\"\n            }\n        }\n    }\n    ```", "```php\n    /vendor\n    /composer.lock\n    ```", "```php\n    composer install\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        ├── features\n        ├── .gitignore\n        ├── composer.json\n        └── vendor\n    ```", "```php\nbook\n└── cart\n    ├── src\n    │   ├── storage\n    │   │   ├── SessionStorage.php\n    │   │   └── StorageInterface.php\n    │   └── Cart.php\n    ├── features\n    ├── .gitignore\n    ├── composer.json\n    └── vendor\n```", "```php\n    <?php\n    defined('YII_DEBUG') or define('YII_DEBUG', true);\n    defined('YII_ENV') or define('YII_ENV', 'test');\n\n    require_once __DIR__ . '/../../vendor/yiisoft/yii2/Yii.php';\n    ```", "```php\n    Feature: Shopping cart\n      In order to buy products\n      As a customer\n      I need to be able to put interesting products into a cart\n\n      Scenario: Checking empty cart\n        Given there is a clean cart\n        Then I should have 0 products\n        Then I should have 0 product\n        And the overall cart amount should be 0\n\n      Scenario: Adding products to the cart\n        Given there is a clean cart\n        When I add 3 pieces of 5 product\n        Then I should have 3 pieces of 5 product\n        And I should have 1 product\n        And the overall cart amount should be 3\n\n        When I add 14 pieces of 7 product\n        Then I should have 3 pieces of 5 product\n        And I should have 14 pieces of 7 product\n        And I should have 2 products\n        And the overall cart amount should be 17\n\n        When I add 10 pieces of 5 product\n        Then I should have 13 pieces of 5 product\n        And I should have 14 pieces of 7 product\n        And I should have 2 products\n        And the overall cart amount should be 27\n\n      Scenario: Change product count in the cart\n        Given there is a cart with 5 pieces of 7 product\n        When I set 3 pieces for 7 product\n        Then I should have 3 pieces of 7 product\n\n      Scenario: Remove products from the cart\n        Given there is a cart with 5 pieces of 7 product\n        When I add 14 pieces of 7 product\n        And I clear cart\n        Then I should have empty cart\n    ```", "```php\n    Feature: Shopping cart storage\n      I need to be able to put items into a storage\n\n      Scenario: Checking empty storage\n        Given there is a clean storage\n        Then I should have empty storage\n\n      Scenario: Save items into storage\n        Given there is a clean storage\n        When I save 3 pieces of 7 product to the storage\n        Then I should have 3 pieces of 7 product in the storage\n    ```", "```php\n    <?php\n    use Behat\\Behat\\Context\\SnippetAcceptingContext;\n    use book\\cart\\Cart;\n    use book\\cart\\features\\bootstrap\\storage\\FakeStorage;\n    use yii\\di\\Container;\n    use yii\\web\\Application;\n\n    require_once __DIR__ . '/bootstrap.php';\n\n    class CartContext implements SnippetAcceptingContext\n    {\n        /**\n         * @var Cart\n         * */\n        private $cart;\n\n        /**\n         * @Given there is a clean cart\n         */\n        public function thereIsACleanCart()\n        {\n            $this->resetCart();\n        }\n\n        /**\n         * @Given there is a cart with :pieces of :product product\n         */\n        public function thereIsAWhichCostsPs($product, $amount)\n        {\n            $this->resetCart();\n            $this->cart->set($product, floatval($amount));\n        }\n\n        /**\n         * @When I add :pieces of :product\n         */\n        public function iAddTheToTheCart($product, $pieces)\n        {\n            $this->cart->add($product, $pieces);\n        }\n\n        /**\n         * @When I set :pieces for :arg2 product\n         */\n        public function iSetPiecesForProduct($pieces, $product)\n        {\n            $this->cart->set($product, $pieces);\n        }\n\n        /**\n         * @When I clear cart\n         */\n        public function iClearCart()\n        {\n            $this->cart->clear();\n        }\n\n        /**\n         * @Then I should have empty cart\n         */\n        public function iShouldHaveEmptyCart()\n        {\n            PHPUnit_Framework_Assert::assertEquals(\n                0,\n                $this->cart->getCount()\n            );\n        }\n\n        /**\n         * @Then I should have :count product(s)\n         */\n        public function iShouldHaveProductInTheCart($count)\n        {\n            PHPUnit_Framework_Assert::assertEquals(\n                intval($count),\n                $this->cart->getCount()\n            );\n        }\n\n        /**\n         * @Then the overall cart amount should be :amount\n         */\n        public function theOverallCartPriceShouldBePs($amount)\n        {\n            PHPUnit_Framework_Assert::assertSame(\n                intval($amount),\n                $this->cart->getAmount()\n            );\n        }\n\n        /**\n         * @Then I should have :pieces of :product\n         */\n        public function iShouldHavePiecesOfProduct($pieces, $product)\n        {\n            PHPUnit_Framework_Assert::assertArraySubset(\n                [intval($product) => intval($pieces)],\n                $this->cart->getItems()\n            );\n        }\n\n        private function resetCart()\n        {\n            $this->cart = new Cart(['storage' => new FakeStorage()]);\n        }\n    }\n    ```", "```php\n    <?php\n    use Behat\\Behat\\Context\\SnippetAcceptingContext;\n    use book\\cart\\Cart;\n    use book\\cart\\features\\bootstrap\\storage\\FakeStorage;\n    use book\\cart\\storage\\SessionStorage;\n    use yii\\di\\Container;\n    use yii\\web\\Application;\n\n    require_once __DIR__ . '/bootstrap.php';\n\n    class StorageContext implements SnippetAcceptingContext\n    {\n        /**\n         * @var SessionStorage\n         * */\n        private $storage;\n\n        /**\n         * @Given there is a clean storage\n         */\n        public function thereIsACleanStorage()\n        {\n            $this->mockApplication();\n            $this->storage = new SessionStorage(['key' => 'test']);\n        }\n\n        /**\n         * @When I save :pieces of :product to the storage\n         */\n        public function iSavePiecesOfProductToTheStorage($pieces, $product)\n        {\n            $this->storage->save([$product => $pieces]);\n        }\n\n        /**\n         * @Then I should have empty storage\n         */\n        public function iShouldHaveEmptyStorage()\n        {\n            PHPUnit_Framework_Assert::assertCount(\n                0,\n                $this->storage->load()\n            );\n        }\n\n        /**\n         * @Then I should have :pieces of :product in the storage\n         */\n        public function iShouldHavePiecesOfProductInTheStorage($pieces, $product)\n        {\n            PHPUnit_Framework_Assert::assertArraySubset(\n                [intval($product) => intval($pieces)],\n                $this->storage->load()\n            );\n        }\n\n        private function mockApplication()\n        {\n            Yii::$container = new Container();\n            new Application([\n                'id' => 'testapp',\n                'basePath' => __DIR__,\n                'vendorPath' => __DIR__ . '/../../vendor',\n            ]);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace book\\cart\\features\\bootstrap\\storage;\n\n    use book\\cart\\storage\\StorageInterface;\n\n    class FakeStorage implements StorageInterface\n    {\n        private $items = [];\n\n        public function load()\n        {\n            return $this->items;\n        }\n\n        public function save(array $items)\n        {\n            $this->items = $items;\n        }\n    }\n    ```", "```php\n    default:\n        suites:\n            default:\n                contexts:\n                    - CartContext\n                    - StorageContext\n    ```", "```php\n    book\n    └── cart\n        ├── src\n        │   ├── storage\n        │   │   ├── SessionStorage.php\n        │   │   └── StorageInterface.php\n        │   └── Cart.php\n        ├── features\n        │   ├── bootstrap\n        │   │   ├── storage\n        │   │   │   └── FakeStorage.php\n        │   │   ├── bootstrap.php\n        │   │   ├── CartContext.php\n        │   │   └── StorageContext.php\n        │   ├── cart.feature\n        │   └── storage.feature\n        ├── .gitignore\n        ├── behat.yml\n        ├── composer.json\n        └── vendor\n    ```", "```php\ncd book/cart\nvendor/bin/behat\n```", "```php\nFeature: Shopping cart\n In order to buy products\n As a customer\n I need to be able to put interesting products into a cart\n\n Scenario: Checking empty cart             # features/cart.feature:6\n Given there is a clean cart             # thereIsACleanCart()\n Then I should have 0 products           # iShouldHaveProductInTheCart()\n Then I should have 0 product            # iShouldHaveProductInTheCart()\n And the overall cart amount should be 0 # theOverallCartPriceShouldBePs()\n\n ...\n\nFeature: Shopping cart storage\n I need to be able to put items into a storage\n\n Scenario: Checking empty storage   # features/storage.feature:4\n Given there is a clean storage   # thereIsACleanStorage()\n Then I should have empty storage # iShouldHaveEmptyStorage()\n\n ...\n\n6 scenarios (6 passed)\n31 steps (31 passed)\n0m0.23s (13.76Mb)\n\n```", "```php\nclass Cart extends Component\n{\n    …\n\n    public function set($id, $amount)\n    {\n        $this->loadItems();\n        // $this->_items[$id] = $amount;\n        $this->saveItems();\n    }\n\n    ...\n}\n```", "```php\nFeature: Shopping cart\n  In order to buy products\n  As a customer\nFeature: Shopping cart\n  In order to buy products\n  As a customer\n  I need to be able to put interesting products into a cart\n\n  ...\n\n  Scenario: Change product count in the cart       # features/cart.feature:31\n    Given there is a cart with 5 pieces of 7 prod  # thereIsAWhichCostsPs()\n    When I set 3 pieces for 7 product              # iSetPiecesForProduct()\n    Then I should have 3 pieces of 7 product       # iShouldHavePiecesOf()\n      Failed asserting that an array has the subset Array &0 (\n          7 => 3\n      ).\n\n  Scenario: Remove products from the cart         # features/cart.feature:36\n    Given there is a cart with 5 pieces of 7 prod # thereIsAWhichCostsPs()\n    When I add 14 pieces of 7 product             # iAddTheToTheCart()\n    And I clear cart                              # iClearCart()\n    Then I should have empty cart                 # iShouldHaveEmptyCart()\n\n--- Failed scenarios:\n\n    features/cart.feature:31\n\n6 scenarios (5 passed, 1 failed)\n31 steps (30 passed, 1 failed)\n0m0.22s (13.85Mb)\n```", "```php\nScenario: Adding products to the cart\n    Given there is a clean cart\n    When I add 3 pieces of 5 product\n    Then I should have 3 pieces of 5 product\n    And I should have 1 product\n    And the overall cart amount should be 3\n```", "```php\nclass FeatureContext implements SnippetAcceptingContext\n{    \n    /**\n     * @When I add :pieces of :product\n     */\n    public function iAddTheToTheCart($product, $pieces)\n    {\n        $this->cart->add($product, $pieces);\n    }\n}\n```"]