- en: Chapter 5. Database Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding your way in the tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a database connection in Magento
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with flat tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with EAV tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Master/Slave setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repairing the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento has a very large database model to store all kinds of information. There
    are many Magento modules. Every module has its own tables in the database. A naming
    convention is used to provide a good overview in the database. Some modules use
    a flat database model (one table per entity), while other modules use the **EAV**
    (**Entity Attribute Value**) database model. The recipes in this chapter will
    cover the most important things you need to know when you are working with a database.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your way in the tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you look at the tables, you will realize that the number of tables is very
    high. In a standard installation, there are more than 300 database tables. A structured
    naming convention is needed to find your way in this maze of tables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will make some queries to the database to get an idea of
    the tables and their purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you have to firstly make a connection with your database client using
    **phpMyAdmin**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next steps, we will learn some methods to familiarize you with the database
    model in Magento:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get a list of the core modules. You can do this by running the `ls –l` command
    in the `app/code/core/Mage` folder. This will give you the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `SHOW TABLES` command on your database. This will give the following
    result in phpMyAdmin:![How to do it...](img/3329OS_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare the first part of the table names with the module list. You will see
    that the name of every table starts with the name of the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to phpMyAdmin and navigate to the **Designer** tab of the database. This
    page will render a database schema with all the database tables in Magento.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can limit the result by checking the tables you want to see in the left
    column. Uncheck all the tables and check the core tables. These are the tables
    starting with `core_*`. This will give you an overview of the relationships between
    the core tables, as shown in the following screenshot:![How to do it...](img/3329OS_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the previous screenshot, we see that there are a lot of relations starting
    from the `core_store` table. Let's have a look at the structure of this table.
    You can do this by clicking on the **Relation view** link in the **Structure**
    tab of the `core_store` table. This gives the following output:![How to do it...](img/3329OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Magento database is just like any database with tables and relations between
    them. The difficulty is that there are so many tables that make a simple overview
    very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to know the whole structure of the database while working. With
    the **Designer** option in phpMyAdmin, you can show the tables you want to see.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the tables in the database represent entities in Magento. These entities
    (models) are connected with the database using the Magento framework. This framework
    uses collections to do select queries on the database. These collections will
    generate a `Zend_Db_Statement` object that generates SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of these collections is that they return instances of Magento models.
    A SQL or Zend DB query will return an array with data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database connection in Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento uses resources to connect to a database. By default, Magento uses one
    connection to interact with the database. In this connection, there are resources
    declared in the `config.xml` files of the modules to link the models with the
    right table.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use a Magento connection to read some tables and we
    will learn how to configure a second connection to another database, such as a
    third-party system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to `IndexController` of the `Packt_Helloworld` module that we created
    in [Chapter 4](ch04.html "Chapter 4. Creating a Module"), *Creating a Module*.
    We will test some connections in the `indexController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will explain how to work with multiple database
    connections in your script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following code in the `indexAction` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This query will return an array of the values in the `core_store` table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `indexAction` method in the frontend. You will see all the values
    from the `core_store` table like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new connection. For example, we will make some queries on a second
    Drupal database. Paste the following code in the `indexAction` method and modify
    the connection parameters with your credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload your frontend and you will see the result of your previous query. The
    previous piece of code will make a connection to an external database using the
    Magento connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The database connections in Magento are managed by the `Mage_Core_Model_Resource`
    model. By using the **singleton** pattern to load the class, the connection is
    made once per process.
  prefs: []
  type: TYPE_NORMAL
- en: To get an instance of a model, you can use the `Mage::getModel()` function,
    which returns a new instance of the object. By using the `Mage::getSingleton()`
    function, an instance of the object given in the first parameter is returned.
    However, once the model is declared, Magento doesn't create a new instance but
    returns the existing instance of the object.
  prefs: []
  type: TYPE_NORMAL
- en: Working with flat tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento has two types of entities while working with the databases: **flat**
    entities and **EAV** entities.'
  prefs: []
  type: TYPE_NORMAL
- en: Flat tables works with fields that represent columns in a database table. EAV
    tables, which are described in the next chapter, will use attributes. In this
    recipe, we will concentrate on flat tables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will make some example queries on flat tables. Open the `IndexController`
    from the `Packt_Helloworld` module and create a `flatAction()` method in it. This
    controller action will be used to trigger the example queries.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next set of instructions, we will show you how a flat table from the
    database is linked to a Magento model:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the review tables. You can do this by filtering them in the phpMyAdmin
    table names.![How to do it...](img/3329OS_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get all the data from the `review_detail` table. You can do this by clicking
    on the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Print the same data by selecting it in the Magento code. To do this, paste
    the following code in your `flatAction` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While executing this code, an array of values is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can get the same result by working with the Magento collections. You can
    do this by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will give the same output, but the data of a collection is coming
    from objects and not directly from the database. The purpose of this is that we
    can directly call functions on the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When working with Magento database tables, it is recommended to use the collections
    instead of a direct SQL query. More information about the Magento collection is
    described in the *Working with Magento collections* recipe from [Chapter 6](ch06.html
    "Chapter 6. Databases and Modules"), *Databases and Modules*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the URLs of the reviews on the screen. We can do this simply by calling
    the `getReviewUrl()` function on the `review` entities. Add the following code
    in each loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While reloading the page, you will see that all the URLs of the reviews are
    printed. The logic of the URL structure is done in the `Mage_Review_Model_Review`
    class, which represents a `review` entity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with flat tables in Magento is not so difficult. When using the Magento
    framework, a flat entity consists of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The database table**: The database table is used to store the information
    of the entity. This database table can have relations to different tables in the
    Magento database, such as a relation with a product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The model object**: The model object is a class where an instance is returned
    while loading a row from the database table. This class can have methods with
    business logic, such as the `getReviewUrl()` function in this recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The resource model object**: The resource model is a class that connects
    the model with the database table. This class will handle, for example, the `save()`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The resource collection object**: The resource collection object is a class
    that makes it possible to work with Magento collections for an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with EAV tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The EAV table is a database model that is used for some entities in Magento.
    In this recipe, we will explore the details of the EAV implementation in Magento.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The EAV pattern is used for some entities in Magento such as the product entity.
    In this recipe, we will make some queries for updating a product using SQL queries.
    Open your database client and prepare yourself for running some complex queries.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how you can create a query to return the data
    of a Magento EAV model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Magento EAV entities are declared in the `eav_entity_type` table. Run the
    following query to see which EAV entities are available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember the ID of the `catalog_product` entity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To get the attributes related to a product, we have to look in the `eav_attribute`
    table. To see which attributes are related to a product, we have to run the following
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure `10` is the entity type ID for `catalog_product`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we have the entity and attributes, so the value is the next part to find
    out. Find a product in the backend and remember the ID. For example, the product
    `HTC Touch Diamond` with the ID `166`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the product from the `catalog_product_entity` table by running the following
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last query will only return the entity information of this product. To
    get the information for an attribute, such as `name`, we have to look in the `value`
    table. For the `name` attribute, the `value` table is `catalog_product_entity_varchar`.
    Run the following query to get all the `varchar` attribute values for the product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous query gives the following result:![How to do it...](img/3329OS_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this result, you can recognize the name of the product. If you look at
    the attribute ID of the row and match the attribute ID with the one in the `eav_attribute`
    table, you will see that this refers to the `name` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To update the name of the product, make an update query on the row as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See that the `value_id` value matches the value ID of your previous result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the product in the backend, and you will see that the name of the product
    is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EAV entities in Magento are declared in the `eav_entity_type` table and the
    attributes are declared in the `eav_attribute` table.
  prefs: []
  type: TYPE_NORMAL
- en: Like every entity, each EAV entity has its own base table. In this base table,
    the primary fields are declared as columns in this table. All the other fields
    are declared as attributes in the `eav_attribute` table.
  prefs: []
  type: TYPE_NORMAL
- en: Every attribute is of a specific type such as `int`, `varchar`, `date`, `time`,
    `decimal`, and `text`. The place where these values are stored depends on the
    entity type and is declared in the configuration files of Magento.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the structure of the EAV tables for a product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3329OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not all EAV entities work with multiple tables by entity. For example, the `sales_flat_*`
    tables are all EAV tables, but they are, as their name suggests, flat. This means
    that all the attributes of the entity are set in a separate column of the flat
    table.
  prefs: []
  type: TYPE_NORMAL
- en: In the catalog configuration, you have the ability to enable the **Flat catalog**
    option for the tables for category and products. When this configuration is enabled,
    Magento will sync all the data from the EAV tables to the `catalog_flat_*` tables
    and will load the data from there.
  prefs: []
  type: TYPE_NORMAL
- en: When the **Flat catalog** option is enabled, you get a better performance because
    a `select` query on a single table is faster than getting the data from the different
    tables. The advantage is a better performance, but on the other hand, there are
    some disadvantages that could be a problem with a large amount of products and
    categories.
  prefs: []
  type: TYPE_NORMAL
- en: The Master data will be stored in the EAV tables. This means there is synchronization
    between the flat tables. This process is implemented as a **Magento Index Process**.
    When there are a lot of products and categories, this process can run very long.
    Another thing is that the size of the database can explode because the data is
    stored twice.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a Master/Slave setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Database replication** is used when you want to scale your infrastructure
    to serve more requests. There are a lot of methods available to scale your database
    to set up replication. The exact choice is different for every situation.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use a generic setup to create a Master/Slave setup for
    our Magento store. This setup will use a Master database server where all the
    `write` queries will be saved. The Slave database server(s) will be used for the
    `read` queries. The database is the most difficult component of an application
    to scale.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete the Master/Slave setup, we will use two different MySQL servers.
    Get the connection information such as hostname, IP addresses, username, and passwords.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will set up a Master/Slave replication in MySQL and configure Magento
    to use this setup. Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Master database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Log in to the server with SSH and open the `/etc/mysql/my.cnf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the `bind-address` section in the file and comment it out. By commenting
    this, you make it possible to make connections from different servers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Paste the following code in the `my.cnf` file under the `[mysqld]` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart your MySQL server by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the MySQL shell by running the following command. This will perform a
    login with the root user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you are logged in, you have to run the following queries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following commands to show the status of the Master database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last command from the previous snippet will give the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up the Master database](img/3329OS_05_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We will use this information in the Slave setup, so keep this with you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Unlock the tables with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While entering the `quit` or `exit` command, you will be returned to the shell
    of the server. The setup of the Master database is done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up the Slave database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perform an SSH login to your Slave server. This is a different server than your
    Master server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the MySQL shell with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new database `magento_dev` and import the Master database in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration in `the /etc/mysql/my.cnf` file under the `[mysqld]`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the MySQL server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following commands in your MySQL shell. Make sure the `MASTER_LOG_FILE`
    and `MASTER_LOG_POST` values match the values that you have seen while running
    the `SHOW MASTER STATUS` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to start the Slave server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the status by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up the Slave database](img/3329OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Magento
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, when the MySQL setup for the Master/Slave setup is done, it is time to
    configure Magento to use this setup. We have to configure this in the `app/etc/local.xml`
    file of Magento. Here, we will configure a `default_setup` connection and a `default_read`
    connection. To configure this, add the following XML in the `local.xml` file under
    the `<resources>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Clear your cache and your Magento will use this setup.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When data in the Master database changes, it has to be in sync with the Slave
    database. To establish this, the binary logfile is used to communicate between
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: You have to see that binary logging is configured on the Master. If not, you
    have to enable this and restart your MySQL server. If it is not enabled, there
    is no logfile, so there is no communication between servers. This is also the
    reason why the `MASTER_LOG_FILE` Slave must match the one on the Master database.
  prefs: []
  type: TYPE_NORMAL
- en: If the setup is done and the Magento configuration is in the `app/etc/local.xml`
    file, everything is finished. Magento is smart enough to send the `write` request
    to the Master and the `read` requests to the Slave.
  prefs: []
  type: TYPE_NORMAL
- en: Repairing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it happens that your Magento database is broken or corrupt. This can
    be caused by various reasons such as hacking or server crash. When the database
    is broken and you have to fix it, the database repair tool from Magento is of
    great help.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will make our database corrupt and fix it with the repair
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare you, download the **database repair tool** from the Magento site
    at [http://www.magentocommerce.com](http://www.magentocommerce.com) and place
    the PHP file in your server root.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how to make your database corrupt and fix it using
    the database repair tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a backup of your existing database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an empty database as the reference database. Let's say we call it `magento_dev_repair`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Magento to use this database in the `app/etc/local.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache and run Magento. This will install an empty Magento in this
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make your original database corrupt. You can do this by running the following
    queries that remove a foreign key and a table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Browse to the repair tool in your browser, and configure your original and reference
    database as shown in the following screenshot:![How to do it...](img/3329OS_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the form and the script will repair your database. On the next page,
    you will see what changes are made to your original database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the database in the `app/etc/local.xml` file, so Magento uses your original
    database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the cache and your shop is up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While running the database repair tool, the script will compare the original
    database with the reference database. If the comparison is done, the script will
    make the structure of your original database the same as the one of the reference
    databases.
  prefs: []
  type: TYPE_NORMAL
- en: The database repair tool only fixes structural issues with your database. If
    you miss some data, this is not the right tool to get the data back.
  prefs: []
  type: TYPE_NORMAL
