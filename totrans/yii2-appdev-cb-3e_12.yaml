- en: Chapter 12. Debugging, Logging, and Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。调试、日志记录和错误处理
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using different log routes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的日志路由
- en: Analyzing the Yii error stack trace
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析Yii错误堆栈跟踪
- en: Logging and using the context information
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录和使用上下文信息
- en: Displaying custom errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示自定义错误
- en: Custom panel for debug extension
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试扩展的自定义面板
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It is not possible to create a bug-free application if it is relatively complex,
    so developers have to detect errors and deal with them as fast as possible. Yii
    has a good set of utility features to handle logging and handling errors. Moreover,
    in the debug mode, Yii gives you a stack trace if there is an error. Using it,
    you can fix errors faster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序相对复杂，那么不可能创建一个无错误的程序，因此开发者必须尽快检测错误并处理它们。Yii提供了一套良好的实用功能来处理日志记录和错误处理。此外，在调试模式下，如果出现错误，Yii会提供堆栈跟踪。使用它，你可以更快地修复错误。
- en: In this chapter, we will review logging, analyzing the exception stack trace,
    and implementing our own error handler.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾日志记录、分析异常堆栈跟踪以及实现我们自己的错误处理器。
- en: Using different log routes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的日志路由
- en: Logging is the key to understanding what your application actually does when
    you have no chance to debug it. Believe it or not, even if you are 100% sure that
    the application will behave as expected, in production, it can do many things
    you were not aware of. This is OK, as no one can be aware of everything. Therefore,
    if we are expecting unusual behavior, we need to know about it as soon as possible
    and have enough details to reproduce it. This is where logging comes in handy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是在你无法调试应用程序时理解应用程序实际行为的关键。信不信由你，即使你100%确信应用程序将按预期行为，在生产环境中，它可能做许多你不知道的事情。这是正常的，因为没有人能了解一切。因此，如果我们期望出现异常行为，我们需要尽快了解它，并拥有足够的详细信息来重现它。这就是日志记录发挥作用的地方。
- en: Yii allows a developer not only to log messages but also to handle them differently
    depending on the message level and category. You can, for example, write a message
    to the database, send an e-mail, or just show it in the browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Yii不仅允许开发者记录消息，还可以根据消息级别和类别以不同的方式处理它们。例如，你可以将消息写入数据库，发送电子邮件，或者只是在浏览器中显示。
- en: 'In this recipe, we will handle log messages in a wise manner: the most important
    message will be sent through an e-mail, less important messages will be saved
    in files A and B, and the profiling will be routed to Firebug. Additionally, in
    a development mode, all messages and profiling information will be displayed on
    the screen.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将以明智的方式处理日志消息：最重要的消息将通过电子邮件发送，不太重要的消息将保存在文件A和B中，性能分析将路由到Firebug。此外，在开发模式下，所有消息和性能信息都将显示在屏幕上。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Configure logging using `config/web.php`:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`config/web.php`配置日志：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we will produce a few log messages in `protected/controllers/LogController.php`
    as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在`protected/controllers/LogController.php`中生成一些日志消息，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and view views/log/index.php:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并查看`views/log/index.php`：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now run the preceding action multiple times. On the screen, you should see the
    `Log` heading and a debug panel with the log messages number:![How to do it...](img/image00465.jpeg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在多次运行前面的操作。在屏幕上，你应该看到`日志`标题和一个带有日志消息数量的调试面板：![如何操作...](img/image00465.jpeg)
- en: If you click on **17**, you will see a web log similar to the one shown in the
    following screenshot:![How to do it...](img/image00389.jpeg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击**17**，你将看到一个类似于以下截图的网页日志：![如何操作...](img/image00389.jpeg)
- en: A log contains all the messages we have logged along with stack traces, timestamps,
    levels, and categories.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志包含我们记录的所有消息以及堆栈跟踪、时间戳、级别和类别。
- en: Now open the **Profiling** page. You should see profiler messages, as shown
    in the following screenshot:![How to do it...](img/image00467.jpeg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开**性能分析**页面。你应该能看到分析器消息，如下面的截图所示：![如何操作...](img/image00467.jpeg)
- en: Profiling info displays the total executing duration of own code block.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 性能分析信息显示自身代码块的总执行时间。
- en: As we just changed the log file names and not the paths, you should look in
    `runtime/logs` to find log files named `error.log`, `warning.log`, and `info.log`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们只更改了日志文件名而没有更改路径，你应该在 `runtime/logs` 中查找名为 `error.log`、`warning.log` 和 `info.log`
    的日志文件。
- en: 'Inside, you will find the following messages:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部，你可以找到以下消息：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When one logs a message using `Yii::erorr`, `Yii::warning`, `Yii::info`, or
    `Yii::trace`, Yii passes it to the log router.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `Yii::error`、`Yii::warning`、`Yii::info` 或 `Yii::trace` 记录消息时，Yii 会将其传递给日志路由器。
- en: Depending on how it is configured, it passes messages to one or many targets,
    for example, e-mailing errors, writing debug information in file A, and writing
    warning information in file B.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其配置方式，它将消息传递给一个或多个目标，例如，通过 `Yii::$app->mailer` 组件通过电子邮件发送错误，将调试信息写入文件 A，并将警告信息写入文件
    B。
- en: The object of the `yii\log\Dispatcher` class is typically attached to an application
    component named log. Therefore, in order to configure it, we should set its properties
    in the configuration file components section. The only configurable property there
    is targets that contains an array of log routes and their configurations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`yii\log\Dispatcher` 类的对象通常附加到名为 log 的应用程序组件。因此，为了配置它，我们应该在配置文件的 components
    部分设置其属性。那里唯一可配置的属性是 targets，它包含一个日志路由及其配置的数组。'
- en: 'We have defined four log routes. Let''s review them as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了四个日志路由。以下是如何回顾它们的：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`EmailTarget` sends log messages through an e-mail via the `Yii::$app->mailer`
    component by default. We limit category to example and level to error. An e-mail
    will be sent from `log@example.com` to two developers and the subject will be
    `Log error`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmailTarget` 默认通过 `Yii::$app->mailer` 组件通过电子邮件发送日志消息。我们限制类别为 example 和级别为
    error。一封电子邮件将从 `log@example.com` 发送到两位开发者，主题为 `Log error`：'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`FileTarget` appends error messages to a specified file. We limit the message
    level to warning and use a file named `warning.log`. We do the same for info-level
    messages by using a file named `Info.log`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileTarget` 将错误消息追加到指定的文件。我们限制消息级别为警告，并使用名为 `warning.log` 的文件。我们使用名为 `Info.log`
    的文件以相同的方式为 info 级别的消息执行相同的操作。'
- en: 'Also, we can use `yii\log\SyslogTarget` to write messages into the `Unix /var/log/syslog`
    system file and `yii\log\DbTarget` to write logs into the database. For the second
    one, you must apply their migrations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用 `yii\log\SyslogTarget` 将消息写入 `Unix /var/log/syslog` 系统文件，以及使用 `yii\log\DbTarget`
    将日志写入数据库。对于后者，你必须应用它们的迁移：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are more interesting things about Yii logging, which are covered in the
    following subsections.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Yii 日志还有更多有趣的事情，将在以下子节中介绍。
- en: Yii::trace versus Yii::getLogger()->log
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Yii::trace 与 Yii::getLogger()->log 的比较
- en: '`Yii::trace` is a simple wrapper around `Yii::log`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Yii::trace` 是 `Yii::log` 的简单包装：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Therefore, `Yii::trace` logs a message with a trace level, if Yii is in the
    `debug` mode.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果 Yii 处于 `debug` 模式，`Yii::trace` 会记录一个具有跟踪级别的消息。
- en: Yii::beginProfile and Yii::endProfile
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Yii::beginProfile` 和 `Yii::endProfile`'
- en: 'These methods are used to measure the execution time of some part of the application''s
    code. In our `LogController`, we measured 10,000 executions of `preg_replace`
    as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法用于测量应用程序代码某些部分的执行时间。在我们的 `LogController` 中，我们测量了 `preg_replace` 的 10,000
    次执行，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Yii::beginProfile` marks the beginning of a code block for profiling. We must
    set a unique token for every code block and optionally specify a category:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Yii::beginProfile` 标记了代码块开始进行性能分析。我们必须为每个代码块设置一个唯一的令牌，并可选地指定一个类别：'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Yii::endProfile` has to be matched with a previous call to `beginProfile`
    with the same category name:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Yii::endProfile` 必须与具有相同类别名称的先前 `beginProfile` 调用相匹配：'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `begin-` and `end-` calls must also be properly nested.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`begin-` 和 `end-` 调用也必须正确嵌套。'
- en: Log messages immediately
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 立即记录日志
- en: By default, Yii keeps all log messages in memory until the application is terminated.
    That's done for performance reasons and generally works fine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii 会将所有日志消息保存在内存中，直到应用程序终止。这样做是为了性能原因，并且通常工作得很好。
- en: 'However, if there is a console application with long running duration, log
    messages will not be written immediately. To make sure your messages will be logged
    at any moment, you can flush them explicitly using `Yii::$app->getLogger()>flush(true)`
    or change `flushInterval` and `exportInterval` for your console application configuration:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果有一个运行时间较长的控制台应用程序，日志消息将不会立即写入。为了确保你的消息在任何时候都会被记录，你可以显式地使用 `Yii::$app->getLogger()->flush(true)`
    或更改控制台应用程序配置中的 `flushInterval` 和 `exportInterval`：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about logging, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了了解更多关于日志记录的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
- en: The *Logging and using the context information* recipe
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*日志记录和使用上下文信息*配方'
- en: Analyzing the Yii error stack trace
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析Yii错误堆栈跟踪
- en: When an error occurs, Yii can display the error stack trace along with the error.
    A stack trace is especially helpful when we need to know what really caused an
    error rather than just the fact that an error occurred.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误时，Yii可以显示错误堆栈跟踪以及错误信息。堆栈跟踪在需要知道真正导致错误的原因，而不仅仅是错误发生的事实时特别有用。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，如官方指南中所述，请参阅[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Configure a database and import the following migration:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置数据库并导入以下迁移：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Generate an `Article` model using Yii.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Yii生成一个`Article`模型。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Now we will need to create some code to work with. Create `protected/controllers/ErrorController.php`
    as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建一些代码来工作。创建`protected/controllers/ErrorController.php`如下：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After running the preceding action, we should get the following error:![How
    to do it...](img/image00450.jpeg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的动作后，我们应该得到以下错误：![如何操作...](img/image00450.jpeg)
- en: Moreover, the stack trace shows the following error:![How to do it...](img/image00470.jpeg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，堆栈跟踪显示了以下错误：![如何操作...](img/image00470.jpeg)
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From the error message, we know that we have no alias column in the database,
    but we have used it somewhere in the code. In our case, it is very simple to find
    it just by searching all the project files, but in a large project, a column can
    be stored in a variable. Moreover, we have everything to fix an error without
    leaving the screen where the stack trace is displayed. We just need to read it
    carefully.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从错误信息中，我们知道数据库中没有别名列，但我们却在代码的某个地方使用了它。在我们的例子中，只需通过搜索所有项目文件就能轻松找到它，但在大型项目中，一个列可能存储在一个变量中。此外，我们可以在显示堆栈跟踪的屏幕上修复错误，而无需离开。我们只需仔细阅读即可。
- en: The stack trace displays a chain of calls in the reversed order starting with
    the one that caused an error. Generally, we don't need to read the whole trace
    to get what is going on. The framework code itself is tested well, so the probability
    of error is less. That is why Yii displays the application trace entries expanded
    and the framework trace entries collapsed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪显示了一系列调用，从导致错误的调用开始，顺序相反。通常，我们不需要阅读整个跟踪来了解发生了什么。框架代码本身经过了良好的测试，因此错误的可能性较小。这就是为什么Yii显示应用程序跟踪条目展开，而框架跟踪条目折叠。
- en: Therefore, we take the first expanded section and look for alias. After finding
    it, we can immediately tell that it is used in `ErrorController.ph` `p` on line
    19.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们选择第一个展开的部分，查找别名。在找到它之后，我们可以立即告诉它在`ErrorController.php`的第19行被使用。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about error handling, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了了解更多关于错误处理的信息，请参阅[http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html)
- en: The *Logging and using the context information* recipe
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*日志记录和使用上下文信息*配方'
- en: Logging and using the context information
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录和使用上下文信息
- en: Sometimes a log message is not enough to fix an error. For example, if you are
    following best practices and developing and testing an application with all possible
    errors reported, you can get an error message. However, without the execution
    context, it is only telling you that there was an error and it is not clear what
    actually caused it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有时日志消息不足以修复错误。例如，如果你遵循最佳实践，并使用所有可能出现的错误报告开发和测试应用程序，你可能会得到一个错误消息。然而，没有执行上下文，它只是在告诉你有一个错误，但并不清楚实际上是什么导致了它。
- en: For our example, we will use a very simple and poorly coded action that just
    echoes `Hello, <username>!` where the `username` is taken directly from `$_GET`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用一个非常简单且编码质量差的动作，该动作只是回显`Hello, <username>!`，其中`username`直接从`$_GET`获取。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，具体操作请参考官方指南中的[http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html)。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Carry out the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'First, we will need a controller to work with. Therefore, create `protected/controllers/LogController.php`
    as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个控制器来工作。因此，创建`protected/controllers/LogController.php`如下：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, if we run the index action, we will get the error message, `Undefined
    index: username`. Let''s configure the logger to write this kind of error to a
    file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，如果我们运行索引操作，我们将得到错误消息`Undefined index: username`。让我们配置记录器将这类错误写入文件：'
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the index action again and check `runtime/logs/errors.log`. There should
    be log information like the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行索引操作并检查`runtime/logs/errors.log`文件。应该会有如下类似的日志信息：
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we can give our application to a testing team and check the errors log
    from time to time. By default, error report log contain values from all the `$_GET`,
    `$_POST`, `$_FILES`, `$_COOKIE`, `$_SESSION`, and `$_SERVER` variables. If you
    do not want to display all values, you can specify a custom variable list:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将我们的应用程序交给测试团队，并定期检查错误日志。默认情况下，错误报告日志包含`$_GET`、`$_POST`、`$_FILES`、`$_COOKIE`、`$_SESSION`和`$_SERVER`变量的值。如果你不想显示所有值，你可以指定一个自定义变量列表：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, the report will contain only the `$_GET` and `$_POST` arrays:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，报告将只包含`$_GET`和`$_POST`数组：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Yii adds complete information about the execution context and environment in
    the case of logging error messages. If we are logging a message manually, then
    we probably know what information we need, so we can set some target options to
    write only what we really need:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录错误信息的情况下，Yii会在执行上下文和环境信息中添加完整信息。如果我们手动记录消息，那么我们可能知道需要哪些信息，因此我们可以设置一些目标选项，只写入我们真正需要的信息：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code will log errors to a file named errors. Additionally to a
    message itself, it will log contents of the `$_GET` or `$_POST` variables if they
    are not empty.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将错误记录到名为errors的文件中。除了消息本身外，如果`$_GET`或`$_POST`变量不为空，它还会记录这些变量的内容。
- en: See also
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about log filters and context information, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了了解更多关于日志过滤器和上下文信息，请参考[http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
- en: The *Using different log routes* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用不同的日志路由*菜谱'
- en: Displaying custom errors
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示自定义错误
- en: In Yii, the error handling is very flexible, so you can create your own error
    handler for errors of a specific type. In this recipe, we will handle a 404 not
    found error in a smart way. We will show a custom 404 page that will suggest the
    content based on what was entered in the address bar.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，错误处理非常灵活，因此你可以为特定类型的错误创建自己的错误处理器。在这个菜谱中，我们将以智能的方式处理404未找到错误。我们将显示一个自定义的404页面，该页面将根据地址栏中输入的内容建议内容。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Composer包管理器创建一个新的`yii2-app-basic`应用程序，具体操作请参考官方指南中的[http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html)。
- en: 'Add the fail action to your `SiteController`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将失败操作添加到你的`SiteController`中：
- en: '[PRE20]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the `web/.htaccess` file with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下内容的`web/.htaccess`文件：
- en: '[PRE21]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Configure pretty URLs for the `urlManager` component in your `config/web.php`
    file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`config/web.php`文件中为`urlManager`组件配置漂亮的URL：
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Check that framework displays the `Not found` exception for URLs that are not
    existing:![Getting ready](img/image00526.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查框架是否为不存在的URL显示`Not found`异常：![准备工作](img/image00526.jpeg)
- en: Also, check that the framework displays the `Internal Server Error` exception
    for our `actionFail`:![Getting ready](img/image00472.jpeg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，检查框架是否为我们的`actionFail`显示`Internal Server Error`异常：![准备工作](img/image00472.jpeg)
- en: Now we want to create a custom page for the `Not` `Found` page. Let's start
    it.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想要为`Not` `Found`页面创建一个自定义页面。让我们开始吧。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now we need to change the `Not Found` page content, but leave it as it is for
    other error types. In order to achieve this, follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更改 `Not Found` 页面的内容，但保留其他错误类型的原始内容。为了实现这一点，请按照以下步骤操作：
- en: 'Open the `SiteController` class and look for the `actions()` method:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `SiteController` 类，并查找 `actions()` 方法：
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove the default `error` section and leave `actions()` as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除默认的 `error` 部分，并将 `actions()` 保留如下：
- en: '[PRE24]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the own `actionError()` method:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加自己的 `actionError()` 方法：
- en: '[PRE25]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the original `\yii\web\ErrorAction` class and copy its action content
    into our `actionError()` and customize it for the render custom `error-404` view
    for the `Not Found` error with the `404` code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开原始的 `\yii\web\ErrorAction` 类，并将其操作内容复制到我们的 `actionError()` 中，并对其进行自定义，以便渲染自定义的
    `error-404` 视图，用于具有 `404` 代码的 `Not Found` 错误：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the `views/site/error-404.php` view file with a custom message:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加带有自定义信息的 `views/site/error-404.php` 视图文件：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That is it. Now try to follow to the non-existing URL and see our content from
    the `error-404.php` view:![How to do it...](img/image00423.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在尝试访问一个不存在的URL，并从 `error-404.php` 视图中查看我们的内容：![如何操作...](img/image00423.jpeg)
- en: However, for a fail action we must see the default content from the `error.php`
    file:![How to do it...](img/image00474.jpeg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，对于失败的操作，我们必须看到来自 `error.php` 文件中的默认内容：![如何操作...](img/image00474.jpeg)
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'By default, in the `yii2-app-basic` application, we configure `errorAction`
    for the `errorHandler` component in our configuration file `config/web.php` as
    `site/error`. It means that the framework will use this route for displaying every
    handled exception:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在 `yii2-app-basic` 应用程序中，我们在配置文件 `config/web.php` 中为 `errorHandler` 组件配置
    `errorAction` 为 `site/error`。这意味着框架将使用此路由来显示每个处理的异常：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `SiteController` class, we use the built-in standalone `yii\web\ErrorAction`
    class, which renders the so-called `error.php` view:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `SiteController` 类中，我们使用内置的独立 `yii\web\ErrorAction` 类，该类渲染所谓的 `error.php`
    视图：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If we want to override its implementation, we can replace it in an inline `actionError()`
    method with our own custom content.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想覆盖其实现，我们可以在内联的 `actionError()` 方法中用我们自己的自定义内容替换它。
- en: 'In this recipe, we add our own `if` statement for rendering a specific view
    on the base of error code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们添加了自己的 `if` 语句，以便基于错误代码渲染特定的视图：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Also, we can use a custom design for the `Not Found` page.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以为 `Not Found` 页面使用自定义设计。
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about handling errors in Yii, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于在 Yii 中处理错误的信息，请参阅 [http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html)。
- en: Custom panel for debug extension
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试扩展的自定义面板
- en: The `Yii2-debug` extension is a powerful tool for debugging own code, analyzing
    request information or database queries, and so on. Therefore, you can add your
    own panel for any custom report.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`Yii2-debug` 扩展是一个强大的调试工具，可以用于调试自己的代码、分析请求信息或数据库查询等。因此，您可以为任何自定义报告添加自己的面板。'
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new `yii2-app-basic` application by using the Composer package manager
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照官方指南使用 Composer 包管理器创建一个新的 `yii2-app-basic` 应用程序，官方指南请见 [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html)。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create the `panels` directory on the root path of your site.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您网站的根路径上创建 `panels` 目录。
- en: 'Add a new `UserPanel` class:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的 `UserPanel` 类：
- en: '[PRE31]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the `panels/view/summary.php` view with the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建 `panels/view/summary.php` 视图：
- en: '[PRE32]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the `panels/view/detail.php` view with the following code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `panels/view/detail.php` 视图，代码如下：
- en: '[PRE33]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Turn on your toolbar in the `config/web.php` configuration file:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config/web.php` 配置文件中打开您的工具栏：
- en: '[PRE34]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Reload the `index` page and look for the **Guest Session** cell at the end of
    the debug panel:![How to do it...](img/image00496.jpeg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 `index` 页面，并在调试面板的末尾查找 **Guest Session** 单元：![如何操作...](img/image00496.jpeg)
- en: Log in to your site with the `admin` username and the `admin` password. In a
    success case, you must see your username in the main menu:![How to do it...](img/image00477.jpeg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `admin` 用户名和 `admin` 密码登录到您的网站。在成功的情况下，您必须在主菜单中看到您的用户名：![如何操作...](img/image00477.jpeg)
- en: Observe the debug panel again. Right now, you will see the `admin` username:![How
    to do it...](img/image00398.jpeg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次观察调试面板。现在，您将看到 `admin` 用户名：![如何操作...](img/image00398.jpeg)
- en: You can click on the username in the debug panel and see the detailed user information:![How
    to do it...](img/image00481.jpeg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在调试面板中点击用户名，查看详细的用户信息：![如何操作...](img/image00481.jpeg)
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To create our own panel for the `yii2-debug` module, we need to extend the
    `yii\debug\Panel` class and override its template methods:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要为`yii2-debug`模块创建自己的面板，我们需要扩展`yii\debug\Panel`类并重写其模板方法：
- en: '`getName()`: The label for menu item on debug detail page'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 调试详细页面上的菜单项标签'
- en: '`getSummary()`: The debug panel cell code'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSummary()`: 调试面板单元格代码'
- en: '`getDetail()`: The detail page view code'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDetail()`: 详细页面视图代码'
- en: '`save()`: Your information which will be saved in debug storage and load back
    into the `$panel->data` field'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save()`: 您的信息将被保存在调试存储中，并在加载回`$panel->data`字段'
- en: Your object can store any debug data and display it on the summary block of
    panel and on the detail page.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您的对象可以存储任何调试数据，并在面板的摘要块和详细页面上显示它。
- en: 'In our example, we store user information:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们存储用户信息：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Display it on summary and detail pages from the `$panel->data` field.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从`$panel->data`字段在摘要和详细页面上显示它。
- en: Handling events
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理事件
- en: 'You can subscribe to any events of application or any component in the `init()`
    method. For example, the built-in `yii\debug\panels\MailPanel` panel collects
    and stores all sent messages:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`init()`方法中订阅应用程序或任何组件的任何事件。例如，内置的`yii\debug\panels\MailPanel`面板收集并存储所有发送的消息：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Also, it displays a grid with the list of stored messages on our own detail
    page.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还在我们的详细页面上显示存储消息的列表网格。
- en: See also
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn more about `yii2-debug` extension, refer to [http://www.yiiframework.com/doc-2.0/ext-debug-index.html](http://www.yiiframework.com/doc-2.0/ext-debug-index.html)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了了解更多关于`yii2-debug`扩展的信息，请参阅[http://www.yiiframework.com/doc-2.0/ext-debug-index.html](http://www.yiiframework.com/doc-2.0/ext-debug-index.html)
- en: For more information about creating a views counter panel, refer to [https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md](https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于创建视图计数器面板的信息，请参阅[https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md](https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md)
