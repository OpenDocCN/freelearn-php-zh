- en: Chapter 12. Debugging, Logging, and Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using different log routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the Yii error stack trace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging and using the context information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom panel for debug extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not possible to create a bug-free application if it is relatively complex,
    so developers have to detect errors and deal with them as fast as possible. Yii
    has a good set of utility features to handle logging and handling errors. Moreover,
    in the debug mode, Yii gives you a stack trace if there is an error. Using it,
    you can fix errors faster.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will review logging, analyzing the exception stack trace,
    and implementing our own error handler.
  prefs: []
  type: TYPE_NORMAL
- en: Using different log routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is the key to understanding what your application actually does when
    you have no chance to debug it. Believe it or not, even if you are 100% sure that
    the application will behave as expected, in production, it can do many things
    you were not aware of. This is OK, as no one can be aware of everything. Therefore,
    if we are expecting unusual behavior, we need to know about it as soon as possible
    and have enough details to reproduce it. This is where logging comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Yii allows a developer not only to log messages but also to handle them differently
    depending on the message level and category. You can, for example, write a message
    to the database, send an e-mail, or just show it in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will handle log messages in a wise manner: the most important
    message will be sent through an e-mail, less important messages will be saved
    in files A and B, and the profiling will be routed to Firebug. Additionally, in
    a development mode, all messages and profiling information will be displayed on
    the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure logging using `config/web.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will produce a few log messages in `protected/controllers/LogController.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'and view views/log/index.php:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run the preceding action multiple times. On the screen, you should see the
    `Log` heading and a debug panel with the log messages number:![How to do it...](img/image00465.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click on **17**, you will see a web log similar to the one shown in the
    following screenshot:![How to do it...](img/image00389.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A log contains all the messages we have logged along with stack traces, timestamps,
    levels, and categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the **Profiling** page. You should see profiler messages, as shown
    in the following screenshot:![How to do it...](img/image00467.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Profiling info displays the total executing duration of own code block.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we just changed the log file names and not the paths, you should look in
    `runtime/logs` to find log files named `error.log`, `warning.log`, and `info.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside, you will find the following messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When one logs a message using `Yii::erorr`, `Yii::warning`, `Yii::info`, or
    `Yii::trace`, Yii passes it to the log router.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how it is configured, it passes messages to one or many targets,
    for example, e-mailing errors, writing debug information in file A, and writing
    warning information in file B.
  prefs: []
  type: TYPE_NORMAL
- en: The object of the `yii\log\Dispatcher` class is typically attached to an application
    component named log. Therefore, in order to configure it, we should set its properties
    in the configuration file components section. The only configurable property there
    is targets that contains an array of log routes and their configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have defined four log routes. Let''s review them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`EmailTarget` sends log messages through an e-mail via the `Yii::$app->mailer`
    component by default. We limit category to example and level to error. An e-mail
    will be sent from `log@example.com` to two developers and the subject will be
    `Log error`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`FileTarget` appends error messages to a specified file. We limit the message
    level to warning and use a file named `warning.log`. We do the same for info-level
    messages by using a file named `Info.log`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we can use `yii\log\SyslogTarget` to write messages into the `Unix /var/log/syslog`
    system file and `yii\log\DbTarget` to write logs into the database. For the second
    one, you must apply their migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are more interesting things about Yii logging, which are covered in the
    following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Yii::trace versus Yii::getLogger()->log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Yii::trace` is a simple wrapper around `Yii::log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, `Yii::trace` logs a message with a trace level, if Yii is in the
    `debug` mode.
  prefs: []
  type: TYPE_NORMAL
- en: Yii::beginProfile and Yii::endProfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These methods are used to measure the execution time of some part of the application''s
    code. In our `LogController`, we measured 10,000 executions of `preg_replace`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`Yii::beginProfile` marks the beginning of a code block for profiling. We must
    set a unique token for every code block and optionally specify a category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`Yii::endProfile` has to be matched with a previous call to `beginProfile`
    with the same category name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `begin-` and `end-` calls must also be properly nested.
  prefs: []
  type: TYPE_NORMAL
- en: Log messages immediately
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Yii keeps all log messages in memory until the application is terminated.
    That's done for performance reasons and generally works fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if there is a console application with long running duration, log
    messages will not be written immediately. To make sure your messages will be logged
    at any moment, you can flush them explicitly using `Yii::$app->getLogger()>flush(true)`
    or change `flushInterval` and `exportInterval` for your console application configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about logging, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging and using the context information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the Yii error stack trace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an error occurs, Yii can display the error stack trace along with the error.
    A stack trace is especially helpful when we need to know what really caused an
    error rather than just the fact that an error occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure a database and import the following migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate an `Article` model using Yii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will need to create some code to work with. Create `protected/controllers/ErrorController.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After running the preceding action, we should get the following error:![How
    to do it...](img/image00450.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moreover, the stack trace shows the following error:![How to do it...](img/image00470.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the error message, we know that we have no alias column in the database,
    but we have used it somewhere in the code. In our case, it is very simple to find
    it just by searching all the project files, but in a large project, a column can
    be stored in a variable. Moreover, we have everything to fix an error without
    leaving the screen where the stack trace is displayed. We just need to read it
    carefully.
  prefs: []
  type: TYPE_NORMAL
- en: The stack trace displays a chain of calls in the reversed order starting with
    the one that caused an error. Generally, we don't need to read the whole trace
    to get what is going on. The framework code itself is tested well, so the probability
    of error is less. That is why Yii displays the application trace entries expanded
    and the framework trace entries collapsed.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we take the first expanded section and look for alias. After finding
    it, we can immediately tell that it is used in `ErrorController.ph` `p` on line
    19.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about error handling, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Logging and using the context information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging and using the context information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes a log message is not enough to fix an error. For example, if you are
    following best practices and developing and testing an application with all possible
    errors reported, you can get an error message. However, without the execution
    context, it is only telling you that there was an error and it is not clear what
    actually caused it.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will use a very simple and poorly coded action that just
    echoes `Hello, <username>!` where the `username` is taken directly from `$_GET`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need a controller to work with. Therefore, create `protected/controllers/LogController.php`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we run the index action, we will get the error message, `Undefined
    index: username`. Let''s configure the logger to write this kind of error to a
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the index action again and check `runtime/logs/errors.log`. There should
    be log information like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can give our application to a testing team and check the errors log
    from time to time. By default, error report log contain values from all the `$_GET`,
    `$_POST`, `$_FILES`, `$_COOKIE`, `$_SESSION`, and `$_SERVER` variables. If you
    do not want to display all values, you can specify a custom variable list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this case, the report will contain only the `$_GET` and `$_POST` arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yii adds complete information about the execution context and environment in
    the case of logging error messages. If we are logging a message manually, then
    we probably know what information we need, so we can set some target options to
    write only what we really need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will log errors to a file named errors. Additionally to a
    message itself, it will log contents of the `$_GET` or `$_POST` variables if they
    are not empty.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about log filters and context information, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html](http://www.yiiframework.com/doc-2.0/guide-runtime-logging.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using different log routes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying custom errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii, the error handling is very flexible, so you can create your own error
    handler for errors of a specific type. In this recipe, we will handle a 404 not
    found error in a smart way. We will show a custom 404 page that will suggest the
    content based on what was entered in the address bar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager,
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the fail action to your `SiteController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `web/.htaccess` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure pretty URLs for the `urlManager` component in your `config/web.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that framework displays the `Not found` exception for URLs that are not
    existing:![Getting ready](img/image00526.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, check that the framework displays the `Internal Server Error` exception
    for our `actionFail`:![Getting ready](img/image00472.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we want to create a custom page for the `Not` `Found` page. Let's start
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to change the `Not Found` page content, but leave it as it is for
    other error types. In order to achieve this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `SiteController` class and look for the `actions()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the default `error` section and leave `actions()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the own `actionError()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the original `\yii\web\ErrorAction` class and copy its action content
    into our `actionError()` and customize it for the render custom `error-404` view
    for the `Not Found` error with the `404` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `views/site/error-404.php` view file with a custom message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it. Now try to follow to the non-existing URL and see our content from
    the `error-404.php` view:![How to do it...](img/image00423.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, for a fail action we must see the default content from the `error.php`
    file:![How to do it...](img/image00474.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, in the `yii2-app-basic` application, we configure `errorAction`
    for the `errorHandler` component in our configuration file `config/web.php` as
    `site/error`. It means that the framework will use this route for displaying every
    handled exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `SiteController` class, we use the built-in standalone `yii\web\ErrorAction`
    class, which renders the so-called `error.php` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If we want to override its implementation, we can replace it in an inline `actionError()`
    method with our own custom content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we add our own `if` statement for rendering a specific view
    on the base of error code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Also, we can use a custom design for the `Not Found` page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about handling errors in Yii, refer to [http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html](http://www.yiiframework.com/doc-2.0/guide-runtime-handling-errors.html).
  prefs: []
  type: TYPE_NORMAL
- en: Custom panel for debug extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Yii2-debug` extension is a powerful tool for debugging own code, analyzing
    request information or database queries, and so on. Therefore, you can add your
    own panel for any custom report.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new `yii2-app-basic` application by using the Composer package manager
    as described in the official guide at [http://www.yiiframework.com/doc-2.0/guidestart-installation.html](http://www.yiiframework.com/doc-2.0/guidestart-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the `panels` directory on the root path of your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new `UserPanel` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `panels/view/summary.php` view with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `panels/view/detail.php` view with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Turn on your toolbar in the `config/web.php` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `index` page and look for the **Guest Session** cell at the end of
    the debug panel:![How to do it...](img/image00496.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your site with the `admin` username and the `admin` password. In a
    success case, you must see your username in the main menu:![How to do it...](img/image00477.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observe the debug panel again. Right now, you will see the `admin` username:![How
    to do it...](img/image00398.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can click on the username in the debug panel and see the detailed user information:![How
    to do it...](img/image00481.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create our own panel for the `yii2-debug` module, we need to extend the
    `yii\debug\Panel` class and override its template methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getName()`: The label for menu item on debug detail page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSummary()`: The debug panel cell code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDetail()`: The detail page view code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save()`: Your information which will be saved in debug storage and load back
    into the `$panel->data` field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your object can store any debug data and display it on the summary block of
    panel and on the detail page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we store user information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Display it on summary and detail pages from the `$panel->data` field.
  prefs: []
  type: TYPE_NORMAL
- en: Handling events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can subscribe to any events of application or any component in the `init()`
    method. For example, the built-in `yii\debug\panels\MailPanel` panel collects
    and stores all sent messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Also, it displays a grid with the list of stored messages on our own detail
    page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to learn more about `yii2-debug` extension, refer to [http://www.yiiframework.com/doc-2.0/ext-debug-index.html](http://www.yiiframework.com/doc-2.0/ext-debug-index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about creating a views counter panel, refer to [https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md](https://github.com/yiisoft/yii2-debug/blob/master/docs/guide/topics-creating-your-own-panels.md)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
