- en: Chapter 7. Creating a New MOD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As your community grows, you may find that you need to expand the capabilities
    of your forum. You might need to introduce new BBCode tags, file attachments,
    photo galleries, or some new administration tool. Almost anything that you would
    need can be added by installing a modification, as you learned in [Chapter 4](ch04.html
    "Chapter 4. Customizing Your Forum"). The key word here is *almost*. Eventually
    you may need a feature and find yourself unable to locate an existing modification
    for it. When this happens, you have two options: ask someone for help in locating
    a modification or create a new one yourself. In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: What modifications are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills and tools you need to create a modification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a simple modification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ways to make your modification available to other phpBB users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to MODs and Hacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall from [Chapter 4](ch04.html "Chapter 4. Customizing Your Forum"),
    modifications are most commonly known as **MODs** or **Hacks**, and are downloads
    containing files that add, remove, or alter features on a phpBB forum. You also
    learned that there are thousands of modifications available for download and how
    to install a modification on your forum. These things were presented to you from
    the viewpoint of a modification *user*, but now it is time to look at them from
    the flip side, as a MOD or Hack *author*.
  prefs: []
  type: TYPE_NORMAL
- en: The most basic form of a standard modification is a simple text file containing
    instructions for editing a forum’s files. These instructions are typically formatted
    using a modification template, consisting of a header and list of actions. Slightly
    more complex modifications also have commands for editing the forum database in
    the same file or a SQL query installer such as a `db_update.php` file. Modifications
    that are even more complex include new forum files as well. All of the files are
    placed together in a compressed archive file (usually a ZIP file) and are made
    available for download on the World Wide Web.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Begin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a modification, you need to have some skills and tools to make development
    and testing of modifications easier. Your exact needs will depend on the scope
    and purpose of the modifications you develop. Smaller modifications generally
    require a more basic setup, but large modifications are sometimes better left
    to professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Building Your Skillset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you already know, phpBB operates on a combination of four programming languages:
    PHP: Hypertext Preprocessor, Structured Query Language (SQL), Hypertext Markup
    Language (HTML), and JavaScript. If you have never heard of these before, don’t
    worry! You do not have to be a highly experienced programmer to start creating
    modifications. Many people have actually learned the basics of programming by
    working with phpBB. As you develop modifications, you will become more familiar
    with phpBB and these languages. Essentially, you can (and will) learn as you go.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP: Hypertext Preprocessor**, better known simply as PHP, is the main programming
    language used for almost every task in phpBB. As you may have noticed, *phpBB*
    is even named after this language. Every file in your forum that has a name ending
    in `.php` contains PHP code, as do a few other files. Knowledge of PHP is one
    of the most essential skills in creating modifications, so you may want to take
    the time to locate and read some tutorials on basic PHP programming. You will
    also want to bookmark the online PHP manual, located at [http://www.php.net/manual/](http://www.php.net/manual/).
    The manual is also available for download and is useful for offline work. Take
    the time to read the first three to four chapters of the manual. They focus on
    important details like code syntax that you will see time and time again.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structured Query Language**, or SQL, is coding used to access an SQL database.
    Your forum’s PHP files use **SQL queries** (or commands written in SQL coding)
    to store information in, and later retrieve it from, several database tables.
    If you want to create a modification that tracks some data, like a page hit counter,
    you will need to know how to write some SQL queries. You should try to locate
    a manual for your site’s database software to learn the correct structure of queries.
    Most software will support an official standard form of SQL, but may add unique
    extensions to the standard. The manual for MySQL, which is the most popular database
    choice for phpBB, is available at [http://www.mysql.com/](http://www.mysql.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hypertext Markup Language** is not really a programming language. As the
    name suggests, HTML is used for marking up the display of documents. In this case,
    those documents are forum pages. You learned in [Chapter 4](ch04.html "Chapter 4. Customizing
    Your Forum") that HTML code, or that of another markup language, used to display
    your forum is stored in template files located within directories such as `templates/subSilver`.
    The closest thing you can find to a manual for HTML is the World Wide Web Consortium’s
    HTML 4.01 specification at [http://www.w3.org/TR/html401](http://www.w3.org/TR/html401).
    There is an abundance of easier to understand HTML tutorials that can be located
    through any major search engine, however.'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, **JavaScript** is a client-side scripting language that phpBB uses for
    certain types of user interaction. Client-side scripting languages are programming
    languages that run on the remote user’s computer, even though the code is located
    on your website. JavaScript code will be run within the confines of the viewer’s
    web browser and is therefore not something you can always rely on.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern web browsers have features that allow disabling of JavaScript or
    certain JavaScript operations. Several older browsers do not support JavaScript
    at all. Most modifications do not use JavaScript code, but some are based entirely
    on JavaScript. As with HTML, there are many online tutorials and websites devoted
    entirely to teaching aspects of this language.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the programming languages, you will also need a passing familiarity with
    the purpose of each phpBB file. This is one skill that will definitely be formed
    as you work with phpBB, but there are some online resources in phpBB communities
    that will be helpful. In those communities, you will also find members that are
    experienced MOD and Hack authors. Some of them can often give useful advice on
    a wide range of issues related to these subjects, so do not hesitate to ask for
    help if you need it.
  prefs: []
  type: TYPE_NORMAL
- en: The Right Tools for the Job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyone can create a new modification, but it will be much easier if you have
    the right materials and working environment. Most authors use specialized tools
    that provide many helpful features. There are several types of resources you should
    get if you plan to create many modifications.
  prefs: []
  type: TYPE_NORMAL
- en: The first and most important resource is phpBB itself. Many authors will create
    a second phpBB installation, sometimes on their own computers, for testing and
    developing code. One benefit of this approach is that any problems arising during
    the development will not affect a live website that people are currently visiting.
    Greater control of the testing environment is usually another factor that authors
    favor.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of creating a phpBB installation on your own computer is that you
    might have to install several other pieces of software first. Those include a
    web server program, such as Apache, the PHP language, an SQL database package,
    and possibly other software as well. Some authors will use a package that contains
    more than one of these. For example, EasyPHP from [http://www.easyphp.org](http://www.easyphp.org)
    installs and manages Apache, PHP, and MySQL. With all three of those installed,
    you should be able to install phpBB.
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to keep a completely unaltered copy of phpBB on hand
    for backups and reference. You should make certain you are working with the latest
    version of phpBB 2.0 to ensure that you have the most secure and up-to-date code.
    On the other hand, keep in mind that not all communities are based on the latest
    phpBB version. Over eleven updates to phpBB 2.0 have been released and some people
    do not have the time to upgrade with each release.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you release the modification to the public, some of those forum administrators
    may try to use it and ask you for help if they encounter a problem in that phpBB
    version. For these reasons, you may also want to have copies of older phpBB versions
    around, even if you do not test your modification on those versions. Every release
    of phpBB can be downloaded from the following web pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The phpBB Project Filelist on SourceForge: [http://sourceforge.net/project/showfiles.php?group_id=7885](http://sourceforge.net/project/showfiles.php?group_id=7885)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'phpBBHacks phpBB downloads: [http://www.phpbbhacks.com/phpbbinfo.php](http://www.phpbbhacks.com/phpbbinfo.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When developing your modification, ensure that you do so using an unmodified
    installation of phpBB. If you create the modification on a forum where other modifications
    have already been installed, those modifications may adversely affect the development
    process. They may add code that causes your modification to behave differently
    than if those modifications were absent. Since you cannot anticipate what modifications
    have already been installed on another person’s forum, distributing a modification
    developed on a hacked phpBB installation is an invitation to problems. You might
    also accidentally include code from another modification in your own modification’s
    installation file. That can cause any number of unexpected reactions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible that you might develop a modification that *does require* the
    presence of another, such as a portal add-on block. In such cases, only the absolutely
    required modifications should be installed on your testing forum.
  prefs: []
  type: TYPE_NORMAL
- en: Another very important tool to use is a good program for editing phpBB files.
    For the simple work of installing a modification like that in [Chapter 4](ch04.html
    "Chapter 4. Customizing Your Forum"), Microsoft WordPad was all you needed. You
    can continue to use WordPad for this chapter, but if you intend to develop several
    modifications, you will probably want something with a wider range of useful features.
  prefs: []
  type: TYPE_NORMAL
- en: There are many text-editing programs that have syntax-highlighting features
    that make coding much easier. With syntax highlighting, different aspects of code
    are displayed in different colors. This feature can allow you to spot incorrect
    code just by looking at the colors used in a file. Other features like multiple
    line searching, find and replace, or code auto-completion can also save time.
    You can find listings and reviews for many text-editing programs with these features
    at the PHP-Editors site, [http://www.php-editors.com/](http://www.php-editors.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft WordPad will be sufficient for completing the examples presented in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a Simple MOD: A New BBCode Tag'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the best ways to learn is through hands-on experience, so now it is
    time for you to create your very first phpBB modification. As you follow along
    in this section, you will progress through the entire process of creating modifications.
    Since this is your first modification, the focus will be on adding a simple but
    useful new feature: a new BBCode tag. Modifications of this type have been in
    development since the very early releases of phpBB. You will follow the same process
    that has traditionally been used to create many BBCode tags over the years. If
    you downloaded this modification from a website, it would be just a single file
    of instructions, without any extra files or database alterations.'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1—Determine Your Goal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step of any project is to figure out exactly what it is you intend
    to achieve. Maybe you want to rearrange the display of topics. Or perhaps add
    a new entry in the registration form. Whatever you choose, you need to know what
    you are trying to do before you can actually do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you now know, the goal of this modification will be to add a new BBCode
    tag to your forum. By installing BBCode modifications, you give forum members
    new ways of formatting their posts. phpBB includes BBCodes for bold, italic, and
    underlined text, text colors and sizes, images, bulleted and numbered lists, and
    several other formatting options when first installed. You can download modifications
    for dozens of different new tags. Some examples include glowing, shadowed, highlighted,
    moving, and blinking text. The **[s]** BBCode tag that we will add to the forum
    creates struck-through text, which is a series of normal words with a line through
    the middle of each character. The effect of the Strike BBCode can be seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 1—Determine Your Goal](img/1132_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 2—Plan Your Database Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a modification that tracks some new kind of information, you’ll
    usually have to edit or create a database table through SQL queries. The Strike
    BBCode does not require any database changes, but this is such an important part
    of modification creation that it still needs to be addressed. The types of database
    changes that an author decides to make often determine the remaining structure
    of the modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are generally three types of database changes used in most modifications:
    adding a new database table column, adding an entire database table, and adding
    new data into a table. Which of these changes you make will depend very much on
    what the modification does. If you are simply adding a new field to user registration
    and profiles, you would add a new column to the users database table, typically
    called `phpbb_users`. To record information about the websites people visited
    before reaching your forum, you would need a new database table. When your modification
    has configuration features that should be changed in the **Administration Control
    Panel**, adding new data to the `phpbb_config` table would be expected.'
  prefs: []
  type: TYPE_NORMAL
- en: All of your database changes can be made using phpMyAdmin or similar database-management
    software. You can either write your own SQL queries and execute them through phpMyAdmin’s
    SQL tab, or accomplish the same ends through a series of point and click operations
    that phpMyAdmin provides.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3—Choose Your Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your modification will need to edit phpBB files, and possibly add new ones,
    to accomplish your goal. At this point, you need to decide which files are the
    best ones to edit, and make backups of those files. If your modification needs
    to add new files, you need to decide what each file will be named and where it
    will be placed within phpBB’s directory structure. Certain types of new files
    will need to be located in certain places. If you need to add a new section to
    the **Administration Control Panel**, for instance, you will have to add at least
    one file in phpBB’s `admin` directory. The Appendices of this book include descriptions
    of the phpBB files and directories that should be helpful in this step.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a BBCode tag, including our Strike BBCode, only two files need to be
    edited: `includes/bbcode.php` and `templates/subSilver/bbcode.tpl`. These files
    manage all BBCode operations in phpBB. `bbcode.tpl` contains HTML code for each
    BBCode tag in a special format, and `bbcode.php` replaces BBCode tags with that
    HTML code in posts. The latter file also does any special processing needed to
    format text correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we will also edit some other files. If you have made a post on any
    phpBB forum, you have undoubtedly noted the posting form contained special buttons
    that, when clicked, inserted BBCode tags into the posting form. Forum members
    love these buttons, so we will add one for the Strike BBCode too. Three other
    files will need to be edited for this: `posting.php, language/lang_english/lang_main.php`,
    and `templates/subSilver/posting_body.tpl`. The following screenshot shows a final
    version of the posting form after adding a **Strike** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3—Choose Your Files](img/1132_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4—File Editing and Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At last, the good part. During this step, you should be editing the existing
    phpBB files chosen in the previous step and creating any new files needed. The
    new files would be filled with code to create whatever type of effects might be
    needed by the modification. Since the Strike BBCode does not need any new files,
    we can focus on altering those listed in Step 3\. As you’ll see, this step can
    be quite long for even a simple modification. To create the Strike BBCode, you
    will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop code to process the BBCode tags in posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify existing HTML code that will replace the tags in the posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a button for the posting form, complete with a mouse-hover tool tip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how and why each step is included
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examine some alternative methods of creating the Strike BBCode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating or editing PHP files, it is a good idea to follow phpBB’s coding
    standards. Doing so makes your code easier for others to read and use. A copy
    of these guidelines is included in phpBB downloads and can also be found online
    at [http://area51.phpbb.com/docs/guide-coding.html](http://area51.phpbb.com/docs/guide-coding.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first file to edit, `includes/bbcode.php`, processes BBCode tags once before
    a post is inserted into the database, and then again each time the post is displayed.
    Several **PHP functions** are used to accomplish this. Functions are snippets
    of code used to perform a task, usually one that needs to be repeated often or
    used in several different places. A basic function might look like the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple function named `do_some_thing()`. It merely stores the
    words `Some random text` in a variable called `$string`, and then returns the
    value of `$string` to the code that uses the function. You can recognize functions
    by their first line of code, which always starts with the word `function`. This
    is followed by the name of the function, in turn followed by a set of parentheses
    that may contain arguments (if any). A **variable** is a name for a piece of data
    or other value of some sort. Variables always begin with a **dollar sign**, `$`.
    Some functions in `bbcode.php` include `load_bbcode_template(), prepare_bbcode_template(),
    bbencode_second_pass(), bbencode_first_pass()`, and `make_clickable()`. Many of
    the functions are preceded by **comment lines**, which describe the purpose of
    the code without actually affecting anything.
  prefs: []
  type: TYPE_NORMAL
- en: The `bbencode_second_pass()` and `bbencode_first_pass()` functions contain code
    that must be expanded to add any BBCode tag. `bbencode_first_pass()` must add
    a special, unique identification string to each BBCode tag in every post before
    that message is placed into the forum’s database for later retrieval. `bbencode_second_pass()`
    will replace the altered BBCode tag with matching HTML stored in `bbcode.tpl`.
    You need to add some code so that each function recognizes the Strike BBCode.
    Since `bbencode_second_pass()` is actually listed before `bbencode_first_pass()`
    in the file, you should edit `bbencode_second_pass()` first. This is not really
    a requirement, but editing files in a "top to bottom" manner is usually a good
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—The First Edit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Locate the following lines within the `bbencode_second_pass()` function of
    `includes/bbcode.php`. It is the only place these lines appear in the file together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Highlight (or select) these lines. Copy them and paste a duplicate set of lines
    into the file beneath the existing lines. The code should now look like this (after
    our duplication):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the first duplicated line, replace the tags `[u] and [/u] for underlining`
    with the `[s] and [/s] for strike out`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the second duplicated line, change `[u:$uid]` to `[s:$uid]` and `u_open`
    to `s_open`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alter the third duplicate lines `[/u:$uid]` to read `[/s:$uid]` and `u_close`
    to `s_close`. Your duplicate lines should look like these examples when fully
    edited:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have now finished making the alterations needed for the `bbencode_second_pass()`
    function to work with your Strike BBCode tag. With this done, let us take a moment
    to look at the lines you have changed and some important points about them.
  prefs: []
  type: TYPE_NORMAL
- en: The lines that you duplicated are part of the Underline BBCode tag. Duplicating
    the lines allows you to maintain a working Underline BBCode while altering the
    second set of lines to create Strike. The Strike BBCode is actually very similar
    to Underline, so you will use lines of code related to that as a basis for many
    of the coming file alterations as well. Each line will become a unique part of
    the Strike BBCode as it is transformed by the changes you make.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line you made a copy of and then edited was:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A pair of forward slashes, `//`, at the beginning of this line mark it as a
    comment line. This particular comment line says that the next two lines are dealing
    with the opening and closing underline BBCode tags, or `[u]` and `[/u]`. You replaced
    the tags `[u] and [/u] for underlining` in the comment with the tags `[s] and
    [/s] for strike out`. Now the comment line has been updated to reflect the changes
    that will follow for the other copied lines.
  prefs: []
  type: TYPE_NORMAL
- en: The other two lines are PHP code that is used to process posts before they are
    displayed on your forum, and as such can be rather delicate things. Make certain
    that your final lines match the examples given exactly. If you edit these in the
    wrong way, you may see an error message on your forum later. Be especially careful
    with the double and single quotation marks and the `$uid` variables. These should
    not be changed at all when editing these lines.
  prefs: []
  type: TYPE_NORMAL
- en: The `[s:$uid]` and `[/s:$uid]` edits are related to the BBCode format that will
    allow users to access the Strike BBCode, `[s]` and `[/s]`. That may not have been
    clear when editing the lines, but you should see the correlation now. The `s_open`
    and `s_close` edits are also significant, but their exact purpose is best examined
    later when you have edited `bbcode.tpl`.
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—The Second Edit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Locate the following lines within the `bbencode_first_pass()` function of `includes/bbcode.php`.
    Again, this is the only place the lines appear in the file in this direct order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Duplicate the lines in the same manner as the previous *Time For Action*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the comment line identical to that of the earlier code. Edit it in the
    same way as described in the previous *Time For Action* example. After doing this,
    your file should resemble the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the second line duplicated here, change `[u\]` to `[s\], [/u\]` to `[/s\]`,
    and `[u:$uid]\\1[/u:$uid]` to `[s:$uid]\\1[/s:$uid]`. Now fully altered, these
    lines will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After completing the changes to `bbencode_second_pass()`, you have now moved
    on to the `bbencode_first_pass()` function. Here we again used existing code of
    the Underline BBCode as the basis of your Strike BBCode. You saw another comment
    line identical to that in the first set of changes in this file and also altered
    it in the same manner as the other.
  prefs: []
  type: TYPE_NORMAL
- en: Only one other line was edited here, and this important line will process posts
    containing the Strike BBCode tags before the posts are stored in the forum’s SQL
    database. The main purpose of the line is to add the `$uid` variables to the tags
    for later reference. You need not worry about this too much, but be aware that
    it is one of phpBB’s many built-in security measures. When displaying posts, phpBB
    will treat those without a `$uid` added here as plain text.
  prefs: []
  type: TYPE_NORMAL
- en: That was the last change required in `includes/bbcode.php`. Now you are ready
    to move on to the second file to be edited, `templates/subSilver/bbcode.tpl`.
    This file contains several snippets of HTML code that create the visual effects
    of each BBCode. The functions stored in `includes/bbcode.php` read this file and
    replace the BBCode tags like `[s]` and `[/s]` with snippets.
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—Editing BBCode HTML
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Locate the following lines in `templates/subSilver/bbcode.tpl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy these lines and paste a duplicate set into the file, just as you did with
    the `includes/bbcode.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace both instances of `u_open` in the first duplicate line with `s_open`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same line, replace `underline` with `line-through`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the second line, change both occurrences of `u_close` to `s_close`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final, complete code should be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To create the HTML that will be displayed in place of the Strike BBCode’s `[s]`
    and `[/s]` tags, we once again used the existing code for the Underline BBCode.
    If you take a moment to look at the other code snippets in this file, you may
    notice that most of them begin with some text like `<!-- BEGIN u_open -->` and
    end with text similar to `<!-- END u_close -->`. These are HTML comments, as marked
    by the `<!--` and `-->` character sequences. phpBB uses these comments to mark
    the beginning and ending of each snippet of code for a single BBCode tag. For
    the Underline BBCode, `[u]` is replaced with the `u_open` code and `[/u]` is replaced
    with the `u_close` code. You may also remember editing `u_open` and `u_close`
    in the `includes/bbcode.php` file, where you changed them to `s_open` and `s_close`
    respectively. As a result, `s_open` and `s_close` must also be used in the HTML
    comments here.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more change was needed here, and it creates the actual striking effect.
    The Underline BBCode uses a Cascading Style Sheet property called `text-decoration`
    to draw a line below text. The code for this is `text-decoration: underline`.
    The text-decoration property also supports a value of *line-through*, which renders
    text with a line marked horizontally through the middle. So, by changing `underline`
    in your `s_open` line to **line-through**, you created the Strike BBCode.'
  prefs: []
  type: TYPE_NORMAL
- en: This completes the changes required to use the Strike BBCode; you can now make
    posts on your forum using the `[s]` and `[/s]` tags. However, you would have to
    type the tags in manually. Many, if not most, forum users prefer the point-and-click
    convenience of buttons in the posting form over manual entry of BBCode tags, so
    now you should create a new button for the Strike BBCode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we can look at the components of a BBCode button. Each button does
    two things: insert the BBCode tags into the message body when clicked, and display
    a line of help text, between the BBCode controls and the message area, when hovered
    over with the mouse pointer. The majority of the code for these tasks is in `templates/subSilver/posting_body.tpl`,
    but the help text is partially set up in `language/lang_english/lang_main.php`
    and `posting.php`. The latter two files have very small changes, so it is easiest
    to edit them first.'
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—Adding a Language String
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Find the following line in your forums `language/lang_english/lang_main.php`
    file. Duplicate it as you have with other lines in previous examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the `bbcode_f_help` portion of the line to `bbcode_st_help`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the text between the last two single quotes with: `Strike out: [s]Line
    through text[/s] (alt+t)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The altered line now appears as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Most of the built-in text that’s displayed on the public portions of a phpBB
    forum is stored in `language/lang_english/lang_main.php`. This file is part of
    phpBB’s multi-lingual support, one of the factors that has made phpBB very popular
    worldwide. Help text for all of the BBCode buttons is one of the many things you
    can find in the `lang_main.php`. The line you just located and copied contains
    the help text for the Font Size BBCode. The other lines of help text are above
    this one, and you have placed the new help text of the Strike BBCode below this
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a `lang_main.php` file for each language installed on a forum. If you
    want to locate this line in a file for a language other than English, search for
    the `$lang[‘bbcode_f_help’]` portion of the line.
  prefs: []
  type: TYPE_NORMAL
- en: If you compare this line to the other help text lines, you will notice some
    clear differences. The `f` in `bbcode_f_help` is replaced with a different letter
    on the other lines. This part of the line is a name that is used to reference
    the help text later, so it needs to be unique from all other names here. A line
    with the name `bbcode_s_help` already exists, so you cannot use that letter here.
    Instead, we can use the letters `st`. There is no need to limit ourselves to only
    one letter. The text between the second pair of single quotes on each line is
    the actual text that will be displayed on the posting form. None of the present
    lines are really fitting for the Strike BBCode, so you can rewrite this text in
    the new line. The only restrictions on the content of the help text are that they
    cannot contain single or double quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file we will look at, `posting.php`, handles many aspects of making
    posts on a forum. For the moment, we only care about one of these: the creation
    of the posting form. The form is created using a combination of phpBB’s language
    and template systems. We have already added the help text to the language system,
    so now we need to incorporate it into the template system.'
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—Adding a Template Variable
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Find the following line in `posting.php` and duplicate it for editing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace `bbcode_f_help` with `bbcode_st_help` to match the changes you made
    in the language file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter the `F` in `L_BBCODE_F_HELP` to a matching `ST`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final line incorporating these alterations is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In this last example, you added a new template variable. It will represent
    the help text for the Strike BBCode and make that text available to the template
    system. phpBB sends information to the template system using lines like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first and last line of this code, along with the closing parenthesis on
    the `‘MORE’` line, are required for the file to function, so you should leave
    them alone. If you needed to add a section of code to send data to the template
    system in a file that did not already do so, you would need to include these lines
    when editing the file. Fortunately, `posting.php` already has them, so we move
    on to the other lines, which specify the actual information to be sent. The `‘L_INFO’`
    line, is a good example. It sends the value of a variable, `$l_info` in this case,
    to the template system with the name `L_INFO`. This tells the template system
    that all instances of `{L_INFO}` in a template file should be replaced with the
    value of the variable. `{L_INFO}` is called a **template variable** because it
    is replaced with some value by the template system. `L_INFO` is the **name** of
    the template variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is an accepted convention that most template variables and their names are
    written in all uppercase letters, numbers, or underscores, and do not contain
    other characters. This is mostly not required, but you should not use a period
    in the name of a template variable. The period is considered a special, reserved
    character in template variable names.
  prefs: []
  type: TYPE_NORMAL
- en: The third file we need to alter to add a BBCode button, `templates/subSilver/
    posting_body.tpl`, is also the most complicated. Only one line needs to be added
    in the files you edited previously, but this time there are several changes (some
    of them rather awkward). This is one of several sections of phpBB that was not
    designed with ease of expansion in mind. Many schools of thought on the proper
    way to add a new BBCode button in this file exist, but most require replacing
    large parts of this file or installing another modification first.
  prefs: []
  type: TYPE_NORMAL
- en: Time For Action—Adding a Posting Form Button
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Open the `templates/subSilver/posting_body.tpl` file and locate the following
    line. Duplicate it as usual. This time, however, place the duplicated line *before*
    the existing code. The order of the lines does not really matter, but it will
    create a useful example later on in the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the copy of the line, you should replace the template variable with that
    for the Strike help line. Also remove the lowercase `f` at the beginning of the
    line and add `st` in its place. This is the easiest change in this file. The resulting
    lines would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now find the following (rather long) line of code. Depending on the settings
    of your text editor, it may be wrapped onto two or more lines when displayed on
    your screen. Do your best to find the entire line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following lines after the `bbtags` line that you just found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The altered code now looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate and duplicate the following HTML code in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alter the duplicated line to look like the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What Just Happened?
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now you have added the actual button in the posting form and completed the file
    changes for the Strike BBCode modification. Since this last *Time For Action*
    example was much longer, a detailed look at the changes is in order now, beginning
    with the additions after the long `bbtags` line.
  prefs: []
  type: TYPE_NORMAL
- en: That particular line is where several authors would begin to alter the file
    in different manners. Some of these alternatives will be examined later, but for
    now a simple addition after this line keeps the Strike BBCode as simple as possible.
    Using this method has a few benefits and disadvantages that will also be addressed
    later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that code added, you moved on to the final alteration of this file: adding
    the actual button! Every change related to the button that you have made up to
    this point was geared toward making the button work, but not making the button
    itself. You duplicated and edited the code for the URL button, which is the last
    in the row of buttons on the posting form. These lines are HTML code, with the
    middle line being HTML for a clickable form button.'
  prefs: []
  type: TYPE_NORMAL
- en: There was no need to alter the first or last line here. However, the middle
    line needed several changes to make it unique from the other buttons. The HTML
    for the button contains several attributes, in the form of *name="value"* pairs.
    All of these attributes except the first two, `button` and `class`, were changed
    when you finished. Let’s go through a complete break down of these changes now.
  prefs: []
  type: TYPE_NORMAL
- en: The first attribute you may have noticed is `accesskey`. Access keys are a method
    of allowing a user to "click" a button without actually touching it. By pressing
    a special key (*Alt* on Windows or the Apple key on Macintosh systems) in combination
    with the key for the letter defined as an access key, the user triggers the effect
    of the button. When a user on your forum presses *Alt+B* at the posting form,
    the Bold BBCode tag is inserted into the post as if they had clicked the form
    button for that BBCode. During the process of adding new buttons, you should change
    the value of this attribute to a letter or digit that is not already used on your
    posting form. The letter "t" is a good not-in-use choice on unmodified forums,
    so `accesskey="w"` was changed to `accesskey="t"`.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is the `name` attribute. It provides a unique name for the button that
    can be referenced inside JavaScript code. There is a large amount of JavaScript
    at the top of this file, and it works with the buttons and message body to add
    BBCodes, keep track of open BBCode tags in the message, and change the text displayed
    on the buttons. The value of `name` is used to access the buttons, especially
    for changing the text. When a user clicks on a BBCode button to insert an opening
    tag, like **[b]**, an asterisk is added to the button to remind you that the tag
    is open. The value of this attribute will be similar for all your BBCode buttons—addbbcodeXX,
    where `XX` is some even number. If you recall, we used "22" when adding code related
    to the `bbtags` line earlier. This is the first place it comes into play (the
    number is important for reasons we’ll discuss later). The name of this button
    must be `addbbcode22`, so `name="addbbcode16"` was altered to `name="addbbcode22"`.
    Skipping ahead slightly to the `onClick` attribute, `16` was again replaced with
    `22`.
  prefs: []
  type: TYPE_NORMAL
- en: The third attribute, `value`, is simply the text displayed on the BBCode button.
    Since you are creating a Strike BBCode,`"Strike"` seems like a logical choice
    to display. `value="URL"` is thus replaced with `value="Strike"`.
  prefs: []
  type: TYPE_NORMAL
- en: The `style` attribute allows you to apply specific Cascading Style Sheet properties
    to HTML elements having that attribute. With BBCode buttons, `style` is usually
    used to demonstrate the effect of the BBCode and control the width of the button.
    You altered the `text-decoration` property from `underline` to `line-through`,
    as you did in `bbcode.tpl`. Increasing the `width` property from `40px` (forty
    pixels) to `44px` is also recommended to ensure that the asterisk of the Strike
    button can be seen when added.
  prefs: []
  type: TYPE_NORMAL
- en: The final attribute, `onMouseOver`, triggers the display of the help line text.
    The complete attribute is `onMouseOver="helpline(‘w’)"`, but you need to be careful
    when editing this one. Only the `w` *inside* the single quotes should be changed.
    If you think back to the other help-line related changes, you may recall that
    you were often replacing the letter `f` with `st`. This is the same situation,
    but you are replacing a `w` now.
  prefs: []
  type: TYPE_NORMAL
- en: At last, you have finished all the file editing needed to use your new Strike
    BBCode! Congratulations on making it this far.
  prefs: []
  type: TYPE_NORMAL
- en: Pros and Cons of the Strike BBCode Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, there are a few advantages and disadvantages to some of
    the methods we just used when editing `posting_body.tpl`. Some of the changes
    could have been made in several different ways. To better understand how the BBCode
    buttons work and why there are different methods of creating BBCodes, let’s look
    at some alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a BBCode modification such as Strike, many authors would require
    that another modification, the Multi BBCode MOD, be installed on the forum first.
    This modification replaces and extends much of the BBCode system in `posting_body.tpl`
    and other files with the goal of making additional BBCodes easier to install.
    In fact, if an author wishes to distribute a BBCode modification at phpBB’s official
    website, that modification is *required* to rely on the Multi BBCode MOD. One
    disadvantage of the process you just completed is that it was designed independently
    of Multi BBCode. The resulting modification is thus likely to be incompatible
    with the other modification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possible alternative to the method you have learned centers on the
    `bbtags` code near the top of the file. You added two new lines after this code,
    but for a long time there has been a very different method considered as a standard
    way of editing this area. This method called for the `bbtags` code to be edited
    within that line. With that type of alteration, the `bbtags` line would be changed
    to the following by the Strike BBCode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `bbtags` line of code creates an **array**, or a stack of data, containing
    all the possible BBCode tags—except the size and color tags—and their closing
    tag counterparts, numbered in the order listed on the line. The numbering starts
    at 0; `[b]` would be number 0, `[/b]` would be number 1, and so on. The Strike
    BBCode’s `[s]` becomes number 18 in this scheme.
  prefs: []
  type: TYPE_NORMAL
- en: However, this creates a problem. Remember that you used `addbbcode22` as the
    value of the `name` attribute in the HTML for the Strike button? Using the method
    just described, you would need to use `addbbcode18`. If you search through `posting_body.tpl`,
    you will find that `addbbcode18` is already used for the name of the Font Color
    drop-down list and `addbbcode20` is likewise used for Font Size. Since the value
    of `name` must be unique, editing the `bbtags` line directly forces you to also
    change the `name` attributes of the Font Color and Size lists. You would have
    to do that for every BBCode installed, which is quite a lot of repetitive work
    if you add several BBCodes.
  prefs: []
  type: TYPE_NORMAL
- en: When you added new lines for `[s]` and `[/s]` after the `bbtags` line, the new
    lines assigned the Strike tags to numbers 22 and 23 respectively. Essentially,
    you skipped the numbers 18 through 21, which were used by the Size and Color BBCodes.
  prefs: []
  type: TYPE_NORMAL
- en: This removed the need to edit the HTML for Size and Color. If you wanted to
    add new BBCodes using the method presented in this chapter, your code might look
    like this example. Notice how the number is incremented once on each line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Step 5—Break It and Fix It
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the changes for your first modification completed, the next step is to
    test your changes. While testing, do everything you can think of that might cause
    a problem in the modification. Any problems that do appear need to be fixed before
    someone else can find them. Lack of proper testing can be very dangerous, and
    in some cases might create new security holes in your forum.
  prefs: []
  type: TYPE_NORMAL
- en: Try to test out every aspect of the Strike BBCode. Try making a new topic, previewing
    a post, and even replying to and editing posts containing the BBCode. Check out
    every aspect of the posting form, from the buttons to the help line. If you have
    multiple styles installed on your forum, make sure you have edited the template
    files for every style, and test the BBCode and button on all of them. When there
    are multiple languages, test those as well!
  prefs: []
  type: TYPE_NORMAL
- en: You should not find any problems with the Strike BBCode, since it is a very
    simple modification. However, even simple modifications need thorough testing.
    There are many places where the lack of a single comma can make parts of a forum
    inaccessible.
  prefs: []
  type: TYPE_NORMAL
- en: Make Your MOD Accessible to the World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have created a modification, you may wish to distribute it to other
    phpBB forum operators. Many modifications are made freely available by their authors
    as a way of giving something back to the global phpBB community. Not all modifications
    are free, of course, but those that are can often be found on several websites
    and may eventually even be translated to other languages.
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways you can distribute a modification. You might write an
    essay or tutorial describing the changes made to install it, which could be similar
    to the previous pages of this chapter. The most widely used method is to create
    an installation file that uses simple instructions, like those explained in the
    section discussing modification installation in [Chapter 4](ch04.html "Chapter 4. Customizing
    Your Forum"), to guide users through the changes.
  prefs: []
  type: TYPE_NORMAL
- en: You can also choose to make the modification available at one or more websites.
    Authors of multiple modifications usually have their own website dedicated to
    their works, often with phpBB-powered forums providing support and demonstrations.
    Several more general websites covering phpBB also carry modifications. The sites
    with the largest modification communities are [http://www.phpbb.com/](http://www.phpbb.com/),
    the official phpBB website, and [http://www.phpbbhacks.com/](http://www.phpbbhacks.com/),
    the largest modification website. There are other websites offering modifications
    that you can use to distribute your work, including many based primarily on non-English
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these large websites has its own rules regarding how modifications can
    be distributed on that site. phpBB.com has very strict rules, while phpBBHacks.com
    is much more relaxed. Both sites have forums with development areas that are available
    for help in creating and testing modifications, but are not used specifically
    for distributing any works. The two sites have a database of modifications for
    that purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The modification database of phpBB.com can be found in its **Mods** section.
    To be included in this database, a modification must be submitted through a special
    form and has to pass a series of special validation procedures. The validation
    process tests several aspects of the download. If the modification fails in any
    those tests, which are conducted by the phpBB.com "MOD Team", it is rejected from
    inclusion on the website. Authors are typically informed of reason(s) for this
    rejection and are allowed to resubmit the work after making any required changes.
    In contrast, phpBBHacks.com allows authors to have more freedom in these areas
    with rules that are much less strict. Authors are expected to extensively test
    modifications before submitting them through a simple form.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find links to all of phpBB.com’s modification-submission requirements
    through the post at [http://www.phpbb.com/phpBB/viewtopic.php?t=160827](http://www.phpbb.com/phpBB/viewtopic.php?t=160827).
    The validation procedures are also described in posts at this forum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have decided where you wish to distribute your modification, look
    around that website for its specific rules and submission procedure. The process
    of distributing a modification at any given site generally encompasses the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the code, including any PHP, HTML, and so forth.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assemble that code into a packaged collection (detailed in the next section).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the site has a modification development forum, create a topic about the modification
    there. Other users may try it out and give you feedback, bug reports, or other
    advice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make any revisions to the code you desire based on the feedback, bug reports,
    etc., and then repeat steps 1-4 until you are satisfied that the modification
    is completely finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the modification through the procedures available at the site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packaging Your MOD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before making your modification available anywhere, it must first be collected
    into a set of files. This process of preparing your modification for distribution
    is called **packaging**. This typically involves creating the instruction file
    and placing it, along with any new forum files created for the modification, into
    a single ZIP file. Extremely large modifications often include other files, such
    as upgrading instructions, lists of tips or hints, and modified copies of original
    phpBB files that are also placed into this ZIP file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to distribute a modification at phpBB.com, the instruction file must
    be created using a special "MOD Template" provided at that site. This template
    consists of three sections: a header, a list of several blank commands, and a
    footer containing an ending command. Each section is required; leaving out even
    one of them will cause the modification submission to be rejected. phpBBHacks.com
    accepts modifications created using this template or any other, including no template
    at all, as long as the instructions are understandable. Specific sections are
    also not required if a template is used. There is an official phpBBHacks.com template,
    but its use is optional. phpBB.com, however, only accepts modifications created
    with its own template.'
  prefs: []
  type: TYPE_NORMAL
- en: The Strike BBCode modification you made earlier in this chapter could not be
    submitted at phpBB.com because it does not rely on the Multi BBCode modification,
    as required for all BBCode modifications listed there. Likewise, phpBBHacks.com
    would not accept it because Strike is not your original creation. However, creating
    an instruction file for this modification is still a good method of learning how
    to use the MOD Template in order to make installation files that can be submitted
    to phpBB.com and other sites.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MOD Template Header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To begin, create a new text file. In most text editors for Windows, this involves
    opening the **File** menu and selecting **New | New Text File** or something similar.
    Save your new file with the name `strike.mod`. Most text files that you may be
    familiar with use a file extension of `txt`, resulting in a file name like `strike.txt`.
    phpBB.com requires modification instruction files to use the `.mod` file extension,
    also widely known as an extension for music files, instead.
  prefs: []
  type: TYPE_NORMAL
- en: Next, type the following lines in your file, or copy and paste them from the
    phpBB.com MOD Template. These lines compose the entire MOD Template header. If
    you type them in, be sure to match the exact grammar, spelling, and spacing of
    the MOD Template (in the printed book, the text appears wrapped). Changing any
    one of those aspects, even if you think them to be incorrect, will cause the modification
    to be rejected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Several of these lines need to be edited for each modification. Let’s take them
    one at a time, beginning at the top and working our way down. The header itself
    is organized into smaller sections by a few lines made completely of **#** characters.
    These separators should be left as presented.
  prefs: []
  type: TYPE_NORMAL
- en: MOD Title
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first line to change is the `MOD Title` line. As you have probably guessed,
    this is where you will place the name of the modification for all to see.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The text `mod_title_goes_here` should be replaced with the correct name. In
    this case, you would type `Strike BBCode`.
  prefs: []
  type: TYPE_NORMAL
- en: MOD Author
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next is the `MOD Author` line, which lists the creators of the modification.
    Contact information can also be included here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The line itself has four subparts that need to be altered. The first of these,
    `your_phpBB_username`, is to be replaced with the username of an account registered
    on the phpBB.com community forums. That same account would later be used to submit
    the modification. Second is the `< your_email >` section, which is a placeholder
    for your e-mail address. The arrow brackets here should not be removed, so the
    final version of this will resemble `< jon@doe.com >`. Next comes a location for
    your given name, in (`your_real_name`). Again, the brackets (parentheses this
    time) should be left in place. Last but not least is `your_url`, a place for a
    website address that might contain a demonstration of the modification. Only the
    forum username entry is required. If you do not wish to enter your e-mail address,
    real name, or a website address, you can place `N/A` in those sections instead.
    Be sure to include the brackets, however. A final version of this line might be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: MOD Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The third line you should edit is for the `MOD Description`. It is a fairly
    simple line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `some_description_goes_here` text should be replaced with one or two very
    short sentences describing the purpose of the modification. An example you can
    use here would be `Adds a strike out BBCode to posting`.
  prefs: []
  type: TYPE_NORMAL
- en: MOD Version
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the `x.x.x` of the `MOD Version` line, you can provide a three-part number
    describing this particular release of the modification. If for some reason you
    need to release more than one version, this number would be different for each
    of those releases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The first digit represents a stable release number, the second a minor addition
    number, and the third a simple alteration number. A modification that has a version
    number of 1.2.0 has seen one stable release followed by two releases with new
    features added. When a version number such as 2.3.4 is seen, that indicates two
    stable releases, three more releases with new features, and finally four other
    releases with minor changes (like small bug fixes). The version number of the
    first release of a modification submitted to phpBB.com is generally 1.0.0\. Anything
    with a leading number less than one is considered to be a beta or alpha release.
    **Beta** and **alpha** releases are preview releases that may contain bugs, errors,
    or other problems. It might often be a bad idea to use beta or alpha releases
    on live forums.
  prefs: []
  type: TYPE_NORMAL
- en: Installation Level
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Installation Level` describes, in a single word, how difficult it will be
    to install the modification. `(Easy/Intermediate/Advanced)` would be replaced
    with just one of those words: `Easy, Intermediate`, or `Advanced`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The Strike BBCode would be fairly `Easy` to install. Generally, the longer an
    installation file is, the higher the installation level of the modification.
  prefs: []
  type: TYPE_NORMAL
- en: Installation Time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like the previous line, `Installation Time` deals with the difficulty of installing
    a modification. This time you should replace the `x` with a number representing
    the approximate number of minutes it might take to install a modification.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: For the Strike BBCode, `5` would be a fair, although slightly high, number.
    When in doubt, try to overestimate this number. Ideally, you should time yourself
    when installing the modification on a forum to get an idea of the time needed.
  prefs: []
  type: TYPE_NORMAL
- en: Files to Edit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `Files to Edit` line lists every phpBB file edited by the modification.
    You may recall editing five files for the Strike BBCode: `posting.php, language/lang_english/lang_main.php,
    includes/bbcode.php, templates/subSilver/bbcode.tpl`, and `templates/subSilver/posting_body.tpl`.
    All these files would be listed here, with a comma separating one from the other.
    Since that is a rather long list, it would often be broken onto multiple lines
    in the file. Each line must start with **##** like all of the other header lines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Included Files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This last line in the upper part of the header provides a list of all new forum
    files included in the modification. When there are no new files, as with the Strike
    BBCode, replace the parenthesized text with a simple `n/a`, which stands for not
    applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: phpBB.com’s Security Notice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next section of the header includes a security notice created by phpBB.com.
    This notice is required to appear in all modifications submitted to phpBB.com
    and should not be altered in any way. Even a small change, such as altering capitalization
    or line length, will result in the refusal of a submission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Regardless of what the security notice may or may not imply, using a modification
    from other websites is not necessarily going to place intentionally harmful code
    into your forum. It can happen, but it is rare. Because there is a risk when installing
    any software you did not create, you should never install *any code* on your site
    unless you know what it does and what problems it may present. Security holes
    have been discovered even in earlier with phpBB, but such problems are rarely
    intentional.
  prefs: []
  type: TYPE_NORMAL
- en: Author Notes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Following the separator under the security notice is an `Author Notes` section.
    In this area you can add extra instructions or cautions related to using or installing
    the modification. For example, you might explain what the modification does in
    more detail than in the `MOD Description` line. This is also a good place to mention
    post-installation tasks like changing settings found or added in the **Administration
    Control Panel**.
  prefs: []
  type: TYPE_NORMAL
- en: There are some things you should not include in the `Author Notes` section.
    Among these are addresses of other websites at which the modification can be found,
    contact information, licensing information, and installation instructions that
    can be covered by action commands (which you will see in a moment). Placing any
    one of these seemingly harmless things in the `Author Notes` can cause a modification
    to fail the validation process. The administration of phpBB.com has problems with
    links to other websites placed on their own; this is also reflected in their forum
    rules, which disallow most links of that type, and the security notice. The only
    contact information allowed by this template must be placed on the `MOD Author`
    line. All modifications released on phpBB.com are required to be released under
    the GNU General Public License that phpBB itself falls under. A copy of this license
    is included with phpBB, but do not mention it in this section.
  prefs: []
  type: TYPE_NORMAL
- en: After the `Author Notes`, an area is provided to describe each release of the
    modification. The `MOD History` is a list of every release, with dates in a year-month-day
    format as well as version numbers. The entries for the versions should provide
    brief descriptions of changes made from one version to another. For the first
    version of a modification, it is common to see a line saying "Initial version,"
    "First release," or a similar short statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MOD Template header ends with another section that should not be edited;
    this section is a quick reminder to the users of the modification, pointing out
    that they should make backups of files. A complete header for the Strike BBCode,
    with all of the changes you have made so far, should resemble the example after
    this paragraph. This would also be a good time to save your file. Save your work
    periodically to ensure that you do not lose everything you have accomplished due
    to an accident or, worse yet, a power failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating the List of Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second major portion of your modification’s instruction file, as defined
    by the MOD Template, is a list of actions. **Actions** are commands for making
    changes needed to install a modification. Each action is presented with a header
    followed by a file name, one or more lines of code, or other information. Action
    headers look like the following example, with the text `ACTION NAME` being replaced
    by the actual name of the command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Consult the table under the *The Last Action* section in [Chapter 4](ch04.html
    "Chapter 4. Customizing Your Forum") for a list of the most commonly used actions
    and brief descriptions. phpBB.com allows the use of only twelve specific commands,
    all of which are listed in that table. The Add SQL action at the end of the table
    is not allowed for submissions to phpBB.com; you need to use the SQL action instead.
    Actions should generally be used in the order listed in the table. The Copy and
    SQL actions appear first, if needed, followed by an Open action, which in turn
    will proceed to combinations of the Find, Addition, and In-Line actions.
  prefs: []
  type: TYPE_NORMAL
- en: To create an action list for your instruction file for the Strike BBCode, review
    the steps you took in creating your modification. Since no new files were added,
    you will not need a Copy action. In the same vein, you did not make any database
    changes. That will render the SQL action unnecessary for these instructions. You
    edited five files, so you will need a matching Open action for each file.
  prefs: []
  type: TYPE_NORMAL
- en: The Open Action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The header of each Open action should be followed by a single line naming the
    file to be prepared for editing. Always include the full path to this file, relative
    to the main phpBB directory with this name. File paths in Open actions, and also
    Copy actions, should not start with something like `root/, phpBB2/`, or even a
    simple slash, `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the correct Open action for the first file that was edited:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You do not have to list the files for editing in any specific order, but remember
    that Open actions are always followed by a Find action and *then* other actions.
  prefs: []
  type: TYPE_NORMAL
- en: The Find Action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The second thing you did, after opening that file, was to locate some code
    within it. You should instruct your modification’s users to do the same by including
    that code in a Find action. This is the first Find action for the Strike BBCode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The Addition Actions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: After locating that code, it was duplicated and then altered to our needs. Several
    steps were involved in that process, but you do not need to describe every aspect
    of it in these instructions. Instead, you only want to give the user the final
    code and tell them where to place it, relative to the code in the Find action.
    The new code was placed after the code you located, so an After, Add action is
    needed here. If you had inserted the new code before the existing lines, then
    a Before, Add action would be appropriate. When removing old code and putting
    new code in the same location, use a Replace With action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You might notice that the After, Add action example includes some comment lines
    that you did not place into `includes/bbcode.php`. These lines mark the beginning
    and end of the code added by the modification. Although such lines are not required
    in your modification, try to add them whenever possible as a courtesy to the end
    users. If it becomes necessary to remove or upgrade your modification later, the
    users will be able to use lines such as these to quickly locate the code of the
    modification. You can format these lines any way you like; the format used here
    is just an example based on the author’s personal style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a set of a Find and After, Add action for the other changes you made
    to this file. The process is the same as that you just completed, and will complete
    the actions for `bbcode.php`. The resulting pair should resemble the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Additional Open, Find, and Addition Action Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We edited the `bbcode.tpl` file of your template; the next step is to create
    an Open action for it. A problem arises here: you need to include the path to
    the file, which will mention a template directory like `subSilver`. Suppose someone
    does not have `subSilver` present on their forum, but only other templates with
    different names. Will this prevent them from using your modification? Should you
    list instructions for every template?'
  prefs: []
  type: TYPE_NORMAL
- en: The answer to both questions is a resounding "No". Anyone can use the modification
    on any template, although they may have to improvise a little if the content of
    the template files is extremely different from that of subSilver. There is no
    way you can predict what templates are installed on any forum, and there are hundreds
    of templates available (not counting private templates made for a single website!).
    Adding instructions for more than one template is impractical and more trouble
    than it is worth. The solution to this problem is to always base your modifications
    and their instructions on the subSilver template files, which are installed by
    default on every original phpBB 2.0 forum. Doing this is also required if you
    want your modification to appear on phpBB.com.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, with all of that in mind, the Open action for `bbcode.tpl` would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You can again create a Find and After, Add instruction combination for the changes
    to this file. One important thing to remember is that you cannot include comment
    lines marking the new code in this file. Doing so would result in a forum displaying
    a **parse error**, which means there is incorrect syntax in a file or portion
    of code. A final set of commands for this file could be the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next in the list of files altered is the `language/lang_english/lang_main.php`
    file. A problem similar to that of the template file path also exists with language
    files. Files for non-English languages will have different file paths, such as
    `language/lang_dutch` or `language/lang_french`. For this situation, the resolution
    is also the same: use the files and file path of the default installed on forums,
    which is the English language. Including other languages in your instructions
    is usually allowed, but again, using the default is required if you want your
    work listed in phpBB.com’s database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The other actions for this file are the standard pair of a single Find and
    one After, Add action. Combined with the Open action, the full instructions for
    the file are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving along, the next file edited for the Strike BBCode was `posting.php`—just
    another Open, Find, and After, Add sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, the edits of `posting_body.tpl` were rather extensive compared
    to others in this modification. Since this is a template file, remember to use
    the path to subSilver template files in the Open action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Do you remember the one time you duplicated code, but added it before an existing
    line instead of after that line? The reason for adding this before the line you
    copied was to create an example of using the Before, Add action instead of After,
    Add in this step of creating the instruction file. The only real difference, as
    far as appearance in the instructions, is that `AFTER` is replaced with `BEFORE`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now you have another basic Find and After, Add action combination for the next
    alteration you made in this file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The actions for the last steps are, once again, Find and After, Add. This combination,
    as you may have noticed, is the one used most often in modification instructions.
    For this round, the procedure is the same, but notice that the comment lines in
    the After, Add instruction are very different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, the code snippets that were added with comment lines were lines
    of PHP or, earlier in this file, JavaScript code. This time you are adding HTML
    code instead. PHP and JavaScript have similar syntax for comment lines: anything
    after a pair of slashes, `//`, is a comment. HTML comments, however, begin with
    `<!--` and end with `-->`. If you used a PHP-style comment, like `// Strike BBCode
    Begin Code Addition`, here, it would be displayed in plain text on the posting
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be tempted to use HTML-style comments in `bbcode.tpl`. Sadly, this
    is not allowed in that file because HTML comments are used by phpBB to parse the
    file itself. Also, avoid using in other template files any HTML comments that
    start with `<!-- BEGIN` or `<!-- END`. phpBB will think those are special template
    switches and usually report a parse error.
  prefs: []
  type: TYPE_NORMAL
- en: That ends the list of actions for this particular modification. Do not forget
    to save what you have completed so far!
  prefs: []
  type: TYPE_NORMAL
- en: Using Other Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the Strike BBCode only uses a few of the actions—Open; Find; After,
    Add; and Before, Add—you may need to use several of the other actions when creating
    your own original modifications. With that in mind, here are some examples of
    the other actions.
  prefs: []
  type: TYPE_NORMAL
- en: Copying Files—The Copy Action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When your modification includes new files, the first action that should appear
    in your list of commands is the Copy action. The Copy action indicates that users
    should upload the new files to their forum, and states the locations of these
    files. After the action header, you should include a line mentioning each file,
    including any folders that it might be in when the modification is uncompressed
    from a single file, and the path it should be placed in, relative to the forum’s
    main directory. You will learn how to place files within folders inside a compressed
    file later in this chapter. There are some special shortcuts you can use in a
    Copy action, so now is a good time to look at an example action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Files included in the modification are listed on the left, then the word `to`
    is used as a separator followed by the file’s correct position within the forum’s
    structure. The first line of files is fairly simple in meaning: copy the `my_new_file.php`
    file to the main directory of a forum (the directory that contains files such
    as `viewtopic.php` and `posting.php)`. On the second line, you are telling the
    user to place the remote copy of `my_functions.php` inside their forum’s `includes/`
    directory. With the third line, you can see that the files being copied are in
    a folder named `new_tpls` here. After the directory names on the final line, the
    `*.*` shortcut means that the user would be copying *all files* within that directory.
    You can also use shortcuts like `*.php` or `*.tpl` to represent all files with
    a particular extension.'
  prefs: []
  type: TYPE_NORMAL
- en: Altering the Database—The SQL Action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For making changes or additions to the SQL database of a forum, use the SQL
    action. Always include the SQL action near the top of your actions list; it should
    be the first or second action users complete. This action’s header is followed
    by one or more SQL queries. Make sure that the queries you use are correctly structured
    and valid; they need to work exactly as presented. Note that most SQL actions
    will use queries created for MySQL databases, but this is not required. A sample
    of a SQL action that creates a simple database table could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Replacing Code—The Replace With Action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sometimes you will need to alter an existing line of code instead of adding
    something before or after it. The Replace With action can be useful for this.
    Like the Before, Add and After, Add actions, Replace With will always follow a
    Find action. If you can use comment lines, it is also a good idea to include a
    commented out copy of the replaced lines in the Replace With action. That practice
    will make it easier for users to locate the code again later if another modification
    uses it in a Find action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you wanted to replace the Underline BBCode with the Strike BBCode,
    instead of just adding the latter. In such a case, you might have a series of
    actions like these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Modifying Portions of a Line—In-Line Actions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do you remember the alternative methods of editing `posting_body.tpl` that
    were discussed after you created the Strike BBCode? Some of those make good examples
    of using the In-Line actions: In-Line Find; In-Line After, Add; In-Line Before,
    Add; and In-Line Replace With. In-Line actions are identical in use to their shorter
    named counterparts, with the exception that they always operate inside a single
    line of code. Typically when using these actions, you should start with a normal
    Find action, followed by an In-Line Find, and then one or more of the remaining
    three In-Line actions. Usually you will have a sequence such as Find, In-Line
    Find, and finally In-Line After, Add. This sequence would be used to add the `[s]`
    and `[/s]` Strike tags within the `bbtags` code line.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Adding the MOD Template Footer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To finish off the modification’s instruction file, you need to add the footer
    of the MOD Template. The term "footer" is a bit misleading; you are actually placing
    one last action at the bottom of the file. All modifications submitted to phpBB.com
    must end with this action, and a variation of this is usually seen at the end
    of most other modifications as well. This action is explained in [Chapter 4](ch04.html
    "Chapter 4. Customizing Your Forum").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`EoM` is an acronym for the phrase *End of MOD* or *End of Modification*. Some
    authors use `End` or another label instead of `EoM` when submitting hacks to sites
    other than phpBB.com.'
  prefs: []
  type: TYPE_NORMAL
- en: The Completed Instruction File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the full header, list of actions, and the footer compiled, you have finished
    the instruction file for the Strike BBCode. Here’s a sample instruction file (text-wrapped
    here in the book) if you would like to compare your own to a working example (this
    file has also been included in the code download as `1132_07_strike.txt`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Creating a ZIP File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have an instruction file, you can place it into a ZIP file for
    distributing on websites. For a simple single file modification like this Strike
    BBCode, you could simply make it available as that one file. Larger modifications
    with multiple files, however, need to be packaged into a single compressed file.
    This makes them easier to distribute. As an example, consider the popular File
    Attachment modification, which contains over 140 individual files. Downloading
    these files one at a time would be a nightmare, so they are combined compressed
    into one ZIP file. Not only does this allow you to download the entire modification
    in one file, but the size of this file is significantly smaller and makes for
    an even faster download.
  prefs: []
  type: TYPE_NORMAL
- en: The actual process of creating a ZIP file will vary depending on the software
    used. There are many programs that can be used. Several were listed in [Chapter
    4](ch04.html "Chapter 4. Customizing Your Forum")’s *Installing a New Style* section.
    The Windows XP and Mac OS X operating systems also have built-in abilities to
    create ZIP files. When you’ve chosen the software you will use, consult its Help
    files or website to determine how to create ZIP files with that software.
  prefs: []
  type: TYPE_NORMAL
- en: First, place all the files that need to be distributed as part of your modification
    in one folder and name this folder after the modification. For the Strike BBCode,
    you could create a `Strike` folder and place your `strike.mod` file in it. If
    the modification adds new forum files, you may wish to create folders within that
    first folder reflecting the correct locations of the new files, such as `templates/subSilver/`,
    for new template files, and place the additional files within those folders.
  prefs: []
  type: TYPE_NORMAL
- en: Once the files and folders are all arranged to your satisfaction, navigate to
    the folder containing the modification’s folder (`Strike`, for the example). Right-click
    on the modification’s folder to open the Windows context menu. There should be
    an entry in this menu for WinZip; hover over it with the mouse pointer to expand
    a submenu with several options for creating ZIP files. Click the **Add to Strike.zip**
    line to create a new file called `Strike.zip` containing all the files and folders
    within the `Strike` folder. The name used in **Add to Strike.zip** and `Strike.zip`
    will be different if you chose a different name for the modification folder. The
    image that follows illustrates using the context menu for this process. Test your
    new ZIP file by double-clicking the filename or icon. WinZip, or your chosen archive
    software, should open the file and allow you to extract the files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ZIP File](img/1132_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Submitting Your Modification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With all the files of your modification gathered into a package of one compressed
    file, you are finally ready to make it available to others. To submit the file
    to phpBB.com’s modification database, you will need to log in to an account on
    that community’s forums. If you do not already have an account there, you will
    need to register before you can submit any files.
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, click on the **Mods** image in the menu running across the top
    (of every page). This takes you to the website’s modifications area, where you
    can find the modification database and documentation related to submitting and
    creating modifications. Click on the **MODS-Database** link on this page to view
    the categories of the database. All downloads in this database are gathered into
    sections based on the type of modification as you will see. Choose the most appropriate
    category for your modification—`BBCode` in the case of BBCode modifications—and
    click that category to view the downloads currently listed there. A list of links
    will be present on the left of the listing page. Click on the **Add Link**; this
    leads to the submission form.
  prefs: []
  type: TYPE_NORMAL
- en: The submission form has several fields for entering the same information that
    you placed into the header of your instructions file, such as **MOD Author, MOD
    Description, Installation Time**, and so on. You can also enter a private message
    for the modification validation team and other information related to the submission
    process. Clicking the **Browse** button on the last form entry will open a dialog
    window in which you can select the ZIP file on your computer. Submitting the form
    will upload the file from your computer. Make sure you do not close your web browser
    until the upload is complete, or your submission will not be received.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You *cannot* submit the Strike BBCode to websites for reasons stated earlier
    in this chapter. However, you can distribute any original modifications you create.
  prefs: []
  type: TYPE_NORMAL
- en: When you submit a modification to phpBB.com’s database, it is placed into a
    queue where it remains until reviewed by the site’s MOD Team. Once it has been
    reviewed, the modification will either be listed in the database, or will be rejected,
    in which case you should receive a private message on the forum explaining why
    and what must be changed before you can resubmit. The validation may take some
    time, especially when there is a large backlog of unreviewed submissions, so you
    should be patient during this stage. This process has been known to take as long
    as six months in the past. If the modification is accepted and listed in the modification
    database, a topic announcing the release will be created in the community forums.
    You can use this topic for supporting the modification if any problems are found
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The submission process for other sites is different. phpBBHacks.com has a much
    simpler procedure, for example. On that site, you only have to click a **Submit**
    link on the site’s menu and then choose another link based on the type of download
    you are submitting. There are separate submissions forms for modifications and
    other downloads. The submission form at this site allows you to enter the same
    sort of information as phpBB.com’s form: a title, description, version number,
    staff message, and so on. There are some other fields as well, such as phpBB version
    compatibility. One important difference is that you will not upload the modification
    using this form. Instead, you must first upload it to a website of your own and
    provide the URL of the uploaded file. As phpBBHacks.com allows authors to be responsible
    for testing their own work, this site does not have a detailed validation procedure.
    The submitted hacks are processed regularly, so your submission should appear
    within a few days. Again, however, try to be patient: there are times when the
    processing might take a little longer.'
  prefs: []
  type: TYPE_NORMAL
- en: Since you have to upload the ZIP file containing the modification in order to
    submit it to phpBBHacks.com, you can also release it on your own website. Many
    modification authors do this, and may even set up a special phpBB forum on their
    sites. Such forums often help provide support for modifications, and demonstrations
    for curious users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating modifications can be a very rewarding experience for you as a forum
    administrator. By making more modifications and making them progressively more
    complex, you can learn many things about the inner workings of phpBB and PHP programming.
    You will not only be able to improve the forums of an online community, but will
    also gain experience that can help you enhance other aspects. Some authors have
    even gone on to do work-for-hire, like writing chapters in phpBB books!
  prefs: []
  type: TYPE_NORMAL
- en: 'By progressing through the examples of this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: That modifications can be written using any combination of four major programming
    languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That developing should be done in a sound testing environment with the latest
    phpBB release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a brand-new BBCode for your community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills and techniques that will allow you to create other modifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods of submitting your modification to two of the largest modification
    databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
