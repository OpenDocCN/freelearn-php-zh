- en: Chapter 2. Configurations and Naming Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter initially introduces the CI naming conventions. These conventions
    include the rules, style guide, and CodeIgniter naming spirit. The second part
    of this chapter will review CI project configurations for built-in resources as
    well as user-defined or third-party add-on libraries. Note that we will actually
    build our own project code in the subdirectory application described in [Chapter
    1](ch01.html "Chapter 1. Getting Started"), *Getting Started*, with optionally
    relative resource directories for our project's self-made resources, such as CSS
    / Media / jQuery libraries' resources or third-party add-ons, extending the base
    CI downloaded from the Ellis Labs site or GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: We should remember that developing a CI project is done by replacing/expanding
    the default provided controllers, views, models, and other resources in a well-defined
    OOP fashion. We should extend controllers, models, and add additional views as
    well as use defined helpers or libraries. We can add these from third-party libraries
    or helpers, or develop new ones for our special project business logic and needs.
  prefs: []
  type: TYPE_NORMAL
- en: The initial step after installing the CI is making the proper configurations
    for our project requirements, such as database, session, auto-loaded helpers,
    and the libraries we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI has a set of configuration files defined in the project directory located
    at `application/config`. These configurations are loaded initially whenever we
    execute any of our project''s CI controllers via a URI call using a browser or
    issuing an HTTP request via code. The major configuration files are: `config.php`,
    `database.php`, `autoload.php`, and `routes.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: We should review each of the major configuration files with its configuration
    value, which includes recommended value, and possible values.
  prefs: []
  type: TYPE_NORMAL
- en: CI directory tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the classic directory tree structure of CodeIgniter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CI directory tree](img/4704OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that when we add new plugins and other resources such as `bootstrap`, new
    directories of resources may be added with a name of your choice so that you can
    refer to them from the specific resource you are developing using the CI `BASEPATH`
    defined parameter as the directory path to the `CI_PROJECT_ROOT` directory.
  prefs: []
  type: TYPE_NORMAL
- en: If we add a new directory under the project root, let's say `bootstrap`, the
    path for including resources such as CSS, JavaScript, or images (for example,
    `hello.png`) will be `$path = BASEPATH."bootstrap/hello.png"`.
  prefs: []
  type: TYPE_NORMAL
- en: config.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CI main configuration files have the following major configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The default is an empty string so that CI can calculate the base URL of our
    project root directory. We shall refer to the base URL in many places in our code,
    mostly to execute controllers. To get the base URL, we should call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `base_url()` function in the URL helper function returns the URI string
    to the CI project base. For example, if the CI project is developed on a domain
    named `example.com` under a `public_html` directory named `mydev`, and we have
    a controller named `find`, a method named `stock`, and a directory named `myprod`,
    we can call the `find` or `stock` method in both the `myprod` and `mydev` projects
    using `base_url()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `mydev` project, we will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `myprod` project, we will get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence, in order to call a controller class named `my_class`, we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will define `$u` `rl` as `http://example.com/` `mydev/index.php/my_class`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the index page as a part of the URI path to CI controllers/methods,
    we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.php` file is the CI root PHP service that handles all the URI requests.
    It is used as part of a path URI to a resource, such as `http://mysite.com/fci/index.php/tables_managemen`
    `t/show`. However, we can hide the `index.php` file by setting CI to hide the
    index.php file in the URI path for calling the CI resources such as [http://mysite.com/fci/tables_managemen](http://mysite.com/fci/tables_managemen)
    `t/show`. To do so, we need to perform the following configuration steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project root directory where the CI `index.php` file resides, an HTACCESS
    type file named `.htaccess` is added with the following configuration lines, which
    reroutes a none `index.php` URI referring to the CI project controllers path without
    `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more on this, refer to [http://en.wikipedia.org/wiki/Htaccess](http://en.wikipedia.org/wiki/Htaccess).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We should make the change to the `/config/config.php` file so that `index_page`
    will be empty in the URI path string instead of the default `index.php`. $config['index_page']
    = '';
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `.htaccess` file does the trick here by adding the `index.php` file to
    the URI after receiving the URI request from the browser and before executing
    it. The result is that the user who is browsing will not see it, but it will call
    the desired resource properly, in a similar way to how we used `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The language setting is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It is recommended that you leave this as default. Note that even if we use other
    languages, such as Arabic or Hebrew, it will be fine. We just make sure that our
    PHP files are saved as UTF-8 without BOM (byte order mark is a unicode character
    that marks the file-encoding method supporting multilanguage schemes; for more
    information, refer to [http://en.wikipedia.org/wiki/Byte_order_mark](http://en.wikipedia.org/wiki/Byte_order_mark)
    to inform the browser that receives the rendered HTML page to process it as a
    UTF-8 file.
  prefs: []
  type: TYPE_NORMAL
- en: The exact meaning of this tag is out of the scope of this book and can be learned
    from HTML standard.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, it is highly recommended for multi-language support to add the
    following line in our view file''s HTML header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These settings inform the browser to process the rendered HTML page whose characters
    are encoded as UTF-8, which is the most common multilanguage standard for non-English
    languages such as Hebrew, Arabic, and Chinese.
  prefs: []
  type: TYPE_NORMAL
- en: Do not touch these settings; it is very useful to support multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration, if set to `TRUE`, will enable us to define hooks
    into CI events, where the hooks are defined in the `application/hooks` directory.
    Do not touch these settings unless you have a specific plan for CI event hooks.
    Note that the concept of adding hooks to the CI core activity is out of this book's
    scope.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration will enable us to define naming roles to our library
    class name's prefix, in order to distinguish with other default libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines the allowed chars within a URI calling CI resources,
    mainly controllers. It is recommended to not touch this setting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will enable us to call the controller class methods with parameters, such
    as in the example provided earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will provide the same results as the class method within
    the `my_handler` class itself in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following configuration defines if a GET URL query string will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This configuration, if set to `TRUE`, will enable us to call controller class
    methods with parameters in the GET URL query form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It is highly recommended to leave this as `FALSE`, as CI provides a solution
    to pass parameters within URI, as shown in the `calc` example at the beginning
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The log threshold for the severity level is such that any event that is of
    the same or higher severity level will be logged to CI. The supported threshold
    levels and their meanings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0**: Disables logging (error logging turned off)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1**: Error messages (including PHP errors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: Debug messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: Informational messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4**: All messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding configuration will generate error logs according to the `log_threshold`
    `()` level at `/application/logs` if the error log was enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Note that enabling the errors log will cause performance reduction in our web
    application. Use it only if you must for debugging needs. Otherwise set it to
    `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The default log file path in the CI project is `application/logs`. Do not touch
    this configuration unless you have a clear reason.
  prefs: []
  type: TYPE_NORMAL
- en: 'The date time format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The default date time format setting is `2012-06-18 14:54:11`. It is recommended
    to not touch this configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cache file path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The default is `application/cache`. It is recommended not to touch this configuration.
    The session key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This `encryption_key` must be set with a key in order to use the session class
    services. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the session library usage within a controller and setting a session
    variable is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting the session variable in another controller is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The session data storage mechanism is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: If the recommended configuration is set to `TRUE`, we would use many session
    parameters of a large size stored in the associated default database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Session expiration timeout in seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Additional session configuration parameters can be found in the CI user manual.
    Cross-site scripting (XSS) filtering activation/deactivation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will enable XSS filtering on URI requests sent to the application. Note
    that all URI requests are processed initially by the root `index.php` to analyze
    the URI request and issue the proper CI calls. If set to `TRUE` it will protect
    URI requests from XSS type malicious attackers. It is recommended to set it to
    `TRUE` even if we reduce a bit of our application performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: If set to `TRUE` the CI will prevent **Cross-Site Request Forger** **y** (**CSRF**/**XSRF**)
    attacks. The risk is when the fraud form is submitted. If we are accepting user
    data, it is strongly recommended that CSRF protection should be enabled. Note
    that when using AJAX, additional code may be required to enable CSRF protection
    with AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: database.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database configuration enables to define one or more database connections
    that can be used by the application. The database configuration is a two-dimensional
    array in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'By setting the parameters for database default entry, we shall define the following
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'By setting the parameters for another database entry named `dbentry2`, we shall
    define the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no need to connect and load the default database as it is done automatically
    when loading the database class—however, the call is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, for referring to a specific database entry name, it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to connect and load the `dbentry2` database settings stated earlier,
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the default database with the database class library, `db,` use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the `dbentry2` database, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: routes.php
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Define the default controller that will be executed when referred via the URI
    to the `base_url` of the project—let's say `http://mydomain.com/myapp` so that
    `myapp` is a subdirectory of `public_html` in the sever and we have `home_page_controller`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: When the user issues `http://mydomain.com/myapp`, due to the route configuration
    for the home controller, the URI that CI will issue will be as if the user is
    referring to `http://mydomain.com/myapp/home_page_controller`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the default `application/errors/error_404.php` page
    will be executed, in case the user refers to a non-existing project controller,
    such as `http://mydomain.com/myapp/sadfasdfsdfsdi`.
  prefs: []
  type: TYPE_NORMAL
- en: We may decide, for example, to pop-up a message for the non-existing page and
    route to the default URI to minimize user inconvenience.
  prefs: []
  type: TYPE_NORMAL
- en: Defining and using your own configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CI enables us to define our own configurations and easily access them via the
    `config` class. For example, with `application/config/my_config.php`, let''s say
    we define a parameter in that `config` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We can easily access our configuration file parameters to load all the parameters
    into the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The second parameter, `TRUE,` assures us that our configuration parameters will
    be defined in an array prefixed with the configuration file name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider: `$param1 = $array[''my_config''][''param1''];`'
  prefs: []
  type: TYPE_NORMAL
- en: 'or: `$param1 = $this->config->item(''param1'', ''my_config'');.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`$param1` will have the value `value1` that we have set in the configuration
    file that we built.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and using CI naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI naming conventions are essential to understand and use, in order to properly
    develop with CI. They enable you to write minimal code using a strict and concise
    set of rules.
  prefs: []
  type: TYPE_NORMAL
- en: The full CI naming conventions and style guide can be found at [http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The naming conventions refer to the naming of parameters, functions/methods,
    class-related PHP file name storing code, project resource paths, and so on. Here
    are the specific issues we will review:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending CI resources such as the CI controller or model in our project resources
    (class extends class fashion—for example, extending `CI_controller` or `CI_model`;
    see the examples discussed in the *Controller definition naming rules* section)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining views and rendering them by a controller with or without providing
    parameters that the view code may use for its operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using existing general reusable resources (can be loaded from any controller
    or model and reused by rendered views as well) of CI helpers and libraries, and
    defining new CI helpers and libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How-tos, dos, and don'ts for locating files and naming are categorized based
    on the defined controllers, models, libraries, and helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relations between the defined class resource name, containing file name, loading
    a defined class a helper or a model, instantiating and calling a calls method
    via the URI and calling a class method with parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main resource type naming rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CI defines "one class one file standard" so that every class of a CI controller
    extension and CI model extension of a library class resides in one file. This
    also applies to helpers that are a set of functions. Each resource category (controller,
    library, model, and view) will be located in a specific directory or its subdirectory.
    The most commonly used resource categories are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Controllers**: These get the client side (for example, browser) to operate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views**: These are rendered by the controller and returned to the browser
    via HTTP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Libraries**: These are called by project resources such as controllers, views,
    models, and helpers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Models**: These are called by project resources such as controllers, views,
    libraries, and helpers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helpers**: These are called by project resources such as controllers, views,
    libraries, and models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The main resource type naming rules](img/4704OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controller definition naming rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s define the initial project controller to handle some basic services.
    Note that the controller class name is `My_handler`, and must reside in a file
    named `my_handler.php` (all lower case) at `/application/controllers` in our CI
    project directory. Here''s the code sample with which to review the naming conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We call this controller via an HTTP request URL, as an HTTP or HTTPS request.
    For example: `http://mydomain.com/index.php/my_handler`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us review several usage scenarios with this controller class definition.
    Note that you can enable CodeIgniter to operate without the `index.php` file in
    the path; for more information, refer to the `index.php` file issue discussed
    later in this chapter. In this section we will review different use cases for
    the CI controller as well as the naming rules associated with the controller.
    The following are the cases that are mainly used for calling a controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Directly from a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a view HTML page script using a CI PHP anchor helper embedded in the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a view HTML page using a JavaScript/jQuery AJAX call embedded in the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a crontab PHP script using cURL to call a controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller has its own naming rules and usage guidelines that we will review
    now. The controller is most commonly called from the view using an anchor tag.
    However, it may also be called using AJAX or even a crontab PHP script using a
    PHP function file or cURL-based request.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – calling the controller index method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Controllers are mostly called via a user interaction session on a rendered view
    processed by a client browser. The controller method is called to issue another
    process, such as and AJAX request or processing the request and rendering it back
    to the client browser additional view or web page. To define the controller call
    within a view definition (application/views), we define an anchor to be executed
    by the browser per user request. Note that in these examples we use another URL
    helper named `anchor()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note that in order to use the CI anchor helper function, we will initially load
    the helper URL via `config/autoload.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to do this is to load the anchor helper in the controller rendering
    the view, where we want to use an anchor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`$URI`: The URI path to call a controller or any URI we want to execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$text`: The anchor label shown to the user to click on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$html_attributes`: Any HTML attributes that can be defined for an HTML anchor
    element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of the resulting HTML that will be executed by the client-side browser
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Back to our example—the view code part that enables the user to call the defined
    controller will look like the following (the PHP portions are with other HTML
    tags in a view file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we only referred to the class name, its constructor and index method,
    if defined, will be executed. In case we did not define an index method for this
    `my_handler` controller, the preceding calls will only instantiate the class using
    its constructor definition, and if the index method was defined it will be called
    as well. In our case, the index method was defined so it will be called as well.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – calling the controller and calc method without arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we enable the end user to call a specific class method but
    without parameters, so that the default method parameters must be used via the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in order to use any CI helper function we need to make sure that it
    is either autoloaded or specifically loaded in the controller (for the controller
    method's usage or rendered views), library, or model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in order to refer to a specific `My_handler` class method named `calc`,
    we concatenated `/calc` after the class name. Issuing this view from a browser
    we will get a result as follows: **2 * 2 = 4\. Why?**.'
  prefs: []
  type: TYPE_NORMAL
- en: This is simply because we define default values in the receiving controller
    method. So that if no parameters are sent as in this example the default ones
    will be used, which are both set to `2` and hence the class `calc` method will
    output `4`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 – calling the controller and calc method with arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example we enable the end user to call a specific class method with
    its parameters via the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Issuing this from a browser, we will get: **5 * 7 = 35\. Why?**.'
  prefs: []
  type: TYPE_NORMAL
- en: Since we provided `5` as the first parameter and `7` as the second, using the
    CI URI naming convention of spectated `/` to pass parameter values to a called
    controller class method. Since we use the parameters as integers for multiplication,
    PHP casts them as integers, so we have 5 * 7 which is 35.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in order to call a specific controller method with parameters, we
    add the `/` separator after the method name followed by the parameters, and each
    parameter is also separated by `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this better see the following use cases and their meanings, CI
    uses the URI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When issuing the URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The controller named `controller_name` will be instanced by CI with the controller
    constructor, and then the method `method_name` will be called with the first parameter
    `param1`, second parameter `param2`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the PHP controller side, the `controller_name` method prototype will look
    like the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: So that `$user` = `param1`, `$name` = `param2`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: This is one possible way to get the parameters through a URL or get an array.
    In CodeIgniter we don't have to get an array, so we can use the URI class to get
    the parameters. For reference, see [http://ellislab.com/codeigniter/user-guide/libraries/uri.html](http://ellislab.com/codeigniter/user-guide/libraries/uri.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The CI will execute only the controller constructor and the `index()` method,
    if the controller has such a method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will be executed without calling the `index()` method, following
    the call of the specific method, `method_name`. Remember that we shall not use
    `/` in our parameters for such a call and may wish to provide them using URL encode
    or other reversible encoding methods. We can also call our controller method using
    POST/GET so that we can retrieve the parameter value posted in the class method
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: For example, within the class code we issue an AJAX call to a function as shown
    in the next example.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4 – calling AJAX to an AJAX-oriented method with arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example we enable the end user to issue an AJAX call to a specific class
    method with its parameters enabled via HTTP `POST`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Enter two numeric values for `A` and `B` and click on the **Calculate** button.
    We will get the integer casted as `A` and multiply it by the integer casted as
    `B` in the `div` section with `id='result'`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading libraries, models, and helpers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To reuse other libraries, models, and helper capabilities in our controller,
    we may also want to load libraries and helpers to our controller or model class
    to reuse them for our needs. In case we decide that certain helpers, libraries,
    or models are useful, we will have them loaded automatically. We can do so in
    the autoload configuration file named `autoload.php` located at `application/config/autoload.php`
    in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an autoload configuration example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that if we want to load our helpers or libraries within a certain
    controller or model, we can enable it as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We shall call the method that uses the helper as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'For smarty method calls in the loaded library, we use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Passing parameters within a controller into a view, `application/controllers/my_controller.php`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the view file at `application/views`: `my_view.php`, the view can use the
    provided parameters in the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Note that within the controller it is defined as the `param1` key array element,
    where the array is sent to the view.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Miscellaneous naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CI guidelines have some general naming conventions, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your classes, functions, and parameters should have short names, and if constructed
    from several words they should use the underscore separator as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When defining a string value, in case the string does not have a parameter
    to evaluate, we shall use a single comma as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case we want our string to have a parameter such as `$name`, we write our
    string using double quotes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Boolean and contacts all should be in upper case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For more general CI PHP style guide refer to [http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have reviewed and practiced CI naming conventions, rules,
    and usage with a set of examples for parameters, classes, controllers, models,
    helpers, libraries, and views.
  prefs: []
  type: TYPE_NORMAL
- en: Following the naming conventions we have reviewed CI configurations. We reviewed
    the major configuration files, such as `config.php`, `database.php`, `autoload.php`,
    and `routes.php` in depth. We also reviewed how we can use the configuration parameters
    while configuring several databases to be used in our project. In addition to
    it we also saw how we can add more project-specific configurations.
  prefs: []
  type: TYPE_NORMAL
