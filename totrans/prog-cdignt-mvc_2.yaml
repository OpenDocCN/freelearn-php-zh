- en: Chapter 2. Configurations and Naming Conventions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 配置和命名规范
- en: This chapter initially introduces the CI naming conventions. These conventions
    include the rules, style guide, and CodeIgniter naming spirit. The second part
    of this chapter will review CI project configurations for built-in resources as
    well as user-defined or third-party add-on libraries. Note that we will actually
    build our own project code in the subdirectory application described in [Chapter
    1](ch01.html "Chapter 1. Getting Started"), *Getting Started*, with optionally
    relative resource directories for our project's self-made resources, such as CSS
    / Media / jQuery libraries' resources or third-party add-ons, extending the base
    CI downloaded from the Ellis Labs site or GitHub.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章最初介绍了 CI 命名规范。这些规范包括规则、风格指南和 CodeIgniter 命名精神。本章的第二部分将回顾 CI 项目配置，包括内置资源以及用户定义的或第三方附加库。请注意，我们实际上将在
    [第一章](ch01.html "第一章. 入门") 中描述的子目录 application 中构建自己的项目代码，*入门*，可选地包含项目自制的资源的相关资源目录，例如
    CSS / 媒体 / jQuery 库的资源或第三方附加组件，扩展从 Ellis Labs 网站或 GitHub 下载的基本 CI。
- en: We should remember that developing a CI project is done by replacing/expanding
    the default provided controllers, views, models, and other resources in a well-defined
    OOP fashion. We should extend controllers, models, and add additional views as
    well as use defined helpers or libraries. We can add these from third-party libraries
    or helpers, or develop new ones for our special project business logic and needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该记住，开发 CI 项目是通过替换/扩展默认提供的控制器、视图、模型和其他资源，以良好的 OOP 风格完成的。我们应该扩展控制器、模型，添加额外的视图，以及使用定义的帮助器或库。我们可以从第三方库或帮助器中添加这些，或者为我们的特殊项目业务逻辑和需求开发新的。
- en: The initial step after installing the CI is making the proper configurations
    for our project requirements, such as database, session, auto-loaded helpers,
    and the libraries we want.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 CI 后的初始步骤是为我们的项目需求进行适当的配置，例如数据库、会话、自动加载的帮助器以及我们想要的库。
- en: 'The CI has a set of configuration files defined in the project directory located
    at `application/config`. These configurations are loaded initially whenever we
    execute any of our project''s CI controllers via a URI call using a browser or
    issuing an HTTP request via code. The major configuration files are: `config.php`,
    `database.php`, `autoload.php`, and `routes.php`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CI 在项目目录中定义了一套配置文件，位于 `application/config`。这些配置在执行任何项目 CI 控制器时最初加载，无论是通过浏览器使用
    URI 调用还是通过代码发出 HTTP 请求。主要的配置文件是：`config.php`、`database.php`、`autoload.php` 和 `routes.php`。
- en: We should review each of the major configuration files with its configuration
    value, which includes recommended value, and possible values.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该审查每个主要配置文件及其配置值，包括推荐值和可能的值。
- en: CI directory tree
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI 目录树
- en: 'The following is the classic directory tree structure of CodeIgniter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 CodeIgniter 的经典目录树结构：
- en: '![CI directory tree](img/4704OT_02_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![CI 目录树](img/4704OT_02_01.jpg)'
- en: Note that when we add new plugins and other resources such as `bootstrap`, new
    directories of resources may be added with a name of your choice so that you can
    refer to them from the specific resource you are developing using the CI `BASEPATH`
    defined parameter as the directory path to the `CI_PROJECT_ROOT` directory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们添加新的插件和其他资源，如 `bootstrap` 时，可能会添加新的资源目录，您可以根据自己的选择命名，以便您可以从正在开发的特定资源中引用它们，使用
    CI `BASEPATH` 定义参数作为 `CI_PROJECT_ROOT` 目录的路径。
- en: If we add a new directory under the project root, let's say `bootstrap`, the
    path for including resources such as CSS, JavaScript, or images (for example,
    `hello.png`) will be `$path = BASEPATH."bootstrap/hello.png"`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在项目根目录下添加一个新目录，比如 `bootstrap`，则包含资源（如 CSS、JavaScript 或图像，例如 `hello.png`）的路径将是
    `$path = BASEPATH."bootstrap/hello.png"`。
- en: config.php
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: config.php
- en: 'The CI main configuration files have the following major configurations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CI 的主要配置文件具有以下主要配置：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The default is an empty string so that CI can calculate the base URL of our
    project root directory. We shall refer to the base URL in many places in our code,
    mostly to execute controllers. To get the base URL, we should call:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为空字符串，以便 CI 可以计算项目根目录的基本 URL。在我们的代码中，我们将多次引用基本 URL，主要用于执行控制器。要获取基本 URL，我们应该调用：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `base_url()` function in the URL helper function returns the URI string
    to the CI project base. For example, if the CI project is developed on a domain
    named `example.com` under a `public_html` directory named `mydev`, and we have
    a controller named `find`, a method named `stock`, and a directory named `myprod`,
    we can call the `find` or `stock` method in both the `myprod` and `mydev` projects
    using `base_url()`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: URL辅助函数中的 `base_url()` 函数返回CI项目基本URI字符串。例如，如果CI项目是在名为 `example.com` 的域名下名为 `public_html`
    的目录中开发的，并且我们有一个名为 `find` 的控制器，一个名为 `stock` 的方法，以及一个名为 `myprod` 的目录，我们可以在 `myprod`
    和 `mydev` 项目中使用 `base_url()` 来调用 `find` 或 `stock` 方法：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `mydev` project, we will get:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mydev` 项目中，我们将得到：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `myprod` project, we will get:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `myprod` 项目中，我们将得到：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Hence, in order to call a controller class named `my_class`, we use:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了调用名为 `my_class` 的控制器类，我们使用：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will define `$u` `rl` as `http://example.com/` `mydev/index.php/my_class`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定义 `$u` `rl` 为 `http://example.com/` `mydev/index.php/my_class`。
- en: 'To set the index page as a part of the URI path to CI controllers/methods,
    we use:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要将索引页面设置为CI控制器/方法的URI路径的一部分，我们使用：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `index.php` file is the CI root PHP service that handles all the URI requests.
    It is used as part of a path URI to a resource, such as `http://mysite.com/fci/index.php/tables_managemen`
    `t/show`. However, we can hide the `index.php` file by setting CI to hide the
    index.php file in the URI path for calling the CI resources such as [http://mysite.com/fci/tables_managemen](http://mysite.com/fci/tables_managemen)
    `t/show`. To do so, we need to perform the following configuration steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.php` 文件是处理所有URI请求的CI根PHP服务。它用作资源路径URI的一部分，例如 `http://mysite.com/fci/index.php/tables_managemen`t/show`。然而，我们可以通过设置CI隐藏URI路径中的
    `index.php` 文件来调用CI资源，如[http://mysite.com/fci/tables_managemen`t/show`]。为此，我们需要执行以下配置步骤：'
- en: 'In the project root directory where the CI `index.php` file resides, an HTACCESS
    type file named `.htaccess` is added with the following configuration lines, which
    reroutes a none `index.php` URI referring to the CI project controllers path without
    `index.php`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CI `index.php` 文件所在的工程根目录中，添加了一个名为 `.htaccess` 的HTACCESS类型文件，其中包含以下配置行，它将不包含
    `index.php` 的URI重定向到CI项目控制器路径：
- en: '[PRE7]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more on this, refer to [http://en.wikipedia.org/wiki/Htaccess](http://en.wikipedia.org/wiki/Htaccess).
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息请参阅[http://en.wikipedia.org/wiki/Htaccess](http://en.wikipedia.org/wiki/Htaccess)。
- en: We should make the change to the `/config/config.php` file so that `index_page`
    will be empty in the URI path string instead of the default `index.php`. $config['index_page']
    = '';
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该将更改应用到 `/config/config.php` 文件中，以便在URI路径字符串中 `index_page` 为空，而不是默认的 `index.php`。
    $config['index_page'] = '';
- en: 'The `.htaccess` file does the trick here by adding the `index.php` file to
    the URI after receiving the URI request from the browser and before executing
    it. The result is that the user who is browsing will not see it, but it will call
    the desired resource properly, in a similar way to how we used `index.php`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`.htaccess` 文件在这里通过在从浏览器接收URI请求并在执行之前将其添加到URI中，完成了这个任务。结果是，浏览的用户将看不到它，但它会正确地调用所需的资源，类似于我们使用
    `index.php` 的方式：'
- en: 'The language setting is done as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 语言设置如下：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is recommended that you leave this as default. Note that even if we use other
    languages, such as Arabic or Hebrew, it will be fine. We just make sure that our
    PHP files are saved as UTF-8 without BOM (byte order mark is a unicode character
    that marks the file-encoding method supporting multilanguage schemes; for more
    information, refer to [http://en.wikipedia.org/wiki/Byte_order_mark](http://en.wikipedia.org/wiki/Byte_order_mark)
    to inform the browser that receives the rendered HTML page to process it as a
    UTF-8 file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将其保留为默认设置。请注意，即使我们使用其他语言，如阿拉伯语或希伯来语，也没有问题。我们只需确保我们的PHP文件以UTF-8格式保存，不带BOM（字节顺序标记是一个Unicode字符，用于标记支持多语言方案的文件编码方法；有关更多信息，请参阅[http://en.wikipedia.org/wiki/Byte_order_mark](http://en.wikipedia.org/wiki/Byte_order_mark)，以通知接收渲染的HTML页面的浏览器将其处理为UTF-8文件）。
- en: The exact meaning of this tag is out of the scope of this book and can be learned
    from HTML standard.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标签的确切含义超出了本书的范围，可以从HTML标准中学习。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Additionally, it is highly recommended for multi-language support to add the
    following line in our view file''s HTML header:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了支持多语言，我们强烈建议在视图文件的HTML头部添加以下行：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These settings inform the browser to process the rendered HTML page whose characters
    are encoded as UTF-8, which is the most common multilanguage standard for non-English
    languages such as Hebrew, Arabic, and Chinese.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置通知浏览器处理字符编码为 UTF-8 的渲染 HTML 页面，这是非英语语言（如希伯来语、阿拉伯语和中文）最常用的多语言标准。
- en: Do not touch these settings; it is very useful to support multiple languages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不要修改这些设置；这对于支持多语言非常有用。
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding configuration, if set to `TRUE`, will enable us to define hooks
    into CI events, where the hooks are defined in the `application/hooks` directory.
    Do not touch these settings unless you have a specific plan for CI event hooks.
    Note that the concept of adding hooks to the CI core activity is out of this book's
    scope.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将前面的配置设置为 `TRUE`，将使我们能够定义 CI 事件的钩子，钩子定义在 `application/hooks` 目录中。除非你有针对 CI
    事件钩子的特定计划，否则不要修改这些设置。请注意，将钩子添加到 CI 核心活动中的概念超出了本书的范围。
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding configuration will enable us to define naming roles to our library
    class name's prefix, in order to distinguish with other default libraries.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置将使我们能够为我们的库类名称的前缀定义命名角色，以便与其他默认库区分开来。
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code defines the allowed chars within a URI calling CI resources,
    mainly controllers. It is recommended to not touch this setting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码定义了在调用 CI 资源（主要是控制器）的 URI 中的允许字符。建议不要修改此设置。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will enable us to call the controller class methods with parameters, such
    as in the example provided earlier.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够以参数调用控制器类方法，例如在前面提供的示例中所示。
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code will provide the same results as the class method within
    the `my_handler` class itself in the following format:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将提供与 `my_handler` 类本身中的类方法相同的结果，格式如下：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following configuration defines if a GET URL query string will be used:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置定义是否使用 GET URL 查询字符串：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This configuration, if set to `TRUE`, will enable us to call controller class
    methods with parameters in the GET URL query form:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将此配置设置为 `TRUE`，将使我们能够通过 GET URL 查询表单调用控制器类方法：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It is highly recommended to leave this as `FALSE`, as CI provides a solution
    to pass parameters within URI, as shown in the `calc` example at the beginning
    of this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议将其保留为 `FALSE`，因为 CI 提供了在 URI 中传递参数的解决方案，如本章开头提供的 `calc` 示例所示。
- en: 'The log threshold for the severity level is such that any event that is of
    the same or higher severity level will be logged to CI. The supported threshold
    levels and their meanings are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于严重级别的日志阈值，任何具有相同或更高严重级别的活动都将被记录到 CI 中。支持的阈值级别及其含义如下：
- en: '**0**: Disables logging (error logging turned off)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**：禁用日志（错误日志关闭）'
- en: '**1**: Error messages (including PHP errors)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**：错误消息（包括 PHP 错误）'
- en: '**2**: Debug messages'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2**：调试消息'
- en: '**3**: Informational messages'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3**：信息性消息'
- en: '**4**: All messages'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**4**：所有消息'
- en: '[PRE20]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding configuration will generate error logs according to the `log_threshold`
    `()` level at `/application/logs` if the error log was enabled.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了错误日志，前面的配置将在 `/application/logs` 根据日志阈值 `()` 级别生成错误日志。
- en: Note that enabling the errors log will cause performance reduction in our web
    application. Use it only if you must for debugging needs. Otherwise set it to
    `0`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，启用错误日志会导致我们的 Web 应用程序性能降低。只有在必须用于调试时才使用它。否则将其设置为 `0`。
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The default log file path in the CI project is `application/logs`. Do not touch
    this configuration unless you have a clear reason.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: CI 项目的默认日志文件路径为 `application/logs`。除非你有明确的原因，否则不要修改此配置。
- en: 'The date time format:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间格式：
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The default date time format setting is `2012-06-18 14:54:11`. It is recommended
    to not touch this configuration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的日期时间格式设置为 `2012-06-18 14:54:11`。建议不要修改此配置。
- en: 'The cache file path:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存文件路径：
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The default is `application/cache`. It is recommended not to touch this configuration.
    The session key:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值为 `application/cache`。建议不要修改此配置。会话密钥：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This `encryption_key` must be set with a key in order to use the session class
    services. For example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `encryption_key` 必须设置为一个密钥，才能使用会话类服务。例如：
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'An example of the session library usage within a controller and setting a session
    variable is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器内使用会话库并设置会话变量的示例如下：
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Getting the session variable in another controller is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个控制器中获取会话变量的方法如下：
- en: '[PRE27]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The session data storage mechanism is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 会话数据存储机制如下：
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the recommended configuration is set to `TRUE`, we would use many session
    parameters of a large size stored in the associated default database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将推荐配置设置为`TRUE`，我们将使用存储在相关默认数据库中的大量会话参数。
- en: 'Session expiration timeout in seconds:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 会话过期超时（秒）：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Additional session configuration parameters can be found in the CI user manual.
    Cross-site scripting (XSS) filtering activation/deactivation:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI用户手册中可以找到额外的会话配置参数。跨站脚本（XSS）过滤激活/停用：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will enable XSS filtering on URI requests sent to the application. Note
    that all URI requests are processed initially by the root `index.php` to analyze
    the URI request and issue the proper CI calls. If set to `TRUE` it will protect
    URI requests from XSS type malicious attackers. It is recommended to set it to
    `TRUE` even if we reduce a bit of our application performance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启用对发送到应用程序的URI请求的XSS过滤。请注意，所有URI请求最初都由根`index.php`处理，以分析URI请求并发出适当的CI调用。如果设置为`TRUE`，它将保护URI请求免受XSS类型恶意攻击者的侵害。建议即使我们稍微降低应用程序性能，也应将其设置为`TRUE`。
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If set to `TRUE` the CI will prevent **Cross-Site Request Forger** **y** (**CSRF**/**XSRF**)
    attacks. The risk is when the fraud form is submitted. If we are accepting user
    data, it is strongly recommended that CSRF protection should be enabled. Note
    that when using AJAX, additional code may be required to enable CSRF protection
    with AJAX.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`TRUE`，CI将防止**跨站请求伪造**（**CSRF**/**XSRF**）攻击。风险在于欺诈表单提交时。如果我们正在接受用户数据，强烈建议启用CSRF保护。请注意，当使用AJAX时，可能需要额外的代码来启用带有AJAX的CSRF保护。
- en: database.php
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: database.php
- en: 'The database configuration enables to define one or more database connections
    that can be used by the application. The database configuration is a two-dimensional
    array in the following form:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置允许定义一个或多个数据库连接，这些连接可以被应用程序使用。数据库配置以下形式的二维数组：
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'By setting the parameters for database default entry, we shall define the following
    parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置数据库默认条目的参数，我们将定义以下参数：
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'By setting the parameters for another database entry named `dbentry2`, we shall
    define the following parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置名为`dbentry2`的另一个数据库的参数，我们将定义以下参数：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'There is no need to connect and load the default database as it is done automatically
    when loading the database class—however, the call is:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据库类时，无需连接和加载默认数据库，因为它会自动完成，但是调用如下：
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Or, for referring to a specific database entry name, it is:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，为了引用特定的数据库条目名称，它是：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In order to connect and load the `dbentry2` database settings stated earlier,
    use the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接和加载前面提到的`dbentry2`数据库设置，请使用以下代码：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To use the default database with the database class library, `db,` use:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用数据库类库的默认数据库`db,`，请使用：
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To use the `dbentry2` database, use:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`dbentry2`数据库，请使用：
- en: '[PRE39]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: routes.php
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: routes.php
- en: Define the default controller that will be executed when referred via the URI
    to the `base_url` of the project—let's say `http://mydomain.com/myapp` so that
    `myapp` is a subdirectory of `public_html` in the sever and we have `home_page_controller`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 定义默认控制器，当通过URI引用到项目的`base_url`时将执行此控制器——假设为`http://mydomain.com/myapp`，这样`myapp`就是服务器上`public_html`的子目录，并且我们有`home_page_controller`。
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When the user issues `http://mydomain.com/myapp`, due to the route configuration
    for the home controller, the URI that CI will issue will be as if the user is
    referring to `http://mydomain.com/myapp/home_page_controller`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户发出`http://mydomain.com/myapp`时，由于对主页控制器的路由配置，CI将发出的URI将好像用户正在引用`http://mydomain.com/myapp/home_page_controller`。
- en: '[PRE41]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the preceding example, the default `application/errors/error_404.php` page
    will be executed, in case the user refers to a non-existing project controller,
    such as `http://mydomain.com/myapp/sadfasdfsdfsdi`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，如果用户引用不存在的项目控制器，如`http://mydomain.com/myapp/sadfasdfsdfsdi`，将执行默认的`application/errors/error_404.php`页面。
- en: We may decide, for example, to pop-up a message for the non-existing page and
    route to the default URI to minimize user inconvenience.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能决定为不存在的页面弹出消息并将路由到默认URI，以最小化用户不便。
- en: Defining and using your own configurations
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和使用自己的配置
- en: 'CI enables us to define our own configurations and easily access them via the
    `config` class. For example, with `application/config/my_config.php`, let''s say
    we define a parameter in that `config` file as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: CI使我们能够定义自己的配置，并通过`config`类轻松访问它们。例如，使用`application/config/my_config.php`，假设我们在该`config`文件中定义了一个参数，如下所示：
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We can easily access our configuration file parameters to load all the parameters
    into the array:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松访问我们的配置文件参数，将所有参数加载到数组中：
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The second parameter, `TRUE,` assures us that our configuration parameters will
    be defined in an array prefixed with the configuration file name.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数 `TRUE` 确保我们的配置参数将定义在一个以配置文件名作为前缀的数组中。
- en: 'Consider: `$param1 = $array[''my_config''][''param1''];`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：`$param1 = $array['my_config']['param1'];`
- en: 'or: `$param1 = $this->config->item(''param1'', ''my_config'');.`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '或者：`$param1 = $this->config->item(''param1'', ''my_config'');.` '
- en: '`$param1` will have the value `value1` that we have set in the configuration
    file that we built.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`$param1` 将具有我们在构建的配置文件中设置的 `value1` 的值。'
- en: Understanding and using CI naming conventions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和使用 CI 命名规范
- en: The CI naming conventions are essential to understand and use, in order to properly
    develop with CI. They enable you to write minimal code using a strict and concise
    set of rules.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: CI 命名规范的理解和使用对于正确使用 CI 进行开发至关重要。它们使您能够使用严格且简洁的规则集编写最小化代码。
- en: The full CI naming conventions and style guide can be found at [http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 CI 命名规范和风格指南可以在[http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html)找到。
- en: 'The naming conventions refer to the naming of parameters, functions/methods,
    class-related PHP file name storing code, project resource paths, and so on. Here
    are the specific issues we will review:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 命名规范涉及参数、函数/方法、与类相关的 PHP 文件名存储代码、项目资源路径等的命名。以下是我们将审查的具体问题：
- en: Extending CI resources such as the CI controller or model in our project resources
    (class extends class fashion—for example, extending `CI_controller` or `CI_model`;
    see the examples discussed in the *Controller definition naming rules* section)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的项目资源中扩展 CI 资源，如 CI 控制器或模型（以类扩展类的方式——例如，扩展 `CI_controller` 或 `CI_model`；参见
    *控制器定义命名规则* 部分中讨论的示例）
- en: Defining views and rendering them by a controller with or without providing
    parameters that the view code may use for its operation
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义视图并通过控制器渲染它们，无论是否提供视图代码可能用于其操作的参数
- en: Using existing general reusable resources (can be loaded from any controller
    or model and reused by rendered views as well) of CI helpers and libraries, and
    defining new CI helpers and libraries
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CI 辅助器和库中现有的通用可重用资源（可以从任何控制器或模型中加载，并由渲染的视图重用），以及定义新的 CI 辅助器和库
- en: How-tos, dos, and don'ts for locating files and naming are categorized based
    on the defined controllers, models, libraries, and helpers
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定位文件和命名的如何做、应该做和不应该做，根据定义的控制器、模型、库和辅助器进行分类
- en: Relations between the defined class resource name, containing file name, loading
    a defined class a helper or a model, instantiating and calling a calls method
    via the URI and calling a class method with parameters
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义类资源名称、包含文件名、加载定义的类、辅助器或模型、通过 URI 实例化和调用调用方法以及调用带参数的类方法之间的关系
- en: The main resource type naming rules
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要资源类型命名规则
- en: 'CI defines "one class one file standard" so that every class of a CI controller
    extension and CI model extension of a library class resides in one file. This
    also applies to helpers that are a set of functions. Each resource category (controller,
    library, model, and view) will be located in a specific directory or its subdirectory.
    The most commonly used resource categories are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: CI 定义了“一类一个文件标准”，这样每个 CI 控制器扩展和库类 CI 模型扩展都位于一个文件中。这也适用于一组函数的辅助器。每个资源类别（控制器、库、模型和视图）都将位于特定的目录或其子目录中。最常用的资源类别如下：
- en: '**Controllers**: These get the client side (for example, browser) to operate'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这些使客户端（例如，浏览器）能够操作'
- en: '**Views**: These are rendered by the controller and returned to the browser
    via HTTP'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这些由控制器渲染并通过 HTTP 返回给浏览器'
- en: '**Libraries**: These are called by project resources such as controllers, views,
    models, and helpers'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库**：这些由项目资源（如控制器、视图、模型和辅助器）调用'
- en: '**Models**: These are called by project resources such as controllers, views,
    libraries, and helpers'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这些由项目资源（如控制器、视图、库和辅助器）调用'
- en: '**Helpers**: These are called by project resources such as controllers, views,
    libraries, and models'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助器**：这些由项目资源（如控制器、视图、库和模型）调用'
- en: '![The main resource type naming rules](img/4704OT_02_01.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![主要资源类型命名规则](img/4704OT_02_01.jpg)'
- en: Controller definition naming rules
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器定义命名规则
- en: 'Let''s define the initial project controller to handle some basic services.
    Note that the controller class name is `My_handler`, and must reside in a file
    named `my_handler.php` (all lower case) at `/application/controllers` in our CI
    project directory. Here''s the code sample with which to review the naming conventions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个初始项目控制器来处理一些基本服务。注意，控制器类名为`My_handler`，必须位于我们CI项目目录中的`/application/controllers`下的一个名为`my_handler.php`（全部小写）的文件中。以下是用于回顾命名约定的代码示例：
- en: '[PRE44]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We call this controller via an HTTP request URL, as an HTTP or HTTPS request.
    For example: `http://mydomain.com/index.php/my_handler`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过HTTP请求URL调用此控制器，作为HTTP或HTTPS请求。例如：`http://mydomain.com/index.php/my_handler`。
- en: 'Let us review several usage scenarios with this controller class definition.
    Note that you can enable CodeIgniter to operate without the `index.php` file in
    the path; for more information, refer to the `index.php` file issue discussed
    later in this chapter. In this section we will review different use cases for
    the CI controller as well as the naming rules associated with the controller.
    The following are the cases that are mainly used for calling a controller:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过这个控制器类定义来回顾几个使用场景。注意，你可以启用CodeIgniter在路径中不使用`index.php`文件来操作；有关更多信息，请参阅本章后面讨论的`index.php`文件问题。在本节中，我们将回顾CI控制器及其相关的命名规则的不同用例。以下主要是用于调用控制器的用例：
- en: Directly from a browser
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从浏览器中
- en: From a view HTML page script using a CI PHP anchor helper embedded in the page
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从使用CI PHP锚点辅助函数嵌入的HTML页面脚本中
- en: From a view HTML page using a JavaScript/jQuery AJAX call embedded in the page
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从使用嵌入页面的JavaScript/jQuery AJAX调用的HTML页面中
- en: From a crontab PHP script using cURL to call a controller
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从使用cURL调用的crontab PHP脚本中
- en: The controller has its own naming rules and usage guidelines that we will review
    now. The controller is most commonly called from the view using an anchor tag.
    However, it may also be called using AJAX or even a crontab PHP script using a
    PHP function file or cURL-based request.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器有其自己的命名规则和使用指南，我们现在将进行回顾。控制器最常见的是通过视图使用锚点标签来调用。然而，它也可以通过AJAX甚至使用PHP函数文件或基于cURL的请求的crontab
    PHP脚本来调用。
- en: Example 1 – calling the controller index method
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例1 – 调用控制器索引方法
- en: Controllers are mostly called via a user interaction session on a rendered view
    processed by a client browser. The controller method is called to issue another
    process, such as and AJAX request or processing the request and rendering it back
    to the client browser additional view or web page. To define the controller call
    within a view definition (application/views), we define an anchor to be executed
    by the browser per user request. Note that in these examples we use another URL
    helper named `anchor()`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器主要通过用户在客户端浏览器处理渲染视图的交互会话来调用。控制器方法被调用以发起另一个进程，例如AJAX请求或处理请求并将额外的视图或网页渲染回客户端浏览器。为了在视图定义（application/views）中定义控制器调用，我们定义一个由浏览器根据用户请求执行的锚点。注意，在这些示例中，我们使用了一个名为`anchor()`的其他URL辅助函数。
- en: '[PRE45]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that in order to use the CI anchor helper function, we will initially load
    the helper URL via `config/autoload.php`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使用CI锚点辅助函数，我们最初将通过`config/autoload.php`加载辅助函数URL。
- en: '[PRE46]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Another way to do this is to load the anchor helper in the controller rendering
    the view, where we want to use an anchor:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是加载锚点辅助函数到渲染视图的控制器中，我们想在其中使用锚点：
- en: '[PRE47]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`$URI`: The URI path to call a controller or any URI we want to execute'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$URI`：调用控制器或任何我们想要执行的URI路径'
- en: '`$text`: The anchor label shown to the user to click on'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$text`：显示给用户点击的锚点标签'
- en: '`$html_attributes`: Any HTML attributes that can be defined for an HTML anchor
    element'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$html_attributes`：可以为HTML锚点元素定义的任何HTML属性'
- en: 'An example of the resulting HTML that will be executed by the client-side browser
    is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个客户端浏览器将要执行的HTML结果的示例：
- en: '[PRE48]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Back to our example—the view code part that enables the user to call the defined
    controller will look like the following (the PHP portions are with other HTML
    tags in a view file):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的例子——允许用户调用定义的控制器的视图代码部分将如下所示（PHP部分在视图文件中的其他HTML标签中）：
- en: '[PRE49]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since we only referred to the class name, its constructor and index method,
    if defined, will be executed. In case we did not define an index method for this
    `my_handler` controller, the preceding calls will only instantiate the class using
    its constructor definition, and if the index method was defined it will be called
    as well. In our case, the index method was defined so it will be called as well.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只引用了类名，其构造函数和（如果定义）索引方法将被执行。如果我们没有为这个 `my_handler` 控制器定义索引方法，前面的调用将仅使用其构造函数定义实例化类，如果定义了索引方法，它也将被调用。在我们的情况下，索引方法被定义了，所以它也将被调用。
- en: Example 2 – calling the controller and calc method without arguments
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 2 – 不带参数调用控制器和 calc 方法
- en: In this example, we enable the end user to call a specific class method but
    without parameters, so that the default method parameters must be used via the
    browser.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们允许最终用户调用具有参数的特定类方法，但不需要参数，因此必须通过浏览器使用默认方法参数。
- en: Note that in order to use any CI helper function we need to make sure that it
    is either autoloaded or specifically loaded in the controller (for the controller
    method's usage or rendered views), library, or model.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使用任何 CI 辅助函数，我们需要确保它已被自动加载或已在控制器（用于控制器方法的用法或渲染的视图）、库或模型中特别加载。
- en: '[PRE50]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Note that in order to refer to a specific `My_handler` class method named `calc`,
    we concatenated `/calc` after the class name. Issuing this view from a browser
    we will get a result as follows: **2 * 2 = 4\. Why?**.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了引用名为 `calc` 的特定 `My_handler` 类方法，我们在类名后拼接了 `/calc`。从浏览器发出此视图，我们将得到以下结果：**2
    * 2 = 4。为什么？**。
- en: This is simply because we define default values in the receiving controller
    method. So that if no parameters are sent as in this example the default ones
    will be used, which are both set to `2` and hence the class `calc` method will
    output `4`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是因为我们在接收控制器方法中定义了默认值。因此，如果没有发送参数，如本例所示，将使用这些默认值，它们都设置为 `2`，因此类 `calc` 方法将输出
    `4`。
- en: Example 3 – calling the controller and calc method with arguments
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 3 – 使用参数调用控制器和 calc 方法
- en: In this example we enable the end user to call a specific class method with
    its parameters via the browser.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们允许最终用户通过浏览器调用具有其参数的特定类方法。
- en: '[PRE51]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Issuing this from a browser, we will get: **5 * 7 = 35\. Why?**.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从浏览器发出此请求，我们将得到：**5 * 7 = 35。为什么？**。
- en: Since we provided `5` as the first parameter and `7` as the second, using the
    CI URI naming convention of spectated `/` to pass parameter values to a called
    controller class method. Since we use the parameters as integers for multiplication,
    PHP casts them as integers, so we have 5 * 7 which is 35.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们提供了 `5` 作为第一个参数和 `7` 作为第二个参数，使用 CI URI 命名约定中的观察 `/` 将参数值传递给被调用的控制器类方法。由于我们将参数用作乘法整数，PHP
    将它们转换为整数，因此我们有 5 * 7，结果是 35。
- en: Note that in order to call a specific controller method with parameters, we
    add the `/` separator after the method name followed by the parameters, and each
    parameter is also separated by `/`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使用参数调用特定控制器方法，我们在方法名后添加 `/` 分隔符，然后跟随着参数，每个参数也由 `/` 分隔。
- en: 'To understand this better see the following use cases and their meanings, CI
    uses the URI as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解这一点，请查看以下用例及其含义，CI 使用 URI 如下：
- en: 'When issuing the URI:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出 URI：
- en: '[PRE52]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The controller named `controller_name` will be instanced by CI with the controller
    constructor, and then the method `method_name` will be called with the first parameter
    `param1`, second parameter `param2`, and so on.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为 `controller_name` 的控制器将由 CI 使用控制器构造函数实例化，然后调用 `method_name` 方法，使用第一个参数 `param1`，第二个参数
    `param2`，依此类推。
- en: 'On the PHP controller side, the `controller_name` method prototype will look
    like the following example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 控制器端，`controller_name` 方法原型将如下所示：
- en: '[PRE53]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: So that `$user` = `param1`, `$name` = `param2`, and so on.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`$user` = `param1`，`$name` = `param2`，依此类推。
- en: This is one possible way to get the parameters through a URL or get an array.
    In CodeIgniter we don't have to get an array, so we can use the URI class to get
    the parameters. For reference, see [http://ellislab.com/codeigniter/user-guide/libraries/uri.html](http://ellislab.com/codeigniter/user-guide/libraries/uri.html).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过 URL 或获取数组的一种可能方式。在 CodeIgniter 中，我们不必获取数组，因此我们可以使用 URI 类来获取参数。有关参考，请参阅
    [http://ellislab.com/codeigniter/user-guide/libraries/uri.html](http://ellislab.com/codeigniter/user-guide/libraries/uri.html)。
- en: 'If we provide:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供：
- en: '[PRE54]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The CI will execute only the controller constructor and the `index()` method,
    if the controller has such a method.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果控制器有此类方法，CI 将仅执行控制器构造函数和 `index()` 方法。
- en: 'If we provide:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供：
- en: '[PRE55]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The preceding code will be executed without calling the `index()` method, following
    the call of the specific method, `method_name`. Remember that we shall not use
    `/` in our parameters for such a call and may wish to provide them using URL encode
    or other reversible encoding methods. We can also call our controller method using
    POST/GET so that we can retrieve the parameter value posted in the class method
    in the following way:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在调用特定方法`method_name`之后，而不调用`index()`方法之前执行。请记住，我们不应该在我们的参数中使用`/`，并且可能希望使用URL编码或其他可逆编码方法提供它们。我们也可以使用POST/GET调用我们的控制器方法，以便以以下方式检索在类方法中发布的参数值：
- en: '[PRE56]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: For example, within the class code we issue an AJAX call to a function as shown
    in the next example.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在类代码中，我们发出一个AJAX调用到函数，如下一个示例所示。
- en: Example 4 – calling AJAX to an AJAX-oriented method with arguments
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例 4 – 带参数调用面向AJAX的方法
- en: In this example we enable the end user to issue an AJAX call to a specific class
    method with its parameters enabled via HTTP `POST`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们允许最终用户通过HTTP `POST`向特定的类方法发出AJAX调用，并传递其参数。
- en: '[PRE57]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Enter two numeric values for `A` and `B` and click on the **Calculate** button.
    We will get the integer casted as `A` and multiply it by the integer casted as
    `B` in the `div` section with `id='result'`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为`A`和`B`输入两个数值并点击**计算**按钮。我们将在`div`部分中，`id='result'`将得到将整数`A`转换为整数并乘以将整数`B`转换为整数的结果。
- en: Loading libraries, models, and helpers
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载库、模型和辅助函数
- en: To reuse other libraries, models, and helper capabilities in our controller,
    we may also want to load libraries and helpers to our controller or model class
    to reuse them for our needs. In case we decide that certain helpers, libraries,
    or models are useful, we will have them loaded automatically. We can do so in
    the autoload configuration file named `autoload.php` located at `application/config/autoload.php`
    in our project.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的控制器中重用其他库、模型和辅助函数的能力，我们可能还想将库和辅助函数加载到我们的控制器或模型类中，以便为我们的需求重用它们。如果我们决定某些辅助函数、库或模型是有用的，我们将自动加载它们。我们可以在名为`autoload.php`的自动加载配置文件中这样做，该文件位于我们的项目中的`application/config/autoload.php`。
- en: 'The following is an autoload configuration example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个自动加载配置示例：
- en: '[PRE58]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Remember that if we want to load our helpers or libraries within a certain
    controller or model, we can enable it as per the following example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果我们想在某个控制器或模型中加载我们的辅助函数或库，我们可以按照以下示例启用它：
- en: '[PRE59]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We shall call the method that uses the helper as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下方式调用使用辅助函数的方法：
- en: '[PRE60]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'For smarty method calls in the loaded library, we use the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于加载库中的smarty方法调用，我们使用以下代码：
- en: '[PRE61]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Passing parameters within a controller into a view, `application/controllers/my_controller.php`
    as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数传递到控制器中的视图，`application/controllers/my_controller.php`如下所示：
- en: '[PRE62]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the view file at `application/views`: `my_view.php`, the view can use the
    provided parameters in the following method:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图文件`application/views`中的`my_view.php`，视图可以使用以下方法使用提供的参数：
- en: '[PRE63]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note that within the controller it is defined as the `param1` key array element,
    where the array is sent to the view.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在控制器中，它被定义为`param1`键数组元素，其中数组被发送到视图。
- en: '[PRE64]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Miscellaneous naming conventions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项命名约定
- en: 'CI guidelines have some general naming conventions, such as the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: CI指南有一些通用的命名约定，如下所示：
- en: 'Your classes, functions, and parameters should have short names, and if constructed
    from several words they should use the underscore separator as follows:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的类、函数和参数应该有简短的名字，如果由多个单词组成，它们应该使用下划线分隔符，如下所示：
- en: '[PRE65]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'When defining a string value, in case the string does not have a parameter
    to evaluate, we shall use a single comma as follows:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当定义一个字符串值时，如果字符串没有参数要评估，我们应该使用单个逗号，如下所示：
- en: '[PRE66]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In case we want our string to have a parameter such as `$name`, we write our
    string using double quotes:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想让字符串具有一个如`$name`这样的参数，我们使用双引号来编写我们的字符串：
- en: '[PRE67]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The Boolean and contacts all should be in upper case:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值和联系人名称都应该使用大写：
- en: '[PRE68]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: For more general CI PHP style guide refer to [http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更一般的CI PHP风格指南，请参阅[http://codeigniter.com/user_guide/general/styleguide.html](http://codeigniter.com/user_guide/general/styleguide.html)。
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have reviewed and practiced CI naming conventions, rules,
    and usage with a set of examples for parameters, classes, controllers, models,
    helpers, libraries, and views.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过一系列关于参数、类、控制器、模型、辅助函数、库和视图的示例，审查并实践了CI的命名规范、规则和用法。
- en: Following the naming conventions we have reviewed CI configurations. We reviewed
    the major configuration files, such as `config.php`, `database.php`, `autoload.php`,
    and `routes.php` in depth. We also reviewed how we can use the configuration parameters
    while configuring several databases to be used in our project. In addition to
    it we also saw how we can add more project-specific configurations.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循我们已审查的命名规范，我们审查了主要的配置文件，例如`config.php`、`database.php`、`autoload.php`和`routes.php`的深度。我们还审查了在配置用于我们项目的多个数据库时如何使用配置参数。除此之外，我们还看到了如何添加更多针对特定项目的配置。
