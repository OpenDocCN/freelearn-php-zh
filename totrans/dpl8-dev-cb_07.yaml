- en: Plug and Play with Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will dive into the new Plugin API provided in Drupal 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating blocks using plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field formatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom plugin type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 introduces plugins. Plugins power many items in Drupal, such as blocks,
    field types, and field formatters. Plugins and plugin types are provided by modules.
    They provide a swappable and specific functionality. Breakpoints, as discussed
    in *[Chapter 5](991ad206-3a73-4c3a-b6b7-c680a0a74a53.xhtml)*, *Front End for the
    Win*, are plugins. In this chapter, we will discuss how plugins work in Drupal
    8 and show you how to create blocks, fields, and custom plugin types.
  prefs: []
  type: TYPE_NORMAL
- en: Each version of Drupal has subsystems, which provided pluggable components and
    contributed modules. However, the implementation and management of these subsystems
    presented a problem. Blocks, fields, and image styles each had an entirely different
    system to be learned and understood. The Plugin API exists in Drupal 8 to mitigate
    this problem and provide a base API to implement pluggable components. This has
    greatly improved the developer experience when working with Drupal core's subsystems.
    In this chapter, we will implement a block plugin. We will use the Plugin API
    to provide a custom field type along with a widget and formatter for the field.
    The last recipe will show you how to create and use a custom plugin type.
  prefs: []
  type: TYPE_NORMAL
- en: Creating blocks using plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal, a block is a piece of content that can be placed in a region provided
    by a theme. Blocks are used to present specific kinds of content, such as a user
    login form, a snippet of text, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks are annotated plugins. Annotated plugins use documentation blocks to
    provide details of the plugin. They are discovered in the module's `Plugin` class
    namespace. Each class in the `Plugin/Block` namespace will be discovered by the
    Block module's plugin manager.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will define a block that will display a copyright snippet
    and the current year and place it in the footer region.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new module like the one shown in this recipe, with a defined `info.yml`
    so that it can be discovered by Drupal. We will refer to the module as `mymodule`
    throughout the recipe. Use your module's appropriate name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a `src/Plugin/Block` directory in your module. This will translate the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`\Drupal\mymodule\Plugin\Block` namespace and allow a block plugin discovery.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `Copyright.php` file in the newly created folder so that we can define
    the `Copyright` class for our block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3132c724-4b2f-492d-8390-5ececa50251f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Copyright` class will extend the `\Drupal\Core\Block\BlockBase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will extend the `BlockBase` class, which implements `\Drupal\Core\Block\BlockPluginInterface`
    and provides us with an implementation of nearly all of the interface's methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will provide the block''s identifier, administrative label, and category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The annotation document block of the class identifies the type of plugin through
    `@Block`. Drupal will parse this and initiate the plugin with the properties defined
    inside it. The `id` is the internal machine name, the `admin_label` is displayed
    on the block listing page, and `category` shows up in the block select list.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to provide a `build` method to satisfy the `\Drupal\Core\Block\BlockPluginInterface`
    interface. This returns the output to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `build` method returns a render array that uses Drupal's `t` function to
    substitute `@year` for the `\DateTime` object's output that is formatted as a
    full year.
  prefs: []
  type: TYPE_NORMAL
- en: Since PHP 5.4, a warning will be displayed if you have not set a timezone explicitly
    in your PHP's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Install your module if it has not yet been installed by going to the Extend
    page. If you have already installed your module, go to the Performance page and
    rebuild Drupal's caches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Black layout page from Structure in the administrative menu. In the
    Footer fourth region, click on Place block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the block list and add the custom block to your regions, for instance,
    the footer region. Find the Copyright block, and click on Place block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b474e7f-89bf-4305-b45f-c8cd2074cd38.png)'
  prefs: []
  type: TYPE_IMG
- en: Uncheck the Display title checkbox so that only our block's content can be rendered.
    Click on Save block and accept all of the other defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View your Drupal site, and verify that the copyright statement will always
    keep the year dynamic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f48f78d9-fe2d-4b93-a6d8-3f26380c114b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plugin system works through plugin definitions and plugin managers for those
    definitions. The `\Drupal\Core\Block\BlockManager` class defines the block plugins
    that need be located in the `Plugin/Block` namespace. It also defines the base
    interface that needs to be implemented along with the `Annotation` class, which
    is to be used when parsing the class's document block.
  prefs: []
  type: TYPE_NORMAL
- en: When Drupal's cache is rebuilt, all available namespaces are scanned to check
    whether classes exist in the given plugin namespace. The definitions, via annotation,
    will be processed, and the information will be cached.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks are then retrieved from the manager, manipulated, and their methods are
    invoked. When viewing the `Block layout` page to manage blocks, the `\Drupal\Core\Block\BlockBase`
    class's `label` method is invoked to display the human-readable name. When a block
    is displayed on a rendered page, the `build` method is invoked and passed to the
    theming layer to be output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are more in-depth items that can be used when creating a block plugin.
    We will cover those in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Altering blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blocks can be altered in three different ways: the plugin definition can be
    altered, the build array, or the view array out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A module can implement `hook_block_alter` in its `.module` file and modify
    the annotation definitions of all the discovered blocks. This will allow a module
    to change the default `user_login_block` from user login to `Login`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A module can implement `hook_block_build_alter` and modify the build information
    of a block. The hook is passed through the build array and the `\Drupal\Core\Block\BlockPluginInterface`
    instance for the current block. Module developers can use this to add cache contexts
    or alter the cache ability of the metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can test the modification of the cache metadata by altering the recipe's
    block to output a timestamp. With caching enabled, you will see that the value
    persists on the same URL, but it will be different across each page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, a module can implement `hook_block_view_alter` in order to modify
    the output to be rendered. A module can add content to be rendered or removed.
    This can be used to remove the `contextual_links` item, which allows inline editing
    on the front page of a site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Block settings forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blocks can provide a `setting` form. This recipe provides the text *My Company*
    for the copyright text. Instead, this can be defined through a text field in the
    block's setting form.
  prefs: []
  type: TYPE_NORMAL
- en: Let's readdress the `Copyright.php` file that holds our block's class. We will
    override methods provided by our base class. The following methods will be added
    to the class written in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'A block can override the default `defaultConfiguration` method, which returns
    an array of setting keys and their default values. The `blockForm` method can
    then override the `\Drupal\Core\Block\BlockBase` empty array implementation to
    return a Form API array to represent the settings form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `blockSubmit` method must then be implemented, which updates the block''s
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `build` method can be updated to use the new configuration item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can now return to the `Block layout` form, and click on Configure in the
    Copyright block. The new setting will be available in the block instance's configuration
    form.
  prefs: []
  type: TYPE_NORMAL
- en: Defining access to a block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blocks, by default, are rendered for all users. The default access method can
    be overridden. This allows a block to only be displayed to authenticated users
    or based on a specific permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is taken from the `user_login_block`. It allows access to
    the block if the user is logged out and is not in the login or logout page. The
    access is cached based on the current route name and the user's current role being
    anonymous. If these are not passed, the access returned is forbidden and the block
    is not built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other modules can implement `hook_block_access` to override the access of a
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A module implementing the preceding hook will deny access to our Copyright block
    if it is not placed in the footer region.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Creating a custom plugin type* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to annotations-based plugins at [https://www.drupal.org/docs/8/api/plugin-api/annotations-based-plugins](https://www.drupal.org/docs/8/api/plugin-api/annotations-based-plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information on `block.api.php` is available at [https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/8](https://api.drupal.org/api/drupal/core%21modules%21block%21block.api.php/8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field types are defined using the plugin system. Each field type has its own
    class and definition. A new field type can be defined through a custom class that
    will provide schema and property information.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will create a simple field type called *real name* to store
    the first and last names.
  prefs: []
  type: TYPE_NORMAL
- en: Field types define ways in which data can be stored and handled through the
    Field API. Field widgets provides means for editing a field type in the user interface.
    Field formatters provide means for displaying the field data to users. Both are
    plugins and will be covered in later recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new module like the one shown in this recipe, with a defined `info.yml`
    so that it can be discovered by Drupal. We will refer to the module as `mymodule`
    throughout the recipe. Use your module's appropriate name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to create the `src/Plugin/Field/FieldType` directory in the module's
    base location. The `Field` module discovers field types in the `Plugin\Field\FieldType`
    namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will create a `RealName.php` file in the newly created directory so that
    we can define the `RealName` class. This will provide our `realname` field for
    the first and last names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78b1e92a-3bef-4f77-a5c9-468f1afbf8f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `RealName` class will extend the `\Drupal\Core\Field\FieldItemBase` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `\Drupal\Core\Field\FieldItemBase` satisfies methods defined by inherited
    interfaces, except for `schema` and `propertyDefinitions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Field types are annotated plugins. Annotated plugins use documentation blocks
    to provide details of the plugin. We will provide the field type''s identifier,
    label, description, category, and default widget and formatter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@FieldType` tells Drupal that this is a `FieldType` plugin. The following
    properties are defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Id`: This is the plugin''s machine name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Label`: This is the human-readable name for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This is the human-readable description of the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category`: This is the category where the field shows up in the user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_widget`: This is the default form widget to be used for editing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_formatter`: This is the default formatter with which you can display
    the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RealName` class needs to implement the `schema` method defined in the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`\Drupal\Core\Field\FieldItemInterface`. This returns an array of the database
    API schema information. Add the following method to your class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `schema` method defines the columns in the field's data table. We will define
    a column to hold the `first_name` and `last_name` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to implement the `propertySchema` method to satisfy `\Drupal\Core\TypedData\ComplexDataDefinitionInterface`.
    This returns a typed definition of the values defined in the `schema` method.
    Add the following method to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This method returns an array that is keyed with the same column names provided
    in `schema`. It returns a typed data definition to handle the field type's values.
  prefs: []
  type: TYPE_NORMAL
- en: Install your module, if it has not yet been installed, by going to the Extend
    page. If you have already installed your module, go to the Performance page and
    rebuild Drupal's caches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The field will now appear on the field type management screen. To use it, go
    to Structure and then to Comment Types. You can now go to Manage Fields and click
    on Add field to add a real name entry for your comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c00a768d-b6f6-4957-83be-500e1ceb4343.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal core defines a `plugin.manager.field.field_type` service. By default,
    this is handled through the `\Drupal\Core\Field\FieldTypePluginManager` class.
    This plugin manager defines the field type plugins that should be in the `Plugin/Field/FieldType`
    namespace, and all the classes in this namespace will be loaded and assumed to
    be field type plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The manager's definition also sets `\Drupal\Core\Field\FieldItemInterface` as
    the expected interface that all the field type plugins will implement. This is
    why most field types extend `\Drupal\Core\Field\FieldItemBase` to meet these method
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: As field types are annotated plugins, the manager provides `\Drupal\Core\Field\Annotation\FieldType`
    as the class that fulfills the annotation definition.
  prefs: []
  type: TYPE_NORMAL
- en: When the user interface defines the available fields, the `plugin.manager.field.field_type`
    service is invoked to retrieve a list of available field types.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Existing field types can be altered to modify their definitions, and custom
    field types can implement a method to define whether the value is empty or not.
    We will cover these in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Altering field types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Field\FieldTypePluginManager` class defines the `alter` method
    as `field_info.` Modules that implement `hook_field_info_alter` in their `.module`
    files have the ability to modify field type definitions discovered by the manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `alter` method will change the human-readable label for the email
    field to **E-mail address** when selecting the field in the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Defining whether a field is empty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `\Drupal\Core\TypedDate\ComplexDataInterface` interface provides an `isEmpty`
    method. This method is used to check whether the field's value is empty, for example,
    when verifying that the required field has data. The `\Drupal\Core\TypedData\Plugin\DataType\Map`
    class implements the method. By default, the method ensures that the values are
    not empty.
  prefs: []
  type: TYPE_NORMAL
- en: Field types can provide their own implementations to provide a more robust verification.
    For instance, the field can validate that the first name can be entered but not
    the last name, or the field can require both the first and the last name.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Creating blocks using plugins* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field widgets provide the form interface to edit a field. These integrate with
    the Form API to define how a field can be edited and the way in which the data
    can be formatted before it is saved. Field widgets are chosen and customized through
    the form display interface.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a widget for the field created in the *Creating
    a custom field type* recipe in this chapter. The field widget will provide two
    text fields for entering the first and last name items.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new module, such as the one from the *Creating a custom field type*
    recipe. We will refer to the module as `mymodule` throughout the recipe. Use your
    module's appropriate name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to create the `src/Plugin/Field/FieldWidget` directory in the module's
    base location. The `Field` module discovers field widgets in the `Plugin\Field\FieldWidget`
    namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `RealNameDefaultWidget.php` file in the newly created directory so
    that we can define the `RealNameDefaultWidget` class. This will provide a custom
    form element to edit the first and last name values of our field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a85a2ae6-6ff9-4201-83f1-dc8324210c62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `RealNameDefaultWidget` class will extend the `\Drupal\Core\Field\WidgetBase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will provide the field widget''s identifier, label, and supported field
    types in the plugin''s annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `@FieldWidget` tells Drupal that this is a field widget plugin. It defines
    `id` to represent the machine name, the human-readable name as `label`, and the
    field types that the widget interacts with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to implement the `formElement` method to satisfy the remaining
    `interface` methods after extending `\Drupal\Core\Field\WidgetBase`. Add the following
    method to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `formElement` method returns a Form API array that represents the widget
    to be set and edits the field data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will need to modify our original `RealName` field type plugin class
    to use the default widget that we created. Modify the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_widget` annotation property as `realname_default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Rebuild Drupal's cache so that the plugin system can discover the new field
    widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `Real name` field and use the new `Real name` widget. For example, add
    it to a comment type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94d856c2-3142-4ca5-bd1f-fd39fbf6d075.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal core defines a `plugin.manager.field.widget` service. By default, this
    is handled through the `\Drupal\Core\Field\FieldWidgetPluginManager` class. This
    plugin manager defines the field widget plugins that should be in the `Plugin/Field/FieldWidget`
    namespace, and all the classes in this namespace will be loaded and assumed to
    be field widget plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The manager's definition also sets `\Drupal\Core\Field\FieldWidgetInterface`
    as the expected interface that all the field widget plugins will implement. This
    is why most field types extend `\Drupal\Core\Field\WidgetBase` to meet these method
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: As field widgets are annotated plugins, the manager provides `\Drupal\Core\Field\Annotation\FieldWidget`
    as the class that fulfills the annotation definition.
  prefs: []
  type: TYPE_NORMAL
- en: The entity form display system uses the `plugin.manager.field.widget` service
    to load field definitions and add the field's element returned from the `formElement`
    method to the entity form.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field widgets have additional methods to provide more information; they are
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Field widget settings and summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Field\WidgetInterface` interface defines three methods that
    can be overridden to provide a settings form and a summary of the current settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget settings can be used to alter the form presented to the user. A setting
    can be created that allows the field element to be limited to only enter the first
    or last name with one text field.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a custom plugin type* recipe of this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom field formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field formatters define the way in which a field type will be presented. These
    formatters return the render array information to be processed by the theming
    layer. Field formatters are configured on the display mode interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a formatter for the field created in the *Creating
    a custom field type* recipe in this chapter. The field formatter will display
    the first and last names with some settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new module like the one existing in the first recipe. We will refer
    to the module as `mymodule` throughout the recipe. Use your module's appropriate
    name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to create the `src/Plugin/Field/FieldFormatter` directory in the
    module's base location. The `Field` module discovers field formatters in the `Plugin\Field\FieldFormatter`
    namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `RealNameFormatter.php` file in the newly created directory so that
    we can define the `RealNameFormatter` class. This will provide a custom form element
    to display the field''s values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a0f7c40-5b64-43e7-a563-d521dfe719ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `RealNameFormatter` class will extend the `\Drupal\Core\Field\FormatterBase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will provide the field widget''s identifier, label, and supported field
    types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to implement the `viewElements` method to satisfy the `\Drupal\Core\Field\FormatterInferface`
    interface. This is used to render the field data. Add the following method to
    your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to modify our original `RealName` field type''s `plugin`
    class to use the default formatter that we created. Open the `src/Plugin/FieldType/RealName.php`
    file, and update the `default_formatter` annotation property as `realname_one_line`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Rebuild Drupal's cache so that the plugin system can discover the new field
    widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update an entity view mode with a `Real name` field to use the Real name (one
    line) formatter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33d64166-03d6-4a18-b099-a13b7d85cf40.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal core defines a `plugin.manager.field.formatter` service. By default,
    this is handled through the `\Drupal\Core\Field\FormatterPluginManager` class.
    This plugin manager defines the field formatter plugins that should be in the
    `Plugin/Field/FieldFormatter` namespace, and all the classes in this namespace
    will be loaded and assumed to be field formatter plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The manager's definition also sets `\Drupal\Core\Field\FormatterInterface` as
    the expected interface that all field formatter plugins will implement. This is
    why most field formatters extend `\Drupal\Core\Field\FormatterBase` to meet these
    method requirements.
  prefs: []
  type: TYPE_NORMAL
- en: As field formatters are annotated plugins, the manager provides `\Drupal\Core\Field\Annotation\FieldFormatter`
    as the class that fulfills the annotation definition.
  prefs: []
  type: TYPE_NORMAL
- en: The entity view display system uses the `plugin.manager.field.formatter` service
    to load field definitions and add the field's render array, returned from the
    `viewElements` method, to the entity view render array.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field formatters have additional methods to provide more information; they are
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Formatter settings and summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `\Drupal\Core\Field\FormatterInterface` interface defines three methods
    that can be overridden to provide a settings form and a summary of the current
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaultSettings`: This returns an array of the setting keys and default values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsForm`: This returns a Form API array that is used for the settings
    form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settingsSummary`: This allows an array of strings to be returned and displayed
    on the manage display form for the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Settings can be used to alter how the formatter displays information. For example,
    these methods can be implemented to provide settings to hide or display the first
    or last name.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Creating a custom plugin type* recipe of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom plugin type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plugin system provides a means to create specialized objects in Drupal that
    do not require the data storage features of the entity system.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is based on the **GeoIP API** module port to Drupal 8 that was started
    by the author. The **GeoIP API** module provides a way to get the country from
    a website visitor's IP address.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new plugin type called `GeoLocator` that will
    return the country code for a given IP address. We will create a plugin manager,
    a default plugin interface, a plugin annotation definition, and provide a default
    plugin to find the country via the website's CDN.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the `geoip` namespace and module name in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All plugins need to have a service that acts as a plugin manager. Create a new
    file in your module's `src` directory called `GeoLocatorManager.php`. This will
    hold the `GeoLocatorManager` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `GeoLocatorManager` class by extending the `\Drupal\Core\Plugin\DefaultPluginManager`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When creating a new plugin type, it is recommended that the plugin manager
    provides a set of defaults for new plugins, in case an item is missing from the
    definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to override the `\Drupal\Core\Plugin|DefaultPluginManager`
    class constructor to define the module handler and cache backend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We override the constructor so that we can specify a specific cache key. This
    allows plugin definitions to be cached and cleared properly; otherwise, our plugin
    manager will continuously read the disk to find plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will be to create a `geoip.services.yml` file in our module''s
    root directory. This will describe our plugin manager to Drupal, allowing a plugin
    discovery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Drupal utilizes services and dependency injection. By defining our class as
    a service, we are telling the application container how to initiate our class.
    We can use the `parent` definition to tell the container to use the same arguments
    as the `default_plugin_manager` definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'All annotation-based plugins must provide a class, which serves as the annotation
    definition. Create `GeoLocator.php` in `src/Annotation` to provide the `GeoLocator`
    annotation class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Each property is an item that can be defined in the plugin's annotation. The
    annotated definition will start with `@GeoLocator` for our plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define the plugin interface that we defined in the plugin manager.
    The plugin manager will validate the `GeoLocator` plugins that implement this
    interface. Create a `GeoLocatorInterface.php` file in our module''s `src/Plugin/GeoLocator`
    directory to hold the interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We provide an interface so that we can guarantee that we have these expected
    methods when working with a `GeoLocator` plugin, and that we have an output, regardless
    of the logic behind each method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a default plugin, which returns the country code from
    CDN headers, if available. In `src/Plugin/GeoLocator`, create a `Cdn.php` file
    for our `Cdn` plugin class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `GeoLocator` plugin type is now set, with a default CDN-based plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 implements a service container, a concept adopted from the Symfony
    framework. In order to implement a plugin, there needs to be a manager who can
    discover and process plugin definitions. This manager is defined as a service
    in a module's `services.yml` with its required constructor parameters. This allows
    the service container to initiate the class when it is required.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the `GeoLocatorManager` plugin manager discovers the `GeoLocator`
    plugin definitions through annotated plugin discovery. After the first discovery,
    all the known plugin definitions are then cached under the `geolocator_plugins`
    cache key.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin managers also provide a method to return these definitions or create
    an object instance based on an available definition. For the CDN plugin, this
    would be a full instantiated `Cdn` class object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many additional items for creating a custom plugin type; we will discuss
    some of them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying an alter hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugin managers have the ability to define an alter hook. The following line
    of code will be added to the `GeoLocatorManager` class''s constructor to provide
    `hook_geolocator_plugins_alter`. This is passed to the module handler service
    for invocations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Modules implementing `hook_geolocator_plugins_alter` in the `.module` file have
    the ability to modify all the discovered plugin definitions. They also have the
    ability to remove defined plugin entries or alter any information provided for
    the annotation definition.
  prefs: []
  type: TYPE_NORMAL
- en: Using a cache backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugins can use a cache backend to improve performance. This can be done by
    specifying a cache backend with the `setCacheBackend` method in the manager's
    constructor. The following line of code will allow the `Unit` plugins to be cached
    and only discovered on a cache rebuild.
  prefs: []
  type: TYPE_NORMAL
- en: The `$cache_backend` variable is passed to the constructor. The second parameter
    provides the cache key. The cache key will have the current language code added
    as a suffix.
  prefs: []
  type: TYPE_NORMAL
- en: There is an optional third parameter that takes an array of strings to represent
    cache tags that will cause the plugin definitions to be cleared. This is an advanced
    feature, and plugin definitions should normally be cleared through the manager's
    `clearCachedDefinitions` method. The cache tags allow the plugin definitions to
    be cleared when a relevant cache is cleared as well.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing plugins through the manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugins are loaded through the manager service, which should always be accessed
    through the service container. The following line of code will be used in your
    module''s hooks or classes to access the plugin manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Plugin managers have various methods for retrieving plugin definitions, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getDefinitions`: This method will return an array of plugin definitions. It
    first makes an attempt to retrieve cached definitions, if any, and sets the cache
    of discovered definitions before returning them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getDefinition`: This takes an expected plugin ID and returns its definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createInstance`: This takes an expected plugin ID and returns an initiated
    class for the plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getInstance`: This takes an array that acts as a plugin definition and returns
    an initiated class from the definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to services and dependency injection at [https://www.drupal.org/node/2133171](https://www.drupal.org/node/2133171)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
