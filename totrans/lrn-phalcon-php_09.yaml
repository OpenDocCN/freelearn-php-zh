- en: Chapter 9. The Frontend Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 前端模块
- en: 'Developing the frontend can be a difficult job. You have to take into consideration
    a variety of aspects, such as **User Experience** (**UX**), **Search Engine Optimization**
    (**SEO**), browser compatibility, mobile responsiveness, and so on. We are going
    to focus on creating a minimal layout and implementing Elasticsearch. We will
    also use MongoDB to create some logs for articles. Step by step, we are going
    to cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发前端可能是一项艰巨的工作。您必须考虑各种方面，例如**用户体验**（**UX**）、**搜索引擎优化**（**SEO**）、浏览器兼容性、移动响应性等。我们将专注于创建最小布局并实现Elasticsearch。我们还将使用MongoDB为文章创建一些日志。我们将逐步在本章中涵盖以下主题：
- en: The frontend layout and basic functionality
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端布局和基本功能
- en: Implementing Elasticsearch
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Elasticsearch
- en: Implementing MongoDB
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现MongoDB
- en: The Frontend layout and basic functionality
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端布局和基本功能
- en: We are going to use a simple layout for our frontend module. Switch to the `modules/Frontend/Views/Default/common`
    folder and create the `footer.volt`, `paginator.volt`, and `navbar.volt` files
    with the following content.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的布局来构建前端模块。切换到`modules/Frontend/Views/Default/common`文件夹，并创建`footer.volt`、`paginator.volt`和`navbar.volt`文件，内容如下。
- en: footer.volt
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: footer.volt
- en: 'The `footer.volt` file does not contain too much information, but in future,
    you will want to add more information for sure, such as links, partners, analytics
    scripts, and so on:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`footer.volt`文件没有包含太多信息，但将来您肯定希望添加更多信息，例如链接、合作伙伴、分析脚本等：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: paginator.volt
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: paginator.volt
- en: 'The `paginator.volt` file contains two simple links: **Previous** and **Next**.
    You can modify these and create a more complex paginator if you wish:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`paginator.volt`文件包含两个简单的链接：**上一页**和**下一页**。您可以修改这些链接并创建一个更复杂的分页器，如果需要的话：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: navbar.volt
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: navbar.volt
- en: The `navbar.volt` file contains a link to our home page and all the categories
    available. We will assign categories to the view later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`navbar.volt`文件包含指向我们主页和所有可用类别的链接。我们将在本章的后面将类别分配给视图。'
- en: 'The code is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: layout.volt
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: layout.volt
- en: 'Let''s move on to `layout.volt`. There is already a file located in the `modules/Frontend/Views/Default/`
    folder. We created it in [Chapter 2](ch02.html "Chapter 2. Setting Up the MVC
    Structure and the Environment for Our Project"), *Setting Up the MVC Structure
    and the Environment for Our Project*. Clear its contents and add the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到`layout.volt`。在`modules/Frontend/Views/Default/`文件夹中已经有一个文件。我们在[第2章](ch02.html
    "第2章. 设置项目MVC结构和环境")中创建了它，*设置项目MVC结构和环境*。清空其内容并添加以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that here we are using the `javascriptInclude()` and `stylesheetLink()`
    methods, which are available by default in Volt. If you want, you can use the
    assets manager as we did for the Backoffice module. We also need a simple CSS
    file. You should already have a file named `lp.css` in the `public/assets/default/css/`
    folder. Clear its content and add this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这里我们使用了`javascriptInclude()`和`stylesheetLink()`方法，这些方法在Volt中默认可用。如果您愿意，可以使用我们为Backoffice模块所用的资产管理器。我们还需要一个简单的CSS文件。您应该在`public/assets/default/css/`文件夹中已经有一个名为`lp.css`的文件。清空其内容并添加以下内容：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Modifying BaseController.php
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改BaseController.php
- en: 'Now, we should modify `BaseController.php` from the `Frontend` module to extend
    the core module and to assign categories globally to our views upon each request.
    Open `modules/Frontend/Controllers/BaseController.php`, clear its contents, and
    append this code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该修改`Frontend`模块中的`BaseController.php`，以便扩展核心模块，并在每次请求时将类别全局分配给我们的视图。打开`modules/Frontend/Controllers/BaseController.php`，清空其内容，并附加以下代码：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We don''t actually have a home page (but we can add one anytime we want), so
    we are going to forward the request to `ArticlesController`. Open `modules/Frontend/Controllers/IndexController.php`,
    remove `indexAction()`, and append the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上没有主页（但我们可以在任何时候添加一个），所以我们将请求转发到`ArticlesController`。打开`modules/Frontend/Controllers/IndexController.php`，删除`indexAction()`，并附加以下代码：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last step is to create the `listAction()` method and the view for the articles.
    First, create a new file named `list.item.volt` in the `modules/Frontend/Views/Default/article/common/`
    folder with this content:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建文章的`listAction()`方法和视图。首先，在`modules/Frontend/Views/Default/article/common/`文件夹中创建一个名为`list.item.volt`的新文件，并添加以下内容：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also need to modify the layout from `modules/Frontend/Views/Default/article/list.volt`.
    Open this file, clear its content, and append this code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要修改布局 `modules/Frontend/Views/Default/article/list.volt`。打开此文件，清除其内容，并追加以下代码：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can see that we show `paginator` only if we have more than two records
    (you can change this whenever you want). This is related to the `$limit` parameter
    from the `listAction()` method of `ArticleController`. Open `modules/Frontend/Controllers/ArticleController.php`,
    and append the following code to it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，只有当我们有超过两条记录时，我们才会显示 `paginator`（你可以随时更改此设置）。这与 `ArticleController` 的
    `listAction()` 方法的 `$limit` 参数相关。打开 `modules/Frontend/Controllers/ArticleController.php`，并向其中追加以下代码：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Basically, we are done with this part. You can now open `http://www.learning-phalcon.localhost/`,
    and you should see something similar to this screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这部分工作已经完成。你现在可以打开 `http://www.learning-phalcon.localhost/`，你应该会看到类似于以下截图的内容：
- en: '![Modifying BaseController.php](img/B03522_09_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![修改 BaseController.php](img/B03522_09_02.jpg)'
- en: 'Next, we will make a few changes to the articles controller in order to get
    an article by its slug. Personally, I like to keep things separated as much as
    possible, in case I need to implement complex logic in the future. We will create
    a new method in the API (`ArticlesController`) named `getBySlugAction()`. A slug
    is a friendly URL used for SEO (**Search Engine Optimization**) purposes. Open
    `modules/Api/Controllers/ArticlesController.php` and append the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对文章控制器进行一些修改，以便通过别名获取文章。我个人喜欢尽可能地将事物分开，以防将来需要实现复杂的逻辑。我们将在 API (`ArticlesController`)
    中创建一个名为 `getBySlugAction()` 的新方法。别名是一个用于 SEO（**搜索引擎优化**）目的的友好 URL。打开 `modules/Api/Controllers/ArticlesController.php`
    并追加以下代码：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This method is similar to `getAction()`. We are searching by slug, therefore
    we will need to modify the `find()` method from `ArticleManager.php`. Our new
    `find()` method will look like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 `getAction()` 类似。我们正在通过别名进行搜索，因此我们需要修改 `ArticleManager.php` 中的 `find()`
    方法。我们新的 `find()` 方法将如下所示：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We check whether the `article_translation_slug` parameter is set. If it is
    set, instead of calling the `Article::find()` method, we call `ArticleTranslation::findFirst()`.
    If we get results, we return the object as an array. We apply the same logic when
    we need to retrieve an article from a certain category. This code will not work
    unless we also modify the `restGet()` method from `BaseManager.php`. Our current
    `restGet()` method contains the following line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查 `article_translation_slug` 参数是否已设置。如果已设置，则不是调用 `Article::find()` 方法，而是调用
    `ArticleTranslation::findFirst()`。如果得到结果，我们将对象作为数组返回。当我们需要从某个类别检索文章时，我们应用相同的逻辑。除非我们也修改
    `BaseManager.php` 中的 `restGet()` 方法，否则此代码将无法工作。我们当前的 `restGet()` 方法包含以下行：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace this line with the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将此行替换为以下代码：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This modified code checks whether the result from `$this->find()` is an array.
    If it is, we don''t need to filter anything. Now, we switch to `modules/Frontend/Controllers/ArticleController.php`
    and add a new method. It will get an article by its slug:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此修改后的代码检查 `$this->find()` 的结果是否为数组。如果是，我们不需要过滤任何内容。现在，我们切换到 `modules/Frontend/Controllers/ArticleController.php`
    并添加一个新方法。它将通过其别名获取文章：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are missing the routing information. We need to add routing for both the
    `Api` and `Frontend` modules. In `modules/Api/Config/routing.php` (the article
    group), add this line:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少路由信息。我们需要为 `Api` 和 `Frontend` 模块添加路由。在 `modules/Api/Config/routing.php`（文章组）中添加以下行：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then in `modules/Frontend/Config/routing.php`, replace the last routing line
    with the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `modules/Frontend/Config/routing.php` 文件中，将最后一行路由代码替换为以下代码：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The Article item template
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章项目模板
- en: 'We also need a template for reading an article. Switch to `modules/Frontend/Views/Default/article/common/`,
    create a new file, name it `item.volt`, and add the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个用于阅读文章的模板。切换到 `modules/Frontend/Views/Default/article/common/`，创建一个新文件，命名为
    `item.volt`，并添加以下代码：
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The template for `readAction()` (`modules/Frontend/Views/Default/article/read.volt`)
    should have this code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`readAction()` 的模板（`modules/Frontend/Views/Default/article/read.volt`）应该包含以下代码：'
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is it! You can now access `http://www.learning-phalcon.localhost/`. Click
    on the **Read more** link and you should see a result similar to this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你现在可以访问 `http://www.learning-phalcon.localhost/`。点击 **阅读更多** 链接，你应该会看到类似于以下的结果：
- en: '![The Article item template](img/B03522_09_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![文章项目模板](img/B03522_09_03.jpg)'
- en: Retrieving articles from a category
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从类别检索文章
- en: 'We are missing the implementation of retrieving articles from a category (the
    top bar navigation). We need to do this by following these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少从类别（顶部导航栏）检索文章的实现。我们需要按照以下步骤进行：
- en: 'Add routing information for the `Api` module to `modules/Api/Config/routing.php`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Api`模块的路由信息添加到`modules/Api/Config/routing.php`中：
- en: '[PRE19]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a new method called `getByCategorySlugAction()` in `modules/Api/Controllers/ArticlesController.php`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/Api/Controllers/ArticlesController.php`中创建一个名为`getByCategorySlugAction()`的新方法：
- en: '[PRE20]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add routing information for the Frontend module to `modules/Frontend/Config/routing.php`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前端模块的路由信息添加到`modules/Frontend/Config/routing.php`中：
- en: '[PRE21]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a new method, `categoriesAction()`, in `modules/Frontend/Controllers/ArticleController.php`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/Frontend/Controllers/ArticleController.php`中创建一个名为`categoriesAction()`的新方法：
- en: '[PRE22]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that we are picking the articles and list view in `categoriesAction()`
    because there is no point in duplicating the code; it is the same code as that
    for listing articles.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在`categoriesAction()`中选择了文章和列表视图，因为没有必要重复代码；它与列出文章的代码相同。
- en: Now we have a minimal, functional frontend. We can navigate through the articles,
    get articles from a category, and read an article. We will not go further with
    this because things can get too complex. In this chapter, we will only add a feature
    and improve speed by indexing articles in Elasticsearch.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个最小化、功能性的前端。我们可以浏览文章，从类别中获取文章，并阅读文章。我们不会进一步深入，因为事情可能会变得过于复杂。在本章中，我们只会添加一个功能，并通过在Elasticsearch中索引文章来提高速度。
- en: If you want to practice more, you can implement a simple search form to search
    for articles by title or implement a profile page for authors.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想练习更多，您可以实现一个简单的搜索表单来通过标题搜索文章，或者实现一个作者的个人页面。
- en: Implementing ElasticSearch
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现ElasticSearch
- en: 'What is **Elasticsearch** (**ES**)? The short answer is: it''s a search server.
    According to Wikipedia, this is the complete definition:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Elasticsearch**（**ES**）是什么？简短的回答是：它是一个搜索服务器。根据维基百科，这是完整的定义：'
- en: '*Elasticsearch is a search server based on Lucene. It provides a distributed,
    multitenant-capable full-text search engine with a RESTful web interface and schema-free
    JSON documents. Elasticsearch is developed in Java and is released as open source
    under the terms of the Apache License. Elasticsearch is the second most popular
    enterprise search engine.*'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Elasticsearch是基于Lucene的搜索服务器。它提供了一个具有RESTful Web接口和无需模式JSON文档的分布式、多租户全文搜索引擎。Elasticsearch是用Java开发的，并作为开源软件在Apache许可证下发布。Elasticsearch是企业搜索引擎中第二受欢迎的搜索引擎。*'
- en: If you need full-text search, real-time analytics of structured data, or a combination
    of the two, Elasticsearch is a very powerful tool, fit for you. All the big players
    use it. We will use ES in front of MySQL to store and search for articles. In
    this way we will reduce the traffic to MySQL and avoid querying it too often.
    We are not going to discuss ES in detail, so please spend a few minutes reading
    about its basic operation at [http://www.elastic.co/guide/](http://www.elastic.co/guide/).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要全文搜索、结构化数据的实时分析，或者两者的组合，Elasticsearch是一个非常强大的工具，非常适合您。所有的大公司都在使用它。我们将使用ES在MySQL之前存储和搜索文章。这样我们将减少对MySQL的流量，并避免频繁查询它。我们不会详细讨论ES，所以请花几分钟时间阅读有关其基本操作的[http://www.elastic.co/guide/](http://www.elastic.co/guide/)。
- en: Installing ElasticSearch
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装ElasticSearch
- en: 'There is an APT repository available for download. We will perform the following
    steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可下载的APT仓库。我们将执行以下步骤：
- en: 'Open a terminal and type the following commands:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令：
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After installation, you can configure the repository to start during boot-up
    by executing this command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过执行以下命令来配置仓库以在启动时启动：
- en: '[PRE24]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The command used to start the service is as follows:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启动服务的命令如下：
- en: '[PRE25]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The command used to test whether it is running is the following:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试其是否正在运行的命令如下：
- en: '[PRE26]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should get a JSON response similar to this:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该得到一个类似于以下的JSON响应：
- en: '[PRE27]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will need a client library to work with. Fortunately, there is one available.
    In the terminal, we switch to the root folder of our project and type this command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将需要一个客户端库来与之交互。幸运的是，有一个可用的。在终端中，我们切换到我们项目的根目录，并输入以下命令：
- en: '[PRE28]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will install the PHP client but also a lot of dependencies. It might take
    a while, so don't worry about it. Next, we will set up this client in our project.
    If you have no experience with ES, please spend 10 minutes reading the documents
    for the PHP client at [http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html](http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装PHP客户端以及许多依赖项。这可能需要一些时间，所以请不要担心。接下来，我们将在项目中设置这个客户端。如果你没有ES的经验，请花10分钟阅读PHP客户端的文档，网址为[http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html](http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html)。
- en: Enabling a client in DI
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DI中启用客户端
- en: 'Before using the ES client, we need to enable it in DI. Open `config/services.php`
    and add the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ES客户端之前，我们需要在DI中启用它。打开`config/services.php`并添加以下代码：
- en: '[PRE29]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Indexing (storing) documents
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引（存储）文档
- en: 'If we want to index documents, we will need to add some methods to our manager.
    Also, we will have to make some modifications for data types. First, we will create
    a common method to paginate array results. Open `modules/Core/Managers/ArticleManager.php`
    and append the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要索引文档，我们需要向我们的管理器添加一些方法。同时，我们还需要对数据类型进行一些修改。首先，我们将创建一个通用的方法来分页数组结果。打开`modules/Core/Managers/ArticleManager.php`并追加以下代码：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We create a method that should normalize the data before we send it to the
    ES index:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个方法，在将数据发送到ES索引之前应该规范化数据：
- en: '[PRE31]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `json_encode` and `json_decode` methods are used to force the conversion
    of string values that contain only numbers to numeric/integer values. We also
    replace the empty space between the date and time from MySQL with `T`. This ISO
    format is auto-recognized by ES as a date and it will then set the field type
    accordingly. We also force the `article_updated_at` field to get a valid date
    value. If we don''t do this, we will not be able to search for an article between
    certain intervals of time. Next, we will create a method in the same manager that
    will index the article in ES. Append this code in the manager:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`json_encode`和`json_decode`方法用于强制将只包含数字的字符串值转换为数值/整数值。我们还用`T`替换了MySQL中的日期和时间之间的空格。这种ISO格式被ES自动识别为日期，然后它会相应地设置字段类型。我们还强制`article_updated_at`字段获取有效的日期值。如果我们不这样做，我们将无法在特定时间间隔内搜索文章。接下来，我们将在同一管理器中创建一个方法，该方法将文章索引到ES中。在管理器中追加此代码：'
- en: '[PRE32]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Whenever we index data, ES expects a certain format. This format is represented
    in the `esIndex()` method. To compare the parameters with a MySQL structure, you
    can think about something like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们索引数据时，ES都期望一个特定的格式。这个格式在`esIndex()`方法中表示。要比较参数与MySQL结构，你可以考虑以下内容：
- en: '`index`: The database name'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：数据库名'
- en: '`type`: The table name'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：表名'
- en: '`id`: The ID (primary key)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：ID（主键）'
- en: '`body`: A field named body from a table that contains a JSON-encoded database'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`：一个名为body的表字段，其中包含一个JSON编码的数据库'
- en: 'The `esIndex()` method always returns true, but we must be careful and always
    use `try {},catch() {}` because `esindex()` can throw exceptions. If an article
    already exists in the ES index, it will be updated. Let''s create a simple task
    that will retrieve all the articles from MySQL and index them into ES. Open `modules/Task/ArticlesTask.php`
    and append this code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`esIndex()`方法始终返回true，但我们必须小心，并且始终使用`try {},catch() {}`，因为`esindex()`可能会抛出异常。如果文章已经在ES索引中存在，它将被更新。让我们创建一个简单的任务，从MySQL检索所有文章并将它们索引到ES中。打开`modules/Task/ArticlesTask.php`并追加此代码：'
- en: '[PRE33]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Make sure that you have some articles in the database. If not, navigate to
    Backoffice and add some. Then open a terminal, switch to the root folder of your
    project, and execute the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 确保数据库中有些文章。如果没有，请导航到后台办公室并添加一些。然后打开终端，切换到项目的根目录，并执行以下命令：
- en: '[PRE34]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should see an output similar to this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下输出：
- en: '![Indexing (storing) documents](img/B03522_09_01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![索引（存储）文档](img/B03522_09_01.jpg)'
- en: At this point, we have articles indexed in ES. Each time we update, add, or
    delete an article from MySQL, we have to reflect this action in ES. We are already
    doing this when we add an article. Let's implement it for updates and deletions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在ES中已索引了文章。每次我们从MySQL更新、添加或删除文章时，我们都必须在ES中反映这一动作。当我们添加文章时，我们已经在做这件事了。让我们为更新和删除实现它。
- en: We don't need to create a special method to update articles in ES. It is enough
    to submit the index of the same article. ES will find it by ID and update it automatically.
    All we need to do is implement the functionality as we did for `createAction()`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要为ES中的文章更新创建特殊的方法。只需提交相同文章的索引即可。ES会通过ID找到它并自动更新。我们所需做的只是像为`createAction()`实现的功能一样实现这个功能。
- en: 'Let''s follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤进行：
- en: Open `modules/Backoffice/Controllers/ArticleController.php`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`modules/Backoffice/Controllers/ArticleController.php`。
- en: 'Go to the `updateAction()` method:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`updateAction()`方法：
- en: '[PRE35]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Append the preceding code right after the following line:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下行之后添加前面的代码：
- en: '[PRE36]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We need to modify the `editAction()` method. Remove the current method and
    replace it with this one:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要修改`editAction()`方法。移除当前的方法，并用这个方法替换它：
- en: '[PRE37]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is all we need to do when updating an article. From now on, whenever you
    make changes, those changes will be reflected in ES. When we delete an article
    from MySQL, we will have to delete it from ES too. Let''s create a simple delete
    method in `ArticleManager.php`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 更新文章时，我们只需做这些。从现在起，无论你做出什么更改，这些更改都会在ES中反映出来。当我们从MySQL中删除文章时，我们也必须从ES中删除它。让我们在`ArticleManager.php`中创建一个简单的删除方法：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As you can see, all that we need to do is provide three keys: `index`, `type`,
    and `id`. Then we call the `delete()` method, and if it is found, the article
    is removed. The last step is to call `esdelete()` when we delete an article. Open
    `modules/Backoffice/Controllers/ArticleController.php` again, go to `deleteAction()`,
    and append the `$manager->esdelete($id);` line right after `$manager->delete($id);`.
    Now, when we remove articles from MySQL, they will be removed from ES too.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们只需要提供三个键：`index`、`type`和`id`。然后我们调用`delete()`方法，如果找到了，文章就会被移除。最后一步是在删除文章时调用`esdelete()`。再次打开`modules/Backoffice/Controllers/ArticleController.php`，进入`deleteAction()`，在`$manager->delete($id);`之后添加`$manager->esdelete($id);`这一行。现在，当我们从MySQL中删除文章时，它们也会从ES中删除。
- en: 'We will not go further into ES. You should spend some time and implement a
    search form to retrieve articles from ES. As a tip, here is a simple way to search
    ES articles by category slug:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会进一步深入ES。你应该花些时间实现一个搜索表单来从ES检索文章。作为一个提示，这里有一个简单的通过分类slug搜索ES文章的方法：
- en: '[PRE39]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Implementing MongoDB
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现MongoDB
- en: In this section, we will implement a simple log for articles. Of course, you
    can have your entire website running on Mongo. It is incredibly fast, but personally,
    I don't like to use it for big projects because Mongo can be very greedy with
    space. In order to get an overall idea, in the past, I had to index prices for
    nearly 5,000 properties (apartments, villas, and houses) for 4 years and the size
    requirement was approximately 50 GB. At my current workplace, we have migrated
    SMS logs to Mongo and we have nearly 3 million SMS logs for about 20 GB of space.
    For a relatively small website, MongoDB is perfect, or if you know that space
    won't be an issue, just go for it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个简单的文章日志。当然，你可以让你的整个网站运行在Mongo上。它非常快，但就我个人而言，我不喜欢在大项目中使用它，因为Mongo可能会非常占用空间。为了获得一个整体的概念，过去我不得不为近5000个房产（公寓、别墅和房屋）的价格索引了4年，所需的大小大约是50GB。在我目前的工作场所，我们已经将短信日志迁移到Mongo，我们有近300万条短信日志，大约占用20GB的空间。对于一个相对较小的网站，MongoDB是完美的，或者如果你知道空间不会成为问题，那就去试试吧。
- en: We will not cover Mongo in this section, but there will an example that shows
    how to implement it using Phalcon. If you have no idea about Mongo, spare some
    time and read the basics at [http://docs.mongodb.org/manual/](http://docs.mongodb.org/manual/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中不会介绍Mongo，但会有一个示例展示如何使用Phalcon实现它。如果你对Mongo一无所知，请抽出一些时间阅读其基础知识，请参阅[http://docs.mongodb.org/manual/](http://docs.mongodb.org/manual/)。
- en: That being said, let's start implementing the logs. What are we going to log?
    Article IDs, user IP addresses, user agents, and timestamps. From this, you will
    be able to show the number of times an article was read and also generate simple
    reports.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们开始实现日志记录。我们要记录什么？文章ID、用户IP地址、用户代理和时间戳。从这个基础上，你将能够显示文章被阅读的次数，并生成简单的报告。
- en: Mongo models
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mongo模型
- en: Switch to `modules/Core/Models` and create a new folder named Mongo. In this
    new folder, create two new files with the following code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到`modules/Core/Models`并创建一个名为Mongo的新文件夹。在这个新文件夹中，创建两个新的文件，代码如下。
- en: modules/Core/Models/Mongo/BaseCollection.php
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`modules/Core/Models/Mongo/BaseCollection.php`'
- en: 'The `modules/Core/Models/Mongo/BaseCollection.php` file is a simple base class
    that extends `\Phalcon\Mvc\Collection`. You can use it in the future to add common
    logic as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`modules/Core/Models/Mongo/BaseCollection.php` 文件是一个简单的基类，它扩展了 `\Phalcon\Mvc\Collection`。您可以在未来使用它来添加以下常见逻辑：'
- en: '[PRE40]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: modules/Core/Models/Mongo/ArticleLog.php
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: modules/Core/Models/Mongo/ArticleLog.php
- en: 'This class is the model for our `article_log` collection and has two important
    methods: `log()` and `countVisits()`. We are going to use them to log article
    visits and count them:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是我们 `article_log` 集合的模型，并且有两个重要的方法：`log()` 和 `countVisits()`。我们将使用它们来记录文章访问次数并计数：
- en: '[PRE41]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `log()` method is pretty much straightforward. We assign values to variables
    and save the information in the `article_log` collection. The `countVisits()`
    method expects two parameters: `$article_id` and `$unique`. If we don''t want
    to show the number of unique visits, this parameter must be set to `false` (the
    default value), and we can simply query the collection using the built-in `count()`
    method. If we need to show only the unique visits (unique by IP address), then
    we execute the `command()` action, which is available in MongoClient (Phalcon
    does not have this method implemented).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`log()` 方法相当直接。我们给变量赋值，并将信息保存到 `article_log` 集合中。`countVisits()` 方法期望两个参数：`$article_id`
    和 `$unique`。如果我们不想显示唯一访问次数，则此参数必须设置为 `false`（默认值），然后我们可以简单地使用内置的 `count()` 方法查询集合。如果我们需要只显示唯一访问次数（按
    IP 地址唯一），则执行 MongoClient 中的 `command()` 动作，Phalcon 没有实现此方法。'
- en: 'Let''s switch to `ArticleManager.php` from the Core module and add these two
    methods so that we can call them from DI:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从核心模块的 `ArticleManager.php` 切换，并添加这两个方法，以便我们可以从 DI 中调用它们：
- en: '[PRE42]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, we will modify the `readAction()` method from `ArticleController.php`
    (Frontend module). Remove the current one and append this code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改 `ArticleController.php` 中的 `readAction()` 方法（前端模块）。删除当前的方法，并添加以下代码：
- en: '[PRE43]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Notice the line that contains `$total_views = $manager->countVisits($records[''items''][0][''id'']);`—we
    are not providing the `$unique` parameter. This means that by default, we will
    not show unique visits. If you want to show them, append `true` like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意包含 `$total_views = $manager->countVisits($records['items'][0]['id']);` 的行——我们没有提供
    `$unique` 参数。这意味着默认情况下，我们不会显示唯一访问量。如果您想显示它们，请像这样添加 `true`：
- en: '[PRE44]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The final step consists of making small modifications to our templates. Open
    `modules/Frontend/Views/Default/article/read.volt` and append the `total_views`
    parameter to `include`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是对我们的模板进行一些小的修改。打开 `modules/Frontend/Views/Default/article/read.volt` 并将
    `total_views` 参数添加到 `include`：
- en: '[PRE45]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, open `modules/Frontend/Views/Default/article/common/item.volt`, clear
    its contents, and append this code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 `modules/Frontend/Views/Default/article/common/item.volt`，清空其内容，并添加以下代码：
- en: '[PRE46]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The difference between the old `item.volt` file and new one is the code under
    `{% if dispatcher.getActionName() == 'read') %}`. We show the number of visits
    only in `readAction()`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 旧 `item.volt` 文件和新文件之间的区别在于 `{% if dispatcher.getActionName() == 'read') %}`
    下的代码。我们只在 `readAction()` 中显示访问次数。
- en: That's all about MongoDB and Phalcon. The functionality of Phalcon's ODM is
    similar to the ORM functionality, but it is not so advanced. You might find yourself
    in situations where you will be forced to use MongoClient from PHP. You can read
    more about the ODM at [http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 MongoDB 和 Phalcon 的内容就这么多。Phalcon 的 ODM 功能与 ORM 功能类似，但并不那么高级。您可能会发现自己处于必须使用
    MongoClient 从 PHP 中强制使用的情况。您可以在 [http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html)
    上了解更多关于 ODM 的信息。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned a few new things about ElasticSearch and MongoDB.
    We created a simple Frontend module, and we now have a simple, fully functional
    website.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了关于 ElasticSearch 和 MongoDB 的一些新知识。我们创建了一个简单的前端模块，现在我们有一个简单、功能齐全的网站。
- en: In the next and final chapter, we will discuss things that we didn't cover in
    previous chapters, such as uploading images and the annotation router.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将讨论之前章节中没有涉及的内容，例如上传图片和注释路由器。
