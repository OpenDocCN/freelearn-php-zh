- en: Chapter 9. The Frontend Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developing the frontend can be a difficult job. You have to take into consideration
    a variety of aspects, such as **User Experience** (**UX**), **Search Engine Optimization**
    (**SEO**), browser compatibility, mobile responsiveness, and so on. We are going
    to focus on creating a minimal layout and implementing Elasticsearch. We will
    also use MongoDB to create some logs for articles. Step by step, we are going
    to cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The frontend layout and basic functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Elasticsearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Frontend layout and basic functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use a simple layout for our frontend module. Switch to the `modules/Frontend/Views/Default/common`
    folder and create the `footer.volt`, `paginator.volt`, and `navbar.volt` files
    with the following content.
  prefs: []
  type: TYPE_NORMAL
- en: footer.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `footer.volt` file does not contain too much information, but in future,
    you will want to add more information for sure, such as links, partners, analytics
    scripts, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: paginator.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `paginator.volt` file contains two simple links: **Previous** and **Next**.
    You can modify these and create a more complex paginator if you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: navbar.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `navbar.volt` file contains a link to our home page and all the categories
    available. We will assign categories to the view later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: layout.volt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s move on to `layout.volt`. There is already a file located in the `modules/Frontend/Views/Default/`
    folder. We created it in [Chapter 2](ch02.html "Chapter 2. Setting Up the MVC
    Structure and the Environment for Our Project"), *Setting Up the MVC Structure
    and the Environment for Our Project*. Clear its contents and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that here we are using the `javascriptInclude()` and `stylesheetLink()`
    methods, which are available by default in Volt. If you want, you can use the
    assets manager as we did for the Backoffice module. We also need a simple CSS
    file. You should already have a file named `lp.css` in the `public/assets/default/css/`
    folder. Clear its content and add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Modifying BaseController.php
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we should modify `BaseController.php` from the `Frontend` module to extend
    the core module and to assign categories globally to our views upon each request.
    Open `modules/Frontend/Controllers/BaseController.php`, clear its contents, and
    append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t actually have a home page (but we can add one anytime we want), so
    we are going to forward the request to `ArticlesController`. Open `modules/Frontend/Controllers/IndexController.php`,
    remove `indexAction()`, and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to create the `listAction()` method and the view for the articles.
    First, create a new file named `list.item.volt` in the `modules/Frontend/Views/Default/article/common/`
    folder with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to modify the layout from `modules/Frontend/Views/Default/article/list.volt`.
    Open this file, clear its content, and append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we show `paginator` only if we have more than two records
    (you can change this whenever you want). This is related to the `$limit` parameter
    from the `listAction()` method of `ArticleController`. Open `modules/Frontend/Controllers/ArticleController.php`,
    and append the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, we are done with this part. You can now open `http://www.learning-phalcon.localhost/`,
    and you should see something similar to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying BaseController.php](img/B03522_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will make a few changes to the articles controller in order to get
    an article by its slug. Personally, I like to keep things separated as much as
    possible, in case I need to implement complex logic in the future. We will create
    a new method in the API (`ArticlesController`) named `getBySlugAction()`. A slug
    is a friendly URL used for SEO (**Search Engine Optimization**) purposes. Open
    `modules/Api/Controllers/ArticlesController.php` and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is similar to `getAction()`. We are searching by slug, therefore
    we will need to modify the `find()` method from `ArticleManager.php`. Our new
    `find()` method will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We check whether the `article_translation_slug` parameter is set. If it is
    set, instead of calling the `Article::find()` method, we call `ArticleTranslation::findFirst()`.
    If we get results, we return the object as an array. We apply the same logic when
    we need to retrieve an article from a certain category. This code will not work
    unless we also modify the `restGet()` method from `BaseManager.php`. Our current
    `restGet()` method contains the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace this line with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This modified code checks whether the result from `$this->find()` is an array.
    If it is, we don''t need to filter anything. Now, we switch to `modules/Frontend/Controllers/ArticleController.php`
    and add a new method. It will get an article by its slug:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We are missing the routing information. We need to add routing for both the
    `Api` and `Frontend` modules. In `modules/Api/Config/routing.php` (the article
    group), add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in `modules/Frontend/Config/routing.php`, replace the last routing line
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The Article item template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also need a template for reading an article. Switch to `modules/Frontend/Views/Default/article/common/`,
    create a new file, name it `item.volt`, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The template for `readAction()` (`modules/Frontend/Views/Default/article/read.volt`)
    should have this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is it! You can now access `http://www.learning-phalcon.localhost/`. Click
    on the **Read more** link and you should see a result similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Article item template](img/B03522_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving articles from a category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are missing the implementation of retrieving articles from a category (the
    top bar navigation). We need to do this by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add routing information for the `Api` module to `modules/Api/Config/routing.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method called `getByCategorySlugAction()` in `modules/Api/Controllers/ArticlesController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add routing information for the Frontend module to `modules/Frontend/Config/routing.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method, `categoriesAction()`, in `modules/Frontend/Controllers/ArticleController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are picking the articles and list view in `categoriesAction()`
    because there is no point in duplicating the code; it is the same code as that
    for listing articles.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a minimal, functional frontend. We can navigate through the articles,
    get articles from a category, and read an article. We will not go further with
    this because things can get too complex. In this chapter, we will only add a feature
    and improve speed by indexing articles in Elasticsearch.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to practice more, you can implement a simple search form to search
    for articles by title or implement a profile page for authors.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing ElasticSearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is **Elasticsearch** (**ES**)? The short answer is: it''s a search server.
    According to Wikipedia, this is the complete definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Elasticsearch is a search server based on Lucene. It provides a distributed,
    multitenant-capable full-text search engine with a RESTful web interface and schema-free
    JSON documents. Elasticsearch is developed in Java and is released as open source
    under the terms of the Apache License. Elasticsearch is the second most popular
    enterprise search engine.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you need full-text search, real-time analytics of structured data, or a combination
    of the two, Elasticsearch is a very powerful tool, fit for you. All the big players
    use it. We will use ES in front of MySQL to store and search for articles. In
    this way we will reduce the traffic to MySQL and avoid querying it too often.
    We are not going to discuss ES in detail, so please spend a few minutes reading
    about its basic operation at [http://www.elastic.co/guide/](http://www.elastic.co/guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing ElasticSearch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is an APT repository available for download. We will perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installation, you can configure the repository to start during boot-up
    by executing this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command used to start the service is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command used to test whether it is running is the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get a JSON response similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need a client library to work with. Fortunately, there is one available.
    In the terminal, we switch to the root folder of our project and type this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the PHP client but also a lot of dependencies. It might take
    a while, so don't worry about it. Next, we will set up this client in our project.
    If you have no experience with ES, please spend 10 minutes reading the documents
    for the PHP client at [http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html](http://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a client in DI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before using the ES client, we need to enable it in DI. Open `config/services.php`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Indexing (storing) documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to index documents, we will need to add some methods to our manager.
    Also, we will have to make some modifications for data types. First, we will create
    a common method to paginate array results. Open `modules/Core/Managers/ArticleManager.php`
    and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a method that should normalize the data before we send it to the
    ES index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `json_encode` and `json_decode` methods are used to force the conversion
    of string values that contain only numbers to numeric/integer values. We also
    replace the empty space between the date and time from MySQL with `T`. This ISO
    format is auto-recognized by ES as a date and it will then set the field type
    accordingly. We also force the `article_updated_at` field to get a valid date
    value. If we don''t do this, we will not be able to search for an article between
    certain intervals of time. Next, we will create a method in the same manager that
    will index the article in ES. Append this code in the manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever we index data, ES expects a certain format. This format is represented
    in the `esIndex()` method. To compare the parameters with a MySQL structure, you
    can think about something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index`: The database name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: The table name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`: The ID (primary key)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`: A field named body from a table that contains a JSON-encoded database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `esIndex()` method always returns true, but we must be careful and always
    use `try {},catch() {}` because `esindex()` can throw exceptions. If an article
    already exists in the ES index, it will be updated. Let''s create a simple task
    that will retrieve all the articles from MySQL and index them into ES. Open `modules/Task/ArticlesTask.php`
    and append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that you have some articles in the database. If not, navigate to
    Backoffice and add some. Then open a terminal, switch to the root folder of your
    project, and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexing (storing) documents](img/B03522_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we have articles indexed in ES. Each time we update, add, or
    delete an article from MySQL, we have to reflect this action in ES. We are already
    doing this when we add an article. Let's implement it for updates and deletions.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to create a special method to update articles in ES. It is enough
    to submit the index of the same article. ES will find it by ID and update it automatically.
    All we need to do is implement the functionality as we did for `createAction()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `modules/Backoffice/Controllers/ArticleController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `updateAction()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the preceding code right after the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to modify the `editAction()` method. Remove the current method and
    replace it with this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is all we need to do when updating an article. From now on, whenever you
    make changes, those changes will be reflected in ES. When we delete an article
    from MySQL, we will have to delete it from ES too. Let''s create a simple delete
    method in `ArticleManager.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, all that we need to do is provide three keys: `index`, `type`,
    and `id`. Then we call the `delete()` method, and if it is found, the article
    is removed. The last step is to call `esdelete()` when we delete an article. Open
    `modules/Backoffice/Controllers/ArticleController.php` again, go to `deleteAction()`,
    and append the `$manager->esdelete($id);` line right after `$manager->delete($id);`.
    Now, when we remove articles from MySQL, they will be removed from ES too.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will not go further into ES. You should spend some time and implement a
    search form to retrieve articles from ES. As a tip, here is a simple way to search
    ES articles by category slug:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Implementing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will implement a simple log for articles. Of course, you
    can have your entire website running on Mongo. It is incredibly fast, but personally,
    I don't like to use it for big projects because Mongo can be very greedy with
    space. In order to get an overall idea, in the past, I had to index prices for
    nearly 5,000 properties (apartments, villas, and houses) for 4 years and the size
    requirement was approximately 50 GB. At my current workplace, we have migrated
    SMS logs to Mongo and we have nearly 3 million SMS logs for about 20 GB of space.
    For a relatively small website, MongoDB is perfect, or if you know that space
    won't be an issue, just go for it.
  prefs: []
  type: TYPE_NORMAL
- en: We will not cover Mongo in this section, but there will an example that shows
    how to implement it using Phalcon. If you have no idea about Mongo, spare some
    time and read the basics at [http://docs.mongodb.org/manual/](http://docs.mongodb.org/manual/).
  prefs: []
  type: TYPE_NORMAL
- en: That being said, let's start implementing the logs. What are we going to log?
    Article IDs, user IP addresses, user agents, and timestamps. From this, you will
    be able to show the number of times an article was read and also generate simple
    reports.
  prefs: []
  type: TYPE_NORMAL
- en: Mongo models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch to `modules/Core/Models` and create a new folder named Mongo. In this
    new folder, create two new files with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: modules/Core/Models/Mongo/BaseCollection.php
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `modules/Core/Models/Mongo/BaseCollection.php` file is a simple base class
    that extends `\Phalcon\Mvc\Collection`. You can use it in the future to add common
    logic as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: modules/Core/Models/Mongo/ArticleLog.php
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This class is the model for our `article_log` collection and has two important
    methods: `log()` and `countVisits()`. We are going to use them to log article
    visits and count them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `log()` method is pretty much straightforward. We assign values to variables
    and save the information in the `article_log` collection. The `countVisits()`
    method expects two parameters: `$article_id` and `$unique`. If we don''t want
    to show the number of unique visits, this parameter must be set to `false` (the
    default value), and we can simply query the collection using the built-in `count()`
    method. If we need to show only the unique visits (unique by IP address), then
    we execute the `command()` action, which is available in MongoClient (Phalcon
    does not have this method implemented).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s switch to `ArticleManager.php` from the Core module and add these two
    methods so that we can call them from DI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will modify the `readAction()` method from `ArticleController.php`
    (Frontend module). Remove the current one and append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the line that contains `$total_views = $manager->countVisits($records[''items''][0][''id'']);`—we
    are not providing the `$unique` parameter. This means that by default, we will
    not show unique visits. If you want to show them, append `true` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step consists of making small modifications to our templates. Open
    `modules/Frontend/Views/Default/article/read.volt` and append the `total_views`
    parameter to `include`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `modules/Frontend/Views/Default/article/common/item.volt`, clear
    its contents, and append this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The difference between the old `item.volt` file and new one is the code under
    `{% if dispatcher.getActionName() == 'read') %}`. We show the number of visits
    only in `readAction()`.
  prefs: []
  type: TYPE_NORMAL
- en: That's all about MongoDB and Phalcon. The functionality of Phalcon's ODM is
    similar to the ORM functionality, but it is not so advanced. You might find yourself
    in situations where you will be forced to use MongoClient from PHP. You can read
    more about the ODM at [http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned a few new things about ElasticSearch and MongoDB.
    We created a simple Frontend module, and we now have a simple, fully functional
    website.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will discuss things that we didn't cover in
    previous chapters, such as uploading images and the annotation router.
  prefs: []
  type: TYPE_NORMAL
