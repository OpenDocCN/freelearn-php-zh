- en: Chapter 2. Discovering What's Nearby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing an application, we are often presented with the geolocation
    data for a particular point of interest. Whether it's a business location or a
    job that the end user is applying to, knowing what's around that particular location
    can provide immediate value to the user when making a decision about that location.
    For example, a user may want to know what restaurants are near a particular location
    or what public services or public transportation options are near a particular
    job the user is interested in. With the help of third-party location APIs, we
    can inform the user what is near a given point of interest. For our second application,
    we develop a web application that shows the user what is near a particular point
    of interest using information from the Google Places API. In this chapter, we
    also cover how to integrate third-party libraries into our application and how
    to improve the performance of our application with caching.
  prefs: []
  type: TYPE_NORMAL
- en: Describing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with our tasks application that was outlined in [Chapter 1](ch01.html "Chapter 1. A
    Task-management Application"), *A Task-management Application*, we begin the development
    by getting a high-level overview of what the project will do and how our application
    will behave.
  prefs: []
  type: TYPE_NORMAL
- en: Searching nearby locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core component of this application is its ability to find other locations
    near an existing location. The easiest way to find this information is to take
    advantage of a third-party API. For this application, we'll be using the Google
    Places API, a web API that can provide nearby locations from given latitude and
    longitude coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Showing locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than simply telling our users what locations are near a given point of
    interest, we can enhance user experience by showing them the points of interest
    and nearby locations on a map. Many different mapping sources exist to show a
    map. For this application, we'll take advantage of another Google API, the Google
    Maps API.
  prefs: []
  type: TYPE_NORMAL
- en: Storing locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To show the user the locations that are available for them to search nearby,
    we need to store these locations first. For storing these locations, we'll need
    a database that we can store imported locations into. Like our tasks application
    that we developed in [Chapter 1](ch01.html "Chapter 1. A Task-management Application"),
    *A Task-management Application*, we'll use SQLite as our primary database again.
  prefs: []
  type: TYPE_NORMAL
- en: Importing locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we're going to need a command-line tool to import locations from a
    data feed. To accomplish this, we're going to create a console task that can be
    run from the command line. This task will fetch information from the provided
    JSON feed and import it into our database. By making this a command-line task,
    we can automate and schedule the import via scheduled tasks on Windows or a Unix
    crontab.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the core components of our application identified, we can now get started
    with developing the database. Let's start with creating our `locations` table.
  prefs: []
  type: TYPE_NORMAL
- en: Locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When developing applications that import data from an external source, you
    can often take advantage of the structure of the external feed to determine what
    your own database tables should look like. Provided with the chapter resources
    at `protected/data/` is a file called `parks.json` that serves as our external
    data source. Since the data in this feed is consistent, let''s take a look at
    a single item in the feed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A single element in our data feed is composed of the name of the location,
    its latitude and longitude coordinates, and the city and state of the location.
    To make things simple, we can represent each of these attributes as a `TEXT` attribute
    in our table. Once we have added an `ID` column and `created` and `updated` columns,
    our `locations` table will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Initializing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we did in our tasks project, we begin the development by creating a few
    folders in our application web root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this application, we added two new folders, `commands` and `extensions`.
    The `commands` folder is a special folder in Yii that `yiic` will reference when
    running console commands. The `extensions` folder is a special folder in Yii,
    where Yii extensions or third-party classes can be placed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s go ahead and add our Yii Bootstrap file, `index.php`, to the root
    of our application. We need to be sure to change the Yii path to the location
    on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create our `yiic.php` file within our `protected` folder that will
    run both our migrations and console commands. Once again, we need to be sure to
    adjust the path to the Yii framework in the `require` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating the configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to create the configuration file that our Yii application will
    use. Let''s add the following to `protected/config/main.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In comparison to the configuration file we made in [Chapter 1](ch01.html "Chapter 1. A
    Task-management Application"), *A Task-management Application*, the only parts
    of the file that were changed are the location of the database file for SQLite
    to use and the name of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the sample data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Provided with the chapter resources within the `protected/data` folder is a
    file called `parks.json`; it contains the sample data that we will use for our
    application. Let's go ahead and grab this file from the project resources and
    add it to the `protected/data` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the database, we again use migrations. From the command line, let''s
    navigate to the project root and create the migration using `yiic`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After confirming the creation, we open up the new migration file in `protected/migrations`
    and replace the `contents up()` method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we replace the contents of the `down()` method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From the command line, let''s now apply the new migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Creating the locations model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To interact with our data, we need to create a model that once again references
    our new database table. Using the instructions outlined in [Chapter 1](ch01.html
    "Chapter 1. A Task-management Application"), *A Task-management Application*,
    we enable the `Gii` module and create a new model called Location to interact
    with the `locations` table in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once created, we add a `beforeSave()` method to the generated file (`protected/modules/Location.php`)
    to automatically set the created and updated time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we modify the `rules()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Importing the data feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating the frontend controllers to display our data, we need to create
    a tool to import our data feed. To create this tool, we create a class in our
    commands directory that extends `CConsoleCommand`; this will enable us to import
    data from the command line and automate it if we so choose.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we need to create a new class called `ImportLocationsCommand` inside
    of our `commands` directory at `/protected` that extends `CConsoleCommand`. The
    filename inside the commands directory should be `ImportLocationscommand.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add a method to handle the retrieval of the data we want to import.
    To provide the greatest amount of flexibility, we create two methods: the first
    will fetch the data from our external data source and the second will actually
    import the data into our database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real-world application, the first method that we build might fetch the
    data from a web resource via CURL. Alternatively, the data might be uploaded and
    provided to us via FTP. Since our data is stored locally, however, our method
    will simply fetch the contents of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By moving this functionality into its own method, we can easily change this
    method in future to fetch this data from another location, without having to change
    other parts of our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a new method called `actionImportLocations()` that will perform
    the import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For simplicity, we assume that our `getData()` method will always return valid
    data to this method. Inside the method, we add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: An important consideration when importing data is to make sure that we don't
    accidentally create duplicate data within our application. There are several ways
    to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to handle this edge case is to simply truncate the database
    table and perform a fresh import. While this type of import is incredibly simple,
    with larger datasets, it could cause our application not to function properly
    while the import is running.
  prefs: []
  type: TYPE_NORMAL
- en: A more reliable method would be to import this data into a temporary database
    table and then delete the active table and rename the temporary one to the active
    table's name. In addition to ensuring that we don't have duplicate data, this
    method also ensures that if we have a problem importing the data, we can simply
    abort the import with an error and not worry about having a corrupted database.
    Additionally, this method should also reduce the downtime associated with importing
    the raw data.
  prefs: []
  type: TYPE_NORMAL
- en: The most complex way of importing the data would be to compare your existing
    database with the data from the feed and import only the difference between the
    two. While significantly more complex, this method can reduce the overhead needed
    to retrieve the data, and when put in combination with the previous method, should
    reduce almost all of the downtime associated with an import.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep things simple, we''re going to opt for the first method, which we can
    easily implement, as follows. First, we''re going to truncate the existing data
    in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our database matches our data feed, we''ll simply iterate through the
    results and import them row by row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'From the command line, we can now import our data by running the `importlocations`
    command we just created. Running command-line tasks takes the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, the full command looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If the import went well, we will see the debug output that we added to the
    command without any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about `CConsoleCommand` from the official guide at [http://www.yiiframework.com/doc/guide/1.1/en/topics.console](http://www.yiiframework.com/doc/guide/1.1/en/topics.console)
    or from the Yii class reference at [http://www.yiiframework.com/doc/api/1.1/CConsoleCommand](http://www.yiiframework.com/doc/api/1.1/CConsoleCommand).
  prefs: []
  type: TYPE_NORMAL
- en: Google APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin work at the frontend of our application, we need to create an
    API key to interact with Google Maps and the Google Places API.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Google APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable the Google APIs our project is using, open up a web browser and navigate
    to the Google API Console located at [https://console.developers.google.com/project](https://console.developers.google.com/project).
    Once we have logged in to a Google account, we click on the **Create Project**
    button and fill out the form with a unique project name and project ID, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling Google APIs](img/7734OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the project has been created, we navigate to the newly created project
    and click on the **APIs & auth** link in the sidebar. From the list of APIs, we
    toggle both **Google Maps JavaScript API v3** and **Places API** to **ON**, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling Google APIs](img/7734OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating an API key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With both APIs enabled for the project, we click on the **Credentials** link
    in the sidebar. From this menu, we can create a new API key for our application
    to use. Once on this page, we are presented with two options, either an OAuth
    Client ID or a Public API key. Click on **Create new Key** under **Public API
    access**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating an API key](img/7734OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, from the next menu select **Server key**, which will generate a new client
    API key for us to use in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating an API key](img/7734OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the page reloads, we copy the full API key to our clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Storing the API key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to store our API in our application so that we can use it. Fortunately,
    Yii provides a setting for static parameters in `protected/config/main.php` called
    `params` that we can store our API key in. Let''s add the following as a root
    element to our configuration file and replace `<your_api_key_here>` with the actual
    API key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This data is then available as an array through `Yii::app()->params`, which
    we can query against, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating the presentation layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we''re ready to start displaying content. To get started, we create a
    new controller called `SiteController.php` in the `protected/controllers` directory
    that contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create our main layout in `protected/views/layouts/main.php`.
    For simplicity, we''re once again going to use the jQuery and Twitter Bootstrap
    styles from publicly available CDNs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our application will have only one page, we will register the Google
    Maps JavaScript API directly in our layout, as shown in the preceding code. Note
    that when we registered this JavaScript file, we included our Google API key,
    which we added to the `params` section of our configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create a simple view file for our `site/index` action in `protected/views/sites/index.php`
    to hold our maps container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Interacting with the Google Maps JavaScript API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Google Maps is a JavaScript API, we need to write some JavaScript code
    to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, create a new file in `/js` called `Main.js`. This JavaScript file
    will store all of our JavaScript methods to create and interact with Google Maps.
    The utility functions we create here will make interacting with the map easier
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start writing any JavaScript, we need to load our JavaScript file
    from our layout. To do this, we can register a new script from `CClientScript`
    by adding the following to our call to `CClientScript` in our `main.php` file
    at `protected/views/layouts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our JavaScript file will be loaded, we open up our `Main.js` file
    and create a new JavaScript object called `Main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this object, we need to create three properties: a property to store
    the Google Maps object, a property to store any options Google Maps may require,
    and a property to store any marker we add to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Next, we create a function that will actually load the Google Maps object. This
    function will need to handle two separate loading cases.
  prefs: []
  type: TYPE_NORMAL
- en: The first case this function will need to handle is the loading of Google Maps
    without any map markers. In this situation, we assume the user has arrived at
    the page for the first time and has not selected the point of interest that they
    want to see nearby locations for. The second case this function will need to handle
    is the initialization of the map with a given point of interest centered and focused
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle these two cases, our function will accept a latitude and longitude
    location. If the latitude and longitude positions are given to the method, we
    will center the map on that location. If they are not provided, we will center
    the map on a zoomed-out location of where our data generally lies, which in this
    case is the downtown Chicago area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, within the same function, we''re going to set our map options and load
    the map in the placeholder that we set in our `index.php` file at `protected/views/site`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'So that we can see our map in action, we add the following to our `index.php`
    file at `protected/views/site` and refresh the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the page loads, we should see the Google Maps object displayed, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the Google Maps JavaScript API](img/7734OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After verifying that our map has loaded, let's head back to our `Main.js` file
    and add a few more utility functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add a simple wrapper to create the Google Maps latitude and longitude
    coordinates. This method will help ensure that our Google Maps object loads when
    we want to interact with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, let''s create a function to add map markers. This function will need
    to display two types of markers, the first being the selected point of interest
    and the second being the nearby points of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the function, we create a new `marker` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we push this `marker` object onto the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the `marker` object to the `markers` variable that we defined
    earlier. This allows us to clear the map if we want to make our application more
    dynamic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s create a function that will clear the map. This function will
    iterate through all of the markers in the `markers` variable that we defined earlier
    and remove the map marker we set with `addMarker()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on how to interact with the Google Maps JavaScript API v3 is
    located at [https://developers.google.com/maps/documentation/javascript/tutorial](https://developers.google.com/maps/documentation/javascript/tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Searching nearby locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To search nearby locations, we're going to take advantage of the Google Places
    API. Rather than implementing the API documentation ourselves, as outlined in
    [https://developers.google.com/places/documentation/](https://developers.google.com/places/documentation/),
    we're going to take advantage of an open source wrapper for the API located at
    [https://github.com/joshtronic/php-googleplaces](https://github.com/joshtronic/php-googleplaces).
  prefs: []
  type: TYPE_NORMAL
- en: 'To take advantage of this wrapper, we download the repository to our `extensions`
    folder, which should look as follows, once we have downloaded the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'With the wrapper downloaded, we reopen `SiteController.php` and create a new
    private method called `getPlaces()`, which takes a location from our database
    as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To make Yii aware of this class, we need to first import it using `Yii::import()`.
    This method is preferred over a `require` or `include` statement because it both
    registers the class with Yii''s autoloader and only loads the class once if we
    use it multiple times. Since this class wasn''t autoloaded in our configuration
    file, we need to manually import it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How does Yii know that `ext.GooglePlaces` represents `protected/extensions/GooglePlaces.php`?
    Yii uses path aliases to easily identify where files and folders are located within
    our application root. This enables us to easily reference these files and folders
    without having to specify an absolute path. You can read more about path aliases
    at [http://www.yiiframework.com/doc/guide/1.1/en/basics.namespace](http://www.yiiframework.com/doc/guide/1.1/en/basics.namespace).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we instantiate the class with the API key that we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we specify the radius and location that we want to search around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a densely populated area with many different shops, it's safe to assume that
    we'd find several results within a 200-meter radius. In a less densely populated
    area, it would be wise to adjust our radius to something much larger to find nearby
    results better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we search for nearby locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With a method in place to perform the search, we now need to update our `index`
    action to call our new method. To do this, we assume that the client is going
    to specify which location they want to search around by selecting a location from
    a drop-down list and sending us the unique ID we created for the record when we
    imported it. Within `SiteController.php`, we add the following action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Selecting a location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our controller can search nearby locations, we need to update our
    view, `protected/views/site/index.php`, with a form to allow the user to select
    a location they''re inserted in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code sample, we used `CHtml::listData()` to simultaneously retrieve
    a list of locations from our database and populate the drop-down menu with the
    appropriate ID name pairs to be displayed. Using `CHtml::listData()`, we can ensure
    that our data is fetched and displayed dynamically based on what we have in our
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Showing locations on a map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While our form is functional, we still need to update our view to actually
    display the locations on the map. This is where we use the JavaScript code we
    created earlier. Before the closing `</div>` tag of our sidebar, let''s load `CClientScript`
    to dynamically register the JavaScript with Yii:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, there are two cases we need to handle. In the first case, the user has
    arrived at our site for the first time and simply needs to be shown the map. In
    the second case, we need to show a map that is centered around our point of interest.
    Since our `$places[''results'']` array will be empty in the first case, we can
    express this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Let's reload the page and try it out. If a location is selected, a blue marker
    will indicate the position on the map. Otherwise, no marker will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the nearby locations to the map. To do this, we simply
    iterate through the `$places[''results'']` array and register a unique script
    that will place a marker on the map. For added clarity for the end user, we also
    add the item as a text entry in the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'With everything in place, we can now search our `locations` database and see
    nearby locations displayed on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing locations on a map](img/7734OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Optimizing the performance with caching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As is often the case with third-party APIs, the Google Places API is a paid-for
    resource that comes with a daily courtesy limit (currently at 1,000 requests per
    day), which means that every time a user makes a request to our application, we're
    paying for it.
  prefs: []
  type: TYPE_NORMAL
- en: However, since the likelihood of a new point of interest being created within
    the next few hours, days, or even weeks is pretty small, we can cache this data
    locally rather than making a request to Google each time the page is requested.
    Doing this will not only save us money, but it will also speed up our application
    since this data can be retrieved from a local resource rather than a third-party
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we first need to enable a cache in our configuration file. There
    are several different caches available for use in Yii, including file-based caches,
    memcache-based caching, and a Redis cache. For this application, we''ll keep things
    simple and use file-based caching. To enable the cache, we add the following to
    the components section of our configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'With the cache enabled, we start using it within our application. Let''s open
    up `SiteController.php` and replace the `getPlaces()` method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s walk through what we just did. First, we''re going to generate a unique
    hash that we''ll store our hashes against. To do this, we''re going to store the
    latitude and longitude of any given location as an `md5` hash, which should provide
    sufficient search space for us to store our results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''re going to retrieve the cache result from the cache. In the event
    that data is not returned, this method will return false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If we don''t have any value presently stored in the cache, we''ll perform a
    search against the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'After retrieving the results from the API, we then store it against the `md5`
    hash that we generated earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: By adding this cache, our application should perform much better when multiple
    users are searching against it, and we reduce the risk of hitting our daily API
    limit. If we do need to upgrade our application to one that needs more requests,
    we can be confident that we're only paying for what we absolutely need, rather
    than for each request.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we covered a lot of ground. We went over how to integrate
    console commands into our application with `CConsoleCommand` as well as how to
    import data into our database from an external source. We also went over how to
    integrate with two popular Google APIs: Google Maps and the Google Places API.
    Additionally, we covered caching the responses of these APIs. Finally, we went
    over importing third-party code into our application.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter and in [Chapter 1](ch01.html "Chapter 1. A Task-management Application"),
    *A Task-management Application*, we went over almost all the basic components
    of building a Yii application. In the next chapter, we will create a scheduling
    application that will automatically remind the user of events before they occur'.
    We'll also expand on all of the topics we covered so far to build and work with
    more complex topics. Before continuing, be sure to take a look at all the classes
    we referenced in this chapter, in the official Yii documentation, so that you
    can better understand them.
  prefs: []
  type: TYPE_NORMAL
