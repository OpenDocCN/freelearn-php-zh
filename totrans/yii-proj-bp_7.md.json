["```php\nprotected/\n   [...]\n   modules/\n      /dashboard\n         assets/\n         components/\n         config/\n         controllers/\n         views/\n            layouts/\n            user/\n            category/\n            filemanager/\n            default/\n```", "```php\n    <?php class DashboardModule extends CWebModule {}\n    ```", "```php\n    public function init() {}\n    ```", "```php\n    $this->layoutPath = Yii::getPathOfAlias('dashboard.views.layouts');\n    ```", "```php\n    $this->setImport(array(\n       'dashboard.components.*',\n    ));\n    ```", "```php\n    Yii::app()->setComponents(array(\n       'errorHandler' => array(\n           'errorAction'  => 'dashboard/default/error',\n       )\n    ));\n    ```", "```php\n<?php class DashboardController extends CMSController {}\n```", "```php\n<?php class DefaultController extends DashboardController\n{\n   public function actionIndex()\n   {\n      echo \"Hello World!\";\n   }\n}\n```", "```php\n<?php return array(\n   [...]\n'modules' => array(\n      'dashboard'\n),\n[...]\n);\n```", "```php\n<?php return array(\n[...]\n'modules' => require_once __DIR__ . DIRECTORY_SEPARATOR . 'modules.php',\n[...]\n);\n```", "```php\n<?php\n\n// Set the scan directory\n$directory = __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'modules';\n$cachedConfig = __DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'runtime'.DIRECTORY_SEPARATOR.'modules.config.php';\n```", "```php\n// Attempt to load the cached file if it exists\nif (file_exists($cachedConfig))\n    return require_once($cachedConfig);\n```", "```php\nelse\n{\n    // Otherwise generate one, and return it\n    $response = array();\n\n    // Find all the modules currently installed, and preload them\n    foreach (new IteratorIterator(new DirectoryIterator($directory)) as $filename)\n    {\n        // Don't import dot files\n        if (!$filename->isDot())\n        {\n            $path = $filename->getPathname();\n\n            if (file_exists($path.DIRECTORY_SEPARATOR.'config'.DIRECTORY_SEPARATOR.'main.php'))\n                $response[$filename->getFilename()] = require($path.DIRECTORY_SEPARATOR.'config'.DIRECTORY_SEPARATOR.'main.php');\n            else\n                array_push($response, $filename->getFilename());\n        }\n    }\n\n    $encoded = serialize($response);\n    file_put_contents($cachedConfig, '<?php return unserialize(\\''.$encoded.'\\');');\n\n    // return the response\n    return $response;\n}\n```", "```php\n<?php return unserialize('a:1:{i:0;s:9:\"dashboard\";}');\n```", "```php\n    <?php return array(\n       '/dashboard/<controller:\\w+>/save' => '/dashboard/<controller>/save',\n    );\n    ```", "```php\n    $this->rules = CMap::mergearray($this->addModuleRules(), $this->rules);\n    ```", "```php\n    private function addModuleRules()\n    {\n        // Load the routes from cache\n        $moduleRoutes = array();\n        $directories = glob(Yii::getPathOfAlias('application.modules') . '/*' , GLOB_ONLYDIR);\n\n        foreach ($directories as $dir)\n        {\n            $routePath = $dir .DS. 'config' .DS. 'routes.php';\n            if (file_exists($routePath))\n            {\n                $routes = require_once($routePath);\n                foreach ($routes as $k=>$v)\n                    $moduleRoutes[$k] = $v;\n            }\n        }\n\n        return $moduleRoutes;\n    }\n    ```", "```php\n    public function filters()\n    {\n       return array(\n          'accessControl'\n       );\n    }\n\n    public function accessRules()\n    {\n       return array(\n          array('allow',  // allow authenticated admins to perform any action\n             'users'=>array('@'),\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n             'deniedCallback' => array($this, 'actionError')\n          ),\n       );\n    }\n    ```", "```php\n    public $layout='default';\n    ```", "```php\n    public function actionError()\n    {\n        if (Yii::app()->user->isGuest)\n           return $this->redirect($this->createUrl('/site/login?next=' . Yii::app()->request->requestUri));\n\n        if($error=Yii::app()->errorHandler->error)\n        {\n            if(Yii::app()->request->isAjaxRequest)\n                echo $error['message'];\n            else\n                $this->render('error', array('error' => $error));\n        }\n    }\n    ```", "```php\n    $this->redirect(Yii::app()->request->getParam('next', $this->createAbsoluteUrl('content/index')));\n    ```", "```php\n    public function getAsset()\n    {\n       return Yii::app()->assetManager->publish(YiiBase::getPathOfAlias('application.modules.dashboard.assets'), true, -1, YII_DEBUG);\n    }\n    ```", "```php\n    Yii::app()->clientScript->registerCssFile($this->getAsset().'/dashboard.css');\n    ```", "```php\n    public function accessRules()\n    {\n       return array(\n          array('allow',\n             'actions' => array('index', 'view', 'search'),\n             'users' => array('*')\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          ),\n       );\n    }\n    ```", "```php\n    public function accessRules()\n    {\n       return CMap::mergeArray(parent::accessRules(), array(\n          array('allow',\n             'actions' => array('index', 'save', 'delete'),\n             'users'=>array('@'),\n             'expression' => 'Yii::app()->user->role==2'\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          )\n       ));\n    }\n    ```", "```php\n    private function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       $model = Content::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       return $model;\n    }\n    ```", "```php\n    public function actionDelete($id)\n    {\n       $this->loadModel($id)->delete();\n\n       $this->redirect($this->createUrl('/dashboard'));\n    }\n    ```", "```php\n    public function actionIndex()\n    {\n       $model = new Content('search');\n       $model->unsetAttributes();\n\n       if (isset($_GET['Content']))\n          $model->attributes = $_GET;\n\n       $this->render('index', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionSave($id=NULL)\n    {\n       if ($id == NULL)\n          $model = new Content;\n       else\n          $model = $this->loadModel($id);\n\n       if (isset($_POST['Content']))\n       {\n          $model->attributes = $_POST['Content'];\n          $model->author_id = Yii::app()->user->id;\n\n          if ($model->save())\n          {\n             Yii::app()->user->setFlash('info', 'The articles was saved');\n             $this->redirect($this->createUrl('/dashboard'));\n          }\n       }\n\n       $this->render('save', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    <?php echo CHtml::link('Create New Post', $this->createUrl('/dashboard/default/save'), array('class' => 'btn btn-primary')); ?>\n    <?php $this->widget('zii.widgets.grid.CGridView', array(\n        'dataProvider'=>$model->search(),\n        'htmlOptions' => array(\n            'class' => 'table-responsive'\n        ),\n        'itemsCssClass' => 'table table-striped',\n        'columns' => array(\n           'id',\n           'title',\n           'published' => array(\n              'name' => 'Published',\n              'value' => '$data->published==1?\"Yes\":\"No\"'\n           ),\n           'author.username',\n           array(\n                'class'=>'CButtonColumn',\n                'viewButtonUrl'=>'Yii::app()->createUrl(\"/\".$data[\"slug\"])',\n                'deleteButtonUrl'=>'Yii::app()->createUrl(\"/dashboard/default/delete\", array(\"id\" =>  $data[\"id\"]))',\n                'updateButtonUrl'=>'Yii::app()->createUrl(\"/dashboard/default/save\", array(\"id\" =>  $data[\"id\"]))',\n            ),\n        ),\n        'pager' => array(\n           'htmlOptions' => array(\n              'class' => 'pager'\n           ),\n           'header' => '',\n           'firstPageCssClass'=>'hide',\n           'lastPageCssClass'=>'hide',\n           'maxButtonCount' => 0\n        )\n    ));\n    ```", "```php\n    public function accessRules()\n    {\n       return array(\n          array('allow',\n             'actions' => array('index', 'view', 'search'),\n             'users' => array('*')\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          ),\n       );\n    }\n    ```", "```php\n    public function accessRules()\n    {\n       return CMap::mergeArray(parent::accessRules(), array(\n          array('allow',\n             'actions' => array('index', 'save', 'delete'),\n             'users'=>array('@'),\n             'expression' => 'Yii::app()->user->role==2'\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          )\n       ));\n    }\n    ```", "```php\n    public function actionIndex()\n    {\n       $model = new Category('search');\n       $model->unsetAttributes();\n\n       if (isset($_GET['Category']))\n          $model->attributes = $_GET;\n\n       $this->render('index', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionSave($id=NULL)\n    {\n       if ($id == NULL)\n          $model = new Category;\n       else\n          $model = $this->loadModel($id);\n\n       if (isset($_POST['Category']))\n       {\n          $model->attributes = $_POST['Category'];\n\n          if ($model->save())\n          {\n             Yii::app()->user->setFlash('info', 'The category was saved');\n             $this->redirect($this->createUrl('/dashboard/category'));\n          }\n       }\n\n       $this->render('save', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionDelete($id)\n    {\n       $this->loadModel($id)->delete();\n\n       $this->redirect($this->createUrl('/dashboard/category'));\n    }\n    ```", "```php\n    private function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       $model = Category::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       return $model;\n    }\n    ```", "```php\n    array(\n        'class'=>'CButtonColumn',\n        'viewButtonUrl'=>'Yii::app()->createUrl(\"/\".$data[\"slug\"])',\n       'deleteButtonUrl'=>'Yii::app()->createUrl(\"/dashboard/category/delete\", array(\"id\" =>  $data[\"id\"]))',\n       'updateButtonUrl'=>'Yii::app()->createUrl(\"/dashboard/category/save\", array(\"id\" =>  $data[\"id\"]))',\n    ),\n    ```", "```php\n    <?php class UserController extends DashboardController {}\n    ```", "```php\n    public function accessRules()\n    {\n       return CMap::mergeArray(parent::accessRules(), array(\n          array('allow',\n             'actions' => array('index', 'save', 'delete'),\n             'users'=>array('@'),\n             'expression' => 'Yii::app()->user->role==2'\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          )\n       ));\n    }\n    ```", "```php\n    private function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       $model = User::model()->findByPk($id);\n\n       if ($model == NULL)\n          throw new CHttpException(404, 'No category with that ID exists');\n\n       return $model;\n    }\n    ```", "```php\n    public function actionDelete($id)\n    {\n       $this->loadModel($id)->delete();\n\n       $this->redirect($this->createUrl('/dashboard/user'));\n    }\n    ```", "```php\n    public function actionIndex()\n    {\n       $model = new User('search');\n       $model->unsetAttributes();\n\n       if (isset($_GET['User']))\n          $model->attributes = $_GET;\n\n       $this->render('index', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionSave($id=NULL)\n    {\n       if ($id == NULL)\n          $model = new User;\n       else\n          $model = $this->loadModel($id);\n\n       if (isset($_POST['User']))\n       {\n          $model->attributes = $_POST['User'];\n\n          if ($model->save())\n          {\n             Yii::app()->user->setFlash('info', 'The user was saved');\n             $this->redirect($this->createUrl('/dashboard/user'));\n          }\n       }\n\n       $this->render('save', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n<?php\n\nclass File {\n    public function save($path)\n    {\n        if (!move_uploaded_file($_FILES['file']['tmp_name'], $path))\n            return false;\n\n        return true;\n    }\n\n    public function __get($name)\n    {\n        if (isset($_FILES['file'][$name]))\n            return $_FILES['file'][$name];\n\n        return NULL;\n    }\n}\n```", "```php\n    <?php class FileUploader {}\n    ```", "```php\n    private $allowedExtensions = array(\n        'png',\n        'jpeg',\n        'jpg',\n        'gif',\n        'bmp'\n    );\n\n    private $sizeLimit = 10485760;\n\n    private $file;\n    ```", "```php\n    function __construct(array $allowedExtensions = array(), $sizeLimit = 10485760)\n    {\n        $allowedExtensions = array_map(\"strtolower\", $allowedExtensions);\n\n        If (!empty($allowedExtensions))\n            $this->allowedExtensions = $allowedExtensions;\n        $this->sizeLimit = $sizeLimit;\n\n        $this->checkServerSettings();\n\n        $this->file = false;\n        if (isset($_FILES['file']))\n           $this->file = new File();\n    }\n    ```", "```php\n    private function checkServerSettings()\n    {\n        $postSize = $this->toBytes(ini_get('post_max_size'));\n        $uploadSize = $this->toBytes(ini_get('upload_max_filesize'));\n\n        if ($postSize < $this->sizeLimit || $uploadSize < $this->sizeLimit){\n            $size = max(1, $this->sizeLimit / 1024 / 1024) . 'M';\n            $json = CJSON::encode(array(\n                'error' => 'increase post_max_size and upload_max_filesize'\n            ));\n            die($json);\n        }\n    }\n    ```", "```php\n    private function toBytes($str)\n    {\n        $val = trim($str);\n        $last = strtolower($str[strlen($str)-1]);\n        switch($last)\n        {\n            case 'g': $val *= 1024;\n            case 'm': $val *= 1024;\n            case 'k': $val *= 1024;\n        }\n        return $val;\n    }\n\n    public function handleUpload($uploadDirectory, $replaceOldFile = FALSE)\n    {\n        if (!is_writable($uploadDirectory))\n            return array('error' => \"Server error. Upload directory isn't writable.\");\n\n        if (!$this->file)\n            return array('error' => 'No files were uploaded.');\n\n        $size = $this->file->size;\n\n        if ($size == 0)\n            return array('error' => 'File is empty');\n\n        $pathinfo = pathinfo($this->file->name);\n        $filename = $pathinfo['filename'];\n\n        //$filename = md5(uniqid());\n        $ext = $pathinfo['extension'];\n\n        if(!in_array(strtolower($ext), $this->allowedExtensions))\n        {\n            $these = implode(', ', $this->allowedExtensions);\n            return array('error' =>\"File has an invalid extension\");\n        }\n\n        $filename = 'upload-'.md5($filename);\n\n       if(!$replaceOldFile)\n        {\n            /// don't overwrite previous files that were uploaded\n            while (file_exists($uploadDirectory . $filename . '.' . $ext))\n                $filename .= rand(10, 99);\n        }\n\n        if ($this->file->save($uploadDirectory . $filename . '.' . $ext))\n            return array('success'=>true,'filename'=>$filename.'.'.$ext);\n        else\n            return array('error'=> 'Could not save uploaded file. The upload was cancelled, or server error encountered');\n    }\n    ```", "```php\n    <?php class FileUpload {}\n    ```", "```php\n    private $_id = NULL;\n\n    private $_response = NULL;\n\n    public $_result = array();\n\n    public function __construct($id)\n    {\n       $this->_id = $id;\n        $this->_uploadFile();\n    }\n    ```", "```php\n    private function _uploadFile()\n    {\n        $path = '/';\n        $folder = Yii::app()->getBasePath() .'/../uploads' . $path;\n\n        $sizeLimit = Yii::app()->params['max_fileupload_size'];\n        $allowedExtensions = array('jpg', 'jpeg', 'png', 'gif', 'bmp');\n        $uploader = new FileUploader($allowedExtensions, $sizeLimit);\n\n        $this->_result = $uploader->handleUpload($folder);\n\n        if (isset($this->_result['error']))\n            throw new CHttpException(500, $this->_result['error']);\n        return $this->_handleResourceUpload('/uploads/' . $this->_result['filename']);\n    }\n    ```", "```php\n    private function _handleResourceUpload($value)\n    {\n      if ($this->_result['success'] == true)\n        {\n            $meta = ContentMetadata::model()->findbyAttributes(array('content_id' => $this->_id, 'key' => $this->_result['filename']));\n\n            if ($meta == NULL)\n                $meta = new ContentMetadata;\n\n            $meta->content_id = $this->_id;\n            $meta->key = $this->_result['filename'];\n            $meta->value = $value;\n            if ($meta->save())\n            {\n                $this->_result['filepath'] = $value;\n                return $this->_result;\n            }\n            else\n                throw new CHttpException(400,  'Unable to save uploaded image.');\n        }\n        else\n        {\n            return htmlspecialchars(CJSON::encode($this->_result), ENT_NOQUOTES);\n            throw new CHttpException(400, $this->_result['error']);\n        }\n    }\n    ```", "```php\n    <?php class FileController extends DashboardController {}\n    ```", "```php\n    public function accessRules()\n    {\n       return CMap::mergeArray(parent::accessRules(), array(\n          array('allow',\n             'actions' => array('index', 'upload', 'delete'),\n             'users'=>array('@'),\n             'expression' => 'Yii::app()->user->role==2'\n          ),\n          array('deny',  // deny all users\n             'users'=>array('*'),\n          )\n       ));\n    }\n    ```", "```php\n    public function actionIndex()\n    {\n       $model = new ContentMetadata('search');\n       $model->unsetAttributes();\n       $model->key = 'upload';\n\n       if (isset($_GET['ContentMetadata']))\n          $model->attributes = $_GET;\n\n       $this->render('index', array(\n          'model' => $model\n       ));\n    }\n    ```", "```php\n    public function actionUpload($id = NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Missing ID');\n\n       if (isset($_FILES['file']))\n       {\n          $file = new FileUpload($id);\n\n          if ($file->_result['success'])\n             Yii::app()->user->setFlash('info', 'The file uploaded to ' . $file->_result['filepath']);\n          elseif ($file->_result['error'])\n             Yii::app()->user->setFlash('error', 'Error: ' . $file->_result['error']);\n\n       }\n       else\n          Yii::app()->user->setFlash('error', 'No file detected');\n\n       $this->redirect($this->createUrl('/dashboard/default/save?id='.$id));\n    }\n    ```", "```php\n    public function actionDelete($id)\n    {\n       if ($this->loadModel($id)->delete())\n       {\n          Yii::app()->user->setFlash('info', 'File has been deleted');\n          $this->redirect($this->createUrl('/dashboard/file/index'));\n       }\n\n       throw new CHttpException(500, 'The server failed to delete the requested file from the database. Please retry');\n    }\n\n    private function loadModel($id=NULL)\n    {\n       if ($id == NULL)\n          throw new CHttpException(400, 'Missing ID');\n\n       $model = ContentMetadata::model()->findByAttributes(array('id' => $id));\n       if ($model == NULL)\n          throw new CHttpException(400, 'Object not found');\n\n       return $model;\n    }\n    ```", "```php\n    <?php $this->widget('zii.widgets.CListView', array(\n        'dataProvider'=>$model->search(),\n        'itemView'=>'_file',\n    ));\n    ```", "```php\n    <div class=\"file\">\n       <a href=\"<?php echo $data->value; ?>\"><img src=\"img/<?php echo $data->value; ?>\" style=\"width: 150px; height: 150px;\"/></a>\n       <?php echo CHtml::link('Article ID: '. $data->content_id, $this->createUrl('/dashboard/default/save', array('id' => $data->content_id))); ?>\n       <?php echo CHtml::link('Delete', $this->createUrl('/dashboard/file/delete', array('id' => $data->id)), array('class' => 'btn btn-danger')); ?>\n    </div>\n    ```", "```php\n    <?php if (!$model->isNewRecord): ?>\n        <hr />\n        <?php $form=$this->beginWidget('CActiveForm', array(\n            'id'=>'file-upload-form',\n            'action' => $this->createUrl('/dashboard/file/upload', array('id' => $model->id)),\n            'htmlOptions' => array(\n                'class' => 'form-horizontal',\n                'role' => 'form',\n                'enctype'=>'multipart/form-data'\n\n            )\n        )); ?>\n            <div class=\"form-group\">\n                <div class=\"col-sm-10\">\n                    <input type=\"file\" name=\"file\" />\n                </div>\n            </div>\n\n            <div class=\"row buttons\">\n                <?php echo CHtml::submitButton('Upload file', array('class' => 'btn btn-primary pull-right col-md-offset-1')); ?>\n            </div>\n\n        <?php $this->endWidget(); ?>\n    <?php endif; ?>\n    ```"]