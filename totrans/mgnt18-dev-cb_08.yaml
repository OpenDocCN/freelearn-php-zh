- en: Chapter 8. Event Handlers and Cronjobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。事件处理程序和计划任务
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding Magento event types
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Magento 事件类型
- en: Creating your own event
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的事件
- en: Adding an event listener
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加事件监听器
- en: Introducing cronjobs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划任务的介绍
- en: Creating a new cronjob
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的计划任务
- en: Testing your new cronjob
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试您的新计划任务
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the e-commerce flow of Magento, there are a lot of events that happen when
    a visitor buys something from your shop. He or she adds a product to the shopping
    cart, selects a payment method, logs in, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Magento 的电子商务流程中，当访客从您的商店购买东西时，会发生许多事件。他或她将产品添加到购物车，选择支付方式，登录等。
- en: Magento dispatches these events and you have the possibility to hook in to an
    event to do your stuff. It's like hooking in to a click event in JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 通过 `Mage::dispatchEvent()` 函数分发这些事件，您有机会挂钩到事件以执行您的工作。这就像在 JavaScript
    中挂钩到点击事件一样。
- en: The Observer design pattern is used to implement the event handling system.
    An event happens in the installation, and the configuration will call the right
    function from an observer class to execute.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者设计模式用于实现事件处理系统。在安装过程中发生事件，配置将调用观察者类中的正确函数来执行。
- en: The cronjob system in Magento is built on the same design pattern. Cronjobs
    are configured in the configuration. When the cron runs, Magento will check the
    timeframes and execute the jobs that match the configuration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 的计划任务系统建立在相同的设计模式之上。计划任务在配置中进行设置。当计划任务运行时，Magento 将检查时间段并执行与配置匹配的任务。
- en: Understanding Magento event types
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Magento 事件类型
- en: Working with event listeners is better than rewriting a core class. When analyzing
    a process, it is good to think about how you can do it and if it is possible to
    work with the Magento events.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与事件监听器一起工作比重写核心类更好。在分析一个过程时，考虑如何操作以及是否可以与 Magento 事件一起工作是很重要的。
- en: Before we can do that, we have to see which events are available, when they
    are dispatched, and which parameters are sent with the event.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够这样做之前，我们必须查看哪些事件可用，它们何时被触发，以及事件中发送了哪些参数。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will explore how the Magento event system works. We will
    use the Magento log system to debug a core class to see which events are available
    and when they are dispatched.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨 Magento 事件系统的工作原理。我们将使用 Magento 日志系统来调试核心类，以查看哪些事件可用以及它们何时被触发。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow the ensuing instructions to see the event system in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明操作以查看事件系统的工作情况：
- en: When debugging something, it is recommended that you enable Magento logging.
    You can do this by configuring it in the backend. Navigate to **System** | **Configuration**
    | **Advanced** | **Developer**. Configure the **Enabled** parameter as shown in
    the following screenshot:![How to do it...](img/3329OS_08_01.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调试某些内容时，建议您启用 Magento 日志。您可以通过在后台配置它来实现。导航到 **系统** | **配置** | **高级** | **开发者**。将
    **启用** 参数配置如下所示：![如何操作...](img/3329OS_08_01.jpg)
- en: Tip
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also run the wiz command `wiz devel-logging yes` in your command-line
    tool to enable logging.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以在命令行工具中运行 wiz 命令 `wiz devel-logging yes` 以启用日志。
- en: Magento events are dispatched with the `Mage::dispatchEvent()` function. To
    debug this function, we have to edit it. The `Mage::dispatchEvent()` function
    will call the `dispatchEvent()` function in the `app/code/core/Mage/Core/Model/App.php`
    file. To edit this file, we have to copy the file into the `app/code/local/Mage/Core/Model`
    folder. If this folder doesn't exist, create it and copy the file.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Magento 事件通过 `Mage::dispatchEvent()` 函数分发。要调试此函数，我们必须编辑它。`Mage::dispatchEvent()`
    函数将调用 `app/code/core/Mage/Core/Model/App.php` 文件中的 `dispatchEvent()` 函数。要编辑此文件，我们必须将其复制到
    `app/code/local/Mage/Core/Model` 文件夹中。如果该文件夹不存在，则创建它并将文件复制进去。
- en: 'In that file, search for the `dispatchEvent()` function. In the first line
    of that function, add `Mage::log($eventName);` to print the event name in the
    logfile. The beginning of that function will look like the following code snippet:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件中，搜索 `dispatchEvent()` 函数。在该函数的第一行中，添加 `Mage::log($eventName);` 以在日志文件中打印事件名称。该函数的开始部分将类似于以下代码片段：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Clear the cache and reload the page in the frontend.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载前端页面。
- en: 'Have a look at the `var/log/system.log` file. By using the `tail -f` command,
    you can see the changes of the file live. In the command line, go to the directory
    of your Magento installation and run the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看一下 `var/log/system.log` 文件。通过使用 `tail -f` 命令，你可以实时看到文件的变化。在命令行中，转到你的 Magento
    安装目录并运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will give you the following output:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![How to do it...](img/3329OS_08_02.jpg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/3329OS_08_02.jpg)'
- en: When reloading a new page, you will see that a lot of events are printed in
    the logfile of Magento.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当重新加载新页面时，你会在 Magento 的日志文件中看到打印了许多事件。
- en: Enough debugging for now. It is time to remove the file `app/code/local/Mage/Core/Model/App.php`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在已经足够进行调试了。是时候移除文件 `app/code/local/Mage/Core/Model/App.php`。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing we did was enable the Magento log. This is recommended for development
    environments because all the debug messages are printed in the file `var/log/system.log`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先做的事情是启用 Magento 日志。这建议在开发环境中使用，因为所有的调试消息都打印在 `var/log/system.log` 文件中。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: PHP warnings and notices are also printed in this file, so it is recommended
    to have a look at it when developing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 警告和通知也会打印在这个文件中，因此在开发时查看它是有推荐的。
- en: To print a debug message, we used the `Mage::log()` function. The first parameter
    of this function is the message you want to debug. If the parameter is an object
    or array, Magento will print a dump of the variable in the logfile.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印调试消息，我们使用了 `Mage::log()` 函数。此函数的第一个参数是你想要调试的消息。如果参数是对象或数组，Magento 将在日志文件中打印变量的转储。
- en: 'The second parameter is the log level. When this is not specified, the error
    level `DEBUG` is used. This parameter requires a numeric value. These values are
    set in the `const` variables of the `Zend_Log` class, which are the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是日志级别。当未指定时，使用错误级别 `DEBUG`。此参数需要一个数值。这些值在 `Zend_Log` 类的 `const` 变量中设置，如下所示：
- en: '`Zend_Log::EMERG`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::EMERG`'
- en: '`Zend_Log::ALERT`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::ALERT`'
- en: '`Zend_Log::CRIT`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::CRIT`'
- en: '`Zend_Log::ERR`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::ERR`'
- en: '`Zend_Log::WARN`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::WARN`'
- en: '`Zend_Log::NOTICE`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::NOTICE`'
- en: '`Zend_Log::INFO`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::INFO`'
- en: '`Zend_Log::DEBUG`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Log::DEBUG`'
- en: With the third parameter, you can configure a file in the `var/log` folder where
    the log message needs to be printed. When this parameter is empty, the default
    file `system.log` is used.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第三个参数，你可以配置一个文件，该文件位于 `var/log` 文件夹中，需要打印日志消息。当此参数为空时，默认文件 `system.log` 被使用。
- en: The fourth and last parameter is a Boolean value where you can force to always
    print a log message (even if the Magento logging is set to off).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个也是最后一个参数是一个布尔值，你可以强制始终打印日志消息（即使 Magento 的日志记录设置为关闭）。
- en: When using the `Mage::log()` function, you will print the debug data without
    changing the output of the PHP process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `Mage::log()` 函数时，你将打印调试数据，而不会改变 PHP 进程的输出。
- en: For every request in Magento, many events are dispatched. So, there are many
    ways to integrate and execute custom code in the Magento process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一个在 Magento 中的请求，都会触发许多事件。因此，在 Magento 流程中集成和执行自定义代码有许多方法。
- en: Working with events is better than rewriting a core class of Magento. When you
    rewrite a core class, it is possible that your code will become incompatible while
    upgrading Magento or installing third-party modules.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 与事件一起工作比重写 Magento 的核心类要好。当你重写核心类时，在升级 Magento 或安装第三方模块时，你的代码可能会变得不兼容。
- en: When you work with events, you will create an extension on Magento instead of
    creating a modification when you rewrite a core class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与事件一起工作时，你将在 Magento 上创建一个扩展，而不是在重写核心类时创建修改。
- en: So, it is good to think about the way you want to execute custom code in Magento.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑你希望在 Magento 中执行自定义代码的方式是好的。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'A full list of the Magento events can be found at: [http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events](http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 事件的完整列表可以在以下位置找到：[http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events](http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events)。
- en: Make sure that this list is not complete when you are working with custom modules
    because they can have their own events.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理自定义模块时，请确保这个列表不是完整的，因为它们可能有它们自己的事件。
- en: Creating your own event
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的事件
- en: When we want to create our own event, we have to dispatch it with a custom name.
    In this recipe, we will learn how events are dispatched and what we can do with
    parameters that we will forward.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要创建自己的事件时，我们必须使用自定义名称来触发它。在这个菜谱中，我们将学习事件是如何被触发的，以及我们可以使用我们将要传递的参数做什么。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create our own event that is fired when a visitor opens the `helloAction()`
    function of the `Packt_Helloworld` module. In this recipe, we will build further
    on the `Packt_Helloworld` module that is created in [Chapter 4](ch04.html "Chapter 4. Creating
    a Module"), *Creating a Module*, [Chapter 6](ch06.html "Chapter 6. Databases and
    Modules"), *Databases and Modules*, and [Chapter 7](ch07.html "Chapter 7. Magento
    Backend"), *Magento Backend*. If you want, you can install the start files.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个事件，当访问者打开`Packt_Helloworld`模块的`helloAction()`函数时，该事件将被触发。在这个菜谱中，我们将基于在[第4章](ch04.html
    "第4章。创建模块")、*创建模块*、[第6章](ch06.html "第6章。数据库和模块")、*数据库和模块*和[第7章](ch07.html "第7章。Magento后端")、*Magento后端*中创建的`Packt_Helloworld`模块进行扩展。如果您愿意，您可以安装起始文件。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps describe how we can dispatch our own event.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了我们可以如何触发我们自己的事件。
- en: Open the `IndexController` of the `Packt_Helloworld` module. In this controller,
    there is a `helloAction()` function where we will work to dispatch the event.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Packt_Helloworld`模块的`IndexController`。在这个控制器中，有一个`helloAction()`函数，我们将在这里工作以触发事件。
- en: 'To dispatch an event, the `Mage::dispatchEvent()` function is used. When we
    change the code of the `helloAction()` function to the following code, we will
    dispatch an event called `helloworld_register_visit`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要触发一个事件，使用`Mage::dispatchEvent()`函数。当我们更改`helloAction()`函数的代码为以下代码时，我们将触发一个名为`helloworld_register_visit`的事件：
- en: '[PRE2]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Every time the page is reloaded, the event is dispatched. Because there is no
    listener added, nothing will happen. To test that the code works, you have to
    debug the `Mage_Core_Model_App::dispatchEvent()` function like we did in the previous
    recipe. You can find this function in the file `app/code/core/Mage/Core/Model/App.php`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次页面重新加载时，都会触发事件。因为没有添加监听器，所以不会发生任何事情。为了测试代码是否正常工作，您需要像在之前的菜谱中那样调试`Mage_Core_Model_App::dispatchEvent()`函数。您可以在文件`app/code/core/Mage/Core/Model/App.php`中找到这个函数。
- en: 'The second thing we will do is add two parameters to the event. For example,
    we will send a product and a category to the event. We will use the second parameter
    to send the parameters. This parameter accepts a key value array with the objects.
    The following code shows how to send parameters to the event:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要做的第二件事是为事件添加两个参数。例如，我们将向事件发送一个产品和分类。我们将使用第二个参数来发送参数。这个参数接受一个包含对象的键值数组。以下代码显示了如何向事件发送参数：
- en: '[PRE3]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make sure the product and category ID exists in your webshop. If not, you can
    use another ID that exists in your webshop.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 确保产品分类ID存在于您的网店中。如果不存在，您可以使用您的网店中存在的另一个ID。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Mage::dispatchEvent()` function fires an event in Magento. When this function
    is called, Magento will look into the configuration and execute the matching event
    observer functions, also known as observers in the Magento world.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mage::dispatchEvent()`函数在Magento中触发一个事件。当这个函数被调用时，Magento将查找配置并执行匹配的事件观察者函数，在Magento世界中也称为观察者。'
- en: You can use the `Mage::dispatchEvent()` function in every context you want,
    so it's to you to decide where you want to place it if needed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在任何您想要的上下文中使用`Mage::dispatchEvent()`函数，因此如果您需要，您需要决定将其放置在哪里。
- en: Adding an event observer
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加事件观察者
- en: An event listener (observer) is used when you want to hook in to an event. In
    the previous recipe, we fired an event. In this recipe, we will catch events and
    look at how we can execute custom code when the event occurs in the website.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要挂钩到事件时，会使用事件监听器（观察者）。在之前的菜谱中，我们触发了一个事件。在这个菜谱中，我们将捕获事件并查看当事件在网站上发生时，我们如何执行自定义代码。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will add two event observers. The first one will catch the
    event that we created in the previous recipe. The second event listener (observer)
    will hook into the "add to cart" action of a product.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将添加两个事件观察者。第一个观察者将捕获我们在之前的菜谱中创建的事件。第二个事件监听器（观察者）将挂钩到产品的“添加到购物车”操作。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe what you can do with event observers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了您可以使用事件观察者做什么：
- en: 'To listen to the `helloworld_register_edit` event, we have to add configuration
    to the `config.xml` file of the `Packt_Helloworld` module. Add the following code
    in this file under the `<global>` tag:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要监听`helloworld_register_edit`事件，我们必须向`Packt_Helloworld`模块的`config.xml`文件添加配置。在`<global>`标签下添加以下代码：
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We just configured an observer that fires the `registerVisit()` function of
    the `helloworld/observer` class. We have to create the `Packt_Helloworld_Model_Observer`
    class. Create the file `app/code/local/Packt/Helloworld/Model/Observer.php` with
    the following content:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚配置了一个观察者，该观察者触发`helloworld/observer`类中的`registerVisit()`函数。我们必须创建`Packt_Helloworld_Model_Observer`类。创建文件`app/code/local/Packt/Helloworld/Model/Observer.php`，内容如下：
- en: '[PRE5]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can test the event observer by firing the event. The event is fired on the
    page `http://magento-dev.local/helloworld/index/hello`. Navigate to this file
    and check the debug messages in the Magento logfile (`var/log/system.log`).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过触发事件来测试事件观察者。事件在页面`http://magento-dev.local/helloworld/index/hello`上触发。导航到该文件并检查Magento日志文件（`var/log/system.log`）中的调试消息。
- en: 'The observer function prints a debug message in the Magento logfile. Let''s
    look at the parameters that we send with the event. These parameters are sent
    in the `$observer` object in the function. To get the product and the category,
    change the `registerVisit()` action to the following code to debug the product
    and category:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察者函数在Magento日志文件中打印调试消息。让我们看看我们与事件一起发送的参数。这些参数在函数中以`$observer`对象的形式发送。要获取产品和类别，将`registerVisit()`操作更改为以下代码以调试产品和类别：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the next part, we will hook in to the "add to cart" event. When a user adds
    a product to the cart, we have to check that the quantity is odd. If not, we have
    to show an error message that the product can't be added to the cart.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一部分，我们将挂钩到“添加到购物车”事件。当用户将产品添加到购物车时，我们必须检查数量是否为奇数。如果不是，我们必须显示一个错误消息，说明产品不能添加到购物车。
- en: 'To do that, we have to create an event listener (observer) for the event `checkout_cart_product_add_after`.
    We do this by adding the following code in the `config.xml` file of the `Packt_Helloworld`
    module. Paste the following code under the `<events>` tag:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，我们必须为事件`checkout_cart_product_add_after`创建一个事件监听器（观察者）。我们通过在`Packt_Helloworld`模块的`config.xml`文件中添加以下代码来实现。在`<events>`标签下粘贴以下代码：
- en: '[PRE7]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will call the `checkCartQty()` function in the observer class. The following
    code will display a notice message when the event is fired:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将调用观察者类中的`checkCartQty()`函数。当事件被触发时，以下代码将显示一个通知消息：
- en: '[PRE8]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Clear your cache and add a product to the cart. The message will appear in the
    cart page when a product is added, as shown in the following screenshot:![How
    to do it...](img/3329OS_08_03.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并添加一个产品到购物车。当添加产品时，消息将出现在购物车页面，如下截图所示：![如何操作...](img/3329OS_08_03.jpg)
- en: 'Now, we have to add the following code to check if the quantity is odd or even.
    This code gets the quantity from the observer and adds a check for even or odd:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须添加以下代码来检查数量是奇数还是偶数。此代码从观察者获取数量，并添加对奇数或偶数的检查：
- en: '[PRE9]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the quantity is even, we have to show a notice. When the quantity is odd,
    we have to cancel the "add to cart" operation and display a message. We can do
    this by throwing an exception. In an event observer, we can never use return values.
    To work correctly, the check function will look like the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当数量为偶数时，我们必须显示一个通知。当数量为奇数时，我们必须取消“添加到购物车”操作并显示一条消息。我们可以通过抛出异常来实现。在事件观察者中，我们永远不能使用返回值。为了正确工作，检查函数将类似于以下代码：
- en: '[PRE10]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Clear the cache and add a product to the cart with an even and odd quantity.
    You will see that the odd quantity will result in an error message.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并添加一个数量为偶数和奇数的产品到购物车。您将看到奇数数量将导致错误消息。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Event listeners (observers) are always configured in the `config.xml` file.
    When we look at the configuration, every tag has its own purpose:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器（观察者）总是在`config.xml`文件中进行配置。当我们查看配置时，每个标签都有自己的用途：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `<events>` tag is the root to define events in it. The `<events>` tag can
    be configured under the `<global>`, `<frontend>`, or `<admin>` tags depending
    on the scope of the event that needs to be executed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`<events>`标签是定义事件根标签。根据需要执行的事件范围，`<events>`标签可以在`<global>`、`<frontend>`或`<admin>`标签下进行配置。'
- en: Under the `<events>` tag, we find the `<helloworld_register_visit>` tag. The
    name of the tag is the name of the event that will be observed. The observers
    are defined in the child tags.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<events>`标签下，我们找到了`<helloworld_register_visit>`标签。标签的名称是将被观察的事件的名称。观察者在子标签中定义。
- en: Under the `<helloworld_register_visit>` tag, you see an `<observers>` subtag.
    In this tag, all the observers are declared.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<helloworld_register_visit>`标签下，你可以看到一个`<observers>`子标签。在这个标签中，所有观察者都被声明。
- en: In this recipe, we have a `register_visit` observer. The observers that are
    declared under the `<observers>` tag needs to have a unique name. When using an
    existing name, you will overwrite the configuration of an `existing` observer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们有一个`register_visit`观察者。在`<observers>`标签下声明的观察者需要有一个唯一名称。当使用现有名称时，你将覆盖现有观察者的配置。
- en: 'The observer tag (`register_visit`) has the following subtags:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者标签（`register_visit`）有以下子标签：
- en: '`<type>`: This is the design pattern to call the class, mostly as `singleton`
    or `model`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<type>`：这是调用类的设计模式，通常是`singleton`或`model`'
- en: '`<class>`: This is the Magento path to the class'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<class>`：这是类的Magento路径'
- en: '`<method>`: This is the method to be executed'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<method>`：这是要执行的方法'
- en: The previous event will execute the configured class and function when the event
    is fired with the `dispatchEvent()` function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个事件将在使用`dispatchEvent()`函数触发事件时执行配置的类和函数。
- en: To every observer function, an `$observer` object is passed. This variable is
    an instance of the `Varien_Event_Observer` class. This class extends the `Varien_Object`
    class and it contains some extra event-related functions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个观察者函数，都会传递一个`$observer`对象。这个变量是`Varien_Event_Observer`类的实例。这个类扩展了`Varien_Object`类，并包含一些额外的与事件相关的函数。
- en: The return parameters of the event observer functions will be ignored. When
    working with an event observer, you have to look at the context where the `Mage::dispatchEvent()`
    function is placed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 事件观察者函数的返回参数将被忽略。当使用事件观察者时，你必须查看`Mage::dispatchEvent()`函数放置的上下文。
- en: Sometimes, it is placed in a `try-catch` structure like the `checkout_cart_product_add_after`
    event in this recipe. In other cases, you can change the values of the passed
    objects like the `model_save_before` event does.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，它被放置在一个`try-catch`结构中，如本配方中的`checkout_cart_product_add_after`事件。在其他情况下，你可以像`model_save_before`事件那样更改传递的对象的值。
- en: Introducing cronjobs
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍cron作业
- en: 'Cronjobs or scheduled tasks are background processes that keep your Magento
    webshop running. Some examples of cronjobs are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Cron作业或计划任务是后台进程，使你的Magento网店保持运行。以下是一些cron作业的示例：
- en: Sending newsletters
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送新闻通讯
- en: Recalculating catalog promotion rules for the next day
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新计算下一天的目录促销规则
- en: Cleaning visitor logs
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理访客日志
- en: Sending product stock and price alert mails
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送产品库存和价格警报邮件
- en: Updating currency rates
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新货币汇率
- en: If cronjobs are not configured on the server, you will see issues with your
    webshop after a period of time.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器上未配置cron作业，经过一段时间后，你将看到你的网店出现问题。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will learn how to configure cronjobs on the server and verify
    that they are working. Make an SSH connection to your server and prepare yourselves
    to perform some server configurations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在服务器上配置cron作业并验证它们是否正在运行。通过SSH连接到你的服务器，并准备好执行一些服务器配置。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps describe how you have to configure the cronjobs on your
    server:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何在你的服务器上配置cron作业：
- en: 'Practically, we have to configure cronjobs every five minutes. For that to
    happen, the following command is executed:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际上，我们必须每五分钟配置一次cron作业。为此，执行以下命令：
- en: '[PRE12]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To avoid permission problems, you have to run this command as the user that
    apache uses to serve the HTTP requests. In our setup, this user is `www-data`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了避免权限问题，你必须以Apache用于服务HTTP请求的用户身份运行此命令。在我们的设置中，此用户是`www-data`。
- en: 'When you execute the previous command, the cronjob table in the database is
    updated with the recent cronjobs. In the `cron_schedule` table, you can see the
    queue for the next 30 minutes. Run the following command in your database client
    to see the content of the table:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你执行前面的命令时，数据库中的cron作业表将更新为最近的cron作业。在`cron_schedule`表中，你可以看到接下来30分钟的队列。在你的数据库客户端中运行以下命令以查看表的内容：
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This query gives you the following output:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此查询将给出以下输出：
- en: '![How to do it...](img/3329OS_08_04.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/3329OS_08_04.jpg)'
- en: In the `scheduled_at` column, you see when the cronjob is planned to run. When
    running the `cron.sh` script after the `scheduled_at` time, we have to run the
    query again. This will give the following output:![How to do it...](img/3329OS_08_05.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scheduled_at`列中，您可以看到cronjob计划运行的时间。在`scheduled_at`时间之后运行`cron.sh`脚本后，我们必须再次运行查询。这将给出以下输出：![如何操作...](img/3329OS_08_05.jpg)
- en: 'To run a cronjob, we have to use the crontab file on the Linux server. To configure
    it, we have to switch to the `www-data` user. We can do this by running the following
    command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行cronjob，我们必须使用Linux服务器上的crontab文件。要配置它，我们必须切换到`www-data`用户。我们可以通过运行以下命令来完成此操作：
- en: '[PRE14]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we have to configure the cronjob. We can do this by running the `crontab
    -e` command. This will open a file where we have to put the content shown in the
    following screenshot:![How to do it...](img/3329OS_08_06.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须配置cronjob。我们可以通过运行`crontab -e`命令来完成此操作。这将打开一个文件，我们必须在其中放置以下截图所示的内容：![如何操作...](img/3329OS_08_06.jpg)
- en: Save the file and the cronjob will run every five minutes.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，cronjob将每五分钟运行一次。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Magento cron script is called the `cron.sh` file in the Magento root folder.
    This will execute the `cron.php` file over **Command Line Interface** (**CLI**).
    In this `cron.php` file, the Magento application is started and the cron process
    is initialized.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Magento的cron脚本在Magento根目录下被称为`cron.sh`文件。这将通过**命令行界面**（**CLI**）执行`cron.php`文件。在这个`cron.php`文件中，启动了Magento应用程序并初始化了cron进程。
- en: When the cron process is initialized, Magento will look at the `cron_schedule`
    table. Every scheduled cronjob with the `scheduled_at` field in the past will
    be executed. When a job starts, the `executed_at` field will be updated to the
    current timestamp.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当cron进程初始化时，Magento将查看`cron_schedule`表。所有具有过去`scheduled_at`字段的预定cronjob都将被执行。当一个任务开始时，`executed_at`字段将更新为当前时间戳。
- en: When a job is finished, the `finished_at` field is updated with the current
    timestamp. Also, the status will be updated. When the status is an error, the
    message field will be updated with the error.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个任务完成后，`finished_at`字段将更新为当前时间戳。同时，状态也将更新。当状态为错误时，消息字段将更新为错误信息。
- en: When the process is finished, Magento will create a queue for the next 30 minutes.
    Based on the configuration files, Magento knows which cronjob has to be scheduled
    each time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当进程完成后，Magento将为接下来的30分钟创建一个队列。根据配置文件，Magento知道每次需要安排哪个cronjob。
- en: Creating a new cronjob
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的cronjob
- en: The cronjobs are defined in the `config.xml` files of the Magento modules. Like
    every configuration in these files, the cronjob configuration is easy to extend
    in our own module. In this recipe, we will learn how to create extra cronjobs
    for the Magento installation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: cronjob在Magento模块的`config.xml`文件中定义。像这些文件中的每个配置一样，cronjob配置很容易在我们的模块中扩展。在本教程中，我们将学习如何为Magento安装创建额外的cronjob。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The workflow to execute a cronjob is mostly the same as working with events.
    We have to configure an observer function in the `config.xml` file that will be
    executed when the cronjob is executed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 执行cronjob的工作流程基本上与处理事件相同。我们必须在`config.xml`文件中配置一个观察者函数，该函数将在cronjob执行时被调用。
- en: In the `Packt_Helloworld` module, we will create a cronjob that will save some
    data in the database.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Packt_Helloworld`模块中，我们将创建一个cronjob，该cronjob将在数据库中保存一些数据。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow the ensuing steps to see which configuration is needed to configure
    an extra cronjob:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行，以查看配置额外cronjob所需的配置：
- en: 'We have to create a crontab configuration in the `config.xml` file. The following
    configuration will do that. Paste this under the `<config>` tag of the file `app/code/local/Packt/Helloworld/etc/config.xml`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在`config.xml`文件中创建一个crontab配置。以下配置将完成此操作。将以下内容粘贴到文件`app/code/local/Packt/Helloworld/etc/config.xml`中的`<config>`标签下：
- en: '[PRE15]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Clear the cache and verify that the configuration is working by running the
    following command in your terminal:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并验证配置是否正常工作，请在您的终端中运行以下命令：
- en: '[PRE16]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command gives you a list of all the configured cronjobs in the configuration.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将列出配置中的所有cronjob。
- en: If the `helloworld_check_subscriptions` code is under the list, it means that
    the configuration is working.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`helloworld_check_subscriptions`代码在列表中，这意味着配置正在正常工作。
- en: 'When the configuration is OK, we have to create the observer function. In the
    `run`/`model` tag, we will call the `cronListener()` action in the class `Packt_Helloworld_Model_Observer`.
    Create the class if it is not there and add the `checkSubscriptions()` function
    in it. The function will look like the following code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当配置正确时，我们必须创建观察者函数。在`run`/`model`标签中，我们将调用`Packt_Helloworld_Model_Observer`类中的`cronListener()`动作。如果该类不存在，则创建它，并在其中添加`checkSubscriptions()`函数。该函数将类似于以下代码：
- en: '[PRE17]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will save a `subscription` entity in the `subscriptions` table when the
    cron is executed.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当cron执行时，这将保存一个`subscription`实体到`subscriptions`表中。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you look at the cronjob configuration, the first XML tag you see is the
    cronjob code. This has to be unique across all the modules. If it exists, you
    will overwrite the settings of an existing standard cronjob.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看cronjob配置时，你首先看到的XML标签是cronjob代码。这必须在所有模块中是唯一的。如果它存在，你将覆盖现有标准cronjob的设置。
- en: A good practice is to start the cronjob code with the name that you used to
    register the models of your module (`helloworld`, `catalog`, and so on). This
    code is followed with the action you want to do.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的做法是以你用来注册模块模型（`helloworld`、`catalog`等）的名称开始cronjob代码。此代码后面跟着你想要执行的操作。
- en: Tip
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A cronjob code is always in small letters. Spaces are replaced by an underscore.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: cronjob代码始终是小写字母。空格被下划线替换。
- en: One level deeper, you see the `<schedule>` and `<run>` tags.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在更深的层次上，你可以看到`<schedule>`和`<run>`标签。
- en: 'In the `<schedule>` tag, we can configure the interval of the cronjob. This
    configuration contains five parameters which represent the following configurations:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<schedule>`标签中，我们可以配置cronjob的间隔。此配置包含五个参数，代表以下配置：
- en: Minute
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分钟
- en: Hour
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时
- en: Day
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: Month
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份
- en: Year
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年份
- en: A configuration such as `0 10 * * *` will run every day at 10:00 a.m. This means
    every weekday, every month, every day, at hour 10 and minute 0.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`0 10 * * *`的配置将在每天上午10:00运行。这意味着每个工作日、每个月、每天，在10小时和0分钟。
- en: The `<run>` tag just initializes the observer class and function to call when
    a cron needs to be executed. It is not possible to send parameters to that function.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`<run>`标签仅初始化在cron需要执行时调用的观察者类和函数。无法向该函数发送参数。'
- en: Testing your new cronjob
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的新cronjob
- en: When you are developing a new cronjob, it is not so easy to test it. You will
    not wait until the cron will be executed because you will lose a lot of time to
    do it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发一个新的cronjob时，测试它并不那么容易。你不会等到cron执行，因为你将浪费很多时间。
- en: On **Magento Connect**, there is a module that makes the testing of a cronjob
    easy. This module allows you to run a cronjob from the backend or command line.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Magento Connect**上有一个模块可以使cronjob的测试变得简单。此模块允许你从后台或命令行运行cronjob。
- en: It also adds a view to the backend that is a graphical representation of the
    `cron_schedule` table.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 它还向后台添加了一个视图，这是一个`cron_schedule`表的图形表示。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will install a module from Magento Connect on our Magento installation.
    More information of the module can be found at: [http://www.magentocommerce.com/magento-connect/aoe-scheduler.html](http://www.magentocommerce.com/magento-connect/aoe-scheduler.html).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的Magento安装上安装来自Magento Connect的模块。有关该模块的更多信息，请参阅：[http://www.magentocommerce.com/magento-connect/aoe-scheduler.html](http://www.magentocommerce.com/magento-connect/aoe-scheduler.html)。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe the workflow of the module to test cronjobs:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了模块测试cronjob的工作流程：
- en: Install the module by getting the extension key from Magento Connect. Be sure
    to take the key for **Magento Connect 2.0** as shown in the following screenshot:![How
    to do it...](img/3329OS_08_07.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从Magento Connect获取扩展密钥来安装模块。确保使用以下截图所示的**Magento Connect 2.0**密钥：![如何操作...](img/3329OS_08_07.jpg)
- en: Paste the extension key in Magento Connect Manager. Navigate to **System** |
    **Magento Connect** | **Magento Connect Manager**, paste the extension key, and
    click on the **Install** button as shown in the following screenshot:![How to
    do it...](img/3329OS_08_08.jpg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Magento Connect Manager中粘贴扩展密钥。导航到**系统** | **Magento Connect** | **Magento
    Connect Manager**，粘贴扩展密钥，然后点击以下截图所示的**安装**按钮：![如何操作...](img/3329OS_08_08.jpg)
- en: When you proceed, Magento Connect Manager will install the module to the installation.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你继续操作时，Magento Connect Manager会将模块安装到安装目录。
- en: Tip
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is possible that Magento Connect Manager fails to install the module. If
    it does, you can use the website [http://freegento.com/ddl-magento-extension.php](http://freegento.com/ddl-magento-extension.php)
    to download a ready-to-paste format of the module.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有可能 Magento Connect Manager 无法安装该模块。如果真的如此，你可以使用网站 [http://freegento.com/ddl-magento-extension.php](http://freegento.com/ddl-magento-extension.php)
    下载模块的已准备好粘贴的格式。
- en: When you return to the admin, you will see that there is a menu item added under
    the **System** section. When you navigate to **System** | **Scheduler** | **Schedule
    Configuration**, you will see a list of all available cronjobs.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你返回到管理员界面时，你将看到在 **系统** 部分下添加了一个菜单项。当你导航到 **系统** | **调度器** | **调度配置** 时，你将看到所有可用
    cron 作业的列表。
- en: To run a cronjob, you have to select one in the grid. After that, select **Run
    now** in the drop-down above the grid and click on **Submit**. This will directly
    run your cronjob.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行一个 cron 作业，你必须在网格中选择一个。之后，在网格上方的下拉菜单中选择 **立即运行**，然后点击 **提交**。这将直接运行你的 cron
    作业。
- en: When you navigate to **System** | **Scheduler** | **Timeline View**, you will
    see the information about the cronjob in the timeline as shown in the following
    screenshot:![How to do it...](img/3329OS_08_09.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你导航到 **系统** | **调度器** | **时间线视图** 时，你将在时间线上看到 cron 作业的信息，如下面的截图所示：![如何操作...](img/3329OS_08_09.jpg)
- en: 'In the `shell` folder of the Magento root, the module adds a shell script to
    test the cronjobs by command line. This is the `scheduler.php` file, which has
    the following options:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Magento 根目录的 `shell` 文件夹中，该模块通过命令行添加了一个 shell 脚本来测试 cron 作业。这是 `scheduler.php`
    文件，它有以下选项：
- en: action (`runNow` or `scheduleNow`)
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: action (`runNow` 或 `scheduleNow`)
- en: code (the cronjob code)
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: code (cron 作业代码)
- en: 'To run our cronjob by command line, the command looks like the following when
    you are in the Magento root folder:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 Magento 根目录下时，通过命令行运行我们的 cron 作业的命令如下：
- en: '[PRE18]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous command directly runs the cronjob. When you want to schedule the
    cronjob with the current timestamp (so it will be executed when the next cron
    runs), we have to use the `scheduleNow` action. With this option, the command
    looks like the following:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的命令直接运行了 cron 作业。当你想要使用当前时间戳来安排 cron 作业（这样它将在下一次 cron 运行时执行）时，我们必须使用 `scheduleNow`
    动作。使用此选项时，命令看起来如下：
- en: '[PRE19]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Aoe_Scheduler` module adds an interface to the backend to simplify the
    process to test a cronjob. It is just a graphical interface on the `cron_schedule`
    table.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`Aoe_Scheduler` 模块向后台添加了一个界面，简化了测试 cron 作业的过程。它只是在 `cron_schedule` 表上的一个图形界面。'
- en: When you are working with cronjobs in your module, this module is recommended
    and saves a lot of time.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模块中处理 cron 作业时，此模块推荐使用，可以节省大量时间。
- en: The shell script is added to test the cronjobs over the command line. Make sure
    when you run a cronjob over PHP CLI or you run it in the browser, other PHP settings
    are used. An Apache request uses the Apache php.ini settings and the command-line
    PHP uses the PHP CLI settings.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 该 shell 脚本被添加来通过命令行测试 cron 作业。确保当你通过 PHP CLI 运行 cron 作业或在浏览器中运行它时，使用的是其他 PHP
    设置。Apache 请求使用 Apache php.ini 设置，而命令行 PHP 使用 PHP CLI 设置。
