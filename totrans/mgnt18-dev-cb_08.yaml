- en: Chapter 8. Event Handlers and Cronjobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Magento event types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an event listener
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing cronjobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new cronjob
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your new cronjob
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the e-commerce flow of Magento, there are a lot of events that happen when
    a visitor buys something from your shop. He or she adds a product to the shopping
    cart, selects a payment method, logs in, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Magento dispatches these events and you have the possibility to hook in to an
    event to do your stuff. It's like hooking in to a click event in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The Observer design pattern is used to implement the event handling system.
    An event happens in the installation, and the configuration will call the right
    function from an observer class to execute.
  prefs: []
  type: TYPE_NORMAL
- en: The cronjob system in Magento is built on the same design pattern. Cronjobs
    are configured in the configuration. When the cron runs, Magento will check the
    timeframes and execute the jobs that match the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Magento event types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with event listeners is better than rewriting a core class. When analyzing
    a process, it is good to think about how you can do it and if it is possible to
    work with the Magento events.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can do that, we have to see which events are available, when they
    are dispatched, and which parameters are sent with the event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will explore how the Magento event system works. We will
    use the Magento log system to debug a core class to see which events are available
    and when they are dispatched.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the ensuing instructions to see the event system in action:'
  prefs: []
  type: TYPE_NORMAL
- en: When debugging something, it is recommended that you enable Magento logging.
    You can do this by configuring it in the backend. Navigate to **System** | **Configuration**
    | **Advanced** | **Developer**. Configure the **Enabled** parameter as shown in
    the following screenshot:![How to do it...](img/3329OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also run the wiz command `wiz devel-logging yes` in your command-line
    tool to enable logging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Magento events are dispatched with the `Mage::dispatchEvent()` function. To
    debug this function, we have to edit it. The `Mage::dispatchEvent()` function
    will call the `dispatchEvent()` function in the `app/code/core/Mage/Core/Model/App.php`
    file. To edit this file, we have to copy the file into the `app/code/local/Mage/Core/Model`
    folder. If this folder doesn't exist, create it and copy the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In that file, search for the `dispatchEvent()` function. In the first line
    of that function, add `Mage::log($eventName);` to print the event name in the
    logfile. The beginning of that function will look like the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload the page in the frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Have a look at the `var/log/system.log` file. By using the `tail -f` command,
    you can see the changes of the file live. In the command line, go to the directory
    of your Magento installation and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_08_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: When reloading a new page, you will see that a lot of events are printed in
    the logfile of Magento.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enough debugging for now. It is time to remove the file `app/code/local/Mage/Core/Model/App.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did was enable the Magento log. This is recommended for development
    environments because all the debug messages are printed in the file `var/log/system.log`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP warnings and notices are also printed in this file, so it is recommended
    to have a look at it when developing.
  prefs: []
  type: TYPE_NORMAL
- en: To print a debug message, we used the `Mage::log()` function. The first parameter
    of this function is the message you want to debug. If the parameter is an object
    or array, Magento will print a dump of the variable in the logfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second parameter is the log level. When this is not specified, the error
    level `DEBUG` is used. This parameter requires a numeric value. These values are
    set in the `const` variables of the `Zend_Log` class, which are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Zend_Log::EMERG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::ALERT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::CRIT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::ERR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::WARN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::NOTICE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::INFO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Zend_Log::DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the third parameter, you can configure a file in the `var/log` folder where
    the log message needs to be printed. When this parameter is empty, the default
    file `system.log` is used.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth and last parameter is a Boolean value where you can force to always
    print a log message (even if the Magento logging is set to off).
  prefs: []
  type: TYPE_NORMAL
- en: When using the `Mage::log()` function, you will print the debug data without
    changing the output of the PHP process.
  prefs: []
  type: TYPE_NORMAL
- en: For every request in Magento, many events are dispatched. So, there are many
    ways to integrate and execute custom code in the Magento process.
  prefs: []
  type: TYPE_NORMAL
- en: Working with events is better than rewriting a core class of Magento. When you
    rewrite a core class, it is possible that your code will become incompatible while
    upgrading Magento or installing third-party modules.
  prefs: []
  type: TYPE_NORMAL
- en: When you work with events, you will create an extension on Magento instead of
    creating a modification when you rewrite a core class.
  prefs: []
  type: TYPE_NORMAL
- en: So, it is good to think about the way you want to execute custom code in Magento.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A full list of the Magento events can be found at: [http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events](http://www.magentocommerce.com/wiki/5_-_modules_and_development/reference/magento_events).'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that this list is not complete when you are working with custom modules
    because they can have their own events.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to create our own event, we have to dispatch it with a custom name.
    In this recipe, we will learn how events are dispatched and what we can do with
    parameters that we will forward.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create our own event that is fired when a visitor opens the `helloAction()`
    function of the `Packt_Helloworld` module. In this recipe, we will build further
    on the `Packt_Helloworld` module that is created in [Chapter 4](ch04.html "Chapter 4. Creating
    a Module"), *Creating a Module*, [Chapter 6](ch06.html "Chapter 6. Databases and
    Modules"), *Databases and Modules*, and [Chapter 7](ch07.html "Chapter 7. Magento
    Backend"), *Magento Backend*. If you want, you can install the start files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps describe how we can dispatch our own event.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `IndexController` of the `Packt_Helloworld` module. In this controller,
    there is a `helloAction()` function where we will work to dispatch the event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To dispatch an event, the `Mage::dispatchEvent()` function is used. When we
    change the code of the `helloAction()` function to the following code, we will
    dispatch an event called `helloworld_register_visit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Every time the page is reloaded, the event is dispatched. Because there is no
    listener added, nothing will happen. To test that the code works, you have to
    debug the `Mage_Core_Model_App::dispatchEvent()` function like we did in the previous
    recipe. You can find this function in the file `app/code/core/Mage/Core/Model/App.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second thing we will do is add two parameters to the event. For example,
    we will send a product and a category to the event. We will use the second parameter
    to send the parameters. This parameter accepts a key value array with the objects.
    The following code shows how to send parameters to the event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure the product and category ID exists in your webshop. If not, you can
    use another ID that exists in your webshop.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Mage::dispatchEvent()` function fires an event in Magento. When this function
    is called, Magento will look into the configuration and execute the matching event
    observer functions, also known as observers in the Magento world.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `Mage::dispatchEvent()` function in every context you want,
    so it's to you to decide where you want to place it if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an event observer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An event listener (observer) is used when you want to hook in to an event. In
    the previous recipe, we fired an event. In this recipe, we will catch events and
    look at how we can execute custom code when the event occurs in the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will add two event observers. The first one will catch the
    event that we created in the previous recipe. The second event listener (observer)
    will hook into the "add to cart" action of a product.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe what you can do with event observers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To listen to the `helloworld_register_edit` event, we have to add configuration
    to the `config.xml` file of the `Packt_Helloworld` module. Add the following code
    in this file under the `<global>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We just configured an observer that fires the `registerVisit()` function of
    the `helloworld/observer` class. We have to create the `Packt_Helloworld_Model_Observer`
    class. Create the file `app/code/local/Packt/Helloworld/Model/Observer.php` with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can test the event observer by firing the event. The event is fired on the
    page `http://magento-dev.local/helloworld/index/hello`. Navigate to this file
    and check the debug messages in the Magento logfile (`var/log/system.log`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The observer function prints a debug message in the Magento logfile. Let''s
    look at the parameters that we send with the event. These parameters are sent
    in the `$observer` object in the function. To get the product and the category,
    change the `registerVisit()` action to the following code to debug the product
    and category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the next part, we will hook in to the "add to cart" event. When a user adds
    a product to the cart, we have to check that the quantity is odd. If not, we have
    to show an error message that the product can't be added to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do that, we have to create an event listener (observer) for the event `checkout_cart_product_add_after`.
    We do this by adding the following code in the `config.xml` file of the `Packt_Helloworld`
    module. Paste the following code under the `<events>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will call the `checkCartQty()` function in the observer class. The following
    code will display a notice message when the event is fired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your cache and add a product to the cart. The message will appear in the
    cart page when a product is added, as shown in the following screenshot:![How
    to do it...](img/3329OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we have to add the following code to check if the quantity is odd or even.
    This code gets the quantity from the observer and adds a check for even or odd:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the quantity is even, we have to show a notice. When the quantity is odd,
    we have to cancel the "add to cart" operation and display a message. We can do
    this by throwing an exception. In an event observer, we can never use return values.
    To work correctly, the check function will look like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and add a product to the cart with an even and odd quantity.
    You will see that the odd quantity will result in an error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Event listeners (observers) are always configured in the `config.xml` file.
    When we look at the configuration, every tag has its own purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `<events>` tag is the root to define events in it. The `<events>` tag can
    be configured under the `<global>`, `<frontend>`, or `<admin>` tags depending
    on the scope of the event that needs to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Under the `<events>` tag, we find the `<helloworld_register_visit>` tag. The
    name of the tag is the name of the event that will be observed. The observers
    are defined in the child tags.
  prefs: []
  type: TYPE_NORMAL
- en: Under the `<helloworld_register_visit>` tag, you see an `<observers>` subtag.
    In this tag, all the observers are declared.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have a `register_visit` observer. The observers that are
    declared under the `<observers>` tag needs to have a unique name. When using an
    existing name, you will overwrite the configuration of an `existing` observer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The observer tag (`register_visit`) has the following subtags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<type>`: This is the design pattern to call the class, mostly as `singleton`
    or `model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<class>`: This is the Magento path to the class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<method>`: This is the method to be executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous event will execute the configured class and function when the event
    is fired with the `dispatchEvent()` function.
  prefs: []
  type: TYPE_NORMAL
- en: To every observer function, an `$observer` object is passed. This variable is
    an instance of the `Varien_Event_Observer` class. This class extends the `Varien_Object`
    class and it contains some extra event-related functions.
  prefs: []
  type: TYPE_NORMAL
- en: The return parameters of the event observer functions will be ignored. When
    working with an event observer, you have to look at the context where the `Mage::dispatchEvent()`
    function is placed.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it is placed in a `try-catch` structure like the `checkout_cart_product_add_after`
    event in this recipe. In other cases, you can change the values of the passed
    objects like the `model_save_before` event does.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing cronjobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cronjobs or scheduled tasks are background processes that keep your Magento
    webshop running. Some examples of cronjobs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sending newsletters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recalculating catalog promotion rules for the next day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning visitor logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending product stock and price alert mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating currency rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If cronjobs are not configured on the server, you will see issues with your
    webshop after a period of time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure cronjobs on the server and verify
    that they are working. Make an SSH connection to your server and prepare yourselves
    to perform some server configurations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how you have to configure the cronjobs on your
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Practically, we have to configure cronjobs every five minutes. For that to
    happen, the following command is executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid permission problems, you have to run this command as the user that
    apache uses to serve the HTTP requests. In our setup, this user is `www-data`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you execute the previous command, the cronjob table in the database is
    updated with the recent cronjobs. In the `cron_schedule` table, you can see the
    queue for the next 30 minutes. Run the following command in your database client
    to see the content of the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This query gives you the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_08_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the `scheduled_at` column, you see when the cronjob is planned to run. When
    running the `cron.sh` script after the `scheduled_at` time, we have to run the
    query again. This will give the following output:![How to do it...](img/3329OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run a cronjob, we have to use the crontab file on the Linux server. To configure
    it, we have to switch to the `www-data` user. We can do this by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we have to configure the cronjob. We can do this by running the `crontab
    -e` command. This will open a file where we have to put the content shown in the
    following screenshot:![How to do it...](img/3329OS_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file and the cronjob will run every five minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Magento cron script is called the `cron.sh` file in the Magento root folder.
    This will execute the `cron.php` file over **Command Line Interface** (**CLI**).
    In this `cron.php` file, the Magento application is started and the cron process
    is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: When the cron process is initialized, Magento will look at the `cron_schedule`
    table. Every scheduled cronjob with the `scheduled_at` field in the past will
    be executed. When a job starts, the `executed_at` field will be updated to the
    current timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: When a job is finished, the `finished_at` field is updated with the current
    timestamp. Also, the status will be updated. When the status is an error, the
    message field will be updated with the error.
  prefs: []
  type: TYPE_NORMAL
- en: When the process is finished, Magento will create a queue for the next 30 minutes.
    Based on the configuration files, Magento knows which cronjob has to be scheduled
    each time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new cronjob
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cronjobs are defined in the `config.xml` files of the Magento modules. Like
    every configuration in these files, the cronjob configuration is easy to extend
    in our own module. In this recipe, we will learn how to create extra cronjobs
    for the Magento installation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The workflow to execute a cronjob is mostly the same as working with events.
    We have to configure an observer function in the `config.xml` file that will be
    executed when the cronjob is executed.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Packt_Helloworld` module, we will create a cronjob that will save some
    data in the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the ensuing steps to see which configuration is needed to configure
    an extra cronjob:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to create a crontab configuration in the `config.xml` file. The following
    configuration will do that. Paste this under the `<config>` tag of the file `app/code/local/Packt/Helloworld/etc/config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and verify that the configuration is working by running the
    following command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command gives you a list of all the configured cronjobs in the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `helloworld_check_subscriptions` code is under the list, it means that
    the configuration is working.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the configuration is OK, we have to create the observer function. In the
    `run`/`model` tag, we will call the `cronListener()` action in the class `Packt_Helloworld_Model_Observer`.
    Create the class if it is not there and add the `checkSubscriptions()` function
    in it. The function will look like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will save a `subscription` entity in the `subscriptions` table when the
    cron is executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you look at the cronjob configuration, the first XML tag you see is the
    cronjob code. This has to be unique across all the modules. If it exists, you
    will overwrite the settings of an existing standard cronjob.
  prefs: []
  type: TYPE_NORMAL
- en: A good practice is to start the cronjob code with the name that you used to
    register the models of your module (`helloworld`, `catalog`, and so on). This
    code is followed with the action you want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A cronjob code is always in small letters. Spaces are replaced by an underscore.
  prefs: []
  type: TYPE_NORMAL
- en: One level deeper, you see the `<schedule>` and `<run>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `<schedule>` tag, we can configure the interval of the cronjob. This
    configuration contains five parameters which represent the following configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Minute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A configuration such as `0 10 * * *` will run every day at 10:00 a.m. This means
    every weekday, every month, every day, at hour 10 and minute 0.
  prefs: []
  type: TYPE_NORMAL
- en: The `<run>` tag just initializes the observer class and function to call when
    a cron needs to be executed. It is not possible to send parameters to that function.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your new cronjob
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are developing a new cronjob, it is not so easy to test it. You will
    not wait until the cron will be executed because you will lose a lot of time to
    do it.
  prefs: []
  type: TYPE_NORMAL
- en: On **Magento Connect**, there is a module that makes the testing of a cronjob
    easy. This module allows you to run a cronjob from the backend or command line.
  prefs: []
  type: TYPE_NORMAL
- en: It also adds a view to the backend that is a graphical representation of the
    `cron_schedule` table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will install a module from Magento Connect on our Magento installation.
    More information of the module can be found at: [http://www.magentocommerce.com/magento-connect/aoe-scheduler.html](http://www.magentocommerce.com/magento-connect/aoe-scheduler.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe the workflow of the module to test cronjobs:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the module by getting the extension key from Magento Connect. Be sure
    to take the key for **Magento Connect 2.0** as shown in the following screenshot:![How
    to do it...](img/3329OS_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the extension key in Magento Connect Manager. Navigate to **System** |
    **Magento Connect** | **Magento Connect Manager**, paste the extension key, and
    click on the **Install** button as shown in the following screenshot:![How to
    do it...](img/3329OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you proceed, Magento Connect Manager will install the module to the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible that Magento Connect Manager fails to install the module. If
    it does, you can use the website [http://freegento.com/ddl-magento-extension.php](http://freegento.com/ddl-magento-extension.php)
    to download a ready-to-paste format of the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you return to the admin, you will see that there is a menu item added under
    the **System** section. When you navigate to **System** | **Scheduler** | **Schedule
    Configuration**, you will see a list of all available cronjobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run a cronjob, you have to select one in the grid. After that, select **Run
    now** in the drop-down above the grid and click on **Submit**. This will directly
    run your cronjob.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you navigate to **System** | **Scheduler** | **Timeline View**, you will
    see the information about the cronjob in the timeline as shown in the following
    screenshot:![How to do it...](img/3329OS_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `shell` folder of the Magento root, the module adds a shell script to
    test the cronjobs by command line. This is the `scheduler.php` file, which has
    the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: action (`runNow` or `scheduleNow`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: code (the cronjob code)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To run our cronjob by command line, the command looks like the following when
    you are in the Magento root folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous command directly runs the cronjob. When you want to schedule the
    cronjob with the current timestamp (so it will be executed when the next cron
    runs), we have to use the `scheduleNow` action. With this option, the command
    looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Aoe_Scheduler` module adds an interface to the backend to simplify the
    process to test a cronjob. It is just a graphical interface on the `cron_schedule`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: When you are working with cronjobs in your module, this module is recommended
    and saves a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: The shell script is added to test the cronjobs over the command line. Make sure
    when you run a cronjob over PHP CLI or you run it in the browser, other PHP settings
    are used. An Apache request uses the Apache php.ini settings and the command-line
    PHP uses the PHP CLI settings.
  prefs: []
  type: TYPE_NORMAL
