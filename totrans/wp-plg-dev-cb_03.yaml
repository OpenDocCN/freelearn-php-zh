- en: User Settings and Administration Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户设置和管理页面
- en: 'This chapter is focused on setting up pages that enable users to configure
    plugin settings. It covers the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专注于设置页面，使用户能够配置插件设置。它涵盖了以下主题：
- en: Creating default user settings on plugin initialization
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件初始化时创建默认用户设置
- en: Storing user settings using arrays
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组存储用户设置
- en: Removing plugin data on deletion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除时移除插件数据
- en: Creating an administration page menu item in the settings menu
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置菜单中创建管理页面菜单项
- en: Creating a multi-level administration menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多级管理菜单
- en: Adding menu items leading to external pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加指向外部页面的菜单项
- en: Hiding items that users should not access from the default menu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏用户不应访问的默认菜单项
- en: Rendering the admin page content using HTML
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML渲染管理页面内容
- en: Processing and storing plugin configuration data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理和存储插件配置数据
- en: Displaying a confirmation message when options are saved
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存选项时显示确认消息
- en: Adding custom help pages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自定义帮助页面
- en: Rendering the admin page contents using the Settings API
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设置API渲染管理页面内容
- en: Accessing user settings from action and filter hooks
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从操作和过滤器钩子访问用户设置
- en: Formatting admin pages using meta boxes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用元框格式化管理页面
- en: Splitting admin code from the main plugin file to optimize site performance
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将管理代码从主插件文件中分离出来以优化站点性能
- en: Storing style sheet data in user settings
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将样式表数据存储在用户设置中
- en: Managing multiple sets of user settings from a single admin page
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单个管理页面管理多套用户设置
- en: Creating a network level plugin with admin pages
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有管理页面的网络级插件
- en: Introduction
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As we saw in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics,* it is very easy for a plugin to register custom functions with
    action and filter hooks to change or augment the way WordPress renders web pages.
    That being said, some of the examples covered in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics,* have limitations when it comes to dealing with custom
    user information, such as the inability to easily specify a Google Analytics account
    number.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第二章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)“插件框架基础”中看到的，插件注册自定义函数与操作和过滤器钩子以改变或增强WordPress渲染网页的方式是非常容易的。尽管如此，[第二章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)“插件框架基础”中的一些示例在处理自定义用户信息时存在局限性，例如无法轻松指定一个Google
    Analytics账户号码。
- en: To make plugins easy to use for a wide audience, it is usually important to
    create one or more administration pages where users will be able to provide details
    that are specific to their installation, enter information on external accounts,
    and customize some of the aspects of the plugin's functionality. As an example,
    the Akismet plugin, provided in default WordPress installations, offers a configuration
    page that can be found under the Settings | Akismet configuration menu. Thankfully,
    WordPress has a rich set of functions that allows plugin developers to easily
    put together configuration pages that will seamlessly blend with the rest of the
    administrative panels.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使插件对广泛用户群易于使用，通常很重要的一点是创建一个或多个管理页面，用户可以在其中提供特定于其安装的详细信息，输入外部账户信息，并自定义插件功能的一些方面。例如，默认WordPress安装中提供的Akismet插件提供了一个配置页面，可以在设置
    | Akismet配置菜单下找到。幸运的是，WordPress有一套丰富的函数，允许插件开发者轻松地组合配置页面，使其与行政面板的其他部分无缝融合。
- en: This chapter covers how to use the WordPress Options **Application** **Programming**
    **Interface** (**API**) functions to store and access user options in the site
    database. It then goes on to explain how to create custom dialogs to provide users
    with complete control over the configuration of the plugins that you create.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用WordPress选项**应用程序****编程****接口**（**API**）函数在站点数据库中存储和访问用户选项。然后继续解释如何创建自定义对话框，使用户能够完全控制你创建的插件的配置。
- en: Creating default user settings on plugin initialization
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在插件初始化时创建默认用户设置
- en: A typical first step of most user-configurable plugins is to create a default
    set of values for all options when the plugin is activated. These default options
    will subsequently be used to populate the plugin's settings page when it is visited
    by the site administrator. This recipe shows how to register a function that is
    called when a plugin is activated, and how to store option data in the site database.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户可配置插件的典型第一步是在插件激活时为所有选项创建一组默认值。这些默认选项随后将被用于在站点管理员访问插件设置页面时填充插件设置页面。本菜谱展示了如何注册一个在插件激活时被调用的函数，以及如何将选项数据存储在站点数据库中。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的 WordPress 插件目录。
- en: Create a new directory called `ch3-individual-options`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch3-individual-options` 的新目录。
- en: Navigate to this directory and create a new text file called `ch3-individual-options.php`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch3-individual-options.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Individual Options`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为 `第 3 章 - 单个选项`。
- en: 'Add the following line of code to register a function that will be executed
    when the plugin is activated, after its initial installation or following an upgrade:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在插件激活时执行的功能，无论是初始安装后还是升级后：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code section to provide an implementation for the `ch3io_set_default_options`
    function:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `ch3io_set_default_options` 函数实现的区域：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save and close the plugin file. Execute the activation function that was just
    added by clicking on the Activate option of this `chapter 3 - Individual Options`
    plugin.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。通过点击此 `第 3 章 - 单个选项` 插件的“激活”选项来执行刚刚添加的激活函数。
- en: 'In your web server''s MySQL database administration tool, select your WordPress
    database (`wordpressdev` if you followed the recipe in [Chapter 1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml),
    *Preparing a Local Development Environment*), then select the `wpdev_options`
    table. Click on the SQL tab, replace the default query with the following statement,
    and click on Go:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Web 服务器 MySQL 数据库管理工具中，选择你的 WordPress 数据库（如果你遵循了 [第 1 章](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml)，*准备本地开发环境*中的说明，则为
    `wordpressdev`），然后选择 `wpdev_options` 表。点击 SQL 选项卡，将默认查询替换为以下语句，然后点击“执行”：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your query should return a single row with the default value assigned to the
    new option:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的查询应返回一个包含分配给新选项的默认值的单行：
- en: '![](img/f13f7dfa-049d-41ed-802b-bf9c36286edf.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f13f7dfa-049d-41ed-802b-bf9c36286edf.png)'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `register_activation_hook` function is used to indicate to WordPress the
    name of the function that should be called when it activates the plugin. Unlike
    other hooks, this function requires the name of the main plugin code file to be
    sent as its first argument, along with the name of the associated function. To
    do this easily, we can leverage the PHP `__FILE__` constant as the first argument,
    which will resolve to the filename.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`register_activation_hook` 函数用于向 WordPress 指示在激活插件时应调用的函数名称。与其他钩子不同，此函数需要将主插件代码文件的名称作为其第一个参数发送，以及关联函数的名称。为了轻松做到这一点，我们可以利用
    PHP 的 `__FILE__` 常量作为第一个参数，这将解析为文件名。'
- en: When the callback function is called, we can use the Options API to create,
    update, or, delete settings in the options table of the site's MySQL database.
    In this specific example, we are using the `add_option` function to easily create
    an option called `ch3io_ga_account_name` with a default value of `UA-0000000-0`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当回调函数被调用时，我们可以使用选项 API 在网站的 MySQL 数据库的选项表中创建、更新或删除设置。在这个特定例子中，我们使用 `add_option`
    函数轻松创建一个名为 `ch3io_ga_account_name` 的选项，其默认值为 `UA-0000000-0`。
- en: Just like function names, you should be careful when naming plugin options,
    to avoid conflicts with other plugins. A good practice is to add a unique prefix
    to the beginning of each variable name.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像函数名称一样，在命名插件选项时应该小心，以避免与其他插件冲突。一个好的做法是在每个变量名开头添加一个唯一的前缀。
- en: Before making a call to create the new option, the activation function checks
    whether the option is present in the WordPress options table using the `get_option`
    function. If the return value is false, indicating that the option was not found,
    a new default option can be created. Any other result would show that the plugin
    has been activated on the site previously and that options may have been changed
    from their default values. It is important to keep in mind when writing this code
    that plugins get deactivated and reactivated each time they are updated using
    the WordPress update tool, resulting in a call to their activation function. It
    is also possible that a user might have deactivated a plugin temporarily to debug
    site issues and brought it back at a later time, also resulting in the activation
    function being called.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用创建新选项之前，激活函数会使用`get_option`函数检查选项是否存在于WordPress选项表中。如果返回值是false，表示未找到该选项，则可以创建一个新的默认选项。任何其他结果都表明该插件之前已在网站上激活，并且选项可能已经从默认值更改。在编写此代码时，重要的是要记住，插件每次使用WordPress更新工具更新时都会被停用和重新激活，这会导致调用其激活函数。也有可能用户暂时停用插件以调试网站问题，然后在稍后时间将其恢复，这也可能导致激活函数被调用。
- en: Finally, it should be noted that it is possible to call the `add_option` function
    multiple times if more than one option is needed to implement a plugin's desired
    functionality. That being said, it is not necessary to verify the presence of
    all the options, as checking for a single one would indicate that they were all
    previously set.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要注意的是，如果需要实现插件所需的功能而需要多个选项，则可以多次调用`add_option`函数。尽管如此，没有必要验证所有选项的存在，因为检查单个选项就足以表明它们之前已经被设置。
- en: There's more...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Beyond the creation of default values for a plugin, the activation hook can
    also be used to perform more advanced tasks, such as interacting with custom database
    tables or doing data initialization, as will be seen in later chapters. In contrast,
    the similar deactivation function hook does not have any real use within the creation
    of most plugins.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为插件创建默认值之外，激活钩子还可以用来执行更高级的任务，例如与自定义数据库表交互或进行数据初始化，这将在后续章节中看到。相比之下，类似的停用功能钩子在大多数插件的创建中并没有实际用途。
- en: Deactivation function
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停用函数
- en: Similar to the activation function that we used in this recipe, WordPress provides
    a way to register a deactivation function (using `register_deactivation_hook`).
    While it may be tempting to use this function to remove options created by the
    plugin, it is not possible to know why the activation function was called. The
    three situations that could trigger this call are a plugin upgrade, a temporary
    deactivation to debug a site problem, or just before the plugin gets deleted.
    Since it is best to keep user options in the first two situations, any cleanup
    and data removal code should be placed in a plugin's uninstallation file instead,
    as described in a later recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在本食谱中使用的激活函数类似，WordPress提供了一种注册停用函数的方法（使用`register_deactivation_hook`）。虽然使用此函数删除插件创建的选项可能很有吸引力，但无法知道激活函数被调用的原因。可能触发此调用的三种情况是插件升级、暂时停用以调试网站问题或插件即将被删除。由于在第一种和第二种情况下最好保留用户选项，因此任何清理和数据删除代码应放置在插件卸载文件中，如后续食谱中所述。
- en: See also
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Removing plugin data on deletion* recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除插件数据时的操作*食谱'
- en: Storing user settings using arrays
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组存储用户设置
- en: While the previous recipe worked quite well in creating entries in the site's
    options table for each individual plugin option, another way to manage user settings
    is to store them as arrays in the database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 而在之前的食谱中，虽然很好地在网站的选项表中为每个单独的插件选项创建了条目，但管理用户设置的另一种方法是将其作为数组存储在数据库中。
- en: This recipe creates the same option as the previous one, but also adds a second
    option and uses an array instead of individual options to store them. It also
    incorporates an upgrade strategy to deal with the creation of additional options
    as a plugin evolves over time.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱创建与之前相同的选项，但还添加了第二个选项，并使用数组而不是单个选项来存储它们。它还结合了升级策略来处理插件随时间发展而创建的附加选项。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the recipe entitled *Inserting link statistics
    tracking code in page body using plugin filters* in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 2/ch2-page-header-output/ch2-page-header-output-v2.php`)
    from the code bundle downloaded from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file `ch2-page-header-output.php`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中名为*使用插件过滤器在页面主体中插入链接统计跟踪代码*的食谱，以获得本食谱的起点。或者，您可以从Packt网站下载的代码包（[https://www.packtpub.com/support](https://www.packtpub.com/support)）中获取结果代码（`Chapter
    2/ch2-page-header-output/ch2-page-header-output-v2.php`），并将文件重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装中WordPress插件目录的`ch2-page-header-output`文件夹。
- en: Open the file `ch2-page-header-output.php` in a code editor.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开文件`ch2-page-header-output.php`。
- en: 'Add the following line of code to register a function to be called when the
    plugin is activated:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册在插件激活时调用的函数：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_set_default_options_array`
    function:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码段以提供`ch2pho_set_default_options_array`函数的实现：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code to provide an implementation for the `ch2pho_get_options`
    function:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以提供`ch2pho_get_options`函数的实现：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save and close the plugin file.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Go to the Plugins section of the administration interface.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往管理界面的插件部分。
- en: Click on the Deactivate link for the `Chapter 2 - Page Header Output` plugin,
    followed by a click on the Activate link to execute the activation function that
    was just added.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Chapter 2 - Page Header Output`插件的“停用”链接，然后点击“激活”链接以执行刚刚添加的激活函数。
- en: 'Using your web server''s MySQL database administration tool, query the `wpdev_options`
    table of your WordPress installation for an option with the name `ch2pho_options`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的Web服务器MySQL数据库管理工具，查询WordPress安装中的`wpdev_options`表，查找名为`ch2pho_options`的选项：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your query should return a single row with a serialized set of data representing
    all of the fields in the array:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的查询应返回一行，其中包含表示数组中所有字段的序列化数据集：
- en: '![](img/9fbcb0e4-c7cf-4726-ab29-72c444984489.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9fbcb0e4-c7cf-4726-ab29-72c444984489.png)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `add_option`, `get_option`, and `update_option` functions accept values
    as single variables or arrays of data. When given an array, they transform the
    information received to a serialized array that gets stored in the site database.
    The main advantage of using arrays over multiple options is that all of the information
    can be retrieved with a single function call, optimizing the access to the MySQL
    database and simplifying your plugin's code. This is especially important when
    your plugin options need to be queried every time a site page needs to be rendered.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_option`、`get_option`和`update_option`函数接受单个变量或数据数组作为值。当给定一个数组时，它们将接收到的信息转换为序列化数组，该数组被存储在网站数据库中。使用数组而不是多个选项的主要优势是，所有信息都可以通过单个函数调用检索，从而优化对MySQL数据库的访问并简化您的插件代码。这对于您的插件选项需要在每次渲染网站页面时查询尤为重要。'
- en: Of course, this advantage is only true if you need to use most plugin options
    at the same time. Otherwise, your code will be managing large amounts of data
    for no reason.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个优势只有在您需要同时使用大多数插件选项时才是真实的。否则，您的代码将无端地管理大量数据。
- en: Another benefit of using arrays instead of individual options is that the names
    of each option can be much shorter and simpler, since you only need to worry about
    avoiding naming conflicts at the top option name level, as opposed to each key
    in the array. Finally, having all the options stored in a single array makes the
    bulk removal of these options much easier than if they were all stored separately,
    as we will see in the next recipe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组而不是单个选项的另一个好处是，每个选项的名称可以更短、更简单，因为您只需要担心在顶级选项名称级别避免命名冲突，而不是数组的每个键。最后，将所有选项存储在单个数组中，使得批量删除这些选项比它们分别存储要容易得多，正如我们将在下一个食谱中看到的那样。
- en: The bulk of this recipe's code defines a utility function called `ch2pho_get_options`,
    which is used to make sure that we always get good values when retrieving options,
    even when our plugin runs for the first time or new options are introduced by
    an upgrade. As part of this utility function, we use the `wp_parse_args` function
    to quickly compare an existing set of options retrieved by the `get_option` function
    with the current set of default plugin options, specified by the `$new_options`
    array. For each array element that is not found in the existing options, `wp_parse_args`
    will simply merge it into the resulting array, which is returned at the end of
    the function. The last part of our option-retrieval function checks whether the
    previous option array was empty or whether any new keys were added to the new
    array, using the PHP `array_diff_key` function. In either of these cases, it will
    save the updated options array back to the site database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的大部分代码定义了一个名为`ch2pho_get_options`的实用函数，该函数用于确保我们在检索选项时始终得到良好的值，即使我们的插件第一次运行或通过升级引入了新的选项。作为这个实用函数的一部分，我们使用`wp_parse_args`函数快速比较由`get_option`函数检索到的现有选项集与由`$new_options`数组指定的当前插件默认选项集。对于在现有选项中找不到的每个数组元素，`wp_parse_args`将简单地将其合并到最终数组中，该数组在函数结束时返回。我们选项检索函数的最后部分检查前一个选项数组是否为空或是否向新数组中添加了任何新键，使用PHP的`array_diff_key`函数。在这两种情况下，它将保存更新后的选项数组回站点数据库。
- en: It should finally be noted that, while the `ch2pho_get_options` function returns
    an array of all the site options, we are not actually using this return value
    in this recipe; we will use it in later recipes in this chapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要注意的是，虽然`ch2pho_get_options`函数返回所有站点选项的数组，但我们实际上在这个配方中并没有使用这个返回值；我们将在本章后面的配方中使用它。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding output content to page headers using plugin actions* recipe in [Chapter
    2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework Basics*
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中*插件框架基础*的*使用插件动作向页面标题添加输出内容*配方'
- en: The *Inserting link statistics tracking code in page body using plugin filters*
    recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework
    Basics*
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中*插件框架基础*的*在页面主体中使用插件过滤器插入链接统计跟踪代码*配方'
- en: The *Removing plugin data on deletion* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除时移除插件数据*配方'
- en: Removing plugin data on deletion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除时移除插件数据
- en: As with any piece of software, it is quite possible that users might decide
    to remove a plugin from their WordPress installation if they no longer require
    the functionality that it provides or they have found an alternative that they
    prefer.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何软件一样，用户可能会决定从他们的WordPress安装中移除插件，如果他们不再需要它提供的功能，或者他们找到了他们更喜欢的替代方案。
- en: When this happens, the plugin author must decide if all of the configuration
    data stored in the site's database should be left in place, making it easier to
    re-install the plugin down the road, or to remove all of this information, leaving
    a clean database behind.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，插件作者必须决定是否应该将存储在站点数据库中的所有配置数据保留在原位，以便将来更容易重新安装插件，或者移除所有这些信息，留下一个干净的数据库。
- en: This recipe shows how to create a de-installation function that will remove
    options data from a site's database.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何创建一个卸载函数，该函数将从站点的数据库中移除选项数据。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Storing user settings using arrays* recipe
    to have options data ready for deletion, and the resulting plugin should still
    be active in your development site. Alternatively, you can get the resulting code
    (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v3.php`) from the downloaded
    code bundle. You should rename the file `ch2-page-header-output-v3.php` as `ch2-page-header-output.php`,
    and have activated the plugin once before starting this recipe.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*使用数组存储用户设置*的配方，以便为删除准备选项数据，并且生成的插件在您的开发站点中仍然处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`第3章/ch2-page-header-output/ch2-page-header-output-v3.php`）。您应该将文件`ch2-page-header-output-v3.php`重命名为`ch2-page-header-output.php`，并在开始此配方之前激活插件一次。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Create a new file called `uninstall.php`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`uninstall.php`的新文件。
- en: 'Open the new file in a text editor and add the following code to it:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开新文件，并添加以下代码：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save and close the plugin file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the administration page of your development WordPress installation.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发WordPress安装的管理页面。
- en: Click on Plugins on the left-hand navigation menu.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中点击插件。
- en: Deactivate the `Chapter 2 - Page Header Output` plugin.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用`第2章 - 页面标题输出`插件。
- en: Make a copy of your plugin and uninstallation files to avoid losing them upon
    deletion of the plugin in the following steps. The copy should be moved outside
    of the `plugins` folder to avoid WordPress seeing two copies of the plugin.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下步骤中删除插件时，为了防止丢失，请复制您的插件和卸载文件。副本应移动到`plugins`文件夹之外，以避免WordPress看到两个插件副本。
- en: Click on the Delete link under the `Chapter 2 - Page Header Output` plugin.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`第2章 - 页面标题输出`插件下点击删除链接。
- en: Click on the OK button to delete all the plugin files.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定按钮以删除所有插件文件。
- en: '![](img/2dc856af-5ff9-4c2e-9e5f-3b55b7b6b853.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2dc856af-5ff9-4c2e-9e5f-3b55b7b6b853.png)'
- en: Depending on the configuration of your development site, you may be prompted
    to provide FTP credentials before WordPress is able to delete the plugin files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您开发站点的配置，在WordPress能够删除插件文件之前，您可能需要提供FTP凭据。
- en: 'Using your web server''s MySQL database administration tool, query the `wpdev_options`
    table of your WordPress installation for an option with the name `ch2pho_options`
    to see that the option has been deleted:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的Web服务器的MySQL数据库管理工具，查询您的WordPress安装中的`wpdev_options`表，查找名为`ch2pho_options`的选项，以查看该选项是否已被删除：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a plugin is inactive and a site administrator clicks on its deletion link,
    WordPress checks for the presence of a file called `uninstall.php` in the plugin
    directory. If the file exists and the user clicks the OK button to delete, WordPress
    proceeds with the deletion of all the plugin files and executes the content of
    the `uninstall.php` file. This file should contain straight PHP code that deletes
    all the plugin options and any other content created by the plugin's code. Once
    executed, the uninstall script will be deleted with the rest of the files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件处于非活动状态且网站管理员点击其删除链接时，WordPress会检查插件目录中是否存在名为`uninstall.php`的文件。如果文件存在且用户点击确定按钮以删除，WordPress将进行所有插件文件的删除并执行`uninstall.php`文件的内容。此文件应包含直接删除所有插件选项和插件代码创建的任何其他内容的PHP代码。一旦执行，卸载脚本将与文件一起被删除。
- en: Looking at the content of the uninstall script, the first few lines of code
    check for the presence of a constant that WordPress should have set before calling
    the script. If it is not present, the script will abort immediately for security
    purposes. This ensures that an external visitor knowing that a certain plugin
    is installed won't be able to try to delete it. Once the intent has been verified,
    the rest of the code checks for the existence of the `ch2pho_options` array that
    was created in the previous recipe and deletes it. If you created more than one
    option to store your configuration data, you will need to delete each option with
    individual calls to the `delete_option` function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查看卸载脚本的内容，前几行代码检查WordPress在调用脚本之前是否设置了某个常量。如果不存在，出于安全考虑，脚本将立即中止。这确保了知道已安装某个插件的外部访客无法尝试删除它。一旦验证了意图，其余的代码将检查之前配方中创建的`ch2pho_options`数组是否存在，并将其删除。如果您创建了多个选项来存储配置数据，您将需要使用`delete_option`函数的单独调用删除每个选项。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Storing user settings using arrays* recipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数组存储用户设置*的配方'
- en: Creating an administration page menu item in the settings menu
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设置菜单中创建管理页面菜单项
- en: After defining default values for plugin configuration options, the next step
    is to create a place where users will be able to view and change these values.
    By using the WordPress API, we are able to create new items in the administration
    menu that will later allow us to create custom plugin configuration pages. This
    recipe shows how to create a new menu item that will appear under the Settings
    subsection of the administration menu.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在为插件配置选项定义默认值之后，下一步是创建一个用户可以查看和更改这些值的地方。通过使用WordPress API，我们能够创建新的项目在管理菜单中，这将允许我们创建自定义插件配置页面。本配方展示了如何创建一个新菜单项，该菜单项将出现在管理菜单的设置子菜单下。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Storing user settings using arrays* recipe
    to have options data available to manage. Alternatively, you can get the resulting
    code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v3.php`) from the
    downloaded code bundle. You should rename the file `ch2-page-header-output-v3.php`
    as `ch2-page-header-output.php` before starting this recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*使用数组存储用户设置*的菜谱，以便有选项数据可供管理。或者，您可以从下载的代码包中获取结果代码（`第3章/ch2-page-header-output/ch2-page-header-output-v3.php`）。在开始此菜谱之前，您应将文件`ch2-page-header-output-v3.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the root directory of your WordPress development installation.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您WordPress开发安装的根目录。
- en: Open the `wp-config.php` file in a text editor.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`wp-config.php`文件。
- en: 'Set the `WP_DEBUG` variable to be `true`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`WP_DEBUG`变量设置为`true`：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the configuration file.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置文件。
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Add the following line of code to register a function to be called when WordPress
    is building the administration pages menu:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在WordPress构建管理页面菜单时被调用的函数：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_settings_menu`
    function:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到为`ch2pho_settings_menu`函数提供实现的代码：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save and close the plugin file.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the administration page of your development WordPress installation.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发WordPress安装的管理页面。
- en: Activate the `Chapter 2 - Page Header Output` plugin if you left it deactivated
    after following the previous recipe.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在遵循上一个菜谱后未激活`第2章 - 页面标题输出`插件，请激活它。
- en: Click on the Settings section on the left-hand navigation menu to expand it.
    You will see a new menu item called My Google Analytics in the tree, created from
    the code that was just added to the plugin.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航菜单中的设置部分以展开它。您将在树中看到一个名为“我的谷歌分析”的新菜单项，它是由刚刚添加到插件中的代码创建的。
- en: '![](img/d75eb1d6-056d-435f-8b21-746c63f24711.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d75eb1d6-056d-435f-8b21-746c63f24711.png)'
- en: Click on the My Google Analytics menu item. You will see an error message displayed,
    since WordPress cannot find the function intended to populate the configuration
    page. This error will go away once you perform the recipe titled *Rendering the
    admin page contents using HTML*.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“我的谷歌分析”菜单项。您将看到一个错误消息显示，因为WordPress找不到用于填充配置页面的函数。一旦您执行了名为*使用HTML渲染管理页面内容*的菜谱，此错误将消失。
- en: 'Back in the `wp-config.php` file, return the `WP_DEBUG` variable to its default
    value of `false`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wp-config.php`文件中，将`WP_DEBUG`变量恢复到其默认值`false`：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save and close the configuration file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭配置文件。
- en: If you had not set the `WP_DEBUG` variable to be `true` at the beginning of
    this recipe, WordPress would only display a blank page after performing step 13,
    instead of displaying an error message.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在菜谱开始时没有将`WP_DEBUG`变量设置为`true`，那么在执行步骤13后，WordPress将只显示一个空白页面，而不是显示错误消息。
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first line of code of this recipe registers a function to be called when
    WordPress is building the administration menu. When it is executed, the custom
    function that we created makes a call to the `add_options_page` function to add
    an item to the Settings menu. This function has a number of parameters that we
    will look at, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱的第一行代码注册了一个在WordPress构建管理菜单时被调用的函数。当它执行时，我们创建的自定义函数调用`add_options_page`函数向设置菜单添加一个项目。此函数有几个参数，我们将按以下方式查看：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first two parameters are text strings that will be visible to site administrators,
    with the first one appearing in the browser title bar or tab title, and the second
    being the text of the submenu item that will appear under the Settings menu.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个参数是文本字符串，将供网站管理员可见，第一个将出现在浏览器标题栏或标签页标题中，第二个是将在设置菜单下出现的子菜单项的文本。
- en: The third parameter is a bit more complicated and refers to the **user capability**
    required to be able to see and access this menu item. When creating users in a
    WordPress installation, each user is assigned one of the five default user roles
    (Subscriber, Administrator, Editor, Author, or Contributor). Each of these roles
    is mapped to a number of permissions that determine the actions that users with
    this role can perform. For a full list of roles and their associated capabilities,
    please refer to the WordPress Codex page on the topic ([https://codex.wordpress.org/Roles_and_Capabilities](https://codex.wordpress.org/Roles_and_Capabilities)).
    In this example, we used the user capability `manage_options`, which is assigned
    to users who have administrative rights on the site and to super admins when working
    in a network WordPress installation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数稍微复杂一些，指的是能够查看和访问此菜单项所需的**用户能力**。在WordPress安装中创建用户时，每个用户都被分配了五个默认用户角色之一（订阅者、管理员、编辑器、作者或贡献者）。这些角色中的每一个都映射到一组权限，这些权限决定了具有此角色的用户可以执行的操作。有关角色及其关联权限的完整列表，请参阅WordPress
    Codex页面上的相关主题（[https://codex.wordpress.org/Roles_and_Capabilities](https://codex.wordpress.org/Roles_and_Capabilities)）。在此示例中，我们使用了用户能力`manage_options`，它分配给具有站点管理权限的用户以及在网络上工作时的超级管理员。
- en: The fourth menu item, `menu_slug`, is a text string that will be used internally
    by WordPress to identify the menu item. This string should be unique to avoid
    conflicts with other plugins.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个菜单项，`menu_slug`，是一个将被WordPress内部使用的文本字符串，用于标识菜单项。此字符串应该是唯一的，以避免与其他插件发生冲突。
- en: The `menu_slug` name should be all lowercase to ensure that more advanced functionalities,
    such as WordPress meta boxes, work correctly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu_slug`名称应全部小写，以确保更高级的功能，如WordPress元框，能够正常工作。'
- en: The last parameter specifies the name of the function to be called to display
    the contents of the configuration page when the submenu item is clicked.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数指定当点击子菜单项时调用以显示配置页面内容的函数名称。
- en: The Settings menu is a perfect location for plugins that only require a single
    configuration page, as you may have seen when installing other plugins, while
    more complex plugins that require multiple menu sections should use the technique
    shown in the next recipe.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 设置菜单是只要求单个配置页面的插件的理想位置，正如您在安装其他插件时所见，而需要多个菜单部分的更复杂插件应使用下一道菜谱中所示的技术。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While new items will always be located under the default Settings menu items
    created by WordPress (General, Writing, Reading, and so on), plugin developers
    do have some control over the location of their plugin in the list.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然新项目始终位于WordPress创建的默认设置菜单项（一般、写作、阅读等）之下，但插件开发者确实可以控制他们的插件在列表中的位置。
- en: Settings hook priority to determine menu order
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置钩子优先级以确定菜单顺序
- en: 'As mentioned in the previous chapter, when action hooks were first introduced,
    the `add_action` function''s third parameter is used to indicate the priority
    of a registered callback over other functions registered for the same hook (in
    this case, the `admin_menu` hook). To ensure that the newly created menu item
    is as high as possible in the menu, the priority of the registered function can
    be set to a value of `1`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，当动作钩子首次引入时，`add_action`函数的第三个参数用于指示已注册的回调函数相对于为同一钩子（在这种情况下，`admin_menu`钩子）注册的其他函数的优先级。为了确保新创建的菜单项在菜单中尽可能高，可以设置注册函数的优先级为`1`：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It should be noted that other plugins can also set their callback to this priority.
    In such cases, alphabetical priority and activation sequence are other factors
    to determine which menu item will be displayed first after **Permalinks**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意，其他插件也可以将它们的回调设置为这个优先级。在这种情况下，字母顺序优先级和激活顺序是确定**永久链接**之后哪个菜单项首先显示的其他因素。
- en: See also
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Storing user settings using arrays* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数组存储用户设置*的菜谱'
- en: Creating a multi-level administration menu
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多级管理菜单
- en: When plugins grow in complexity, their configuration options often grow in numbers,
    giving users a high level of flexibility in choosing how the plugin behaves on
    their site. While it is possible to display all the plugin options on a single
    lengthy configuration page, creating a new top-level menu item with multiple sections
    can help organize parameters in logical groupings that will allow users to find
    what they are looking for more quickly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当插件变得复杂时，它们的配置选项数量通常会增长，这使用户在选择插件在其网站上如何表现时具有很高的灵活性。虽然可以在单个长配置页面上显示所有插件选项，但创建一个包含多个部分的新顶级菜单项可以帮助将参数组织成逻辑分组，使用户能够更快地找到他们想要的内容。
- en: This recipe shows how to create a new top-level menu item in the administration
    menu with an accompanying submenu item.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱展示了如何在管理菜单中创建一个带有相关子菜单项的新顶级菜单项。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录。
- en: Create a new directory called `ch3-multi-level-menu`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch3-multi-level-menu` 的新目录。
- en: Navigate to this directory and create a new text file called `ch3-multi-level-menu.php`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为 `ch3-multi-level-menu.php` 的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Multi-level menu`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为 `第3章 - 多级菜单`。
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s administration menu:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在WordPress准备显示网站管理菜单数据时将被调用的函数：
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code section to provide an implementation for the `ch3mlm_admin_menu`
    function:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码部分添加到为 `ch3mlm_admin_menu` 函数提供实现的代码段：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save and close the plugin file.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Find and download a PNG format 24 x 24 pixel icon from a site, such as IconArchive
    ([http://www.iconarchive.com](http://www.iconarchive.com)), resize it to 20 x
    20 pixels, and save it as `myplugin.png` in the plugin directory.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网站，如IconArchive ([http://www.iconarchive.com](http://www.iconarchive.com))，找到一个PNG格式24
    x 24像素的图标，将其调整大小为20 x 20像素，并将其保存为 `myplugin.png` 在插件目录中。
- en: Navigate to the Plugins section of your site's administration area.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的网站管理区域的插件部分。
- en: Activate your new plugin.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活你的新插件。
- en: You will now see a new menu item in the administration menu.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将在管理菜单中看到一个新菜单项。
- en: '![](img/818ffe43-3165-4096-85d5-e426a5e392ec.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/818ffe43-3165-4096-85d5-e426a5e392ec.png)'
- en: Expand the top-level new menu item to see the submenu item.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开顶级新菜单项以查看子菜单项。
- en: As with the previous recipe, clicking on the menu items will display an error,
    since we have not implemented a function to generate actual content for these
    menu items. We will not be implementing pages for these two menu items, but you
    can use a technique similar to what is shown in the *Rendering the admin page
    contents using HTML* recipe to create your own `ch3mlm_my_complex_main` and `ch3mlm_my_complex_submenu`
    functions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的食谱类似，点击菜单项将显示错误，因为我们尚未实现为这些菜单项生成实际内容的函数。我们不会为这两个菜单项创建页面，但你可以使用与 *使用HTML渲染管理页面内容*
    食谱中所示类似的技术来创建自己的 `ch3mlm_my_complex_main` 和 `ch3mlm_my_complex_submenu` 函数。
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `add_menu_page` function is very similar to the `add_options_page` function
    seen in the previous recipe, with its first five parameters being identical:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_menu_page` 函数与前面食谱中看到的 `add_options_page` 函数非常相似，其前五个参数是相同的：'
- en: '[PRE17]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The last two items are specific to this function, with the first allowing us
    to display a custom icon in the menu next to our new top-level item, and the second
    specifying where the new menu should be positioned within the administration menu.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两项是针对此功能的特定内容，第一项允许我们在菜单中显示自定义图标，位于我们的新顶级项旁边，第二项指定新菜单应在管理菜单中的位置。
- en: While it might seem interesting to use the `position` argument of the `add_menu_page`
    function to specify an exact position for a new menu item, doing so is risky,
    since only one menu item will be displayed if two plugins create entries with
    the same `position` value. If the `position` parameter is not specified, the new
    menu item will appear at the bottom of the menu structure, which should be fine
    in most cases.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用 `add_menu_page` 函数的 `position` 参数指定新菜单项的确切位置可能看起来很有趣，但这样做是危险的，因为如果两个插件创建具有相同
    `position` 值的条目，则只会显示一个菜单项。如果没有指定 `position` 参数，新菜单项将出现在菜单结构的底部，这在大多数情况下应该是可以的。
- en: 'Once the first menu item has been created, the `add_submenu_page` function
    can be used to attach a submenu item. The following are its parameters, which
    are virtually identical to the `add_options_page` function, except for the first
    parameter, which should be the unique string identifier of the top-level menu
    item to which the submenu should be attached:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了第一个菜单项，就可以使用`add_submenu_page`函数来附加子菜单项。以下是其参数，它们与`add_options_page`函数几乎相同，除了第一个参数，它应该是要附加子菜单项的顶级菜单项的唯一字符串标识符：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: While it is possible to use this technique to create top-level menu items for
    plugins with a single configuration page, these simpler extensions should create
    a single entry under the Settings menu, as shown in the previous recipe.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用此技术为具有单个配置页面的插件创建顶级菜单项，但这些更简单的扩展应该在设置菜单下创建单个条目，如前一个配方中所示。
- en: See also
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating an administration page menu item in the Settings menu* recipe
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在设置菜单中创建管理页面菜单项*的配方'
- en: Adding menu items leading to external pages
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加指向外部页面的菜单项
- en: While the WordPress plugin repository offers a number of useful sections under
    each plugin's page to host important information, including its description, FAQs,
    screenshots and support forums, a number of developers prefer to move documentation,
    FAQs, and even support to their own website. This allows them to create more feature-rich
    content for these sections and to create a more customized brand experience, especially
    in the case of plugins that offer free and premium versions.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然WordPress插件库在每个插件页面上提供许多有用的部分来托管重要信息，包括其描述、常见问题解答、截图和支持论坛，但许多开发者更喜欢将文档、常见问题解答甚至支持转移到他们自己的网站。这使他们能够为这些部分创建更多功能丰富的内容，并创建一个更定制的品牌体验，尤其是在提供免费和付费版本的插件的情况下。
- en: This recipe shows how to add menu items that will lead users to external web
    pages.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了如何添加将引导用户到外部网页的菜单项。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating a multi-level administration
    menu* recipe to have a multi-level menu in place in your administration interface
    and the resulting plugin should still be active. Alternatively, you can get the
    resulting code (`Chapter 3/ch3-multi-level-menu/ch3-multi-level-menu.php`) from
    the downloaded code bundle.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*创建多级管理菜单*的配方，以便在管理界面中设置多级菜单，并且生成的插件仍然处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`第3章/ch3-multi-level-menu/ch3-multi-level-menu.php`）。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到的...
- en: Navigate to the `ch3-multi-level-menu` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch3-multi-level-menu`文件夹。
- en: Open the `ch3-multi-level-menu.php` file in a text editor.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch3-multi-level-menu.php`文件。
- en: 'Add the following lines of code at the end of the `ch3mlm_admin_menu` function
    after the two calls to `add_submenu_page`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`add_submenu_page`的两个调用之后，在`ch3mlm_admin_menu`函数的末尾添加以下代码行：
- en: '[PRE19]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save and close the plugin file.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: 'Refresh the administration page of your development WordPress installation
    to see the new submenu item under the My Complex Plugin menu:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新您开发WordPress安装的管理页面，以查看“我的复杂插件”菜单下的新子菜单项：
- en: '![](img/dd20aa1d-3145-4147-bc2f-d68947d222de.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd20aa1d-3145-4147-bc2f-d68947d222de.png)'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As calls to the menu creation functions are made by the core WordPress code
    and all active plugins, the system builds an array containing all the items that
    will be displayed to the current user based on their access level. This recipe''s
    code accesses the WordPress global variable containing this array and simply inserts
    an extra element under the `ch3mlm-main-menu` parent menu that was created in
    the previous recipe. The data that gets added is an array containing three elements:
    the label of the menu item, the permissions required to see the item, and the
    URL that will be assigned to the new menu link.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于核心WordPress代码和所有活动插件都会调用菜单创建函数，系统会构建一个数组，包含将根据当前用户的访问级别显示的所有项目。本配方的代码访问包含此数组的WordPress全局变量，并在上一个配方中创建的`ch3mlm-main-menu`父菜单下简单地插入一个额外元素。添加的数据是一个包含三个元素的数组：菜单项的标签、查看项所需的权限以及将分配给新菜单链接的URL。
- en: While this code works in current versions of WordPress, and has worked for many
    versions, there is a chance that it might no longer work at some point if WordPress
    changes the way it builds its menus. That being said, if changes are made to the
    way that menus are constructed, there will likely be new APIs introduced to reproduce
    this functionality, as it is widely used.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此代码在当前版本的WordPress中有效，并且对许多版本都有效，但如果WordPress更改构建菜单的方式，它可能在某个时候不再有效。话虽如此，如果对菜单构建方式进行了更改，很可能会引入新的API来重现此功能，因为它被广泛使用。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a multi-level administration menu* recipe
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建多级管理菜单*的配方'
- en: Hiding items which users should not access from the default menu
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏用户不应访问的默认菜单项
- en: Many users praise WordPress for its ease of use and streamlined administration
    interface. That being said, almost everyone who has deployed it to new users has
    instructed them to avoid certain menu items, as they do not need to enter these
    sections and could potentially introduce site malfunctions if they modify settings
    in these areas.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 许多用户称赞WordPress易于使用和简化的管理界面。尽管如此，几乎每个将其部署给新用户的用户都指示他们避免某些菜单项，因为他们不需要进入这些部分，如果他们修改这些区域的设置，可能会引入网站故障。
- en: A better solution than prevention through training is to use a few simple API
    functions to hide the undesired menu items. This recipe shows how to use these
    functions to remove the Comments editor and Permalinks settings menu items.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 比通过培训预防更好的解决方案是使用几个简单的API函数来隐藏不需要的菜单项。本配方展示了如何使用这些函数来移除评论编辑器和永久链接设置菜单项。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch3-hide-menu-item`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch3-hide-menu-item`的新目录。
- en: Navigate to this directory and create a new text file called `ch3-hide-menu-item.php`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch3-hide-menu-item.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Hide Menu Item`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为`第3章 - 隐藏菜单项`。
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s navigation menu:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在WordPress准备显示网站导航菜单数据时将被调用的函数：
- en: '[PRE20]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code section to provide an implementation for the `ch3hmi_hide_menu_item`
    function, hiding the Comments menu item:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供`ch3hmi_hide_menu_item`函数实现的实现中，隐藏评论菜单项：
- en: '[PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add an extra function call to the `ch3hmi_hide_menu_item` function to hide
    the Permalinks submenu item found under the Settings menu:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`ch3hmi_hide_menu_item`函数添加额外的函数调用，以隐藏设置菜单下找到的永久链接子菜单项：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save and close the plugin file.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins section of the administration interface.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理界面的插件部分。
- en: Activate your new plugin.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: 'Look at the administration menu to see that the Comments menu is no longer
    visible:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看管理菜单以确认评论菜单不再可见：
- en: '![](img/f65a53da-98a5-431f-9a66-aa4f8caf9f0e.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f65a53da-98a5-431f-9a66-aa4f8caf9f0e.png)'
- en: Expand the Settings menu to see that the Permalinks submenu item is not visible
    either.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开设置菜单以查看永久链接子菜单项也不可见。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The default WordPress administration menu uses the names of the PHP code files
    used to render each section as their unique identifiers. One way to quickly find
    out the identifier for a menu item is to hover the mouse cursor over it in a web
    browser and to look at the address that the link points to. In the case of the
    Comments menu item, the URL is `http://localhost/wp-admin/edit-comments.php` ;
    thus the use of `edit-comments.php` in the call to `remove_menu_page`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的WordPress管理菜单使用用于渲染每个部分的PHP代码文件的名称作为它们的唯一标识符。快速找到菜单项标识符的一种方法是在网页浏览器中将鼠标悬停在其上，并查看链接指向的地址。就评论菜单项而言，URL是`http://localhost/wp-admin/edit-comments.php`；因此，在`remove_menu_page`调用中使用`edit-comments.php`。
- en: A similar technique was used to determine the arguments to pass to the `remove_submenu_page`
    function, identifying that the Settings section has a URL of `http://localhost/wp-admin/options-general.php`
    , while the Permalinks section has the address `http://localhost/wp-admin/options-permalink.php`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 确定传递给`remove_submenu_page`函数的参数时使用了类似的技巧，确定设置部分有`http://localhost/wp-admin/options-general.php`的URL，而永久链接部分有`http://localhost/wp-admin/options-permalink.php`的地址。
- en: Rendering the admin page contents using HTML
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML渲染管理页面内容
- en: Once a custom menu item has been created, WordPress will call the function associated
    with it when it gets visited. The assigned function's main purpose is to render
    a configuration page containing a form with all the options available to the user
    and to send the captured data back to WordPress for processing.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了一个自定义菜单项，WordPress在访问它时会调用与其关联的函数。分配给该函数的主要目的是渲染一个包含所有用户可用选项的配置页面，并将捕获的数据发送回WordPress进行处理。
- en: 'There are two main methods that can be used to render plugin configuration
    pages: straight HTML and the Settings API. This recipe explores the use of HTML
    to create a configuration panel, while a later recipe will show how to use the
    Settings API to prepare the page output.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用两种主要方法来渲染插件配置页面：直接HTML和设置API。本食谱探讨了使用HTML创建配置面板的方法，而后续的食谱将展示如何使用设置API来准备页面输出。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating an administration page menu item
    in the Settings menu* recipe and the resulting plugin should still be active in
    your development site. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v4.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v4.php` as `ch2-page-header-output.php`
    before starting this recipe.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*在设置菜单中创建管理页面菜单项*的食谱，并且生成的插件在你的开发站点上仍然处于活动状态。或者，你可以从下载的代码包中获取生成的代码（`第3章/ch2-page-header-output/ch2-page-header-output-v4.php`）。在开始本食谱之前，你应该将文件`ch2-page-header-output-v4.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Add the following lines of code to implement the rendering code for the plugin
    options page:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到实现插件选项页面渲染代码中：
- en: '[PRE23]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save and close the plugin file.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Click on the Settings section in the administration pages.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理页面中的“设置”部分。
- en: Click on the My Google Analytics menu item to display the plugin configuration
    page.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“我的Google Analytics”菜单项以显示插件配置页面。
- en: '![](img/42f829d0-0345-462a-8cb6-2d11a589aaf3.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42f829d0-0345-462a-8cb6-2d11a589aaf3.png)'
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Any output generated within the configuration page implementation function will
    be sent to the browser, enclosed within the WordPress administration interface
    layout. In this recipe's code, we first start by using the `ch2pho_get_options`
    function that we defined earlier in this chapter to retrieve all options for the
    plugin, conveniently organized in an array that we can store in a single variable.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置页面实现函数内生成的任何输出都将被发送到浏览器，并包含在WordPress管理界面布局中。在本食谱的代码中，我们首先使用我们在此章中定义的`ch2pho_get_options`函数来检索插件的所有选项，方便地组织在一个数组中，我们可以将其存储在一个单独的变量中。
- en: We then use a closing PHP bracket to be able to write direct HTML code for the
    rest of the function's body, sending this content directly to the browser. The
    HTML code takes care of creating a standard form, rendering a text field to display
    and accepting new values for the Google Analytics Account Number, and a checkbox
    for the user to specify whether or not outgoing links should be tracked. Finally,
    the HTML code adds a Submit button to allow users to submit any changes made to
    the plugin's configuration.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用一个闭合的PHP括号来能够为函数体的其余部分编写直接的HTML代码，并将此内容直接发送到浏览器。HTML代码负责创建一个标准表单，渲染一个文本字段以显示并接受新的Google
    Analytics账户号码值，以及一个复选框供用户指定是否应跟踪出站链接。最后，HTML代码添加了一个提交按钮，允许用户提交对插件配置所做的任何更改。
- en: Taking a closer look at the code, it also contains small snippets of PHP code
    that display the current configuration values when the options page is displayed
    and uses the `checked` WordPress utility function to output the correct HTML code
    when the passed argument is true.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看代码，它还包含了一些小的PHP代码片段，当显示选项页面时显示当前的配置值，并使用`checked` WordPress实用函数在传递的参数为真时输出正确的HTML代码。
- en: The biggest advantage of using straight HTML to render a plugin's configuration
    page is that it allows for the creation of intricate layouts to present all of
    the options to the end user. This is in sharp contrast to using the Settings API,
    as we will see in a later recipe. HTML is also easier to understand for many web
    designers than working with intricate functions.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用纯HTML渲染插件配置页面的最大优点是，它允许创建复杂的布局来向最终用户展示所有选项。这与我们在后面的菜谱中将要看到的使用设置API形成鲜明对比。HTML对于许多网页设计师来说也比处理复杂函数更容易理解。
- en: It should be noted that any changes submitted from this form in its current
    state won't be saved, since we have not implemented the code necessary to process
    the submitted data and store it back in the `options` database table. This will
    be covered in the next recipe.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，由于我们没有实现处理提交数据并将其存储回`options`数据库表的代码，因此在此状态下提交的任何更改都不会被保存。这将在下一个菜谱中介绍。
- en: There's more...
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As soon as user submission processing comes into play, it is important to think
    about security, to be sure to avoid the most common application security risks
    ([https://www.owasp.org/index.php/Top_10_2017-Top_10](https://www.owasp.org/index.php/Top_10_2017-Top_10)).
    The form that was created in this recipe is no exception.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户提交处理开始发挥作用，考虑安全性就变得非常重要，以确保避免最常见的应用程序安全风险（[https://www.owasp.org/index.php/Top_10_2017-Top_10](https://www.owasp.org/index.php/Top_10_2017-Top_10)）。在这个菜谱中创建的表单也不例外。
- en: wp_nonce_field
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wp_nonce_field
- en: The `wp_nonce_field` function that was used in this recipe is part of a security
    measure to ensure that the data being sent for submission comes from the WordPress
    administration pages and not an external source. By adding this function call,
    a hidden text field is added to the plugin configuration form with information
    that will be checked when the post data is received.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中使用的`wp_nonce_field`函数是确保要提交的数据来自WordPress管理页面而不是外部来源的安全措施的一部分。通过添加此函数调用，将在插件配置表单中添加一个隐藏的文本字段，当接收到帖子数据时将检查其中的信息。
- en: 'While it is optional, the first argument of the function is a unique identifier
    that should always be set to ensure better security. If it is not set, default
    values will be used, facilitating security breaches. The function also has a number
    of other optional parameters, as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是可选的，但函数的第一个参数是一个唯一标识符，应始终设置以确保更好的安全性。如果没有设置，将使用默认值，这可能会促进安全漏洞。该函数还有许多其他可选参数，如下所示：
- en: '[PRE24]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The other three arguments are used to specify a name for the nonce, which would
    need to be matched on the receiving end, a Boolean variable to indicate if the
    referer field should be set for validation, and another Boolean parameter to determine
    whether the hidden form field should be displayed immediately or returned.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 其他三个参数用于指定nonce的名称，该名称需要在接收端进行匹配，一个布尔变量用于指示是否应设置referer字段以进行验证，以及另一个布尔参数用于确定是否应立即显示隐藏的表单字段或返回。
- en: See also
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating an administration page menu item in the Settings menu* recipe
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置菜单中创建一个管理页面菜单项的菜谱
- en: The *Storing user settings using arrays* recipe
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组存储用户设置的菜谱
- en: Processing and storing plugin configuration data
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理和存储插件配置数据
- en: With the configuration page in place, plugin users will be able to modify configuration
    options and submit them to be stored in the WordPress database. The missing link
    at this time is the creation of a data processing function that will receive the
    data posted by the user and store it in the site's `options` table.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置页面就绪后，插件用户将能够修改配置选项并将它们提交以存储在WordPress数据库中。目前缺失的链接是创建一个数据处理函数，该函数将接收用户发布的数据并将其存储在网站的`options`表中。
- en: This recipe describes how to implement a data processing function to validate
    that the information being sent for storage is legitimate and to store the information
    in an options array.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱描述了如何实现一个数据处理函数，以验证要存储的信息是合法的，并将信息存储在选项数组中。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Rendering the admin page contents using
    HTML* recipe and the resulting plugin should still be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v5.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v5.php`
    as `ch2-page-header-output.php` before starting this recipe.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了“使用HTML渲染管理页面内容”的菜谱，并且生成的插件仍然在您的开发站点中激活。或者，您可以从下载的代码包中获取生成的代码（`第3章/ch2-page-header-output/ch2-page-header-output-v5.php`）。在开始此菜谱之前，您应该将文件
    `ch2-page-header-output-v5.php` 重命名为 `ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的 `ch2-page-header-output` 文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 `ch2-page-header-output.php` 文件。
- en: 'Add the following line of code to register a function to be called when WordPress
    first identifies that the requested page is an administration page:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个在WordPress首次识别请求的页面是管理页面时被调用的函数：
- en: '[PRE25]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_admin_init`
    function:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `ch2pho_admin_init` 函数实现的步骤中：
- en: '[PRE26]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following code section to provide an implementation for the `process_ch2pho_options`
    function that was declared in the previous step:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供 `process_ch2pho_options` 函数实现的步骤中，该函数在之前的步骤中已声明：
- en: '[PRE27]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save and close the plugin file.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Click on the Settings section of the administration menu.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理菜单中的设置部分。
- en: Click on the My Google Analytics menu item to display the configuration page.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“我的Google Analytics”菜单项以显示配置页面。
- en: Change the value of one of the fields and click on the Submit button.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改其中一个字段的值并点击提交按钮。
- en: When the page refreshes, you will see that the values displayed reflect the
    values submitted.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当页面刷新时，您将看到显示的值反映了提交的值。
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is the first to introduce an action hook that has a variable name.
    Instead of writing a specific action hook name when calling `add_action`, this
    hook name starts with the words `admin_post_` and is followed by the name of an
    action that it expects to match with a hidden form field. In this case, the action
    name is `save_ch2pho_options`. Going back to the previous recipe, you can see
    that this text is the same as the one that was placed in the hidden form field
    called `action`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱是第一个介绍具有变量名称的动作钩子的菜谱。在调用 `add_action` 时，不是编写特定的动作钩子名称，而是以单词 `admin_post_`
    开头，后跟它期望与隐藏表单字段匹配的动作名称。在这种情况下，动作名称是 `save_ch2pho_options`。回到之前的菜谱，您可以看到这段文本与放置在名为
    `action` 的隐藏表单字段中的文本相同：
- en: '[PRE28]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When the configuration page form is submitted, it sends all data to the `admin-post.php`
    script, which checks for an `action` field and then sends the data that it received
    to the associated function, if present.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置页面表单提交时，它将所有数据发送到 `admin-post.php` 脚本，该脚本检查 `action` 字段，然后将它接收到的数据发送到关联的函数（如果存在）。
- en: 'Once the processing function is executed, the calls to `current_user_can` and
    `check_admin_referer` are security measures where we check to see whether the
    user who is currently logged in has administrative rights and whether the nonce
    field that was part of the form is present. An error in these permission checks
    will result in a specific error message, letting the user know that he does not
    have the rights to perform this action, while the nonce check will display a vague
    error message to throw off potential hackers:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了处理函数，对 `current_user_can` 和 `check_admin_referer` 的调用是安全措施，其中我们检查当前登录的用户是否具有管理权限，以及表单的一部分是否包含nonce字段。这些权限检查中的错误将导致特定的错误消息，告知用户他没有执行此操作的权限，而nonce检查将显示一个模糊的错误消息以迷惑潜在的攻击者：
- en: '![](img/d6d514ee-fb6b-4abd-8c0a-818b556db561.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d6d514ee-fb6b-4abd-8c0a-818b556db561.png)'
- en: The rest of the function focuses on retrieving the current set of plugin options
    using the `ch2pho_get_options` function, processing the posted fields, and storing
    the updated values back in the site database. While using `foreach` loops might
    seem to be overkill to store two simple data fields, this approach can easily
    scale up to support large amounts of configuration fields.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的其余部分专注于使用`ch2pho_get_options`函数检索当前插件选项集，处理提交的字段，并将更新的值存储回站点数据库。虽然使用`foreach`循环来存储两个简单的数据字段可能看起来有些过度，但这种方法可以轻松扩展以支持大量的配置字段。
- en: The final step is a call to the `wp_redirect` function to send the browser back
    to the plugin options page after all the data has been stored. It is important
    to always call the `exit` PHP function after a call to `wp_redirect`, as shown
    in this recipe.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是调用`wp_redirect`函数，在所有数据存储完毕后将浏览器重定向回插件选项页面。在调用`wp_redirect`之后始终调用`exit`
    PHP函数非常重要，如本配方中所示。
- en: See also
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Rendering the admin page contents using HTML* recipe
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML渲染管理页面内容的配方
- en: Displaying a confirmation message when options are saved
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在保存选项时显示确认消息
- en: An important usability aspect of any user interface is to display an acknowledgement
    message when users have completed a task successfully. As you may have noticed
    in the previous recipe, WordPress does not provide any user feedback by default
    after configuration data has been saved to the options table.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 任何用户界面的一个重要可用性方面是在用户成功完成任务后显示确认消息。正如你可能在前一个配方中注意到的，WordPress在将配置数据保存到选项表后默认不提供任何用户反馈。
- en: This recipe explains how to display an acknowledgement message on the configuration
    page after the user has updated the plugin's configuration options.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方解释了如何在用户更新插件配置选项后在配置页面上显示确认消息。
- en: Getting ready
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Processing and storing plugin configuration
    data* recipe and the resulting plugin should still be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v6.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v6.php`
    to `ch2-page-header-output.php` before starting this recipe.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*处理和存储插件配置数据*配方，并且生成的插件仍然在你的开发站点中处于活动状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v6.php`）。在开始本配方之前，你应该将文件`ch2-page-header-output-v6.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Modify the call to `wp_redirect` at the end of the `process_ch2pho_options`
    function, as follows, with modifications shown in bold:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`process_ch2pho_options`函数末尾对`wp_redirect`的调用，如下所示，加粗部分表示修改：
- en: '[PRE29]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code (in bold) after the configuration page title within
    the `ch2pho_config_page` function:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch2pho_config_page`函数中配置页面标题之后添加以下代码（加粗）：
- en: '[PRE30]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save and close the plugin file.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Click on the Settings section of the administration menu.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理菜单中的设置部分。
- en: Click on the My Google Analytics menu item.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“我的谷歌分析”菜单项。
- en: Change the value of one of the fields and click on the Submit button to see
    the newly created message indicating that the settings have been saved.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改其中一个字段的值并点击提交按钮，以查看新创建的消息，指示已保存设置。
- en: '![](img/07a9b0a1-1c80-481e-be7c-c0d3ee60e4d4.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07a9b0a1-1c80-481e-be7c-c0d3ee60e4d4.png)'
- en: How it works...
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When a redirection call is made, user-submitted fields and PHP variables do
    not carry forward to the target page. Therefore, we need to use another method,
    query arguments, to determine that a confirmation message should be displayed.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行重定向调用时，用户提交的字段和PHP变量不会传递到目标页面。因此，我们需要使用另一种方法，即查询参数，来确定应该显示确认消息。
- en: The first part of the recipe modifies the existing call to `wp_redirect` slightly
    to add a new query variable called `message`, set to a value of `1`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 配方的第一部分稍微修改了现有的`wp_redirect`调用，添加了一个名为`message`的新查询变量，并将其设置为值`1`。
- en: Once it receives this variable, the code responsible for rendering the options
    page can display a message, following the standard WordPress styling.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦接收到这个变量，负责渲染选项页面的代码可以显示一条消息，遵循标准的WordPress样式。
- en: The same mechanism could be used to display different messages based on the
    outcome of the options storage. For example, if some fields need to receive data
    formatted a certain way, the `process_ch2pho_options` function could set the message
    value differently depending on the success or failure of the data processing operation.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的机制可以用来根据选项存储的结果显示不同的消息。例如，如果某些字段需要以某种方式格式化接收数据，`process_ch2pho_options`函数可以根据数据处理操作的成功或失败设置不同的消息值。
- en: See also
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Processing and storing plugin configuration data* recipe
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理和存储插件配置数据**的配方'
- en: Adding custom help pages
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义帮助页面
- en: As descriptive as field labels can be, a good plugin always needs to be accompanied
    by a set of documentation to allow users to quickly understand how to activate
    the plugin and perform the right steps to get the expected results. While a `ReadMe`
    file is often what developers first think of producing, users almost never read
    an external file or instructions on the official WordPress plugin page, they just
    install the plugin and try to figure it out by themselves.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管字段标签可以尽可能详细，但一个好的插件总是需要一套文档来帮助用户快速了解如何激活插件并执行正确的步骤以获得预期的结果。虽然`ReadMe`文件通常是开发者首先想到要生产的，但用户几乎从不阅读外部文件或官方WordPress插件页面上的说明，他们只是安装插件并试图自己弄清楚。
- en: To address this concern, WordPress introduced the ability to create elaborate
    multi-section help pages right in the plugin's administration pages to enable
    users to quickly get answers to their questions. This recipe shows you how to
    register the appropriate callback function to add a help section to your plugin
    configuration page, containing multiple tabs of information.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，WordPress引入了在插件管理页面中创建详细的多节帮助页面的能力，使用户能够快速找到问题的答案。这个配方展示了如何注册适当的回调函数，将帮助部分添加到你的插件配置页面，包含多个信息标签页。
- en: Getting ready
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Displaying a confirmation message when
    options are saved* recipe, and the resulting plugin should still be active in
    your development site. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v7.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v7.php` as `ch2-page-header-output.php`
    before starting this recipe.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了**保存选项时显示确认消息**的配方，并且生成的插件仍然在你的开发站点上处于活动状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v7.php`）。在开始此配方之前，你应该将文件`ch2-page-header-output-v7.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: Find the `ch2pho_settings_menu` function in the existing code.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有代码中找到`ch2pho_settings_menu`函数。
- en: 'Modify the code to store the return value of the `add_options_page` function
    call to a variable:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改代码以将`add_options_page`函数调用的返回值存储到变量中：
- en: '[PRE31]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following block of code to the `ch2pho_settings_menu` function to register
    an action that will be called when the plugin''s options page is loaded:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到`ch2pho_settings_menu`函数中，以注册一个在插件选项页加载时将被调用的操作：
- en: '[PRE32]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following code at the end of the plugin file to implement the newly
    declared `ch2pho_help_tabs` function:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件文件末尾添加以下代码以实现新声明的`ch2pho_help_tabs`函数：
- en: '[PRE33]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_plugin_help_instructions`
    function:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供`ch2pho_plugin_help_instructions`函数实现的代码中：
- en: '[PRE34]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following code section to provide an implementation for the `ch2pho_plugin_help_faq`
    function:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供`ch2pho_plugin_help_faq`函数实现的代码中：
- en: '[PRE35]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Save and close the plugin file.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Click on the Settings section of the administration menu.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理菜单中的“设置”部分。
- en: Click on the My Google Analytics menu to display the plugin configuration page.
    You will now see a Help tab appear in the top-right corner of the page.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“我的Google Analytics”菜单以显示插件配置页面。现在你将在页面的右上角看到一个帮助标签。
- en: Click on the Help tab to see all of the help content that has been added to
    the plugin.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击帮助标签以查看已添加到插件的所有帮助内容。
- en: '![](img/35b9891e-780b-4c86-96c4-dece2de0d7d7.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/35b9891e-780b-4c86-96c4-dece2de0d7d7.png)'
- en: How it works...
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As first discussed in the *Processing and storing plugin configuration data*
    recipe, some WordPress action hooks have names that contain a variable element
    that allows the plugin developer to get code executed when a specific page is
    rendered, or when data from a specific form is submitted. In this example, the
    `load-<pagename>` hook is used to register a function that gets executed when
    a specific administration page is accessed by the user.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 *处理和存储插件配置数据* 食谱中首次讨论的那样，一些 WordPress 动作钩子的名称包含一个变量元素，允许插件开发者获取在渲染特定页面或提交特定表单数据时执行的代码。在这个例子中，`load-<pagename>`
    钩子用于注册一个函数，当用户访问特定的管理页面时，该函数将被执行。
- en: Once the callback occurs, the function's code retrieves a reference to the WordPress
    screen object, which contains data about the screen that is currently displayed,
    along with a number of utility functions to manipulate and add content to the
    page. The code from the recipe then proceeds to register functions to render the
    content of two sections in the Help tab using the `add_help_tab` function.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦回调发生，函数的代码会检索 WordPress 屏幕对象的引用，该对象包含有关当前显示的屏幕的数据，以及一些用于操作和向页面添加内容的实用函数。食谱中的代码随后继续注册函数，使用
    `add_help_tab` 函数渲染帮助标签中两个部分的内容。
- en: The `add_help_tab` function is a little different from the functions that we
    have seen before, expecting a single array of options as its parameter. These
    options indicate a unique identifier for the menu section, a title to be displayed
    on each tab, and the name of the function that will render the tab contents. It
    is also possible to replace the callback argument with a parameter called content,
    which would directly contain the HTML code intended to be displayed in the Help
    tab. With this information, WordPress is able to integrate the provided HTML code
    when rendering the options page interface, including all of the necessary wrapper
    code to make the Help tab open and close, as well as allowing the user to switch
    between the different sections.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_help_tab` 函数与我们之前看到的函数略有不同，它期望一个包含单个选项数组的参数。这些选项指示菜单部分的唯一标识符、每个标签上显示的标题以及将渲染标签内容的函数的名称。还可以用名为
    content 的参数替换回调参数，它将直接包含要在帮助标签中显示的 HTML 代码。有了这些信息，WordPress 能够在渲染选项页面界面时集成提供的
    HTML 代码，包括所有必要的包装代码，以便帮助标签可以打开和关闭，并允许用户在不同部分之间切换。'
- en: The other function used in this recipe, `set_help_sidebar`, is even simpler
    than `add_help_tab`, with a single argument indicating the HTML content to be
    displayed on the right-hand side of the help section.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中使用的另一个功能 `set_help_sidebar` 比使用 `add_help_tab` 的功能还要简单，它只需要一个参数来指示要在帮助部分右侧显示的
    HTML 内容。
- en: See also
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Rendering the admin page contents using HTML* recipe
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 HTML 渲染管理页面内容* 的食谱'
- en: Rendering the admin page contents using the Settings API
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设置 API 渲染管理页面内容
- en: In addition to creating administration pages through HTML code, WordPress also
    offers a set of functions referred to as the Settings API that can be used to
    automate the creation of complex configuration pages. While the work required
    to put this rendering technique in place is a bit overkill for plugins that only
    have a handful of options, it is definitely useful if you are dealing with tens
    or hundreds of configuration fields, simplifying the task of writing out HTML
    code for every single item to calling a single function for each of them. It also
    provides some automation around the processing and storing of plugin configuration
    data.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过 HTML 代码创建管理页面之外，WordPress 还提供了一套称为设置 API 的函数，可用于自动化创建复杂的配置页面。虽然将这种渲染技术应用于仅有一小部分选项的插件可能有些过度，但如果您要处理数十或数百个配置字段，这无疑非常有用，因为它简化了为每个单独的项目编写
    HTML 代码的任务，只需调用每个项目的单个函数即可。它还提供了一些关于插件配置数据处理和存储的自动化功能。
- en: This recipe explains how to specify the contents of a configuration page using
    the Settings API and how to provide rendering functions for the most commonly
    used types of form field used in configuration pages. It uses the same set of
    configuration options as the other recipes in this chapter to show how the two
    techniques compare.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱解释了如何使用设置 API 指定配置页面的内容，以及如何为配置页面中最常用的表单字段类型提供渲染函数。它使用了本章中其他食谱相同的配置选项集，以展示两种技术的比较。
- en: How to do it...
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Navigate to the WordPress plugin directory of your development installation.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的开发安装的WordPress插件目录。
- en: Create a new directory called `ch3-settings-api`.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch3-settings-api`的新目录。
- en: Navigate to this directory and create a new text file called `ch3-settings-api.php`.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到该目录并创建一个名为`ch3-settings-api.php`的新文本文件。
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Settings API`.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器中打开新文件，并在插件文件顶部添加一个适当的标题，将插件命名为“第3章 - 设置API”。
- en: 'Add the following line of code to register a function that will be called when
    WordPress activates the plugin:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，该函数将在WordPress激活插件时被调用：
- en: '[PRE36]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following code section to provide an implementation for the `ch3sapi_set_default_options`
    function to set default plugin options:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加到提供`ch3sapi_set_default_options`函数实现的代码中，以设置默认插件选项：
- en: '[PRE37]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following code to provide an implementation for the `ch3sapi_get_options`
    function:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以提供`ch3sapi_get_options`函数的实现：
- en: '[PRE38]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following registration function to associate a callback with the `admin_init`
    action hook:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下注册函数以将回调与`admin_init`动作钩子相关联：
- en: '[PRE39]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add an implementation for the `ch3sapi_admin_init` function, creating the settings
    group for the plugin and defining its contents:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`ch3sapi_admin_init`函数添加实现，创建插件的设置组并定义其内容：
- en: '[PRE40]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Declare a body for the `ch3sapi_validate_options` function, which was declared
    when registering the settings in the previous section:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`ch3sapi_validate_options`函数的主体，该函数在上一节注册设置时声明：
- en: '[PRE41]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Declare a body for the `ch3sapi_main_setting_section_callback` function, declared
    when the settings section was created:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`ch3sapi_main_setting_section_callback`函数的主体，该函数在创建设置部分时声明：
- en: '[PRE42]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Provide an implementation for the `ch3sapi_display_text_field` function, declared
    when a text field was added to the settings section:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为在设置部分添加文本字段时声明的`ch3sapi_display_text_field`函数提供实现：
- en: '[PRE43]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Declare and define the `ch3sapi_display_check_box` function, declared when
    a checkbox was added to the settings section:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并定义`ch3sapi_display_check_box`函数，当在设置部分添加复选框时声明：
- en: '[PRE44]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s administration menu:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以注册一个函数，该函数将在WordPress准备数据以显示站点管理菜单时被调用：
- en: '[PRE45]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Provide code for the implementation of the `ch3sapi_settings_menu` function:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`ch3sapi_settings_menu`函数的实现提供代码：
- en: '[PRE46]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add a definition for the `ch3sapi_config_page` function, defined when the new
    options page was declared:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为在声明新选项页面时定义的`ch3sapi_config_page`函数添加定义：
- en: '[PRE47]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Save and close the plugin file.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Navigate to the Plugins menu of the administration area.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管理区域的插件菜单。
- en: Activate your new plugin.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的新插件。
- en: Navigate to the Settings menu and click on the My Google Analytics - Settings
    API menu item to see the configuration page for this plugin.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到设置菜单并点击“我的谷歌分析 - 设置API”菜单项，以查看此插件的配置页面。
- en: '![](img/46d0c242-6298-4196-b7b4-f8990e31abe0.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/46d0c242-6298-4196-b7b4-f8990e31abe0.png)'
- en: Make a change to the options and submit them to see that they are automatically
    handled by WordPress without having written express code to save options.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对选项进行修改并提交，以查看WordPress是否能够自动处理这些选项，而无需编写保存选项的显式代码。
- en: How it works...
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Settings API is an intricate series of callbacks that allow plugin developers
    to streamline the creation of administration pages and to automatically store
    user options.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 设置API是一个复杂的回调系列，允许插件开发者简化管理页面的创建，并自动存储用户选项。
- en: This self-contained plugin recipe starts with the creation of a new set of default
    options, to avoid inadvertently deleting options from previous recipes.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自包含的插件配方从创建一组新的默认选项开始，以避免意外删除先前配方中的选项。
- en: The code continues with registering a function to be called whenever admin pages
    are prepared for display using the `admin_init` action hook. Upon getting called,
    the callback function takes care of registering a new setting group, a setting
    section belonging to this group, and two fields that will display the desired
    options within the section. As can be seen throughout this code, additional functions
    are registered to validate the user-submitted data, to display custom text at
    the beginning of the section, and to display the two different types of fields
    required to capture and display user input.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 代码继续注册一个函数，当使用`admin_init`动作钩子准备显示管理页面时将被调用。在调用时，回调函数负责注册一个新的设置组、属于此组的设置节段以及将在节段内显示所需选项的两个字段。如本代码所示，注册了额外的函数以验证用户提交的数据、在节段开头显示自定义文本以及显示捕获和显示用户输入所需的不同类型的字段。
- en: 'Taking a closer look at each of the functions that were just used, the first
    function has three parameters, which are as follows:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看刚刚使用的每个函数，第一个函数有三个参数，如下所示：
- en: '[PRE48]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Within these parameters, the first option is a unique identifier for the settings
    group, the second is the name of the options array that will be used to store
    configuration data in the site database, while the third is the name of a callback
    function that will receive user input for validation.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些参数中，第一个选项是设置组的唯一标识符，第二个是用于在站点数据库中存储配置数据的选项数组的名称，而第三个是用于接收用户输入进行验证的回调函数的名称。
- en: 'Moving on to the second function used in this example, `add_settings_section`,
    the four parameters that it requires respectively indicate a unique identifier
    for the section, the title string that will be displayed when the section is rendered,
    a callback function that will be used to display a description for the section,
    and finally a page identifier that will be used to render all similar functions
    later within the plugin code:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是本例中使用的第二个函数`add_settings_section`，它所需的四个参数分别表示节段的唯一标识符、在渲染节段时显示的标题字符串、用于为节段显示描述的回调函数，以及最后用于在插件代码中渲染所有类似函数的页面标识符：
- en: '[PRE49]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The third function of the Settings API used in this recipe, `add_settings_field`,
    is called multiple times to define the fields that make up each section:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中使用的Settings API的第三个函数`add_settings_field`被多次调用，以定义构成每个节段的字段：
- en: '[PRE50]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Similar to the other functions, the first parameter is a unique identifier for
    the field, the second parameter is a label that will be displayed next to the
    field, and the third parameter is a callback function that will be executed to
    output the necessary HTML code to display the field. The next three parameters
    indicate the page that the field belongs to, the section that it is contained
    in, and an optional array of additional data to be sent to the callback function.
    As can be seen in the rest of this recipe, we are leveraging this optional additional
    data argument to send data to the field processing function to make them more
    generic.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他函数类似，第一个参数是字段的唯一标识符，第二个参数是将在字段旁边显示的标签，第三个参数是执行以输出显示字段的必要HTML代码的回调函数。接下来的三个参数表示字段所属的页面、包含字段的节段，以及可选的数组，其中包含要发送到回调函数的额外数据。如本食谱的其余部分所示，我们利用这个可选的额外数据参数将数据发送到字段处理函数，使它们更加通用。
- en: When the configuration page is visited, the top-level form is created using
    regular HTML code, setting the action to `options.php`. This script is responsible
    for automating the processing of user data. The rest of the form is quite simple,
    since it gets generated by the `settings_fields` and `do_settings_sections` functions.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问配置页面时，使用常规HTML代码创建顶级表单，将操作设置为`options.php`。此脚本负责自动化处理用户数据。表单的其余部分相当简单，因为它是由`settings_fields`和`do_settings_sections`函数生成的。
- en: When they are called, the setting group created earlier is rendered, followed
    by calls to the functions designed to draw all the sections that it contains and
    all the registered fields within these sections.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们被调用时，将渲染之前创建的设置组，然后调用设计用于绘制它包含的所有节段以及这些节段中注册的所有字段的函数。
- en: While the Settings API provides full control over the layout of the form fields
    themselves, its use dictates the general layout of the configuration page, creating
    a two-column table that contains the labels for each field in the first column
    and the code produced by the plugin's callback functions in the second one. As
    the functions for each type of field are called, they receive the array data that
    was associated with each of them and use it to retrieve the current field values
    and to specify the name of each field to be stored back upon user input.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设置API提供了对表单字段布局的完全控制，但其使用决定了配置页面的总体布局，创建了一个包含每个字段标签的第一列和由插件的回调函数生成的代码的第二列的两列表格。当调用每种类型字段的函数时，它们会接收到与每个字段相关联的数组数据，并使用它来检索当前字段的值，并指定每个字段在用户输入后要存储的名称。
- en: The last piece of the puzzle is the validation function that was registered
    when the setting group was first created. The purpose of this function is to allow
    plugin developers to perform data type or content validation as user data is submitted
    through the form, similar to the way we validate user-submitted data in the *Processing
    and storing plugin configuration data* recipe.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个拼图是当设置组首次创建时注册的验证函数。此函数的目的是允许插件开发者在使用表单提交用户数据时执行数据类型或内容验证，类似于我们在*处理和存储插件配置数据*配方中验证用户提交数据的方式。
- en: There's more...
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: While this recipe shows how to create rendering functions for two types of data
    fields, you may require other types of options for your plugin. The following
    are code examples that show how to handle most typical data types used in plugin
    options.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个配方展示了如何为两种数据字段创建渲染函数，但你可能需要为你的插件提供其他类型的选项。以下是一些代码示例，展示了如何处理在插件选项中使用的最典型数据类型。
- en: Rendering a drop-down list settings field
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染下拉列表设置字段
- en: 'Before adding the select list itself, we would first add a line to initialize
    the `select_list` option in the `ch3sapi_get_options` function, if not found in
    the options retrieved from the database: `$new_options[''select_list''] = ''First'';`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加选择列表本身之前，我们首先会在`ch3sapi_get_options`函数中添加一行来初始化`select_list`选项，如果未在从数据库检索的选项中找到：`$new_options['select_list']
    = 'First';`
- en: 'The next step to rendering a drop-down list is to provide the list of all possible
    options, along with the option name, in the optional field data array. Here is
    an example of a call to the `add_settings_field` function call with such a list:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染下拉列表的下一步是提供所有可能的选项列表，包括选项名称，在可选的字段数据数组中。以下是一个调用`add_settings_field`函数的示例，其中包含此类列表：
- en: '[PRE51]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'With this information, we can provide an implementation for the `ch3sapi_select_list`
    function that will be able to render an HTML select element using the `choices`
    array to populate it:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些信息，我们可以为`ch3sapi_select_list`函数提供一个实现，该函数将能够使用`choices`数组来渲染HTML选择元素：
- en: '[PRE52]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Rendering a text area settings field
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染文本区域设置字段
- en: 'Another common field type used in configuration pages is a multi-line text
    area. Once again, we would need to update the `ch3sapi_get_options` function to
    specify a default value for this new option if not found. Once this is done, the
    `add_settings_field` function is identical to the text and checkbox examples shown
    in the recipe, while the field rendering code is as follows:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 配置页面中常用的另一种字段类型是多行文本区域。同样，如果未找到此新选项的默认值，我们需要更新`ch3sapi_get_options`函数。完成此操作后，`add_settings_field`函数与配方中显示的文本和复选框示例相同，而字段渲染代码如下：
- en: '[PRE53]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: See also
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Rendering the admin page contents using HTML* recipe
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML渲染管理页面内容的配方
- en: The *Processing and storing plugin configuration data* recipe
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理和存储插件配置数据的配方
- en: Accessing user settings from action and filter hooks
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从操作和过滤器钩子访问用户设置
- en: After creating a default set of values for our plugin's configuration and creating
    an interface to allow users to modify and update those values, we are now ready
    to start using these options when pages are rendered using our additional plugin
    functionality. Going back to the Google Analytics example created in [Chapter
    2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework Basics,* this
    recipe shows how to access the plugin options data using a familiar function to
    make the existing code much more flexible.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的插件配置创建默认值集并创建一个界面以允许用户修改和更新这些值之后，我们现在可以开始使用这些选项在页面使用我们的附加插件功能渲染时使用。回到在[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中创建的Google
    Analytics示例，*插件框架基础*，这个做法展示了如何使用熟悉的函数访问插件选项数据，从而使现有代码更加灵活。
- en: Getting ready
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Adding custom help pages* recipe, and
    the resulting plugin should be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v8.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v8.php`
    as `ch2-page-header-output.php` before starting this recipe.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了*添加自定义帮助页面*的做法，并且生成的插件应在您的开发站点中处于活动状态。或者，您可以从下载的代码包中获取生成的代码（`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v8.php`）。在开始此做法之前，您应将文件`ch2-page-header-output-v8.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Modify the implementation of the `ch2pho_page_header_output` function to retrieve
    the plugin options array and use the stored value for the account number to embed
    it in the page header code. The new sections are identified in bold:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ch2pho_page_header_output`函数的实现以检索插件选项数组并使用存储的账户号码将其嵌入页面页眉代码中。新的部分以粗体显示：
- en: '[PRE54]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add code to check whether outgoing code tracking should be done before registering
    an action hook to filter all post and page content, with the changes made identified
    in bold:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册动作钩子以过滤所有帖子内容和页面内容之前，添加代码以检查是否应该进行出站代码跟踪，其中所做的更改以粗体显示：
- en: '[PRE55]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Use the same check to determine whether page footer code should be added to
    provide the JavaScript necessary for outgoing link tracking to occur with the
    changes made identified in bold:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的检查来确定是否应该添加页面页脚代码以提供出站链接跟踪所需的JavaScript，其中所做的更改以粗体显示：
- en: '[PRE56]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Save and close the plugin file.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Visit the site and look at the page source to see that the previous `UA-0000000-0`
    has been replaced by the last value saved in the plugin's configuration page.
    You can also set the link tracking code to be displayed or not by changing the
    track outgoing links option.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站并查看页面源代码，以查看之前的`UA-0000000-0`已被插件配置页面中保存的最后一个值所替换。您还可以通过更改跟踪出站链接选项来设置是否显示链接跟踪代码。
- en: How it works...
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we saw earlier in this chapter, when creating administrative pages, our custom
    `ch2pho_get_options` function can query the site's database and return the plugin
    configuration data that it contains. This data can be in the form of a single
    variable or an array of information. In this case, following the *Storing user
    settings using arrays* recipe found earlier in this chapter, an array was used
    and accessed to inject values in the page output when header and footer action
    hooks are called and when page content is being filtered.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所述，在创建管理页面时，我们的自定义`ch2pho_get_options`函数可以查询网站的数据库并返回它包含的插件配置数据。这些数据可以是以单个变量或信息数组的形式。在这种情况下，根据本章前面找到的*使用数组存储用户设置*的做法，使用了一个数组并访问它，在调用页眉和页脚动作钩子以及页面内容正在被过滤时注入值。
- en: See also
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Storing user settings using arrays* recipe
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数组存储用户设置的做法
- en: Formatting admin pages using meta boxes
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用元框格式化管理页面
- en: As a plugin's administration page becomes longer and more complex, it becomes
    important to divide its content into multiple sections. While standard HTML headers
    or fieldset tags could be used for this task, they lack the usefulness and nice
    visual appearance of meta boxes. Meta boxes are the containers that show up in
    most default WordPress content editors, as well as on the main administration
    Dashboard page.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 随着插件的管理页面变得越来越长和复杂，将其内容分成多个部分变得很重要。虽然标准的HTML标题或`fieldset`标签可以用于此任务，但它们缺乏元框的实用性和美观的视觉表现。元框是出现在大多数默认WordPress内容编辑器和主管理仪表板页面上的容器。
- en: Beyond visually organizing content, meta boxes are very powerful, since they
    allow site administrators to collapse configuration sections that they don't use,
    re-order sections based on their needs, and even hide elements that they don't
    use.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 除了视觉组织内容外，元框非常强大，因为它们允许网站管理员折叠他们不使用的配置部分，根据他们的需求重新排序部分，甚至隐藏他们不使用的元素。
- en: This recipe explains how to convert the HTML-based configuration page that was
    created earlier in this chapter to use the built-in meta box system.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱解释了如何将本章早期创建的基于HTML的配置页面转换为使用内置元框系统。
- en: Getting ready
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Accessing user settings from action and
    filter hooks* recipe. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v9.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v9.php` as `ch2-page-header-output.php`
    before starting the recipe.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了“从动作和过滤器钩子访问用户设置”的食谱。或者，你可以从下载的代码包中获取结果代码（`第3章/ch2-page-header-output/ch2-page-header-output-v9.php`）。在开始食谱之前，你应该将文件`ch2-page-header-output-v9.php`重命名为`ch2-page-header-output.php`。
- en: How to do it...
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Browse to the Plugins section of the administration section of your site and
    deactivate the `Chapter 2 - Page Header Output` plugin.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您网站管理区域的插件部分，并停用`第2章 - 页面头部输出`插件。
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Copy the file `ch2-page-header-output.php` to `ch2-page-header-output-metaboxes.php`.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件`ch2-page-header-output.php`复制到`ch2-page-header-output-metaboxes.php`。
- en: Open the `ch2-page-header-output-metaboxes.php` file in a text editor.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output-metaboxes.php`文件。
- en: Change the plugin name in the header from `Chapter 2 - Page Header Output` to
    `Chapter 2 - Page Header Output Meta Boxes`.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题中的插件名称从`第2章 - 页面头部输出`更改为`第2章 - 页面头部输出元框`。
- en: 'Right under the top plugin header comment, add a line of code to declare a
    global variable to hold the identifier for the options page:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部插件注释下方，添加一行代码来声明一个全局变量以保存选项页的标识符：
- en: '[PRE57]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Find the `ch2pho_settings_menu` function in the existing code.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有代码中找到`ch2pho_settings_menu`函数。
- en: 'Add a line at the top of the function to point to the global options page variable:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数顶部添加一行以指向全局选项页面变量：
- en: '[PRE58]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Find the `ch2pho_help_tabs` function within the plugin code.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件代码中找到`ch2pho_help_tabs`函数。
- en: 'Add the following block of code at the end of the function body to create meta
    boxes to be drawn on the screen and specify functions to be called to populate
    these boxes:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数体末尾添加以下代码块以创建要在屏幕上绘制的元框，并指定填充这些框的函数：
- en: '[PRE59]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add a line of code at the end of the plugin code file to register a function
    to be called when administration page styles are placed in a queue:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件代码文件末尾添加一行代码，以注册一个当管理页面样式被放入队列时调用的函数：
- en: '[PRE60]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Insert the following code segment to provide an implementation for the `ch2pho_load_admin_scripts`
    function:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码段以提供`ch2pho_load_admin_scripts`函数的实现：
- en: '[PRE61]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create a new function to implement the `ch2pho_plugin_meta_box` function that
    was declared a few steps back. Notice that the body of the function is a direct
    copy and paste of the previous form code that was used to render the Account Name
    and Track Outgoing Links field:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的函数来实现之前声明过的`ch2pho_plugin_meta_box`函数。注意，函数体是直接复制粘贴之前用于渲染“账户名称”和“跟踪外链”字段的代码：
- en: '[PRE62]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add the following code to provide an implementation for the `ch2pho_second_meta_box`
    function to display a second meta box. This second box will not have any real
    content. It will only be used to illustrate some of the meta box functionality:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以提供 `ch2pho_second_meta_box` 函数的实现来显示第二个元框。这个第二个框将没有任何实际内容。它仅用于说明一些元框功能：
- en: '[PRE63]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Find the code for the `ch2pho_config_page` function in your code and modify
    it as shown in the following code, where all the new code segments are in bold.
    Delete the original code that rendered the `ga_account_name` and `track_outgoing_links`
    fields:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码中找到 `ch2pho_config_page` 函数的代码，并按以下代码进行修改，其中所有新的代码段都加粗。删除渲染 `ga_account_name`
    和 `track_outgoing_links` 字段的原始代码：
- en: '[PRE64]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Save and close the plugin file.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Activate your new plugin.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活你的新插件。
- en: Click on the Settings section on the left-hand navigation menu to expand it.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航菜单中的设置部分以展开它。
- en: Click on the My Google Analytics in the tree to display the re-designed administration
    page.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树中点击“我的 Google Analytics”，以显示重新设计的管理页面。
- en: '![](img/84fe8de3-56c6-43af-a37f-2e5def467662.png)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/84fe8de3-56c6-43af-a37f-2e5def467662.png)'
- en: Drag and drop one of the meta boxes to re-order them.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖放其中一个元框以重新排序它们。
- en: Click on one of the meta box titles to collapse that section.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其中一个元框标题以折叠该部分。
- en: Click on the Screen Options menu in the top-right corner to open a menu to control
    the visibility of all the meta boxes.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的屏幕选项菜单以打开一个菜单来控制所有元框的可见性。
- en: Move to another section of the administration menu and come back to the My Google
    Analytics section to see that all the changes made to the layout of the configuration
    page have been retained.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标移至管理菜单的另一部分，然后返回到“我的 Google Analytics”部分，你会看到对配置页面布局所做的所有更改都已保留。
- en: How it works...
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The setup of the meta box functionality is done in the `load-<pagename>` callback
    function by calling the `add_meta_box` function multiple times based on the desired
    number of boxes to be displayed on the screen.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 元框功能设置是在 `load-<pagename>` 回调函数中完成的，通过多次调用 `add_meta_box` 函数，根据屏幕上要显示的框的数量。
- en: 'The function takes a number of arguments, as shown:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接受多个参数，如下所示：
- en: '[PRE65]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Going over the parameters in this function, the first is a unique identifier
    for the meta box, while the second is the string that will be displayed as the
    title of the box itself and is also the name that will show up in the Screen Options
    configuration tab. The third parameter is the name of the function to be called
    to render the contents of the meta box. The fourth argument identifies the page
    where the meta boxes will be rendered. In this case, we use the value of the global
    variable `$options_page` for this parameter, to be sure that it will be assigned
    the correct page identifier. Global PHP variables are powerful tools that can
    help us share data between functions in a plugin. By using the keyword `global`
    in front of the name of a variable, a website's PHP interpreter will know that
    it has to access a common memory space to store and access information.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中查看参数，第一个是元框的唯一标识符，第二个是作为框本身标题显示的字符串，也是将在屏幕选项配置标签中显示的名称。第三个参数是要调用的函数名称，用于渲染元框的内容。第四个参数标识将渲染元框的页面。在这种情况下，我们使用全局变量
    `$options_page` 的值作为此参数，以确保它将分配正确的页面标识符。全局 PHP 变量是强大的工具，可以帮助我们在插件中的函数之间共享数据。通过在变量名称前使用关键字
    `global`，网站的 PHP 解释器将知道它必须访问公共内存空间以存储和访问信息。
- en: The fifth parameter is an arbitrary name that indicates the name of a section
    where the box should be displayed. This name will be used when making a request
    to WordPress to render all the meta boxes belonging to a specific section. The
    only requirement for this to work correctly is to use the same name when calling
    the `do_meta_boxes` function.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 第五个参数是一个任意名称，表示应该显示框的章节名称。当向 WordPress 发送请求以渲染属于特定章节的所有元框时，将使用此名称。为此功能正确工作，唯一的要求是在调用
    `do_meta_boxes` 函数时使用相同的名称。
- en: The sixth argument indicates the priority of the registered meta box within
    the section it belongs to, relative to other meta boxes. If all the boxes have
    the same priority, the order in which the calls to the `add_meta_box` function
    were made will determine their original drawing order. Of course, as was seen
    in this recipe, this order can be overridden by the user through a simple drag-and-drop
    operation. The final parameter is optional and can be used to send information
    to the function that will render the meta box contents.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 第六个参数表示注册的元框在其所属部分内的优先级，相对于其他元框。如果所有框具有相同的优先级，则调用`add_meta_box`函数的顺序将决定它们的原始绘制顺序。当然，正如在这个食谱中所看到的，这个顺序可以通过用户的简单拖放操作来覆盖。最后一个参数是可选的，可以用来向将渲染元框内容的函数发送信息。
- en: While it is actually possible to call `add_meta_box` from other action hook
    callbacks, only meta boxes registered during a `load-<pagename>` callback will
    show up in the Screen Options list to allow the user to control their visibility.
    You may want to create meta boxes outside of this action hook on purpose, to be
    sure that important boxes are always shown and to provide a standard user experience
    for all users.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实际上可以从其他动作钩子回调中调用`add_meta_box`，但只有在一个`load-<pagename>`回调期间注册的元框会显示在屏幕选项列表中，以便用户控制它们的可见性。您可能故意在动作钩子之外创建元框，以确保重要的框总是显示出来，并为所有用户提供标准化的用户体验。
- en: In addition to the calls to `add_meta_box`, we must make multiple calls to `wp_enqueue_script`
    in the page load function to request for three JavaScript scripts to be loaded
    when our configuration page is rendered. These scripts provide the drag-and-drop,
    minimize, and hiding functionalities that were demonstrated at the end of the
    recipe, with only a few initialization calls needed to be done from our code through
    JavaScript functions.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调用`add_meta_box`之外，我们还需要在页面加载函数中多次调用`wp_enqueue_script`，以请求在渲染我们的配置页面时加载三个JavaScript脚本。这些脚本提供了在食谱末尾展示的拖放、最小化和隐藏功能，只需要从我们的代码中通过JavaScript函数执行少量初始化调用。
- en: Once the meta boxes have been created, the bulk of the work is done within the
    options page rendering function. As we can see in the modified code, the first
    thing that is done is to create new nonce fields. These unique numbers will be
    generated as hidden data in the page and will be used for authentication to save
    layout changes within the configuration page. Next, we create a number of `div`
    sections with specific `id` names that contain a nested call to the `do_meta_boxes`
    function. These div tags are used to ensure that the meta boxes are styled using
    the WordPress administration pages style sheet.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了元框，大部分工作都是在选项页面渲染函数中完成的。正如我们在修改后的代码中所看到的，首先要做的是创建新的nonce字段。这些唯一的数字将作为页面中的隐藏数据生成，并将用于在配置页面中保存布局更改的认证。接下来，我们创建了一系列具有特定`id`名称的`div`部分，其中包含对`do_meta_boxes`函数的嵌套调用。这些div标签用于确保元框使用WordPress管理页面样式表进行样式化。
- en: Once called, the `do_meta_boxes` function takes care of drawing all of the meta
    boxes that were created for the given page (specified in the first argument) and
    given section (second argument). It also passes along any data specified in the
    third function argument to the functions associated with each box.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用，`do_meta_boxes`函数将负责绘制为给定页面（在第一个参数中指定）和给定部分（第二个参数中指定）创建的所有元框。它还将任何在第三个函数参数中指定的数据传递给与每个框关联的函数。
- en: The remaining changes to the page rendering function is a block of JavaScript
    code that takes care of closing down any meta box section that was closed by the
    user during a previous visit to the page. It also assigns jQuery callbacks to
    the meta boxes so that any user interaction with them is saved to the site database
    by sending AJAX requests to the web server.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 页面渲染函数的其余更改是一段JavaScript代码，负责关闭用户在之前访问页面时关闭的任何元框部分。它还分配jQuery回调到元框上，以便任何用户与它们的交互都会通过向Web服务器发送AJAX请求保存到网站数据库中。
- en: Last, but not least, the meta box rendering functions are responsible for rendering
    the content inside each meta box. They can do this by outputting straight HTML.
    By passing along the complete options array to these functions, the code that
    is contained within them can be exactly the same as before to render the various
    options fields.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，元框渲染函数负责渲染每个元框内的内容。它们可以通过输出纯HTML来实现这一点。通过将这些函数的完整选项数组传递给这些函数，它们包含的代码可以与之前完全相同，以渲染各种选项字段。
- en: See also
  id: totrans-477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Rendering the admin page contents using HTML* recipe
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用HTML渲染管理页面内容*配方'
- en: Splitting admin code from the main plugin file to optimize site performance
  id: totrans-479
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将管理代码从主插件文件中分离出来以优化网站性能
- en: As mentioned in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics,* the entire content of the main code file of a WordPress plugin
    gets evaluated every time any page is rendered on the site, whether it's a visitor-facing
    page or a backend administration page. This means that large amounts of PHP code
    can potentially be parsed on every iteration, wasting processing power on the
    site's server, even though some of this code will never be active when regular
    visitors are browsing the site.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中所述，*插件框架基础*，WordPress插件的主代码文件的内容在网站上渲染任何页面时都会被评估，无论是面向访客的页面还是后端管理页面。这意味着大量的PHP代码可能会在每次迭代中解析，即使当常规访客浏览网站时，其中一些代码也永远不会激活，这会浪费网站服务器的处理能力。
- en: A prime example of this waste is all of the code samples that we have been building
    in this chapter. While this code is extremely useful for site administrators,
    there is no sense in having the web server parse and validate that code when regular
    pages are displayed. For this reason, it is better to isolate this code in a separate
    file which will only be loaded and parsed when someone is visiting the site's
    dashboard. The following recipe shows how to isolate the less frequently required
    code to a separate file and only load it when a user is visiting the site administration
    section.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面的一个典型例子就是我们在本章中构建的所有代码示例。虽然这些代码对于网站管理员非常有用，但在常规页面显示时，没有理由让Web服务器解析和验证这些代码。因此，最好将这些代码隔离到单独的文件中，只有当有人访问网站仪表板时才会加载和解析。以下配方展示了如何将不太经常需要的代码隔离到单独的文件中，并且只在用户访问网站管理部分时加载它。
- en: Getting ready
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Hiding items which users should not access
    from the default menu* recipe to have a starting point for this recipe, and the
    resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 3/ch3-hide-menu-item/ch3-hide-menu-item.php`)
    from the downloaded code bundle.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*从默认菜单中隐藏用户不应访问的项目*配方，以便为本配方提供一个起点，并且生成的插件仍然在你的开发网站上处于活动状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    3/ch3-hide-menu-item/ch3-hide-menu-item.php`）。
- en: How to do it...
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch3-hide-menu-item` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch3-hide-menu-item`文件夹。
- en: Open the `ch3-hide-menu-item.php` file in a text editor.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch3-hide-menu-item.php`文件。
- en: Create a new PHP code file called `ch3-hide-menu-item-admin-functions.php` in
    the same directory and open it in a text editor.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录下创建一个新的PHP代码文件，命名为`ch3-hide-menu-item-admin-functions.php`，并在文本编辑器中打开它。
- en: 'Move the calls to the `add_action` function and the definition of the `ch3hmi_hide_menu_item`
    function to the new file, preceded by a standard PHP open tag and checking for
    the definition of a constant:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`add_action`函数的调用和`ch3hmi_hide_menu_item`函数的定义移动到新文件中，在标准PHP开放标签之前，并检查常量的定义：
- en: '[PRE66]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Back in the main plugin code file (`ch3-hide-menu-item.php`), add code that
    will define a constant and check whether the current page being rendered is an
    administration page and proceed to load the administration functions if it is:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主插件代码文件（`ch3-hide-menu-item.php`）中，添加代码以定义一个常量并检查当前正在渲染的页面是否为管理页面，如果是，则继续加载管理函数：
- en: '[PRE67]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Save and close the plugin file.
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: While the plugin will continue to work as it did before, the action hook registration
    code will only be processed when an administration page is displayed.
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然插件将继续像以前一样工作，但动作钩子注册代码只有在显示管理页面时才会被处理。
- en: How it works...
  id: totrans-494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `is_admin` function is used to quickly tell if the page currently being
    rendered is an administration page. If it is, our plugin code uses the standard
    PHP `include` function to load and execute the contents of a separate file. In
    this case, the file is a second PHP file located in the plugin directory. To be
    flexible with regards to the location of the plugin files, we build a path to
    the file containing the administration functions using the WordPress `plugin_dir_path`
    function.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_admin` 函数用于快速判断当前正在渲染的页面是否为管理页面。如果是，我们的插件代码使用标准的PHP `include` 函数来加载和执行一个单独文件的内容。在这种情况下，该文件是位于插件目录中的第二个PHP文件。为了使插件文件的位置更加灵活，我们使用WordPress的
    `plugin_dir_path` 函数构建包含管理功能的文件路径。'
- en: While the benefit of placing so little code in a separate file is minimal, this
    technique has a larger impact on performance when dealing with larger administration
    panels. In addition to not having to register an action hook on every page load,
    the PHP interpreter does not have to make sure that the syntax for the entire
    contents of that second file is valid when rendering front-facing pages.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将如此少的代码放在单独的文件中的好处很小，但这种方法在处理较大的管理面板时对性能的影响更大。除了不需要在每次页面加载时注册动作钩子外，PHP解释器在渲染面向前端的页面时也不必确保该第二个文件内容的语法有效。
- en: See also
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Hiding items which users should not access from the default menu* recipe
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*隐藏用户不应从默认菜单访问的项目* 菜谱'
- en: Storing style sheet data in user settings
  id: totrans-499
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在用户设置中存储样式表数据
- en: While most common plugin options are typically presented to users as simple
    textboxes, checkboxes, or drop-down lists, there are instances where more text
    needs to be stored for user settings. A good example of this are plugin-specific
    style sheets, which allow users to change the visual appearance of plugin output.
    While loading a separate style sheet file worked well in the *Loading a style
    sheet to format plugin output* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, this approach did not give users a lot of liberty in
    changing these styling rules to work better with their site design, since any
    changes that users make to the style sheet will get overwritten when the plugin
    is updated using the WordPress plugin upgrade process.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数常见的插件选项通常以简单的文本框、复选框或下拉列表的形式呈现给用户，但在某些情况下，需要存储更多文本以供用户设置。一个很好的例子是插件特定的样式表，它允许用户更改插件输出的视觉外观。虽然在本章的
    *将样式表加载到格式化插件输出* 菜谱中加载单独的样式表文件效果很好，但这种方法并没有给用户太多自由来更改这些样式规则以更好地与他们的站点设计配合，因为用户对样式表所做的任何更改都会在通过WordPress插件升级过程更新插件时被覆盖。
- en: A solution to this problem is to store style sheet data with the rest of the
    configuration options in the site database. This way, the information will remain
    intact when upgrades are performed. This recipe shows how to change the plugin
    created in the previous chapter to initialize the plugin options using an external
    file, how to create an administration panel to allow users to modify or reset
    the style sheet, and how to use the new data to output the style information to
    the page header. Many of the lessons learned in this chapter will be put to use
    to create the final result.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是将样式表数据与配置选项的其他部分一起存储在站点数据库中。这样，在升级时信息将保持完整。本菜谱展示了如何将上一章创建的插件更改为使用外部文件初始化插件选项，如何创建一个管理面板允许用户修改或重置样式表，以及如何使用新数据将样式信息输出到页面标题。本章学到的许多经验都将用于创建最终结果。
- en: Getting ready
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Loading a style sheet to format plugin
    output* recipe in the previous chapter to have a starting point for this recipe.
    Alternatively, you can get the resulting code (`Chapter 2/ch2-private-item-text/ch2-private-item-text-v2.php`)
    from the downloaded code bundle and rename the file to `ch2-private-item-text.php`
    before starting the recipe.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了上一章中的 *将样式表加载到格式化插件输出* 菜谱，以便为本菜谱提供一个起点。或者，你可以在开始菜谱之前，从下载的代码包中获取结果代码（`第2章/ch2-private-item-text/ch2-private-item-text-v2.php`），并将文件重命名为
    `ch2-private-item-text.php`。
- en: How to do it...
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的 `ch2-private-item-text` 文件夹。
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 `ch2-private-item-text.php` 文件。
- en: 'Add the following lines of code to implement an activation callback to initialize
    plugin options when it is installed or upgraded:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以实现激活回调，初始化插件选项，当它被安装或升级时：
- en: '[PRE68]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Add the following code segment to register a function to be called when the
    menu is built to add an additional item under the Settings menu:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码段添加以注册一个在构建菜单时被调用的函数，以便在设置菜单下添加一个附加项：
- en: '[PRE69]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Insert the following code to render the options page.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码以渲染选项页面。
- en: The line that prints the style sheet in the text area should start at the beginning
    of a new line to avoid having extra spaces at the beginning of the style sheet
    editor. Also, make sure you do not lose the hyphen in `font-family` if you are
    copying the code from a digital copy of this book.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 打印样式表的文本区域应该从新的一行开始，以避免样式表编辑器开头有额外的空格。此外，如果你从这本书的数字副本中复制代码，请确保不要丢失`font-family`中的连字符。
- en: '[PRE70]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Add the following block of code to register a function to be called when user
    options are saved and to provide an implementation for this function:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块以注册一个在用户选项保存时被调用的函数，并为该函数提供一个实现：
- en: '[PRE71]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Delete the call to the `add_action` function, which associated the function
    `ch2pit_queue_stylesheet` with the `wp_enqueue_scripts` action hook, along with
    the `ch2pit_queue_stylesheet` function itself.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除与函数`ch2pit_queue_stylesheet`关联的`add_action`函数调用，以及`ch2pit_queue_stylesheet`函数本身。
- en: 'Add the following code to add the user-modifiable style sheet code to the page
    header:'
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以将用户可修改的样式表代码添加到页面标题中：
- en: '[PRE72]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Save and close the plugin file.
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Deactivate and then Activate the `Chapter 2 - Private Item Text` plugin from
    the administration interface.
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从管理界面停用并重新激活“第2章 - 私有项目文本”插件。
- en: 'Navigate to the Settings menu and select the Private Item Text submenu item
    to see the newly created configuration panel, with options to submit changes to
    the style sheet or reset it to its initial state, as shown in the following screenshot:'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到设置菜单并选择“私有项目文本”子菜单项，以查看新创建的配置面板，其中包含提交更改到样式表或将其重置为其初始状态的功能，如下面的截图所示：
- en: '![](img/f128f0fa-d390-4b75-ba55-4413f61e03f3.png)'
  id: totrans-522
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f128f0fa-d390-4b75-ba55-4413f61e03f3.png)'
- en: 'Visit the website and look at the page source to see that the style sheet data
    entered in the configuration page shows up in the HTML header:'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站并查看页面源代码，以查看在配置页面中输入的样式表数据出现在HTML头中：
- en: '[PRE73]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-525
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Re-using many of the elements covered in this chapter, this recipe creates a
    simple yet effective configuration interface to allow users to make changes to
    the color that is used to highlight private text in posts, instead of this color
    being hardcoded in a plugin file.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 重新使用本章中涵盖的许多元素，这个配方创建了一个简单而有效的配置界面，允许用户更改用于在帖子中突出显示私有文本的颜色，而不是将此颜色硬编码在插件文件中。
- en: That being said, this recipe does introduce two new concepts. The first is the
    initialization of the plugin options by reading data from a file instead of having
    all of that information stored in the PHP code. This technique is useful when
    dealing with an option that has a lot of content, such as a style sheet.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，这个配方确实引入了两个新概念。第一个是通过从文件中读取数据来初始化插件选项，而不是将所有这些信息存储在PHP代码中。当处理具有大量内容（如样式表）的选项时，这种技术很有用。
- en: The next element of interest is within the data processing function, where the
    code checks to see which button was pressed between the one to reset the style
    sheet and the one to submit user changes to be stored in the site database. Based
    on the result, the processing code will either read back the initial style sheet
    from the file or use the user-posted data to update the configuration data.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个感兴趣的部分是在数据处理函数中，代码检查在重置样式表和提交用户更改以存储在网站数据库之间的哪个按钮被按下。根据结果，处理代码将要么从文件中读取初始样式表，要么使用用户提交的数据来更新配置数据。
- en: Beyond these two new concepts, the other main change is to the code that was
    outputting header code referencing an external style sheet file. In this new version,
    a change was made to echo the content of the style sheet that is stored in the
    options table directly to the browser.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个新概念之外，另一个主要变化是对输出引用外部样式表文件的头部代码的代码进行了修改。在这个新版本中，对直接将存储在选项表中的样式表内容输出到浏览器的内容进行了更改。
- en: It should be noted that this recipe does not check to see if the user enters
    valid CSS code in the field before adding it to the page header, since verifying
    this would be too complex for now. A library such as CSSTidy ([http://csstidy.sourceforge.net/](http://csstidy.sourceforge.net/))
    could be used to perform this task, as desired.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，本配方在将CSS代码添加到页面标题之前不会检查用户是否输入了有效的CSS代码，因为验证这一点目前可能过于复杂。可以根据需要使用库，如CSSTidy（[http://csstidy.sourceforge.net/](http://csstidy.sourceforge.net/））来完成此任务。
- en: See also
  id: totrans-531
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating* *a* *new* *enclosing* *shortcode* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章中，*创建* *一个* *新的* *包围* *短代码*的配方，*插件框架基础*
- en: The *Loading a style sheet to format plugin output* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章中，*加载样式表以格式化插件输出*的配方，*插件框架基础*
- en: Managing multiple sets of user settings from a single admin page
  id: totrans-534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从单个管理页面管理多套用户设置
- en: Throughout this chapter, you have learned how to create configuration pages
    to manage single sets of configuration options for our plugins. In some cases,
    only being able to specify a single set of options will not be enough. For example,
    looking back at the Twitter embed shortcode plugin that was created in the previous
    chapter, a single configuration panel would only allow users to specify one set
    of options, such as the desired Twitter feed dimensions or the number of tweets
    to display.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何创建配置页面来管理我们插件的单套配置选项。在某些情况下，仅能指定单套选项可能不足以满足需求。例如，回顾上一章中创建的Twitter嵌入短代码插件，单个配置面板只会允许用户指定一套选项，例如所需的Twitter流尺寸或要显示的推文数量。
- en: A more flexible solution would be to allow users to specify multiple sets of
    configuration options, which could then be called up by using an extra shortcode
    parameter (for example, `[twitterfeed user_name="WordPress" option_id="2"]`).
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更灵活的解决方案是允许用户指定多套配置选项，然后可以通过额外的短代码参数（例如，`[twitterfeed user_name="WordPress"
    option_id="2"]`）调用它们。
- en: While the first thought that might cross your mind to configure such a plugin
    is to create a multi-level menu item with submenus to store a number of different
    settings, this method would produce a very awkward interface for users to navigate.
    A better way is to use a single panel but give the user a way to select between
    multiple sets of options to be modified.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首先想到配置此类插件时，可能会想到创建一个具有子菜单的多级菜单项来存储多个不同的设置，但这种方法将为用户导航产生一个非常不自然的界面。更好的方法是使用单个面板，但给用户一个选择多个要修改的选项集的方法。
- en: In this recipe, you will learn how to enhance the previously created Twitter
    feed shortcode plugin to be able to control the embedded feed width and number
    of tweets to display from the plugin configuration panel and to give users the
    ability to specify multiple display sizes.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将学习如何增强之前创建的Twitter流短代码插件，使其能够从插件配置面板控制嵌入流的宽度和要显示的推文数量，并使用户能够指定多个显示尺寸。
- en: Getting ready
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Creating a new shortcode with parameters*
    recipe in the previous chapter to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 2/ch2-twitter-embed/ch2-twitter-embed.php`)
    from the downloaded code bundle.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经遵循了上一章中的*创建带参数的新短代码*配方，以便为本配方提供一个起点。或者，您可以从下载的代码包中获取结果代码（`Chapter 2/ch2-twitter-embed/ch2-twitter-embed.php`）。
- en: How to do it...
  id: totrans-541
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Navigate to the `ch2-twitter-embed` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您开发安装的WordPress插件目录中的`ch2-twitter-embed`文件夹。
- en: Open the `ch2-twitter-embed.php` file in a text editor.
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-twitter-embed.php`文件。
- en: 'Add the following lines of code to implement an activation callback to initialize
    plugin options when it is installed or upgraded:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以实现激活回调，以便在安装或升级时初始化插件选项：
- en: '[PRE74]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Insert the following code segment to register a function to be called when
    the administration menu is put together. When this happens, the callback function
    adds an item to the Settings menu and specifies the function to be called to render
    the configuration page:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入以下代码段以注册一个在组装管理菜单时被调用的函数。当发生这种情况时，回调函数会将一个项目添加到设置菜单，并指定用于渲染配置页面的函数：
- en: '[PRE75]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Add the following code to implement the configuration page rendering function:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加以实现配置页面渲染函数：
- en: '[PRE76]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Add the following block of code to register a function that will process user
    options when submitted to the site:'
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码块添加到注册一个函数，该函数将在提交到网站时处理用户选项：
- en: '[PRE77]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Add the following code to implement the `process_ch2te_options` function, declared
    in the previous block of code:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加以实现之前代码块中声明的`process_ch2te_options`函数：
- en: '[PRE78]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Find the `ch2te_twitter_embed_shortcode` function and modify it as follows
    to accept the new `option_id` parameter and load the plugin options to produce
    the desired output. The changes are identified in bold within the recipe:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`ch2te_twitter_embed_shortcode`函数，并按以下方式修改它以接受新的`option_id`参数并加载插件选项以生成所需的输出。配方中的更改以粗体显示：
- en: '[PRE79]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Save and close the plugin file.
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: Deactivate and then Activate the `Chapter 2 - Twitter Embed` plugin from the
    administration interface to execute its activation function and create default
    settings.
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从管理界面停用然后激活`第2章 - Twitter嵌入`插件以执行其激活函数并创建默认设置。
- en: Navigate to the Settings menu and select the Twitter Embed submenu item to see
    the newly created configuration panel with the first set of options being displayed
    and more sets of options accessible through the drop-down list shown at the top
    of the page.
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到设置菜单并选择Twitter嵌入子菜单项，以查看新创建的配置面板，其中显示第一组选项，并且更多选项可通过页面顶部的下拉列表访问。
- en: '![](img/dc7ea1be-f6e8-4f68-bb7a-9d92a7d827fe.png)'
  id: totrans-559
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc7ea1be-f6e8-4f68-bb7a-9d92a7d827fe.png)'
- en: 'To select the set of options to be used, add the parameter `option_id` to the
    shortcode used to display a Twitter feed, as follows:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要选择要使用的选项集，请将`option_id`参数添加到用于显示Twitter流的短代码中，如下所示：
- en: '[PRE80]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: How it works...
  id: totrans-562
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe shows how we can leverage `options` arrays to create multiple sets
    of options simply by creating the name of the `options` array on the fly. Instead
    of having a specific option name in the first parameter of the `get_option` function
    call, we create a string with an option ID. This ID is sent through as a URL parameter
    on the configuration page and as a hidden text field when processing the form
    data.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方展示了我们如何利用`options`数组通过动态创建`options`数组的名称来创建多组选项。在`get_option`函数调用的第一个参数中，我们不是使用特定的选项名称，而是创建一个带有选项ID的字符串。此ID作为配置页面上的URL参数和当处理表单数据时的隐藏文本字段发送。
- en: The rest of the code is very similar to the other examples that we have seen
    in this chapter, since the way to access the array elements remains the same.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分与我们在本章中看到的其他示例非常相似，因为访问数组元素的方式保持不变。
- en: See also
  id: totrans-565
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Rendering the admin page contents using HTML* recipe
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML渲染管理页面内容的配方
- en: Creating network-level admin pages
  id: totrans-567
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网络级别的管理页面
- en: A very powerful feature of WordPress is its ability to run multiple websites
    from a single installation of the platform. Each site can have its own content
    and its own visual identity, while administrators can manage all sites from one
    Dashboard. When you run WordPress as a multi-site network, it adds an additional
    section to the Dashboard, for network-level management. All of the plugins we
    have created so far in this chapter present configuration panels at the site level,
    allowing for the custom configuration of options on a per-site basis. While this
    will be the desired behavior for most plugins, it might be preferable for some
    configuration elements to be set in a single place by a network-level administrator
    and apply to all the sites in the network.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress的一个非常强大的功能是它能够从单个平台安装中运行多个网站。每个网站都可以有自己的内容和视觉标识，而管理员可以从一个仪表板管理所有网站。当您以多站网络运行WordPress时，它会在仪表板中添加一个额外的部分，用于网络级别管理。我们在此章中创建的所有插件都提供网站级别的配置面板，允许按站点定制配置选项。虽然这将是大多数插件所期望的行为，但对于某些配置元素可能更倾向于由网络级别管理员在单一位置设置并应用于网络中的所有网站。
- en: In this recipe, you will learn how to modify our Google Analytics plugin to
    be configured at the network level when running on a multi-site installation and
    at the site level on regular WordPress configurations.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，您将学习如何修改我们的Google Analytics插件，使其在多站安装上以网络级别配置，在常规WordPress配置上以站点级别配置。
- en: Getting ready
  id: totrans-570
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have already followed the *Accessing user settings from action and
    filter hooks* recipe, and the resulting plugin should be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v9.php`)
    from the downloaded code bundle and rename the file `ch2-page-header-output-v9.php`
    as `ch2-page-header-output.php` before starting this recipe. You should also have
    access to a WordPress installation configured in Network mode. You can read more
    about the steps required to configure WordPress to run as a multisite at [https://codex.wordpress.org/Create_A_Network](https://codex.wordpress.org/Create_A_Network).
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经遵循了*从操作和过滤器钩子访问用户设置*的配方，并且生成的插件应该在你的开发站点中处于激活状态。或者，你可以从下载的代码包中获取生成的代码（`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v9.php`），在开始此配方之前将文件`ch2-page-header-output-v9.php`重命名为`ch2-page-header-output.php`。你还应该能够访问配置为网络模式的WordPress安装。你可以在[https://codex.wordpress.org/Create_A_Network](https://codex.wordpress.org/Create_A_Network)上了解更多关于配置WordPress以运行多站点的步骤。
- en: How to do it...
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你的开发安装的WordPress插件目录中的`ch2-page-header-output`文件夹。
- en: Open the `ch2-page-header-output.php` file in a text editor.
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`ch2-page-header-output.php`文件。
- en: 'Modify the implementation of the `ch2pho_get_options` function to replace both
    option functions with network-level versions. The code section shows the two lines
    that need to be changed with modifications in bold:'
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ch2pho_get_options`函数的实现，用网络级别的版本替换两个选项函数。代码部分显示了需要更改的带有粗体显示的两行：
- en: '[PRE81]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Locate the `add_action` function call that adds a callback to populate the
    admin menu and add code to check whether the installation is a single site or
    multisite before registering callbacks. The following code shows new elements
    in bold:'
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到添加回调以填充管理菜单的`add_action`函数调用，并在注册回调之前添加代码以检查安装是单站点还是多站点。以下代码显示了带有粗体的新元素：
- en: '[PRE82]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Modify the `ch2pho_settings_menu` function to add new items to different menus
    based on whether the site is a regular site or a multisite with the new sections
    identified in bold:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ch2pho_settings_menu`函数，根据网站是普通站点还是带有以下粗体显示的新部分的 multisite，向不同的菜单中添加新项目：
- en: '[PRE83]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'In the `process_ch2pho_options` function, replace the call to `update_option`
    with a call to `update_site_option`:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`process_ch2pho_options`函数中，将`update_option`的调用替换为`update_site_option`的调用：
- en: '[PRE84]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Still in the `process_ch2pho_options` function, make the following changes
    around the `wp_redirect` function call with new elements shown in bold:'
  id: totrans-583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`process_ch2pho_options`函数中，在`wp_redirect`函数调用周围进行以下更改，带有以下粗体显示的新元素：
- en: '[PRE85]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Modify the `ch2pho_config` page function to modify the form action so that
    it finds `admin-post.php` in the multisite installations with the new code shown
    in bold:'
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ch2pho_config`页面函数，以修改表单操作，使其在多站点安装中找到带有以下粗体显示的新代码的`admin-post.php`：
- en: '[PRE86]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Save and close the plugin file.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭插件文件。
- en: In a Network installation of WordPress, visit the Plugins section of Network
    Admin.
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WordPress的网络安装中，访问网络管理中的插件部分。
- en: Network Activate the `Chapter 2 - Page Header Output` plugin. You will see that
    a new item is now available under the Settings menu.
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络激活`Chapter 2 - Page Header Output`插件。你会看到现在在设置菜单下有一个新项目可用。
- en: '![](img/3a47ed63-d281-4ec4-9b86-fefb71c4ba15.png)'
  id: totrans-590
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a47ed63-d281-4ec4-9b86-fefb71c4ba15.png)'
- en: Visit any site in the network and look at the page source to see that the Google
    Analytics code is added to the page header with the user account configured on
    our administration page.
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网络中的任何站点，查看页面源代码以查看Google Analytics代码是否已添加到页面标题中，并且用户账户已配置在我们的管理页面上。
- en: How it works...
  id: totrans-592
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When creating a network-level plugin, the `is_multisite` function becomes very
    useful to determine whether or not a site is configured as a multisite. In the
    recipe, we used it to register callbacks to be called when building different
    menus (the regular single site administration menu and the network management
    menu). We also used the `is_multisite` function when registering the actual menu
    item and to determine where users should be redirected after saving options.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建网络级别的插件时，`is_multisite`函数非常有用，可以确定站点是否配置为多站点。在配方中，我们使用它来注册在构建不同菜单时（常规单站点管理菜单和网络管理菜单）要调用的回调。我们还使用`is_multisite`函数来注册实际的菜单项，并确定在保存选项后用户应重定向到何处。
- en: The other useful functions in these modifications are `get_site_option` and
    `update_site_option`. When called in a multisite configuration, these functions
    will retrieve network-level options from the database. Alternatively, when running
    on a regular single site, they will default to access site-level options. By using
    these functions in our updated code, we make all the interactions with site options
    compatible with single and multisite installations.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 这些修改中其他有用的功能包括 `get_site_option` 和 `update_site_option`。当在多站点配置中调用时，这些函数将从数据库中检索网络级别的选项。或者，当在常规的单站点上运行时，它们将默认访问站点级别的选项。通过在我们的更新代码中使用这些函数，我们使所有与站点选项的交互都兼容单站点和多站点安装。
- en: The last element of this recipe relates to how we activated this plugin at the
    network level. This means that it will be active in all sites created in the network.
    More specifically, in the case of our plugin, this means that all the sites will
    output Google Analyics code in their header, with the associated account being
    specified once on the network configuration.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的最后一个元素与我们在网络级别激活此插件的方式有关。这意味着它将在网络中创建的所有站点中都是活跃的。更具体地说，在我们的插件案例中，这意味着所有站点都将输出谷歌分析代码到它们的头部，相关账户在网络上配置时指定一次。
- en: See also
  id: totrans-596
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Accessing user settings from action and filter hooks* recipe
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从操作和过滤器钩子访问用户设置* 菜谱'
