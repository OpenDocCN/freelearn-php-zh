- en: User Settings and Administration Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is focused on setting up pages that enable users to configure
    plugin settings. It covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating default user settings on plugin initialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing user settings using arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing plugin data on deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an administration page menu item in the settings menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multi-level administration menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding menu items leading to external pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding items that users should not access from the default menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering the admin page content using HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and storing plugin configuration data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a confirmation message when options are saved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom help pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering the admin page contents using the Settings API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing user settings from action and filter hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting admin pages using meta boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting admin code from the main plugin file to optimize site performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing style sheet data in user settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple sets of user settings from a single admin page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a network level plugin with admin pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics,* it is very easy for a plugin to register custom functions with
    action and filter hooks to change or augment the way WordPress renders web pages.
    That being said, some of the examples covered in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics,* have limitations when it comes to dealing with custom
    user information, such as the inability to easily specify a Google Analytics account
    number.
  prefs: []
  type: TYPE_NORMAL
- en: To make plugins easy to use for a wide audience, it is usually important to
    create one or more administration pages where users will be able to provide details
    that are specific to their installation, enter information on external accounts,
    and customize some of the aspects of the plugin's functionality. As an example,
    the Akismet plugin, provided in default WordPress installations, offers a configuration
    page that can be found under the Settings | Akismet configuration menu. Thankfully,
    WordPress has a rich set of functions that allows plugin developers to easily
    put together configuration pages that will seamlessly blend with the rest of the
    administrative panels.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers how to use the WordPress Options **Application** **Programming**
    **Interface** (**API**) functions to store and access user options in the site
    database. It then goes on to explain how to create custom dialogs to provide users
    with complete control over the configuration of the plugins that you create.
  prefs: []
  type: TYPE_NORMAL
- en: Creating default user settings on plugin initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A typical first step of most user-configurable plugins is to create a default
    set of values for all options when the plugin is activated. These default options
    will subsequently be used to populate the plugin's settings page when it is visited
    by the site administrator. This recipe shows how to register a function that is
    called when a plugin is activated, and how to store option data in the site database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch3-individual-options`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch3-individual-options.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Individual Options`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be executed
    when the plugin is activated, after its initial installation or following an upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch3io_set_default_options`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file. Execute the activation function that was just
    added by clicking on the Activate option of this `chapter 3 - Individual Options`
    plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your web server''s MySQL database administration tool, select your WordPress
    database (`wordpressdev` if you followed the recipe in [Chapter 1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml),
    *Preparing a Local Development Environment*), then select the `wpdev_options`
    table. Click on the SQL tab, replace the default query with the following statement,
    and click on Go:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your query should return a single row with the default value assigned to the
    new option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f13f7dfa-049d-41ed-802b-bf9c36286edf.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `register_activation_hook` function is used to indicate to WordPress the
    name of the function that should be called when it activates the plugin. Unlike
    other hooks, this function requires the name of the main plugin code file to be
    sent as its first argument, along with the name of the associated function. To
    do this easily, we can leverage the PHP `__FILE__` constant as the first argument,
    which will resolve to the filename.
  prefs: []
  type: TYPE_NORMAL
- en: When the callback function is called, we can use the Options API to create,
    update, or, delete settings in the options table of the site's MySQL database.
    In this specific example, we are using the `add_option` function to easily create
    an option called `ch3io_ga_account_name` with a default value of `UA-0000000-0`.
  prefs: []
  type: TYPE_NORMAL
- en: Just like function names, you should be careful when naming plugin options,
    to avoid conflicts with other plugins. A good practice is to add a unique prefix
    to the beginning of each variable name.
  prefs: []
  type: TYPE_NORMAL
- en: Before making a call to create the new option, the activation function checks
    whether the option is present in the WordPress options table using the `get_option`
    function. If the return value is false, indicating that the option was not found,
    a new default option can be created. Any other result would show that the plugin
    has been activated on the site previously and that options may have been changed
    from their default values. It is important to keep in mind when writing this code
    that plugins get deactivated and reactivated each time they are updated using
    the WordPress update tool, resulting in a call to their activation function. It
    is also possible that a user might have deactivated a plugin temporarily to debug
    site issues and brought it back at a later time, also resulting in the activation
    function being called.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it should be noted that it is possible to call the `add_option` function
    multiple times if more than one option is needed to implement a plugin's desired
    functionality. That being said, it is not necessary to verify the presence of
    all the options, as checking for a single one would indicate that they were all
    previously set.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beyond the creation of default values for a plugin, the activation hook can
    also be used to perform more advanced tasks, such as interacting with custom database
    tables or doing data initialization, as will be seen in later chapters. In contrast,
    the similar deactivation function hook does not have any real use within the creation
    of most plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivation function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the activation function that we used in this recipe, WordPress provides
    a way to register a deactivation function (using `register_deactivation_hook`).
    While it may be tempting to use this function to remove options created by the
    plugin, it is not possible to know why the activation function was called. The
    three situations that could trigger this call are a plugin upgrade, a temporary
    deactivation to debug a site problem, or just before the plugin gets deleted.
    Since it is best to keep user options in the first two situations, any cleanup
    and data removal code should be placed in a plugin's uninstallation file instead,
    as described in a later recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Removing plugin data on deletion* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing user settings using arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the previous recipe worked quite well in creating entries in the site's
    options table for each individual plugin option, another way to manage user settings
    is to store them as arrays in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe creates the same option as the previous one, but also adds a second
    option and uses an array instead of individual options to store them. It also
    incorporates an upgrade strategy to deal with the creation of additional options
    as a plugin evolves over time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the recipe entitled *Inserting link statistics
    tracking code in page body using plugin filters* in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 2/ch2-page-header-output/ch2-page-header-output-v2.php`)
    from the code bundle downloaded from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support))
    and rename the file `ch2-page-header-output.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file `ch2-page-header-output.php` in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when the
    plugin is activated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_set_default_options_array`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to provide an implementation for the `ch2pho_get_options`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Plugins section of the administration interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Deactivate link for the `Chapter 2 - Page Header Output` plugin,
    followed by a click on the Activate link to execute the activation function that
    was just added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using your web server''s MySQL database administration tool, query the `wpdev_options`
    table of your WordPress installation for an option with the name `ch2pho_options`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Your query should return a single row with a serialized set of data representing
    all of the fields in the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fbcb0e4-c7cf-4726-ab29-72c444984489.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `add_option`, `get_option`, and `update_option` functions accept values
    as single variables or arrays of data. When given an array, they transform the
    information received to a serialized array that gets stored in the site database.
    The main advantage of using arrays over multiple options is that all of the information
    can be retrieved with a single function call, optimizing the access to the MySQL
    database and simplifying your plugin's code. This is especially important when
    your plugin options need to be queried every time a site page needs to be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this advantage is only true if you need to use most plugin options
    at the same time. Otherwise, your code will be managing large amounts of data
    for no reason.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit of using arrays instead of individual options is that the names
    of each option can be much shorter and simpler, since you only need to worry about
    avoiding naming conflicts at the top option name level, as opposed to each key
    in the array. Finally, having all the options stored in a single array makes the
    bulk removal of these options much easier than if they were all stored separately,
    as we will see in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of this recipe's code defines a utility function called `ch2pho_get_options`,
    which is used to make sure that we always get good values when retrieving options,
    even when our plugin runs for the first time or new options are introduced by
    an upgrade. As part of this utility function, we use the `wp_parse_args` function
    to quickly compare an existing set of options retrieved by the `get_option` function
    with the current set of default plugin options, specified by the `$new_options`
    array. For each array element that is not found in the existing options, `wp_parse_args`
    will simply merge it into the resulting array, which is returned at the end of
    the function. The last part of our option-retrieval function checks whether the
    previous option array was empty or whether any new keys were added to the new
    array, using the PHP `array_diff_key` function. In either of these cases, it will
    save the updated options array back to the site database.
  prefs: []
  type: TYPE_NORMAL
- en: It should finally be noted that, while the `ch2pho_get_options` function returns
    an array of all the site options, we are not actually using this return value
    in this recipe; we will use it in later recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding output content to page headers using plugin actions* recipe in [Chapter
    2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting link statistics tracking code in page body using plugin filters*
    recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework
    Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Removing plugin data on deletion* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing plugin data on deletion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any piece of software, it is quite possible that users might decide
    to remove a plugin from their WordPress installation if they no longer require
    the functionality that it provides or they have found an alternative that they
    prefer.
  prefs: []
  type: TYPE_NORMAL
- en: When this happens, the plugin author must decide if all of the configuration
    data stored in the site's database should be left in place, making it easier to
    re-install the plugin down the road, or to remove all of this information, leaving
    a clean database behind.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a de-installation function that will remove
    options data from a site's database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Storing user settings using arrays* recipe
    to have options data ready for deletion, and the resulting plugin should still
    be active in your development site. Alternatively, you can get the resulting code
    (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v3.php`) from the downloaded
    code bundle. You should rename the file `ch2-page-header-output-v3.php` as `ch2-page-header-output.php`,
    and have activated the plugin once before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file called `uninstall.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the new file in a text editor and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins on the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deactivate the `Chapter 2 - Page Header Output` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a copy of your plugin and uninstallation files to avoid losing them upon
    deletion of the plugin in the following steps. The copy should be moved outside
    of the `plugins` folder to avoid WordPress seeing two copies of the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Delete link under the `Chapter 2 - Page Header Output` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the OK button to delete all the plugin files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2dc856af-5ff9-4c2e-9e5f-3b55b7b6b853.png)'
  prefs: []
  type: TYPE_IMG
- en: Depending on the configuration of your development site, you may be prompted
    to provide FTP credentials before WordPress is able to delete the plugin files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using your web server''s MySQL database administration tool, query the `wpdev_options`
    table of your WordPress installation for an option with the name `ch2pho_options`
    to see that the option has been deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a plugin is inactive and a site administrator clicks on its deletion link,
    WordPress checks for the presence of a file called `uninstall.php` in the plugin
    directory. If the file exists and the user clicks the OK button to delete, WordPress
    proceeds with the deletion of all the plugin files and executes the content of
    the `uninstall.php` file. This file should contain straight PHP code that deletes
    all the plugin options and any other content created by the plugin's code. Once
    executed, the uninstall script will be deleted with the rest of the files.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the content of the uninstall script, the first few lines of code
    check for the presence of a constant that WordPress should have set before calling
    the script. If it is not present, the script will abort immediately for security
    purposes. This ensures that an external visitor knowing that a certain plugin
    is installed won't be able to try to delete it. Once the intent has been verified,
    the rest of the code checks for the existence of the `ch2pho_options` array that
    was created in the previous recipe and deletes it. If you created more than one
    option to store your configuration data, you will need to delete each option with
    individual calls to the `delete_option` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Storing user settings using arrays* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an administration page menu item in the settings menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After defining default values for plugin configuration options, the next step
    is to create a place where users will be able to view and change these values.
    By using the WordPress API, we are able to create new items in the administration
    menu that will later allow us to create custom plugin configuration pages. This
    recipe shows how to create a new menu item that will appear under the Settings
    subsection of the administration menu.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Storing user settings using arrays* recipe
    to have options data available to manage. Alternatively, you can get the resulting
    code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v3.php`) from the
    downloaded code bundle. You should rename the file `ch2-page-header-output-v3.php`
    as `ch2-page-header-output.php` before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the root directory of your WordPress development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `wp-config.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `WP_DEBUG` variable to be `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when WordPress
    is building the administration pages menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_settings_menu`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the `Chapter 2 - Page Header Output` plugin if you left it deactivated
    after following the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section on the left-hand navigation menu to expand it.
    You will see a new menu item called My Google Analytics in the tree, created from
    the code that was just added to the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d75eb1d6-056d-435f-8b21-746c63f24711.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the My Google Analytics menu item. You will see an error message displayed,
    since WordPress cannot find the function intended to populate the configuration
    page. This error will go away once you perform the recipe titled *Rendering the
    admin page contents using HTML*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in the `wp-config.php` file, return the `WP_DEBUG` variable to its default
    value of `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you had not set the `WP_DEBUG` variable to be `true` at the beginning of
    this recipe, WordPress would only display a blank page after performing step 13,
    instead of displaying an error message.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first line of code of this recipe registers a function to be called when
    WordPress is building the administration menu. When it is executed, the custom
    function that we created makes a call to the `add_options_page` function to add
    an item to the Settings menu. This function has a number of parameters that we
    will look at, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first two parameters are text strings that will be visible to site administrators,
    with the first one appearing in the browser title bar or tab title, and the second
    being the text of the submenu item that will appear under the Settings menu.
  prefs: []
  type: TYPE_NORMAL
- en: The third parameter is a bit more complicated and refers to the **user capability**
    required to be able to see and access this menu item. When creating users in a
    WordPress installation, each user is assigned one of the five default user roles
    (Subscriber, Administrator, Editor, Author, or Contributor). Each of these roles
    is mapped to a number of permissions that determine the actions that users with
    this role can perform. For a full list of roles and their associated capabilities,
    please refer to the WordPress Codex page on the topic ([https://codex.wordpress.org/Roles_and_Capabilities](https://codex.wordpress.org/Roles_and_Capabilities)).
    In this example, we used the user capability `manage_options`, which is assigned
    to users who have administrative rights on the site and to super admins when working
    in a network WordPress installation.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth menu item, `menu_slug`, is a text string that will be used internally
    by WordPress to identify the menu item. This string should be unique to avoid
    conflicts with other plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The `menu_slug` name should be all lowercase to ensure that more advanced functionalities,
    such as WordPress meta boxes, work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The last parameter specifies the name of the function to be called to display
    the contents of the configuration page when the submenu item is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The Settings menu is a perfect location for plugins that only require a single
    configuration page, as you may have seen when installing other plugins, while
    more complex plugins that require multiple menu sections should use the technique
    shown in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While new items will always be located under the default Settings menu items
    created by WordPress (General, Writing, Reading, and so on), plugin developers
    do have some control over the location of their plugin in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Settings hook priority to determine menu order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous chapter, when action hooks were first introduced,
    the `add_action` function''s third parameter is used to indicate the priority
    of a registered callback over other functions registered for the same hook (in
    this case, the `admin_menu` hook). To ensure that the newly created menu item
    is as high as possible in the menu, the priority of the registered function can
    be set to a value of `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It should be noted that other plugins can also set their callback to this priority.
    In such cases, alphabetical priority and activation sequence are other factors
    to determine which menu item will be displayed first after **Permalinks**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Storing user settings using arrays* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multi-level administration menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When plugins grow in complexity, their configuration options often grow in numbers,
    giving users a high level of flexibility in choosing how the plugin behaves on
    their site. While it is possible to display all the plugin options on a single
    lengthy configuration page, creating a new top-level menu item with multiple sections
    can help organize parameters in logical groupings that will allow users to find
    what they are looking for more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to create a new top-level menu item in the administration
    menu with an accompanying submenu item.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch3-multi-level-menu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch3-multi-level-menu.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Multi-level menu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s administration menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch3mlm_admin_menu`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and download a PNG format 24 x 24 pixel icon from a site, such as IconArchive
    ([http://www.iconarchive.com](http://www.iconarchive.com)), resize it to 20 x
    20 pixels, and save it as `myplugin.png` in the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins section of your site's administration area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see a new menu item in the administration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/818ffe43-3165-4096-85d5-e426a5e392ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Expand the top-level new menu item to see the submenu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As with the previous recipe, clicking on the menu items will display an error,
    since we have not implemented a function to generate actual content for these
    menu items. We will not be implementing pages for these two menu items, but you
    can use a technique similar to what is shown in the *Rendering the admin page
    contents using HTML* recipe to create your own `ch3mlm_my_complex_main` and `ch3mlm_my_complex_submenu`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `add_menu_page` function is very similar to the `add_options_page` function
    seen in the previous recipe, with its first five parameters being identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The last two items are specific to this function, with the first allowing us
    to display a custom icon in the menu next to our new top-level item, and the second
    specifying where the new menu should be positioned within the administration menu.
  prefs: []
  type: TYPE_NORMAL
- en: While it might seem interesting to use the `position` argument of the `add_menu_page`
    function to specify an exact position for a new menu item, doing so is risky,
    since only one menu item will be displayed if two plugins create entries with
    the same `position` value. If the `position` parameter is not specified, the new
    menu item will appear at the bottom of the menu structure, which should be fine
    in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the first menu item has been created, the `add_submenu_page` function
    can be used to attach a submenu item. The following are its parameters, which
    are virtually identical to the `add_options_page` function, except for the first
    parameter, which should be the unique string identifier of the top-level menu
    item to which the submenu should be attached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: While it is possible to use this technique to create top-level menu items for
    plugins with a single configuration page, these simpler extensions should create
    a single entry under the Settings menu, as shown in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating an administration page menu item in the Settings menu* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding menu items leading to external pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the WordPress plugin repository offers a number of useful sections under
    each plugin's page to host important information, including its description, FAQs,
    screenshots and support forums, a number of developers prefer to move documentation,
    FAQs, and even support to their own website. This allows them to create more feature-rich
    content for these sections and to create a more customized brand experience, especially
    in the case of plugins that offer free and premium versions.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add menu items that will lead users to external web
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating a multi-level administration
    menu* recipe to have a multi-level menu in place in your administration interface
    and the resulting plugin should still be active. Alternatively, you can get the
    resulting code (`Chapter 3/ch3-multi-level-menu/ch3-multi-level-menu.php`) from
    the downloaded code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch3-multi-level-menu` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch3-multi-level-menu.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code at the end of the `ch3mlm_admin_menu` function
    after the two calls to `add_submenu_page`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the administration page of your development WordPress installation
    to see the new submenu item under the My Complex Plugin menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd20aa1d-3145-4147-bc2f-d68947d222de.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As calls to the menu creation functions are made by the core WordPress code
    and all active plugins, the system builds an array containing all the items that
    will be displayed to the current user based on their access level. This recipe''s
    code accesses the WordPress global variable containing this array and simply inserts
    an extra element under the `ch3mlm-main-menu` parent menu that was created in
    the previous recipe. The data that gets added is an array containing three elements:
    the label of the menu item, the permissions required to see the item, and the
    URL that will be assigned to the new menu link.'
  prefs: []
  type: TYPE_NORMAL
- en: While this code works in current versions of WordPress, and has worked for many
    versions, there is a chance that it might no longer work at some point if WordPress
    changes the way it builds its menus. That being said, if changes are made to the
    way that menus are constructed, there will likely be new APIs introduced to reproduce
    this functionality, as it is widely used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a multi-level administration menu* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding items which users should not access from the default menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many users praise WordPress for its ease of use and streamlined administration
    interface. That being said, almost everyone who has deployed it to new users has
    instructed them to avoid certain menu items, as they do not need to enter these
    sections and could potentially introduce site malfunctions if they modify settings
    in these areas.
  prefs: []
  type: TYPE_NORMAL
- en: A better solution than prevention through training is to use a few simple API
    functions to hide the undesired menu items. This recipe shows how to use these
    functions to remove the Comments editor and Permalinks settings menu items.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch3-hide-menu-item`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch3-hide-menu-item.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Hide Menu Item`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s navigation menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch3hmi_hide_menu_item`
    function, hiding the Comments menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an extra function call to the `ch3hmi_hide_menu_item` function to hide
    the Permalinks submenu item found under the Settings menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins section of the administration interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the administration menu to see that the Comments menu is no longer
    visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f65a53da-98a5-431f-9a66-aa4f8caf9f0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Expand the Settings menu to see that the Permalinks submenu item is not visible
    either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default WordPress administration menu uses the names of the PHP code files
    used to render each section as their unique identifiers. One way to quickly find
    out the identifier for a menu item is to hover the mouse cursor over it in a web
    browser and to look at the address that the link points to. In the case of the
    Comments menu item, the URL is `http://localhost/wp-admin/edit-comments.php` ;
    thus the use of `edit-comments.php` in the call to `remove_menu_page`.
  prefs: []
  type: TYPE_NORMAL
- en: A similar technique was used to determine the arguments to pass to the `remove_submenu_page`
    function, identifying that the Settings section has a URL of `http://localhost/wp-admin/options-general.php`
    , while the Permalinks section has the address `http://localhost/wp-admin/options-permalink.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the admin page contents using HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a custom menu item has been created, WordPress will call the function associated
    with it when it gets visited. The assigned function's main purpose is to render
    a configuration page containing a form with all the options available to the user
    and to send the captured data back to WordPress for processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main methods that can be used to render plugin configuration
    pages: straight HTML and the Settings API. This recipe explores the use of HTML
    to create a configuration panel, while a later recipe will show how to use the
    Settings API to prepare the page output.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating an administration page menu item
    in the Settings menu* recipe and the resulting plugin should still be active in
    your development site. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v4.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v4.php` as `ch2-page-header-output.php`
    before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code to implement the rendering code for the plugin
    options page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section in the administration pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the My Google Analytics menu item to display the plugin configuration
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42f829d0-0345-462a-8cb6-2d11a589aaf3.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any output generated within the configuration page implementation function will
    be sent to the browser, enclosed within the WordPress administration interface
    layout. In this recipe's code, we first start by using the `ch2pho_get_options`
    function that we defined earlier in this chapter to retrieve all options for the
    plugin, conveniently organized in an array that we can store in a single variable.
  prefs: []
  type: TYPE_NORMAL
- en: We then use a closing PHP bracket to be able to write direct HTML code for the
    rest of the function's body, sending this content directly to the browser. The
    HTML code takes care of creating a standard form, rendering a text field to display
    and accepting new values for the Google Analytics Account Number, and a checkbox
    for the user to specify whether or not outgoing links should be tracked. Finally,
    the HTML code adds a Submit button to allow users to submit any changes made to
    the plugin's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a closer look at the code, it also contains small snippets of PHP code
    that display the current configuration values when the options page is displayed
    and uses the `checked` WordPress utility function to output the correct HTML code
    when the passed argument is true.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest advantage of using straight HTML to render a plugin's configuration
    page is that it allows for the creation of intricate layouts to present all of
    the options to the end user. This is in sharp contrast to using the Settings API,
    as we will see in a later recipe. HTML is also easier to understand for many web
    designers than working with intricate functions.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that any changes submitted from this form in its current
    state won't be saved, since we have not implemented the code necessary to process
    the submitted data and store it back in the `options` database table. This will
    be covered in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As soon as user submission processing comes into play, it is important to think
    about security, to be sure to avoid the most common application security risks
    ([https://www.owasp.org/index.php/Top_10_2017-Top_10](https://www.owasp.org/index.php/Top_10_2017-Top_10)).
    The form that was created in this recipe is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: wp_nonce_field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `wp_nonce_field` function that was used in this recipe is part of a security
    measure to ensure that the data being sent for submission comes from the WordPress
    administration pages and not an external source. By adding this function call,
    a hidden text field is added to the plugin configuration form with information
    that will be checked when the post data is received.
  prefs: []
  type: TYPE_NORMAL
- en: 'While it is optional, the first argument of the function is a unique identifier
    that should always be set to ensure better security. If it is not set, default
    values will be used, facilitating security breaches. The function also has a number
    of other optional parameters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The other three arguments are used to specify a name for the nonce, which would
    need to be matched on the receiving end, a Boolean variable to indicate if the
    referer field should be set for validation, and another Boolean parameter to determine
    whether the hidden form field should be displayed immediately or returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating an administration page menu item in the Settings menu* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Storing user settings using arrays* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and storing plugin configuration data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the configuration page in place, plugin users will be able to modify configuration
    options and submit them to be stored in the WordPress database. The missing link
    at this time is the creation of a data processing function that will receive the
    data posted by the user and store it in the site's `options` table.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to implement a data processing function to validate
    that the information being sent for storage is legitimate and to store the information
    in an options array.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Rendering the admin page contents using
    HTML* recipe and the resulting plugin should still be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v5.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v5.php`
    as `ch2-page-header-output.php` before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when WordPress
    first identifies that the requested page is an administration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_admin_init`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `process_ch2pho_options`
    function that was declared in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section of the administration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the My Google Analytics menu item to display the configuration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value of one of the fields and click on the Submit button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page refreshes, you will see that the values displayed reflect the
    values submitted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe is the first to introduce an action hook that has a variable name.
    Instead of writing a specific action hook name when calling `add_action`, this
    hook name starts with the words `admin_post_` and is followed by the name of an
    action that it expects to match with a hidden form field. In this case, the action
    name is `save_ch2pho_options`. Going back to the previous recipe, you can see
    that this text is the same as the one that was placed in the hidden form field
    called `action`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: When the configuration page form is submitted, it sends all data to the `admin-post.php`
    script, which checks for an `action` field and then sends the data that it received
    to the associated function, if present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the processing function is executed, the calls to `current_user_can` and
    `check_admin_referer` are security measures where we check to see whether the
    user who is currently logged in has administrative rights and whether the nonce
    field that was part of the form is present. An error in these permission checks
    will result in a specific error message, letting the user know that he does not
    have the rights to perform this action, while the nonce check will display a vague
    error message to throw off potential hackers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6d514ee-fb6b-4abd-8c0a-818b556db561.png)'
  prefs: []
  type: TYPE_IMG
- en: The rest of the function focuses on retrieving the current set of plugin options
    using the `ch2pho_get_options` function, processing the posted fields, and storing
    the updated values back in the site database. While using `foreach` loops might
    seem to be overkill to store two simple data fields, this approach can easily
    scale up to support large amounts of configuration fields.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is a call to the `wp_redirect` function to send the browser back
    to the plugin options page after all the data has been stored. It is important
    to always call the `exit` PHP function after a call to `wp_redirect`, as shown
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a confirmation message when options are saved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important usability aspect of any user interface is to display an acknowledgement
    message when users have completed a task successfully. As you may have noticed
    in the previous recipe, WordPress does not provide any user feedback by default
    after configuration data has been saved to the options table.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to display an acknowledgement message on the configuration
    page after the user has updated the plugin's configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Processing and storing plugin configuration
    data* recipe and the resulting plugin should still be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v6.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v6.php`
    to `ch2-page-header-output.php` before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the call to `wp_redirect` at the end of the `process_ch2pho_options`
    function, as follows, with modifications shown in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code (in bold) after the configuration page title within
    the `ch2pho_config_page` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section of the administration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the My Google Analytics menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value of one of the fields and click on the Submit button to see
    the newly created message indicating that the settings have been saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07a9b0a1-1c80-481e-be7c-c0d3ee60e4d4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a redirection call is made, user-submitted fields and PHP variables do
    not carry forward to the target page. Therefore, we need to use another method,
    query arguments, to determine that a confirmation message should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the recipe modifies the existing call to `wp_redirect` slightly
    to add a new query variable called `message`, set to a value of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: Once it receives this variable, the code responsible for rendering the options
    page can display a message, following the standard WordPress styling.
  prefs: []
  type: TYPE_NORMAL
- en: The same mechanism could be used to display different messages based on the
    outcome of the options storage. For example, if some fields need to receive data
    formatted a certain way, the `process_ch2pho_options` function could set the message
    value differently depending on the success or failure of the data processing operation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Processing and storing plugin configuration data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom help pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As descriptive as field labels can be, a good plugin always needs to be accompanied
    by a set of documentation to allow users to quickly understand how to activate
    the plugin and perform the right steps to get the expected results. While a `ReadMe`
    file is often what developers first think of producing, users almost never read
    an external file or instructions on the official WordPress plugin page, they just
    install the plugin and try to figure it out by themselves.
  prefs: []
  type: TYPE_NORMAL
- en: To address this concern, WordPress introduced the ability to create elaborate
    multi-section help pages right in the plugin's administration pages to enable
    users to quickly get answers to their questions. This recipe shows you how to
    register the appropriate callback function to add a help section to your plugin
    configuration page, containing multiple tabs of information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying a confirmation message when
    options are saved* recipe, and the resulting plugin should still be active in
    your development site. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v7.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v7.php` as `ch2-page-header-output.php`
    before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `ch2pho_settings_menu` function in the existing code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the code to store the return value of the `add_options_page` function
    call to a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to the `ch2pho_settings_menu` function to register
    an action that will be called when the plugin''s options page is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code at the end of the plugin file to implement the newly
    declared `ch2pho_help_tabs` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_plugin_help_instructions`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_plugin_help_faq`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section of the administration menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the My Google Analytics menu to display the plugin configuration page.
    You will now see a Help tab appear in the top-right corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Help tab to see all of the help content that has been added to
    the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35b9891e-780b-4c86-96c4-dece2de0d7d7.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As first discussed in the *Processing and storing plugin configuration data*
    recipe, some WordPress action hooks have names that contain a variable element
    that allows the plugin developer to get code executed when a specific page is
    rendered, or when data from a specific form is submitted. In this example, the
    `load-<pagename>` hook is used to register a function that gets executed when
    a specific administration page is accessed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Once the callback occurs, the function's code retrieves a reference to the WordPress
    screen object, which contains data about the screen that is currently displayed,
    along with a number of utility functions to manipulate and add content to the
    page. The code from the recipe then proceeds to register functions to render the
    content of two sections in the Help tab using the `add_help_tab` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `add_help_tab` function is a little different from the functions that we
    have seen before, expecting a single array of options as its parameter. These
    options indicate a unique identifier for the menu section, a title to be displayed
    on each tab, and the name of the function that will render the tab contents. It
    is also possible to replace the callback argument with a parameter called content,
    which would directly contain the HTML code intended to be displayed in the Help
    tab. With this information, WordPress is able to integrate the provided HTML code
    when rendering the options page interface, including all of the necessary wrapper
    code to make the Help tab open and close, as well as allowing the user to switch
    between the different sections.
  prefs: []
  type: TYPE_NORMAL
- en: The other function used in this recipe, `set_help_sidebar`, is even simpler
    than `add_help_tab`, with a single argument indicating the HTML content to be
    displayed on the right-hand side of the help section.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering the admin page contents using the Settings API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to creating administration pages through HTML code, WordPress also
    offers a set of functions referred to as the Settings API that can be used to
    automate the creation of complex configuration pages. While the work required
    to put this rendering technique in place is a bit overkill for plugins that only
    have a handful of options, it is definitely useful if you are dealing with tens
    or hundreds of configuration fields, simplifying the task of writing out HTML
    code for every single item to calling a single function for each of them. It also
    provides some automation around the processing and storing of plugin configuration
    data.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to specify the contents of a configuration page using
    the Settings API and how to provide rendering functions for the most commonly
    used types of form field used in configuration pages. It uses the same set of
    configuration options as the other recipes in this chapter to show how the two
    techniques compare.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch3-settings-api`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch3-settings-api.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 3 - Settings API`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress activates the plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch3sapi_set_default_options`
    function to set default plugin options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to provide an implementation for the `ch3sapi_get_options`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following registration function to associate a callback with the `admin_init`
    action hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an implementation for the `ch3sapi_admin_init` function, creating the settings
    group for the plugin and defining its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a body for the `ch3sapi_validate_options` function, which was declared
    when registering the settings in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a body for the `ch3sapi_main_setting_section_callback` function, declared
    when the settings section was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide an implementation for the `ch3sapi_display_text_field` function, declared
    when a text field was added to the settings section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare and define the `ch3sapi_display_check_box` function, declared when
    a checkbox was added to the settings section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s administration menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide code for the implementation of the `ch3sapi_settings_menu` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a definition for the `ch3sapi_config_page` function, defined when the new
    options page was declared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins menu of the administration area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Settings menu and click on the My Google Analytics - Settings
    API menu item to see the configuration page for this plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46d0c242-6298-4196-b7b4-f8990e31abe0.png)'
  prefs: []
  type: TYPE_IMG
- en: Make a change to the options and submit them to see that they are automatically
    handled by WordPress without having written express code to save options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Settings API is an intricate series of callbacks that allow plugin developers
    to streamline the creation of administration pages and to automatically store
    user options.
  prefs: []
  type: TYPE_NORMAL
- en: This self-contained plugin recipe starts with the creation of a new set of default
    options, to avoid inadvertently deleting options from previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: The code continues with registering a function to be called whenever admin pages
    are prepared for display using the `admin_init` action hook. Upon getting called,
    the callback function takes care of registering a new setting group, a setting
    section belonging to this group, and two fields that will display the desired
    options within the section. As can be seen throughout this code, additional functions
    are registered to validate the user-submitted data, to display custom text at
    the beginning of the section, and to display the two different types of fields
    required to capture and display user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a closer look at each of the functions that were just used, the first
    function has three parameters, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Within these parameters, the first option is a unique identifier for the settings
    group, the second is the name of the options array that will be used to store
    configuration data in the site database, while the third is the name of a callback
    function that will receive user input for validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to the second function used in this example, `add_settings_section`,
    the four parameters that it requires respectively indicate a unique identifier
    for the section, the title string that will be displayed when the section is rendered,
    a callback function that will be used to display a description for the section,
    and finally a page identifier that will be used to render all similar functions
    later within the plugin code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The third function of the Settings API used in this recipe, `add_settings_field`,
    is called multiple times to define the fields that make up each section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the other functions, the first parameter is a unique identifier for
    the field, the second parameter is a label that will be displayed next to the
    field, and the third parameter is a callback function that will be executed to
    output the necessary HTML code to display the field. The next three parameters
    indicate the page that the field belongs to, the section that it is contained
    in, and an optional array of additional data to be sent to the callback function.
    As can be seen in the rest of this recipe, we are leveraging this optional additional
    data argument to send data to the field processing function to make them more
    generic.
  prefs: []
  type: TYPE_NORMAL
- en: When the configuration page is visited, the top-level form is created using
    regular HTML code, setting the action to `options.php`. This script is responsible
    for automating the processing of user data. The rest of the form is quite simple,
    since it gets generated by the `settings_fields` and `do_settings_sections` functions.
  prefs: []
  type: TYPE_NORMAL
- en: When they are called, the setting group created earlier is rendered, followed
    by calls to the functions designed to draw all the sections that it contains and
    all the registered fields within these sections.
  prefs: []
  type: TYPE_NORMAL
- en: While the Settings API provides full control over the layout of the form fields
    themselves, its use dictates the general layout of the configuration page, creating
    a two-column table that contains the labels for each field in the first column
    and the code produced by the plugin's callback functions in the second one. As
    the functions for each type of field are called, they receive the array data that
    was associated with each of them and use it to retrieve the current field values
    and to specify the name of each field to be stored back upon user input.
  prefs: []
  type: TYPE_NORMAL
- en: The last piece of the puzzle is the validation function that was registered
    when the setting group was first created. The purpose of this function is to allow
    plugin developers to perform data type or content validation as user data is submitted
    through the form, similar to the way we validate user-submitted data in the *Processing
    and storing plugin configuration data* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this recipe shows how to create rendering functions for two types of data
    fields, you may require other types of options for your plugin. The following
    are code examples that show how to handle most typical data types used in plugin
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a drop-down list settings field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before adding the select list itself, we would first add a line to initialize
    the `select_list` option in the `ch3sapi_get_options` function, if not found in
    the options retrieved from the database: `$new_options[''select_list''] = ''First'';`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step to rendering a drop-down list is to provide the list of all possible
    options, along with the option name, in the optional field data array. Here is
    an example of a call to the `add_settings_field` function call with such a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'With this information, we can provide an implementation for the `ch3sapi_select_list`
    function that will be able to render an HTML select element using the `choices`
    array to populate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Rendering a text area settings field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another common field type used in configuration pages is a multi-line text
    area. Once again, we would need to update the `ch3sapi_get_options` function to
    specify a default value for this new option if not found. Once this is done, the
    `add_settings_field` function is identical to the text and checkbox examples shown
    in the recipe, while the field rendering code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Processing and storing plugin configuration data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing user settings from action and filter hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating a default set of values for our plugin's configuration and creating
    an interface to allow users to modify and update those values, we are now ready
    to start using these options when pages are rendered using our additional plugin
    functionality. Going back to the Google Analytics example created in [Chapter
    2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin Framework Basics,* this
    recipe shows how to access the plugin options data using a familiar function to
    make the existing code much more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding custom help pages* recipe, and
    the resulting plugin should be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v8.php`)
    from the downloaded code bundle. You should rename the file `ch2-page-header-output-v8.php`
    as `ch2-page-header-output.php` before starting this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the implementation of the `ch2pho_page_header_output` function to retrieve
    the plugin options array and use the stored value for the account number to embed
    it in the page header code. The new sections are identified in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Add code to check whether outgoing code tracking should be done before registering
    an action hook to filter all post and page content, with the changes made identified
    in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the same check to determine whether page footer code should be added to
    provide the JavaScript necessary for outgoing link tracking to occur with the
    changes made identified in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the site and look at the page source to see that the previous `UA-0000000-0`
    has been replaced by the last value saved in the plugin's configuration page.
    You can also set the link tracking code to be displayed or not by changing the
    track outgoing links option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw earlier in this chapter, when creating administrative pages, our custom
    `ch2pho_get_options` function can query the site's database and return the plugin
    configuration data that it contains. This data can be in the form of a single
    variable or an array of information. In this case, following the *Storing user
    settings using arrays* recipe found earlier in this chapter, an array was used
    and accessed to inject values in the page output when header and footer action
    hooks are called and when page content is being filtered.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Storing user settings using arrays* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting admin pages using meta boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a plugin's administration page becomes longer and more complex, it becomes
    important to divide its content into multiple sections. While standard HTML headers
    or fieldset tags could be used for this task, they lack the usefulness and nice
    visual appearance of meta boxes. Meta boxes are the containers that show up in
    most default WordPress content editors, as well as on the main administration
    Dashboard page.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond visually organizing content, meta boxes are very powerful, since they
    allow site administrators to collapse configuration sections that they don't use,
    re-order sections based on their needs, and even hide elements that they don't
    use.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to convert the HTML-based configuration page that was
    created earlier in this chapter to use the built-in meta box system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Accessing user settings from action and
    filter hooks* recipe. Alternatively, you can get the resulting code (`Chapter
    3/ch2-page-header-output/ch2-page-header-output-v9.php`) from the downloaded code
    bundle. You should rename the file `ch2-page-header-output-v9.php` as `ch2-page-header-output.php`
    before starting the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browse to the Plugins section of the administration section of your site and
    deactivate the `Chapter 2 - Page Header Output` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the file `ch2-page-header-output.php` to `ch2-page-header-output-metaboxes.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output-metaboxes.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the plugin name in the header from `Chapter 2 - Page Header Output` to
    `Chapter 2 - Page Header Output Meta Boxes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right under the top plugin header comment, add a line of code to declare a
    global variable to hold the identifier for the options page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Find the `ch2pho_settings_menu` function in the existing code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a line at the top of the function to point to the global options page variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Find the `ch2pho_help_tabs` function within the plugin code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following block of code at the end of the function body to create meta
    boxes to be drawn on the screen and specify functions to be called to populate
    these boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a line of code at the end of the plugin code file to register a function
    to be called when administration page styles are placed in a queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code segment to provide an implementation for the `ch2pho_load_admin_scripts`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function to implement the `ch2pho_plugin_meta_box` function that
    was declared a few steps back. Notice that the body of the function is a direct
    copy and paste of the previous form code that was used to render the Account Name
    and Track Outgoing Links field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to provide an implementation for the `ch2pho_second_meta_box`
    function to display a second meta box. This second box will not have any real
    content. It will only be used to illustrate some of the meta box functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the code for the `ch2pho_config_page` function in your code and modify
    it as shown in the following code, where all the new code segments are in bold.
    Delete the original code that rendered the `ga_account_name` and `track_outgoing_links`
    fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Settings section on the left-hand navigation menu to expand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the My Google Analytics in the tree to display the re-designed administration
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84fe8de3-56c6-43af-a37f-2e5def467662.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag and drop one of the meta boxes to re-order them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of the meta box titles to collapse that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Screen Options menu in the top-right corner to open a menu to control
    the visibility of all the meta boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to another section of the administration menu and come back to the My Google
    Analytics section to see that all the changes made to the layout of the configuration
    page have been retained.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The setup of the meta box functionality is done in the `load-<pagename>` callback
    function by calling the `add_meta_box` function multiple times based on the desired
    number of boxes to be displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function takes a number of arguments, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Going over the parameters in this function, the first is a unique identifier
    for the meta box, while the second is the string that will be displayed as the
    title of the box itself and is also the name that will show up in the Screen Options
    configuration tab. The third parameter is the name of the function to be called
    to render the contents of the meta box. The fourth argument identifies the page
    where the meta boxes will be rendered. In this case, we use the value of the global
    variable `$options_page` for this parameter, to be sure that it will be assigned
    the correct page identifier. Global PHP variables are powerful tools that can
    help us share data between functions in a plugin. By using the keyword `global`
    in front of the name of a variable, a website's PHP interpreter will know that
    it has to access a common memory space to store and access information.
  prefs: []
  type: TYPE_NORMAL
- en: The fifth parameter is an arbitrary name that indicates the name of a section
    where the box should be displayed. This name will be used when making a request
    to WordPress to render all the meta boxes belonging to a specific section. The
    only requirement for this to work correctly is to use the same name when calling
    the `do_meta_boxes` function.
  prefs: []
  type: TYPE_NORMAL
- en: The sixth argument indicates the priority of the registered meta box within
    the section it belongs to, relative to other meta boxes. If all the boxes have
    the same priority, the order in which the calls to the `add_meta_box` function
    were made will determine their original drawing order. Of course, as was seen
    in this recipe, this order can be overridden by the user through a simple drag-and-drop
    operation. The final parameter is optional and can be used to send information
    to the function that will render the meta box contents.
  prefs: []
  type: TYPE_NORMAL
- en: While it is actually possible to call `add_meta_box` from other action hook
    callbacks, only meta boxes registered during a `load-<pagename>` callback will
    show up in the Screen Options list to allow the user to control their visibility.
    You may want to create meta boxes outside of this action hook on purpose, to be
    sure that important boxes are always shown and to provide a standard user experience
    for all users.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the calls to `add_meta_box`, we must make multiple calls to `wp_enqueue_script`
    in the page load function to request for three JavaScript scripts to be loaded
    when our configuration page is rendered. These scripts provide the drag-and-drop,
    minimize, and hiding functionalities that were demonstrated at the end of the
    recipe, with only a few initialization calls needed to be done from our code through
    JavaScript functions.
  prefs: []
  type: TYPE_NORMAL
- en: Once the meta boxes have been created, the bulk of the work is done within the
    options page rendering function. As we can see in the modified code, the first
    thing that is done is to create new nonce fields. These unique numbers will be
    generated as hidden data in the page and will be used for authentication to save
    layout changes within the configuration page. Next, we create a number of `div`
    sections with specific `id` names that contain a nested call to the `do_meta_boxes`
    function. These div tags are used to ensure that the meta boxes are styled using
    the WordPress administration pages style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Once called, the `do_meta_boxes` function takes care of drawing all of the meta
    boxes that were created for the given page (specified in the first argument) and
    given section (second argument). It also passes along any data specified in the
    third function argument to the functions associated with each box.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining changes to the page rendering function is a block of JavaScript
    code that takes care of closing down any meta box section that was closed by the
    user during a previous visit to the page. It also assigns jQuery callbacks to
    the meta boxes so that any user interaction with them is saved to the site database
    by sending AJAX requests to the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not least, the meta box rendering functions are responsible for rendering
    the content inside each meta box. They can do this by outputting straight HTML.
    By passing along the complete options array to these functions, the code that
    is contained within them can be exactly the same as before to render the various
    options fields.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting admin code from the main plugin file to optimize site performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml), *Plugin
    Framework Basics,* the entire content of the main code file of a WordPress plugin
    gets evaluated every time any page is rendered on the site, whether it's a visitor-facing
    page or a backend administration page. This means that large amounts of PHP code
    can potentially be parsed on every iteration, wasting processing power on the
    site's server, even though some of this code will never be active when regular
    visitors are browsing the site.
  prefs: []
  type: TYPE_NORMAL
- en: A prime example of this waste is all of the code samples that we have been building
    in this chapter. While this code is extremely useful for site administrators,
    there is no sense in having the web server parse and validate that code when regular
    pages are displayed. For this reason, it is better to isolate this code in a separate
    file which will only be loaded and parsed when someone is visiting the site's
    dashboard. The following recipe shows how to isolate the less frequently required
    code to a separate file and only load it when a user is visiting the site administration
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Hiding items which users should not access
    from the default menu* recipe to have a starting point for this recipe, and the
    resulting plugin should still be active in your development site. Alternatively,
    you can get the resulting code (`Chapter 3/ch3-hide-menu-item/ch3-hide-menu-item.php`)
    from the downloaded code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch3-hide-menu-item` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch3-hide-menu-item.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new PHP code file called `ch3-hide-menu-item-admin-functions.php` in
    the same directory and open it in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the calls to the `add_action` function and the definition of the `ch3hmi_hide_menu_item`
    function to the new file, preceded by a standard PHP open tag and checking for
    the definition of a constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the main plugin code file (`ch3-hide-menu-item.php`), add code that
    will define a constant and check whether the current page being rendered is an
    administration page and proceed to load the administration functions if it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the plugin will continue to work as it did before, the action hook registration
    code will only be processed when an administration page is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `is_admin` function is used to quickly tell if the page currently being
    rendered is an administration page. If it is, our plugin code uses the standard
    PHP `include` function to load and execute the contents of a separate file. In
    this case, the file is a second PHP file located in the plugin directory. To be
    flexible with regards to the location of the plugin files, we build a path to
    the file containing the administration functions using the WordPress `plugin_dir_path`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: While the benefit of placing so little code in a separate file is minimal, this
    technique has a larger impact on performance when dealing with larger administration
    panels. In addition to not having to register an action hook on every page load,
    the PHP interpreter does not have to make sure that the syntax for the entire
    contents of that second file is valid when rendering front-facing pages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Hiding items which users should not access from the default menu* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing style sheet data in user settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While most common plugin options are typically presented to users as simple
    textboxes, checkboxes, or drop-down lists, there are instances where more text
    needs to be stored for user settings. A good example of this are plugin-specific
    style sheets, which allow users to change the visual appearance of plugin output.
    While loading a separate style sheet file worked well in the *Loading a style
    sheet to format plugin output* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, this approach did not give users a lot of liberty in
    changing these styling rules to work better with their site design, since any
    changes that users make to the style sheet will get overwritten when the plugin
    is updated using the WordPress plugin upgrade process.
  prefs: []
  type: TYPE_NORMAL
- en: A solution to this problem is to store style sheet data with the rest of the
    configuration options in the site database. This way, the information will remain
    intact when upgrades are performed. This recipe shows how to change the plugin
    created in the previous chapter to initialize the plugin options using an external
    file, how to create an administration panel to allow users to modify or reset
    the style sheet, and how to use the new data to output the style information to
    the page header. Many of the lessons learned in this chapter will be put to use
    to create the final result.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Loading a style sheet to format plugin
    output* recipe in the previous chapter to have a starting point for this recipe.
    Alternatively, you can get the resulting code (`Chapter 2/ch2-private-item-text/ch2-private-item-text-v2.php`)
    from the downloaded code bundle and rename the file to `ch2-private-item-text.php`
    before starting the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code to implement an activation callback to initialize
    plugin options when it is installed or upgraded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to register a function to be called when the
    menu is built to add an additional item under the Settings menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Insert the following code to render the options page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The line that prints the style sheet in the text area should start at the beginning
    of a new line to avoid having extra spaces at the beginning of the style sheet
    editor. Also, make sure you do not lose the hyphen in `font-family` if you are
    copying the code from a digital copy of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to register a function to be called when user
    options are saved and to provide an implementation for this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Delete the call to the `add_action` function, which associated the function
    `ch2pit_queue_stylesheet` with the `wp_enqueue_scripts` action hook, along with
    the `ch2pit_queue_stylesheet` function itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to add the user-modifiable style sheet code to the page
    header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deactivate and then Activate the `Chapter 2 - Private Item Text` plugin from
    the administration interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the Settings menu and select the Private Item Text submenu item
    to see the newly created configuration panel, with options to submit changes to
    the style sheet or reset it to its initial state, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f128f0fa-d390-4b75-ba55-4413f61e03f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visit the website and look at the page source to see that the style sheet data
    entered in the configuration page shows up in the HTML header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Re-using many of the elements covered in this chapter, this recipe creates a
    simple yet effective configuration interface to allow users to make changes to
    the color that is used to highlight private text in posts, instead of this color
    being hardcoded in a plugin file.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, this recipe does introduce two new concepts. The first is the
    initialization of the plugin options by reading data from a file instead of having
    all of that information stored in the PHP code. This technique is useful when
    dealing with an option that has a lot of content, such as a style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The next element of interest is within the data processing function, where the
    code checks to see which button was pressed between the one to reset the style
    sheet and the one to submit user changes to be stored in the site database. Based
    on the result, the processing code will either read back the initial style sheet
    from the file or use the user-posted data to update the configuration data.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond these two new concepts, the other main change is to the code that was
    outputting header code referencing an external style sheet file. In this new version,
    a change was made to echo the content of the style sheet that is stored in the
    options table directly to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that this recipe does not check to see if the user enters
    valid CSS code in the field before adding it to the page header, since verifying
    this would be too complex for now. A library such as CSSTidy ([http://csstidy.sourceforge.net/](http://csstidy.sourceforge.net/))
    could be used to perform this task, as desired.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating* *a* *new* *enclosing* *shortcode* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a style sheet to format plugin output* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple sets of user settings from a single admin page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, you have learned how to create configuration pages
    to manage single sets of configuration options for our plugins. In some cases,
    only being able to specify a single set of options will not be enough. For example,
    looking back at the Twitter embed shortcode plugin that was created in the previous
    chapter, a single configuration panel would only allow users to specify one set
    of options, such as the desired Twitter feed dimensions or the number of tweets
    to display.
  prefs: []
  type: TYPE_NORMAL
- en: A more flexible solution would be to allow users to specify multiple sets of
    configuration options, which could then be called up by using an extra shortcode
    parameter (for example, `[twitterfeed user_name="WordPress" option_id="2"]`).
  prefs: []
  type: TYPE_NORMAL
- en: While the first thought that might cross your mind to configure such a plugin
    is to create a multi-level menu item with submenus to store a number of different
    settings, this method would produce a very awkward interface for users to navigate.
    A better way is to use a single panel but give the user a way to select between
    multiple sets of options to be modified.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to enhance the previously created Twitter
    feed shortcode plugin to be able to control the embedded feed width and number
    of tweets to display from the plugin configuration panel and to give users the
    ability to specify multiple display sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating a new shortcode with parameters*
    recipe in the previous chapter to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 2/ch2-twitter-embed/ch2-twitter-embed.php`)
    from the downloaded code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-twitter-embed` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-twitter-embed.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code to implement an activation callback to initialize
    plugin options when it is installed or upgraded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following code segment to register a function to be called when
    the administration menu is put together. When this happens, the callback function
    adds an item to the Settings menu and specifies the function to be called to render
    the configuration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to implement the configuration page rendering function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code to register a function that will process user
    options when submitted to the site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to implement the `process_ch2te_options` function, declared
    in the previous block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `ch2te_twitter_embed_shortcode` function and modify it as follows
    to accept the new `option_id` parameter and load the plugin options to produce
    the desired output. The changes are identified in bold within the recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deactivate and then Activate the `Chapter 2 - Twitter Embed` plugin from the
    administration interface to execute its activation function and create default
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Settings menu and select the Twitter Embed submenu item to see
    the newly created configuration panel with the first set of options being displayed
    and more sets of options accessible through the drop-down list shown at the top
    of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc7ea1be-f6e8-4f68-bb7a-9d92a7d827fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To select the set of options to be used, add the parameter `option_id` to the
    shortcode used to display a Twitter feed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how we can leverage `options` arrays to create multiple sets
    of options simply by creating the name of the `options` array on the fly. Instead
    of having a specific option name in the first parameter of the `get_option` function
    call, we create a string with an option ID. This ID is sent through as a URL parameter
    on the configuration page and as a hidden text field when processing the form
    data.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the code is very similar to the other examples that we have seen
    in this chapter, since the way to access the array elements remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Rendering the admin page contents using HTML* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating network-level admin pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very powerful feature of WordPress is its ability to run multiple websites
    from a single installation of the platform. Each site can have its own content
    and its own visual identity, while administrators can manage all sites from one
    Dashboard. When you run WordPress as a multi-site network, it adds an additional
    section to the Dashboard, for network-level management. All of the plugins we
    have created so far in this chapter present configuration panels at the site level,
    allowing for the custom configuration of options on a per-site basis. While this
    will be the desired behavior for most plugins, it might be preferable for some
    configuration elements to be set in a single place by a network-level administrator
    and apply to all the sites in the network.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to modify our Google Analytics plugin to
    be configured at the network level when running on a multi-site installation and
    at the site level on regular WordPress configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Accessing user settings from action and
    filter hooks* recipe, and the resulting plugin should be active in your development
    site. Alternatively, you can get the resulting code (`Chapter 3/ch2-page-header-output/ch2-page-header-output-v9.php`)
    from the downloaded code bundle and rename the file `ch2-page-header-output-v9.php`
    as `ch2-page-header-output.php` before starting this recipe. You should also have
    access to a WordPress installation configured in Network mode. You can read more
    about the steps required to configure WordPress to run as a multisite at [https://codex.wordpress.org/Create_A_Network](https://codex.wordpress.org/Create_A_Network).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the implementation of the `ch2pho_get_options` function to replace both
    option functions with network-level versions. The code section shows the two lines
    that need to be changed with modifications in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `add_action` function call that adds a callback to populate the
    admin menu and add code to check whether the installation is a single site or
    multisite before registering callbacks. The following code shows new elements
    in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `ch2pho_settings_menu` function to add new items to different menus
    based on whether the site is a regular site or a multisite with the new sections
    identified in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `process_ch2pho_options` function, replace the call to `update_option`
    with a call to `update_site_option`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the `process_ch2pho_options` function, make the following changes
    around the `wp_redirect` function call with new elements shown in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `ch2pho_config` page function to modify the form action so that
    it finds `admin-post.php` in the multisite installations with the new code shown
    in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Network installation of WordPress, visit the Plugins section of Network
    Admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network Activate the `Chapter 2 - Page Header Output` plugin. You will see that
    a new item is now available under the Settings menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a47ed63-d281-4ec4-9b86-fefb71c4ba15.png)'
  prefs: []
  type: TYPE_IMG
- en: Visit any site in the network and look at the page source to see that the Google
    Analytics code is added to the page header with the user account configured on
    our administration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a network-level plugin, the `is_multisite` function becomes very
    useful to determine whether or not a site is configured as a multisite. In the
    recipe, we used it to register callbacks to be called when building different
    menus (the regular single site administration menu and the network management
    menu). We also used the `is_multisite` function when registering the actual menu
    item and to determine where users should be redirected after saving options.
  prefs: []
  type: TYPE_NORMAL
- en: The other useful functions in these modifications are `get_site_option` and
    `update_site_option`. When called in a multisite configuration, these functions
    will retrieve network-level options from the database. Alternatively, when running
    on a regular single site, they will default to access site-level options. By using
    these functions in our updated code, we make all the interactions with site options
    compatible with single and multisite installations.
  prefs: []
  type: TYPE_NORMAL
- en: The last element of this recipe relates to how we activated this plugin at the
    network level. This means that it will be active in all sites created in the network.
    More specifically, in the case of our plugin, this means that all the sites will
    output Google Analyics code in their header, with the associated account being
    specified once on the network configuration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Accessing user settings from action and filter hooks* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
