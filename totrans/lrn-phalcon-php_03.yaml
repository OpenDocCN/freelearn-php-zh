- en: Chapter 3. Learning Phalcon's ORM and ODM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have learned a little bit about Phalcon''s internals and we have
    our project structure, we can move forward to a more serious thing—databases.
    In this chapter, we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The main differences between SQL and NoSQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to connect to a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM/ODM CRUD operations (create, read, update, and delete) and transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the drawbacks of an ORM in general, and how we can improve performance
    using caching methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main differences between SQL and NoSQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is good! It is a powerful RDBMS with a big market share, supported by
    a large community. It is open source (though enterprise flavors exist), and almost
    every PHP application uses it as the main database system.
  prefs: []
  type: TYPE_NORMAL
- en: But once in a while, you will notice that MySQL isn't good enough for your needs.
    Maybe you have heard people talk about MongoDB, CouchDB, Cassandra, and so on.
    We will use MongoDB in our project, so I am going to talk about it.
  prefs: []
  type: TYPE_NORMAL
- en: In general, you will use a NoSQL system, such as MongoDB, when you want to develop
    real-time analytics, cache, and logs; store big data, such as comments or likes;
    and handle many other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few of the differences between a SQL and NoSQL database are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL is *not* relational
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL is not reliable; or better said, it is not safe to use in a complex system,
    because it does not support transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A relational database requires a structure with defined attributes to hold the
    data, but a NoSQL database usually allows free-flow operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later in our project, we will use MongoDB mainly for logging and comments. We
    have already installed MongoDB in the first chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a few usage examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| SQL | MongoDB |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SELECT a,b FROM users` | `$db->users->find([], ["a" => 1, "b" => 1]);` |'
  prefs: []
  type: TYPE_TB
- en: '| `SELECT * FROM users WHERE age=33` | `$db->users->find(["age" => 33]);` |'
  prefs: []
  type: TYPE_TB
- en: On the official PHP website, you can check out the full SQL-to-MongoDB mapping
    chart ([http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php)).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we added a global configuration file and configuration
    files per module. In order to be able to connect to a database, we need to add
    some lines to our configuration file first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s recall our directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to connect to a database, we need to create it. Create a database
    named `learning_phalcon`. You can do this quickly with the help of the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the global configuration file (`config/config.php`), and add these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the configuration parameters for our database, we must create
    a service. Open the global services file (`config`/`service.php`) and add the
    following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now save and close this file. Next, we are going to create a table named
    `article` in our database, and we''ll insert one sample record into this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the database connection, we will use our `Frontend` and `Core` modules.
    In the `Core` module, we are going to create a model for the article table. Based
    on the previous chapter, the directory structure of the `Frontend` module should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the `Core` module, the structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will create the model for the `article` table in a new folder, named `Models`.
    Create the `Models` directory in `modules`/`Core`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Models` directory, create two new files: `Base.php` and `Article.php`.
    We''ll now look at these files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `Base.php` is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The content of `Article.php` is this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Personally, I like to work in the cleanest manner possible. We are going to
    use an intermediate file—a manager—to handle all of the heavy logic. This means
    that you are not going to use the models in the controller, and you are not going
    to alter the models by adding queries or other kind of data. The models should
    be as clean as possible. On the other hand, some people prefer to move the heavy
    logic to models. It''s your choice, but in this book we are going to use managers.
    This being said, let''s create the manager for the article:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to modules/Core/ and create a folder named Managers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two new files named `BaseManager.php` and `ArticleManager.php`, and
    add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `BaseManager.php` file will be placed under `modules/Core/Managers/`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ArticleManager.php` file will be placed under `modules/Core/Managers/`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The new directory structure of the `Core` module should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All good so far! Let''s try to make use of this manager to list the records
    from our `Article` table. For that, we need to declare it as a service first.
    To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the global services file (`config/service.php`), and add the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use the `frontend` module to carry out this test.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `Frontend` directory, edit the `modules/Frontend/Config/routing.php`
    file, and add this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first routing pattern will point any request made at `http://www.learning-phalcon.localhost/articles`
    to the `frontend` module, the `article` controller, and the `listAction` action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second pattern will point to a different action within the article controller,
    named `readAction` and will pass the slug parameter to this action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will create the `article` controller and the template. Navigate to
    `modules/Frontend/Controllers`, and create a file named `ArticleController.php`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `listAction`, we get the `article` manager from DI, and assign the result
    of the `find()` method to a view variable named `articles`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s create a template for this action. Navigate to `modules/Frontend/Views/Default`,
    and create a new directory named `article`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `article` folder, create a file named `list.volt` and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Frontend` directory structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you did everything by the book, you''re all set. You can now go to `http://www.learning-phalcon.localhost/articles`,
    and you should be able to see our test article as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the database](img/B03522_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Great job! You are now connected to the database, and you have the first model
    and manager. We will continue this chapter with data manipulation, validations,
    and simple queries over MySQL and MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: ORM/ODM operations (create, update, delete, transactions, and validations)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we continue, let''s make our article table a little more complex, by
    adding a few columns. We will add three more columns: `is_published`, `created_at`,
    and `updated_at`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `is_published` field will be a Boolean type (in MySQL, it will have a value
    of 0 or 1), and the `created_at` and `updated_at` fields will have the `datetime`
    type. They will hold information about when our article was created and when it
    was updated. You can alter the `article` table and add these fields using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to make modifications to our `Article` model and add the getters
    and setters for these new fields. Open the `modules/Core/Models/Article.php` file
    and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Since most of the CRUD actions that we will use will be handled by the `Backoffice`
    module, we are going to set up this module as we did with the Frontend. The actual
    development of this module will be done later in the book. For now, we will enable
    a quick and simple CRUD operation for the `Article` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review our `Backoffice` directory structure. At this point, you should
    have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ORM/ODM operations (create, update, delete, transactions, and validations)](img/B03522_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For this to be functional, we will need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Add routing information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the controller and the actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the routing information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `config/routing.php` global routing file by adding the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete (or overwrite) the routing file from the `Backoffice` module `modules/Backoffice`/`Config/routing.php`,
    and add a new one with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creating the controller and the actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to `modules/Backoffice/Controllers/`, and create a new file named
    `ArticleController.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating the views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy the views from `Frontend`. We will adapt them for our Backoffice module
    in [Chapter 7](ch07.html "Chapter 7. The Backoffice Module (Part 1)"), *The Backoffice
    Module (Part 1)*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now let's modify the views a bit so that we can have a nice `Backoffice` module.
    Go to `modules/Backoffice/Views/`, open the `layout.volt` file, and make the following
    change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file named `lp.backoffice.css` in `public/assets/default/css/`,
    and add the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we include the preceding file in our `layout.volt` file. We do this by
    looking for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same `layout.volt` file, remove the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content between the `<body>` and `</body>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We are done editing our layout.volt file, but we need to make one more change.
    Open `modules/Backoffice/Views/Default/article/list.volt`, and replace its content
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After all of these changes, the new directory structure should look like what
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the views](img/B03522_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s open `http://www.learning-phalcon.localhost/backoffice/article/list`
    in a browser. If everything goes well, you should be able to see the new `Backoffice`
    layout and our test article in a list exactly like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the views](img/B03522_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a UI, you can start learning about Phalcon''s ORM. You need
    to know that Phalcon provides three ways of working with databases:'
  prefs: []
  type: TYPE_NORMAL
- en: Using ORM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PHQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using raw SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn about all of these in this chapter. Let's start with ORM.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using the ORM, there is virtually no need to write any SQL in your code.
    Everything is OOP, and it is using the models to perform operations. The first,
    and the most basic, operation is retrieving data. In the old days, you would do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The class that our models are extending is \`Phalcon\Mvc\Mode`l. This class
    has some very useful methods built in, such as `find()`, `findFirst()`, `count()`,
    `sum()`, `maximum()`, `minimum()`, `average()`, `save()`, `create()`, `update()`,
    and `delete()`.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD – reading data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have already used the `find()` method in our `article` manager when calling
    `Article::find()`. By default, this method will return all the records from the
    `article` table, sorting them in a natural order. It also accepts an array with
    parameters. The following code examples will explain this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are searching for records that contain the `test-article-short-title`
    article slug. We bind the data order by the `created_at` field in a descending
    order, and limit the number of rows returned to one. The first key of the parameters
    array should always be the condition. Binding parameters is good practice in order
    to avoid SQL injections. I recommend that you always use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of `Article::find()` is an array of objects. This means that if
    we need to iterate between the results, we can do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add two new records to our `article` table, so that you can see live
    what it is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you access `http://www.learning-phalcon.localhost/backoffice/article/list`
    now, you should be able to see the new records, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CRUD – reading data](img/B03522_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we are going to make some sorting tests. For reference, the default order
    shown in the preceding screenshot is a natural one, and the IDs are 1, 2, and
    3\. Keep this in mind, because we will refer to these IDs in the next few lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `article` controller `modules/Backoffice/Controllers/ArticleController.php`,
    and then remove the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following line, which will order the articles by creation date
    in descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the page at `http://www.learning-phalcon.localhost/backoffice/article/list`,
    you will see that the records are ordered differently. The order that you should
    see is this: 3, 2, and 1.'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to practice and try to order by different columns and by adding limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful method is `findFirst()`. This method accepts the same parameters
    as `find()`, except that the result will be an instance of the `Article` model;
    this means that you don''t need to iterate between records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the helpful methods are the magic methods, `findBy*()` and `findFirstBy*()`.
    For example, if you need to search articles by slug, you can do it like this with
    these magic methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: CRUD – creating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating data with the help of ORM is easier than it sounds. We are going to
    make use of the model. Remember what I told you—that I like to keep the models
    as clean as possible. This is why most of the time, we will create and make use
    of managers. Open the `article` manager in `modules/Core/Managers/ArticleManager.php`,
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add a dummy `createAction` method to our controller. Open `modules/Backoffice/Controllers/ArticleController.php`,
    and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon accessing `http://www.learning-phalcon.localhost/backoffice/article/create`,
    you will see some errors, similar to the ones shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CRUD – creating data](img/B03522_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is perfectly normal, since we didn''t pass any parameters to our `create()`
    method. Modify the `createAction` method by adding these parameters to the create
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If we refresh the page at `http://www.learning-phalcon.localhost/backoffice/article/create`,
    we should see a success message similar to what is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CRUD – creating data](img/B03522_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each time you refresh this page, a new record will be inserted into the database.
    You can access `http://www.learning-phalcon.localhost/backoffice/article/list`
    to see the new records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly analyze the `create()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: We instantiate the `Article` model and assign values to it using the setters
    that we wrote for it. Then, we call the built-in `create()` method to create the
    data. If there are any errors, we read them and throw an exception with those
    errors (JSON-encoded), otherwise we return the newly created object.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also use the `save()` method instead of `create()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a big table (tens of columns), you might want to use the built-in
    `assign()` method when you create the object, instead of assigning it via setters
    for each column. You can do this using a key-value array, where the keys are the
    names of the columns, like this for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You might wonder what's with `\Phalcon\Db\RawValue('NOW()')` assigned to `created_at`.
    Well, whenever you need to assign database-driver-specific / driver built-in data,
    you will need to use `\Phalcon\Db\RawValue()`.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we are using it to call the `NOW()` MySQL function, which returns
    the current date and time. If you are working with date-sensitive data, I recommend
    that you use the PHP date and not rely on any database timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD – updating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Updating data is as easy as creating it. The only thing that we need to do
    is find the record that we want to update. Open the `article` manager and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are passing a new variable, `$id`, to the `update` method
    and searching for an article that has its ID equal to the value of the `$id` variable.
    For the sake of an example, this method will update only the article title and
    the `updated_at` field for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a new dummy method as we did for the article, `create`.
    Open `modules/Backoffice/Controllers/ArticleController.php` and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: If you access `http://www.learning-phalcon.localhost/backoffice/article/update/1`
    now, you should be able to see the **1 was updated.** response. Going back to
    the article list, you will see the new title, and the **Updated** column will
    have a new value.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD – deleting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deleting data is easier, since we don''t need to do more than calling the built-in
    `delete()` method. Open the `article` manager, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We will once again create a dummy method to delete records. Open `modules/Backoffice/Controllers/ArticleControllers.php`,
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: To test this, simply access `http://www.learning-phalcon.localhost/backoffice/article/delete/1`.
    If everything went well, you should see the **Article was deleted.** message.
    Going back to, article list, you won't be able to see the article with ID `1`
    anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the four basic methods: create, read, update, and delete. Later in
    this book, we will use these methods a lot.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need/want to, you can use the Phalcon Developer Tools to generate CRUD
    automatically. Check out [https://github.com/phalcon/phalcon-devtools](https://github.com/phalcon/phalcon-devtools)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Personally, I am not a fan of PHQL. I prefer using ORM or Raw queries. But
    if you are going to feel comfortable with it, feel free to use it. PHQL is quite
    similar to writing raw SQL queries. The main difference is that you will need
    to pass a model instead of a table name, and use a models manager service or directly
    call the `\Phalcon\Mvc\Model\Query` class. Here is a method similar to the built-in
    `find()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the models manager, we need to inject this new service. Open the global
    services file, `config/service.php`, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s rewrite the `find()` method by making use of the `modelsManager`
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to bind parameters, the method can look like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are not going to use PHQL at all in our project. If you are interested in
    it, you can find more information in the official documentation at [http://docs.phalconphp.com/en/latest/reference/phql.html](http://docs.phalconphp.com/en/latest/reference/phql.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using raw SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, using raw SQL is the only way of performing complex queries. Let''s
    see what a raw SQL will look like for a custom `find()` method and a custom `update()`
    method :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `rawFind()` method returns an instance of `\Phalcon\Mvc\Model\Resultset\Simple`.
    The `rawUpdate()` method just executes the query (in this example, we will mark
    all the articles as published). You might have noticed the `getReadConnection()`
    method. This method is very useful when you need to iterate over a large amount
    of data or if, for example, you use a master-slave connection. As an example,
    consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Working with models might be a complex thing. We cannot cover everything in
    this book, but we will work with many common techniques to achieve this part of
    our project. Please spare a little time and read more about working with models
    at [http://docs.phalconphp.com/en/latest/reference/models.html](http://docs.phalconphp.com/en/latest/reference/models.html).
  prefs: []
  type: TYPE_NORMAL
- en: Database transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to perform multiple database operations, then in most cases you
    need to ensure that every operation is successful, for the sake of data integrity.
    A good database architecture in not always enough to solve potential integrity
    issues. This is the case where you should use transactions. Let's take as an example
    a virtual wallet that can be represented as shown in the next few tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `User` table looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ID | NAME |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John Doe |'
  prefs: []
  type: TYPE_TB
- en: 'The `Wallet` table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ID | USER_ID | BALANCE |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 5000 |'
  prefs: []
  type: TYPE_TB
- en: 'The `Wallet transactions` table looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ID | WALLET_ID | AMOUNT | DESCRIPTION |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 5000 | Bonus credit |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 1 | -1800 | Apple store |'
  prefs: []
  type: TYPE_TB
- en: 'How can we create a new user, credit their wallet, and then debit it as the
    result of a purchase action? This can be achieved in three ways using transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implicit transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolated transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A manual transactions example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Manual transactions are useful when we are using only one connection and the
    transactions are not very complex. For example, if any error occurs during an
    update operation, we can roll back the changes without affecting the data integrity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: An implicit transactions example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Implicit transactions are very useful when we need to perform operations on
    related tables / exiting relationships:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: An isolated transactions example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Isolated transactions are always executed in a separate connection, and they
    require a transaction manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: ODM/MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will not discuss ODM too much. It mostly supports the same actions as ORM.
    CRUD operations can be done in the same way as we did with ORM. Of course, we
    can't use transactions here, since MongoDB is not a transactional database.
  prefs: []
  type: TYPE_NORMAL
- en: Another important thing is that we need to declare the variables as public,
    not protected, as we did with the article model. This is the case in Phalcon version
    1.3.4, but maybe in version 2.0, things will change.
  prefs: []
  type: TYPE_NORMAL
- en: 'A big difference is in the parameters that we pass to a `find()` method. Suppose
    we used something like the following code for ORM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'For the ODM, we need to do it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please read more about these differences at [http://docs.phalconphp.com/en/latest/reference/odm.html](http://docs.phalconphp.com/en/latest/reference/odm.html)
    and [http://php.net/manual/ro/mongo.sqltomongo.php](http://php.net/manual/ro/mongo.sqltomongo.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we will be using MongoDB later, for now, we will just set up the connection.
    Open the `config/services.php` global services file, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: ORM – drawbacks and caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are developing a small-to-medium project, or if you are working with
    a big team of developers (more than three), using an ORM—in general—is a good
    idea. This is because firstly, it forces you to follow some rules, and secondly,
    the development will be much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take as an example the `SELECT * FROM article` query . Using a raw query,
    the MySQL log will return you this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the ORM and the `find()` method, your MySQL log will look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The ORM first checks whether the table exists. Then it executes the `describe`
    operation of the table, and after that, it executes the query we need. I am not
    saying that the ORM's logic is not right. I am just trying to point out the number
    of operations needed to finish a job. Things are quite messy when you have relations
    across multiple tables, and you can end up with hundreds of queries returning
    data for just 10 records.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid querying the database server every time, we can use the automatic
    caching method. Phalcon accepts a parameter named `cache`, which can be passed
    in the `find()` method. To enable the cache, we need a `modelsCache` service.
    Open the `config/services.php` global services file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s modify the `listAction` function from `modules/Backoffice/Controllers/ArticleController.php`
    by adding a cache key. The final function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The cache key contains two parts: `key` is the key name, and `lifetime` represents
    the time in seconds. That''s it! For the next hour, your database will not be
    queried again. This is a simple example, and I recommend that you pay attention
    to what kind of data are you caching and for how long. Also, invalidating the
    cache can become a complex and very hard job. We will work on caching in the upcoming
    chapters, where you will be able to see more interesting things.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As always, please take some time to read the official documentation at [http://docs.phalconphp.com/en/latest/reference/models-cache.html](http://docs.phalconphp.com/en/latest/reference/models-cache.html),
    so that you can learn more about caching data.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about ORM and ODM in general and how to use the
    main built-in methods to perform CRUD operations. You also learned about database
    transactions and ORM caching, and how to use PHQL or raw SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start developing our database architecture, and
    you will learn more about ORM. We will create forms and implement validations.
    We will also develop a CLI application to help us test our code faster.
  prefs: []
  type: TYPE_NORMAL
