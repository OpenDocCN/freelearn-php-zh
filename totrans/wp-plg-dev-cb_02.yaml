- en: Plugin Framework Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a plugin file and header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding output content to page headers using plugin actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WordPress path utility functions to load external files and images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the site generator meta tag using plugin filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding text after each item's content using plugin filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting link statistics tracking code in page body using plugin filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting coding errors and printing variable content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new simple shortcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new shortcode with parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new enclosing shortcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a style sheet to format plugin output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing plugins using object-oriented PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From its very first versions, WordPress has always been designed as a very open
    platform. This openness has been exemplified not only through its open source
    licensing and distribution model, but also its open plugin architecture, providing
    developers with the ability to deliver an even richer experience to its users.
  prefs: []
  type: TYPE_NORMAL
- en: While a basic WordPress installation provides a great amount of functionality
    that continues to expand from one release to the next, users often have the need
    to add one more feature to make it the perfect website management system. This
    is where the plugins come into play. They can fill this gap by augmenting or manipulating
    virtually any aspect of a WordPress website's display and administrative tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Just like WordPress, plugins are written in the PHP programming language, which
    is structurally similar to more traditional languages such as C and C++. This
    code is stored in plain ASCII text files that are read and executed on the web
    server when pages are requested to be displayed. The secret ingredient that enables
    plugins to have such great power in WordPress is the inclusion of callback mechanisms,
    called **hooks**, throughout the platform's source code. These hooks come in two
    flavors, called action and filter hooks, which allow plugins to add content to
    a site and modify data before it is displayed, respectively. Whether it's rendering
    a site's front page, a single article, or its administration pages, WordPress
    has hundreds of entry points where custom functions can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond their ability to augment WordPress functionality, a side benefit of plugins
    is that most functionalities they add to a site are independent of the active
    theme. Therefore, users who like to change their theme frequently don't have to
    worry about manually adding back custom elements to their new themes when they
    make a switch.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains the difference between action and filter hooks and shows
    how to use them to write a first set of plugins that will range in functionality
    from adding information to the page header to defining new custom shortcodes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a plugin file and header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step of creating a WordPress plugin is to create a PHP file inside
    of the plugins directory and add the necessary information to have it recognized
    by the system. This first recipe shows you how to create a basic plugin file for
    WordPress and how to see and activate this new extension from the administration
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have access to a WordPress development environment, either on your
    local computer or a remote server, where you will be able to load your new plugin
    files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory (`wp-content/plugins`) of your development
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new subdirectory called `ch2-plugin-header` within the plugin directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-plugin-header.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the new file in a text editor and add the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: While the Description text is shown on two separate lines in the code example,
    it should all be entered on a single line in your code to be completely displayed
    in the WordPress Installed Plugins list.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example codeYou can download the example code files for all
    Packt books you have purchased from your account at [https://www.packtpub.com](https://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [https://www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Save and close the new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Plugins in the left-hand navigation menu to show a list of all the
    installed plugins. You should see your new plugin listed next to the two default
    ones that come pre-packaged with WordPress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/772d9de8-2174-415b-9539-ef708d23c100.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable the plugin by clicking on the Activate link under its name. You will
    see that the background color of your new plugin changes to indicate that it has
    been activated, along with a message specifying that the activation was successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugin files can either be located directly in the `wp-content/plugins` directory
    or in a subdirectory under this location. When you access the installed plugins
    list in the administration interface, WordPress scans all potential plugin locations,
    looking for PHP files that contain comments following the format specified in
    this recipe. There can actually be one or more PHP files containing plugin header
    data in any of these directories, and each of them will show up as an entry in
    the plugin list.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a closer look at the code that we entered in the file, the first line
    of the plugin file is a tag that identifies the beginning of the PHP code that
    will be analyzed and executed by the PHP interpreter. Optionally, we could include
    a closing PHP tag (?>) at the end of the file. However, most PHP developers omit
    the closing tag, since having any spaces after that tag will cause warnings to
    be displayed by the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure compatibility with most WordPress installations, it is important to
    use the complete `<?php` open tag syntax in your plugin code instead of the `<?`
    short-hand version, since not all PHP installations are configured to support
    the short version and many users don't have access to change this type of configuration
    on their server.
  prefs: []
  type: TYPE_NORMAL
- en: The second and last lines indicate that the enclosed text should be considered
    as text comments. Finally, each line within the comment contains a specific label,
    indicating the type of information that follows it. When this information is found,
    WordPress retrieves data about the plugin and adds it to the list.
  prefs: []
  type: TYPE_NORMAL
- en: When a plugin is activated, WordPress validates the file's content to be sure
    that it is valid PHP code. It will then execute this content every time any page
    is rendered on the site, whether that page is front-facing or a backend administration
    section. For this reason, it is preferable to activate plugins only when they
    are in use, to avoid site slowdowns.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, at this point, our new plugin does not add or modify any functionality
    in our WordPress installation, since it does not contain real code, but this is
    still an important first step.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Installing a web server on your computer* recipe in [Chapter 1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml),
    *Preparing a Local Development Environment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Downloading and configuring a local WordPress installation* recipe in [Chapter
    1](bd54bb42-2b11-4ac9-ac09-5e6e66f285b6.xhtml), *Preparing a Local Development
    Environment*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding output content to page headers using plugin actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common action performed by plugins is to add extra content to the header of
    visitor-facing pages generated by WordPress. This recipe shows you how to register
    an action hook function to be able to add such additional content. To make this
    example more concrete, we will use the Google Analytics page header JavaScript
    code that so many people use to get good page view statistics for their site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-page-header-output`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-page-header-output.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Page Header Output`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pho_page_header_output`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to your website''s front page and use your browser''s View Page Source
    function to see the HTML source code for the site. The exact name of this function
    will be slightly different based on which browser you are using. Reading through
    the page source code, all of the code contained between the two curled brackets
    of our new function will be visible on your website''s header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17db98ce-321f-4119-9e83-e35c55547b1b.png)'
  prefs: []
  type: TYPE_IMG
- en: If you are copying and pasting code from a digital version of this book, you
    will lose the original code indentation and should correct it in your code editor.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `add_action` function is used to associate custom plugin code to one of
    the two types of WordPress hooks, the action hook. As mentioned briefly in this
    chapter's introduction, hooks are the enabling functionality that make plugins
    possible in WordPress. Action hooks enable the execution of additional code at
    specific points when either public-facing or administration pages are prepared
    to be displayed. This code usually adds content to a site or changes the way a
    given action is performed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the first line of code that we wrote registered a function named
    `ch2pho_page_header_output` with an action hook called `wp_head`. This action
    is one among more than 2,400 action hooks that are available in current versions
    of WordPress and it allows any registered function to output additional content
    to the page header. Since all echoed content will be displayed, we can write our
    callback function very simply by placing `?>` and `<?php` tags around the Google
    Analytics code. This will tell PHP to display all the content that is within that
    function's body, as opposed to interpreting it.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, the current code is not very flexible, since you would
    need to hardcode your Google Analytics account number in the output for it to
    function properly. The creation of a configuration panel in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml),
    *User Settings and Administration Pages*, will provide a way to configure such
    information to make our plugins more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to fully understand its syntax, let''s take a closer look at the complete
    `add_action` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter, the hook name, indicates the name of the WordPress hook
    that we want our custom function to be associated with. This name must be accurately
    spelled; otherwise, our function will not be called and no error message will
    be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is the name of the plugin function that will be called
    to perform an action. This function can have any name, with the only condition
    being that this name must be unique enough to avoid conflicts with function names
    from other plugins or from the core WordPress code. In this recipe, the function
    name starts with an acronym representing the name of the plugin, making it much
    more unique.
  prefs: []
  type: TYPE_NORMAL
- en: The priority parameter is optional, as indicated by the square brackets, and
    has a default value of 10\. It indicates the execution priority of this plugin
    relative to other plugin functions that hook into the same action, with a lower
    number indicating a higher priority.
  prefs: []
  type: TYPE_NORMAL
- en: Any plugin can register one or more functions with an action hook using the
    `add_action` function. As it is rendering web pages, WordPress keeps a queue of
    all entries and calls them at the appropriate moment. It is interesting to note
    that the hook mechanism is also used by WordPress itself, as it regularly calls
    the `add_action` function in its own code to register functions to be called at
    the right time. If you realize that you need your function to be called before
    or after other plugins that are registering with the same hook, change the value
    of the priority parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The last parameter of the `add_action` function, `accepted_args`, has a default
    value of `1` and should be assigned a number. It should also only be set to a
    different value for some particular hooks where more than one parameter should
    be passed to the registered function. Some of these hooks will be covered in later
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finding the right hooks to register plugin functions is a large part of WordPress
    plugin development. Fortunately, there are a number of ways to get information
    on existing hooks and learn when they get called during the WordPress page generation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Action hooks online listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The WordPress Codex ([https://codex.wordpress.org/](https://codex.wordpress.org/))
    and WordPress Code Reference ([https://developer.wordpress.org/reference/](https://developer.wordpress.org/reference/))
    are documentation sites that contain a multitude of information that is useful
    to users and developers alike. When it comes to action hooks, the Codex contains
    information on the most commonly used hooks, with basic descriptions indicating
    how they can be used, and can be found here: [https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference).
    That being said, this is not a complete listing.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many third-party sites that parse the WordPress source code and provide
    their own hook listings (for example, [http://hookr.io](http://hookr.io)). While
    hooks are not as eloquently documented in these types of raw listings, they do
    provide basic information on their names and where they are called as WordPress
    generates pages for visitors and administrators. These details can be enough to
    find a hook based on the functionality that you are trying to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for hooks in the WordPress source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since WordPress is open source, another way to find information about hooks
    is to search directly within its code. For every action hook that accepts user
    functions, you will see a call to the `do_action` function to execute all the
    registered items. As can be seen, the function takes two or more arguments, with
    the second one(s) being optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For the example shown in this recipe, a search for `do_action( ''wp_head''
    )` reveals that it is the only function that is called when a theme makes a call
    to the `wp_head()` function in its header file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a plugin file and header* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WordPress path utility functions to load external files and images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On occasion, plugins need to refer to external files (for example, images, JavaScript,
    or jQuery script files) that are stored in the plugin directory. Since users are
    free to rename a plugin's folder or even install plugin files straight into the
    WordPress plugin directory, paths to any external files must be built dynamically
    based on the actual plugin location. Thankfully, a number of utility functions
    are present to simplify this task. In this recipe, we will write a simple plugin
    that will add a favicon meta tag to a website's header, pointing to an image file
    located in the plugin directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-favicon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a web service, such as [http://getfavicon.org](http://getfavicon.org), to
    retrieve a website's favicon (for example, `http://www.packtpub.com`) and store
    it in the plugin directory with its default name (`favicon.ico`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the plugin directory and create a new text file called `ch2-favicon.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Favicon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2fi_page_header_output`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to your website''s front page and refresh it to see that the icon
    file that you assigned through your plugin code now appears in your browser''s
    address bar, title bar, or navigation tab, depending on your preferred browser.
    The following screenshot shows how the favicon file is rendered in Internet Explorer,
    Mozilla Firefox, and Google Chrome, from top to bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e54ae508-665a-42e1-ac94-64e7d15174e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to your development site's dashboard and select the Customize submenu
    under the Appearance menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Site Identity, assign a square image that is at least 512 x 512 pixels
    in dimension as Site Icon; then, press the Save & Publish button at the top of
    the customizer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh your website to see that the newly assigned site icon is now displayed
    instead of the `favicon.ico` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `plugins_url` utility function, used in conjunction with the `__FILE__`
    PHP constant and the name of our favicon file, enables us to quickly get the URL
    of the directory where our plugin files are located and print out the appropriate
    HTML command to notify browsers of the location of this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `plugins_url` function can be called with or without parameters. In the
    first case, it builds a URL by appending the path found in the first parameter
    to the location of the file specified in the second argument. In the second situation,
    it simply returns the location of the plugin directory.
  prefs: []
  type: TYPE_NORMAL
- en: Before we display our plugin's favicon file, we also check to see whether the
    user has already assigned a site icon using the WordPress customizer. If that
    is the case, we give priority to that icon and display it using the built-in `wp_site_icon`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `plugins_url` function is one of the many functions that can be used in
    plugins to help find the location of files in a WordPress installation. Other
    useful functions include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_theme_root()`: Returns the address of the theme installation directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_template_directory_uri()`: Retrieves the URI to the current theme''s files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin_url()`: Provides the address of the WordPress administrative pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content_url()`: Indicates where the `wp-content` directory can be found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site_url()` and `home_url()`: Returns the site address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`includes_url()`: Provides the location of WordPress `include` files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wp_upload_dir()`: Indicates the directory where user-uploaded files are stored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a plugin file and header* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding output content to page headers using plugin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the site generator meta tag using plugin filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beyond adding functionality or content to a site, the other major task commonly
    performed by plugins is to augment, modify, or reduce information before it is
    displayed on the screen. This is done by using WordPress filter hooks, which allow
    plugins to register a custom function through the WordPress API to be called,
    since content is prepared before it is sent to the browser. In this recipe, you
    will learn how to implement your first filter callback function to modify the
    contents of the generator meta tag that is output as part of the site header.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-generator-filter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-generator-filter.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Generator Filter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to output the generator meta tag as part of the page
    header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2gf_generator_filter`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a web browser to visit your website and display the page source. Searching
    for the keyword `generator` will reveal that the content generator meta tag has
    been modified and now reads:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `add_filter` function is used to associate a custom plugin function to the
    second type of WordPress hooks, the filter hook. Filter hooks give plugins the
    chance to augment, modify, delete, or completely replace information while WordPress
    is executed. To enable this, filter functions are sent data that can be modified
    as a function parameter. They must return the resulting set of data back to WordPress
    once they have finished making the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike action hooks, filter functions must not output any text or HTML code,
    since they are executed while output is being prepared and that would likely result
    in the output showing up in unexpected places in the site layout. Instead, they
    should return the filtered data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a closer look at the parameters of the `add_filter` function, we can
    see that it is very similar to the `add_action` function that we saw in the previous
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter, the hook name, indicates the name of the WordPress hook
    that we want our custom function to be associated with. This name must be accurately
    spelled; otherwise, our function will not be called and no error message will
    be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is the name of the plugin function that will be called
    to filter data. This function can have any name, with the only condition being
    that this name must be unique enough to avoid conflicting with functions from
    other plugins or from the WordPress code.
  prefs: []
  type: TYPE_NORMAL
- en: The `priority` parameter is optional, as indicated by the square brackets, and
    has a default value of `10`. It indicates the execution priority of this plugin
    relative to other plugins that are loaded by WordPress, with a lower number indicating
    a higher priority.
  prefs: []
  type: TYPE_NORMAL
- en: The last parameter of the function, `accepted_args`, has a default value of
    `1` and indicates how many parameters will be sent to your custom filter function.
    It should only be set to higher values when you are using filters that will send
    multiple parameters, as shown in this recipe with the `$html` and `$type` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beyond demonstrating how to change the site generator name, this plugin also
    shows how to use an advanced PHP function to perform the actual text replacement.
    We also take a look at resources to learn more about filter hooks.
  prefs: []
  type: TYPE_NORMAL
- en: preg_replace function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `preg_replace` function is a PHP function that can be used to perform a
    search and replace operation within a string based on a search pattern. We use
    this function rather than the simpler `str_replace`, since we want to find and
    replace both the WordPress keyword and its associated version number, which changes
    with every version.
  prefs: []
  type: TYPE_NORMAL
- en: Filter hooks online listings and the apply_filters function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to action hooks, information about commonly used filter hooks can be
    found on the WordPress Codex ([https://codex.wordpress.org/Plugin_API/Action_Reference](https://codex.wordpress.org/Plugin_API/Action_Reference))
    or on sites that provide raw function lists (for example, [http://hookr.io](http://hookr.io)).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to learn about filter hooks by searching for occurrences
    of the `apply_filters` function in the WordPress code. As can be seen in the following
    code, this function has a variable number of arguments, with the first one being
    the name of the filter hook, the second representing the value that the registered
    function will be able to modify, and the remaining optional parameters containing
    additional data that may be useful in the implementation of the filter function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For the example shown in this recipe, a search for `apply_filters( ''the_generator''`
    in the WordPress code reveals that it is called within the `the_generator` template
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a plugin file and header* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding text after each item's content using plugin filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After making a number of changes to the page header, the generator meta tag,
    and the site favicon, this recipe takes a more active role by adding a link to
    each post or page, allowing visitors to email a link to the item that they are
    currently viewing. This functionality is implemented using a filter hook attached
    to the page and post content, allowing our custom function to append custom output
    code to all entries that get displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-email-page-link`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-email-page-link.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Email Page Link`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit an icon download website, such as [http://iconarchive.com](http://iconarchive.com),
    and download an email icon in a small size (32 x 32 pixels) in PNG format to the
    new plugin's directory, giving it the name `mailicon.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the content of a post or page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2epl_email_page_filter`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit your website to see the new mail icon at the end of each post and page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on one of the mail links. Your default mail client will come up with
    information about the item you were reading. The only information that needs to
    be updated is the recipient address, and visitors can quickly send an email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3b35d84-eed4-4a68-9f23-9d70d276574f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the previous recipe, this plugin uses the `add_filter` function to
    register a custom function to be called by WordPress as it prepares an item's
    content to be displayed on the screen. When the filter function is called, the
    first action that it performs is to create a URL to the email icon that was downloaded
    in the recipe. It then goes on to modify the original content by appending the
    HTML code to display a `mailto` link. The same technique could be used to create
    links to popular social media and link sharing sites, with simple changes to the
    syntax of the link. Once the new content is ready, it is returned back to WordPress
    to be sent to any other registered filters and subsequently be displayed on the
    site.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe also introduces a pair of useful WordPress utility functions to
    get access to the current item's content.
  prefs: []
  type: TYPE_NORMAL
- en: get_the_title and get_permalink functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While these two functions are mainly seen within theme template files, they
    can also be used by plugins to get easy access to the content of items that are
    currently being processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, the two utility functions that are used in this recipe are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_the_title()`: This function gives us quick access to the item''s title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_permalink()`: A function that returns the item''s permalink (a URL that
    is always associated with this post or page, even after it is no longer featured
    on a website''s front page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a plugin file and header* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using WordPress path utility functions to load external files and images*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Modifying the site generator meta tag using plugin filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting link statistics tracking code in page body using plugin filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating two filter functions that append text to the existing content,
    this recipe shows you how to modify the page content before it is displayed on
    the screen. More specifically, the following plugin will expand on the Google
    Analytics header plugin created earlier and add a JavaScript function to all the
    links that are included in posts and pages to track when they are clicked by visitors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding output content to page headers
    using plugin actions* recipe to have a starting point for this recipe and the
    resulting plugin should be active in your development site. Alternatively, you
    can download the resulting code (`Chapter 2/ch2-page-header-output/ch2-page-header-output.php`)
    for that recipe from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-page-header-output` folder in the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-page-header-output.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    that will be called when WordPress is preparing data to display a page or post''s
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2lfa_link_filter_analytics`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line of code to register a function that will be called when
    WordPress renders the page footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2lfa_footer_analytics_code`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Pages section of the Dashboard and edit the home page (or any other
    page). Add a link to the content, pointing to a location of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your web browser, refresh your website and navigate to the page modified
    in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the source view for the page and find the link you added. You will see
    that the link tag has additional `onClick` JavaScript code that will be called
    when visitors follow it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eca034ca-af98-452a-8483-a79ec4559870.png)'
  prefs: []
  type: TYPE_IMG
- en: Scroll to the bottom of the page to see the implementation of the `recordOutboundLink`
    JavaScript function that was added to the page footer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content filter function that is put in place by calling `add_filter` receives
    the entire content of all the posts and pages before they are rendered to the
    browser and is allowed to make any number of changes to this information. In this
    case, we are using the PHP `str_replace` function to search for any occurrence
    of the string `href`, which indicates a link. When the string is found, it is
    replaced with a call to a JavaScript function as well as the original `href` tag.
  prefs: []
  type: TYPE_NORMAL
- en: To make this plugin complete, it also needs to provide an implementation for
    the JavaScript `recordOutboundLink` function. This is done by registering a custom
    function with the `wp_footer` hook that will output extra content with the function
    code in the website's footer.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting plugin automates many of the tasks related to tracking usage data
    on a website using Google Analytics.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding output content to page headers using plugin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding text after each item's content using plugin filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting coding errors and printing variable content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you transcribe code segments from the pages of this book or start writing
    your own plugins, there is a strong chance that you will have to troubleshoot
    problems with your code or have trouble working with data that your plugin is
    meant to manipulate. This recipe shows the basic techniques to identify and quickly
    resolve these errors while creating a plugin that will hide an item from the navigation
    menu for users who are not logged in to your site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-nav-menu-filter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-nav-menu-filter.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Nav Menu Filter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function that will be called when
    WordPress is preparing data to display the site''s navigation menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2nmf_new_nav_menu_items`
    function. Notice that the word `functio` is mistyped on purpose at the beginning
    of the first line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you are using a dedicated code editor, you should be able to tell that the
    text font is not a recognized keyword since it will not be colored as a PHP keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Save the plugin file and leave your code editor open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'WordPress will display a fatal error message indicating that the plugin could
    not be activated, since a syntax error was found. It also indicates the exact
    filename and line where the error occurred, helping to narrow down where the problem
    occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9716665d-3376-493c-9c07-a8a2e97e94e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Go back to your code editor, correct the spelling of the word `function`, and
    save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the plugin a second time. It should now activate correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the code editor, remove the last letter of the word kbd>function to
    reintroduce a syntax error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit your website. You will now see that the entire site has disappeared and
    your browser only displays a blank page with an error message similar to the one
    we just saw. You may also only get a blank page, depending on your web server
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Correct the spelling error once again and your website will go back to normal.
    You will also see a lot of information printed before the navigation menu. This
    output is generated by the `print_r` function and is meant to help us understand
    how the data received by our filter function is organized. Once we have a good
    understanding of that data, we will be able to properly make changes to this information
    in a further step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the WordPress dashboard, navigate to the Appearance | Menus item and create
    an additional item in your menu as Custom Link, setting the URL to `/privatearea`
    and the Link Text to `Private Area`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e870d724-ea54-42cf-8568-8cdc483593af.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save Menu button to store all of your updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in the code editor, replace the `print_r` function call inside of the
    filter function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Refresh your website and you will see that the large array printout has disappeared.
    If you are logged in as the administrator, you will also notice the Private Area
    link in your menu. Log out or use another browser where you are not logged in
    to your development site to hide the menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As WordPress assembles a list of all available plugins to display them in the
    administration interface, it does not check to see if each plugin's PHP code is
    valid. This check is actually done when a plugin is activated. At that time, any
    syntax error will be caught immediately and the newly-activated plugin will remain
    inactive, preventing a failure of the entire website.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, once a plugin is activated, its code is evaluated every time
    WordPress renders a web page, and any subsequent code error that gets saved to
    the plugin file will cause the site to stop working correctly. For this reason,
    it is highly recommended to set up a local development environment, as shown in
    Chapter 1, *Preparing a Local Development Environment*, to avoid affecting a live
    site when an inevitable error creeps up in your plugin code. On a live website,
    to avoid potential outages, a safer method is to deactivate plugins before making
    changes to them, then reactivating them once changes have been made so that they
    are revalidated before their functionality is enabled. It should be noted that,
    with this method, the plugin's functionality won't be available on your site while
    you make changes, so it is not an optimal way to modify deployed code.
  prefs: []
  type: TYPE_NORMAL
- en: Once the code is working correctly, the second part of this recipe shows us
    how to visualize the information that is received by a custom filter function.
    While the WordPress Codex website provides great documentation about the purpose
    of most filters available, it does not go into details about the structure of
    the information that is sent to each filter function. Thankfully, the PHP `print_r`
    function comes in very handy, since it can display the content of any variable
    on the screen, no matter what information is stored in the variable it receives
    as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not least, the implementation of the custom filter function uses the
    WordPress API function `is_user_logged_in()` to see whether the person viewing
    the site has provided login credentials, and then goes on to parse all the menu
    items and remove the Private Area menu item if the visitor is not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the debugging techniques used in this recipe, WordPress offers
    a number of built-in tools to facilitate plugin troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in WordPress debugging features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the `wp-config.php` file, located at the top of the WordPress file structure,
    is primarily used to store basic site configuration data, it can also be used
    to trigger a number of debugging features. The first of these is the debug mode,
    which will display all PHP errors, warnings, and notices at the top of site pages.
    For example, having this option active will show all the undefined variables that
    you try to access in your code along with any deprecated WordPress function. To
    activate this tool, change the second parameter of the line defining the `WP_DEBUG`
    constant from `false` to `true` in `wp_config.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To prevent debug messages from affecting the site''s layout, you can download
    a useful plugin called Debug Bar ([https://wordpress.org/plugins/debug-bar/](https://wordpress.org/plugins/debug-bar/))
    to collect messages and display them in the admin bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c86f7a7e-95ec-4e14-9390-1e419731c473.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Other debugging features that can be activated from the `wp-config.php` file
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WP_DEBUG_LOG`: Stores all debug messages in a file named `debug.log` in the
    site''s `wp-content` directory for later analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WP_DEBUG_DISPLAY`: Indicates whether or not error messages should be displayed
    on the screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SAVEQUERIES`: Stores database queries in a variable that can be displayed
    in the page footer (see [https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis](https://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis)
    for more information)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Modifying the site generator meta tag using plugin filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new simple shortcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shortcodes are a very popular tool in WordPress that allow users to easily add
    content generated by plugins or themes to any page or post without needing to
    be familiar with PHP code and editing theme template files. As they are very simple
    to create, shortcodes can also be used to easily automate the output of content
    that repeatedly needs to be included in your site's content.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe explains how to create a new custom shortcode that will be used
    to quickly add a link to a Twitter page in any post or page, automating a repetitive
    task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-twitter-shortcode`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-twitter-shortcode.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Twitter Shortcode`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to declare a new shortcode, simply using the
    two characters `tl`, and specify the name of the function that should be called
    when the code is encountered in posts or pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2ts_twitter_link_shortcode`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit an existing post on your site and use the shortcode [tl] in the code editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb47c2b2-1b3a-4b95-8f5c-2714a920a959.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and view the post to see that the shortcode was replaced by a link to a
    Twitter page attached to the words Twitter Feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shortcodes have similarities with both action hooks and filter hooks, since
    their associated custom function is called when it is time to perform a task,
    just like an action hook, but they must return their output through a return value,
    just like a filter hook. In terms of external data, the function associated with
    a shortcode will receive data in the case of some types of codes, while it will
    only produce output in other cases.
  prefs: []
  type: TYPE_NORMAL
- en: When used in the text of a post or page, any shortcode surrounded by a pair
    of square brackets is identified by the WordPress engine, which then searches
    for functions registered for that specific code. If found, the associated function
    is called and the expected result is used to replace the original shortcode text
    in the item's content. Just like filter functions, shortcode functions must not
    output any text directly, since it would likely appear in an unexpected place
    in the page layout, as WordPress calls all shortcode-processing functions before
    displaying the body of an item.
  prefs: []
  type: TYPE_NORMAL
- en: For simple shortcodes, such as those in this recipe, the plugin functions associated
    with them must return information, but they do not receive any additional data
    through function parameters. That being said, they can rely on utility functions,
    such as `get_the_ID`, `get_the_title`, and other WordPress utility functions,
    to be able to produce the appropriate output. Other types of shortcodes seen in
    later recipes will have more context and configuration options. It is also possible
    for shortcodes to access stored options data, which will be covered in [Chapter
    3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and Administration
    Pages*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a plugin file and header* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new shortcode with parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While simple shortcodes already provide a lot of potential to output complex
    content to a page by entering a few characters in the post editor, shortcodes
    become even more useful when they are coupled with parameters that will be passed
    to their associated processing function. Using this technique, it becomes very
    easy to create a shortcode that accelerates the insertion of external content
    in WordPress posts or pages by only needing to specify the shortcode and the unique
    identifier of the source element to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We will illustrate this concept in this recipe by creating a shortcode that
    will be used to quickly add Twitter feeds to posts or pages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-twitter-embed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-twitter-embed.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Twitter Embed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to declare a new shortcode and specify the name
    of the function that should be called when the shortcode is found in posts or
    pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2te_twitter_embed_shortcode`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new page and use the shortcode `[twitterfeed user_name=''WordPress'']`
    in the page editor, where `WordPress` is the Twitter username of the feed to display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8dff22ef-cadd-402b-a39d-f877bcea83d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Publish and view the page to see that the shortcode has been replaced by an
    embedded Twitter feed on your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the page and remove the `user_name` parameter and its associated value,
    only leaving the core `[twitterfeed]` shortcode in the post, then Update to save
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page and see that the feed is still being displayed, but now shows
    tweets from another account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When shortcodes are used with parameters, these extra pieces of data are sent
    to the associated processing function in the `$atts` parameter variable. By using
    a combination of the standard PHP `extract` and WordPress-specific `shortcode_atts`
    functions, our plugin is able to parse the data sent to the shortcode and create
    an array of identifiers and values that are subsequently transformed into PHP
    variables that we can use in the rest of our shortcode implementation function.
    In this specific example, we expect a single variable to be used, called `user_name`,
    which will be stored in a PHP variable called `$user_name`. If the user enters
    the shortcode without any parameter, a default value of `ylefebvre` will be assigned
    to the username variable to ensure that the plugin still works. Since we are going
    to accept user input in this code, we also verify that the user did not provide
    an empty string and we use the `esc_html` and `esc_url` functions to remove any
    potentially harmful HTML characters from the input string and make sure that the
    link destination URL is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have access to the Twitter username, we can put together the required
    HTML code that will embed a Twitter feed in our page and display the selected
    user's tweets.
  prefs: []
  type: TYPE_NORMAL
- en: While this example only has one argument, it is possible to define multiple
    parameters for a shortcode.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new simple shortcode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new enclosing shortcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A different type of shortcode is available in WordPress that encloses content
    in posts and pages. Using a syntax similar to HTML tags, enclosing shortcodes
    can be used to identify parts of an item's content that need to be treated in
    a special way. For example, it is possible to use this type of shortcode to style
    a part of the post.
  prefs: []
  type: TYPE_NORMAL
- en: As an example of how to create enclosing shortcodes, this recipe shows you how
    to create a set of tags that will identify part of a post or page that should
    only be shown to visitors that are logged in to a site. In this way, the shortcode
    acts similarly to a filter hook, with the added bonus that you do not need to
    parse for instances of these tags, as would normally be done in a filter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch2-private-item-text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this directory and create a new text file called `ch2-private-item-text.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 2 - Private Item Text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to declare a new shortcode and specify the name
    of the function that should be called when the shortcode is found in posts or
    pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pit_private_shortcode`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate your new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new post and wrap some of the content with the [private] and [/private]
    tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfa02604-2b29-4099-a5c6-a5f79a83e9ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and view the post to see that the text is visible while you are logged
    in to your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out and refresh the page to see that the enclosed text has been replaced
    by a general message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to a filter function, enclosing shortcodes receive a copy of the text
    that has been wrapped with the new tags. It is then possible to return this text
    with additional HTML code, or completely replace it with new content. In this
    specific case, we used the `is_user_logged_in` WordPress function to determine
    whether the current visitor is logged in to the site. Based on the result of that
    query, the code determines whether the original content should be displayed with
    some additional styling code, or if the visitor should see a message encouraging
    them to join the website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new simple shortcode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a style sheet to format plugin output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a plugin adds custom content or inserts styling tags to a post or page's
    existing content, as was done in the previous recipe showing how to create an
    enclosing shortcode, it usually needs to load a custom style sheet to style these
    new elements. This recipe shows how to add a style sheet in the WordPress style
    queue to format the private output created in the previous recipe. This queue
    is processed when the page header is rendered, listing all the style sheets that
    need to be loaded to display the site correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating a new enclosing shortcode* recipe
    to have a starting point for this recipe and the resulting plugin should still
    be active in your development site. Alternatively, you can download the resulting
    code (`Chapter 2/ch2-private-item-text/ch2-private-item-text.php`) of that recipe
    from the Packt website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code after the existing functions to register a function
    that will be called at the beginning of the WordPress page display process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code section to provide an implementation for the `ch2pit_queue_stylesheet`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new text file in the plugin's directory called `stylesheet.css` and
    open it in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your website, making sure you are logged in, and refresh the page
    containing the private text content. You should notice that the text is now displayed
    in gray.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out of the site and refresh the page to see that the registration message
    styling has also changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While it would have been possible to write straight HTML code to load the CSS
    file by registering a function with the `wp_head` action hook, as we have done
    previously, WordPress has utility functions designed to help avoid loading duplicate
    style sheets or scripts on a site. In this specific example, `wp_enqueue_script`
    is used to place the plugin's style sheet file in a queue that will be processed
    when the plugin header is rendered, with the associated name `privateshortcodestyle`.
    Once WordPress has processed all the plugins and boiled down all the style sheet
    requests to single instances, it will output the necessary HTML code to load all
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: The content of the `stylesheet.css` file is normal CSS code that specifies that
    any text that is assigned the `private` class should be displayed in gray, while
    the text displayed to non-registered users should be displayed in white on a red
    background.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new enclosing shortcode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing plugins using object-oriented PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, all plugin examples that have been covered in this chapter have been
    written using the procedural PHP programming style, with all the functions declared
    directly in the main body of the plugin and the hook registration functions having
    direct access to these functions.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress can also be written using an object-oriented PHP approach. This recipe
    explains how to convert the code from the previous recipe into a class-based version
    of the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Loading a style sheet to format plugin
    output* recipe to have a starting point for this recipe. Alternatively, you can
    download the resulting code (`Chapter 2/ch2-private-item-text/ch2-private-item-text-v2.php`)
    for that recipe from the Packt Publishing website ([https://www.packtpub.com/support](https://www.packtpub.com/support)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log in to the administration page of your WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether the `Chapter 2 - Private Item Text` plugin is currently active
    and deactivate it if it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the entire contents of the `ch2-private-item-text` directory and rename
    the copy `ch2-oo-private-item-text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the newly renamed folder and rename the main PHP code file `ch2-oo-private-item-text.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the newly renamed plugin file in a code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the plugin header to change the name of the plugin to `Chapter 2 - Object-Oriented
    - Private Item Text`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right after the plugin header, add the following text to declare a new class
    for our plugin and specify a constructor method for this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Move the calls to the `add_shortcode` and `add_action` functions to be placed
    inside of the class constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the second argument of the `add_shortcode` and `add_action` functions
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Move the complete `ch2pit_private_shortcode` and `ch2pit_queue_stylesheet` functions
    inside of the class body (after the constructor method and before the class closing
    bracket).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and close the modified file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the administration page of your development WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Plugins in the left-hand navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit your site to see that the private item content functionality is still
    in place and works as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code changes that we applied to the plugin first declare a class for all
    of our plugin's functionality and also contain a constructor method for that class.
    The constructor method is called once, as soon as the class is instantiated by
    the last line in the plugin's code, and can be used to associate custom functions
    with all action hooks, filter hooks, and shortcodes.
  prefs: []
  type: TYPE_NORMAL
- en: The main benefit of using an object-oriented approach is that you don't have
    to be as careful when naming your hook callbacks and all other functions, since
    these names are local to the class and can be the same as function names declared
    in any other classes or in procedural PHP code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new enclosing shortcode* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
