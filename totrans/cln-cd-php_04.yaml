- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: It is about More Than Just Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这不仅仅是关于代码
- en: 'Wouldn’t describing **PHP: Hypertext Preprocessor** (**PHP**) as a programming
    language be a bit reductive when you think about it? We must face the facts: PHP
    is not a simple programming language. It’s a complete ecosystem, with a gigantic
    community, thousands of contributors, and new features being proposed and released
    regularly. But not only that: millions of libraries and **application programming
    interfaces** (**API**) are written and launched thanks to PHP. Even many command-line
    tools are entirely developed thanks to the PHP language. PHP is a whole world
    on its own. Let’s start by looking at the reasons why PHP is not just a language
    for writing a website.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '当你想到将 **PHP: Hypertext Preprocessor** （**PHP**）描述为一种编程语言是否有点过于简化？我们必须面对事实：PHP
    不仅仅是一种简单的编程语言。它是一个完整的生态系统，拥有庞大的社区、数千名贡献者，并且定期提出和发布新功能。但不仅如此：数百万个库和 **应用程序编程接口**
    （**API**）都是由于 PHP 而被编写和发布的。甚至许多命令行工具也是完全依靠 PHP 语言开发的。PHP 是一个独立的世界。让我们先看看 PHP 不仅仅是一种编写网站的语言的理由。'
- en: 'These are the topics we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本章中涉及的主题：
- en: PHP as an ecosystem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 作为生态系统
- en: Choosing the right libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的库
- en: A word about semantic versioning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于语义版本控制的一个词
- en: Stability versus trends
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定性 versus 趋势
- en: PHP as an ecosystem
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP 作为生态系统
- en: 'This can be seen in several things that we can list together, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以从我们共同列出的一些事情中看出：
- en: PHP is, still in the early 2020s, the most used server-side language for web
    application development. When you know the predominant (not to say overwhelming)
    place of web applications in our everyday use, this is a genuinely nice award!
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 仍然是 2020 年代初最常用的用于网络应用开发的服务器端语言。当你知道网络应用在我们日常使用中的主导（甚至可以说是压倒性）地位时，这真是一个真正的荣誉！
- en: The language continues to evolve very strongly, especially in recent years.
    It went through a slump during the development of PHP 6 (which was never released)
    before experiencing a real explosion of its popularity starting with version 7\.
    Version 7 defined the foundation of the future of PHP with highly demanded features
    such as strong typing, as well as incredible performance and speed improvement.
    Benchmarks comparing PHP 5 and 7 were just crazy when they first came out. Developments
    continue strongly, with new features being proposed very regularly.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种语言继续非常强烈地发展，尤其是在近年来。在 PHP 6（从未发布）的开发过程中，它经历了一段低谷，然后从版本 7 开始经历了其受欢迎程度的真正爆炸。PHP
    5 和 7 的基准测试在最初发布时简直疯狂。发展势头强劲，新功能被非常频繁地提出。
- en: PHP has an exceptional dependency manager named **Composer**. Simple, open source,
    and devilishly efficient, it is often recognized by its users as the best dependency
    manager on the market, all programming languages included. Although this may be
    a subjective opinion, we can’t take away its reliability.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 拥有一个名为 **Composer** 的杰出依赖管理器。简单、开源且效率惊人，它通常被用户认为是市场上最好的依赖管理器，包括所有编程语言在内。尽管这可能是一种主观观点，但我们无法否认它的可靠性。
- en: Speaking of dependencies, you only have to visit the Packagist site (the repository
    where Composer takes dependencies) to realize the exceptional community that PHP
    has at its disposal to make available so many libraries, each one more incredible
    than the other, with the vast majority being free of charge and with no usage
    restrictions. If you have a need, there is an external library available that
    will certainly solve your problem.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谈到依赖关系，你只需访问 Packagist 网站（Composer 获取依赖的仓库）就能意识到 PHP 拥有异常出色的社区，可以提供如此多的库，每个都比另一个更令人难以置信，其中绝大多数都是免费且无使用限制的。如果你有需求，肯定有一个外部库可以解决你的问题。
- en: PHP extensions are a real goldmine for extending the language. The extensions,
    unlike the libraries that you install with Composer, are written in C and plug
    directly into the source code of the PHP interpreter. This gives us the possibility
    to extend the language with impressive performance. This also means that the default
    installation of PHP can be extremely minimal and needs almost nothing to work.
    We can then install extensions unitarily according to our needs. This is especially
    useful if our application must run on a server with limited resources.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 扩展是扩展语言的一个真正的金矿。与您使用 Composer 安装的库不同，这些扩展是用 C 语言编写的，并直接插入到 PHP 解释器的源代码中。这使我们能够以令人印象深刻的表现力扩展语言。这也意味着
    PHP 的默认安装可以非常精简，几乎不需要任何东西就能工作。然后我们可以根据我们的需求单独安装扩展。这在我们的应用程序必须在资源有限的服务器上运行时尤其有用。
- en: Multiple conferences around the world show a strong commitment to PHP. Equally
    incredible and renowned tools such as the Symfony, Drupal, and Laravel frameworks
    show a real desire to push the language as far as it can be taken. These frameworks
    themselves organize international conferences and are used by multinational companies
    (Airbnb, Spotify, TheFork, and so on). For the record, Symfony is still in 2022
    one of the open source projects with the largest number of contributors to the
    framework and documentation, among all existing open source projects.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 世界各地的多个会议都表现出对 PHP 的强烈承诺。同样令人难以置信且享有盛誉的工具，如 Symfony、Drupal 和 Laravel 框架，显示出将语言推向极限的真正愿望。这些框架本身组织国际会议，并被跨国公司（如
    Airbnb、Spotify、TheFork 等）使用。据记录，Symfony 在 2022 年仍然是所有开源项目中为框架和文档贡献者数量最多的开源项目之一。
- en: The development of the PHP core is still in full swing today, and more than
    ever. Proposals for new features and **requests for comments** (**RFCs**) (the
    first step in proposing a change to the language) are emerging at a rapid pace
    and are implemented just as fast. Many contributors are involved, and a renewal
    of the main contributors is also observed. Older and more important contributors,
    such as the well-known Nikita Popov, are leaving the ship while new contributors
    are coming to the project. The community is in perpetual effervescence.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 核心的开发至今仍在全速进行，而且比以往任何时候都要活跃。新特性的提案和**评论请求**（**RFCs**）（提出语言变更的第一步）正在以惊人的速度出现，并且被迅速实施。许多贡献者参与了其中，并且也观察到主要贡献者的更新换代。一些较老且重要的贡献者，如知名的
    Nikita Popov，正在离开这个项目，而新的贡献者正在加入。社区始终处于不断的活跃状态。
- en: PHP is a language that has a proven reputation. Its robustness and efficiency
    have made it the language of choice for some of the world’s largest sites. Where
    alternatives have been implemented in the past or currently, such as Python (which
    is used by around 1.2% of all websites at the time of writing) for some Google
    sites, PHP is in the majority. Obviously, many attractive technologies are emerging
    and taking market share from PHP, such as Node.js or C# and the .NET Framework.
    PHP still has a good future ahead of it. Knowing how to write a website in PHP
    ensures that you’ll know how to read the source code of the overwhelming majority
    of existing sites in the world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是一个有着良好声誉的语言。其稳健性和效率使其成为世界上一些最大网站的首选语言。在过去或目前，替代方案已经实施或正在实施的地方，例如 Python（在撰写本文时，大约有
    1.2% 的所有网站使用 Python 用于一些 Google 网站），PHP 仍然是主流。显然，许多有吸引力的技术正在兴起，并从 PHP 中夺取市场份额，例如
    Node.js 或 C# 和 .NET 框架。PHP 仍然有着光明的未来。知道如何用 PHP 编写网站可以确保您将能够阅读世界上绝大多数现有网站的源代码。
- en: For all these reasons, PHP is an ecosystem. Pushing the reflection a little
    further... if PHP is not just a programming language and if PHP is not just code,
    why should we limit clean code to code?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些原因，PHP 是一个生态系统。进一步思考……如果 PHP 不仅仅是一种编程语言，如果 PHP 不仅仅是一种代码，那么我们为什么要把清洁代码仅限于代码呢？
- en: The clean code could also contain, by extension, the right choice of external
    dependencies and libraries to install on your project. Let’s see why you should
    choose your dependencies wisely and how to choose them well to limit the risks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁代码也可能包含，通过扩展，安装到您的项目中的外部依赖项和库的正确选择。让我们看看为什么您应该明智地选择依赖项，以及如何选择它们以限制风险。
- en: Choosing the right libraries
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的库
- en: 'Choosing the right external library to install can be a real challenge. It’s
    a challenge we’ve all faced or will all face one day. The reason is simple: there
    is no point in reinventing the wheel. The reason we want to install an external
    library is usually the same. We have a specific problem that we want to solve
    as cleanly as possible. Here, two situations arise:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的第三方库进行安装可能是一项真正的挑战。这是我们每个人都面临过或将来会面临的挑战。原因很简单：没有必要重新发明轮子。我们想要安装外部库的原因通常是一样的。我们有一个具体的问题，我们希望尽可能干净利落地解决它。这里出现了两种情况：
- en: We know how to solve the problem, but we don’t want to have to rewrite everything
    when tools already exist to solve our problem simply
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们知道如何解决这个问题，但我们不想在已经存在解决我们问题的工具时重写一切。
- en: We have no idea how to solve the problem because we lack theoretical or practical
    knowledge
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不知道如何解决这个问题，因为我们缺乏理论或实践知识。
- en: 'It is then interesting to call upon an external library whose role is to bring
    us a very specific solution to our case. The advantages are multiple, as outlined
    here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么调用一个外部库来为我们提供非常具体的解决方案是非常有趣的。这里列出的优势是多方面的：
- en: The person(s) who develop(s) the external library may have thought for several
    days or weeks about the best way to provide a solution. It may even be their day
    job. Whatever time they have spent on it, it is often more time than we will allow
    to think calmly and cleanly about the solution.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发外部库的人可能已经思考了几天或几周，关于提供解决方案的最佳方式。这甚至可能是他们的日常工作。无论他们在这上面花费了多少时间，通常都比我们允许的冷静和清晰地思考解决方案的时间要多。
- en: 'The maintenance of the dependency, if it is still actively in development,
    is managed by someone else than you. This means that you will regularly receive
    bug fixes and new features thanks to these volunteers who offer you their most
    precious asset: their time.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果依赖项仍在积极开发中，那么维护工作将由除你之外的其他人负责。这意味着你将定期收到错误修复和新功能，这些都是这些志愿者提供的最宝贵的资产：他们的时间。
- en: 'If the external library you are using is open source, then you are exposed
    to additional benefits, as follows:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用的是开源的外部库，那么你将获得额外的益处，如下所述：
- en: 'The source code is visible to everyone. This means that anyone, such as other
    developers or even security researchers, can analyze the source code in order
    to strengthen it and fix security flaws (or at least notify the author). Don’t
    get me wrong: open source is not bad for security. In fact, it is quite the opposite.
    Security by obfuscation (understand this as hiding things such as source code
    to ensure “security”) is the worst thing that can happen. Security must be achieved
    by other means. There is no lack of evidence: the most used encryption and ciphering
    algorithms in the world are known, and their functioning is perfectly explained
    in 1,001 places on the internet. This does not compromise their security.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码对每个人都是可见的。这意味着任何人，比如其他开发者甚至安全研究人员，都可以分析源代码以加强它并修复安全漏洞（或者至少通知作者）。请别误会：开源对安全并没有坏处。事实上，恰恰相反。通过混淆（理解为隐藏诸如源代码之类的信息以确保“安全”）来实现安全是最糟糕的事情。安全必须通过其他手段来实现。没有缺乏证据：世界上使用最广泛的加密和加密算法是众所周知的，它们的运作方式在互联网上有成千上万的解释。这并不损害它们的安全性。
- en: If the open source project is abandoned, then initiatives (called “forks”) can
    follow. Forks are, to put it simply, people who have copied the source code of
    a project and developed it on their own, independently of the developments of
    the original project. This can ensure, in theory, infinite longevity of a project.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果开源项目被遗弃，那么可能会出现一些后续行动（称为“分支”）。简单来说，分支就是那些复制了项目源代码并在自己的独立环境中进行开发的人，与原始项目的开发无关。从理论上讲，这可以确保项目的无限寿命。
- en: If the main maintainer of the project no longer has time to take care of the
    project but developers wish to do so, the source code being open to all, they
    can do so.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果项目的主要维护者没有时间再照顾项目，但开发者希望这样做，由于源代码对所有开放，他们可以这样做。
- en: If you are curious, you can dig into the source code and understand how the
    problem was solved by the library!
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你好奇，可以深入研究源代码，了解库是如何解决问题的！
- en: We can clearly see that the choice of open source dependencies is quite inevitable.
    If you want the insurance to not end up with an unusable tool unavailable overnight,
    open source is made for you because you can store a copy of the source code as
    long as you want without fear. This is the first excellent way to choose an external
    library.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到，选择开源依赖项是不可避免的。如果您想要确保不会突然得到一个不可用的工具，开源正是为您准备的，因为您可以存储源代码的副本，而无需担心。这是选择外部库的第一个绝佳方式。
- en: 'A second factor to consider is the frequency of updates to the project. Obviously,
    if a project is open source but has not been updated for several months or even
    several years, beware: it may be an abandonment. In this case, it means that the
    project may not support the next versions of PHP, for example, or that the bugs
    and security flaws will not be fixed anymore. There are two effortless ways to
    know if a project is still maintained or not, as set out here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的第二个因素是项目的更新频率。显然，如果一个开源项目已经几个月甚至几年没有更新，那么要小心：它可能已经被遗弃。在这种情况下，这意味着该项目可能不会支持PHP的下一个版本，或者不再修复错误和安全漏洞。正如这里所述，有两种简单的方法可以知道一个项目是否仍在维护中：
- en: First, you can check the date of the last version of the library. Be careful
    again, as some projects have (very) slow-release processes, and it is advisable
    to combine this technique with the second one.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，您可以检查库的最后一个版本日期。再次提醒，因为一些项目有（非常）缓慢的发布过程，所以建议将此技术与第二种技术结合起来。
- en: Here’s the second technique. Look at when the last modifications of the source
    code were made. This can be done very easily, especially if the source code is
    hosted on a site such as GitHub. By browsing through the files, you can see when
    the last modifications of a folder or a file were made. This can be an excellent
    indication of the development dynamics of the project.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是第二种技术。看看源代码的最后修改时间。这可以非常容易地完成，尤其是如果源代码托管在GitHub等网站上。通过浏览文件，您可以查看文件夹或文件的最后修改时间。这可以是一个很好的项目开发动态的指示。
- en: A third factor to consider is the documentation of the library. You’ll probably
    want to make sure that the project has minimal and sufficient documentation to
    set up the basics. If no documentation is provided, you can be sure that using
    the external library will be a systematic pain. Indeed, all code maintenance will
    become a battle to remember how the project works, without documentation to help
    you or to share knowledge. Moreover, this can also be very much related to the
    community around the technology you want to use. If very few people use the project
    you want to integrate into yours and the community is quite inactive, or even
    non-existent, nobody will be able to help you in an optimal way. This can be an
    effective way to decide whether to use this or that dependency in your code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 需要考虑的第三个因素是库的文档。您可能想确保项目有最小且足够的文档来设置基础知识。如果没有提供文档，那么可以肯定的是，使用外部库将会是一个系统的痛苦。实际上，所有的代码维护都将变成一场记住项目如何工作的战斗，没有文档来帮助您或分享知识。此外，这也非常与您想要使用的技术的社区密切相关。如果您想要集成的项目使用的人很少，社区相当不活跃，甚至不存在，那么没有人能够以最佳方式帮助您。这可以是一个决定是否在代码中使用此或那个依赖项的有效方法。
- en: A fourth factor is the number of dependencies that the library itself depends
    on. Generally speaking, we prefer a library that has very few dependencies. Fewer
    dependencies mean fewer packages to update and fewer third parties, so there is
    less chance of problems in one of those parties.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个因素是库本身依赖的依赖项数量。一般来说，我们更喜欢依赖项很少的库。依赖项越少，需要更新的包就越少，第三方就越少，因此在这些第三方中出现问题的情况就越少。
- en: 'Finally, many projects have **continuous integration** (**CI**) badges on their
    main page. These badges allow you to know at a glance the test coverage (as a
    reminder: the proportion of code covered by tests), the number of tests, the latest
    version, and so on. Obviously, it is better to choose a project with as many tests
    as possible and with a high test coverage to limit problems during updates.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，许多项目在其主页上有**持续集成**（**CI**）徽章。这些徽章让您可以一眼看出测试覆盖率（提醒一下：被测试覆盖的代码比例）、测试数量、最新版本等。显然，选择尽可能多测试和高测试覆盖率的项目来限制更新期间的问题会更好。
- en: A word about semantic versioning
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于语义版本控制的一番话
- en: Speaking of updates, let’s talk about versioning and—especially—semantic versioning.
    If the external library you want to use follows the rules of semantic versioning,
    this could have an incredibly positive and reassuring impact on your developments
    and updates. Let’s take a look at what this means exactly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 说到更新，让我们谈谈版本控制和——特别是——语义版本控制。如果你想要使用的外部库遵循语义版本控制的规则，这可能会对你的开发和更新产生极其积极和令人放心的影响。让我们看看这究竟意味着什么。
- en: What is semantic versioning?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是语义版本控制？
- en: 'Versioning is simply putting a number on a version of the source code. We are
    all familiar with versions such as `1.0`, `1.5.0`, `2.0.0`, and so on. The semantic
    versioning adds a semantic—that is to say, precise meaning to each of these numbers.
    Let’s take version 2.3.15 as an example. Here is how semantic versioning breaks
    down this version number:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制简单来说就是给源代码的版本加上一个数字。我们都熟悉像`1.0`、`1.5.0`、`2.0.0`这样的版本。语义版本控制为这些数字添加了语义——也就是说，精确的含义。以版本2.3.15为例。以下是语义版本控制如何分解这个版本号：
- en: The “2” indicates a major version. A major version can introduce new features,
    bug fixes, and—most importantly—changes that break backward compatibility. This
    last point is the most important. Indeed, from one major version to another, method
    signatures or even complete class names can change, and some may also disappear.
    So, you have to be extremely careful when you move to a major version higher than
    the current one, and you have to test that everything still works. Often, the
    release changelogs provide the changes you need to make to be compliant with the
    new major release.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “2”表示主版本。主版本可以引入新功能、错误修复，并且——最重要的是——破坏向后兼容性的变更。这一点最为重要。确实，从一个主版本到另一个主版本，方法签名甚至完整的类名都可能发生变化，有些也可能消失。因此，当你迁移到高于当前版本的主版本时，你必须非常小心，并且必须测试一切是否仍然正常工作。通常，发布变更日志提供了你需要进行的更改，以便与新的主版本兼容。
- en: The “3” indicates a minor version. As with major releases, minor releases can
    bring new features as well as bug fixes. The main difference is that minor releases
    cannot make changes that break backward compatibility. This means that you can
    upgrade a dependency to the next minor version to take advantage of all the new
    features and bug fixes without worrying that your code will break when you upgrade.
    However, it will never be superfluous to run all your tests afterward at the time
    of the minor update. You never know. Often, minor releases trigger code deprecation
    messages. These messages tell you which methods you should not use anymore because
    they will certainly be removed in the next major release. By taking into account
    the deprecation messages as you develop, you save yourself a lot of work when
    it comes to updating the dependency to the next major release.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “3”表示次版本。与主版本一样，次版本也可以引入新功能和错误修复。主要区别是次版本不能进行破坏向后兼容性的变更。这意味着你可以升级依赖到下一个次版本，以利用所有新功能和错误修复，而无需担心你的代码在升级时会中断。然而，在次版本更新时运行所有测试永远不会多余。你永远不知道。通常，次版本会触发代码弃用消息。这些消息告诉你哪些方法你不再应该使用，因为它们肯定会在下一个主版本中删除。在开发过程中考虑到这些弃用消息，当更新依赖到下一个主版本时，你可以节省很多工作。
- en: The “15” indicates the patch number. A patch contains only bug fixes and security
    fixes. It does not contain new features. You should consider *always* installing
    the new patches of your dependencies in your project.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “15”表示补丁号。补丁只包含错误修复和安全修复。它不包含新功能。你应该考虑*始终*在你的项目中安装依赖项的新补丁。
- en: 'We can see the advantages of semantic versioning: serenity, logic, and consistency.
    There are obviously other variations such as Alpha, Beta, Release Candidate, and
    Golden Master. But these are rarer.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到语义版本控制的优点：宁静、逻辑和一致性。显然还有其他变体，如Alpha、Beta、发布候选和Golden Master。但这些比较少见。
- en: How to deal with semantic versioning
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理语义版本控制
- en: 'Semantic versioning also includes a particular notation that allows your dependency
    manager to know how to install new versions and when to update your dependencies.
    Let’s take as an example this extract of the file that Composer uses to install
    dependencies (and this is the same principle for many dependency managers out
    there):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '语义版本控制还包括一种特定的标记法，允许你的依赖管理器知道如何安装新版本以及何时更新你的依赖。以Composer用于安装依赖项的文件片段为例（这同样适用于许多其他依赖管理器）:'
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This snippet describes four dependencies: a minimal version for PHP, as well
    as three external libraries. It doesn’t really matter what these libraries are.
    We can note here four separate ways to define the versions we want to accept in
    our dependencies. Let’s see what they are.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个片段描述了四个依赖项：PHP的最小版本以及三个外部库。这些库具体是什么并不重要。我们在这里可以指出四种定义我们想要接受的依赖项版本的不同方法。让我们看看它们是什么。
- en: 'The first way to write the version we observe is by using the `>=` operator.
    This one is one of the easiest to understand: we want to accept all versions greater
    than or equal to the one specified. Here, our application accepts all versions
    of PHP higher than version 7.3, as well as version 7.3 itself. Of course, dependency
    managers accept other such operators: `=`, `<`, `>`, and `<=`. You can also combine
    these operators to get very precise version constraints—for example, by writing
    `“>=1.2.0 <2.0.0”`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到的版本的第一种写法是使用`>=`运算符。这个运算符是最容易理解的之一：我们希望接受所有大于或等于指定版本的版本。在这里，我们的应用程序接受所有高于版本7.3的PHP版本，以及版本7.3本身。当然，依赖关系管理器接受其他这样的运算符：`=`,
    `<`, `>`, 和 `<=`。您也可以组合这些运算符以获得非常精确的版本约束——例如，通过编写`“>=1.2.0 <2.0.0”`。
- en: The second operator is quite well known because it is used in many other contexts.
    It is the wildcard, denoted `*`. This symbol simply represents the fact that you
    can replace it with whatever you want. In the preceding example, we accept all
    the patch versions of the 3.4 version of the dependency. This allows it to benefit
    only from bug fixes, without updating the minor version. This wildcard can be
    placed anywhere in the version number. For example, the notation `3.*` will benefit
    from all minor versions of the major version 3.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个运算符相当知名，因为它在许多其他上下文中都被使用。它是通配符，表示为`*`。这个符号简单地表示你可以用任何你想要的东西来替换它。在上面的例子中，我们接受依赖项3.4版本的补丁版本。这允许它仅从错误修复中受益，而不更新次要版本。这个通配符可以放在版本号中的任何位置。例如，表示`3.*`的记法将受益于主要版本3的所有次要版本。
- en: 'The following notation is the use of the tilde operator, `~`. This operator
    means that you will only benefit from the patches of the given version. In the
    example, we will then benefit from all the patch versions of version 1.1 of the
    dependency (that is, 1.1.0, 1.1.1, 1.1.2, and so on). This is remarkably similar
    to the wildcard operator, except that the wildcard operator cannot be placed anywhere
    in the version number and only concerns patches. Also, it is worth noting that
    Composer interprets the tilde a little differently: it also allows minor versions,
    not just patches. If you are using Composer and you want to benefit only from
    the patch versions without the minor versions, you will have to use the wildcard
    operator.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下记法是使用波浪线运算符，表示为`~`。这个运算符意味着你将只从给定版本的补丁中受益。在例子中，我们将从依赖项版本1.1的所有补丁版本中受益（即1.1.0、1.1.1、1.1.2等等）。这与通配符运算符非常相似，除了通配符运算符不能放在版本号的任何位置，并且只关注补丁。还值得注意的是，Composer对波浪线有稍微不同的解释：它还允许次要版本，而不仅仅是补丁。如果你使用Composer，并且只想从补丁版本中受益而不包括次要版本，你必须使用通配符运算符。
- en: Finally, the last operator we will see is the caret operator, denoted `^`. In
    the preceding example, the caret operator allows all patch versions as well as
    minor versions of major version 4 (that is, 4.2.2, 4.2.3, 4.4.0, and so on). If
    you want to define a minimum version of a dependency while accepting new patches
    and minor versions but refusing major versions (which may bring breaking changes)
    automatically during the update of external libraries, this is a particularly
    good choice. That’s why it’s one of the most popular operators.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到的最后一个运算符是撇号运算符，表示为`^`。在上面的例子中，撇号运算符允许所有补丁版本以及主要版本4的次要版本（即4.2.2、4.2.3、4.4.0等等）。如果你想定义一个依赖项的最小版本，同时接受新的补丁和次要版本，但在更新外部库时自动拒绝主要版本（这可能会带来破坏性变化），这是一个特别好的选择。这就是为什么它是最受欢迎的运算符之一。
- en: 'The possibilities are endless, and once you have mastered this notation, you
    can be confident about updating the dependencies of your project. As far as good
    practices are concerned, it is always a clever idea to accept all new patches
    and minor versions of a dependency. You should never lock a dependency to an extremely
    specific version without any conditions or possibility to update. Indeed, if an
    external library scrupulously respects semantic versioning, you will have no conflict
    with your existing code. Breaking changes are reserved for major versions. Therefore,
    you should not automatically accept major versions when updating your dependencies:
    chances are that you will have to adapt your code to make it work properly.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性是无限的，一旦你掌握了这种表示法，你就可以自信地更新你项目的依赖项。至于良好的实践，接受依赖项的所有新补丁和小版本总是一个明智的想法。你永远不应该在没有条件或更新可能性的情况下将依赖项锁定到非常具体的版本。实际上，如果一个外部库严格遵守语义版本控制，你将不会与现有代码发生冲突。破坏性变化仅限于主要版本。因此，在更新依赖项时，你不应该自动接受主要版本：你可能会不得不调整你的代码以使其正常工作。
- en: Stability versus trends
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稳定性 versus 趋势
- en: Let’s finish this chapter with a few words about the most recent versions, but
    also about trendy external technologies and libraries.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用关于最新版本的一些话来结束这一章，但也要谈谈流行的外部技术和库。
- en: 'First, let’s talk about the latest versions of external libraries. Of course,
    we might be tempted to use the latest ones, the ones that were just released a
    few hours ago. It is worth remembering that bugs may appear, and a new patch version
    may be released in the near future if this is the case. Or not. And in this case,
    the bug could persist for a while. So, it’s particularly important to write tests.
    Imagine the comfort: you update all your dependencies, you run your test suite,
    and if all the lights are green (and your application is properly tested), you
    can be fairly sure that everything is fine.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们谈谈外部库的最新版本。当然，我们可能会倾向于使用最新的版本，那些几个小时前刚刚发布的版本。值得记住的是，可能会出现错误，如果这种情况发生，不久的将来可能会发布一个新的补丁版本。或者也可能不会。在这种情况下，错误可能会持续一段时间。因此，编写测试尤为重要。想象一下这种舒适感：你更新了所有依赖项，你运行了你的测试套件，如果所有指示灯都是绿色的（并且你的应用程序得到了适当的测试），你就可以相当确信一切正常。
- en: That said, if any tests turn red because you’ve updated an external library,
    you’ll have to investigate to find out where this is coming from. In any case,
    you shouldn’t think that you are safe from any problem if your dependencies are
    well fixed and constrained or you only accept patches and/or minor versions. Patches
    could also bring bugs—you never know.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果你更新了外部库，任何测试结果变成红色，你将不得不调查原因。在任何情况下，你不应该认为如果你的依赖项得到了很好的固定和约束，或者你只接受补丁和/或小版本，你就不会遇到任何问题。补丁也可能带来错误——你永远不知道。
- en: 'As far as Alpha versions are concerned, let’s be clear: these versions are
    not made for production applications. The different libraries are clear on this
    point: the code can change from one day to the next, bringing breaking changes
    without warning. In short, you must be incredibly careful. That said, if you want
    to evaluate these versions to see for yourself, the developers of the libraries
    will be delighted to receive your feedback. The Beta versions are supposed to
    be more stable and not bring any more breaking changes. You should still be incredibly
    careful when using them.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 至于Alpha版本，让我们明确一点：这些版本不是为生产应用程序准备的。不同的库对此都很清楚：代码可能会在一天之内发生变化，带来未警告的破坏性变化。简而言之，你必须非常小心。话虽如此，如果你想亲自评估这些版本，库的开发者将非常乐意收到你的反馈。Beta版本应该更加稳定，不会带来更多的破坏性变化。使用它们时，你仍然必须非常小心。
- en: 'As a general rule, only use the final, stable versions in production. Reserve
    the Alpha and Beta versions for development and test environments if you want
    to be ready on the day of the stable release for production deployment. New features
    are always exciting things, but they are never worth sacrificing the stability
    of your application. Your users don’t care about the new features of the external
    libraries you use: only stability matters—the fact that it just works.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一条一般规则，只有在生产环境中使用最终的、稳定的版本。如果你想为稳定发布的当天做好生产部署的准备，请将Alpha和Beta版本保留用于开发和测试环境。新特性总是令人兴奋的事情，但它们永远不值得牺牲你应用程序的稳定性。你的用户并不关心你使用的第三方库的新特性：只有稳定性才是最重要的——它就是能正常工作的事实。
- en: 'Now, let’s talk about trendy technologies (an external PHP library, a new tool,
    or even a new programming language). You hear everyone around you talking about
    a particular technology. This technology is spreading like wildfire, you hear
    about it everywhere on the internet, huge companies are getting into it, and tech
    conferences are all about it. You must be wary of this kind of thing. Even if
    the promises of these technologies can be exciting and revolutionary, think first
    about what is important: your users.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来谈谈流行的技术（一个外部的PHP库、一个新工具，甚至是一种新的编程语言）。你听到周围的人都谈论某种特定的技术。这种技术像野火一样蔓延，你在互联网的每个角落都能听到关于它的消息，大公司都开始涉足其中，技术会议也都在讨论它。你必须对此类事物保持警惕。即使这些技术的承诺可能令人兴奋且具有革命性，首先考虑的应该是：你的用户。
- en: 'Will this technology make a real difference to your end users? Is it really
    worth training on it and taking weeks or even months to figure out how it works?
    You need to be sure that it will have a real positive impact on your project.
    You also must keep in mind that innovative technology will have a small community.
    The impacts are immediate, as outlined here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术是否真的会对你的最终用户产生影响？它真的值得培训并花费数周甚至数月来弄清楚它是如何工作的吗？你必须确信它将对你的项目产生真正的积极影响。你还必须记住，创新技术将拥有一个较小的社区。影响是即时的，正如以下所述：
- en: You will have to train all the people who arrive on your project
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将不得不培训所有加入你项目的人
- en: The documentation may not be complete, which may make it difficult to understand
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档可能并不完整，这可能会使理解变得困难
- en: 'You may find yourself alone in front of your screen without finding a solution
    to your problem: you are one of the first to use this technology, and therefore
    one of the first to face the obstacles encountered with it'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会发现自己独自坐在屏幕前，找不到解决问题的方法：你是这项技术的第一批使用者之一，因此也是第一批面临其遇到的障碍的人
- en: Finally, you must make sure that the project is robust so that you don’t end
    up with a recent technology abandoned without warning. This happens more often
    than you think, and much (if not all) of your work will have been for naught.
    So, beware of the latest unproven technologies, and be sure of the robustness
    and seriousness of the project. Wait until you’ve had some time to think about
    it. Again, your users will surely be able to do without this technology (which
    they will not be aware of) until it is mature.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你必须确保项目是健壮的，这样你就不会在没有任何警告的情况下放弃最新的技术。这种情况比你想的更常见，而且（如果不是全部）你的工作可能都白费了。所以，要警惕最新的未经证实的科技，并确保项目的健壮性和严肃性。等待一段时间后再考虑。再次强调，你的用户肯定可以在这项技术成熟之前不使用它（他们甚至可能不知道这项技术）。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Limiting PHP to the programming language is reductive. We have just seen it—it
    is a real ecosystem with a rich and active community, and extremely far from burying
    its favorite language. The developments around PHP are countless, and the language
    itself has evolved in the most beautiful way in recent years. The contributions
    of functionalities gave a real second wind to this one, allowing it to claim—still
    today—first place among the most used programming languages on the server side
    for a web application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将PHP限制为编程语言是过于简化的。我们刚刚看到——它是一个真实且充满活力、丰富的生态系统，并且与埋葬其最喜欢的语言相去甚远。围绕PHP的发展是无数的，而且近年来，这种语言本身也在以最美好的方式进化。功能的贡献给了它真正的第二次生命，使它至今仍能在服务器端用于Web应用的最常用编程语言中占据首位。
- en: All this would be nothing without the explosion in the number of external libraries
    available for the language. You have a problem; there is a solution. We are fortunate
    that most external libraries are open source. Thousands of developers make available,
    voluntarily and free of charge, the fruit of hours, weeks, or years of work.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切都离不开外部库数量的激增。你遇到问题；总有一个解决方案。我们很幸运，大多数外部库都是开源的。数千名开发者自愿且免费地提供了他们数小时、数周甚至数年的工作成果。
- en: Making a choice from among these libraries can be difficult and challenging.
    It is important, even mandatory, to do real research work beforehand to be sure
    to make the right choice. We are not immune to obstacles and incidents, but this
    chapter has provided you with tools and ready-to-use solutions to limit the risks.
    Above all, don’t rush into the most fashionable technologies. If you want to attract
    users and have them continue to use your application more than another, the key
    words are “robustness” and “stability”!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些库中选择一个可能会很困难且具有挑战性。在确保做出正确选择之前，进行实际的研究工作是非常重要的，甚至是强制性的。我们并非对障碍和事件免疫，但这一章节已经为你提供了工具和现成的解决方案来降低风险。最重要的是，不要盲目追求最时尚的技术。如果你想吸引用户并让他们比其他应用更频繁地使用你的应用程序，关键词是“健壮性”和“稳定性”！
- en: 'We have talked a lot about other people’s work, but we should not forget our
    own achievements. How can you manage to develop good habits to find your way in
    your code as you manage to find your way effortlessly in the source code of your
    favorite external libraries when you need to understand its internal workings?
    We come back to what we said in the first chapters: by having the same habits,
    we understand each other more easily. This obviously applies to the organization
    of a project, in the naming of files, the structure of folders, and so on. And
    this is exactly what we will see in practice in the next chapter.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多关于别人的工作，但我们不应该忘记自己的成就。当你需要理解你最喜欢的外部库的内部工作原理时，你是如何设法在代码中找到自己的路径，就像你能够轻松地在源代码中找到路径一样？我们回到我们在第一章中提到的话：通过拥有相同的习惯，我们更容易理解彼此。这显然适用于项目的组织、文件的命名、文件夹的结构等等。这正是我们将在下一章中看到的内容。
