- en: Chapter 6. Media Sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Uploading and managing images/videos on the Internet has become very common
    with the advent of social media. More and more applications now allow you to share
    and retrieve media with external media hosts/services such as Google, Flickr,
    and YouTube. In Zend Framework 1.0, the `Zend_Service` package offered a large
    number of third-party integrations. This has changed with ZF2 and the new module
    framework.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will use various external Zend Framework 2.0 modules to
    manage images and videos. Let''s quickly look at the topics that we will be learning
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing external modules in the Zend Framework application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a simple photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizing and manipulating images using `WebinoImageThumb`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Zend GData API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the GData API to fetch albums from Google Photos and YouTube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important features of Zend Framework 2.0 is the ability to integrate
    external modules in your PHP application, and this integration is completely managed
    using a dependency management tool (in our case, `Composer`).
  prefs: []
  type: TYPE_NORMAL
- en: This feature allows development of PHP applications without having to worry
    about maintaining external libraries inside your application. Libraries and applications
    can be decoupled and maintained separately.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be using an external module for resizing images; we
    will also make use of external libraries for connecting to Google services.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Composer**'
  prefs: []
  type: TYPE_NORMAL
- en: Composer is the one of the dependency management solutions used in Zend Framework.
    Composer allows developers to declare the dependencies needed for their application
    and will handle the installation of those libraries. The dependency configuration
    is stored in a file named `composer.json`.
  prefs: []
  type: TYPE_NORMAL
- en: Resizing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Framework 1.0 had a resize filter that allowed images to be resized on
    upload; with Zend Framework 2.0, this option no longer exists. Our next task will
    be to find a simple image-resizing module and install it in our application. So
    let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – resizing images using modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Zend Framework 2 module''s site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://modules.zendframework.com/](http://modules.zendframework.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run a search for `WebinoImageThumb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To install this module, you will need to update `composer.json` in the application
    root and include this module as a required module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do this, edit `CommunicationApp/composer.json` and modify the required section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run `composer.phar update` to install the newly added dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will be able to see the newly installed modules in the `vendor` folder as
    follows:![Time for action – resizing images using modules](img/1929OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the module is downloaded, we will need to activate the module in `CommunicationApp/config/application.config.php`
    by adding `'WebinoImageThumb'` to the `modules` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have installed an external module into our application using the dependency
    management tool, Composer. We have also activated the module in our application
    so that the module is accessible across the application.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know how to install new modules in the Zend Framework 2 application,
    here is a simple task for you. Install the Zend GData package on this application.
    Instructions for installing this package are available at [https://packages.zendframework.com/](https://packages.zendframework.com/).
    We will be using this module in the subsequent sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Photo gallery application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us get started with implementing our custom photo gallery using Zend Framework
    2\. Since we have already implemented a file management interface, we will use
    a similar interface to implement a photo gallery.
  prefs: []
  type: TYPE_NORMAL
- en: The schema for a photo gallery will be similar to the `Upload` entity; additionally,
    we will have a field to store the `thumbnail` filename, which is generated during
    upload. Both the images and the generated thumbnails will be stored in the `<Module>\data\images`
    folder. We will use a custom action to display the images in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get started, let''s quickly review some of the important methods
    that are supported by `WebinoImageThumb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resize ($maxWidth = 0, $maxHeight = 0)`: This function resizes the image to
    the specified height and width; if either of the values is set to `0`, that dimension
    will not be considered as a limiter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adaptiveResize ($width, $height)`: This function attempts to get the image
    as close to the provided dimensions as possible, and then crops the remaining
    overflow (from the center) to get the image to be the size specified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop ($startX, $startY, $cropWidth, $cropHeight)`: This function crops the
    images from the given coordinates to the specified width and height'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotateImage ($direction = ''CW'')`: Rotates the image by 90 degrees clockwise
    or counterclockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotateImageNDegrees ($degrees)`: Rotates the image by the specified degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save ($fileName, $format = null)`: Saves the image by the specified filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – implementing a simple photo gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new entity called `ImageUpload` with the following table structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the relevant `ImageUpload` entity in the `src/Users/Model/ImageUpload.php`
    file, the `TableGateway` object in the `src/Users/Model/ImageUploadTable.php`
    file, and the `Controller` (`MediaManagerController`) inside the module (`CommunicationApp/module/Users`)
    in the `src/Users/Controller/MediaManagerController.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Upload` form's `Submit` process, generate the thumbnail by using a new
    method called `generateThumbnail()`; this method will take the filename of the
    existing image as the parameter. The `resize` method resizes the image to 75x75
    px and saves it to the image upload directory with a `tn_` prefix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method needs to be placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our next step is to write an action to render the image in the `Full` and `Thumbnail`
    modes; for this we will need to create a custom route that will take the `action`,
    `id`, and `subaction` parameters. This is achieved by the following route definition
    in the module configuration file, `CommunicationApp/module/Users/config/module.config.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to write an action that will respond to the various image requests.
    This action needs to be placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure the process works completely, from uploading the picture to the gallery
    to displaying it in the photo page. See the following code for the usage of `showImageAction()`
    in the `upload` view in the media manager, `CommunicationApp/module/Users/view/users/media-manager/view.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now test the application on a browser of your choice. The image upload page
    should look like the following screenshot:![Time for action – implementing a simple
    photo gallery](img/1929OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the image upload form is successfully submitted, the image will be resized
    and shown in the gallery as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing a simple photo gallery](img/1929OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **View Image** link on top of the resized image takes you to a page with
    the full-sized image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing a simple photo gallery](img/1929OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have implemented a simple photo gallery by making use of an external image
    manipulation library. We utilized the `resize` function to create thumbnails and
    we created a custom action to handle image rendering in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you understand how to work with the `WebinoImageThumb` module, your
    next task will be to extend the photo gallery to support the `rotate` function.
    Add a `rotate` function to the **View Image** page and allow the user to rotate
    the image both clockwise and anticlockwise.
  prefs: []
  type: TYPE_NORMAL
- en: Google Data APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Data APIs provide a simple interface for applications to read and write
    data into various Google services. The Data APIs use a protocol similar to the
    Atom Publishing Protocol for data transfer. All the services are implemented in
    the package called `ZendGdata`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most frequently used Google services that are supported by the
    `ZendGdata` API are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Picasa Web Albums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Calendar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Spreadsheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Blogger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google CodeSearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since `ZendGdata` is not provided with the default Zend Framework installation,
    this needs to be installed manually. This can be performed using Composer and
    by fetching `"zendframework/zendgdata": "2.*"`.'
  prefs: []
  type: TYPE_NORMAL
- en: The Google Photos API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Photos API allows you to fetch, edit, and manage your photos and
    albums in your Picasa or Google+ accounts. The Data API provides all kinds of
    services; some of the key functions are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getUserFeed()`: Gets all the associated albums for that user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertAlbumEntry()`: Creates a new album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAlbumFeed()`: Fetches the specified album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertPhotoEntry()`: Creates a new photo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPhotoFeed()`: Fetches the specified photo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertCommentEntry()`: Creates a new comment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCommentEntry()`: Fetches the specified comment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertTagEntry()`: Creates a new tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getTagEntry()`: Fetches the specified tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteAlbumEntry()`: Deletes the album'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deletePhotoEntry()`: Deletes the photo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteCommentEntry()`: Deletes the comment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteTagEntry()`: Deletes the tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example we will fetch the user's existing albums and the photos stored
    inside those albums.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before moving on, ensure that the `ZendGdata` library is installed in your
    application using Composer. Refer to the following installation instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `requires` section of `CommunicationApp/composer.json`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the application dependencies using Composer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Before getting started, make sure you have uploaded some photos on your Google
    Photos account.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – fetching photos from Google Photos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to fetch photos from your Google Photos account:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a method, `getGooglePhotos()`, in your controller that will connect to
    Google Photos and fetch all albums from Google Photos. This method needs to be
    placed in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the API client to make use of the `Curl` request with the option to disable
    `sslverifypeer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now create a new Google Photos client using the API client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now fetch the list of albums using `getUserFeed()` and get the list of images
    inside the album using `getAlbumFeed()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code block in the `album` view is used to render the albums;
    this can be placed in the media manager''s `index` view, `CommunicationApp/module/Users/view/users/media-manager/index.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Upload pictures to your Google Photos album:![Time for action – fetching photos
    from Google Photos](img/1929OS_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the page in a browser window; you should be able to see all available albums
    and photos inside the album:![Time for action – fetching photos from Google Photos](img/1929OS_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have successfully used Google Data APIs to fetch Picasa upload information
    from Google and used that information to render galleries in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your next task will be to implement the photo upload option using Google Data
    APIs when viewing a photo in the photo gallery; you will have a button that will
    allow you to upload the photo to Google Photos.
  prefs: []
  type: TYPE_NORMAL
- en: YouTube Data API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The YouTube Data API allows access to YouTube content; you can use this API
    to fetch videos, playlists, channels, post comments, and upload and manage videos.
    Users are allowed to perform unauthenticated requests for the retrieval of feeds
    on popular videos, post comments, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most frequently used YouTube API methods are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getVideoFeed()`: Retrieve videos from a video query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getTopRatedVideoFeed()`: Retrieve top-rated videos for the specific video
    query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUserUploads()`: Retrieve the user''s uploaded videos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUserFavorites()`: Retrieve the user''s favorite videos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getVideoResponseFeed()`: Get video responses for a specific video'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getVideoCommentFeed()`: Get comments for a specific video'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPlaylistListFeed()`: Get a user''s playlists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSubscriptionFeed()`: Get a user''s subscriptions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertEntry()`: Upload a video to YouTube'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we will be retrieving videos for a specific keyword and then
    render them in the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – listing YouTube videos for a keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for listing YouTube videos for a keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function that will get the YouTube videos for the `Zend Framework`
    keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Establish the connection in a similar way to the previous connection made for
    Google Photos. This needs to be placed in a new method, `getYoutubeVideos()`,
    in the `MediaManagerController` file, `src/Users/Controller/MediaManagerController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the YouTube client and execute a video query for the keyword `Zend
    Framework`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parse the query results and store it in an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The resulting content is rendered in the view and a video listing as shown in
    the following screenshot:![Time for action – listing YouTube videos for a keyword](img/1929OS_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have utilized the `ZendGData` API's YouTube APIs to retrieve a simple list
    of videos from YouTube for a specific keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – media sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which command is used in Composer to install a newly configured dependency?
  prefs: []
  type: TYPE_NORMAL
- en: '`php composer.phar setup`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`php composer.phar self-update`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`php composer.phar show`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`php composer.phar update`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which of the following is a valid method to upload a new photo to Google
    Photos?
  prefs: []
  type: TYPE_NORMAL
- en: '`uploadPhoto()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`insertPhoto()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`uploadNewPhoto()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`insertPhotoEntry()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned various techniques to manage media; initially
    we started with implementing our own photo gallery and later on we moved on to
    using Google GData APIs to retrieve and store media on the Web.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will be working on implementing a simple search interface.
  prefs: []
  type: TYPE_NORMAL
