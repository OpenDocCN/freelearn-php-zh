["```php\napp/\n    modules/\n        mymodule/\n            Module.php\n            controllers/\n                DefaultController.php\n            models/\n            views/\n                layouts/\n                default/\n                    index.php\n```", "```php\n<?php\n\nnamespace app\\modules\\mymodule;\n\nclass Module extends \\yii\\base\\Module {}\n```", "```php\npublic function init()\n{\n    parent::init();\n\n    // Set custom parameters\n    $this->params['a'] = 'b';\n\n    // Register a custom Yii config for our module\n    \\Yii::configure($this, require __DIR__ . '/config/config.php');\n}\n```", "```php\n<?php\n\nnamespace app\\modules\\mymodule\\controllers;\n\nclass DefaultController extends \\yii\\web\\Controller\n{\n    public function actionIndex()\n    {\n        return $this->render('index');\n    }\n}\n```", "```php\n<?php\n\nnamespace app\\modules\\mymodule;\n\nclass Module extends \\yii\\base\\Module\n{\n    public $defaultRoute = 'user'; // user maps to UserController\n}\n```", "```php\n<?php use yii\\helpers\\Html; ?>\n\n<?php $this->beginPage() ?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\"/>\n        <?php echo Html::csrfMetaTags() ?>\n        <title><?php echo Html::encode($this->title) ?></title>\n        <?php $this->head() ?>\n    </head>\n    <body>\n        <?php $this->beginBody() ?>\n        <?php echo $content ?>\n        <?php $this->endBody() ?>\n    </body>\n</html>\n<?php $this->endPage() ?>\n```", "```php\n<?php echo \"MyModule: Hello World!\"; ?>\n```", "```php\n'modules' => [\n    'mymodule' => 'app\\modules\\mymodule\\Module'\n],\n```", "```php\n'modules' => [\n    'mymodule' => [\n        'class' => 'app\\modules\\mymodule\\Module',\n        'foo' => 'bar' // Maps to app\\modules\\mymodule\\Module::$foo, assuming $foo is declared\n    ]\n]\n```", "```php\n'modules' => require(__DIR__ . '/module.php'),\n```", "```php\n    <?php\n\n    // Set the scan directory\n    $directory = __DIR__ . DS . '..' . DS . 'modules';\n    $cachedConfig = __DIR__.DS.'..'.DS.'runtime'.DS.'modules.config.php';\n    ```", "```php\n    // Attempt to load the cached file if it exists\n    if (file_exists($cachedConfig))\n        return require_once($cachedConfig);\n    ```", "```php\n    else\n    {\n        // Otherwise generate one, and return it\n        $response = array();\n\n        // Find all the modules currently installed, and preload them\n        foreach (new IteratorIterator(new DirectoryIterator($directory)) as $filename)\n        {\n            // Don't import dot files\n            if (!$filename->isDot() && strpos($filename->getFileName(), \".\") === false)\n            {\n                $path = $filename->getPathname();\n\n                if (file_exists($path.DS.'config'.DS.'main.php'))\n                {\n                    $config = require($path.DS.'config'.DS.'main.php');\n                    $module = [ 'class' => 'app\\\\modules\\\\' . $filename->getFilename() . '\\Module' ];\n\n                    foreach ($config as $k=>$v)\n                        $module[$k] = $v;\n\n                    $response[$filename->getFilename()] = $module;\n                }\n                else\n                    $response[$filename->getFilename()] = 'app\\\\modules\\\\' . $filename->getFilename() . '\\Module';\n            }\n        }\n    ```", "```php\n        $encoded = serialize($response);\n        file_put_contents($cachedConfig, '<?php return unserialize(\\''.$encoded.'\\');');\n\n        // return the response\n        return $response;\n    }\n    ```", "```php\n<?php\n\n// Set the scan directory\n$directory = __DIR__ . DS . '..' . DS . 'modules';\n$cachedConfig = __DIR__.DS.'..'.DS.'runtime'.DS.'modules.config.php';\n\n// Attempt to load the cached file if it exists\nif (file_exists($cachedConfig))\n    return require_once($cachedConfig);\nelse\n{\n    // Otherwise generate one, and return it\n    $response = array();\n\n    // Find all the modules currently installed, and preload them\n    foreach (new IteratorIterator(new DirectoryIterator($directory)) as $filename)\n   {\n        // Don't import dot files\n        if (!$filename->isDot() && strpos($filename->getFileName(), \".\") === false)\n        {\n            $path = $filename->getPathname();\n\n            if (file_exists($path.DS.'config'.DS.'main.php'))\n            {\n                $config = require($path.DS.'config'.DS.'main.php');\n                $module = [ 'class' => 'app\\\\modules\\\\' . $filename->getFilename() . '\\Module' ];\n\n                foreach ($config as $k=>$v)\n                    $module[$k] = $v;\n\n                $response[$filename->getFilename()] = $module;\n            }\n            else\n                $response[$filename->getFilename()] = 'app\\\\modules\\\\' . $filename->getFilename() . '\\Module';\n        }\n    }\n\n    $encoded = serialize($response);\n    file_put_contents($cachedConfig, '<?php return unserialize(\\''.$encoded.'\\');');\n\n    // return the response\n    return $response;\n}\n```", "```php\n[\n    'bootstrap' => [\n        'debug',\n    ],\n\n    'modules' => [\n        'debug' => 'yii\\debug\\Module',\n    ],\n]\n```", "```php\n$module = \\app\\modules\\mymodule\\Module::getInstance();\n```", "```php\n$module = \\Yii::$app->getModule('mymodule');\n```", "```php\n$module = \\Yii::$app->controller->mymodule;\n```", "```php\necho $module->foo;\nvar_dump($module->params);\n```", "```php\n    {\n        \"name\": \"masteringyii/chapter5-mymodule\",\n        \"description\": \"The mymodule module for Chapter 5 of the book Mastering Yii\",\n        \"license\": \"MIT\",\n        \"type\": \"drupal-module\",\n        \"keywords\": [\n            \"mastering yii\",\n            \"book\",\n            \"packt\",\n            \"packt publishing\",\n            \"chapter 5\"\n        ],\n        \"authors\": [\n            {\n                \"name\": \"Charles R. Portwood II\",\n                \"homepage\": \"https://www.nasteringyii.com\"\n            }\n        ],\n        \"support\": {\n            \"source\": \"https://github.com/masteringyii/chapter5-mymodule\"\n        },\n        \"homepage\": \"https://www.masteringyii.com\"\n    }\n    ```", "```php\n    \"composer/installers\": \"v1.0.21\"\n    ```", "```php\n    \"repositories\": [\n            {\n                \"type\": \"vcs\",\n                \"url\": \"https://github.com/masteringyii/chapter5-mymodule\"\n            },\n        ],\n    \"require\": {\n        \"php\": \">=5.4.0\",\n        \"yiisoft/yii2\": \"*\",\n        \"yiisoft/yii2-bootstrap\": \"*\",\n        \"yiisoft/yii2-swiftmailer\": \"*\",\n        \"composer/installers\": \"v1.0.21\",\n        \"masteringyii/chapter5-mymodule\": \"dev-master\"\n      },\n    ```", "```php\n    \"installer-paths\": {\n        \"modules/mymodule/\": [\n            \"masteringyii/chapter5-mymodule\"\n        ],\n    }\n    ```", "```php\n    *\n    ```", "```php\n    composer update â€“o\n\n    ```", "```php\n<?php use yii\\bootstrap\\Alert; ?>\n\n<?php echo Alert::widget([\n    'options' => [\n        'class' => 'alert-info',\n    ],\n    'body' => 'This is a bootstrap alert widget using widget()',\n]);\n```", "```php\n<?php use yii\\bootstrap\\Alert; ?>\n\n<?php $widget = Alert::begin([\n    'options' => [\n        'class' => 'alert-warning',\n    ],\n]);\n\necho 'This is an bootstrap3 alert widget warning using begin() and end()';\n\n$widget->end();\n```", "```php\npublic $depends = [\n    'yii\\web\\YiiAsset',\n    'yii\\bootstrap\\BootstrapAsset', // this line\n];\n```", "```php\nphp composer.phar require --prefer-dist yiisoft/yii2-jui \"*\"\n\n```", "```php\n<?php\nnamespace app\\components;\n\nuse yii\\base\\Widget;\nuse yii\\helpers\\Html;\n\nclass GreetingWidget extends Widget\n{\n    public $name = null;\n\n    public $greeting;\n\n    public function init()\n    {\n        parent::init();\n\n        $hour = date('G');\n\n        if ( $hour >= 5 && $hour <= 11 )\n            $this->greeting = \"Good Morning\";\n        else if ( $hour >= 12 && $hour <= 18 )\n            $this->greeting = \"Good Afternoon\";\n        else if ( $hour >= 19 || $hours <= 4 )\n            $this->greeting = \"Good Evening\";\n    }\n\n    public function run()\n    {\n        if ($this->name === null)\n            return HTML::encode($this->greeting);\n        else\n            return HTML::encode($this->greeting . ', ' . $this->name);\n    }\n}\n```", "```php\n<?php\nuse app\\components\\GreetingWidget;\necho GreetingWidget::widget([ 'name' => ' Charles' ); \n```", "```php\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Widget;\nuse yii\\helpers\\Html;\n\nclass EchoWidget extends Widget\n{\n    public function init()\n    {\n        parent::init();\n        ob_start();\n    }\n\n    public function run()\n    {\n        $content = ob_get_clean();\n        echo Html::tag('div', $content, ['class' => 'echo-widget']);\n    }\n}\n```", "```php\n<?php use app\\components\\EchoWidget; ?>\n\n<?php EchoWidget::begin(); ?>\n    <?php echo \"Echo this!\"; ?>\n<?php EchoWidget::end(); ?>\n```", "```php\npublic function run()\n{\n    return $this->render('greeting');\n}\n```", "```php\n$relativeHomeUrl = Url::home();\n$absoluteHomeUrl = Url::home(true);\n$httpsAbsoluteHomeUrl = Url::home('https');\n```", "```php\n$relativeBaseUrl = Url::base();\n$absoluteBaseUrl = Url::base(true);\n$httpsAbsoluteBaseUrl = Url::base('https');\n```", "```php\n// Generate a relative URL to controller/action\n$url = Url::toRoute(['controller/action', 'foo' => 'bar', 'let' => 'asl']);\n```", "```php\n// Generate an absolute URL to controller/action with multiple params.\n$url = Url::toRoute(['/controller/action', 'foo' => 'bar', 'let' => 'asl']);\n```", "```php\n// Navigate to controller/action\n$url = Url::toRoute('controller/action');\n```", "```php\n// Generates a URL to controller/action\necho Url::to(['controller/action']);\n\n// Generates a URL to controller/action with params\n// controller/action?foo=bar#name\necho Url::to(['controller/action', 'foo' => 'bar', '#' => 'name']);\n\n// the currently requested URL\necho Url::to();\n```", "```php\n// The current URL\necho Url::current();\n\n// The current URL with params\necho Url::current([ 'foo' => 'bar' ]);\n```", "```php\nuse \\yii\\helpers\\Html; // HTML Helper namespace\n// Generates an HTML encoded span tag with the class name, and the users name HTML encoded.\n// <span class=\"name\">Charles</span>\nHtml::tag('span', Html::encode($user->name), ['class' => 'name']);\n```", "```php\n$options = ['class' => 'btn btn-default']; \n\nHtml::removeCssClass($options, 'btn-default');\nHtml::addCssClass($options, 'btn-success');\nHtml::addCssClass($options, 'btn'); // Has no effect\n\nHtml::tag('span', Html::encode($user->name), $options);\n```", "```php\n// Generate a link to the user's profile\n// <a href=\"profile/view/id/$id\" class=\"profile\">My Profile</a>\nHtml::a('My Profile', ['profile/view', 'id' => $id], ['class' => 'profile']);\n\nHtml::mailto('Contact me', 'admin@masteringyii.com');\n```", "```php\n// Generates an IMG tag\n// <img src=\"img/logo.png\" alt=\"masteringyii logo\" />\nHtml::img('@web/images/logo.png', ['alt' => 'masteringyii logo']);\n```", "```php\n// <style>.greeting { color: #2d2d2d; }</style>\nHtml::style('.greeting { color: #2d2d2d; }');\n\n//<script defer>alert(\"Hello World!\");</script>\nHtml::script('alert(\"Hello World!\");');\n```", "```php\n//<link href=\"@web/css/styles.css\" />\nHtml::cssFile('@web/css/styles.css');\n\n// <!--[if IE 9]>\n//     <link href=\"http://example.com/css/ie9.css\" />\n// <![endif]-->\nHtml::cssFile('@web/css/ie9.css', ['condition' => 'IE 9']);\n\n// <script type=\"text/javascript src=\"img/main.js\"></script>\nHtml::jsFile('@web/js/main.js');\n```", "```php\n$data = [\n    'foo' => 'bar,\n    'a', => 'b',\n    'param' => [\n        'param2' => [ 'a' => 'b'],\n        'foo' => 'bar'\n    ]\n];\n\n// Encodes an array to JSON\n$json = Json::encode($data);\n\n// Decodes JSON to a PHP array\n$decoded = Json::decode($json);\n```", "```php\nuse \\yii\\helpers\\Markdown;\n$html = Markdown::process($markdown); // use original markdown flavor\n$html = Markdown::process($markdown, 'gfm'); // use github flavored markdown\n$html = Markdown::process($markdown, 'extra'); // use markdown extra\n```", "```php\nyii\\helpers\\VarDumper;\nVarDumper::dump($var);\n```", "```php\nuse \\yii\\helpers\\Inflector;\n\n// WhoIsOnline\necho Inflector::camelize('who is online?');\n\n// person => people\necho Inflector::classify('person');\n\n// Who is online\necho Inflector::humanize('WhoIsOnline');\n\n// 26 => 26th\necho Inflector::ordinalize(26);\n\n// person => People\necho Inflector::pluralize('person');\n\n// People => Person\necho Inflector::singularize('People');\n\n// SendEmail => send_email\necho Inflector::underscore('SendEmail');\n\n// SendEmail => Send Email\necho Inflector::titlize('SendEmail');\n```", "```php\nuse \\yii\\helpers\\FileHelper;\n$files = FileHelper::findFiles('/path/to/search/');\n```", "```php\n// Only .php and .txt files\nFileHelper::findFiles('.', ['only' => ['*.php', '*.txt']]);\n\n// Exclude .php and .txt files\nFileHelper::findFiles('.', ['except' => ['*.php', '*.txt']]);\n```", "```php\nFileHelper::findFiles('.', ['recursive' => false]);\n```", "```php\n// image/jpeg\nFileHelper::getMimeType('/path/to/img.jpeg');\n\n// image/jpeg\nFileHelper::getMimeTypeByExtension('jpeg');\n```"]