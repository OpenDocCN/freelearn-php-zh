- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Continuous Delivery
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: We’ve built a software solution complete with automated tests and have set up
    a continuous integration pipeline to run those automated tests. Now, if a developer
    in your team pushes some code that changes the expected behavior of the solution,
    our automated tests and continuous integration solution will catch those issues
    and will help you and your team stop releasing detrimental code. But what if all
    the tests have passed after pushing all the new code to the repository? Wouldn’t
    it be great if we had a solution to help us prepare and deploy the application
    into a development, staging, or production server?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个包含自动化测试的软件解决方案，并设置了一个持续集成管道来运行这些自动化测试。现在，如果团队中的开发人员推送了一些更改解决方案预期行为的代码，我们的自动化测试和持续集成解决方案将捕获这些问题，并帮助你和你的团队停止发布有害代码。但是，如果在将所有新代码推送到仓库后所有测试都通过了，那会怎么样？如果有一个解决方案可以帮助我们准备并将应用程序部署到开发、测试或生产服务器，那岂不是很好？
- en: In this chapter, we will add the last missing piece to our development process.
    We will prepare a remote server in AWS, and we will automatically deploy our application
    into that server using **continuous delivery** (**CD**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的开发过程添加最后一块缺失的拼图。我们将在 AWS 中准备一个远程服务器，并使用 **持续交付**（**CD**）自动将我们的应用程序部署到该服务器。
- en: '*Figure 10**.1* shows the steps we are going to take to deploy our solution
    code to a public-facing web server. We will go through the process of pushing
    new code to the repository, which, in turn, will trigger the CI pipeline we configured
    in the previous chapter. The CI pipeline will run the automated tests we’ve built
    and, when successful, the CD process will upload our solution code into AWS S3\.
    Then, we will use AWS CodeDeploy to deploy our application into an AWS EC2 instance
    that will serve as our example production server:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10*.1 展示了我们将要采取的步骤，将我们的解决方案代码部署到面向公众的 web 服务器。我们将通过将新代码推送到仓库的过程，这将反过来触发我们在上一章中配置的
    CI 管道。CI 管道将运行我们构建的自动化测试，如果成功，CD 过程将把我们解决方案代码上传到 AWS S3。然后，我们将使用 AWS CodeDeploy
    将我们的应用程序部署到作为示例生产服务器的 AWS EC2 实例：'
- en: '![Figure 10.1 – Entire flow](img/Figure_10.01_B18318.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 整个流程](img/Figure_10.01_B18318.jpg)'
- en: Figure 10.1 – Entire flow
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 整个流程
- en: From a developer pushing new code and running all automated tests in the cloud
    to automatically deploying the solution code into a Linux server, we will be covering
    all of that!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发人员推送新代码并在云中运行所有自动化测试，到自动将解决方案代码部署到 Linux 服务器，我们将涵盖所有这些内容！
- en: 'In this chapter, we will go through the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Setting up an AWS EC2 instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 AWS EC2 实例
- en: Creating an AWS CodeDeploy application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 AWS CodeDeploy 应用程序
- en: Installing Docker and other dependencies inside the AWS EC2 instance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS EC2 实例内安装 Docker 和其他依赖项
- en: Continuous delivery with Bitbucket Pipelines and AWS CodeDeploy
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bitbucket Pipelines 和 AWS CodeDeploy 进行持续交付
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you should follow the instructions provided in the previous
    chapter and configure a Bitbucket Pipelines pipeline. You are also expected to
    have basic knowledge of AWS and should use the code in this book’s code base at
    [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你应该遵循上一章中提供的说明并配置 Bitbucket Pipelines 管道。你还应具备 AWS 的基本知识，并应使用本书代码库中的代码
    [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%2010)。
- en: 'To see all the tests running properly, you can run the following command to
    download the complete code of this chapter, and run the Docker containers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有测试正常运行，你可以运行以下命令以下载本章的完整代码，并运行 Docker 容器：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To run the containers and execute the commands in this chapter, you should be
    inside the `docker-server-web-1` container.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行容器并执行本章中的命令，你应该在 `docker-server-web-1` 容器内部。
- en: 'Run the following command to confirm the container name for our web server:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以确认我们的 web 服务器的容器名称：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run the containers, run the following command from the `/phptdd/docker`
    directory from the repository in your host machine:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行容器，请从主机上的 `/phptdd/docker` 目录运行以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once inside the container, run the following command to install the libraries
    required through Composer:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入容器，请运行以下命令以通过 Composer 安装所需的库：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Within the `/var/www/html/symfony` directory, run the following command to
    see all the tests passing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/var/www/html/symfony`目录中，运行以下命令以查看所有测试通过：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After running the `runCoverage.sh` command, it should execute all our Symfony
    tests, and you can make sure that they all pass.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`runCoverage.sh`命令后，它应该执行我们所有的Symfony测试，并且你可以确保它们都通过。
- en: Setting up an AWS EC2 instance
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS EC2实例
- en: If you don’t already have an AWS account, you can follow the instructions at
    [https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/](https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/)
    to create one.You will also have to create an AWS IAM User group. The instructions
    can be found on https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html.
    You will need an AWS IAM User, and follow the official documentation from AWS
    to create an IAM user in your AWS account at [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html.](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有AWS账户，你可以按照[https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/](https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/)上的说明创建一个账户。你还需要创建一个AWS
    IAM用户组。说明可以在[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html)找到。你需要一个AWS
    IAM用户，并按照AWS的官方文档在[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html)在你的AWS账户中创建IAM用户。
- en: 'We will also need the following AWS resources to complete the EC2 setup:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成EC2设置，我们还需要以下AWS资源：
- en: AWS EC2 key pair
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS EC2密钥对
- en: IAM instance profile
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM实例配置文件
- en: 'Why do we need an EC2 instance? Well, this will serve as our remote server.
    You can think of it as your host computer running in the cloud. We will use this
    server to host our Docker containers to run and serve our application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要EC2实例？嗯，这将作为我们的远程服务器。你可以把它想象成在云中运行的宿主计算机。我们将使用这个服务器来托管我们的Docker容器，以便运行和提供我们的应用程序：
- en: '![Figure 10.1 – EC2 instance](img/Figure_10.02_B18318.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – EC2实例](img/Figure_10.02_B18318.jpg)'
- en: Figure 10.1 – EC2 instance
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – EC2实例
- en: As you can see from the diagram, it’s going to serve as almost a replica of
    your local development environment. That’s the big benefit of using containers,
    as we discussed in [*Chapter 3*](B18318_03.xhtml#_idTextAnchor039), *Setting Up
    Our Development Environment Using* *Docker Containers.*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从图中所见，它几乎将成为您本地开发环境的复制品。这就是使用容器的大好处，正如我们在[*第3章*](B18318_03.xhtml#_idTextAnchor039)，*使用Docker容器设置我们的开发环境*中讨论的那样。
- en: 'Follow these steps to create an EC2 instance:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建EC2实例：
- en: Sign in to the AWS console and search for `EC2` in the **Services** search bar
    to go to the EC2 dashboard.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS控制台，在**服务**搜索栏中搜索`EC2`以进入EC2仪表板。
- en: 'In the EC2 dashboard, click on the **Launch** **instance** button:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在EC2仪表板中，点击**启动实例**按钮：
- en: '![Figure 10.2 – The Launch instance button](img/Figure_10.03_B18318.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 启动实例按钮](img/Figure_10.03_B18318.jpg)'
- en: Figure 10.2 – The Launch instance button
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 启动实例按钮
- en: You will be shown the **Launch an instance** wizard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到**启动实例**向导。
- en: 'In the `tddphp-instance1`. This name tag is going to be very important. We
    will use this tag for our CodeDeploy application later in this chapter:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tddphp-instance1`中。这个名称标签将非常重要。我们将在本章后面使用这个标签来部署我们的CodeDeploy应用程序：
- en: '![Figure 10.3 – Instance name tag](img/Figure_10.04_B18318.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 实例名称标签](img/Figure_10.04_B18318.jpg)'
- en: Figure 10.3 – Instance name tag
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 实例名称标签
- en: 'Next, in the **Application and OS Images (Amazon Machine Image)** area, select
    **Amazon Linux** **2 AMI**:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**应用程序和操作系统镜像（Amazon机器镜像）**区域，选择**Amazon Linux 2 AMI**：
- en: '![Figure 10.4 – Amazon Linux 2 AMI](img/Figure_10.05_B18318.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – Amazon Linux 2 AMI](img/Figure_10.05_B18318.jpg)'
- en: Figure 10.4 – Amazon Linux 2 AMI
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – Amazon Linux 2 AMI
- en: 'Next, you can select the EC2 instance type. For this example, you can stick
    to the **t2.micro** instance as this type is free tier eligible. You can also
    select a more powerful instance configuration – that’s entirely up to you:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以选择EC2实例类型。在这个例子中，你可以坚持使用**t2.micro**实例，因为这个类型的实例是免费层合格的。你也可以选择更强大的实例配置
    – 这完全取决于你：
- en: '![Figure 10.5 – t2.micro instance type](img/Figure_10.06_B18318.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – t2.micro实例类型](img/Figure_10.06_B18318.jpg)'
- en: Figure 10.5 – t2.micro instance type
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – t2.micro实例类型
- en: 'You will need a key pair to be able to SSH into this machine instance. If you
    don’t already have one set up, just click on the **Create new key pair** link;
    a popup will appear for you to create a new key pair:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要一个密钥对才能能够 SSH 进入这个机器实例。如果你还没有设置一个，只需点击**创建新的密钥对**链接；将弹出一个窗口供你创建一个新的密钥对：
- en: '![Figure 10.6 – Creating a new key pair](img/Figure_10.07_B18318.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 创建新的密钥对](img/Figure_10.07_B18318.jpg)'
- en: Figure 10.6 – Creating a new key pair
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 创建新的密钥对
- en: After creating the key pair, you can assign it to the key pair field in the
    EC2 instance wizard.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建密钥对后，你可以将其分配给 EC2 实例向导中的密钥对字段。
- en: 'Next, in the **Network settings** section, allow all HTTP and HTTPs traffic.
    This is so that we can easily access the web application from a browser:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**网络设置**部分，允许所有 HTTP 和 HTTPS 流量。这样我们就可以轻松地从浏览器访问网络应用程序：
- en: '![Figure 10.7 – Network settings; allow HTTP and HTTPS](img/Figure_10.08_B18318.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – 网络设置；允许HTTP和HTTPS](img/Figure_10.08_B18318.jpg)'
- en: Figure 10.7 – Network settings; allow HTTP and HTTPS
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 网络设置；允许HTTP和HTTPS
- en: 'Next, in the **Advanced details** section, if you don’t already have an IAM
    instance profile, you can easily create one by clicking on the **Create new IAM**
    **profile** link:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**高级详情**部分，如果你还没有 IAM 实例配置文件，你可以通过点击**创建新的 IAM** **配置文件**链接轻松创建一个：
- en: '![Figure 10.8 – Creating a new IAM profile link](img/Figure_10.09_B18318.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 创建新的 IAM 配置文件链接](img/Figure_10.09_B18318.jpg)'
- en: Figure 10.8 – Creating a new IAM profile link
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 创建新的 IAM 配置文件链接
- en: 'You will be redirected to the IAM wizard. Enter any IAM role name you want
    to use; then, select the **Custom trust policy** option in the **Trusted entity**
    **type** section:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被重定向到 IAM 向导。输入你想要使用的任何 IAM 角色名称；然后，在**受信任实体** **类型**部分选择**自定义信任策略**选项：
- en: '![Figure 10.9 – Custom trust policy text area](img/Figure_10.10_B18318.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 自定义信任策略文本区域](img/Figure_10.10_B18318.jpg)'
- en: Figure 10.9 – Custom trust policy text area
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 自定义信任策略文本区域
- en: 'In the text area, use the following policy:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本区域中，使用以下策略：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since I am in Australia, I usually use the `Sydney ap-southeast-2` region. You
    can replace this with any region you prefer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我在澳大利亚，我通常使用`Sydney ap-southeast-2`区域。你可以用你喜欢的任何区域替换它。
- en: Click the **Next** button to proceed.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续。
- en: 'In the **Add permissions** section, search for the following policies, and
    tick the checkbox before the policy name:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加权限**部分，搜索以下策略，并在策略名称前勾选复选框：
- en: '**AmazonEC2FullAccess**'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AmazonEC2FullAccess**'
- en: '**AmazonS3FullAccess**'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AmazonS3FullAccess**'
- en: '**AWSCodeDeployFullAccess**'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWSCodeDeployFullAccess**'
- en: After selecting these policies, click **Next**.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择这些策略后，点击**下一步**。
- en: 'Make sure these policies are displayed in the IAM wizard review screen before
    creating the role:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建角色之前，确保这些策略在 IAM 向导的审查屏幕上显示：
- en: '![Figure 10.10 – Access policies](img/Figure_10.11_B18318.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图10.10 – 访问策略](img/Figure_10.11_B18318.jpg)'
- en: Figure 10.10 – Access policies
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – 访问策略
- en: 'Next, click on the **Create role** button, then go back to the **EC2 instance**
    wizard. You can now select the IAM role you just created from the **Advanced**
    **details** section:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**创建角色**按钮，然后返回到**EC2实例**向导。你现在可以从**高级** **详情**部分选择你刚刚创建的 IAM 角色：
- en: '![Figure 10.11 – Newly created IAM instance profile](img/Figure_10.12_B18318.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图10.11 – 新创建的 IAM 实例配置文件](img/Figure_10.12_B18318.jpg)'
- en: Figure 10.11 – Newly created IAM instance profile
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 – 新创建的 IAM 实例配置文件
- en: 'And that’s it – scroll to the very bottom of the page and click on the **Launch
    instance** button. It will take a few minutes for AWS to launch your new EC2 instance.
    After a few minutes, go back to the dashboard; you should now see your EC2 instance
    running:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样 – 滚动到页面底部并点击**启动实例**按钮。AWS 启动你的新 EC2 实例需要几分钟时间。几分钟后，返回到仪表板；你现在应该能看到你的 EC2
    实例正在运行：
- en: '![Figure 10.12 – Amazon Linux 2 instance running](img/Figure_10.13_B18318.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图10.12 – 正在运行的 Amazon Linux 2 实例](img/Figure_10.13_B18318.jpg)'
- en: Figure 10.12 – Amazon Linux 2 instance running
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12 – 正在运行的 Amazon Linux 2 实例
- en: We now have a running Amazon Linux 2 instance; we will use this instance to
    run our containers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个正在运行的 Amazon Linux 2 实例；我们将使用这个实例来运行我们的容器。
- en: 'Before proceeding with the CodeDeploy setup, we need to create an S3 bucket.
    This bucket will be used both by our Bitbucket Pipelines and the CodeDeploy application:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 CodeDeploy 设置之前，我们需要创建一个 S3 存储桶。这个存储桶将同时被我们的 Bitbucket Pipelines 和 CodeDeploy
    应用程序使用：
- en: 'While in the AWS console, search for `S3` and click the **S3** service item:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中，搜索`S3`并点击**S3**服务项：
- en: '![Figure 10.13 – S3 service](img/Figure_10.14_B18318.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – S3 服务](img/Figure_10.14_B18318.jpg)'
- en: Figure 10.13 – S3 service
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – S3 服务
- en: You will be redirected to the Amazon S3 dashboard.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被重定向到 Amazon S3 控制台。
- en: 'Click on the **Create** **bucket** button:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** **存储桶** 按钮：
- en: '![Figure 10.14 – The Create bucket button](img/Figure_10.15_B18318.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14 – 创建存储桶按钮](img/Figure_10.15_B18318.jpg)'
- en: Figure 10.14 – The Create bucket button
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 创建存储桶按钮
- en: 'Use any unique name you want for the bucket and select the same region you
    used for your EC2 instance. For me, it’s **ap-southeast-2**:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为存储桶使用您想要的任何唯一名称，并选择与您的 EC2 实例相同的区域。对我来说，是 **ap-southeast-2**：
- en: '![Figure 10.15 – Creating an S3 bucket](img/Figure_10.16_B18318.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.15 – 创建 S3 存储桶](img/Figure_10.16_B18318.jpg)'
- en: Figure 10.15 – Creating an S3 bucket
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15 – 创建 S3 存储桶
- en: You can leave all the default settings as-is and click on the **Create bucket**
    button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以保留所有默认设置，然后点击 **创建存储桶** 按钮。
- en: And that’s it. We can now proceed with creating the CodeDeploy application.
    The CodeDeploy application will use the EC2 instance and S3 bucket we just created.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们现在可以继续创建 CodeDeploy 应用程序。CodeDeploy 应用程序将使用我们刚刚创建的 EC2 实例和 S3 存储桶。
- en: Creating an AWS CodeDeploy application
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 AWS CodeDeploy 应用程序
- en: 'We will be using AWS CodeDeploy to automate the deployment of our PHP application
    into an EC2 server. But where will CodeDeploy get the files to deploy? It will
    get them from an S3 bucket. But how will our solution code end up in S3 in the
    first place? Well, we will tell Bitbucket Pipelines to upload it there! We will
    cover that later in this chapter:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 AWS CodeDeploy 自动将我们的 PHP 应用程序部署到 EC2 服务器。但 CodeDeploy 将从哪里获取部署的文件呢？它将从
    S3 存储桶中获取。但我们的解决方案代码最初是如何出现在 S3 中的呢？嗯，我们将告诉 Bitbucket Pipelines 将其上传到那里！我们将在本章后面详细说明：
- en: '![Figure 10.16 – CodeDeploy flow](img/Figure_10.17_B18318.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.16 – CodeDeploy 流程](img/Figure_10.17_B18318.jpg)'
- en: Figure 10.16 – CodeDeploy flow
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – CodeDeploy 流程
- en: 'Follow these steps to set up AWS CodeDeploy, which will be triggered by our
    Bitbucket CI pipeline once all of our automated tests have passed:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置 AWS CodeDeploy，一旦所有自动化测试通过，我们的 Bitbucket CI 管道将触发它：
- en: 'In the AWS console, search for the CodeDeploy service and click on the **Create**
    **application** button:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中，搜索 CodeDeploy 服务并点击 **创建** **应用程序** 按钮：
- en: '![Figure 10.17 – Creating the CodeDeploy application](img/Figure_10.18_B18318.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.17 – 创建 CodeDeploy 应用程序](img/Figure_10.18_B18318.jpg)'
- en: Figure 10.17 – Creating the CodeDeploy application
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – 创建 CodeDeploy 应用程序
- en: 'In the CodeDeploy wizard, use any name you want in the **Application configuration**
    section. Then, in the **Compute platform** field, select the **EC2/On-premises**
    option and click on the **Create** **application** button:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CodeDeploy 向导中，在 **应用程序配置** 部分使用您想要的任何名称。然后，在 **计算平台** 字段中，选择 **EC2/本地** 选项，并点击
    **创建** **应用程序** 按钮：
- en: '![Figure 10.18 – Application configuration section](img/Figure_10.19_B18318.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.18 – 应用程序配置部分](img/Figure_10.19_B18318.jpg)'
- en: Figure 10.18 – Application configuration section
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – 应用程序配置部分
- en: You will be redirected to the CodeDeploy **Applications** page.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被重定向到 CodeDeploy **应用程序** 页面。
- en: 'Next, click on the **Create deployment** **group** button:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **创建部署** **组** 按钮：
- en: '![](img/Figure_10.20_B18318.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_10.20_B18318.jpg)'
- en: Figure 10.19 – The Create deployment group button
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – 创建部署组按钮
- en: 'In the `codedeploy_group1`:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `codedeploy_group1`：
- en: '![Figure 10.20 – Deployment group wizard – group name](img/Figure_10.21_B18318.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.20 – 部署组向导 – 组名称](img/Figure_10.21_B18318.jpg)'
- en: Figure 10.20 – Deployment group wizard – group name
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – 部署组向导 – 组名称
- en: 'Next, in the **Service role** section, select the IAM role we created earlier
    in this chapter:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 **服务角色** 部分中选择我们在本章前面创建的 IAM 角色：
- en: '![Figure 10.21 – Deployment group wizard – IAM role](img/Figure_10.22_B18318.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.21 – 部署组向导 – IAM 角色](img/Figure_10.22_B18318.jpg)'
- en: Figure 10.21 – Deployment group wizard – IAM role
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21 – 部署组向导 – IAM 角色
- en: 'Next, in the `tddphp-instance1`. This is very important. This is how we tell
    CodeDeploy that we want to deploy the application in this specific instance. You
    can add more tags here if you want to deploy to other instances as well:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `tddphp-instance1`。这非常重要。这是我们告诉 CodeDeploy 我们想要在这个特定实例中部署应用程序的方式。如果您想部署到其他实例，也可以在这里添加更多标签：
- en: '![Figure 10.22 – Deployment group wizard – EC2 instance details](img/Figure_10.23_B18318.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.22 – 部署组向导 – EC2 实例详情](img/Figure_10.23_B18318.jpg)'
- en: Figure 10.22 – Deployment group wizard – EC2 instance details
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.22 – 部署组向导 – EC2 实例详情
- en: 'Next, in the **Load balancer** section, uncheck the **Enable load balancing**
    checkbox, then click on the **Create deployment** **group** button:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**负载均衡器**部分，取消选中**启用负载均衡**复选框，然后点击**创建部署****组**按钮：
- en: "![Figure 10.23 – Deployment group wizard – \uFEFFLoad balancer](img/Figure_10.24_B18318.jpg)"
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.23 – 部署组向导 – 负载均衡器](img/Figure_10.24_B18318.jpg)'
- en: Figure 10.23 – Deployment group wizard – Load balancer
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – 部署组向导 – 负载均衡器
- en: Great! That’s it for the CodeDeploy configuration from the AWS console.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！这就是从 AWS 控制台进行 CodeDeploy 配置的全部内容。
- en: Next, we will need to get inside the EC2 instance we just created and install
    some applications we need for it to be able to connect to CodeDeploy, and for
    us to be able to run Docker containers.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要进入我们刚刚创建的 EC2 实例内部，并安装一些我们需要的应用程序，以便它能够连接到 CodeDeploy，并且我们能够运行 Docker
    容器。
- en: Installing Docker and other dependencies inside the AWS EC2 instance
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS EC2 实例内部安装 Docker 和其他依赖项
- en: We will need three very important applications inside the EC2 instance. First,
    we will need the AWS CodeDeploy agent, after which we’ll need to install Docker
    and docker-compose so that we can build and run the Docker containers we need
    for our application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EC2 实例内部，我们需要三个非常重要的应用程序。首先，我们需要 AWS CodeDeploy 代理，之后我们需要安装 Docker 和 docker-compose，这样我们才能构建和运行我们应用程序所需的
    Docker 容器。
- en: Connecting to the EC2 instance
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到 EC2 实例
- en: 'We need to get inside the instance before we can install anything. Thankfully,
    we can do this by using the AWS console from a browser:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装任何东西之前，我们需要进入实例内部。幸运的是，我们可以通过浏览器中的 AWS 控制台来完成这个操作：
- en: 'In the EC2 dashboard, select the running instance we created earlier and click
    on the **Connect** button at the top of the table:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 EC2 仪表板上，选择我们之前创建的正在运行的实例，然后点击表格顶部的**连接**按钮：
- en: '![Figure 10.24 – EC2 table – the Connect button](img/Figure_10.25_B18318.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.24 – EC2 表格 – 连接按钮](img/Figure_10.25_B18318.jpg)'
- en: Figure 10.24 – EC2 table – the Connect button
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – EC2 表格 – 连接按钮
- en: You will be redirected to the **Connect to instance** page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被重定向到**连接到实例**页面。
- en: 'Click on the **Connect** button on that page. Finally, you will be redirected
    to the browser’s terminal window:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该页面上点击**连接**按钮。最后，您将被重定向到浏览器的终端窗口：
- en: '![Figure 10.25 – EC2 terminal window](img/Figure_10.26_B18318.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.25 – EC2 终端窗口](img/Figure_10.26_B18318.jpg)'
- en: Figure 10.25 – EC2 terminal window
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.25 – EC2 终端窗口
- en: Great! Now, we can install the applications we need for CD and our PHP solution.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在，我们可以安装我们为 CD 和我们的 PHP 解决方案所需的程序。
- en: Installing CodeDeploy Agent
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 CodeDeploy 代理
- en: 'The CodeDeploy application we created earlier in the chapter will need additional
    software installed inside our EC2 instance so that it can communicate with it.
    This is why we need CodeDeploy Agent. You can read more about it on the official
    AWS documentation page for CodeDeploy Agent: [https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent.html](https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent.html).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中创建的 CodeDeploy 应用程序需要在我们的 EC2 实例内部安装额外的软件，以便它能与之通信。这就是为什么我们需要 CodeDeploy
    代理。您可以在 AWS CodeDeploy 代理的官方 AWS 文档页面上了解更多信息：[https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent.html](https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent.html)。
- en: 'Follow these steps to install CodeDeploy Agent:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 CodeDeploy 代理：
- en: 'In the terminal, enter the following commands to install the agent:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令来安装代理：
- en: '[PRE21]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After running those commands, verify that the agent is running by running the
    following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行这些命令后，通过运行以下命令来验证代理是否正在运行：
- en: '[PRE28]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should now get the following result:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该得到以下结果：
- en: '![Figure 10.26 – CodeDeploy Agent is running](img/Figure_10.27_B18318.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.26 – CodeDeploy 代理正在运行](img/Figure_10.27_B18318.jpg)'
- en: Figure 10.26 – CodeDeploy Agent is running
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.26 – CodeDeploy 代理正在运行
- en: Awesome! Our EC2 instance can now be used by our CodeDeploy application. Next,
    we can proceed with installing Docker.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的 EC2 实例现在可以被我们的 CodeDeploy 应用程序使用。接下来，我们可以继续安装 Docker。
- en: Installing Docker
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: We’ve been using Docker containers to run our PHP solution. Now, CodeDeploy
    will try to deploy our code in the EC2 instance we just created, but our solution
    code depends on Docker and docker-compose being installed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直使用 Docker 容器来运行我们的 PHP 解决方案。现在，CodeDeploy 将尝试在我们刚刚创建的 EC2 实例中部署我们的代码，但我们的解决方案代码依赖于已安装的
    Docker 和 docker-compose。
- en: 'Follow these steps to install Docker:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Docker：
- en: 'Run the following commands in the AWS terminal window:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 终端窗口中运行以下命令：
- en: '[PRE29]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After running the installation commands, check whether Docker is installed
    correctly by running the following command:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装命令后，通过运行以下命令检查Docker是否正确安装：
- en: '[PRE33]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should see the following result:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下结果：
- en: '![Figure 10.27 – Docker installed](img/Figure_10.28_B18318.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图10.27 – Docker已安装](img/Figure_10.28_B18318.jpg)'
- en: Figure 10.27 – Docker installed
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.27 – Docker已安装
- en: 'Next, we will need to reboot the instance to make sure that we can execute
    Docker with the correct permissions. Run the following command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要重新启动实例以确保我们可以以正确的权限执行Docker。运行以下命令：
- en: '[PRE34]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After running the command, the terminal window will hang up. Give it a few
    minutes, then connect to the EC2 portal again, as we did earlier:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令后，终端窗口会挂起。给它几分钟时间，然后再次连接到EC2门户，就像我们之前做的那样：
- en: '![Figure 10.28 – Terminal error while rebooting](img/Figure_10.29_B18318.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图10.28 – 重启时的终端错误](img/Figure_10.29_B18318.jpg)'
- en: Figure 10.28 – Terminal error while rebooting
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.28 – 重启时的终端错误
- en: If you see the preceding error message, don’t fret. Just wait a few minutes
    and then try connecting again.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到前面的错误消息，不要担心。只需等待几分钟，然后再次尝试连接。
- en: Lastly, we’ll need to install docker-compose.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要安装docker-compose。
- en: Installing docker-compose
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装docker-compose
- en: 'We’ve been using the docker-compose tool to run and configure our multi-container
    setup in our local development environment. We will also need to install it in
    the EC2 instance. Follow these steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用docker-compose工具在我们的本地开发环境中运行和配置我们的多容器设置。我们还需要在EC2实例中安装它。按照以下步骤操作：
- en: 'Back in the AWS terminal window, run the following commands:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS终端窗口中，运行以下命令：
- en: '[PRE35]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'After running those two commands, to make sure that docker-compose has been
    installed properly, run the following command:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行这两个命令后，为了确保docker-compose已正确安装，请运行以下命令：
- en: '[PRE37]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You should see the version that is installed. Great! At this stage, we have
    installed everything we need for CodeDeploy to be able to deploy our PHP application
    in this EC2 instance.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到已安装的版本。太好了！在这个阶段，我们已经安装了CodeDeploy能够在这个EC2实例中部署我们的PHP应用程序所需的所有东西。
- en: Next, we will add an Elastic IP to our EC2 instance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的EC2实例添加一个弹性IP。
- en: Attaching Elastic IP to the EC2 instance
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将弹性IP附加到EC2实例
- en: To make our EC2 instance easily accessible through a web browser, we will add
    an AWS Elastic IP to the EC2 instance. We can also easily attach this Elastic
    IP to a different EC2 instance when we need to.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的EC2实例可以通过网页浏览器轻松访问，我们将添加一个AWS弹性IP到EC2实例。我们还可以在需要时轻松地将此弹性IP附加到不同的EC2实例。
- en: 'To create an Elastic IP, follow these steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建弹性IP，请按照以下步骤操作：
- en: 'Go back to the EC2 dashboard in the AWS console, then click on the **Elastic**
    **IPs** button:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回AWS控制台中的EC2仪表板，然后点击**弹性** **IPs**按钮：
- en: '![Figure 10.29 – The Elastic IPs button](img/Figure_10.30_B18318.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图10.29 – 弹性IP按钮](img/Figure_10.30_B18318.jpg)'
- en: Figure 10.29 – The Elastic IPs button
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.29 – 弹性IP按钮
- en: 'On the next screen, select the **Amazon’s pool of Ipv4 addresses** radio button
    in the **Public Ipv4 address pool** section. Then, click on the **Allocate** button:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，在**公共IPv4地址池**部分中选择**Amazon的IPv4地址池**单选按钮。然后，点击**分配**按钮：
- en: '![Figure 10.30 – Allocate Elastic IP address](img/Figure_10.31_B18318.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图10.30 – 分配弹性IP地址](img/Figure_10.31_B18318.jpg)'
- en: Figure 10.30 – Allocate Elastic IP address
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.30 – 分配弹性IP地址
- en: 'Next, click on the newly created Elastic IP address, then click on the **Associate
    Elastic IP** **address** button:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击新创建的弹性IP地址，然后点击**关联弹性IP** **地址**按钮：
- en: '![Figure 10.31 – The Associate Elastic IP address button](img/Figure_10.32_B18318.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图10.31 – 关联弹性IP地址按钮](img/Figure_10.32_B18318.jpg)'
- en: Figure 10.31 – The Associate Elastic IP address button
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.31 – 关联弹性IP地址按钮
- en: 'On the next screen, in the **Instance** field, select the EC2 instance we created
    earlier. Then, click on the **Associate** button:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，在**实例**字段中，选择我们之前创建的EC2实例。然后，点击**关联**按钮：
- en: '![Figure 10.32 – Associating the Elastic IP address with the EC2 instance](img/Figure_10.33_B18318.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图10.32 – 将弹性IP地址与EC2实例关联](img/Figure_10.33_B18318.jpg)'
- en: Figure 10.32 – Associating the Elastic IP address with the EC2 instance
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.32 – 将弹性IP地址与EC2实例关联
- en: At this stage, we will have a permanent IP address pointed to our EC2 instance.
    Once we deploy the PHP application into the EC2 instance, we will use this IP
    to access the web application.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将有一个指向我们的EC2实例的永久IP地址。一旦我们将PHP应用程序部署到EC2实例中，我们将使用这个IP来访问Web应用程序。
- en: Next, we will need to configure Bitbucket Pipelines to tell it that we want
    to automatically deploy our code using AWS CodeDeploy.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置Bitbucket Pipelines，使其知道我们希望使用AWS CodeDeploy自动部署我们的代码。
- en: Continuous delivery with Bitbucket Pipelines and AWS CodeDeploy
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bitbucket Pipelines和AWS CodeDeploy进行持续交付
- en: In the previous section, we prepared an AWS EC2 instance for our PHP application.
    Now, we will need a way to get our solution code from Bitbucket into the EC2 instance
    itself. For this, we will need to configure Bitbucket Pipelines to use AWS CodeDeploy.
    You can read more about Bitbucket Pipelines to AWS CodeDeploy deployments at [https://support.atlassian.com/bitbucket-cloud/docs/deploy-to-aws-with-codedeploy/](https://support.atlassian.com/bitbucket-cloud/docs/deploy-to-aws-with-codedeploy/).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们为PHP应用准备了一个AWS EC2实例。现在，我们需要一种方法将我们的解决方案代码从Bitbucket传输到EC2实例本身。为此，我们需要配置Bitbucket
    Pipelines以使用AWS CodeDeploy。你可以阅读有关在[https://support.atlassian.com/bitbucket-cloud/docs/deploy-to-aws-with-codedeploy/](https://support.atlassian.com/bitbucket-cloud/docs/deploy-to-aws-with-codedeploy/)中使用Bitbucket
    Pipelines到AWS CodeDeploy部署的更多信息。
- en: Bitbucket Pipelines settings
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bitbucket Pipelines设置
- en: 'We will need to add some AWS-specific information into Bitbucket as we will
    be using this information to connect to our AWS CodeDeploy application. To add
    this information, follow these steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用这些信息连接到我们的AWS CodeDeploy应用程序，因此我们需要在Bitbucket中添加一些AWS特定的信息。要添加这些信息，请按照以下步骤操作：
- en: 'In the Bitbucket repository dashboard, click on the **Repository** **settings**
    option:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Bitbucket仓库仪表板中，点击**仓库** **设置**选项：
- en: '![Figure 10.32 – Repository settings](img/Figure_10.34_B18318.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图10.32 – 仓库设置](img/Figure_10.34_B18318.jpg)'
- en: Figure 10.32 – Repository settings
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.32 – 仓库设置
- en: 'Then, select the **Repository variables** link from the left menu. You should
    be redirected to the **Repository variables** page. In the **Name** and **Value**
    fields, add the following names and values:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从左侧菜单中选择**仓库变量**链接。你应该会被重定向到**仓库变量**页面。在**名称**和**值**字段中，添加以下名称和值：
- en: '**AWS_ACCESS_KEY_ID**: Use the value from the key pair file'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS_ACCESS_KEY_ID**: 使用密钥对文件中的值'
- en: '**AWS_SECRET_ACCESS_KEY**: Use the value from the key pair file'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS_SECRET_ACCESS_KEY**: 使用密钥对文件中的值'
- en: '**AWS_DEFAULT_REGION**: **ap-southeast-2**'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS_DEFAULT_REGION**: **ap-southeast-2**'
- en: '**S3_BUCKET**: <your unique S3 bucket name>'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S3_BUCKET**: <你的唯一S3存储桶名称>'
- en: '**DEPLOYMENT_GROUP**: **codedeploy_group1**'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DEPLOYMENT_GROUP**: **codedeploy_group1**'
- en: '**APPLICATION_NAME**: **mycodedeployapp**:'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**APPLICATION_NAME**: **mycodedeployapp**:'
- en: '![Figure 10.33 – Repository variables; AWS values](img/Figure_10.35_B18318.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图10.33 – 仓库变量；AWS值](img/Figure_10.35_B18318.jpg)'
- en: Figure 10.33 – Repository variables; AWS values
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.33 – 仓库变量；AWS值
- en: Next, we will need to tell Bitbucket Pipelines that we want to zip and upload
    our application to AWS S3\. Then, we will deploy it to our EC2 instance using
    AWS CodeDeploy.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉Bitbucket Pipelines，我们希望将我们的应用程序压缩并上传到AWS S3。然后，我们将使用AWS CodeDeploy将其部署到我们的EC2实例。
- en: 'Back to our code base, in the root directory, you will find the `bitbucket-pipelines.yml`
    file we created in the previous chapter. Add the following lines to the file:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回我们的代码库，在根目录下，你会找到我们在上一章创建的`bitbucket-pipelines.yml`文件。向文件中添加以下行：
- en: /bitbucket-pipelines.yml
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: /bitbucket-pipelines.yml
- en: '[PRE38]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we will be using the AWS values we entered in the repository variables
    page in the previous section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用我们在上一节仓库变量页面中输入的AWS值。
- en: Next, we need to tell CodeDeploy what scripts to run when deploying our application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉CodeDeploy在部署我们的应用程序时运行哪些脚本。
- en: Creating a CodeDeploy configuration file
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建CodeDeploy配置文件
- en: CodeDeploy will need a base configuration file called `appspec.yml`. Here, we
    can tell CodeDeploy to run scripts for us, such as running docker-compose and
    running our Symfony application’s `setup.sh` script.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: CodeDeploy需要一个名为`appspec.yml`的基本配置文件。在这里，我们可以告诉CodeDeploy为我们运行脚本，例如运行docker-compose和运行我们的Symfony应用的`setup.sh`脚本。
- en: 'Create the `/appspec.yml` file and add the following content to it:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`/appspec.yml`文件，并将以下内容添加到其中：
- en: '[PRE39]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In this file, we are telling CodeDeploy that we want our code to be copied
    into `/home/ec2-user/phptdd directory`. Then, after the installation process,
    we want to run the `containers_setup_php.sh` file, which we will create next.
    Create this file with the following content:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们告诉CodeDeploy，我们希望将代码复制到`/home/ec2-user/phptdd`目录。然后，在安装过程之后，我们希望运行我们将在下一节创建的`containers_setup_php.sh`文件。使用以下内容创建此文件：
- en: aws/codedeploy/containers_setup_php.sh
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: aws/codedeploy/containers_setup_php.sh
- en: '[PRE40]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You will notice that we are running docker-compose. After that, we are running
    the custom `setup.sh` files we created for the Symfony and Behat applications.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在运行docker-compose。之后，我们运行为Symfony和Behat应用程序创建的自定义`setup.sh`文件。
- en: Next, we need to run the entire CI/CD process using Bitbucket Pipelines.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用 Bitbucket Pipelines 运行整个 CI/CD 流程。
- en: Running Bitbucket Pipelines
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Bitbucket Pipelines
- en: Now that we have everything we need, just commit and push the files to your
    repository to trigger a Bitbucket pipeline to run, or just manually run a pipeline.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有需要的东西，只需提交并推送文件到您的仓库以触发Bitbucket管道运行，或者直接手动运行管道。
- en: 'Our pipeline is now divided into three steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作流程现在分为三个步骤：
- en: '**Run automated tests**: These will run our Symfony and Behat tests'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行自动化测试**：这将运行我们的 Symfony 和 Behat 测试'
- en: '**Package and upload**: This will zip and upload our code to AWS S3'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包和上传**：这将压缩并将我们的代码上传到AWS S3'
- en: '**Deploy to AWS**: This will use CodeDeploy to deploy our solution inside the
    EC2 instance we configured'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署到AWS**：这将使用CodeDeploy将我们的解决方案部署到我们配置的EC2实例中'
- en: 'It will take a few minutes to run everything, but imagine replacing the manual
    process of testing tens, hundreds, or thousands of features and server deployment
    manually:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有内容需要几分钟，但想象一下用手工测试成百上千个特性和服务器部署的过程：
- en: '![Figure 10.34 – CI/CD result](img/Figure_10.36_B18318.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图10.34 – CI/CD结果](img/Figure_10.36_B18318.jpg)'
- en: Figure 10.34 – CI/CD result
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.34 – CI/CD结果
- en: Great – after 18 minutes, we have completed the entire process! This setup and
    process can still be tweaked and optimized, but in just a few minutes, we were
    able to automatically run all our test scenarios, and automatically deploy them
    into a remote server!
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了 – 经过18分钟，我们已经完成了整个流程！这个设置和流程仍然可以进行调整和优化，但仅仅几分钟，我们就能够自动运行所有测试场景，并将它们自动部署到远程服务器上！
- en: But did the deployment work? Let’s find out.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 但部署是否成功？让我们来查明。
- en: 'Go back to the AWS console and connect to the EC2 instance again:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到AWS控制台，再次连接到EC2实例：
- en: '![Figure 10.35 – New phptdd directory](img/Figure_10.37_B18318.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图10.35 – 新的phptdd目录](img/Figure_10.37_B18318.jpg)'
- en: Figure 10.35 – New phptdd directory
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.35 – 新的phptdd目录
- en: 'The first thing you’ll notice if the code deployment worked is that there should
    be a new `/phptdd` directory. Let’s see whether it’s got something in it:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码部署成功，您会注意到应该有一个新的`/phptdd`目录。让我们看看里面是否有内容：
- en: '![Figure 10.36 – /phptdd content](img/Figure_10.38_B18318.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图10.36 – /phptdd内容](img/Figure_10.38_B18318.jpg)'
- en: Figure 10.36 – /phptdd content
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.36 – /phptdd内容
- en: As you can see, we have all the files we pushed into our Bitbucket repository!
    But what about our Docker containers? Let’s see whether they are running.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经将所有推送到 Bitbucket 仓库的文件都准备好了！但我们的 Docker 容器怎么办？让我们看看它们是否正在运行。
- en: 'Run the following command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE41]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If everything got installed properly by CodeDeploy, we should see our containers
    running:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果CodeDeploy正确安装了所有内容，我们应该看到我们的容器正在运行：
- en: '![Figure 10.37 – Docker containers running](img/Figure_10.39_B18318.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图10.37 – 运行中的Docker容器](img/Figure_10.39_B18318.jpg)'
- en: Figure 10.37 – Docker containers running
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.37 – 运行中的Docker容器
- en: 'That’s good – all our containers are running! Now, what if we run our automated
    tests? Let’s see how it goes. Run the following command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 很好 – 所有容器都在运行！现在，如果我们运行自动化测试呢？让我们看看结果。运行以下命令：
- en: '[PRE42]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should see the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下内容：
- en: '![Figure 10.38 – Running a Symfony coverage test in EC2](img/Figure_10.40_B18318.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图10.38 – 在EC2中运行Symfony覆盖率测试](img/Figure_10.40_B18318.jpg)'
- en: Figure 10.38 – Running a Symfony coverage test in EC2
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.38 – 在EC2中运行Symfony覆盖率测试
- en: Great! All our Symfony PHP tests are passing! But what about the actual web
    application? The automated tests won’t make sense to our visitors.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！所有我们的 Symfony PHP 测试都通过了！但实际的 Web 应用程序怎么办？自动化测试对我们访客来说没有意义。
- en: 'Go back to the EC2 dashboard and click on the EC2 instance we created. Then,
    click on the **Elastic IP** **addresses** link:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到EC2仪表板，点击我们创建的EC2实例。然后，点击**弹性IP** **地址**链接：
- en: "![Figure 10.39 – Elastic IP address\uFEFFes link](img/Figure_10.41_B18318.jpg)"
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图10.39 – 弹性IP地址链接](img/Figure_10.41_B18318.jpg)'
- en: Figure 10.39 – Elastic IP addresses link
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.39 – 弹性IP地址链接
- en: 'The Elastic IP address details will be loaded. Then, copy the **Public** **DNS**
    value:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将加载弹性 IP 地址的详细信息。然后，复制**公共** **DNS**值：
- en: '![Figure 10.40 – Elastic IP – Public DNS](img/Figure_10.42_B18318.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图10.40 – 弹性IP – 公共DNS](img/Figure_10.42_B18318.jpg)'
- en: Figure 10.40 – Elastic IP – Public DNS
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.40 – 弹性IP – 公共DNS
- en: 'After copying the public DNS, just simply paste it into your web browser and
    see whether it loads:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制公共DNS后，只需简单地将其粘贴到您的网页浏览器中，看看是否可以加载：
- en: '![Figure 10.41 – HomeController](img/Figure_10.43_B18318.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图10.41 – HomeController](img/Figure_10.43_B18318.jpg)'
- en: Figure 10.41 – HomeController
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.41 – HomeController
- en: As you can see, we can now access our web application from a web browser. You
    can try to register an account, log in, and add new toy car entries.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们现在可以通过网页浏览器访问我们的Web应用程序。您可以尝试注册账户、登录并添加新的玩具车条目。
- en: 'Let’s try the registration feature first:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先尝试注册功能：
- en: 'Click on the **Register** link and enter an email address and a password:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**链接，并输入电子邮件地址和密码：
- en: '![Figure 10.42 – Register](img/Figure_10.44_B18318.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图10.42 – 注册](img/Figure_10.44_B18318.jpg)'
- en: Figure 10.42 – Register
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.42 – 注册
- en: 'Click **Register**. Next, click on the **login** button:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**。接下来，点击**登录**按钮：
- en: '![Figure 10.40 – Login](img/Figure_10.45_B18318.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图10.40 – 登录](img/Figure_10.45_B18318.jpg)'
- en: Figure 10.40 – Login
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.40 – 登录
- en: If it works properly, it will redirect you to the **Add Toy Car** page.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，它将重定向您到**添加玩具车**页面。
- en: 'On the **Add Toy Car** page, add some values in the fields:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加玩具车**页面上，在字段中添加一些值：
- en: '![Figure 10.41 – Add Toy Car](img/Figure_10.46_B18318.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图10.41 – 添加玩具车](img/Figure_10.46_B18318.jpg)'
- en: Figure 10.41 – Add Toy Car
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.41 – 添加玩具车
- en: 'Click on the **Add Toy Car** button. If it works, it should redirect you to
    the table controller:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加玩具车**按钮。如果一切正常，它应该会重定向您到表格控制器：
- en: '![Figure 10.42 – Table controller](img/Figure_10.47_B18318.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图10.42 – 表格控制器](img/Figure_10.47_B18318.jpg)'
- en: Figure 10.42 – Table controller
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.42 – 表格控制器
- en: In the table controller, the toy car entries we have created will all be displayed.
    If we want to add more features to the application, we can simply start with a
    Jira ticket, create a new branch, write some code, commit it, and push the code
    – that’s it. The CI/CD process will take care of the rest!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格控制器中，我们将创建的玩具车条目将全部显示。如果我们想向应用程序添加更多功能，我们可以简单地从一个Jira工单开始，创建一个新的分支，编写一些代码，提交并推送代码——这就完成了。CI/CD流程将负责剩下的工作！
- en: Summary
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the process of setting up an AWS EC2 instance, AWS
    CodeDeploy, and all the other AWS resources we need to host our PHP application.
    We integrated Bitbucket Pipelines with our AWS CodeDeploy application, and we
    used custom scripts to automatically configure our Docker containers inside the
    AWS EC2 instance whenever CodeDeploy runs.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了设置AWS EC2实例、AWS CodeDeploy以及我们托管PHP应用程序所需的所有其他AWS资源的过程。我们将Bitbucket
    Pipelines与我们的AWS CodeDeploy应用程序集成，并在CodeDeploy运行时使用自定义脚本来自动配置AWS EC2实例内部的Docker容器。
- en: We covered this process from a developer pushing new code changes to the application,
    running all the automated tests, and deploying the entire solution to a Linux
    server through AWS. We are also able to manually test our web application using
    a web browser to make sure consumers can use the application.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从开发者推送新的代码更改到应用程序，运行所有自动化测试，并通过AWS将整个解决方案部署到Linux服务器的过程进行了介绍。我们还能使用网页浏览器手动测试我们的Web应用程序，以确保消费者可以使用该应用程序。
- en: In the next chapter, we will investigate some tools to help us monitor our application.
    This will be very helpful when working on large applications as this will help
    us, as developers, analyze our application’s performance and health.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一些帮助我们监控应用程序的工具。这对于开发大型应用程序非常有帮助，因为这将帮助我们，作为开发者，分析应用程序的性能和健康状况。
