- en: Chapter 10. Drupal Project Management and Collaboration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In this chapter, we will learn the process for promoting Sandbox modules to
    full project status. In doing so, you will learn more about the Drupal developer
    community, developer collaboration, and how you can become more involved. We will
    also look into how to manage incremental development on a production site using
    newly introduced Configuration Management as well as Features. Finally, we will
    create a rotating banner module for Drupal 8.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Release management in Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More advanced module development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Features module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating banners with the Views Slideshow module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will examine an approach that is based on a Views plugin and predominantly
    consisting of Views configuration. Customization of the Views plugin output will
    be handled with custom CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The Views Slideshow module is an excellent example of a Views style plugin,
    and it provides much more functionality than just rotating banners. Basically,
    the Views Slideshow module wraps the jQuery Cycle plugin as a Views style plugin,
    but it does so with a submodule, which is the `views_slideshow_cycle` module.
    The `views_slideshow` module is more than a Views style plugin. It's a plugin
    framework that integrates different jQuery slideshow plugins with Views and also
    provides a default implementation based on the jQuery cycle plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing the Views Slideshow module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we build a rotating banner with Views, we need to install the Views
    Slideshow module:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal (Mac OS X) or Command Prompt (Windows) application, and change
    to the root directory of the d8dev site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Drush to download and enable the Views Slideshow module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Views Slideshow consists of two modules: the base `views_slideshow` module
    and the `views_slideshow_cycle` module. We need to tell Drush to install the `views_slideshow_cycle`
    module and Drush will automatically install any dependencies belonging to the
    same parent module; in this case, the `views_slideshow` module will automatically
    be enabled by Drush. Also notice how Drush prompted us to download other unmet
    dependencies for `views_slideshow_cycle`; in this case, the external js libraries
    `jquery.cycle`, `jquery.hoverIntent`, `jquery.pause`, and `json2` are downloaded
    in the `libraries` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rotating banner with Views Slideshow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Views Slideshow module is a Views style plugin. We are going to create a
    block-based view that will use this style plugin to convert our recipe images
    list into a rotating banner. After this, we will be able to display it on the
    front page of our d8dev site.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a banner using the Views Slideshow module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have installed and set up the Views Slideshow module, it is time
    for us to build a Views-based rotating banner:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the d8dev site in your browser, click on the **Structure** link in the
    **Admin** toolbar, and then click on the **Views** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating a new view. Click on the **Add new view** link at the top of
    the **Views List** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Front Banner` as the **View name** and select **Recipe** for the type.
    We are going to create our rotating banner as a block, so check the **Create a
    block** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Slideshow** of **fields** for the **BLOCK DISPLAY SETTINGS**.
    Verify that the Add new view form looks similar to the following screenshot, and
    click on the **Save and edit** button:![Time for action – creating a banner using
    the Views Slideshow module](img/4659_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to decide what fields we want to display in the banner. The **Content:Title**
    field has been added by default. But we obviously want to display an image in
    the rotating banner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button for **FIELDS**, search for `Images` in the **Search**
    input, and select **Images**. Click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the **Configure field** form, select **Large** as the **Image style**
    and click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you scroll down to the **Preview** area of the **Views** page, you will
    see a working slide show that looks something similar to the following screenshot:![Time
    for action – creating a banner using the Views Slideshow module](img/4659_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button for **FILTER CRITERIA**. Search for `images` in
    the search input textbox and select the **Any Images (field_images:title)** filter.
    Click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select the **Is not empty (NOT NULL)** operator, and click
    on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the dropdown for the **FIELDS Add** button and select **Rearrange**:![Time
    for action – creating a banner using the Views Slideshow module](img/4659_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, just drag the **Content:Title** field under the **Content:Images** field,
    and click on the **Apply (all displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are ready to see how our new Views Slideshow banner looks on the front
    page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Save** button for our new view. Then click on the **Structure**
    link in the **Admin** toolbar, and finally click on the **Block layout** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down towards the **Content Region** and click on the **Place block**
    link. In the popup, search for `Front banner` and click on the **Place block**
    button for the **Front Banner** block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, uncheck the **Override title** checkbox. Next, select **Content**
    as the region to display the block for our D8Dev. In the **Visibility** | **pages**
    section, select **Show for the listed pages**, and enter `<front>` as the only
    page to display it on:![Time for action – creating a banner using the Views Slideshow
    module](img/4659_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save block** button. On the **Blocks** configuration page, drag
    the **Front Banner** block above the **Main page content** block in the **Content
    regions**, and click on the **Save blocks** button at the bottom of the screen.![Time
    for action – creating a banner using the Views Slideshow module](img/4659_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, the Front Banner should look similar to the following screenshot:![Time
    for action – creating a banner using the Views Slideshow module](img/4659_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a Front banner block with the Views Slideshow style plugin and assigned
    the block to the front page of our d8dev site.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a slideshow, but it is displaying the images of size that we
    uploaded with the recipe. This might be of varying sizes. To make the image size
    uniform, we will have to create an image style that can be applied to this slide
    show as well as any other location where we want to display images of the same
    size.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a new image style for images in our rotating recipe
    banner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, we learned how to add image styles for Drupal 8\. Let''s
    add a new image style named `front_banner` that will scale our recipe images to
    be no wider than 680 pixels and cropped to 410 pixels in height. We will apply
    the same to the image field of our Front Banner view. This will create a more
    consistent look for our rotating banner as it will not change the size from slide
    to slide:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the d8dev site in your browser, click on the **Configuration** link in
    the **Admin** toolbar, and then click on **Image styles** under the **Media**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating a new Image style. So, click on the **+Add Image styles** link
    at the top of the **Image styles** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Front banner** as the image style name and click on the **Create new
    style** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Crop** as the effect and click on the **Add** button at the bottom
    of the page:![Time for action – creating a new image style for images in our rotating
    recipe banner](img/4659_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, Enter `680` as **Width** and `410` as **Height**, and click on the **Add
    effect** button:![Time for action – creating a new image style for images in our
    rotating recipe banner](img/4659_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have to update this image style for the Front banner view. Click on the
    **Configuration** link in the **Admin** toolbar, and then click on the **Views**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click on the **Edit** link for the Front banner view. In the next view
    editing page, click on the **Content: Images** link for **Fields** and select
    **Front banner** as the **Image style** field. Click on the **Apply (all displays)**
    button. Then save the view by clicking on the **Save** button at the bottom.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, the Front Banner should look similar to the following screenshot:![Time
    for action – creating a new image style for images in our rotating recipe banner](img/4659_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a new image style for images in our rotating recipe banner.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the appearance of our front banner with a pager and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our new front banner works fine, but we can easily improve its appearance and
    user experience by adding a few more configurations and CSS. We are going to add
    custom CSS to our d8dev module to tweak the appearance of the rotating banner,
    but first we are going to add a pager that will show how many slides there are
    and the current slide.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – updating the front banner view to include a slide show pager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to enhance our Views rotating banner with a pager:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the d8dev site in your browser, hover the mouse over the new front banner,
    click on the contextual links widget, and then click on the **Edit view** link:![Time
    for action – updating the front banner view to include a slide show pager](img/4659_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to add a pager to our view. Click on the **Settings** link for
    the slideshow formatter:![Time for action – updating the front banner view to
    include a slide show pager](img/4659_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Block: Style options** form, scroll down to the **Bottom Widgets**
    section and check the **Pager** checkbox. After checking this, we can see other
    fields appear. Check **Content: Title** under the **Pager fields** section and
    click on the **Apply** button. See this screenshot:![Time for action – updating
    the front banner view to include a slide show pager](img/4659_10_12.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Save** button for the view, and take a look at the updated
    front banner. See the following screenshot:![Time for action – updating the front
    banner view to include a slide show pager](img/4659_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Though it is not quite the visually striking pager we were looking for, if you
    click on any of the titles, you will notice that the slide will change to that
    paged item. So, although the pager works, it does not look all that great. Let's
    see what we can do about the way it looks by adding some custom CSS to our d8dev
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the front page of the d8dev site in Chrome/Firefox, right-click on your
    rotating banner, and select **Inspect Element** from the contextual menu that
    pops up:![Time for action – updating the front banner view to include a slide
    show pager](img/4659_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Elements** inspector, find the `div` tag with the `views-slideshow-
    controls-bottom` class, and expand it:![Time for action – updating the front banner
    view to include a slide show pager](img/4659_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `div` tag with the `views-slideshow-pager-field` class so that it
    is highlighted. Then click inside the `element.style` curly brackets in the Styles
    inspector, and type in `float: right;`. We can see changes in the page field titles
    that floated to the right.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the PhpStorm IDE, open the `d8dev.css` file located at `d8dev/modules/d8dev/styles/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll to the bottom of the file, and add the following style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, back in the browser, expand the `views-slideshow-pager-field` div, find
    the `div` tag with the `div.views_slideshow_pager_field_item` selector, and add
    the following styles to the `d8dev.css` file for the `div.views_slideshow_pager_field_item`
    selector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and refresh the front page. See this screenshot:![Time for action
    – updating the front banner view to include a slide show pager](img/4659_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now add the CSS to hide the `views-content-title` div. Open the PhpStorm IDE
    and add the following CSS to `style.css`, at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: by excluding the content title from the views field settings will also
    hide the title, but make sure other CSS will be affected by this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear the cache and refresh the front page:![Time for action – updating the
    front banner view to include a slide show pager](img/4659_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to do some styling for the recipe title. We are going to increase
    the font size and position it above the pager. But text align in the center of
    the image and add a background color tomato, with text color white. Also we are
    updating with as 672 px since we are taking padding as 4 px.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following CSS to the `div.views-field-title` selector in the PhpStorm
    IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and refresh the front page in the browser; you will see that
    the recipe titles are much easier to read.![Time for action – updating the front
    banner view to include a slide show pager](img/4659_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a pager and caption to our Front banner, and although we did not write
    much custom PHP code, we saw how a little bit of Views configuration with the
    right contrib module, Views Slideshow, and some creative CSS can be combined to
    great effect.
  prefs: []
  type: TYPE_NORMAL
- en: Time for another recipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a hearty and tasty soup for a cold winter's day. Just about anyone,
    with just about any dietary restrictions, should be able to enjoy this healthy
    and delicious soup.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for another recipe](img/4659_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Name**: Potato Leek Soup (Vegan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cuisineType**: European'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**description**: This healthy yet still creamy soup will really stick to your
    ribs and warm you up on a cold day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**recipeYield**: Ten servings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prepTime**: 30 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cookTime**: 45 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ingredients**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five to six large russet potatoes, peeled and quartered
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Four leeks, cleaned and thinly sliced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One large sweet onion, diced
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Four tablespoon vegan butter
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One tablespoon olive oil
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Six cups vegetable broth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One cup plain soy milk
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sea salt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Freshly ground black pepper
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One tablespoon rice vinegar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two teaspoon crushed red pepper
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One-fourth cup parsley, finely chopped
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**instructions**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Melt the vegan butter in a large Dutch oven over medium heat.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the butter melts, add diced onion and sauté until it just starts to caramelize.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the finely sliced leeks and sauté over medium heat for 10 minutes, stirring
    every minute or so.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add diced potatoes and sauté with leeks and onions for 10 minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the olive oil and stir to combine.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add vegetable broth and plain soy milk. Stir to combine. Bring to a boil over
    medium-high heat, and reduce the heat to low.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simmer over low heat for 15 minutes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an emersion hand blender, blend the soup into a smooth puree.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stir in vinegar and crushed red pepper.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stir in sea salt and freshly ground black pepper to taste.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stir in fresh parsley and enjoy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Promoting a sandbox project to a full project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we committed our Views semantic tabs module changes to the sandbox
    Git repository—and in doing so made the code available to anyone who wants to
    use it—using Git is a barrier for many people who are not developers and just
    want to download a module, configure it, and use it. A sandboxed module will also
    deter people from trying your module, because they may not trust a module that
    is not a full project (and Drupal includes a big warning at the top of all sandboxed
    module pages). I will create a release that can be downloaded easily without Git.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I will create only an alpha release until the community has had
    an opportunity to test it. Once there has been some feedback, I will create a
    full release. Before we begin, we will follow the Module Documentation Guidelines
    at [https://www.drupal.org/node/161085](https://www.drupal.org/node/161085). After
    reading this page, I have decided to add the `README.txt` file to our views semantic
    tabs module.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating README.txt and pushing to the sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the `README.txt` file under the `views_semantic_tabs` folder as follows
    :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to push it to the Git sandbox. Open the terminal, go to the `modules/views_semantic_tabs`
    folder, and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned a bit about the Drupal `README.txt` file in the Module Documentation
    Guidelines. We added it to the module and pushed it to the Drupal project Git
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – promoting the Views semantic module to a full project on Drupal.org
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit our sandbox project's page at [https://www.drupal.org/sandbox/krishnakanth17/2665888](https://www.drupal.org/sandbox/krishnakanth17/2665888).
    And click on the **Edit** tab:![Time for action – promoting the Views semantic
    module to a full project on Drupal.org](img/4659_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the **Promote** subtab:![Time for action – promoting the Views semantic
    module to a full project on Drupal.org](img/4659_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the form, making sure to enter a short project name:![Time for action
    – promoting the Views semantic module to a full project on Drupal.org](img/4659_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next page asks whether I am sure that I want to promote the module, and
    I am sure, so I will click on the **Promote** button:![Time for action – promoting
    the Views semantic module to a full project on Drupal.org](img/4659_10_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now it is no longer a sandbox project, and Drupal provides some important instructions
    regarding the remote repository for the project. The Git command in the following
    screenshot needs to be executed before any new changes can be pushed to the remote
    repository, because Drupal has moved it to a new location for full projects and
    to match the new short project name:![Time for action – promoting the Views semantic
    module to a full project on Drupal.org](img/4659_10_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all these steps, our module is promoted to a full project and we can access
    it with the URL [https://www.drupal.org/project/views_semantic_tabs](https://www.drupal.org/project/views_semantic_tabs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to create a dev release for the Views semantic tabs module so that
    it is easier to download and install. Drupal provides instructions on the version
    control page of a full project page for creating a branch for a dev release with
    Git (these instructions are only displayed for module maintainers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Executing the following Git commands on our local Views semantic tabs repository
    will create a new dev branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have a new dev branch in the Views semantic tabs repository, we
    will be able to add a dev release to the project. On the **View** page of the
    Views semantic tabs module, there is an **Add new release** link below **Project
    information**. Clicking on that link will take us to the **Create Project release**
    page. See this screenshot:![Time for action – promoting the Views semantic module
    to a full project on Drupal.org](img/4659_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Create release** page lists two Git release branches to select from, the
    `8.x.1.x` and `8.x.2.x` branch we just created. So we just need to select **8.x-2.x
    (8.x-2.x-dev)** and click on the **Next** button:![Time for action – promoting
    the Views semantic module to a full project on Drupal.org](img/4659_10_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, we will enter some **Release notes** and click on the **Save**
    button; the other fields will already be filled because this is the first dev
    release.![Time for action – promoting the Views semantic module to a full project
    on Drupal.org](img/4659_10_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully promoted the Views semantic tabs module to full project
    status, and have created an initial dev release.![Time for action – promoting
    the Views semantic module to a full project on Drupal.org](img/4659_10_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drupal will automatically generate the `tar.gz` and `.zip` files and attach
    them to the project, but it may take as long as 1-2 hours for a dev release (official
    non-dev releases are published within 5 minutes). Until then, only an unpublished
    release node will appear on the Releases for Views semantic tabs page. Also we
    can use Drush to download and enable the module by using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned a bit about the Drupal `README.txt` file from the Module Documentation
    Guidelines. We also learned how a module can be promoted from a sandbox project
    to a full project and how to release a dev release to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Features module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Drupal 8 Features module enables us to capture and manage a feature, which
    is a set of Drupal entities. The Features module will take different site-building
    components from modules by providing a UI and an API with exportables and bundle
    them together in a single module. A feature in normal terms might be a blog, a
    page, or an image gallery. So in the next topic, we are going to learn how to
    use the Features module. We are going to export our Recipe content type and use
    it in another environment.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing the Features module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going download and install the Features module using Drush. Also we
    will install `features_ui` module as its package:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Terminal (Mac OS X) or Command Prompt (Windows) application, and change
    to the root directory of our d8dev site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use Drush to download and enable the Features module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We enabled the Features module. It consists of two modules: the base Features
    module and the `features_ui` module. The Features module depends on the `config_update`
    module, which is downloaded automatically after enabling the Features module.
    We also enabled the `features_ui` module, which gives an easy UI to create features.'
  prefs: []
  type: TYPE_NORMAL
- en: Recipe feature by the Features module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to learn how to use the Features module by exporting our Recipe
    content type and related configurations such as—Fields of Recipe content type,
    Form displays, Form view displays, Views – Front Banner, Random Top Rated Recipe,
    Top rated recipes And Blocks – Top Recipe, Front Banner. Then we will look into
    how we can use it in other environments.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using the Features module to export the Recipe content type
    and related configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to export our Recipe content type as a feature module and also
    export its related configurations as part of the Feature exported module:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the d8dev site in your browser, click on the **Configuration** link in
    the **Admin** toolbar, and click on the **Features** link under the **DEVELOPMENT**
    section. We can see the next page as shown in following screenshot:![Time for
    action – using the Features module to export the Recipe content type and related
    configurations](img/4659_10_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next click on the **Included configuration** link under the **DESCRIPTION**
    column for the Recipe feature.![Time for action – using the Features module to
    export the Recipe content type and related configurations](img/4659_10_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can understand what configurations are included for this feature. It
    has the two blocks (Top Recipe and Front Banner), three views, and other field-related
    configurations that we are looking for. But I have noticed that the **Recipes
    by Cuisine** block is missing, so we will add this missing component in the next
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Recipe** link feature. In the next page, we can see a list
    components and general information about this feature:![Time for action – using
    the Features module to export the Recipe content type and related configurations](img/4659_10_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next under the **COMPONENTS** section, search for `recipes`. We notice that
    **Recipes by Cuisine: Block 2 (views_block__recipes_by_cuisine_block_2)** is visible
    under the **Block** section and select that checkbox:![Time for action – using
    the Features module to export the Recipe content type and related configurations](img/4659_10_32.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, select the **Recipes by Cuisine (recipes_by_cuisine)** checkbox under
    the **Views** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next in the **GENERAL INFORMATION** section, leave all values as default and
    enter `8.x-1.0` as the **Version** field. Click on the **Download Archive** button:![Time
    for action – using the Features module to export the Recipe content type and related
    configurations](img/4659_10_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that `Recipe.tar.gz` is downloaded. Now we extract this file into
    our `d8dev/module` directory. Open PhpStorm and see the `.yml` files and a few
    directories as shown in the following screenshot:![Time for action – using the
    Features module to export the Recipe content type and related configurations](img/4659_10_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that there are many YML files. All of these files are configuration
    files for views, fields, and the Recipe content type. Also there is an `info.yml`
    file, so we can use this as a module. We can use this module in any other environment
    where it has Drupal 8 installed, and modules `views_semantic` and other modules
    installed. Follow [Chapter 1](ch01.html "Chapter 1. Setting Up a Drupal Development
    Environment"), *Setting Up a Drupal Development Environment*, to install another
    d8dev site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We enabled the Features module and looked into how to export the Recipe content
    type and its fields. We also looked into how we can export views and blocks along
    with the Recipe feature.
  prefs: []
  type: TYPE_NORMAL
- en: When to use core Configuration Management compared to Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Drupal 7 core, there is no system to manage configurations and the Features
    module can export and import configuration data bundled as code in modules. Features
    was used for configuration management and deployments. Because of the following
    issues, the module was not really suitable:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no consistency in the structure of the exported configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It overrides and reverts modifications of content managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drupal 8 has introduced Configuration Management that can deal with such issues,
    but that does not mean we do not need the Features module anymore. Configuration
    Management was not suitable to export the bundling functionality to other environments,
    websites, clients, or projects. That is why we still need the Features module.
    Drupal 8 Features will return its bundling functionality (like a blog or image
    gallery) rather than just managing configurations. Also, Features allows us to
    pick and choose what configuration data we want to add to bundle in a simplified
    manner. Additionally, it is much easier to update the configurations stored in
    the module during development. There are also some issues with configuration management:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding configurations to a module is a manual process, meaning copying/pasting
    of YML data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules provide only initial configuration files. If we want to change the configuration
    files, we need to do that through writing update hooks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we uninstall a module, it does not remove all the configurations. And Drupal
    8 core cannot enable a module if a configuration already exists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My conclusion is that the Features module is still very important in Drupal
    8\. The module can be tagged as a developer module that aims to help Drupal developers
    in their daily work environment to bundle functionalities and easily import changes
    during development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned more about the Views module and saw how a good Views
    plugin, along with some custom CSS, enabled us to create a very appealing rotating
    banner component for our d8dev site.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned a bit about the Drupal `README.txt` file and how a module is
    promoted from a sandbox project to a full project.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about the Features module for exporting the Recipe content
    type and its fields, blocks, and views as modules to use them in other environments.
    We also compared the Configuration Management system with the features module
    by focusing on a comparative study and when to use either of the two modules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover some advanced search concepts and walk you
    through the installation and Drupal integration of the Java-based Apache Solr
    search engine. We will then enhance our site with a customized faceted search
    built on top of the Search API module.
  prefs: []
  type: TYPE_NORMAL
