- en: The Content Authoring Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore what Drupal 8 brings to the content authoring
    experience:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the WYSIWYG editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and editing content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a menu and linking content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing inline editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying new Drupal 8 core field types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the form display of a node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the display output of a node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll cover the Drupal 8 content authoring experience. We will
    show you how to configure text formats and set up the bundled CKEditor that ships
    with Drupal 8\. We will take a look at how to add and manage content and utilize
    menus to link to content. Drupal 8 ships with inline editing for per-field modifications
    from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter dives into *creating custom content types* and harnessing different
    fields to create advanced content. We'll cover the five new fields added to Drupal
    8 core and how to use them, along with configuring new field types through contributed
    projects. We will go through customizing the content's display and modifying the
    new form display added in Drupal 8.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the WYSIWYG editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8 saw the collaboration between the Drupal development community and
    the CKEditor development community. Because of this, Drupal now ships with CKEditor
    out of the box as the default **What You See Is What You Get** (**WYSIWYG**) editor.
    The new Editor module provides an API to integrate WYSIWYG editors. Although CKEditor
    is provided out of the box, contributed modules can provide integrations with
    other WYSIWYG editors.
  prefs: []
  type: TYPE_NORMAL
- en: Text formats control the formatting of content and WYSIWYG editor configuration
    for content authors. The standard Drupal installation profile provides a fully
    configured text format with the enabled CKEditor. We will walk through the steps
    of recreating this text format.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new text format with a custom CKEditor WYSIWYG
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting, make sure that the CKEditor module is enabled, which also requires
    Editor
  prefs: []
  type: TYPE_NORMAL
- en: as a dependency. **Editor** is the module that provides an API to integrate
    WYSIWYG editors
  prefs: []
  type: TYPE_NORMAL
- en: with text formats.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a new text format with a custom CKEditor WYSIWYG configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit Configuration from the administrative toolbar and head to Text formats
    and editors under the CONTENT AUTHORING heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Add text format to begin creating the new text format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9090c293-6ad6-431b-835c-24307503a5bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter a name for the text format, such as editor format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select which roles have access to this format--this allows you to have granular
    control over what users can use when authoring content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select CKEditor from the Text editor select list. The configuration form for
    CKEditor will then be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may now use an in-place editor to drag buttons onto the provided toolbar
    to configure your CKEditor toolbar:![](img/f3f5e25d-ee6a-47aa-a1eb-3cd534782d4f.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select any of the Enabled filters you would like, except for Display any HTML
    as Plain text. That would be counter-intuitive to using a WYSIWYG editor!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When satisfied, click on Save Configuration to save your configuration and create
    the text filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Filter modules provide text formats that control over how rich text fields
    are presented to the user. Drupal will render rich text saved in a text area based
    on the defined text format for the field. Text fields with "formatted" in their
    title will respect text format settings; others will render in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: The text formats and editors screen warns of a security risk due to improper
    configuration. This is because you could grant an anonymous user access to a text
    format that allows full HTML or allows image sources to be from remote URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The Editor module provides a bridge to WYSIWYG editors and text formats. It
    alters the text format form and rendering to allow the integration of WYSIWYG
    editor libraries. This allows each text format to have its own configuration for
    its WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, the Editor module alone does not provide an editor. The CKEditor
    module works with the Editor API to enable the usage of the WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal can support other WYSWIG editors, such as markItUp ([http://markitup.jaysalvat.com/home/](http://markitup.jaysalvat.com/home/))
    or TinyMCE ([https://www.tinymce.com/](https://www.tinymce.com/)) through contributed
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides granular control of how rich text is rendered, and extensible
    ways, which we will discuss further.
  prefs: []
  type: TYPE_NORMAL
- en: Filter module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When string data is added to a field that supports text formats, the data is
    saved and preserved as it was originally entered. Enabled filters for a text format
    will not be applied until the content is viewed. Drupal works in such a way that
    it saves the original content and only filters on display.
  prefs: []
  type: TYPE_NORMAL
- en: With the Filter module enabled, you gain the ability to specify how text is
    rendered based on the roles of the user who created the text. It is important
    to understand the filters applied to a text format that uses a WYSIWYG editor.
    For example, if you selected the Display any HTML as plain text option, the formatting
    done by the WYSIWYG editor would be stripped out when viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Improved links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A major component of WYSIWYG editing is the ability to insert links to other
    pieces of content or external sites. The default link button integrated with CKEditor
    allows for basic link embedding. This means that your content editors must know
    their internal content URLs ahead of time to link to them. A solution to this
    issue is the Linkit module at [https://www.drupal.org/project/linkit](https://www.drupal.org/project/linkit).
  prefs: []
  type: TYPE_NORMAL
- en: 'The module can be installed using Composer by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The **Linkit** module provides a drop-in replacement for the default link functionality.
    It adds auto-complete search for internal content and adds additional options
    for displaying the field. **Linkit** works by creating different profiles that
    allow you to control what content can be referenced, what attributes can be managed,
    and which users and roles can use a Linkit profile.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccf8b78c-de40-4f9a-9d71-a0b2e51c16ce.png)'
  prefs: []
  type: TYPE_IMG
- en: CKEditor plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CKEditor` module provides a plugin type called `CKEditorPlugin`. Plugins
    are small pieces of swappable functionality within Drupal 8\. Plugins and plugin
    development are covered in [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml),
    *Plug and Play with Plugins*. This type provides integration between `CKEditor`
    and Drupal 8.
  prefs: []
  type: TYPE_NORMAL
- en: The image and link capabilities are plugins defined within the `CKEditor` module.
    Additional plugins can be provided through contributed projects or custom development.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the `\Drupal\ckeditor\Annotation\CKEditorPlugin` class for the plugin
    definition and the suggested `\Drupal\ckeditor\Plugin\CKEditorPlugin\DrupalImage`
    class as a working example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official blog post from `CKEditor` about how Drupal adopted it as the official
    WYSIWYG editor at [http://ckeditor.com/blog/CKEditor-Joins-Drupal](http://ckeditor.com/blog/CKEditor-Joins-Drupal).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and editing content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main functionality of a content management system is in the name itself--the
    ability to manage content; that is, to add, edit, and organize content. Drupal
    provides a central form that allows you to manage all of the content within your
    website and allows you to create new content. Additionally, you can view a piece
    of content and click on an edit link when viewing it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have installed the standard installation profile
    and have the default node content types available for use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s manage the content by adding, editing, and organizing the content:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Content to view the content management overview from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add content to view the list of available content types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Article as the piece of content you would like to make.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide a title for the piece of content. Titles are always required for content.
    Fill in the body text for the article:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2385f0fe-faba-4003-8a4b-3082ffedc74a.png)'
  prefs: []
  type: TYPE_IMG
- en: You may change the text format to customize what kind of text is allowed. If
    the user only has one format available, there will be no select box, but the About
    text formats link will still be present.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have added your text, click on Save and publish at the bottom of the
    form. You will then be redirected to view the newly created piece of content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the URL for the piece of content is `/node/#`. This is the default
    path for content and can be changed by editing the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Edit tab from the tabs right above the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the right sidebar, click on URL PATH SETTINGS to expand the section and
    enter a custom alias, for example `/awesome-article` (note the required `/` symbol):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/212dfb0d-1149-42a7-a260-d5ddc82308f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the content, and note that the URL for your article is `/awesome-article`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could also edit this article from the Content table by clicking on Edit
    there, instead of from viewing the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Content page is a **View**, which will be discussed in [*Chapter 3*](2015063a-2e03-45d2-822d-892e87f10e41.xhtml),
    *Displaying Content Through Views*. This creates a table of all the content on
    your site that can be searched and filtered. From here, you can view, edit, or
    delete any single piece of content.
  prefs: []
  type: TYPE_NORMAL
- en: In Drupal, there are content entities that provide a method of creation, editing,
    deletion, and viewing. Nodes are a form of a content entity. When you create a
    node, it will build the proper form that allows you to fill in the piece of content's
    data. The same process follows for editing content.
  prefs: []
  type: TYPE_NORMAL
- en: When you save the content, Drupal writes the node's content to the database
    along with all of its respective field data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 8's content management system provides many features; we will cover some
    extra information.
  prefs: []
  type: TYPE_NORMAL
- en: Save as draft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'New to Drupal 8 is the ability to easily save a piece of content as a draft
    instead of directly publishing it. Instead of clicking on Save and publish, click
    on the arrow next to it to expand the Save as unpublished option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74ca66cf-bb5c-4b1f-9b61-bf303b84bdac.png)'
  prefs: []
  type: TYPE_IMG
- en: The aforementioned button has several usability and user experience reviews
    and will be changing, for the better, in future versions of Drupal. One of the
    issues to follow is located at [https://www.drupal.org/node/1899236](https://www.drupal.org/node/1899236).
    The issue highlights different proposed fixes following consistent user experience
    patterns defined in existing frontend libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Pathauto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a contributed project called Pathauto that simplifies the process of
    providing URL aliases. It allows you to define patterns that will automatically
    create URL aliases for content. This module utilizes tokens to allow for very
    robust paths for content.
  prefs: []
  type: TYPE_NORMAL
- en: The Pathauto project can be found at [https://www.drupal.org/project/pathauto](https://www.drupal.org/project/pathauto).
  prefs: []
  type: TYPE_NORMAL
- en: There is a proposed issue to provide the functionality of Pathauto in Drupal
    core, and it can be followed at [https://www.drupal.org/node/229568](https://www.drupal.org/node/229568).
  prefs: []
  type: TYPE_NORMAL
- en: Bulk moderation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You also have the capability to perform bulk actions on content. This is available
    on the Content management screen. The table that lists the site content provides
    checkboxes at the beginning of each row. For each selected item, you can choose
    an item from With selection to make bulk changes, such as deleting, publishing,
    and unpublishing content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b049114-0120-4bf6-a192-6d23ab9f2d87.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *Customizing the form display of a node* recipe of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a menu and linking content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides a way to link content being authored to a specified menu on
    the website, generally the main menu. You can, however, create a custom menu to
    provide links to content. In this recipe, we will show you how to create a custom
    menu and link content to it. We will then place the menu as a block on the page,
    in the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have installed the standard installation profile
    and have the default node content types available for use. You should have some
    content created to create a link.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit Structure and click on Menus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the title Sidebar and optional summary and then click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the menu is saved, click on the Add link button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a link title and then type the title for a piece of content. The form
    will provide autocomplete suggestions for linkable content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/563b5698-2fd6-4317-b0fc-4d2156b7acd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to save the menu link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the menu link saved, go to Structure, and then Block layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Place block next to Sidebar first. In the modal, search for the Sidebar
    menu and click on Place block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd5754df-2dd3-4b94-9f06-1392c40c05f5.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following form, click on Save block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View your Drupal site by clicking on Home in the administration menu, and you
    will see the following menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2073e13e-a16b-4060-82d3-256fb82f3453.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menus and links are part of Drupal core. The ability to make custom menus and
    menu links is provided through the **Menu UI** module. This module is enabled
    on the standard installation profile, but may not be in others.
  prefs: []
  type: TYPE_NORMAL
- en: The Link input of the menu link form allows you to begin typing node titles
    and easily linking them to existing content. This was a piece of functionality
    not available in previous versions of Drupal. It will automatically convert the
    title into the internal path for you. Link input also accepts a regular path,
    such as `/node/1` or an external path.
  prefs: []
  type: TYPE_NORMAL
- en: You must have a valid path; you cannot add empty links to a menu. There is work
    being done to allow adding empty or ID selector link paths--refer to [https://www.drupal.org/node/1543750](https://www.drupal.org/node/1543750).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Links can be managed through the content edit form itself, which will be covered
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Managing a contents menu link from its form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A piece of content can be linked to a menu from the add or edit form. The menu
    settings section allows you to toggle the availability of a menu link. The menu
    link title will reflect the content's title by default.
  prefs: []
  type: TYPE_NORMAL
- en: The parent item allows you to decide which menu and which item it will appear
    under. By default, content types only have the main menu allowed. Editing a content
    type can allow for multiple menus or only choose a custom menu.
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to populate the main menu or complimentary menu without having
    to visit the menu management screens.
  prefs: []
  type: TYPE_NORMAL
- en: Providing inline editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A touted feature of Drupal 8 is the ability to provide inline editing. Inline
    editing is enabled by default with the standard installation profile through the
    **Quick Edit** module. The Quick Edit module allows editing individual fields
    while viewing a piece of content, and integrates it with the Editor module for
    WYSIWYG editors!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s provide inline editing:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to a piece of created content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to enable inline editing, you must toggle contextual links on the
    page by clicking on Edit in the upper right of the administrative toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ccc5d76-963d-4cfe-85a6-97ec78d2a767.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will toggle the contextual links available on the page. Click on the context
    link next to the content and select Quick edit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b6d70af-46f1-4dc6-9532-40dc98876b6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hover over the body text and click on Edit. You can now edit the text with
    a minimal version of the WYSIWYG editor toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/861e540e-de83-4df7-8194-5e28844285fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have changed the text, click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The changes will be saved immediately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Contextual links** module provides privileged users with shortcut links
    to modify blocks or content. The contextual links are toggled by clicking on Edit
    in the toolbar. The Edit link toggles the visibility of contextual links on the
    page. Previously, in Drupal 7, contextual links appeared as cogs when a specific
    region was hovered over.
  prefs: []
  type: TYPE_NORMAL
- en: The Quick Edit module builds on the contextual links features. It allows field
    formatters, which display field data, to describe how they will interact. By default,
    Quick Edit sets this to a form. Clicking on an element will use JavaScript to
    load a form and save data via AJAX calls.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Edit will not work on administrative pages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With each minor release of Drupal 8, there are more improvements to the inline
    editing experience.
  prefs: []
  type: TYPE_NORMAL
- en: The outside-in approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is an experimental module in Drupal 8.2 that allows you to editing blocks
    and other site configuration from the frontend of the website, just like Quick
    Edit for content. To enable this, install the **Settings Tray** module.
  prefs: []
  type: TYPE_NORMAL
- en: When you browse the Drupal site, you will note a new **Edit** button in the
    left of the toolbar. Clicking on this will allow you to edit blocks and the site
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6f62f5d-4d20-4797-b8a9-182eb65f366f.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information, review the Drupal.org handbook for this feature at [https://www.drupal.org/docs/8/core/modules/outside-in/overview](https://www.drupal.org/docs/8/core/modules/outside-in/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal excels in the realm of content management by allowing different types
    of content. In this recipe, we will walk you through creating a custom content
    type. We will create a Services type that has some basic fields and would be used
    in a scenario that brings attention to a company's provided services.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to add fields to a content type in this recipe, which
    generally goes hand in hand with making a new content type on a Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to Structure and then Content types. Click on Add content type to begin creating
    a new content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter Services as the name, and an optional description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Display settings and uncheck the Display author and date information
    checkbox. This will hide the author and submitted time from services pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/59e5918a-16c8-4976-9fa1-6c3e1aacfcb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save and manage fields button to save the new content type and
    manage its fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, new content types have a Body field automatically added to them.
    We will keep this field in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will add a field that will provide a way to enter a marketing headline for
    the service. Click on Add field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Text (plain) from the dropdown and enter Marketing headline as the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe77687b-b5cb-4778-b493-eadbb16aee38.png)'
  prefs: []
  type: TYPE_IMG
- en: The Text (plain) option is a regular text field. The Text (formatted) option
    will allow you to use text formats on the displayed text in the field.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save field settings on the next form. On the following form, click
    on Save settings to finish adding the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The field has now been added, and content of this type can be created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc0bf2ab-131b-4d18-bec8-c81ae5c968bb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal, there are entities that have bundles. A bundle is just a type of
    entity that can have specific configurations and fields attached. When working
    with nodes, a bundle is generally referred to as a content type.
  prefs: []
  type: TYPE_NORMAL
- en: Content types can be created as long as the Node module is enabled. When a content
    type is created through the user interface, it invokes the `node_add_body_field()`
    function. This function adds the default body field for content types.
  prefs: []
  type: TYPE_NORMAL
- en: Fields can only be managed or added if the Field UI module is enabled. The Field
    UI module exposes the **Manage Fields**, **Manage Form Display**, and **Manage
    Display** for entities, such as nodes and blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Applying new Drupal 8 core field types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The field system is what makes creating content in Drupal so robust. With Drupal
    8, some of the most used contributed field types have been merged into Drupal
    core as their own module. In fact, Entity Reference is no longer a module but
    part of the main Field API now.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe is actually a collection of mini-recipes to highlight the new fields
    provided by Drupal 8 core: `Link`, `Email`, `Telephone`, `Date`, and `Entity reference.`'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard installation profile does not enable all of the modules that provide
    these field types by default. For this recipe, you will need to manually enable
    select modules so that you can create the field. The module that provides the
    field type and its installation status in the standard profile will be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Each recipe will start off expecting that you have enabled the module, if needed,
    and that you are at the Manage fields form of a content type and have clicked
    on Add field and provided a field label. The recipes here cover the settings for
    each field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains a series of mini recipes that show how to use each of
    the new core field types.
  prefs: []
  type: TYPE_NORMAL
- en: Link
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Link field is provided by the Link module. It is *installed by default with
    the standard installation profile*. It is a dependency of the **Menu UI**, **Custom
    Menu Links**, and **Shortcut module**.
  prefs: []
  type: TYPE_NORMAL
- en: The Link field type does not have any additional field level settings that are
    used across all bundles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save field settings to customize the field for this specific bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Allowed link type setting, you can control whether provided URLs can
    be external, internal, or both. Selecting Internal or Both will allow linking
    to content by autocompleting the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Allow link text defines whether a user must provide text to go along with
    the link. If no text is provided, then the URL itself is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The field formatter for a Link field allows you to specify `rel="nofollow"`
    or whether the link should open in a new window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Email field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Email field is provided by Drupal core and is available without installing
    additional modules:'
  prefs: []
  type: TYPE_NORMAL
- en: The Email field type does not have any additional field level settings that
    are used across all bundles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save field settings to customize the field for this specific bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are no further settings for an Email field instance. This field uses the
    HTML5 email input, which will leverage browser input validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The field formatter for an Email field allows you to display the email as a
    plain text or a `mailto:` link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Telephone field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Telephone field is provided by the Telephone module. It is not installed
    by default with the standard installation profile, and must be installed through
    the Extend form.
  prefs: []
  type: TYPE_NORMAL
- en: The Telephone field type does not have any additional field level settings that
    are used across all bundles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save field settings to customize the field for this specific bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are no further settings for a Telephone field instance. This field uses
    the HTML5 telephone input, which will leverage browser input validation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The field formatter for a Telephone field allows you to display the telephone
    number as a plain text item, or use the `tel:link` with an optional replacement
    title for the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Date field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Date field is provided by the Datetime module. It is enabled by default
    with the standard installation profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Date module has a setting that defines what kind of data it will be storing:
    date and time, or date only. This setting cannot be changed once the field data
    has been saved.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save field settings to customize the field for this specific bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Date field has two ways of providing a default value. It can either be the
    current date or a relative date using PHP's date time modifier syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Date fields use the HTML5 date and time inputs, resulting in a native
    date and time picker provided by the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, Date fields can be configured to use a select list for each date
    and time component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b78bdaa-4ad7-4cd9-97ea-aec1d85d6c84.png)'
  prefs: []
  type: TYPE_IMG
- en: The default date field formatter display uses Drupal's time formats to render
    the time format. These are configured under Configuration and Regional and language
    in the Date and time formats form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dates and times can be displayed as Time ago to provide a semantic display of
    how far in the future or past a time is. The formats for both are customizable
    in the display settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, dates and times can be displayed using a custom format, as specified
    by the PHP date formats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Entity Reference field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Entity Reference field is part of Drupal core and is available without
    enabling additional modules. Unlike other fields, Entity Reference appears as
    a grouping of specific items when adding a field. This is because you must pick
    a type of entity to reference. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The interface allows you to select a Content, File, Image, Taxonomy term, User,
    or Other. Selecting one of the predefined options will preconfigure the field's
    target entity type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating an Entity Reference field using the Other choice, you must specify
    the type of item to reference. This option cannot be changed once your data is
    saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will note that there are two groups: **content** and **configuration**.
    Drupal uses configuration entities. Even though configuration is an option, you
    may not benefit from referencing those entity types. Only content entities have
    a way to be viewed. Referencing configuration entities would fall under an advanced
    use case implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save field settings to customize the field for this specific bundle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Entity Reference field has two different methods to allow users to search
    for content: using the default autocomplete or a view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the type of entity you are referencing, there will be different
    entity properties that you may sort the results based on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default field widget for an Entity Reference field is autocomplete, however,
    there is the option to use a select list or checkboxes for the available options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The values of an Entity Reference field can display the referenced entity's
    label or the rendered output. When rendering a label, it can be optionally linked
    to the entity itself. When displaying a rendered entity, you may choose a specific
    view mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with fields in Drupal 8, there are two steps that should be noted.
    When you first create a field, you are defining a base field to be saved. This
    configuration is a base that specifies how many values a field can support and
    whether any additional settings are defined by the field type. When you attach
    a field to a bundle, it is considered a field storage and contains configuration
    unique to that specific bundle. If you have the same Link field on the Article
    and Page content type, the label, link type, and link text settings are for each
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Each field type provides a method for storing and presents a specific type of
    data. The benefit of using these fields comes from validation and data manipulation.
    It also allows you to utilize HTML5 form inputs. Using HTML5 for telephone, email,
    and date, the authoring experience uses the tools provided by the browser instead
    of additional third-party libraries. This also provides a more native experience
    when authoring with mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having Drupal 8 released with new fields was a significant improvement in integrating
    widely used contributed modules into Drupal core. In the following sections, we
    will cover additional improvements and some additional topics.
  prefs: []
  type: TYPE_NORMAL
- en: Upcoming updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the recipes covers a field type that was once part of the contributed
    project space. These projects provided more configuration options than those found
    in Drupal core at the time of writing this book. Over time, more and more features
    will be brought into Drupal core from their source projects.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the Datetime module is based on the contributed Date project.
    However, not all of the contributed project's features have made it to Drupal
    core. Each minor release of Drupal 8 sees more features moved to core. An example
    is the Datetime range module, which is an experimental module slated to be near
    stable for Drupal 8.4\. This module adds support to start and end dates for Datetime
    fields. Documentation for the Datetime range module can be found at [https://www.drupal.org/docs/8/core/modules/datetime-range](https://www.drupal.org/docs/8/core/modules/datetime-range).
  prefs: []
  type: TYPE_NORMAL
- en: Views and Entity Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a View with an Entity Reference field is covered in [*Chapter 3*](2015063a-2e03-45d2-822d-892e87f10e41.xhtml),
    *Displaying Content Through Views*. Using a View, you can customize the way results
    are fetched for a reference field.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the *P**roviding an entity reference result view* recipe in [*Chapter
    3*](2015063a-2e03-45d2-822d-892e87f10e41.xhtml), *Displaying Content through Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the form display of a node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The latest in Drupal 8 is the availability of form display modes. Form modes
    allow a site administrator to configure different field configurations for each
    content entity bundle edit form. In the case of nodes, you have the ability to
    rearrange and alter the display of fields and properties on the node edit form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll modify the default form for creating the Article content
    type that comes with the standard installation profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8190f0e-6ee1-46a6-be0a-ff908f401b08.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To customize the form display mode, go to Structure and then Content Types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will modify the Article content type's form. Click on the expand the OPERATIONS
    dropdown and select Manage form display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c280cb2f-671e-4ae3-8c5b-df3e25b29389.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we will modify the Comments field. Click on the drag icon to the left
    and drag the row into the Disabled section. Follow the same steps for the sticky
    at top of lists field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/224a7bcd-dd22-4513-95c8-27e20f378ca5.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the settings cog for the Body field. Enter in a placeholder for the
    field, such as `Enter your article text here`. Click on Update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The placeholder will only appear on a `textarea` using a text format that does
    not provide a WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Save button at the bottom of the page to save your changes. You
    have now customized the form display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to Content | Add Content and then to Article. Note that the comment settings
    are no longer displayed nor are the sticky options under promotion options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ae398c4-bef4-470c-938a-12097ff04314.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entities in Drupal have various view modes for each bundle. In Drupal 7, there
    were only display view modes, which are covered in the next recipe. Drupal 8 brings
    in new form modes to allow for more control of how an entity edit form is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Form display modes are configuration entities. Form display modes dictate how
    the `\Drupal\Core\EntityContentEntityForm` class will build a form when an entity
    is edited. This will always be set to default unless changed or specified to a
    different mode programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Since form display modes are configuration entities, they can be exported using
    configuration management.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden field properties will have no value unless there is a provided default
    value. For example, if you hide the authoring information without providing code
    to set a default value, the content will be authored by anonymous (no user).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss more items for managing the form of a content entity in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing form display modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form display modes for all entities are managed under one area and are enabled
    for each bundle type. You must first create a display mode, and then it can be
    configured through the bundle manage interface.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically providing a default to hidden form items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](18026cd1-b8f0-48c0-9626-568ffd225eb5.xhtml), *Creating Forms
    with the Form API*, we will have a recipe that details with altering forms. In
    order to provide a default value for an entity property hidden on the form display,
    you will need to alter the form and provide a default value. The Field API provides
    a way to set a default value when fields are created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [*Chapter 10*](2f5fe169-0ba6-4746-9586-896f00f0bb28.xhtml), *The Entity
    AP*I.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 6*](18026cd1-b8f0-48c0-9626-568ffd225eb5.xhtml), *Creating
    Forms with the Form API.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the display output of a node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides display view modes that allow for customization of the fields
    and other properties attached to an entity. In this recipe, we will adjust the
    teaser display mode of an Article. Each field or property has a control for displaying
    the label, the format to display the information in, and additional settings for
    the format.
  prefs: []
  type: TYPE_NORMAL
- en: Harnessing view displays allows you to have full control over how content is
    viewed on your Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to customize the form display mode by navigating to Structure
    and then Content Types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will modify the Article content type's display. Click on the dropdown button
    arrow and select Manage display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Teaser view mode option to modify it. The teaser view mode is
    used in node listings, such as the default homepage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f8aada3-a154-4a3a-a6c4-9f33e1325a11.png)'
  prefs: []
  type: TYPE_IMG
- en: Change the format for Tags to be Hidden. Additionally, this can be accomplished
    by dragging it to the hidden section. The tags on an article will no longer be
    displayed when viewing a teaser view mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the settings cog for the Body field to adjust the trimmed limit. The
    trim limit is a fallback for Summary or trimmed when the summary of a `textarea`
    field is not provided. Modify this from `600` to `300`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save to save all of the changes that you have made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the homepage and take a the at your changes that have taken effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '>![](img/5daaf654-0bd7-4cd0-a743-bb3e0c190b82.png)'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: View display modes are configuration entities. View display modes dictate how
    the `\Drupal\Core\EntityContentEntityForm` class will build a view display when
    an entity is viewed. This will always be set to default unless changed or specified
    as a different mode programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Since view display modes are configuration entities, they can be exported using
    configuration management.
  prefs: []
  type: TYPE_NORMAL
