["```php\nCREATE TABLE IF NOT EXISTS `phalconblog`.`users` (\n  `id` INT(11) NOT NULL AUTO_INCREMENT ,\n  `username` VARCHAR(16) NOT NULL ,\n  `password` VARCHAR(255) NOT NULL ,\n  `name` VARCHAR(255) NOT NULL ,\n  `email` TEXT NOT NULL ,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `username` (`username`)\n);\n```", "```php\nCREATE TABLE IF NOT EXISTS `comments` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `post_id` int(11) NOT NULL,\n  `body` text NOT NULL,\n  `name` text NOT NULL,\n  `email` text NOT NULL,\n  `url` text NOT NULL,\n  `submitted` datetime NOT NULL,\n  `publish` tinyint(1) NOT NULL,\n  `posts_id` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `fk_comments_posts1` (`posts_id`)\n);\n```", "```php\nCREATE TABLE IF NOT EXISTS `tags` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `tag` varchar(255) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `tag` (`tag`)\n);\n```", "```php\nCREATE TABLE IF NOT EXISTS `post_tags` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `posts_id` int(11) NOT NULL,\n  `tags_id` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `fk_post_tags_tags1` (`tags_id`),\n  KEY `fk_post_tags_posts1` (`posts_id`)\n);\n```", "```php\nDROP TABLE `posts`;\nCREATE TABLE IF NOT EXISTS `posts` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `users_id` int(11) NOT NULL,\n  `title` text,\n  `body` text,\n  `excerpt` text,\n  `published` datetime DEFAULT NULL,\n  `updated` datetime DEFAULT NULL,\n  `pinged` text,\n  `to_ping` text,\n  PRIMARY KEY (`id`),\n  KEY `fk_posts_users` (`users_id`)\n);\n```", "```php\nALTER TABLE `comments`\n  ADD CONSTRAINT `fk_comments_posts1` FOREIGN KEY (`posts_id`) REFERENCES `posts` (`id`);\nALTER TABLE `posts`\n  ADD CONSTRAINT `fk_posts_users` FOREIGN KEY (`users_id`) REFERENCES `users` (`id`);\nALTER TABLE `post_tags`\n  ADD CONSTRAINT `fk_post_tags_tags1` FOREIGN KEY (`tags_id`) REFERENCES `tags` (`id`),\n  ADD CONSTRAINT `fk_post_tags_posts1` FOREIGN KEY (`posts_id`) REFERENCES `posts` (`id`);\n```", "```php\n$this->hasMany(\"id\", \"Posts\", \"users_id\");\n```", "```php\n$this->belongsTo(\"users_id\", \"Users\", \"id\");\n```", "```php\n{{ content() }}\n\n{{ form(\"users/login\", \"method\":\"post\", \"autocomplete\" : \"off\") }}\n\n<h1>Users</h1>\n\n<div>\n    <label for=\"username\">Username</label>\n    {{ text_field(\"username\", \"size\" : 30) }}\n</div>\n\n<div>\n    <label for=\"password\">Password</label>\n    {{ password_field(\"password\", \"size\" : 30) }}\n</div>\n\n{{ submit_button(\"Login\", \"class\" : \"btn\") }}\n\n{{ end_form() }}\n```", "```php\npublic function loginAction() {\n\n    if ($this->request->isPost() && isset($_POST('username') && isset($_POST('password')) {\n        $query = Criteria::fromInput($this->di, \"Users\", $_POST);\n        $this->persistent->parameters = $query->getParams();\n        $parameters = $this->persistent->parameters;\n        if (!is_array($parameters)) {\n            $parameters = array();\n        }\n        $users = Users::findFirst($parameters);\n        if (count($users) == 1) {\n            $user = $users->getFirst();\n            $this->session->set(\"user_id\", $user->id);\n            $this->flash->success(\"Welcome \" . $user->name);\n        } else {\n            $this->flash->error(\"Username and Password combination not found\");\n        }\n    }\n    return $this->dispatcher->forward(\n        array(\n            \"controller\" => \"posts\",\n            \"action\" => \"index\"\n        )\n    );\n}\n```", "```php\npublic function logoutAction(){\n        $this->session->remove(\"user_id\");\n        $this->flash->success(\"You have been logged out\");\n        return $this->dispatcher->forward(\n            array(\n                \"controller\" => \"users\",\n                \"action\" => \"index\"\n            )\n        );\n    }\n```", "```php\npublic function indexAction() {\n        $this->persistent->parameters = null;\n        if ($this->session->has(\"user_id\")) {\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"users\",\n                    \"action\" => \"search\"\n                )\n            );\n        }\n    }\n```", "```php\nif (!$this->session->has(\"user_id\")) {\n            $this->flash->error(\"Please log in to create a post\");\n            return $this->dispatcher->forward(\n                array(\n                    \"controller\" => \"users\",\n                    \"action\" => \"index\"\n                )\n            );\n        }\n```", "```php\n$post->users_id = $this->session->get(\"user_id\");\n```", "```php\n{{ link_to(\"users/logout/\", \"Logout\", \"class\" : \"btn\") }}\n```", "```php\n$user->email = $this->request->getPost(\"email\", \"email\");\n```", "```php\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n```", "```php\n        $this->addBehavior(new Timestampable(\n            array(\n                'beforeCreate' => array(\n                    'field' => 'published',\n                    'format' => 'Y-m-d H:i:s'\n                )\n            )\n        ));\n        $this->addBehavior(new Timestampable(\n            array(\n                'beforeUpdate' => array(\n                    'field' => 'updated',\n                    'format' => 'Y-m-d H:i:s'\n                )\n            )\n        ));\n```", "```php\npublic function initialize() {\n    $this->hasMany(\"id\", \"PostTags\", \"posts_id\", NULL);\n    $this->belongsTo(\"users_id\", \"Users\", \"id\", array(\"foreignKey\" => true));\n  }\n```", "```php\npublic function initialize() {\n        $this->hasMany(\"id\", \"PostTags\", \"tags_id\", NULL);\n    }\n```", "```php\npublic function initialize() {\n        $this->belongsTo(\"posts_id\", \"Posts\", \"id\");\n        $this->belongsTo(\"tags_id\", \"Tags\", \"id\");\n    }\n```", "```php\npublic function addTags($tags) {\n        foreach ($tags as $t) {\n            $t = trim($t);\n            $tag = Tags::findFirst(array(\"tag = '$t'\"));\n            if (!$tag) {\n                $tag = new Tags();\n                $tag->tag = $t;\n                $tag->save();\n            }\n            $postTag = PostTags::findFirst(\n                array(\n                    \"conditions\" => \"$this->id = ?1 AND tags_id = ?2\",\n                    \"bind\" => array(\n                        1 => $this->id,\n                        2 => $tag->id\n                    )\n                )\n            );\n            if (!$postTag) {\n                $postTag = new PostTags();\n                $postTag->posts_id = $this->id;\n                $postTag->tags_id = $tag->id;\n                $postTag->save();\n            }\n            unset($tag);\n            unset($postTag);\n        }\n```", "```php\n$success = $post->save;\n```", "```php\n  $tags = explode(\",\", $this->request->getPost(\"tags\", \"lower\"));\n  $post->addTags($tags);\n```", "```php\n$this->view->id = $post->id;\n```", "```php\n $tagArray = array();\n foreach ($post->postTags as $postTag) {\n       $tagArray[] = $postTag->tags->tag;\n }\n$this->tag->setDefault(\"tags\", implode(\",\", $tagArray));\n```", "```php\n<tr>\n        <td align=\"right\">\n            <label for=\"tags\">Tags</label>\n        </td>\n        <td align=\"left\">\n                {{ text_field(\"tags\") }}\n        </td>\n    </tr>\n```", "```php\n   {{ post.body }}\n```", "```php\n <div>\n    {% for posttag in post.postTags %}\n        {{ posttag.tags.tag }},\n    {% endfor %}\n </div>\n```", "```php\nif ($this->request->isPost()) {\n            //$query = Criteria::fromInput($this->di, \"Posts\", $_POST);\n            //$this->persistent->parameters = $query->getParams();\n            $this->persistent->parameters = $this->request->getPost();\n        } else {\n            $numberPage = $this->request->getQuery(\"page\", \"int\");\n        }\n\n        $parameters = $this->persistent->parameters;\n        if (!is_array($parameters)) {\n            $parameters = array();\n        }\n        //$parameters[\"order\"] = \"id\";\n        $query = $parameters['body'];\n\n        //$posts = Posts::find($parameters);\n        $phql = \"SELECT * FROM Posts WHERE body LIKE '%$query%' OR\n            excerpt LIKE '%$query%' OR title LIKE '%$query%' ORDER BY id\";\n        $posts = $this->modelsManager->executeQuery($phql);\n```", "```php\nSELECT Posts.title, Users.name FROM Posts JOIN Users ORDER BY Users.name\n```", "```php\n$posts = $this->modelsManager->createBuilder()\n    ->from('Posts')\n    ->join('Users')\n    ->orderBy('Users.name')\n    ->getQuery()\n    ->execute();\n```", "```php\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n```", "```php\n$di->set('mongo', function() {\n    $mongo = new Mongo();\n    return $mongo->selectDb(\"blog\");}, true);\n```", "```php\nclass Pages extends \\Phalcon\\Mvc\\Collection{\n\n}\n```", "```php\n$page = Pages::findById(\"5087358f2d42b8c3d15ec4e2\");\n```", "```php\n$page->title = \"New Title\";\n\n$page->adhoc = \"Adhoc value just in this record\";\n$page->save();\n```", "```php\nphalcon migration generate\n```", "```php\nphalcon migration run\n```", "```php\nphalcon migration\n```"]