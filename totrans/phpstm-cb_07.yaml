- en: Chapter 7. PhpStorm and Phing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Phing and PhpStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching Phing build file syntax problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a PhpStorm application using Phing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a different build file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing wonders with Phing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Phing build view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grandma used to say, "Don't copy, be original". Software engineering says, "Don't
    reinvent the wheel".
  prefs: []
  type: TYPE_NORMAL
- en: Whom do you trust? Trust software engineering if Grandma was not a software
    engineer!
  prefs: []
  type: TYPE_NORMAL
- en: They have copied and they have built great things that way. Saying "copying"
    could be controversial, so based on what is a more politically correct term to
    describe copying, let's go with *inspiration*. Thus, to state in diplomatic terms,
    they have got inspired from an existing software and created a new software altogether.
  prefs: []
  type: TYPE_NORMAL
- en: But, is this evil? What if that software did not exist? What if that software
    is quite useful?
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting colors in this black-and-white picture, there was software: a build
    tool available for another language, Java, with the name Ant. People (the programmers)
    who were PHP enthusiasts thought of having a similar build tool, so some good
    people toiled hard and created **Phing** for the task. Thus, Phing has become
    a build tool for PHP, and it is said that Phing is Ant-based.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some PHP programmers will say that when PHP gets interpreted, what is the need
    to have a separate tool for it? What is the use of creating a bundle when the
    PHP source code has to be given to the client? A simple directory containing the
    PHP scripts could suffice. The simplest and the most apt answer to this is that
    when you are a software engineer; you should always have everything automated—even
    the simplest of tasks as this one. Phing automates a number of processes: anything
    that you can imagine (in the PHP context). You can create an archive, check out
    code, deploy code, clean up logs, back up code—just think and there will be Phing
    (intentional rhyme).'
  prefs: []
  type: TYPE_NORMAL
- en: When you work with Phing, you also need to understand what goes on under the
    hood. So, you write down instructions in the XML format based on some rules. These
    XML-based instructions are known as tasks for Phing. These tasks can be many,
    and the files that contain these tasks, again, can be many. It is worth noting
    here that you need to use proper (and documented) wisdom while separating tasks
    (or grouping tasks) because the more you stick to the principles of software engineering,
    the easier you will handle the compartmentalization better. Phing, in itself,
    is a code written in PHP (as already stated). This code, when executed, reads
    from the XML file you have written and obediently follows what has been written
    (provided the XML document itself is well formatted and adheres to the Phing XML
    rule). You can call this XML file the build file because that is its common name.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice that Phing has a strange name? It sounds more like an indicative
    sound of a commercial advertisement in between radio relay. Jokes apart, Phing
    is a recursive acronym—do you remember the first time you heard this word? Just
    remember that when you cannot remember anything, better start from the beginning
    (pun intended). Phing stands for **PH**ing **I**s **N**ot **G**nu's make. God
    bless those who run so short on names.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Phing and PhpStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having obtained some very basic information about Phing, now is the time for
    you to have some real-world action! Without PhpStorm, the action would have been
    centered on Phing, but since you are cooking with PhpStorm, you need to have a
    view from added angles. Thus, a probable roadmap for you would be to get Phing,
    install it locally on your development machine, and tell PhpStorm that Phing has
    been installed and that it needs to work in synchronization with Phing. Actually,
    PhpStorm makes use of the functionality that Phing provides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we delve into the depths of building a build file, it is worth noting
    a few of the major features of Phing, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple XML build files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rich set of provided tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easily extendable via PHP classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform-independent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No required external dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to read more about Phing tasks, I recommend that you visit the official
    website of Phing ([http://www.phing.info/](http://www.phing.info/)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get Phing is everyone's cup of tea indeed. It can be downloaded as a phar
    using the command `wget -c http://www.phing.info/get/phing-latest.phar`. You can
    run this command in the terminal (which is accessible through *Alt* + *F12*).
    Once you do that, with a working Internet connection, you can have this phar downloaded.
    You need to note the path where the file has been loaded. It is recommended that
    you move the executables under a common folder that is not modified (doesn't have
    write permissions associated with it). It is not that there would be errors in
    it—doing that is good practice and keeps the operating system files and directories
    organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having obtained the phar, it is time to tell PhpStorm about Phing. You need
    to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Project** view. Locate **External Libraries**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the right-click context menu, and select the **Configure PHP include
    paths** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the full path to the location where you downloaded (or moved) the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bingo! You successfully told PhpStorm that you added a new library for the open
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make Phing available for all applications running PHP, you can add it to
    the PHP master include path—something like `/usr/share/php5`.
  prefs: []
  type: TYPE_NORMAL
- en: At this time, if you wish to check what changes were applied when you installed
    Phing, you won't be successful. You won't be able to see any Phing-related menu
    item anywhere in PhpStorm. You won't be able to see any extra icons, nor any extra
    views related to Phing. It would be natural for you to start considering that
    something was left out during the installation of Phing. Not to worry mate, stay
    tuned!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To unleash the power of Phing, you need to execute it. To execute it, you need
    to have it installed. But you have already installed Phing, and you are not sure
    whether it got installed properly or not. This seems like a vicious circle. Phing
    needs an input file to understand what it has to do. This is known as the **build
    file**. So, you need to create a new build file inside your project. A build file
    is an XML document and is based on some rules. The default name is `build.xml`.
    So, a very basic build file looks somewhat like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, you need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Project view and select the build file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the right-click context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be a new option (magic!) available with the name **Add as Phing build
    file**. Select that option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to check for successful integration, you can select **View** | **Tool
    windows**, and you will be able to see a new option available, **Phing Build**.
    If you can see this new option, congratulations, you have successfully connected
    Phing to PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While creating a build file, PhpStorm needs to have at least one target specified.
    If you leave a build file empty, PhpStorm will be your friend in need.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Phing is a software written in PHP, PhpStorm wants to have this software
    well within its reach. So, you add the include path to the project to achieve
    this target. When PhpStorm has Phing within reach, it attempts to create some
    options for Phing. For this purpose, it looks up to find out the build file and
    hence the targets. Once it finds the targets, it understands the targets and then
    creates the necessary options.
  prefs: []
  type: TYPE_NORMAL
- en: Catching Phing build file syntax problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have worked hard to connect PhpStorm and Phing, you must know what
    drives Phing. What is it that allows you to do wonders with Phing? What is it
    that makes your life easier and makes adherence to the principles of software
    engineering easier? The name you had to think of was build file. Yes, it is the
    build file that controls the behavior of Phing. Yes, using build file, you can
    do wonders with Phing. Yes, using build file, you can perform tasks in a clean
    way—thus adhering to the principles of software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's perfectly okay that you can write a new build file to perform tasks with
    Phing. But this question looms large—How do you check whether the build file you
    wrote is syntactically OK. Come on, if you say that you do not create mistakes
    while writing, you must be JARVIS and no human being. To err is human, to check
    and remove that error is *PhpStorm-ine*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting off writing build files, you need to know some very basic rules
    so that you can at least test a demonstration or Hello World actions in Phing.
    (Yes, you heard it right: it is possible to create a `Hello World` message using
    Phing.) A build file is valid to be used by Phing only when:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file contains an opening and closing project tag. There should be only
    one, and it should be the root node of the XML tree. Inside the project tag, the
    file should contain at least one target tag: tags such as `property`, `tstamp`,
    and `propertyprompt`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, revisiting the same build file, you will be able to understand the build
    file better—a second attempt makes you more mature as compared to the first attempt.
    Here, take a look at the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to check the syntax, the inspection has to be taken care of. There
    is an icon provided in the bottom status bar. You need to click on it and set
    the **Power Save Mode** to off and the highlighting level to **Inspections**,
    as shown in the following screenshot:![How to do it…](img/3878OT_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is time for you to play around with the build file. Not to worry, there
    is the local history to save you—you can revert to some changes at will. So, whenever
    you make mistakes in the syntax, PhpStorm shows you errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you specify an incorrect start tag, a red underline will be shown in the
    nearest matching tags and the status bar shows a message **Start tag has wrong
    closing tag**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The wrong closing tag name will show a red underline in the incorrect tag and
    the nearest matching tag and the status bar at the bottom shows a message **Wrong
    closing tag name**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you specify a tag that is not defined in the rule list of Phing, there are
    a number of ways in which the problem will be shown, such as the following screenshot:![How
    to do it…](img/3878OT_07_02.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you specify an attribute that is not defined or allowed for a tag, the incorrect
    attribute changes color to red, and the status bar shows the message **Attribute
    <incorrect-attribute> is not allowed here**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you forget to specify the end tag for a tag, the status bar will show the
    message **Element <element-without-closing-tag> is not closed**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PhpStorm* at your disposal again, proves PhpStorm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since you will often write tasks for Phing, you can also create a new template
    for the build file. To do that, you need to select the **File** | **New** option
    and select the **Edit file templates** option. In the window that appears, you
    need to add the name of this template (which will appear whenever you select **File**
    | **New**) and the extension of this template (you need to specify `.xml`) and
    put in the content of the most basic build file that you will always require.
    Clicking on **OK** will save this template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a Phing file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3878OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PhpStorm inspects code on the fly. Thus, the general rules of inspection are
    applicable on the build file as well. This setting can be turned on or off by
    selecting **File** | **Settings** | **Inspection** | **Phing** | **Phing inspections**.
    So, as you keep on typing, the inspector keeps on checking what you write and
    continues showing you warnings visually.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to disable the inspections, you can do it in such a way that all
    inspections are turned off. Though not recommended, it can be handy in the case
    of large files.
  prefs: []
  type: TYPE_NORMAL
- en: Building a PhpStorm application using Phing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, it is time for you to have some real-world action using Phing. It is time
    to give the problem of using Phing a shot (and get hurt by its shots as well).
    It is time for you to do something useful for the business of which you are the
    backbone. Fasten your helmet and set out to work in the sun.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general meaning of build in other languages that require compilation is
    to compile the code, link the objects together, and create an executable. In PHP,
    though, you cannot compile the code; it is interpreted, dear: you can emulate
    the build process. How? Stay tuned.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, you need to recall that you were hungry once! You must not forget
    certain things in life—one of them being your hunger. It makes you aware that
    you still need to work hard to earn bread to appease this hunger. So, when you
    were hungry, you just entered your kitchen and attempted to cook some pizza for
    yourself. Right? If you wish to pass on this same system that cooked pizza for
    you, what will your action be? You need to create a build file for Phing and write
    some targets and actions in it so that you are able to group together the necessary
    components and pass it on in one single unit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new build file, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the appropriate directory, and select the build file type from the right-click
    context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will create a build file that will look something like the following code;
    don''t worry about this code—you will get to know it in detail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, the time is ripe for you to understand the nuts and bolts that drive
    Phing. Thus, `<project name="pizzaCookingSystem" default="compressComponents">`
    creates a project element and binds it to a namespace with the `name` attribute.
    The `default` attribute defines the default target that Phing will select to execute.
    If you visualize the Phing build file in the form of a tree, a project is the
    root node of the tree. `<target name="bundleComponents">` creates a new target
    element that is a container for the actions that you want to perform. Thus, all
    the tasks that you wish to execute are written inside the target component. The
    target is selected by the `name` attribute. If you visualize the Phing build file
    in the form of a tree containing nodes and leaves, the target element is a node
    of the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '`<target name="compressComponents" depends="bundleComponents">` is another
    way of writing the target element with an added attribute `depends`. So when you
    specify the `depends` attribute, you specify to the Phing engine that this target
    element depends on some other target element. It is important here for you to
    be informed that when you specify the `depends` attribute, that target element
    is executed first as compared to the current element.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<echo message="Creating a package directory." />` creates an element to echo
    a message to the console. What message will be displayed that depends on the contents
    of the message attribute. (Remember displaying `Hello World`? Your big smile is
    lovely!)'
  prefs: []
  type: TYPE_NORMAL
- en: '`<mkdir dir="./package" />` creates an element that creates a new directory
    in the current directory. This is synonymous to the `mkdir` command under `*nix`
    systems, which accepts the relative path as well as the absolute path as the target
    location.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<copy file="../Controllers/Dish.php" tofile="package/Dish.php" />` performs
    the file copy operation from the file location specified in the file attribute
    to the file location specified in the `tofile` attribute. This is synonymous to
    the `cp` command under `*nix` systems and accepts relative or absolute file pathnames.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<zip destfile="package.zip">` creates an element to handle the compressing
    of files in the ZIP format. The `destfile` attribute specifies the name of the
    compressed file that will be the output. The output path can again be relative
    or absolute.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<fileset dir="package" >` creates an element to set the files to be selected
    in the compressed output file. In other words, this picks up files from a directory
    specified by the `dir` attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to include selected files in the package, you can create an `include`
    element and specify the names of files you want to add to the output compressed
    file (`<include name="*" />`). Wildcard characters are acceptable here. Thus,
    a star (`*`) means that all the files specified inside the fileset element's `dir`
    attribute will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can proudly say that you have the power to exploit Phing. Another feather
    in your cap, right? Excellent performance, keep it up!
  prefs: []
  type: TYPE_NORMAL
- en: Using a different build file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It happens frequently that you have mutually independent and exclusive tasks
    at hand. The principle of software engineering always advocates against grouping
    tasks together—modularity is the correct name of the phenomenon advocated. So
    is the case with you and Phing. What if you have a number of tasks to be undertaken?
    There are two routes to choose from: shorter and longer. The shorter way leads
    you to quick results but your friend, software engineering, will be offended.
    The longer way can irritate you at first, but dear friend, it would let you get
    more close to software engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: A wise decision is to befriend software engineering and take the longer route.
    Thus, you will create individual build files for individual tasks. Beware, though.
    Deciding the grouping of tasks in itself is a double-edged sword—it cuts both
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having grouped the tasks according to their nature, you now need to concentrate
    on how Phing can come to your rescue in your overloaded daily life. You just need
    to follow the rules in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Group**: Grouping the tasks is an important step to begin with. You need
    to create a directory expected to contain the tasks (build files). It is not that
    there would be errors: this is good practice to follow. A person looking at your
    code hierarchy will be able to grasp your intent with ease in that case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: Creating the actual build file is the next step you not only need
    to do but also take extreme care of. Since this is the workhorse, you need to
    ensure that the program structure is minimal—redundant lines will confuse you.
    You need to write tasks according to the individual activities that you have grouped.
    Ensure that you don''t leave the business team behind! So, to create the build
    file, select **File** | **New** | **Phing build file** option and write the tasks
    inside it. If you have not set any template for your build file, you need to select
    **File** | **New** | **File** and specify the name of the file with the extension
    `.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setup**: Like always, your friend PhpStorm needs to be taken into account
    for your engineering needs. It is PhpStorm that makes your life easier—always
    remember. You therefore need to add the individual build files by selecting the
    **Add as Phing build file** option. This can be done by accessing the right-click
    context menu on the appropriate build file from the Project view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute**: All is set now. When the need is felt, select the appropriate
    file and right-click to select **Run build file** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the build file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3878OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Thus, PhpStorm did not let anything come between two friends—you and software
    engineering.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample build looks like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A build file is the only source to provide guidance to Phing. In other words,
    Phing only considers a build file fit enough to accept the execution requests.
    So, the different tasks are just a plural form of single tasks (no pun intended).
    So, the different tasks are written down in different build files, to ensure that
    the structural modularity is maintained. The individual tasks are executed depending
    on which task is required at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: Doing wonders with Phing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is art without practical usage? Practical usage means the utility of the
    art. The utility of the art clearly denotes the ability to solve a problem. So
    considering Phing as an art, it has got practical usage. Since it has practical
    usage, it has got utility. Since it has utility, it clearly denotes that it can
    solve problems for you.
  prefs: []
  type: TYPE_NORMAL
- en: What are you waiting for?
  prefs: []
  type: TYPE_NORMAL
- en: Think build problems, common or uncommon, think Phing. The most common problems
    are the most commonly known headache-causing agents—some of the developers in
    your team might not know the database specific language, some might not know the
    commands specific to the operating system, and some might not be trustworthy to
    be allowed to handle the system permissions; hence, the logfiles or temporary
    file cleaning tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You can write Phing tasks to tackle them all.
  prefs: []
  type: TYPE_NORMAL
- en: Can you write a Phing task to check out files from the SVN server and deploy
    them on a target server? Yes, you can.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have the **PHP SSH2** extension loaded. In `*nix` (Debian-based)
    environments, the PHP SSH2 extension is available with the name `libssh2-php`.
    It can be very easily downloaded with the command `apt-get install libssh2-php`.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to have your SSH public key (most commonly a file with a `.pub`
    extension) added on the server on which you wish to deploy your code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you think Phing, you must be mentally prepared to handle the strict syntax
    of XML. So, you need to write some XML code based on the rules of Phing to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a list of changes based on the Subversion revision number and save it
    in a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export the changed files to your local server by reading from the file created
    in step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the exported files to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is as simple as it seems. So, you would probably do something like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Heavy-duty XML code! You are encouraged to be brave enough to open the hood
    and see what goes on inside.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Property Prompt** is the Phing way to ask for user input during execution.
    The message that you want to show is to be written in the `promptText` attribute.
    The input value can later be accessed with the name specified in the `propertyName`
    attribute. If you want to set a default value to act as a fallback value just
    in case the user does not enter a value, you need to set the value of the default
    value attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exec** is the Phing way to execute a command. If the command generates output
    that you want to use in another place in your code, you need to specify a name
    that will be the reference point to this output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Phing enables you to load the contents of a file using this `loadfile` tag.
    You need to specify the path of the file (absolute or relative) in the file attribute.
    The reference name for this file is written inside the `property` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can iterate a certain condition using the `foreach` tag. The `delimiter`
    attribute separates the values of the input specified using the `list` attribute.
    The individual element in the loop is accessible using the value specified in
    the `param` attribute. The `target` attribute denotes which target is to be repeatedly
    performed inside the loop. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phing can create a new directory if you write the `mkdir` tag and specify the
    name of the directory to be created in the `dir` attribute. If the directory already
    exists, Phing remains silent and produces no message about the directory—you need
    to be careful yourself. You can call an arbitrary target in your build file using
    the `phingcall` tag and specifying the name of the target in the `target` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: So, again Grandma was right. You created a larger and complicated object using
    small and simple objects. Always remember her values.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Phing build view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PhpStorm is just. PhpStorm is good. PhpStorm does not discriminate. There are
    tool windows provided for every important tool provided to you. The same is true
    for Phing as well. So, you can have an overview of what Phing can do.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Phing build view is accessible at **View** | **Tool windows** | **Phing
    build window**. The Phing view provides functions that are useful for Phing-related
    actions. So, you can:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add a new build file to execute**: There might be Phing build files you have
    written in some other editor or obtained from another person. You can add those
    files as build files in PhpStorm. To add files, click on the **+** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove an existing build file**: If you feel that you have added an incorrect
    version of the build file, you can always recover from your mistake. You can remove
    a build file from the project by clicking on the **–** button. You can also use
    the *Delete* key on your keyboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run a build file**: If you feel that all the targets have been written correctly,
    you can perform that action by executing a build file. To do that, you need to
    select a build file and click on the green **Run** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply target-hiding settings**: In the Phing view, you get a consolidated
    view of the individual build files and the targets you have written inside it.
    So, you can hide a target by selecting it, accessing the right-click context menu
    and clicking on **Mark to hide**. The hide settings are applied when you select
    this option available next to the **Run** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expand all**: You can expand all the build files to show all the (unhidden)
    targets for individual build files. The keyboard shortcut to be used is *Ctrl*
    + (Numpad) *+*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collapse all**: You can collapse the build files to show only the build files
    and not the targets. The keyboard shortcut for the same is *Ctrl* + (Numpad) *-*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**: You can make settings for the execution of tasks by Phing. The
    settings window is accessible from inside the Phing view by the keyboard shortcut
    *Alt* + *Enter*. Inside the **Settings** window, you have the power to make a
    difference. Here''s how you can do that:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You get a path to the Phing executable option wherein you can set the read or
    update the path to the Phing executable for the project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, there are command-line options that allow you to pass on certain options,
    such as `-l` (listing the targets) and `-debug` (setting the debug mode on).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set **Properties** in the form of key-value pairs. PhpStorm gives you
    the option to select from a list of available macros or precooked placeholders.
    You can select which target(s) to hide or unhide by selecting or deselecting the
    **Hiding targets** checkbox.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides this, all other settings that are available to a view in PhpStorm are
    provided here. The options are: you can set the display mode for the view in one
    of the pinned, docked, floating, and split ways. You can move the window to one
    of the four regions (top, left, bottom, and right) on the screen; resize the window
    to a required size, hide the view altogether, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Phing application-specific settings that you create have to be created individually
    for each of the build files that have been added to PhpStorm.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, it is important to understand how the Phing settings work. PhpStorm acts
    as a proxy for whatever tool it executes—it always creates wrapper (class) for
    the target tool. Thus, when you attempt to set the command-line options or add
    properties, you are telling this proxy application to remember that whenever the
    Phing command is issued, the arguments from the command-line options textbox are
    to be executed. In other words, you pass on the arguments to the PhpStorm proxy
    application, which in turn, executes the same old Phing command. The properties
    you set are used in the build file as is. So, when you set the properties, you
    are indeed making the properties persist till you yourself do not delete it.
  prefs: []
  type: TYPE_NORMAL
