- en: Chapter 10. Creating a Product Slider Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering helpers and blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a widget configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a block and the template files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom configuration parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finalizing the theming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Magento widgets are graphical interfaces to configure blocks in the frontend.
    For every widget, there is a configuration page available where you can set the
    required values for that widget.
  prefs: []
  type: TYPE_NORMAL
- en: When the configuration is done, you can configure the layout instructions to
    show the widget at several places in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a new module where we will create our own widget.
    We will create a product slider with the products of a category that we can configure
    in the widget.
  prefs: []
  type: TYPE_NORMAL
- en: When we have performed the required configuration for the widget, we will finish
    the representation in the frontend. We will create a product list that we will
    style with a jQuery slider script.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we did in the previous chapter and fully explained in [Chapter 4](ch04.html
    "Chapter 4. Creating a Module"), *Creating a Module*, we will create the required
    files to create an empty module that we will extend with widget configurations
    in further chapters.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with an empty Magento module that we will create in this recipe.
    We will create all the required files to initialize a new module that can be used
    for the creation of a widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your code editor and prepare yourselves to create a new module called `Packt_Productslider`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you perform the following steps, you will create an empty `Packt_Productslider`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following folders for the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Productslider/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Productslider/etc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the module file `Packt_Productslider.xml` in the `modules` folder under
    `app/etc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the configuration file for the module. This is the `config.xml` file
    that is located in the `etc` folder under `app/code/local/Packt/Productslider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and check whether the module is installed. You can do this by
    navigating to the configuration page, **System** | **Configuration** | **Advanced**
    | **Advanced**, and checking whether the module is on the list. Alternatively,
    you can run the command `wiz module-list` in the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created a new module with the name `Packt_Productslider`. This module
    is a custom module, so we configured it in the local code pool.
  prefs: []
  type: TYPE_NORMAL
- en: Practically, this module does nothing, but we will extend it in the next recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Registering helpers and blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The widget module we will create uses a custom block. For translating strings
    in the block and in different configurations, we need to configure a helper class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will initialize blocks and helpers, and we will create the default helper
    for our module, just like we did in [Chapter 4](ch04.html "Chapter 4. Creating
    a Module"), *Creating a Module*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps describe how to configure helpers and blocks for a new module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Productslider/Block`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Productslider/Helper`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `config.xml` file of the module, add the following configuration under
    the `<config>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `Data.php` file under `app/code/local/Packt/Productslider/Helper`
    and paste the following content into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache, and your blocks and helpers will be registered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous code, we initialized blocks and helpers with the name `productslider`.
    With this configuration, it is possible to use block names such as `productslider/block_name`.
  prefs: []
  type: TYPE_NORMAL
- en: The helpers are also registered under the name `productslider`. We created a
    default helper, which we can call with the function `Mage::helper('productslider')`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a widget configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will configure a new widget type. We have to create a new
    configuration file where we will initialize the following things for the widget
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the widget (in the backend)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget configuration parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget block type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widget templates (`.phtml` files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test the widget configuration, we can navigate to the **Widgets** page under
    **CMS** in the backend to manage the widget instances.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to create a `widget.xml` configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Create the file `app/code/local/Packt/Productslider/etc/widget.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your cache and check whether the configuration works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the backend, navigate to **CMS** | **Widgets**, click on the **Add New Widget
    Instance** button, and confirm that the widget is in the list, as shown in the
    following screenshot:![How to do it...](img/3329OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the widget for your frontend theme and go to the next page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now on the widget configuration page. In the **Widget Options** tab,
    we will create our own widget parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a title field that we will use in the block, we have to create a `parameters`
    tag as shown in the following code. Paste this under the `<category_product_slider>`
    tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache, reload the backend page, and go to the **Widget Options** tab.
    You will see that there is a title field available, as shown in the following
    screenshot:![How to do it...](img/3329OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To show all the products of a category, we have to create a configuration where
    we can select a category. We will create a text field where we can paste the right
    category ID. To configure the field, add the following code under the `<parameters>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload the page again. You will see that a second textbox
    is added to the configuration form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `widget.xml` file is used to define widgets in the Magento installation.
    All widget types in Magento are defined under the `<widgets>` configuration tag.
  prefs: []
  type: TYPE_NORMAL
- en: Under this tag, we defined a new widget called `category_product_slider`. In
    this tag, we used the `type` attribute to define the `Block` class that the widget
    will refer to. In this case, it is `catalog/product_list`. This is the block that
    is used to render the category product list or the grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `<category_product_slider>` tag, we have used the following configuration
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name` tag is used for the widget type name that is used in the dropdown
    when creating a widget.
  prefs: []
  type: TYPE_NORMAL
- en: The `description` tag is for information. It is not shown in the frontend or
    backend. It is only used for providing information for the widget.
  prefs: []
  type: TYPE_NORMAL
- en: In the `parameters` tag, we define the configuration parameters for the widget.
    In our case, these are `name` and `category_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Our fields are just text fields, but we can also make use of other input fields
    such as dropdowns and checkboxes. When working with dropdown or multiselect fields,
    we can define a source model with the `<source_model>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a block and the template files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned how we can configure the widget. Now it
    is time to show the widget.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a custom block where we will write a query that returns the products
    for the given category, and we will set up a configuration to use two template
    files on the widget configuration page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will work further to create our own widget instance. Open the `widget.xml`
    file that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps describe how we configure a custom block with custom templates
    for the widget instance.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will create a block class that extends the `Mage_Catalog_Block_Product_List`
    class. We do this because the behavior of that class is what we need for our widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `List.php` file under `app/code/local/Packt/Productslider/Block/Catalog/Product`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to that file to initialize the class and the functions
    that we will configure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configure the block that uses the class we previously created. We do this by
    changing the `type` attribute in the `<category_product_slider>` tag. Change the
    attribute to `productslider/catalog_product_list`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the block class is created, it is time to create templates for the block.
    In this widget, we will use two templates. The first template comprises the image,
    title, and price of the products. The second template only shows the image and
    the **Add To Cart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the templates in the `category-product-slider` folder under `app/design/frontend/base/default/template/productslider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the folder and add the following files to this folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`list.phtml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`teaser.phtml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `list.phtml` file, add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `teaser.phtml` file, add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the widget configuration page so that you can choose your template.
    We can do this by adding the following as a child of the `<parameters>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and go to the widget configuration page. When you click on **Add
    Layout Update**, you can select the page where the widget will display. The last
    dropdown is the template you can use for the widget, as shown in the following
    screenshot:![How to do it...](img/3329OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you choose the right theme to configure the widget. We will use the
    default / default theme to configure the widget, so make sure your shop is using
    the same theme.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Complete the form to place a widget instance on the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you clear the cache, the widget will appear on the home page with the content
    of the chosen template file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you enable developer hints, you will see that our previously created custom
    block is used as shown in the following screenshot:![How to do it...](img/3329OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can enable developer hints in the backend by navigating to the**Developer**
    page under **System** | **Configuration** | **Advanced** in the **Debug** section.
    Be sure to configure it on the website or store a view scope.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also run the wiz command `wiz devel-showhints yes` to enable the hints.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last thing we will do is to create a loop that shows the name of the products.
    Add the following code to the `list.phtml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configure the widget to use the right template and a valid category ID. After
    that, reload the frontend, and you will see something like the following screenshot:![How
    to do it...](img/3329OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the category ID while navigating to a category in the backend.
    Navigate to **Catalog** | **Manage Categories**, select any category, and you
    will see the ID near the name.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a custom block class for the widget. By configuring the `type` attribute
    of the widget, all instances of this widget will use a block of the type `productslider/catalog_product_list`.
  prefs: []
  type: TYPE_NORMAL
- en: When we have a look at this class, we see that the class will extend the `Mage_Catalog_Block_Product_List`
    class, which is the block that is used to render product lists for a category.
    We use this class so we can use the standard functions instead of writing our
    own.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we did was to make it possible to choose two templates for the
    widgets. This is done by configuring the `<template>` parameter on the widget.
  prefs: []
  type: TYPE_NORMAL
- en: The template is configured in the **Layout Update** section of the widget configuration
    page. This form is a graphical implementation of the layout XML configuration
    in the template files.
  prefs: []
  type: TYPE_NORMAL
- en: When we save the widget, Magento will create a layout update in the database
    for the widget. This layout update is stored in the table `core_layout_update`.
  prefs: []
  type: TYPE_NORMAL
- en: When we look at the template file, we see the `$this->getTitle()` function is
    used to fill the title tag of the block. This function will output the data that
    is set for the `title` parameter on the block.
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration, we created a `<title>` configuration which will do a `setData('title')`
    on the background when the block is created.
  prefs: []
  type: TYPE_NORMAL
- en: The second configuration parameter is the `<category_id>` field. When the category
    ID is set on this block, the `$this->getLoadedProductCollection()` function will
    return the products of the given category ID, which is just the thing we need
    for this case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom configuration parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The widget is created. It shows up in the frontend and the right products are
    shown for the given category ID.
  prefs: []
  type: TYPE_NORMAL
- en: To configure the category ID, we have to copy it from the category page and
    paste it in the textbox. For better usability, we will create a custom widget
    in the configuration field where we can select a category from a pop-up window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare yourselves, look at how you can configure the category for the **Catalog
    Category Link** widget in the backend. We will configure the same pop-up window
    for the widget that we created in previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to and you can create a custom configuration parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: When we look at the **Catalog Category Link** widget, we see that they use a
    custom widget to select the category—we will do the same for our module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `widget.xml` file, replace the `<category_id>` configuration parameter
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload the widget configuration page. You will see something
    like the following screenshot when you click on the configuration parameter button:![How
    to do it...](img/3329OS_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you select a category, save the widget, clear the cache, and reload the
    home page, and you will see that the widget shows the wrong products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you inspect the **Select Category …** button and navigate to the hidden
    field that is some elements above, you will see that the value is similar to `category/<category_id>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The widget requires the category ID, that is, the number after the slash. We
    now have the category path that is used to generate URLs. To fix this problem,
    we can perform the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the ID from the path with string functions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure a proper ID is set in the widget configuration page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will adapt the second method because it is the most stable way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To fix the issue, we have to update some code in the category widget chooser
    that is shown in the widget configuration page. We will create a new class that
    extends the current widget chooser. We will add the class to the `Widget` folder
    under `app/code/local/Packt/Productslider/Block/Adminhtml/Category`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this folder, create a file called `Chooser.php` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the previous step, we created a new block class to handle the return value
    of the chosen category. In this step, we will configure the configuration page
    to use the new block. In the `widget.xml` file of the module, change the tag `parameters/category_id/helper_block/type`
    from `adminhtml/catalog_category_widget_chooser` to `productslider/adminhtml_catalog_category_widget_chooser`.
    The `widget.xml` file will now appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a custom controller action to handle the AJAX call of the pop-up window.
    To initialize admin controllers for the module, add the following code to the
    `config.xml` file of the module. Paste it as a child of the `<config>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Category` folder under `app/code/local/Packt/Productslider/Adminhtml/Productslider/Catalog`,
    create a `WidgetController.php` file with the following content in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and load the configuration page. Select a category in the pop-up
    window and inspect the hidden field as we did in step 5\. You will see that the
    category ID is set as a number instead of a path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the widget, clear the cache, and reload the home page. You will see that
    the right products of the configured category are shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a custom configuration parameter. We did this for
    a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: First, we configured an existing configuration widget to show a category pop-up
    window when clicking on the field. This was not so difficult because the only
    workload is to configure the right settings in the `widget.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: But this widget was not exactly what we were looking for. The frontend representation
    was OK, but in the background, a wrongly formatted category ID was returned.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this, we created a custom configuration field that extends the previous
    configuration field. We only changed the required things to format the right output.
  prefs: []
  type: TYPE_NORMAL
- en: Because the widget is working with an AJAX call, we had to create a custom controller
    that extends the standard one to show the right block. In that controller, we
    included the relative path of the parent controller because this class is not
    in the autoloader of Magento.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We configured the widget parameter in this recipe to show how to create a custom
    HTML output for a configuration field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, you can do the most impossible things with a configuration field;
    however, the only thing you need to know is that you have to set the configuration
    value in an input field that has the naming convention: `<input name="parameter[<parameter_name>]"
    />`.'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the `<parameter_name>` tag with the name of your custom parameter and
    the form will handle your configuration parameter just as it handles all the others.
  prefs: []
  type: TYPE_NORMAL
- en: Finalizing the theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The widget we made in the frontend does not invite us to buy some products.
    It is just a list with the names of the products from a category.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will finalize the theming of the widget. We will create an
    HTML output that shows an image, name, and price of the given products.
  prefs: []
  type: TYPE_NORMAL
- en: With a jQuery plugin, we will convert the HTML output to a slider so we can
    scroll through the products.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Search for a good jQuery carousel on the Internet. In this recipe, we will use
    [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe the last set of actions to complete the widget:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s generate a good HTML that is usable for the jQuery plugin. Add the following
    code to the `list.phtml` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file to set the required styling. Add a `productslider.css` file
    to the `css` folder under `skin/frontend/base/default` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the CSS file to the Magento head by adding the following code. With this
    code, the CSS file is only added when the widget is configured on a page. `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php`
    in the `_prepareLayout()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all the files, clear the cache, and reload the frontend. You will see a
    styled output that we can use to convert to a slider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to add a jQuery carousel script to the product list. We will
    use the script [http://caroufredsel.dev7studios.com/](http://caroufredsel.dev7studios.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the source files, unzip it, and paste the folder and content to the
    folder `skin/frontend/base/default/js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Link the CSS and JavaScript files by updating the `_prepareLayout()` function
    in the `app/code/local/Packt/Productslider/Block/Catalog/Product/List.php` file.
    Replace the function with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure jQuery is enabled in your theme. You can find instructions on it in
    [Chapter 2](ch02.html "Chapter 2. Theming"), *Theming*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step is to initialize the script for the product list element. Add
    the following JavaScript code at the bottom of the `list.phtml` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and reload the frontend. You''re done and the output will be
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the initial steps, we created a good HTML output for the template. This output
    generates a scaled image, title, and price for every product in the loop.
  prefs: []
  type: TYPE_NORMAL
- en: To theme the HTML output, we used a CSS file that will only be included when
    a widget is configured for the given page. The function `_prepareLayout()` is
    called when all blocks are initialized. In this function, we add a CSS file and
    later a JavaScript file to the head of the website.
  prefs: []
  type: TYPE_NORMAL
- en: To show the product slider with animations, we added some JavaScript code that
    adds the slider to the product list.
  prefs: []
  type: TYPE_NORMAL
