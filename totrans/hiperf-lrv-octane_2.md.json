["```php\ncomposer global require laravel/installer\n```", "```php\nexport PATH=$PATH:~/.composer/vendor/bin/\n```", "```php\nsource ~/.zshrc\n```", "```php\nlaravel -V\n```", "```php\nls -l ~/.composer/vendor/bin/laravel\n```", "```php\nchmod u+x ~/.composer/vendor/bin/laravel\n```", "```php\nlaravel new octane-ch2\n```", "```php\ncomposer create-project laravel/laravel octane-ch2\n```", "```php\nphp artisan serve\n```", "```php\ncomposer require spiral/roadrunner:v2.0 nyholm/psr7\n```", "```php\n        \"nyholm/psr7\": \"^1.5\",\n        \"spiral/roadrunner\": \"v2.0\"\n```", "```php\nls -l vendor/bin/rr\n```", "```php\nvendor/bin/rr get-binary\n```", "```php\nversion: '2.7'\nserver:\n  command: \"php test-rr.php\"\nhttp:\n  address: \"0.0.0.0:8080\"\n  pool:\n    num_workers: 2\nlogs:\n  level: info\n```", "```php\n<?php\ninclude 'vendor/autoload.php';\nuse Nyholm\\Psr7;\nuse Spiral\\RoadRunner;\n$worker = RoadRunner\\Worker::create();\n$psrFactory = new Psr7\\Factory\\Psr17Factory();\n$worker = new RoadRunner\\Http\\PSR7Worker($worker, $psrFactory, $psrFactory, $psrFactory);\n// creating a unique identifier specific for the worker\n$id = uniqid('', true);\necho \"STARTING ${id}\";\nwhile ($req = $worker->waitRequest()) {\n    try {\n        $rsp = new Psr7\\Response();\n        $rsp->getBody()->write(\"Hello ${id}\");\n        echo \"RESPONSE SENT from ${id}\";\n        $worker->respond($rsp);\n    } catch (\\Throwable $e) {\n        $worker->getWorker()->error((string) $e);\n        echo 'ERROR ' . $e->getMessage();\n    }\n}\n```", "```php\n./rr serve\n```", "```php\ncurl localhost:8080\n```", "```php\n# installing Laravel application\nlaravel new octane-ch2b\n# entering into the directory\ncd octane-ch2b\n# installing RoadRunner CLI\ncomposer require spiral/roadrunner:v2.0 nyholm/psr7\n# Obtaining Roadrunner Application Server executable, via CLI\nvendor/bin/rr get-binary\n```", "```php\ncomposer require laravel/octane\n```", "```php\nphp artisan octane:install\n```", "```php\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Octane Server\n    |--------------------------------------------------------------------------\n    |\n    | This value determines the default \"server\" that will\n      be used by Octane\n    | when starting, restarting, or stopping your server\n      via the CLI. You\n    | are free to change this to the supported server of\n      your choosing.\n    |\n    | Supported: \"roadrunner\", \"swoole\"\n    |\n    */\n    'server' => env('OCTANE_SERVER', 'roadrunner'),\n```", "```php\nphp artisan octane:start\n```", "```php\nphp artisan octane:start --workers=2\n```", "```php\ncurl localhost:8000\n```", "```php\n  200    GET / .................................. 76.60 ms\n  200    GET / .................................. 60.39 ms\n  200    GET / ................................... 3.46 ms\n  200    GET / ................................... 2.70 ms\n  200    GET / ................................... 2.66 ms\n  200    GET / ................................... 3.66 ms\n```", "```php\nphp artisan octane:start --workers=2 --max-requests=3\n```", "```php\n  200    GET / .................................. 86.56 ms\n  200    GET / .................................. 52.30 ms\n  200    GET / ................................... 2.38 ms\n  200    GET / ................................... 2.73 ms\n  200    GET / ................................... 2.57 ms\nworker stopped\n  200    GET / ................................... 2.75 ms\nworker stopped\n  200    GET / .................................. 63.95 ms\n  200    GET / .................................. 60.83 ms\n  200    GET / ................................... 1.75 ms\n  200    GET / ................................... 2.74 ms\n```", "```php\n$server = tap(new Process(array_filter([\n    $roadRunnerBinary,\n    '-c', $this->configPath(),\n    '-o', 'version=2.7',\n    '-o', 'http.address='.$this->option('host').':\n      '.$this->option('port'),\n    '-o', 'server.command='.(new PhpExecutableFinder)-\n     >find().' '.base_path(config('octane.roadrunner\n     .command', 'vendor/bin/roadrunner-worker')),\n    '-o', 'http.pool.num_workers='.$this->workerCount(),\n    '-o', 'http.pool.max_jobs='.$this->option(\n      'max-requests'),\n    '-o', 'rpc.listen=tcp://'.$this->option('host').':\n     '.$this->rpcPort(),\n    '-o', 'http.pool.supervisor.exec_ttl='\n     .$this->maxExecutionTime(),\n    '-o', 'http.static.dir='.base_path('public'),\n    '-o', 'http.middleware='.config(\n     'octane.roadrunner.http_middleware', 'static'),\n    '-o', 'logs.mode=production',\n    '-o', app()->environment('local') ? 'logs.level=debug'\n     : 'logs.level=warn',\n    '-o', 'logs.output=stdout',\n    '-o', 'logs.encoding=json',\n    'serve',\n]), base_path(), [\n    'APP_ENV' => app()->environment(),\n    'APP_BASE_PATH' => base_path(),\n    'LARAVEL_OCTANE' => 1,\n]))->start();\n```", "```php\nversion: \"2.7\"\nhttp:\n  # host and port separated by semicolon\n  address: 127.0.0.1:8000\n  ssl:\n    # host and port separated by semicolon (default :443)\n    address: :8893\n    redirect: false\n    # Path to the cert file. This option is required for\n    # SSL working.\n    # This option is required.\n    cert: \"./localhost.pem\"\n    # Path to the cert key file.\n    # This option is required.\n    key: \"./localhost-key.pem\"\n    # Path to the root certificate authority file.\n    # This option is optional.\n    root_ca: \"/Users/roberto/Library/Application\\\n              Support/mkcert/rootCA.pem\"\n```", "```php\nbrew install mkcert\nmkcert -install\nmkcert localhost\n```", "```php\nchoco install mkcert\n```", "```php\nmkcert -CAROOT\n```", "```php\nls \"$(mkcert -CAROOT)\"\n```", "```php\nphp artisan octane:start\n```"]