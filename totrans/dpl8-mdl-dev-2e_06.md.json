["```php\n\\Drupal::state()->set('my_unique_key_name', 'value'); \n```", "```php\n$value = \\Drupal::state()->get('my_unique_key_name');\n```", "```php\n\\Drupal::state()->setMultiple(['my_unique_key_one' => 'value', 'my_unique_key_two' => 'value']);\n$values = \\Drupal::state()->getMultiple(['my_unique_key_one', 'my_unique_key_two']);\n```", "```php\n\\Drupal::state()->delete('my_unique_key_name');\n\\Drupal::state()->deleteMultiple(['my_unique_key_one', 'my_unique_key_two']);\n```", "```php\n/** @var \\Drupal\\Core\\TempStore\\PrivateTempStoreFactory $factory */\n$factory = \\Drupal::service('user.private_tempstore');\n$store = $factory->get('my_module.my_collection');\n$store->set('my_key', 'my_value');\n$value = $store->get('my_key');\n```", "```php\n$store->delete('my_key'); \n```", "```php\n$metadata = $store->getMetadata('my_key'); \n```", "```php\n/** @var \\Drupal\\Core\\TempStore\\SharedTempStoreFactory $factory */\n$factory = \\Drupal::service('user.shared_tempstore');\n$store = $factory->get('my_module.my_collection');\n```", "```php\n$store->set('my_key', 'my_value');\n$value = $store->get('my_key');\n```", "```php\n$metadata = $store->getMetadata('my_key'); \n```", "```php\n$store->delete('my_key'); \n```", "```php\n$store->setIfNotExists('my_key', 'my_value'); \n```", "```php\n$store->setIfOwner('my_key', 'my_value'); \n```", "```php\n/** @var \\Drupal\\user\\UsedDataInterface $userData */\n$userData = \\Drupal::service('user.data');\n```", "```php\ndrush config-export\n```", "```php\ndrush config-import\n```", "```php\nmy_string: 'Hello!'\n  my_int: 10\n  my_boolean: true\n  my_array:\n    my_deep_string: 'Yes, hello!'\n```", "```php\ndependencies:\n  module:\n    - views\n  theme:\n    - bootstrap\n  config:\n    - system.site\n```", "```php\nsalutation: 'Whatever the user set in the form' \n```", "```php\ninterface:\n  default: 'php_mail'\n```", "```php\nsystem.mail:\n  type: config_object\n  label: 'Mail system'\n  mapping:\n   interface:\n     type: sequence\n     label: 'Interfaces'\n     sequence:\n       type: string\n       label: 'Interface'\n```", "```php\nmy_string: 'Hello!'\nmy_int: 10\nmy_boolean: true\nmy_array:\n  my_deep_text: 'Yes, hello, is anybody there?!'\n```", "```php\nmy_module.settings:\n  type: config_object\n  label: 'Module settings'\n  mapping:\n     my_string:\n       type: string\n       label: 'My string that can also be of type text if it was longer'\n     my_boolean:\n       type: boolean\n       label: 'My boolean'\n     my_array:\n        type: mapping\n        label: 'My array in which the keys are also important, hence not a sequence'\n        mapping:\n          my_deep_text:\n            type: text\n            label: 'My hello string'\n```", "```php\nlangcode:\n  type: string\n  label: 'Language code'\n```", "```php\nhello_world.custom_salutation:\n  type: config_object\n  label: 'Salutation settings'\n  mapping:\n   salutation:\n     type: string\n     label: 'The salutation message'\n```", "```php\nglobal $config;\n$config['system.maintenance']['message'] = 'Our own message for the site maintenance mode';\n```", "```php\nnamespace Drupal\\hello_world;\n\nuse Drupal\\Core\\Cache\\CacheableMetadata;\nuse Drupal\\Core\\Config\\ConfigFactoryOverrideInterface;\nuse Drupal\\Core\\Config\\StorageInterface;\n\n/**\n * Overrides configuration for the Hello World module.\n */\nclass HelloWorldConfigOverrides implements ConfigFactoryOverrideInterface {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function loadOverrides($names) {\n    $overrides = [];\n    if (in_array('system.maintenance', $names)) {\n      $overrides['system.maintenance'] = ['message' => 'Our own message for the site maintenance mode.'];\n    }\n\n    return $overrides;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function getCacheSuffix() {\n    return 'HelloWorldConfigOverrider';\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function createConfigObject($name, $collection = StorageInterface::DEFAULT_COLLECTION) {\n    return NULL;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function getCacheableMetadata($name) {\n    return new CacheableMetadata();\n  }\n}\n```", "```php\n hello_world.config_overrider:\n   class: \\Drupal\\hello_world\\HelloWorldConfigOverrides\n   tags:\n     - {name: config.factory.override, priority: 5}\n```", "```php\n$language_manager = \\Drupal::service('language_manager');\n$language = $language_manager->getLanguage('fr');\n$original_language = $language_manager->getConfigOverrideLanguage();\n$language_manager->setConfigOverrideLanguage($language);\n$config = \\Drupal::config('system.maintenance');\n$message = $config->get('message');\n$language_manager->setConfigOverrideLanguage($original_language);\n```", "```php\n/** @var \\Drupal\\Core\\Config\\ConfigFactoryInterface $factory */\n$factory = \\Drupal::service('config.factory');\n$read_only_config = $factory->get('hello_world.custom_salutation');\n$read_and_write_config = $factory->getEditable('hello_world.custom_salutation');\n```", "```php\n$read_and_write_config->set('salutation', 'Another salutation');\n$read_and_write_config->save();\n```", "```php\n$value = $read_and_write_config->get('salutation'); \n```", "```php\n$config = $factory->get('system.site');\n$value = $config->get('page.403');\n```", "```php\n$config = $factory->get('system.maintenance');\n$value = $config->getOriginal('message', FALSE);\n```", "```php\n$config->clear('message')->save();\n```", "```php\n$config->delete(); \n```", "```php\n  *   id = \"node\",\n  *   label = @Translation(\"Content\"),\n  *   label_singular = @Translation(\"content item\"),\n  *   label_plural = @Translation(\"content items\"),\n  *   label_count = @PluralTranslation(\n  *     singular = \"@count content item\",\n  *     plural = \"@count content items\"\n  *   ),\n```", "```php\nbundle_label = @Translation(\"Content type\"), \n```", "```php\nbundle_entity_type = \"node_type\", \n```", "```php\nfield_ui_base_route = \"entity.node_type.edit_form\",\n```", "```php\nbase_table = \"node\",\ndata_table = \"node_field_data\",\n```", "```php\n*   entity_keys = { \n*     \"id\" = \"nid\", \n*     \"revision\" = \"vid\", \n*     \"bundle\" = \"type\", \n*     \"label\" = \"title\", \n*     \"langcode\" = \"langcode\", \n*     \"uuid\" = \"uuid\", \n*     \"status\" = \"status\", \n*     \"published\" = \"status\", \n*     \"uid\" = \"uid\", \n*     \"owner\" = \"uid\", \n*   }, \n\n```", "```php\n*   links = { \n*     \"canonical\" = \"/node/{node}\", \n*     \"delete-form\" = \"/node/{node}/delete\", \n*     \"delete-multiple-form\" = \"/admin/content/node/delete\", \n*     \"edit-form\" = \"/node/{node}/edit\", \n*     \"version-history\" = \"/node/{node}/revisions\", \n*     \"revision\" = \"/node/{node}/revisions/{node_revision}/view\", \n*     \"create\" = \"/node\", \n*   } \n```", "```php\ntranslatable = TRUE, \n```", "```php\nrevision_table = \"node_revision\",\nrevision_data_table = \"node_field_revision\",\n```", "```php\n*   entity_keys = { \n*     \"revision\" = \"vid\", \n*     \"published\" = \"status\", \n*   }, \n```", "```php\n*   revision_metadata_keys = { \n*     \"revision_user\" = \"revision_uid\", \n*     \"revision_created\" = \"revision_timestamp\", \n*     \"revision_log_message\" = \"revision_log\" \n*   },   \n```", "```php\n*   config_export = {\n*     \"name\",\n*     \"type\",\n*     \"description\",\n*     \"help\",\n*     \"new_revision\",\n*     \"preview_mode\",\n*     \"display_submitted\",\n*   }\n```", "```php\nconfig_prefix = \"type\", \n```", "```php\n*   handlers = { \n*     \"storage\" = \"Drupal\\node\\NodeStorage\", \n*     \"storage_schema\" = \"Drupal\\node\\NodeStorageSchema\", \n*     \"view_builder\" = \"Drupal\\node\\NodeViewBuilder\", \n*     \"access\" = \"Drupal\\node\\NodeAccessControlHandler\", \n*     \"views_data\" = \"Drupal\\node\\NodeViewsData\", \n*     \"form\" = { \n*       \"default\" = \"Drupal\\node\\NodeForm\", \n*       \"delete\" = \"Drupal\\node\\Form\\NodeDeleteForm\", \n*       \"edit\" = \"Drupal\\node\\NodeForm\", \n*       \"delete-multiple-confirm\" = \"Drupal\\node\\Form\\DeleteMultiple\" \n*     }, \n*     \"route_provider\" = { \n*       \"html\" = \"Drupal\\node\\Entity\\NodeRouteProvider\", \n*     }, \n*     \"list_builder\" = \"Drupal\\node\\NodeListBuilder\", \n*     \"translation\" = \"Drupal\\node\\NodeTranslationHandler\" \n*   }, \n```", "```php\nnode.type.*:\n  type: config_entity\n  label: 'Content type'\n  mapping:\n   name:\n     type: label\n     label: 'Name'\n   type:\n     type: string\n     label: 'Machine-readable name'\n   ....\n   new_revision:\n     type: boolean\n     label: 'Whether a new revision should be created by default'\n   ...\n```", "```php\n$fields['title'] = BaseFieldDefinition::create('string')\n  ->setLabel(t('Title'))\n  ->setRequired(TRUE)\n  ->setTranslatable(TRUE)\n  ->setRevisionable(TRUE)\n  ->setSetting('max_length', 255)\n  ->setDisplayOptions('view', [\n    'label' => 'hidden',\n    'type' => 'string',\n    'weight' => -5,\n  ])\n  ->setDisplayOptions('form', [\n    'type' => 'string_textfield',\n    'weight' => -5,\n  ])\n  ->setDisplayConfigurable('form', TRUE);\n```", "```php\n$definition = DataDefinition::create('string'); \n```", "```php\n$definition->setLabel('Defines a simple string');  \n```", "```php\n/** @var \\Drupal\\Core\\TypedData\\TypedDataInterface $data */\n$data = \\Drupal::typedDataManager()->create($definition, 'my_value');\n```", "```php\n$value = $data->getValue();\n$data->setValue('another string');\n$type = $data->getDataDefinition()->getDataType();\n$label = $data->getDataDefinition()->getLabel();\n```", "```php\n$plate_number_definition = DataDefinition::create('string');\n$plate_number_definition->setLabel('A license plate number.');\n```", "```php\n$state_code_definition = DataDefinition::create('string');\n$state_code_definition->setLabel('A state code');\n```", "```php\n$plate_definition = MapDataDefinition::create();\n$plate_definition->setLabel('A US license plate');\n```", "```php\n$plate_definition->setPropertyDefinition('number', $plate_number_definition);\n$plate_definition->setPropertyDefinition('state', $state_code_definition);\n```", "```php\n/** @var \\Drupal\\Core\\TypedData\\Plugin\\DataType\\Map $plate */\n$plate = \\Drupal::typedDataManager()->create($plate_definition, ['state' => 'NY', 'number' => '405-307']);\n```", "```php\n$label = $plate->getDataDefinition()->getLabel();\n$number = $plate->get('number');\n$state = $plate->get('state');\n```", "```php\n$state_code = $state->getValue(); \n```", "```php\n$query = \\Drupal::entityTypeManager()->getStorage('node')->getQuery(); \n```", "```php\n$query\n  ->condition('type', 'article')\n  ->condition('status', TRUE)\n  ->range(0, 10)\n  ->sort('created', 'DESC');\n$ids = $query->execute();\n```", "```php\n->condition('type', ['article', 'page'], 'IN') \n```", "```php\n$query\n   ->condition('status', TRUE);\n $or = $query->orConditionGroup()\n   ->condition('title', 'Drupal', 'CONTAINS')\n   ->condition('field_tags.entity.name', 'Drupal', 'CONTAINS');\n $query->condition($or);\n $ids = $query->execute();\n```", "```php\n$query = \\Drupal::entityTypeManager()->getStorage('view')->getQuery();\n$query\n  ->condition('display.*.display_plugin', 'page');\n$ids = $query->execute();\n```", "```php\n...\n base_field: nid\n core: 8.x\n display:\n   default:\n     display_options:\n       ...\n     display_plugin: default\n     display_title: Master\n    ...\n   page_1:\n     display_options:\n       ...\n     display_plugin: page\n     display_title: Page\n```", "```php\n$nodes = \\Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids); \n```", "```php\n$nodes = \\Drupal::entityTypeManager()->getStorage('node')->load($id); \n```", "```php\n$nodes = \\Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'article']); \n```", "```php\n/** @var \\Drupal\\node\\Entity\\NodeType $type */\n$type = \\Drupal::entityTypeManager()->getStorage('node_type')->load('article');\n```", "```php\n$description = $type->getDescription(); \n```", "```php\n$description = $type->get('description');\n```", "```php\n$id = $type->id();\n$label = $type->label();\n$uuid = $type->uuid();\n$bundle = $type->bundle();\n$language = $type->language();\n```", "```php\n$entity instanceof ContentEntityInterface\n$entity instanceof ConfigEntityInterface\n```", "```php\n$entity instanceof NodeInterface  \n```", "```php\n/** @var \\Drupal\\node\\NodeInterface $node */\n$node = Node::load(1);\n/** @var \\Drupal\\Core\\Field\\FieldItemListInterface $title */\n$title = $node->get('title');\n```", "```php\n$parent = $title->getParent();  \n```", "```php\n$definition = $title->getFieldDefinition();  \n```", "```php\n$item_definition = $title->getItemDefinition();  \n```", "```php\n$total = $title->count();\n$empty = $title->isEmpty();\n$exists = $title->offsetExists(1);\n```", "```php\n$value = $title->value; \n```", "```php\n$id = $field->target_id; \n```", "```php\n$entity = $field->entity; \n```", "```php\n$value = $title->getValue(); \n```", "```php\n$item = $title->get(0);\n$item = $title->offsetGet(0);\n```", "```php\n$value = $item->getValue(); \n```", "```php\n$data = $item->get('value');  \n```", "```php\n$value = $data->getValue();  \n```", "```php\n$title = $node->get('title')->value;\n$id = $node->get('field_referencing_some_entity')->target_id;\n$entity = $node->get('field_referencing_some_entity')->entity;\n```", "```php\n$names = $node->get('field_names')->getValue();\n$tags = $node->get('field_tags')->referencedEntities();\n```", "```php\n$node->set('title', 'new title');  \n```", "```php\n$node->get('title')->setValue('new title');\n```", "```php\n$values = $node->get('field_multiple')->getValue();\n$values[] = ['value' => 'extra value'];\n$node->set('field_multiple', $values);\n```", "```php\n$node->get('field_multiple')->get(1)->setValue('changed value');  \n```", "```php\n$node->get('field_test')->offsetExists(1);\n```", "```php\n$node->save();  \n```", "```php\n\\Drupal::entityTypeManager()->getStorage('node')->save($node);  \n```", "```php\n/** @var \\Drupal\\node\\Entity\\NodeType $type */\n$type = \\Drupal::entityTypeManager()->getStorage('node_type')->load('article');\n$type->set('name', 'News');\n$type->save();\n```", "```php\n$values = [\n  'type' => 'article',\n  'title' => 'My title'\n];\n/** @var \\Drupal\\node\\NodeInterface $node */\n$node = \\Drupal::entityTypeManager()->getStorage('node')->create($values);\n$node->set('field_custom', 'some text');\n$node->save();\n```", "```php\n/** @var \\Drupal\\node\\NodeViewBuilder $builder */\n$builder = \\Drupal::entityTypeManager()->getViewBuilder('node');\n```", "```php\n$build = $builder->view($node);  \n```", "```php\n$build = $builder->viewMultiple($node); \n```", "```php\n$build = $builder->view($node);\n$build['#theme'] = $build['#theme'] . '__my_suggestion';\n```", "```php\nfunction module_name_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) { \n  if ($entity->getEntityTypeId() == 'node' && $view_mode == 'full') { \n    $build['disclaimer'] = [ \n      '#markup' => t('The content provided is for general information purposes only.'), \n      '#weight' => 100 \n    ]; \n  } \n} \n```", "```php\n/** \n * Implements hook_entity_extra_field_info(). \n */ \nfunction module_name_entity_extra_field_info() { \n  $extra = []; \n\n  foreach (NodeType::loadMultiple() as $bundle) { \n    $extra['node'][$bundle->id()]['display']['disclaimer'] = [ \n      'label' => t('Disclaimer'), \n      'description' => t('A general disclaimer'), \n      'weight' => 100, \n      'visible' => TRUE, \n    ]; \n  } \n\n  return $extra; \n} \n```", "```php\n/** \n * Implements hook_ENTITY_TYPE_view(). \n */ \nfunction module_name_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) { \n  if ($display->getComponent('disclaimer')) { \n    $build['disclaimer'] = [ \n      '#markup' => t('The content provided is for general information purposes only.'), \n    ]; \n  } \n} \n```", "```php\n$definition = DataDefinition::create('string');\n$definition->addConstraint('Length', ['max' => 20]);\n```", "```php\n/** @var \\Drupal\\Core\\TypedData\\TypedDataInterface $data */\n$data = \\Drupal::typedDataManager()->create($definition, 'my value that is too long');\n$violations = $data->validate();\n```", "```php\n/** @var \\Symfony\\Component\\Validator\\ConstraintViolationInterface $violation */\nforeach ($violations as $violation) {\n  $message = $violation->getMessage();\n  $value = $violation->getInvalidValue();\n  $path = $violation->getPropertyPath();\n}\n```", "```php\n$state_code_definition = DataDefinition::create('string');\n$state_code_definition->addConstraint('Length', array('max' => 2));\n// The rest of the set up code we saw earlier.\n\n/** @var Map $plate */\n$plate = \\Drupal::typedDataManager()->create($plate_definition, ['state' => 'NYC', 'number' => '405-307']);\n$violations = $plate->validate();\n```", "```php\n*    constraints = {\n*     \"CommentName\" = {}\n*   }\n```", "```php\nfunction my_module_entity_type_alter(array &$entity_types) {\n  $node = $entity_types['node'];\n  $node->addConstraint('ConstraintPluginID', ['option']);\n}\n```", "```php\nfunction my_module_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {\n  if ($entity_type->id() === 'node') {\n    $nid = $fields['nid'];\n    $nid->addPropertyConstraints('value', ['Range' => ['mn' => 5, 'max' => 10]]);\n  }\n}\n```", "```php\n$nid = $node->get('nid');\n$constraints = $nid->getConstraints();\n$item_constraints = $nid->getItemDefinition()->getConstraints();\n```", "```php\n$node_violations = $node->validate(); \n$nid = $node->get('nid');\n$nid_list_violations = $nid->validate();\n$nid_item_violations = $nid->get(0)->validate();\n```", "```php\nnid.0.value\n0.value\nvalue\n```", "```php\n$config_entity = View::load('content'); \n$config_entity->set('status', 'not a boolean'); \n$typed_config_entity = ConfigEntityAdapter::createFromEntity($config_entity); \n$violations = $typed_config_entity->validate(); \n```"]