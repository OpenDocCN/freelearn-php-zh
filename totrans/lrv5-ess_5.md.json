["```php\nclass Helper {public static function sum($arr) { return array_sum($arr); }}\n```", "```php\nclass HelperTest extends PHPUnit_Framework_TestCase {\n  public function testSum() {\n $data = [1,2,3];                   // 1) Arrange\n $result = Helper::sum($data);      // 2) Act\n $this->assertEquals(6, $result);   // 3) Assert\n  }\n  public function testSomethingElse() {\n    // ...\n  }\n}\n```", "```php\n$ phpunit --colors HelperTest.php\n\n```", "```php\nuse Illuminate\\Support\\Str;\nclass SupportStrTest extends PHPUnit_Framework_TestCase {\n  // ...\n  public function testIs()\n  {\n    $this->assertTrue(Str::is('/', '/'));\n    $this->assertFalse(Str::is('/', ' /'));\n    $this->assertFalse(Str::is('/', '/a'));\n    $this->assertTrue(Str::is('foo/*', 'foo/bar/baz'));\n    $this->assertTrue(Str::is('*/foo', 'blah/baz/foo'));\n  }\n}\n```", "```php\n/**\n * @expectedException Illuminate\\Database\\Eloquent\\MassAssignmentException\n */\npublic function testGlobalGuarded()\n{\n  $model = new EloquentModelStub;\n  $model->guard(['*']);\n  $model->fill(['name' => 'foo', 'age' => 'bar', 'votes' => 'baz']);\n}\n```", "```php\nuse Mockery as M;\n\nclass AuthEloquentUserProviderTest extends PHPUnit_Framework_TestCase {\n\n  public function tearDown(){\n    M::close();\n  }\n  // ...\n\n  public function getProviderMock() {\n    $hasher = m::mock('Illuminate\\Contracts\\Hashing\\Hasher');\n    return $this->getMock('Illuminate\\Auth\\EloquentUserProvider', array('createModel'), array($hasher, 'foo'));\n  }\n}\n```", "```php\n$ phpunit\n\n```", "```php\n$ vendor/bin/phpunit\n\n```", "```php\n  public function testHomePageRedirection() {\n    $this->call('GET', '/');\n    $this->assertRedirectedTo('cats');\n  }\n```", "```php\n  public function testGuestIsRedirected() {\n    $this->call('GET', '/cats/create');\n    $this->assertRedirectedTo('login');\n  }'\n```", "```php\n  public function testLoggedInUserCanCreateCat() {\n    $user = new App\\User([\n      'name' => 'John Doe',\n      'is_admin' => false,\n    ]);\n    $this->be($user);\n    $this->call('GET', '/cats/create');\n    $this->assertResponseOk();\n  }\n\n```", "```php\n  public function setUp(){\n    parent::setUp();\n    Artisan::call('migrate');\n    $this->seed();\n  }\n```", "```php\n'sqlite' => [\n  'driver'   => 'sqlite',\n  'database' => ':memory:',\n],\n```", "```php\nclass CatsTableSeeder extends Seeder {\n  public function run(){\n    Cat::create(['id' => 1, 'name' => '''Tom', 'user_id' => 1]);\n  }\n}\n```", "```php\npublic function testOwnerCanDeleteCat() {\n  $user = new App\\User(['id' => 1, 'name' => 'User #1',\n    'is_admin' => false]);\n  $this->be($user);\n  $this->call('DELETE', '/cats/1');\n  $this->assertRedirectedTo('/cats');\n  $this->assertSessionHas('message');\n}\n\n```", "```php\npublic function testNonAdminCannotEditCat() {\n  $user = new App\\User(['id' => 2, 'name' => 'User #2',\n    'is_admin' => false]);\n  $this->be($user);\n  $this->call('DELETE', '/cats/1');\n  $this->assertRedirectedTo('/cats/1');\n  $this->assertSessionHas('error');\n}\n\n```", "```php\npublic function testAdminCanEditCat() {\n  $user = new App\\User(['id' => 3, 'name' => 'Admin',\n    'is_admin' => true));\n  $this->be($user);\n  $newName = 'Berlioz';\n  $this->call('PUT', '/cats/1', ['name' => $newName]);\n $crawler = $this->client->request('GET', '/cats/1');\n $this->assertCount(1, $crawler->filter('h2:contains(\"'.$newName.'\")'));\n}\n```"]