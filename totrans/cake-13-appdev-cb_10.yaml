- en: Chapter 10. Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the test framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating fixtures and testing model methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing controller actions and their views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mocks to test controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers one of the most interesting areas of application programming:
    unit testing through CakePHP''s built-in tools, which offers a complete and powerful
    unit testing framework.'
  prefs: []
  type: TYPE_NORMAL
- en: The first recipe shows how to set up the test framework so that we can create
    our own test cases. The second recipe shows how to create test data (fixtures)
    and use that data to test model methods. The third and fourth recipes show how
    to test controller actions, and how to test that our views are showing what we
    expect. The last recipe shows how to run the test in a non-ordinary fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the test framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to prepare our CakePHP application with all
    the elements needed to create our own unit tests, setting up the foundation for
    the rest of the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To go through the recipes included in this chapter, we need some data to work
    with. Create the following tables by issuing these SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a controller in a file named `articles_controller.php` and place it
    in your `app/controllers` folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `article.php` and place it in your `app/models` folder,
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file named `vote.php` and place it in your `app/models` folder with
    the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a folder named `articles` and place it in your `app/views` folder. Create
    a file named `view.ctp` and place it in your `app/views/articles` folder, with
    the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the 1.0.1 SimpleTest release from [https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download](http://https://sourceforge.net/projects/simpletest/files/simpletest/simpletest_1.0.1/simpletest_1.0.1.tar.gz/download).
    Uncompress the downloaded file into your `app/vendors` folder. You should now
    have a folder named `simpletest` in `app/vendors`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you now browse to `http://localhost/test.php`, you should see the list of
    test groups available in CakePHP as shown in the next screenshot:![How to do it...](img/1926OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on any of these groups would execute the appropriate unit tests. For
    example, if you click on the **acl** test group, you should see a green bar indicating
    that all tests for the selected group succeeded, as shown in the next screenshot:![How
    to do it...](img/1926OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CakePHP uses the SimpleTest library as the backbone of its unit testing framework.
    Unless we have installed SimpleTest on our application, we will be unable to run
    any unit test. Installing the library is as simple as downloading the appropriate
    version and extracting its contents into our `app/vendors` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The framework includes a broad set of unit tests that cover almost every functionality
    implemented in the core. These unit tests allow the developer to report bugs against
    core functionality, have them solved, and make sure those bugs do not reappear
    in future releases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating fixtures and testing model methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create test data that we can use to test
    our application without altering real data, and how to create our own unit tests
    to cover model functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, we need a basic application skeleton to work with
    and have the SimpleTest library installed. Go through the entire recipe, *Setting
    up the test framework*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a file named `article_fixture.php` and place it in your `app/tests/fixtures`
    folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `user_fixture.php` and place it in your `app/tests/fixtures`
    folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `vote_fixture.php` and place it in your `app/tests/fixtures`
    folder, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `article.test.php` and place it in your `app/tests/cases/models`
    folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When looking to test model methods, it is very important to know what data is
    used during testing. Even when it is perfectly possible to test models using real
    application data, it is often safer (and thus recommendable) to specify the data
    that will be used for testing. This way, any modification to real data should
    not affect our tests, and consequently running those tests should not affect real
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this very purpose, CakePHP offers the concept of fixtures, which are no
    more than PHP classes that define the table structure and data used for testing
    models. These fixtures should have the same name as the model they are providing
    data for, should extend the base class `CakeTestFixture`, and should end with
    the word `Fixture`. The file name should be the underscored version of the class
    name, and should be placed in the `app/tests/fixtures` directory. A fixture may
    define the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The name of the fixture, used to determine the name of the table this
    fixture creates. If the table name can be determined by other means, such as by
    setting the `table` property, or by importing the structure from a model, then
    this property is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table`: The table this fixture creates. If the fixture imports the structure
    from an existing model, or if the `name` property is specified, then this property
    is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`import`: This property is optional and allows the structure, and/or data,
    to be imported from an existing source. If this property is set to a string, then
    it is a model name from where to import the structure (not the records.) Otherwise,
    it should be an array that consists of the following settings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`records`: An optional Boolean setting. If set to `true`, then all records
    will be imported from the specified source. Defaults to `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: The model from where to import the structure, and/or data. If specified,
    this model must exist.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table`: The table from where to import the structure, and/or data. If the
    `model` setting is specified, this setting is ignored and thus is optional.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`: If `import` is not defined, then this property is mandatory. It should
    be an array where each key is a field name, and each value the definition of the
    field, containing settings such as: `type, length, null, default`, and `key`.
    For more information about these settings, see [http://book.cakephp.org/view/1203/Creating-fixtures](http://book.cakephp.org/view/1203/Creating-fixtures).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`records`: An array of records, each record itself being an array where the
    keys are the field names, and the values their respective values.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start by creating the following fixtures:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ArticleFixture`: It imports its structure from the `Article` model, and defines
    two records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserFixture`: It imports its structure from the `users` table and defines
    three records (Notice how we import from a table instead of a model, as we did
    not create a `User` model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VoteFixture`: It imports its structure from the `Vote` model, and defines
    five records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After creating the fixtures, we proceed to build the test case. A test case
    is a PHP class without naming restrictions that contains unit tests. It extends
    from `CakeTestCase`, and is saved in a file ending with the suffix `.test.php`
    and placed in an appropriate subdirectory of the `app/tests/cases` folder. A unit
    test is a method of a test case class, but only methods with names starting with
    the word `test` are considered unit tests and thus run when the test case is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Our test case is named `ArticleTestCase`, and defines the `fixtures` property
    to specify which fixtures are utilized by the test case. These names should match
    the fixture file name, without the `_fixture.php` suffix. By means of these fixtures,
    we provide test data for the models used throughout our test case.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you instantiate models from a unit test, and unless you specify otherwise
    through settings sent to the `ClassRegistry::init()` method, CakePHP will automatically
    set the model's database configuration to be `test_suite`, not only for the directly
    instantiated models, but for any models instantiated as a result of a binding
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: The `test_suite` database configuration, unless specifically changed by the
    developer, will use the same database configuration as defined in the `default`
    configuration, and will also set `test_suite_` as a table prefix to avoid overwriting
    existing tables. This means that any models that are instantiated, together with
    their bindings (including bindings of bindings, and so on) should have a matching
    fixture, and those fixtures should be added to the test case. If you want to avoid
    defining fixtures for models you do not intend to test, see the section *Extending
    models to avoid testing unneeded bindings* in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first two methods in `ArticleTestCase` are implementations of callbacks
    offered by the parent class `CakeTestCase`. There are four callbacks available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`startCase()`: It executed before the first unit test method is run. This method
    is executed once per test case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endCase()`: It executed after the last unit test method was run. This method
    is executed once per test case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`startTest()`: It executed before each unit test method is run. It receives
    a single argument, which is the name of the test method that is about to be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endTest()`: It executed after each unit test method was run. It receives a
    single argument, which is the name of the test method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `startTest()` callback to instantiate the model we intend to test
    (Article in this case), and the `endTest()` callback to clean up the registry,
    a step that is not needed for this particular test case but that serves useful
    in many other scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define two unit test methods: `testGet()` and `testVote()`. The first
    one is meant to provide testing for the `Article::get()` method, while the later
    tests the creation of votes through the `Article::vote()` method. In these tests,
    we issue different calls to the model method we are testing, and then use some
    of the test case assertion methods to evaluate these calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertTrue()`: Asserts that the provided argument evaluates to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertFalse()`: Asserts that the provided argument evaluates to `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertEqual()`: Asserts that the first argument is equal to the second argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expectException()`: Expects the next call to produce an exception. Because
    of the way exceptions are handled, this assertion should be made last in the test
    method, as any code within that unit test method that should be executed after
    the exception is thrown will be ignored. Another approach to avoid this limitation
    is to use a try-catch block, and manually issue a call to the `fail()` or `pass()`
    method as a result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are other assertion methods that are useful in other scenarios, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertIsA()`: Asserts that the first argument is an object of the type provided
    in the second argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNull()`: Asserts that the provided argument is `null`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertPattern()`: Asserts that the second argument matches the regular expression
    pattern defined in the first argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTags()`: Asserts that the first argument matches the HTML tags provided
    in the second argument, without consideration to the order of tag attributes.
    See recipe *Testing views* for an example use of this assertion method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe has shown us how to easily create fixtures. However, when there
    are lots of models in our application this can become quite a tedious task. Fortunately,
    CakePHP''s `bake` command offers a task to automatically create fixtures: `fixture`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It can run in interactive mode where its questions guide us through the steps
    required, or by using command line parameters. If we wanted to create a fixture
    for our `Article` model with up to two records, we would do:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a GNU Linux / Mac / Unix system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On Microsoft Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This would generate the `article_fixture.php` file in its correct location,
    with two sample records ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Extending models to avoid testing unneeded bindings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this recipe, we tested code that affects the `Article` and `Vote` models,
    but none of the functionality that was covered by these unit tests had to interact
    with the `User` model. Why did we then need to add the `user` fixture? Simply
    removing this fixture from the `fixtures` property will make CakePHP complain
    about a missing table (specifically, `test_suite_users`).
  prefs: []
  type: TYPE_NORMAL
- en: To avoid creating fixtures for models we are not testing, we can create modified
    versions of our model classes by extending them and re-defining their bindings,
    leaving in only those we intend to test. Let us modify our test case to avoid
    using the `user` fixture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the beginning of your `app/tests/cases/models/article.test.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'While still editing the `article.test.php file`, change the `fixtures` property
    of the `ArticleTestCase` class so that the user fixture is no longer loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, change the instantiation of the `Article` model so that it uses `TestArticle`
    instead, by making the following changes to the `startTest()` method of the `ArticleTestCase`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Analyzing code coverage
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you have **Xdebug** installed (information about it is available at [http://xdebug.org](http://xdebug.org))
    you can find out how much of your application code is covered by your unit tests.
    This information is a great tool for understanding which parts of your application
    need more testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have run a test case, you will notice a link entitled **Analyze Code
    Coverage**. After running our test case, click on this link. CakePHP will inform
    us that we have fully covered (**100%** coverage) our code. If you now comment
    out the unit test method called `testVote()`, and then run the code coverage analysis,
    you will notice that this number drops to **47.62%**, and CakePHP also shows us
    which part of our code has not been covered by unit tests, as shown in the next
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing code coverage](img/1926OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you achieve **100%** code coverage, you are not guaranteeing that your
    code is bug-free, but that all lines of your application code have been reached
    by at least one unit test.
  prefs: []
  type: TYPE_NORMAL
- en: The more code left out of the reach of unit tests, the more prone to bugs your
    application becomes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Testing controller actions and their views*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing controller actions and their views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to test controller actions and ensure that
    their views produce the result we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe we need a basic application skeleton to work with,
    and have the SimpleTest library installed. Go through the entire recipe *Setting
    up the test framework*.
  prefs: []
  type: TYPE_NORMAL
- en: We also need test data. Go through the creation of fixtures described in the
    recipe *Creating fixtures and testing model methods*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a file named `articles_controller.test.php` and place it in your `app/tests/cases/controllers`
    folder, with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/test.php`, click on the **Test Cases**
    option under the **App** section in the left menu, and then click on the **controllers
    / ArticlesController** test case, you should see our unit test succeeding, as
    shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating the test case in a class named `ArticlesControllerTestCase`,
    and save it in its proper location (`app/tests/cases/controllers`), using the
    right filename (`articles_controller.test.php`). In this class, we specify which
    fixtures we need to load, which, just as it was shown in the recipe *Creating
    fixtures and testing model methods*, consists of fixtures for all the loaded models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our test case includes a single unit test method: `testView(),` which intends
    to unit test the `ArticlesController::view()` action. In this unit test we use
    the `testAction()` method that is available to all test cases. This method takes
    two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`url`: This is either a string or an array containing the URL to the controller
    action we intend to test. If it is an array, it should be in the same format as
    the format used by CakePHP once a string-based URL has been parsed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters`: This is a set of optional parameters, which can be any of the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connection`: If `fixturize` is set to `true`, it defines the connection from
    where to import data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`: It is the data to post to the controller.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fixturize`: If this is set to `true`, then all data from the connection defined
    in the `connection` setting will be imported into fixtures for all the used models.
    Defaults to `false`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: This is the method to use when posting the data specified in the
    `data` setting. Can either be `get` or `post`. Defaults to `post`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return`: This specifies the type of result that should be returned as a result
    of a `testAction()` call. If it is set to `result`, which is the default, it will
    return whatever the controller action returns. If it is set to `vars`, it will
    return the view variables assigned from the action. If it is `view`, it will return
    the rendered view without the layout. Finally, if it is set to `contents`, it
    will return the rendered view within its layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testView()`: The `testView()` method calls the `view()` action with a proper
    ID, and tells the `testAction()` method to return the view variables created in
    the controller action. We make sure that this variable is set to the proper article
    information. We then finalize with a call to `testAction()`, using the same URL,
    but specifying that we want to obtain the rendered view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To assert that the view has the proper content, we use the `assertTags()` method,
    which offers a flexible way to check HTML tags. This method takes an array of
    elements, each element being either a string that represents a static string or
    a closing tag if the string starts with a forward slash, or an array, where the
    key is an HTML tag name, and the value is itself an array of attributes (keys
    being the attribute names, and values being their respective values).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen how, by using `testAction()`, we can easily test our controller
    actions and make assertions on either the action's return value, the view variables,
    or the view content. However, we have not covered how to test actions that might
    redirect the user away from the current action, or how to test for session operations.
    The next recipe shows how to add more complex tests to the unit tests we have
    just built.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using mocks to test controllers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mocks to test controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to extend what we have covered in the previous
    recipe by using mocks, an indispensable tool for building powerful test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, we need unit tests already in place. Go through the
    previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit your `app/tests/cases/controllers/articles_controller.test.php` file and
    place the following code at the beginning, right before the declaration of the
    class `ArticlesControllerTestCase`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While still editing the `articles_controller.test.php` file, add the following
    code at the beginning of the `ArticlesControllerTestCase` class, right below the
    declaration of the `fixtures` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code at the beginning of the `testView()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following method to the end of the `ArticlesControllerTestCase`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you now browse to `http://localhost/test.php`, click on the **Test Cases**
    option under the **App** section in the left menu, and then click on the **controllers
    / ArticlesController** test case, you should see our unit test succeeding, as
    shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by extending the controller we intend to test so we can override its
    `redirect()` method, so that when that method is executed as part of our unit
    test, the browser is not redirected and we can instead use the redirect information
    to make our assertions.
  prefs: []
  type: TYPE_NORMAL
- en: If `redirect()` is called, we store the destination in a property named `testRedirect`,
    and instead of aborting the execution (which would abort the test case) we avoid
    the view from being rendered. This works properly because every time we called
    `redirect()` from our `ArticlesController` class, we stopped the action execution
    by issuing a return statement.
  prefs: []
  type: TYPE_NORMAL
- en: As there is no direct way to get the instance of the controller that was executed
    from our test case (see the section *There's more* in this recipe for an alternative
    approach), we need to keep a reference of the controller instance. We use CakePHP's
    `Configure` class to store the reference, so that it can then be easily obtained.
  prefs: []
  type: TYPE_NORMAL
- en: We also want to avoid using real session data as a result of our unit test.
    This means that we need to find a way to let CakePHP think that when a controller
    interacts with its `Session` component, everything behaves as expected, while
    still not really interacting with the browser session. We also want to be able
    to assert when a particular method in that component is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mocks provide a way for us to mimic the way a real object behaves, without
    actually performing the object''s underlying logic. With the following lines of
    code in the controller''s `beforeFilter` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We are replacing the instance of CakePHP''s `Session` component with a mocked
    version. This mocked version will allow the controller to use all the component''s
    available methods (such as `setFlash()`) without actually performing the underlying
    call. `Mock::generate()` will by default generate a fully mocked object (all its
    underlying functionality will be ignored.) If we wanted to mock only parts of
    an object, we would need to generate a partial mock. For example, if we only wanted
    to mock the `setFlash()` method of the `Session` component while still maintaining
    the rest of its original methods, we would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mock::generatePartial(''SessionComponent'', false, array(''setFlash''))`;'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a mocked object and a way to access it from our unit tests, we
    can use any of the following mock assertions methods to test if a method of a
    mocked object is called as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '`expectAtLeastOnce()`: Its first argument is the name of the method we expect
    to have executed, while the second optional argument is an array of parameters
    we expect that method to have received. This is used when the expected method
    is to be called at least once, but can still be executed more times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expectNever()`: Its first mandatory argument is the name of a method that
    we intend to ensure has not been executed on the mocked object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expectOnce()`: It behaves exactly as `expectAtLeastOnce()`, but makes sure
    the method is executed only once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We proceed by overriding `CakeTestCase's testAction()` method so that whenever
    an URL for the `ArticlesController` class is requested, we change that URL to
    use our extended `TestArticlesController` class. Once the proper action is executed,
    we obtain the instance of the controller class and keep it in a property of the
    unit test named `Articles` so we can then refer to it.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to test. We start by modifying the `testView()` method so we
    can test a `redirect()` call, by building a test to force an invalid record ID,
    and asserting that the controller's `testRedirect` property is set to the `index`
    action.
  prefs: []
  type: TYPE_NORMAL
- en: We finalize the recipe by implementing the `testVote()` method, which gives
    us a chance to test posting data (using the second argument of the `testAction()`
    method as described in the previous recipe), and asserting that the mocked `Session`
    class receives a call to its `setFlash()` method, with the right arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The last part of this unit test uses the main model of our controller to fetch
    the created article, and make sure that it matches our posted data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the method shown in this recipe is quite powerful, it is definitely not
    the only way to test controllers. We can also perform direct calls on the controller
    actions we intend to test by instantiating the controller class and making a manual
    call to the action.
  prefs: []
  type: TYPE_NORMAL
- en: However, this is not a straightforward operation, since it would require a proper
    initialization of our controller by following the same steps than those defined
    by CakePHP's `Dispatcher` class. Mark Story has produced a thorough article describing
    this approach at [http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way](http://mark-story.com/posts/view/testing-cakephp-controllers-the-hard-way).
  prefs: []
  type: TYPE_NORMAL
- en: Mark Story has also published a follow-up article on manual testing of controllers,
    where he introduces mocks. It is definitely a good read, and it is available at
    [http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition](http://mark-story.com/posts/view/testing-cakephp-controllers-mock-objects-edition).
  prefs: []
  type: TYPE_NORMAL
- en: Running tests from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to run our unit tests from the command line,
    which opens the possibility for automated test reporting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe we need a basic application skeleton to work with,
    which should have its own set of unit tests. Go through the entire recipe *Creating
    fixtures and testing model methods*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using your operating system console, switch to your application directory,
    and run:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are on a GNU Linux / Mac / Unix system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Microsoft Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell should now run the specified unit test and inform us that all unit
    tests succeeded, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1926OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CakePHP's `testsuite` shell allows us to execute any test case, or group of
    test cases, from the command line. It offers several ways to specify which unit
    test to execute by specifying a minimum of two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The first argument can either be `app, core`, or a plugin name. Use `app` when
    intending to execute a unit test, or group of tests, from your application directory.
    Use `core` if you wish to run CakePHP's core tests. Finally, if you wish to run
    tests from a plugin, use the plugin name as the first argument to the `testsuite`
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: The second argument should specify what type of unit test to run. It can be
    set to `all`, which runs all tests; `group`, which runs the test group specified
    in the third argument; or `case`, which runs the test case defined in the third
    argument.
  prefs: []
  type: TYPE_NORMAL
