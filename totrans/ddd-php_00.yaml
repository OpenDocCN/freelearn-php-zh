- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2014, after two years of reading about and working with Domain-Driven Design,
    Carlos and Christian, friends and workmates, traveled to Berlin to participate
    in Vaughn Vernon's [Implementing Domain-Driven Design Workshop](https://idddworkshop.com).
    The training was fantastic, and all the concepts that were swirling around in
    their minds prior to the trip suddenly became very real. However, they were the
    only two PHP developers in a room full of Java and .NET developers.
  prefs: []
  type: TYPE_NORMAL
- en: Around the same time, [php[tek]](https://tek.phparch.com), an annual PHP conference,
    opened its call for papers, and Carlos sent one about Hexagonal Architecture.
    His talk was rejected, but Eli White — of [musketeers.me](http://musketeers.me) and
    [php[architect]](https://www.phparch.com) fame — got in touch with him a month
    later wondering if he was interested in writing an article about Hexagonal Architecture
    for the magazine php[architect]. So in June 2014, *Hexagonal Architecture with
    PHP* was published. That article, which you'll find in the [Appendix](b7e5ae5b-cf31-496b-986e-a6b60e087304.xhtml),
    was the origin of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In late 2014, Carlos and Christian talked about extending the article and sharing
    all their knowledge of and experience in applying Domain-Driven Design in production.
    They were very excited about the idea behind the book: helping the PHP community
    delve into Domain-Driven Design from a practical approach. At that time, concepts
    such as Rich Domain Models and framework-agnostic applications weren''t so common
    in the PHP community. So in December 2014, the first commit to the GitHub book
    repository was pushed.'
  prefs: []
  type: TYPE_NORMAL
- en: Around the same time, in a parallel universe, Keyvan co-founded Funddy, a crowdfunding
    platform for the masses built on top of the concepts and building blocks of Domain-Driven
    Design. Domain-Driven Design proved itself effective in the exploratory process
    and modeling of building an early-stage startup like Funddy. It also helped handle
    the complexity of the company, with its constantly changing environment and requirements.
    And after connecting with Carlos and Christian and discussing the book, Keyvan
    proudly signed on as the third writer.
  prefs: []
  type: TYPE_NORMAL
- en: Together, we've written the book we wanted to have when we started with Domain-Driven
    Design. It's full of examples, production-ready code, shortcuts, and our recommendations
    based on our experiences of what worked and what didn't for our respective teams.
    We arrived at Domain-Driven Design via its building blocks — Tactical Patterns
    — which is why this book is mainly about them. Reading it will help you learn
    them, write them, and implement them. You'll also discover how to integrate Bounded
    Contexts using synchronous and asynchronous approaches, which will open your world
    to strategic design — though the latter is a road you'll have to discover on your
    own.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is heavily inspired by [Implementing Domain-Driven Design](http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577) by
    Vaughn Vernon (aka *the Red Book*), and [Domain-Driven Design: Tackling Complexity
    in the Heart of Software](http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215) by
    Eric Evans (aka *the Blue Book*). You should buy both books. You should read them
    carefully. You should love them.'
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're a PHP Developer, Architect, or Tech Lead, we highly recommend this
    book. It will help you become a better professional. It will give you a new overview
    of and approach to the applications you're developing. If you're a Junior profile,
    getting into Value Objects, Entities, Repositories, and Domain Events is important
    in order to model any Domain you'll face in the future. For an average profile,
    understanding the benefits of Hexagonal Architecture and the boundaries between
    your framework and your Application is key for writing code that's easier to maintain
    in the real world (framework migrations, testing, etc.). More advanced readers
    will have fun both exploring how to use Domain Events in order to integrate Applications
    and delving deeper into Aggregate design.
  prefs: []
  type: TYPE_NORMAL
- en: Although Domain-Driven Design is not about technology, you still need it to
    make HTTP requests to access your Domain. Throughout the book, we recommend using
    specific PHP frameworks and libraries, such as Symfony, Silex, and Doctrine. For
    some examples, we also use specific technologies, such as MySQL, RabbitMQ, Redis,
    and Elasticsearch. However, most important are the behind-the-scenes concepts
    — concepts that are applicable regardless of the technology used to implement
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the book is loaded with tons of details and examples, such as
    how to properly design and implement all the building blocks of Domain-Driven
    Design — including Value Objects, Entities, Services, Domain Events, Aggregates,
    Factories, Repositories, and Application Services — with PHP. It explains what
    the role of the main PHP libraries and frameworks used in Domain-Driven Design
    are. The book also teaches how to apply Hexagonal Architecture within your application,
    regardless of whether you use an open source framework or your own one. Finally,
    it shows how to integrate Bounded Contexts using REST frameworks and messaging
    mechanisms. If you're interested in any of these subjects, this book is for you.
  prefs: []
  type: TYPE_NORMAL
- en: DDD and PHP Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2016, Carlos and Christian went to the first official Domain-Driven Design
    conference, [DDD Europe](http://dddeurope.com/). They were really happy to see
    some PHP open source leaders, such as Marco Pivetta (Doctrine) and Sebastian Bergmann
    (PHPUnit), attending the conference.
  prefs: []
  type: TYPE_NORMAL
- en: Domain-Driven Design arrived in the PHP community two years prior to that conference.
    However, there's still a lack of documentation and real code examples. Why? We
    think not many people have worked with this kind of approach in production yet
    — even people in other more established communities such as Java. Maybe this is
    because their project complexity is low, or maybe it's because they don't know
    how to do it. Whatever the reason, this book is written for the community. One
    of our goals is to teach you how you can write an application that solves your
    Domain issues without being coupled to specific frameworks or technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Summary of Chapters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is arranged with each chapter exploring a separate tactical building
    block of Domain-Driven Design. It also includes an introduction to Domain-Driven
    Design, information on how to integrate different Bounded Contexts or applications,
    and an appendix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Getting Started with Domain-Driven Design'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Domain-Driven Design about? What role does it play in complex systems?
    Is it worth learning about and exploring? What are the main concepts a developer
    needs to know when jumping into it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Architectural Styles'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bounded Contexts can be implemented in different ways and using different approaches.
    However, two styles are getting more popular, and they are Hexagonal Architecture
    and CQRS + ES. In this chapter, we'll see these two main Architectural Styles,
    understand what their main strengths are, and discover when to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3: Value Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Value Objects are the basic pieces for rich modeling. We'll learn what their
    properties are and what makes them so important. We'll figure out how to persist
    them using Doctrine and custom ORMs. We'll show how to properly validate and unit
    test them. And finally, we'll see what a test case of testing immutability looks
    like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: Entities'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entities are Domain-Driven Design building blocks that are uniquely identified
    and mutable. We'll see how to create and validate them and how to properly map
    them using a custom ORM and Doctrine. We'll also assess whether or not annotations
    are the best mapping approach for Entities and look at the different strategies
    for generating an Identity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5: Domain Services'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn about what a Domain Service is and when to use
    it. We'll review what Anemic Domain Models and Rich Domain Models are. Lastly,
    we'll deal with Infrastructure issues when writing Domain Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6: Domain-Events'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Domain Events are a great Inversion of Control (IoC) mechanism. In Domain-Driven
    Design, they're important for communicating different Bounded Contexts asynchronously,
    improving your Application performance using eventual consistency, and decoupling
    your Application from its Infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 7: Modules'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With so many tactical building blocks, it's a bit difficult to know where to
    place them in code, especially if you're dealing with a framework like Symfony.
    We'll review how PHP namespaces can be used for implementing Modules. We'll also
    discover different hierarchies of folders for organizing Domain Model code, Application
    Code, and Infrastructure Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 8: Aggregates'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aggregates are probably the most difficult part of tactical Domain-Driven Design.
    We'll look at the key concepts when dealing with them and discover how to design
    them. We'll also propose a practical scenario where two Aggregates become one
    when adding a business rule, and we'll demonstrate how the rest of the objects
    must be refactored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 9: Factories'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Factory Methods and objects help us keep business invariants, which is why they're
    so important in Domain-Driven Design. Here, we'll also explore the relationship
    between Factories and Aggregates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10: Repositories'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repositories are key for retrieving and adding Entities and Aggregates to collections.
    We'll review the different types of Repositories and learn how to implement them
    using Doctrine, custom ORMs, and Redis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 11: Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Application is the thin layer that connects outside clients to your Domain.
    In this chapter, we'll show you how to write your Application Services so that
    they're easy to test and keep thin. We'll also review how to prepare request objects,
    define dependencies, and return results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 12: Integrating Bounded Contexts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll explore the different tactical approaches to communicate Bounded Contexts
    and see real implementations. REST is our suggestion for synchronous communication,
    and messaging with RabbitMQ is our suggestion for asynchronous communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appendix: Hexagonal Architecture with PHP'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is where you'll find the original article written by Carlos and published
    by php[architect] in June 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Code and Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The authors have created an organization at GitHub called [Domain-Driven Design
    in PHP](https://github.com/dddinphp), which is where all the code examples from
    this book, additional snippets, and some complete sample projects are available.
    For example, you can find [Last Wishes](https://github.com/dddinphp/last-wishes),
    a simple Domain-Driven Design-style application showing different examples explained
    in this book. Additionally, you'll find our [*CQRS Blog*](https://github.com/dddinphp/blog-cqrs),
    along with [Gamify](https://github.com/dddinphp/last-wishes-gamify), a Bounded
    Context that adds gamification capabilities to *Last Wishes*.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you find any issue or fix or have a suggestion or comment while
    reading this book, you can create an issue in the [DDD in PHP Book Issues](https://github.com/dddinphp/book-issues) repository.
    We fix them as they come in. If you're interested, we also urge you to watch our
    projects and provide feedback.
  prefs: []
  type: TYPE_NORMAL
