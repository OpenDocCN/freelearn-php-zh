- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: In 2014, after two years of reading about and working with Domain-Driven Design,
    Carlos and Christian, friends and workmates, traveled to Berlin to participate
    in Vaughn Vernon's [Implementing Domain-Driven Design Workshop](https://idddworkshop.com).
    The training was fantastic, and all the concepts that were swirling around in
    their minds prior to the trip suddenly became very real. However, they were the
    only two PHP developers in a room full of Java and .NET developers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年，经过两年的阅读和工作领域驱动设计后，卡洛斯和克里斯蒂安，作为朋友和同事，前往柏林参加Vaughn Vernon的[实施领域驱动设计研讨会](https://idddworkshop.com)。培训非常棒，他们在旅行前头脑中盘旋的所有概念突然变得非常真实。然而，他们是房间里唯一两个PHP开发者，房间里满是Java和.NET开发者。
- en: Around the same time, [php[tek]](https://tek.phparch.com), an annual PHP conference,
    opened its call for papers, and Carlos sent one about Hexagonal Architecture.
    His talk was rejected, but Eli White — of [musketeers.me](http://musketeers.me) and
    [php[architect]](https://www.phparch.com) fame — got in touch with him a month
    later wondering if he was interested in writing an article about Hexagonal Architecture
    for the magazine php[architect]. So in June 2014, *Hexagonal Architecture with
    PHP* was published. That article, which you'll find in the [Appendix](b7e5ae5b-cf31-496b-986e-a6b60e087304.xhtml),
    was the origin of this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在同一时间，[php[tek]](https://tek.phparch.com)，一年一度的PHP会议，开启了征稿活动，卡洛斯提交了一篇关于六边形架构的文章。他的演讲被拒绝了，但一个月后，来自[musketeers.me](http://musketeers.me)和[php[architect]](https://www.phparch.com)的Eli
    White联系了他，想知道他是否对为杂志php[architect]撰写一篇关于六边形架构的文章感兴趣。因此，在2014年6月，*使用PHP的六边形架构*一文得以发表。这篇文章，你可以在[附录](b7e5ae5b-cf31-496b-986e-a6b60e087304.xhtml)中找到，是这本书的起源。
- en: 'In late 2014, Carlos and Christian talked about extending the article and sharing
    all their knowledge of and experience in applying Domain-Driven Design in production.
    They were very excited about the idea behind the book: helping the PHP community
    delve into Domain-Driven Design from a practical approach. At that time, concepts
    such as Rich Domain Models and framework-agnostic applications weren''t so common
    in the PHP community. So in December 2014, the first commit to the GitHub book
    repository was pushed.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在2014年底，卡洛斯和克里斯蒂安讨论了扩展文章并分享他们在生产中应用领域驱动设计的所有知识和经验。他们对书籍背后的想法非常兴奋：帮助PHP社区从实用角度深入了解领域驱动设计。当时，像丰富领域模型和无框架应用程序这样的概念在PHP社区中并不常见。因此，在2014年12月，GitHub书籍仓库的第一个提交被推送到。
- en: Around the same time, in a parallel universe, Keyvan co-founded Funddy, a crowdfunding
    platform for the masses built on top of the concepts and building blocks of Domain-Driven
    Design. Domain-Driven Design proved itself effective in the exploratory process
    and modeling of building an early-stage startup like Funddy. It also helped handle
    the complexity of the company, with its constantly changing environment and requirements.
    And after connecting with Carlos and Christian and discussing the book, Keyvan
    proudly signed on as the third writer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在同一时间，在一个平行宇宙中，Keyvan共同创立了Funddy，这是一个基于领域驱动设计和构建块的大众众筹平台。领域驱动设计在探索过程和构建早期初创公司如Funddy的建模中证明了自己的有效性。它还帮助处理公司的复杂性，因为其环境和需求不断变化。在与卡洛斯和克里斯蒂安讨论书籍后，Keyvan自豪地签约成为第三位作者。
- en: Together, we've written the book we wanted to have when we started with Domain-Driven
    Design. It's full of examples, production-ready code, shortcuts, and our recommendations
    based on our experiences of what worked and what didn't for our respective teams.
    We arrived at Domain-Driven Design via its building blocks — Tactical Patterns
    — which is why this book is mainly about them. Reading it will help you learn
    them, write them, and implement them. You'll also discover how to integrate Bounded
    Contexts using synchronous and asynchronous approaches, which will open your world
    to strategic design — though the latter is a road you'll have to discover on your
    own.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们共同编写了我们开始领域驱动设计时想要的书籍。书中充满了例子、现成的代码、捷径，以及基于我们各自团队的经验，对哪些有效和哪些无效的建议。我们通过其构建块——战术模式——到达了领域驱动设计，这就是为什么这本书主要关于它们。阅读它将帮助你学习它们，编写它们，并实施它们。你还将发现如何使用同步和异步方法集成边界上下文，这将打开你的战略设计世界——尽管后者是你必须自己探索的道路。
- en: 'This book is heavily inspired by [Implementing Domain-Driven Design](http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577) by
    Vaughn Vernon (aka *the Red Book*), and [Domain-Driven Design: Tackling Complexity
    in the Heart of Software](http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215) by
    Eric Evans (aka *the Blue Book*). You should buy both books. You should read them
    carefully. You should love them.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书深受Vaughn Vernon（又名*红皮书*）所著的[《实现领域驱动设计》（http://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577）]和Eric
    Evans（又名*蓝皮书*）所著的[《领域驱动设计：软件核心的复杂性处理》（http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215）]的启发。你应该购买这两本书。你应该仔细阅读它们。你应该喜欢它们。
- en: Who Should Read This Book
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读这本书
- en: If you're a PHP Developer, Architect, or Tech Lead, we highly recommend this
    book. It will help you become a better professional. It will give you a new overview
    of and approach to the applications you're developing. If you're a Junior profile,
    getting into Value Objects, Entities, Repositories, and Domain Events is important
    in order to model any Domain you'll face in the future. For an average profile,
    understanding the benefits of Hexagonal Architecture and the boundaries between
    your framework and your Application is key for writing code that's easier to maintain
    in the real world (framework migrations, testing, etc.). More advanced readers
    will have fun both exploring how to use Domain Events in order to integrate Applications
    and delving deeper into Aggregate design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名PHP开发者、架构师或技术领导，我们强烈推荐这本书。它将帮助你成为一名更好的专业人士。它将为你正在开发的应用程序提供一个全新的视角和方法。如果你是初级角色，了解值对象、实体、仓储和领域事件对于未来面对的任何领域建模都很重要。对于普通角色，理解六边形架构的好处以及框架和应用程序之间的边界对于编写在现实世界中更容易维护的代码至关重要（框架迁移、测试等）。对于更高级的读者，探索如何使用领域事件来集成应用程序以及深入研究聚合设计都会很有趣。
- en: Although Domain-Driven Design is not about technology, you still need it to
    make HTTP requests to access your Domain. Throughout the book, we recommend using
    specific PHP frameworks and libraries, such as Symfony, Silex, and Doctrine. For
    some examples, we also use specific technologies, such as MySQL, RabbitMQ, Redis,
    and Elasticsearch. However, most important are the behind-the-scenes concepts
    — concepts that are applicable regardless of the technology used to implement
    them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然领域驱动设计不是关于技术的，但你仍然需要它来发出HTTP请求以访问你的领域。在整本书中，我们推荐使用特定的PHP框架和库，例如Symfony、Silex和Doctrine。对于一些示例，我们也使用了特定的技术，如MySQL、RabbitMQ、Redis和Elasticsearch。然而，最重要的是背后的概念——这些概念无论使用哪种技术实现都是通用的。
- en: Additionally, the book is loaded with tons of details and examples, such as
    how to properly design and implement all the building blocks of Domain-Driven
    Design — including Value Objects, Entities, Services, Domain Events, Aggregates,
    Factories, Repositories, and Application Services — with PHP. It explains what
    the role of the main PHP libraries and frameworks used in Domain-Driven Design
    are. The book also teaches how to apply Hexagonal Architecture within your application,
    regardless of whether you use an open source framework or your own one. Finally,
    it shows how to integrate Bounded Contexts using REST frameworks and messaging
    mechanisms. If you're interested in any of these subjects, this book is for you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这本书充满了大量的细节和示例，例如如何使用PHP正确地设计和实现领域驱动设计的所有构建块——包括值对象、实体、服务、领域事件、聚合、工厂、仓储和应用服务——以及如何解释在领域驱动设计中使用的PHP库和框架的主要角色。这本书还教授如何在你的应用程序中应用六边形架构，无论你是否使用开源框架还是自己的框架。最后，它展示了如何使用REST框架和消息机制来集成边界上下文。如果你对其中任何主题感兴趣，这本书就是为你准备的。
- en: DDD and PHP Community
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDD和PHP社区
- en: In 2016, Carlos and Christian went to the first official Domain-Driven Design
    conference, [DDD Europe](http://dddeurope.com/). They were really happy to see
    some PHP open source leaders, such as Marco Pivetta (Doctrine) and Sebastian Bergmann
    (PHPUnit), attending the conference.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年，Carlos和Christian参加了首届官方领域驱动设计会议[DDD Europe](http://dddeurope.com/)。他们很高兴看到一些PHP开源领袖，如Marco
    Pivetta（Doctrine）和Sebastian Bergmann（PHPUnit），参加了会议。
- en: Domain-Driven Design arrived in the PHP community two years prior to that conference.
    However, there's still a lack of documentation and real code examples. Why? We
    think not many people have worked with this kind of approach in production yet
    — even people in other more established communities such as Java. Maybe this is
    because their project complexity is low, or maybe it's because they don't know
    how to do it. Whatever the reason, this book is written for the community. One
    of our goals is to teach you how you can write an application that solves your
    Domain issues without being coupled to specific frameworks or technologies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 领域驱动设计在会议两年前进入PHP社区。然而，仍然缺乏文档和真实的代码示例。为什么？我们认为还没有很多人在生产环境中使用这种类型的做法——即使在其他更成熟的社区中，如Java。也许这是因为他们的项目复杂性较低，或者也许是因为他们不知道如何做。无论原因如何，这本书是为社区编写的。我们的目标之一是教会你如何编写一个解决你的领域问题的应用程序，而无需与特定的框架或技术耦合。
- en: Summary of Chapters
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节总结
- en: The book is arranged with each chapter exploring a separate tactical building
    block of Domain-Driven Design. It also includes an introduction to Domain-Driven
    Design, information on how to integrate different Bounded Contexts or applications,
    and an appendix.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书按章节组织，每章探讨领域驱动设计的独立战术构建块。它还包括领域驱动设计的介绍、如何集成不同的边界上下文或应用程序的信息，以及附录。
- en: 'Chapter 1: Getting Started with Domain-Driven Design'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：开始学习领域驱动设计
- en: What is Domain-Driven Design about? What role does it play in complex systems?
    Is it worth learning about and exploring? What are the main concepts a developer
    needs to know when jumping into it?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 领域驱动设计是关于什么的？它在复杂系统中扮演什么角色？是否值得学习和探索？当开发者开始学习时，需要了解哪些主要概念？
- en: 'Chapter 2: Architectural Styles'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：架构风格
- en: Bounded Contexts can be implemented in different ways and using different approaches.
    However, two styles are getting more popular, and they are Hexagonal Architecture
    and CQRS + ES. In this chapter, we'll see these two main Architectural Styles,
    understand what their main strengths are, and discover when to use them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 边界上下文可以以不同的方式实现，并使用不同的方法。然而，两种风格越来越受欢迎，它们是六边形架构和CQRS + ES。在本章中，我们将看到这两种主要的架构风格，了解它们的主要优势，并发现何时使用它们。
- en: 'Chapter 3: Value Objects'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：值对象
- en: Value Objects are the basic pieces for rich modeling. We'll learn what their
    properties are and what makes them so important. We'll figure out how to persist
    them using Doctrine and custom ORMs. We'll show how to properly validate and unit
    test them. And finally, we'll see what a test case of testing immutability looks
    like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 值对象是丰富建模的基本组成部分。我们将学习它们的属性以及它们为何如此重要。我们将了解如何使用Doctrine和自定义ORM持久化它们。我们还将展示如何正确验证和单元测试它们。最后，我们将看到测试不可变性的测试用例是什么样的。
- en: 'Chapter 4: Entities'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：实体
- en: Entities are Domain-Driven Design building blocks that are uniquely identified
    and mutable. We'll see how to create and validate them and how to properly map
    them using a custom ORM and Doctrine. We'll also assess whether or not annotations
    are the best mapping approach for Entities and look at the different strategies
    for generating an Identity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实体是领域驱动设计构建块，具有唯一标识和可变性的特性。我们将了解如何创建和验证它们，以及如何使用自定义ORM和Doctrine正确映射它们。我们还将评估是否使用注解是实体映射的最佳方法，并查看生成标识的不同策略。
- en: 'Chapter 5: Domain Services'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：领域服务
- en: In this chapter, you'll learn about what a Domain Service is and when to use
    it. We'll review what Anemic Domain Models and Rich Domain Models are. Lastly,
    we'll deal with Infrastructure issues when writing Domain Services.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解什么是领域服务以及何时使用它。我们将回顾贫血领域模型和丰富领域模型是什么。最后，我们将处理编写领域服务时的基础设施问题。
- en: 'Chapter 6: Domain-Events'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：领域事件
- en: Domain Events are a great Inversion of Control (IoC) mechanism. In Domain-Driven
    Design, they're important for communicating different Bounded Contexts asynchronously,
    improving your Application performance using eventual consistency, and decoupling
    your Application from its Infrastructure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 领域事件是一个优秀的控制反转（IoC）机制。在领域驱动设计中，它们对于异步通信不同的边界上下文、通过最终一致性提高应用程序性能以及解耦应用程序与其基础设施都至关重要。
- en: 'Chapter 7: Modules'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：模块
- en: With so many tactical building blocks, it's a bit difficult to know where to
    place them in code, especially if you're dealing with a framework like Symfony.
    We'll review how PHP namespaces can be used for implementing Modules. We'll also
    discover different hierarchies of folders for organizing Domain Model code, Application
    Code, and Infrastructure Code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在如此多的战术构建块中，知道如何在代码中放置它们可能有点困难，尤其是如果你正在处理像 Symfony 这样的框架。我们将回顾如何使用 PHP 命名空间来实现模块。我们还将发现用于组织领域模型代码、应用代码和基础设施代码的不同文件夹层次结构。
- en: 'Chapter 8: Aggregates'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：聚合
- en: Aggregates are probably the most difficult part of tactical Domain-Driven Design.
    We'll look at the key concepts when dealing with them and discover how to design
    them. We'll also propose a practical scenario where two Aggregates become one
    when adding a business rule, and we'll demonstrate how the rest of the objects
    must be refactored.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合可能是战术领域驱动设计中最困难的部分。我们将探讨处理它们时的关键概念，并了解如何设计它们。我们还将提出一个实际场景，其中在添加业务规则时，两个聚合体合并为一个，并演示其余对象必须如何重构。
- en: 'Chapter 9: Factories'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：工厂
- en: Factory Methods and objects help us keep business invariants, which is why they're
    so important in Domain-Driven Design. Here, we'll also explore the relationship
    between Factories and Aggregates.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法和对象帮助我们保持业务不变性，这就是为什么它们在领域驱动设计中如此重要的原因。在这里，我们还将探索工厂和聚合之间的关系。
- en: 'Chapter 10: Repositories'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：仓库
- en: Repositories are key for retrieving and adding Entities and Aggregates to collections.
    We'll review the different types of Repositories and learn how to implement them
    using Doctrine, custom ORMs, and Redis.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库对于检索和将实体和聚合添加到集合中至关重要。我们将回顾不同类型的仓库，并学习如何使用 Doctrine、自定义 ORM 和 Redis 来实现它们。
- en: 'Chapter 11: Application'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：应用
- en: An Application is the thin layer that connects outside clients to your Domain.
    In this chapter, we'll show you how to write your Application Services so that
    they're easy to test and keep thin. We'll also review how to prepare request objects,
    define dependencies, and return results.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序是连接外部客户端到你的领域的薄层。在本章中，我们将向你展示如何编写你的应用程序服务，以便它们易于测试并保持薄层。我们还将回顾如何准备请求对象、定义依赖关系以及返回结果。
- en: 'Chapter 12: Integrating Bounded Contexts'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：集成限界上下文
- en: We'll explore the different tactical approaches to communicate Bounded Contexts
    and see real implementations. REST is our suggestion for synchronous communication,
    and messaging with RabbitMQ is our suggestion for asynchronous communication.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索不同的战术方法来沟通限界上下文，并查看实际实现。我们建议使用 REST 进行同步通信，使用 RabbitMQ 进行异步通信的消息是我们的建议。
- en: 'Appendix: Hexagonal Architecture with PHP'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录：使用 PHP 的六边形架构
- en: Here is where you'll find the original article written by Carlos and published
    by php[architect] in June 2014.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以找到 Carlos 撰写并由 php[architect] 在 2014 年 6 月发表的原文。
- en: Code and Examples
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码和示例
- en: The authors have created an organization at GitHub called [Domain-Driven Design
    in PHP](https://github.com/dddinphp), which is where all the code examples from
    this book, additional snippets, and some complete sample projects are available.
    For example, you can find [Last Wishes](https://github.com/dddinphp/last-wishes),
    a simple Domain-Driven Design-style application showing different examples explained
    in this book. Additionally, you'll find our [*CQRS Blog*](https://github.com/dddinphp/blog-cqrs),
    along with [Gamify](https://github.com/dddinphp/last-wishes-gamify), a Bounded
    Context that adds gamification capabilities to *Last Wishes*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作者们在 GitHub 上创建了一个名为 [Domain-Driven Design in PHP](https://github.com/dddinphp)
    的组织，这里提供了本书中的所有代码示例、额外的代码片段以及一些完整的示例项目。例如，你可以找到 [Last Wishes](https://github.com/dddinphp/last-wishes)，这是一个简单的基于领域驱动设计风格的示例应用，展示了本书中解释的不同示例。此外，你还可以找到我们的
    [*CQRS 博客*](https://github.com/dddinphp/blog-cqrs)，以及 [Gamify](https://github.com/dddinphp/last-wishes-gamify)，这是一个添加了游戏化功能的
    *Last Wishes* 限界上下文。
- en: Finally, if you find any issue or fix or have a suggestion or comment while
    reading this book, you can create an issue in the [DDD in PHP Book Issues](https://github.com/dddinphp/book-issues) repository.
    We fix them as they come in. If you're interested, we also urge you to watch our
    projects and provide feedback.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你在阅读这本书时发现任何问题或修复，或者有建议或评论，你可以在 [DDD in PHP 书籍问题](https://github.com/dddinphp/book-issues)
    仓库中创建一个问题。我们按收到的问题进行修复。如果你感兴趣，我们也强烈建议你关注我们的项目并提供反馈。
