- en: Chapter 4. Developing an Issue-tracking Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。开发问题跟踪应用程序
- en: In the previous chapters, we worked on very simple and practical applications.
    As we move forward, our applications will become more complex and intricate. For
    our next project, we will develop an issue-tracking system that will allow customers
    to report issues and allow us to manage those users and issues from a single application.
    In this application, we will also provide support to create and update issues
    over e-mail. Finally, we'll be expanding upon our user management system to allow
    per-user roles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们研究了非常简单和实用的应用。随着我们继续前进，我们的应用将变得更加复杂和精细。对于我们接下来的项目，我们将开发一个问题跟踪系统，该系统将允许客户报告问题，并使我们能够从单一应用程序中管理这些用户和问题。在这个应用程序中，我们还将提供通过电子邮件创建和更新问题的支持。最后，我们将扩展我们的用户管理系统，以允许为每个用户分配角色。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a user management interface
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户管理界面
- en: Adding role-based authorization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加基于角色的授权
- en: Sending and receiving e-mails from a Yii application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Yii应用程序发送和接收电子邮件
- en: Integrating third-party libraries and tools into our application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将第三方库和工具集成到我们的应用程序中
- en: Prerequisites
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Before we get started, there are a couple of things that we''ll need to have
    set up and working:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，有一些事情我们需要设置并运行：
- en: Since we'll send and receive e-mails from our application, we're going to need
    a registered and active domain name. If you do not already have a working domain
    name, you can purchase one from a domain registrar such as [www.namecheap.com](http://www.namecheap.com),
    [www.name.com](http://www.name.com), or [www.gandi.net](http://www.gandi.net).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们将从我们的应用程序发送和接收电子邮件，我们需要一个注册并活跃的域名。如果您还没有一个正在工作的域名，您可以从域名注册商那里购买一个，例如 [www.namecheap.com](http://www.namecheap.com)，[www.name.com](http://www.name.com)，或
    [www.gandi.net](http://www.gandi.net)。
- en: We'll also need the ability to modify the Domain Name System (DNS) records for
    this domain. For our application to receive e-mails, we'll need to be able to
    modify the DNS records for our domain. Most registrars provide a rudimentary DNS
    management system. If yours does not, you can use a free DNS hosting service,
    such as [www.cloudflare.com](http://www.cloudflare.com) or [http://www.rackspace.com/cloud/dns](http://www.rackspace.com/cloud/dns).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要能够修改该域名的域名系统（DNS）记录。为了我们的应用程序能够接收电子邮件，我们需要能够修改我们域名的DNS记录。大多数注册商提供基本的DNS管理系统。如果您的注册商没有，您可以使用免费的DNS托管服务，例如
    [www.cloudflare.com](http://www.cloudflare.com) 或 [http://www.rackspace.com/cloud/dns](http://www.rackspace.com/cloud/dns)。
- en: Next, you'll need to have a web server with a public facing IP address. This
    will allow e-mails to be sent to our application. Many cloud **Virtual Private
    Server** (**VPS**) providers are available to use for low monthly or hourly prices.
    Such services include [www.digitalocean.com](http://www.digitalocean.com), [www.linode.com](http://www.linode.com),
    and [http://www.rackspace.com/cloud/servers](http://www.rackspace.com/cloud/servers).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，您需要一个具有公开IP地址的Web服务器。这将允许电子邮件发送到我们的应用程序。许多云**虚拟专用服务器**（**VPS**）提供商以低月费或时费提供使用。这些服务包括
    [www.digitalocean.com](http://www.digitalocean.com)，[www.linode.com](http://www.linode.com)，以及
    [http://www.rackspace.com/cloud/servers](http://www.rackspace.com/cloud/servers)。
- en: Rather than create, configure, and maintain our own e-mail server and SMTP relay,
    we can take advantage of third-party tools and libraries. This will allow us to
    focus on the development of our application rather than the maintenance of a secondary
    service. Using this service and its accompanying PHP library, we can take advantage
    of code that has already been thoroughly tested and vetted, which allows us as
    developers to get straight to coding. To take advantage of SendGrid, we'll create
    a free SendGrid developer account, which can be set up at [https://www.sendgrid.com/developers](https://www.sendgrid.com/developers).
    For now, simply set up your account. Later in the chapter, we'll go through the
    process of setting up our application to receive e-mails from this service.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不必创建、配置和维护自己的电子邮件服务器和SMTP中继，我们可以利用第三方工具和库。这将使我们能够专注于应用程序的开发，而不是次要服务的维护。使用这项服务和其伴随的PHP库，我们可以利用已经经过彻底测试和审查的代码，这使我们作为开发者能够直接进入编码。为了利用SendGrid，我们将创建一个免费的SendGrid开发者账户，该账户可以在
    [https://www.sendgrid.com/developers](https://www.sendgrid.com/developers) 上设置。目前，只需设置您的账户。在章节的后面部分，我们将介绍如何设置我们的应用程序以接收来自该服务的电子邮件。
- en: In this chapter, we'll once again use the latest version of MySQL (at the time
    of this writing, MySQL 5.6). Make sure that your MySQL server is set up and running
    on your server.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，我们还将使用最新的MySQL版本（在撰写本文时为MySQL 5.6）。请确保你的MySQL服务器已经设置并运行在你的服务器上。
- en: Finally, we'll need to download and install Composer from [https://getcomposer.org/](https://getcomposer.org/).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们需要从[https://getcomposer.org/](https://getcomposer.org/)下载并安装Composer。
- en: Once you have acquired everything listed in the preceding steps, create a subdomain
    on the domain name you are using, and point it to your server. In this chapter,
    I'll be using `chapter4.example.com` to refer to this subdomain. After everything
    is set up and your server is responding to that domain name, we can get started.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了前面步骤中列出的所有内容，在你的域名上创建一个子域名，并将其指向你的服务器。在本章中，我将使用`chapter4.example.com`来指代这个子域名。在一切设置完毕并且你的服务器对该域名做出响应后，我们就可以开始了。
- en: Describing the project
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述项目
- en: 'Our issue-tracking project can be broken down into the following three main
    components:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的问题跟踪项目可以分为以下三个主要组成部分：
- en: Users who will create and respond to issues
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将创建和响应问题的用户
- en: Issues that can be updated by the end user or a supporter (a specific type of
    user that will support our end users)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以由最终用户或支持者（一种将支持我们的最终用户的特定类型的用户）更新的问题
- en: A publicly available endpoint for SendGrid to POST to with any emails we may
    receive
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SendGrid可以POST任何我们可能收到的电子邮件的公开可用端点
- en: Users
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: The first component of our application is the user who will be using it. For
    this application, we will be using the same database structure that we did in
    [Chapter 3](ch03.html "Chapter 3. Scheduled Reminders"), *Scheduled Reminders*,
    with the addition of a new column called `role_id`, which will allow us to distinguish
    which position the user has within our application. For this application, we will
    expand upon our login process to ensure that the user's role is available for
    us to reference and manipulate within our application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第一个组成部分是将会使用它的用户。对于这个应用程序，我们将使用与我们在[第3章](ch03.html "第3章。计划提醒")中相同的数据库结构，即“计划提醒”，并增加一个名为`role_id`的新列，这将允许我们区分用户在我们应用程序中的位置。对于这个应用程序，我们将扩展我们的登录过程，以确保用户的角色可供我们在应用程序中引用和操作。
- en: Roles
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: Rather than have a single administrator who is capable of managing our system,
    in this application, we can have multiple users who we can promote or demote to
    different roles within our application. The role that we associate with our user
    will allow us to determine what users of that role are permitted to do within
    our application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是有一个能够管理我们系统的单个管理员，在这个应用程序中，我们可以有多个用户，我们可以提升或降低他们在我们应用程序中的不同角色。我们与用户关联的角色将允许我们确定该角色的用户在我们应用程序中可以做什么。
- en: 'For this application, we will be supporting three basic roles: a customer who
    will submit issues and updates, a supporter who has the same permissions as a
    customer in addition to being able to update issues that belong to other customers,
    and an administrator who has the same permissions as a supporter and can also
    manage the roles of other users.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们将支持三个基本角色：一个提交问题和更新的客户，一个拥有与客户相同权限并且能够更新属于其他客户的问题的支持者，以及一个拥有与支持者相同权限并且可以管理其他用户角色的管理员。
- en: To store this information, we'll use a simple roles table in our database setup
    as follows. We'll then set up a relationship between users and role so that this
    information is automatically associated with our users.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储这些信息，我们将在数据库设置中使用一个简单的角色表，如下所示。然后我们将设置用户和角色之间的关系，以便这些信息自动与我们的用户关联。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Issues
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'The second component of our application is the issue that users will create.
    An issue is an item that can be created either within the application or from
    outside of it by sending an e-mail to our application. Issues can also be updated
    from within the application or by an e-mail sent by the customer. Issues will
    also have a status associated with them that will help our supporters track the
    current project of a particular issue. The database that we''ll be using will
    look as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的第二个组成部分是用户将创建的问题。问题是一个可以创建于应用程序内部或通过向我们的应用程序发送电子邮件从外部创建的项目。问题也可以从应用程序内部或通过客户发送的电子邮件进行更新。问题还将有一个与之关联的状态，这将帮助我们的支持者跟踪特定问题的当前项目。我们将使用的数据库将如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Statuses
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态
- en: 'Associated with each issue will be a unique status. These statuses will allow
    our supporters to track the project of an issue and will allow us to trigger specific
    events when an issue changes from one status to another. Our table for these records
    will look identical to our roles table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题都将有一个唯一的状态。这些状态将允许我们的支持者跟踪问题的项目，并允许我们在问题从一个状态变为另一个状态时触发特定事件。我们用于这些记录的表将与我们的角色表相同：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Updates
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新
- en: 'Also associated with each issue is an update. Each issue can have one or many
    updates attached to them, which will allow supporters to see what work has been
    done to a particular issue and which will serve as a medium for the user to communicate
    with our supporters. Each update will be associated with both a user and an issue.
    Our database table for this information will look as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题都与一个更新相关联。每个问题可以有一个或多个更新附加到它们，这将允许支持者看到对特定问题所做的工作，并作为用户与我们支持者沟通的媒介。每个更新都将与一个用户和一个问题相关联。我们用于此信息的数据库表将如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Receiving e-mails
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接收电子邮件
- en: The final component of our application will allow customers to create new issues
    and update existing issues via e-mail. To the end user, this process will feel
    seamless, yet it will allow our supporters to keep track of the work and updates
    that are done to a given issue. This custom endpoint will also allow us to seamlessly
    create new users within our application and associate information with those users
    as necessary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的最后一个组件将允许客户通过电子邮件创建新问题并更新现有问题。对于最终用户来说，这个过程将感觉无缝，同时它将允许我们的支持者跟踪特定问题的工作和更新。此自定义端点还将允许我们在应用程序中无缝创建新用户，并在必要时将信息与这些用户关联。
- en: Initializing the project
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化项目
- en: By now, you should be comfortable with creating projects from scratch. To provide
    us with a common starting ground, a skeleton project has been included with the
    project resources for this chapter. Included with this skeleton project are the
    necessary migrations, data files, controllers, and views to get us started. Also
    included is the login system that we'll use for authentication throughout this
    chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您应该已经熟悉了从头创建项目。为了提供一个共同起点，本章的项目资源中包含了一个骨架项目。此骨架项目包括必要的迁移、数据文件、控制器和视图，以帮助我们开始。还包括我们将用于本章整个章节的登录系统。
- en: 'We''ll start by copying the skeleton project included with the chapter resources
    to our web server and configure it so that it responds to `chapter4.example.com`
    as outlined in the beginning of the chapter, and then follow the next steps to
    make sure everything is set up:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将章节资源中包含的骨架项目复制到我们的Web服务器上，并按照章节开头概述的配置，使其响应`chapter4.example.com`，然后按照以下步骤进行，以确保一切设置正确：
- en: Since a skeleton project was provided, begin by adjusting the path to Yii framework
    in `index.php` to point to your Yii installation path. At this point, you'll also
    want to adjust the permissions on the `assets` and `protected/runtime` folders.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于提供了一个骨架项目，请首先调整`index.php`中的Yii框架路径，使其指向您的Yii安装路径。在此阶段，您还希望调整`assets`和`protected/runtime`文件夹的权限。
- en: 'Next, create the MySQL user and database table that our application will use.
    If you don''t want to alter the main configuration file that is provided, the
    following MySQL commands will create the database and user for you:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建我们的应用程序将使用的MySQL用户和数据库表。如果您不想修改提供的默认配置文件，以下MySQL命令将为您创建数据库和用户：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we''ll need to run the initial migrations and then import the sample
    data that is provided in the `protected/data` folder. This sample data will allow
    us to immediately log in to our application and start using it once the application
    is running. Navigate to the root of the project, and then run the following commands:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要运行初始迁移，然后导入`protected/data`文件夹中提供的示例数据。这些示例数据将使我们能够在应用程序运行后立即登录并开始使用它。导航到项目根目录，然后运行以下命令：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need to update `params.php` at `protected/config/` with our SendGrid information.
    Your username and password will correspond to your SendGrid username and password.
    In keeping with our example domain, set the from address to `noreply@chapter4.example.com`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`protected/config/`中的`params.php`更新我们的SendGrid信息。您的用户名和密码将与您的SendGrid用户名和密码相对应。按照我们的示例域名，将发件人地址设置为`noreply@chapter4.example.com`。
- en: 'Finally, we need to install the necessary composer dependencies:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要安装必要的composer依赖项：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After performing these steps, you should be able to navigate to `chapter4.example.com`
    in your browser and see a login page to our application. After logging in to our
    application using one of the credentials that are provided in the table just after
    this paragraph, you should see the page following this table load:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些步骤后，您应该能够在浏览器中导航到`chapter4.example.com`，并看到我们的应用程序的登录页面。在登录到我们的应用程序并使用本段之后表格中提供的凭证之一后，您应该看到表格之后的页面加载：
- en: '| Username | Password |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 用户名 | 密码 |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `customer@example.com` | `test` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `customer@example.com` | `test` |'
- en: '| `supporter@example.com` | `test` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `supporter@example.com` | `test` |'
- en: '| `admin@example.com` | `test` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `admin@example.com` | `test` |'
- en: '![Initializing the project](img/7734OS_04_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![初始化项目](img/7734OS_04_01.jpg)'
- en: Managing users
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理用户
- en: Before we can begin working on issues, we first need to make sure that users
    can be both created and managed from within our application. In [Chapter 3](ch03.html
    "Chapter 3. Scheduled Reminders"), *Scheduled Reminders*, we used a command-line
    tool to do this. In this chapter, we will create a complete user management tool
    from a web interface to supplement that tool.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理问题之前，我们首先需要确保用户可以从我们的应用程序中创建和管理。在[第3章](ch03.html "第3章。计划提醒")“计划提醒”中，我们使用命令行工具来完成这个任务。在本章中，我们将从Web界面创建一个完整的管理工具，以补充该工具。
- en: Roles and authentication
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色和认证
- en: 'Before we get into managing our users, let''s take a look at how authentication
    and roles are handled within our application. Within the `UserController` and
    `IssueController` provided with the skeleton application is a more complex `accessRules()`
    method that has a new attribute added to it. Let''s take a look at this method
    within `UserController`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始管理用户之前，让我们看看在我们的应用程序中如何处理认证和角色。在骨架应用程序提供的`UserController`和`IssueController`中有一个更复杂的`accessRules()`方法，它添加了一个新属性。让我们看看`UserController`中的这个方法：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, we now have a new attribute called `expression` listed within
    this method. Internally, Yii will evaluate this expression to a Boolean value.
    If that expression resolves to true, and the actions and user condition match,
    then a user is allowed to proceed to the action. In our case, we are checking
    that `Yii::app()->user->role` has a particular value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们现在在这个方法中列出了一个名为`expression`的新属性。在内部，Yii将评估这个表达式为一个布尔值。如果该表达式解析为true，并且操作和用户条件匹配，则允许用户继续执行操作。在我们的情况下，我们正在检查`Yii::app()->user->role`是否具有特定的值。
- en: 'Out of the box, Yii doesn''t know what that value should be, so unless we define
    it, it will be undefined. Since `Yii::app()->user` is a `CWebUser` object, we
    can add additional information to it when we create the `UserIdentity` component.
    If we take a look at the `UserIdentity` component supplied with the project, we
    can see this attribute being added via the `CUserIdentity setState()` method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii不知道该值应该是多少，除非我们定义它，否则它将是未定义的。由于`Yii::app()->user`是一个`CWebUser`对象，我们可以在创建`UserIdentity`组件时向其添加额外的信息。如果我们查看项目提供的`UserIdentity`组件，我们可以看到这个属性是通过`CUserIdentity
    setState()`方法添加的：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Yii will then store this information within our `$_SESSION` variable once the
    user logs in, allowing us to reference it as long as the session is active.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录后，Yii将把此信息存储在我们的`$_SESSION`变量中，允许我们在会话活跃期间引用它。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While using simple Boolean expressions is easy, should we ever want to change
    which users have access to our system, we would have to refactor our controller
    methods rather than data in our database. Consider instead creating a model method,
    such as `User::isSupporter()` or `User::isAdmin()`. These methods make it more
    clear who has access to our actions and will make your application easier to maintain
    in the future.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用简单的布尔表达式很容易，但如果我们想更改哪些用户可以访问我们的系统，我们就必须重构我们的控制器方法，而不是数据库中的数据。相反，可以考虑创建一个模型方法，例如`User::isSupporter()`或`User::isAdmin()`。这些方法使谁有权访问我们的操作更加清晰，并将使您的应用程序在未来更容易维护。
- en: Listing users
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出用户
- en: Now that we know how roles work within our application, let's start building
    our controller methods for our `UserController`. Open `protected/controllers/UserController.php`,
    and you can see that we already have definitions for the methods we will be implementing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了在我们的应用程序中角色是如何工作的，让我们开始构建我们的`UserController`控制器方法。打开`protected/controllers/UserController.php`，您可以看到我们已经为将要实现的方法提供了定义。
- en: 'To display a list of our users, we''ll be using the `User::search()` method
    within our controller and a `CGridView` widget within our view:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示用户列表，我们将在控制器中使用 `User::search()` 方法，并在视图中使用 `CGridView` 小部件：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Within our `index.php` file at `views/user/`, we''ll load a `CGridView` instance:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `views/user/` 的 `index.php` 文件中，我们将加载一个 `CGridView` 实例：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Within our `CGridView` instance's columns attribute, we've defined a custom
    column called `CButtonColumn`. `CButtonColumn` allows us to add a series of useful
    buttons to a `CGridView` instance, such as a view button, an update button, and
    a delete button, with all the necessary JavaScript. By taking advantage of this
    column, we now have quick access to these actions from within our view.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `CGridView` 实例的列属性中，我们定义了一个名为 `CButtonColumn` 的自定义列。`CButtonColumn` 允许我们在
    `CGridView` 实例中添加一系列有用的按钮，例如查看按钮、更新按钮和删除按钮，并包含所有必要的 JavaScript。通过利用这个列，我们现在可以快速从我们的视图中访问这些操作。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about `CButtonColumn` on its Yii Class Reference page located
    at [http://www.yiiframework.com/doc/api/1.1/CButtonColumn](http://www.yiiframework.com/doc/api/1.1/CButtonColumn).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在其 Yii 类参考页面了解更多关于 `CButtonColumn` 的信息，页面地址为 [http://www.yiiframework.com/doc/api/1.1/CButtonColumn](http://www.yiiframework.com/doc/api/1.1/CButtonColumn).
- en: Deleting users
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除用户
- en: 'Next, we should implement an `actionDelete()` method to work with our delete
    button. To make things easier, we can add a helpful `loadModel()` method as well
    to perform all the necessary checks for us. Have a look at the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该实现一个 `actionDelete()` 方法来处理我们的删除按钮。为了简化操作，我们可以添加一个有用的 `loadModel()`
    方法来为我们执行所有必要的检查。查看以下代码：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating and updating users
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和更新用户
- en: 'Next, we can create our `actionSave()` method that will handle both creating
    and updating our users. Since our view will be passing us all the information
    we need, we use a simple `$user->save()` call to save our information. Have a
    look at the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建一个 `actionSave()` 方法来处理创建和更新用户。由于我们的视图将传递给我们所有需要的信息，我们使用简单的 `$user->save()`
    调用来保存我们的信息。查看以下代码：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this action, we've also deliberately thrown a `try`/`catch` block around
    our `save` method. We've done this because we've put a unique index constraint
    on the `email` field of our database. If we attempt to save two users to our database
    with the same e-mail, Yii will throw an internal error since it doesn't know how
    to handle the constraint. Within our controller, we can catch this error and simply
    return a more friendly error to the user in `$form->errorSummary($model)` in our
    view via the `$user->addError()` method.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们还故意在 `save` 方法周围添加了一个 `try`/`catch` 块。我们这样做是因为我们在数据库的 `email` 字段上设置了一个唯一索引约束。如果我们尝试将两个具有相同电子邮件的用户保存到我们的数据库中，由于
    Yii 不知道如何处理约束，它将抛出一个内部错误。在我们的控制器中，我们可以捕获这个错误，并通过在视图中使用 `$user->addError()` 方法，在
    `$form->errorSummary($model)` 中向用户返回一个更友好的错误信息。
- en: 'Then, copy the `view/user/save.php` file from the project resources folder
    into your project. Within our view, we can populate a select dropdown of all the
    roles currently in our database using `CHtml::listData()`. Using this method allows
    us to add new roles to our database without having to alter a view in the future:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将项目资源文件夹中的 `view/user/save.php` 文件复制到你的项目中。在我们的视图中，我们可以使用 `CHtml::listData()`
    来填充一个下拉选择框，显示我们数据库中当前所有的角色。使用这种方法，我们可以在未来无需修改视图的情况下向数据库中添加新的角色：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Viewing users and associated issues
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看用户和相关问题
- en: 'Finally, we should create a view to display a particular user and all the unresolved
    issues currently assigned to them. For our `actionView()` method, add the following
    code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该创建一个视图来显示特定用户及其当前分配的所有未解决问题的详细信息。对于我们的 `actionView()` 方法，添加以下代码：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, copy the `view.php` file at `views/user/` from the project resources
    folder into our project, and open it. At the bottom of this file, you''ll see
    a call to `renderPartial()` to render a view that we haven''t created yet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 `views/user/` 中的 `view.php` 文件从项目资源文件夹复制到我们的项目中，并打开它。在文件的底部，你会看到一个 `renderPartial()`
    调用，用于渲染我们尚未创建的视图：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Yii, the `//` notation before a layout indicates that Yii should search for
    the view file in the main application `views` folder. You can read more about
    how Yii loads view files at [http://www.yiiframework.com/doc/api/1.1/CController#getLayoutFile-detail](http://www.yiiframework.com/doc/api/1.1/CController#getLayoutFile-detail).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Yii 中，布局前的 `//` 注释表示 Yii 应该在主应用程序的 `views` 文件夹中搜索视图文件。你可以在 [http://www.yiiframework.com/doc/api/1.1/CController#getLayoutFile-detail](http://www.yiiframework.com/doc/api/1.1/CController#getLayoutFile-detail)
    了解更多关于 Yii 加载视图文件的信息。
- en: 'We''ll use this view file across our application to ensure that all of our
    lists look consistent. Before moving on, let''s create this issue view. Create
    a new file in `views/issues/issue.php` and add the following `CGridView` widget:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整个应用程序中使用这个视图文件，以确保所有列表看起来一致。在继续之前，让我们创建这个问题视图。在 `views/issues/issue.php`
    中创建一个新文件，并添加以下 `CGridView` 小部件：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: While our view will now render, we don't yet have any issues in our database
    to display, so results will not be shown. Once we've added issues, we can come
    back to this view to see all the issues associated with a user.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的视图现在可以渲染，但我们数据库中还没有任何问题可以显示，因此不会显示结果。一旦我们添加了问题，我们就可以回到这个视图来查看与用户相关联的所有问题。
- en: Implementing the issue-management component
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现问题管理组件
- en: At the core of our application are the issues that users will submit. For this
    application, we'll assume that users will submit new issues for themselves, and
    that supporters will be supporting those issues. To ensure that issues are created
    for just the logged-in user, we have to make a few changes to our Issues model.
    Open `protected/models/Issues.php`, and let's get started.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的核心是用户将提交的问题。对于这个应用程序，我们将假设用户将为自己提交新问题，支持者将支持这些问题。为了确保只为登录用户创建问题，我们必须对我们的问题模型进行一些更改。打开
    `protected/models/Issues.php`，让我们开始吧。
- en: The Issues model
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题模型
- en: 'Provided at the top of our skeleton model are properties designed to help us
    later in the model:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的骨架模型顶部提供了属性，这些属性将帮助我们稍后在模型中使用：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first property `$_isNewRecord` is a Boolean value that we'll use within
    our `afterSave()` method to determine what e-mail will be sent. While `CActiveRecord`
    provides a property called `$isNewRecord`, Yii changes this value to FALSE before
    the `afterSave()` method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性 `$_isNewRecord` 是一个布尔值，我们将在 `afterSave()` 方法中使用它来决定发送什么电子邮件。虽然 `CActiveRecord`
    提供了一个名为 `$isNewRecord` 的属性，但 Yii 在 `afterSave()` 方法之前将此值更改为 FALSE。
- en: The second property `$_isEmailCreate` is also a Boolean value. Since the e-mails
    we receive won't have a session associated with them, we need to know what user
    to associate the issue with. Since we'll restrict issues' owners to the currently
    logged-in user, we need a way to override this behavior for e-mail submissions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个属性 `$_isEmailCreate` 也是一个布尔值。由于我们收到的电子邮件不会有与之关联的会话，我们需要知道将问题关联给哪个用户。由于我们将限制问题的所有者为当前登录用户，我们需要一种方法来覆盖电子邮件提交的行为。
- en: 'After verifying that these properties are added, we can begin work on the other
    methods that we need to add to this model:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证这些属性已添加后，我们可以开始工作于需要添加到该模型的其他方法：
- en: 'The first method we''ll need to implement in our Issue model is a `beforeSave()`
    method to restrict the customer of an issue. Within this method, we''ll want to
    also set the status of new issues to `New`, and flag our `$_isNewRecord` property
    so that we can use it in our `afterSave()` method. Additionally, we''ll want to
    prevent accidental changes to `customer_id` should it somehow be changed on an
    existing issue:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Issue 模型中需要实现的第一种方法是 `beforeSave()` 方法，以限制问题的客户。在这个方法中，我们还想将新问题的状态设置为 `New`，并标记我们的
    `$_isNewRecord` 属性，以便我们可以在 `afterSave()` 方法中使用它。此外，我们还想防止对 `customer_id` 的意外更改，如果它在现有问题中意外更改：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we need to update the `afterSave()` method so that it sends e-mails to
    the customer. For this model, we''ll send an e-mail to the user if an issue has
    been created for them or if an issue''s status has been resolved. To do this,
    we''ll use SendGrid. Before adding this method, verify that your `params.php`
    file at `protected/config/` has the correct credentials in it:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 `afterSave()` 方法，以便向客户发送电子邮件。对于这个模型，如果为他们创建了一个问题或解决了问题的状态，我们将向用户发送电子邮件。为此，我们将使用
    SendGrid。在添加此方法之前，请确保您的 `protected/config/` 目录中的 `params.php` 文件包含正确的凭证：
- en: '[PRE19]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The final change we''ll need to make to the Issue model is in the `search()`
    method. Ideally, we''d like our supporters to be able to search for an issue by
    either the ID of the issue or a keyword in the title or description. To do this,
    we can simply repurpose the `Issue::search()` method by changing the `$criteria->compare()`
    call on those two attributes to `$criteria->addSearchCondition()`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对 Issue 模型进行的最后一个更改是在 `search()` 方法中。理想情况下，我们希望我们的支持者能够通过问题的 ID 或标题或描述中的关键字来搜索问题。为此，我们可以简单地重用
    `Issue::search()` 方法，通过更改 `$criteria->compare()` 调用这两个属性来使用 `$criteria->addSearchCondition()`：
- en: '[PRE20]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Issues Update model
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题更新模型
- en: Before working on the `IssueController`, we'll also need to make a few changes
    to our `protected/models/Update.php` model. These changes will allow us to automatically
    assign the correct owner of an update to the update and help us send an e-mail
    to the user when an update is added to the issue.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始工作于 `IssueController` 之前，我们还需要对我们的 `protected/models/Update.php` 模型进行一些更改。这些更改将允许我们自动将正确的所有者分配给更新，并帮助我们向用户发送在议题中添加更新时的电子邮件。
- en: 'Once again in our model, we have a property that we can use to find out whether
    this update came from an e-mail or not:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在我们的模型中，我们有一个属性，我们可以用它来确定这个更新是否来自电子邮件：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this model, we're using this attribute to determine whether an e-mail should
    be sent to the user or not as we shouldn't notify the user of an update that they
    submitted.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，我们使用这个属性来确定是否应该向用户发送电子邮件，因为我们不应该通知用户他们提交的更新。
- en: 'Additionally, we''ll need to make two updates to our model methods:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要对我们的模型方法进行两项更新：
- en: 'The first update we need to make to our model is in the `beforeSave()` method.
    If the user is logged in, the author of that update should be assigned to that
    user. Have a look at the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对模型进行的第一次更新是在 `beforeSave()` 方法中。如果用户已登录，该更新的作者应分配给该用户。请查看以下代码：
- en: '[PRE22]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then we should update our `afterSave()` method so that the e-mail is sent to
    the user in the appropriate instances:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们应该更新我们的 `afterSave()` 方法，以便在适当的实例中向用户发送电子邮件：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Showing issues that belong to the user
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示属于用户的议题
- en: 'With the updates to our models completed, we can now start working on the `IssueController`.
    The first method that we should implement is `actionIndex()`, which will show
    the logged-in users all the unresolved issues currently assigned to them:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们对模型的更新后，现在我们可以开始工作于 `IssueController`。我们应该实现的第一种方法是 `actionIndex()`，它将向登录用户展示所有当前分配给他们的未解决事项：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then in our `index.php` file at `views/issue/`, we can reuse the partial view
    that we created earlier to display all of these issues:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的 `index.php` 文件 `views/issue/` 中，我们可以重用我们之前创建的局部视图来显示所有这些议题：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Searching for issues
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索议题
- en: 'The next method we need to implement is the `actionSearch()` method that will
    allow us to search for issues either by the issue ID or by a keyword in the title
    or description. To do this, we''ll create a search view that will post to our
    action with the search parameters. If that `$_GET` parameter is numeric, and we
    can find an issue with that ID, we''ll immediately redirect to it. Otherwise,
    we''ll use the `Issue::search()` method that we modified earlier to search through
    all the issues in our database. Our controller action will look as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现的下一个方法是 `actionSearch()` 方法，它将允许我们通过议题 ID 或标题或描述中的关键词来搜索议题。为此，我们将创建一个搜索视图，该视图将带有搜索参数发送到我们的动作。如果那个
    `$_GET` 参数是数字的，并且我们可以找到具有该 ID 的议题，我们将立即重定向到它。否则，我们将使用我们之前修改过的 `Issue::search()`
    方法来搜索数据库中的所有议题。我们的控制器动作将如下所示：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, our `search.php` file at `views/issue/` will look as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的 `search.php` 文件在 `views/issue/` 下的样子如下：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating issues
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建事项
- en: 'Next, we''ll need to implement an action and view to create new issues. Since
    new issues won''t have updates associated with them, create and update actions
    will need to be separate. For the `actionCreate()` method, we''ll simply populate
    the values from the `$_POST` parameters:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现一个创建新议题的动作和视图。由于新议题不会有相关的更新，创建和更新动作需要分开。对于 `actionCreate()` 方法，我们将简单地从
    `$_POST` 参数中填充值：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Then, copy the `create.php` file located at `views/issue/` from our project
    resources folder into your project.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将位于 `views/issue/` 下的 `create.php` 文件从我们的项目资源文件夹复制到你的项目中。
- en: 'Within this controller action is another reference to our `CWebUser` object.
    In previous chapters, every time we made a change to a database item from our
    controllers, we either reloaded the page or redirected to a new page. To make
    our applications more user friendly, we can set flash messages that will only
    show up once. To set these messages, we''ll use the `setFlash()` method of our
    `CWebUser` object:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个控制器动作中，还有一个对我们 `CWebUser` 对象的引用。在之前的章节中，每次我们从控制器更改数据库项时，我们不是重新加载页面就是重定向到新页面。为了使我们的应用程序更友好，我们可以设置只显示一次的闪存消息。为了设置这些消息，我们将使用
    `CWebUser` 对象的 `setFlash()` 方法：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, from within our views, we can see whether a flash message exists for
    a particular key using `hasFlash()`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从我们的视图中，我们可以使用 `hasFlash()` 来查看是否存在特定键的闪存消息：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, display that flash message using `getFlash()`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`getFlash()`显示该闪存消息：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Alternatively, if we don''t want to look for flash messages in a particular
    view, we can tell our layout to find all flash messages and display them. Have
    a look at the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们不想在特定视图中查找闪存消息，我们可以告诉布局查找所有闪存消息并将它们显示出来。查看以下代码：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Viewing and updating issues
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看和更新问题
- en: 'Now that we can create and find issues, we need to be able to view and update
    them. For this action, we''ll be consolidating both functions into a single action.
    Because users of different roles will be accessing this action, we need to adjust
    it so that users of a particular role can only perform certain tasks:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够创建和查找问题，我们需要能够查看和更新它们。为此操作，我们将合并这两个功能到单个操作中。因为不同角色的用户将访问此操作，我们需要调整它，以便特定角色的用户只能执行某些任务：
- en: 'First, we should generate a `loadModel()` method:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们应该生成一个`loadModel()`方法：
- en: '[PRE33]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then we''ll need to create the `actionUpdate()` function. We''ll start by loading
    the model with that ID and creating a new `Update` object in case an update is
    sent over `$_POST`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建`actionUpdate()`函数。我们将从加载具有该ID的模型并创建一个新的`Update`对象开始，以防通过`$_POST`发送更新：
- en: '[PRE34]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, we should make sure that only administrators, supporters, or the issue
    owner can view the issue. Have a look at the following code:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们应该确保只有管理员、支持者或问题所有者可以查看问题。查看以下代码：
- en: '[PRE35]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, we should allow administrators and supporters to modify the `Issue` object
    itself as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们应该允许管理员和支持者修改`Issue`对象本身，如下所示：
- en: '[PRE36]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, allow any user to submit an update as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，允许任何用户提交更新，如下所示：
- en: '[PRE37]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, we should render the view. When rendering the view, we are also going
    to pass down a `CMarkdownParser` object. Rendering the issue updates in Markdown
    syntax will allow us to easily have access to many different formatting features,
    such as line breaks, text styles, and quoting features. Rendering the updates
    in Markdown will also give us protection against simple XSS attacks, such as JavaScript
    injection attempts:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们应该渲染视图。在渲染视图时，我们还将传递一个`CMarkdownParser`对象。以Markdown语法渲染问题更新将使我们能够轻松访问许多不同的格式化功能，例如换行、文本样式和引用功能。以Markdown格式渲染更新还将保护我们免受简单的XSS攻击，例如JavaScript注入尝试：
- en: '[PRE38]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about the Markdown syntax and how to use Markdown at [http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/)了解更多关于Markdown语法以及如何使用Markdown的信息。
- en: Finally we'll create an update view that will allow us to see the issue and
    updates from different roles. Copy the `update.php` view located at `view/issue/`
    from the project resources folder into your project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个更新视图，使我们能够从不同的角色查看问题和更新。将位于`view/issue/`的`update.php`视图从项目资源文件夹复制到您的项目中。
- en: E-mail views
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子邮件视图
- en: 'Before we can start using our application, we need to create three different
    e-mail views, one for each type of e-mail that will be sent to the user. These
    views will contain information about the issue itself and information about whatever
    change was applied to it. It will also contain special formatting that will enable
    the user to reply to that e-mail and allow us to understand what parts of the
    e-mail should be included as an update:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用应用程序之前，我们需要创建三个不同的电子邮件视图，一个用于将发送给用户的每种类型的电子邮件。这些视图将包含有关问题本身的信息以及对其应用了哪些更改的信息。它还将包含特殊的格式化，使用户能够回复该电子邮件，并使我们能够理解哪些电子邮件部分应包含在更新中：
- en: 'The first view that we should create is a created view. This view will have
    information about a newly created issue. It will also contain a special marker
    that our application will be able to identify so that only the user''s response
    is included in the update. Create a new file in `views/email/created.php`, and
    add the following code:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该创建的第一个视图是创建视图。此视图将包含有关新创建的问题的信息。它还将包含一个特殊标记，我们的应用程序将能够识别，以便只包含用户的响应。在`views/email/created.php`中创建一个新文件，并添加以下代码：
- en: '[PRE39]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then create an updated view in `views/email/updated.php`. This e-mail will
    tell the user that their issue was updated and will contain the update that was
    applied to the issue. Once again, it will contain a special marker so that if
    the user replies to our e-mail, we know what content to include in the update
    and what content to ignore:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在`views/email/updated.php`中创建一个更新的视图。这封电子邮件将告知用户他们的问题已更新，并将包含对问题应用更新的内容。同样，它将包含一个特殊标记，以便如果用户回复我们的电子邮件，我们知道在更新中包含哪些内容以及忽略哪些内容：
- en: '[PRE40]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, we need to create a view to notify the user that their issue has been
    resolved. Open `resolved.php` at `views/email/` and add the following:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建一个视图来通知用户他们的问题已被解决。在`views/email/`中打开`resolved.php`并添加以下内容：
- en: '[PRE41]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Testing our application
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的应用程序
- en: Since the domain `example.com` is not a valid domain to send e-mails, create
    for yourself a new user with a valid e-mail address, log in as that user, and
    create several issues. For each issue you create, a new e-mail will be sent to
    you notifying you that the issue has been created. Moreover, updating an issue
    as any supporter or administrator will notify the current supporter of the issue
    via e-mail with the provided update. Finally, if you have a supporter or an administrator
    resolve an issue, then you will receive an e-mail to notify you that the issue
    was resolved.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于域名`example.com`不是一个有效的发送电子邮件的域名，因此为自己创建一个具有有效电子邮件地址的新用户，以该用户身份登录，并创建几个问题。对于您创建的每个问题，都会向您发送一封新电子邮件，通知您问题已被创建。此外，任何支持者或管理员更新问题都会通过电子邮件通知当前的支持者，并提供更新内容。最后，如果您有支持者或管理员解决问题，您将收到一封电子邮件通知您问题已被解决。
- en: Once you have verified that all the functionality is working, we can move on
    to handling and parsing inbound e-mails with SendGrid.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您验证了所有功能正常，我们就可以继续使用SendGrid处理和解析传入的电子邮件。
- en: Handling inbound e-mail parsing
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理传入电子邮件解析
- en: While there are many different ways of handling inbound e-mail parsing, one
    of the easiest ways is to send that e-mail to a third party, who will then parse
    the contents for us, and send it as a `$_POST` request to an open endpoint in
    our application. This is exactly what SendGrid will do for us. However, before
    we can start using SendGrid, we need to make a couple of changes to our DNS server
    for our domain and to our SendGrid account.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然处理传入电子邮件解析的方法有很多种，但其中最简单的方法之一是将电子邮件发送给第三方，然后由第三方为我们解析内容，并将其作为`$_POST`请求发送到我们应用程序的公开端点。这正是SendGrid为我们所做的事情。然而，在我们开始使用SendGrid之前，我们需要对我们的域名DNS服务器和SendGrid账户进行一些更改。
- en: Sending e-mails to SendGrid
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送电子邮件到SendGrid
- en: 'To direct our e-mails to SendGrid in order to pass, we first need to make a
    change to our DNS settings. In keeping with our example domain `chapter4.example.com`,
    we first need to log in to our DNS host and add a new Mail Exchange (MX) record
    to our subdomain. Specifically, we need to add an MX record with a priority of
    `10` to `mx.sendgrid.net`. In most DNS systems, that record would look as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的电子邮件定向到SendGrid以通过，我们首先需要更改我们的DNS设置。按照我们的示例域名`chapter4.example.com`，我们首先需要登录到我们的DNS主机，并在子域名中添加一个新的邮件交换（MX）记录。具体来说，我们需要添加一个优先级为`10`的MX记录到`mx.sendgrid.net`。在大多数DNS系统中，该记录如下所示：
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Alternatively, if you''re using a service like CloudFlare to handle your DNS,
    your entry may look as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用像CloudFlare这样的服务来处理您的DNS，您的条目可能如下所示：
- en: '![Sending e-mails to SendGrid](img/7734OS_04_02.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![发送电子邮件到SendGrid](img/7734OS_04_02.jpg)'
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Depending upon your DNS provider, DNS settings may take up to 24 to 48 hours
    to propagate. Before leaving this step, verify that the MX record was added and
    propagated using either a command-line tool, such as a DIG or a free, online web
    tool.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的DNS提供商，DNS设置可能需要24到48小时才能传播。在离开此步骤之前，请验证MX记录是否已添加并传播，可以使用命令行工具，如DIG或免费的在线网络工具。
- en: Adjusting SendGrid Parse settings
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整SendGrid解析设置
- en: 'Once you''ve updated your DNS settings, you then need to update your SendGrid
    Parse API settings so that SendGrid knows where to send your e-mails. Navigate
    to [www.sendgrid.com/developer/reply](http://www.sendgrid.com/developer/reply),
    and then fill in the parse settings page as follows and submit the record:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 更新您的DNS设置后，您接下来需要更新您的SendGrid解析API设置，以便SendGrid知道将您的电子邮件发送到何处。导航到[www.sendgrid.com/developer/reply](http://www.sendgrid.com/developer/reply)，然后填写以下解析设置页面并提交记录：
- en: '![Adjusting SendGrid Parse settings](img/7734OS_04_03.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![调整SendGrid解析设置](img/7734OS_04_03.jpg)'
- en: Once you've added the record, you should see confirmation at the bottom of the
    page. Once this has been completed, you can now send e-mails to `*@chapter4.example.com`,
    and SendGrid will parse it and forward it onto your `actionEmailUpdate()` method
    of our `IssueController`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 添加记录后，你应该在页面底部看到确认信息。一旦完成，你现在可以向`*@chapter4.example.com`发送电子邮件，SendGrid将解析它并将它转发到我们的`IssueController`的`actionEmailUpdate()`方法。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about the SendGrid Parse API webhook at [http://sendgrid.com/docs/API_Reference/Webhooks/parse.html](http://sendgrid.com/docs/API_Reference/Webhooks/parse.html).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://sendgrid.com/docs/API_Reference/Webhooks/parse.html](http://sendgrid.com/docs/API_Reference/Webhooks/parse.html)了解更多关于SendGrid解析API
    webhook的信息。
- en: Creating and updating issues over e-mail
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过电子邮件创建和更新问题
- en: 'Now that our DNS settings and SendGrid account are set, we need to add the
    necessary functionality to both create and update issues over e-mail. Then, the
    action that we create will also create new users in our database if a new user
    creates an issue for us:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了DNS设置和SendGrid账户，我们需要添加必要的功能来通过电子邮件创建和更新问题。然后，我们创建的操作也将在我们数据库中为创建问题的任何新用户创建新用户：
- en: 'With SendGrid configured, our `actionEmailUpdate()` method will receive a `POST`
    request from SendGrid anytime someone sends an e-mail to our application.. All
    the information that we will need to work with will be in a `$_POST` variable
    once it arrives. However, some of this information may not be readily accessible.
    For instance, the e-mail address will reach us as `Example User" <test@chapter4.example.com>"`
    which isn''t very useful to us. To make this e-mail more useful, we need to create
    a utility function that will break this information apart for us in our `IssueController`
    as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置好SendGrid后，我们的`actionEmailUpdate()`方法将在有人向我们的应用程序发送电子邮件时收到一个`POST`请求。一旦到达，我们将需要的所有信息都将包含在`$_POST`变量中。然而，其中一些信息可能不容易访问。例如，电子邮件地址将以`"Example
    User" <test@chapter4.example.com>`的形式到达，这对我们来说并不太有用。为了使这封电子邮件更有用，我们需要在`IssueController`中创建一个实用函数，将信息拆分如下：
- en: '[PRE43]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, within our `actionEmailUpdate()` method, we''ll begin by retrieving this
    information:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在我们的`actionEmailUpdate()`方法中，我们首先将检索以下信息：
- en: '[PRE44]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, we''ll need to search for the subject of the e-mail for the ID of our
    issue. In the e-mails we''re sending out, the subject has the format `[Issue #<ID>]
    <info>`. Have a look at the following code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要搜索电子邮件的主题以找到我们问题的ID。在我们发送的电子邮件中，主题的格式为`[问题编号#<ID>] <info>`。请看以下代码：
- en: '[PRE45]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we need to find a user in our system with that e-mail address. If we
    are unable to find that user, we need to create a new user with that e-mail address:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在我们的系统中找到具有该电子邮件地址的用户。如果我们无法找到该用户，我们需要使用该电子邮件地址创建一个新用户：
- en: '[PRE46]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we need to locate an issue with that ID. If an issue with that ID doesn''t
    exist, or the issue doesn''t belong to the user we''re working with, we should
    create a new issue rather than updating an existing one:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要定位具有该ID的问题。如果不存在具有该ID的问题，或者该问题不属于我们正在处理的那位用户，我们应该创建一个新的问题，而不是更新现有的问题：
- en: '[PRE47]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, if we have a good user and issue, we should apply the update. At this
    point, we''ll split the contents of our e-mail along our special marker and only
    include the contents above it in our update. This reduces the amount of data we
    need to store in our database and keeps our interface looking clean and clear
    of e-mail clutter:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果我们有一个好的用户和问题，我们应该应用更新。在这个时候，我们将拆分电子邮件的内容，只包括特殊标记之上的内容在我们的更新中。这减少了我们需要存储在数据库中的数据量，并保持我们的界面看起来干净、清晰，没有电子邮件的杂乱。
- en: '[PRE48]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now that our application can receive e-mails, reply to one of the e-mails you
    received earlier. After a short while, you will be able to navigate to that issue
    and see that your update sent over e-mail was indeed applied. Alternatively, you
    can send a new e-mail to your application. In a short while, a new issue will
    be created, and the application will respond to you with an e-mail notifying you
    that a new issue was created.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应用程序可以接收电子邮件，回复你之前收到的其中一封电子邮件。过一会儿，你将能够导航到该问题，并看到你通过电子邮件发送的更新确实已经应用。或者，你也可以向你的应用程序发送新的电子邮件。过一会儿，将创建一个新的问题，应用程序将通过电子邮件通知你已创建新问题。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of ground in this chapter! We went over creating and managing
    users from within our application, sending e-mails about certain events, and how
    to receive e-mails and incorporate that information into our application. We also
    added roles to our users and made our application only respond to certain actions
    of users with a particular role.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了大量的内容！我们讨论了如何在应用程序内部创建和管理用户，发送关于特定事件的电子邮件，以及如何接收电子邮件并将这些信息整合到我们的应用程序中。我们还为我们的用户添加了角色，并使我们的应用程序只对具有特定角色的用户的某些操作做出响应。
- en: Before continuing, think of ways in which you could improve this application,
    and try to implement them. For example, you could change it so that the access
    rules expressions are answered by the models rather than hard-coded values. Alternatively,
    you could add new statuses to the application and send out different e-mails when
    those statuses change. Think of all the ways you could make this application better
    to use for the end user.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，想想您如何改进这个应用程序，并尝试实现这些改进。例如，您可以将其修改为让模型而不是硬编码的值来回答访问规则表达式。或者，您可以给应用程序添加新的状态，并在这些状态发生变化时发送不同的电子邮件。想想所有可以使这个应用程序对最终用户更易用的方法。
- en: After adding some new features, go through the Yii documentation located at
    [http://www.yiiframework.com/doc/](http://www.yiiframework.com/doc/) to help you
    better understand some of the methods and properties we used in this chapter.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了一些新功能之后，请查阅位于[http://www.yiiframework.com/doc/](http://www.yiiframework.com/doc/)的Yii文档，以帮助您更好地理解我们在本章中使用的一些方法和属性。
- en: In the next chapter, we will be expanding upon our knowledge to implement a
    micro blogging platform similar to Twitter. To our micro-blogging platform, we'll
    add a registration and password reset system for our end users and allow our end
    users to manage their own accounts. Once you're ready, turn the page and get ready
    to dive deeper into Yii!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展我们的知识，以实现一个类似于Twitter的微型博客平台。在我们的微型博客平台上，我们将为最终用户添加注册和密码重置系统，并允许我们的最终用户管理自己的账户。一旦您准备好了，翻到下一页，准备好深入探索Yii！
