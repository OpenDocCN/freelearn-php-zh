["```php\n<?php\nApp::import('Core', 'Security');\nclass UserShell extends Shell {\npublic $uses = array('User');\npublic function main() {\n$user = $this->in('Enter the username (ENTER to abort):');\nif (empty($user)) {\n$this->_stop();\n}\n$defaultPassword = $this->_randomPassword();;\n$password = $this->in('Enter the password (ENTER to use generated):', null, $defaultPassword);\n$this->out();\n$this->out('USER: '.$user);\n$this->out('PASSWORD: '.$password);\n$this->out();\nif (strtoupper($this->in('Proceed?', array('Y', 'N'), 'N')) != 'Y') {\n$this->_stop();\n}\n$user = array('User' => array(\n'username' => $user,\n'password' => Security::hash($password, null, true)\n));\n$this->User->create();\nif ($this->User->save($user)) {\n$this->out('User created.');\n} else {\n$this->error('Error while creating user.');\n}\n}\nprotected function _randomPassword($size=10) {\n$chars = '@!#$_';\nforeach(array('A'=>'Z', 'a'=>'z', '0'=>'9') as $start => $end) {\nfor ($i=ord($start), $limiti=ord($end); $i <= $limiti; $i++) {\n$chars .= chr($i);\n}\n}\n$totalChars = strlen($chars);\n$password = '';\nfor($i=0; $i < $size; $i++) {\n$password .= $chars[rand(0, $totalChars-1)];\n}\nreturn $password;\n}\n}\n?>\n\n```", "```php\n../cake/console/cake user\n\n```", "```php\n..\\cake\\console\\cake.bat user\n\n```", "```php\nApp::import('Component', 'Auth');\n\n```", "```php\n$this->Auth = new AuthComponent();\n\n```", "```php\n$user = array('User' => array(\n'username' => $user,\n'password' => $this->Auth->password($password)\n));\n\n```", "```php\n\"john\",\"John\",\"Doe\"\n\"jane\",\"Jane\",\"Doe\"\n\"mark\",\"Mark\",\"Doe\"\n\"mathew\",\"Mathew\",\"Doe\"\n\"peter\",\"Peter\",\"Doe\"\n\"roland\",\"Roland\",\"Doe\"\n\n```", "```php\n    public function help() {\n    $this->out('USAGE: $ cake '.$this->shell.' <import <path/to/file> [-limit N | -size N | -verbose] | add>');\n    $this->out('where:');\n    $this->out();\n    $this->out('-limit N: import up to N records');\n    $this->out('-size N: size of generated password');\n    $this->out('-verbose: Verbose output');\n    }\n\n    ```", "```php\n    protected function _parseCSV($path) {\n    $file = fopen($path, 'r');\n    if (!is_resource($file)) {\n    $this->error('Can\\'t open '.$file);\n    }\n    $rows = array();\n    while($row = fgetcsv($file)) {\n    $rows[] = $row;\n    }\n    fclose($file);\n    return $rows;\n    }\n\n    ```", "```php\n    public function import() {\n    $this->_checkArgs(1);\n    $defaults = array(\n    'limit' => null,\n    'size' => 10,\n    'verbose' => false\n    );\n    $options = array_merge(\n    $defaults,\n    array_intersect_key($this->params, $defaults)\n    );\n    $path = $this->args[0];\n    if (!is_file($path) || !is_readable($path)) {\n    $this->error('File '.$path.' cannot be read');\n    }\n    $users = array();\n    foreach($this->_parseCSV($path) as $i => $row) {\n    $users[$row[0]] = $this->_randomPassword($options['size']);\n    if (!empty($options['limit']) && $i + 1 == $options['limit']) {\n    break;\n    }\n    }\n    if ($options['verbose']) {\n    $this->out('Will create '.number_format(count($users)).' accounts');\n    }\n    foreach($users as $userName => $password) {\n    if ($options['verbose']) {\n    $this->out('Creating user '.$userName.'... ', false);\n    }\n    $user = array('User' => array(\n    'username' => $userName,\n    'password' => Security::hash($password, null, true)\n    ));\n    $this->User->create();\n    $saved = ($this->User->save($user) !== false);\n    if (!$saved) {\n    unset($users[$userName]);\n    }\n    if ($options['verbose']) {\n    $this->out($saved ? 'SUCCESS' : 'FAIL');\n    }\n    }\n    $this->out('Created accounts:');\n    foreach($users as $userName => $password) {\n    $this->out($userName.' : '.$password);\n    }\n    }\n\n    ```", "```php\n$ cake/console/cake user import app/tmp/users.csv -verbose\n\n```", "```php\n    public $tasks = array('Help');\n    public static $commands = array(\n    'add',\n    'import' => array(\n    'help' => 'Import user records from a CSV file',\n    'args' => array(\n    'path' => array(\n    'help' => 'Path to CSV file',\n    'mandatory' => true\n    )\n    ),\n    'params' => array(\n    'limit' => array(\n    'type' => 'int',\n    'help' => 'import up to N records'\n    ),\n    'size' => array(\n    'value' => 10,\n    'type' => 'int',\n    'help' => 'size of generated password'\n    ),\n    'verbose' => array(\n    'value' => false,\n    'type' => 'bool',\n    'help' => 'Verbose output'\n    )\n    )\n    )\n    );\n\n    ```", "```php\n    $this->_checkArgs(1);\n    $defaults = array(\n    'limit' => null,\n    'size' => 10,\n    'verbose' => false\n    );\n    $options = array_merge(\n    $defaults,\n    array_intersect_key($this->params, $defaults)\n    );\n    $path = $this->args[0];\n\n    ```", "```php\n    $options = $this->Help->parameters;\n    extract($this->Help->arguments);\n\n    ```", "```php\n    <?php\n    class HelpTask extends Shell {\n    public $parameters = array();\n    public $arguments = array();\n    protected $commands = array();\n    public function initialize() {\n    $shellClass = Inflector::camelize($this->shell).'Shell';\n    $vars = get_class_vars($shellClass);\n    if (!empty($vars['commands'])) {\n    foreach($vars['commands'] as $command => $settings) {\n    if (is_numeric($command)) {\n    $command = $settings;\n    $settings = array();\n    }\n    if (!empty($settings['args'])) {\n    $args = array();\n    foreach($settings['args'] as $argName => $arg) {\n    if (is_numeric($argName)) {\n    $argName = $arg;\n    $arg = array();\n    }\n    $args[$argName] = array_merge(array(\n    'help' => null,\n    'mandatory' => false\n    ), $arg);\n    }\n    $settings['args'] = $args;\n    }\n    if (!empty($settings['params'])) {\n    $params = array();\n    foreach($settings['params'] as $paramName => $param) {\n    if (is_numeric($paramName)) {\n    $paramName = $param;\n    $param = array();\n    }\n    $params[$paramName] = array_merge(array(\n    'help' => null,\n    'type' => 'string'\n    ), $param);\n    }\n    }\n    $this->commands[$command] = array_merge(array(\n    'help' => null,\n    'args' => array(),\n    'params' => array()\n    ), $settings);\n    }\n    }\n    if (empty($this->command) && !in_array('main', get_class_methods($shellClass))) {\n    $this->_welcome();\n    $this->_help();\n    } elseif (!empty($this->command) && array_key_exists($this->command, $this->commands)) {\n    $command = $this->commands[$this->command];\n    $number = count(array_filter(Set::extract(array_values($command['args']), '/mandatory')));\n    if ($number > 0 && (count($this->args) - 1) < $number) {\n    $this->err('WRONG number of parameters');\n    $this->out();\n    $this->_help($this->command);\n    } elseif ($number > 0) {\n    $i = 0;\n    foreach($command['args'] as $argName => $arg) {\n    if ($number >= $i && isset($this->args[$i+1])) {\n    $this->arguments[$argName] = $this->args[$i+1];\n    }\n    $i++;\n    }\n    }\n    $values = array_intersect_key($this->params, $command['params']);\n    foreach($command['params'] as $settingName => $setting) {\n    if (!array_key_exists($settingName, $values)) {\n    $this->parameters[$settingName] = array_key_exists('value', $setting) ?\n    $setting['value'] :\n    null;\n    } elseif ($setting['type'] == 'int' && !is_numeric($values[$settingName])) {\n    $this->err('ERROR: wrong value for '.$settingName);\n    $this->out();\n    $this->_help($this->command);\n    } else {\n    if ($setting['type'] == 'bool') {\n    $values[$settingName] = !empty($values[$settingName]);\n    }\n    $this->parameters[$settingName] = $values[$settingName];\n    }\n    }\n    }\n    }\n    }\n\n    ```", "```php\n    public function execute() {\n    $this->_help(!empty($this->args) ? $this->args[0] : null);\n    }\n    protected function _help($command = null) {\n    $usage = 'cake '.$this->shell;\n    if (empty($this->commands)) {\n    $this->out($usage);\n    return;\n    }\n    $lines = array();\n    $usages = array();\n    if (empty($command) || !array_key_exists($command, $this->commands)) {\n    foreach(array_keys($this->commands) as $currentCommand) {\n    $usages[] = $this->_usageCommand($currentCommand);\n    if (!empty($lines)) {\n    $lines[] = null;\n    }\n    $lines = array_merge($lines, $this->_helpCommand($currentCommand));\n    }\n    } else {\n    $usages = (array) $this->_usageCommand($command);\n    $lines = $this->_helpCommand($command);\n    }\n    if (!empty($usages)) {\n    $usage .= ' ';\n    if (empty($command)) {\n    $usage .= '<';\n    }\n    $usage .= implode(' | ', $usages);\n    if (empty($command)) {\n    $usage .= '>';\n    }\n    }\n    $this->out($usage);\n    if (!empty($lines)) {\n    $this->out();\n    foreach($lines as $line) {\n    $this->out($line);\n    }\n    }\n    $this->_stop();\n    }\n\n    ```", "```php\n    protected function _usageCommand($command) {\n    $usage = $command;\n    if (!empty($this->commands[$command]['args'])) {\n    foreach($this->commands[$command]['args'] as $argName => $arg) {\n    $usage .= ' ' . ($arg['mandatory'] ? '<' : '[');\n    $usage .= $argName;\n    $usage .= ($arg['mandatory'] ? '>' : ']');\n    }\n    }\n    if (!empty($this->commands[$command]['params'])) {\n    $usages = array();\n    foreach(array_keys($this->commands[$command]['params']) as $setting) {\n    $usages[] = $this->_helpSetting($command, $setting);\n    }\n    $usage .= ' ['.implode(' | ', $usages).']';\n    }\n    return $usage;\n    }\n    protected function _helpCommand($command) {\n    if (\n    empty($this->commands[$command]['args']) &&\n    empty($this->commands[$command]['params'])\n    ) {\n    return array();\n    }\n    $lines = array('Options for '.$command.':');\n    foreach($this->commands[$command]['args'] as $argName => $arg) {\n    $lines[] = \"\\t\".$argName . (!empty($arg['help']) ? \"\\t\\t\".$arg['help'] : '');\n    }\n    foreach(array_keys($this->commands[$command]['params']) as $setting) {\n    $lines[] = \"\\t\".$this->_helpSetting($command, $setting, true);\n    }\n    return $lines;\n    }\n    protected function _helpSetting($command, $settingName, $useHelp = false) {\n    $types = array('int' => 'N', 'string' => 'S', 'bool' => null);\n    $setting = $this->commands[$command]['params'][$settingName];\n    $type = array_key_exists($setting['type'], $types) ? $types[$setting['type']] : null;\n    $help = '-'.$settingName . (!empty($type) ? ' '.$type : '');\n    if ($useHelp && !empty($setting['help'])) {\n    $help .= \"\\t\\t\".$setting['help'];\n    if (array_key_exists('value', $setting) && !is_null($setting['value'])) {\n    $help .= '. DEFAULTS TO: ';\n    if (empty($type)) {\n    $help .= $setting['value'] ? 'Enabled' : 'Disabled';\n    } else {\n    $help .= $setting['value'];\n    }\n    }\n    }\n    return $help;\n    }\n\n    ```", "```php\n$ cake/console/cake user\n\n```", "```php\n$ cake/console/cake user help import\n\n```", "```php\n$ cake/console/cake user import\n\n```", "```php\n$ cake/console/cake user help\n\n```", "```php\nCREATE TABLE `subscribers`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`name` VARCHAR(255) NOT NULL,\n`email` VARCHAR(255) NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nCREATE TABLE `newsletters`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`title` VARCHAR(255) NOT NULL,\n`body` TEXT NOT NULL,\n`sent` TINYINT(1) UNSIGNED NOT NULL default 0,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nCREATE TABLE `newsletters_subscribers`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`newsletter_id` INT UNSIGNED NOT NULL,\n`subscriber_id` INT UNSIGNED NOT NULL,\n`sent` TINYINT(1) UNSIGNED NOT NULL default 0,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nINSERT INTO `subscribers`(`name`, `email`) VALUES\n('John Doe', 'john.doe@email.com'),\n('Jane Doe', 'jane.doe@email.com');\nINSERT INTO `newsletters`(`title`, `body`) VALUES\n('My first newsletter', 'This is the body for <strong>my first newsletter</strong>');\n\n```", "```php\n<?php\nclass Newsletter extends AppModel {\npublic $hasMany = array('NewslettersSubscriber');\n}\n?>\n\n```", "```php\n<?php\nApp::import('Component', 'Email');\nclass EmailShell extends Shell {\npublic $uses = array('Newsletter', 'Subscriber');\npublic function startup() {\n$this->Email = new EmailComponent();\n$this->Email->delivery = 'smtp';\n$this->Email->smtpOptions = array(\n'host' => 'smtp.email.com',\n'username' => 'smtpUser',\n'password' => 'smtpPassword'\n);\n}\npublic function main() {\n$email = !empty($this->params['to']) ? $this->params['to'] : array();\n$newsletter = $this->Newsletter->find('first', array(\n'conditions' => array('sent' => false),\n'recursive' => -1\n));\nif (empty($newsletter)) {\n$this->out('All newsletters have been sent');\n$this->_stop();\n}\n$this->out('Sending newsletter \"'.$newsletter['Newsletter']['title'].'\"');\n$subscribers = $this->Subscriber->find('all');\nforeach($subscribers as $subscriber) {\n$this->out('Sending to '.$subscriber['Subscriber']['email'].'... ', false);\n$currentEmail = !empty($email) ? $email : $subscriber['Subscriber']['email'];\nif (!empty($email)) {\n$this->Email->headers['Destination'] = $subscriber['Subscriber']['email'];\n}\n$this->Email->sendAs = 'html';\n$this->Email->subject = $newsletter['Newsletter']['title'];\n$this->Email->from = 'My Application <info@email.com>';\n$this->Email->to = $subscriber['Subscriber']['name'] . ' <'.$currentEmail.'>';\n$sent = $this->Email->send($newsletter['Newsletter']['body']));\nif ($sent) {\n$this->out('DONE');\n} else {\n$error = !empty($this->Email->smtpError) ? $this->Email->smtpError : '';\n$this->out('ERROR' . (!empty($error) ? ': '.$error : ''));\n}\n$this->Newsletter->NewslettersSubscriber->create(array(\n'newsletter_id' => $newsletter['Newsletter']['id'],\n'subscriber_id' => $subscriber['Subscriber']['id'],\n'sent' => $sent\n));\n$this->Newsletter->NewslettersSubscriber->save();\n$this->Email->reset();\n}\n$this->Newsletter->id = $newsletter['Newsletter']['id'];\n$this->Newsletter->saveField('sent', true);\n}\n}\n?>\n\n```", "```php\n$this->Email->delivery = 'smtp';\n$this->Email->smtpOptions = array(\n'host' => 'smtp.email.com',\n'username' => 'smtpUser',\n'password' => 'smtpPassword'\n);\n\n```", "```php\n$ cake/console/cake email -to my@email.com\n\n```", "```php\nTo: John Doe <my@email.com>\nFrom: My Application <info@email.com>\nSubject: My first newsletter\nX-Mailer: CakePHP Email Component\nX-Destination: john.doe@email.com\n\n```", "```php\n    <?php\n    class SubscribersController extends AppController {\n    public function add() {\n    if (!empty($this->data)) {\n    $this->Subscriber->create();\n    if ($this->Subscriber->save($this->data)) {\n    $this->Session->setFlash('You have been subscribed!');\n    $this->redirect('/');\n    } else {\n    $this->Session->setFlash('Please correct the errors');\n    }\n    }\n    }\n    public function welcome() {\n    }\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    echo $this->Form->create();\n    echo $this->Form->inputs(array(\n    'legend' => 'Subscribe',\n    'name',\n    'email'\n    ));\n    echo $this->Form->end('Submit');\n    ?>\n\n    ```", "```php\n    <h1>Welcome to my site!</h1>\n\n    ```", "```php\n    public $components = array(\n    'Email' => array(\n    'delivery' => 'smtp',\n    'smtpOptions' => array(\n    'host' => 'smtp.email.com',\n    'username' => 'smtpUser',\n    'password' => 'smtpPassword'\n    )\n    )\n    );\n\n    ```", "```php\n    public function add() {\n    if (!empty($this->data)) {\n    $this->Subscriber->create();\n    if ($this->Subscriber->save($this->data)) {\n    ClassRegistry::init('Robot.RobotTask')->schedule(\n    array('action'=>'welcome'),\n    array(\n    'name' => $this->data['Subscriber']['email'],\n    'email' => $this->data['Subscriber']['email']\n    )\n    );\n    $this->Session->setFlash('You have been subscribed!');\n    $this->redirect('/');\n    } else {\n    $this->Session->setFlash('Please correct the errors');\n    }\n    }\n    }\n\n    ```", "```php\n    public function welcome() {\n    if (isset($this->params['robot'])) {\n    $subscriber = $this->params['robot'];\n    $this->Email->sendAs = 'html';\n    $this->Email->subject = 'Welcome to my site!';\n    $this->Email->from = 'My Application <info@email.com>';\n    $this->Email->to = $subscriber['name'] . ' <'.$subscriber['email'].'>';\n    return ($this->Email->send('Hi, and <strong>welcome</strong> to my site!') !== false);\n    }\n    }\n\n    ```", "```php\n../cake/console/cake robot.robot run\n\n```", "```php\n..\\cake\\console\\cake.bat robot.robot run\n\n```", "```php\n/usr/bin/php -q /var/www/myapp/cake/console/cake.php -app /var/www/myapp/app robot.robot run -silent\n\n```", "```php\n$ cake/console/cake robot.robot run -daemon\n\n```", "```php\n$ cake/console/cake robot.robot run -daemon -time 59\n\n```"]