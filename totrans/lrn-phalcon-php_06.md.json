["```php\n$manager = $this->assets;\n\n```", "```php\n$manager = $this->getDI()->get('assets');\n\n```", "```php\n$di->set('assets', function () {\n    return new Phalcon\\Assets\\Manager();\n}, true);\n```", "```php\n{{ assets.outputCss('headerCss') }}\n{% block css %}{% endblock %}\n```", "```php\n{{ assets.outputJs('footerJs') }}\n{% block javascripts %} {% endblock %}\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass BaseController extends \\Phalcon\\Mvc\\Controller\n{\n    public function afterExecuteRoute()\n    {\n        $this->buildAssets();\n    }\n\n    /**\n     * Build the collection of assets\n     */\n    private function buildAssets()\n    {\n        $assets_dir = __DIR__.'/../../../public/assets/';\n\n        $this->assets\n            ->collection('headerCss')\n            ->addCss($assets_dir.'default/bower_components/bootstrap/dist/css/bootstrap.min.css')\n            ->addCss($assets_dir.'default/css/lp.backoffice.css')\n            ->setTargetPath('assets/default/prod/backoffice.css')\n            ->setTargetUri('../assets/default/prod/backoffice.css')\n            ->join(true)\n            ->addFilter(new \\Phalcon\\Assets\\Filters\\Cssmin());\n\n        $this->assets\n            ->collection('footerJs')\n            ->addJs($assets_dir.'default/bower_components/jquery/dist/jquery.min.js')\n            ->addJs($assets_dir.'default/bower_components/bootstrap/dist/js/bootstrap.min.js')\n            ->addJs($assets_dir.'default/js/lp.js')\n            ->setTargetPath('assets/default/prod/backoffice.js')\n            ->setTargetUri('../assets/default/prod/backoffice.js')\n            ->join(true)\n            ->addFilter(new \\Phalcon\\Assets\\Filters\\Jsmin());\n    }\n}\n```", "```php\n$ cd public/assets/default\n$ mkdir prod && chmod 777 prod\n```", "```php\n$js->addJs('cnd.mysite.com/jquery.js', true, false);\n// An external resource that does not need filtering.\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass IndexController extends BaseController\n{\n    public function indexAction()\n    {\n    }\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\nWelcome, User !\n{% endblock %}\n\n```", "```php\nCREATE TABLE IF NOT EXISTS `user_failed_logins` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_id` int(11) DEFAULT NULL,\n `ip_address` char(15) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n `attempted` int(11) unsigned NOT NULL,\n PRIMARY KEY (`id`),\n KEY `usersId` (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;\n\nCREATE TABLE IF NOT EXISTS `user_remember_tokens` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_id` int(11) NOT NULL,\n `token` char(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n `user_agent` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,\n `created_at` int(11) NOT NULL,\n PRIMARY KEY (`id`),\n KEY `token` (`token`),\n KEY `user_id` (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin AUTO_INCREMENT=1 ;\n\nCREATE TABLE IF NOT EXISTS `user_success_logins` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `user_id` int(11) NOT NULL,\n `ip_address` char(15) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n `user_agent` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n `created_at` datetime NOT NULL,\n PRIMARY KEY (`id`),\n KEY `usersId` (`user_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin AUTO_INCREMENT=1 ;\n\nALTER TABLE `user_failed_logins`\n ADD CONSTRAINT `user_failed_logins_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n\nALTER TABLE `user_remember_tokens`\n ADD CONSTRAINT `user_remember_tokens_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `article_translation` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n\nALTER TABLE `user_success_logins`\n ADD CONSTRAINT `user_success_logins_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n\n```", "```php\nCREATE TABLE IF NOT EXISTS `acl_access_list` (\n  `roles_name` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n  `resources_name` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n  `access_name` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n  `allowed` smallint(3) NOT NULL,\n  PRIMARY KEY (`roles_name`,`resources_name`,`access_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS `acl_resources` (\n  `name` varchar(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n\nCREATE TABLE IF NOT EXISTS `acl_resources_accesses` (\n  `resources_name` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n  `access_name` varchar(32) COLLATE utf8_unicode_ci NOT NULL,\n  PRIMARY KEY (`resources_name`,`access_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS `acl_roles` (\n  `name` varchar(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n\nCREATE TABLE IF NOT EXISTS `acl_roles_inherits` (\n  `roles_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n  `roles_inherit` varchar(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n  PRIMARY KEY (`roles_name`,`roles_inherit`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```", "```php\n<?php\nnamespace App\\Core\\Models;\nclass UserFailedLogins extends Base\n{\n    public function getSource()\n    {\n        return 'user_failed_logins';\n    }\n}\n\n<?php\nnamespace App\\Core\\Models;\nclass UserSuccessLogins extends Base\n{\n    public function getSource()\n    {\n        return 'user_success_logins';\n    }\n}\n\n<?php\nnamespace App\\Core\\Models;\nclass UserRememberTokens extends Base\n{\n    public function getSource()\n    {\n        return 'user_remember_tokens';\n    }\n}\n```", "```php\n$this->hasMany('id', 'App\\Core\\Models\\UserFailedLogins', 'user_id', array(\n    'alias' => 'failedLogins',\n    'foreignKey' => array(\n    'action' => \\Phalcon\\Mvc\\Model\\Relation::ACTION_CASCADE\n    )\n));\n\n$this->hasMany('id', 'App\\Core\\Models\\UserSuccessLogins', 'user_id', array(\n    'alias' => 'successLogins',\n    'foreignKey' => array(\n    'action' => \\Phalcon\\Mvc\\Model\\Relation::ACTION_CASCADE\n    )\n));\n\n$this->hasMany('id', 'App\\Core\\Models\\UserRememberTokens', 'user_id', array(\n    'alias' => 'rememberTokens',\n    'foreignKey' => array(\n    'action' => \\Phalcon\\Mvc\\Model\\Relation::ACTION_CASCADE\n    )\n));\n```", "```php\n$ cd modules/Core\n$ mkdir Security\n\n```", "```php\n<?php\nnamespace App\\Core\\Security;\n\nuse App\\Core\\Models\\User,\n    App\\Core\\Models\\UserRememberTokens,\n    App\\Core\\Models\\UserSuccessLogins,\n    App\\Core\\Models\\UserFailedLogins;\n\nclass Auth extends \\Phalcon\\Mvc\\User\\Component\n{\n    /**\n     * Checks the user credentials\n     *\n     * @param  array  $credentials\n     * @return boolean\n     */\n    public function check($credentials)\n    {\n        $user = User::findFirstByUserEmail(strtolower($credentials['email']));\n        if ($user == false) {\n            $this->registerUserThrottling(null);\n            throw new \\Exception('Wrong email/password combination');\n        }\n\n        if (!$this->security->checkHash($credentials['password'], $user->getUserPassword())) {\n                $this->registerUserThrottling($user->getId());\n                throw new \\Exception('Wrong email/password combination');\n        }\n\n        $this->checkUserFlags($user);\n        $this->saveSuccessLogin($user);\n\n        if (isset($credentials['remember'])) {\n            $this->createRememberEnviroment($user);\n        }\n\n        $this->setIdentity($user);\n    }\n\n    /**\n     * Set identity in session\n     *\n     * @param object $user\n     */\n    private function setIdentity($user)\n    {\n        $st_identity = [\n            'id'    => $user->getId(),\n            'email' => $user->getUserEmail(),\n            'name'  => $user->getUserFirstName().' '.$user->getUserLastName(),\n            'roles' => [\n                'Administrator'\n            ]\n        ];\n\n        $this->session->set('identity', $st_identity);\n    }\n\n    /**\n     * Login user - normal way\n     *\n     * @param  App\\Core\\Forms\\UserSigninForm $form\n     * @return \\Phalcon\\Http\\ResponseInterface\n     */\n    public function signin($form)\n    {\n        if (!$this->request->isPost()) {\n            if ($this->hasRememberMe()) {\n                return $this->loginWithRememberMe();\n            }\n        } else {\n            if ($form->isValid($this->request->getPost()) == false) {\n                foreach ($form->getMessages() as $message) {\n                    $this->flashSession->error($message->getMessage());\n                }\n            } else {\n                $this->check([\n                    'email'    => $this->request->getPost('email'),\n                    'password' => $this->request->getPost('password'),\n                    'remember' => $this->request->getPost('remember')\n                ]);\n\n                $redirect = $this->getDI()->get('config')->auth->redirect;\n\n                return $this->response->redirect($redirect->success);\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates the remember me environment settings the related cookies and generating tokens\n     */\n    public function saveSuccessLogin($user)\n    {\n        $successLogin = new UserSuccessLogins();\n        $successLogin->setUserId($user->getId());\n        $successLogin->setIpAddress($this->request->getClientAddress());\n        $successLogin->setUserAgent($this->request->getUserAgent());\n\n        if (!$successLogin->save()) {\n            $messages = $successLogin->getMessages();\n            throw new \\Exception($messages[0]);\n        }\n    }\n\n    /**\n     * Implements login throttling\n     * Reduces the efectiveness of brute force attacks\n     *\n     * @param int $user_id\n     */\n    public function registerUserThrottling($user_id)\n    {\n        $failedLogin = new UserFailedLogins();\n        $failedLogin->setUserId($user_id == null ? new \\Phalcon\\Db\\RawValue('NULL') : $user_id);\n        $failedLogin->setIpAddress($this->request->getClientAddress());\n        $failedLogin->setAttempted(time());\n        $failedLogin->save();\n\n        $attempts = UserFailedLogins::count([\n            'ip_address = ?0 AND attempted >= ?1',\n            'bind' => [\n                $this->request->getClientAddress(),\n                time() - 3600 * 6\n            ]\n        ]);\n\n        switch ($attempts) {\n            case 1:\n            case 2:\n                // no delay\n            break;\n            case 3:\n            case 4:\n                sleep(2);\n            break;\n            default:\n                sleep(4);\n            break;\n        }\n    }\n\n    /**\n     * Check if the user is signed in\n     *\n     * @return boolean\n     */\n    public function isUserSignedIn()\n    {\n        $identity = $this->getIdentity();\n\n        if (is_array($identity)) {\n            if (isset($identity['id'])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the user is banned/inactive/suspended\n     *\n     * @param App\\Core\\Models\\User $user\n     */\n    public function checkUserFlags($user)\n    {\n        if (false === $user->getUserIsActive()) {\n            throw new \\Exception('The user is inactive');\n        }\n    }\n\n    /**\n     * Returns the current identity\n     *\n     * @return array\n     */\n    public function getIdentity()\n    {\n        return $this->session->get('identity');\n    }\n\n    /**\n     * Removes the user identity information from session\n     */\n    public function remove()\n    {\n        if ($this->cookies->has('RMU')) {\n            $this->cookies->get('RMU')->delete();\n        }\n\n        if ($this->cookies->has('RMT')) {\n            $this->cookies->get('RMT')->delete();\n        }\n\n        $this->session->remove('identity');\n    }\n\n    public function getUser()\n    {\n        $identity = $this->session->get('identity');\n\n        if (isset($identity['id'])) {\n            $user = User::findFirstById($identity['id']);\n            if ($user == false) {\n                throw new \\Exception('The user does not exist');\n            }\n\n            return $user;\n        }\n\n        return false;\n    }\n\n}\n```", "```php\n$di['auth'] = function () use ($di) {\n    return new App\\Core\\Security\\Auth();\n};\n```", "```php\n    'auth' => array(\n        'redirect' => array(\n            'success' => 'index/index',\n            'failure' => 'auth/signin',\n        ),\n    ),\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nuse App\\Core\\Forms\\UserSigninForm;\n\nclass AuthController extends BaseController\n{\n    public function signinAction()\n    {\n        $form = new UserSigninForm();\n\n        if ($this->request->isPost()) {\n            try {\n                $this->auth->signin($form);\n            } catch (\\Exception $e) {\n                $this->flash->error($e->getMessage());\n            }\n        }\n\n        $this->view->signinForm = $form;\n    }\n\n    public function signoutAction()\n    {\n        $this->auth->remove();\n\n        return $this->response->redirect('auth/signin');\n    }\n}\n```", "```php\n$ cd modules/Core\n$ mkdir Forms\n\n```", "```php\n<?php\nnamespace App\\Core\\Forms;\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Password;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Check;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\Identical;\n\nclass UserSigninForm extends Form\n{\n    public function initialize()\n    {\n        $email = new Text('email', array(\n            'placeholder' => 'Email',\n        ));\n\n        $email->addValidators(array(\n            new PresenceOf(array(\n                'message' => 'The e-mail is required',\n            )),\n            new Email(array(\n                'message' => 'The e-mail is not valid',\n            )),\n        ));\n\n        $this->add($email);\n\n        //Password\n        $password = new Password('password', array(\n            'placeholder' => 'Password',\n        ));\n\n        $password->addValidator(\n            new PresenceOf(array(\n                'message' => 'The password is required',\n            ))\n        );\n\n        $this->add($password);\n\n        //Remember\n        $remember = new Check('remember', array(\n            'value' => 'yes',\n        ));\n\n        $remember->setLabel('Remember me');\n\n        $this->add($remember);\n\n        //CSRF (Cross-Site Request Forgery)\n        $csrf = new Hidden('csrf');\n\n        $csrf->addValidator(\n            new Identical(array(\n                'value' => $this->security->getSessionToken(),\n                'message' => 'CSRF validation failed',\n            ))\n        );\n\n        $this->add($csrf);\n\n        $this->add(new Submit('signin', array(\n            'class' => 'btn btn-lg btn-primary btn-block',\n        )));\n    }\n}\n```", "```php\n$ cd modules/Backoffice/Views/Default/\n$ cp layout.volt layout_simple.volt\n\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>{% block pageTitle %}Learning Phalcon{% endblock %}</title>\n\n{{ assets.outputCss('headerCss') }}\n{% block css %}{% endblock %}\n\n<!--[if lt IE 9]>       <script src=\"img/html5shiv.min.js\"></script>\n      <script src=\"img/respond.min.js\"></script>\n<![endif]-->\n</head>\n<body>\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-sm-12 main\">\n          {% block body %}\n\n          {% endblock %}\n        </div>\n      </div>\n    </div>\n\n    {{ assets.outputJs('footerJs') }}\n    {% block javascripts %} {% endblock %}\n</body>\n</html>\n```", "```php\n{% extends 'layout_simple.volt' %}\n{% block pageTitle %}Sign in{% endblock %}\n{% block css %}\n {{ assets.outputCss('signin') }}\n{% endblock %}\n{% block body %}\n\n<form class=\"form-signin\" method=\"post\" action=\"\">\n {{ content() ~ flashSession.output() }}\n <h2 class=\"form-signin-heading\">Sign in</h2>\n <label for=\"inputEmail\" class=\"sr-only\">Email address</label>\n {{ signinForm.render('email', {'class':'form-control', 'required':true, 'autofocus':true, 'type':'email'}) }}\n <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n {{ signinForm.render('password', {'class':'form-control', 'required':true}) }}\n <div class=\"checkbox\">\n <label>\n {{ signinForm.render('remember') }} Remember me\n </label>\n </div>\n {{ signinForm.render('signin', {'value':'Sign in'}) }}\n {{ signinForm.render('csrf', {'value':security.getToken()}) }}\n</form>\n\n{% endblock %}\n\n```", "```php\nbody {\n  padding-top: 40px;\n  padding-bottom: 40px;\n  background-color: #eee;\n}\n\n.form-signin {\n  max-width: 330px;\n  padding: 15px;\n  margin: 0 auto;\n}\n\n.form-signin .form-signin-heading,\n.form-signin .checkbox {\n  margin-bottom: 10px;\n}\n\n.form-signin .checkbox {\n  font-weight: normal;\n}\n\n.form-signin .form-control {\n  position: relative;\n  height: auto;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 10px;\n  font-size: 16px;\n}\n\n.form-signin .form-control:focus {\n  z-index: 2;\n}\n\n.form-signin input[type=\"email\"] {\n  margin-bottom: -1px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.form-signin input[type=\"password\"] {\n  margin-bottom: 10px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n```", "```php\n$this->assets\n ->collection('signin')\n ->addCss($assets_dir.'default/css/lp.backoffice.signin.css')\n ->setTargetPath('assets/default/prod/backoffice.signin.css')\n ->setTargetUri('../assets/default/prod/backoffice.signin.css')\n ->addFilter(new \\Phalcon\\Assets\\Filters\\Cssmin());\n\n```", "```php\n$ php modules/cli.php user create John Doe john.doe@learning-phalcon.localhost myPassw0rd 1 Barcelona 1985-03-25\n\n```", "```php\nCREATE TABLE IF NOT EXISTS `user_role` (\n `user_id` int(11) NOT NULL,\n `role` varchar(32) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n UNIQUE KEY `user_id_2` (`user_id`,`role`),\n KEY `role` (`role`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n\nALTER TABLE `user_role`\n ADD CONSTRAINT `user_role_ibfk_2` FOREIGN KEY (`role`) REFERENCES `acl_roles` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,\n ADD CONSTRAINT `user_role_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION;\n\n```", "```php\n    $this->hasOne('user_group_id', 'App\\Core\\Models\\UserGroups', 'id', array(\n     'alias' => 'group',\n     'reusable' => true,\n    ));\n\n    ```", "```php\n    ALTER TABLE `user` DROP FOREIGN KEY `user_ibfk_1` ;\n    ALTER TABLE  `user` DROP  `user_group_id` ;\n    DROP TABLE user_group;\n\n    ```", "```php\n    $user_group_id = $this->findFirstGroupByName($user_group_name)->getId();\n    $user->setUserGroupId($user_group_id);\n\n    ```", "```php\n<?php\nnamespace App\\Core\\Models;\n\nclass UserRole extends Base\n{\n    public function initialize()\n    {\n        $this->belongsTo('user_id', 'App\\Core\\Models\\User', 'id', array(\n            'foreignKey' => true,\n            'reusable' => true,\n            'alias' => 'user',\n        ));\n\n        $this->belongsTo('user_role', 'App\\Core\\Models\\AclRoles', 'name', array(\n            'foreignKey' => true,\n            'reusable' => true,\n            'alias' => 'role',\n        ));\n    }\n}\n```", "```php\n<?php\n\nnamespace App\\Core\\Models;\n\nclass AclRoles extends Base\n{\n// Nothing important here for now, just getters and setters\n}\n```", "```php\n    public function create($data, $user_role = 'Guest')\n    {\n        $security = $this->getDI()->get('security');\n\n        $user = new User();\n        $user->setUserFirstName($data['user_first_name']);\n        $user->setUserLastName($data['user_last_name']);\n        $user->setUserEmail($data['user_email']);\n        $user->setUserPassword($security->hash($data['user_password']));\n        $user->setUserIsActive($data['user_is_active']);\n\n        $o_acl_role  = AclRoles::findFirstByName($user_role);\n\n        if (!$o_acl_role) {\n            throw new \\Exception(\"Role $user_role does not exists\");\n        };\n\n        $o_user_role[0] = new UserRole();\n        $o_user_role[0]->setUserRole($user_role);\n\n        $user->roles = $o_user_role;\n\n        $profile = new UserProfile();\n        $profile->setUserProfileLocation($data['user_profile_location']);\n        $profile->setUserProfileBirthday($data['user_profile_birthday']);\n\n        $user->profile = $profile;\n\n        return $this->save($user);\n    }\n```", "```php\n$user = $manager->create(array(\n 'user_first_name' => $params[0],\n 'user_last_name' => $params[1],\n 'user_email' => $params[2],\n 'user_password' => $params[3],\n 'user_is_active' => $params[4],\n 'user_profile_location' => $params[5],\n 'user_profile_birthday' => $params[6],\n), 'Guest');\n\n```", "```php\n<?php\nnamespace App\\Core\\Security;\n\nclass Acl extends \\Phalcon\\Mvc\\User\\Plugin\n{\n    public function beforeDispatch(\\Phalcon\\Events\\Event $event, \\Phalcon\\Mvc\\Dispatcher $dispatcher)\n    {\n        $controller = $dispatcher->getControllerName();\n        $action     = $dispatcher->getActionName();\n        $redirect   = $this->getDI()->get('config')->auth->redirect;\n\n        if ($controller == 'auth' && $action == 'signin') {\n            return true;\n        }\n\n        $account = $this->auth->getIdentity();\n\n        if (!$account) {\n            if ($this->getDI()->get('auth')->hasRememberMe()) {\n                return $this->getDI()->get('auth')->loginWithRememberMe();\n            }\n        }\n\n        if (!is_array($account) || !array_key_exists('roles', $account)) {\n\n            $this->view->disable();\n            $this->response->setStatusCode(403, 'Forbidden');\n            $this->flashSession->error('You are not allowed to access this section');\n            return $this->response->redirect($redirect->failure);\n        }\n\n        $acl = $this->getDI()->get('acl');\n\n        foreach ($account['roles'] as $role) {\n            if ($acl->isAllowed($role, $controller, $action) == \\Phalcon\\Acl::ALLOW) {\n                return true;\n            }\n        }\n\n        $this->view->disable();\n        $this->response->setStatusCode(403, 'Forbidden');\n        return $this->response->redirect($redirect->failure);\n    }\n}\n```", "```php\n$di['acl'] = function () use ($di) {\n    $acl = new \\Phalcon\\Acl\\Adapter\\Database([\n        'db' => $di['db'],\n        'roles' => 'acl_roles',\n        'rolesInherits' => 'acl_roles_inherits',\n        'resources' => 'acl_resources',\n        'resourcesAccesses' => 'acl_resources_accesses',\n        'accessList' => 'acl_access_list',\n    ]);\n\n    $acl->setDefaultAction(\\Phalcon\\Acl::DENY);\n\n    return $acl;\n};\n```", "```php\n$di['dispatcher'] = function () use ($di) {\n    $eventsManager = $di->getShared('eventsManager');\n\n    $eventsManager->attach('dispatch', new App\\Core\\Security\\Acl($di));\n\n    $dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n    $dispatcher->setEventsManager($eventsManager);\n    $dispatcher->setDefaultNamespace(\"App\\Backoffice\\Controllers\");\n\n    return $dispatcher;\n};\n```", "```php\nprivate function setIdentity($user)\n{\n    $roles = [];\n    foreach ($user->roles as $role) {\n      $roles[] = $role->getUserRole();\n    }\n\n    $st_identity = [\n      'id'    => $user->getId(),\n      'email' => $user->getUserEmail(),\n      'name'  => $user->getUserFirstName().' '.$user->getUserLastName(),\n      'roles' => $roles\n    ];\n\n    $this->session->set('identity', $st_identity);\n}\n```", "```php\n<?php\nclass AclTask extends BaseTask\n{\n    /**\n     *\n     * @var \\Phalcon\\Acl\\Adapter\\Database\n     */\n    private $acl;\n\n    public function __construct()\n    {\n        $this->acl = $this->getDI()->get('acl');\n    }\n\n    /**\n     * @Description(\"Install the initial(default) acl resources\")\n     */\n    public function initAction()\n    {\n        $roles = array(\n            'Administrator' => new \\Phalcon\\Acl\\Role('Administrator'),\n            'Guest' => new \\Phalcon\\Acl\\Role('Guest'),\n        );\n\n        foreach ($roles as $role) {\n            $this->acl->addRole($role);\n        }\n\n        $userResources = array(\n            'index' => array('index'),\n        );\n\n        foreach ($userResources as $resource => $actions) {\n            //$this->acl->addResource(new \\Phalcon\\Acl\\Resource($resource), $actions);\n            foreach ($actions as $action) {\n                $this->acl->allow('Administrator', $resource, $action);\n            }\n        }\n\n        $this->consoleLog('Default resources created');\n    }\n}\n```", "```php\n$ php modules/cli.php acl init\n\n```"]