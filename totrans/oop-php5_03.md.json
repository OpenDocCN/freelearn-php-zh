["```php\n<?\ninclude_once(\"../ch2/class.emailer.php\");\necho class_exists(\"Emailer\");\n//returns true otherwise false if doesn't exist\n?>\n```", "```php\n<?\ninclude_once(\"../ch2/class.emailer.php\");\nif( class_exists(\"Emailer\"))\n{\n  $emailer = new Emailer(\"hasin@pageflakes.com\");\n}\nelse \n{\n  die(\"A necessary class is not found\");\n}\n?>\n```", "```php\n<?\ninclude_once(\"../ch2/class.emailer.php\");\nprint_r(get_declared_classes());\n?>\n```", "```php\n<?\nclass ParentClass\n{\n}\n\nclass ChildClass extends ParentClass \n{\n}\n\n$cc = new ChildClass();\nif  (is_a($cc,\"ChildClass\")) echo \"It's a ChildClass Type Object\";\necho \"\\n\";\nif  (is_a($cc,\"ParentClass\")) echo \"It's also a ParentClass Type \nObject\";\n\n?>\n```", "```php\nIts a ChildClass Type Object\nIts also a ParentClass Type Object\n```", "```php\n<?\nclass ParentClass\n{\n}\nclass ChildClass extends ParentClass \n{\t\n}\n\n$cc = new ChildClass();\necho get_class($cc)\n?>\n```", "```php\n<?\nclass ParentClass \n{\n  public function getClass()\n{\n    echo get_class(); //using \"no $this\"\n  }\n}\nclass Child extends ParentClass \n{\n}\n$obj = new Child();\n$obj->getClass(); //outputs \"ParentClass\"\n?>\n```", "```php\n<?\nclass ParentClass {\n  public function getClass(){\n    echo get_class($this); //using \"$this\"\n  }\n}\nclass Child extends ParentClass {\n}\n$obj = new Child();\n$obj->getClass(); //outputs \"child\"\n?>\n```", "```php\n<?\n//class.db.php\nclass db\n{\n  function connect()\n  {\n    pg_connect(\"somehost\",\"username\",\"password\");\n  }\n}\n\n$db = new db();\n$db->connect();\n?>\n```", "```php\n<b>Warning</b>: pg_connect() [<a href='function.pg-connect'>\nfunction.pg-connect</a>]: Unable to connect to PostgreSQL \nserver: could not translate host name \"somehost\" to address: \nUnknown host in <b>C:\\OOP with PHP5\\Codes\\ch3\\exception1.php</b> \non line <b>6</b><br />\n```", "```php\n<?\n//class.db.php\nerror_reporting(E_ALL - E_WARNING);\nclass db\n{\n  function connect()\n  {\n    if (!pg_connect(\"somehost\",\"username\",\"password\")) return false;\n  }\n}\n\n$db = new db();\n\nif (!$db->connect()) echo \"Falied to connect to PostgreSQL Server\";\n?> \n```", "```php\n<?\n//class.db.php\nerror_reporting(E_ALL - E_WARNING);\nclass db\n{\n  function connect()\n  {\n    if (!pg_connect(\"host=localhost password=pass user=username \n                    dbname=db\")) throw new Exception(\"Cannot connect \n                    to the database\");\n  }\n}\n\n$db = new db();\ntry {\n  $db->connect();\n}\ncatch (Exception $e)\n{\n  print_r($e);\n}\n\n?>\n```", "```php\nException Object\n(\n  [message:protected] => Cannot connect to the database\n  [string:private] => \n  [code:protected] => 0\n  [file:protected] => C:\\OOP with PHP5\\Codes\\ch3\\exception1.php\n  [line:protected] => 8\n  [trace:private] => Array\n    (\n      [0] => Array\n        (\n          [file] => C:\\OOP with PHP5\\Codes\\ch3\\exception1.php\n          [line] => 14\n          [function] => connect\n          [class] => db\n          [type] => ->\n          [args] => Array\n             (\n              )\n\n        )\n\n      [1] => Array\n        (\n          [file] => C:\\Program Files\\Zend\\ZendStudio-\n                                       5.2.0\\bin\\php5\\dummy.php\n          [line] => 1\n          [args] => Array\n            (\n              [0] => C:\\OOP with PHP5\\Codes\\ch3\\exception1.php\n            )\n\n          [function] => include\n        )\n\n    )\n\n)\n```", "```php\n<?\ninclude_once(\"PGSQLConnectionException.class.php\");\ninclude_once(\"PGSQLQueryException.class.php\");\nerror_reporting(0);\nclass DAL\n{\n  public $connection;\n  public $result;\n  public function connect($ConnectionString)\n  {\n    $this->connection = pg_connect($ConnectionString);\n\n    if ($this->connection==false)\n    {\n      throw new PGSQLConnectionException($this->connection);\n    }\n  }\n\n  public function execute($query)\n  {\n    $this->result = pg_query($this->connection,$query);\n\n    if (!is_resource($this->result))\n    {\n      throw new PGSQLQueryException($this->connection);\n    }\n\n    //else do the necessary works\n  }\n}\n\n$db = new DAL();\ntry{\n  $db->connect(\"dbname=golpo user=postgres2\");\n  try{\n    $db->execute(\"select * from abc\");\n  }\n  catch (Exception $queryexception)\n  {\n    echo $queryexception->getMessage();\n  }\n}\ncatch(Exception $connectionexception)\n{\n  echo $connectionexception->getMessage();\n}\n?>\n```", "```php\n<?\nClass PGSQLConnectionException extends Exception\n{\n\n  public function __construct()\n  {  $message = \"Sorry, couldn't connect to postgresql server:\";\n     parent::__construct($message, 0000);\n  }\n}\n?>\n```", "```php\n<?\nClass PGSQLQueryException extends Exception\n{\n  public function __construct($connection)\n  {\n    parent::__construct(pg_last_error($connection),0);\n  }\n}\n?>\n```", "```php\n<?php\nfunction exceptions_error_handler($severity, $message, \n       $filename, $lineno) { \n          throw new ErrorException($message, 0, $severity, \n          $filename, $lineno); \n       }\nset_error_handler('exceptions_error_handler');\n?>\n```", "```php\n<?\nforeach($anyarray as $key=>$val)\n{\n  //do something\n}\n?>\n```", "```php\n<?\nclass EmailValidator\n{\n  public $emails;\n  public $validemails;\n}\n\n$ev = new EmailValidator();\nforeach($ev as $key=>$val)\n{\n  echo $key.\"<br/>\";\n}\n?>\n```", "```php\nemails\nvalidemails\n```", "```php\n<?\nclass QueryIterator implements Iterator\n{\n  private $result;\n  private $connection;\n  private $data;\n  private $key=0;\n  private $valid;\n\n  function __construct($dbname, $user, $password)\n  {\n    $this->connection = pg_connect(\"dbname={$dbname} user={$user}\");\n  }\n\n  public function exceute($query)\n  {\n    $this->result = pg_query($this->connection,$query);\n     if (pg_num_rows($this->result)>0)\n    $this->next();\n  }\n\n  public function rewind() {}\n\n  public function current() {\n    return $this->data;\n  }\n\n  public function key() {\n    return $this->key;\n  }\n\n  public function next() {\n    if ($this->data = pg_fetch_assoc($this->result))\n    {\n      $this->valid = true;\n      $this->key+=1;\n    }\n    else \n    $this->valid = false;\n  }\n\n  public function valid() {\n    return $this->valid;\n  }\n}\n?>\n```", "```php\n<?\n$qi= new QueryIterator(\"golpo\",\"postgres2\",\"\");\n$qi->exceute(\"select name, email from users\");\nwhile ($qi->valid())\n{\n  print_r($qi->current());\n  $qi->next();\n}\n?>\n```", "```php\nArray\n(\n  [name] => Afif\n  [email] => mayflower@phpxperts.net\n)\nArray\n(\n  [name] => Ayesha\n  [email] => florence@phpxperts.net\n)\n```", "```php\n<?\n$users = new ArrayObject(array(\"hasin\"=>\"hasin@pageflakes.com\",\n   \"afif\"=>\"mayflower@phpxperts.net\",\n   \"ayesha\"=>\"florence@pageflakes.net\"));\n$iterator = $users->getIterator();\nwhile ($iterator->valid())\n{\n  echo \"{$iterator->key()}'s Email address is \n         {$iterator->current()}\\n\";\n         $iterator->next();\n}\n?> \n```", "```php\n<?\nclass ArrayToObject extends ArrayObject\n{\n  public function __get($key)\n  {\n    return $this[$key];\n  }\n\n  public function __set($key,$val)\n  {\n    $this[$key] = $val;\n  }\n}\n?>\n```", "```php\n<?\n$users = new ArrayToObject(array(\"hasin\"=>\"hasin@pageflakes.com\",\n   \"afif\"=>\"mayflower@phpxperts.net\",\n   \"ayesha\"=>\"florence@pageflakes.net\"));\n\necho $users->afif;\n?>\n```", "```php\nmayflower@phpxperts.net\n```", "```php\n<?php\n\nclass users implements ArrayAccess \n{\n  private $users;\n\n    public function __construct() \n{\n        $this->users = array();\n    }\n\n    public function offsetExists($key) \n{\n        return isset($this->users[$key]);\n    }\n\n    public function offsetGet($key) \n{\n        return $this->users[$key];\n    }\n\n    public function offsetSet($key, $value) \n{\n        $this->users[$key] = $value;\n    }\n\n    public function offsetUnset($key) \n{\n        unset($this->users[$key]);\n    }\n}\n\n$users = new users();\n$users['afif']=\"mayflower@phpxperts.net\";\n$users['hasin']=\"hasin@pageflakes.com\";\n$users['ayesha']=\"florence@phpxperts.net\";\n\necho $users['afif']\n?>\n```", "```php\n<?\nclass SampleObject\n{\n  public $var1;\n  private $var2;\n  protected $var3;\n  static $var4;\n\n  public function __construct()\n  {\n    $this->var1 = \"Value One\";\n    $this->var2 = \"Value Two\";\n    $this->var3 = \"Value Three\";\n    SampleObject::$var4 = \"Value Four\";\n  }\n\n}\n\n$so = new SampleObject();\n$serializedso =serialize($so);\nfile_put_contents(\"text.txt\",$serializedso);\necho $serializedso;\n?>\n```", "```php\n<?\ninclude_once(\"class.sampleobject.php\");\n$serializedcontent = file_get_contents(\"text.txt\");\n$unserializedcontent = unserialize($serializedcontent);\nprint_r($unserializedcontent);\n?>\n```", "```php\nSampleObject Object\n(\n  [var1] => Value One\n  [var2:private] => Value Two\n  [var3:protected] => Value Three\n)\n```", "```php\n__PHP_Incomplete_Class Object\n(\n  [__PHP_Incomplete_Class_Name] => SampleObject\n  [var1] => Value One\n  [var2:private] => Value Two\n  [var3:protected] => Value Three\n)\n```", "```php\n<?\nclass SampleObject\n{\n  public $var1;\n  private $var2;\n  protected $var3;\n  public static $var4;\n\n  private $staticvars = array();\n\n  public function __construct()\n  {\n    $this->var1 = \"Value One\";\n    $this->var2 = \"Value Two\";\n    $this->var3 = \"Value Three\";\n    SampleObject::$var4 = \"Value Four\";\n  }\n\n  public function __sleep()\n  {\n\n    $vars = get_class_vars(get_class($this));\n    foreach($vars as $key=>$val)\n    {\n      if (!empty($val))\n      $this->staticvars[$key]=$val;\n    }\n    return array_keys( get_object_vars( $this ) );\n  }\n\n  public function __wakeup()\n  {\n    foreach ($this->staticvars as $key=>$val){\n      $prop = new ReflectionProperty(get_class($this), $key);\n      $prop->setValue(get_class($this), $val);\n    }\n    $this->staticvars=array();\n  }\n\n}\n?>\n```", "```php\n<?\nclass ResourceObject\n{\n  private $resource;\n  private $dsn;\n  public function __construct($dsn)\n  {\n    $this->dsn = $dsn;\n    $this->resource = pg_connect($this->dsn);\n  }\n\n  public function __sleep()\n  {\n    pg_close($this->resource);\n    return array_keys( get_object_vars( $this ) );\n  }\n\n  public function __wakeup()\n  {\n    $this->resource = pg_connect($this->dsn);\n  }\n}\n?>\n```", "```php\n<?\n$sample1 = new StdClass();\n$sample1->name = \"Hasin\";\n$sample2 = $sample1;\n$sample2->name = \"Afif\";\necho $sample1->name;\n?> \n```", "```php\n<?\n$sample1 = new stdClass();\n$sample1->name = \"Hasin\";\n$sample2 =clone $sample1;\n$sample2->name = \"Afif\";\necho $sample1->name;\n?>\n```", "```php\n<?\nfunction __autoload($class)\n{\n  include_once(\"class.{$class}.php\");\n}\n\n$s = new Emailer(\"hasin@somewherein.net\");\n?>\n```", "```php\n$SomeObject->getObjectOne()->getObjectTwo()->callMethodOfObjectTwo();\n```", "```php\n$dbManager->select(\"id\",\"email\")->from(\"user\")->where(\"id=1\")\n                                        ->limit(1)->result();\n```", "```php\n<?\nclass DBManager\n{\n  private $selectables = array();\n  private $table;\n  private $whereClause;\n  private $limit;\n\n  public function select()\n  {\n    $this->selectables=func_get_args();\n    return $this;\n  }\n\n  public function from($table)\n  {\n    $this->table = $table;\n    return $this;\n  }\n\n  public function where($clause)\n  {\n    $this->whereClause = $clause;\n    return $this;\n  }\n\n  public function limit($limit)\n  {\n    $this->limit = $limit;\n    return $this;\n  }\n\n  public function result()\n  {\n    $query = \"SELECT \".join(\",\",$this->selectables).\" FROM \n                                           {$this->table}\";\n    if (!empty($this->whereClause))\n    $query .= \" WHERE {$this->whereClause}\";\n\n    if (!empty($this->limit))\n    $query .= \" LIMIT {$this->limit}\";\t\n\n    echo \"The generated Query is : \\n\".$query;\n  }\n\n}\n$db= new DBManager();\n$db->select(\"id\",\"name\")->from(\"users\")->where(\"id=1\")->\n                                       limit(1)->result();\n?>\n```", "```php\nThe generated Query is : \nSELECT id,name FROM users WHERE id=1 LIMIT 1\n```", "```php\n$db->from(\"users\")->select(\"id\",\"name\")->limit(1)->where(\"id=1\")\n                                                     ->result();\n```", "```php\nmemcached –d install\n```", "```php\nmemcached –d start \n```", "```php\n<?\n$memcache = new Memcache;\n\n$memcache->connect('localhost', 11211) or die (\"Could not connect\");\n\n$tmp_object = new stdClass;\n$tmp_object->str_attr = 'test';\n$tmp_object->int_attr = 12364;\n\n$memcache->set('obj', $tmp_object, false, 60*5) or die (\"Failed to save data at the server\");\n?>\n```", "```php\n<?\n$memcache = new Memcache;\n$memcache->connect('localhost', 11211) or die (\"Could not connect\");\n\n$newobj = $memcache->get('obj');\n?>\n```"]