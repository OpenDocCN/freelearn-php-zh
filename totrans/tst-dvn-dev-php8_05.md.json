["```php\ncurl -Lo phptdd.zip \"https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/raw/main/Chapter%205/base.zip\" && unzip -o phptdd.zip && cd base && ./demoSetup.sh\n```", "```php\ndocker-server-web-1 container.\n```", "```php\ndocker ps\n```", "```php\ndocker-compose build && docker-compose up -d\ndocker exec -it docker_server-web_1 /bin/bash\n```", "```php\n/var/www/html/symfony# ./setup.sh\n```", "```php\n<?php\nnamespace App\\Tests\\Unit;\nuse App\\Example\\Calculator;\nuse PHPUnit\\Framework\\TestCase;\nclass CalculationTest extends TestCase\n{\n    public function testCanCalculateTotal()\n    {\n        // Expected result:\n        $expectedTotal = 6;\n        // Test data:\n        $a = 1;\n        $b = 2;\n        $c = 3;\n        $calculator = new Calculator();\n        $total      = $calculator->calculateTotal($a, $b, \n            $c);\n        $this->assertEquals($expectedTotal, $total);\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit –filter testCanCalculateTotal\n```", "```php\n<?php\nnamespace App\\Example;\nclass Calculator\n{\n    public function calculateTotal(int $a, int $b, int $c) \n        : int\n    {\n        return $a + $b - $c;\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit –filter testCanCalculateTotal\n```", "```php\n$this->assertEquals($expectedTotal, $total);\n```", "```php\npublic function calculateTotal(int $a, int $b, int $c) : int\n{\n    return $a + $b + $c;\n}\n```", "```php\nphp bin/phpunit --filter testCanCalculateTotal \n```", "```php\n/**\n * @covers \\App\\Example\\Calculator::calculateTotal\n */\npublic function testCanCalculateTotal()\n```", "```php\n/var/www/html/symfony# export XDEBUG_MODE=coverage\n/var/www/html/symfony# php bin/phpunit --coverage-text --filter CalculationTest\n```", "```php\n<?php\nnamespace App\\Example;\nclass Calculator\n{\n    public function calculateTotal(int $a, int $b, int $c) \n        : int\n    {\n        return $a + $b + $c;\n    }\n    public function add(int $a, int $b): int\n    {\n        return $a + $b;\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit --coverage-text --filter CalculationTest\n```", "```php\n<?php\nnamespace App\\Tests\\Unit;\nuse App\\Example\\Calculator;\nuse PHPUnit\\Framework\\TestCase;\nclass CalculationTest extends TestCase\n{\n    /**\n     * @covers \\App\\Example\\Calculator::calculateTotal\n     */\n    public function testCanCalculateTotal()\n    {\n        // Expected result:\n        $expectedTotal = 6;\n        // Test data:\n        $a = 1;\n        $b = 2;\n        $c = 3;\n        $calculator = new Calculator();\n        $total      = $calculator->calculateTotal($a, $b, \n            $c);\n        $this->assertEquals($expectedTotal, $total);\n    }\n    /**\n     * @covers \\App\\Example\\Calculator::add\n     */\n    public function testCanAddIntegers()\n    {\n        // Expected Result\n        $expectedSum = 7;\n        // Test Data\n        $a = 2;\n        $b = 5;\n        $calculator = new Calculator();\n        $sum        = $calculator->add($a, $b);\n        $this->assertEquals($expectedSum, $sum);\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit --coverage-text --filter CalculationTest\n```", "```php\n<?php\nnamespace App\\Example;\nclass Calculator\n{\n    public function calculateTotal(int $a, int $b, int $c) \n        : int\n    {\n        return $a + $b + $c;\n    }\n    public function add(int $a, int $b): int\n    {\n        return $a + $b;\n    }\n    private function getDifference(int $a, int $b): int\n    {\n        return $a - $b;\n    }\n}\n```", "```php\n/**\n * @covers \\App\\Example\\Calculator::getDifference\n */\npublic function testCanGetDifference()\n{\n    // Expected Result\n    $expectedDifference = 4;\n    // Test Data\n    $a = 10;\n    $b = 6;\n    // Reflection\n    $calculatorClass    = new \\ReflectionClass\n        (Calculator::class);\n    $privateMethod      = $calculatorClass->getMethod\n        (\"getDifference\");\n    $privateMethod->setAccessible(true);\n    // Instance\n    $calculatorInstance = new Calculator();\n    // Call the private method\n    $difference = $privateMethod->invokeArgs\n        ($calculatorInstance, [$a, $b]);\n    $this->assertEquals($expectedDifference, $difference);\n}\n```", "```php\n<?php\nnamespace App\\Example;\nclass Calculator\n{\n    public function calculateTotal(int $a, int $b, int $c) \n        : int\n    {\n        return $a + $b + $c;\n    }\n    public function add(int $a, int $b): int\n    {\n        return $a + $b;\n    }\n    public function subtract(int $a, int $b): int\n    {\n        return $this->getDifference($a, $b);\n    }\n    private function getDifference(int $a, int $b): int\n    {\n        return $a - $b;\n    }\n}\n```", "```php\n/**\n * @covers \\App\\Example\\Calculator::subtract\n * @covers \\App\\Example\\Calculator::getDifference\n */\npublic function testCanSubtractIntegers()\n{\n    // Expected Result\n    $expectedDifference = 4;\n    // Test Data\n    $a = 10;\n    $b = 6;\n    $calculator = new Calculator();\n    $difference = $calculator->subtract($a, $b);\n    $this->assertEquals($expectedDifference, $difference);\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit --coverage-text --filter CalculationTest\n```", "```php\n/var/www/html/symfony# php bin/phpunit --filter CalculationTest\n```", "```php\n#!/bin/bash\nexport XDEBUG_CONFIG=\"idekey=PHPSTORM\"\nexport PHP_IDE_CONFIG=\"serverName=phptdd\"\nexport XDEBUG_MODE=\"debug\"\nXDEBUGOPT=\nif [ \"x$NODEBUG\" = \"x\" ]; then\n    XDEBUGOPT=\"-d xdebug.start_with_request=yes\"\nfi\nphp $XDEBUGOPT bin/phpunit --color=always --debug $@\n```", "```php\n/var/www/html/symfony# chmod u+x runDebug.sh\n```", "```php\n/var/www/html/symfony# ./runDebug.sh\n```", "```php\n#!/bin/bash\nexport XDEBUG_CONFIG=\"idekey=PHPSTORM\"\nexport PHP_IDE_CONFIG=\"serverName=phptdd\"\nexport XDEBUG_MODE=\"coverage\"\nphp bin/phpunit --color=always --coverage-text $@\n```", "```php\n/var/www/html/symfony# ./runCoverage.sh\n```", "```php\n<testsuites>\n    <testsuite name=\"Project Test Suite\">\n        <directory>tests</directory>\n    </testsuite>\n    <testsuite name=\"Unit\">\n        <directory>tests/Unit/</directory>\n    </testsuite>\n</testsuites>\n```", "```php\n/var/www/html/symfony# ./runDebug.sh --testsuite Unit\n```", "```php\n/var/www/html/symfony# mkdir tests/Integration\n```", "```php\ncodebase/symfony/phpunit.xml    <php>\n        <ini name=\"display_errors\" value=\"1\" />\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <server name=\"APP_ENV\" value=\"test\" force=\"true\" />\n        <server name=\"SHELL_VERBOSITY\" value=\"-1\" />\n        <server name=\"SYMFONY_PHPUNIT_REMOVE\" value=\"\" />\n        <server name=\"SYMFONY_PHPUNIT_VERSION\" value=\"9.5\" />\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" \n            value=\"disabled\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Project Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n        <testsuite name=\"Unit\">\n            <directory>tests/Unit/</directory>\n        </testsuite>\n        <testsuite name=\"Integration\">\n            <directory>tests/Integration/</directory>\n        </testsuite>\n    </testsuites>\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n    </coverage>\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\n            \\SymfonyTestsListener\" />\n    </listeners>\n```", "```php\n/var/www/html/symfony# ./runDebug.sh --testsuite Integration\n```", "```php\n/var/www/html/symfony# composer require symfony/orm-pack\n/var/www/html/symfony# composer require symfony/maker-bundle --dev\n```", "```php\nDATABASE_URL=\"mysql://root:mypassword@server-mysql/mydb?serverVersion=8&charset=utf8mb4\"\n```", "```php\n/var/www/html/symfony# php bin/console doctrine:database:create\n```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Service;\nuse PHPUnit\\Framework\\TestCase;\nclass ConsumptionServiceTest extends TestCase\n{\n    public function testCanComputeAndSave()\n    {\n        $this->fail(\"--- RED --\");\n    }\n}\n```", "```php\n/var/www/html/symfony# .runDebug.sh --testsuite Integration --filter ConsumptionServiceTest\n```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Service;\nuse PHPUnit\\Framework\\TestCase;\nclass ConsumptionServiceTest extends TestCase\n{\n    public function testCanComputeAndSave()\n    {\n        // Given\n        $name               = \"Damo\";\n        $morningCoffee      = 2;\n        $afternoonCoffee    = 3;\n        $eveningCoffee      = 1;\n        // Expected Total:\n        $expectedTotal = 6;\n        // Persist the data\n        $service    = new ConsumptionService();\n        $persistedId = $service->computeAndSave($name, \n        $morningCoffee, $afternoonCoffee, $eveningCoffee);\n        // Verify if the data persisted is correct:\n        // TODO:\n    }\n}\n```", "```php\n/var/www/html/symfony# ./runDebug.sh --testsuite Integration --filter ConsumptionServiceTest\n```", "```php\n/var/www/html/symfony# php bin/console make:entity\n```", "```php\nNew property name: name\nField type: string\nField length: 50\nCan this field be null in the database? no\nNew property name: total\nField type: integer\nCan this field be null in the database? no\n```", "```php\n<?php\nnamespace App\\Entity;\nuse App\\Repository\\ConsumptionRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n#[ORM\\Entity(repositoryClass: ConsumptionRepository::class)]\nclass Consumption\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'integer')]\n    private $id;\n    #[ORM\\Column(type: 'string', length: 50)]\n    private $name;\n    #[ORM\\Column(type: 'integer')]\n    private $total;\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n    public function getName(): ?string\n    {\n        return $this->name;\n    }\n    public function setName(string $name): self\n    {\n        $this->name = $name;\n        return $this;\n    }\n    public function getTotal(): ?int\n    {\n        return $this->total;\n    }\n    public function setTotal(int $total): self\n    {\n        $this->total = $total;\n        return $this;\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/console make:migration\n/var/www/html/symfony# php bin/console doctrine:migrations:migrate\n```", "```php\nDATABASE_URL=\"mysql://root:mypassword@server-mysql/coffee?serverVersion=8&charset=utf8mb4\"\n```", "```php\n/var/www/html/symfony# php bin/console doctrine:database:create --env=test\n```", "```php\n/var/www/html/symfony# php bin/console doctrine:migrations:migrate -n --env=test\n```", "```php\n# This file is the entry point to configure your own services.\n# Files in the packages/ subdirectory configure your dependencies.\n# Put parameters here that don't need to change on each machine where the app is deployed\n# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration\nparameters:\nservices:\n    # default configuration for services in *this* file\n    _defaults:\n        autowire: true      # Automatically injects \n            dependencies in your services.\n        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.\n    # makes classes in src/ available to be used as \n        services\n    # this creates a service per class whose id is the \n        fully-qualified class name\n    App\\:\n        resource: '../src/'\n        exclude:\n            - '../src/DependencyInjection/'\n            - '../src/Entity/'\n            - '../src/Kernel.php'\n    App\\Service\\ConsumptionService:\n        public: true\n    # add more service definitions when explicit \n        configuration is needed\n    # please note that last definitions always \n        *replace* previous ones\n```", "```php\n<?php\nnamespace App\\Service;\nuse App\\Entity\\Consumption;\nuse App\\Example\\Calculator;\nuse Doctrine\\Persistence\\ManagerRegistry;\nclass ConsumptionService\n{\n    /**\n     * @var Calculator\n     */\n    private Calculator $calculator;\n    /**\n     * @var ManagerRegistry\n     */\n    private $managerRegistry;\n    /**\n     * @param ManagerRegistry $doctrine\n     * @param Calculator $calculator\n     */\n    public function __construct(ManagerRegistry $doctrine, Calculator $calculator)\n    {\n        $this->setManagerRegistry($doctrine);\n        $this->setCalculator($calculator);\n    }\n    /**\n     * @param string $name\n     * @param int $morning\n     * @param int $afternoon\n     * @param int $evening\n     * @return int\n     */\n    public function calculateAndSave(string $name, int \n        $morning, int $afternoon, int $evening): int\n    {\n        $entityManager = $this->getManagerRegistry()->\n            getManager();\n        // Calculate total:\n        $sum = $this->getCalculator()->calculateTotal\n            ($morning, $afternoon, $evening);\n        // Consumption model or entity:\n        $consumption = new Consumption();\n        $consumption->setName($name);\n        $consumption->setTotal($sum);\n        // Persist using the Entity Manager:\n        $entityManager->persist($consumption);\n        $entityManager->flush();\n        return $consumption->getId();\n    }\n    /**\n     * @return Calculator\n     */\n    public function getCalculator(): Calculator\n    {\n        return $this->calculator;\n    }\n    /**\n     * @param Calculator $calculator\n     */\n    public function setCalculator(Calculator \n        $calculator): void\n    {\n        $this->calculator = $calculator;\n    }\n    /**\n     * @return ManagerRegistry\n     */\n    public function getManagerRegistry(): ManagerRegistry\n    {\n        return $this->managerRegistry;\n    }\n    /**\n     * @param ManagerRegistry $managerRegistry\n     */\n    public function setManagerRegistry(ManagerRegistry \n        $managerRegistry): void\n    {\n        $this->managerRegistry = $managerRegistry;\n    }\n}\n```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Service;\nuse App\\Entity\\Consumption;\nuse App\\Service\\ConsumptionService;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\\n    KernelTestCase;\nclass ConsumptionServiceTest extends KernelTestCase\n{\n    public function testCanComputeAndSave()\n    {\n        self::bootKernel();\n        // Given\n        $name               = \"Damo\";\n        $morningCoffee      = 2;\n        $afternoonCoffee    = 3;\n        $eveningCoffee      = 1;\n        // Expected Total:\n        $expectedTotal = 6;\n        // Test Step 1: Get the Symfony's service \n            container:\n        $container = static::getContainer();\n        // Test Step 2: Use PSR-11 standards to get an \n        instance of our service, pre-injected with the \n        EntityManager:\n        /** @var ConsumptionService $service */\n        $service = $container->get\n            (ConsumptionService::class);\n        // Test Step 3: Run the method we want to test for:\n        $persistedId = $service->calculateAndSave\n            ($name, $morningCoffee, $afternoonCoffee, \n                $eveningCoffee);\n        // Test Step 4: Verify if the data persisted \n            data is correct:\n        $em             = $service->\n            getManagerRegistry()->getManager();\n        $recordFromDb   = $em->find\n            (Consumption::class, $persistedId);\n        $this->assertEquals($expectedTotal, \n            $recordFromDb->getTotal());\n        $this->assertEquals($name, $recordFromDb->\n            getName());\n    }\n}\n```", "```php\n    /var/www/html/symfony# ./runDebug.sh --testsuite Integration --filter ConsumptionServiceTest\n    ```", "```php\nroot@0cb77fcadb5f:/var/www/html/symfony# ./runDebug.sh --testsuite Integration --filter ConsumptionServiceTest\nPHPUnit 9.5.5 by Sebastian Bergmann and contributors.\nTesting\n.                                                                   1 / 1 (100%)\nTime: 00:00.580, Memory: 18.00 MB\nOK (1 test, 2 assertions)\nroot@0cb77fcadb5f:/var/www/html/symfony#\n```", "```php\n    /var/www/html/symfony# php bin/console dbal:run-sql 'SELECT * FROM consumption' --env=test\n    ```"]