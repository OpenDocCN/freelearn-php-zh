- en: Chapter 11. Searching Your Site with the Search API Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In this chapter, we are going to look at a more powerful and flexible replacement
    for the search module that comes packaged with Drupal core. We''ll walk through
    the installation of the Apache Solr search server and look at ways of enhancing
    the user''s search experience.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to choose a suitable search configuration for your needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the Search API module to replace the Drupal core
    search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the Apache Solr search server using two different
    methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a search server and a search index using the Search API module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom faceted search blocks to enhance the user's search experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Drupal core search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like Drupal 7, Drupal 8 core comes packaged with its own built-in search module.
    This provides usable search functionality by querying the Drupal database directly.
    The Drupal core search allows you to search for user profiles and for node content.
    It periodically queries the database to maintain an index of content without requiring
    any prior configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Drupal search may be fine for your needs if you only require basic search
    functionality and you don''t have a large amount of site traffic. However, it
    has several functional limitations which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It uses the Drupal database to carry out its queries, placing extra load on
    the database which may already be a performance bottleneck on your site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not possible to control which nodes are indexed for the search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content is always indexed based on the default display mode of each node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The search only matches whole keywords for nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you mind about any of these limitations, you should switch to using the Search
    API module.
  prefs: []
  type: TYPE_NORMAL
- en: As well as allowing additional control over how your content is searched and
    indexed, the Search API module gives you the option of taking a load off the Drupal
    database by integrating with a third-party search engine.
  prefs: []
  type: TYPE_NORMAL
- en: If the complexity of your site or the amount of traffic it gets has increased
    to a point to which the performance of the database is becoming a bottleneck,
    you'll need to use the Search API module in conjunction with a third party search
    engine so that the Drupal database is left to concentrate on other things. Apache
    Solr is an example of a third party search engine which we'll use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Search API module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Search API module ([http://www.drupal.org/project/search_api](http://www.drupal.org/project/search_api))
    replaces the Drupal core search with a framework that can be used with different
    kinds of underlying search engines. The search engines exist as third parties
    independent of the Drupal site and its database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thomas Seidl (also known as "drunken monkey") is one of the main contributors
    to the Search API module. This is how he explained its origins:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Search API was created in 2010\. I was involved in discussions about how
    to improve Drupal''s core search module and turn it into more of a framework for
    Drupal 8\. The problem was that there was no search framework in Drupal and all
    search-related modules had to include the same boilerplate code over and over.
    I took the best parts of that discussion and turned them into a contributed module
    and search framework for Drupal 7."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Search API module can be extended with other contributed modules to provide
    very powerful search functionality. Search API also integrates with the Views
    module, which allows you to create Views listing pages based on search terms entered
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Solr search engine we'll use later is open source, fast, and has
    many features. However, in place of a search engine, we also have the option of
    continuing to query the Drupal database with the Search API module. This has the
    advantage that we can set up any complex configuration we require based on the
    Search API without installing a search engine in our development environment.
    Then, when we deploy our site to a production environment we can swap to using
    a search engine with minimal re-configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by setting up the Search API module to search using the Drupal database.
    This will allow us to explore some of the features and concepts that the Search
    API module provides. Later on, we'll swap to using the Apache Solr search engine
    with Search API and explore some more powerful search functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – basic installation and configuration of the Search API module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we''ll download, install, and configure the Search
    API module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download the `search_api` module using the method that you''re used
    to. If you have Drush installed, as explained in the *Mobile First, Responsive
    Design* section of [Chapter 5](ch05.html "Chapter 5. Theming in Drupal 8"), *Theming
    in Drupal 8*, you''ll be able to type the following at the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before we go further, we should follow Drupal's suggestion to uninstall the
    core search module which the Search API module replaces.![Time for action – basic
    installation and configuration of the Search API module](img/4659_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll be notified of this via a command line message if you install the module
    via Drush, or the message will appear on the **Status Report** page at **Reports**
    | **Status report**. Disabling the core search module will remove the search block
    as well as the search pages for content and users. Don''t panic, we''ll replace
    them. To install the core search module with drush, type:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Search API does not do anything on its own - we need to give it a search engine
    to interact with. To do this, we'll use a submodule that you will have downloaded
    as part of `search_api` called `search_api_db`. Enable it now using the method
    that you're used to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `search_api_db` module allows the Search API to interact directly with the
    Drupal database. This has the advantage of being simple to set up, and on small
    sites where the database does not already have significant load on it, you can
    use this method of search on the production server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `search_api_db` module contains a very handy submodule which sets up some
    sensible default configuration. You can then use this configuration as the basis
    of your search setup. To take advantage of this, enable `search_api_db_defaults`
    and then disable it again. All the configuration happens when the module is initially
    enabled and will remain when you disable the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you now navigate to **Configuration** | **Search and metadata** | **Search
    API**, you should see a screen similar to the following:![Time for action – basic
    installation and configuration of the Search API module](img/4659_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You downloaded and installed the Search API module and used one of its submodules
    to install some default configuration. We can now see that this configuration
    includes a search server and a search index, and we'll examine what this means.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few sections, we'll review some aspects of the default settings
    that have been set up by the `search_api_db_defaults` module. Note that some of
    these settings and screen layouts may change in subsequent versions of the modules
    that we're using. We won't cover all the settings, but hopefully enough to give
    you a good start in customizing the settings to your own needs.
  prefs: []
  type: TYPE_NORMAL
- en: An explanation of search servers and search indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Drupal terminology, a search server defines how searchable data is indexed.
    This includes the way in which it is queried on your Drupal site and how the search
    index is stored. These things are dictated by the *backend* that you choose to
    give your search server. In this chapter, we'll be looking at search servers that
    use the Drupal database as a backend and the Apache Solr search engine as a backend.
    However, there are other backends that you can use which will define other ways
    in which your data is queried and indexed.
  prefs: []
  type: TYPE_NORMAL
- en: The search index defines the indexing process. The search index is associated
    with a search server that you previously configured to power it. The search index
    settings dictate things such as the types of content that gets indexed on your
    site, the fields that are indexed, and various ways the data is processed before,
    during, and after the search.
  prefs: []
  type: TYPE_NORMAL
- en: By splitting the configuration up into a search server and a search index, it
    is possible to swap out the search engine that performs the work whilst maintaining
    the way the data is queried and indexed. This is a little akin to being able to
    swap the petrol engine in your car for a diesel one whilst maintaining everything
    else about the way it looks and feels to drive.
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to have more than one search server and choose which one
    is most appropriate to use, depending on the point you're at in site development
    or which of your environments you're working in.
  prefs: []
  type: TYPE_NORMAL
- en: To extend the search configuration even further, it is also possible to have
    multiple search indexes. Imagine a future in which your recipe site is so popular
    that you start selling cookery books of your recipes on your site. You may want
    to have a separate search index that contains only details of the books, so that
    when users type `India` in a separate search box, they only see cookery books
    related to Indian cooking in the search result. Both your search indexes could
    still be based on the search server with the Apache Solr backend.
  prefs: []
  type: TYPE_NORMAL
- en: Search server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having configured the Search API module in the previous steps, the first item
    you'll see listed on the Search API configuration table is a search server named
    Database Server. As the name suggests, this is a search server based on the Drupal
    database as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Edit** in the operations column and you will be taken to the Database
    Server configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search server](img/4659_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The server configuration is fairly self-explanatory. A server has a name and
    it should be enabled via the checkbox. It also has a backend, which in this case
    is Database and is provided by our `search_api_db` module. You can also set the
    minimum number of letters in words that will be used in a search.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we'll look at the configuration for default content index.
  prefs: []
  type: TYPE_NORMAL
- en: Search index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now require our search index settings. Configuration for the search index
    is also on the Search API page at **Configuration** | **Search and metadata**
    | **Search API**. Click on **Edit** next to the **Default content index** to see
    the configuration page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search index](img/4659_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You'll see that there are a number of data sources available for indexing. We're
    not just limited to users and node content as we were with the Drupal core search.
    For now we'll only index content, as it's already selected in the default configuration
    we installed.
  prefs: []
  type: TYPE_NORMAL
- en: You'll note also that the search index is linked to a search server by way of
    a radio button selection. The **Server** field is set to **Database Server** in
    this case, as that's the only one we have set up so far.
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, move on to the **Fields** tab at the top of the page. This is where we
    set which fields on each of the data sources actually get indexed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fields](img/4659_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inside the **general** table, you'll see **Item language** and **Rendered item**
    listed. These are properties that are common to all types of searchable data sources.
    The **Rendered item** field allows you to go to a full text search based on what
    an entity looks like when rendered in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: In the **CONTENT** table further down the page, you'll see fields that are common
    to nodes. For each field on the field configuration page, you can set the boost
    value, which controls the relative significance that a search match in that field
    is given when it comes to ordering the search results.
  prefs: []
  type: TYPE_NORMAL
- en: Processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Processors act on data or the query at different points during the search and
    indexing process, and make alterations. Processes have their own tab on the search
    index where they can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: '![Processors](img/4659_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Half way down this page, you see the processor order table which allows you
    to control the order in which the processors run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Processors](img/4659_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, the **Rendered item** processor, that assembles the whole entity
    to be searched, has to be run before the data gets indexed. Processors such as
    the highlight that gets put on the results of the search to show the term you
    searched for happens after the query is executed, so you will note that this is
    in the **POSTPROCESS QUERY** section.
  prefs: []
  type: TYPE_NORMAL
- en: If you're making changes to processors, pay special attention to the **Processor
    settings** in the vertical tabs at the bottom of the page. This is where the exact
    behavior of each processor is configured. If enabled processors aren't behaving
    exactly as you expect them to, it's these settings which should be your first
    port of call.
  prefs: []
  type: TYPE_NORMAL
- en: '![Processors](img/4659_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Populating your search index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've set up our search backend and search index, we need to use them
    to index the content on our site.
  prefs: []
  type: TYPE_NORMAL
- en: Bulk indexing of your content can be performed by clicking on the **Index now**
    button at the foot of the **Default content index view** tab. You'll see a blue
    progress bar to show progress as your content is indexed and then you'll be returned
    to the content index view tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content can also be indexed during a `cron` run. One way to trigger a `cron`
    run is with the `drush` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of content nodes that are indexed each time `cron` runs is 50 by
    default. If you have 50 items of content or less, the blue progress bar should
    show 100 percent after one `cron` run. If you have more content, you might have
    to run `cron` a few times before it is all indexed. You can adjust the number
    of nodes that are indexed on each `cron` run (that is, the `cron` batch size)
    on the **Edit** tab of your search settings. Scroll to the bottom of the page
    and expand the **Index Options** where you''ll be able to adjust this value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Populating your search index](img/4659_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whether you ran `cron` or clicked on the **Index now** button, your content
    should now be indexed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll note that there are some links at the bottom of the content index view
    tab that provide some extra control over the indexation of your content:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Queue all items for reindexing** marks all the currently indexed items of
    content as ready to be indexed again the next time `cron` runs or you click on
    **Index now**. Until content re-indexing is triggered, the current search index
    will continue to be used. This helps deliver uninterrupted searching for your
    users, even when content must be re-indexed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clear all indexed data** makes the current search index immediately unavailable
    and searches will stop yielding results until content is re-indexed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing the search to users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now we have a search index with content in it, but how do we actually allow
    the end users to perform a search on our Drupal site?
  prefs: []
  type: TYPE_NORMAL
- en: One of the features of Search API is that it integrates well with the Views
    module. This means that you can search content using the search server you set
    up and display it in a view. The `search_api_db_defaults` module that you used
    earlier provides some views configuration which implements the search index and
    search server that was configured.
  prefs: []
  type: TYPE_NORMAL
- en: To see this View, go to `/search/content` on your site. Try searching the content
    for a certain word and check that you get sensible results. You should find that
    if you have two items of content, one of which has your search keyword in the
    title and one in the body text, that the search results are ordered according
    to the boost values that you set in the **Fields** tab of your search index settings
    section earlier. By default, the title field has a boost value of eight while
    the rendered item has a boost value of one. Therefore, content that has your keyword
    in its title should appear before content that has your keyword in its body or
    elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: In order to better replicate the Drupal core search functionality that we disabled
    earlier in favor of the Search API, it would be nice to have a search field that
    we can display site-wide so that users don't need to navigate to `/search/content`
    to perform a search.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we''ll expose the search form in a block. Navigate to **Structure**
    | **Views** and click on the **Edit** button next to the **Search content** view.
    Expand the **Advanced** section and toggle **Exposed form in block** from **No**
    to **Yes**. Click on the **Save** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exposing the search to users](img/4659_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The exposed search field that appears at the top of our new search results
    page is now available in a block that we can configure to appear on pages on our
    site. Go to **Structure** | **Block layout** and click on **Place block** next
    to the region you want to place it in. Somewhere in the list that appears, you
    will see the block **Exposed form: search_content-page_1**. Configure the block
    settings in the usual way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exposing the search to users](img/4659_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should now have a sitewide search block that replaces the core search block
    that we removed.
  prefs: []
  type: TYPE_NORMAL
- en: Altering the search display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One advantage of Search API is that the way each item in your search results
    is displayed can be controlled with your content type display settings. You will
    note that the search content view uses a node display mode of **Search result
    highlighting input**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering the search display](img/4659_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a node display mode which is supplied by **search_api_db_defaults**.
    You can change the settings of this display mode from the settings of each content
    type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Structure** | **Content types**, choosing the content type whose display
    settings you''d like to change, and then go to tab **Manage display** | **Search
    result highlighting input**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering the search display](img/4659_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Try changing the fields from your content type that are displayed in the search
    results. For example, try hiding the image and setting the **Body format** to
    **Trimmed** with a trimmed limit of 400 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now get search results as something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Altering the search display](img/4659_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Excluding entities from being indexed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the configuration we've set up so far, all the nodes on your site will
    be indexed and will be searchable. What if we'd like to choose whether individual
    recipes we create on our site should appear in the search results or not. Perhaps
    we'd like to create promotional links to special recipes that are not available
    through a site search, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, there''s a contributed module for that called Search API Exclude Entity
    ([https://www.drupal.org/project/search_api_exclude_entity](https://www.drupal.org/project/search_api_exclude_entity)).
    When you download and install it, you''ll find that there is an additional field
    type available that can be added to your nodes and other entities. If you add
    this field to your recipe content type, then when you next create or edit a recipe,
    you''ll note that there are some extra metadata options that appear on the recipe
    edit screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Excluding entities from being indexed](img/4659_11_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, go to the **Processors** configuration on your search index: **Configuration**
    | **Search and metadata** | **Search API**. Click on **Edit** next to the **Default
    content index** to see the configuration page, then choose the **Processors**
    tab. You''ll see that you have a new Search API Exclude Entity that can be enabled.
    Once you''ve enabled this processor, scroll down to the **Processor settings**
    section at the bottom of the screen and check the checkbox next to the field name
    that you just added to your content type.'
  prefs: []
  type: TYPE_NORMAL
- en: Try creating a new recipe and excluding it from the search. Check that all your
    content has been indexed and then do a search for your new recipe. You should
    find that it doesn't appear in the search results.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Solr as the search backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main reason for using Search API over the core search module is that we
    can plug in different search engines and use them to index your content. This
    really becomes an advantage when we start working with a large site that contains
    a lot of content.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Solr is an open source search engine used by many high profile enterprise
    level sites. It is not part of Drupal or a Drupal module and is very often used
    independently of Drupal. However, it integrates well with the Drupal Search API
    module, as we'll see.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solr has the following advantages over using the Search API with the database:'
  prefs: []
  type: TYPE_NORMAL
- en: It's faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not rely on your Drupal database, freeing up database resources for
    Drupal to do the rest of its work with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be hosted on a server separate from your database and your code base
    which is useful when you need to scale your infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can search for phrases and use wildcards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll examine these same defaults later in this chapter. Meanwhile, if you'd
    like more information on the Apache Solr project, see its website at [http://lucene.apache.org/solr/](http://lucene.apache.org/solr/).
  prefs: []
  type: TYPE_NORMAL
- en: There are a few different ways to install Solr. Here, we'll explain two methods,
    one using a virtual machine and a puppet script, and one more manual method using
    an Ubuntu 14.04 server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you follow either of these methods, Apache Solr does not block unauthorized
    users from accessing your Solr server by default. If you are setting up a Solr
    server outside your local machine, or that can be connected to over the Internet,
    it is extremely important that you employ some method of securing Apache Solr.
    Otherwise, unauthorized users will be able to make search queries and possibly
    even compromise your website in other ways. See the section *Securing Apache Solr
    with Uncomplicated Firewall* in this chapter to learn how to secure Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Solr 4.x on a virtual machine with Vagrant and Puppet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a quick and easy method of setting up a disposable virtual machine that
    you can use locally for development purposes. It will behave exactly the same
    as a Solr instance on a real server that you can go on to set up later if you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: A useful online service for generating Puppet deployment configuration was introduced
    in [Chapter 1](ch01.html "Chapter 1. Setting Up a Drupal Development Environment"),
    *Setting Up a Drupal Development Environment*. This tool is called PuPHPet—Puppet
    with a capital PHP in the middle to denote that it is primarily intended for PHP
    web development. At the time of writing, the latest version of Apache Solr to
    be available on PuPHPet ([https://puphpet.com/](https://puphpet.com/)) was 4.10.*.
    Therefore, these instructions will assume that you're using the 4.x version of
    Solr.
  prefs: []
  type: TYPE_NORMAL
- en: If you really need the latest and greatest version of Solr, you can skip to
    the next section where we'll explain how to install Solr manually on an Ubuntu
    14.04 server.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating and configuring your virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following steps will use an online service to create a Puppet script that
    you can use with Vagrant to launch a virtual machine locally. Puppet, Vagrant,
    and the PuPHPet site were introduced in [Chapter 1](ch01.html "Chapter 1. Setting
    Up a Drupal Development Environment"), *Setting Up a Drupal Development Environment*
    of this book. If you haven't already got Puppet and Vagrant set up locally, follow
    the instructions there to get them working.
  prefs: []
  type: TYPE_NORMAL
- en: Create your VM at PuPHPet. Point your browser at [https://puphpet.com/](https://puphpet.com/)
    and click the big green **Get started right away** button:![Time for action –
    creating and configuring your virtual machine](img/4659_11_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the wizard that you'll be guided through, you can generally accept the
    default options. Just make sure that when you get to the **Search Servers** section
    you choose to install the latest 4.* version of Apache Solr. We'll also glance
    at a couple of other options here for creating a nice, clean virtual machine that
    you can use time and time again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the first page of the wizard after you''ve clicked on the **Get started**
    button, make sure you have **Deploy to Local Host** checked, along with VirtualBox
    as the provider. We''ll also select Ubuntu Trusty 14.04 LTS x64 as the Distro:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating and configuring your virtual machine](img/4659_11_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you scroll further down this page, you'll find options for setting an **Internal
    Identifier**, **Hostname**, and **IP Address**. You may want to change these if
    you have other virtual machines already running and need to distinguish this one
    from the others.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating and configuring your virtual machine](img/4659_11_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: It's also important that you have a folder that will be shared between your
    physical host machine and the virtual machine you are creating. By default, this
    is configured for you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow the wizard using the big green buttons at the bottom of the screen and
    accept the defaults for the rest of the **System** section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you get to the **Web Servers** section, you can deselect both Apache and
    Nginx (Apache Solr doesn't require either of them). All the options can also be
    deselected in the **Languages and Databases** sections—Solr does not require any
    of these.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Keep moving through the wizard, continuing to accept the further defaults until
    you get to **Search Servers**. Choose **Apache Solr** and select the latest version
    from the drop-down box:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating and configuring your virtual machine](img/4659_11_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Download and set up your virtual machine. Now you can hit the **Create Archive**
    button to download a ZIP file containing the Puppet configuration you've just
    set up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As previously explained in [Chapter 1](ch01.html "Chapter 1. Setting Up a Drupal
    Development Environment"), *Setting Up a Drupal Development Environment*, you
    can now run your virtual machine by extracting the ZIP archive, navigating to
    the extracted folder at your command line (which will contain a file called `Vagrantfile`),
    and typing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will take a little while the first time you start the virtual machine because
    it has to download a large disk image containing the operating system. During
    this process you should get some verbose output at your command line, informing
    you of what is happening.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If everything ran correctly, you should now be able to open a browser and navigate
    to `http://localhost:8983/solr`. If this doesn't work, check that the port number
    is correct by scrolling back through the output at your command line and checking
    which local port has been forwarded to `8983`, the Apache Solr port.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here''s what you should now see in your browser:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating and configuring your virtual machine](img/4659_11_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Install the Drupal schema. Apache Solr is now installed on your virtual machine
    and you can connect to it through your browser. Congratulations!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not going to be of much use though unless we give it some content to index
    and search. We need to connect it to our Drupal site. The first step to doing
    this is to install the correct configuration files that tell Solr how to index
    Drupal content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download and extract the `search_api_solr` module for Drupal 8\. Put it in the
    `/modules` folder of your site, but don't enable it just yet. The configuration
    files required for the Vagrant Solr instance can be found in the Drupal `search_api_solr`
    module at `search_api_solr/solr-conf/4.x`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To copy these files to your virtual machine, copy the `4.x` folder into the
    `puphpet` folder, which sits in the same folder as the Vagrantfile that you extracted
    earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, SSH into your virtual machine by navigating to the folder that contains
    Vagrantfile and typing:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will be logged in to your virtual machine over SSH, just as though it was
    a remote server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `puphpet` folder you copied the configuration into is shared between the
    physical host machine and the virtual machine. You can find the `4.x` folder at
    `/var/www/puphpet/4.x` on the virtual machine. First, back up the original Solr
    configuration and then move the new configuration into your Solr instance at `/opt/solr/solr-4.10.2/example/solr/collection1/conf`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we'll restart Solr. An easy way to do this is just to restart our entire
    virtual machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, exit the SSH terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then stop the virtual machine:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then start it up again:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that everything worked correctly by visiting the Solr admin page again
    in your browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating and configuring your virtual machine](img/4659_11_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select **collection1** from the dropdown in the sidebar and then click on **Schema
    Browser** at the bottom of the sidebar. In the dropdown that then appears in the
    main content area of the page, you should see a bunch of Drupal related **fields**,
    **bundle_name**, **entity_id**, **entity_type**, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, you'll need to enable and configure the `seach_api_solr` module in Drupal.
    To do this now, skip to the section. The Search API Solr module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You used Vagrant and Puppet to set up a virtual machine running Apache Solr.
    You then configured your Solr server to work with Drupal by installing the configuration
    file that comes with the Drupal Search API Solr module. This virtual machine configuration
    can be reused again and again whilst you're experimenting and developing with
    Apache Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Solr 5.x manually on Ubuntu 14.04
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the method to use if any of the following apply:'
  prefs: []
  type: TYPE_NORMAL
- en: You want a later version of Apache Solr than is available on PuPHPet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need Solr to run on a server outside your local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want more control over the installation process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These instructions will assume that you are installing Solr 5.x on an Ubuntu
    4.x box. This could be the same server that your site is running on, or one dedicated
    to Solr.
  prefs: []
  type: TYPE_NORMAL
- en: The version of Solr that is available in the Ubuntu package repository is one
    major version before the current one. Rather than simply using Ubuntu's apt package
    manager tool to install the earlier version, we will follow a method that allows
    us to install the latest 5.x version of Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing and configuring Solr on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll install some required packages and then we''ll manually install
    the latest version of Solr from the Apache Solr site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install required packages. First, use `apt-get` to ensure you have the `python-software-properties`
    package available. This will allow you to add a new package repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the unofficial Java installer repository:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that you want to add this repository when prompted and then update
    the list of source packages:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now install the Oracle Java JDK Version 8:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is an Oracle package and you will have to agree to the license terms in
    order to proceed. Just press *Enter* when prompted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the Apache Solr installer. Now that we have the Java JDK installed, we can
    install the latest version of Apache Solr. Go to the list of mirrors available
    to download Solr from [http://www.apache.org/dyn/closer.lua/lucene/solr/](http://www.apache.org/dyn/closer.lua/lucene/solr/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a mirror and then choose the latest directory with a version number that
    starts with `5.*`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, right-click the latest `.tgz` file whose name does not contain `src` and
    copy the link to it. At the time of writing, this was `solr-5.5.0.tgz`, where
    the version number appears in the commands below, replace with the version you
    have downloaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Back at the command line of the server you are installing Solr on, download
    the file to your home folder and untar it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Solr 5.x comes with its own installer script which makes it easier to set up
    than the previous versions. We''ll run the script as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When it starts up, Solr will output the port number that it is running on,
    usually `8983`. Open a browser window and navigate to the IP address of your server
    followed by the port number. For example: `http://<Server IP address>:8983`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the Solr admin screen as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – installing and configuring Solr on Ubuntu](img/4659_11_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Ensure you pay special attention to the following section in this chapter *Securing
    Apache Solr with Uncomplicated Firewall* to ensure there is no unauthorized access
    to your Solr interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the Drupal schema. Apache Solr is now installed on your virtual machine
    and you can connect to it through your browser. Congratulations!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not going to be of much use though unless we give it some content to index
    and search. We need to connect it to our Drupal site. The first step to doing
    this is to install the correct configuration files that tell Solr how to index
    Drupal content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The configuration files required to make Solr work with Drupal can be found
    in the `search_api_solr` module. Navigate to the module page on Drupal to get
    the link to the latest packaged `tar.gz` file. Download it to your Apache Solr
    server and extract the files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will have to replace the filenames in the preceding commands with the filename
    of the latest version of the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the directory that you will copy the Solr configuration files
    into:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the files from the Drupal module into the Solr configuration directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the correct ownership on the files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new Solr core:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Solr service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate again to the Solr admin screen in your browser. In the **Core Selector**
    drop down in the sidebar, you should now have a core called **drupal**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – installing and configuring Solr on Ubuntu](img/4659_11_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You installed the latest version of Apache Solr on Ubuntu using the package
    manager. This is the process you'll use when setting Solr up from scratch on a
    production server. Just make sure you secure it too!
  prefs: []
  type: TYPE_NORMAL
- en: Securing Apache Solr with Uncomplicated Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very important that you secure Apache Solr to prevent outside access to
    it. If your Solr server is accessible over the Internet or even over your local
    network, you should employ a method of controlling unauthorized access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring Uncomplicated Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Ubuntu, you can use the built in Uncomplicated Firewall tool to set access
    to the server at a firewall level:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by denying all access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, we don''t want to break the SSH connection that we''re currently using,
    so make sure that we allow access for SSH connections:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, we want to allow all connections from our local IP address:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `<ip address>` is the IP address of the machine you are connecting from.
    You will also want to add the IP address of your Drupal server here if it's different
    from your Solr server. Just run the preceding command again, changing the IP address
    to that of your Drupal server. For further details, see the Ubuntu UFW documentation
    at [https://help.ubuntu.com/community/UFW](https://help.ubuntu.com/community/UFW).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now enable the firewall with the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may receive a warning to say that the existing SSH commands may be disrupted.
    As long as you've allowed access for SSH connections with the command we ran earlier,
    you can proceed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now check the status of your firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should receive an output that looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should now be able to access the Solr admin interface from your local machine
    or network but not from anywhere else. Try navigating to the following URL: `http://<Server
    IP address>:8983`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You configured Ubuntu's Uncomplicated Firewall to allow access to your Solr
    installation only from a specific IP address.
  prefs: []
  type: TYPE_NORMAL
- en: The Search API Solr module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prior to Drupal 8, Drupal used a module that was independent of Search API
    to integrate with Apache Solr. This module was called Apache Solr Search. However,
    it was decided that the Search API would become the module on which to base all
    search integrations for Drupal 8\. A main contributor to both the Search API project
    and the earlier Apache Solr Search module for Drupal 7 is Nick Veenhof (also known
    as "Nick_vh" on Drupal.org). He explained the rationale behind making the Search
    API module a requirement of the new Search API Solr module:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Drupal 8 has also helped in forcing us to rethink certain concepts and also
    live up to our promise to avoid the divide we had in Drupal 7 between the Apache
    Solr Module and Search API. Search API will be the sole provider of Apache Solr
    integration in Drupal 8\. Search API in Drupal 8 ships with sane defaults (which
    you can enable or disable) that pre-configures the module so it can be used instantly."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Time for action – configuring Drupal to use Apache Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'However you set up Apache Solr, you''ll now want to configure Drupal to use
    your new Solr server as your search server in Drupal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the Search API Solr module. First we need to install the `search_api_solr`
    module on our Drupal site. Download the module and extract it into the `/modules`
    folder of your Drupal site as usual. The module has some dependencies that are
    managed by composer, so navigate into the directory of your module and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the time of writing, the development version of `search_api_solr` was required
    in order to fix some errors on the official alpha release displayed for download
    on the module page. To fetch this, it is best to use Git:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring the Search API Solr module. When we installed the `search_api_db_defaults`
    module earlier on in this chapter, it created a search server based on the database
    for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the Search API Solr module installed, we can set up a second
    search server based on the Solr server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Configuration** | **Search and metadata** | **Search API** and
    click on the **Add Server** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Fill in the form as shown next. The Solr path should be `/solr/` followed by
    the name of your core. This will be `drupal` if you followed the previous instructions
    to install Solr 5.x or `collection1` if you followed the instructions for installing
    Solr 4.x:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – configuring Drupal to use Apache Solr](img/4659_11_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you''ve secured the Solr admin interface using the firewall rules as explained
    in the previous section, you will not need to add login details for HTTP authentication.
    Leave this blank and click on **Save**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – configuring Drupal to use Apache Solr](img/4659_11_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that you've created a second search server in the Drupal configuration,
    one of the advantages of the Search API module is that you can swap between them
    easily. You may want to dedicate your Solr server to the production site for example,
    but you still want to be able to perform searches for development purposes on
    your staging and development sites.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In development and staging environments, you can set your search index to use
    the database, and on the production environment, you can swap it to use Solr.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the default content index that you set up earlier in this chapter and
    change the **Server** radio button to **Solr**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – configuring Drupal to use Apache Solr](img/4659_11_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on **Save** and then re-index your content. That's it! Go back to your
    search page and test out the new search, this time powered by Solr.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You installed Drupal's Search API Solr module and configured it to connect to
    your Apache Solr installation via a new search server. You then connected your
    search index to the new search server and indexed your content using Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Using the read-only mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations, you may want to make your search index read-only. This can
    help if you implement a Drupal development workflow across several servers. For
    example, when you copy the Drupal database down from production to your staging
    and development environments in order to keep them updated with the latest content
    from your production site. Rather than create a new Apache Solr server for each
    of your environments, you'll want to use the same Apache Solr server but ensure
    that only content added to your production server gets indexed.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your staging and production environments, you can check the **Read only**
    checkbox in the **Index Options**. This will prevent any test content you create
    here making it into the Apache Solr index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the read-only mode](img/4659_11_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should note that if you add a new content type to the system, you will need
    to ensure that the search index is not set to read only in order for the content
    type to be indexed. When the index is set to read-write (that is, the read only
    checkbox is unchecked), any new content created using your new content type will
    be automatically indexed as usual.
  prefs: []
  type: TYPE_NORMAL
- en: Search facets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further showcase the power of the Search API, we're going to create a facet
    block to accompany the search listing. You may be familiar with facet blocks from
    other websites that have a lot of categorized content to search and sort.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here are some faceted search blocks from a popular recipe website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Search facets](img/4659_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[http://www.bbcgoodfood.com/search/recipes?query=family](http://www.bbcgoodfood.com/search/recipes?query=family)'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – building faceted search blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how you can build one of these faceted search blocks using the
    Search API and the Drupal 8 facets module:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and enable the facets module from ([https://www.drupal.org/project/facets](https://www.drupal.org/project/facets))
    in the way you're used to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Configuration** | **Search API** | **Facets** and click on the
    blue Add Facet button. As an example, we'll create a facet block that uses words
    from the titles of our recipes. However, if you have categorized your recipes
    using taxonomy terms, you could also base your facet block on that field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the facet a human readable name and a machine name:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – building faceted search blocks](img/4659_11_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The facet block needs a source to get its data from. In the **Facet field**
    dropdown, you'll have one option which will be the search view that we created
    earlier. Set the **Facet field** to **Title** and the weight of the facet to `0`,
    then save the settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also configure the display settings of your facet by clicking the **Display**
    tab at the top of the page. Here, you can choose options such as whether to display
    your facet list as a dropdown, checkboxes, or list of links. You can also choose
    the way the facet list behaves, such as hiding items that will not narrow the
    currently displayed search results down any further. We're going to aim to make
    our facet list similar to the example at the start of this section. Therefore,
    we'll choose **List of links** as the **Widget** and we'll check **Hide non narrowing
    results**:![Time for action – building faceted search blocks](img/4659_11_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now created a facet which is related to a facet source. The facets
    table you now see at **Configuration** | **Search API** | **Facets** should look
    as follows:![Time for action – building faceted search blocks](img/4659_11_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The facet you have created will manifest itself as a block. We'll make this
    block visible by placing it in a region in the usual way using the Block layout
    configuration at **Structure** | **Block layout**. Next to Sidebar first, click
    on the **Place block** button and search for your block in the list that pops
    up:![Time for action – building faceted search blocks](img/4659_11_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The block will have the name that you gave the facet earlier in the configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Place block**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the block configuration screen, in the **Other facet** blocks field, select
    the radio button of the Facet you created:![Time for action – building faceted
    search blocks](img/4659_11_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save block** and navigate to your search page at `/search/content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will have to ensure you have a few pieces of content on your site that have
    the same word in their title to show the power of facets. For example, I have
    three recipes with the word `awesome` in the title. To start with, the facet block
    lists all the discrete words in the titles of my recipes:![Time for action – building
    faceted search blocks](img/4659_11_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When I search for `awesome`, the search results and facet list are narrowed
    down:![Time for action – building faceted search blocks](img/4659_11_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I can now click in the facet block on any of the other words that occur in titles
    that also have the word awesome in them. This makes it very easy to filter down
    to the search result that you are looking for:![Time for action – building faceted
    search blocks](img/4659_11_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you've built up a large amount of content on your site, your users will
    be able to search, filter, and explore using a powerful mix of keyword searches
    and filtering with facets.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You configured Drupal's Facet module to show a block containing search terms
    to filter by next to your search results. This allows your users to further refine
    their search by choosing from the list of search keywords in your content titles.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try creating a taxonomy vocabulary for tagging your recipes with different categorizations.
    For example, cuisine, origin country, different dietary requirements, ease to
    make, or level of spice. Then create new facet blocks that allow your users to
    filter their search by each of these categories. For example, they may wish to
    start by searching for `rice`, then use facets to filter further by `Italian`,
    and finally `Vegetarian` to end up with a recipe for a tasty Asparagas risotto!
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Q1\. Choose for which of the following you can use Uncomplicated Firewall for:'
  prefs: []
  type: TYPE_NORMAL
- en: To prevent remote access to a server from a certain IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To stop users logging into your server with root access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To prevent a certain port being accessed on your server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display a welcome message to your users when they log into your server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Q2\. Choose which of the following are valid reasons to use Apache Solr instead
    of a database-based search:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to be able to search the titles of the nodes on your site as well as
    the body content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your site has a lot of visitors and the load on your Drupal database is often
    high.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You want anonymous users and logged in users to be able to search on your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to automatically suggest search terms to your users as they type in
    the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Drupal search concepts and how to configure
    a powerful and flexible search solution for visitors to find what they're looking
    for on your site. We introduced the Search API module and understood how it can
    be configured to work with the Drupal database. We then introduced the Apache
    Solr search engine and looked at the advantages of using this as a search engine
    instead of relying on the Drupal database. Finally, we learnt how to create a
    faceted search interface like that used by online shops or other sites with a
    large amount of content to search through.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will explore one of the major new developer features
    in Drupal 8: built-in support for REST. We''ll develop an Angular JS app that
    will consume a REST API on our website.'
  prefs: []
  type: TYPE_NORMAL
