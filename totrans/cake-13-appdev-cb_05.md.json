["```php\nCREATE TABLE `accounts`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`email` VARCHAR(255) NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nCREATE TABLE `profiles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`account_id` INT UNSIGNED NOT NULL,\n`name` VARCHAR(255) default NULL,\nPRIMARY KEY(`id`),\nKEY `account_id`(`account_id`),\nFOREIGN KEY `profiles__accounts`(`account_id`) REFERENCES `accounts`(`id`)\n);\n\n```", "```php\nINSERT INTO `accounts`(`id`, `email`) VALUES\n(1, 'john.doe@example.com'),\n(2, 'jane.doe@example.com');\nINSERT INTO `profiles`(`id`, `account_id`, `name`) VALUES\n(1, 1, 'John Doe'),\n(2, 2, 'Jane Doe');\n\n```", "```php\n<?php\nclass Profile extends AppModel {\npublic $belongsTo = array(\n'Account' => array('type' => 'INNER')\n);\n}\n?>\n\n```", "```php\n<?php\nclass ProfilesController extends AppController {\npublic function index() {\n$profiles = $this->Profile->find('all');\n$this->set(compact('profiles'));\n}\n}\n?>\n\n```", "```php\n<ul>\n<?php foreach($profiles as $profile) { ?>\n<li>#<?php echo $profile['Profile']['id']; ?>:\n<?php echo $this->Html->link($profile['Profile']['name'], 'mailto:' . $profile['Account']['email']); ?></li>\n<?php } ?>\n</ul>\n\n```", "```php\n<?php echo $this->element('sql_dump'); ?>\n\n```", "```php\nConfigure::write('debug', 2);\n\n```", "```php\n    <?php\n    class QueryLogComponent extends Object {\n    public $minimumTime = 10;\n    public $explain = 'EXPLAIN %s';\n    public function initialize($controller, $settings = array()) {\n    $this->_set($settings);\n    if (!is_bool($this->enabled)) {\n    $this->enabled = Configure::read('debug') >= 2;\n    }\n    }\n    }\n    ?>\n\n    ```", "```php\n    class:public function beforeRender($controller)\n    {\n    if ($this->enabled)\n    {\n    $queryLog = array();\n    $datasources = ConnectionManager::sourceList();\n    foreach($datasources as $name)\n    {\n    $datasource = ConnectionManager::getDataSource($name);\n    if ($datasource->isInterfaceSupported('getLog'))\n    {\n    $log = $datasource->getLog();\n    foreach($log['log'] as $i => $line)\n    {\n    if (empty($line['error']) && $line['took'] >= $this->minimumTime && stripos(trim($line['query']), 'SELECT') === 0)\n    {\n    $explain = $datasource->query(sprint ($this->explain, $line['query']\n    ));\n    if (!empty($explain))\n    {\n    foreach($explain as $j => $explainLine)\n    {\n    $explain[$j] = array_combine (array_map('strtolower', array_keys($explainLine[0])), $explainLine[0]);\n    }\n    $log['log'][$i]['explain'] = $explain;\n    }\n    }\n    }\n    if (!empty($log['log']))\n    {\n    $queryLog[$name] = $log;\n    }\n    }\n    }\n    if (!empty($queryLog))\n    {\n    $controller->set(compact('queryLog'));\n    }\n    }\n    }\n\n    ```", "```php\n    <?php\n    class AppController extends Controller\n    {\n    public $components = array( 'QueryLog' => array( 'minimumTime' => 0 )\n    );\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    if (empty($queryLog))\n    {\n    echo $this->element('sql_dump');\n    return;\n    }\n    foreach($queryLog as $datasource => $log)\n    {\n    ?>\n    <table class=\"cake-sql-log\">\n    <caption>\n    Datasource <strong><?php echo $datasource; ?></strong>:\n    <?php echo number_format($log['count']) . ' queries (' . $log['time'] . ' ms. total time)'; ?>\n    </caption>\n    <thead><tr>\n    <th>Query</th>\n    <th>Error</th>\n    <th>Affected</th>\n    <th>Num. rows</th>\n    <th>Took</th>\n    </tr></thead>\n    <tbody>\n    <?php foreach($log['log'] as $line) { ?>\n    <tr>\n    <td>\n    <?php echo $line['query']; ?>\n    <?php if (!empty($line['explain'])) { ?>\n    <br /><br />\n    <table class=\"cake-sql-log-explain\">\n    <thead><tr>\n    <th>ID</th>\n    <th>Select Type</th>\n    <th>Table</th>\n    <th>Type</th>\n    <th>Possible Keys</th>\n    <th>Key</th>\n    <th>Ref</th>\n    <th>Rows</th>\n    <th>Extra</th>\n    </tr></thead>\n    <tbody>\n    <?php foreach($line['explain'] as $explainLine) { ?>\n    <tr>\n    <td><?php echo $explainLine['id']; ?></td>\n    <td><?php echo $explainLine['select_type']; ?></td>\n    <td><?php echo $explainLine['table']; ?></td>\n    <td><?php echo $explainLine['type']; ?></td>\n    <td><?php echo $explainLine['possible_keys']; ?></td>\n    <td><?php\n    echo $explainLine['key'];\n    if (!empty($explainLine['key_len'])) {\n    echo ' (' . number_format($explainLine['key_len']) . ' )';\n    }\n    ?></td>\n    <td><?php echo $explainLine['ref']; ?></td>\n    <td><?php echo number_format($explainLine['rows']); ?></td>\n    <td><?php echo $explainLine['extra']; ?></td>\n    </tr>\n    <?php } ?>\n    </tbody>\n    </table>\n    <?php } ?>\n    </td>\n    <td><?php echo $line['error']; ?></td>\n    <td><?php echo number_format($line['affected']); ?></td>\n    <td><?php echo number_format($line['numRows']); ?></td>\n    <td><?php echo number_format($line['took']) . ' ms.'; ?></td>\n    </tr>\n    <?php } ?>\n    </tbody>\n    </table>\n    <?php } ?>\n\n    ```", "```php\n    <?php echo $this->element('query_log'); ?>\n\n    ```", "```php\nname,email,country,gender,age\n\"John Doe\",\"john.doe@email.com\",\"United States of America\",\"Male\",34\n\"Jane Doe\",\"jane.doe@email.com\",\"United Kingdom\",\"Female\",25\n\n```", "```php\n    public $csv = array(\n    'datasource' => 'datasources.CsvSource',\n    'path' => '/home/mariano/',\n    'readonly' => true\n    );\n\n    ```", "```php\n    <?php\n    class Contact extends AppModel\n    {\n    public $useDbConfig = 'csv';\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    class ContactsController extends AppController\n    {\n    public function index()\n    {\n    $this->set('contacts', $this->paginate());\n    }\n    }\n    ?>\n\n    ```", "```php\n    <p>\n    <?php echo $this->Paginator->prev(); ?>&nbsp;\n    <?php echo $this->Paginator->numbers(); ?>&nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </p>\n    <table>\n    <thead><tr>\n    <th>ID</th>\n    <th>Name</th>\n    <th>Email</th>\n    <th>Country</th>\n    <th>Gender</th>\n    <th>Age</th>\n    </tr></thead>\n    <tbody>\n    <?php foreach($contacts as $contact) { ?>\n    <tr>\n    <td><?php echo $contact['id']; ?></td>\n    <td><?php echo $contact['name']; ?></td>\n    <td><?php echo $contact['email']; ?></td>\n    <td><?php echo $contact['country']; ?></td>\n    <td><?php echo $contact['gender']; ?></td>\n    <td><?php echo $contact['age']; ?></td>\n    </tr>\n    <?php } ?>\n    </tbody>\n    </table>\n\n    ```", "```php\npublic function index()\n{\n$this->paginate = array(\n'conditions' => array('age >' => 30)\n);\n$this->set('contacts', $this->paginate());\n}\n\n```", "```php\n<?php\nclass Csv extends AppModel\n{\npublic $useDbConfig = 'csv';\npublic $useTable = false;\n}\n?>\n\n```", "```php\npublic function import()\n{\n$this->loadModel('Csv');\n$sources = array_flip($this->Csv->getDataSource()->listSources());\nforeach($sources as $source => $null)\n{\n$this->Csv->table = $source;\n$sources[$source] = $this->Csv->find('all');\n}\ndebug($sources);\nexit;\n}\n\n```", "```php\n$dataSource = $this->Csv->getDataSource();\n$dataSource->close();\n$dataSource->setConfig(array('path' => '/home/john/'));\n$dataSource->connect();\n\n```", "```php\n    public $feed = array(\n    'datasource' => 'datasources.RssSource',\n    'url' => 'http://marianoiglesias.com.ar/category/cakephp/feed/'\n    );\n\n    ```", "```php\n    <?php\n    class Post extends AppModel {\n    public $useDbConfig = 'feed';\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    class PostsController extends AppController\n    {\n    public $helpers = array('Time');\n    public function index()\n    {\n    $this->paginate = array(\n    'order' => array('pubDate' => 'desc'),\n    'limit' => 9\n    );\n    $this->set('posts', $this->paginate());\n    }\n    }\n    ?>\n\n    ```", "```php\n    <p>\n    <?php echo $this->Paginator->prev(); ?>&nbsp;\n    <?php echo $this->Paginator->numbers(); ?>&nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </p>\n    <table>\n    <thead><tr><th>Title</th><th>Published</th></tr></thead>\n    <tbody>\n    <?php foreach($posts as $post) { ?>\n    <tr>\n    <td><?php echo $this->Html->link($post['Post']['title'], $post['Post']['link']); ?></td>\n    <td><?php echo $this->Time->nice($post['Post']['pubDate']); ?></td>\n    </tr>\n    <?php } ?>\n    </tbody>\n    </table>\n\n    ```", "```php\npublic function index()\n{\n$this->paginate = array(\n'conditions' => array('pubDate >=' => '2009-01-01'),\n'order' => array('pubDate' => 'desc'),\n'limit' => 9\n);\n$this->set('posts', $this->paginate());\n}\n\n```", "```php\n$this->paginate = array(\n'url' => 'http://marianoiglesias.com.ar/category/cakephp/feed/',\n'order' => array('pubDate' => 'desc'),\n'limit' => 9\n);\n$this->set('posts', $this->paginate());\n\n```", "```php\n$this->Post->getDataSource()->setConfig(array(\n'url' => 'http://marianoiglesias.com.ar/category/cakephp/feed/'\n));\n$this->paginate = array(\n'order' => array('pubDate' => 'desc'),\n'limit' => 9\n);\n$this->set('posts', $this->paginate());\n\n```", "```php\n<?php\nclass Tweet extends AppModel {\npublic $useDbConfig = 'twitter';\n}\n?>\n\n```", "```php\n<?php\nclass TweetsController extends AppController {\npublic function index($twitter) {\n$tweets = $this->Tweet->find('all', array(\n'conditions' => array('username' => $twitter)\n));\n$this->set(compact('tweets', 'twitter'));\n}\npublic function add($twitter) {\nif (!empty($this->data)) {\n$this->Tweet->create();\nif ($this->Tweet->save($this->data)) {\n$this->Session->setFlash('Succeeded');\n} else {\n$this->Session->setFlash('Failed');\n}\n}\n$this->redirect(array('action'=>'index', $twitter));\n}\n}\n?>\n\n```", "```php\n<?php\necho $this->Form->create(array('url' => array('action'=>'add', $twitter)));\necho $this->Form->inputs(array(\n'status' => array('label'=>false)\n));\necho $this->Form->end('Tweet this');\n?>\n<?php foreach($tweets as $tweet) { ?>\n<p><?php echo $tweet['Tweet']['text']; ?></p>\n<p><small>\n<?php echo $this->Html->link(\ndate('F d, Y', strtotime($tweet['Tweet']['created_at'])),\n'http://www.twitter.com/' . $tweet['User']['screen_name'] . '/status/' . $tweet['Tweet']['id']\n); ?>\nwith <?php echo $tweet['Tweet']['source']; ?>\n</small></p>\n<br />\n<?php } ?>\n\n```", "```php\npublic $twitter = array(\n'datasource' => 'twitter',\n'key' => 'KEY',\n'secret' => 'SECRET_KEY'\n);\n\n```", "```php\n<?php\nApp::import('Vendor', 'HttpSocketOauth');\nclass TwitterSource extends DataSource {\npublic $_baseConfig = array(\n'key' => null,\n'secret' => null\n);\nprotected $_schema = array(\n'tweets' => array(\n'id' => array(\n'type' => 'integer',\n'null' => true,\n'key' => 'primary',\n'length' => 11,\n),\n'text' => array(\n'type' => 'string',\n'null' => true,\n'key' => 'primary',\n'length' => 140\n),\n'status' => array(\n'type' => 'string',\n'null' => true,\n'key' => 'primary',\n'length' => 140\n),\n)\n);\npublic function __construct($config = null, $autoConnect = true) {\nparent::__construct($config, $autoConnect);\nif ($autoConnect) {\n$this->connect();\n}\n}\npublic function listSources() {\nreturn array('tweets');\n}\npublic function describe($model) {\nreturn $this->_schema['tweets'];\n}\npublic function connect() {\n$this->connected = true;\n$this->connection = new HttpSocketOauth();\nreturn $this->connected;\n}\npublic function close() {\nif ($this->connected) {\nunset($this->connection);\n$this->connected = false;\n}\n}\n}\n\n```", "```php\nclass created before:public function token($callback = null) {\n$response = $this->connection->request(array(\n'method' => 'GET',\n'uri' => array(\n'host' => 'api.twitter.com',\n'path' => '/oauth/request_token'\n),\n'auth' => array(\n'method' => 'OAuth',\n'oauth_callback' => $callback,\n'oauth_consumer_key' => $this->config['key'],\n'oauth_consumer_secret' => $this->config['secret']\n)\n));\nif (!empty($response)) {\nparse_str($response, $response);\nif (empty($response['oauth_token']) && count($response) == 1 && current($response) == '') {\ntrigger_error(key($response), E_USER_WARNING);\n} elseif (!empty($response['oauth_token'])) {\nreturn $response['oauth_token'];\n}\n}\nreturn false;\n}\npublic function authorize($token, $verifier) {\n$return = false;\n$response = $this->connection->request(array(\n'method' => 'GET',\n'uri' => array(\n'host' => 'api.twitter.com',\n'path' => '/oauth/access_token'\n),\n'auth' => array(\n'method' => 'OAuth',\n'oauth_consumer_key' => $this->config['key'],\n'oauth_consumer_secret' => $this->config['secret'],\n'oauth_token' => $token,\n'oauth_verifier' => $verifier\n)\n));\nif (!empty($response)) {\nparse_str($response, $response);\nif (count($response) == 1 && current($response) == '') {\ntrigger_error(key($response), E_USER_WARNING);\n} else {\n$return = $response;\n}\n}\nreturn $return;\n}\n\n```", "```php\nclass:public function read($model, $queryData = array()) {\nif (\nempty($queryData['conditions']['username']) ||\nempty($this->config['authorize'])\n) {\nreturn false;\n}\n$response = $this->connection->request(array(\n'method' => 'GET',\n'uri' => array(\n'host' => 'api.twitter.com',\n'path' => '1/statuses/user_timeline/' . $queryData['conditions']['username'] . '.json'\n),\n'auth' => array_merge(array(\n'method' => 'OAuth',\n'oauth_consumer_key' => $this->config['key'],\n'oauth_consumer_secret' => $this->config['secret']\n), $this->config['authorize'])\n));\nif (empty($response)) {\nreturn false;\n}\n$response = json_decode($response, true);\nif (!empty($response['error'])) {\ntrigger_error($response['error'], E_USER_ERROR);\n}\n$results = array();\nforeach ($response as $record) {\n$record = array('Tweet' => $record);\n$record['User'] = $record['Tweet']['user'];\nunset($record['Tweet']['user']);\n$results[] = $record;\n}\nreturn $results;\n}\n\n```", "```php\nclass:public function create($model, $fields = array(), $values = array()) {\nif (empty($this->config['authorize'])) {\nreturn false;\n}\n$response = $this->connection->request(array(\n'method' => 'POST',\n'uri' => array(\n'host' => 'api.twitter.com',\n'path' => '1/statuses/update.json'\n),\n'auth' => array(\n'method' => 'OAuth',\n'oauth_token' => $this->config['authorize']['oauth_token'],\n'oauth_token_secret' => $this->config['authorize']['oauth_token_secret'],\n'oauth_consumer_key' => $this->config['key'],\n'oauth_consumer_secret' => $this->config['secret']\n),\n'body' => array_combine($fields, $values)\n));\nif (empty($response)) {\nreturn false;\n}\n$response = json_decode($response, true);\nif (!empty($response['error'])) {\ntrigger_error($response['error'], E_USER_ERROR);\n}\nif (!empty($response['id'])) {\n$model->setInsertId($response['id']);\nreturn true;\n}\nreturn false;\n}\n\n```", "```php\npublic function beforeFilter() {\nparent::beforeFilter();\nif (!$this->_authorize()) {\n$this->redirect(null, 403);\n}\n}\nprotected function _authorize() {\n$authorize = $this->Session->read('authorize');\nif (empty($authorize)) {\n$source = $this->Tweet->getDataSource();\n$url = Router::url(null, true);\nif (\n!empty($this->params['url']['oauth_token']) &&\n!empty($this->params['url']['oauth_verifier'])\n) {\n$authorize = $source->authorize(\n$this->params['url']['oauth_token'],\n$this->params['url']['oauth_verifier']\n);\n$this->Session->write('authorize', $authorize);\n} elseif (!empty($this->params['url']['denied'])) {\nreturn false;\n} else {\n$token = $source->token($url);\n$this->redirect('http://api.twitter.com/oauth/authorize?oauth_token=' . $token);\n}\n}\nif (!empty($authorize)) {\n$this->Tweet->getDataSource()->setConfig(compact('authorize'));\n}\nreturn $authorize;\n}\n\n```", "```php\nCREATE TABLE `profiles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`name` VARCHAR(255) default NULL,\nPRIMARY KEY(`id`)\n) ENGINE=InnoDb;\n\n```", "```php\nINSERT INTO `profiles`(`id`, `name`) VALUES\n(1, 'John Doe'),\n(2, 'Jane Doe');\n\n```", "```php\n<?php\nclass Profile extends AppModel {\n}\n?>\n\n```", "```php\n<?php\nclass ProfilesController extends AppController {\npublic function index() {\n}\n}\n?>\n\n```", "```php\n    <?php\n    App::import('Core', 'DboMysql');\n    class DboMysqlTransaction extends DboMysql {\n    protected $backAutoCommit;\n    protected $lockTimeoutErrorCode = 1205;\n    public function __construct($config = null, $autoConnect = true) {\n    $this->_baseConfig = Set::merge(array(\n    'lock' => array(\n    'log' => LOGS . 'locks.log',\n    'recover' => true,\n    'retries' => 1\n    ),\n    'autoCommit' => null\n    ), $this->_baseConfig);\n    $this->_commands = array_merge(array(\n    'lock' => 'LOCK TABLES {$table} {$operation}',\n    'unlock' => 'UNLOCK TABLES',\n    'setAutoCommit' => 'SET @@autoCommit={$autoCommit}'\n    ), $this->_commands);\n    parent::__construct($config, $autoConnect);\n    if (\n    !is_null($this->config['autoCommit']) &&\n    !$this->setAutoCommit($this->config['autoCommit'])\n    ) {\n    trigger_error('Could not set autoCommit', E_USER_WARNING);\n    }\n    }\n    }\n    ?>\n\n    ```", "```php\n    public function lock($model = null, $options = array()) {\n    if (!is_object($model) && empty($options)) {\n    $options = $model;\n    $model = null;\n    }\n    if (empty($options) && !isset($model)) {\n    trigger_error('Nothing to lock', E_USER_WARNING);\n    return false;\n    } elseif (!is_array($options)) {\n    $options = array('table' => $options);\n    } elseif (Set::numeric(array_keys($options))) {\n    if (count($options) > 1) {\n    $options = array('table' => $options[0], 'operation' => $options[1]);\n    } else {\n    if (!empty($options[0]) && is_array($options[0])) {\n    $options = $options[0];\n    } else {\n    $options = array('table' => $options[0]);\n    }\n    }\n    }\n    if (empty($options['table']) && isset($model)) {\n    $options = array_merge(array(\n    'table' => $model->table,\n    'alias' => $model->alias\n    ), $options);\n    if (!empty($options['operation']) && $options['operation'] == 'read') {\n    unset($options['alias']);\n    }\n    }\n    $options = array_merge(array('alias'=>null, 'operation'=>'read', 'local'=>false, 'low'=>false), $options);\n    if (!in_array(strtolower($options['operation']), array('read', 'write'))) {\n    trigger_error(sprintf('Invalid operation %s for locking', $options['operation']), E_USER_WARNING);\n    return false;\n    }\n    $table = $this->fullTableName($options['table']);\n    if (!empty($options['alias'])) {\n    $table .= ' AS ' . $this->name($options['alias']);\n    }\n    $operation = strtoupper($options['operation']);\n    if ($options['operation'] == 'read' && $options['local']) {\n    $operation .= ' LOCAL';\n    } elseif ($options['operation'] == 'write' && $options['low']) {\n    $operation = 'LOW_PRIORITY ' . $operation;\n    }\n    $sql = strtr($this->_commands['lock'], array(\n    '{$table}' => $table,\n    '{$operation}' => $operation\n    ));\n    return ($this->query($sql) !== false);\n    }\n    public function unlock($model = null, $options = array()) {\n    return ($this->query($this->_commands['unlock']) !== false);\n    }\n    While still editing the DboMysqlTransaction class, add the following methods to allow us to get and change the auto commit status:public function getAutoCommit($model = null) {\n    if (is_null($this->config['autoCommit'])) {\n    if (!$this->isConnected() && !$this->connect()) {\n    trigger_error('Could not connect to database', E_USER_WARNING);\n    return false;\n    }\n    $result = $this->query('SELECT @@autocommit AS ' . $this->name('autocommit'));\n    if (empty($result)) {\n    trigger_error('Could not fetch autoCommit status from database', E_USER_WARNING);\n    return false;\n    }\n    $this->config['autoCommit'] = !empty($result[0][0]['autocommit']);\n    }\n    return $this->config['autoCommit'];\n    }\n    public function setAutoCommit($model, $autoCommit = null) {\n    if (!$this->isConnected() && !$this->connect()) {\n    trigger_error('Could not connect to database', E_USER_WARNING);\n    return false;\n    }\n    if (is_bool($model)) {\n    $autoCommit = $model;\n    $model = null;\n    } elseif (is_array($autoCommit)) {\n    list($autoCommit) = $autoCommit;\n    }\n    $this->config['autoCommit'] = !empty($autoCommit);\n    $sql = strtr($this->_commands['setAutoCommit'], array(\n    '{$autoCommit}' => ($this->config['autoCommit'] ? '1' : '0')\n    ));\n    return ($this->query($sql) !== false);\n    }\n\n    ```", "```php\n    public function begin($model) {\n    $this->_startTransaction();\n    return parent::begin($model);\n    }\n    public function commit($model) {\n    $result = parent::commit($model);\n    $this->_endTransaction();\n    return $result;\n    }\n    public function rollback($model) {\n    $result = parent::rollback($model);\n    $this->_endTransaction();\n    return $result;\n    }\n    protected function _startTransaction() {\n    if ($this->getAutoCommit()) {\n    $this->backAutoCommit = $this->getAutoCommit();\n    $this->setAutoCommit(false);\n    }\n    }\n    protected function _endTransaction() {\n    if (isset($this->backAutoCommit)) {\n    $this->setAutoCommit($this->backAutoCommit);\n    $this->backAutoCommit = null;\n    }\n    }\n    public function query() {\n    $args = func_get_args();\n    if (!empty($args) && count($args) > 2 && in_array($args[0], array_keys($this->_commands))) {\n    list($command, $params, $model) = $args;\n    if ($this->isInterfaceSupported($command)) {\n    return $this->{$command}($model, $params);\n    }\n    }\n    return call_user_func_array(array('parent', 'query'), $args);\n    }\n\n    ```", "```php\n    public function _execute($sql, $retry = 0) {\n    $result = parent::_execute($sql);\n    $error = $this->lastError();\n    if (\n    !empty($error) &&\n    $this->config['lock']['recover'] &&\n    preg_match('/^\\b' . preg_quote($this->lockTimeoutErrorCode) . '\\b/', $error)\n    ) {\n    if ($retry == 0) {\n    $message = 'Got lock on query [' . $sql . ']';\n    $queries = array_reverse(Set::extract($this->_queriesLog, '/query'));\n    if (!empty($queries)) {\n    $message .= \" Query trace (newest to oldest): \\n\\t\";\n    $message .= implode(\"\\n\\t\", array_slice($queries, 0, 5));\n    }\n    $this->lockLog($message);\n    }\n    if ($retry < $this->config['lock']['retries']) {\n    $result = $this->_execute($sql, $retry + 1);\n    } elseif (!empty($this->config['lock']['log'])) {\n    $this->lockLog('Failed after ' . number_format($retry) . ' retries');\n    }\n    } elseif (empty($error) && $retry > 0 && !empty($this->config['lock']['log'])) {\n    $this->lockLog('Succeeded after ' . number_format($retry) . ' retries');\n    }\n    if (empty($error) && !$this->fullDebug && !empty($this->config['lock']['log'])) {\n    $this->logQuery($sql);\n    }\n    return $result;\n    }\n    protected function lockLog($message) {\n    $message = '['.date('d/m/Y H:i:s') . '] ' . $message . \"\\n\";\n    $handle = fopen($this->config['lock']['log'], 'a');\n    if (!is_resource($handle)) {\n    trigger_error(sprintf('Could not open log file %s', $this->config['lock']['log']), E_USER_WARNING);\n    return false;\n    }\n    fwrite($handle, $message);\n    fclose($handle);\n    return true;\n    }\n\n    ```", "```php\n    public function index() {\n    $this->Profile->setAutoCommit(false);\n    if ($this->Profile->lock()) {\n    $profile = $this->Profile->find('all');\n    debug($profile);\n    $this->Profile->unlock();\n    }\n    exit;\n    }\n\n    ```", "```php\n    SET @@autocommit=0;\n    LOCK TABLE `profiles` WRITE;\n\n    ```", "```php\n    [23/06/2010 09:14:11] Got lock on query [LOCK TABLES `profiles` AS `Profile` READ] Query trace (newest to oldest):\n    SET @@autocommit=0\n    DESCRIBE `profiles`\n    SHOW TABLES FROM `cookbook_chapter5_transaction`;\n    [23/06/2010 09:14:17] Failed after 1 retries\n\n    ```", "```php\n    UNLOCK TABLES;\n\n    ```", "```php\n$this->Profile->lock();\n\n```", "```php\n$this->Profile->lock(array('operation'=>'write'))\n\n```", "```php\n$this->Profile->getDataSource()->lock(array(\n'table' => 'profiles',\n'operation'=>'write'\n));\n\n```"]