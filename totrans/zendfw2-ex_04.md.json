["```php\n        public function getServiceConfig()\n        {\n            return array(\n                'abstract_factories' => array(),\n                'aliases' => array(),\n                'factories' => array(),\n                'invokables' => array(),\n                'services' => array(),\n                'shared' => array(),\n            );\n        }\n    ```", "```php\n    <?php\n    return array(\n        'service_manager' => array(\n            'abstract_factories' => array(),\n            'aliases' => array(),\n            'factories' => array(),\n            'invokables' => array(),\n            'services' => array(),\n            'shared' => array(),\n        ),\n    );\n    ```", "```php\n    public function getServiceConfig()\n    {\n      return array(\n        'abstract_factories' => array(),\n        'aliases' => array(),\n        'factories' => array(\n\n          // DB\n          'UserTable' =>  function($sm) {\n            $tableGateway = $sm->get('UserTableGateway');\n            $table = new UserTable($tableGateway);\n            return $table;\n          },\n          'UserTableGateway' => function ($sm) {\n            $dbAdapter = $sm->get('Zend\\Db\\Adapter\\Adapter');\n            $resultSetPrototype = new ResultSet();\n            $resultSetPrototype->setArrayObjectPrototype(new User());\n            return new TableGateway('user', $dbAdapter, null, $resultSetPrototype);\n          },\n\n          // FORMS\n          'LoginForm' => function ($sm) {\n            $form = new \\Users\\Form\\LoginForm();\n            $form->setInputFilter($sm->get('LoginFilter'));\n            return $form;\n          },\n          'RegisterForm' => function ($sm) {\n            $form = new \\Users\\Form\\RegisterForm();\n            $form->setInputFilter($sm->get('RegisterFilter'));\n            return $form;\n          },\n\n          // FILTERS\n          'LoginFilter' => function ($sm) {\n            return new \\Users\\Form\\LoginFilter();\n          },\n          'RegisterFilter' => function ($sm) {\n            return new \\Users\\Form\\RegisterFilter();\n          },\n        ),\n        'invokables' => array(),\n        'services' => array(),\n        'shared' => array(),\n      );\n    }\n    ```", "```php\n    use Users\\Model\\User;\n    use Users\\Model\\UserTable;\n\n    use Zend\\Db\\ResultSet\\ResultSet;\n    use Zend\\Db\\TableGateway\\TableGateway;\n    ```", "```php\n    use Zend\\Form\\Element as Element;\n    use Zend\\Form\\Element; // same as previous line\n    ```", "```php\n    // to get Login Form\n    $form = $this->getServiceLocator()->get('LoginForm');\n\n    // to get User Table\n    $userTable = $this->getServiceLocator()->get('UserTable');\n    ```", "```php\ninterface Zend\\Db\\TableGateway\\TableGatewayInterface\n{\n    public function getTable();\n    public function select($where = null);\n    public function insert($set);\n    public function update($set, $where = null);\n    public function delete($where);\n}\n```", "```php\n    $myTableName = $myTableGateway->getTable();\n    ```", "```php\n    $rowset = $myTableGateway->select( array('id' => 2));\n    ```", "```php\n    $myTableGateway->insert( array('id' => 2, 'name'=>'Ravi'));\n    ```", "```php\n    $rowset = $myTableGateway->update(array('name' => 'Jerry') , array('id' => 2));\n    ```", "```php\n    $myTableGateway->delete( array('id' => 2));\n    ```", "```php\n    $myTableGateway->insert( array('name'=>'Ravi'));\n    $insertId = $myTableGateway-> getLastInsertValue ();\n    ```", "```php\n        public function fetchAll()\n        {\n          $resultSet = $this->tableGateway->select();\n          return $resultSet;\n        }\n\n        public function getUser($id)\n        {\n          $id  = (int) $id;\n          $rowset = $this->tableGateway->select(array('id' => $id));\n          $row = $rowset->current();\n          if (!$row) {\n            throw new \\Exception(\"Could not find row $id\");\n          }\n          return $row;\n        }\n\n        public function getUserByEmail($userEmail)\n        {\n          $rowset = $this->tableGateway->select(array('email' => $userEmail));\n          $row = $rowset->current();\n          if (!$row) {\n            throw new \\Exception(\"Could not find row $ userEmail\");\n          }\n          return $row;\n        }\n\n        public function deleteUser($id)\n        {\n          $this->tableGateway->delete(array('id' => $id));\n        }\n        ```", "```php\n        $userTable = $this->getServiceLocator()\n                                      ->get('UserTable');\n        $viewModel  = new ViewModel(array(\n                         'users' => $userTable->fetchAll())); \n        return $viewModel;\n        ```", "```php\n        $userTable = $this->getServiceLocator()\n                                      ->get('UserTable');\n        $user = $userTable->getUser(\n                               $this->params()->fromRoute('id')); \n        $form = $this->getServiceLocator()\n                                 ->get('UserEditForm');\n        $form->bind($user);\n        $viewModel  = new ViewModel(array(\n                   'form' => $form, \n                   'user_id' => $this->params()->fromRoute('id')\n                  ));\n        return $viewModel;\n        ```", "```php\n        // Get User ID from POST\n        $post = $this->request->getPost();\n        $userTable = $this->getServiceLocator()\n                                      ->get('UserTable');       \n        // Load User entity\n        $user = $userTable->getUser($post->id);\n\n        // Bind User entity to Form\n        $form = $this->getServiceLocator()\n                                 ->get('UserEditForm');\n        $form->bind($user);\t\n        $form->setData($post);\n\n        // Save user\n        $this->getServiceLocator()\n                         ->get('UserTable')->saveUser($user);\n        ```", "```php\n        $this->getServiceLocator()->get('UserTable')\n                ->deleteUser($this->params()\n                ->fromRoute('id'));\n        ```", "```php\n    'user-manager' => array(\n      'type'    => 'Segment',\n      'options' => array(\n        'route'    => '/user-manager[/:action[/:id]]',\n        'constraints' => array(\n          'action'     => '[a-zA-Z][a-zA-Z0-9_-]*',\n          'id'     => '[a-zA-Z0-9_-]*',\n        ),\n        'defaults' => array(\n          'controller' => 'Users\\Controller\\UserManager',\n          'action'     => 'index',\n        ),\n      ),\n    ),\n    ```", "```php\n    'Users\\Controller\\UserManager' => 'Users\\Controller\\UserManagerController',\n    ```", "```php\n    <?php\n    return array(\n      // Other configurations\n      // ..\n      // ..\n      // MODULE CONFIGURATIONS\n      'module_config' => array(\n        'upload_location' => __DIR__ . '/../data/uploads',\n      ),\n    );\n    ```", "```php\n    CREATE TABLE IF NOT EXISTS uploads (\n      id INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,\n      filename VARCHAR( 255 ) NOT NULL ,\n      label VARCHAR( 255 ) NOT NULL ,\n      user_id INT NOT NULL,\n      UNIQUE KEY (filename)\n    );\n    ```", "```php\n    public function getUploadsByUserId($userId)\n    {\n      $userId  = (int) $userId;\n      $rowset = $this->tableGateway->select(\n            array('user_id' => $userId));\n      return $rowset;\n    }\n    ```", "```php\n    $uploadTable = $this->getServiceLocator()\n                                 ->get('UploadTable');\n    $userTable = $this->getServiceLocator()\n                                 ->get('UserTable');\n    // Get User Info from Session\n    $userEmail = $this->getAuthService()\n                                 ->getStorage()->read();\n    $user = $userTable->getUserByEmail($userEmail);\n\n    $viewModel  = new ViewModel( array(\n    'myUploads' => $uploadTable->getUploadsByUserId($user->id),\n    ));\n    return $viewModel;\n    ```", "```php\n    $this->add(array(\n      'name' => 'fileupload',\n      'attributes' => array(\n        'type'  => 'file',\n      ),\n      'options' => array(\n        'label' => 'File Upload',\n      ),\n    ));\n    ```", "```php\n    public function getFileUploadLocation()\n    {\n      // Fetch Configuration from Module Config\n      $config  = $this->getServiceLocator()->get('config');\n      return $config['module_config']['upload_location'];\n    }\n    ```", "```php\n        $uploadFile = $this->params()->fromFiles('fileupload');\n        $form->setData($request->getPost());\n\n        if ($form->isValid()) {\n          // Fetch Configuration from Module Config\n          $uploadPath    = $this->getFileUploadLocation();\n\n          // Save Uploaded file    \t\n          $adapter = new \\Zend\\File\\Transfer\\Adapter\\Http();\n          $adapter->setDestination($uploadPath);\n          if ($adapter->receive($uploadFile['name'])) {\n            // File upload sucessfull\n            $exchange_data = array();\n            $exchange_data['label'] = $request->getPost()->get('label');\n            $exchange_data['filename'] = $uploadFile['name'];\n            $exchange_data['user_id'] = $user->id;\n\n            $upload->exchangeArray($exchange_data);\n            $uploadTable = $this->getServiceLocator()->get('UploadTable');\n            $uploadTable->saveUpload($upload);\n\n            return $this->redirect()\n                    ->toRoute('users/upload-manager' , \n                          array('action' =>  'index'\n                      ));\n          }\n        }\n        ```", "```php\n    CREATE TABLE IF NOT EXISTS uploads_sharing (\n      id INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,\n      upload_id INT NOT NULL ,\n      user_id INT NOT NULL,\n      UNIQUE KEY (upload_id, user_id)\n    );\n    ```", "```php\n    'UploadSharingTableGateway' => function ($sm) {\n      $dbAdapter = $sm->get('Zend\\Db\\Adapter\\Adapter');\n      return new TableGateway('uploads_sharing', $dbAdapter);\n    },\n    ```", "```php\n    public function __construct(TableGateway $tableGateway, \n                    TableGateway $uploadSharingTableGateway)\n    {\n        $this->tableGateway = $tableGateway;\n        $this->uploadSharingTableGateway = $uploadSharingTableGateway;\n    }\n    ```", "```php\n    'UploadTable' =>  function($sm) {\n      $tableGateway = $sm->get('UploadTableGateway');\n      $uploadSharingTableGateway = $sm->get('UploadSharingTableGateway');\n      $table = new UploadTable($tableGateway, $uploadSharingTableGateway);\n      return $table;\n    },\n    ```", "```php\n    public function addSharing($uploadId, $userId)\n    {\n      $data = array(\n        'upload_id' => (int)$uploadId,\n        'user_id'  => (int)$userId,\n      );\n      $this->uploadSharingTableGateway->insert($data);\n    }\n\n    public function removeSharing($uploadId, $userId)\n    {\n      $data = array(\n        'upload_id' => (int)$uploadId,\n        'user_id'  => (int)$userId,\n      );\n      $this->uploadSharingTableGateway->delete($data);\n    }\n\n    public function getSharedUsers($uploadId)\n    {\n      $uploadId  = (int) $uploadId;\n      $rowset = $this->uploadSharingTableGateway->select(\n                          array('upload_id' => $uploadId));\n      return $rowset;\n    }    \n\n    public function getSharedUploadsForUserId($userId)\n    {\n      $userId  = (int) $userId;\n\n      $rowset = $this->uploadSharingTableGateway->select(\n      function (Select $select) use ($userId){\n        $select->columns(array()) \n          ->where(array('uploads_sharing.user_id'=>$userId))\n          ->join('uploads', 'uploads_sharing.upload_id = uploads.id');\n      });\n\n      return $rowset;\n    }\n    ```", "```php\n    $userTable = $this->getServiceLocator()\n                  ->get('UserTable');\n    $uploadTable = $this->getServiceLocator()\n                  ->get('UploadTable');\n    $form = $this->getServiceLocator()->get('UploadForm');\n    $request = $this->getRequest();\n    if ($request->isPost()) {\n      $userId = $request->getPost()->get('user_id');\n      $uploadId = $request->getPost()->get('upload_id');\n      $uploadTable->addSharing($uploadId, $userId);\n    }\n    ```", "```php\n    public function fileDownloadAction()\n    {  \n      $uploadId = $this->params()->fromRoute('id');\n      $uploadTable = $this->getServiceLocator()->get('UploadTable');\n      $upload = $uploadTable->getUpload($uploadId);\n\n      // Fetch Configuration from Module Config\n      $uploadPath    = $this->getFileUploadLocation();\n      $file = file_get_contents($uploadPath .\"/\" . $upload->filename);\n\n      // Directly return the Response \n      $response = $this->getEvent()->getResponse();\n      $response->getHeaders()->addHeaders(array(\n        'Content-Type' => 'application/octet-stream',\n        'Content-Disposition' => 'attachment;filename=\"' .$upload->filename . '\"',\n\n      ));\n      $response->setContent($file);\n\n      return $response;      \n    }\n    ```", "```php\n       $result = new ViewModel();\n       $result->setTerminal(true);\n       return $result;\n    ```"]