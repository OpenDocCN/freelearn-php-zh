- en: Developing your Own Theme
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发你自己的主题
- en: At this point, you know how to find themes on the web and install them for use
    on your WordPress website. But, there's a lot more that WordPress has to offer,
    particularly in the theme development department. In this chapter, you'll learn
    how to turn your own design into a fully functional WordPress theme, which you'll
    then be able to use on your website. You'll also learn how to share your WordPress
    theme with other users on the web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你知道如何在网络上找到主题并将它们安装到你的WordPress网站上使用。但是，WordPress还有更多要提供，尤其是在主题开发方面。在本章中，你将学习如何将你自己的设计转换成一个完全功能性的WordPress主题，然后你可以在你的网站上使用它。你还将学习如何与其他网络用户分享你的WordPress主题。
- en: 'All you will need before we get started is the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，你需要以下内容：
- en: Your own website design
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你自己的网站设计
- en: The ability to slice and dice your design to turn it into an HTML structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的设计切割成HTML结构的能力
- en: We'll start out with tips on slicing and dicing, so that your HTML and CSS files
    are as WordPress-friendly as possible, and then cover the steps for turning that
    HTML build into a fully functional theme.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从切割和切割的建议开始，以确保你的HTML和CSS文件尽可能符合WordPress的要求，然后介绍将HTML构建转换为完全功能性的主题的步骤。
- en: Note that I assume you are already comfortable writing and working with HTML
    and CSS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我假设你已经熟悉编写和使用HTML和CSS。
- en: 'The topics we will be covering in this chapter include the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Setting up your design
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的设计
- en: Converting your build into a theme
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的构建转换为主题
- en: Creating template files within your theme
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的主题中创建模板文件
- en: Making your theme widget-friendly
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使你的主题对小工具友好
- en: Enabling a menu in your theme
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的主题中启用菜单
- en: Making your theme editable in the WordPress Customizer
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使你的主题在WordPress自定义器中可编辑
- en: Creating a child theme
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建子主题
- en: Sharing your theme
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享你的主题
- en: 'This chapter covers only the very basics of theme creation. This topic actually
    deserves a whole book, and it has one! I highly recommend *WordPress Theme Development:
    Beginner''s Guide, Rachel McCollin and Tessa Blakeley Silver, Packt Publishing*.
    This book covers everything you could possibly want to know about creating your
    own theme in detail, including details such as choosing a color scheme, considering
    typography, writing the best CSS, and laying out your HTML using rapid design
    comping. If this chapter leaves you wanting more, go there!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅涵盖主题创建的非常基础的部分。实际上，这个主题值得有一整本书，而且确实有一本！我强烈推荐《WordPress主题开发：入门指南》，作者Rachel
    McCollin和Tessa Blakeley Silver，Packt Publishing。这本书详细介绍了你如何创建自己的主题，包括选择配色方案、考虑字体、编写最佳CSS以及使用快速设计合成来布局HTML等细节。如果这一章让你还想了解更多，就去那里看看吧！
- en: Setting up your design
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的设计
- en: Just about any design in the world can be turned into a WordPress theme. However,
    there are some general guidelines you should follow—regarding both the design
    and the HTML/CSS build of your theme.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎世界上任何设计都可以变成WordPress主题。然而，你应该遵循一些关于你主题设计和HTML/CSS构建的一般指南。
- en: Designing your theme to be WordPress-friendly
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计你的主题以符合WordPress的要求
- en: 'While you can design your blog any way you want, a good starting point would
    be with one of the standard blog layout, as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以以任何你想要的方式设计你的博客，但一个好的起点是使用以下截图所示的标准博客布局：
- en: '![](img/def63c81-60c5-4f94-a157-9ce3b997c7e7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/def63c81-60c5-4f94-a157-9ce3b997c7e7.png)'
- en: 'Note that, while these standard layouts have a differing number of columns,
    most of them have the following essential parts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然这些标准布局的列数不同，但它们大多数都有以下基本部分：
- en: A header
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: A main column
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要列
- en: A side column(s)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏（s）
- en: A footer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: WordPress expects your theme to follow this pattern, for the most part. While
    you can be creative and not include one or more of these blocks in your design,
    you will get the most educational value out of this experience if you don't skip
    anything. WordPress will provide you with functions that make your work easier.
    Also, a build that stays within the same general design patterns of WordPress
    themes will easily accommodate the existing plugins and widgets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress期望你的主题大部分遵循这个模式。虽然你可以发挥创意，不在你的设计中包含一个或多个这些模块，但如果你不跳过任何内容，你将能从这次体验中获得最多的教育价值。WordPress将为你提供使你的工作更轻松的功能。此外，一个保持与WordPress主题相同的一般设计模式的构建将很容易适应现有的插件和小工具。
- en: That said, a common situation in the WordPress world is to build custom home
    pages or landing pages (that is, purpose-specific pages, which are mostly commercial)
    that feature completely different designs. Therefore, you might stumble upon websites
    that don't look like they're built with WordPress at first glance. Also, many
    modern theme frameworks give you the possibility to create such custom home pages,
    as well as other custom page templates. This is all part of the trend to make
    WordPress capable of running any kind of website.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，在WordPress世界中，一个常见的情况是构建定制的首页或着陆页（即特定目的的页面，大多是商业用途），这些页面具有完全不同的设计。因此，你可能会遇到一眼看上去不像是用WordPress构建的网站。此外，许多现代主题框架也提供了创建此类自定义首页以及其他自定义页面模板的可能性。这都属于使WordPress能够运行任何类型网站的趋势的一部分。
- en: 'In this chapter, you''re going to learn how to build a basic WordPress theme
    that offers a classic blog layout. The following screenshot demonstrates what
    the final product will look like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何构建一个提供经典博客布局的基本WordPress主题。以下截图展示了最终产品的样子：
- en: '![](img/d7f2d14b-7fa9-4d67-9225-9fcd0aa8b14a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7f2d14b-7fa9-4d67-9225-9fcd0aa8b14a.png)'
- en: The HTML structure of the design is built on top of the _S starter theme (you
    can read more about underscores at [https://underscores.me/](https://underscores.me/)),
    and the visual elements are all done through CSS, with only minimal modifications
    to the original HTML structure.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设计的HTML结构建立在_S启动主题之上（你可以在[https://underscores.me/](https://underscores.me/)上了解更多关于下划线的信息）上，视觉元素全部通过CSS完成，对原始HTML结构只做了最小程度的修改。
- en: Three paths to theme development
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题开发的三个路径
- en: 'Essentially, there are three paths that you can follow when developing your
    new theme:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在开发你的新主题时，你可以遵循三条路径：
- en: You can either work from the ground up, by building the HTML structure and the
    functional structure of the theme by hand
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择从头开始，通过手动构建主题的HTML结构和功能结构
- en: You can work on top of an existing theme framework, where you only have to adapt
    your design to work on the structure provided by the framework itself
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在现有的主题框架之上进行工作，你只需要将你的设计适应框架本身提供的结构
- en: You can go for a solution that sits somewhere in between
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择一个介于两者之间的解决方案
- en: All of these paths have their pros and cons.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些路径都有其优缺点。
- en: Building a theme from the ground up
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始构建主题
- en: The main advantage of building a theme from the ground up is the massive educational
    value you get. When you develop a theme from scratch, you learn the basics of
    theme construction and function. This kind of knowledge will go a long way for
    your future projects in WordPress.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始构建主题的主要优势是获得巨大的教育价值。当你从头开始开发主题时，你会学习到主题构建和功能的基础知识。这种知识对你的WordPress未来项目将大有裨益。
- en: On the other hand, it's also the longest of the three paths. In a professional
    production environment (among people designing and developing themes as a profession),
    creating themes from scratch is a highly time-consuming approach, making it quite
    ineffective. And it's not that much about adapting the design (which must always
    be done with theme frameworks as well); it's more about building the core functionality
    of the theme.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这也是三条路径中最耗时的。在专业的生产环境中（在以设计和发展主题为职业的人中间），从头开始创建主题是一种耗时很高的方法，使其相当无效。这不仅仅关于适应设计（在主题框架中也必须这样做）；更多的是关于构建主题的核心功能。
- en: Building a theme with a framework
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用框架构建主题
- en: The main advantages of this approach are its time-efficiency and the quality
    of the final result. For instance, if you're building a theme from scratch, you
    have to make sure to keep your theme up-to-date long after the development process
    has finished. The thing is, WordPress gets updated very frequently (around once
    every 50-90 days), and the purpose of many features changes over time—they might
    even get completely erased or replaced by new ones. In such a scenario, only modern
    themes that are kept up-to-date can take full advantage of these features. Updating
    your theme will obviously take a massive amount of work. This is where theme frameworks
    come into play. In essence, theme frameworks are themes with a very minimalist
    design and no visually-complicated aspects.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要优点是它的时效性和最终结果的质量。例如，如果你是从头开始构建主题，你必须确保在开发过程完成后很长时间内保持你的主题更新。问题是，WordPress更新非常频繁（大约每50-90天更新一次），许多功能的目的随着时间的推移而改变——它们甚至可能被完全删除或被新的功能所取代。在这种情况下，只有保持更新的现代主题才能充分利用这些功能。显然，更新你的主题将需要大量的工作。这就是主题框架发挥作用的地方。本质上，主题框架是设计非常简约且没有视觉复杂性的主题。
- en: The purpose of frameworks is to make them the base of any future theme by acting
    as the parent theme. The fact that the framework itself has no design allows every
    creator to introduce almost any design imaginable, while taking full advantage
    of the features and constructions provided by the framework. Now, the strength
    of quality frameworks is that they get updated almost as frequently as WordPress
    plugins. In short, if you're using a framework, you don't have to worry about
    your theme going out of date. Whenever there's an update available, you can simply
    perform it and forget about the whole thing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的目的是通过充当父主题来成为任何未来主题的基础。框架本身没有设计的事实使得每个创作者几乎可以引入任何可想象的设计，同时充分利用框架提供的功能和结构。现在，优质框架的强大之处在于它们几乎与WordPress插件一样频繁地更新。简而言之，如果你使用框架，你不必担心你的主题过时。每当有更新可用时，你只需简单地执行它，然后忘记这一切。
- en: This brings me to the main disadvantage of using theme frameworks. Most of the
    time, theme frameworks are big, complex pieces of web software (**Hypertext Preprocessor**,
    or **PHP** scripts). So, if you want to be able to use them effectively, you'll
    have to spend a significant amount of time learning the framework itself. On top
    of this, if you decide to switch to a different framework later down the road,
    you'll have to learn all over again (frameworks are usually very different from
    each other). As you can see, reaping the benefits of using frameworks has its
    price.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我想到了使用主题框架的主要缺点。大多数情况下，主题框架都是庞大的、复杂的网络软件（超文本预处理器，或PHP脚本）。因此，如果你想有效地使用它们，你必须花大量的时间学习框架本身。除此之外，如果你决定以后切换到不同的框架，你将不得不重新学习（框架通常彼此非常不同）。正如你所看到的，使用框架带来的好处是有代价的。
- en: 'Here are some of the popular theme frameworks (both paid and free ones), as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些流行的主题框架（包括付费和免费的），如下所示：
- en: '**Gantry** (free): [http://gantry.org/](http://gantry.org/)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gantry** (免费): [http://gantry.org/](http://gantry.org/)'
- en: '**Cherry Framework** (free): [http://www.cherryframework.com/](http://www.cherryframework.com/)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**樱桃框架** (免费): [http://www.cherryframework.com/](http://www.cherryframework.com/)'
- en: '**Hybrid Core** (free): [https://themehybrid.com/hybrid-core](https://themehybrid.com/hybrid-core)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合核心** (免费): [https://themehybrid.com/hybrid-core](https://themehybrid.com/hybrid-core)'
- en: '**Unyson Framework** (free): [http://unyson.io/](http://unyson.io/)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unyson框架** (免费): [http://unyson.io/](http://unyson.io/)'
- en: '**Genesis** (paid): [https://my.studiopress.com/themes/genesis/](https://my.studiopress.com/themes/genesis/)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创世纪** (付费): [https://my.studiopress.com/themes/genesis/](https://my.studiopress.com/themes/genesis/)'
- en: 'Some frameworks are listed on the official WordPress website:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些框架列在官方WordPress网站上：
- en: '[https://codex.wordpress.org/Theme_Frameworks](https://codex.wordpress.org/Theme_Frameworks)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://codex.wordpress.org/Theme_Frameworks](https://codex.wordpress.org/Theme_Frameworks)'
- en: Building a theme with a starter theme
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用起始主题构建主题
- en: Finally, there's also a third solution, one that's somewhere between building
    a theme from the ground up and using a framework—using a starter theme.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一个第三种解决方案，它介于从头开始构建主题和使用框架之间——使用起始主题。
- en: A starter theme, like the one we'll be using in this chapter, is a great solution
    to make sure that the theme you're building has the right scaffolding, it's up
    to date with modern practices, and is optimized to be used for a WordPress site.
    Apart from that, a starter theme leaves you with all of the freedom in the world
    to adjust your creation however you wish (you have almost the same freedom as
    you do with from-the-ground-up theme building).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 启动主题，就像我们将在本章中使用的主题一样，是一个很好的解决方案，以确保你构建的主题具有正确的框架，与现代化实践保持一致，并且优化用于WordPress网站。除此之外，启动主题还让你有充分的自由来调整你的创作（你几乎有从头开始构建主题时相同的自由）。
- en: In other words, a starter theme provides you with the best of both worlds; that
    is, starting from scratch and using a framework. You can learn the basic structure
    of WordPress themes this way, and at the same time, you don't need to worry about
    making any silly mistakes because the core of the task is handled by the starter
    theme itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，启动主题为你提供了两全其美的解决方案；也就是说，从头开始和使用框架。你可以通过这种方式学习WordPress主题的基本结构，同时，你不必担心犯任何愚蠢的错误，因为任务的核心是由启动主题本身处理的。
- en: The main idea in the following sections is to learn the craft and get to know
    all of the basic structures and mechanisms sitting inside WordPress. Your journey
    with theme development starts once you have a graphic design prepared in Photoshop,
    or some other similar tool. You can also take the code bundle for this chapter
    and work with the design from there. Either way, the next step is to turn it into
    some HTML code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的主要目的是学习这门手艺，了解WordPress内部的所有基本结构和机制。你的主题开发之旅从你在Photoshop或其他类似工具中准备好图形设计开始。你也可以使用本章的代码包并从那里开始与设计一起工作。无论如何，下一步是将它转换成一些HTML代码。
- en: Converting your design into code
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的设计转换为代码
- en: For the purpose of this chapter, I assume that you already know how to take
    a graphic website design and turn it into an HTML plus CSS structure. With that,
    we'll cover some pointers on how to do your slicing and dicing as we go through
    this chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的目的，我假设你已经知道如何将图形网站设计转换为HTML和CSS结构。有了这个，我们将在本章中介绍一些关于如何进行切片和切块的要点。
- en: Let's get down to business and take a look at the HTML structure that was generated
    (by the _S starter theme) for the purpose of the theme we're building here. Just
    to remind you, the starter theme can be generated at [https://underscores.me/](https://underscores.me/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始工作，看看为构建的当前主题生成的HTML结构（由_S启动主题生成）。只是为了提醒你，启动主题可以在[https://underscores.me/](https://underscores.me/)生成。
- en: Examining the HTML structure
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查HTML结构
- en: 'The following is the very basic layout of the main HTML file for my food blog
    design; I''m showing it here just to give you a general idea of what we''re going
    to be working with:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的是我食品博客设计的HTML文件的基本布局；我在这里展示它只是为了给你一个我们将要工作的总体概念：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This HTML structure can be found in the official code bundle for this chapter—called `phase
    1`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML结构可以在本章的官方代码包中找到——称为`阶段1`。
- en: 'You can see that I''ve separated out the major parts, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我已经将主要部分分离出来，如下所示：
- en: The header is in an HTML5 `<header>` tag.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题位于HTML5 `<header>` 标签中。
- en: As part of it, there's the main site navigation, also in an HTML5 `<nav>` tag.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为其中的一部分，有主要网站导航，也在HTML5 `<nav>` 标签中。
- en: Next, we have the main content block, `<div id="content" class="site-content">;`;
    each individual post will be displayed inside separate HTML5 `<article>` tags.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们有主要内容块，`<div id="content" class="site-content">;`；每个单独的文章将显示在独立的HTML5
    `<article>` 标签内。
- en: After this, we have a section that handles the sidebar, `<div id="secondary"
    role="complementary">`. The sidebar is set with the `role="complementary"` attribute.
    Essentially, the role attribute describes the role that the element plays in the
    context of the document. In this case, the sidebar is complementary to the main
    content (and if you pay close attention, you'll notice that the main part, that
    is, the content, is indeed set to `role="main"`). In general, such attributes
    are meant to explain the purpose of elements in the HTML structure.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，我们有一个处理侧边栏的部分，`<div id="secondary" role="complementary">`。侧边栏设置了`role="complementary"`属性。本质上，角色属性描述了元素在文档上下文中的作用。在这种情况下，侧边栏是对主要内容（如果你仔细观察，你会发现内容部分确实设置为`role="main"`）的补充。一般来说，这样的属性旨在解释HTML结构中元素的目的。
- en: Finally, there's the footer, using the `<footer>` tag. Keep in mind that this
    is HTML5, and it may not work on older web browsers.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，是页脚部分，使用`<footer>`标签。请注意，这是HTML5，可能在旧版网页浏览器上无法正常工作。
- en: Now that I've got my basic layout, I'm going to add a few more HTML elements
    to flesh it out a bit, including more information in `<head>`, as well as in the
    main content box, plus some additional CSS. Then, I'll fill up the sidebar, header,
    content, and footer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经有了基本布局，我将添加一些更多的HTML元素来使其更加丰满，包括在`<head>`中添加更多信息，以及在主要内容框中添加一些额外的CSS。然后，我将填充侧边栏、页眉、内容和页脚。
- en: Examining the CSS
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查CSS
- en: 'Generally, a very good practice in web development is to start your CSS design
    by resetting all of the default styles used by various web browsers. The main
    issue, and the reason why this is an important step, is that most popular web
    browsers (or, should I say, every single one of them) have their own default set
    of CSS styles. And, if you want your theme to look exactly the same in every browser,
    you have to start your work by resetting those styles, whatever they might actually
    be. The good thing about this is that you don''t have to do it by hand. You can
    just use one of the reset scripts available on the internet. Keep in mind that
    every piece of code that''s listed in this chapter is also available in the official
    code bundle that came with your book. So, what we''ll do first is just have the
    following CSS at the beginning of our new `style.css` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在网页开发中，一个好的实践是从重置各种网页浏览器使用的默认样式开始你的CSS设计。主要问题，以及为什么这是一个重要步骤的原因，是大多数流行的网页浏览器（或者说，我应该说，每一个）都有自己的默认CSS样式集。如果你想让你的主题在每一个浏览器中看起来完全一样，你必须从重置这些样式开始，无论它们实际上可能是什么。好事是，你不必手动做这件事。你只需使用互联网上可用的重置脚本之一。请记住，本章中列出的每一块代码也都在你书的官方代码包中可用。所以，我们首先要做的是在新的`style.css`文件开头添加以下CSS：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's now take a look at the actual CSS—the things that build our design and
    not just reset it. First, we'll review the CSS that displays everything you see
    in the design. Note that I have styles for all of the key elements, such as the
    header, sidebar, main content area, and footer.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看实际的CSS——构建我们设计的东西，而不仅仅是重置它。首先，我们将回顾显示设计中的所有内容的CSS。请注意，我为所有关键元素都设置了样式，例如页眉、侧边栏、主要内容区域和页脚。
- en: 'Also, note that this is just the scaffolding, so to speak; it only indicates
    the individual areas of the final CSS style sheet. Talking about CSS isn''t the
    main thing we''re focusing on in this book. Therefore, I''m including the complete
    version of the aforementioned code bundle, and right now, I''m only presenting
    the individual areas of the CSS. This is just to make the whole thing easier to
    grasp once you look at the complete style sheet. To be honest, the final CSS isn''t
    actually that complex from a CSS design point of view, but it is quite lengthy.
    Here''s the simplified version:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，这只是一个框架；它只表示最终CSS样式表的各个区域。关于CSS的讨论并不是本书关注的重点。因此，我包括了上述代码包的完整版本，现在，我只展示CSS的各个区域。这是为了在你查看完整的样式表时使整个事情更容易理解。说实话，从CSS设计角度来看，最终的CSS并不复杂，但它相当长。以下是简化版本：
- en: 'Let''s start with the typography settings and various standard content elements.
    I''m not showcasing the individual styles here, as they are kind of basic and
    don''t play a huge role in our WordPress site structure:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从字体设置和各种标准内容元素开始。在这里我不展示单个样式，因为它们相当基础，在我们WordPress网站结构中不起很大作用：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What follows next is a set of rules that will take care of the alignment, the
    general design structure, the headers, and other typical HTML elements:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是一组规则，将负责对齐、总体设计结构、标题和其他典型HTML元素的处理：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The center part of the site structure is where the posts and pages will be
    displayed. The code for it is as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站结构的中心部分是显示文章和页面的地方。其代码如下：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The code for the main sidebar is demonstrated as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要侧边栏的代码如下所示：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And finally, the code for the footer is as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，页脚的代码如下：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inside this style sheet, you will find many specific classes that aren''t just
    my own creations, but instead come from WordPress itself. Here''s what I mean:
    when WordPress creates all of the items, which includes page lists, category lists,
    archive lists, images, and galleries, it gives many of these items a particular
    class name. If you know these class names, you can prepare your style sheet to
    take advantage of them. This is one more reason why we''re using a starter theme
    here. With it, we don''t have to worry about any of this.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个样式表中，你会发现许多特定的类，这些类不仅仅是我的创作，而是来自WordPress本身。我的意思是：当WordPress创建所有项目时，包括页面列表、分类列表、存档列表、图片和画廊，它会给许多这些项目一个特定的类名。如果你知道这些类名，你可以准备你的样式表来利用它们。这也是我们在这里使用起始主题的另一个原因。有了它，我们不必担心任何这些问题。
- en: For example, when you add an image to a post or page, WordPress gives you the
    option to have it to the right or left, or at the center of the text. Depending
    on what you choose, WordPress will assign either of these classes to the image: `alignleft`,
    `alignright`, or `aligncenter`. These specific classes are handled in the *Alignments*
    section of our CSS style sheet. Another thing is that, when you add an image with
    a caption, WordPress gives it the `wp-caption` class. This particular thing is
    handled in the *Captions* section of the style sheet. WordPress uses many other
    classes that you can take advantage of when building your style sheet. I've listed
    a few of them in [Chapter 13](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36),* Creating
    a Non-Blog Website Part Two – E-Commerce Websites and Custom Content Elements*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你向帖子或页面添加图片时，WordPress会给你选择将其放在右侧、左侧或文本中心的选项。根据你的选择，WordPress将分配以下任一类给图片：`alignleft`、`alignright`或`aligncenter`。这些特定的类在CSS样式表的*对齐*部分中处理。另一件事是，当你添加带有标题的图片时，WordPress会给它分配`wp-caption`类。这个特定的事情在样式表的*标题*部分中处理。WordPress使用许多其他你可以利用的类，当你在构建样式表时。我在[第13章](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36)中列出了一些，*创建非博客网站第二部分
    – 电子商务网站和自定义内容元素*。
- en: Now that you've got your HTML and CSS lined up, you're ready for the next step—turning
    your HTML build into a WordPress theme.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经将HTML和CSS整理好了，你准备好进行下一步了——将你的HTML构建转换为WordPress主题。
- en: Converting your build into a theme
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的构建转换为主题
- en: You'll be turning your HTML build into a theme, which is composed of a number
    of template files and other scripts. We are going to first dig into the inner
    workings of a theme, so as to get familiar with how it's put together. Then, we'll
    actually turn our HTML build into a theme directory that WordPress can use. Finally,
    we'll include WordPress functions that populate the theme with content. As I mentioned
    in an earlier chapter, doing development for your WordPress website in a local
    environment can make the whole process much smoother. Consider getting a server
    up and running on your home computer using WAMP, MAMP, or some other way to install
    Apache and MySQL.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把你的HTML构建转换为主题，它由多个模板文件和其他脚本组成。我们将首先深入了解主题的内部工作原理，以便熟悉它是如何组合在一起的。然后，我们将实际将我们的HTML构建转换为WordPress可以使用的主题目录。最后，我们将包含WordPress函数，以填充主题内容。正如我在前面的章节中提到的，在本地环境中为你的WordPress网站进行开发可以使整个过程更加顺畅。考虑在你的家用电脑上使用WAMP、MAMP或其他方式来安装Apache和MySQL以启动服务器。
- en: Creating the theme directory
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主题目录
- en: 'The first step to turning your HTML build into a theme, is to create your theme
    directory and give it everything it needs to be recognized as a theme by WordPress.
    Let''s look at an overview of the steps and then take them one by one, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的HTML构建转换为主题的第一步是创建你的主题目录，并给它提供所有使其被WordPress识别为主题所需的东西。让我们先概述一下步骤，然后一步一步地进行，如下所示：
- en: Name your directory and creating backup copies of your build files
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名你的目录并创建构建文件的备份副本
- en: Preparing the essential files
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备必要的文件
- en: Adding a screenshot of your theme, named `screenshot.png`
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加你的主题截图，命名为`screenshot.png`
- en: Uploading your theme directory
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传你的主题目录
- en: Activating your theme
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活你的主题
- en: Let's take these steps one by one now.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们一步一步地来做这些。
- en: Naming your directory and creating backup copies of your build files
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名你的目录并创建构建文件的备份副本
- en: You'll want to give your build directory a sensible name. I'm naming my theme **Daily
    Cooking Custom**. I'll name the directory `daily-cooking-custom`. Now, I suggest
    creating backup copies of your HTML and CSS files. As you'll eventually be breaking
    up your build into template files, you could easily lose track of where your code
    came from. By keeping a copy of your original build, you'll be able to go back
    to it for reference.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望给你的构建目录一个有意义的名称。我给我的主题命名为**Daily Cooking Custom**。我将目录命名为`daily-cooking-custom`。现在，我建议创建HTML和CSS文件的备份副本。因为你最终会将构建拆分成模板文件，你可能会轻易地失去追踪你的代码来源。通过保留原始构建的副本，你将能够回到它以供参考。
- en: Preparing the essential files
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备必要的文件
- en: 'WordPress has only the following two requirements to recognize your directory
    as a theme:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress只有以下两个要求才能识别你的目录为主题：
- en: A file called `index.php`
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`index.php`的文件
- en: A file called `style.css`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`style.css`的文件
- en: 'Just rename your main design''s HTML file `index.php`—this takes care of the
    first requirement. To satisfy the second requirement, your style sheet needs to
    have an introductory comment that describes the basic information for the whole
    theme: title, author, and so on. Also, it has to be at the very top of the style
    sheet. I''ve added this comment to my `style.css` file, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将你的主要设计HTML文件重命名为`index.php`——这满足了第一个要求。为了满足第二个要求，你的样式表需要有一个介绍性注释，描述整个主题的基本信息：标题、作者等等。同时，它必须位于样式表的最顶部。我已经在我的`style.css`文件中添加了这个注释，如下所示：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding structure has been created on the basis of the template available
    at [https://codex.wordpress.org/Theme_Development#Theme_Stylesheet](https://codex.wordpress.org/Theme_Development#Theme_Stylesheet).
    Whenever you're creating a new theme, it's always good to check the currently
    recommended template beforehand. When you add this comment section to your style
    sheet, just replace all of the details with those that are relevant to your theme.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结构是在基于[https://codex.wordpress.org/Theme_Development#Theme_Stylesheet](https://codex.wordpress.org/Theme_Development#Theme_Stylesheet)提供的模板的基础上创建的。每次创建新主题时，事先检查当前推荐的模板总是好的。当你将这个注释部分添加到你的样式表中时，只需将所有细节替换为你主题相关的信息。
- en: Adding a screenshot
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加屏幕截图
- en: 'Remember when you first learned how to activate a new theme that there were
    thumbnail versions of the themes in your Appearance tab? You''ll want a thumbnail
    of your own design. It should be a PNG file with the name `screenshot.png`. Just
    do the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 记得你第一次学习如何激活新主题时，你的外观选项卡中有主题的缩略图版本？你需要你自己的设计的缩略图。它应该是一个名为`screenshot.png`的PNG文件。只需按照以下步骤操作：
- en: Flatten a copy of your design in Photoshop or in a similar tool
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Photoshop或类似工具将你的设计扁平化
- en: Change the image width to 1200 px and the height to 900 px
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片宽度更改为1200像素，高度更改为900像素
- en: Save it for the web as a PNG-8 file
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以PNG-8文件格式保存它用于网页
- en: The preceding requirements (1200 px by 900 px) are the current ones at the time
    of writing. To get the latest guidelines at any point in time, revisit the official
    Codex at [https://codex.wordpress.org/Theme_Development#Screenshot](https://codex.wordpress.org/Theme_Development#Screenshot).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述要求（1200像素 x 900像素）是撰写时的当前要求。要获取任何时间点的最新指南，请重新访问官方Codex[https://codex.wordpress.org/Theme_Development#Screenshot](https://codex.wordpress.org/Theme_Development#Screenshot)。
- en: Create a screenshot
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建屏幕截图
- en: Name your file `screenshot.png` and save it in your build directory. This is
    all it takes to have the screenshot enabled and allow WordPress to recognize it
    when it loads your theme.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的文件命名为`screenshot.png`并保存在你的构建目录中。这就是启用屏幕截图并允许WordPress在加载你的主题时识别它的全部内容。
- en: Uploading your directory
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传你的目录
- en: 'Using FTP software, upload your template directory to `wp-content/themes/`
    in your WordPress build. It will share the themes directory with `twentynineteen`,
    and any other theme you''ve added as you installed WordPress. In the following
    screenshot, you can see my `daily-cooking-custom` theme living in the `themes`
    directory:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FTP软件，将你的模板目录上传到WordPress构建中的`wp-content/themes/`。它将与`twentynineteen`和其他你在安装WordPress时添加的主题共享主题目录。在下面的屏幕截图中，你可以看到我的`daily-cooking-custom`主题位于`themes`目录中：
- en: '![](img/a37dcd16-9dc1-4d10-a8f8-c87b00dbf969.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a37dcd16-9dc1-4d10-a8f8-c87b00dbf969.png)'
- en: Activating your theme
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活你的主题
- en: 'You''ve got the absolute basic necessities in there now, so you can activate
    your theme (although, it won''t look like much yet). Log in to your `wp-admin`,
    and navigate to Appearance. There, you''ll see your theme waiting for you. As
    you can see, I''ve created a nice screenshot for my theme, with the name of the
    theme on it for easier identification:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了绝对的基本需求，所以你可以激活你的主题（尽管，它现在看起来可能并不多）。登录到你的 `wp-admin`，然后导航到外观。在那里，你会看到你的主题正在等待你。正如你所看到的，我为我的主题创建了一个漂亮的截图，上面有主题的名称，以便更容易识别：
- en: '![](img/1dae8fe0-85b9-4155-962c-3131ae37dc30.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dae8fe0-85b9-4155-962c-3131ae37dc30.png)'
- en: At this point, you can activate your new theme and continue working on it to
    include WordPress-generated content and make it into a full-fledged WordPress
    theme in general. Don't be alarmed if the theme doesn't look perfectly right after
    activation, though. There's still some work to do. This is another good reason
    to have a development server. You wouldn't want to have this incomplete theme
    active on a live site while you finish the final pieces in the background.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以激活你的新主题并继续工作，以包含 WordPress 生成的内容，并将其变成一个完整的 WordPress 主题。不过，激活后主题可能看起来并不完美，这并不奇怪。还有一些工作要做。这也是拥有开发服务器的另一个好理由。你不想在后台完成最终部分的同时，让这个不完整的主题在实时网站上激活。
- en: Note that not every theme installation goes as expected. Sometimes, you have
    to deal with errors. In most cases, WordPress will let you know what went wrong
    with a notification. Every once in a while, however, activation can result in
    a critical error and your whole site could go blank. If that happens, simply rename
    the new theme's directory, or delete it completely. This will force WordPress
    to switch to the default theme, and things should go back to normal. From there,
    you can start looking for the issue that caused the crash in the first place.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，并非每个主题安装都会如预期进行。有时，你可能需要处理错误。在大多数情况下，WordPress 会通过通知告诉你出了什么问题。然而，偶尔激活可能会导致严重错误，整个网站可能会变空白。如果发生这种情况，只需将新主题的目录重命名，或者完全删除它。这将迫使
    WordPress 切换到默认主题，一切应该会恢复正常。从那时起，你可以开始寻找最初导致崩溃的问题。
- en: Speaking of final pieces, your theme is now ready to have all of the WordPress
    content added, so let's do just that!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 说到最终部分，你的主题现在准备好添加所有 WordPress 内容了，所以让我们就这样做吧！
- en: How to create basic WordPress content
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建基本的 WordPress 内容
- en: Right now, your `index.php` file is your only theme file. We'll be breaking
    it up into template files a bit later. First, we need to include WordPress functions
    that will spit out your content into your theme.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的 `index.php` 文件是唯一的主题文件。我们稍后会将其拆分为模板文件。首先，我们需要包含 WordPress 函数，这些函数会将你的内容输出到你的主题中。
- en: The functions.php file
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`functions.php` 文件'
- en: In short, the `functions.php` file is meant to set up your theme and provide
    some helper functions and settings to make using the theme easier. Apart from
    this, the functions file also has many other applications that we're not going
    to discuss here, as they are beyond the scope of this book. In essence, `functions.php`
    is a file that allows you to perform a very wide scope of modifications. Even
    though there is a set of standard things that should always be taken care of when
    dealing with a functions file, they don't restrict you from doing virtually anything
    you wish. For instance, you could create a classic PHP function, such as `my_function_name()`,
    and then call it from within one of your template files (such as `index.php`)
    through `<?php my_function_name(); ?>`, but this is just one of the possible scenarios.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`functions.php` 文件旨在设置你的主题并提供一些辅助函数和设置，以便更容易地使用主题。除了这个之外，函数文件还有许多其他应用，我们在这里不讨论，因为它们超出了本书的范围。本质上，`functions.php`
    是一个允许你执行非常广泛修改的文件。尽管在处理函数文件时应该始终注意一些标准事项，但这并不限制你做任何你希望做的事情。例如，你可以创建一个经典的 PHP 函数，如
    `my_function_name()`，然后通过 `<?php my_function_name(); ?>` 在你的模板文件（如 `index.php`）中调用它，但这只是可能的情况之一。
- en: 'Although this isn''t a requirement, it''s always good to start your functions
    file with the following lines of code (just as a good reference point):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是必需的，但始终以以下代码行开始你的函数文件是一个很好的参考点：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding lines of code provide essential information about the theme.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行提供了关于主题的基本信息。
- en: 'The next part is the setup of the default features that the theme is going
    to enable, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分是设置主题将要启用的默认功能，如下所示：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding function, `daily_cooking_custom_setup()`, will be executed at
    just the right time, triggered by the `after_setup_theme` action called at the
    end to set up the basic features of our theme properly. Most of the code is pretty
    self-explanatory, due to the comments, but there''s just one thing I''d like to
    mention individually, which is the following (registering the menu):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数`daily_cooking_custom_setup()`将在正确的时间执行，由在最后调用的`after_setup_theme`动作触发，以正确设置我们主题的基本功能。由于有注释，大部分代码都很直观，但我想单独提到一点，那就是以下内容（注册菜单）：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a small piece of code that will let us assign any custom menu to appear
    as the primary menu later on. It is also what we'll use to set our new theme.
    In addition, the preceding function allows you to register even more menu areas
    if you wish—and all you'll have to do is add `'secondary' => 'Secondary Menu'`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一小段代码，将允许我们在稍后将其作为主菜单显示。它也是我们将用来设置新主题的方法。此外，前面的函数还允许您注册更多的菜单区域，如果您愿意的话——您只需添加`'secondary'
    => 'Secondary Menu'`即可。
- en: 'Next, let''s enable our style sheet CSS file to load with our theme, or more
    accurately, to be *enqueued,* and then load precisely the right moment. Here''s
    how to do so:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们启用我们的样式表CSS文件，使其与主题一起加载，或者更准确地说，是在精确的时刻加载。以下是实现方法：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, there's only one style sheet here. It is enabled by the very
    first line in the function.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里只有一个样式表。它是由函数中的第一行启用的。
- en: 'The preceding code closes our first template-like `functions.php` file. Later,
    we will add new lines to it to make it even more functional. Now, the interesting
    part is that there is no closing PHP tag in the functions file (no `?>`). This
    is not a typo; it is intentional. Since most of the file is pure PHP, we don''t
    need this tag. The complete file is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码关闭了我们的第一个类似模板的`functions.php`文件。稍后，我们将向其中添加新行以使其功能更强大。现在，有趣的部分是函数文件中没有关闭的PHP标签（没有`?>`）。这不是一个错误；这是故意的。由于文件的大部分是纯PHP代码，我们不需要这个标签。完整的文件如下：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The <head> tag
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<head>`标签'
- en: 'Okay, let''s move on to our `index.php` file and the things we can do inside
    of it. In the following section of the chapter, we''re going to be altering specific
    lines of code from the original HTML structure. Let''s see how to do that:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续到`index.php`文件，以及我们可以在其中执行的事情。在本章的下一节中，我们将修改原始HTML结构中的特定代码行。让我们看看如何做到这一点：
- en: 'Set up the `<head></head>` section of your HTML file. Let''s start with `charset`
    and the `device-width` parameter. Here are the two lines to begin with right after
    the opening `<head>` tag:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置HTML文件的`<head></head>`部分。让我们从`charset`和`device-width`参数开始。以下是紧随`<head>`标签开启后的两行：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first one holds the character set that your blog uses. The other defines
    the width of the `viewport` used. Here, it's set to the width of the device being
    used (this allows everyone to view the site correctly, including desktop computer
    users, iPad users, and Android phone users).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个定义了您的博客使用的字符集。另一个定义了使用的`viewport`宽度。在这里，它被设置为正在使用的设备的宽度（这允许每个人都能正确查看网站，包括桌面电脑用户、iPad用户和安卓手机用户）。
- en: 'You need to add another important chunk of code—first, to put header tags into
    your theme for the pingback URL; second, other miscellaneous WordPress stuff.
    Add the following lines in your `<head>` section:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要添加另一段重要的代码块——首先，将标题标签放入您的主题中以便于pingback URL；其次，其他一些WordPress相关内容。请在您的`<head>`部分添加以下行：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following line right before the closing `</head>` tag (it takes care
    of displaying your site''s title and enabling a number of WordPress-specific functionalities):'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭`</head>`标签之前添加以下行（它负责显示您的网站标题并启用许多WordPress特定的功能）：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, add the `body_class()` function to the body tag, so it looks like the
    following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`body_class()`函数添加到body标签中，使其看起来如下：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your header now look like the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的标题现在看起来如下：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The header and footer
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题和页脚
- en: It's time to start adding some content. Here, we'll take care of things such
    as displaying a link to the blog's home page, displaying the blog's title, displaying
    the tagline, and displaying the main navigation. All of these operations are pretty
    simple, so let's just take a look at the lines of code that take care of them.
    Then, we'll put these lines of code in just the right place within our HTML structure.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始添加一些内容了。在这里，我们将处理诸如显示博客主页链接、显示博客标题、显示标语和显示主要导航等事项。所有这些操作都非常简单，所以让我们看看处理它们的代码行。然后，我们将把这些代码行放在我们的HTML结构中的正确位置。
- en: 'First, we have the code that displays the site''s main URL, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有显示网站主要URL的代码，如下所示：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, the code that displays the site''s title is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，显示网站标题的代码如下：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is the code for displaying the tagline:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码用于显示标语：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding two lines pull information from where you set the blog name and
    description in `wp-admin`, and you can simply change them from the Settings |
    General page.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行从你在 `wp-admin` 中设置的博客名称和描述处提取信息，你可以简单地从设置 | 通用页面更改它们。
- en: 'Lastly, displaying the main navigation is done with the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下代码显示主要导航：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `wp_nav_menu()` function is a built-in way of displaying the navigation
    menu. It takes care of the proper HTML structure of the menu and all of its elements.
    In other words, you don't have to worry about anything else other than using this
    one line of code.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp_nav_menu()` 函数是显示导航菜单的内置方式。它负责菜单及其所有元素的适当HTML结构。换句话说，你不必担心其他任何事情，只需使用这一行代码即可。'
- en: 'Now, the part of your HTML that describes the header looks similar to the following
    listing. Additionally, as you can see, we''re linking the logo to the home page,
    which is a standard practice:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的HTML中描述标题的部分看起来类似于以下列表。此外，正如你所见，我们正在将标志链接到主页，这是一个标准做法：
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Are you wondering why you should bother with some of this when you could have
    just typed your blog title, URL, and a description of the theme? One reason is
    that if you ever want to change your blog's title, you can simply do it in one
    quick step in `wp-admin` and it will change all over your site. The other reason
    is that if you want to sharing your theme with others, you'll need to give them
    the ability to easily change the name through their own `wp-admin` panels. Keep
    in mind that anything (anything at all) that will change from site to site based
    on the site's purpose and content should not be hardcoded into the theme, but
    should be dynamically generated.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你在想知道为什么你应该费心做这些，而不是直接输入你的博客标题、URL和主题描述？一个原因是，如果你以后想更改你的博客标题，你可以在 `wp-admin`
    中简单地进行一步操作，它将在整个网站上更改。另一个原因是，如果你想与他人分享你的主题，你需要给他们提供通过他们自己的 `wp-admin` 面板轻松更改名称的能力。记住，任何（任何）基于网站目的和内容而变化的（任何）内容都不应硬编码到主题中，而应该是动态生成的。
- en: 'Now, when I refresh the site, there''s the actual blog title in the header,
    as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我刷新网站时，标题中显示了实际的博客标题，如下面的截图所示：
- en: '![](img/e9777522-e578-4a96-bcbb-20e96a335f51.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9777522-e578-4a96-bcbb-20e96a335f51.png)'
- en: 'The two links visible in the header are live links from one of my custom menus.
    Just to tie things up, I''m going to add some code to my footer to display the
    "proudly powered by WordPress" message, and to include the `wp_footer()` function/hook
    that''s often used by many plugins in one way or another, so every theme should
    feature it. The code for my footer section now looks like the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 标题中可见的两个链接是从我的自定义菜单中的一个活动链接。为了使事情完整，我将在我的页脚中添加一些代码来显示“自豪地由WordPress提供动力”的消息，并包含
    `wp_footer()` 函数/钩子，许多插件以某种方式使用它，因此每个主题都应该包含它。我的页脚部分的代码现在看起来如下：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One thing you might have noticed inside the previous listing is the mysterious
    `__()` function. It's a native WordPress function that retrieves the translated
    string corresponding to the parameters given in the function. It's a feature meant
    for the internationalization of your site. More details about the function can
    be found at [https://codex.wordpress.org/Function_Reference/_2](https://codex.wordpress.org/Function_Reference/_2).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了上一个列表中的神秘 `__()` 函数。这是一个WordPress的本地函数，用于检索与函数中给出的参数相对应的翻译字符串。这是一个旨在为你的网站实现国际化的功能。有关该函数的更多详细信息，请参阅[https://codex.wordpress.org/Function_Reference/_2](https://codex.wordpress.org/Function_Reference/_2)。
- en: The sidebar
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侧边栏
- en: Now, we can move along to adding WordPress-generated content in the sidebar.
    Essentially, this part of our work is pretty simple. All we have to do is include
    some WordPress functions that will handle displaying various bits of dynamic content.
    In this case, it is the categories, tags, and archives.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续添加WordPress生成的侧边栏内容。本质上，这部分工作相当简单。我们只需要包含一些WordPress函数，这些函数将处理显示各种动态内容。在这种情况下，是分类、标签和存档。
- en: 'Starting at the top, include the following piece of code in the sidebar area:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，在侧边栏区域包含以下代码：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This code takes care of displaying whatever widgets have been assigned to that
    particular widget area. Placing widgets in the sidebar of your HTML structure
    is the easiest, and probably the most usable way, of widget-enabling your theme.
    Also, WordPress will take care of actually displaying everything properly, so
    you don't have to worry about any weird-looking elements on your site. For instance,
    every menu is displayed as a `<ul>` list, and every menu element is inside `<li>`.
    This is as in tune with the standards as it can be.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码负责显示分配给该特定小工具区域的任何小工具。在HTML结构的侧边栏中放置小工具是最简单、最实用的方法之一。此外，WordPress将负责正确显示所有内容，因此你不必担心网站上出现任何奇怪的外观元素。例如，每个菜单都显示为一个`<ul>`列表，每个菜单元素都在`<li>`内部。这尽可能地符合标准。
- en: Main column – the loop
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要列 – 循环
- en: 'This is the most important section of our WordPress code. It''s called the
    loop, and it''s an essential part of your new theme. The loop''s job is to display
    your posts in reverse chronological order, choosing only those posts that are
    appropriate. You need to put all of your other post tags inside the loop. The
    basic loop text, which has to surround your post information, is displayed using
    the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的WordPress代码中最重要的一部分。它被称为循环，并且是您新主题的一个基本部分。循环的职责是按倒序显示您的帖子，仅选择适当的帖子。您需要将所有其他帖子标签放在循环内。围绕帖子信息的基本循环文本使用以下代码显示：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `get_template_part()` function call that's right in the middle, fetches
    another file that contains the rest of the loop; but for now, let's just focus
    on the main section here.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正中间的`get_template_part()`函数调用获取另一个包含循环其余部分的文件；但就现在而言，让我们只关注这里的主体部分。
- en: 'There are two basic parts of the loop, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 循环有两个基本部分，如下所示：
- en: Individual post information
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个帖子信息
- en: What to do if there are no appropriate posts
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有合适的帖子怎么办
- en: The first part is handled by a standard PHP `while` loop that goes through every
    post and, for each element, calls the appropriate `content-[TYPE].php` file. The
    second part is similar, as it calls the `content-none.php` file if there are no
    posts that can be displayed. The use of these various `content-[TYPE].php` files
    is currently the standard for handling the different types of content that WordPress
    displays. It's a lot more effective and clear than working with the individual
    `if` or `switch` clauses.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分由一个标准的PHP `while`循环处理，该循环遍历每个帖子，并对每个元素调用适当的`content-[TYPE].php`文件。第二部分类似，因为它在无法显示帖子时调用`content-none.php`文件。这些`content-[TYPE].php`文件的使用是目前处理WordPress显示的不同类型内容的标准。它比使用单个`if`或`switch`语句更有效、更清晰。
- en: 'So, in order to get started with this, let''s create a basic `content.php`
    file that will serve the role of a placeholder for the default type of content.
    In this file, let''s place the following code, which handles the loop:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了开始这个，让我们创建一个基本的`content.php`文件，它将作为默认内容类型的占位符。在这个文件中，让我们放置以下代码，它处理循环：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you take a closer look, you'll notice that it's very similar to the static
    HTML version I shared earlier in this chapter. The only difference is that, instead
    of the dummy text, there are calls to specific WordPress functions and custom-made
    functions that we'll discuss shortly.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，会发现它与本章前面分享的静态HTML版本非常相似。唯一的区别是，它不是占位文本，而是调用特定的WordPress函数和我们将很快讨论的自定义函数。
- en: 'Let''s take it from the top; the file starts with these two lines:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从顶部开始；文件从这两行开始：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is just some standard HTML and basic WordPress function calls to display
    proper element IDs and CSS classes. For instance, the `the_ID()` function displays
    the ID of the post. Next, we have the following line:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一些标准的HTML和基本的WordPress函数调用，用于显示适当的元素ID和CSS类。例如，`the_ID()`函数显示帖子的ID。接下来，我们有以下一行：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This displays the link and the title of the current content element (which
    is usually a post), instead of using the dummy text. The `the_title()` function
    takes three parameters (which are all optional). Right here, we''re using just
    two. The first one defines the text to place before the title (in this case, we''re
    making a `sprintf()` function call), and the second one defines the text to place
    after the title. The following is a piece of code that displays various types
    of meta information about the current content element:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示当前内容元素（通常是帖子）的链接和标题，而不是使用占位文本。`the_title()`函数接受三个参数（都是可选的）。在这里，我们只使用了两个。第一个定义了放置在标题之前的文本（在这种情况下，我们正在调用`sprintf()`函数），第二个定义了放置在标题之后的文本。以下是一段显示当前内容元素各种元信息的代码：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If what we''re dealing with is a standard post, a custom function is called
    to display the details. This way of handling things—through an additional function—makes
    everything much clearer in comparison to placing the code right there. Here''s
    what the function looks like (we can place it in our main `functions.php` file,
    or inside a new file in a separate sub-directory called `inc`, indicating that
    it holds additional functions; in our case, this function definition can be found
    in `inc\template-tags.php`):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们处理的是标准帖子，则会调用一个自定义函数来显示详细信息。通过额外的函数来处理事情——与直接放置代码相比，这种方式使一切更加清晰。以下是函数的样式（我们可以将其放置在主`functions.php`文件中，或者在一个名为`inc`的单独子目录中的新文件中，表示它包含额外的函数；在我们的情况下，这个函数定义可以在`inc\template-tags.php`中找到）：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, this is quite a long function, but the thing to remember is
    that it's just meant to display the date of when the post was published and the
    byline of the author. Also, there are language functions (`_e()` and `_x()`) used
    here to fetch translated data from the database. You can learn more about these
    functions at [https://codex.wordpress.org/Function_Reference/_e](https://codex.wordpress.org/Function_Reference/_e)
    and [https://codex.wordpress.org/Function_Reference/_x](https://codex.wordpress.org/Function_Reference/_x).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一个相当长的函数，但需要记住的是，它只是用来显示帖子发布的日期和作者的署名。此外，这里还使用了语言函数（`_e()`和`_x()`）从数据库中获取翻译数据。你可以在[https://codex.wordpress.org/Function_Reference/_e](https://codex.wordpress.org/Function_Reference/_e)和[https://codex.wordpress.org/Function_Reference/_x](https://codex.wordpress.org/Function_Reference/_x)了解更多关于这些函数的信息。
- en: 'Going back to our `content.php` file, we have the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的`content.php`文件，我们有以下内容：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The first part (`the_content()`) takes care of displaying the contents of the
    current post, along with a `Continue reading` link. This is actually the most
    important part of the whole file. Next, the second part (`wp_link_pages()`), is
    meant to display page links for paginated posts (WordPress allows you to divide
    your content into individual subpages; this can be useful when dealing with an
    overly long piece of text). Finally, we have the code for the footer section of
    the entry, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分（`the_content()`）负责显示当前帖子的内容，以及一个“继续阅读”链接。这实际上是整个文件中最重要的部分。接下来，第二部分（`wp_link_pages()`）旨在显示分页帖子的页面链接（WordPress允许你将内容分成单独的子页面；当处理过长的文本时，这可能很有用）。最后，我们有条目页脚部分的代码，如下所示：
- en: '[PRE32]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There''s another call to a custom-made function there. Here''s what the function
    looks like:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，还有一个对自定义函数的调用。以下是函数的样式：
- en: '[PRE33]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'All this code handles the post details, such as the categories, tags, and the
    comment links (which other visitors can click to submit their opinions about the
    post). One interesting thing I''d like to point out here is the call to the `comments_popup_link()`
    function, as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些代码处理帖子细节，如分类、标签和评论链接（其他访客可以点击以提交对帖子的意见）。我想在这里指出一个有趣的事情，即对`comments_popup_link()`函数的调用，如下所示：
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here, you can see that there are three arguments passed, separated by commas:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到有三个参数通过逗号分隔传递：
- en: The first one tells WordPress the text that it has to display when there are
    no comments.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个选项告诉WordPress在没有任何评论时需要显示的文本。
- en: The second one tells WordPress the text that it has to display when there is
    just one comment.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个选项告诉WordPress在只有一个评论时显示的文本。
- en: The third one tells WordPress the text that it has to display in case there's
    more than one comment. The percent symbol (`%`) gets replaced with the actual
    number of existing comments.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项告诉WordPress在有多于一个评论时需要显示的文本。百分号（`%`）将被实际存在的评论数量替换。
- en: This is it regarding a basic understanding of the loop. Of course, its structure
    allows you to do many more things and include many custom features. However, for
    now, we are good with what we have here. Once you save your `index.php` and reload
    your website, you will see your new theme in action.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于循环的基本理解。当然，它的结构允许你做更多的事情，并包含许多自定义功能。然而，现在我们对我们所拥有的内容感到满意。一旦你保存了你的`index.php`并重新加载你的网站，你将看到你的新主题正在发挥作用。
- en: This version of the `index.php` file is available in the code bundle for this
    chapter, inside a sub-directory called `phase 2`. Our theme files will go through
    a couple of phases before we have the final version.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的`index.php`文件可以在本章的代码包中找到，位于一个名为`phase 2`的子目录中。在我们的主题文件最终版本出来之前，它们将经历几个阶段。
- en: Later in the chapter, I will show you how to create a custom page template,
    which will take advantage of the loop and use it for a slightly different purpose.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我将向你展示如何创建自定义页面模板，它将利用循环并用于稍微不同的目的。
- en: Creating template files within your theme
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的主题中创建模板文件
- en: You've now got a functional, basic template for your theme. It works great on
    the main blog page and successfully loads content for anything you can click on
    within your site. However, we want slightly different templates for other types
    of content on our site. For example, a single post page needs to have a comment
    form where visitors can post comments; the page doesn't need to show the date,
    category, or tags; and the category page should show the category name.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经拥有了一个功能性的、基本的模板。它在主博客页面上运行得很好，并且能够成功加载你网站上可以点击的任何内容。然而，我们希望为网站上其他类型的内容使用略有不同的模板。例如，单个帖子页面需要有一个评论表单，访客可以在其中发表评论；页面不需要显示日期、分类或标签；分类页面应该显示分类名称。
- en: Before we can create other templates, we need to break up the main `index.php`
    file into parts so that these different templates can share the common elements.
    I've mentioned the importance of the header, sidebar, and footer many times. We're
    going to break them up now. First, let's take a quick look at how it works.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够创建其他模板之前，我们需要将主`index.php`文件拆分成几个部分，这样不同的模板就可以共享公共元素。我已经多次提到头部、侧边栏和页脚的重要性。现在，我们将它们拆分。首先，让我们快速看一下它是如何工作的。
- en: Understanding the WordPress theme structure
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解WordPress主题结构
- en: Usually, WordPress themes are composed of a number of template files. This allows
    the different parts of the site (such as the frontend, blog archive, pages, single
    posts, and search results) to have different purposes. Breaking the `index.php`
    file into template files allows us to not only share some common parts of the
    design, but also to have different code in different parts. As I mentioned earlier,
    we'll soon be breaking up the four main pieces of the design (the header, sidebar,
    main column, and footer) so that WordPress can make good use of them. While the
    header and footer are probably shared by all pages, the content in the main column
    will be different. Also, you may want the sidebar on some pages, but not on others.
    We'll first create these template files, and then move on to the other, more optional
    template files.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，WordPress主题由多个模板文件组成。这使得网站的各个部分（如前端、博客存档、页面、单个帖子以及搜索结果）具有不同的目的。将`index.php`文件拆分成模板文件不仅允许我们共享设计的一些公共部分，而且还可以在不同部分使用不同的代码。正如我之前提到的，我们很快将拆分设计的四个主要部分（头部、侧边栏、主要内容栏和页脚），以便WordPress能够充分利用它们。虽然头部和页脚可能被所有页面共享，但主要内容栏的内容将是不同的。此外，你可能希望在某些页面上有侧边栏，而在其他页面上没有。我们首先创建这些模板文件，然后继续创建其他更可选的模板文件。
- en: Breaking it up
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拆分它
- en: 'We''re going to break up the `index.php` file by removing some of the code
    into three new files, as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将一些代码移除到三个新的文件中来拆分`index.php`文件，如下所示：
- en: '`header.php`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header.php`'
- en: '`footer.php`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`footer.php`'
- en: '`sidebar.php`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sidebar.php`'
- en: The header.php file
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: header.php文件
- en: 'First, we will create a header file. You can do so with the following steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个头部文件。你可以按照以下步骤进行：
- en: 'Cut out the entire top of your `index.php` file. This means cutting the `doctype`
    declaration, the `<head>` tag, any miscellaneous opening tags, and the `<header>`
    tag. In my case, I''m cutting out all the way from this initial line:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`index.php`文件的整个顶部开始剪切。这意味着剪切`doctype`声明、`<head>`标签、任何杂项打开标签以及`<header>`标签。在我的情况下，我是从这一行开始剪切的：
- en: '[PRE35]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'I''m cutting through to, and including, these lines:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我将跳过并包括以下这些行：
- en: '[PRE36]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Paste all these lines into a new file named `header.php`, which you created
    within your theme directory.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些行粘贴到一个名为`header.php`的新文件中，该文件位于你的主题目录内。
- en: 'Now, at the very top of the `index.php` file (that is, where you just cut the
    header text from), type in the following line of WordPress PHP code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`index.php`文件的顶部（即你刚刚剪切页眉文本的地方），输入以下WordPress PHP代码行：
- en: '[PRE37]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is a WordPress function that includes the `header.php` file you just created.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个包含你刚刚创建的`header.php`文件的WordPress函数。
- en: If you save everything and reload your website now, nothing should change. The
    important part here is to make sure that the call to the preceding PHP function
    sits right at the very top of your `index.php` file.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在保存所有内容并重新加载你的网站，不应该有任何变化。这里的重要部分是确保对前面的PHP函数的调用正好位于你的`index.php`文件的顶部。
- en: The footer.php file
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`footer.php`文件'
- en: 'Next, we will create the footer file. You can do so in the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建页脚文件。你可以按照以下步骤进行：
- en: 'Cut out everything at the very bottom of the `index.php` file from the following
    code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下代码中剪切`index.php`文件底部的所有内容：
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Cut all the way through to the `</html>` tag. Paste the text you just cut into
    a new `footer.php` file. Save it in your theme directory.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剪切到`</html>`标签。将你刚刚剪切的文本粘贴到一个新的`footer.php`文件中。将其保存在你的主题目录中。
- en: 'Now, at the very bottom of the `index.php` file (from where you just cut the
    footer text), type in the following line of WordPress PHP code:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`index.php`文件的底部（即你刚刚剪切页脚文本的地方），输入以下WordPress PHP代码行：
- en: '[PRE39]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is a special WordPress function that includes the `footer.php` file you
    just created. Again, you should save everything and reload your website to make
    sure nothing changes.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个特殊的WordPress函数，用于包含你刚刚创建的`footer.php`文件。再次提醒，你应该保存所有内容并重新加载你的网站，以确保没有发生变化。
- en: The sidebar.php file
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`sidebar.php`文件'
- en: 'There is just one more essential template file to create. For this one, carry
    out the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还需要创建一个关键的模板文件。对于这个文件，执行以下步骤：
- en: 'Cut out the entire `div` element containing your sidebar. In my case, it''s
    the following line:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剪切包含你的侧边栏的整个`div`元素。在我的例子中，是以下这一行：
- en: '[PRE40]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Paste this line into a new file in your theme directory and save it as `sidebar.php`.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此行粘贴到你的主题目录中的一个新文件中，并将其保存为`sidebar.php`。
- en: 'Now, in `index.php`, add this function call in place of the lines you''ve just
    cut, as follows:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`index.php`中，将此函数调用替换你刚刚剪切的行，如下所示：
- en: '[PRE41]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This will include the sidebar.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这将包含侧边栏。
- en: Your four template files
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的四个模板文件
- en: 'You now have four template files in your theme directory, namely, `header.php`,
    `footer.php`, `sidebar.php`, and the now much shorter `index.php`. By the way,
    my `index.php` file now has only a handful of WordPress functions and the main
    loop. The following code shows the entire file:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在在你的主题目录中有四个模板文件，分别是`header.php`、`footer.php`、`sidebar.php`以及现在变得短得多的`index.php`。顺便说一句，我的`index.php`文件现在只有少数几个WordPress函数和主循环。以下代码显示了整个文件：
- en: '[PRE42]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This whole cutting-and-pasting process to create these four files was just to
    set the scene for the real goal of making alternative template files.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这四个文件的全部剪切和粘贴过程只是为了为制作替代模板文件的实际目标做铺垫。
- en: This version of the `index.php` file, as well as `header.php`, `footer.php`,
    and `sidebar.php`, is available in the code bundle for this chapter, inside a
    sub-directory called `phase 3`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的代码包中提供了这个版本的`index.php`文件，以及`header.php`、`footer.php`和`sidebar.php`，它们位于一个名为`phase
    3`的子目录中。
- en: Archive template
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归档模板
- en: WordPress is now using the `index.php` template file to display every type of
    web page that's a part of your site. Let's make a new file—one that will be used
    when viewing the monthly archive, category archive, and tag archive.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress现在正在使用`index.php`模板文件来显示你网站中的所有类型的网页。让我们创建一个新文件——一个在查看月度存档、分类存档和标签存档时将使用的文件。
- en: To learn more about how WordPress utilizes different files to display content,
    feel free to read the guide at [https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于WordPress如何利用不同文件来显示内容的信息，请自由阅读[https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/)上的指南。
- en: To create your archive template, make a copy of `index.php` and rename it `archive.php`.
    Now, navigate to see your monthly archive on the site by clicking on either of
    the months in the sidebar. At this point, the page you'll see should look exactly
    like the main listing—the one handled by `index.php`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建你的存档模板，复制 `index.php` 并将其重命名为 `archive.php`。现在，通过点击侧边栏中的任意月份，导航到网站上查看你的月度存档。此时，你将看到的页面应该与主列表完全相同——由
    `index.php` 处理的那个。
- en: 'Let''s make one change to the archive template. I''d like it to display a message
    that lets users know what type of archive page they are on. Currently, the archive
    looks the same as the main index listing, and this isn''t the most optimized situation.
    To fix this, just add the following code the `<?php if (have_posts()) : ?>` line:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们对存档模板进行一个修改。我想让它显示一个消息，让用户知道他们正在哪个类型的存档页面上。目前，存档看起来与主索引列表相同，这不是最优化的情况。为了解决这个问题，只需在
    `<?php if (have_posts()) : ?>` 行中添加以下代码：'
- en: '[PRE43]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If I go to see my monthly archive now—or the category/tag archive—I''ll get
    a new heading at the top of the page that lets me know where I am, as shown in
    the following screenshot:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在去看我的月度存档——或者分类/标签存档——我会在页面顶部看到一个新标题，它会告诉我我在哪里，如下面的截图所示：
- en: '![](img/24cb14a0-5569-4b26-baf6-b083686c917d.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24cb14a0-5569-4b26-baf6-b083686c917d.png)'
- en: This version of the `archive.php` file is available in the code bundle for this
    chapter, inside a sub-directory called `phase 4`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 `archive.php` 文件可以在本章的代码包中找到，位于名为 `phase 4` 的子目录内。
- en: Single template
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个模板
- en: The next template we need to create is the single post view. Right now, the
    single post looks like the site's front page (because it's using `index.php`)—except
    it populates the page with the contents of just one post.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要创建的模板是单篇文章视图。目前，单篇文章看起来就像网站的首页（因为它使用了 `index.php`）——除了它只填充了一个文章的内容。
- en: To get started, make another copy of `index.php`, and name it `single.php`.
    This is the template that WordPress will look for when serving a single post.
    If it doesn't find `single.php`, it'll use `index.php`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，再复制一次 `index.php`，并将其命名为 `single.php`。这是WordPress在服务单个文章时将查找的模板。如果找不到 `single.php`，它将使用
    `index.php`。
- en: 'Without further delay, here''s my `single.php` file. You should notice that
    the file features almost exactly the same elements as `index.php`. The only difference
    is that the `get_template_part()` function call fetches a different element. In
    this case, it''s `single`, as demonstrated in the following code:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，这是我的 `single.php` 文件。你应该注意到这个文件几乎与 `index.php` 具有完全相同的元素。唯一的区别是 `get_template_part()`
    函数调用获取了一个不同的元素。在这种情况下，它是 `single`，如下面的代码所示：
- en: '[PRE44]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The aforementioned `get_template_part(''content'', ''single'')` call will fetch
    the `content-single.php` file. Here''s what the file looks like:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的 `get_template_part('content', 'single')` 调用将获取 `content-single.php` 文件。下面是这个文件的样子：
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This file''s structure is almost exactly the same as the one we discussed a
    couple of pages ago—`content.php`. The following are three specific things that
    are worth pointing out:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的结构与我们在几页前讨论的那个——`content.php`——几乎完全相同。以下有三件具体的事情值得指出：
- en: The presence of the `<article>` tag. The individual post's content is displayed
    inside this tag.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<article>` 标签的存在。单个文章的内容显示在这个标签内。'
- en: The call to the `the_content()` function. This time, we're displaying the whole
    content of the post, not just an excerpt.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `the_content()` 函数的调用。这次，我们显示的是文章的全部内容，而不仅仅是摘录。
- en: The call to the `comments_template()` function in `single.php`. This displays
    the comment form and the individual comments that have been submitted for this
    post.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `single.php` 中的 `comments_template()` 函数调用。这显示了评论表单和为这篇文章提交的个别评论。
- en: These versions of the `single.php` file and the `content-single.php` file are
    available in the code bundle for this chapter, inside a sub-directory called `phase
    4`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这些版本的 `single.php` 文件和 `content-single.php` 文件可以在本章的代码包中找到，位于名为 `phase 4` 的子目录内。
- en: Page template
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面模板
- en: 'The last template we''re going to create is for the static page view. On my
    food blog site, this would be the sample page, for example. The easiest way to
    go about this is to start with the `single.php` file this time. So, just make
    a copy of that file and rename it `page.php`. Now, we''ll be simplifying the file,
    so that only the essential information about a given page is displayed. In the
    end, my `page.php` file will look like the following:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的最后一个模板是为静态页面视图设计的。在我的食品博客网站上，这将是示例页面，例如。这次最简单的方法是从`single.php`文件开始。所以，只需复制该文件并将其重命名为`page.php`。现在，我们将简化文件，以便只显示给定页面的基本信息。最终，我的`page.php`文件将如下所示：
- en: '[PRE46]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'I made just a few modifications here. They are as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里只做了一些小的修改。具体如下：
- en: I changed the last parameter of the `get_template_part()` function to `page`,
    instead of `single`.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将`get_template_part()`函数的最后一个参数从`single`改为了`page`。
- en: I erased the call to `daily_cooking_custom_post_nav()`, which handled the display
    of post navigation.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我删除了调用`daily_cooking_custom_post_nav()`的代码，该代码负责显示文章导航。
- en: I erased the whole block of code that handled the comments. We don't need those
    on pages.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我删除了处理评论的整个代码块。我们不需要在页面上使用这些。
- en: 'Next, we need a custom `content-page.php` file. The easiest way to build this
    is to make a copy of the `content-single.php` file and tune it up a bit. Here''s
    my final `content-page.php` file:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个自定义的`content-page.php`文件。最简单的方法是复制`content-single.php`文件并稍作调整。以下是最终的`content-page.php`文件：
- en: '[PRE47]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here''s what I did here in terms of simplifying the file:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在简化文件方面，我做了以下操作：
- en: I got rid of the whole code displaying metadata.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我删除了整个显示元数据的代码。
- en: I erased the entry footer, which was meant to display categories and tags. We
    don't use those with WordPress pages.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我删除了显示分类和标签的入口页脚。我们不需要在WordPress页面中使用这些。
- en: 'Now, my sample page looks much cleaner, as can be seen in the following screenshot:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的示例页面看起来更加简洁，如下面的截图所示：
- en: '![](img/1d99e600-35b0-42f8-bec7-a006f61ad875.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d99e600-35b0-42f8-bec7-a006f61ad875.png)'
- en: These versions of the `page.php` file and the `content-page.php` file are available
    in the code bundle for this chapter, inside a sub-directory called `phase 4`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这些版本的`page.php`文件和`content-page.php`文件可以在本章的代码包中找到，位于名为`phase 4`的子目录中。
- en: Generated classes for body and post
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成的body和post类
- en: 'As you''re modifying your theme to accommodate different types of pages, you
    should also know about the CSS classes that WordPress will put into your theme.
    If you look carefully at the code we''ve been using, you''ll see these two functions:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 当你修改主题以适应不同类型的页面时，你也应该了解WordPress将放入你主题中的CSS类。如果你仔细查看我们一直在使用的代码，你会看到这两个函数：
- en: '`body_class()`: For example, in the `header.php` file, the exact line is `<body
    <?php body_class(); ?>>`'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body_class()`: 例如，在`header.php`文件中，具体的行是`<body <?php body_class(); ?>>`'
- en: '`post_class()`: For example, in the `content-page.php` file, the exact line
    is `<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>` .'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_class()`: 例如，在`content-page.php`文件中，具体的行是`<article id="post-<?php the_ID();
    ?>" <?php post_class(); ?>>`。'
- en: 'The `body_class()` function adds a whole bunch of classes to the body tag,
    depending on the page you''re viewing. For example, the main page of my site has
    the following classes in the body:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`body_class()`函数会根据你查看的页面添加一大堆类到body标签上。例如，我网站的主页在body中具有以下类：'
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'My Some Spanish Dishes single post page''s body tag looks like the following:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我的“一些西班牙菜肴”单篇文章页面的主体标签如下所示：
- en: '[PRE49]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If I wanted to style anything differently on any of my pages, I could do it
    largely via CSS, without having to create another template.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想对我的任何页面进行不同的样式设计，我可以主要通过CSS来实现，而不需要创建另一个模板。
- en: 'The `post_class()` function does something similar with the individual post''s
    `div`, giving it different classes depending on the characteristics of the post
    itself. For example, my Some Spanish Dishes post''s tag has the following class:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`post_class()`函数会对单个文章的`div`元素做类似处理，根据文章本身的特性赋予不同的类。例如，我关于“一些西班牙菜肴”的文章标签具有以下类：'
- en: '[PRE50]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Further more, my sample page post tag has the following class:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我的示例页面文章标签具有以下类：
- en: '[PRE51]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Using these classes in my style sheet, I could style each post differently depending
    on its category, tag, post type, and so on. Keep this in mind as you design your
    theme. This becomes extremely important when working with theme frameworks further
    down the road. Although modifications inside PHP files are allowed, most of the
    time, you can customize the design of your whole site just by working in the CSS
    and tweaking various classes (both the native ones in WordPress and the new ones
    that the framework uses). Situations where a whole new site working on a theme
    framework gets built purely in CSS files are not uncommon.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的样式表中使用这些类，我可以根据文章的分类、标签、文章类型等不同来分别设置每个文章的样式。在设计主题时请记住这一点。当进一步使用主题框架工作时，这一点变得极其重要。尽管允许在PHP文件中进行修改，但大多数时候，您只需在CSS中工作并调整各种类（WordPress中的原生类以及框架使用的新类）就可以自定义整个站点的样式。完全在CSS文件中构建一个基于主题框架的新网站的情况并不少见。
- en: Other WordPress templates
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他WordPress模板
- en: In addition to `archive.php`, `single.php`, and `page.php`, there are a number
    of other standard template files that WordPress looks for before using `index.php`
    for particular views. We're not going to create these files here, but you should
    feel free to experiment on your own WordPress installation. To learn about the
    complete file hierarchy for WordPress themes, feel free to visit [https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/).
    There's a great graph there that presents the hierarchy visually. It's very easy
    to follow and does a much better job at explaining this than I would do here with
    word alone. In addition, when you browse the official code bundle for this chapter,
    you'll see that many additional files have been created and are actually available
    inside the bundle. We cover them here, however, as it would probably be too much
    information at this point.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`archive.php`、`single.php`和`page.php`之外，WordPress在特定视图使用`index.php`之前还会查找许多其他标准模板文件。我们在这里不会创建这些文件，但您可以在自己的WordPress安装上自由实验。要了解WordPress主题的完整文件层次结构，请自由访问[https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/)。那里有一个很好的图表，可以直观地展示层次结构。它非常容易理解，比只用文字在这里解释要好得多。此外，当您浏览本章的官方代码包时，您会看到已经创建了并实际上在包内可用的许多其他文件。我们在这里也介绍了它们，因为现在可能信息过多。
- en: Learning more
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 学习更多
- en: You can also find a detailed flowchart of the template hierarchy at [https://developer.wordpress.org/themes/basics/template-hierarchy/](https://developer.wordpress.org/themes/basics/template-hierarchy/).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[https://developer.wordpress.org/themes/basics/template-hierarchy/](https://developer.wordpress.org/themes/basics/template-hierarchy/)找到模板层级的详细流程图。
- en: In this chapter, we've experimented with the uses of quite a number of WordPress
    template tags. In [Chapter 13](cb875420-c9d1-48bd-a9a9-b5fc2eb3a91d.xhtml), *Creating
    a Non-Blog Website Part Two – E-Commerce Websites and Custom Content Elements,*
    I list more of the most useful template tags.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们尝试了相当多的WordPress模板标签的使用。在[第13章](cb875420-c9d1-48bd-a9a9-b5fc2eb3a91d.xhtml)“创建非博客网站第二部分
    – 电子商务网站和自定义内容元素”中，我列出了更多最有用的模板标签。
- en: Next, we'll explore making custom templates for pages.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨为页面创建自定义模板。
- en: Creating and using a custom page template
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用自定义页面模板
- en: WordPress allows you to create custom templates. These can only be used for
    pages (not for posts). A custom template allows you to display content differently
    and to easily use built-in WordPress functions within a template.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress允许您创建自定义模板。这些模板只能用于页面（不能用于文章）。自定义模板允许您以不同的方式显示内容，并能够轻松地在模板中使用内置的WordPress函数。
- en: 'Just to give you a good example of what custom page templates are and how they
    can benefit your site (no matter what theme you''re using), let''s create a custom
    version of the archives template. This is also what we will use to create a custom
    archives page that should be much more useful to our readers than the standard
    one. The following screenshot shows what the ARCHIVES page looks like on my blog
    right now:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给您一个自定义页面模板是什么以及它们如何使您的网站受益（无论您使用什么主题）的好例子，让我们创建一个存档模板的自定义版本。这也就是我们将用来创建一个比标准版本更有用的自定义存档页面的方法。以下截图显示了目前我的博客上的存档页面看起来是什么样子：
- en: '![](img/c257d843-3c06-4815-b1f7-4fbb4055e83c.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c257d843-3c06-4815-b1f7-4fbb4055e83c.png)'
- en: There are just a couple of small links in the sidebar that redirect visitors
    to a standard monthly archive. Of course, later on, when there are more posts
    on your site, there will be many more links shown (exactly one link for each month
    of your site's existence).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏中只有几个小链接，用于将访客重定向到标准月度存档。当然，当你的网站上发布更多帖子时，将显示更多链接（每个月份一个链接）。
- en: Now, as far as the idea of *archives* goes, I have to admit, somewhat reluctantly,
    that WordPress has never been good at this. One of the few problems with the platform
    as a web publishing solution is the fact that posts usually have very short life
    spans. Whenever you publish a post, it sits on the front page for a while, and
    then it vanishes in the archives, never to be seen again, irrespective of whether
    it's still relevant or not. In the end, it's really hard for a new visitor to
    find these old posts on your site.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 就存档的想法而言，我必须承认，多少有些不情愿地承认，WordPress从未擅长于此。作为网络发布解决方案，该平台的一个问题就是帖子通常寿命很短。无论何时发布帖子，它都会在前页上停留一段时间，然后消失在存档中，无论它是否仍然相关，都再也不会被看到。最终，对于新访客来说，在网站上找到这些旧帖子非常困难。
- en: One of the few chances you have of reviving those old posts is mastering the
    art of SEO, and driving some new traffic to your old posts through your SEO efforts
    alone (this the most popular solution). But luckily, it's not the only way to
    fix this issue. Again, custom page templates are an interesting remedy here.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在恢复那些旧帖子为数不多的机会中，掌握SEO艺术，仅通过SEO努力将一些新流量引导到你的旧帖子（这是最受欢迎的解决方案）。但幸运的是，这并非唯一的方法。再次强调，自定义页面模板在这里也是一种有趣的补救措施。
- en: In the preceding screenshot, you can see that the default version of the archives
    is just a sidebar widget with some links to individual months. The problem with
    such content organization is that it provides a rather bad user experience. Archives,
    in general, are not about listing everything in one place; they are about providing
    a hub where the visitor can go and find a specific piece of content. For example,
    think about how archives work in your local library. This is what you want to
    eventually have on your site as well. So, what we're going to do here is say *no*
    to the traditional archives template in WordPress and create a custom page template
    to handle archives manually. Then, we're going to link to this archive from one
    of the menus. Here's how to do it.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到默认的存档版本只是一个侧边栏小部件，包含指向个别月份的一些链接。这种内容组织的问题在于，它提供了一个相当糟糕的用户体验。一般来说，存档并不是关于在一个地方列出所有内容；它们是关于提供一个中心，访客可以前往并找到特定的内容。例如，想想你当地图书馆的存档是如何工作的。这就是你最终希望在网站上实现的目标。因此，我们在这里要做的就是说“不”使用WordPress的传统存档模板，并创建一个自定义页面模板来手动处理存档。然后，我们将从菜单中的一个链接到这个存档。以下是操作步骤。
- en: 'On our new archives page, we want to achieve the following things:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们新的存档页面上，我们希望实现以下目标：
- en: '**Display a piece of custom text**: For instance, as a form of introduction
    or a notification message explaining what''s in the archives.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示自定义文本**：例如，作为一种介绍或通知消息，解释存档中包含的内容。'
- en: '**Display a categories archive**: This is a list of all of the categories in
    use on the site.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示分类存档**：这是网站上所有使用分类的列表。'
- en: '**Display a tag cloud**: This is a form of tag archive where all of the tags
    in use on the site are displayed one after the other (inline, not in a list format),
    and the font size increases for the tags that have been used more often than others.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示标签云**：这是一种标签存档形式，其中网站上使用的所有标签依次显示（内联，而不是列表格式），并且使用频率较高的标签的字体大小会增大。'
- en: Display a list of the 15 latest posts, or whatever other number you wish.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示15篇最新帖子的列表，或者你希望显示的其他数量。
- en: '**Display a monthly archives block**: The fact that it''s displayed at the
    bottom is not accidental, as this block is not particularly useful for a typical
    visitor.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示月度存档块**：它位于底部并非偶然，因为这个块对于普通访客来说并不特别有用。'
- en: 'To do this, we need to create a template. The following demonstrates the steps
    that we''ll take:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要创建一个模板。以下展示了我们将采取的步骤：
- en: 'Create the template file. Make a copy of `page.php` and give it a new name.
    I like to prepend all of my custom template files with `tmpl_`, so that they are
    sorted separately from all of the WordPress template files that I will create.
    I''ll name this file `tmpl_archives.php`. In order for WordPress to be able to
    identify this file as a template file, we need to add a specially styled comment
    to the top of the page (just as we did with `style.css`). The comment needs to
    be formatted as follows:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模板文件。复制 `page.php` 并给它一个新的名字。我喜欢在我的所有自定义模板文件前加上 `tmpl_`，这样它们就可以与我将要创建的所有 WordPress
    模板文件分开排序。我将这个文件命名为 `tmpl_archives.php`。为了让 WordPress 能够识别这个文件为模板文件，我们需要在页面顶部添加一个特殊样式的注释（就像我们在
    `style.css` 中做的那样）。注释需要按照以下格式进行格式化：
- en: '[PRE52]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the `wp-admin` panel, the template will be identified by this template name,
    so make sure the name signals to you what the template is used for.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `wp-admin` 面板中，模板将通过这个模板名称来识别，所以请确保名称能够向你传达模板的用途。
- en: 'Add WordPress functions. This is a crucial part of the process, but thankfully
    not a complicated one at this stage. Look over your new template file and find
    the occurrence of this line:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 WordPress 函数。这是过程中的一个关键部分，但幸运的是，在这个阶段并不复杂。查看你的新模板文件，找到以下行的出现：
- en: '[PRE53]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now, erase it and put the following code in its place:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将其擦除，并替换以下代码：
- en: '[PRE54]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This is the result we''re after; the middle part of your `tmpl_archives.php`
    file should now look like the following:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要的结果；你的 `tmpl_archives.php` 文件中间部分现在应该看起来像以下这样：
- en: '[PRE55]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, create a completely new file called `content-tmpl_archives.php` and add
    the following code:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个全新的文件，命名为 `content-tmpl_archives.php`，并添加以下代码：
- en: '[PRE56]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The code includes some additional functionality for our new archives template.
    In fact, because we are creating a custom template, we can add any of the WordPress
    functions we discovered earlier in the chapter, as well as any other WordPress
    function in existence (see [Chapter 13](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36),
    *Creating a Non-Blog Website Part Two – E-Commerce Websites and Custom Content
    Elements*).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 代码为我们的新存档模板包含了一些额外的功能。实际上，因为我们正在创建一个自定义模板，所以我们可以添加我们在本章中发现的任何 WordPress 函数，以及任何存在的其他
    WordPress 函数（参见[第 13 章](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36)，*创建非博客网站第二部分
    – 电子商务网站和自定义内容元素*）。
- en: 'Here are some of the more interesting parts of the code, starting with the
    following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码中一些更有趣的部分，从以下内容开始：
- en: '[PRE57]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: It's about adding a complete list of categories that are present on the site.
    The `div` elements are responsible for displaying this block on the left-hand
    side and allowing the next block, tags, to be placed next to it (it's a more effective
    way of achieving such an effect than using HTML tables, because it's a more cross-device-friendly
    approach).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及到在网站上添加一个完整的分类列表。`div` 元素负责在左侧显示这个区块，并允许下一个区块（标签）紧挨着它放置（这比使用 HTML 表格更有效，因为它是一个更跨设备友好的方法）。
- en: 'The next part of the code is the following:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分如下：
- en: '[PRE58]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: It has a very similar purpose, only this time we're displaying the aforementioned
    tag cloud. The last `div` element visible here is meant to clear the `float` parameter
    used in the previous `div` elements.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有非常相似的目的，只是这次我们显示的是前面提到的标签云。这里最后一个可见的 `div` 元素是用来清除前面 `div` 元素中使用的 `float`
    参数的。
- en: 'Next, we have the part responsible for displaying the latest posts, as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有负责显示最新帖子的部分，如下所示：
- en: '[PRE59]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Currently, the code displays the 15 latest posts, but this can be adjusted if
    you just change the value of the `$how_many_last_posts` variable.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，代码显示的是最新的 15 篇帖子，但如果你只是更改 `$how_many_last_posts` 变量的值，这可以进行调整。
- en: 'Finally, there''s the block that displays a traditional monthly archive, where
    every month is represented as a standard link, as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个显示传统月度存档的区块，其中每个月都表示为一个标准链接，如下所示：
- en: '[PRE60]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: At this point, you can save the file and proceed to the next step, which is
    to apply the template to a page.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以保存文件并继续下一步，即将模板应用于一个页面。
- en: 'Leave your HTML editor and log into your `wp-admin`. You need to create the
    page in which you want to use this template. In my case, I''ll name my new page Archives,
    to make its purpose clear. While working on the page, switch to the Document tab
    and scroll down to the Page Attributes section. This is where you''ll find the
    Template setting, as demonstrated in the following screenshot:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 离开你的HTML编辑器，登录到你的`wp-admin`。你需要创建一个页面，你想要在这个页面中使用这个模板。在我的例子中，我会把我的新页面命名为“存档”，以便清楚地表明其目的。在处理页面时，切换到文档选项卡，并滚动到页面属性部分。这就是你将找到模板设置的地方，如下面的截图所示：
- en: '![](img/1630a45b-819b-4028-af15-df93effc6ee6.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/1630a45b-819b-4028-af15-df93effc6ee6.png)'
- en: 'Change it from Default template to Blog Archives Custom and save the draft
    or publish it right away. Now, in order to see the page somewhere, you have to
    add it to one of the menus. We already covered menus in [Chapter 4](74cf5381-e680-4dc0-8de9-7d95b3e08b69.xhtml),
    *Pages, Media, and Importing/Exporting Content,* so I''m sure you can get it done
    quickly. Once you have this handled, you can return to the frontend of your website
    and click on the Archives page. However, because your site is not that content-heavy
    at this point, you won''t get a staggering effect, but there''ll still be a nice
    presentation of the most recent posts, as shown in the following screenshot:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 将它从默认模板更改为博客存档自定义模板，并保存草稿或立即发布。现在，为了在某个地方看到这个页面，你必须将它添加到其中一个菜单中。我们已经在[第4章](74cf5381-e680-4dc0-8de9-7d95b3e08b69.xhtml)中介绍了菜单，*页面、媒体和导入/导出内容*，所以我相信你可以快速完成。一旦你处理好了这个问题，你就可以回到你网站的首页，点击存档页面。然而，因为你的网站在这个阶段内容并不丰富，所以你不会得到惊人的效果，但仍然会有一个很好的最新帖子展示，如下面的截图所示：
- en: '![](img/71f33c13-eda0-4d27-8bb1-896c3ae9a42b.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/71f33c13-eda0-4d27-8bb1-896c3ae9a42b.png)'
- en: There is no limit to the number of custom templates that you can make for your
    WordPress theme.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为你的WordPress主题制作任意数量的自定义模板。
- en: These versions of the `tmpl_archives.php` file and the `content-tmpl_archives.php`
    file are available in the code bundle for this chapter, inside a sub-directory
    called `phase 5`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`tmpl_archives.php`文件和`content-tmpl_archives.php`文件的版本可以在本章的代码包中找到，位于名为`phase
    5`的子目录中。
- en: Making your theme widget-friendly
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的主题小部件友好
- en: If you want to be able to use widgets in your theme, you will need to make your
    theme widget-friendly (also known as *widgetizing* your theme). Widgetizing is
    actually pretty easy, and to be honest with you, we already took care of that
    when constructing our sidebar. Let's now go back to this and explain how widgetizing
    works.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在主题中使用小部件，你需要让你的主题变得小部件友好（也称为*小部件化*你的主题）。小部件化实际上非常简单，而且说实话，我们在构建侧边栏时已经处理了这一点。现在让我们回到这个话题，解释一下小部件化是如何工作的。
- en: Going back to our sidebar
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到我们的侧边栏
- en: Back in the old days, it was very common for a WordPress site to use statically
    placed content blocks in the sidebar. In other words, the only way to place dynamic
    content in the sidebar of our sites was to use handmade code that would fetch
    whatever data we wanted and then display it. This solution wasn't very usable
    for everyday users who might not be familiar with the PHP source code. A better
    solution needed to be found. Hence, widgets.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，WordPress网站在侧边栏中使用静态放置的内容块是非常常见的。换句话说，在我们网站的侧边栏中放置动态内容的唯一方法就是使用手工编写的代码，它会获取我们想要的数据，然后显示它。这个解决方案对于可能不熟悉PHP源代码的日常用户来说并不实用。需要找到一个更好的解决方案。因此，小部件应运而生。
- en: Widgets give us the ability to set the sidebars in a way so that they fetch
    the data that's been set in Appearance | Widgets. Therefore, the only thing the
    user has to do is go to Appearance | Widgets and pick whatever content they want
    to feature in the sidebar (or any other widget area for that matter; it could
    be in the footer as well).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件让我们能够以某种方式设置侧边栏，以便它们获取在“外观 | 小部件”中设置的数据。因此，用户唯一需要做的就是前往“外观 | 小部件”，选择他们想要在侧边栏（或任何其他小部件区域；这也可以在页脚中）中展示的内容。
- en: 'Just to give you an example of old versus new, here''s what a standard piece
    of code might look like that handles displaying blog archives the old way (this
    can be placed in `sidebar.php`):'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给你一个新旧对比的例子，以下是一个标准代码片段的示例，它以旧的方式处理显示博客存档（这个可以放在`sidebar.php`中）：
- en: '[PRE61]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'However, this code is not customizable in any way, so a much better solution
    to display the archives is to use the code that we already have in our `sidebar.php`,
    which is as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段代码在任何方面都是不可定制的，所以一个更好的显示存档的解决方案是使用我们已经在`sidebar.php`中拥有的代码，如下所示：
- en: '[PRE62]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Then, just assign a new Archives widget to this sidebar in the Appearance |
    Widgets section of `wp-admin`.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需在`wp-admin`的“外观”|“小工具”部分将一个新的存档小工具分配给这个侧边栏。
- en: Working with the functions.php file
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与`functions.php`文件一起工作
- en: 'Let''s examine how all this actually works. As I said earlier, the `functions.php`
    file can contain many different elements, so now, it''s about time to focus on
    how to enable dynamic sidebars, also known as widgets. In the `functions.php`
    file, we can place the following code:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这一切是如何实际工作的。正如我之前说的，`functions.php`文件可以包含许多不同的元素，所以现在是时候关注如何启用动态侧边栏，也就是小工具。在`functions.php`文件中，我们可以放置以下代码：
- en: '[PRE63]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In this code, I'm using one new function to register a new widget area. As you
    can see, the widget area is simply called `Sidebar` (the `name` parameter).
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我使用了一个新函数来注册一个新的小工具区域。正如你所见，小工具区域简单地被称为`Sidebar`（`name`参数）。
- en: Now, the final `add_action('widgets_init', 'daily_cooking_custom_widgets_init')`
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后的`add_action('widgets_init', 'daily_cooking_custom_widgets_init')`
- en: function call is what actually registers the widget areas (it's the most important
    line of code here; it lets WordPress know when to enable the widget areas).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用实际上是注册小工具区域（这是这里最重要的代码行；它让WordPress知道何时启用小工具区域）。
- en: Adding some widgets
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些小工具
- en: 'At this point, your theme is ready for widgets! You can now go to `wp-admin`,
    navigate to Appearance | Widgets, and add widgets. For example, as you can see
    in the following screenshot, I''ve added four widgets to one of the widget areas:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的主题已经准备好小工具了！你现在可以前往`wp-admin`，导航到“外观”|“小工具”，并添加小工具。例如，如以下截图所示，我已经向一个小工具区域添加了四个小工具：
- en: '![](img/6d5ada78-3cf6-41ae-b5c4-5f6578cb4a18.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/6d5ada78-3cf6-41ae-b5c4-5f6578cb4a18.png)'
- en: 'Be sure to click on Save, and then return to your website and reload the page.
    The default items you placed in the sidebar will have been replaced with widgets,
    as shown in the following screenshot:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要点击保存，然后返回你的网站并重新加载页面。你放在侧边栏中的默认项目将被小工具替换，如下面的截图所示：
- en: '![](img/a8d45347-2c65-42cd-bde3-19c0f68445bc.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/a8d45347-2c65-42cd-bde3-19c0f68445bc.png)'
- en: Additional widgetizing options
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他小工具化选项
- en: 'What we''ve just covered is the simplest way to widgetize a theme. There are
    actually a lot of other possibilities that you could utilize when adding the code
    to your `sidebar.php` and `functions.php` files. For example, there are options
    that allow you to do the following:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚介绍的是将主题小工具化的最简单方法。实际上，还有很多其他可能性，你可以在将代码添加到`sidebar.php`和`functions.php`文件时利用它们。例如，有一些选项允许你执行以下操作：
- en: Widgetize more than one sidebar, giving each a name
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小工具化多个侧边栏，并为每个命名
- en: Widgetize a part of your sidebar, but leave in some default items
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小工具化侧边栏的一部分，但保留一些默认项目
- en: Widgetize the footer
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小工具化页脚
- en: Customize the search form widget, and much more
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义搜索表单小工具，等等
- en: Learning more
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 学习更多
- en: To learn about the variety of options available and how to take advantage of
    them, take a look at the following resource in the Codex: [https://codex.wordpress.org/Widgetizing_Themes](https://codex.wordpress.org/Widgetizing_Themes).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解可用的各种选项以及如何利用它们，请查看Codex中的以下资源：[https://codex.wordpress.org/Widgetizing_Themes](https://codex.wordpress.org/Widgetizing_Themes)。
- en: Enabling a menu in your theme
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的主题中启用菜单
- en: 'The good news I have for you right now is that menus are already enabled in
    the structure of the theme we''re creating here. Because we used the `wp_nav_menu()`
    function in the header of the site (in the `header.php` file), if the user creates
    a menu in Appearance | Menus, and then assigns it to the area indicated as Primary
    Menu, it will show up on the site, as demonstrated in the following screenshot:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在要告诉你的好消息是，菜单已经在我们创建的主题结构中启用。因为我们使用了`wp_nav_menu()`函数在网站头部（在`header.php`文件中），如果用户在“外观”|“菜单”中创建了一个菜单，并将其分配给标记为“主菜单”的区域，它将显示在网站上，如下面的截图所示：
- en: '![](img/b923da6f-c552-473c-9023-affdcd54be58.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/b923da6f-c552-473c-9023-affdcd54be58.png)'
- en: If you want to have more than one navigation menu in your theme, you can register
    multiple navigation menu locations, let the user create multiple menus, and choose
    which menu goes in which location. To learn more about this, check out the Codex
    at [https://codex.wordpress.org/Navigation_Menus](https://codex.wordpress.org/Navigation_Menus).
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在你的主题中拥有多个导航菜单，你可以注册多个导航菜单位置，让用户创建多个菜单，并选择哪个菜单放在哪个位置。要了解更多信息，请查看[https://codex.wordpress.org/Navigation_Menus](https://codex.wordpress.org/Navigation_Menus)的Codex。
- en: Learning more
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 学习更多
- en: 'The `wp_nav_menu()` function is quite powerful, and can take a number of parameters
    that will let you control the classes and IDs, the name of the menu, and more.
    Take a look here: [https://developer.wordpress.org/reference/functions/wp_nav_menu/](https://developer.wordpress.org/reference/functions/wp_nav_menu/).'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`wp_nav_menu()`函数非常强大，可以接受多个参数，这些参数将允许你控制类和ID、菜单名称等。请看这里：[https://developer.wordpress.org/reference/functions/wp_nav_menu/](https://developer.wordpress.org/reference/functions/wp_nav_menu/)。'
- en: Making your theme editable in the WordPress Customizer
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WordPress自定义化器中使你的主题可编辑
- en: WordPress Customizer is a relatively recent addition to the WordPress ecosystem.
    In short, it's a framework meant for live-previewing any changes that the user
    makes to their website. The Customizer's interface allows for the modification
    of various aspects of a theme's and website's appearance, starting from the name
    of the site, the tagline, all the way to the colors used, layouts, widgets, menus,
    and more. We talked about the Customizer from the user's point of view back in
    [Chapter 8](7ecd502d-b30d-40d9-8b58-623323b644e5.xhtml), *Customizing Your Website
    Appearance/Design*.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress自定义化器是WordPress生态系统中的相对较新的功能。简而言之，它是一个框架，旨在实时预览用户对其网站所做的任何更改。自定义化器的界面允许修改主题和网站外观的各个方面，从网站的名称、标语，到使用的颜色、布局、小工具、菜单等等。我们曾在[第8章](7ecd502d-b30d-40d9-8b58-623323b644e5.xhtml)中从用户的角度讨论了自定义化器，*自定义你的网站外观/设计*。
- en: Now, from a developer's perspective, when you're building your WordPress theme,
    there are a couple of things that you should do in order to make it compatible
    with the Customizer. Luckily, the starter theme that we're using in this chapter
    as the foundation of our theme, the _S theme, already comes with some basic Customizer
    integrations. Let's go over them one by one, and at the same time, see how we
    can expand our theme's functionality further.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从开发者的角度来看，当你构建你的WordPress主题时，有一些事情你应该做，以便使其与自定义化器兼容。幸运的是，我们在本章中作为主题基础的起始主题，即_S主题，已经包含了一些基本的自定义化器集成。让我们逐一了解它们，同时看看我们如何进一步扩展主题的功能。
- en: 'First, let''s look at the following line of code. It should be placed at the
    end of your `functions.php` file:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看以下代码行。它应该放在你的`functions.php`文件末尾：
- en: '[PRE64]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This definition simply includes an additional file that takes care of the Customizer
    integration itself. Even though we could do everything right in the `functions.php`
    file, having the Customizer handled in a separate file makes for a theme structure
    that's easier to grasp.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义简单地包括了一个额外的文件，该文件负责自定义化器的集成本身。尽管我们可以在`functions.php`文件中做到一切正确，但将自定义化器处理在单独的文件中可以使主题结构更容易理解。
- en: That new `customizer.php` file is where we're going to add all of our new code.
    The core of the Customizer integration is done via the `customize_register` hook.
    It allows us to define new Customizer panels, sections (the main elements of navigation
    within the Customizer), settings (the data that our theme can accept), and controls
    (the visual UI elements that allow us to tweak our settings).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 那个新的`customizer.php`文件是我们将要添加所有新代码的地方。自定义化器集成的核心是通过`customize_register`钩子完成的。它允许我们定义新的自定义化器面板、部分（自定义化器内部导航的主要元素）、设置（我们的主题可以接受的数据）和控制（允许我们调整设置的视觉UI元素）。
- en: 'In order to register all of our new Customizer elements, we can use the following
    function:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 为了注册我们所有的自定义化器新元素，我们可以使用以下函数：
- en: '[PRE65]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Within this function is where creating new sections, settings, and controls
    is done. However, as you'll notice, we already have this function in the `customizer.php`
    file created. This is, again, a result of building our theme on top of the _S
    starter theme. We've opted for this approach since it allows us to get started
    with theme development a lot quicker than building things from scratch.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数内部，我们创建新的部分、设置和控制。然而，正如你所注意到的，我们已经在`customizer.php`文件中创建了此函数。这又是我们在_S起始主题之上构建主题的结果。我们选择这种方法，因为它允许我们比从头开始构建更快地开始主题开发。
- en: 'Our current `daily_cooking_custom_customize_register()` function already features
    the following lines:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的`daily_cooking_custom_customize_register()`函数已经包含了以下行：
- en: '[PRE66]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This code capitalizes on some Customizer abilities that are available for WordPress
    themes by default. Namely, those two enable us to modify the title and blog description.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码利用了WordPress主题默认可用的某些自定义化器能力。具体来说，这两个功能使我们能够修改标题和博客描述。
- en: 'Now it''s time to add something new to the Customizer. Firstly, adding a new
    section is very simple. Let''s start by including the following function call
    inside our main `daily_cooking_custom_customize_register()` function:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候向自定义设置添加一些新内容了。首先，添加一个新的部分非常简单。让我们首先在我们的主 `daily_cooking_custom_customize_register()`
    函数中包含以下函数调用：
- en: '[PRE67]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The function can take two arguments—the first one is the identifier for your
    new section, and the other is an array of additional options. Here''s what we''re
    going to do:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以接受两个参数——第一个是您新部分的标识符，另一个是附加选项的数组。以下是我们将要做什么：
- en: '[PRE68]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This creates a new section titled `Menu Bar Colors` and identified by `menu_bar_colors`.
    Now, let''s add a new setting. Settings provide a way to communicate with WordPress
    and let it know that we''re using a value that the user can modify. New settings
    can be added via the `$wp_customize->add_setting()` function call. We can handle
    this as follows (as you can see, I''m adding not one, but two new *settings*):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个新的部分，标题为 `菜单栏颜色`，标识为 `menu_bar_colors`。现在，让我们添加一个新的设置。设置提供了一种与 WordPress
    通信的方式，并让它知道我们正在使用用户可以修改的值。可以通过 `$wp_customize->add_setting()` 函数调用添加新设置。我们可以这样处理（正如你所见，我添加的不是一个新的，而是两个新的
    *设置*）：
- en: '[PRE69]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Once the settings are in place, the last elements of the puzzle are some new
    controls. Controls tie the two together; they let WordPress know which sections
    work with which settings. This is done via the `$wp_customize->add_control()`
    function call, as follows:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置到位，拼图的最后部分是一些新的控件。控件将两者联系起来；它们让 WordPress 知道哪些部分与哪些设置一起工作。这是通过 `$wp_customize->add_control()`
    函数调用完成的，如下所示：
- en: '[PRE70]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'As you can see, each of our settings gets its own *control*. At this stage,
    when you save the file and go to the Customizer from the WordPress dashboard (Appearance
    | Customize), you''ll see the new section in the sidebar. Inside it, you''ll also
    see that the elements are all operational. Although, they don''t have much impact
    on the appearance of the theme yet. We''ll handle that next. Take a look at the
    following screenshot:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们的每个设置都得到了自己的 *控件*。在这个阶段，当你保存文件并从 WordPress 控制面板（外观 | 自定义）转到自定义设置时，你会在侧边栏中看到新的部分。在里面，你也会看到所有元素都是可操作的。尽管，它们对主题的外观影响不大。我们将在下一部分处理这个问题。请看以下截图：
- en: '![](img/08670f13-dc7a-4f9c-969d-84d4f3332e5a.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08670f13-dc7a-4f9c-969d-84d4f3332e5a.png)'
- en: 'The first thing we need to do now is alter the CSS of the theme based on what
    the user has set in the Customizer. To make that happen, let''s add the following
    code at the end of the `customizer.php` file:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要做的第一件事是根据用户在自定义设置中设置的值来修改主题的 CSS。为了实现这一点，让我们在 `customizer.php` 文件的末尾添加以下代码：
- en: '[PRE71]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'This new function hooks up to `wp_head` and alters the CSS of the website.
    The most important instructions in it are those three inline PHP echo blocks.
    Here''s one of them:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新功能连接到 `wp_head` 并修改网站的 CSS。其中最重要的指令是那三个内联 PHP echo 块。以下是一个例子：
- en: '[PRE72]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The `get_theme_mod()` function allows you to grab the current theme''s settings
    and indicate the name of the specific setting that you need in the first parameter
    (the second one is the default value). When you save your file now, the new color
    selection options should be fully enabled. Refer to the following screenshot:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_theme_mod()` 函数允许你获取当前主题的设置，并在第一个参数（第二个是默认值）中指定你需要的特定设置的名称。当你现在保存文件时，新的颜色选择选项应该完全启用。参考以下截图：'
- en: '![](img/38eec357-eccc-489d-8b97-b8c45e15ac00.png)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38eec357-eccc-489d-8b97-b8c45e15ac00.png)'
- en: We have only scratched the surface here in terms of what's possible in the Customizer,
    but it's still given you a good overview, and has also proven that the Customizer
    is actually a very developer-friendly environment to work in. Always try putting
    as many of your theme's settings as possible in the Customizer module; the end
    user will thank you for it!
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是触及了自定义设置中可能性的表面，但它仍然给了你一个很好的概述，并且也证明了自定义设置实际上是一个非常适合开发者工作的环境。始终尝试尽可能多地将您主题的设置放入自定义设置模块；最终用户会为此感谢你！
- en: 'If you want to learn more about how to work with the Customizer and uncover
    some of its other features (such as working with JS files for dynamic live previews,
    for example), then don''t hesitate to visit either of these resources:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于如何使用自定义设置以及发现其其他功能（例如，例如，使用 JS 文件进行动态实时预览），那么不要犹豫，访问以下资源之一：
- en: '[https://codex.wordpress.org/Theme_Customization_API](https://codex.wordpress.org/Theme_Customization_API)
    and [https://developer.wordpress.org/themes/customize-api/](https://developer.wordpress.org/themes/customize-api/).'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://codex.wordpress.org/Theme_Customization_API](https://codex.wordpress.org/Theme_Customization_API)
    和 [https://developer.wordpress.org/themes/customize-api/](https://developer.wordpress.org/themes/customize-api/).'
- en: Creating a child theme
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子主题
- en: If you've found an existing theme or theme framework that you like, and you
    just want to adjust it a bit to fit your requirements perfectly, you can create
    a child theme on top of it. A child theme uses a parent theme as a starting point
    and, without changing the theme itself, alters just the bits you *want to* alter.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经找到了一个你喜欢的现有主题或主题框架，并且只想对其进行一些调整以完美地满足你的需求，你可以在其基础上创建一个子主题。子主题以父主题为起点，不改变主题本身，只更改你想要更改的部分。
- en: As a matter of fact, using child themes is the recommended way of making modifications
    to any theme. The rule of thumb is simple—if you want to change anything at all
    about a stock theme (either inside the source code, graphics, or template files),
    do it through a new child theme.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用子主题是修改任何主题的推荐方式。基本原则很简单——如果你想要更改任何关于库存主题（无论是源代码、图形还是模板文件）的内容，请通过一个新的子主题进行更改。
- en: 'In plain English, a child theme inherits the functionality and features of
    the parent theme. The biggest value of creating child themes is that you can introduce
    any bells and whistles you wish without altering the structure of the parent theme.
    I know that this sounds like some additional work, because if you just want to
    change a couple of lines of code, then it''s always going to be quicker to do
    it directly within the theme. However, taking the longer *child theme* route has
    its benefits, such as the following:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 用简单的话来说，子主题继承了父主题的功能和特性。创建子主题的最大价值在于，你可以引入你想要的任何功能，而不会改变父主题的结构。我知道这听起来像是一些额外的工作，因为如果你只想更改几行代码，那么直接在主题内进行更改总是更快。然而，采取更长的子主题路径有其好处，例如以下这些：
- en: 'The main benefit is that if you were to modify the original theme directly,
    all your modifications would vanish the minute you updated the theme. However,
    if you''re using child themes, you can take full advantage of any updates that
    the original theme''s authors release. Let me say this again: preserving your
    modifications after performing a theme update is impossible unless you''re using
    a child theme.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要好处是，如果你直接修改原始主题，所有修改都会在更新主题的瞬间消失。然而，如果你使用子主题，你可以充分利用原始主题作者发布的任何更新。让我再次强调：除非你使用子主题，否则在执行主题更新后保留你的修改是不可能的。
- en: You have a very clear view of the modifications that you've introduced into
    your theme. Basically, every new thing that you implement through a child theme
    has to be placed in a new file, so even when you come back to review your child
    theme after a while, you can still easily identify every piece of your work.
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以清楚地看到你对主题所做的修改。基本上，通过子主题实施的所有新内容都必须放置在一个新文件中，所以即使你在一段时间后回来审查你的子主题，你仍然可以轻松地识别出你的每一项工作。
- en: The final benefit—actually, there's probably a lot more of them—is that it's
    very easy to revert any modification you've introduced through a child theme.
    In short, if something is causing any serious problems and you have to fix your
    site quickly, then you can simply delete the files responsible. If you were modifying
    your original theme directly, going through every file individually would surely
    take more time and would make any sort of quick recovery very difficult to achieve.
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的益处——实际上，可能还有很多——就是通过子主题引入的任何修改都非常容易恢复。简而言之，如果有什么严重的问题导致你必须快速修复你的网站，那么你可以简单地删除负责的文件。如果你直接修改原始主题，逐个文件进行修改无疑会花费更多时间，并且会使任何快速恢复变得非常困难。
- en: Let's take a quick look at how to make a child theme.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一下如何创建一个子主题。
- en: Creating the new theme directory
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的主题目录
- en: Just to make things easier to understand here, we'll take the theme that we've
    been creating in this chapter and build a child theme for it. The starting point
    is really simple. Create a new directory in `wp-content/themes/` and name it `daily-cooking-child`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更容易理解，我们将以本章中创建的主题为基础，为其构建一个子主题。起点非常简单。在 `wp-content/themes/` 中创建一个新的目录，并将其命名为
    `daily-cooking-child`。
- en: Creating the style sheet
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建样式表
- en: 'The only file you need to start with in this directory is the style sheet (`style.css`).
    The style sheet needs the usual header, plus a new line, as follows:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，你需要从样式表（`style.css`）开始。样式表需要通常的标题，以及以下新行：
- en: '[PRE73]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The key line in this preceding code is `Template: daily-cooking-custom`. This
    instructs WordPress that your new theme is a child theme of `daily-cooking-custom`.
    Just to emphasize, that one line is really crucial. Then, to make your child theme
    start out with the CSS from the parent theme, add the following code after the
    comment:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '上述代码中的关键行是`Template: daily-cooking-custom`。这告诉WordPress，你的新主题是`daily-cooking-custom`的子主题。只是为了强调，这一行确实非常重要。然后，为了使你的子主题从父主题的CSS开始，在注释之后添加以下代码：'
- en: '[PRE74]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: If you don't use the preceding line, your child theme will begin its existence
    on a blank style sheet. In most cases, this is not a desirable scenario.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不用上一行，你的子主题将从一个空样式表开始其存在。在大多数情况下，这不是一个理想的情况。
- en: Using your child theme
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用你的子主题
- en: 'That''s it! Your new theme now shows up on the Appearance page, as shown in
    the following screenshot:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你的新主题现在出现在外观页面，如下面的截图所示：
- en: '![](img/efb7276e-ba70-4e9e-bf9e-f9fe53faf1e5.png)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efb7276e-ba70-4e9e-bf9e-f9fe53faf1e5.png)'
- en: Granted, the theme is not really useful at this point, but it does exist and
    you can use it as the base for further modifications. By default, it will use
    all of the main theme's styles, template files, functions, and everything else.
    If you activate it, it will present your site as if you were using your main theme.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个主题在这个阶段可能并不是非常有用，但它确实存在，你可以将其用作进一步修改的基础。默认情况下，它将使用主主题的所有样式、模板文件、函数以及所有其他内容。如果你激活它，它将使你的网站看起来就像你正在使用主主题一样。
- en: If you want to change anything, do so in your child theme's directory. You will
    override the main theme's original template file if you create a new template
    file (for example, `single.php`, `index.php`, and `archive.php`). The `functions.php`
    file works a little differently, however. If you create a new `functions.php`
    file, it will be executed in addition to the main theme's original `functions.php`
    file. In fact, your new file will be loaded first, right before the original one.
    If you want to override a specific function in the original `functions.php` file,
    just create a function with the same name. You can also create completely new
    functions that are not present in the parent theme.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改任何内容，请在你的子主题目录中进行更改。如果你创建一个新的模板文件（例如，`single.php`、`index.php`和`archive.php`），你将覆盖主主题的原始模板文件。然而，`functions.php`文件的工作方式略有不同。如果你创建一个新的`functions.php`文件，它将在主主题的原始`functions.php`文件之前执行。实际上，你的新文件将在原始文件之前加载。如果你想要覆盖原始`functions.php`文件中的特定函数，只需创建一个具有相同名称的函数。你还可以创建在父主题中不存在的完全新的函数。
- en: Like I said, every other template file you create inside the child theme (such
    as, `page.php` and `single.php`) will override its namesake, so it's the perfect
    method to include a new, slightly different design or some new features. Apart
    from replacing the existing template files, you can add new ones that are not
    present in the parent (including custom page templates).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我说的一样，你在子主题内部创建的每个其他模板文件（例如，`page.php`和`single.php`）都将覆盖其同名文件，所以这是包含一个新设计或一些新功能的完美方法。除了替换现有的模板文件外，你还可以添加父主题中不存在的新的模板文件（包括自定义页面模板）。
- en: In the end, the whole topic of child themes is quite an easy one to grasp once
    you spend a little time trying out different things, and checking how your site
    reacts to the elements you include in the child theme.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦你花点时间尝试不同的事情，检查你的网站对你包含在子主题中的元素的反应，整个子主题的话题其实非常容易掌握。
- en: Learning more
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 学习更多
- en: The WordPress Codex has a page devoted to learning about child themes, at [https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes).
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress Codex有一个页面专门介绍子主题，请参阅[https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes)。
- en: Sharing your theme
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享你的主题
- en: 'If you want to turn your template into a package that other people can use,
    you just have to take the following steps:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将你的模板变成其他人可以使用的产品，你只需要采取以下步骤：
- en: Make sure you have the rights to redistribute images, icons, photos, and so
    on, that you've included in your theme.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你有权重新分发你包含在主题中的图像、图标、照片等等。
- en: Remove all unnecessary files from your theme's directory. Be sure you don't
    have backup versions or old copies of any of your files. If you do delete any
    file, be sure to test your theme to ensure you didn't accidentally delete something
    important.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的主题目录中删除所有不必要的文件。确保你没有备份版本或任何文件的旧副本。如果你删除了任何文件，请务必测试你的主题以确保你没有意外删除重要的内容。
- en: Make sure the comment at the top of the `style.css` file is complete and accurate.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`style.css`文件顶部的注释完整且准确。
- en: Create a `Readme.txt` file. This is a good place to let future users know which
    version of WordPress your theme is compatible with, and whether it has any special
    features or requirements.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Readme.txt`文件。这是一个很好的地方，让未来的用户知道你的主题与哪个版本的WordPress兼容，以及它是否有任何特殊功能或要求。
- en: Zip the directory and post your theme's ZIP file on your own website for people
    to download, or submit it directly to the WordPress Theme Directory at [https://wordpress.org/themes/](https://wordpress.org/themes/).
    Keep in mind, though, that the review process there tends to take a while. So
    be ready for a 3-6 month wait before you see your theme online.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录压缩并发布你的主题ZIP文件到你的网站上供人们下载，或者直接提交到WordPress主题目录[https://wordpress.org/themes/](https://wordpress.org/themes/)。但请记住，那里的审查过程可能需要一段时间。所以，在你看到你的主题上线之前，要做好3-6个月的等待准备。
- en: Even though the preceding looks like a standard step-by-step process, it's actually
    nothing like it. To be honest, your theme has to be a really high quality one
    if it's to be allowed into the directory. Every theme undergoes a human review,
    which often results in themes not passing. In that case, you just have to make
    the requested changes, resubmit your work, and keep trying until you get in.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的步骤看起来像是一个标准的逐步过程，但实际上并非如此。说实话，如果你的主题想要被允许进入目录，它必须是非常高质量的。每个主题都会经过人工审查，这通常会导致一些主题未能通过。在这种情况下，你只需要按照要求进行修改，重新提交你的作品，并继续尝试，直到你成功进入。
- en: Then, there's also the issue of licensing. By default, WordPress is available
    under the **GNU General Public License** (**GPL**). In plain English, this means
    that WordPress (the platform) is free, and every derivative work that is built
    on top of it has to be filed under GPL too—this includes themes. In short, every
    piece of PHP code you find inside WordPress, various themes, or plugins is GPL
    (that includes premium themes and plugins). When it comes to artwork and CSS,
    GPL might not apply. If you want to learn more about the GPL licensing, it's best
    if you go straight to the official documentation at [https://wordpress.org/news/2009/07/themes-are-gpl-too/](https://wordpress.org/news/2009/07/themes-are-gpl-too/).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有关于许可的问题。默认情况下，WordPress遵循**GNU通用公共许可证**（**GPL**）。简单来说，这意味着WordPress（平台）是免费的，并且在其之上构建的任何衍生作品都必须在GPL下注册——这包括主题。简而言之，你可以在WordPress、各种主题或插件中找到的每一行PHP代码都是GPL（这包括付费主题和插件）。当涉及到艺术作品和CSS时，GPL可能不适用。如果你想了解更多关于GPL许可的信息，最好的办法是直接访问官方文档[https://wordpress.org/news/2009/07/themes-are-gpl-too/](https://wordpress.org/news/2009/07/themes-are-gpl-too/)。
- en: Now, apart from the official directory, you can share your theme through other
    channels. First of all, you have to decide whether you want your theme to be available
    for free or not. In the case of the former, you can reach out to some popular
    blogs about WordPress and WordPress design, and simply let them know that you
    have a theme that you'd like to share. Most of the time (if the theme looks attractive),
    they will have no problem notifying their community that there's a cool new free
    theme.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，除了官方目录外，你还可以通过其他渠道分享你的主题。首先，你必须决定你是否想让你的主题免费提供。如果是这样的话，你可以联系一些关于WordPress和WordPress设计的流行博客，并简单地告诉他们你有一个想要分享的主题。大多数时候（如果主题看起来吸引人），他们不会有问题通知他们的社区，有一个酷炫的新免费主题。
- en: If you want to make your theme a premium one, you can go to ThemeForest ([https://themeforest.net/](https://themeforest.net/))
    and try submitting it there. The only challenge is that your theme must really
    be a high quality one.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的主题成为付费主题，你可以前往ThemeForest（[https://themeforest.net/](https://themeforest.net/)）并尝试提交你的主题。唯一的挑战是，你的主题必须真的是高质量的。
- en: I'm not forcing you to share your theme with the community right away, but once
    you build some expertise and build your themes to be really cool and useful, you
    really should reach out to people and share your work. Finally, if you're interested
    in making an impact  in the community, consider launching a website dedicated
    to it. This website would be a place where you could publish a demo version, deliver
    some documentation, and provide support forums and other things to deliver a great
    user experience.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会强迫你立即与社区分享你的主题，但一旦你积累了一些专业知识，并且构建出真正酷炫和有用的主题，你真的应该与人沟通并分享你的作品。最后，如果你对在社区中产生影响感兴趣，考虑启动一个专门针对此目的的网站。这个网站将成为你可以发布演示版本、提供一些文档、提供支持论坛以及其他事项以提供优质用户体验的地方。
- en: The final versions of all of the theme files (including the child theme) are
    available in the code bundle for this chapter, inside a sub-directory called `final`.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主题文件（包括子主题）的最终版本都包含在本章的代码包中，位于名为`final`的子目录内。
- en: Summary
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You have now crossed to the other side of the WordPress themes world—you have
    learned how to make your own theme. With just basic HTML and CSS code, you can
    create a design and turn it into a fully functional WordPress theme.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经跨越到了WordPress主题世界的另一边——你已经学会了如何制作自己的主题。只需基本的HTML和CSS代码，你就可以创建一个设计并将其转变为一个完全功能的WordPress主题。
- en: In this chapter, we looked at how to turn your HTML build into a basic theme,
    creating WordPress templates to influence the display of a variety of views on
    your site, creating custom templates to be applied to pages within your site,
    making your new theme widget-ready, creating a child theme, making a theme compatible
    with the WordPress Customizer, and share your theme with everyone in the WordPress
    community.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将你的HTML构建转换为基本主题，创建WordPress模板以影响你网站上各种视图的显示，创建应用于你网站内页面的自定义模板，使你的新主题具备小工具兼容性，创建子主题，使主题与WordPress自定义设置兼容，以及与WordPress社区中的每个人分享你的主题。
- en: In the next chapter, we'll discuss social media integration, podcasting, and
    HTTPS (Hypertext Transfer Protocol Secure). This information will allow you to
    expand your blogging habits, and make your work more diverse and more noticeable
    on the web.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论社交媒体集成、播客和HTTPS（安全超文本传输协议）。这些信息将使你能够扩展你的博客习惯，让你的作品在网络上更加多样化并且更加引人注目。
