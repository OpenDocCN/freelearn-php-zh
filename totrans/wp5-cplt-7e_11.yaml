- en: Developing your Own Theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you know how to find themes on the web and install them for use
    on your WordPress website. But, there's a lot more that WordPress has to offer,
    particularly in the theme development department. In this chapter, you'll learn
    how to turn your own design into a fully functional WordPress theme, which you'll
    then be able to use on your website. You'll also learn how to share your WordPress
    theme with other users on the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you will need before we get started is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Your own website design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to slice and dice your design to turn it into an HTML structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start out with tips on slicing and dicing, so that your HTML and CSS files
    are as WordPress-friendly as possible, and then cover the steps for turning that
    HTML build into a fully functional theme.
  prefs: []
  type: TYPE_NORMAL
- en: Note that I assume you are already comfortable writing and working with HTML
    and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will be covering in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting your build into a theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating template files within your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your theme widget-friendly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling a menu in your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your theme editable in the WordPress Customizer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a child theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing your theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter covers only the very basics of theme creation. This topic actually
    deserves a whole book, and it has one! I highly recommend *WordPress Theme Development:
    Beginner''s Guide, Rachel McCollin and Tessa Blakeley Silver, Packt Publishing*.
    This book covers everything you could possibly want to know about creating your
    own theme in detail, including details such as choosing a color scheme, considering
    typography, writing the best CSS, and laying out your HTML using rapid design
    comping. If this chapter leaves you wanting more, go there!'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just about any design in the world can be turned into a WordPress theme. However,
    there are some general guidelines you should follow—regarding both the design
    and the HTML/CSS build of your theme.
  prefs: []
  type: TYPE_NORMAL
- en: Designing your theme to be WordPress-friendly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While you can design your blog any way you want, a good starting point would
    be with one of the standard blog layout, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/def63c81-60c5-4f94-a157-9ce3b997c7e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that, while these standard layouts have a differing number of columns,
    most of them have the following essential parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A main column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A side column(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress expects your theme to follow this pattern, for the most part. While
    you can be creative and not include one or more of these blocks in your design,
    you will get the most educational value out of this experience if you don't skip
    anything. WordPress will provide you with functions that make your work easier.
    Also, a build that stays within the same general design patterns of WordPress
    themes will easily accommodate the existing plugins and widgets.
  prefs: []
  type: TYPE_NORMAL
- en: That said, a common situation in the WordPress world is to build custom home
    pages or landing pages (that is, purpose-specific pages, which are mostly commercial)
    that feature completely different designs. Therefore, you might stumble upon websites
    that don't look like they're built with WordPress at first glance. Also, many
    modern theme frameworks give you the possibility to create such custom home pages,
    as well as other custom page templates. This is all part of the trend to make
    WordPress capable of running any kind of website.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''re going to learn how to build a basic WordPress theme
    that offers a classic blog layout. The following screenshot demonstrates what
    the final product will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7f2d14b-7fa9-4d67-9225-9fcd0aa8b14a.png)'
  prefs: []
  type: TYPE_IMG
- en: The HTML structure of the design is built on top of the _S starter theme (you
    can read more about underscores at [https://underscores.me/](https://underscores.me/)),
    and the visual elements are all done through CSS, with only minimal modifications
    to the original HTML structure.
  prefs: []
  type: TYPE_NORMAL
- en: Three paths to theme development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Essentially, there are three paths that you can follow when developing your
    new theme:'
  prefs: []
  type: TYPE_NORMAL
- en: You can either work from the ground up, by building the HTML structure and the
    functional structure of the theme by hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can work on top of an existing theme framework, where you only have to adapt
    your design to work on the structure provided by the framework itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can go for a solution that sits somewhere in between
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these paths have their pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: Building a theme from the ground up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main advantage of building a theme from the ground up is the massive educational
    value you get. When you develop a theme from scratch, you learn the basics of
    theme construction and function. This kind of knowledge will go a long way for
    your future projects in WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it's also the longest of the three paths. In a professional
    production environment (among people designing and developing themes as a profession),
    creating themes from scratch is a highly time-consuming approach, making it quite
    ineffective. And it's not that much about adapting the design (which must always
    be done with theme frameworks as well); it's more about building the core functionality
    of the theme.
  prefs: []
  type: TYPE_NORMAL
- en: Building a theme with a framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main advantages of this approach are its time-efficiency and the quality
    of the final result. For instance, if you're building a theme from scratch, you
    have to make sure to keep your theme up-to-date long after the development process
    has finished. The thing is, WordPress gets updated very frequently (around once
    every 50-90 days), and the purpose of many features changes over time—they might
    even get completely erased or replaced by new ones. In such a scenario, only modern
    themes that are kept up-to-date can take full advantage of these features. Updating
    your theme will obviously take a massive amount of work. This is where theme frameworks
    come into play. In essence, theme frameworks are themes with a very minimalist
    design and no visually-complicated aspects.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of frameworks is to make them the base of any future theme by acting
    as the parent theme. The fact that the framework itself has no design allows every
    creator to introduce almost any design imaginable, while taking full advantage
    of the features and constructions provided by the framework. Now, the strength
    of quality frameworks is that they get updated almost as frequently as WordPress
    plugins. In short, if you're using a framework, you don't have to worry about
    your theme going out of date. Whenever there's an update available, you can simply
    perform it and forget about the whole thing.
  prefs: []
  type: TYPE_NORMAL
- en: This brings me to the main disadvantage of using theme frameworks. Most of the
    time, theme frameworks are big, complex pieces of web software (**Hypertext Preprocessor**,
    or **PHP** scripts). So, if you want to be able to use them effectively, you'll
    have to spend a significant amount of time learning the framework itself. On top
    of this, if you decide to switch to a different framework later down the road,
    you'll have to learn all over again (frameworks are usually very different from
    each other). As you can see, reaping the benefits of using frameworks has its
    price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the popular theme frameworks (both paid and free ones), as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gantry** (free): [http://gantry.org/](http://gantry.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cherry Framework** (free): [http://www.cherryframework.com/](http://www.cherryframework.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid Core** (free): [https://themehybrid.com/hybrid-core](https://themehybrid.com/hybrid-core)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unyson Framework** (free): [http://unyson.io/](http://unyson.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Genesis** (paid): [https://my.studiopress.com/themes/genesis/](https://my.studiopress.com/themes/genesis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some frameworks are listed on the official WordPress website:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://codex.wordpress.org/Theme_Frameworks](https://codex.wordpress.org/Theme_Frameworks)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Building a theme with a starter theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, there's also a third solution, one that's somewhere between building
    a theme from the ground up and using a framework—using a starter theme.
  prefs: []
  type: TYPE_NORMAL
- en: A starter theme, like the one we'll be using in this chapter, is a great solution
    to make sure that the theme you're building has the right scaffolding, it's up
    to date with modern practices, and is optimized to be used for a WordPress site.
    Apart from that, a starter theme leaves you with all of the freedom in the world
    to adjust your creation however you wish (you have almost the same freedom as
    you do with from-the-ground-up theme building).
  prefs: []
  type: TYPE_NORMAL
- en: In other words, a starter theme provides you with the best of both worlds; that
    is, starting from scratch and using a framework. You can learn the basic structure
    of WordPress themes this way, and at the same time, you don't need to worry about
    making any silly mistakes because the core of the task is handled by the starter
    theme itself.
  prefs: []
  type: TYPE_NORMAL
- en: The main idea in the following sections is to learn the craft and get to know
    all of the basic structures and mechanisms sitting inside WordPress. Your journey
    with theme development starts once you have a graphic design prepared in Photoshop,
    or some other similar tool. You can also take the code bundle for this chapter
    and work with the design from there. Either way, the next step is to turn it into
    some HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: Converting your design into code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purpose of this chapter, I assume that you already know how to take
    a graphic website design and turn it into an HTML plus CSS structure. With that,
    we'll cover some pointers on how to do your slicing and dicing as we go through
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get down to business and take a look at the HTML structure that was generated
    (by the _S starter theme) for the purpose of the theme we're building here. Just
    to remind you, the starter theme can be generated at [https://underscores.me/](https://underscores.me/).
  prefs: []
  type: TYPE_NORMAL
- en: Examining the HTML structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the very basic layout of the main HTML file for my food blog
    design; I''m showing it here just to give you a general idea of what we''re going
    to be working with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This HTML structure can be found in the official code bundle for this chapter—called `phase
    1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that I''ve separated out the major parts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The header is in an HTML5 `<header>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As part of it, there's the main site navigation, also in an HTML5 `<nav>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we have the main content block, `<div id="content" class="site-content">;`;
    each individual post will be displayed inside separate HTML5 `<article>` tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this, we have a section that handles the sidebar, `<div id="secondary"
    role="complementary">`. The sidebar is set with the `role="complementary"` attribute.
    Essentially, the role attribute describes the role that the element plays in the
    context of the document. In this case, the sidebar is complementary to the main
    content (and if you pay close attention, you'll notice that the main part, that
    is, the content, is indeed set to `role="main"`). In general, such attributes
    are meant to explain the purpose of elements in the HTML structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, there's the footer, using the `<footer>` tag. Keep in mind that this
    is HTML5, and it may not work on older web browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that I've got my basic layout, I'm going to add a few more HTML elements
    to flesh it out a bit, including more information in `<head>`, as well as in the
    main content box, plus some additional CSS. Then, I'll fill up the sidebar, header,
    content, and footer.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, a very good practice in web development is to start your CSS design
    by resetting all of the default styles used by various web browsers. The main
    issue, and the reason why this is an important step, is that most popular web
    browsers (or, should I say, every single one of them) have their own default set
    of CSS styles. And, if you want your theme to look exactly the same in every browser,
    you have to start your work by resetting those styles, whatever they might actually
    be. The good thing about this is that you don''t have to do it by hand. You can
    just use one of the reset scripts available on the internet. Keep in mind that
    every piece of code that''s listed in this chapter is also available in the official
    code bundle that came with your book. So, what we''ll do first is just have the
    following CSS at the beginning of our new `style.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's now take a look at the actual CSS—the things that build our design and
    not just reset it. First, we'll review the CSS that displays everything you see
    in the design. Note that I have styles for all of the key elements, such as the
    header, sidebar, main content area, and footer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, note that this is just the scaffolding, so to speak; it only indicates
    the individual areas of the final CSS style sheet. Talking about CSS isn''t the
    main thing we''re focusing on in this book. Therefore, I''m including the complete
    version of the aforementioned code bundle, and right now, I''m only presenting
    the individual areas of the CSS. This is just to make the whole thing easier to
    grasp once you look at the complete style sheet. To be honest, the final CSS isn''t
    actually that complex from a CSS design point of view, but it is quite lengthy.
    Here''s the simplified version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the typography settings and various standard content elements.
    I''m not showcasing the individual styles here, as they are kind of basic and
    don''t play a huge role in our WordPress site structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'What follows next is a set of rules that will take care of the alignment, the
    general design structure, the headers, and other typical HTML elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The center part of the site structure is where the posts and pages will be
    displayed. The code for it is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the main sidebar is demonstrated as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the code for the footer is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this style sheet, you will find many specific classes that aren''t just
    my own creations, but instead come from WordPress itself. Here''s what I mean:
    when WordPress creates all of the items, which includes page lists, category lists,
    archive lists, images, and galleries, it gives many of these items a particular
    class name. If you know these class names, you can prepare your style sheet to
    take advantage of them. This is one more reason why we''re using a starter theme
    here. With it, we don''t have to worry about any of this.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, when you add an image to a post or page, WordPress gives you the
    option to have it to the right or left, or at the center of the text. Depending
    on what you choose, WordPress will assign either of these classes to the image: `alignleft`,
    `alignright`, or `aligncenter`. These specific classes are handled in the *Alignments*
    section of our CSS style sheet. Another thing is that, when you add an image with
    a caption, WordPress gives it the `wp-caption` class. This particular thing is
    handled in the *Captions* section of the style sheet. WordPress uses many other
    classes that you can take advantage of when building your style sheet. I've listed
    a few of them in [Chapter 13](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36),* Creating
    a Non-Blog Website Part Two – E-Commerce Websites and Custom Content Elements*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've got your HTML and CSS lined up, you're ready for the next step—turning
    your HTML build into a WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: Converting your build into a theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll be turning your HTML build into a theme, which is composed of a number
    of template files and other scripts. We are going to first dig into the inner
    workings of a theme, so as to get familiar with how it's put together. Then, we'll
    actually turn our HTML build into a theme directory that WordPress can use. Finally,
    we'll include WordPress functions that populate the theme with content. As I mentioned
    in an earlier chapter, doing development for your WordPress website in a local
    environment can make the whole process much smoother. Consider getting a server
    up and running on your home computer using WAMP, MAMP, or some other way to install
    Apache and MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the theme directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step to turning your HTML build into a theme, is to create your theme
    directory and give it everything it needs to be recognized as a theme by WordPress.
    Let''s look at an overview of the steps and then take them one by one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Name your directory and creating backup copies of your build files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preparing the essential files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a screenshot of your theme, named `screenshot.png`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uploading your theme directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activating your theme
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take these steps one by one now.
  prefs: []
  type: TYPE_NORMAL
- en: Naming your directory and creating backup copies of your build files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll want to give your build directory a sensible name. I'm naming my theme **Daily
    Cooking Custom**. I'll name the directory `daily-cooking-custom`. Now, I suggest
    creating backup copies of your HTML and CSS files. As you'll eventually be breaking
    up your build into template files, you could easily lose track of where your code
    came from. By keeping a copy of your original build, you'll be able to go back
    to it for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the essential files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WordPress has only the following two requirements to recognize your directory
    as a theme:'
  prefs: []
  type: TYPE_NORMAL
- en: A file called `index.php`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A file called `style.css`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just rename your main design''s HTML file `index.php`—this takes care of the
    first requirement. To satisfy the second requirement, your style sheet needs to
    have an introductory comment that describes the basic information for the whole
    theme: title, author, and so on. Also, it has to be at the very top of the style
    sheet. I''ve added this comment to my `style.css` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding structure has been created on the basis of the template available
    at [https://codex.wordpress.org/Theme_Development#Theme_Stylesheet](https://codex.wordpress.org/Theme_Development#Theme_Stylesheet).
    Whenever you're creating a new theme, it's always good to check the currently
    recommended template beforehand. When you add this comment section to your style
    sheet, just replace all of the details with those that are relevant to your theme.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a screenshot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember when you first learned how to activate a new theme that there were
    thumbnail versions of the themes in your Appearance tab? You''ll want a thumbnail
    of your own design. It should be a PNG file with the name `screenshot.png`. Just
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Flatten a copy of your design in Photoshop or in a similar tool
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the image width to 1200 px and the height to 900 px
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save it for the web as a PNG-8 file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding requirements (1200 px by 900 px) are the current ones at the time
    of writing. To get the latest guidelines at any point in time, revisit the official
    Codex at [https://codex.wordpress.org/Theme_Development#Screenshot](https://codex.wordpress.org/Theme_Development#Screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: Create a screenshot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name your file `screenshot.png` and save it in your build directory. This is
    all it takes to have the screenshot enabled and allow WordPress to recognize it
    when it loads your theme.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using FTP software, upload your template directory to `wp-content/themes/`
    in your WordPress build. It will share the themes directory with `twentynineteen`,
    and any other theme you''ve added as you installed WordPress. In the following
    screenshot, you can see my `daily-cooking-custom` theme living in the `themes`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a37dcd16-9dc1-4d10-a8f8-c87b00dbf969.png)'
  prefs: []
  type: TYPE_IMG
- en: Activating your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve got the absolute basic necessities in there now, so you can activate
    your theme (although, it won''t look like much yet). Log in to your `wp-admin`,
    and navigate to Appearance. There, you''ll see your theme waiting for you. As
    you can see, I''ve created a nice screenshot for my theme, with the name of the
    theme on it for easier identification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dae8fe0-85b9-4155-962c-3131ae37dc30.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you can activate your new theme and continue working on it to
    include WordPress-generated content and make it into a full-fledged WordPress
    theme in general. Don't be alarmed if the theme doesn't look perfectly right after
    activation, though. There's still some work to do. This is another good reason
    to have a development server. You wouldn't want to have this incomplete theme
    active on a live site while you finish the final pieces in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not every theme installation goes as expected. Sometimes, you have
    to deal with errors. In most cases, WordPress will let you know what went wrong
    with a notification. Every once in a while, however, activation can result in
    a critical error and your whole site could go blank. If that happens, simply rename
    the new theme's directory, or delete it completely. This will force WordPress
    to switch to the default theme, and things should go back to normal. From there,
    you can start looking for the issue that caused the crash in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of final pieces, your theme is now ready to have all of the WordPress
    content added, so let's do just that!
  prefs: []
  type: TYPE_NORMAL
- en: How to create basic WordPress content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, your `index.php` file is your only theme file. We'll be breaking
    it up into template files a bit later. First, we need to include WordPress functions
    that will spit out your content into your theme.
  prefs: []
  type: TYPE_NORMAL
- en: The functions.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In short, the `functions.php` file is meant to set up your theme and provide
    some helper functions and settings to make using the theme easier. Apart from
    this, the functions file also has many other applications that we're not going
    to discuss here, as they are beyond the scope of this book. In essence, `functions.php`
    is a file that allows you to perform a very wide scope of modifications. Even
    though there is a set of standard things that should always be taken care of when
    dealing with a functions file, they don't restrict you from doing virtually anything
    you wish. For instance, you could create a classic PHP function, such as `my_function_name()`,
    and then call it from within one of your template files (such as `index.php`)
    through `<?php my_function_name(); ?>`, but this is just one of the possible scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although this isn''t a requirement, it''s always good to start your functions
    file with the following lines of code (just as a good reference point):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding lines of code provide essential information about the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part is the setup of the default features that the theme is going
    to enable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function, `daily_cooking_custom_setup()`, will be executed at
    just the right time, triggered by the `after_setup_theme` action called at the
    end to set up the basic features of our theme properly. Most of the code is pretty
    self-explanatory, due to the comments, but there''s just one thing I''d like to
    mention individually, which is the following (registering the menu):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a small piece of code that will let us assign any custom menu to appear
    as the primary menu later on. It is also what we'll use to set our new theme.
    In addition, the preceding function allows you to register even more menu areas
    if you wish—and all you'll have to do is add `'secondary' => 'Secondary Menu'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s enable our style sheet CSS file to load with our theme, or more
    accurately, to be *enqueued,* and then load precisely the right moment. Here''s
    how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there's only one style sheet here. It is enabled by the very
    first line in the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code closes our first template-like `functions.php` file. Later,
    we will add new lines to it to make it even more functional. Now, the interesting
    part is that there is no closing PHP tag in the functions file (no `?>`). This
    is not a typo; it is intentional. Since most of the file is pure PHP, we don''t
    need this tag. The complete file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The <head> tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, let''s move on to our `index.php` file and the things we can do inside
    of it. In the following section of the chapter, we''re going to be altering specific
    lines of code from the original HTML structure. Let''s see how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the `<head></head>` section of your HTML file. Let''s start with `charset`
    and the `device-width` parameter. Here are the two lines to begin with right after
    the opening `<head>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first one holds the character set that your blog uses. The other defines
    the width of the `viewport` used. Here, it's set to the width of the device being
    used (this allows everyone to view the site correctly, including desktop computer
    users, iPad users, and Android phone users).
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to add another important chunk of code—first, to put header tags into
    your theme for the pingback URL; second, other miscellaneous WordPress stuff.
    Add the following lines in your `<head>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line right before the closing `</head>` tag (it takes care
    of displaying your site''s title and enabling a number of WordPress-specific functionalities):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the `body_class()` function to the body tag, so it looks like the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Your header now look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The header and footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start adding some content. Here, we'll take care of things such
    as displaying a link to the blog's home page, displaying the blog's title, displaying
    the tagline, and displaying the main navigation. All of these operations are pretty
    simple, so let's just take a look at the lines of code that take care of them.
    Then, we'll put these lines of code in just the right place within our HTML structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have the code that displays the site''s main URL, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the code that displays the site''s title is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code for displaying the tagline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding two lines pull information from where you set the blog name and
    description in `wp-admin`, and you can simply change them from the Settings |
    General page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, displaying the main navigation is done with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `wp_nav_menu()` function is a built-in way of displaying the navigation
    menu. It takes care of the proper HTML structure of the menu and all of its elements.
    In other words, you don't have to worry about anything else other than using this
    one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the part of your HTML that describes the header looks similar to the following
    listing. Additionally, as you can see, we''re linking the logo to the home page,
    which is a standard practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Are you wondering why you should bother with some of this when you could have
    just typed your blog title, URL, and a description of the theme? One reason is
    that if you ever want to change your blog's title, you can simply do it in one
    quick step in `wp-admin` and it will change all over your site. The other reason
    is that if you want to sharing your theme with others, you'll need to give them
    the ability to easily change the name through their own `wp-admin` panels. Keep
    in mind that anything (anything at all) that will change from site to site based
    on the site's purpose and content should not be hardcoded into the theme, but
    should be dynamically generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when I refresh the site, there''s the actual blog title in the header,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9777522-e578-4a96-bcbb-20e96a335f51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The two links visible in the header are live links from one of my custom menus.
    Just to tie things up, I''m going to add some code to my footer to display the
    "proudly powered by WordPress" message, and to include the `wp_footer()` function/hook
    that''s often used by many plugins in one way or another, so every theme should
    feature it. The code for my footer section now looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: One thing you might have noticed inside the previous listing is the mysterious
    `__()` function. It's a native WordPress function that retrieves the translated
    string corresponding to the parameters given in the function. It's a feature meant
    for the internationalization of your site. More details about the function can
    be found at [https://codex.wordpress.org/Function_Reference/_2](https://codex.wordpress.org/Function_Reference/_2).
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can move along to adding WordPress-generated content in the sidebar.
    Essentially, this part of our work is pretty simple. All we have to do is include
    some WordPress functions that will handle displaying various bits of dynamic content.
    In this case, it is the categories, tags, and archives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting at the top, include the following piece of code in the sidebar area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This code takes care of displaying whatever widgets have been assigned to that
    particular widget area. Placing widgets in the sidebar of your HTML structure
    is the easiest, and probably the most usable way, of widget-enabling your theme.
    Also, WordPress will take care of actually displaying everything properly, so
    you don't have to worry about any weird-looking elements on your site. For instance,
    every menu is displayed as a `<ul>` list, and every menu element is inside `<li>`.
    This is as in tune with the standards as it can be.
  prefs: []
  type: TYPE_NORMAL
- en: Main column – the loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most important section of our WordPress code. It''s called the
    loop, and it''s an essential part of your new theme. The loop''s job is to display
    your posts in reverse chronological order, choosing only those posts that are
    appropriate. You need to put all of your other post tags inside the loop. The
    basic loop text, which has to surround your post information, is displayed using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `get_template_part()` function call that's right in the middle, fetches
    another file that contains the rest of the loop; but for now, let's just focus
    on the main section here.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two basic parts of the loop, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Individual post information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to do if there are no appropriate posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first part is handled by a standard PHP `while` loop that goes through every
    post and, for each element, calls the appropriate `content-[TYPE].php` file. The
    second part is similar, as it calls the `content-none.php` file if there are no
    posts that can be displayed. The use of these various `content-[TYPE].php` files
    is currently the standard for handling the different types of content that WordPress
    displays. It's a lot more effective and clear than working with the individual
    `if` or `switch` clauses.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in order to get started with this, let''s create a basic `content.php`
    file that will serve the role of a placeholder for the default type of content.
    In this file, let''s place the following code, which handles the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you take a closer look, you'll notice that it's very similar to the static
    HTML version I shared earlier in this chapter. The only difference is that, instead
    of the dummy text, there are calls to specific WordPress functions and custom-made
    functions that we'll discuss shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take it from the top; the file starts with these two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is just some standard HTML and basic WordPress function calls to display
    proper element IDs and CSS classes. For instance, the `the_ID()` function displays
    the ID of the post. Next, we have the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This displays the link and the title of the current content element (which
    is usually a post), instead of using the dummy text. The `the_title()` function
    takes three parameters (which are all optional). Right here, we''re using just
    two. The first one defines the text to place before the title (in this case, we''re
    making a `sprintf()` function call), and the second one defines the text to place
    after the title. The following is a piece of code that displays various types
    of meta information about the current content element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If what we''re dealing with is a standard post, a custom function is called
    to display the details. This way of handling things—through an additional function—makes
    everything much clearer in comparison to placing the code right there. Here''s
    what the function looks like (we can place it in our main `functions.php` file,
    or inside a new file in a separate sub-directory called `inc`, indicating that
    it holds additional functions; in our case, this function definition can be found
    in `inc\template-tags.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is quite a long function, but the thing to remember is
    that it's just meant to display the date of when the post was published and the
    byline of the author. Also, there are language functions (`_e()` and `_x()`) used
    here to fetch translated data from the database. You can learn more about these
    functions at [https://codex.wordpress.org/Function_Reference/_e](https://codex.wordpress.org/Function_Reference/_e)
    and [https://codex.wordpress.org/Function_Reference/_x](https://codex.wordpress.org/Function_Reference/_x).
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to our `content.php` file, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The first part (`the_content()`) takes care of displaying the contents of the
    current post, along with a `Continue reading` link. This is actually the most
    important part of the whole file. Next, the second part (`wp_link_pages()`), is
    meant to display page links for paginated posts (WordPress allows you to divide
    your content into individual subpages; this can be useful when dealing with an
    overly long piece of text). Finally, we have the code for the footer section of
    the entry, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s another call to a custom-made function there. Here''s what the function
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'All this code handles the post details, such as the categories, tags, and the
    comment links (which other visitors can click to submit their opinions about the
    post). One interesting thing I''d like to point out here is the call to the `comments_popup_link()`
    function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that there are three arguments passed, separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one tells WordPress the text that it has to display when there are
    no comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one tells WordPress the text that it has to display when there is
    just one comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one tells WordPress the text that it has to display in case there's
    more than one comment. The percent symbol (`%`) gets replaced with the actual
    number of existing comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is it regarding a basic understanding of the loop. Of course, its structure
    allows you to do many more things and include many custom features. However, for
    now, we are good with what we have here. Once you save your `index.php` and reload
    your website, you will see your new theme in action.
  prefs: []
  type: TYPE_NORMAL
- en: This version of the `index.php` file is available in the code bundle for this
    chapter, inside a sub-directory called `phase 2`. Our theme files will go through
    a couple of phases before we have the final version.
  prefs: []
  type: TYPE_NORMAL
- en: Later in the chapter, I will show you how to create a custom page template,
    which will take advantage of the loop and use it for a slightly different purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Creating template files within your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've now got a functional, basic template for your theme. It works great on
    the main blog page and successfully loads content for anything you can click on
    within your site. However, we want slightly different templates for other types
    of content on our site. For example, a single post page needs to have a comment
    form where visitors can post comments; the page doesn't need to show the date,
    category, or tags; and the category page should show the category name.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can create other templates, we need to break up the main `index.php`
    file into parts so that these different templates can share the common elements.
    I've mentioned the importance of the header, sidebar, and footer many times. We're
    going to break them up now. First, let's take a quick look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WordPress theme structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, WordPress themes are composed of a number of template files. This allows
    the different parts of the site (such as the frontend, blog archive, pages, single
    posts, and search results) to have different purposes. Breaking the `index.php`
    file into template files allows us to not only share some common parts of the
    design, but also to have different code in different parts. As I mentioned earlier,
    we'll soon be breaking up the four main pieces of the design (the header, sidebar,
    main column, and footer) so that WordPress can make good use of them. While the
    header and footer are probably shared by all pages, the content in the main column
    will be different. Also, you may want the sidebar on some pages, but not on others.
    We'll first create these template files, and then move on to the other, more optional
    template files.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to break up the `index.php` file by removing some of the code
    into three new files, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`header.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sidebar.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The header.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will create a header file. You can do so with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cut out the entire top of your `index.php` file. This means cutting the `doctype`
    declaration, the `<head>` tag, any miscellaneous opening tags, and the `<header>`
    tag. In my case, I''m cutting out all the way from this initial line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m cutting through to, and including, these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Paste all these lines into a new file named `header.php`, which you created
    within your theme directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, at the very top of the `index.php` file (that is, where you just cut the
    header text from), type in the following line of WordPress PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This is a WordPress function that includes the `header.php` file you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you save everything and reload your website now, nothing should change. The
    important part here is to make sure that the call to the preceding PHP function
    sits right at the very top of your `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: The footer.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create the footer file. You can do so in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cut out everything at the very bottom of the `index.php` file from the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Cut all the way through to the `</html>` tag. Paste the text you just cut into
    a new `footer.php` file. Save it in your theme directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, at the very bottom of the `index.php` file (from where you just cut the
    footer text), type in the following line of WordPress PHP code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is a special WordPress function that includes the `footer.php` file you
    just created. Again, you should save everything and reload your website to make
    sure nothing changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sidebar.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is just one more essential template file to create. For this one, carry
    out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cut out the entire `div` element containing your sidebar. In my case, it''s
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Paste this line into a new file in your theme directory and save it as `sidebar.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in `index.php`, add this function call in place of the lines you''ve just
    cut, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This will include the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Your four template files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You now have four template files in your theme directory, namely, `header.php`,
    `footer.php`, `sidebar.php`, and the now much shorter `index.php`. By the way,
    my `index.php` file now has only a handful of WordPress functions and the main
    loop. The following code shows the entire file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This whole cutting-and-pasting process to create these four files was just to
    set the scene for the real goal of making alternative template files.
  prefs: []
  type: TYPE_NORMAL
- en: This version of the `index.php` file, as well as `header.php`, `footer.php`,
    and `sidebar.php`, is available in the code bundle for this chapter, inside a
    sub-directory called `phase 3`.
  prefs: []
  type: TYPE_NORMAL
- en: Archive template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is now using the `index.php` template file to display every type of
    web page that's a part of your site. Let's make a new file—one that will be used
    when viewing the monthly archive, category archive, and tag archive.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how WordPress utilizes different files to display content,
    feel free to read the guide at [https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/).
  prefs: []
  type: TYPE_NORMAL
- en: To create your archive template, make a copy of `index.php` and rename it `archive.php`.
    Now, navigate to see your monthly archive on the site by clicking on either of
    the months in the sidebar. At this point, the page you'll see should look exactly
    like the main listing—the one handled by `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make one change to the archive template. I''d like it to display a message
    that lets users know what type of archive page they are on. Currently, the archive
    looks the same as the main index listing, and this isn''t the most optimized situation.
    To fix this, just add the following code the `<?php if (have_posts()) : ?>` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If I go to see my monthly archive now—or the category/tag archive—I''ll get
    a new heading at the top of the page that lets me know where I am, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24cb14a0-5569-4b26-baf6-b083686c917d.png)'
  prefs: []
  type: TYPE_IMG
- en: This version of the `archive.php` file is available in the code bundle for this
    chapter, inside a sub-directory called `phase 4`.
  prefs: []
  type: TYPE_NORMAL
- en: Single template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next template we need to create is the single post view. Right now, the
    single post looks like the site's front page (because it's using `index.php`)—except
    it populates the page with the contents of just one post.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, make another copy of `index.php`, and name it `single.php`.
    This is the template that WordPress will look for when serving a single post.
    If it doesn't find `single.php`, it'll use `index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without further delay, here''s my `single.php` file. You should notice that
    the file features almost exactly the same elements as `index.php`. The only difference
    is that the `get_template_part()` function call fetches a different element. In
    this case, it''s `single`, as demonstrated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The aforementioned `get_template_part(''content'', ''single'')` call will fetch
    the `content-single.php` file. Here''s what the file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This file''s structure is almost exactly the same as the one we discussed a
    couple of pages ago—`content.php`. The following are three specific things that
    are worth pointing out:'
  prefs: []
  type: TYPE_NORMAL
- en: The presence of the `<article>` tag. The individual post's content is displayed
    inside this tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The call to the `the_content()` function. This time, we're displaying the whole
    content of the post, not just an excerpt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The call to the `comments_template()` function in `single.php`. This displays
    the comment form and the individual comments that have been submitted for this
    post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These versions of the `single.php` file and the `content-single.php` file are
    available in the code bundle for this chapter, inside a sub-directory called `phase
    4`.
  prefs: []
  type: TYPE_NORMAL
- en: Page template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last template we''re going to create is for the static page view. On my
    food blog site, this would be the sample page, for example. The easiest way to
    go about this is to start with the `single.php` file this time. So, just make
    a copy of that file and rename it `page.php`. Now, we''ll be simplifying the file,
    so that only the essential information about a given page is displayed. In the
    end, my `page.php` file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'I made just a few modifications here. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: I changed the last parameter of the `get_template_part()` function to `page`,
    instead of `single`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I erased the call to `daily_cooking_custom_post_nav()`, which handled the display
    of post navigation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I erased the whole block of code that handled the comments. We don't need those
    on pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we need a custom `content-page.php` file. The easiest way to build this
    is to make a copy of the `content-single.php` file and tune it up a bit. Here''s
    my final `content-page.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what I did here in terms of simplifying the file:'
  prefs: []
  type: TYPE_NORMAL
- en: I got rid of the whole code displaying metadata.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I erased the entry footer, which was meant to display categories and tags. We
    don't use those with WordPress pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, my sample page looks much cleaner, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d99e600-35b0-42f8-bec7-a006f61ad875.png)'
  prefs: []
  type: TYPE_IMG
- en: These versions of the `page.php` file and the `content-page.php` file are available
    in the code bundle for this chapter, inside a sub-directory called `phase 4`.
  prefs: []
  type: TYPE_NORMAL
- en: Generated classes for body and post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you''re modifying your theme to accommodate different types of pages, you
    should also know about the CSS classes that WordPress will put into your theme.
    If you look carefully at the code we''ve been using, you''ll see these two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`body_class()`: For example, in the `header.php` file, the exact line is `<body
    <?php body_class(); ?>>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_class()`: For example, in the `content-page.php` file, the exact line
    is `<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `body_class()` function adds a whole bunch of classes to the body tag,
    depending on the page you''re viewing. For example, the main page of my site has
    the following classes in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'My Some Spanish Dishes single post page''s body tag looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If I wanted to style anything differently on any of my pages, I could do it
    largely via CSS, without having to create another template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `post_class()` function does something similar with the individual post''s
    `div`, giving it different classes depending on the characteristics of the post
    itself. For example, my Some Spanish Dishes post''s tag has the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Further more, my sample page post tag has the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Using these classes in my style sheet, I could style each post differently depending
    on its category, tag, post type, and so on. Keep this in mind as you design your
    theme. This becomes extremely important when working with theme frameworks further
    down the road. Although modifications inside PHP files are allowed, most of the
    time, you can customize the design of your whole site just by working in the CSS
    and tweaking various classes (both the native ones in WordPress and the new ones
    that the framework uses). Situations where a whole new site working on a theme
    framework gets built purely in CSS files are not uncommon.
  prefs: []
  type: TYPE_NORMAL
- en: Other WordPress templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to `archive.php`, `single.php`, and `page.php`, there are a number
    of other standard template files that WordPress looks for before using `index.php`
    for particular views. We're not going to create these files here, but you should
    feel free to experiment on your own WordPress installation. To learn about the
    complete file hierarchy for WordPress themes, feel free to visit [https://www.codeinwp.com/blog/wordpress-theme-heirarchy/](https://www.codeinwp.com/blog/wordpress-theme-heirarchy/).
    There's a great graph there that presents the hierarchy visually. It's very easy
    to follow and does a much better job at explaining this than I would do here with
    word alone. In addition, when you browse the official code bundle for this chapter,
    you'll see that many additional files have been created and are actually available
    inside the bundle. We cover them here, however, as it would probably be too much
    information at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs: []
  type: TYPE_NORMAL
- en: You can also find a detailed flowchart of the template hierarchy at [https://developer.wordpress.org/themes/basics/template-hierarchy/](https://developer.wordpress.org/themes/basics/template-hierarchy/).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we've experimented with the uses of quite a number of WordPress
    template tags. In [Chapter 13](cb875420-c9d1-48bd-a9a9-b5fc2eb3a91d.xhtml), *Creating
    a Non-Blog Website Part Two – E-Commerce Websites and Custom Content Elements,*
    I list more of the most useful template tags.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll explore making custom templates for pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a custom page template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress allows you to create custom templates. These can only be used for
    pages (not for posts). A custom template allows you to display content differently
    and to easily use built-in WordPress functions within a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to give you a good example of what custom page templates are and how they
    can benefit your site (no matter what theme you''re using), let''s create a custom
    version of the archives template. This is also what we will use to create a custom
    archives page that should be much more useful to our readers than the standard
    one. The following screenshot shows what the ARCHIVES page looks like on my blog
    right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c257d843-3c06-4815-b1f7-4fbb4055e83c.png)'
  prefs: []
  type: TYPE_IMG
- en: There are just a couple of small links in the sidebar that redirect visitors
    to a standard monthly archive. Of course, later on, when there are more posts
    on your site, there will be many more links shown (exactly one link for each month
    of your site's existence).
  prefs: []
  type: TYPE_NORMAL
- en: Now, as far as the idea of *archives* goes, I have to admit, somewhat reluctantly,
    that WordPress has never been good at this. One of the few problems with the platform
    as a web publishing solution is the fact that posts usually have very short life
    spans. Whenever you publish a post, it sits on the front page for a while, and
    then it vanishes in the archives, never to be seen again, irrespective of whether
    it's still relevant or not. In the end, it's really hard for a new visitor to
    find these old posts on your site.
  prefs: []
  type: TYPE_NORMAL
- en: One of the few chances you have of reviving those old posts is mastering the
    art of SEO, and driving some new traffic to your old posts through your SEO efforts
    alone (this the most popular solution). But luckily, it's not the only way to
    fix this issue. Again, custom page templates are an interesting remedy here.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see that the default version of the archives
    is just a sidebar widget with some links to individual months. The problem with
    such content organization is that it provides a rather bad user experience. Archives,
    in general, are not about listing everything in one place; they are about providing
    a hub where the visitor can go and find a specific piece of content. For example,
    think about how archives work in your local library. This is what you want to
    eventually have on your site as well. So, what we're going to do here is say *no*
    to the traditional archives template in WordPress and create a custom page template
    to handle archives manually. Then, we're going to link to this archive from one
    of the menus. Here's how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On our new archives page, we want to achieve the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Display a piece of custom text**: For instance, as a form of introduction
    or a notification message explaining what''s in the archives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display a categories archive**: This is a list of all of the categories in
    use on the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display a tag cloud**: This is a form of tag archive where all of the tags
    in use on the site are displayed one after the other (inline, not in a list format),
    and the font size increases for the tags that have been used more often than others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a list of the 15 latest posts, or whatever other number you wish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display a monthly archives block**: The fact that it''s displayed at the
    bottom is not accidental, as this block is not particularly useful for a typical
    visitor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this, we need to create a template. The following demonstrates the steps
    that we''ll take:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the template file. Make a copy of `page.php` and give it a new name.
    I like to prepend all of my custom template files with `tmpl_`, so that they are
    sorted separately from all of the WordPress template files that I will create.
    I''ll name this file `tmpl_archives.php`. In order for WordPress to be able to
    identify this file as a template file, we need to add a specially styled comment
    to the top of the page (just as we did with `style.css`). The comment needs to
    be formatted as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In the `wp-admin` panel, the template will be identified by this template name,
    so make sure the name signals to you what the template is used for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add WordPress functions. This is a crucial part of the process, but thankfully
    not a complicated one at this stage. Look over your new template file and find
    the occurrence of this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, erase it and put the following code in its place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result we''re after; the middle part of your `tmpl_archives.php`
    file should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a completely new file called `content-tmpl_archives.php` and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The code includes some additional functionality for our new archives template.
    In fact, because we are creating a custom template, we can add any of the WordPress
    functions we discovered earlier in the chapter, as well as any other WordPress
    function in existence (see [Chapter 13](https://cdp.packtpub.com/wordpress_complete___7th_edition/wp-admin/post.php?post=32&action=edit#post_36),
    *Creating a Non-Blog Website Part Two – E-Commerce Websites and Custom Content
    Elements*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the more interesting parts of the code, starting with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: It's about adding a complete list of categories that are present on the site.
    The `div` elements are responsible for displaying this block on the left-hand
    side and allowing the next block, tags, to be placed next to it (it's a more effective
    way of achieving such an effect than using HTML tables, because it's a more cross-device-friendly
    approach).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part of the code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: It has a very similar purpose, only this time we're displaying the aforementioned
    tag cloud. The last `div` element visible here is meant to clear the `float` parameter
    used in the previous `div` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have the part responsible for displaying the latest posts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Currently, the code displays the 15 latest posts, but this can be adjusted if
    you just change the value of the `$how_many_last_posts` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there''s the block that displays a traditional monthly archive, where
    every month is represented as a standard link, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you can save the file and proceed to the next step, which is
    to apply the template to a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave your HTML editor and log into your `wp-admin`. You need to create the
    page in which you want to use this template. In my case, I''ll name my new page Archives,
    to make its purpose clear. While working on the page, switch to the Document tab
    and scroll down to the Page Attributes section. This is where you''ll find the
    Template setting, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1630a45b-819b-4028-af15-df93effc6ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change it from Default template to Blog Archives Custom and save the draft
    or publish it right away. Now, in order to see the page somewhere, you have to
    add it to one of the menus. We already covered menus in [Chapter 4](74cf5381-e680-4dc0-8de9-7d95b3e08b69.xhtml),
    *Pages, Media, and Importing/Exporting Content,* so I''m sure you can get it done
    quickly. Once you have this handled, you can return to the frontend of your website
    and click on the Archives page. However, because your site is not that content-heavy
    at this point, you won''t get a staggering effect, but there''ll still be a nice
    presentation of the most recent posts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71f33c13-eda0-4d27-8bb1-896c3ae9a42b.png)'
  prefs: []
  type: TYPE_IMG
- en: There is no limit to the number of custom templates that you can make for your
    WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: These versions of the `tmpl_archives.php` file and the `content-tmpl_archives.php`
    file are available in the code bundle for this chapter, inside a sub-directory
    called `phase 5`.
  prefs: []
  type: TYPE_NORMAL
- en: Making your theme widget-friendly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to be able to use widgets in your theme, you will need to make your
    theme widget-friendly (also known as *widgetizing* your theme). Widgetizing is
    actually pretty easy, and to be honest with you, we already took care of that
    when constructing our sidebar. Let's now go back to this and explain how widgetizing
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to our sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in the old days, it was very common for a WordPress site to use statically
    placed content blocks in the sidebar. In other words, the only way to place dynamic
    content in the sidebar of our sites was to use handmade code that would fetch
    whatever data we wanted and then display it. This solution wasn't very usable
    for everyday users who might not be familiar with the PHP source code. A better
    solution needed to be found. Hence, widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Widgets give us the ability to set the sidebars in a way so that they fetch
    the data that's been set in Appearance | Widgets. Therefore, the only thing the
    user has to do is go to Appearance | Widgets and pick whatever content they want
    to feature in the sidebar (or any other widget area for that matter; it could
    be in the footer as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to give you an example of old versus new, here''s what a standard piece
    of code might look like that handles displaying blog archives the old way (this
    can be placed in `sidebar.php`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this code is not customizable in any way, so a much better solution
    to display the archives is to use the code that we already have in our `sidebar.php`,
    which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Then, just assign a new Archives widget to this sidebar in the Appearance |
    Widgets section of `wp-admin`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the functions.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s examine how all this actually works. As I said earlier, the `functions.php`
    file can contain many different elements, so now, it''s about time to focus on
    how to enable dynamic sidebars, also known as widgets. In the `functions.php`
    file, we can place the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In this code, I'm using one new function to register a new widget area. As you
    can see, the widget area is simply called `Sidebar` (the `name` parameter).
  prefs: []
  type: TYPE_NORMAL
- en: Now, the final `add_action('widgets_init', 'daily_cooking_custom_widgets_init')`
  prefs: []
  type: TYPE_NORMAL
- en: function call is what actually registers the widget areas (it's the most important
    line of code here; it lets WordPress know when to enable the widget areas).
  prefs: []
  type: TYPE_NORMAL
- en: Adding some widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, your theme is ready for widgets! You can now go to `wp-admin`,
    navigate to Appearance | Widgets, and add widgets. For example, as you can see
    in the following screenshot, I''ve added four widgets to one of the widget areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d5ada78-3cf6-41ae-b5c4-5f6578cb4a18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Be sure to click on Save, and then return to your website and reload the page.
    The default items you placed in the sidebar will have been replaced with widgets,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8d45347-2c65-42cd-bde3-19c0f68445bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Additional widgetizing options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What we''ve just covered is the simplest way to widgetize a theme. There are
    actually a lot of other possibilities that you could utilize when adding the code
    to your `sidebar.php` and `functions.php` files. For example, there are options
    that allow you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Widgetize more than one sidebar, giving each a name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widgetize a part of your sidebar, but leave in some default items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Widgetize the footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the search form widget, and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning more
  prefs: []
  type: TYPE_NORMAL
- en: To learn about the variety of options available and how to take advantage of
    them, take a look at the following resource in the Codex: [https://codex.wordpress.org/Widgetizing_Themes](https://codex.wordpress.org/Widgetizing_Themes).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a menu in your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The good news I have for you right now is that menus are already enabled in
    the structure of the theme we''re creating here. Because we used the `wp_nav_menu()`
    function in the header of the site (in the `header.php` file), if the user creates
    a menu in Appearance | Menus, and then assigns it to the area indicated as Primary
    Menu, it will show up on the site, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b923da6f-c552-473c-9023-affdcd54be58.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to have more than one navigation menu in your theme, you can register
    multiple navigation menu locations, let the user create multiple menus, and choose
    which menu goes in which location. To learn more about this, check out the Codex
    at [https://codex.wordpress.org/Navigation_Menus](https://codex.wordpress.org/Navigation_Menus).
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs: []
  type: TYPE_NORMAL
- en: 'The `wp_nav_menu()` function is quite powerful, and can take a number of parameters
    that will let you control the classes and IDs, the name of the menu, and more.
    Take a look here: [https://developer.wordpress.org/reference/functions/wp_nav_menu/](https://developer.wordpress.org/reference/functions/wp_nav_menu/).'
  prefs: []
  type: TYPE_NORMAL
- en: Making your theme editable in the WordPress Customizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress Customizer is a relatively recent addition to the WordPress ecosystem.
    In short, it's a framework meant for live-previewing any changes that the user
    makes to their website. The Customizer's interface allows for the modification
    of various aspects of a theme's and website's appearance, starting from the name
    of the site, the tagline, all the way to the colors used, layouts, widgets, menus,
    and more. We talked about the Customizer from the user's point of view back in
    [Chapter 8](7ecd502d-b30d-40d9-8b58-623323b644e5.xhtml), *Customizing Your Website
    Appearance/Design*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, from a developer's perspective, when you're building your WordPress theme,
    there are a couple of things that you should do in order to make it compatible
    with the Customizer. Luckily, the starter theme that we're using in this chapter
    as the foundation of our theme, the _S theme, already comes with some basic Customizer
    integrations. Let's go over them one by one, and at the same time, see how we
    can expand our theme's functionality further.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at the following line of code. It should be placed at the
    end of your `functions.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This definition simply includes an additional file that takes care of the Customizer
    integration itself. Even though we could do everything right in the `functions.php`
    file, having the Customizer handled in a separate file makes for a theme structure
    that's easier to grasp.
  prefs: []
  type: TYPE_NORMAL
- en: That new `customizer.php` file is where we're going to add all of our new code.
    The core of the Customizer integration is done via the `customize_register` hook.
    It allows us to define new Customizer panels, sections (the main elements of navigation
    within the Customizer), settings (the data that our theme can accept), and controls
    (the visual UI elements that allow us to tweak our settings).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to register all of our new Customizer elements, we can use the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Within this function is where creating new sections, settings, and controls
    is done. However, as you'll notice, we already have this function in the `customizer.php`
    file created. This is, again, a result of building our theme on top of the _S
    starter theme. We've opted for this approach since it allows us to get started
    with theme development a lot quicker than building things from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our current `daily_cooking_custom_customize_register()` function already features
    the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This code capitalizes on some Customizer abilities that are available for WordPress
    themes by default. Namely, those two enable us to modify the title and blog description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to add something new to the Customizer. Firstly, adding a new
    section is very simple. Let''s start by including the following function call
    inside our main `daily_cooking_custom_customize_register()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The function can take two arguments—the first one is the identifier for your
    new section, and the other is an array of additional options. Here''s what we''re
    going to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a new section titled `Menu Bar Colors` and identified by `menu_bar_colors`.
    Now, let''s add a new setting. Settings provide a way to communicate with WordPress
    and let it know that we''re using a value that the user can modify. New settings
    can be added via the `$wp_customize->add_setting()` function call. We can handle
    this as follows (as you can see, I''m adding not one, but two new *settings*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the settings are in place, the last elements of the puzzle are some new
    controls. Controls tie the two together; they let WordPress know which sections
    work with which settings. This is done via the `$wp_customize->add_control()`
    function call, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, each of our settings gets its own *control*. At this stage,
    when you save the file and go to the Customizer from the WordPress dashboard (Appearance
    | Customize), you''ll see the new section in the sidebar. Inside it, you''ll also
    see that the elements are all operational. Although, they don''t have much impact
    on the appearance of the theme yet. We''ll handle that next. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08670f13-dc7a-4f9c-969d-84d4f3332e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing we need to do now is alter the CSS of the theme based on what
    the user has set in the Customizer. To make that happen, let''s add the following
    code at the end of the `customizer.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'This new function hooks up to `wp_head` and alters the CSS of the website.
    The most important instructions in it are those three inline PHP echo blocks.
    Here''s one of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `get_theme_mod()` function allows you to grab the current theme''s settings
    and indicate the name of the specific setting that you need in the first parameter
    (the second one is the default value). When you save your file now, the new color
    selection options should be fully enabled. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38eec357-eccc-489d-8b97-b8c45e15ac00.png)'
  prefs: []
  type: TYPE_IMG
- en: We have only scratched the surface here in terms of what's possible in the Customizer,
    but it's still given you a good overview, and has also proven that the Customizer
    is actually a very developer-friendly environment to work in. Always try putting
    as many of your theme's settings as possible in the Customizer module; the end
    user will thank you for it!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about how to work with the Customizer and uncover
    some of its other features (such as working with JS files for dynamic live previews,
    for example), then don''t hesitate to visit either of these resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://codex.wordpress.org/Theme_Customization_API](https://codex.wordpress.org/Theme_Customization_API)
    and [https://developer.wordpress.org/themes/customize-api/](https://developer.wordpress.org/themes/customize-api/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a child theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've found an existing theme or theme framework that you like, and you
    just want to adjust it a bit to fit your requirements perfectly, you can create
    a child theme on top of it. A child theme uses a parent theme as a starting point
    and, without changing the theme itself, alters just the bits you *want to* alter.
  prefs: []
  type: TYPE_NORMAL
- en: As a matter of fact, using child themes is the recommended way of making modifications
    to any theme. The rule of thumb is simple—if you want to change anything at all
    about a stock theme (either inside the source code, graphics, or template files),
    do it through a new child theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'In plain English, a child theme inherits the functionality and features of
    the parent theme. The biggest value of creating child themes is that you can introduce
    any bells and whistles you wish without altering the structure of the parent theme.
    I know that this sounds like some additional work, because if you just want to
    change a couple of lines of code, then it''s always going to be quicker to do
    it directly within the theme. However, taking the longer *child theme* route has
    its benefits, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main benefit is that if you were to modify the original theme directly,
    all your modifications would vanish the minute you updated the theme. However,
    if you''re using child themes, you can take full advantage of any updates that
    the original theme''s authors release. Let me say this again: preserving your
    modifications after performing a theme update is impossible unless you''re using
    a child theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have a very clear view of the modifications that you've introduced into
    your theme. Basically, every new thing that you implement through a child theme
    has to be placed in a new file, so even when you come back to review your child
    theme after a while, you can still easily identify every piece of your work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final benefit—actually, there's probably a lot more of them—is that it's
    very easy to revert any modification you've introduced through a child theme.
    In short, if something is causing any serious problems and you have to fix your
    site quickly, then you can simply delete the files responsible. If you were modifying
    your original theme directly, going through every file individually would surely
    take more time and would make any sort of quick recovery very difficult to achieve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a quick look at how to make a child theme.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new theme directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just to make things easier to understand here, we'll take the theme that we've
    been creating in this chapter and build a child theme for it. The starting point
    is really simple. Create a new directory in `wp-content/themes/` and name it `daily-cooking-child`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the style sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only file you need to start with in this directory is the style sheet (`style.css`).
    The style sheet needs the usual header, plus a new line, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The key line in this preceding code is `Template: daily-cooking-custom`. This
    instructs WordPress that your new theme is a child theme of `daily-cooking-custom`.
    Just to emphasize, that one line is really crucial. Then, to make your child theme
    start out with the CSS from the parent theme, add the following code after the
    comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: If you don't use the preceding line, your child theme will begin its existence
    on a blank style sheet. In most cases, this is not a desirable scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Using your child theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That''s it! Your new theme now shows up on the Appearance page, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efb7276e-ba70-4e9e-bf9e-f9fe53faf1e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Granted, the theme is not really useful at this point, but it does exist and
    you can use it as the base for further modifications. By default, it will use
    all of the main theme's styles, template files, functions, and everything else.
    If you activate it, it will present your site as if you were using your main theme.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change anything, do so in your child theme's directory. You will
    override the main theme's original template file if you create a new template
    file (for example, `single.php`, `index.php`, and `archive.php`). The `functions.php`
    file works a little differently, however. If you create a new `functions.php`
    file, it will be executed in addition to the main theme's original `functions.php`
    file. In fact, your new file will be loaded first, right before the original one.
    If you want to override a specific function in the original `functions.php` file,
    just create a function with the same name. You can also create completely new
    functions that are not present in the parent theme.
  prefs: []
  type: TYPE_NORMAL
- en: Like I said, every other template file you create inside the child theme (such
    as, `page.php` and `single.php`) will override its namesake, so it's the perfect
    method to include a new, slightly different design or some new features. Apart
    from replacing the existing template files, you can add new ones that are not
    present in the parent (including custom page templates).
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the whole topic of child themes is quite an easy one to grasp once
    you spend a little time trying out different things, and checking how your site
    reacts to the elements you include in the child theme.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress Codex has a page devoted to learning about child themes, at [https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes).
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to turn your template into a package that other people can use,
    you just have to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have the rights to redistribute images, icons, photos, and so
    on, that you've included in your theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all unnecessary files from your theme's directory. Be sure you don't
    have backup versions or old copies of any of your files. If you do delete any
    file, be sure to test your theme to ensure you didn't accidentally delete something
    important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the comment at the top of the `style.css` file is complete and accurate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Readme.txt` file. This is a good place to let future users know which
    version of WordPress your theme is compatible with, and whether it has any special
    features or requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zip the directory and post your theme's ZIP file on your own website for people
    to download, or submit it directly to the WordPress Theme Directory at [https://wordpress.org/themes/](https://wordpress.org/themes/).
    Keep in mind, though, that the review process there tends to take a while. So
    be ready for a 3-6 month wait before you see your theme online.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even though the preceding looks like a standard step-by-step process, it's actually
    nothing like it. To be honest, your theme has to be a really high quality one
    if it's to be allowed into the directory. Every theme undergoes a human review,
    which often results in themes not passing. In that case, you just have to make
    the requested changes, resubmit your work, and keep trying until you get in.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there's also the issue of licensing. By default, WordPress is available
    under the **GNU General Public License** (**GPL**). In plain English, this means
    that WordPress (the platform) is free, and every derivative work that is built
    on top of it has to be filed under GPL too—this includes themes. In short, every
    piece of PHP code you find inside WordPress, various themes, or plugins is GPL
    (that includes premium themes and plugins). When it comes to artwork and CSS,
    GPL might not apply. If you want to learn more about the GPL licensing, it's best
    if you go straight to the official documentation at [https://wordpress.org/news/2009/07/themes-are-gpl-too/](https://wordpress.org/news/2009/07/themes-are-gpl-too/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, apart from the official directory, you can share your theme through other
    channels. First of all, you have to decide whether you want your theme to be available
    for free or not. In the case of the former, you can reach out to some popular
    blogs about WordPress and WordPress design, and simply let them know that you
    have a theme that you'd like to share. Most of the time (if the theme looks attractive),
    they will have no problem notifying their community that there's a cool new free
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make your theme a premium one, you can go to ThemeForest ([https://themeforest.net/](https://themeforest.net/))
    and try submitting it there. The only challenge is that your theme must really
    be a high quality one.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not forcing you to share your theme with the community right away, but once
    you build some expertise and build your themes to be really cool and useful, you
    really should reach out to people and share your work. Finally, if you're interested
    in making an impact  in the community, consider launching a website dedicated
    to it. This website would be a place where you could publish a demo version, deliver
    some documentation, and provide support forums and other things to deliver a great
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: The final versions of all of the theme files (including the child theme) are
    available in the code bundle for this chapter, inside a sub-directory called `final`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now crossed to the other side of the WordPress themes world—you have
    learned how to make your own theme. With just basic HTML and CSS code, you can
    create a design and turn it into a fully functional WordPress theme.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to turn your HTML build into a basic theme,
    creating WordPress templates to influence the display of a variety of views on
    your site, creating custom templates to be applied to pages within your site,
    making your new theme widget-ready, creating a child theme, making a theme compatible
    with the WordPress Customizer, and share your theme with everyone in the WordPress
    community.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss social media integration, podcasting, and
    HTTPS (Hypertext Transfer Protocol Secure). This information will allow you to
    expand your blogging habits, and make your work more diverse and more noticeable
    on the web.
  prefs: []
  type: TYPE_NORMAL
