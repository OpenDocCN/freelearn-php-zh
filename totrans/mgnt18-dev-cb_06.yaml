- en: Chapter 6. Databases and Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering the resource models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and upgrading scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a flat table with models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Magento collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how the Magento database works, which connections
    are available, and how we can interact with the database.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will perform some practical tasks with the things we learned
    in the previous chapter. We will extend the module that we created in [Chapter
    4](ch04.html "Chapter 4. Creating a Module"), *Creating a Module*, with database
    interactions.
  prefs: []
  type: TYPE_NORMAL
- en: We will create Magento models that will interact with a database table, which
    will be installed by the module.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the resource models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we have to do is to register the **resource** models. The normal
    models are used to write business logic. The resource models are used to interact
    with the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to add an extra configuration in the `config.xml` file of the module.
    Open the `app/code/local/Packt/Helloworld/etc/config.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps explain how to register resource models in the existing
    `Packt_Helloworld` module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the tag where the models are registered. This is in the `config/global/models`
    tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration in it to add the resource models. Your `<global>`
    tag will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `app/code/local/Packt/Helloworld/Model/Resource` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Link the normal model with the resource model by adding the following XML code
    in the `<models>` tag. The `<models>` tag will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The link between the `helloworld` and `helloworld_resource` models is done with
    the `<resourceModel>` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test your configuration with the `wiz` command-line tool by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3320OS_06_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The previous command will display all registered models and filter the output
    on rows matching the `helloworld` word.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The models in Magento are used for business logic. For example, an observer
    model usually contains functions that will be triggered by events or cron jobs.
  prefs: []
  type: TYPE_NORMAL
- en: A Magento object can also represent an entity such as a product, customer, and
    category. The models representing an entity usually inherit from the `Mage_Core_Model_Abstract`
    class. This class has logic to connect with a resource model. For example, the
    `save()` function is declared in this class.
  prefs: []
  type: TYPE_NORMAL
- en: When you look in the `save()` function of the `Mage_Core_Model_Abstract` class,
    you see that the `getResource()` function is called. This `getResource()` function
    will return an instance of the resource model.
  prefs: []
  type: TYPE_NORMAL
- en: Resource models are used to connect entities with the database. Magento-specific
    business logic is written in the model and the model is called while working with
    an entity.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get a resource model instance, you can use the `Mage::getResourceModel()`
    or `Mage::getResourceSingleton()` method. To get an instance of a class, we have
    to pass the Magento classname as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: Registering connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will configure the `read` and `write` adapters to use it
    in this module. These adapters are used to connect the models with the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add the adapter configuration in the `config.xml` file of the `Packt_Helloworld`
    module. Open this file and get ready to add some configuration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the next steps to create the `read` and `write` connections of the `Packt_Helloworld`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `<global>` tag and add the following configuration to it. This
    will register the `read` adapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `write` adapter to add the following in the `<resources>` tag
    of the XML code. Your resources tag will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear your cache and you're done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every model in Magento is associated with a `read` and `write` adapter. The
    default `read` adapter is `core_read`. The default `write` adapter is `core_write`.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, all models use the `core_read` and `core_write` adapters when the
    database tables are in the Magento database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can register and configure a specific database model that uses another
    database connection. If you navigate to the following URL, you can find a good
    tutorial that explains this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/](http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and upgrading scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your module uses a custom database table, you need to make certain changes
    to the database to deploy your module on a staging or production server. Magento
    has a way to automatically trigger and install or update scripts when the code
    is in the right place.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will extend the `Packt_Helloworld` module with the `install`
    script. This `install` script will add an attribute to all products.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have to work in the module's folder and the database. Open
    your database client and go to your code in the `Packt_Helloworld` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe the procedure to create and install scripts for
    your module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the setup procedures for the module by adding the following code
    in the `<resources>` tag of the `config.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code will initialize a setup procedure with the name `helloworld_setup`.
    The `<module>` tag configures the relation with the `Packt_Helloworld` module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the folder for the installation scripts. The folder name in this case
    is `app/code/local/Packt/Helloworld/sql/helloworld_setup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the installation script. The naming of an installation script follows
    the convention `install-<version_number_config_xml>.php`. In our case, the name
    of this script is `install-0.0.1.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in the file to test the installation procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload any page from the frontend. You will see a white
    page with **Test** on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: An installation or upgrade script is made to run once during an installation.
    The version number of every registered setup is stored in the `core_resource`
    database table. When you want to run your script again for testing it, you can
    remove an entry or change the version number for a setup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the following content in the installation script. This installs a product
    attribute that is available for all products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code will create the `helloworld_label` product attribute. The
    attribute will be applied to all products.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the `group` option, the attribute will be displayed in the **Helloworld**
    tab while viewing a product in the backend.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear the cache and reload the page. While reloading a page after clearing cache,
    the installation script will run automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the backend and open a product to check whether the product attribute
    is added. Normally, you will see a **Helloworld** tab with the attribute in it
    similar to the following screenshot:![How to do it...](img/3329OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your installation script is executed, you can see your setup in the `core_resource`
    table of Magento. In this table, all modules and version numbers are stored, so
    Magento knows which installation or upgradation scripts have to be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with installation scripts is useful when you want to change something
    in the structure of your database. Some of the purposes are:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy deployment of your site from your development/test environment to your
    production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to repair the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the database changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$this` object in the installation scripts is the class we have declared
    in the setup registration in the `config.xml` file. In this case, it is the `Mage_Eav_Model_Entity_Setup`
    class. This class is mostly used when you want to add EAV attributes to the entities
    such as a product or category like we did in this recipe. Mostly all setup classes
    extend the default setup class, that is, `Mage_Core_Model_Resource_Setup`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to do a lot of things in you installation script, you can create
    your own setup class. This will extend from the normal setup classes.
  prefs: []
  type: TYPE_NORMAL
- en: The functions declared in this class can call the `$this` object in the installer
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a flat table with models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will extend our module with a flat database table. We will
    create an upgradation script with the instruction to create a table. When the
    table is created, we will finish the setup by adding the needed Magento models,
    resource models, and collections. After finishing the whole setup, we have created
    a custom Magento entity with all the features of the Magento ORM.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have to work with the code and the database. Open your IDE
    in the `module` folder and get access to your database client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are the instructions to create a database table with the
    appropriate Magento models that can interact with this table:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the table name in the `app/code/local/Packt/Helloworld/etc/config.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code under the `helloworld_resource` tag so that the tag
    looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code will declare an entity which references the `helloworld_subscription`
    table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the upgradation script by creating the `app/code/local/Packt/Helloworld/sql/helloworld_setup/upgrade-0.0.1-0.0.2.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code in the upgradation file. This code is a command to create
    a table with some fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and reload the frontend. When you refresh your tables in the
    database client, you will see the `helloworld_subscription` table in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: While creating a table, think about the naming convention. The first part is
    the name where the models are registered followed by an underscore. The second
    part refers to the entity model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure the name of the model is singular. For this example, it is `subscription`
    and not `subscriptions`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check whether the table is installed in the database. Reload the tables in phpMyAdmin
    and open the new table. The structure will look as follows:![How to do it...](img/3329OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the table is installed with the upgradation script (from 0.0.1 to 0.0.2),
    the last part is to create a Magento entity that communicates with the previously
    created table. For doing this, we have to create a model, a resource model, and
    a collection resource model. The first step is to create the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/Model/Subscription.php` (the model)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription.php` (the resource
    model)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription/Collection.php`
    (the resource collection model)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the model file and add the following content to it. This content will link
    the model with the appropriate resource model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the resource model file and add the following content to it. The next content
    will link the model with the database. In the `_init` function, we will link the
    model with the primary key of the database table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the resource collection model file and add the following content to it.
    This file makes it possible to work with Magento collections on the model when
    you call the `getCollection()` method on an entity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the files are at the right place to start the tests if everything went well
    so far. To perform some tests, create a `subscriptionAction()` method in the `IndexController`
    of the module where we can perform some tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the new action in the controller by going to the `http://magento-dev.local/helloworld/index/subscription`
    URL. You will see a blank page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in the action that will create a new subscription
    item in our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you reload the page, you will see the word **success**. This word being
    displayed is a sign that all the actions have successfully executed. Navigate
    to your database and make the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This query will give you the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you work with the previous setup for entities in a database table, the
    Magento ORM makes the link between the entity and the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our previously created Magento entity (`Mage::getModel(''helloworld/subscription'')`),
    we can use the following functions that will result in a query to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '`load($entityId)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these functions are implemented in the `Mage_Core_Model_Abstract` class.
    All the Magento entities will extend this abstract class to use the ORM framework.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Magento collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the possibilities of the Magento collections.
    A Magento collection is a set of **entities** where you can add filters to customize
    your result.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore everything that is possible with Magento collections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to the `indexController` of the `helloworld` module and create a `collectionAction`
    method in it. In this action, we will perform some tests to compare the results.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next examples show what are the possibilities while working with Magento
    collections:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code in the `collectionAction` method and navigate to the
    page. This code will return 10 products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At the end of the code, there is a `foreach` loop. This calls the `debug()`
    function on the object. The `debug()` function is available on all objects that
    extend the `Varien_Object` function. A collection dump is a very large array and
    can cause an **out of memory** exception in PHP or very large responses in the
    browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you look at the output, you will see the following array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The values in this object don''t contain attribute values. To select them,
    we have to use the `addAttributeToSelect(''<attribute_code>'')` function. Add
    the following code to select the first 10 products with the name, price, and image
    attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code will output an array for each product as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now create a filter on the product collection. The next code shows
    how you can filter the products with the name **Nokia 2610 Phone**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The code in this statement will create a `WHERE name = 'Nokia 2610 Phone'` statement
    to the query, so all the items with the name **Nokia 2610 Phone** will be returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the `addAttributeToFilter` function, we can do more. The following code
    shows how you can create a `WHERE product_id IN (159, 160, 161)` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next filter we will use is the `like` filter. Add the following code to
    make a query with the `WHERE name LIKE ''%PC%''` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the queries get more complex, sometimes it is nice to know what SQL query
    will be generated to get the collection. To print the SQL query, which is used
    for a collection, we can use the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you add the following code, you will see the query for this collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code will output the following SQL query:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `getSelect()->__toString()` function, make sure the collection
    is loaded. This is why we called the `$productCollection->load()` function before
    printing the SQL statement. When you add a collection in a `foreach()` loop, the
    collection will automatically be loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run this query in phpMyAdmin, and you will see that this flat response can be
    used to create a product collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the previous code examples, we can only read data from the database. By
    using the `setDataToAll()` function, you can update some attributes for all the
    entities in the collection. Use the next code to update all the prices in the
    collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you use the `setDataToAll()` function, nothing will be changed in the
    database until you have called the `save()` function. Add the following code after
    the `setDataToAll()` function to save the collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you want to get a collection of entities, you can do this by calling the
    next two methods. The return value of these two is a collection object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A Magento collection object always extends from the `Varien_Data_Collection`
    class. This object works as an array, so you can iterate between items in a collection.
  prefs: []
  type: TYPE_NORMAL
- en: For every entity, a collection class is created in the resource model folder.
    In most cases, this class extends the parent classes and in some cases, methods
    are added specially for an entity.
  prefs: []
  type: TYPE_NORMAL
- en: The product entity is a good example of this. When you open the `Mage_Catalog_Model_Resource_Product_Collection`
    class, you will see that this class is not empty. Here, some functions are declared
    specially for the product entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you debug the inheritance of collections, you will see that there is a
    difference for flat and EAV entities as you can see in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3329OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the classes of the flat entities (`Mage_Core_Model_Resource_Db_Collection_Abstract`)
    and EAV entities (`Mage_Eav_Model_Entity_Collection_Abstract`) extend the same
    parents. The EAV class adds extra methods and redefines some existing ones to
    work together with the EAV system.
  prefs: []
  type: TYPE_NORMAL
- en: This is the main reason why the collection queries are different for flat and
    EAV entities.
  prefs: []
  type: TYPE_NORMAL
- en: For adding a filter on a field, the function for EAV is `addAttributeToFilter()`.
    For a flat entity, the function is `addFieldToFilter()`. The `addAttributeToFilter()`function
    is declared in the `Mage_Eav_Model_Entity_Collection_Abstract` class, so it is
    not available in the `Varien_Data_Collection_Db` class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to know all the possibilities on offer for Magento collections,
    have a look at the following article on the Magento website, which has information
    on all the functions and options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento](http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento)'
  prefs: []
  type: TYPE_NORMAL
