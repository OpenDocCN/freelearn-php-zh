- en: Chapter 6. Databases and Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。数据库和模块
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Registering the resource models
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册资源模型
- en: Registering connections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册连接
- en: Installing and upgrading scripts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和升级脚本
- en: Creating a flat table with models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型创建平面表
- en: Working with Magento collections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Magento 集合一起工作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we learned how the Magento database works, which connections
    are available, and how we can interact with the database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 Magento 数据库，可用的连接以及如何与数据库交互。
- en: In this chapter, we will perform some practical tasks with the things we learned
    in the previous chapter. We will extend the module that we created in [Chapter
    4](ch04.html "Chapter 4. Creating a Module"), *Creating a Module*, with database
    interactions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用上一章学到的知识执行一些实际任务。我们将扩展在 [第 4 章](ch04.html "第 4 章。创建模块") 中创建的模块，并与数据库交互。
- en: We will create Magento models that will interact with a database table, which
    will be installed by the module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建与由模块安装的数据库表交互的 Magento 模型。
- en: Registering the resource models
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册资源模型
- en: The first thing we have to do is to register the **resource** models. The normal
    models are used to write business logic. The resource models are used to interact
    with the database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是注册 **资源** 模型。普通模型用于编写业务逻辑。资源模型用于与数据库交互。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have to add an extra configuration in the `config.xml` file of the module.
    Open the `app/code/local/Packt/Helloworld/etc/config.xml` file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在模块的 `config.xml` 文件中添加额外的配置。打开 `app/code/local/Packt/Helloworld/etc/config.xml`
    文件。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps explain how to register resource models in the existing
    `Packt_Helloworld` module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤解释了如何在现有的 `Packt_Helloworld` 模块中注册资源模型：
- en: Navigate to the tag where the models are registered. This is in the `config/global/models`
    tag.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到注册模型的标签。这位于 `config/global/models` 标签中。
- en: 'Add the following configuration in it to add the resource models. Your `<global>`
    tag will look as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中添加以下配置以添加资源模型。你的 `<global>` 标签将如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create the `app/code/local/Packt/Helloworld/Model/Resource` folder.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `app/code/local/Packt/Helloworld/Model/Resource` 文件夹。
- en: 'Link the normal model with the resource model by adding the following XML code
    in the `<models>` tag. The `<models>` tag will look as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `<models>` 标签中添加以下 XML 代码将普通模型与资源模型链接起来。`<models>` 标签将如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The link between the `helloworld` and `helloworld_resource` models is done with
    the `<resourceModel>` tag.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `<resourceModel>` 标签建立 `helloworld` 和 `helloworld_resource` 模型之间的链接。
- en: 'Test your configuration with the `wiz` command-line tool by running the following
    command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wiz` 命令行工具运行以下命令来测试你的配置：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will now get the following output:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在将得到以下输出：
- en: '![How to do it...](img/3320OS_06_01.jpg)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/3320OS_06_01.jpg)'
- en: The previous command will display all registered models and filter the output
    on rows matching the `helloworld` word.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将显示所有注册的模型，并过滤输出以匹配 `helloworld` 单词的行。
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The models in Magento are used for business logic. For example, an observer
    model usually contains functions that will be triggered by events or cron jobs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 中的模型用于业务逻辑。例如，观察者模型通常包含由事件或计划任务触发的函数。
- en: A Magento object can also represent an entity such as a product, customer, and
    category. The models representing an entity usually inherit from the `Mage_Core_Model_Abstract`
    class. This class has logic to connect with a resource model. For example, the
    `save()` function is declared in this class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Magento 对象也可以代表一个实体，如产品、客户和类别。代表实体的模型通常继承自 `Mage_Core_Model_Abstract` 类。这个类有与资源模型连接的逻辑。例如，`save()`
    函数是在这个类中声明的。
- en: When you look in the `save()` function of the `Mage_Core_Model_Abstract` class,
    you see that the `getResource()` function is called. This `getResource()` function
    will return an instance of the resource model.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 `Mage_Core_Model_Abstract` 类的 `save()` 函数中查看时，你会看到调用了 `getResource()` 函数。这个
    `getResource()` 函数将返回资源模型的一个实例。
- en: Resource models are used to connect entities with the database. Magento-specific
    business logic is written in the model and the model is called while working with
    an entity.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 资源模型用于将实体与数据库连接起来。在模型中编写特定的业务逻辑，并在与实体一起工作时调用模型。
- en: If you want to get a resource model instance, you can use the `Mage::getResourceModel()`
    or `Mage::getResourceSingleton()` method. To get an instance of a class, we have
    to pass the Magento classname as the first argument.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要获取资源模型实例，你可以使用`Mage::getResourceModel()`或`Mage::getResourceSingleton()`方法。要获取类的实例，我们必须将Magento类名作为第一个参数传递。
- en: Registering connections
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册连接
- en: In this recipe, we will configure the `read` and `write` adapters to use it
    in this module. These adapters are used to connect the models with the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将配置`read`和`write`适配器，以便在这个模块中使用。这些适配器用于将模型与数据库连接起来。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will add the adapter configuration in the `config.xml` file of the `Packt_Helloworld`
    module. Open this file and get ready to add some configuration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`Packt_Helloworld`模块的`config.xml`文件中添加适配器配置。打开此文件，准备添加一些配置。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow the next steps to create the `read` and `write` connections of the `Packt_Helloworld`
    module:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建`Packt_Helloworld`模块的`read`和`write`连接：
- en: Navigate to the `<global>` tag and add the following configuration to it. This
    will register the `read` adapter.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`<global>`标签，并向其中添加以下配置。这将注册`read`适配器。
- en: '[PRE3]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Configure the `write` adapter to add the following in the `<resources>` tag
    of the XML code. Your resources tag will look as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`write`适配器，在XML代码的`<resources>`标签中添加以下内容。你的资源标签将如下所示：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Clear your cache and you're done.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除你的缓存，你就完成了。
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Every model in Magento is associated with a `read` and `write` adapter. The
    default `read` adapter is `core_read`. The default `write` adapter is `core_write`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Magento中的每个模型都与一个`read`和`write`适配器相关联。默认的`read`适配器是`core_read`。默认的`write`适配器是`core_write`。
- en: Normally, all models use the `core_read` and `core_write` adapters when the
    database tables are in the Magento database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有模型在数据库表位于Magento数据库中时，都使用`core_read`和`core_write`适配器。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can register and configure a specific database model that uses another
    database connection. If you navigate to the following URL, you can find a good
    tutorial that explains this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注册和配置一个使用另一个数据库连接的特定数据库模型。如果你导航到以下URL，你可以找到一个很好的教程，它解释了这一点：
- en: '[http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/](http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/](http://www.solvingmagento.com/accessing-an-external-database-from-your-magento-module/)'
- en: Installing and upgrading scripts
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和升级脚本
- en: When your module uses a custom database table, you need to make certain changes
    to the database to deploy your module on a staging or production server. Magento
    has a way to automatically trigger and install or update scripts when the code
    is in the right place.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的模块使用自定义数据库表时，你需要对数据库进行某些更改，以便在预发布或生产服务器上部署你的模块。Magento有一种方法可以在代码处于正确位置时自动触发和安装或更新脚本。
- en: In this recipe, we will extend the `Packt_Helloworld` module with the `install`
    script. This `install` script will add an attribute to all products.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`install`脚本扩展`Packt_Helloworld`模块。这个`install`脚本将为所有产品添加一个属性。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have to work in the module's folder and the database. Open
    your database client and go to your code in the `Packt_Helloworld` module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们必须在模块文件夹和数据库中工作。打开你的数据库客户端，并转到`Packt_Helloworld`模块中的代码。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe the procedure to create and install scripts for
    your module:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了创建和安装模块脚本的程序：
- en: 'Initialize the setup procedures for the module by adding the following code
    in the `<resources>` tag of the `config.xml` file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`config.xml`文件的`<resources>`标签中添加以下代码来初始化模块的设置程序：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous code will initialize a setup procedure with the name `helloworld_setup`.
    The `<module>` tag configures the relation with the `Packt_Helloworld` module.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将初始化一个名为`helloworld_setup`的设置程序。`<module>`标签配置了与`Packt_Helloworld`模块的关系。
- en: Create the folder for the installation scripts. The folder name in this case
    is `app/code/local/Packt/Helloworld/sql/helloworld_setup`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建安装脚本的文件夹。在这个例子中，文件夹名称是`app/code/local/Packt/Helloworld/sql/helloworld_setup`。
- en: Create the installation script. The naming of an installation script follows
    the convention `install-<version_number_config_xml>.php`. In our case, the name
    of this script is `install-0.0.1.php`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建安装脚本。安装脚本的命名遵循`install-<version_number_config_xml>.php`的约定。在我们的例子中，这个脚本的名称是`install-0.0.1.php`。
- en: 'Add the following content in the file to test the installation procedure:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中添加以下内容以测试安装过程：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Clear the cache and reload any page from the frontend. You will see a white
    page with **Test** on it.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载任何前端页面。您将看到一个带有**测试**字样的白色页面。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An installation or upgrade script is made to run once during an installation.
    The version number of every registered setup is stored in the `core_resource`
    database table. When you want to run your script again for testing it, you can
    remove an entry or change the version number for a setup.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装或升级脚本是为了在安装期间运行一次。每个注册设置的版本号都存储在`core_resource`数据库表中。当您想再次运行脚本进行测试时，您可以删除条目或更改设置的版本号。
- en: Add the following content in the installation script. This installs a product
    attribute that is available for all products.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装脚本中添加以下内容。这将安装一个适用于所有产品的产品属性。
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous code will create the `helloworld_label` product attribute. The
    attribute will be applied to all products.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将创建`helloworld_label`产品属性。该属性将应用于所有产品。
- en: With the `group` option, the attribute will be displayed in the **Helloworld**
    tab while viewing a product in the backend.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`group`选项，在查看后端产品时，属性将在**Helloworld**标签页中显示。
- en: Clear the cache and reload the page. While reloading a page after clearing cache,
    the installation script will run automatically.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载页面。在清除缓存后重新加载页面时，安装脚本将自动运行。
- en: Go to the backend and open a product to check whether the product attribute
    is added. Normally, you will see a **Helloworld** tab with the attribute in it
    similar to the following screenshot:![How to do it...](img/3329OS_06_02.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往后端并打开一个产品以检查是否已添加产品属性。通常，您将看到一个包含属性的**Helloworld**标签页，类似于以下截图：![如何操作...](img/3329OS_06_02.jpg)
- en: When your installation script is executed, you can see your setup in the `core_resource`
    table of Magento. In this table, all modules and version numbers are stored, so
    Magento knows which installation or upgradation scripts have to be executed.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的安装脚本执行时，您可以在Magento的`core_resource`表中看到您的设置。在这个表中，存储了所有模块和版本号，因此Magento知道哪些安装或升级脚本需要执行。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Working with installation scripts is useful when you want to change something
    in the structure of your database. Some of the purposes are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想更改数据库结构时，使用安装脚本是有用的。一些目的包括：
- en: Easy deployment of your site from your development/test environment to your
    production environment
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从开发/测试环境轻松部署到生产环境
- en: Ability to repair the database
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复数据库的能力
- en: Overview of the database changes
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库变更概述
- en: The `$this` object in the installation scripts is the class we have declared
    in the setup registration in the `config.xml` file. In this case, it is the `Mage_Eav_Model_Entity_Setup`
    class. This class is mostly used when you want to add EAV attributes to the entities
    such as a product or category like we did in this recipe. Mostly all setup classes
    extend the default setup class, that is, `Mage_Core_Model_Resource_Setup`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装脚本中的`$this`对象是在`config.xml`文件中的设置注册中声明的类。在这种情况下，它是`Mage_Eav_Model_Entity_Setup`类。这个类主要用于您想向实体添加EAV属性的情况，例如产品或类别，就像我们在本菜谱中所做的那样。大多数设置类都扩展了默认的设置类，即`Mage_Core_Model_Resource_Setup`。
- en: If you want to do a lot of things in you installation script, you can create
    your own setup class. This will extend from the normal setup classes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在安装脚本中做很多事情，您可以创建自己的设置类。这将扩展正常的设置类。
- en: The functions declared in this class can call the `$this` object in the installer
    file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中声明的函数可以在安装文件中调用`$this`对象。
- en: Creating a flat table with models
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型创建扁平表
- en: In this recipe, we will extend our module with a flat database table. We will
    create an upgradation script with the instruction to create a table. When the
    table is created, we will finish the setup by adding the needed Magento models,
    resource models, and collections. After finishing the whole setup, we have created
    a custom Magento entity with all the features of the Magento ORM.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过一个扁平数据库表扩展我们的模块。我们将创建一个升级脚本，包含创建表的指令。当表创建完成后，我们将通过添加所需的Magento模型、资源模型和集合来完成设置。完成整个设置后，我们已创建了一个具有所有Magento
    ORM功能的自定义Magento实体。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have to work with the code and the database. Open your IDE
    in the `module` folder and get access to your database client.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们必须处理代码和数据库。在`module`文件夹中打开您的IDE，并获取对您的数据库客户端的访问权限。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps are the instructions to create a database table with the
    appropriate Magento models that can interact with this table:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤是创建一个数据库表并使用适当的 Magento 模型与之交互的指令：
- en: Configure the table name in the `app/code/local/Packt/Helloworld/etc/config.xml`
    file.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local/Packt/Helloworld/etc/config.xml` 文件中配置表名。
- en: 'Add the following code under the `helloworld_resource` tag so that the tag
    looks as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `helloworld_resource` 标签下添加以下代码，使标签看起来如下：
- en: '[PRE8]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The previous code will declare an entity which references the `helloworld_subscription`
    table.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将声明一个实体，它引用 `helloworld_subscription` 表。
- en: Create the upgradation script by creating the `app/code/local/Packt/Helloworld/sql/helloworld_setup/upgrade-0.0.1-0.0.2.php`
    file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建 `app/code/local/Packt/Helloworld/sql/helloworld_setup/upgrade-0.0.1-0.0.2.php`
    文件来创建升级脚本。
- en: Add the following code in the upgradation file. This code is a command to create
    a table with some fields.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在升级文件中添加以下代码。此代码是创建具有一些字段的表的命令。
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Clear the cache and reload the frontend. When you refresh your tables in the
    database client, you will see the `helloworld_subscription` table in the list.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载前端。当你在数据库客户端刷新你的表时，你将看到 `helloworld_subscription` 表在列表中。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While creating a table, think about the naming convention. The first part is
    the name where the models are registered followed by an underscore. The second
    part refers to the entity model.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建表时，考虑命名约定。第一部分是模型注册的名称，后面跟着一个下划线。第二部分指的是实体模型。
- en: Make sure the name of the model is singular. For this example, it is `subscription`
    and not `subscriptions`.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保模型的名称是单数。在这个例子中，它是 `subscription` 而不是 `subscriptions`。
- en: Check whether the table is installed in the database. Reload the tables in phpMyAdmin
    and open the new table. The structure will look as follows:![How to do it...](img/3329OS_06_03.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查该表是否已安装到数据库中。在 phpMyAdmin 中重新加载表并打开新表。结构将如下所示：![如何操作...](img/3329OS_06_03.jpg)
- en: 'When the table is installed with the upgradation script (from 0.0.1 to 0.0.2),
    the last part is to create a Magento entity that communicates with the previously
    created table. For doing this, we have to create a model, a resource model, and
    a collection resource model. The first step is to create the following files:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用升级脚本（从 0.0.1 升级到 0.0.2）安装表时，最后一步是创建一个与之前创建的表通信的 Magento 实体。为此，我们必须创建一个模型、一个资源模型和一个集合资源模型。第一步是创建以下文件：
- en: '`app/code/local/Packt/Helloworld/Model/Subscription.php` (the model)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Helloworld/Model/Subscription.php`（模型）'
- en: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription.php` (the resource
    model)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription.php`（资源模型）'
- en: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription/Collection.php`
    (the resource collection model)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Helloworld/Model/Resource/Subscription/Collection.php`（资源集合模型）'
- en: Open the model file and add the following content to it. This content will link
    the model with the appropriate resource model.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开模型文件，并向其中添加以下内容。此内容将模型与适当的资源模型链接。
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open the resource model file and add the following content to it. The next content
    will link the model with the database. In the `_init` function, we will link the
    model with the primary key of the database table.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开资源模型文件，并向其中添加以下内容。接下来的内容将模型与数据库链接。在 `_init` 函数中，我们将模型与数据库表的主键链接。
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Open the resource collection model file and add the following content to it.
    This file makes it possible to work with Magento collections on the model when
    you call the `getCollection()` method on an entity.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开资源集合模型文件，并向其中添加以下内容。此文件使得在调用实体的 `getCollection()` 方法时，可以在模型上使用 Magento 集合。
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: All the files are at the right place to start the tests if everything went well
    so far. To perform some tests, create a `subscriptionAction()` method in the `IndexController`
    of the module where we can perform some tests.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，所有文件都已放置在正确的位置以开始测试。为了执行一些测试，在模块的 `IndexController` 中创建一个 `subscriptionAction()`
    方法。
- en: Navigate to the new action in the controller by going to the `http://magento-dev.local/helloworld/index/subscription`
    URL. You will see a blank page.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 `http://magento-dev.local/helloworld/index/subscription` URL 来导航到控制器中的新动作。你将看到一个空白页面。
- en: 'Add the following content in the action that will create a new subscription
    item in our table:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建我们表中新订阅项的动作中添加以下内容：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you reload the page, you will see the word **success**. This word being
    displayed is a sign that all the actions have successfully executed. Navigate
    to your database and make the following query:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你重新加载页面时，你会看到单词**成功**。这个单词的显示是所有动作已成功执行的标志。导航到你的数据库并执行以下查询：
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This query will give you the following output:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个查询将给出以下输出：
- en: '![How to do it...](img/3329OS_06_04.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3329OS_06_04.jpg)'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you work with the previous setup for entities in a database table, the
    Magento ORM makes the link between the entity and the database.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用数据库表中的实体之前的设置工作时，Magento ORM会在实体和数据库之间建立联系。
- en: 'In our previously created Magento entity (`Mage::getModel(''helloworld/subscription'')`),
    we can use the following functions that will result in a query to the database:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前创建的Magento实体（`Mage::getModel('helloworld/subscription')`）中，我们可以使用以下函数，这将导致对数据库的查询：
- en: '`load($entityId)`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load($entityId)`'
- en: '`save()`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save()`'
- en: '`delete()`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete()`'
- en: All these functions are implemented in the `Mage_Core_Model_Abstract` class.
    All the Magento entities will extend this abstract class to use the ORM framework.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些函数都是在`Mage_Core_Model_Abstract`类中实现的。所有的Magento实体都将扩展这个抽象类以使用ORM框架。
- en: Working with Magento collections
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Magento集合
- en: In this chapter, we will explore the possibilities of the Magento collections.
    A Magento collection is a set of **entities** where you can add filters to customize
    your result.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索Magento集合的可能性。一个Magento集合是一组**实体**，你可以添加过滤器来自定义你的结果。
- en: In this chapter, we will explore everything that is possible with Magento collections.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索使用Magento集合所能做的一切。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Go to the `indexController` of the `helloworld` module and create a `collectionAction`
    method in it. In this action, we will perform some tests to compare the results.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`helloworld`模块的`indexController`并创建一个`collectionAction`方法。在这个动作中，我们将执行一些测试来比较结果。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The next examples show what are the possibilities while working with Magento
    collections:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了在处理Magento集合时的可能性：
- en: Add the following code in the `collectionAction` method and navigate to the
    page. This code will return 10 products.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`collectionAction`方法中添加以下代码并导航到页面。这段代码将返回10个产品。
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: At the end of the code, there is a `foreach` loop. This calls the `debug()`
    function on the object. The `debug()` function is available on all objects that
    extend the `Varien_Object` function. A collection dump is a very large array and
    can cause an **out of memory** exception in PHP or very large responses in the
    browser.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在代码的末尾，有一个`foreach`循环。这个循环会在对象上调用`debug()`函数。`debug()`函数在所有扩展了`Varien_Object`函数的对象上都是可用的。集合转储是一个非常大的数组，可能会导致PHP中的**内存不足**异常或在浏览器中产生非常大的响应。
- en: 'When you look at the output, you will see the following array:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你查看输出时，你会看到以下数组：
- en: '[PRE16]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The values in this object don''t contain attribute values. To select them,
    we have to use the `addAttributeToSelect(''<attribute_code>'')` function. Add
    the following code to select the first 10 products with the name, price, and image
    attributes:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个对象中的值不包含属性值。为了选择它们，我们必须使用`addAttributeToSelect('<attribute_code>')`函数。添加以下代码来选择具有名称、价格和图像属性的第一个10个产品：
- en: '[PRE17]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This code will output an array for each product as shown in the following code:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将为每个产品输出一个数组，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will now create a filter on the product collection. The next code shows
    how you can filter the products with the name **Nokia 2610 Phone**:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在产品集合上创建一个过滤器。下面的代码展示了如何过滤名为**诺基亚2610手机**的产品：
- en: '[PRE19]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code in this statement will create a `WHERE name = 'Nokia 2610 Phone'` statement
    to the query, so all the items with the name **Nokia 2610 Phone** will be returned.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个语句中的代码将在查询中创建一个`WHERE name = 'Nokia 2610 Phone'`语句，所以所有名为**诺基亚2610手机**的项目都将被返回。
- en: 'With the `addAttributeToFilter` function, we can do more. The following code
    shows how you can create a `WHERE product_id IN (159, 160, 161)` statement:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`addAttributeToFilter`函数，我们可以做更多。下面的代码展示了如何创建一个`WHERE product_id IN (159,
    160, 161)`语句：
- en: '[PRE20]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next filter we will use is the `like` filter. Add the following code to
    make a query with the `WHERE name LIKE ''%PC%''` statement:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来要使用的过滤器是`like`过滤器。添加以下代码来执行带有`WHERE name LIKE '%PC%'`语句的查询：
- en: '[PRE21]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When the queries get more complex, sometimes it is nice to know what SQL query
    will be generated to get the collection. To print the SQL query, which is used
    for a collection, we can use the following line of code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当查询变得更加复杂时，有时知道将生成什么SQL查询来获取集合是很不错的。为了打印用于集合的SQL查询，我们可以使用以下代码行：
- en: '[PRE22]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When you add the following code, you will see the query for this collection:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你添加以下代码时，你会看到这个集合的查询：
- en: '[PRE23]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This code will output the following SQL query:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码将输出以下SQL查询：
- en: '[PRE24]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When using the `getSelect()->__toString()` function, make sure the collection
    is loaded. This is why we called the `$productCollection->load()` function before
    printing the SQL statement. When you add a collection in a `foreach()` loop, the
    collection will automatically be loaded.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用`getSelect()->__toString()`函数时，请确保集合已加载。这就是为什么我们在打印SQL语句之前调用了`$productCollection->load()`函数。当你在一个`foreach()`循环中添加集合时，集合将自动加载。
- en: Run this query in phpMyAdmin, and you will see that this flat response can be
    used to create a product collection.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在phpMyAdmin中运行此查询，你会看到这个扁平响应可以用来创建产品集合。
- en: 'With the previous code examples, we can only read data from the database. By
    using the `setDataToAll()` function, you can update some attributes for all the
    entities in the collection. Use the next code to update all the prices in the
    collection:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过前面的代码示例，我们只能从数据库中读取数据。通过使用`setDataToAll()`函数，你可以更新集合中所有实体的某些属性。使用以下代码来更新集合中的所有价格：
- en: '[PRE25]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When you use the `setDataToAll()` function, nothing will be changed in the
    database until you have called the `save()` function. Add the following code after
    the `setDataToAll()` function to save the collection:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用`setDataToAll()`函数时，除非你调用了`save()`函数，否则数据库中不会有任何变化。在`setDataToAll()`函数之后添加以下代码以保存集合：
- en: '[PRE26]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: When you want to get a collection of entities, you can do this by calling the
    next two methods. The return value of these two is a collection object.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想获取实体集合时，你可以通过调用以下两个方法来实现。这两个方法的返回值是一个集合对象。
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A Magento collection object always extends from the `Varien_Data_Collection`
    class. This object works as an array, so you can iterate between items in a collection.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Magento集合对象始终扩展自`Varien_Data_Collection`类。这个对象作为一个数组工作，因此你可以在集合中的项目之间迭代。
- en: For every entity, a collection class is created in the resource model folder.
    In most cases, this class extends the parent classes and in some cases, methods
    are added specially for an entity.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个实体，在资源模型文件夹中都会创建一个集合类。在大多数情况下，这个类扩展了父类，在某些情况下，会为实体添加特定的方法。
- en: The product entity is a good example of this. When you open the `Mage_Catalog_Model_Resource_Product_Collection`
    class, you will see that this class is not empty. Here, some functions are declared
    specially for the product entity.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 产品实体是这方面的一个好例子。当你打开`Mage_Catalog_Model_Resource_Product_Collection`类时，你会看到这个类不是空的。在这里，一些函数是专门为产品实体声明的。
- en: 'When you debug the inheritance of collections, you will see that there is a
    difference for flat and EAV entities as you can see in the following diagram:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调试集合的继承时，你会看到扁平实体和EAV实体之间存在差异，如下面的图所示：
- en: '![How it works...](img/3329OS_06_06.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3329OS_06_06.jpg)'
- en: You can see that the classes of the flat entities (`Mage_Core_Model_Resource_Db_Collection_Abstract`)
    and EAV entities (`Mage_Eav_Model_Entity_Collection_Abstract`) extend the same
    parents. The EAV class adds extra methods and redefines some existing ones to
    work together with the EAV system.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，扁平实体（`Mage_Core_Model_Resource_Db_Collection_Abstract`）和EAV实体（`Mage_Eav_Model_Entity_Collection_Abstract`）的类扩展了相同的父类。EAV类添加了额外的函数并重新定义了一些现有的函数以与EAV系统协同工作。
- en: This is the main reason why the collection queries are different for flat and
    EAV entities.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是集合查询为何在扁平实体和EAV实体之间不同的主要原因。
- en: For adding a filter on a field, the function for EAV is `addAttributeToFilter()`.
    For a flat entity, the function is `addFieldToFilter()`. The `addAttributeToFilter()`function
    is declared in the `Mage_Eav_Model_Entity_Collection_Abstract` class, so it is
    not available in the `Varien_Data_Collection_Db` class.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在字段上添加过滤器，EAV的函数是`addAttributeToFilter()`。对于扁平实体，函数是`addFieldToFilter()`。`addAttributeToFilter()`函数在`Mage_Eav_Model_Entity_Collection_Abstract`类中声明，因此在`Varien_Data_Collection_Db`类中不可用。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'If you want to know all the possibilities on offer for Magento collections,
    have a look at the following article on the Magento website, which has information
    on all the functions and options:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解 Magento 集合提供的所有可能选项，请查看 Magento 网站上的以下文章，其中包含了所有功能和选项的信息：
- en: '[http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento](http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento](http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/using_collections_in_magento)'
