- en: Chapter 4. JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 JavaScript
- en: So far we have gone through three chapters and learned two languages, HTML and
    CSS. They are used to create a web page, give it content, and add styling to it.
    In this chapter, we will learn a third language, **JavaScript**, which is used
    for programming your web pages and add life to them. For quite some time, JavaScript
    was treated by some as a second class citizen. If ever this was deserved, it is
    definitely no longer true today. Before we get started with JavaScript, let us
    get oriented in the world of programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了三个章节，掌握了两种语言：HTML和CSS。它们被用来创建网页，为其添加内容，并为其添加样式。在本章中，我们将学习第三种语言，**JavaScript**，它被用来编程你的网页，并为其添加活力。在相当长的一段时间里，JavaScript被一些人视为二等公民。如果曾经有这种说法，那么现在肯定不再是这样了。在我们开始学习JavaScript之前，让我们先了解一下编程的世界。
- en: Programming 101
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程101
- en: There is no such thing as a smart computer. A computer is a device that is capable
    of executing just a few instructions, but can do that very fast. One such instruction
    could be to take a value stored somewhere, and another stored somewhere else,
    add the two, and store the result in a third place. A **program** is a list of
    such instructions, written down in some logical and structured order, and in a
    human readable format. The format is called a **programming language**. A smart
    program would turn the useless device we described into a calculator.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么是智能计算机。计算机是一种能够执行少量指令的设备，但可以非常快地执行。这样的指令可能包括从一个地方取一个值，从另一个地方取另一个值，将这两个值相加，并将结果存储在第三个地方。**程序**是一系列这样的指令，以某种逻辑和结构化的顺序写下，并以人类可读的格式。这种格式被称为**编程语言**。一个智能的程序会将我们描述的无用设备变成计算器。
- en: For a lot of programming languages, a special program called a **compiler**
    exists. It translates a program from a human readable format—usually a text file
    referred to as source code—into a format the computer can understand, typically
    a binary executable file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多编程语言来说，存在一种特殊的程序，称为**编译器**。它将程序从人类可读的格式（通常是一个称为源代码的文本文件）翻译成计算机可以理解的格式，通常是二进制可执行文件。
- en: Your computer or tablet contains many different kinds of programs. There is
    a program to manage the computer, programs to manage programs, others to create
    programs, a program that lets you type in commands which in turn are names of
    programs, and so on. That last one happens to be a programming language too, sometimes
    called a **shell** or **command interpreter**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你的计算机或平板电脑包含许多不同种类的程序。有一个程序来管理计算机，有程序来管理程序，还有其他程序来创建程序，有一个程序让你输入命令，这些命令反过来又是程序的名称，等等。最后一个碰巧也是一种编程语言，有时被称为**shell**或**命令解释器**。
- en: 'If you put some commands together in a text file, you have once again a program:
    a shell script. This is an example of a language that is interpreted, not compiled.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一些命令组合到一个文本文件中，你又一次得到了一个程序：一个shell脚本。这是一个解释型语言而不是编译型语言的例子。
- en: 'But this is *Programming 101*, not Computer 101\. Look at the following lines
    of source code, written in an imaginary programming language:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是**编程101**，而不是**计算机101**。看看以下用一种虚构的编程语言编写的源代码行：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The letters `a`, `b,` and `c` are variables—things that can hold values. Those
    values can be numbers, names, complete employee records, and so on, as well as
    the value of an expression that contains more variables and values. You find those
    on the right-hand side of the `=` sign, which is an **operator**. This operator
    assigns what is on the right to be the value of the variable on the left. `+`
    is also an operator. As you may have guessed, it adds two things. Variables have
    to be declared first, telling whomever or whatever is going to read this, about
    which variables you are going to use. Then they need to be initialized, which
    means giving them an initial value. If you don't, strange things could happen.
    In this example, both declaration and initialization happen on the same line.
    Finally, we used `printnumber(c)`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`a`、`b`和`c`是变量——可以存储值的东西。这些值可以是数字、名称、完整的员工记录等等，以及包含更多变量和值的表达式的值。你可以在`=`符号的右侧找到这些值，这个符号是一个**运算符**。这个运算符将右侧的内容分配给左侧变量的值。`+`也是一个运算符。正如你可能已经猜到的，它将两个东西相加。变量必须首先声明，告诉任何或任何将要阅读这个的人你将要使用哪些变量。然后它们需要初始化，这意味着给它们一个初始值。如果你不这样做，可能会发生奇怪的事情。在这个例子中，声明和初始化都在同一行上完成。最后，我们使用了`printnumber(c)`。
- en: 'This is the name of a function with one argument, the variable `c`. Assume
    it will take care of displaying the value: your program will only work if you
    also supply the code of that function, or if it was already written for you and
    supplied with the language as part of a library of functions.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只有一个参数的函数的名字，变量`c`。假设它会负责显示值：你的程序只有在你也提供了该函数的代码，或者它已经被为你编写并作为函数库的一部分与语言一起提供时才能工作。
- en: So we have written a four line program to calculate the number `3`. For such
    a simple task, this is at least 3 lines too many, but we needed an example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们编写了一个四行程序来计算数字`3`。对于这样一个简单的任务，这至少多了3行，但我们需要一个例子。
- en: 'In the variables we used, there is no mention of what type of values variables
    contain. In some languages, such as the C Programming Language, you have to specify
    what kind of variable you mean when you declare it. Following is a similar program
    in C:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们使用的变量中，没有提到变量包含什么类型的值。在一些语言中，例如C编程语言，当你声明变量时，你必须指定你指的是什么类型的变量。以下是一个类似的C程序： '
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compiled and interpreted languages compared
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译型和解释型语言的比较
- en: 'The first day I used the C programming language, it was a revelation to me.
    I typed in my code using a full screen editor, pushed a button somewhere, and
    since there were no errors, I could immediately run my program to see if it did
    what I intended. At university, things had been different. I had to type in my
    `Fortran` program using a machine with punch cards, one line at a time, and leave
    the punch cards behind in the data center with a rubber band around it. Two days
    later I could pick them up together with a listing and there it was: *line 37:
    missing semicolon*. That was, of course, a long time ago.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次使用C编程语言时，对我来说是个启示。我使用全屏编辑器输入我的代码，按了某个地方的按钮，由于没有错误，我可以立即运行我的程序，看看它是否按我预期的那样工作。在大学时，情况不同。我必须使用带有穿孔卡的机器输入我的`Fortran`程序，一次一行，然后把穿孔卡留在数据中心，用橡皮筋绑在一起。两天后，我可以和打印列表一起取回它们，那里写着：*第37行：缺少分号*。当然，那已经是很久以前的事了。
- en: Using languages that have to be compiled has advantages, although opinions may
    vary. By having to go through a two-step process before you can run your program,
    a good compiler can do a thorough job checking your code and produce all kinds
    of error and warning messages, like `syntax error`, `undeclared variable`, `illegal
    type`, and so on, including the line number and offending statement. In interpreted
    languages like JavaScript, and to a lesser extent maybe **PHP**, these errors
    are often silently ignored. Adding one line with an innocent typo into a perfectly
    working program can bring it to a complete stop.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用需要编译的语言有优势，尽管人们的观点可能不同。在你可以运行你的程序之前，必须经过两步过程，一个好的编译器可以彻底检查你的代码，并产生各种错误和警告信息，如`语法错误`、`未声明的变量`、`非法类型`等等，包括行号和有问题的语句。在像JavaScript这样的解释型语言中，以及在一定程度上可能是**PHP**，这些错误通常被默默忽略。在完美运行的程序中加入一行带有无辜错误的代码，可能会让它完全停止运行。
- en: Interpreted languages give you instant gratification. You type them in, using
    your favorite editor, as I do with `Textastic` on my iPad, immediately pull up
    the built in browser, and see the result (or nothing at all). You also do not
    have the inconvenience that you need to have a compiler present on the system
    when you create your programs, before you can run them. That compiler is usually
    part of a complete development environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解释型语言能给你即时的满足感。你用你喜欢的编辑器输入它们，就像我用iPad上的`Textastic`一样，立即打开内置浏览器，看到结果（或者什么都没有）。你也不会遇到当你创建程序并运行它们之前，需要在系统上有一个编译器的问题。这个编译器通常是完整开发环境的一部分。
- en: 'So we set the stage for programming and learned, or relearned, a lot of important
    terms when it comes to programming. These are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们为编程做好了准备，并学习了或重新学习了与编程相关的大量重要术语。这些是：
- en: Variables
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Values
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值
- en: Types
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型
- en: Keywords or reserved words
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字或保留字
- en: Operators
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符
- en: Control flow
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流
- en: Functions
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Compilers and interpreters
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器和解释器
- en: Libraries
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: Expressions
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式
- en: Syntax
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法
- en: 'Now we are going to teach you what those are: for the JavaScript language,
    in this chapter, and for PHP in the next chapter. Before we do that, now that
    we understand those words, we need to address one important topic first.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将教你们这些是什么：对于JavaScript语言，在本章中，对于PHP在下一章中。在我们这样做之前，既然我们已经理解了这些词，我们首先需要解决一个重要的话题。
- en: JavaScript is not the same as Java
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript与Java不同
- en: I have already mentioned a few times about the six month class I took years
    ago on Web Development. Three months into it, one co-student was still mixing
    up Java and JavaScript. He is now a front-end developer so he must have seen the
    light eventually.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经多次提到，我多年前参加的那个关于Web开发的六个月课程。在课程进行到三个月时，有一个同学还在混淆Java和JavaScript。现在他是一名前端开发者，所以他最终肯定已经明白了。
- en: We want you to see it in the next *three* minutes. Java and JavaScript are both
    programming languages. What they have in common are the first four letters of
    their name, Java, which is the name of a country, and makes many people think
    of coffee, and some of the late Sun Microsystems. That company, together with
    Netscape, coined the name JavaScript, and was also the creator and promoter of
    the Java programming language. Therefore, it is not surprising that people are
    sometimes confused.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望你在接下来的*三分钟*内看到它。Java和JavaScript都是编程语言。它们共同之处在于它们名字的前四个字母，Java，这是一个国家的名字，也让很多人想到了咖啡，以及一些晚期的Sun
    Microsystems。那家公司，连同Netscape，创造了JavaScript这个名字，也是Java编程语言的创造者和推广者。因此，人们有时感到困惑并不奇怪。
- en: Java
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java
- en: Java is a programming language, developed by James Gosling of Sun Microsystems.
    A lot of its syntax comes from the C programming language, with some parts left
    out, like pointers, which happens to be my favorite part of C.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种编程语言，由Sun Microsystems的詹姆斯·高斯林（James Gosling）开发。它的语法很多都来自C编程语言，有一些部分被省略了，比如指针，这恰好是我最喜欢的C语言的部分。
- en: Unlike C, which is more of a "Write once, compile everywhere" language, Java
    is what I call a "Compile once, run everywhere" language. A Java compiler transforms
    a Java source code from text file to a platform independent bytecode file, so
    you can run it anywhere you have a Java runtime. Ever seen those messages that
    say you need to install a more up to date Java runtime? That is Java, not JavaScript.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与C语言相比，C语言更像是“一次编写，到处编译”的语言，Java是我所说的“一次编译，到处运行”的语言。Java编译器将Java源代码从文本文件转换成平台无关的字节码文件，因此你可以在任何有Java运行时的地方运行它。你见过那些说你需要安装更新版本的Java运行时的消息吗？那就是Java，不是JavaScript。
- en: Java applications typically run on server or desktop computers, but you can
    also use Java in Web Development. The server-side code for Web Applications, for
    which we will first use PHP ([Chapter 5](ch05.html "Chapter 5. PHP"), *PHP*) in
    this book, could be written in Java.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Java应用程序通常在服务器或桌面计算机上运行，但你也可以在Web开发中使用Java。这本书中我们将首先使用PHP（[第5章](ch05.html "第5章。PHP"），*PHP*）来编写Web应用程序的后端代码。
- en: JavaScript
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript is a totally different programming language. Although there are "other"
    usages of the language, for instance using JavaScript code to modify a PDF file,
    we will concentrate in this chapter on what is called client-side JavaScript.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种完全不同的编程语言。尽管语言有“其他”用途，例如使用JavaScript代码修改PDF文件，但我们将在这章集中讨论所谓的客户端JavaScript。
- en: JavaScript code is interpreted and the interpreter is the web browser. The language
    is sometimes referred to as a scripting language. Because of the word scripting,
    many believed that JavaScript would be rather simplistic in nature. This is not
    at all true. It can be very complex. That explains why there is a second chapter
    in this book where we talk about JavaScript. In this one we will just stick to
    the things you need for classic web development.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript代码是由解释器解释的，而这个解释器就是网页浏览器。这种语言有时被称为脚本语言。由于“脚本”这个词，很多人认为JavaScript在本质上会比较简单。这完全不是真的。它可以非常复杂。这也解释了为什么这本书的第二章我们会谈到JavaScript。在这一章中，我们将只关注你需要的经典网页开发相关的内容。
- en: Client-side JavaScript combines the ability of the interpreter inside the browser
    with the already briefly mentioned **Document Object Model** (**DOM**), defined
    by that same browser. By being able to walk through or traverse the DOM using
    JavaScript code, you will be able to find the things you look for in your document
    and, if you would like to, modify both the content (HTML) and layout (CSS) of
    your document. You can also add life to your page by writing **event handlers**.
    These are watchdog-like functions that wait and wait until a certain event occurs,
    for instance a user clicking a button. Then the appropriate code is executed and
    our watchdog waits some more. So with JavaScript, you can program your webpages
    and add life to it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端JavaScript结合了浏览器内部解释器的功能，以及之前简要提到的由同一浏览器定义的**文档对象模型**（**DOM**）。通过使用JavaScript代码遍历或遍历DOM，您将能够找到您在文档中寻找的东西，如果您愿意的话，还可以修改文档的内容（HTML）和布局（CSS）。您还可以通过编写**事件处理器**为您的页面添加活力。这些是类似看门狗的功能，它们会等待并等待直到某个事件发生，例如用户点击按钮。然后执行适当的代码，我们的看门狗会再次等待。所以，使用JavaScript，您可以编程您的网页并为它添加活力。
- en: 'Those of you who are already programmers will discover an oddity or two in
    JavaScript that may be hard to get used to. In many languages, a statement is
    not executed, nor a function called, until the previous is complete. Things tend
    to happen in a synchronous way, first things first. In JavaScript, things can
    happen in an asynchronous way: where one thing already begins before the previous
    has completed. At first, you may find yourself checking your code over and over
    again, wondering why it is not doing the things you want it to do. We will teach
    you what to look out for and then everything will be hunky dory. So let''s get
    started with our first JavaScript program.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经是程序员的你们来说，你们可能会在JavaScript中发现一些奇怪之处，可能难以适应。在许多语言中，一个语句不会执行，也不会调用一个函数，直到前一个完成。事情往往以同步的方式进行，先做重要的事情。在JavaScript中，事情可以以异步的方式进行：一件事已经开始，而前一件事还没有完成。一开始，您可能会一遍又一遍地检查您的代码，想知道为什么它没有做您想要它做的事情。我们将教您注意什么，然后一切都会顺利。所以，让我们从我们的第一个JavaScript程序开始吧。
- en: Our first JavaScript program
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个JavaScript程序
- en: 'Create a new HTML file and add the following to the `<head>` section:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的HTML文件，并在`<head>`部分添加以下内容：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run this through a browser, a popup box will show up on the screen with
    the text *Hello, World* in it. If you press the **OK** button, the popup box will
    disappear. If you try this in a different browser, the same will happen but the
    popup box will look completely different. The browser renders it the way it wants
    and there is nothing we can do about it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中运行这段代码，屏幕上会出现一个包含*Hello, World*文本的弹出窗口。如果您按下**OK**按钮，弹出窗口将消失。如果您在不同的浏览器中尝试此操作，结果将相同，但弹出窗口的外观将完全不同。浏览器会按照它想要的方式渲染，我们对此无能为力。
- en: 'We could have also put that one line of code in a file `hello.js`, in a folder
    `js`, and have our program instead say the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将这一行代码放入一个名为`hello.js`的文件中，放在`js`文件夹里，然后我们的程序可以说以下内容：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's analyze that one line of JavaScript briefly. The line itself ends with
    a semicolon (`;`). It starts with `alert`, which is the name of a function that
    comes with JavaScript. The text for the popup is supplied as the only argument.
    That argument is, in this case, a string with the text *Hello, World*. To indicate
    that it is a string value and not a variable, we used double quotes. Single quotes
    would have worked too.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要分析一下这一行JavaScript代码。该行以分号（`;`）结尾。它以`alert`开头，这是JavaScript附带的一个函数的名称。弹出窗口的文本作为唯一的参数提供。在这个例子中，该参数是一个包含文本*Hello,
    World*的字符串。为了表示这是一个字符串值而不是变量，我们使用了双引号。单引号也可以。
- en: Variables
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: In JavaScript, names of variables have to begin with a letter. A few other characters,
    like the `$` sign, are allowed as well, but we are not going to use them. This
    will help us, as early on as possible, to distinguish between JavaScript variables
    and PHP variables. Names are also case-sensitive, so `first` is not the same as
    `First`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，变量的名称必须以字母开头。还有一些其他字符，如`$`符号，也被允许，但我们不会使用它们。这有助于我们尽早区分JavaScript变量和PHP变量。名称也是大小写敏感的，所以`first`与`First`不同。
- en: Of course it is alright to use very short names, like `a` and `b`, but if we
    want to give variables meaningful names, some best practices guides recommend
    to use names like `firstName`, `lastName`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，使用非常短的名字，如`a`和`b`，是可以的，但如果我们想给变量赋予有意义的名字，一些最佳实践指南建议使用如`firstName`、`lastName`这样的名字。
- en: Variable declarations
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量声明
- en: 'Variables are declared using the `var` keyword, for example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 变量使用 `var` 关键字声明，例如：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or simply everything on one line, as shown next:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或者简单地一行显示，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When variables are declared but not initialized, they have `undefined` as a
    value, meaning there are no variable types. To assign a value to a variable, we
    use the `=` sign. So after a proper declaration, you can assign values similar
    to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量被声明但未初始化时，它们的值是 `undefined`，这意味着没有变量类型。要给变量赋值，我们使用 `=` 符号。因此，在适当的声明之后，你可以赋值如下：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Of course, you can also do it all in one step, as shown next:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以一步完成，如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Values of variables
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 变量的值
- en: As we mentioned, there are no types of variables. As a value, we can assign
    almost anything. Following is a brief overview. But remember, we are not a reference
    manual, so it is not complete.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，没有变量类型。作为值，我们可以分配几乎任何东西。以下是简要概述。但请记住，我们不是参考手册，所以它并不完整。
- en: Numbers
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数字
- en: The most common numbers are integers. Simply use the digits that make up the
    number, so `myNumber = 127;` assigns the **decimal** number `127` to the variable
    `myNumber`. The result would be different if you add a leading **zero**. The line
    `myNumber =` **0127;** will assign the octal number `127`, which is 1*64 + 2*8
    + 7 = 87 in decimal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的数字是整数。只需使用组成数字的数字即可，所以 `myNumber = 127;` 将十进制数 `127` 赋值给变量 `myNumber`。如果添加一个前导
    **零**，结果将不同。行 `myNumber =` **0127;** 将赋值八进制数 `127`，这在十进制中等于 1*64 + 2*8 + 7 = 87。
- en: '**Hexadecimal** numbers can be used as well, by starting the number with `0x`.
    So `myNumber = 0x127;` will store 256 + 2*16 + 7 = 295.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**十六进制** 数字也可以使用，通过在数字前加上 `0x`。所以 `myNumber = 0x127;` 将存储 256 + 2*16 + 7 =
    295。'
- en: Finally, we can have floating point numbers. Always use a dot, never a comma,
    even if you are in France or other countries where the floating point is a floating
    comma (*virgule flottante*, excuse my French!).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以有浮点数。始终使用点，而不是逗号，即使你在法国或其他将浮点视为浮点逗号的国家（*virgule flottante*，请原谅我的法语！）。
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Strings
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串
- en: 'A string contains zero or more characters enclosed within single (`''`) or
    double (`"`) quotes. So the shortest possible string is the empty string. Consider
    the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串包含零个或多个字符，这些字符被单引号 (`'`) 或双引号 (`"`) 包围。因此，可能的最短字符串是空字符串。考虑以下内容：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You probably recognize the `\n` from other languages. It is an example of an
    escape sequence, here representing the newline character. The `"345"` example
    is an important one. The `notANumber` variable indeed contains a string, not a
    number.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在其他语言中见过 `\n`。这是一个转义序列的例子，在这里表示换行符。`"345"` 这个例子很重要。`notANumber` 变量确实包含一个字符串，而不是一个数字。
- en: Converting strings to numbers
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将字符串转换为数字
- en: 'There are a few convenient functions that you can use to convert strings to
    numbers: `parseInt()` and `parseFloat()`. They will convert a string, or initial
    substring, until no more numbers are found to an integer or float number. If the
    string cannot be converted, the function returns **Not a Number** (**NaN**) .
    Following are some examples, where we have listed what the function returns as
    a comment:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些方便的函数可以用来将字符串转换为数字：`parseInt()` 和 `parseFloat()`。它们将字符串或初始子字符串转换为整数或浮点数，直到找不到更多的数字。如果字符串无法转换，函数返回
    **Not a Number** （**NaN**）。以下是一些示例，其中我们列出了函数返回的内容作为注释：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Expressions and operators
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式和运算符
- en: This section explains how **expressions** and **operators** work in JavaScript,
    with a focus on what we are going to use the language for—programming websites.
    So do not expect an in-depth explanation of all bitwise operators, for instance.
    If you do not understand what I just said, that is perfectly OK. But if you need
    to know what they are, you will also need another book or reference.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了在 JavaScript 中 **表达式** 和 **运算符** 的工作原理，重点关注我们将使用该语言做什么——编程网站。因此，不要期望对所有位运算符有深入的解释，例如。如果你不理解我刚才说的，那完全没问题。但如果你需要知道它们是什么，你可能还需要另一本书或参考资料。
- en: 'An expression is part of a JavaScript statement, often the part on the right-hand
    side of the `=` operator, that the JavaScript interpreter can evaluate. The result
    will be the value of the expression. The simplest expressions we already know:
    values and variables. In the following example, `i + 7` is also an expression.
    It will evaluate as 8\. It contains an operator, `+`, in the middle. The other
    parts to the left and right of it can be called **operands**.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式是JavaScript语句的一部分，通常是`=`运算符右侧的部分，JavaScript解释器可以对其进行评估。结果将是表达式的值。我们已知的最简单的表达式：值和变量。在下面的例子中，`i
    + 7`也是一个表达式。它将评估为8。它中间包含一个运算符`+`。它的左右两侧的部分可以被称为**操作数**。
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will now go over the most essential operators. To those of you who already
    know C, C++, or Java, they will look very familiar.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将介绍最基础的运算符。对于那些已经了解C、C++或Java的你们来说，它们看起来会非常熟悉。
- en: Arithmetic operators
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算符
- en: This is the group of operators used to calculate things.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用来计算的一组运算符。
- en: Addition(+)
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加法（+）
- en: 'The `+` operator adds the values of the two operands, that is, if they are
    numbers, as is the case in the previous example. What if they are not numbers,
    will the program hang? Not at all. Remember, you are going to use JavaScript to
    programmatically modify web pages. Web pages, in turn, consist of HTML, which
    are a lot of strings. So our plus operator has just become one of the most useful
    tools you have. Look at the following example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`运算符将两个操作数的值相加，也就是说，如果它们是数字，就像上一个例子中那样。如果它们不是数字，程序会挂起吗？当然不会。记住，你将使用JavaScript来程序性地修改网页。网页反过来又由HTML组成，而HTML又是由很多字符串组成的。所以我们的加号运算符已经成为你拥有的最有用的工具之一。看看下面的例子：'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So, in JavaScript, the plus operator can be used to glue, or, to use a more
    technical term, `concatenate` strings together. We will encounter the same feature
    in PHP but there the operator is the dot (`.`). It is never too soon to get used
    to the difference, as you will use these a lot.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在JavaScript中，加号运算符可以用来拼接，或者，用更技术性的术语来说，`concatenate`字符串。在PHP中我们也会遇到同样的功能，但那里的运算符是点(`.`)。尽早习惯这些差异永远不会太早，因为你将大量使用它们。
- en: 'In one of the examples, we used a special case of the `+` operator. `counter++;`
    is a shorthand notation people are familiar with from languages like C, that both
    JavaScript and PHP support. It is a shorthand notation to simply add `1` to a
    variable''s value. So the following two statements are identical:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个例子中，我们使用了`+`运算符的一个特殊情况。`counter++;`是人们从C语言等语言中熟悉的一种简写符号，JavaScript和PHP都支持这种简写符号。它是一个简写符号，用来简单地将`1`加到变量的值上。所以以下两个语句是相同的：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Subtraction (-)
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 减法（-）
- en: Everybody who has ever used a calculator knows the minus sign. It is used to
    subtract numbers. While the `+` sign could also be used with strings, that does
    not make sense with subtractions (nor multiplications or divisions). There is
    also a shorthand notation like `++` which looks like"`—`".
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用过计算器的人都知道减号。它用于减去数字。虽然`+`符号也可以与字符串一起使用，但在减法（以及乘法和除法）中这样做是没有意义的。还有一个类似于`++`的简写符号，看起来像"`—`"。
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: They are indeed also the same.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它们确实也是相同的。
- en: 'So far, we have used one example with more than two operands, the one line
    statement we used to compose an HTML string. But what happens if we do the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了一个包含两个以上操作数的例子，那就是我们用来组合HTML字符串的那行语句。但如果我们做以下操作会发生什么呢：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Will it be 0, or will it be 4? It is 0 because the expression is evaluated
    left to right, but you can remove all doubt by using parentheses. Take a look
    at the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它会是0，还是4？答案是0，因为表达式是按照从左到右的顺序进行评估的，但你可以通过使用括号来消除所有疑虑。看看下面的例子：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Multiplication (*)
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 乘法（*）
- en: The `*` operator multiplies its two operands.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`*`运算符将其两个操作数相乘。'
- en: Division (/)
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 除法（/）
- en: The `/` operator divides its first operand by its second. The result is always
    a floating point number so 5 / 2 evaluates as 2.5\. In some languages, this would
    be two if both operands were integers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`/`运算符将其第一个操作数除以第二个操作数。结果始终是一个浮点数，所以5 / 2评估为2.5。在某些语言中，如果两个操作数都是整数，这将是两个。'
- en: Modulo (%)
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模数（%）
- en: The `%` operator is extremely useful. It returns the first operand modulo the
    second operand. For instance, 5%2 evaluates as 1, as the quotient of the division
    5/2 as an integer is 2 and the remainder is 1\. I often use it in styling when
    I want to do something different for even things than odd things. Using `if (number%2)`
    in your code would mean odd, because it is true if the value between the parentheses
    is not zero.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`%`运算符非常实用。它返回第一个操作数对第二个操作数的余数。例如，5%2评估为1，因为5除以2的整数商是2，余数是1。我经常在样式中使用它，当我想要对偶数和奇数做不同的事情时。在代码中使用`if
    (number%2)`意味着奇数，因为如果括号内的值不是零，则为真。'
- en: Relational operators
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关系运算符
- en: 'A common mistake in programming is to use things like `if ( a = b)` to compare
    two things and discover that it is always true even if `a` is not equal to `b`.
    This is because in many languages, including JavaScript and PHP, a single equal
    sign is the assignment operator. To check to see if two things are equal, you
    need (at least) two equal signs. The expressions using the operators listed next
    will evaluate as true or false, and in JavaScript the corresponding values are
    not `1` or `0`, but actually `true` or `false`. Here they are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 编程中的一个常见错误是使用类似`if (a = b)`的东西来比较两个东西，并发现即使`a`不等于`b`，它总是为真。这是因为许多语言，包括JavaScript和PHP，单个等号是赋值运算符。要检查两个东西是否相等，你需要（至少）两个等号。使用以下运算符的运算符的表达式将评估为真或假，在JavaScript中相应的值不是`1`或`0`，而是实际上`true`或`false`。它们如下所示：
- en: 'Equal ( `==` ): This one we use in an expression to see if two variables contain
    equal values, for instance if (`a == b`)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于（`==`）：我们在这个表达式中使用它来检查两个变量是否包含相等的值，例如如果（`a == b`）
- en: 'Not Equal ( `!=` ): Of course this is for the opposite: `true` if they are
    not equal, `false` if they are'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等于（`!=`）：当然，这是相反的情况：如果不相等则为真，相等则为假
- en: Less than ( `<` )
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于（`<`）
- en: Less than or equal( `<=` )
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于或等于（`<=`）
- en: Greater than( `>` )
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于（`>`）
- en: Greater than or equal( `>=` )
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于或等于（`>=`）
- en: Not ( `!` )
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非（`!`）
- en: This converts false to true and vice versa when placed in front of an expression.
    This can help a lot in making your program more readable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将假转换为真，反之亦然，当它放在表达式前面时。这可以帮助使你的程序更易于阅读。
- en: Of course, such expressions are not very helpful when used in isolation. They
    need to be part of some construct where we add control to make our program do
    something different if the expression evaluates as false as opposed to true.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当单独使用时，这样的表达式并不很有帮助。它们需要成为某个结构的一部分，我们添加控制来使我们的程序在表达式评估为假而不是真时执行不同的操作。
- en: Control flow
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制流
- en: '**Control flow** is the heart of programming. A control flow statement helps
    determine which part of the code that follows it is executed and which is not.
    The most commonly used control flow statement in any language is probably the
    `if-else` statement. We will guide you through the most useful ones in JavaScript.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制流**是编程的核心。控制流语句有助于确定随后的代码中哪些部分被执行，哪些部分不执行。在任何语言中最常用的控制流语句可能是`if-else`语句。我们将引导你了解JavaScript中最有用的那些。'
- en: We learned what an expression is. I also referred to a line of JavaScript code
    (ending with a semicolon) as a statement. You can group statements together by
    putting curly braces ( `{` and `}` ) around them. Such a group of statements is
    called a **statement block**. It is considered best practice to use curly braces
    even if there is only a single statement, when used in one of the controls described
    next, where the word statement represents a statement block.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了什么是表达式。我还把一条JavaScript代码（以分号结尾）称为一个语句。你可以通过将大括号（`{` 和 `}`）放在它们周围来将语句组合在一起。这样一组语句被称为**语句块**。即使只有一个语句，当用于下面描述的任何一个控制结构中时，使用大括号也被认为是最佳实践，其中“语句”代表语句块。
- en: if
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果（`if`）
- en: 'The format of an `if` statement is:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的格式是：'
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can also combine `if` with `else`, as shown here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将`if`与`else`结合起来，如下所示：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: while
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当（`while`）
- en: Whereas an `if` statement is your basic control statement to do something, depending
    on a condition or something else, the `while` statement is perfect for creating
    a loop. A loop is a series of statements that are repeated as long as (or `while`)
    a certain condition is true. It is important to make sure that your condition
    is not forever true, otherwise you end up with an `infinite` loop.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 而一个`if`语句是你的基本控制语句，根据条件或其它东西来做某事，`while`语句则非常适合创建循环。循环是一系列在某个条件为真（或`while`）时重复执行的语句。确保你的条件不是永远为真非常重要，否则你最终会得到一个`无限循环`。
- en: 'Following is the format:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是格式：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And next is an example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个例子：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The result of this code will be a pop-up of a string that contains the letter
    a 100 times.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的结果将弹出一个包含字母a重复100次的字符串。
- en: switch
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: switch
- en: I like the `switch` statement. If you have to execute different code depending
    on more than 2 different possible conditions, using a switch statement makes for
    more readable and maintainable code than multiple `if`/`else` statements. Typically,
    the expression that is evaluated will be a variable and then there will be several
    statements that are executed in `case` the value of the variable is `value1`,
    `value2`, `value3`, and so on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢`switch`语句。如果你需要根据超过2个不同的可能条件执行不同的代码，使用`switch`语句比多个`if`/`else`语句更易于阅读和维护。通常，将被评估的表达式将是一个变量，然后将有几个在变量值为`value1`、`value2`、`value3`等情况下执行的语句。
- en: 'It goes as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这样的：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: First, the expression is evaluated. Depending on the value of the expression,
    the statement that belongs to the matching value is executed. If there is no match,
    the statement associated with `default:` is executed. The `break;` statements
    are important, yet not mandatory. In a switch statement, the first statement block
    that is executed is the one that belongs to the first match. If the `break;` statement
    is omitted, subsequent statements are executed as well and that is not usually
    what we want. I usually write a skeleton of a switch statement, including `case:`
    and `break;` first and then fill it out with real code.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，评估表达式。根据表达式的值，执行属于匹配值的语句。如果没有匹配项，则执行与`default:`关联的语句。`break;`语句很重要，但不是强制的。在`switch`语句中，首先执行的语句块是属于第一个匹配的。如果省略了`break;`语句，则还会执行后续的语句，而这通常不是我们想要的。我通常首先编写一个`switch`语句的骨架，包括`case:`和`break;`，然后填充实际的代码。
- en: 'Now let us look at an example and have some fun with it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个例子，并对此进行一些有趣的探索：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Functions
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: 'We already used some **functions** in our examples. A function is a piece of
    JavaScript code that you have either written on your own or is predefined by the
    JavaScript implementation. A function may be passed arguments, also called **parameters**.
    Following is an example of our own function to calculate the square root of the
    number that is passed as the first and only argument:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的例子中使用了一些**函数**。函数是一段JavaScript代码，你可以自己编写，也可以由JavaScript实现预定义。函数可以传递参数，也称为**参数**。以下是我们自己编写的函数示例，用于计算作为第一个和唯一参数传递的数字的平方根：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`square` is the name of the function. It consists of all the code that is in-between
    the curly braces. We call it a `function` block. Once the function is written,
    it can be used over and over again. The function in this example actually returns
    a value as well; in this case the square root of the argument. This is done by
    using a `return` statement: `return sq;`. Note that there are no parentheses after
    the `return` keyword, as is the case in other programming languages. That would
    imply that there would be a return `function`! So let us use our function a few
    times:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`square`是函数的名称。它由大括号之间的所有代码组成。我们称它为`function`块。一旦编写了函数，就可以反复使用。在这个例子中，函数实际上也返回一个值；在这种情况下，是参数的平方根。这是通过使用`return`语句完成的：`return
    sq;`。请注意，在`return`关键字之后没有括号，这与其他编程语言的情况不同。那将意味着会有一个返回的`function`！所以让我们多次使用我们的函数：'
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, we can use the function before and after the declaration. We
    can store our message in a variable first or pass it along to the `alert()` function
    directly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们可以在声明前后使用函数。我们首先可以将消息存储在变量中，或者直接将其传递给`alert()`函数。
- en: Scope of variables
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量的作用域
- en: 'At this point in the chapter, where we introduce functions, it is a good time
    to explain a very important concept: the **scope of variables,** and the notion
    of **global** versus **local** variables.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章介绍函数的这一部分，解释一个非常重要的概念：**变量的作用域**，以及**全局**变量与**局部**变量的概念。
- en: If you have been practicing, I sincerely hope that you have diligently declared
    all your variables using the `var` keyword. But what if you forgot it somewhere?
    Well, in that case, you have, by mistake or not, declared a global variable. So
    the scope, which is the region of your JavaScript program where that variable
    can be used, is everywhere and we call that global.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在练习，我真诚地希望你已经勤奋地使用`var`关键字声明了所有你的变量。但是，如果你在某处忘记了它呢？在这种情况下，你可能是无意中声明了一个全局变量。所以作用域，即变量可以在其中使用的JavaScript程序区域，是任何地方，我们称之为全局。
- en: Variables declared with the `var` keyword have a local scope. Local variables
    are defined only within the body of the function where they are declared. Variables
    that are passed as arguments to a function also have the local scope, and are
    defined only within the body of that function.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`var`关键字声明的变量具有局部作用域。局部变量仅在其声明的函数体内定义。作为函数参数传递的变量也具有局部作用域，并且仅在该函数体内定义。
- en: If you declare a local variable or use a parameter with the same name as an
    already existing global variable, that local variable will in fact "hide" the
    global variable from you while you are inside the function. But if, inside a function,
    you assign a value to a variable without declaring it first, you may have just
    overwritten a value that is needed elsewhere in the program. That is why it is
    important to declare all your variables in the beginning of the function. Take
    a few minutes to study the following example and it will all become clear.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你声明了一个与已存在的全局变量同名的地方变量，那么这个地方变量实际上会在函数内部“隐藏”全局变量。但是，如果在函数内部，你给一个变量赋值而没有先声明它，你可能会覆盖掉程序其他地方需要的值。这就是为什么在函数开始时声明所有变量很重要的原因。花几分钟时间研究下面的例子，一切都会变得清晰。
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Objects
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象
- en: 'Early on in this chapter, I mentioned that variables can contain almost anything:
    numbers, strings, or even complete employee records. But in the examples we have
    seen so far, there does not seem to be a suitable container for things as complex
    as employee records. This is where **objects** fit in. And here we will learn
    how to create them.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早期，我提到变量可以包含几乎所有东西：数字、字符串，甚至是完整的员工记录。但在我们迄今为止看到的例子中，似乎没有适合如此复杂如员工记录的容器。这就是对象发挥作用的地方。在这里，我们将学习如何创建它们。
- en: 'Objects are collections of named values, and they are created using a special
    function called a **constructor**. There are several such functions supplied with
    JavaScript. There is a generic one, `Object()`, but there are also specific ones
    to create objects of a predefined structure, such as `Date()` or `String()`. The
    syntax is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是命名值的集合，它们是通过一个称为**构造函数**的特殊函数创建的。JavaScript提供了几个这样的函数。有一个通用的，`Object()`，但也有一些用于创建具有预定义结构的对象的特定函数，例如`Date()`或`String()`。语法如下：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we have created an empty object called employee that we can fill up with
    names and values, as shown below:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个名为employee的空对象，我们可以用名称和值填充它，如下所示：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the context of JavaScript objects, these names are referred to as **properties**.
    Properties in turn have values. Objects can also contain functions that can be
    used to do things with what is inside an object. Such functions are called **methods**.
    The `String()` object for instance, contains quite a number of string manipulation
    methods. Consulting a good reference book or online reference on JavaScript Objects
    can result in having to write a lot less code, because it is all there already.
    Following is an example of a **String** method:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript对象的上下文中，这些名称被称为**属性**。属性反过来有值。对象还可以包含用于在对象内部执行操作的函数。这些函数被称为**方法**。例如，`String()`对象包含相当多的字符串操作方法。查阅一本好的参考书或在线JavaScript对象参考可以减少编写代码的数量，因为所有这些都已经有了。以下是一个**String**方法的示例：
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: JSON
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JSON
- en: There is another way to create objects, without the need of a constructor function.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象还有另一种方法，不需要构造函数。
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The right hand side matches a format for data named **JavaScript Object Notation**
    (**JSON**). We are dedicating an entire chapter on JSON in this book, where we
    will convince you that it is the coolest data format to use; so more about JSON
    later.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧匹配名为**JavaScript对象表示法**（**JSON**）的数据格式。在这本书中，我们将专门用一章来介绍JSON，我们将说服你这是最酷的数据格式；所以关于JSON的更多内容将在后面介绍。
- en: DOM objects, properties, methods, and events
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM对象、属性、方法和事件
- en: We walked you through the basics of JavaScript objects and will now get to the
    essence of client-side JavaScript—programming the DOM.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向您介绍了JavaScript对象的基础知识，现在我们将深入探讨客户端JavaScript的核心——DOM编程。
- en: The Window object
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 窗口对象
- en: When you are running a webpage in a browser, there are two objects available
    to you—**Window object** and **Document object**.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中运行网页时，有两个对象可供你使用——**Window对象**和**Document对象**。
- en: 'The Window object gives us access to the properties and methods that can tell
    us about the status of the window that is used to render the webpage. We already
    used one such method in every single example: `alert()`. Consider the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口对象为我们提供了访问可以告诉我们用于渲染网页的窗口状态的属性和方法。我们已经在每个示例中都使用了一个这样的方法：`alert()`。考虑以下内容：
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is actually short for the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是以下内容的缩写：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Similar useful methods for creating a dialog box are `prompt` and `confirm`.
    The former displays a dialog box that prompts the visitor for input; the latter
    displays a dialog box with a message and an **OK** and **Cancel** button. Refer
    to the next example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的有用的创建对话框的方法有`prompt`和`confirm`。前者显示一个对话框，提示访客输入；后者显示一个带有消息和**确定**和**取消**按钮的对话框。请参考下一个示例：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The window object has some interesting properties as well. You want to know
    how many pixels wide the current window is? You can access that by using:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口对象也有一些有趣的属性。你想知道当前窗口的宽度是多少像素？你可以通过以下方式访问：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The single most important property of the window object is in turn an object
    - the DOM Document object.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口对象最重要的属性本身也是一个对象——DOM文档对象。
- en: The Document object
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档对象
- en: '**window.document** (but you do not have to write the window part) is a property
    that gives you an object, which contains the entire webpage that is loaded by
    the browser.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**window.document**（但你不必写window部分）是一个属性，它给你一个对象，该对象包含浏览器加载的整个网页。'
- en: write and writeln methods
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: write和writeln方法
- en: 'In most of our examples, we used the window `alert()` method to display a popup
    box with some text. Useful as this may be for testing or debugging, it can be
    annoying because you have to click the box away before you see the next line of
    text. Most textbooks will use the document methods `write` and `writeln` instead.
    With these methods, you can write your message text straight into your document.
    `writeln` differs from write only in the manner that it adds a new line after
    each statement. Simply try the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的大部分示例中，我们使用了window `alert()`方法来显示带有一些文本的弹出框。虽然这对于测试或调试很有用，但它可能会让人感到烦恼，因为你必须点击该框才能看到下一行文本。大多数教科书都会使用文档方法`write`和`writeln`。使用这些方法，你可以直接将消息文本写入你的文档。`writeln`与`write`的不同之处在于它在每个语句后添加一个新行。只需尝试以下操作：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Nodes and DOM traversing
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点和DOM遍历
- en: We will use document methods to walk through or traverse our document and change
    it. You need to think of the document as a tree with nodes. What is attached to
    these nodes are your HTML tags with their attributes and inner HTML text. With
    dedicated methods, we can look for parts of our document. A **node** or **node
    list** is what they return (sometimes there is only one matching tag, sometimes
    there are more). Then, by changing the properties of these nodes or using other
    methods, we can effectively change the content or layout of our document.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用文档方法来遍历或遍历我们的文档并对其进行更改。你需要将文档想象成一个树状结构，其中包含节点。附着在这些节点上的是你的HTML标签及其属性和内部HTML文本。通过专用方法，我们可以查找文档的某些部分。一个**节点**或**节点列表**就是它们返回的内容（有时只有一个匹配的标签，有时有多个）。然后，通过更改这些节点的属性或使用其他方法，我们可以有效地更改文档的内容或布局。
- en: 'Three useful methods for looking up things in the document tree are:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 查找文档树中的三个有用方法是：
- en: '`getElementById` : find the node with the id specified as argument'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementById`：查找id指定的节点'
- en: '`getElementsByClassName` : get the node(s) with the class set to argument'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByClassName`：获取class设置为参数的节点'
- en: '`getElementsByTagName` : get all node(s) where the HTML tag equals argument'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByTagName`：获取所有HTML标签等于参数的节点'
- en: 'A useful property is the `innerHTML` property, which allows you to get or set
    the HTML text inside an HTML tag. Using these ingredients, we can cook up the
    following example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的属性是`innerHTML`属性，它允许你获取或设置HTML标签内的HTML文本。使用这些元素，我们可以构建以下示例：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This simple HTML document, yet another `Hello, World` example, gets modified
    immediately using JavaScript, and the only thing we ever see rendered by the browser
    is `Hello, Beach`. This is not very exciting. If, however, we let the user decide
    when to change the text, trigger an event, and have our code react to that event,
    then we effectively add action to our webpage.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的 HTML 文档，另一个 `你好，世界` 示例，通过 JavaScript 立即被修改，而我们看到的浏览器渲染的唯一内容是 `你好，海滩`。这并不令人兴奋。然而，如果我们让用户决定何时更改文本，触发一个事件，并让我们的代码对此事件做出反应，那么我们实际上就给我们的网页添加了动作。
- en: Events
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: '**Events** are things that happen to elements inside the DOM. They can be triggered
    by the browser or by the user. User controlled events can be:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件** 是发生在 DOM 内部元素上的事情。它们可以由浏览器或用户触发。用户控制的可以触发的事件包括：'
- en: Changing an input field
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改输入字段
- en: Clicking a button
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击按钮
- en: Moving a mouse over an area
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标移至某个区域
- en: Clicking on a link
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击链接
- en: You can attach an event handler to such tags that contain the code that needs
    to be executed. In the next example, we do so by adding an `event` attribute to
    the element. You can achieve the same by using the document `addEventListener()`
    method.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将事件处理器附加到包含需要执行代码的标签上。在下一个示例中，我们通过向元素添加 `event` 属性来实现这一点。你也可以通过使用文档的 `addEventListener()`
    方法达到同样的效果。
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The difference between the two examples is that we have added a button with
    an `onclick` attribute, which we have given the name of a JavaScript function
    as value, and placed our JavaScript code inside a function of the same name. Now,
    not until a user clicks the **Beach** button, **Hello, World** will turn into
    **Hello, Beach**.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 两个示例之间的区别在于我们添加了一个带有 `onclick` 属性的按钮，我们将一个 JavaScript 函数的名称作为值，并将我们的 JavaScript
    代码放在同名函数中。现在，直到用户点击 **海滩** 按钮，**你好，世界** 才会变成 **你好，海滩**。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: At this point, you are probably thinking, now I have arrived at the hard part
    and I am going to get lost soon. I have good news for you! You are not going to
    get lost because you have already reached the end of this chapter.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能认为，我已经到达了困难的部分，我很快就会迷失方向。好消息是！你不会迷失方向，因为你已经到达了这一章的结尾。
- en: 'We started with a brief overview of the features of a programming language.
    Next, we laid out what these are for JavaScript, while explaining why we need
    this language and how we are going to use it: to program webpages. To achieve
    that, we need an easy way to access all the elements in a webpage.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从对编程语言特性的简要概述开始。接下来，我们阐述了 JavaScript 的这些用途，同时解释了为什么我们需要这种语言以及我们将如何使用它：来编写网页。为了实现这一点，我们需要一种简单的方法来访问网页中的所有元素。
- en: Well, we already learned how to access elements of a page in the previous chapter
    through the use of **selectors**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们在上一章中已经学习了如何通过使用 **选择器** 来访问页面元素。
- en: '**jQuery**, a popular and proven JavaScript library, is what we are going to
    use mostly for our client-side JavaScript. It lets you use CSS-style selectors
    to specify the elements we want to reach, even attach events to it, so we do not
    have to learn something new or/and have the size of this book approach that of
    `War` and `Peace`. jQuery has several other advantages, which we will describe
    in [Chapter 7](ch07.html "Chapter 7. jQuery"), *jQuery*. That includes a cool
    interface to switch between the *client* and the *server*.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery**，一个流行且经过验证的 JavaScript 库，我们将主要用它来处理客户端 JavaScript。它允许你使用 CSS 风格的选择器来指定我们想要访问的元素，甚至可以为其附加事件，这样我们就不需要学习新东西，或者让这本书的大小接近《战争与和平》。jQuery
    有其他几个优点，我们将在第 7 章[第 7 章。jQuery](ch07.html "第 7 章。jQuery")中描述。这包括一个酷炫的界面，可以在 **客户端**
    和 **服务器** 之间切换。'
- en: 'For that reason, we are not diving into jQuery right away. We need to understand
    why we also need server-side programming. We are going to learn that in the next
    chapter and, at the same time, learn the second programming language of this book:
    **PHP**.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不会立即深入研究 jQuery。我们需要了解为什么我们还需要服务器端编程。我们将在下一章中学习这一点，同时学习这本书的第二个编程语言：**PHP**。
- en: Tip
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载您购买的所有Packt Publishing书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件通过电子邮件发送给您。
