- en: Chapter 4. JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have gone through three chapters and learned two languages, HTML and
    CSS. They are used to create a web page, give it content, and add styling to it.
    In this chapter, we will learn a third language, **JavaScript**, which is used
    for programming your web pages and add life to them. For quite some time, JavaScript
    was treated by some as a second class citizen. If ever this was deserved, it is
    definitely no longer true today. Before we get started with JavaScript, let us
    get oriented in the world of programming.
  prefs: []
  type: TYPE_NORMAL
- en: Programming 101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no such thing as a smart computer. A computer is a device that is capable
    of executing just a few instructions, but can do that very fast. One such instruction
    could be to take a value stored somewhere, and another stored somewhere else,
    add the two, and store the result in a third place. A **program** is a list of
    such instructions, written down in some logical and structured order, and in a
    human readable format. The format is called a **programming language**. A smart
    program would turn the useless device we described into a calculator.
  prefs: []
  type: TYPE_NORMAL
- en: For a lot of programming languages, a special program called a **compiler**
    exists. It translates a program from a human readable format—usually a text file
    referred to as source code—into a format the computer can understand, typically
    a binary executable file.
  prefs: []
  type: TYPE_NORMAL
- en: Your computer or tablet contains many different kinds of programs. There is
    a program to manage the computer, programs to manage programs, others to create
    programs, a program that lets you type in commands which in turn are names of
    programs, and so on. That last one happens to be a programming language too, sometimes
    called a **shell** or **command interpreter**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you put some commands together in a text file, you have once again a program:
    a shell script. This is an example of a language that is interpreted, not compiled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But this is *Programming 101*, not Computer 101\. Look at the following lines
    of source code, written in an imaginary programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The letters `a`, `b,` and `c` are variables—things that can hold values. Those
    values can be numbers, names, complete employee records, and so on, as well as
    the value of an expression that contains more variables and values. You find those
    on the right-hand side of the `=` sign, which is an **operator**. This operator
    assigns what is on the right to be the value of the variable on the left. `+`
    is also an operator. As you may have guessed, it adds two things. Variables have
    to be declared first, telling whomever or whatever is going to read this, about
    which variables you are going to use. Then they need to be initialized, which
    means giving them an initial value. If you don't, strange things could happen.
    In this example, both declaration and initialization happen on the same line.
    Finally, we used `printnumber(c)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the name of a function with one argument, the variable `c`. Assume
    it will take care of displaying the value: your program will only work if you
    also supply the code of that function, or if it was already written for you and
    supplied with the language as part of a library of functions.'
  prefs: []
  type: TYPE_NORMAL
- en: So we have written a four line program to calculate the number `3`. For such
    a simple task, this is at least 3 lines too many, but we needed an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the variables we used, there is no mention of what type of values variables
    contain. In some languages, such as the C Programming Language, you have to specify
    what kind of variable you mean when you declare it. Following is a similar program
    in C:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Compiled and interpreted languages compared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first day I used the C programming language, it was a revelation to me.
    I typed in my code using a full screen editor, pushed a button somewhere, and
    since there were no errors, I could immediately run my program to see if it did
    what I intended. At university, things had been different. I had to type in my
    `Fortran` program using a machine with punch cards, one line at a time, and leave
    the punch cards behind in the data center with a rubber band around it. Two days
    later I could pick them up together with a listing and there it was: *line 37:
    missing semicolon*. That was, of course, a long time ago.'
  prefs: []
  type: TYPE_NORMAL
- en: Using languages that have to be compiled has advantages, although opinions may
    vary. By having to go through a two-step process before you can run your program,
    a good compiler can do a thorough job checking your code and produce all kinds
    of error and warning messages, like `syntax error`, `undeclared variable`, `illegal
    type`, and so on, including the line number and offending statement. In interpreted
    languages like JavaScript, and to a lesser extent maybe **PHP**, these errors
    are often silently ignored. Adding one line with an innocent typo into a perfectly
    working program can bring it to a complete stop.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreted languages give you instant gratification. You type them in, using
    your favorite editor, as I do with `Textastic` on my iPad, immediately pull up
    the built in browser, and see the result (or nothing at all). You also do not
    have the inconvenience that you need to have a compiler present on the system
    when you create your programs, before you can run them. That compiler is usually
    part of a complete development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we set the stage for programming and learned, or relearned, a lot of important
    terms when it comes to programming. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keywords or reserved words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilers and interpreters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we are going to teach you what those are: for the JavaScript language,
    in this chapter, and for PHP in the next chapter. Before we do that, now that
    we understand those words, we need to address one important topic first.'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is not the same as Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have already mentioned a few times about the six month class I took years
    ago on Web Development. Three months into it, one co-student was still mixing
    up Java and JavaScript. He is now a front-end developer so he must have seen the
    light eventually.
  prefs: []
  type: TYPE_NORMAL
- en: We want you to see it in the next *three* minutes. Java and JavaScript are both
    programming languages. What they have in common are the first four letters of
    their name, Java, which is the name of a country, and makes many people think
    of coffee, and some of the late Sun Microsystems. That company, together with
    Netscape, coined the name JavaScript, and was also the creator and promoter of
    the Java programming language. Therefore, it is not surprising that people are
    sometimes confused.
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Java is a programming language, developed by James Gosling of Sun Microsystems.
    A lot of its syntax comes from the C programming language, with some parts left
    out, like pointers, which happens to be my favorite part of C.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike C, which is more of a "Write once, compile everywhere" language, Java
    is what I call a "Compile once, run everywhere" language. A Java compiler transforms
    a Java source code from text file to a platform independent bytecode file, so
    you can run it anywhere you have a Java runtime. Ever seen those messages that
    say you need to install a more up to date Java runtime? That is Java, not JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Java applications typically run on server or desktop computers, but you can
    also use Java in Web Development. The server-side code for Web Applications, for
    which we will first use PHP ([Chapter 5](ch05.html "Chapter 5. PHP"), *PHP*) in
    this book, could be written in Java.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript is a totally different programming language. Although there are "other"
    usages of the language, for instance using JavaScript code to modify a PDF file,
    we will concentrate in this chapter on what is called client-side JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript code is interpreted and the interpreter is the web browser. The language
    is sometimes referred to as a scripting language. Because of the word scripting,
    many believed that JavaScript would be rather simplistic in nature. This is not
    at all true. It can be very complex. That explains why there is a second chapter
    in this book where we talk about JavaScript. In this one we will just stick to
    the things you need for classic web development.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side JavaScript combines the ability of the interpreter inside the browser
    with the already briefly mentioned **Document Object Model** (**DOM**), defined
    by that same browser. By being able to walk through or traverse the DOM using
    JavaScript code, you will be able to find the things you look for in your document
    and, if you would like to, modify both the content (HTML) and layout (CSS) of
    your document. You can also add life to your page by writing **event handlers**.
    These are watchdog-like functions that wait and wait until a certain event occurs,
    for instance a user clicking a button. Then the appropriate code is executed and
    our watchdog waits some more. So with JavaScript, you can program your webpages
    and add life to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Those of you who are already programmers will discover an oddity or two in
    JavaScript that may be hard to get used to. In many languages, a statement is
    not executed, nor a function called, until the previous is complete. Things tend
    to happen in a synchronous way, first things first. In JavaScript, things can
    happen in an asynchronous way: where one thing already begins before the previous
    has completed. At first, you may find yourself checking your code over and over
    again, wondering why it is not doing the things you want it to do. We will teach
    you what to look out for and then everything will be hunky dory. So let''s get
    started with our first JavaScript program.'
  prefs: []
  type: TYPE_NORMAL
- en: Our first JavaScript program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new HTML file and add the following to the `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you run this through a browser, a popup box will show up on the screen with
    the text *Hello, World* in it. If you press the **OK** button, the popup box will
    disappear. If you try this in a different browser, the same will happen but the
    popup box will look completely different. The browser renders it the way it wants
    and there is nothing we can do about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could have also put that one line of code in a file `hello.js`, in a folder
    `js`, and have our program instead say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's analyze that one line of JavaScript briefly. The line itself ends with
    a semicolon (`;`). It starts with `alert`, which is the name of a function that
    comes with JavaScript. The text for the popup is supplied as the only argument.
    That argument is, in this case, a string with the text *Hello, World*. To indicate
    that it is a string value and not a variable, we used double quotes. Single quotes
    would have worked too.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, names of variables have to begin with a letter. A few other characters,
    like the `$` sign, are allowed as well, but we are not going to use them. This
    will help us, as early on as possible, to distinguish between JavaScript variables
    and PHP variables. Names are also case-sensitive, so `first` is not the same as
    `First`.
  prefs: []
  type: TYPE_NORMAL
- en: Of course it is alright to use very short names, like `a` and `b`, but if we
    want to give variables meaningful names, some best practices guides recommend
    to use names like `firstName`, `lastName`.
  prefs: []
  type: TYPE_NORMAL
- en: Variable declarations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Variables are declared using the `var` keyword, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or simply everything on one line, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When variables are declared but not initialized, they have `undefined` as a
    value, meaning there are no variable types. To assign a value to a variable, we
    use the `=` sign. So after a proper declaration, you can assign values similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you can also do it all in one step, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Values of variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As we mentioned, there are no types of variables. As a value, we can assign
    almost anything. Following is a brief overview. But remember, we are not a reference
    manual, so it is not complete.
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most common numbers are integers. Simply use the digits that make up the
    number, so `myNumber = 127;` assigns the **decimal** number `127` to the variable
    `myNumber`. The result would be different if you add a leading **zero**. The line
    `myNumber =` **0127;** will assign the octal number `127`, which is 1*64 + 2*8
    + 7 = 87 in decimal.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hexadecimal** numbers can be used as well, by starting the number with `0x`.
    So `myNumber = 0x127;` will store 256 + 2*16 + 7 = 295.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can have floating point numbers. Always use a dot, never a comma,
    even if you are in France or other countries where the floating point is a floating
    comma (*virgule flottante*, excuse my French!).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Strings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A string contains zero or more characters enclosed within single (`''`) or
    double (`"`) quotes. So the shortest possible string is the empty string. Consider
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You probably recognize the `\n` from other languages. It is an example of an
    escape sequence, here representing the newline character. The `"345"` example
    is an important one. The `notANumber` variable indeed contains a string, not a
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Converting strings to numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are a few convenient functions that you can use to convert strings to
    numbers: `parseInt()` and `parseFloat()`. They will convert a string, or initial
    substring, until no more numbers are found to an integer or float number. If the
    string cannot be converted, the function returns **Not a Number** (**NaN**) .
    Following are some examples, where we have listed what the function returns as
    a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Expressions and operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section explains how **expressions** and **operators** work in JavaScript,
    with a focus on what we are going to use the language for—programming websites.
    So do not expect an in-depth explanation of all bitwise operators, for instance.
    If you do not understand what I just said, that is perfectly OK. But if you need
    to know what they are, you will also need another book or reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'An expression is part of a JavaScript statement, often the part on the right-hand
    side of the `=` operator, that the JavaScript interpreter can evaluate. The result
    will be the value of the expression. The simplest expressions we already know:
    values and variables. In the following example, `i + 7` is also an expression.
    It will evaluate as 8\. It contains an operator, `+`, in the middle. The other
    parts to the left and right of it can be called **operands**.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will now go over the most essential operators. To those of you who already
    know C, C++, or Java, they will look very familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the group of operators used to calculate things.
  prefs: []
  type: TYPE_NORMAL
- en: Addition(+)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `+` operator adds the values of the two operands, that is, if they are
    numbers, as is the case in the previous example. What if they are not numbers,
    will the program hang? Not at all. Remember, you are going to use JavaScript to
    programmatically modify web pages. Web pages, in turn, consist of HTML, which
    are a lot of strings. So our plus operator has just become one of the most useful
    tools you have. Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: So, in JavaScript, the plus operator can be used to glue, or, to use a more
    technical term, `concatenate` strings together. We will encounter the same feature
    in PHP but there the operator is the dot (`.`). It is never too soon to get used
    to the difference, as you will use these a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In one of the examples, we used a special case of the `+` operator. `counter++;`
    is a shorthand notation people are familiar with from languages like C, that both
    JavaScript and PHP support. It is a shorthand notation to simply add `1` to a
    variable''s value. So the following two statements are identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Subtraction (-)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Everybody who has ever used a calculator knows the minus sign. It is used to
    subtract numbers. While the `+` sign could also be used with strings, that does
    not make sense with subtractions (nor multiplications or divisions). There is
    also a shorthand notation like `++` which looks like"`—`".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: They are indeed also the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have used one example with more than two operands, the one line
    statement we used to compose an HTML string. But what happens if we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Will it be 0, or will it be 4? It is 0 because the expression is evaluated
    left to right, but you can remove all doubt by using parentheses. Take a look
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Multiplication (*)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `*` operator multiplies its two operands.
  prefs: []
  type: TYPE_NORMAL
- en: Division (/)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `/` operator divides its first operand by its second. The result is always
    a floating point number so 5 / 2 evaluates as 2.5\. In some languages, this would
    be two if both operands were integers.
  prefs: []
  type: TYPE_NORMAL
- en: Modulo (%)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `%` operator is extremely useful. It returns the first operand modulo the
    second operand. For instance, 5%2 evaluates as 1, as the quotient of the division
    5/2 as an integer is 2 and the remainder is 1\. I often use it in styling when
    I want to do something different for even things than odd things. Using `if (number%2)`
    in your code would mean odd, because it is true if the value between the parentheses
    is not zero.
  prefs: []
  type: TYPE_NORMAL
- en: Relational operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A common mistake in programming is to use things like `if ( a = b)` to compare
    two things and discover that it is always true even if `a` is not equal to `b`.
    This is because in many languages, including JavaScript and PHP, a single equal
    sign is the assignment operator. To check to see if two things are equal, you
    need (at least) two equal signs. The expressions using the operators listed next
    will evaluate as true or false, and in JavaScript the corresponding values are
    not `1` or `0`, but actually `true` or `false`. Here they are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Equal ( `==` ): This one we use in an expression to see if two variables contain
    equal values, for instance if (`a == b`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not Equal ( `!=` ): Of course this is for the opposite: `true` if they are
    not equal, `false` if they are'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less than ( `<` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less than or equal( `<=` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater than( `>` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater than or equal( `>=` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not ( `!` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This converts false to true and vice versa when placed in front of an expression.
    This can help a lot in making your program more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, such expressions are not very helpful when used in isolation. They
    need to be part of some construct where we add control to make our program do
    something different if the expression evaluates as false as opposed to true.
  prefs: []
  type: TYPE_NORMAL
- en: Control flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Control flow** is the heart of programming. A control flow statement helps
    determine which part of the code that follows it is executed and which is not.
    The most commonly used control flow statement in any language is probably the
    `if-else` statement. We will guide you through the most useful ones in JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: We learned what an expression is. I also referred to a line of JavaScript code
    (ending with a semicolon) as a statement. You can group statements together by
    putting curly braces ( `{` and `}` ) around them. Such a group of statements is
    called a **statement block**. It is considered best practice to use curly braces
    even if there is only a single statement, when used in one of the controls described
    next, where the word statement represents a statement block.
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The format of an `if` statement is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also combine `if` with `else`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: while
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whereas an `if` statement is your basic control statement to do something, depending
    on a condition or something else, the `while` statement is perfect for creating
    a loop. A loop is a series of statements that are repeated as long as (or `while`)
    a certain condition is true. It is important to make sure that your condition
    is not forever true, otherwise you end up with an `infinite` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And next is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The result of this code will be a pop-up of a string that contains the letter
    a 100 times.
  prefs: []
  type: TYPE_NORMAL
- en: switch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I like the `switch` statement. If you have to execute different code depending
    on more than 2 different possible conditions, using a switch statement makes for
    more readable and maintainable code than multiple `if`/`else` statements. Typically,
    the expression that is evaluated will be a variable and then there will be several
    statements that are executed in `case` the value of the variable is `value1`,
    `value2`, `value3`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'It goes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: First, the expression is evaluated. Depending on the value of the expression,
    the statement that belongs to the matching value is executed. If there is no match,
    the statement associated with `default:` is executed. The `break;` statements
    are important, yet not mandatory. In a switch statement, the first statement block
    that is executed is the one that belongs to the first match. If the `break;` statement
    is omitted, subsequent statements are executed as well and that is not usually
    what we want. I usually write a skeleton of a switch statement, including `case:`
    and `break;` first and then fill it out with real code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us look at an example and have some fun with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already used some **functions** in our examples. A function is a piece of
    JavaScript code that you have either written on your own or is predefined by the
    JavaScript implementation. A function may be passed arguments, also called **parameters**.
    Following is an example of our own function to calculate the square root of the
    number that is passed as the first and only argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`square` is the name of the function. It consists of all the code that is in-between
    the curly braces. We call it a `function` block. Once the function is written,
    it can be used over and over again. The function in this example actually returns
    a value as well; in this case the square root of the argument. This is done by
    using a `return` statement: `return sq;`. Note that there are no parentheses after
    the `return` keyword, as is the case in other programming languages. That would
    imply that there would be a return `function`! So let us use our function a few
    times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can use the function before and after the declaration. We
    can store our message in a variable first or pass it along to the `alert()` function
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: Scope of variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point in the chapter, where we introduce functions, it is a good time
    to explain a very important concept: the **scope of variables,** and the notion
    of **global** versus **local** variables.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have been practicing, I sincerely hope that you have diligently declared
    all your variables using the `var` keyword. But what if you forgot it somewhere?
    Well, in that case, you have, by mistake or not, declared a global variable. So
    the scope, which is the region of your JavaScript program where that variable
    can be used, is everywhere and we call that global.
  prefs: []
  type: TYPE_NORMAL
- en: Variables declared with the `var` keyword have a local scope. Local variables
    are defined only within the body of the function where they are declared. Variables
    that are passed as arguments to a function also have the local scope, and are
    defined only within the body of that function.
  prefs: []
  type: TYPE_NORMAL
- en: If you declare a local variable or use a parameter with the same name as an
    already existing global variable, that local variable will in fact "hide" the
    global variable from you while you are inside the function. But if, inside a function,
    you assign a value to a variable without declaring it first, you may have just
    overwritten a value that is needed elsewhere in the program. That is why it is
    important to declare all your variables in the beginning of the function. Take
    a few minutes to study the following example and it will all become clear.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Early on in this chapter, I mentioned that variables can contain almost anything:
    numbers, strings, or even complete employee records. But in the examples we have
    seen so far, there does not seem to be a suitable container for things as complex
    as employee records. This is where **objects** fit in. And here we will learn
    how to create them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objects are collections of named values, and they are created using a special
    function called a **constructor**. There are several such functions supplied with
    JavaScript. There is a generic one, `Object()`, but there are also specific ones
    to create objects of a predefined structure, such as `Date()` or `String()`. The
    syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have created an empty object called employee that we can fill up with
    names and values, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the context of JavaScript objects, these names are referred to as **properties**.
    Properties in turn have values. Objects can also contain functions that can be
    used to do things with what is inside an object. Such functions are called **methods**.
    The `String()` object for instance, contains quite a number of string manipulation
    methods. Consulting a good reference book or online reference on JavaScript Objects
    can result in having to write a lot less code, because it is all there already.
    Following is an example of a **String** method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: JSON
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is another way to create objects, without the need of a constructor function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The right hand side matches a format for data named **JavaScript Object Notation**
    (**JSON**). We are dedicating an entire chapter on JSON in this book, where we
    will convince you that it is the coolest data format to use; so more about JSON
    later.
  prefs: []
  type: TYPE_NORMAL
- en: DOM objects, properties, methods, and events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We walked you through the basics of JavaScript objects and will now get to the
    essence of client-side JavaScript—programming the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: The Window object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are running a webpage in a browser, there are two objects available
    to you—**Window object** and **Document object**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Window object gives us access to the properties and methods that can tell
    us about the status of the window that is used to render the webpage. We already
    used one such method in every single example: `alert()`. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This is actually short for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar useful methods for creating a dialog box are `prompt` and `confirm`.
    The former displays a dialog box that prompts the visitor for input; the latter
    displays a dialog box with a message and an **OK** and **Cancel** button. Refer
    to the next example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The window object has some interesting properties as well. You want to know
    how many pixels wide the current window is? You can access that by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The single most important property of the window object is in turn an object
    - the DOM Document object.
  prefs: []
  type: TYPE_NORMAL
- en: The Document object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**window.document** (but you do not have to write the window part) is a property
    that gives you an object, which contains the entire webpage that is loaded by
    the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: write and writeln methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most of our examples, we used the window `alert()` method to display a popup
    box with some text. Useful as this may be for testing or debugging, it can be
    annoying because you have to click the box away before you see the next line of
    text. Most textbooks will use the document methods `write` and `writeln` instead.
    With these methods, you can write your message text straight into your document.
    `writeln` differs from write only in the manner that it adds a new line after
    each statement. Simply try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Nodes and DOM traversing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use document methods to walk through or traverse our document and change
    it. You need to think of the document as a tree with nodes. What is attached to
    these nodes are your HTML tags with their attributes and inner HTML text. With
    dedicated methods, we can look for parts of our document. A **node** or **node
    list** is what they return (sometimes there is only one matching tag, sometimes
    there are more). Then, by changing the properties of these nodes or using other
    methods, we can effectively change the content or layout of our document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three useful methods for looking up things in the document tree are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getElementById` : find the node with the id specified as argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getElementsByClassName` : get the node(s) with the class set to argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getElementsByTagName` : get all node(s) where the HTML tag equals argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A useful property is the `innerHTML` property, which allows you to get or set
    the HTML text inside an HTML tag. Using these ingredients, we can cook up the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This simple HTML document, yet another `Hello, World` example, gets modified
    immediately using JavaScript, and the only thing we ever see rendered by the browser
    is `Hello, Beach`. This is not very exciting. If, however, we let the user decide
    when to change the text, trigger an event, and have our code react to that event,
    then we effectively add action to our webpage.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Events** are things that happen to elements inside the DOM. They can be triggered
    by the browser or by the user. User controlled events can be:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing an input field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving a mouse over an area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on a link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can attach an event handler to such tags that contain the code that needs
    to be executed. In the next example, we do so by adding an `event` attribute to
    the element. You can achieve the same by using the document `addEventListener()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The difference between the two examples is that we have added a button with
    an `onclick` attribute, which we have given the name of a JavaScript function
    as value, and placed our JavaScript code inside a function of the same name. Now,
    not until a user clicks the **Beach** button, **Hello, World** will turn into
    **Hello, Beach**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you are probably thinking, now I have arrived at the hard part
    and I am going to get lost soon. I have good news for you! You are not going to
    get lost because you have already reached the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We started with a brief overview of the features of a programming language.
    Next, we laid out what these are for JavaScript, while explaining why we need
    this language and how we are going to use it: to program webpages. To achieve
    that, we need an easy way to access all the elements in a webpage.'
  prefs: []
  type: TYPE_NORMAL
- en: Well, we already learned how to access elements of a page in the previous chapter
    through the use of **selectors**.
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery**, a popular and proven JavaScript library, is what we are going to
    use mostly for our client-side JavaScript. It lets you use CSS-style selectors
    to specify the elements we want to reach, even attach events to it, so we do not
    have to learn something new or/and have the size of this book approach that of
    `War` and `Peace`. jQuery has several other advantages, which we will describe
    in [Chapter 7](ch07.html "Chapter 7. jQuery"), *jQuery*. That includes a cool
    interface to switch between the *client* and the *server*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For that reason, we are not diving into jQuery right away. We need to understand
    why we also need server-side programming. We are going to learn that in the next
    chapter and, at the same time, learn the second programming language of this book:
    **PHP**.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
