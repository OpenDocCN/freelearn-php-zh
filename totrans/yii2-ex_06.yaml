- en: Chapter 6. Using a Grid for Data and Relations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: DataProvider for grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom columns in grids:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: displaying a reservations list by clicking on a customer grid
    row'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters in GridView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying and filtering ActiveRecord relational data in a grid's column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Summarizing the footer row in a grid:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: extending GridView to customize the footer row in a grid'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiple grids on one page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: managing reservations and room grids in the same view'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned how to get data from databases. Now it
    is time to use a fundamental widget provided by framework: GridView. The first
    topic we''ll cover is data input format expected by a grid. Then we will analyze
    the default implementation of a grid and proceed to look at customizations to
    display the relationship between data. Finally, you will learn to extend the grid
    base class to display everything we need in a grid layout.'
  prefs: []
  type: TYPE_NORMAL
- en: DataProvider for grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GridView is the widget provided by Yii2 to display data in a grid layout.
  prefs: []
  type: TYPE_NORMAL
- en: This widget requires that data used as an input source is an extension of the
    abstract class `yii\data\BaseDataProvider`.
  prefs: []
  type: TYPE_NORMAL
- en: To deal with a data source, DataProvider supplies some additional actions to
    handle pagination and sorting.
  prefs: []
  type: TYPE_NORMAL
- en: '`BaseDataProvider` has a method named `getModels()` that returns a list of
    items for the current page. This means that we could also use DataProvider to
    paginate data from a source and display it as we need to.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the framework has three core classes that extend `yii\data\BaseDataProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yii\data\ActiveDataProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yii\data\ArrayDataProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yii\data\SqlDataProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first one, `ActiveDataProvider`, uses a `yii\db\Query` instance from ActiveRecord
    as a data source. The parameter array is passed to the constructor and the `yii\db\Query`
    object is filled out in the `query` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`ActiveDataProvider` is the most used DataProvider, since it depends directly
    on ActiveRecord, the best way to interact with databases.'
  prefs: []
  type: TYPE_NORMAL
- en: The second point, `ArrayDataProvider`, uses an array of items that can be sorted
    or paginated as a data source. This provider is employed when data can not be
    represented with ActiveRecord, for example, when they are taken from another data
    source, such as a JSON REST service or RSS feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary difference between `ActiveDataProvider` is that all data should
    be immediately passed to a construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this snippet, we took data from an ActiveRecord to show the differences between
    `ActiveDataProvider` and `ArrayDataProvider`. For this last provider, all the
    modes should be passed to the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: So, if the `Room` table has 10,000 records, with `ActiveDataProvider` 35 items
    at a time will be loaded, while through `ArrayDataProvider` they will be loaded
    all from scratch (with big performance issues).
  prefs: []
  type: TYPE_NORMAL
- en: 'The last one, `SqlDataProvider`, uses a SQL query as a data source. If we create
    pagination with this provider, we will need to also pass the `totalCount` attribute
    to the constructor to inform DataProvider how many records the SQL query should
    return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using a grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know how to get a data input source to pass to GridView, let''s
    look at how to implement it. Minimal implementation of GridView requires two attributes
    for an array passed to a constructor: `dataProvider` and `columns`. The first
    parameter, `dataProvider`, is the one we want to use in order to manipulate the
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second parameter, `columns`, represents the columns of the table to be
    displayed, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will display a table with data from `$dataProvider` and five columns:
    `id`, `floor`, `room_number`, `available_from`, and `price_per_day`; the last
    two columns are formatted firstly using `datetime` and secondly using `currency`.
    Colons are used to specify the formatter to be applied to the column data.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aspect of the table can be customized with many attributes and by default,
    the table layout is rendered using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Columns in the grid table can be identified using strings, but in general they
    are configured in terms of `yii\grid\Column` classes.
  prefs: []
  type: TYPE_NORMAL
- en: Custom columns in a grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous paragraph, the `columns` property of the GridView
    widget is mainly filled with strings.
  prefs: []
  type: TYPE_NORMAL
- en: When we need to apply a specific format, such as currency or date/time, we can
    append this specification to the column name with a colon and the type used for
    formatting, as `currency` or `datetime`.
  prefs: []
  type: TYPE_NORMAL
- en: But the most general form of a GridView column is an object of the `yii\grid\Column`
    class, derived by the `yii\grid\DataColumn` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'A GridView column extended by the `yii\grid\Column` class is rendered using
    an array with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are also other parameters but these ones are the most used.
  prefs: []
  type: TYPE_NORMAL
- en: Example – displaying a reservations list by clicking on a customer grid row
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now ready to create a customer grid that contains a reference to the
    linked reservation list in every row. First of all, make sure that the structure
    and the data for the customer and reservation tables is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new controller named `CustomersController` in `basic/controllers/CustomersController.php`
    with the `actionGrid` action to display a list in the grid view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This action `actionGrid` simply creates a data provider with all the data from
    the customer (unfiltered) and with a pagination that displays ten items on a page.
    Finally, render the grid view.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of the grid view in `basic/views/customers/grid.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last two columns require particular explanation.
  prefs: []
  type: TYPE_NORMAL
- en: The penultimate one, `Reservation`, displays a link to give you access to the
    list of all customer reservations. We have put `Reservations` as the header and
    filled the `content` property with dynamic data passed from the callback function,
    which returns an HTML link to the `reservations/index` route with a parameter
    indicating `customer_id` selected.
  prefs: []
  type: TYPE_NORMAL
- en: The last column headed `Actions` displays the ActionColumn with the single action
    `delete` to remove the selected record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Point your browser to `http://hostname/basic/customers/grid` and you should
    have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – displaying a reservations list by clicking on a customer grid row](img/B04656_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Customers grid using the GridView widget
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The language used in GridView is configured in `basic/config/web.php` with the
    `language` property. This property has a global effect on every core widget.
  prefs: []
  type: TYPE_NORMAL
- en: We can complete this example by just putting a counter near the `Reservations`
    link to indicate the number of reservations for each customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, we need to add a new relation named `getReservationsCount`
    to the Customer model in `basic/models/Customer.php`, which returns the number
    of reservations linked to the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can modify the penultimate column with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If we refresh our browser now, we will see near the `Reservations` anchor link,
    the correct number of reservations for that customer appears.
  prefs: []
  type: TYPE_NORMAL
- en: This example represents the complete reservations list displayed when a user
    clicks on the link `Reservations`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `ReservationsController` as a new file in `basic/controllers/ReservationsController.php`
    with an action `grid` and the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this controller, we applied an `andFilterWhere` condition to query whether
    `$_GET['Reservation']` is set. The `andFilterWhere()`method will apply a filter
    passed as a parameter only if the condition is not empty. So if `$_GET['Reservation']['customer_id']`
    is not set, the `andFilterWhere()` condition parameter will have a null value
    and will not be appended to any other query condition.
  prefs: []
  type: TYPE_NORMAL
- en: Filters in GridView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GridView has a core feature of being able to simplify filter rows just by putting
    an additional row below the header row.
  prefs: []
  type: TYPE_NORMAL
- en: Filters are mainly text input but in general they can be any type of control
    and we can customize them as much as we want.
  prefs: []
  type: TYPE_NORMAL
- en: Filters can be activated by filling out the GridView widget property `filterModel`
    with an instance of the model class and automatically a new row will be created
    below the header, containing working text inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Filter text inputs have a name attribute filled with the model class name, which
    includes the field name. In this way, we will pass data to a controller, including
    everything in a single array; a variable that can easily be used to populate a
    search model massively.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automatic text input filters are created only for attributes that belong to
    at least one rule in the `rules()` method of `ActiveDataProvider`; otherwise it
    is enough that attributes belong to the `safe` validator.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an example with the reservations grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will fill out the `filterModel` property to apply filters to GridView, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `$searchModel` is an instance of the `Reservation` model class that we
    will pass to the view from the grid action of `ReservationsController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create `actionGrid()` in `ReservationsController` in `basic/controllers/ReservationsController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$searchModel` instance is filled with the content of `$_GET[''Reservation'']`,
    in line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, `$query` is updated with the content of non-null attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that the ActiveRecord's `load()` method will get values from the array
    enclosed in the model class name, applied as the key to the array passed as the
    first function parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to `http://hostname/basic/reservations/grid` and type `2` in the **Room
    ID** column filter (the second column). This should be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filters in GridView](img/B04656_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using filters in the GridView widget
  prefs: []
  type: TYPE_NORMAL
- en: We can also choose to customize the way we render a filter. Imagine using the
    **Room ID** column filter as a drop-down list instead of an input textbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need to fill out the `filter` property of **Room ID** with `dropDownList`.
    It is advisable to use the `Html` helper class to render `dropDownList` using
    the `activeDropDownList()` method. The `active` prefix stands for ActiveRecord.
    This method `dropDownList()` requires three parameters: the model class, the attribute
    of the model class, and finally an array key-value where `key` is the value attribute
    of the `<option>` tag and `value` is the text of the `<option>` tag.'
  prefs: []
  type: TYPE_NORMAL
- en: We will use `yii\helpers\ArrayHelper` to create the array key-value, where the
    key is the `id` attribute of the model and the value is the return value of a
    callback function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the file in `basic/views/reservations/grid.php` changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the expected output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filters in GridView](img/B04656_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: GridView with the dropdown list filter
  prefs: []
  type: TYPE_NORMAL
- en: Displaying and filtering ActiveRecord relational data in a grid's column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now focus on relational data in GridView, a common topic that is easily
    solved by itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think about the reservations grid, which has two relational fields: `room_id`
    and `customer_id`, referring respectively to room and customer tables. What if
    we want to immediately display the customer''s surname, or room number?'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our goal is to display relational data, for example, the customer's
    surname instead of `customer_id` in GridView. Fields that refer to related data
    are expressed with the `relation` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In the reservation grid view, `customer` is the relation to get a related customer
    and `surname` is the field to keep.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, to display the customer''s surname, it is enough to insert this
    column (as a string) in the reservations grid view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A column named `surname` will be displayed. If we want to change column name
    to `Customer`, we use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could use custom properties to get data, for example, `getnameAndSurname`
    to get the personal details of a specific customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert a new property in the `Customer` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then this will be the column in the GridView:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We now want to filter the `Customer` column. Since the `customer.surname` attribute
    is not in the `rules()` method of the `Reservation` model, we need to extend this
    class to handle extra attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, create a new class named `ReservationSearch` in `basic/models/ReservationSearch.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This extension simply adds a new attribute and a new rule attached to this attribute.
    The name of the attribute is `customer.surname`.
  prefs: []
  type: TYPE_NORMAL
- en: We now have to change the `actionGrid()` action in `ReservationsController`
    to make a connection to the `customer` table that permits us to filter based on
    the customer's surname.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of `actionGrid()` of `ReservationsController` in `basic/controllers/ReservationsController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful to ensure that `$searchModel` is instanced from the `ReservationSearch`
    class, as much as `$_GET`, parameter used to get data is instanced from `ReservationSearch`
    instead of `Reservation` (because it has changed class).
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering an action on the customer''s surname in `actionGrid()` is made using
    these lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We make a join and if the `customer.surname` attribute is not null, then there
    will be a new filter. Browse to `http://hostname/basic/reservations/grid` and
    type `Fo` in the **Customer** column filter. You should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying and filtering ActiveRecord relational data in a grid''s column](img/B04656_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Filtering using relational data
  prefs: []
  type: TYPE_NORMAL
- en: A summarized footer row in a grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One feature of GridView is that it shows summarized or statistical data, usually
    as a footer row or first row, to get the data immediately (instead of scrolling
    down the page to the bottom of the grid).
  prefs: []
  type: TYPE_NORMAL
- en: A column of the GridView widget has an attribute named `footer` to identify
    the last row of the current pagination. A value filled in this attribute will
    be placed in the last row of the grid.
  prefs: []
  type: TYPE_NORMAL
- en: By default, showing the footer is disabled; to enable the footer, it is enough
    to set the attribute `showFooter` of GridView to `true`. Then, we need to insert
    data in the 'footer' attribute of the column that we want to show.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we want to display the average price per day of rooms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code at the top of the grid view in `basic/views/reservations/grid.php`
    to calculate the average of price per day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Be careful! In this example, `count` is made using the models of the current
    pagination. If the grid is composed of more pages, it will only show the average
    value for the current page!
  prefs: []
  type: TYPE_NORMAL
- en: 'This count can consider all records (also filtered ones), making the calculation
    based not only on the models of the current pagination but also on the result
    of a query. Add the average count in `actionGrid()` of `ReservationsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The average is calculated from the `average()` method of the `$query` object
    (so the filter will be considered, if it is filled out) and passed to the view,
    so the code at the top of the view to execute calculation is no longer needed
    because we have correctly moved it to the Controller action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then change the `footer` content of the `price_per_day` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now the average count will be independent of pagination.
  prefs: []
  type: TYPE_NORMAL
- en: Example – extending GridView to customize the footer row in a grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a highly customized GridView, it is required to show data in positions not
    handled by default by GridView, or it is required to apply specific changes (such
    as merging a column).
  prefs: []
  type: TYPE_NORMAL
- en: In either of these cases and when it is impossible to create the desired output
    with attributes of GridView, it will be necessary to subclass the GridView widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GridView widget has specific methods to render different parts of it: `renderTableBody()`,
    `renderTableFooter()`, `renderTableHeader()`, `renderTableRow()`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Think about the previous example. Now, we also want to gather the first three
    columns in the footer to display the `Average` label, the unique value in the
    `price_per_day` column, and the last four columns with an empty space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new component that extends the `yii\grid\GridView` widget in `basic/components/GridViewReservation.php`
    with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This component just extends `yii\grid\GridView` and overrides the `renderTableFooter()`
    method to make the required customization (mainly merging cells). The only logic
    in this code is to find the `price_per_day` column, cycling the array of columns
    given by `$this->columns`, where `$this` refers to the GridView object.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple grids on one page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every Yii2 widget has so much encapsulated in it that using multiple GridView
    widgets is a simple activity that involves making few changes.
  prefs: []
  type: TYPE_NORMAL
- en: The only parameters indeed that are not customizable with the DataProvider model
    class are `pageParam` and `sortParam`, which define the current page index and
    the parameters used to order a grid.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, for example, that we have two GridViews filled with two different data
    providers, `$firstDataProvider` and `$secondDataProvider`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the controller, we will set the `pageParam` and `sortParam` parameters of
    each DataProvider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If we miss these definitions when changing a page or sorting a column, this
    action will also affect the other GridView in the same page because we have not
    distinguished the two grid view parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: managing the reservations and rooms grids in the same view'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of this example is to display both the reservations and rooms grids
    in the same page completely independent from each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `ReservationsController` in `basic/controllers/ReservationsController.php`,
    create a new action named `actionMultipleGrid()` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We have detached the reservations declaration from the rooms declaration in
    order to clearly distinguish each from the other. Be careful to ensure that you
    defined `sortparam` and `pageparam` for either of the DataProvider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we create a new view in `basic/views/reservations/multipleGrid.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The two grids are completely independent and we can now order or change a page
    without interfering with other grids.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we presented the GridView widget to display data, directly
    or relational. A fundamental topic when discussing GridView is DataProvider, which
    is a way to provide data to GridView. You learned how to get DataProvider from
    ActiveRecord, an array, or SQL, based on the available source.
  prefs: []
  type: TYPE_NORMAL
- en: After the first simple implementation of GridView, you comprehended the customization
    in a column and displayed the relational data coming from other tables, using
    an extension of the model class to add extra features as new attributes. Next,
    we illustrated how to filter data in GridView to select only specific rows.
  prefs: []
  type: TYPE_NORMAL
- en: Just before the end of the chapter, you saw how to show, summarize, and customize
    a footer and more in the GridView by subclassing the core widget `yii\grid\GridView`.
    Finally, the last topic concerned the use of more than one grid in the same page,
    with a special focus on the few changes that need to occur in order to avoid them
    interfering with each other.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn to customize the user interface with CSS,
    JavaScript, widgets, and tools such as Gii that are directly provided from the
    framework.
  prefs: []
  type: TYPE_NORMAL
