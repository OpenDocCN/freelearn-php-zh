- en: Chapter 10. Localize the App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to write a multilingual app. Localization, also known
    as Internationalization (I18N), takes care that a software application can be
    adapted and rendered in different languages without changes in the source code.
    This is particularly important in a web application where users speak different
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii provides powerful tools to handle this task, choosing from the file or
    database approach (according to the application''s complexity). We will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the default language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File-based translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using file-based translation for the entire website
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Placeholders formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DB-based translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – translating the room's description using DB
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the default language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Yii application uses two kinds of languages: source language and target language.'
  prefs: []
  type: TYPE_NORMAL
- en: Source language specifies the language employed to write the source code; the
    default setting is `en-US`, and it is advisable not to change this value since
    English is the most used and known language in software development. On the other
    hand, there is a target language used to display content to end users, and we
    are going to work specifically on this aspect.
  prefs: []
  type: TYPE_NORMAL
- en: 'This language can be set in the configuration file using the `language` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how to handle app localization in practice.
  prefs: []
  type: TYPE_NORMAL
- en: File-based translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most simple way to translate text messages from one language to
    another. Basically, there are one or more files for each language containing keywords
    with text representations; we will put these keywords in the source code where
    the framework will replace them with text.
  prefs: []
  type: TYPE_NORMAL
- en: The pairs of keyword-text translations are grouped by categories representing
    the filenames where they are stored. These pairs are array keys-values, where
    key indicates keywords, and value indicates text translations.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the path folder containing translations for a specific language
    is in `@app/messages/<language>/<category>.php`. Therefore, if we are writing
    translations for the `app` category and the `en-US` language, for example, the
    complete path for the translation file will be in `@app/messages/en-US/app.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Going to the source code, translations are activated using the `Yii::t()` static
    method that accepts four parameters, but only the first two are required; the
    first one is the category, and the second one is the message to translate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want to make an example where we will write a classic `Hello World!`
    in two languages: English and Italian. However, it will be just as easy to translate
    it in any other language.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Working on the previous basic templated project, write a new controller named
    `FileTranslatorController` in `basic/controllers/FileTranslatorController.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first two source code rows in `actionIndex()` will set the app language
    to `en-US`, and then they will store the content of `Hello World!` key of the
    `basic/messages/en-US/app.php` file in the `$englishText` variable.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the last two source code rows in `actionIndex()` will set the
    app language to `it-IT`, and then they will store the content of `Hello World!`
    key of the `basic/messages/it-IT/app.php` file in the `$italianText` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view content in `basic/views/file-translator/index.php` is simply as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to define file languages for English and Italian translations.
  prefs: []
  type: TYPE_NORMAL
- en: If the `messages` folder does not exist in `basic/messages`, we will just create
    it; then, create two new folders named `en-US` and `it-IT`. In each folder, add
    a new file named `app.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the file with the English translations in `basic/messages/en-US/app.php`,
    let''s write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While for Italian translations in `basic/messages/it-IT/app.php`, let''s write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can browse to `http://hostname/basic/file-translator/index` to view the
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Example – using file-based translation for the entire website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applying translations to the entire website is tedious, and, above all, there
    is a high possibility that you will miss some translations. Yii provides a powerful
    tool to automatically produce the message's PHP files for all the languages we
    want.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This powerful tool is a console command named `message`; therefore, we require
    a console access.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command requires two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a configuration file where we will indicate the `languages` property,
    or which languages we want to support in the project and the `messagePath` property,
    or rather, where to store translated messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launching the `message` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For step 1, go to the console, in the project's root folder, where the `yii`
    file is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are working on a basic template, we will launch the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter, `message/config`, is the action `config` invoked on the
    controller `message`, and the second parameter is the file path where we want
    to save the configuration (in this case, `config/i18n.php`, but we can write anything).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are working on an advanced template, we will launch the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The only difference is that, in the last command, we specified that the configuration
    file for message command translations is in `common/config` instead of the `config`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we open `config/i18n.php`, we should see the default configuration
    file for the `message` command that should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration is very clear to read, so we will only explain its main properties:
    `languages`, `messagePath`, and `except`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `languages` property defines which languages are supported in the web project.
    For example, we could write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command supports and autogenerates messages for the English, Italian,
    and French languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `messagePath` property defines where autogenerated messages should be saved.
    It is advisable to point to the `messages` folder (that must be created if it
    does not exist); in this way, we can write the following in the basic template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `__DIR__` refers to the `config` file folder, while in the basic template,
    it is the `basic/config` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have launched the `message` command, it will look for all folders and
    subfolders containing `.php` files, as indicated in the `only` property (only
    `.php` files will be processed).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in the project's root folder, there are some folders, such as `vendor`,
    not relevant for our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we will add the `/vendor` value to the `except` property, in order to indicate
    that the `message` command will not look inside this folder, in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For step 2, we will now try to launch the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It will find the `Yii::t` marker, defined in the `translator` property, in all
    the files in the folders and subfolders specified in the `sourcePath` property,
    considering the `except` property to exclude files and folders where we do not
    want to look.
  prefs: []
  type: TYPE_NORMAL
- en: The translated messages will be created (if they do not exist) in the `messagePath`
    folder, in our case, in the `messages` folder starting from the project's root
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: If there are no `Yii::t` markers in all the searched files, the relative language's
    subfolder will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, open `SiteController` in `basic/controller/SiteController.php`
    and change the `actionIndex` content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, relaunch the `message` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then, check the `basic/messages/en` folder. We will find an `app.php` file that
    contains the `this message must be translated` key to which we must fill the value
    to specify the translation.
  prefs: []
  type: TYPE_NORMAL
- en: Placeholders formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Yii:t` method is not only limited to replace strings with their translation
    in other languages, but it handles the specific formatting of source strings to
    support many kinds of generalization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, `Yii:t()` supports placeholders in the following two formats:'
  prefs: []
  type: TYPE_NORMAL
- en: String in the `{nameOfPlaceholder}` format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integer in the `{0}` format, and this type of placeholder is zero-based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value arrays to replace the placeholder are passed as the third parameter to
    the `Yii:t()` method.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we want to display a page with only `Hello World, I'm ...` by appending
    the custom name to the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `basic/controllers/FileTranslatorController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the view in `basic/views/file-translator/helloWorldWithName.php`
    simply with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It will display the `$text` value passed from the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Test it by pointing the browser to `http://hostname/basic/web/file-translator/hello-world-with-name`,
    also passing the `?name=` parameter, otherwise there will be no name at the end
    of the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Translations can be prepared using the `message` command that we have just
    seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will automatically create a new marker `Hello World! I\'m {name}` in the
    `basic/messages` subfolders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The placeholders can be specialized with two other attributes: `ParameterType`
    and `ParameterStyle`, adding a comma after `PlaceholderName`. So, the full form
    to specify a placeholder will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `ParameterType` can be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`number` : The ParameterStyle can be an integer, currency, percent, or custom
    pattern (for example, 000)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`: The ParameterStyle can be short, medium, long, full, or custom pattern
    (for example, dd/mm/yyyy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`: The ParameterStyle can be short, medium, long, full or custom pattern
    (for example, hh:mm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spellout`: There is no ParameterStyle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ordinal`: There is no ParameterStyle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration`: There is no ParameterStyle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most used message formatting is probably `plural`, and that allows us to
    specify different key strings based on the number passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, `=0` stands for the message to be displayed when `$n` is `0`, `=1` stands
    for the message to be displayed when `$n` is `1`, and `other` stands for the message
    to be displayed when `$n` is other than `0` and `1`.
  prefs: []
  type: TYPE_NORMAL
- en: DB-based translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii also supports database as a storage option for message translations.
  prefs: []
  type: TYPE_NORMAL
- en: It has to be explicitly configured in the `config/web.php` file if we are working
    in the basic template, or in `common/config/main.php`, if we are working in the
    advanced template.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add two more database tables to manage message sources and
    message translations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating database tables, as suggested in Yii''s official documentation
    at [http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html](http://www.yiiframework.com/doc-2.0/yii-i18n-dbmessagesource.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Table names can be customized in the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Table `source_message` will store all messages written with the source language;
    table `message` will store all translations; both tables are joined together by
    the `id` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example, let''s insert one record for each table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to apply some changes to the configuration. We need to insert
    the `i18n` property in the `components` section of the configuration in `config/web.php`
    (based on the basic template):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This component, i18n, uses `yii\i18n\PhpMessageSource` as a class by default,
    and has employed itself for file-based translation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want to display the message in Italian. Create a new action in `basic/controllers/FileTranslatorController.php`
    named `actionHelloWorldFromDatabase()`, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The view in `basic/views/file-translator/helloWorldFromDatabase` will show
    the `$text` content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Test it by pointing the browser to `http://hostname/basic/web/file-translator/hello-world-from-database`.
    If all is correct, we should see `Ciao Mondo dal Database!`, which is the Italian
    version of `Hello World from Database!`.
  prefs: []
  type: TYPE_NORMAL
- en: Example – translating room descriptions using DB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will show you how to translate the room's description using the
    database as the storage option. We will create models for `message` and `source_message`
    database tables, since we are going to use ActiveRecord to manage records in all
    the tables that control translations.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we are going to create models for `message` and `source_message` database
    tables using Gii. In the basic template, point the browser to `http://hostname/basic/web/gii`,
    and then go to the model generator. Gii will create `Message` and `SourceMessage`
    models in the `basic/models` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we want to create a form that contains descriptions both in the original
    language and in all other translations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, we will create a view in `basic/views/rooms/indexWithTranslatedDescriptions.php`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will check for other language translations using the `Yii::$app->i18n->translate`
    method that accepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message to be translated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters of messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is now time to add `actionIndexWithTranslatedDescriptions()` in `basic/controllers/RoomsController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have trouble accessing the URL, check the `access` property returned by
    the `behaviors()` method of this controller to ensure that this action is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: On top of this code, we will check whether the `$_POST` array is filled; in
    this case, we will get the `$sourceMessage` object from descriptions passed from
    the view. Next, we can create or update the message model for whatever language
    we want. In the end, we will also save the room object, eventually with its description
    field changed.
  prefs: []
  type: TYPE_NORMAL
- en: With this solution, anytime we want to change a description, a new record will
    be created since the text has been changed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have seen how to configure multiple languages in our app.
    We have found out that there are two storage options to handle internationalization:
    file and database. File is suggested for small projects and database for bigger
    ones.'
  prefs: []
  type: TYPE_NORMAL
- en: We have discovered how to grab placeholders from the entire website through
    the 'message' command from the console and how to create placeholders that contain
    formatting information.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have configured the database as a storage target for translations,
    and we have created a complete example to handle room description in different
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to create RESTful web services using
    the new integrated management of Yii 2.
  prefs: []
  type: TYPE_NORMAL
