- en: Chapter 4. Creating a Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章. 创建模块
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文件
- en: Registering blocks, helpers, and models
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册块、助手和模型
- en: Adding a new page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新页面
- en: Adding a layout file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加布局文件
- en: Adding a translation file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加翻译文件
- en: Adding a block of new products
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新产品的块
- en: Rewriting a core class
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写核心类
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When you take a look into the core code of Magento, you will see the modular
    architecture. Every concept is stored in a module. Magento is the combination
    of all the core modules. The advantage of a modular architecture is its extendibility.
    It is easy to add modules that extend or rewrite the core.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看 Magento 的核心代码时，你会看到模块化架构。每个概念都存储在一个模块中。Magento 是所有核心模块的组合。模块化架构的优势在于其可扩展性。添加扩展或重写核心的模块很容易。
- en: In this chapter, we will create a module using the most important things you
    need to know to extend Magento with a simple module.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个模块，使用你扩展 Magento 所需了解的最重要的事项。
- en: Creating files
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件
- en: When you want to create a module, the first step is to create the files and
    folders to register the module. At the end of this recipe, we will have a module
    that is registered but does not have functionality.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想创建一个模块时，第一步是创建注册模块所需的文件和文件夹。在本食谱的末尾，我们将有一个已注册但没有任何功能的模块。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open your IDE and navigate to the `app/code/local` folder. If the local folder
    is not there, create the `app/code/local` folder.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的 IDE 并导航到 `app/code/local` 文件夹。如果本地文件夹不存在，创建 `app/code/local` 文件夹。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In the following steps, we will create the files required to register a Magento
    module.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将创建注册 Magento 模块所需的文件。
- en: 'Create the module in `app/code/local` by creating the following folders:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/code/local` 中创建模块，通过创建以下文件夹：
- en: '`app/code/local/Packt`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt`'
- en: '`app/code/local/Packt/Helloworld`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Helloworld`'
- en: '`app/code/local/Packt/Helloworld/etc`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/code/local/Packt/Helloworld/etc`'
- en: '`Packt` is the namespace of the module and `Helloworld` is the name of the
    module.'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Packt` 是模块的命名空间，`Helloworld` 是模块的名称。'
- en: 'Register the module by creating the `Packt_Helloworld.xml` file in the `app/etc/modules`
    folder. Add the following content in this file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `app/etc/modules` 文件夹中创建 `Packt_Helloworld.xml` 文件来注册模块。在此文件中添加以下内容：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the main configuration file `config.xml` in the `etc` folder of the
    module. Add the following content in the file:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的 `etc` 文件夹中创建主配置文件 `config.xml`。在文件中添加以下内容：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Check the registration of the module by going to the backend. Go to **System**
    | **Configuration** | **Advanced** and check whether the module is present in
    the list. Make sure that you have cleared the Magento caches.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问后端检查模块的注册情况。转到 **系统** | **配置** | **高级** 并检查模块是否在列表中。确保你已经清除了 Magento 缓存。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When running the command `wiz module-list` in your command line, you will see
    a list of all the modules, including the version, code pool, and more. You can
    find more information about the Wiz command-line tool in the *Configuring the
    development tools* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Magento"), *Getting Started with Magento*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在命令行中运行 `wiz module-list` 命令时，你会看到所有模块的列表，包括版本、代码池等。你可以在 [第 1 章](ch01.html
    "第 1 章. 开始使用 Magento") 的 *配置开发工具* 食谱中找到有关 Wiz 命令行工具的更多信息。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Magento has three code pools. They are listed as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 有三个代码池。它们如下所示：
- en: '**Core**: The core pool contains the modules and classes of the Magento code.
    It is not recommended to change files in this directory because this will be overwritten
    when Magento is upgraded.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心**：核心池包含 Magento 代码的模块和类。不建议更改此目录中的文件，因为当 Magento 升级时，这些文件将被覆盖。'
- en: '**Community**: The community pool is for the Magento modules that are delivered
    by the community. They are mostly the free modules that you can download from
    Magento Connect.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区**：社区池是为社区提供的 Magento 模块。它们大多是你可以从 Magento Connect 下载的免费模块。'
- en: '**Local**: The local pool is for the custom modules such as the one we have
    created in this recipe.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地**：本地池是为自定义模块准备的，例如我们在这个食谱中创建的模块。'
- en: The first pool where Magento will search for the code is the local code pool.
    Next, it will look in the community code pool, and at last it will look in the
    core code pool.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 将首先在本地代码池中搜索代码。接下来，它将在社区代码池中查找，最后它将在核心代码池中查找。
- en: Registering blocks, helpers, and models
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册块、辅助和模型
- en: When we want to perform operations on our module, we have to use blocks, models,
    and helpers. In this recipe we will register these object types with the right
    class prefix.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要在我们的模块上执行操作时，我们必须使用块、模型和辅助。在这个菜谱中，我们将使用正确的类前缀注册这些对象类型。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the `config.xml` file of the `Packt_Helloworld` module. This file is located
    at `app/code/local/Packt/Helloworld/etc/config.xml`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`Packt_Helloworld`模块的`config.xml`文件。此文件位于`app/code/local/Packt/Helloworld/etc/config.xml`。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following steps, we will add configuration to the module to register
    the blocks, helpers, and models:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将向模块添加配置以注册块、辅助和模型：
- en: 'Register the blocks by adding the following configuration in the `config.xml`
    file. Add the following XML code as a child of the `<config>` tag:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`config.xml`文件中添加以下配置来注册块。将以下XML代码作为`<config>`标签的子标签添加：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create the `app/code/local/Packt/Helloworld/Block` folder.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`app/code/local/Packt/Helloworld/Block`文件夹。
- en: 'Repeat step 1 and step 2 to register the helpers and models. Your global tag
    will look similar to the code shown as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1和步骤2以注册辅助和模型。你的全局标签将类似于以下代码所示：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the `app/code/local/Packt/Helloworld/Helper` and `app/code/local/Packt/Helloworld/Model`
    folders.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`app/code/local/Packt/Helloworld/Helper`和`app/code/local/Packt/Helloworld/Model`文件夹。
- en: 'Create the helper class of the module by adding the following content to the
    `app/code/local/Packt/Helloworld/Helper/Data.php` file:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下内容添加到`app/code/local/Packt/Helloworld/Helper/Data.php`文件中，创建模块的辅助类：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A helper class always extends from the core helper to use the functions declared
    in this class.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 辅助类总是从核心辅助类扩展，以使用该类中声明的函数。
- en: 'Test your configuration with the Wiz command-line tool by running the following
    command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过Wiz命令行工具测试您的配置：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will see your registered models available in the Magento installation.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到你的注册模型在Magento安装中可用。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When you change something in a configuration XML file, make sure that you clear
    the Magento caches before testing your configuration. Otherwise, the changes will
    have no effect because the old configuration is cached.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在配置XML文件中更改某些内容时，确保在测试配置之前清除Magento缓存。否则，更改将没有效果，因为旧配置被缓存了。
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When these objects are registered, we can create classes in the `Block`, `Helper`,
    and `Model` folder. The classnames in these objects need to adhere to the following
    naming convention; otherwise, they can''t be found:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些对象被注册后，我们可以在`Block`、`Helper`和`Model`文件夹中创建类。这些对象中的类名需要遵循以下命名约定；否则，它们将无法找到：
- en: '`<Vendor Namespace>_<Modulename>_<Objectype>_<Classname>`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Vendor Namespace>_<Modulename>_<Objectype>_<Classname>`'
- en: Every folder name starting with `app/code/<codepool>` is used in the classname
    separated by an underscore. The last part is the name of the file. Every folder
    or file in the `Model`, `Block`, and `Helper` folder starts with a capital letter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以`app/code/<codepool>`开头的每个文件夹名都用于类名中，由下划线分隔。最后一部分是文件名。`Model`、`Block`和`Helper`文件夹中的每个文件夹或文件都以大写字母开头。
- en: Our helper class is located in `app/code/local/Packt/Helloworld/Helper`, so
    the classname is `Packt_Helloworld_Helper_Data`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的帮助类位于`app/code/local/Packt/Helloworld/Helper`，因此类名为`Packt_Helloworld_Helper_Data`。
- en: To load a model, we have to use the `Mage::getModel()` function. In the first
    parameter, we have to specify the classname, which is different from the real
    classname. To specify the `Packt_Helloworld_Model_Sample` class, we have to use
    `Mage::getModel('helloworld/sample')` to get an instance of this model.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载一个模型，我们必须使用`Mage::getModel()`函数。在第一个参数中，我们必须指定类名，这与实际类名不同。要指定`Packt_Helloworld_Model_Sample`类，我们必须使用`Mage::getModel('helloworld/sample')`来获取该模型的实例。
- en: We have registered our model as `helloworld`. The name of the model in the `Model`
    folder is `sample`. When you take a look at the `getModel()` function discussed
    previously, you see that the words `helloworld` and `sample` are in the argument
    of that function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将我们的模型注册为`helloworld`。`Model`文件夹中模型的名称是`sample`。当你查看之前讨论的`getModel()`函数时，你会看到`helloworld`和`sample`这两个词在该函数的参数中。
- en: The same syntax is used to get helpers and blocks. For helpers, we have to use
    the `Mage::helper()` function. For blocks, this syntax is used in the layout XML
    files or when we use the core functions to work with blocks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 获取辅助和块使用相同的语法。对于辅助，我们必须使用`Mage::helper()`函数。对于块，这种语法用于布局XML文件或当我们使用核心函数处理块时。
- en: Adding a new page
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新页面
- en: Now, we will do something visible with our module. We are going to add a page
    to our Magento shop, which we can use for several purposes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对我们的模块做一些可见的操作。我们将向我们的Magento商店添加一个页面，我们可以用它来执行多个目的。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have to add some configuration in the `config.xml` file and we will also
    create a controller file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在`config.xml`文件中添加一些配置，我们还将创建一个控制器文件。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following steps, we will add an extra page to the Magento installation
    by adding extra configurations in the `Packt_Helloworld` module:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将通过在`Packt_Helloworld`模块中添加额外的配置来向Magento安装中添加一个额外的页面：
- en: Open your IDE and navigate to the `module` folder.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的IDE并导航到`module`文件夹。
- en: 'Add the following configuration as a child of the `config` tag in the `config.xml`
    file of the module:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块的`config.xml`文件的`config`标签下添加以下配置：
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To create the controller file, we will create an `IndexController.php` file
    in `folder app/code/local/Packt/Helloworld/controllers/`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建控制器文件，我们将在`folder app/code/local/Packt/Helloworld/controllers/`中创建一个`IndexController.php`文件。
- en: 'Add the following content in this controller file. This will create two actions
    in the `IndexController` class:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个控制器文件中添加以下内容。这将创建`IndexController`类中的两个操作：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Clear the cache and test the controller that is available at the following
    locations:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并测试以下位置的控制器：
- en: '`http://magento-dev.local/helloworld/index/hello`, for the `helloAction` function'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://magento-dev.local/helloworld/index/hello`，对于`helloAction`函数'
- en: '`http://magento-dev.local/helloworld`, for the `indexAction` function'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://magento-dev.local/helloworld`，对于`indexAction`函数'
- en: The `helloAction()` function will display the string that we have set in the
    `echo` statement. The `indexAction()` function is a blank page, because we have
    no more code in this action.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`helloAction()`函数将显示我们在`echo`语句中设置的字符串。`indexAction()`函数是一个空白页面，因为我们在这个操作中没有添加更多的代码。'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The syntax of a Magento controller is shown as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Magento控制器的语法如下所示：
- en: '`<modulename or frontname>/<controllerName>/<actionName>`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`<modulename or frontname>/<controllerName>/<actionName>`'
- en: In our case, module name and front name is `helloworld`, the controller name
    is `index`, and the action name is `hello`, so we get `/helloworld/index/hello`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，模块名称和前端名称是`helloworld`，控制器名称是`index`，操作名称是`hello`，因此我们得到`/helloworld/index/hello`。
- en: Magento recognizes the controller files when a classname ends with the word
    `Controller`. This is the reason why the name of the class is `IndexController`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当类名以单词`Controller`结尾时，Magento会识别控制器文件。这就是为什么类名是`IndexController`的原因。
- en: The same rule applies for controller actions. The function's name needs to end
    with the word `Action`. The part that precedes `Action` is the name of the action.
    A function called `helloAction()` results in the `hello` part of the URL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的规则适用于控制器操作。函数的名称需要以单词`Action`结尾。`Action`之前的部分是操作的名称。名为`helloAction()`的函数会导致URL中的`hello`部分。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: While writing names of controllers and actions, make sure you keep a track on
    the capital letters of the class and function names. If you miss some capital
    letters, your code will not work.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写控制器和操作的名称时，确保你跟踪类和函数名称的首字母大写。如果你遗漏了一些大写字母，你的代码将无法工作。
- en: There's more…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: When we test the controller action, we will see a blank page. This is not wrong
    because there is no logic added in the controller action.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们测试控制器操作时，我们会看到一个空白页面。这并不错误，因为控制器操作中没有添加任何逻辑。
- en: 'If we want to see the frontend of the shop, we have to use the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想看到商店的前端，我们必须使用以下代码：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will start the layout system that will load the layout instructions. It
    is not always recommended to load the frontend as done in a POST action where
    you want to process the post and continue to the next page.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动布局系统，该系统将加载布局指令。通常不推荐在POST操作中加载前端，因为我们想要处理POST并继续到下一页。
- en: Adding a layout file
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加布局文件
- en: In this recipe, we will customize the frontend of our previously created page
    with a custom layout XML file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用自定义布局XML文件来定制我们之前创建的页面的前端。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For adding a layout file, we have to add some configuration in the `config.xml`
    file of the module and a layout XML file as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加布局文件，我们必须在模块的`config.xml`文件中添加一些配置，以及一个布局XML文件。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In the following steps, we will learn how to add a layout file to the Magento
    module.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将学习如何向Magento模块添加布局文件。
- en: 'Add the following configuration to your `config.xml` file to initialize the
    layout XML file. Add it as a child of the `<frontend>` tag:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下配置添加到您的 `config.xml` 文件中，以初始化布局 XML 文件。将其添加为 `<frontend>` 标签的子标签：
- en: '[PRE9]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create the `helloworld.xml` file in your theme layout folder in the `app/design/frontend/<package>/<theme>/layout/helloworld.xml`
    directory.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主题布局文件夹中的 `app/design/frontend/<package>/<theme>/layout/helloworld.xml` 目录中创建
    `helloworld.xml` 文件。
- en: 'In the `helloworld.xml` file, add the following content to test if the file
    is loaded:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `helloworld.xml` 文件中，添加以下内容以测试文件是否已加载：
- en: '[PRE10]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Reload a page in the frontend. The previous configuration will remove the header
    from every page in the frontend.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前端重新加载页面。之前的配置将从每个前端页面中删除标题。
- en: 'Remove the content from the `<default>` tag and create the `helloworld_index_hello`
    handle in the layout XML file. You can do this by adding the following XML code
    as a child of the `<layout>` tag:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `<default>` 标签中删除内容并在布局 XML 文件中创建 `helloworld_index_hello` 处理。您可以通过将以下 XML
    代码作为 `<layout>` 标签的子标签添加来实现这一点：
- en: '[PRE11]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For this page, we will configure the `2columns-right` layout. To do this, add
    the following configuration in the layout XML file as child of the `helloworld_index_hello`
    handle:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个页面，我们将配置 `2columns-right` 布局。为此，在布局 XML 文件中将以下配置作为 `helloworld_index_hello`
    处理的子标签添加：
- en: '[PRE12]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code in the `helloAction()` function of the controller to
    start the layout system:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器的 `helloAction()` 函数中添加以下代码以启动布局系统：
- en: '[PRE13]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Clear the Magento cache and navigate to the `http://magento-dev.local/helloworld/index/hello`
    page. You will see a page with a column towards the right-hand side.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除 Magento 缓存并导航到 `http://magento-dev.local/helloworld/index/hello` 页面。您将看到一个向右的列。
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you only place a `layout.xml` file in the `app/design/frontend/<package>/<theme>/layout`
    folder, it will not be loaded in Magento. To do this, we have to configure it
    in the `config.xml` file of our module as we have done in this recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只在 `app/design/frontend/<package>/<theme>/layout` 文件夹中放置一个 `layout.xml` 文件，它将不会被
    Magento 加载。为此，我们必须在我们的模块的 `config.xml` 文件中进行配置，就像在这个教程中所做的那样。
- en: The layout XML file (`helloworld.xml`) works in the same way as all other layout
    files work, as described in [Chapter 2](ch02.html "Chapter 2. Theming"), *Theming*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 布局 XML 文件（`helloworld.xml`）与其他所有布局文件一样工作，如第 2 章所述，*主题化*。
- en: There's more…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Adding a custom layout XML file adds a lot of possibilities for extending your
    installation. Copying an XML file to your theme and changing the required settings
    is the easiest way. However, if you want, add a custom layout file and manipulate
    the blocks in that file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 添加自定义布局 XML 文件为扩展您的安装提供了很多可能性。将 XML 文件复制到您的主题并更改所需的设置是最简单的方法。然而，如果您愿意，可以添加一个自定义布局文件并操作该文件中的块。
- en: The purpose of this method is to avoid double coding. A good reference of this
    way of modular theming can be found at [http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout](http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的目的是避免双重编码。关于模块化主题化这种方式的良好参考可以在 [http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout](http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout)
    找到。
- en: Adding a translation file
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加翻译文件
- en: In Magento, you can run a store in multiple languages so that your module is
    translatable to the configured languages. In this recipe, we will add a custom
    translate CSV file to our module where we can place the custom strings if needed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Magento 中，您可以在多种语言中运行商店，这样您的模块就可以翻译成配置的语言。在本教程中，我们将向我们的模块添加一个自定义的翻译 CSV 文件，以便在需要时放置自定义字符串。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have to add some configuration in the `config.xml` file
    of our module. Also, we have to create a translate CSV file in the `locale` folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们必须在我们的模块的 `config.xml` 文件中添加一些配置。此外，我们还需要在 `locale` 文件夹中创建一个翻译 CSV
    文件。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following steps, we will add configuration to the module so that we
    can translate the interface to multiple languages:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将向模块添加配置，以便我们可以将界面翻译成多种语言：
- en: 'Add the following configuration as a child of the `<frontend>` tag in the `config.xml`
    file of the `helloworld` module. This will initialize an extra `translate` file
    to the installation:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下配置作为 `helloworld` 模块的 `config.xml` 文件中 `<frontend>` 标签的子标签添加。这将初始化一个额外的 `translate`
    文件到安装中：
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We just configured our module to use the `Packt_Helloworld.csv` file. Create
    this file in the `app/locale/en_US` folder.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚配置了我们的模块以使用`Packt_Helloworld.csv`文件。在`app/locale/en_US`文件夹中创建此文件。
- en: 'Create a test translation in the controller. Add the following line in the
    `indexAction()` function of `IndexController`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器中创建一个测试翻译。在`IndexController`的`indexAction()`函数中添加以下行：
- en: '[PRE15]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Go to the appropriate page (`http://magento-dev.local/helloworld`). You will
    see that **Test translation packt** is printed as shown in the following screenshot:![How
    to do it...](img/3329OS_04_01.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往适当的页面（`http://magento-dev.local/helloworld`）。你会看到**Test translation packt**被打印出来，如下截图所示：![如何操作...](img/3329OS_04_01.jpg)
- en: 'Add the following content in the `Packt_Helloworld.csv` file:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Packt_Helloworld.csv`文件中添加以下内容：
- en: '[PRE16]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Clear the cache and reload the page. You will see that the output is changed
    to **Packt translation to test** as shown in the following screenshot:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载页面。你会看到输出已更改为**Packt翻译测试**，如下截图所示：
- en: '![How to do it...](img/3329OS_04_02.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3329OS_04_02.jpg)'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now, we will discuss the behavior of the translation function in Magento.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论Magento中翻译函数的行为。
- en: 'When calling the `__(''translate string'')` function, Magento will search for
    a translated string in the following resources:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`__('translate string')`函数时，Magento将在以下资源中搜索翻译字符串：
- en: The `core_translate translate.csv` file in the database table, present in the
    `app/design/frontend/<package>/<theme>/locale` folder
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库表中的`core_translate translate.csv`文件，位于`app/design/frontend/<package>/<theme>/locale`文件夹中
- en: Translate files located in `app/locale/<language>`
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译位于`app/locale/<language>`的文件
- en: If no matching string is found for the current language, Magento will return
    the string that is present in the first parameter of the `translate` function.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前语言没有找到匹配的字符串，Magento将返回`translate`函数的第一个参数中存在的字符串。
- en: If a string is found in a resource, Magento won't search further for that string.
    That means that a string that is in the `core_translate` table and the `translate.csv`
    file will be loaded from the database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在资源中找到一个字符串，Magento不会进一步搜索该字符串。这意味着在`core_translate`表和`translate.csv`文件中的字符串将从数据库中加载。
- en: 'The `translate` function is mostly called on the current object by using `$this->__()`,
    but this always refers to the `helper` function of that object. If `$this->__()`
    doesn''t work (mostly when you are in a class that doesn''t extend the abstract
    block, helper, or model), you have to call the `translate` function directly from
    the module''s `helper` class as shown in the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`函数通常通过使用`$this->__()`在当前对象上调用，但这始终指向该对象的`helper`函数。如果`$this->__()`不起作用（通常当你在一个不扩展抽象块、helper或模型的类中时），你必须直接从模块的`helper`类中调用`translate`函数，如下面的代码所示：'
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Adding a block of new products
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新产品块
- en: The module is now prepared for the real work. In the previous recipes, we prepared
    the module with the most common features. In this recipe, we will add a block
    of new products in our previously created page.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模块现在已准备好进行实际工作。在先前的菜谱中，我们用最常见的特点配置了模块。在这个菜谱中，我们将向之前创建的页面添加一个新产品块。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To create a custom block, we have to create a `Block` class in the `Block` folder
    of the `Packt_Helloworld` module, a layout instruction to add the block to our
    page, and a `phtml` template in our theme to style the HTML output of the block.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个自定义块，我们必须在`Packt_Helloworld`模块的`Block`文件夹中创建一个`Block`类，一个布局指令以将块添加到我们的页面，以及一个在主题中的`phtml`模板来样式化块的HTML输出。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe how to add a block with new products to the frontend:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何将带有新产品块的块添加到前端：
- en: Create the `block` class in `app/code/local/Packt/Helloworld/Block`. The name
    of the class is `Newproducts`, so we have to create a `Newproducts.php` file in
    this folder.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Packt/Helloworld/Block`中创建`block`类。类的名称是`Newproducts`，因此我们必须在此文件夹中创建一个`Newproducts.php`文件。
- en: 'Add the following content in the file. This will create a class that extends
    the `Mage_Core_Block_Template` class. This class will output a template if specified:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中添加以下内容。这将创建一个扩展`Mage_Core_Block_Template`类的类。如果指定，此类将输出一个模板：
- en: '[PRE18]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add the template to your theme `template` folder. This is in the `app/design/frontend/<package>/<theme>/template/helloworld`
    folder. Create the `newproducts.phtml` file in this folder.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板添加到您的主题`template`文件夹中。这位于`app/design/frontend/<package>/<theme>/template/helloworld`文件夹中。在此文件夹中创建`newproducts.phtml`文件。
- en: Add some HTML content such as `<h2>New Products</h2>` in this file.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件中添加一些HTML内容，例如`<h2>New Products</h2>`。
- en: 'Create a block in the `helloworld.xml` layout file by adding the following
    XML code in the `helloworld_index_hello` handle:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`helloworld_index_hello`处理程序中添加以下XML代码来在`helloworld.xml`布局文件中创建一个块：
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Clear the cache and go to the `http://magento-dev.local/helloworld/index/hello`
    page. You will see the **New Products** title in the content of the site.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并转到`http://magento-dev.local/helloworld/index/hello`页面。你将在网站的内容中看到**新产品**标题。
- en: 'Create the `getProducts()` function in the `block` class. This function will
    return the five latest products from the shop. The code for the `getProducts()`function
    will look as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`block`类中创建`getProducts()`函数。这个函数将返回商店中的五个最新产品。`getProducts()`函数的代码如下：
- en: '[PRE20]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this function, we will fire a query on the product collection. We sort it
    by date and limit the result to `5` so that we get the latest five products.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个函数中，我们将对产品集合执行查询。我们按日期排序并限制结果为`5`，以便我们得到最新的五个产品。
- en: 'Call the `getProducts()` function in the template and loop through the products
    to print them in a list. The template code is as follows:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中调用`getProducts()`函数，并通过循环产品来打印它们。模板代码如下：
- en: '[PRE21]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What we have done in this recipe is a basic extension of the standard Magento.
    We have created a custom block. This block is placed on a custom page created
    by the module.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们所做的是对标准Magento的基本扩展。我们创建了一个自定义块。这个块被放置在模块创建的自定义页面上。
- en: In this block, there is a function that returns the five most recent products
    and a query is fired to get these products. This is not done by SQL, but by using
    the Magento collections.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个块中，有一个返回五个最新产品的函数，并且会执行查询来获取这些产品。这不是通过SQL完成的，而是通过使用Magento集合。
- en: The purpose of using this is to get an easy interface to return the right entities.
    Since a product is not stored in one database table, this saves you from programming
    of a very complex SQL query.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个的目的在于获得一个简单的接口来返回正确的实体。由于产品不是存储在一个数据库表中，这可以节省你编写一个非常复杂的SQL查询。
- en: Rewriting a core class
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重写核心类
- en: In some cases, you want to change something about the standard behavior of Magento.
    When you see some code in a core class that you want to change, you have to follow
    this recipe.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想要更改关于Magento标准行为的某些内容。当你看到一些你想要更改的核心类中的代码时，你必须遵循这个菜谱。
- en: As it is not recommended to do changes in core files, we can rewrite the path
    of a class to a custom one that is a parent over the original class.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不建议在核心文件中进行更改，我们可以将类的路径重写为自定义的一个，它是原始类的一个父类。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will rewrite the core product model to a custom class in
    our module.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将把核心产品模型重写为模块中的一个自定义类。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following steps, we will change the output of the `getName()` function
    of a product:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中，我们将更改产品`getName()`函数的输出：
- en: The `getName()` function is called on the product detail page. Navigate to this
    page and open the `catalog/product/view.phtml` template.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getName()`函数在产品详情页上被调用。导航到这个页面并打开`catalog/product/view.phtml`模板。'
- en: When you search for `getName()` in the template, you see that this is done on
    the `$_product` variable. To know the class of this variable, you can debug this
    with `echo get_class($_product)`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在模板中搜索`getName()`时，你会看到这是在`$_product`变量上完成的。为了知道这个变量的类，你可以通过`echo get_class($_product)`来调试它。
- en: The output of this function returns the `Mage_Catalog_Model_Product` class.
    To rewrite this, we have to create an empty class in our `module` folder that
    extends the original one. Create a `Product.php` file in the `app/code/local/Packt/Helloworld/Model/Catalog/`
    folder.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个函数的输出返回`Mage_Catalog_Model_Product`类。为了重写它，我们必须在我们的`module`文件夹中创建一个扩展原始类的空类。在`app/code/local/Packt/Helloworld/Model/Catalog/`文件夹中创建一个`Product.php`文件。
- en: 'Paste the following code in that file:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个文件中粘贴以下代码：
- en: '[PRE22]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When rewriting a class, the best practice is to follow the folder structure
    of the original class in your module. In the `model` folder of the `Packt_Helloworld`
    module, we start with a `Catalog` folder (refers to the `Catalog` module). In
    this folder, you see the same file structure as in the original module.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当重写一个类时，最佳实践是遵循你模块中原有类的文件夹结构。在`Packt_Helloworld`模块的`model`文件夹中，我们从`Catalog`文件夹开始（指的是`Catalog`模块）。在这个文件夹中，你可以看到与原始模块相同的文件结构。
- en: 'When you clear the cache and reload the frontend, you will see that the output
    of the `get_class` function doesn''t change. This is because we didn''t add the
    rewrite configuration in the `config.xml` file. Open the `config.xml` file and
    paste the following code as a child of the `<models>` tag:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你清除缓存并重新加载前端时，你会看到 `get_class` 函数的输出没有改变。这是因为我们没有在 `config.xml` 文件中添加重写配置。打开
    `config.xml` 文件，并将以下代码作为 `<models>` 标签的子标签粘贴：
- en: '[PRE23]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When you want to rewrite a `block` class, you have to paste a similar configuration
    as a child of the `<blocks>` tag. Similarly, for `helper`, paste the configuration
    under the `<helpers>` tag.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你想重写一个 `block` 类时，你必须将类似的配置作为 `<blocks>` 标签的子标签粘贴。同样，对于 `helper`，将配置粘贴到 `<helpers>`
    标签下。
- en: Clear the cache and reload the product page. You will see that the output of
    the `get_class` function is changed to the class we have just created.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存并重新加载产品页面。你会看到 `get_class` 函数的输出已更改为我们刚刚创建的类。
- en: 'When the new class is loaded, it is just a case of overwriting the function
    you want to change in this file. When we want to change the `getName()` function,
    we have to add the old function in this class and change some behavior. When you
    paste the following code in the class, the name of the product will change:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当新类被加载时，只需覆盖此文件中要更改的函数即可。当我们想要更改 `getName()` 函数时，我们必须在此类中添加旧函数并更改一些行为。当你将以下代码粘贴到类中时，产品的名称将会改变：
- en: '[PRE24]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Reload the product page and you will see that the name of the product starts
    with **Packt**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载产品页面，你会看到产品的名称以 **Packt** 开头。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The best practice is that you don't rewrite a core class because changing the
    standard behavior of Magento could break the application in some cases. A more
    stable method is working with event handlers that are described in [Chapter 8](ch08.html
    "Chapter 8. Event Handlers and Cronjobs"), *Event Handlers and Cronjobs*.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是不要重写核心类，因为更改 Magento 的标准行为在某些情况下可能会破坏应用程序。一个更稳定的方法是与描述在 [第 8 章](ch08.html
    "第 8 章。事件处理器和计划任务") 的 *事件处理器和计划任务* 中的事件处理器一起工作。
- en: 'Unfortunately, in some cases it isn''t possible to work with events. So, you
    need to rewrite a core class. In this case, you have to do it as described in
    this recipe:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在某些情况下，无法使用事件进行操作。因此，你需要重写一个核心类。在这种情况下，你必须按照本食谱中描述的方式进行操作：
- en: Create an empty class that extends the original ones
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个扩展原始类的空类
- en: Paste the function in the class that you want to change
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数粘贴到你想要更改的类中
- en: Add the configuration in the `config.xml` file of your module to rewrite the
    core class
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的模块的 `config.xml` 文件中添加配置以重写核心类
- en: When the rewrite is added in the `config.xml` class, Magento will recognize
    the rewrite when the class is called with the Magento functions. For a model,
    this is the `Mage::getModel()` function where the first argument is the path to
    the model.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当重写在 `config.xml` 类中添加时，当使用 Magento 函数调用类时，Magento 将会识别重写。对于一个模型，这是 `Mage::getModel()`
    函数，其中第一个参数是模型的路径。
- en: When calling a class directly in the code as `$product = new Mage_Catalog_Model_Product()`,
    the rewrite will not work because an instance is returned from the `Mage_Catalog_Model_Product`
    class.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接在代码中调用类时，如 `$product = new Mage_Catalog_Model_Product()`，重写将不会生效，因为 `Mage_Catalog_Model_Product`
    类返回了一个实例。
