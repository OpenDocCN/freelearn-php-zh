- en: Chapter 4. Creating a Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering blocks, helpers, and models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a layout file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a translation file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a block of new products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewriting a core class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you take a look into the core code of Magento, you will see the modular
    architecture. Every concept is stored in a module. Magento is the combination
    of all the core modules. The advantage of a modular architecture is its extendibility.
    It is easy to add modules that extend or rewrite the core.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a module using the most important things you
    need to know to extend Magento with a simple module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to create a module, the first step is to create the files and
    folders to register the module. At the end of this recipe, we will have a module
    that is registered but does not have functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your IDE and navigate to the `app/code/local` folder. If the local folder
    is not there, create the `app/code/local` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following steps, we will create the files required to register a Magento
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the module in `app/code/local` by creating the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Helloworld/etc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Packt` is the namespace of the module and `Helloworld` is the name of the
    module.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Register the module by creating the `Packt_Helloworld.xml` file in the `app/etc/modules`
    folder. Add the following content in this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the main configuration file `config.xml` in the `etc` folder of the
    module. Add the following content in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the registration of the module by going to the backend. Go to **System**
    | **Configuration** | **Advanced** and check whether the module is present in
    the list. Make sure that you have cleared the Magento caches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running the command `wiz module-list` in your command line, you will see
    a list of all the modules, including the version, code pool, and more. You can
    find more information about the Wiz command-line tool in the *Configuring the
    development tools* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Magento"), *Getting Started with Magento*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Magento has three code pools. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core**: The core pool contains the modules and classes of the Magento code.
    It is not recommended to change files in this directory because this will be overwritten
    when Magento is upgraded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community**: The community pool is for the Magento modules that are delivered
    by the community. They are mostly the free modules that you can download from
    Magento Connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local**: The local pool is for the custom modules such as the one we have
    created in this recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first pool where Magento will search for the code is the local code pool.
    Next, it will look in the community code pool, and at last it will look in the
    core code pool.
  prefs: []
  type: TYPE_NORMAL
- en: Registering blocks, helpers, and models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to perform operations on our module, we have to use blocks, models,
    and helpers. In this recipe we will register these object types with the right
    class prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `config.xml` file of the `Packt_Helloworld` module. This file is located
    at `app/code/local/Packt/Helloworld/etc/config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will add configuration to the module to register
    the blocks, helpers, and models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the blocks by adding the following configuration in the `config.xml`
    file. Add the following XML code as a child of the `<config>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `app/code/local/Packt/Helloworld/Block` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat step 1 and step 2 to register the helpers and models. Your global tag
    will look similar to the code shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `app/code/local/Packt/Helloworld/Helper` and `app/code/local/Packt/Helloworld/Model`
    folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the helper class of the module by adding the following content to the
    `app/code/local/Packt/Helloworld/Helper/Data.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A helper class always extends from the core helper to use the functions declared
    in this class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test your configuration with the Wiz command-line tool by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see your registered models available in the Magento installation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you change something in a configuration XML file, make sure that you clear
    the Magento caches before testing your configuration. Otherwise, the changes will
    have no effect because the old configuration is cached.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When these objects are registered, we can create classes in the `Block`, `Helper`,
    and `Model` folder. The classnames in these objects need to adhere to the following
    naming convention; otherwise, they can''t be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Vendor Namespace>_<Modulename>_<Objectype>_<Classname>`'
  prefs: []
  type: TYPE_NORMAL
- en: Every folder name starting with `app/code/<codepool>` is used in the classname
    separated by an underscore. The last part is the name of the file. Every folder
    or file in the `Model`, `Block`, and `Helper` folder starts with a capital letter.
  prefs: []
  type: TYPE_NORMAL
- en: Our helper class is located in `app/code/local/Packt/Helloworld/Helper`, so
    the classname is `Packt_Helloworld_Helper_Data`.
  prefs: []
  type: TYPE_NORMAL
- en: To load a model, we have to use the `Mage::getModel()` function. In the first
    parameter, we have to specify the classname, which is different from the real
    classname. To specify the `Packt_Helloworld_Model_Sample` class, we have to use
    `Mage::getModel('helloworld/sample')` to get an instance of this model.
  prefs: []
  type: TYPE_NORMAL
- en: We have registered our model as `helloworld`. The name of the model in the `Model`
    folder is `sample`. When you take a look at the `getModel()` function discussed
    previously, you see that the words `helloworld` and `sample` are in the argument
    of that function.
  prefs: []
  type: TYPE_NORMAL
- en: The same syntax is used to get helpers and blocks. For helpers, we have to use
    the `Mage::helper()` function. For blocks, this syntax is used in the layout XML
    files or when we use the core functions to work with blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will do something visible with our module. We are going to add a page
    to our Magento shop, which we can use for several purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to add some configuration in the `config.xml` file and we will also
    create a controller file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will add an extra page to the Magento installation
    by adding extra configurations in the `Packt_Helloworld` module:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your IDE and navigate to the `module` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following configuration as a child of the `config` tag in the `config.xml`
    file of the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To create the controller file, we will create an `IndexController.php` file
    in `folder app/code/local/Packt/Helloworld/controllers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in this controller file. This will create two actions
    in the `IndexController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and test the controller that is available at the following
    locations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/helloworld/index/hello`, for the `helloAction` function'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/helloworld`, for the `indexAction` function'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `helloAction()` function will display the string that we have set in the
    `echo` statement. The `indexAction()` function is a blank page, because we have
    no more code in this action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax of a Magento controller is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<modulename or frontname>/<controllerName>/<actionName>`'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, module name and front name is `helloworld`, the controller name
    is `index`, and the action name is `hello`, so we get `/helloworld/index/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: Magento recognizes the controller files when a classname ends with the word
    `Controller`. This is the reason why the name of the class is `IndexController`.
  prefs: []
  type: TYPE_NORMAL
- en: The same rule applies for controller actions. The function's name needs to end
    with the word `Action`. The part that precedes `Action` is the name of the action.
    A function called `helloAction()` results in the `hello` part of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While writing names of controllers and actions, make sure you keep a track on
    the capital letters of the class and function names. If you miss some capital
    letters, your code will not work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we test the controller action, we will see a blank page. This is not wrong
    because there is no logic added in the controller action.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to see the frontend of the shop, we have to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will start the layout system that will load the layout instructions. It
    is not always recommended to load the frontend as done in a POST action where
    you want to process the post and continue to the next page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a layout file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will customize the frontend of our previously created page
    with a custom layout XML file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For adding a layout file, we have to add some configuration in the `config.xml`
    file of the module and a layout XML file as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following steps, we will learn how to add a layout file to the Magento
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following configuration to your `config.xml` file to initialize the
    layout XML file. Add it as a child of the `<frontend>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `helloworld.xml` file in your theme layout folder in the `app/design/frontend/<package>/<theme>/layout/helloworld.xml`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `helloworld.xml` file, add the following content to test if the file
    is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload a page in the frontend. The previous configuration will remove the header
    from every page in the frontend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the content from the `<default>` tag and create the `helloworld_index_hello`
    handle in the layout XML file. You can do this by adding the following XML code
    as a child of the `<layout>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For this page, we will configure the `2columns-right` layout. To do this, add
    the following configuration in the layout XML file as child of the `helloworld_index_hello`
    handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `helloAction()` function of the controller to
    start the layout system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the Magento cache and navigate to the `http://magento-dev.local/helloworld/index/hello`
    page. You will see a page with a column towards the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you only place a `layout.xml` file in the `app/design/frontend/<package>/<theme>/layout`
    folder, it will not be loaded in Magento. To do this, we have to configure it
    in the `config.xml` file of our module as we have done in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The layout XML file (`helloworld.xml`) works in the same way as all other layout
    files work, as described in [Chapter 2](ch02.html "Chapter 2. Theming"), *Theming*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a custom layout XML file adds a lot of possibilities for extending your
    installation. Copying an XML file to your theme and changing the required settings
    is the easiest way. However, if you want, add a custom layout file and manipulate
    the blocks in that file.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this method is to avoid double coding. A good reference of this
    way of modular theming can be found at [http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout](http://www.classyllama.com/development/magento-development/the-better-way-to-modify-magento-layout).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a translation file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Magento, you can run a store in multiple languages so that your module is
    translatable to the configured languages. In this recipe, we will add a custom
    translate CSV file to our module where we can place the custom strings if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have to add some configuration in the `config.xml` file
    of our module. Also, we have to create a translate CSV file in the `locale` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will add configuration to the module so that we
    can translate the interface to multiple languages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following configuration as a child of the `<frontend>` tag in the `config.xml`
    file of the `helloworld` module. This will initialize an extra `translate` file
    to the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We just configured our module to use the `Packt_Helloworld.csv` file. Create
    this file in the `app/locale/en_US` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a test translation in the controller. Add the following line in the
    `indexAction()` function of `IndexController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the appropriate page (`http://magento-dev.local/helloworld`). You will
    see that **Test translation packt** is printed as shown in the following screenshot:![How
    to do it...](img/3329OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in the `Packt_Helloworld.csv` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and reload the page. You will see that the output is changed
    to **Packt translation to test** as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will discuss the behavior of the translation function in Magento.
  prefs: []
  type: TYPE_NORMAL
- en: 'When calling the `__(''translate string'')` function, Magento will search for
    a translated string in the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: The `core_translate translate.csv` file in the database table, present in the
    `app/design/frontend/<package>/<theme>/locale` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translate files located in `app/locale/<language>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no matching string is found for the current language, Magento will return
    the string that is present in the first parameter of the `translate` function.
  prefs: []
  type: TYPE_NORMAL
- en: If a string is found in a resource, Magento won't search further for that string.
    That means that a string that is in the `core_translate` table and the `translate.csv`
    file will be loaded from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `translate` function is mostly called on the current object by using `$this->__()`,
    but this always refers to the `helper` function of that object. If `$this->__()`
    doesn''t work (mostly when you are in a class that doesn''t extend the abstract
    block, helper, or model), you have to call the `translate` function directly from
    the module''s `helper` class as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Adding a block of new products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module is now prepared for the real work. In the previous recipes, we prepared
    the module with the most common features. In this recipe, we will add a block
    of new products in our previously created page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a custom block, we have to create a `Block` class in the `Block` folder
    of the `Packt_Helloworld` module, a layout instruction to add the block to our
    page, and a `phtml` template in our theme to style the HTML output of the block.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how to add a block with new products to the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `block` class in `app/code/local/Packt/Helloworld/Block`. The name
    of the class is `Newproducts`, so we have to create a `Newproducts.php` file in
    this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content in the file. This will create a class that extends
    the `Mage_Core_Block_Template` class. This class will output a template if specified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the template to your theme `template` folder. This is in the `app/design/frontend/<package>/<theme>/template/helloworld`
    folder. Create the `newproducts.phtml` file in this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add some HTML content such as `<h2>New Products</h2>` in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a block in the `helloworld.xml` layout file by adding the following
    XML code in the `helloworld_index_hello` handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and go to the `http://magento-dev.local/helloworld/index/hello`
    page. You will see the **New Products** title in the content of the site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `getProducts()` function in the `block` class. This function will
    return the five latest products from the shop. The code for the `getProducts()`function
    will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this function, we will fire a query on the product collection. We sort it
    by date and limit the result to `5` so that we get the latest five products.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `getProducts()` function in the template and loop through the products
    to print them in a list. The template code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have done in this recipe is a basic extension of the standard Magento.
    We have created a custom block. This block is placed on a custom page created
    by the module.
  prefs: []
  type: TYPE_NORMAL
- en: In this block, there is a function that returns the five most recent products
    and a query is fired to get these products. This is not done by SQL, but by using
    the Magento collections.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of using this is to get an easy interface to return the right entities.
    Since a product is not stored in one database table, this saves you from programming
    of a very complex SQL query.
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting a core class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you want to change something about the standard behavior of Magento.
    When you see some code in a core class that you want to change, you have to follow
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: As it is not recommended to do changes in core files, we can rewrite the path
    of a class to a custom one that is a parent over the original class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will rewrite the core product model to a custom class in
    our module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following steps, we will change the output of the `getName()` function
    of a product:'
  prefs: []
  type: TYPE_NORMAL
- en: The `getName()` function is called on the product detail page. Navigate to this
    page and open the `catalog/product/view.phtml` template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you search for `getName()` in the template, you see that this is done on
    the `$_product` variable. To know the class of this variable, you can debug this
    with `echo get_class($_product)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output of this function returns the `Mage_Catalog_Model_Product` class.
    To rewrite this, we have to create an empty class in our `module` folder that
    extends the original one. Create a `Product.php` file in the `app/code/local/Packt/Helloworld/Model/Catalog/`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the following code in that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When rewriting a class, the best practice is to follow the folder structure
    of the original class in your module. In the `model` folder of the `Packt_Helloworld`
    module, we start with a `Catalog` folder (refers to the `Catalog` module). In
    this folder, you see the same file structure as in the original module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you clear the cache and reload the frontend, you will see that the output
    of the `get_class` function doesn''t change. This is because we didn''t add the
    rewrite configuration in the `config.xml` file. Open the `config.xml` file and
    paste the following code as a child of the `<models>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When you want to rewrite a `block` class, you have to paste a similar configuration
    as a child of the `<blocks>` tag. Similarly, for `helper`, paste the configuration
    under the `<helpers>` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear the cache and reload the product page. You will see that the output of
    the `get_class` function is changed to the class we have just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the new class is loaded, it is just a case of overwriting the function
    you want to change in this file. When we want to change the `getName()` function,
    we have to add the old function in this class and change some behavior. When you
    paste the following code in the class, the name of the product will change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the product page and you will see that the name of the product starts
    with **Packt**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best practice is that you don't rewrite a core class because changing the
    standard behavior of Magento could break the application in some cases. A more
    stable method is working with event handlers that are described in [Chapter 8](ch08.html
    "Chapter 8. Event Handlers and Cronjobs"), *Event Handlers and Cronjobs*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, in some cases it isn''t possible to work with events. So, you
    need to rewrite a core class. In this case, you have to do it as described in
    this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an empty class that extends the original ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paste the function in the class that you want to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the configuration in the `config.xml` file of your module to rewrite the
    core class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the rewrite is added in the `config.xml` class, Magento will recognize
    the rewrite when the class is called with the Magento functions. For a model,
    this is the `Mage::getModel()` function where the first argument is the path to
    the model.
  prefs: []
  type: TYPE_NORMAL
- en: When calling a class directly in the code as `$product = new Mage_Catalog_Model_Product()`,
    the rewrite will not work because an instance is returned from the `Mage_Catalog_Model_Product`
    class.
  prefs: []
  type: TYPE_NORMAL
