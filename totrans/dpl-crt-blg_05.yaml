- en: Chapter 5. Users, Roles, and Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to look at an entirely different aspect of running a Drupal website.
    Up until now we have focused on adding and organizing the site's basic functionality.
    We have not yet given any thought to how this functionality is to be accessed,
    or by whom. As the site grows, you will most likely feel the need to delegate
    certain responsibilities to various people. Alternatively, you might organize
    a team of people to work on specific aspects of the site. Whatever your needs,
    at some stage you will have to make decisions about who can do what, and the good
    people at Drupal have made sure that it is possible to do precisely this.
  prefs: []
  type: TYPE_NORMAL
- en: In the same vein as the previous chapter, having Drupal simplify the implementation
    of your access control policies does not mean that the task is a trivial one.
    There is still much thought that needs to go on behind the scenes in order to
    create a sophisticated, and above all, effective policy for controlling access
    to the site. Because of this, we will spend a bit of time exploring the ramifications
    of the various choices available, instead of simply listing them. Taking a holistic
    approach to your access control policy will ensure you don't end up with any nasty
    surprises down the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have now been working with Drupal for a little while we will start
    spreading our wings a bit and use some slightly more advanced methods provided
    by contributed modules. Specifically, this chapter will look at the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning an access policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions—including the use of the *Taxonomy Access Control* module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we continue, it is worth pointing out that at the moment you are more
    than likely using the administrative user (user number 1) for all the site's development
    needs. That is absolutely fine, but once you have finished making any major changes
    to the site, you should begin using a normal administrative user that has only
    the permissions required to complete your day-to-day tasks. The next section will
    highlight the general philosophy behind user access, which should make the reason
    for this clear.
  prefs: []
  type: TYPE_NORMAL
- en: Planning an Access Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you think about how your site should work, you need to focus in on what
    will be required of yourself, other community members, or even anonymous users.
    In other words, *will there be a team of moderators working to ensure that the
    content of the site conforms to the dictates of good taste and avoids material
    that is tantamount to hate speech and so on? Will there be subject experts who
    are allowed to create and maintain their own content? How much will anonymous
    visitors be allowed to become involved, or will they be forced to merely window
    shop without being able to contribute?*
  prefs: []
  type: TYPE_NORMAL
- en: Some of you might feel that you want the use of the site to grow organically
    with the community, and so you want to be extremely flexible in your approach.
    However, you can take it as given that your site and access policies are already
    flexible, given how easy it is to make changes in Drupal. This means that no one
    is exempt from building a proper access control plan to begin with. If you need
    to change it as time goes by, so be it, but at least there will be a coherent
    set of roles from the start.
  prefs: []
  type: TYPE_NORMAL
- en: 'So where do we begin? The first and foremost rule of security that can be applied
    directly to our situation is to:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Grant a user permissions sufficient for completing the intended task, and no
    more!
  prefs: []
  type: TYPE_NORMAL
- en: Our entire approach is going to be governed by this rule. With a bit of thought
    you should be able to see why this is so important. Obviously, the last thing
    anyone wants is for an anonymous user to be able to modify the personal blog of
    a respected industry expert. This means that each type of user should have carefully
    controlled permissions that effectively block their ability to act outside the
    scope of their role.
  prefs: []
  type: TYPE_NORMAL
- en: 'One upshot of this is that you will find it better to create a larger number
    of specific roles rather than create a generic role or two, and allow everyone
    to use those catch-all permissions. Drupal gives us fine-grained control over
    what users can accomplish, and you should make good use of this facility. It may
    help to think of your access control using the following figure (this does not
    necessarily represent the actual roles on your site—it''s just an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning an Access Policy](img/1800_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The shaded region represents the total number of permissions available for the
    site. Contained within this set are the various roles that exist either by default,
    like the **Anonymous users** role, or those you create in order to cater for the
    different types of users the site will require—in this case, the **Blog Writer
    users** and **Forum Moderator users** roles. Each role can then contain any number
    of users.
  prefs: []
  type: TYPE_NORMAL
- en: From the previous diagram you can see that the **Anonymous users** have the
    smallest set of permissions because they have the smallest area of the total diagram.
    This set of permissions is totally encapsulated by the **Forum Moderator users**
    and **Blog Writer users**—meaning that forum moderators and blog writers can do
    everything an anonymous user does, and a whole lot more.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the blog writers have a slightly different remit. While they share
    some common permissions with the forum administrators, they also have a few of
    their own. Your permissions as the primary or administrative user encompass the
    entire set, because there should be nothing that you cannot control.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is up to you to decide on which roles are best for the site, but before
    you attempt this it is important to ask: *What are roles and how are they used
    in the first place?* To answer this, let''s take a look at the practical side
    of things in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may seem a bit odd that we are not beginning our practical look at access
    control with a discussion on users. After all, it is all about what users *can*
    and *cannot* do! The problem with immediately talking about users is that the
    focus of a single user is too narrow, and we can learn far more about controlling
    access by taking a more broad view using roles. Once we have learned everything
    there is to know about roles, actually working with users becomes a trivial matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'A user role, in Drupal, is akin to a character in a play. In a play, an actor
    must always be true to their character—in other words, there is a defined way
    to behave and the character never deviates (no matter which actor portrays the
    character), otherwise the illusion is broken. In the same way, Drupal allows defined
    roles that determine the behavior of a user. Creating a role in Drupal is very
    easy! Simply click the **access control** link under **administer** and select
    the **roles** tab to bring up the following simple interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Roles](img/1800_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have two roles already defined by default—the **anonymous
    user** and the **authenticated user**. It is not possible to change these, and
    so the **Operations** column is permanently set to **locked**. To begin with,
    the anonymous user (this is any user who is browsing the site without logging
    in) has very few permissions set, and you would more than likely want to keep
    it this way despite the fact that it is possible to give them any and all permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the authenticated user, by default, has only a few more permissions
    than the anonymous user, and it is also sensible to keep these to a minimum. We
    will see in a little while how to go about deciding who should have which permissions.
  prefs: []
  type: TYPE_NORMAL
- en: In order to add a new role, simply type in a name for the role and click **Add
    role**, and you're done! *But what name do you want to add?* That's the question!
    If you are unsure about what name to use, then it is most likely you haven't clearly
    defined what purpose you want that role to serve. To see how this is done, let's
    assume that the *Contechst Wildlife Community* requires a forum moderator who
    will be a normal user in every way except for the ability to work directly on
    **Conservation** forums (to take some of the burden of responsibility off the
    administrator's hands) to create new topics and to edit the content if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: So, to get the ball rolling, we type in **Forum Moderator user** and click **Add
    role**—actually, you might even want to be more specific and use something like
    **Conservation Forum Moderator user** in this case, but you get the general idea.
    That's it! We have added the role successfully. Now, when you are presented with
    the **roles** page you should be able to view the new role, with the option to
    edit it shown on the right-hand side of the page. You can click **edit** in order
    to change the name of the role or delete it completely.
  prefs: []
  type: TYPE_NORMAL
- en: Our work is just beginning, because now we need to grant or deny the various
    permissions that the **Forum Moderator user** role will need in order to successfully
    fulfill its purpose. New roles are not given any permissions at all to begin with—this
    makes sense if you think about it, because the last thing we want is to create
    a role only to find that it has the same permissions as the administrative user.
  prefs: []
  type: TYPE_NORMAL
- en: The chances are you will need to add several roles depending on the needs of
    the site. For the moment, let's move on and take a look at how we flesh out this
    new role by setting permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to work with permissions, click the **permissions** tab on the **access
    control** page and you should be presented with a screen much like this (notice
    the new **Forum Moderator user** role on the right-hand side of the page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions](img/1800_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this page lists all of the available permissions down the left-hand
    column and allows you to enable or disable that permission by checking or un-checking
    boxes in the relevant column. It is easy enough to see that one simply goes down
    the list selecting those permissions required to be given for each role. What
    is not so easy is actually determining what should and shouldn't be enabled in
    the first place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice too that the permissions given in the list on the left-hand side pertain
    to specific modules. This means that if we change the site''s setup by adding
    or removing modules, then we will also have to change the permissions on this
    page. What this means is that:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most times a module is added, you will need to ensure that the permissions are
    set as you require them for that module, because by default no permissions are
    granted.
  prefs: []
  type: TYPE_NORMAL
- en: '*What else can we learn from the permissions page shown in the previous screenshot?
    Well, what does each permission precisely mean?* There are quite a few verbs that
    allow for completely different actions. The following lists the more common, generic
    ones although you might find one or two others crop up every now and then to cater
    for a specific module:'
  prefs: []
  type: TYPE_NORMAL
- en: '**administer:** gives the user the ability to affect the function of a module.
    For example, granting administer rights to the locale module means that the user
    can add or remove languages, manage strings, and even export `.po` files. This
    permission should only ever be given to trusted users, and never to anonymous
    users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**access:** gives the user the ability to make use of a module without being
    able to affect it in any way. For example, granting access rights to the comment
    module allows a user to view comments without being able to delete, edit, or reply
    to them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**create:** gives the user the ability to create content of some sort. For
    example granting rights to create stories allows users to do so, but does not
    also give them the ability to edit those stories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**edit own:** gives the user the ability to work with the content *they have
    created*. For example, granting **edit own** rights to the *story* module means
    that the user can modify their own stories at will.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also other module-specific permissions available, and it is recommended
    that you play around and understand any new permission(s) you set—most are pretty
    self explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as the permissions given to the default roles are pretty sparse, you will
    probably want to take a look at what those users can do at the same time as you
    work on any new roles. More than likely, you will want to allow anonymous users
    to access much of the site's content, without allowing them to modify it in any
    way. I'll leave those choices up to you. But how do we go about setting up the
    required permissions for the **Forum Moderator user?**
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look down the list of permissions shown on the **Permission** page, we
    see the following forum-related options (at the moment, the **Forum Moderator
    user** permissions are those in the outermost column):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions](img/1800_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling these three options and then testing out what new powers are made available
    should quickly demonstrate that this is not quite what we want.
  prefs: []
  type: TYPE_NORMAL
- en: If you are wondering how to actually test this out, you will need to register
    a new user and assign them to the **Forum Moderator user** role. The following
    section on *Users* explains how to create new users and administer them properly,
    so if you are unsure as to how to do this, jump ahead quickly and check that out
    so that you have a new user to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following point might make your life a bit easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use two browsers to test out your site! The demo site's development machine
    has IE and Firefox. Keep one browser for the administrator and the other for anonymous
    or other users in order to test out changes. This will save you from having to
    log in and out whenever testing new permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you are happy to test out the new permissions one way or another, you
    will find that the forum moderator can access and work with *all of the forums*,
    and we want to confine this particular user to only the **Conservation-related**
    topics. We need something more specific—perhaps *in one of the other modules?*
  prefs: []
  type: TYPE_NORMAL
- en: Looking over the remaining permissions we can see that there is an **administer
    nodes** option— let's try that. Disable the **administer forums** option and enable
    the **administer nodes** option for the anonymous user before saving and logging
    out. You should now find that the **Forum Administrator user** can edit *any posts*
    to the forum quite easily by selecting the **content** link in the main menu.
    *So, what's the problem?* Well, for a start this user can now also configure all
    the different types of content on the site, as well as edit any type of content
    including other people's blogs. This situation is worse than the first one!
  prefs: []
  type: TYPE_NORMAL
- en: Oh dear, despite the fact that we have quite a bit of control over who does
    what at the moment, there is already an indication that there are some things
    that are not easily done without help from elsewhere. In order to complete this
    task we will need to make use of the *Taxonomy Access Control* module that we
    downloaded and installed in the previous chapter, because the solution to the
    current problem lies in forcing Drupal to define users who can access and manipulate
    content based on its category.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Permissions with Taxonomy Access Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assuming you have this module enabled, head on over to the **access control**
    section under the **administer** link (you will need to be logged in as the administrator
    again). You should notice that there is a new tab on this page entitled **category
    permissions**. This page should contain a list of the available roles and the
    ability to edit their category permissions. Straight off the bat, however, it
    probably won''t work because you need to enable the module first. If this is the
    case, the following link should be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'They''re the boss! Head on over to the **taxonomy_access** page under **settings**
    and enable the module. Now when you view the **category permissions** page in
    **access control**, you will see a list of the available roles, ready for you
    to work with. Click the **Forum Moderator user** in this list to see the permissions
    for any and all types of categorized content (incidentally, don''t worry if you
    are unsure about content taxonomy and categories as yet—all this will be discussed
    in the following few chapters), like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a lot to think about here! Now there is a taxonomy access help page
    at **taxonomy_access** under **help** in the **administer** section, which you
    should read along with this. Let's take a quick look at all of these options in
    action as well.
  prefs: []
  type: TYPE_NORMAL
- en: The first three column-options available are **View, Update**, and **Delete**.
    These are fairly self explanatory and allow the user to view, work with, or remove
    content respectively. The next option, **Create**, allows users to fix the specified
    term to a post. **List** causes the specified term to be displayed on a posting's
    page, in a category list or even in the breadcrumb navigation. Ensure that you
    have **List** enabled if you want that term to actually appear in, on, or around
    your pages—leaving it disabled could have some unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first three options have three settings to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Allow** (A): Grants the user the associated permission for any given category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore** (I): Effectively denies the user the associated permission but can
    be overridden by using other **Allow** commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deny** (D): Denies the user the associated permission for any given category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second bullet in this list brings us to an important point concerning precedence:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Deny** directive takes precedence over **Allow!**
  prefs: []
  type: TYPE_NORMAL
- en: '*Why is this important?* Think about what would happen if at some stage a posting
    is linked to several categories (this scenario is possible, and we will come across
    it later in the book). If permissions are set up such that a user has the **Allow**
    directive set for a term in one *vocabulary* (vocabulary, and other taxonomy-related
    terms are all discussed in detail in [Chapter 7](ch07.html "Chapter 7. Advanced
    Content") on *Advanced Content)*, but **Deny** set for that term in the other,
    then the **Deny** directive takes precedence. This is why **Ignore** is so important
    because it allows you to effectively deny a permission for a term in one category
    without affecting others.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use **Deny** only if you are sure that a given role will *never* need access
    to that term.
  prefs: []
  type: TYPE_NORMAL
- en: The drop-down lists shown at the top of each vocabulary allow you to make generalized
    statements that influence the entire column. For example, you might want to allow
    a user to view all the terms in a vocabulary rather than have to change each and
    every setting manually. If this is the case, simply select **Allow all** from
    the drop-down list and away you go. Below the drop-down list is the **Default**
    option, which causes any new terms in that column to be automatically endowed
    with the permission you set here—if you are not sure what you want here, stick
    to **Ignore.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you attempted to access the forums using your **Forum Moderator** user
    with the default permissions set, you will more than likely be disappointed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is really to be expected (despite the fact that we know that the forums
    do exist) because by default the forum moderator has only **Ignore** directives
    set. Set your page to look like the following, and ensure that your **Forum Moderator**
    user has permission to **create forum topics** and **edit own forum topics** (set
    on the **permissions** tab of the **access control** page):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking **Save category permissions** captures these settings, and you can
    now try out the new permissions. Specifically, we need to check whether this user
    can perform the expected operations. *What are the expected operations?* Given
    the settings, we want the user to be able to access only the **Commercial Fishing**
    forum within the **Conservation** container. The user should be able to post to
    this forum as well as edit any posts within this forum (even if they are not the
    user's own posts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the **Forums** page from the perspective of the forum moderator,
    we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is perfect! The user can only access the one forum as expected, but the
    real test lies in whether we can edit someone else''s posts. In this case, I used
    my administrator user to post a note to this forum, and accessing it via the **Forum
    Administrator user** brings up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this you can see that the **List** directive that was enabled is working
    correctly because the taxonomy term **Commercial Fishing** is displayed. Obviously,
    the **View** and **Update** directives are working fine because we can see the
    post and can edit it. If you would like to confirm that the **Delete** directive
    is working, simply click on **edit** and check that the option to **Delete** the
    post is available at the bottom of the page.
  prefs: []
  type: TYPE_NORMAL
- en: This is great news! Having tested the simplest case of granting permissions
    on a single forum, you now have to go back and set all the permission that will
    be needed. In doing so, it is likely that you will come across a few other interesting
    points. I will cover a couple of them here in detail—ultimately, you need to practice
    working with taxonomies and permissions to be able to achieve exactly what you
    want. I suggest waiting until we have covered taxonomies in more detail before
    diving in, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the **category permissions** page for the **Forum Moderator** user,
    disable all of the **Create** directives, and save your settings. Now try post
    a new forum topic using the **Forum administrator** user. You should be presented
    with a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What''s the problem?* **Submit** this message and then go back to the forums
    to view it. *Do you see the issue?* We have disabled **Create**, so we are not
    given the option of specifying which term this post should be associated with.
    So, because we can only view the **Conservation** container and the **Commercial
    Fishing** forum, the new content is not available to us.*"But we would ultimately
    allow the forum moderator to "View" all of the forum topics anyway"*, you might
    counter. This is true, and doing so would certainly make the post accessible,
    but it wouldn''t help the forum moderator to actually post to the forum he or
    she is in charge of.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This has hopefully demonstrated that choosing your settings is quite a subtle
    task. Re-enabling the **Create** directive and attempting the post again brings
    up the following extra option, which then does the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now when this content is submitted, it is correctly displayed in the **Commercial
    Fishing** forum. We will leave taxonomy permissions there because we have yet
    to discuss taxonomy in any detail, and you will be able to practice more effectively
    once we have discussed the ins and outs of taxonomies. Some of you may be wondering,
    for example, how to post this note to *all* the forums within the forum administrator's
    remit instead of *one at a time—tasks* like this will be dealt with in [Chapter
    7](ch07.html "Chapter 7. Advanced Content").
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are happy that you can control the **Forum Moderator user**, let''s
    try something slightly different. Click the **permissions** tab of the **access
    control** page under **administer** and ensure that your **anonymous user** has
    all the available **forum module** permissions selected. Save these changes and
    log out of Drupal. Now, you have already seen what these permissions do; the anonymous
    user, most likely, will be able to administer all the forums. Sure enough, the
    main menu shows us the link to go to the forums as well as a link to administer
    forums. Click on the bottom link, which leads to the administration page for the
    forums. You should notice something fairly odd, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting Permissions with Taxonomy Access Control](img/1800_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hmm, that's strange because we know there are forums there. Let's try the other
    **forum** link in the main menu. This time, following that link simply brings
    up a blank page. That's very odd, we have full administrative permissions on the
    forums, yet Drupal is acting like they don't exist. *Can you figure out why?*
  prefs: []
  type: TYPE_NORMAL
- en: As the administrator, remove the **forum module** permissions for the **anonymous
    user** in the **access control** section and save the settings. Now, click on
    the **category permissions** tab and then select the **edit** link for the **anonymous
    user**. You will be presented with the same untouched settings page that we initially
    saw for the **Forum Moderator user**. The answer should now be apparent. As the
    anonymous user has no permissions set here, we were effectively giving Drupal
    conflicting instructions by saying that this user is a forum administrator who
    is not allowed to access anything related to the taxonomy terms within the forums.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we would like anonymous users to be able to view all the content
    in the forums (although, if there were any topics you wanted to hide you could
    simply leave them unchecked) so we choose **Select all** from the **List** drop-down
    and **Allow all** in the **View** column drop-down and save the settings. Take
    a look at the results as the anonymous user. You should find that it is possible
    to view all the forums as expected, but you are required to login in order to
    post anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'This has exemplified the need to thoroughly test your site regularly so that
    unforeseen changes don''t have disastrous effects. You may have asked yourself
    at some stage during the discussion on permissions: *Can one user belong to several
    roles?* The follow-up question to this is of course *What permissions does a user
    who belongs to more than one role receive?* In order to answer these very important
    questions, let us take a look at the next topic in our discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single user account can be given as many or as few permissions as you like
    via the use of roles. Drupal users are not really anything unless they already
    have a role that defines the manner in which they can operate within the Drupal
    framework. Hence, we discussed roles first.
  prefs: []
  type: TYPE_NORMAL
- en: Users can be created in two ways. The most common way is by registering on the
    site—if you haven't already, go ahead and register a new user on your site by
    clicking the **Create new account** link on the homepage just to test things out
    for yourself. Remember to supply a valid email address otherwise you won't be
    able to sign in properly. This will create an authenticated user, with any and
    all permissions that have been assigned to the **authenticated user** role.
  prefs: []
  type: TYPE_NORMAL
- en: The second way is to use your administrative user to create a new user. In order
    to do this, log on as the administrative user and click on **users** under **administer**.
    Select the **add user** tab and follow the instructions on that page—you will
    need to supply Drupal with usernames, email addresses, and passwords. Once you
    have a couple of users to play around with, it's time to begin working with them.
  prefs: []
  type: TYPE_NORMAL
- en: Administering Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the site's administrator, you are given complete access to the other users'
    account information. By clicking on the **edit** link shown to the right of each
    user account (under the **Operations** column heading) in the **users** page under
    **administer**, you can make any changes you require to a given user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have already looked over this page briefly when we initially set up
    our administrative user in [Chapter 2](ch02.html "Chapter 2. Setting Up the Development
    Environment"), but it is worth looking over it in slightly more depth now as it
    has an important setting that was not there the first time round. If you scroll
    down the page a bit, you will notice that you now have the option to stipulate
    which roles this user belongs to. At present the demo site''s **Roles** section
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering Users](img/1800_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reading the lines below the checkboxes in this screenshot, you can see that
    whenever you add a user to another role, the user obtains the combined permissions
    of these roles. So, that answers the questions we had in the earlier section on
    *Permissions. But what''s all the fuss about?* By knowing this, you should go
    about delegating roles in the following fashion:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the most basic user of the site by setting the **anonymous user** permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set permissions for a basic **authenticated user—most** likely for people who
    have registered on your site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create special roles by only adding the specific additional permissions that
    are required by that role, and no more. Don't re-assign permissions that the authenticated
    user already has.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create new users by combining whatever roles are required for their duties or
    needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you follow the steps above, you will be sure to always give the correct
    permissions to each role. This is because you are building up a user''s permissions
    from the most basic to the most complex without having to assign every single
    permission each time. It should be obvious that a forum moderator would have all
    the permissions of an anonymous and authenticated user plus a few more. So, if
    you look back to the first diagram in the chapter you can see that, in this case,
    we would:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the **anonymous user** and **authenticated user** role permissions—an
    authenticated user should have all the permissions of an anonymous user, plus
    whatever else is needed by your basic site user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create new roles with only the additional permissions needed for both the **Forum
    Moderator user** and **Blog Writer user** other than those given to the authenticated
    user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign blog writers to the **Blog Writer user** role (they are automatically
    given the permissions granted to an authenticated user), and do the same for forum
    moderators and their role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other than using that strategy for assigning roles to users, the information
    in this section is pretty easy to intuit; so let's move on.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section really discusses how the site treats users rather than discussing
    what users can and cannot do. However, you will find that some of the information
    in this section is important for the look and feel of the site. Click on **settings**
    under the **administer** link and then click **users**. You will be provided with
    set of options beginning with user registration settings as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You might want to consider which of the first three options to select quite
    carefully depending on how you envisage the site functioning. For example, you
    might wish to allow everyone to read and post comments to the forums, or do whatever,
    without needing to register first. If this is the case, then it is likely that
    the only people who would need to register are going to be performing some sort
    of administrative duties, in which case you would probably want to select the
    first option, or at least the third option.
  prefs: []
  type: TYPE_NORMAL
- en: For the demo site's sake, the second option is fine as we would like to make
    it easy for as many people as possible to become involved in the community without
    allowing absolutely everyone to post content and potentially cause problems. A
    helpful message is also added to explain the registration process to potential
    users.
  prefs: []
  type: TYPE_NORMAL
- en: The next section on this page deals with the process of user email customization.
    There is an interesting facet to this however, in that Drupal makes certain variables
    available for use within the static text that is entered. Let's take a look at
    how to modify a line or so in order to get the feel for how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'By way of example, we will change the **Subject of welcome e-mail** text from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account details for %username at %site** to a slightly sprightlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Congratulations %username, you have registered with the %site on %date!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing too complicated here! The keywords preceded by the **%** sign are simply
    placeholders for other values, which are inserted into your email according to
    how they are set at that particular time. This gives you the ability to personalize
    your correspondence. In this case, the subject of the welcome email for a user
    registered as **David** is now displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the **%username, %site**, and **%date** placeholders have been
    correctly changed to reflect the contents of the variables for that particular
    setup. There are settings available for several standard emails such as **password
    recovery** and **welcome (awaiting admin approval)**. The defaults are of course
    fairly sensible and easy to change should you need to. Remember the placeholders
    that are available for each piece of text are mentioned below the text area so
    play around with them until you are comfortable with their usage.
  prefs: []
  type: TYPE_NORMAL
- en: The final section deals with **Pictures**. Now, if you wish to enable **Picture
    support** for users, then select **Enabled** from the list, provide a default
    picture if you want one, and click **Save configuration** (the other settings
    are fairly self explanatory and sensible, and you can come back at any stage to
    change them if they are not suitable for you).
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal will set up a `pictures` folder to hold all of the pictures within the
    `files` folder in your Drupal installation. Once everything is done, users will
    have a new section added to the **edit** tab of their **my account** page, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the picture has been successfully uploaded, it will appear on the **my
    account** page, and with the user's blog and forum posts on the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the image does not appear and you end up seeing a link, something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'then you will need to ensure that you set the correct **upload module** permissions
    on the **access control** page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember that since the **Forum Administrator** user automatically receives
    all the permissions of the **authenticated** user, it is not necessary to enable
    the **view uploaded files** permission for the **Forum Administrator** as this
    would be redundant and would make the purpose of your user less clear.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing users to incorporate pictures into a site is a good way for people
    to be able to personalize their contributions, and also gives everyone something
    visual to associate posts with. This is a great way to foster a community, as
    it helps give different users an identity of sorts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Editing the picture is easy! Simply modify it in the **Picture** section of
    the user''s edit page as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Users](img/1800_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That is pretty much the end of the line for configuring users. There are still
    a few more things we need to discuss with regards to security before we can move
    on though.
  prefs: []
  type: TYPE_NORMAL
- en: Access Rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far it should seem like Drupal has things more or less covered when it comes
    to ensuring that it is possible to control who does what on the site. This is
    certainly the case, but there are a few more situations that we have not yet discussed,
    and may well end up affecting the site at some stage. For example, *what happens
    if you find that there is a company that repeatedly spams your forums with advertisements
    and marketing information?* Or, *what happens if you want only people from a certain
    company to access your site?*
  prefs: []
  type: TYPE_NORMAL
- en: Problems of this nature can really be a thorn in your side. Access problems
    can even end up driving community members away—unless you have the ability to
    set access rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some techniques that can be used to set access rules via the **access
    rules** tab on the **access control** page under the **administer** main menu
    item. To implement any access rules you will need to select the **add rule** option,
    which brings up the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Rules](img/1800_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this you can see that I am in the process of making a rule that denies
    access based on an email address. Before we continue on this line, it is important
    to note that there are both **Allow** and **Deny** options available, and these
    will act based on a supplied **Username, E-mail**, or **Host** address given in
    the **Rule type** section. The final option, **Mask**, allows you to specify the
    actual name of the user or host to which the rule will apply.
  prefs: []
  type: TYPE_NORMAL
- en: In the above case, the email address`bad_user@contechst.com` will have a **deny**
    rule created after **Add rule** has been clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create a rule like this one, and once you are done you will see
    that the rule now appears under the **list** tab. Now that there is a deny rule
    in place, how do we go about using it? The answer is that it is already being
    used. If someone tries to register with the email address supplied in the rule,
    they will be denied access. As it stands, this is probably not very helpful, because
    it is unlikely you will know ahead of time what specific email addresses to block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to cater for the times when you aren''t entirely sure of the specific
    address, there are two wildcard characters provided that can serve as generic
    strings or characters. Let''s say that you wanted to ban someone who runs a small
    spamming business. Simply blocking their current email address is not really sufficient,
    because they can simply create another address and use that one to register with
    Drupal. If you know that the addresses come from one location, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You could use the `%` character to match whatever characters are present before
    the `@` sign, effectively stopping anyone from that email server from registering,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a Hotmail account, or something similar, try blocking any address
    that ends in `@hotmail.com` and then attempt to register an account on the site.
    You should find that Drupal presents you with the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Rules](img/1800_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A new problem rears its ugly head when it so happens that you don't want to
    allow Hotmail addresses on the site with the exception of a close personal friend
    who is traveling around the world and can only access a Hotmail address. In this
    case, you need to set an **Allow** rule as well. If it so happens that the email
    address of the person is `good_friend@hotmail.com`, then you could set the allow
    rule by selecting the appropriate options to cater for this on the **add rule**
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your rules would then look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Rules](img/1800_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What this does is ban all Hotmail addresses on the site. However, because *an
    allow rule takes precedence over a deny rule*, the one and only Hotmail address
    specified in the single **allow** rule shown in the screenshot will work fine.
    Now when your good friend attempts to register, everything will go swimmingly
    well.
  prefs: []
  type: TYPE_NORMAL
- en: After some time, you might find that the set of rules that are in place can
    become slightly confusing, or alternatively, it is simply not feasible to continue
    attempting to register new names all the time to ensure that they work according
    to plan. In this case, use the **check rules** tab on the right-hand side of the
    **access rules** page. This allows names of users, email addresses, and hosts
    to be entered in order to check whether they have access or not. Simply compare
    these results with your expectations to determine if everything is working as
    planned.
  prefs: []
  type: TYPE_NORMAL
- en: One final thing to bear in mind is that if you deny access using the host criteria,
    then this will be enforced throughout the site and not just on the registration
    pages. For the case of the spammer, you would probably want to deny access to
    the site in general; so you would select the **host** option with something like
    this for the **Mask:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This would then match to any host with `irritating_spammer` in it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: and so on. Remember to check that all the rules you add have the desired affect
    on the site's access policy. It would be a shame to make a rule that prevented
    potentially valuable community members from accessing content, causing them to
    go elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: I would be remiss if I didn't mention, before finishing off, that there are
    a number of other **user access/authentication-related** modules available on
    the Drupal website. It is probably worthwhile to check these out at `http://drupal.org/project/Modules/category/74`
    in case there is something you find that is particularly suited to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Of special interest are the *node privacy byrole* and *Path Access* modules,
    which provide an alternative method of controlling access to content. Having seen
    how the *Taxonomy Access* module worked, you should feel confident enough to work
    with any of these contributions assuming you are not able to achieve precisely
    what you want already.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has given you a good grounding in the basics of controlling access
    to your site's content. You have seen that Drupal comes with a large number of
    facilities and options to ensure proper maintenance of the site by retaining overall
    control with the administrative user, as well as delegate important jobs to trusted
    users via the use of roles.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at how to go about planning an access policy. This is not only an
    important requirement, in terms of making sure the site runs smoothly, but also
    helps to solidify how the site will eventually work by forcing you to consider
    many eventualities. Following this, a tour of the fundamental aspects of access
    control in Drupal saw us discussing roles, permissions, and users, and learning
    how to plan and implement an access policy based on the requirements of the site.
  prefs: []
  type: TYPE_NORMAL
- en: A discourse on how to use the contributed module that controls access based
    on taxonomy showed us how to implement even further fine-grained control over
    the content's access permissions. However, you probably also found out that creating
    a well-designed and coherent access policy takes a bit of time. Planning, and
    above all, testing, will help ensure that everything works as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Access rules were then introduced as a further way of controlling who gets into
    the site, with a discussion on how to use the wildcard characters effectively.
    With that, we are done with access control although you are strongly urged to
    spend some time playing around with the various options until you are comfortable
    with being able to make changes and knowing their effects.
  prefs: []
  type: TYPE_NORMAL
- en: The next two chapters take an in-depth look at content—the beating heart of
    Drupal!
  prefs: []
  type: TYPE_NORMAL
