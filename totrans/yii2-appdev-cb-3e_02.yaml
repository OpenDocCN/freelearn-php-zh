- en: Chapter 2. Routing, Controllers, and Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring URL rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using regular expressions in URL rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a base controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using standalone actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying static pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using flash messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the controller context in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing views with partials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using decorators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining multiple layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pagination and sorting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you to learn some handy things about the Yii URL router,
    controllers, and views. You will be able to make your controllers and views more
    flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring URL rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure URL rules. Before we begin lets
    set up an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `@app/controllers/TestController.php` controller with the following
    code inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the application controller that we are going to customize URLs for.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Configure your application server to use clean URLs. If you are using Apache
    with `mod_rewrite` and `AllowOverride` turned on, then you should add the following
    lines to the `.htaccess` file under your `@web` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our website should display the index page at `/home` and all other pages at
    `/page/<alias_ here>`. Additionally, `/about` should lead to a page with the alias
    about:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following config of the `urlManager` component in `@app/config/web.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After saving your changes, you should be able to browse the following URLs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try running the `/home` URL and you will get the following:![How to do it…](img/image00382.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then try running the `/about` page:![How to do it…](img/image00396.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s review what was done and why it works. We''ll start with the right-most
    part of the first rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: What is `test/index` exactly? In the Yii application, each controller and its
    actions have corresponding internal routes. A format for an internal route is
    `moduleID/controllerID/actionID`. For example, the `actionPage` method of `TestController`
    corresponds to the `test/page` route. So, in order to get the controller ID, you
    should take its name without the Controller postfix and make its first letter
    lowercase. To get an action ID, you should take the action method name without
    the action prefix, and again, make its first letter lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what is home? To understand it in a better way, we need to know, at least
    superficially, what's happening when we access our application using different
    URLs.
  prefs: []
  type: TYPE_NORMAL
- en: When we use `/home`, the URL router checks our rules one by one starting from
    the top, trying to match the URL entered with the rule. If a match is found, then
    the router gets the controller and its action from an internal route assigned
    to the rule and executes it. So, `/home` is the URL pattern that defines which
    URLs will be processed by the rule it belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also create parameterized rules using a special syntax. Let''s review
    the third rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are defining an alias parameter that should be specified in the URL
    after `/page/`. It can be virtually anything and it will be passed as the `$alias`
    parameter to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can define a pattern for such a parameter. We did it for the second rule,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The alias here should match `about`, otherwise, the rule will not be applied.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following links for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html](http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-runtime-url-handling.html](http://www.yiiframework.com/doc-2.0/guide-runtime-url-handling.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html](http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using regular expressions in URL rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii allows you to not only route your URLs to different controller actions,
    but also to generate a URL by specifying a proper internal route and its parameters.
    This is really useful because you can focus on internal routes while developing
    your application, and only worry about real URLs before going live. Never specify
    URLs directly and make sure that you use the Yii URL toolset. It will allow you
    to change URLs without rewriting a lot of application code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find your `@app/config/web.php` file and replace the rules array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure your application server to use clean URLs. If you are using Apache
    with `mod_rewrite` and `AllowOverride` turned on, then you should add the following
    lines to the `.htaccess` file under your `@app/web` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your `@app/controllers` directory, create `BlogController` with the following
    code inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is our blog controller that we are going to generate custom URLs for.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In your `@app/controllers` directory, create `TestController` with the following
    code inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `@app/views` directory, create the `test` directory and the `urls.php`
    view file, and place the following code inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the URL `http://yii-book.app/test/urls` and you will see the output. (Refer
    to the full list of methods in the preceding code.):![How to do it…](img/image00487.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to generate URLs pointing to the controller actions (RssFeed, Article,
    List, HiTech) of `BlogController`.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on where we need it, there are different ways of doing it, but the
    basics are the same. Let's list some methods that generate URLs.
  prefs: []
  type: TYPE_NORMAL
- en: What is an internal route? Each controller and its actions have corresponding
    routes. A format for a route is `moduleID/controllerID/actionID`. For example,
    the `actionHiTech` method of `BlogController` corresponds to the `blog/hi-tech`
    route.
  prefs: []
  type: TYPE_NORMAL
- en: To get a controller ID, you should take its name without the Controller postfix
    and make its first letter lowercase. To get an action ID, you should take the
    action method name without the action prefix and make the first letter in each
    word lowercase, and separate them with a dash (-) sign (for example, `actionHiTech`
    will be `hi-tech`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `$_GET` variables are the parameters that will be passed to an action with
    an internal route specified. For example, if we want to create a URL to a `BlogController::action`
    article that passes the `$_GET[''name'']` parameter to it, it can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Relative URLs can be used inside your application, while absolute ones should
    be used for pointing to locations outside your website (such as other websites)
    or for linking to resources meant to be accessed from outside (RSS feeds, e-mails,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: You can do it easily with the URL manager. The URL manager is a built-in application
    component named `urlManager`. You have to use this component, which is accessible
    from both web and console applications via `Yii::$app->urlManager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you cannot get a controller instance, for example, when you implement
    a console application, you can use the two following `urlManager` creation methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Canonical_link_element](https://en.wikipedia.org/wiki/Canonical_link_element)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html](http://www.yiiframework.com/doc-2.0/guide-runtime-routing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-helper-url.html](http://www.yiiframework.com/doc-2.0/guide-helper-url.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html](http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Configuring URL rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using regular expressions in URL rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the hidden features of the Yii URL router is that you can use regular
    expressions that are pretty powerful for handling strings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `@app/controllers` directory, create `PostController.php` using the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is our application controller that we are going to access using our custom
    URLs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Configure your application server to use clean URLs. If you are using Apache
    with `mod_rewrite` and `AllowOverride` turned on, then you should add the following
    lines to the `.htaccess` file under your `@web` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want our `PostController` action to accept parameters according to some specified
    rules and give the `404 not found` HTTP response for all parameters that do not
    match. In addition, post/index should have an alias URL archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following config of the `urlManager` component to `@app/config/web.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following URLs will be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://yii-book.app/post/test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/posts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/archive`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/posts/ASC`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/sayhello`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following URLs will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://yii-book.app/archive/test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/post/another_post`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows that the URL `http://yii-book.app/post/test`
    has run successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00489.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that the URL `http://yii-book.app/archive` has
    run successfully too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00490.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows that the URL `http://yii-book.app/archive/test`
    did not run successfully and encountered an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00493.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use regular expressions in both the parameter definition and the rest
    of the rule. Let''s read our rules one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The alias parameter should contain one or more English letters or a dash. No
    other symbols are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `posts` and `archive` lead to `post/index`. The `order` parameter can
    only accept two values—`DESC` and `ASC`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You should specify the name part but there are no restrictions on what characters
    are allowed. Note that regardless of the rule used, the developer should never
    assume that the input data is safe.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00497.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about regular expressions, you can use the following sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.php.net/manual/en/reference.pcre.pattern.syntax.php](http://www.php.net/manual/en/reference.pcre.pattern.syntax.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Regular Expressions*, *Jeffrey Friedl* available at [http://regex.info/](http://regex.info/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Configuring URL rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a base controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many frameworks, the concept of a base controller that is being extended
    by other ones is described right in the guide. In Yii, it is not in the guide,
    as you can achieve flexibility in many other ways. Still, using a base controller
    is possible and can be useful.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we want to add some controllers that will be accessible only when
    the user is logged in. We can certainly set this constraint for each controller
    separately, but we will do it in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will need a base controller that our user-only controllers will use.
    Let''s create `@app/components/BaseController.php` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This controller has an action map with an error action also.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, create `TestController` by Gii, but set the value of the base class field
    as `app/components/BaseController`:![How to do it…](img/image00500.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will get something similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, your `TestController` will be only accessible if the user is logged in,
    even though we have not declared it explicitly in the `TestController` class.
    You can check it by visiting `http://yii-book.app/index.php?r=test/index` while
    logged out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The trick is nothing more than a basic class inheritance. If filters or access
    control rules are not found in `TestController`, then they will be called from
    `SecureController`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to extend the base controller''s method, keep in the mind that
    it must not be overridden. For example, we need to add a page action to the controller''s
    action map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/yii-base-controller.html](http://www.yiiframework.com/doc-2.0/yii-base-controller.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using standalone actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii, you can define controller actions as separate classes and then connect
    them to your controllers. This will help you to reuse some common functionality.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can move the backend for autocomplete fields to an action and
    save some time by not having to write it over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is that we can create all CRUD operations as separate standalone
    actions. We will write, create, view, and delete operations of the model and view
    the list operation of models.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create `post` table. Create migration for this using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the just-created migration''s methods and list of imported classes as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all migrations using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `Post` model using Gii.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the standalone action `@app/actions/CreateAction.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the standalone action `@app/actions/DeleteAction.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the standalone action `@app/actions/IndexAction.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the standalone action `@app/actions/ViewAction.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `@app/views/crud/create.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `@app/views/crud/index.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `@app/views/crud/view.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To use standalone actions, we declared it in the action map by overriding the
    actions method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `post`/`index`:![How to do it…](img/image00501.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every controller can be built from standalone actions, like a puzzle from pieces.
    The difference is that you can make standalone actions very flexible and reuse
    them in many places.
  prefs: []
  type: TYPE_NORMAL
- en: In our actions, we defined the `modelClass` public property, which helps to
    set up a specific Model class in the `acti` `ons` method of `PostController`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html#standalone-actions](http://www.yiiframework.com/doc-2.0/guide-structure-controllers.html#standalone-actions).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filters are objects that run before and/or after controller actions. For example,
    an access control filter may run before actions to ensure that they are allowed
    to be accessed by particular end users; a content compression filter may run after
    actions to compress the response content before sending them out to end users.
  prefs: []
  type: TYPE_NORMAL
- en: A filter may consist of a prefilter (filtering logic applied before actions)
    and/or a postfilter (logic applied after actions). Filters are essentially a special
    kind of behavior. Therefore, using filters is the same as using behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that we have a web application, which provides a user interface
    for working only at specified hours, for example, from 10 AM to 6 PM.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a controller, `@app/controllers/TestController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new filter, `@app/components/CustomFilter.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you've visited this page outside of the specified time period, you'll get
    the following:![How to do it…](img/image00504.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At first, we added a piece of code to our controller, which implements our
    custom filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: By default, the filter applies to all actions of the controller, but we can
    specify actions for which it will be applied, or even exclude actions from our
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: You have two actions inside it—`beforeAction` and `afterActions`. The first
    one runs before the controller's actions and the next one after.
  prefs: []
  type: TYPE_NORMAL
- en: In our simple example, we defined a condition which doesn't allow access to
    website if the time is earlier than 10 AM, and in the after method we just run
    a trace method if the current path is `test/index`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the result in the debugger, in the `log` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00506.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In real applications, filters are more complex and also, Yii2 provides a lot
    of built-in filters, such as core, authentication, content negotiator, HTTP cache
    end, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guidestructure-filters.html](http://www.yiiframework.com/doc-2.0/guidestructure-filters.html).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying static pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a few static pages and aren't going to change them very frequently,
    then it's not worth querying the database and implementing page management for
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the test controller file, `@app/controllers/TestController.php`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, put your pages into `views/test/pages`, and name them `index.php` and
    `contact.php`. The content of `index.php` is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you can check your pages by typing in the URL,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://yii-book.app/index.php?r=test/page&view=contact`:![How to do it…](img/image00509.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can type in the URL `http://yii-book.app/test/page/view/about`,
    if you have configured clean URLs with a path format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We connect the external action named `\yii\web\ViewAction`, which simply tries
    to find a view named the same as the `$_GET` parameter supplied. If it is there,
    it displays it. If not, then it will give you a `404 not found` page. In case
    `viewParam` is not set, the `defaultView` value will be used.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: About ViewAction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some useful `\yii\web\ViewAction` parameters we can use. These are
    listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultView` | The name of the default view when the `yii\web\ViewAction::$viewParam`
    GET parameter is not provided by the user. Defaults to `''index''`. This should
    be in the format of `path/to/view`, similar to that given in the `GET` parameter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `layout` | The name of the layout to be applied to the requested view. This
    will be assigned to `yii\base\Controller::$layout` before the view is rendered.
    Defaults to null, meaning the controller''s layout will be used. If false, no
    layout will be applied. |'
  prefs: []
  type: TYPE_TB
- en: '| `viewParam` | The name of the `GET` parameter that contains the requested
    view name. |'
  prefs: []
  type: TYPE_TB
- en: '| `viewPrefix` | A string to be prefixed to the user-specified view name to
    form a complete view name. For example, if a user requests `tutorial/chap1`, the
    corresponding view name will be `pages/tutorial/chap1`, assuming that the prefix
    is pages. The actual view file is determined by `yii\base\View::findViewFile()`.
    |'
  prefs: []
  type: TYPE_TB
- en: Configuring URL rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ViewAction` action provides you a way to minify your controller, but the
    URLs look like `http://yii-book.app/index.php?r=test/page&page=about`. To make
    URLs short and more readable, add a URL rule to `urlManager` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `urlManager` component configures properly you will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring URL rules](img/image00511.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To configure the `urlManager` component, refer to the *Configuring URL rules*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-viewaction.html](http://www.yiiframework.com/doc-2.0/yii-web-viewaction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-views.html#rendering-static-pages](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#rendering-static-pages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring URL rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using flash messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are editing a model with a form, deleting a model, or doing any other
    operation, it is good to tell users if it went well or if there was an error.
    Typically, after some kind of action, such as editing a form, a redirect will
    happen and we need to display a message on the page we want to go to. However,
    how do we pass it from the current page to the redirect target and clean up afterwards?
    Flash messages will help us do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a `@app/controllers/TestController.php` controller as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, create the `@app/views/common/alert.php` view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `@app/views/test/index.php` file view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `@app/views/test/user.php` file view as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you go to `http://yii-book.app/index.php?r=test/success`, you will be
    redirected to `http://yii-book.app/index.php?r=test/index` and a success message
    will be displayed as follows:![How to do it…](img/image00513.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moreover, if you go to `http://yii-book.app/index.php?r=test/error`, you will
    be redirected to the same page, but with an error message. Refreshing the `index`
    page will hide the message:![How to do it…](img/image00515.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then try running `http://yii-book.app/index.php?r=test/user`. You will be redirected
    to `http://yii-book.app/index.php?r=test/index` and an error message will be displayed
    that executed in the `denyCallback` function:![How to do it…](img/image00518.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set a flash message with `Yii::$app->session->('success', 'Everything went
    fine!')`. Internally, it saves a message into a session state, so at the lowest
    level, our message is being kept in `$_SESSION` until `Yii::$app->session->getFlash('success')`
    is called and the `$_SESSION` key is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The flash message will be automatically deleted after it is accessed in a request.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The getAllFlashes() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes you need to handle all flashes. You can do it in a simple manner,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The removeAllFlashes() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you need to flush all your flashes, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The removeFlash() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you need to remove the `flash` method with a specified key, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we added a very useful callback function, which sets up an
    error message and does a redirect to the `test/ind` `ex` page.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-web-session.html](http://www.yiiframework.com/doc-2.0/yii-web-session.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-bootstrap-alert.html](http://www.yiiframework.com/doc-2.0/yii-bootstrap-alert.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the controller context in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii views are pretty powerful and have many features. One of them is that you
    can use the controller context in a view. So, let's try it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `controllers/ViewController.php` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will create a `views/view.php` showing what we can do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to test it, you can follow `/index.php?r=view/index&name=Alex`:![How
    to do it…](img/image00520.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using `$this` in a view to refer to a currently running controller. When
    doing this, we can call a controller method and access its properties. The most
    useful property is `pageTitle`, which refers to the current page title. There
    are many built-in methods that are extremely useful in views such as `renderPartials`
    and widget.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [http://www.yiiframework.com/doc-2.0/guide-structure-views.html#accessing-data-in-views](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#accessing-data-in-views)
    URL contains the API documentation for `CController`, where you can get a good
    list of methods you can use in your view.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing views with partials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii supports partials, so if you have a block without much logic that you want
    to reuse or want to implement e-mail templates, partials are the right way to
    go about this.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we have two Twitter accounts, one for our blog and another for
    company activity, and our goal is to output Twitter timelines on specified pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create Twitter widgets at [https://twitter.com/settings/widgets/](https://twitter.com/settings/widgets/)
    for `php_net` and `yiiframework` users, and find a `data-widget-id` value for
    each widget created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a controller, `@app/controllers/BlogController.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view file named `@app/views/common/twitter.php` and paste an embed
    code from Twitter. You will get something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view `@app/views/blog/index.php` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `@app/views/site/about.php` file''s content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try to run `index.php?r=blog/index`:![How to do it…](img/image00523.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to run `index.php?r=site/about`:![How to do it…](img/image00525.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the current example, two views render `@app/views/common/twitter.php` with
    additional parameters for forming Twitter widgets inside themselves. Note that
    views can be rendered in controllers, widgets, or any other place, by calling
    the view rendering methods. For example, `\yii\base\Controller::render` does the
    same template processing as `\yii\base\View::render`, except the former does not
    use layout.
  prefs: []
  type: TYPE_NORMAL
- en: In each view file, we can access two instances of the View class using $this,
    so any view file can be rendered in an other view by calling the `render` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guidestructure-views.html#rendering-views](http://www.yiiframework.com/doc-2.0/guidestructure-views.html#rendering-views).
  prefs: []
  type: TYPE_NORMAL
- en: Using blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the Yii features you can use in your views is blocks. The basic idea
    is that you can record some output and then reuse it later in a view. A good example
    would be to define additional content regions for your layout and filling them
    elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous version, Yii 1.1, blocks were called clips.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our example, we need to define two regions in our layout—`beforeContent`
    and `footer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `@app/views/layouts/main.php` and insert the following code line just
    before the content output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, replace the footer code with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That is it! Then, add a new action to `controllers/SiteController.php`, named
    `blocks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a view file, `views/site/blocks.php`, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, when you open your `/index.php?r=site/blocks` page, you should get your
    IP just before the page content and a built-with note in the footer:![How to do
    it…](img/image00527.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We mark regions with the code that just checks for the existence of a specific
    block, and if the block exists, the code outputs it. Then, we record content for
    blocks we defined using the special controller methods named `beginBlock` and
    `endBlock`.
  prefs: []
  type: TYPE_NORMAL
- en: From controller, you can easily access our block's variables via `$this->view->blocks['blockID']`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the controller context in a view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-structure-views.html#using-blocks](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#using-blocks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using decorators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii, we can enclose content into a decorator. The common usage of decorators
    is layout. When you are rendering a view using the render method of your controller,
    Yii automatically decorates it with the main layout. Let's create a simple decorator
    that will properly format quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create a decorator file, `@app/views/decorators/quote.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, replace the content of `@app/views/site/index.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, your **Home** page should look like the following:![How to do it…](img/image00528.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decorators are pretty simple. Everything between `ContentDecorator::begin()`
    and `ContentDecorator::end()` is rendered into a `$content` variable and passed
    into a decorator template. Then, the decorator template is rendered and inserted
    in the place where `ContentDecorator::end()` was called.
  prefs: []
  type: TYPE_NORMAL
- en: We can pass additional variables into the decorator template using a second
    parameter of `ContentDecorator::begin()`, such as the one we did for the author.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have used `@app/views/decorators/quot` `e.php` as the view path.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [http://www.yiiframework.com/doc-2.0/yii-widgets-contentdecorator.html](http://www.yiiframework.com/doc-2.0/yii-widgets-contentdecorator.html)
    URL provides more details about decorators:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the controller context in a view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining multiple layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most applications use a single layout for all their views. However, there are
    situations when multiple layouts are needed. For example, an application can use
    different layouts on different pages: two additional columns for blogs, one additional
    column for articles, and no additional columns for portfolios.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-startinstallation.html](http://www.yiiframework.com/doc-2.0/guide-startinstallation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create two layouts in views/layouts: `blog` and `articles`. Blog will contain
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Articles will contain the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view file, `views/site/content.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create three controllers named `BlogController`, `ArticleController`, and `PortfolioController`,
    with index actions in all three. The content of the `controllers/BlogController.php`
    file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The content of the `controllers/ArticleController.php` file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The content of the `controllers/PortfolioController.php` file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now try running `http://yii-book.app/?r=blog/index`:![How to do it…](img/image00529.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then try running `http://yii-book.app/?r=article/index`:![How to do it…](img/image00531.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, try running `http://yii-book.app/?r=portfolio/index`:![How to do it…](img/image00535.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We defined two additional layouts for the blog and articles. As we don't want
    to copy and paste common parts from the main layout, we apply additional layout
    decorators using `$this->beginContent and $this->endContent.`
  prefs: []
  type: TYPE_NORMAL
- en: So, we use a view rendered inside the articles layout as the main layout's `$content`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [http://www.yiiframework.com/doc-2.0/guide-structure-views.html#nested-layouts](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#nested-layouts)
    URL provides more details about layouts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the controller context in a view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using decorators* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pagination and sorting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the latest Yii releases, the focus was moved from using Active Record directly,
    to grids, lists, and data providers. Still, sometimes it is better to use Active
    Record directly. Let's see how to list paginated AR records with the ability to
    sort them. In this section, we would like to create a list of films and sort them
    by some attributes from a database. In our example, we will sort our films by
    film title and rental rate attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application using the Composer package manager, as described in
    the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Sakila database from [http://dev.mysql.com/doc/index-other.html](http://dev.mysql.com/doc/index-other.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the downloaded SQLs; first schema, then data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the DB connection in `config/main.php` to use the Sakila database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Gii to create the `Film` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you need to create `@app/controllers/FilmController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s implement `@app/views/film/index.php`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try to load `http://yii-book.app/index.php?r=film/index`. You should get a working
    pagination and links that allow sorting of list by the film's title or by rental
    rate:![How to do it…](img/image00371.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we got the total models count and initialized the new pagination component
    instance with it by passing the `totalCount` variable to our `Pagination` instance.
    Then, we used the `$pages->pageSize` field to set up the page size for our pagination.
    After that, we created a sorter instance for the model, specifying model attributes
    we wanted to sort by and applying order conditions to the query by calling `orderBy`
    and passing `$sort->orders` as a parameter. Then, we called `all()` to get records
    from the DB.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have the models list, pages, and data used for the link pager,
    and the sorter that we use to generate sorting links.
  prefs: []
  type: TYPE_NORMAL
- en: In a view, we use the data we have gathered. First, we generate links with the
    `Sort::link` method. Then, we list the models. Finally, using the *LinkPager*
    widgets, we render the pagination control.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visit the following links to get more information about pagination and sorting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-data-pagination.html](http://www.yiiframework.com/doc-2.0/yii-data-pagination.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-data-sort.html](http://www.yiiframework.com/doc-2.0/yii-data-sort.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-output-pagination.html](http://www.yiiframework.com/doc-2.0/guide-output-pagination.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-output-sorting.html](http://www.yiiframework.com/doc-2.0/guide-output-sorting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
