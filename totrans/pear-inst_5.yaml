- en: 'Chapter 5. Releasing to the World: PEAR Channels'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。向世界发布：PEAR 渠道
- en: 'One of the premier features of PEAR version 1.4.0 and newer versions is the
    ability to publicly distribute your own applications for installation with the
    PEAR installer. Although this was feasible with PEAR 1.3.6 and earlier versions,
    it was far more difficult, and so was rarely attempted. PEAR version 1.4.0+ adds
    ease to distributing packages by the use of a new distribution medium called **channels**.
    Each PEAR channel provides a unique set of packages that can be installed quite
    easily using the PEAR installer. For instance, to install a package from the `pear.chiaraquartet.net`
    channel, one need only type:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 版本 1.4.0 及更高版本的一个主要特性是能够公开分发自己的应用程序，以便使用 PEAR 安装程序进行安装。尽管在 PEAR 1.3.6 及更早版本中这是可行的，但难度很大，因此很少尝试。PEAR
    版本 1.4.0+ 通过使用一种新的分发介质称为 **渠道** 来简化包的分发。每个 PEAR 渠道提供一组独特的包，可以使用 PEAR 安装程序轻松安装。例如，要从
    `pear.chiaraquartet.net` 渠道安装一个包，只需输入：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the past, this was simply not possible. A non-intuitive set of keystrokes
    would be needed to install a package from `pear.chiaraquartet.net:`
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，这根本不可能实现。安装来自 `pear.chiaraquartet.net:` 的包需要一组非直观的按键操作。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The complexity is confounded by cross-channel dependencies. The `pear.chiaraquartet.net/Chiara_PEAR_Server`
    package depends on `pear.php.net/HTML_QuickForm`, and so the sequence would in
    fact need to be:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性被跨渠道依赖所加剧。`pear.chiaraquartet.net/Chiara_PEAR_Server` 包依赖于 `pear.php.net/HTML_QuickForm`，因此实际上需要按照以下顺序：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The same process would need to be repeated upon upgrading, introducing both
    painful memory requirements ("Where did I get this Chiara_PEAR_Server from again?")
    and the chance for error. What if `pear.chiaraquartet.net` happened to provide
    a package named `LogXML` and `pear.php.net` introduced one? If you were to accidentally
    type:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级时，需要重复相同的流程，这不仅带来了痛苦的回忆需求（“我上次是从哪里得到这个 Chiara_PEAR_Server 的？”），还增加了出错的机会。如果
    `pear.chiaraquartet.net` 恰好提供了一个名为 `LogXML` 的包，而 `pear.php.net` 也引入了一个包，那么如果你不小心输入了：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Without the necessary:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有必要的：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You could unknowingly upgrade to the wrong package! Channels remove all of these
    troubles, and do so with rigorous security.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会无意中升级到错误的包！渠道消除了所有这些麻烦，并且以严格的安全措施来实现。
- en: So how do you set up your own channel? This chapter will investigate the steps
    needed to install Chiara_PEAR_Server, and the structure of a channel definition
    file used to document your channel's unique features.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何设置你自己的渠道？本章将探讨安装 Chiara_PEAR_Server 所需的步骤，以及用于记录渠道独特特征的渠道定义文件的架构。
- en: In addition, we will learn how to distribute customized PEAR applications per-user,
    even for pay-for-use applications. We'll discover the **Crtx_PEAR_Channel_Frontend**
    package used to provide a public front door for users browsing the web, and finally,
    we will talk about security issues.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将学习如何按用户分发定制的 PEAR 应用程序，即使是付费使用应用程序。我们将发现用于为用户浏览网页提供公共入口的 **Crtx_PEAR_Channel_Frontend**
    包，最后，我们将讨论安全问题。
- en: Distributing a package.xml-Based Package
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发基于 package.xml 的包
- en: 'There are two ways of distributing packages (either of which can be used):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 分发包有两种方式（任选其一）：
- en: Channel server
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渠道服务器
- en: Static tarball
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态压缩包
- en: You will learn about both approaches in this section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本节中了解这两种方法。
- en: 'Before the release of PEAR 1.4.0, the user typed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PEAR 1.4.0 版本发布之前，用户需要输入：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The PEAR installer would then use XML-RPC to send a request for the `package.listAll`
    method to [http://pear.php.net/xmlrpc.php](http://pear.php.net/xmlrpc.php). Meanwhile,
    at `pear.php.net`, the database of all packages, releases, and dependencies would
    be queried for data (or a server-side cache accessed), and then it would be dynamically
    encoded into an XML-RPC response, decoded at the user end, and converted into
    a PHP array containing a list of all packages and their releases. This would then
    be formatted into a pretty list of package names and spewed out on to the screen.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 安装程序将使用 XML-RPC 发送请求，请求 `package.listAll` 方法到 [http://pear.php.net/xmlrpc.php](http://pear.php.net/xmlrpc.php)。同时，在
    `pear.php.net`，将查询所有包、发布和依赖关系的数据库以获取数据（或访问服务器端缓存），然后将其动态编码成 XML-RPC 响应，在用户端解码，并转换成一个包含所有包及其发布的
    PHP 数组。然后，这些信息将被格式化为一个漂亮的包名称列表，并显示在屏幕上。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**XML-RPC** stands for **XML Remote Procedure Call**, and is a protocol that
    allows a program to call a function on a remote server as if it were implemented
    on the local machine.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**SOAP** (until recently it was **Simple Object Access Protocol**, but now
    just "SOAP", because the developers realized there was nothing simple about it
    and it was a confusing name as well) is a more complex implementation of the same
    idea.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'From the end user''s perspective, there are two ways of installing a remote
    package using the PEAR installer. The first way is to install an abstraction,
    as in:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Each of these examples takes the information passed in by the user and converts
    it into an actual, existing URL for retrieving a file from the channel server
    (`pear.php.net` in this case), and then downloads that package for installation.
    In fact, at the time of writing this chapter, each of these examples essentially
    converts into this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The second way of installing a package is to directly specify a URL to install,
    as above.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: These two approaches appear to be the same to the end user. However, behind
    the scenes they differ significantly. When downloading and installing a package
    via an abstract package like `PEAR` or `PEAR-stable`, it is possible to validate
    all dependencies prior to downloading a single file, saving considerable time
    in the slowest part of installation — downloading. When installing a static URL
    ( [http://pear.php.net/get/PEAR-1.4.3.tgz](http://pear.php.net/get/PEAR-1.4.3.tgz)),
    it is necessary to download the entire package before any dependency validation
    can occur, possibly resulting in wasted bandwidth.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In order to convert abstract-package requests into actual physical URLs, a small
    amount of information is retrieved from the remote channel server. This information
    is used to validate dependencies prior to downloading a full package, and also
    to determine the correct version of a package to be downloaded based on the user's
    requirements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following call first retrieves a list of all releases of PEAR
    organized by version number and stability:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Assume the server returns a list like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '| Version | Stability |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| 1.5.0a1 | alpha |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| 1.4.3 | stable |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| 1.4.2 | stable |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| 1.4.1 | stable |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| 1.4.0 | stable |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| 1.4.0RC1 | beta |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| 1.4.0a14 | alpha |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: 'The PEAR installer will examine version 1.5.0a1, the newest version available,
    and will determine it is not stable enough to install. Next, it will examine version
    1.4.3 and (assuming the installed version is 1.4.2 or older) determine that this
    is the version that should be downloaded. Next, it will query the server and retrieve
    the list of dependencies for version 1.4.3, which is something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency type | Dependency name (if any) | Dependency version requirements
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| PHP |   | 4.2.0 or newer |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| PEAR installer |   | 1.3.3 1.3.6, 1.4.0a12 or newer |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| Package | Archive_Tar | 1.3.1 or newer (1.3.1 recommended) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| Package | Console_Getopt | 1.2 or newer (1.2 recommended) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| Package | XML_RPC | 1.4.3 or newer (1.4.3 recommended) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| Conflicting package | PEAR_Frontend_Web | 0.4 or older |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| Conflicting package | PEAR_Frontend_Gtk | 0.3 or older |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| Remote installer group | PEAR_RemoteInstaller | 0.1.0 or newer |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| Web installer group | PEAR_Frontend_Web | 0.5.0 or newer |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| Gtk installer group | PEAR_Frontend_Gtk | 0.4.0 or newer |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: Before downloading PEAR 1.4.3 to install it, the PEAR installer will use this
    information to determine whether the package is compatible with existing installed
    packages, and the running version of PHP and the PEAR installer. Only if all checks
    pass, will the PEAR installer continue with the downloading/installation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In addition, because PEAR 1.4.3 has a `package.xml` version 2.0, when upgrading
    from PEAR 1.4.0 or newer, the list of required dependencies will also be automatically
    downloaded and installed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: How, you might be asking yourself, can I distribute my applications and libraries
    to take advantage of the power and elegance built into the PEAR installer? The
    answer turns out to be quite simple, as evidenced by the small explosion of channel
    servers since the release of PEAR version 1.4.0, like eZ components (http://www.ez.no),
    and the popular pearified channel ( [http://www.pearified.com](http://www.pearified.com)).
    The **Chiara_PEAR_Server** package is a fully functional PEAR channel server available
    for installation from the `pear.chiaraquartet.net` channel server.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Originally, Chiara_PEAR_Server was named PEAR_Server. The intention was to propose
    a package named "PEAR_Server" or "PEAR_Channel_Server" to the `pear.php.net` repository
    when the code is stable enough. Until that point, however, there are potential
    naming conflicts (PEAR is generally reserved for packages that originate from
    `pear.php.net)`, and the package will be named Chiara_PEAR_Server as long as it
    is distributed from `pear.chiaraquartet.net`
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Once you have Chiara_PEAR_Server up and running (prerequisites include a working
    PEAR installation and a MySQL server, plus PHP 5.0.0 or newer with the mysql or
    mysqli extensions), you might also consider installing Davey Shafik's public front
    end, **Crtx_Channel_PEAR_Server_Frontend**, available from the `crtx.org` channel.
    This is discussed later on in this chapter, in the section entitled *Configuring
    the Server; Obtaining a Front End for End Users*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Distributing Packages through a Channel Server
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When distributing packages through a channel server, there are a few things
    that the PEAR installer needs in order to determine which packages to install.
    Most important is how to communicate with the channel server. Does the server
    expect an incoming XML-RPC request, or is REST supported? Which XML-RPC functions
    are implemented, and which REST information is provided? Are there any mirrors
    available? What, if any, are the custom-package validation requirements?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: All of these questions are answered by the simple `channel.xml` structure. Before
    installing Chiara_PEAR_Server, it is important to understand the underpinnings
    of the package, as it will make it possible to get up and run very quickly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都通过简单的`channel.xml`结构得到解答。在安装Chiara_PEAR_Server之前，了解该包的基础非常重要，因为它将使快速启动和运行成为可能。
- en: The channel.xml File
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`channel.xml`文件'
- en: The first thing a channel needs in order to exist is a `channel.xml` file. The
    official definition of `channel.xml` in XSchema format is found at [http://pear.php.net/dtd/channel-1.0.xsd](http://pear.php.net/dtd/channel-1.0.xsd).
    The `channel.xml` file *must* be named `channel.xml` and must be located in the
    root directory of your channel; otherwise the PEAR installer's auto-discovery
    mechanism will not work. For instance, the channel definition file for `pear.php.net`
    is located at [http://pear.php.net/channel.xml](http://pear.php.net/channel.xml),
    and the channel definition file for `pear.chiaraquartet.net` is located at [http://pear.chiaraquartet.net/channel.xml](http://pear.chiaraquartet.net/channel.xml).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通道为了存在，首先需要的是一个`channel.xml`文件。在XSchema格式中，`channel.xml`的官方定义可以在[http://pear.php.net/dtd/channel-1.0.xsd](http://pear.php.net/dtd/channel-1.0.xsd)找到。`channel.xml`文件*必须*命名为`channel.xml`，并且必须位于通道的根目录中；否则，PEAR安装程序的自动发现机制将无法工作。例如，`pear.php.net`的通道定义文件位于[http://pear.php.net/channel.xml](http://pear.php.net/channel.xml)，而`pear.chiaraquartet.net`的通道定义文件位于[http://pear.chiaraquartet.net/channel.xml](http://pear.chiaraquartet.net/channel.xml)。
- en: This file allows the PEAR installer to quickly and efficiently determine the
    capabilities offered by a channel server without wasting any bandwidth. A `channel.xml`
    file must define the channel name (its server hostname and path), a brief summary
    of the channel's purpose, and then metadata used to retrieve package information
    for installation purposes. In addition, the `channel.xml` file allows explicit
    definition of channel mirrors, for the first time making it possible to mirror
    a channel repository.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件允许PEAR安装程序快速有效地确定通道服务器提供的功能，而不会浪费任何带宽。一个`channel.xml`文件必须定义通道名称（其服务器主机名和路径）、通道目的的简要说明，以及用于检索安装目的的包信息的元数据。此外，`channel.xml`文件允许显式定义通道镜像，首次使镜像通道存储库成为可能。
- en: 'Here is an example `channel.xml` file containing every possible tag:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个包含每个可能标签的示例`channel.xml`文件：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A quick glance over the `channel.xml` file reveals a large amount of information
    contained in a very simple format. With this file, we tell the PEAR installer
    whether to use a secure connection or not, how to access the package metadata
    (with XML-RPC, SOAP, or REST), and how the user can access/use the channel (suggested
    alias, validation package).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 快速浏览`channel.xml`文件可以揭示大量信息，这些信息以非常简单的格式呈现。通过此文件，我们告诉PEAR安装程序是否使用安全连接，如何访问包元数据（使用XML-RPC、SOAP或REST），以及用户如何访问/使用通道（建议别名、验证包）。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Does PEAR Installer Support SOAP?**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**PEAR安装程序支持SOAP吗？**'
- en: No. Sorry to burst your bubble, but SOAP is not necessary for the relatively
    simple remote communication needed by the PEAR installer; so no, SOAP is not implemented.
    However, should the need arise in the future, or should a channel wish to advertise
    custom SOAP methods implemented, the `channel.xml` spec supports SOAP.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 很抱歉打破你的幻想，但SOAP对于PEAR安装程序所需的相对简单的远程通信并不是必需的；所以，SOAP没有被实现。然而，如果将来有需要，或者通道希望宣传自定义的SOAP方法，`channel.xml`规范支持SOAP。
- en: However, this should only be used to inform the client that a **WSDL** (**Web
    Services Description Language**) file is present, as this format is much richer
    than `channel.xml`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仅应用于通知客户存在一个**WSDL（Web服务描述语言**）文件，因为这种格式比`channel.xml`丰富得多。
- en: 'A channel may be located at a hostname''s root directory (**pear.example.com**),
    or at a subdirectory (pear.example.com/subdirectory). Note that `pear.example.com`
    is a different channel from `pear.example.com/subdirectory`. Users would install
    packages from the `pear.example.com/subdirectory` channel as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通道可以位于主机名的根目录（**pear.example.com**）或子目录（pear.example.com/subdirectory）。请注意，`pear.example.com`与`pear.example.com/subdirectory`是不同的通道。用户将按照以下方式从`pear.example.com/subdirectory`通道安装包：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Other packages would depend on packages from the `pear.example.com/subdirectory`
    channel with a `package.xml` tag like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其他包将依赖于来自`pear.example.com/subdirectory`通道的包，其中包含一个类似于下面的`package.xml`标签：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: channel.xml Tag Summary
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`channel.xml`标签摘要'
- en: A channel's`<summary>` should be a one-line description of the channel, such
    as "The PHP Extension and Application Repository".
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通道的`<summary>`应该是对通道的单行描述，例如：“PHP扩展和应用仓库”。
- en: The`<suggestedalias>` of a channel is the short name that a user can use on
    the command line.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通道的`<suggestedalias>`是用户可以在命令行中使用的简称。
- en: 'For instance, the `pear.php.net` channel''s suggested alias is `pear`, the
    `pecl.php.net` channel''s suggested alias is `pecl`, and the `pear.chiaraquartet.net`
    channel''s suggested alias is `chiara`. These aliases can be used to install packages
    quickly, such as:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`pear.php.net`通道的建议别名是`pear`，`pecl.php.net`通道的建议别名是`pecl`，而`pear.chiaraquartet.net`通道的建议别名是`chiara`。这些别名可以用来快速安装包，例如：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The alias is a suggested alias because the end user has the option to redefine
    the alias via the `channel-alias` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是建议的别名，因为最终用户有通过`channel-alias`命令重新定义别名的选项：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This would allow the quick installation of packages with:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许快速安装包：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You cannot use a channel's suggested alias in the dependencies section of a
    `package.xml` file. You must use the full name of channel.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在`package.xml`文件的依赖关系部分使用通道建议的别名。你必须使用通道的全名。
- en: A channel's validation package (controlled by the`<validatepackage>` tag) is
    used by the installer to perform customized validation specific to the channel.
    The default validation (found in the `PEAR/Validate.php` file of the PEAR package)
    is quite strict in terms of versioning and package naming, and attempts to implement
    coding standards that are specific to `pear.php.net-based` packages. These rules
    are stricter than the rules implemented by the `pecl.php.net` channel, and so
    `pecl.php.net` packages are validated using the custom channel validator found
    in the `PEAR/Validate/PECL.php` file of the PEAR package.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通道的验证包（由`<validatepackage>`标签控制）由安装程序用于执行针对通道的特定定制验证。默认验证（在PEAR包的`PEAR/Validate.php`文件中找到）在版本和包命名方面非常严格，并试图实现针对`pear.php.net-based`包的特定编码标准。这些规则比`pecl.php.net`通道实施的规则更严格，因此`pecl.php.net`包使用PEAR包的`PEAR/Validate/PECL.php`文件中找到的定制通道验证器进行验证。
- en: Most channels external to `pear.php.net` will want to copy the `channel.xml`
    file for the `pecl.php.net` channel, and use the `PEAR_Validate_PECL` validation
    package.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数外部于`pear.php.net`的通道都希望复制`pecl.php.net`通道的`channel.xml`文件，并使用`PEAR_Validate_PECL`验证包。
- en: A custom channel validator must provide a class that matches the path (PEAR/Validate/PECL.php
    provides the `PEAR_Validate_PECL` class), and the package name must be identical
    to the class name. In addition, the class must extend `PEAR_Validate`, and implement
    validation with the `validate*()` methods (such as `validateVersion(), validatePackage(),
    validateSummary()`, and so on). In addition, the class *must* be a package distributed
    from the channel itself, unless the class is already loaded in memory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义通道验证器必须提供一个与路径匹配的类（`PEAR/Validate/PECL.php`提供了`PEAR_Validate_PECL`类），并且包名必须与类名相同。此外，该类必须扩展`PEAR_Validate`，并实现使用`validate*()`方法（如`validateVersion()`、`validatePackage()`、`validateSummary()`等）的验证。此外，该类*必须*是来自通道本身的包分发的，除非该类已经加载到内存中。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The default validation class `PEAR_Validate` and the PECL validation class `PEAR_Validate_PECL`
    will always be available for use by channels as custom validation packages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认验证类`PEAR_Validate`和PECL验证类`PEAR_Validate_PECL`将始终可用，供通道作为自定义验证包使用。
- en: To use the `PEAR_Validate_PECL` class, simply add this line to `channel.xml:`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`PEAR_Validate_PECL`类，只需将此行添加到`channel.xml`中：
- en: '`<validatepackage version="1.0"> PEAR_Validate_PECL</validatepackage>`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`<validatepackage version="1.0"> PEAR_Validate_PECL</validatepackage>`'
- en: The most important part of the `channel.xml` channel definition file is the`<servers>`
    tag. This is where the PEAR installer determines how to connect to a channel (via
    REST or XML-RPC) and whether any mirrors are available.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`channel.xml`通道定义文件最重要的部分是`<servers>`标签。这是PEAR安装程序确定如何连接到通道（通过REST或XML-RPC）以及是否有可用镜像的地方。'
- en: 'The protocols supported by the primary channel server (which must be the same
    as the channel name) are defined in the`<primary>` tag. Mirrors are (logically)
    defined by the`<mirror>` tag, which is described at the end of this section. The`<primary>`
    tag has a few optional attributes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 主要通道服务器（必须与通道名称相同）支持的协议在`<primary>`标签中定义。镜像通过`<mirror>`标签（在本节末尾描述）逻辑上定义。`<primary>`标签有几个可选属性：
- en: '**ssl** — legal values are *yes* and *no*. By default, `ssl` is set to *no*.
    If set to *yes*, then the channel server will be contacted through a secure socket.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ssl** — 合法值是 *yes* 和 *no*。默认情况下，`ssl` 设置为 *no*。如果设置为 *yes*，则将通过安全套接字联系通道服务器。'
- en: '**port** — legal values are any positive integer. By default, `port` is set
    to *80*, the default HTTP port for contacting a remote web server. All data from
    channels are transported via HTTP, and so this is a natural choice.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口** — 合法值是任何正整数。默认情况下，`端口` 设置为 *80*，这是联系远程 Web 服务器的默认 HTTP 端口。所有来自通道的数据都通过
    HTTP 传输，因此这是一个自然的选择。'
- en: Tip
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: REST, although very new, has several significant advantages over XML-RPC. First
    of all, REST content (as implemented in the PEAR channel standard) is all static
    files. This means that a lightweight server like thttpd can be used for high-volume
    sites to serve the content. In addition, channel aggregators like [http://www.pearified.com](http://www.pearified.com)
    and [http://www.pearadise.com](http://www.pearadise.com) can crawl through your
    channel and provide a searchable index of the packages.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然 REST 非常新，但它相对于 XML-RPC 有几个显著的优势。首先，REST 内容（如 PEAR 通道标准中实现的那样）都是静态文件。这意味着可以使用轻量级服务器如
    thttpd 来为高流量站点提供服务内容。此外，像 [http://www.pearified.com](http://www.pearified.com)
    和 [http://www.pearadise.com](http://www.pearadise.com) 这样的通道聚合器可以爬取您的通道并提供包的可搜索索引。
- en: Mirroring of REST-based channels is straightforward because of the same design
    principles, and can be done with a simple web crawler script.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于遵循相同的设计原则，基于 REST 的通道镜像非常简单，可以使用一个简单的网络爬虫脚本来完成。
- en: In addition, as of PEAR 1.4.3, XML-RPC support is optional in the PEAR installer,
    so not all users will support XML-RPC on the client-side.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，从 PEAR 1.4.3 版本开始，XML-RPC 支持在 PEAR 安装程序中是可选的，因此并非所有用户都会在客户端支持 XML-RPC。
- en: 'There are only a few protocols recognized by the PEAR Installer. For XML-RPC,
    the functions recognized are:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 安装程序只识别少数几种协议。对于 XML-RPC，识别的函数有：
- en: '`logintest(1.0)` : This simply returns true'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logintest(1.0)` : 这个函数简单地返回 true'
- en: '`package.listLatestReleases(1.0)` : This returns an array indexed by package
    name containing the file size, version, state, and dependencies of its latest
    release, if any.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.listLatestReleases(1.0)` : 这个函数返回一个数组，按包名索引，包含其最新发布版本的文件大小、版本、状态和依赖项（如果有）。'
- en: '`package.listAll(1.0)` : This returns an array of packages with extreme details
    about their releases.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.listAll(1.0)` : 这个函数返回一个包含其发布版本极端详细信息的包数组。'
- en: '`package.info(1.0)` : This returns an array of detailed information about a
    single package.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.info(1.0)` : 这个函数返回关于单个包的详细信息的数组。'
- en: '`package.getDownloadURL(1.0)` : This returns an array with simple information
    about a release and a precise URL from which to download a specific release.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.getDownloadURL(1.0)` : 这个函数返回一个包含关于发布版本简单信息和精确下载 URL 的数组。'
- en: '`package.getDownloadURL(1.1)` : Like version 1.0, this returns an array with
    simple information about a release and a precise URL. In addition, this accepts
    as a parameter the currently installed version of a package to narrow down the
    search.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.getDownloadURL(1.1)` : 与版本 1.0 类似，这个函数返回一个包含关于发布版本简单信息和精确 URL 的数组。此外，这个函数接受作为参数的当前安装的包版本以缩小搜索范围。'
- en: '`package.getDepDownloadURL(1.0)` : Like `package.getDownloadURL`, this returns
    information about a release and a precise URL to download the release from. However,
    as input, it accepts a dependency as parsed from `package.xml`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.getDepDownloadURL(1.0)` : 与 `package.getDownloadURL` 类似，这个函数返回关于发布版本的信息和下载该发布版本的精确
    URL。然而，作为输入，它接受从 `package.xml` 解析出的依赖项。'
- en: '`package.getDepDownloadURL (1.1)`: Like `package.getDepDownloadURL`, this returns
    information about a release and a precise URL to download the release from. It
    also accepts the currently installed version of the dependency as a parameter.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.getDepDownloadURL (1.1)`: 与 `package.getDepDownloadURL` 类似，这个函数返回关于一个发布版本和下载该发布版本的精确
    URL 的信息。它还接受作为参数的当前已安装的依赖版本。'
- en: '`package.search(1.0)`: Like `package.listAll`, this returns a list of packages
    with detailed information. However, this function limits the search of information
    based on input parameters.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.search(1.0)`: 与 `package.listAll` 类似，这个函数返回包含详细信息的包列表。然而，这个函数根据输入参数限制信息搜索。'
- en: '`channel.listAll(1.0)`: This function returns a simple list of channels known
    by the current channel.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`channel.listAll(1.0)`: 这个函数返回当前通道所知的通道的简单列表。'
- en: This detail is provided for informational purposes only, as XML-RPC support
    is deprecated for all channels.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 提供此详细信息仅用于信息目的，因为所有通道的 XML-RPC 支持都已弃用。
- en: Instead, your channel should support REST-based static files conveying information
    about the categories, maintainers, packages, and releases available through the
    channel. There are two protocols supported by the PEAR installer at the time of
    writing this chapter. The first is collectively known as **REST1.0**, and is defined
    by a set of path-related assumptions the installer makes and several XSchema files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您的通道应该支持基于 REST 的静态文件，这些文件传达了通过通道可用的类别、维护者、软件包和发布信息。在撰写本章时，PEAR 安装程序支持两种协议。第一种统称为
    **REST1.0**，它由安装程序做出的路径相关假设和几个 XSchema 文件定义。
- en: 'Inside `channel.xml`, REST is declared using a`<baseurl>` tag much like this
    one:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `channel.xml` 文件中，REST 使用 `<baseurl>` 标签声明，类似于以下内容：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is in fact all that the installer needs in order to fully implement REST.
    From this information, the installer is able to build any necessary query to determine
    remote information. Astute readers may have noticed a familiar word from their
    work with databases — query — querying is exactly what the PEAR installer does;
    accessing data directly rather than through an API wrapper like SOAP or XML-RPC.
    Unlike the procedural protocol used by XML-RPC and by RPC-based SOAP, REST is
    based on the principle of providing hyperlinked data, or resources, with a unique
    URL for each resource.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '实际上，安装程序只需要这些信息来完全实现 REST。从这个信息中，安装程序能够构建任何必要的查询以确定远程信息。敏锐的读者可能已经注意到了他们与数据库工作中的一个熟悉词汇——查询——查询正是
    PEAR 安装程序所做的事情；直接访问数据而不是通过像 SOAP 或 XML-RPC 这样的 API 包装器。与 XML-RPC 和基于 RPC 的 SOAP
    所使用的程序性协议不同，REST 基于提供超链接数据或资源的原理，每个资源都有一个独特的 URL。 '
- en: PEAR is an unusual REST interface in that it is strictly read-only, but this
    is an even better reason to use REST. Not only can the installer grab any data
    it wants without relying upon an intrinsically limited API, we can also take advantage
    of some of the more powerful features of the HTTP protocol itself, and implement
    a client-side HTTP cache, saving a tremendous amount of bandwidth and time that
    would otherwise be spent downloading redundant information.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 是一个不寻常的 REST 接口，因为它严格是只读的，但这更是使用 REST 的好理由。不仅安装程序可以抓取它想要的任何数据而不依赖于本质上有限的
    API，我们还可以利用 HTTP 协议的一些更强大的功能，并在客户端实现 HTTP 缓存，节省大量带宽和时间，否则这些带宽和时间将用于下载冗余信息。
- en: This also provides an inherent security benefit to both the client and the server.
    The client is simply working with static XML files, and the server is not required
    to accept any input from the client whatsoever. In short, REST is simply the best
    choice from all ends.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这也为客户端和服务器提供了固有的安全优势。客户端只是与静态 XML 文件工作，服务器无需从客户端接受任何输入。简而言之，REST 简直是从所有方面来看都是最佳选择。
- en: 'The path structure expected by the PEAR installer when accessing REST1.0 is
    the following one:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问 REST1.0 时，PEAR 安装程序期望的路径结构如下：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that PackageName3 has no releases, and so has no REST entry.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，PackageName3 没有发布版本，因此没有 REST 条目。
- en: 'REST1.1 adds these files to the structure:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: REST1.1 将这些文件添加到结构中：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The primary purpose of REST1.1 is to enable spidering of a channel without requiring
    that old-fashioned directory crawling to be allowed, eliminating the potential
    security vulnerability intrinsic to all web servers.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: REST1.1 的主要目的是在不要求允许老式的目录爬行的情况下，允许对通道进行爬取，消除了所有 Web 服务器固有的潜在安全漏洞。
- en: A channel server mirror is defined by the`<mirror>` tag. This tag is identical
    to the`<primary>` tag except that it requires an additional attribute, `host`.
    The `host` attribute defines the URL that should be used to contact the mirror.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通道服务器镜像由 `<mirror>` 标签定义。此标签与 `<primary>` 标签相同，但它需要一个额外的属性，即 `host`。`host` 属性定义了用于联系镜像的
    URL。
- en: Obtaining Chiara_PEAR_Server
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 Chiara_PEAR_Server
- en: 'The Chiara_PEAR_Server package is easily obtained. First, you need to meet
    a few prerequisites. The Chiara_PEAR_Server package requires:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Chiara_PEAR_Server 软件包很容易获取。首先，您需要满足一些先决条件。Chiara_PEAR_Server 软件包需要：
- en: PHP 5.0.0 or newer; PHP 5.1.0 or newer is recommended
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 5.0.0 或更高版本；建议使用 PHP 5.1.0 或更高版本
- en: A MySQL database server
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 数据库服务器
- en: The mysql or mysqli PHP extension
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mysql 或 mysqli PHP 扩展
- en: A working web server such as Apache
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个运行中的 Web 服务器，例如 Apache
- en: PEAR version 1.4.3 or newer
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PEAR 版本 1.4.3 或更高
- en: 'To obtain PEAR version 1.4.3 or newer, if you have PHP version 5.1.0, all you
    need to do on UNIX is:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 PEAR 版本 1.4.3 或更高版本，如果您使用的是 PHP 版本 5.1.0，在 UNIX 系统上您需要做的只是：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will install and configure PEAR automatically. Note that the `configure`
    command accepts a large number of options, and it is easy to learn about them
    through `./configure --help`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动安装和配置 PEAR。请注意，`configure` 命令接受大量选项，您可以通过 `./configure --help` 来了解它们。
- en: Note that installing PHP in a web server is more complicated, and is necessary
    to install the Chiara_PEAR_Server package. If you are using Apache, all you need
    to do is pass in the `--with-apache` or `--with-apache2` directives to `configure`,
    and you will be up and running.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 Web 服务器上安装 PHP 更为复杂，并且是安装 Chiara_PEAR_Server 软件包所必需的。如果您使用 Apache，只需将 `--with-apache`
    或 `--with-apache2` 指令传递给 `configure` 即可，然后您就可以开始使用了。
- en: 'On Windows, for all PHP versions prior to version 5.2.0, you need to download
    the `.zip` version of PHP, *not* the `.msi` version. Then change to the directory
    you uncompressed PHP into and type:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，对于版本 5.2.0 之前的所有 PHP 版本，您需要下载 PHP 的 `.zip` 版本，*而不是* `.msi` 版本。然后切换到您解压缩
    PHP 的目录，并输入：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Answer the prompts and choose installation locations. In both cases, after
    installing, be sure to upgrade:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 回答提示并选择安装位置。在两种情况下，安装后，请务必升级：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will ensure that you have the latest stable version of PEAR.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保您拥有 PEAR 的最新稳定版本。
- en: Installing the mysql or mysqli PHP extensions is documented at [http://www.php.net/mysql](http://www.php.net/mysql).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: mysql 或 mysqli PHP 扩展的安装文档位于 [http://www.php.net/mysql](http://www.php.net/mysql)。
- en: 'After everything is ready, you can obtain the Chiara_PEAR_Server package via
    these simple steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，您可以通过以下简单步骤获取 Chiara_PEAR_Server 软件包：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That's it! Note that Chiara_PEAR_Server currently requires `pear.php.net` packages
    DB_DataObject and HTML_QuickForm, so be sure that you either have a working internet
    connection or have installed these packages prior to attempting to install Chiara_PEAR_Server.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！请注意，Chiara_PEAR_Server 目前需要 `pear.php.net` 软件包 DB_DataObject 和 HTML_QuickForm，所以在尝试安装
    Chiara_PEAR_Server 之前，请确保您有一个正常工作的互联网连接或者已经安装了这些软件包。
- en: Configuring the server requires running a post-installation script, which we
    cover in the following section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器需要运行一个安装后脚本，我们将在下一节中介绍。
- en: Configuring the Server; Obtaining a Front End for End Users
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置服务器；为最终用户提供前端
- en: Before we run the post-installation script, it is important to understand what
    it will need in order to function properly.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行安装后脚本之前，了解它正常运行所需的内容是很重要的。
- en: First, we need to create a MySQL user that will be used by the post-installation
    script to initialize the database and create tables. As such, this user needs
    to have `create` and `alter` permissions (use the `GRANT` command from within
    MySQL to do this). As this will be the database user used by public web scripts,
    for security reasons, it is best to remove `create/alter` permissions once the
    database has been properly initialized. The only permissions needed for everyday
    operations by the Chiara_PEAR_Server administrative back end are `insert/delete/update`.
    Note that, when upgrading Chiara_PEAR_Server, `create/alter` permissions should
    be re-granted again temporarily, just in case there are modifications or additions
    to the database.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个 MySQL 用户，该用户将由安装后脚本用于初始化数据库和创建表。因此，此用户需要具有 `create` 和 `alter` 权限（使用
    MySQL 内部的 `GRANT` 命令来完成此操作）。由于这将作为公共 Web 脚本使用的数据库用户，出于安全考虑，一旦数据库被正确初始化，最好移除 `create/alter`
    权限。Chiara_PEAR_Server 管理后端在日常工作操作中所需的唯一权限是 `insert/delete/update`。请注意，在升级 Chiara_PEAR_Server
    时，应暂时重新授予 `create/alter` 权限，以防对数据库进行修改或添加。
- en: 'Running the Chiara_PEAR_Server post-installation script is a simple task in
    PEAR, all you need to do is type:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Chiara_PEAR_Server 安装后脚本在 PEAR 中是一个简单的任务，您只需输入：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The PEAR installer will walk you through several questions. After you are finished
    with them, and if there are no errors, the channel server will be ready for operation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: PEAR 安装程序将引导您完成几个问题。完成这些问题后，如果没有错误，通道服务器将准备就绪，可以运行。
- en: '![Configuring the Server; Obtaining a Front End for End Users](img/1904811191_5_01.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![配置服务器；为最终用户提供前端](img/1904811191_5_01.jpg)'
- en: The first set of questions will ask for database-connection information, and
    for the `Handle` of the primary-channel administrator (you) and the name of the
    channel. Your `Handle` is the same as your handle or username in a `package.xml`
    file, and should be a single lower-cased word. For examples of choices of handles,
    you might browse the list of maintainers at [http://pear.php.net/accounts.php](http://pear.php.net/accounts.php).
    Your channel name must be the same as the server. So, for instance, if you are
    setting up a test server at localhost, your channel must be named `localhost`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Server; Obtaining a Front End for End Users](img/1904811191_5_02.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: The next set of questions you will need to answer relates to the basics of your
    channel. It is at this time that you should have a server name in mind. Generally
    speaking, it is easier for users to remember a channel name if there is a direct
    connection to the content it serves. For instance, if your channel serves financial
    software, perhaps a channel name like *software.companyname.com* would be good,
    with an alias like *companysoftware*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: After this, information will be requested about the primary-channel administrator.
    Finally, information will be asked about the document root of your web server.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: This section is the most important, as it will be used to create both the administrative
    front end used to maintain packages and upload releases, and the REST files used
    to support the REST protocols needed by the PEAR installer in order to function.
    In general, the default values provided in parentheses should be acceptable. However,
    it is helpful to understand the purpose of the different prompts.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '**PEAR Configuration File Location:** This specifies the location of the file
    that should be used to retrieve channel information. The Chiara_PEAR_Server channel
    simply will not function at all unless it can retrieve information about its own
    channel, so this value needs to be right.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path to document root of web server for localhost:** This should be the full
    path on your local file system to the base of your web server. If your web server
    reads `/var/lib/web/htdocs/servername/index.php` when a user requests [http://servername/index.php](http://servername/index.php),
    then your document root is `/var/lib/web/htdocs/servername`.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name of frontend.php HTML admin frontend file:** This is the filename of
    your administrative front-end file. Choosing a unique file name will help prevent
    annoying or prevent malicious people from unwanted attempts to access the channel
    administrative interface.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**temporary path to save release uploads in:** This should be a web server-writeable
    location in which you initially save uploaded releases.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**port clients should connect to (443 is SSI, 80 is regular HTTP):** Follow
    the instructions. If you have a typical configuration, 80 is normal for `http://`
    and 443 is typical for `https://`.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**protocol clients should use to connect (http or https):** Again, choose one
    of the two options.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a Package and Releasing Packages
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have completed the post-installation script, navigate to the administrative
    front-end file, whose name you specified in the **name of frontend.php HTML admin
    frontend file** section. For instance, if your front-end file is named `foo.php`,
    and your channel is localhost, navigate to `http://localhost/foo.php`. You should
    see something like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Package and Releasing Packages](img/1904811191_5_03.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: To log in as the administrator, enter the handle and password that you specified
    for the administrator in the post-installation script. After logging in, prior
    to uploading a release, you first need to create the package on the server, and
    then add maintainers.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in, you will see a screen similar to this one:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Package and Releasing Packages](img/1904811191_5_04.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Links for configuring the channel are on the left side of the screen. To get
    started, you may also want to create some categories for the software you are
    releasing, such as "Database" or "XML Processing." For examples of categories,
    see [http://pear.php.net/packages.php](http://pear.php.net/packages.php).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created categories, you will want to add maintainers and create
    packages. Creating a package is straightforward. First, click **Create a Package**,
    and you will see a screen like the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Package and Releasing Packages](img/1904811191_5_05.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the required fields (marked by a red asterisk), and then click **Save
    Changes**. The next step is very important: before you can upload a release, you
    will need to create maintainers and add them as maintainers to the package. To
    do this, click on the **(Maintainers)** link next to your newly created package
    seen at the left side of the screen:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Package and Releasing Packages](img/1904811191_5_06.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: Once you have chosen the maintainer, and the role, and whether the maintainer
    is active, click **Add Maintainer**, and the maintainer will show up on the list
    of package maintainers.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Who can Upload Releases?**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: The channel administrator can upload a release for any package on the channel,
    and also package maintainers who are listed as a lead at the channel can upload
    packages. Note that a maintainer listed as lead in the `package.xml` file but
    not at the channel's administrative front end will *not* be able to upload a release
    for security reasons.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Public Channel Front End
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After Chiara_PEAR_Server is configured and running, you may wish to install
    Davey Shafik's **Crtx_PEAR_Channel_Frontend** package from channel `pear.crtx.org`.
    The Crtx_PEAR_Channel_Frontend package provides a browsable website that allows
    developers to look at the packages your channel offers and how to acquire them.
    In addition, it has a support for linking to a bug tracker, online revision control
    browser, and other features. Crtx_PEAR_Channel_Frontend is to Chiara_PEAR_Server
    as [http://pear.php.net](http://pear.php.net) is to the installer data provided
    at [http://pear.php.net/rest](http://pear.php.net/rest).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'Acquiring Crtx_PEAR_Channel_Frontend can be done via these steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Once you have installed the package, there are some minor configurations to
    be performed (this may be automated by a post-installation script in future releases).
    First, you need to locate the `pear_frontend.css` file, which is installed into
    `data_dir/Crtx_PEAR_Channel_Frontend/data/pear_frontend.css`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`data_dir` is the path to data (normally `/usr/local/lib/php/data` on UNIX,
    and `C:\php5\PEAR\data` or `C:\php4\PEAR\data` on Windows) as defined by the PEAR
    `data_dir` configuration variable. Once the file is located, copy this to the
    document root of your channel.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'After copying the `pear_frontend.css` file, you need to create the public front-end
    PHP file. A sample front end follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This file, if saved as `index.php` in the document root of the `localhost`
    web server, will provide an attractive screen similar to the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing a Public Channel Front End](img/1904811191_5_07.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: There are several nice features built into this package, including RSS feeds
    and the ability to email maintainers. In addition, customization of the look and
    feel is straightforward, accomplished through elementary modification of the `pear_frontend.css`
    file and the `index.php` front end. With very little work, a very attractive front
    end can be created. Examples of the diversity of possibilities include [http://pear.crtx.org](http://pear.crtx.org)
    and [http://pear.php-tools.net](http://pear.php-tools.net).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Distributing Pay-For-Use PHP Applications through a Channel
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the more common questions posed about channels is: "Can my business
    distribute pay-for-use PHP applications through a channel, and restrict access?"
    The answer is a resounding yes.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'The PEAR installer implements HTTP authentication through the use of the `pear
    login` command. To distribute your non-free applications, it is best to rely upon
    the strengths of web servers like Apache. For instance, by making "get" a file
    and using the `ForceType` directive in `httpd.conf` like the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can use a file named `get` that contains PHP code to process the login/password
    supplied by a user and direct them to a restricted package customized for their
    login. In fact, normal users could be directed to a trial version of the software,
    without any change to their installation process.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the PEAR Installer only supports HTTP Basic authentication, and for
    a truly secure connection, SSL (HTTPS) should be used, otherwise anyone can glean
    the restricted passwords. Here is a sample script for the `get` file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The above example shows how easily even complex version validation can be accomplished.
    However, this approach does not scale very efficiently — every download is funneled
    through the PHP interpreter, which is considerably slower than fetching a static
    file. Another option, which will only work with PEAR versions 1.4.9 or newer,
    is to send a redirect header (402), and allow Apache to handle the actual file
    download. However, the savings are minimal enough over using `readfile()` that
    it may not be worth requiring users to upgrade.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Another option is to simply restrict access to files using HTTP Basic authentication
    in `.htaccess` files for individual tarballs. This is most likely to be scalable.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, instruct users to take these steps when first setting their login/password:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The user/password will only be sent when the user requests a package from `your.channel.com`,
    taking advantage of per-channel configuration.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use SSL for your channel, so that username/password
    pairs are never sent in plaintext.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: That's all that is necessary!
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Distributing Packages through Static tarballs for Single-Client Installations
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to distributing packages via a channel, it is also possible to distribute
    a single release and post it to the Web.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**PEAR 1.4.10 is needed to Install Static Releases with Dependencies**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: A bug in the PEAR installer prevents installing static tarballs; use version
    1.4.10 or newer to get the fix for this problem.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'This basically involves packaging up a release via `pear package` and then
    uploading it to a website, where it can then be downloaded, or installed directly
    via:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is nothing new: the earliest versions of the PEAR installer supported
    this syntax. What is new is the ability to depend on these **static tarballs**
    in other package releases.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Who Needs this Feature?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, it is not necessary to set up a channel server. In general, it
    is better to set up a channel server and distribute packages in that manner. However,
    a common real-world situation is a PHP consultant who is providing services to
    multiple clients, and also maintaining their websites for them. Although every
    site is unique, it is very helpful to have a set of utility packages that can
    be used by each specific site. To provide a channel for these packages only introduces
    unneeded complexity.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: By installing your client's website as a PEAR package, it becomes possible for
    you as the software consultant to easily maintain the site and regulate its content
    in a much stricter manner than channels allow.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Differences in package.xml and Dependencies
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to prevent name collisions between channels and static tarballs, a
    static tarball''s `package.xml` file cannot use the [<channel>](http://<channel>)
    tag, and must instead use the`<uri>` tag. In addition, the`<uri>` tag must contain
    the actual location of the tarball on the Internet. If the static tarball is located
    at [http://www.example.com/tarballs/Package-1.0.0.tgz](http://www.example.com/tarballs/Package-1.0.0.tgz),
    the `package.xml` file should begin with something like this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It is very important to notice that the `uri` has the file extension, `.tgz`,
    removed. This is because when providing a static tarball, it is expected that
    you will also provide an uncompressed `.tar` for users who do not have the zlib
    extension enabled.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'To depend on this static tarball, a dependency tag like the following should
    be used:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Versioning has no meaning when working with static tarballs as dependencies,
    and so none of the normal versioning tags (`<min>,<max>, <recommended>`) are allowed.
    However, it is possible to upgrade static tarballs.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Each static tarball package has an implied`<channel>__uri</channel>` tag —
    all static tarballs are installed/upgraded/uninstalled as if in the pseudo-channel
    `__uri`. This channel is treated just like other channels except that it cannot
    be modified via the `channel-update` command, deleted via the `channel-delete`
    command, and it does not contain a server, and so will never attempt to contact
    the Internet to query a remote channel server. Running `pear channel-info __uri`
    results in:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In addition to demonstrating the qualities of the `__uri` pseudo-channel, it
    tells us that static tarball packages are validated with the same strictness that
    `pear.php.net` channel packages are validated (using `PEAR_Validate`). If you
    need flexibility of validation, it is necessary to use a channel instead of distributing
    your software as a static tarball.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this also means that after installing our static package via:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It is possible to upgrade this package, should a new version be released, via:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In addition, it is possible to uninstall the package via the simple:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you wish to see a list of all static tarball packages installed, simply
    run the `list` command with the -c option:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Beware the simplicity of static tarballs! If there is any chance your end user
    will install static tarballs from any other source, you must distribute your packages
    from a channel. Otherwise, the user could run into a name collision between two
    different packages, as illustrated by these two hypothetical install commands:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In this case, the package named `Foo` distributed from `www.example.com/tarballs`
    is not the same code-base as the package named `Foo` distributed from `www.notexample.com`,
    but the PEAR installer treats them both as if you had typed:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this situation, the chance of subtle to severe breakage is immediate and
    difficult to debug. Don't push your luck; use a channel if there is any chance
    that this situation could occur.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Releasing Equals Uploading
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated earlier, the biggest advantage to using a static tarball instead
    of a channel is that releasing a new package simply involves uploading both a
    `.tgz` and a `.tar` of the release as created by the commands:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It doesn't get any easier than this!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Security Issues Inherent in Remote Installation
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As evidenced by the advent of internet worms taking advantage of vulnerabilities
    in phpBB, MySpace.com, and XML_RPC, security holes are no laughing matter, and
    it is critical that you are aware of the potential risks involved in installing
    software you have not written yourself.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the PEAR-installer model provides both ease of upgrading to obtain
    needed security fixes and intrinsic security to ensure you won't become a victim
    of malicious hackers just by using the PEAR installer.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Although the PEAR developers have taken every step to ensure the safety of your
    code without restricting its usefulness, it is still very important that you understand
    some basics of security, as PEAR will not be able to protect you from yourself,
    should you choose to use or write insecure code. There are several excellent references
    written recently on PHP security and on internet security in general. Both Ilia
    Alshanetsky's *php|architect's Guide to PHP Security* and Chris Shiflett's *Essential
    PHP Security* guide are a good place to start if you are unfamiliar with concepts
    such as escaping output, filtering input, or terms like XSS, arbitrary code execution,
    security through obscurity, and so on.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many developers mistakenly develop and operate under the old golden rule: "Do
    unto others as you would have them do unto you." This approach is fatally flawed
    when you are developing code that has a component of internet connectivity. If
    it is possible for anyone other than you to access the PHP application you have
    written, then you need to assume that they have only the worst intentions.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'As you design a feature, think to yourself: "How could I use this feature to
    modify the environment of the machine it is running on? Can I use it to perform
    unexpected actions?"'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: If the answer is "yes" or even "maybe" then the feature is intrinsically insecure
    and must be restricted until the answer is "no" or "only in extreme circumstances
    that would render it useless by other safeguards that are in place".
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: How do PEAR Installer and Chiara_PEAR_Server Provide Security?
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PEAR installer has taken a number of important steps to provide security.
    However, at its essence, the PEAR installer is ultimately designed to install
    arbitrary PHP code — this is its raison d''être, so the first rule of security
    with PEAR must be:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Never* install a package on a live, production site without first looking
    at the code it provides on a development server.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Extra Security beyond what PEAR Provides
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although most basic actions taken by the PEAR installer have a reasonable expectation
    of security, there are a few that should be avoided.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: This means, for instance, that `upgrade-all` should be avoided at all costs
    on production servers. This command upgrades all existing packages to the latest
    version, which intrinsically removes your ability to control upgrades. This command
    is best used on a development server when testing newer versions of packages prior
    to upgrading them individually on the production server.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, if you are installing a package distributed by a channel other
    than those hosted at `php.net` (`pear.php.net` and `pecl.php.net` at the time
    of writing this chapter), first download the package and run two commands on the
    package to learn more about it:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The first will tell you dependencies that the package has. If you don't recognize
    those dependencies, then you will need to perform the same steps on them.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: The `list-files` command lists all files in the archive. Look for files installed
    into the `PEAR/` subdirectory. Unless the package is providing a custom file role,
    custom file task, or a custom command, a package generally has no business installing
    files into this location, as this is the directory used by the PEAR Installer.
    Any files installed into this directory could be attempting to maliciously affect
    the way the installer works.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious exceptions to this rule are packages whose names contain PEAR
    such as `PEAR_PackageFileManager`. If a package is installing files into locations
    that don't appear to have much to do with the stated purpose, you should immediately
    be suspicious. Contact the package maintainer, and ask why the package needs to
    install files there.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: If you do not receive a satisfactory response, notify the PEAR developer's mailing
    list immediately at `<[pear-dev@lists.php.net](mailto:pear-dev@lists.php.net)>`.
    Any channel that attempts to provide malicious packages will be blacklisted by
    the PEAR installer.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'Even more importantly, if there is only one thing that you remember from this
    book, let it be this one:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Never* run post-installation scripts without looking over the PHP source of
    the post-installation script.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Post-installation scripts are by definition arbitrary PHP code. Anything that
    can be done in PHP can be done by a post-installation script. This includes actions
    like installing spyware, erasing your hard disk, and other things you probably
    don't intend when running the `pear run-scripts` command. It is never worth risking
    your entire system for the minor convenience of not looking at a script.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the chance of a malicious package being distributed by a channel
    is extremely low, due to the extreme ease of tracing a malicious package to the
    source, as well as requiring explicit user installation of the package. Both of
    these factors will not be enough to discourage evildoers out there unless you
    also are vigilant about installing packages from unknown sources, so that they
    are caught before any significant damage is done.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: In addition, it is crucial that you upgrade the PEAR installer to version 1.4.3
    or newer, and continually upgrade as new versions of the installer are released.
    Bugs, security issues, and minor fixes are sure to be addressed in newer versions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Specific Security Principles Applied in Designing the PEAR Installer and Chiara_PEAR_Server
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When designing and implementing the latest versions of the PEAR installer, one
    of the primary concerns was preventing unanticipated modifications of the user
    environment. By opening up the installer to take advantage of sources other than
    `pear.php.net/pecl.php.net` for packages, and adding features like post-installation
    scripts, custom file roles, and custom file tasks, there is an element of risk.
    Every new feature balances openness to legitimate activity with restriction of
    dangerous activity.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, channels are defined by their server name. This means that you
    cannot automatically and secretly change the source of packages distributed by
    `pear.php.net`. In addition, when a user runs:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The PEAR installer attempts to retrieve [http://mychannel.example.com/channel.xml](http://mychannel.example.com/channel.xml).
    A clever and evil channel administrator could in fact serve a `channel.xml` file
    that did not define `mychannel.example.com`. This kind of mischief is immediately
    detected by the installer, and is disallowed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: The addition of channel mirrors also introduces an element of risk. By defining
    these mirrors in `channel.xml`, it is not possible to subvert the installer into
    believing another channel is a legitimate mirror of a channel.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: When downloading a package from a channel, strict verification of the `package.xml`
    is performed. If a package is downloaded from channel `foo.example.com` and its
    `package.xml` claims to be from `pear.php.net`, the PEAR installer refuses to
    install or upgrade the package, as this would be a blatant security exploit.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if the requested package name is not the same as the package name
    in `package.xml`, the PEAR installer will refuse to install or upgrade the package.
    Otherwise, it would be possible to distribute a package claiming to be `foo.example.com/Foo`
    and actually distributing `pear.php.net/PEAR`. The same mechanism prevents dependencies
    on malicious packages. A package downloaded from a channel/package must be that
    channel/package, period. The same is true for static tarballs. A package depended
    on using a static-tarball package dependency cannot distribute a channel-based
    package.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'The most potentially dangerous features implemented in the PEAR installer are
    post-installation scripts and custom file tasks. Both of these features automatically
    execute arbitrary code when invoked. PEAR provides a layer of security by making
    it extremely difficult to accidentally execute malicious code. A user must:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly install a malicious file task
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicitly install a package that uses the malicious file task
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For post-installation scripts, the end user must:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly install a package containing malicious post-installation scripts
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicitly type pear `run-scripts maliciouschannel/maliciouspackage` for the
    malicious package
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These extra steps allow the PEAR installer to make it very difficult to accidentally
    compromise a system, and also to provide extreme visibility to the fact that an
    unusual circumstance is being executed.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that until PEAR version 1.4.3, the PEAR installer had
    two security vulnerabilities. Both require a user to install a publicly distributed
    malicious package. Both were caused by improper implementation of the command
    pattern.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'The command pattern is a method of providing extensibility based on loading
    files in a special subdirectory. The PEAR installer has been using this pattern
    since version 1.0 to load the actual commands shown when you type:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The files implementing this pattern are located in `PEAR/Command/*.php` (PEAR/Command/Auth.php,
    `PEAR/Command/Install.php`, etc.), and in PEAR versions 1.4.2 and older, these
    files were loaded up every time the user used the `pear` command.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: This ultimately provides a vector for a malicious package to execute arbitrary
    PHP code in an uncontrolled situation. PEAR 1.4.3 and newer versions fix this
    through the implementation of an XML format describing commands. No actual PHP
    code is loaded unless the user explicitly requests a command other than `help`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: The command pattern is also used for custom file roles, first introduced in
    PEAR 1.4.x. All files `PEAR/Installer/Role/*.php` were loaded up every time the
    `pear` command was executed in order to construct the list of custom configuration
    variables. The same solution that fixed the arbitrary code execution vulnerability
    in commands is implemented to fix this vulnerability.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter showed us that channels are designed to make it easy to install
    packages from any location, but difficult to compromise your system in the process,
    following a basic security principle: always make the easiest way to do things
    the most secure way.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Channels open up `pear.php.net's` monopoly over the PEAR installer to the entire
    Internet. Custom-built packages distributed through your channel can even be sold
    and made available to specific users while co-existing peacefully with publicly
    available open source-packages.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
