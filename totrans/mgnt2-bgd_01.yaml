- en: Chapter 1. Understanding the Platform Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Magento** is a powerful, highly scalable, and highly customizable e-commerce
    platform that can be used to build web shops and, if needed, some non-e-commerce
    sites. It provides a large number of e-commerce features out of the box.'
  prefs: []
  type: TYPE_NORMAL
- en: Features such as product inventory, shopping cart, support for numerous payment
    and shipment methods, promotion rules, content management, multiple currencies,
    multiple languages, multiple websites, and so on make it a great choice for merchants.
    On the other hand, developers enjoy the full set of merchant-relevant features
    plus all the things related to actual development. This chapter will touch upon
    the topic of robust Web API support, extensible administration interface, modules,
    theming, embedded testing frameworks, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, a high-level overview of Magento is provided in the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The technology stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The architectural layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The top-level filesystem structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module filesystem structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The technology stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento''s highly modular structure is a result of several open source technologies
    embedded into a stack. These open source technologies are composed of the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP**: PHP is a server-side scripting language. This book assumes that you
    have advanced knowledge of the object-oriented aspects of PHP, which is often
    referred to as **PHP OOP**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coding standards**: Magento puts a lot of emphasis on coding standards. These
    include **PSR-0** (the autoloading standard), **PSR-1** (the basic coding standards),
    **PSR-2** (the coding style guide), **PSR-3**, and **PSR-4**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composer**: Composer is a dependency management package for PHP. It is used
    to pull in all the vendor library requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML**: HTML5 is supported out of the box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**: Magento supports CSS3 via its in-built **LESS CSS** preprocessor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQuery**: jQuery is a mature cross-platform JavaScript library that was designed
    to simplify the DOM manipulation. It is one of the most popular JavaScript frameworks
    today.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RequireJS**: RequireJS is a JavaScript file and module loader. Using a modular
    script loader such as RequireJS helps improve the speed and quality of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Third-party libraries**: Magento comes packed with lot of third-party libraries,
    with the most notable ones being **Zend Framework** and **Symfony**. It is worth
    noting that Zend Framework comes in two different major versions, namely version
    1.x and version 2.x. Magento uses both of these versions internally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache or Nginx**: Both Apache and Nginx are HTTP servers. Each has its distinct
    advantages and disadvantages. It would be unfair to say one is better than another,
    as their performance widely depends on the entire system''s setup and usage. Magento
    works with Apache 2.2 and 2.4 and Nginx 1.7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL**: MySQL is a mature and widely used **relational database management
    system** (**RDBMS**) that uses **structured query language** (**SQL**). There
    are both free community versions and commercial versions of MySQL. Magento requires
    at least the of **MySQL Community Edition** version 5.6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MTF**: **Magento Testing Framework** (**MTF**) delivers an automated testing
    suite. It covers various types of tests, such as performance, functional, and
    unit testing. The entire MTF is available on GitHub, which can be viewed by visiting
    [https://github.com/magento/mtf](https://github.com/magento/mtf) as an isolated
    project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different pieces of technology can be glued into various architectures. There
    are different ways to look at the Magento architecture—from the perspective of
    a module developer, system integrator, or a merchant, or from some other angle.
  prefs: []
  type: TYPE_NORMAL
- en: The architectural layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From top to bottom, Magento can be divided into four architectural layers, namely
    *presentation*, *service*, *domain*, and *persistence*.
  prefs: []
  type: TYPE_NORMAL
- en: The *presentation* layer is the one that we directly interact with through the
    browser. It contains layouts, blocks, templates, and even controllers, which process
    commands to and from the user interface. Client-side technologies such as jQuery,
    RequireJS, CSS, and LESS are also a part of this layer. Usually, three types of
    users interact with this layer, namely web users, system administrators, and those
    making the Web API calls. Since the Web API calls can be made via HTTP in a manner
    that is the same as how a user uses a browser, there's a thin line between the
    two. While web users and Web API calls consume the presentation layer as it is,
    the system administrators have the power to change it. This change manifests in
    the form of setting the active theme and changing the content of the **CMS** (short
    for **content management system**) pages, blocks, and the products themselves.
  prefs: []
  type: TYPE_NORMAL
- en: When the components of a presentation layer are being interacted with, they
    usually make calls to the underlying service layer.
  prefs: []
  type: TYPE_NORMAL
- en: The *service* layer is the bridge between the presentation and domain layer.
    It contains the service contracts, which define the implementation behavior. A
    **service contract** is basically a fancy name for a PHP interface. This layer
    is where we can find the REST/SOAP APIs. Most user interaction on the storefront
    is routed through the service layer. Similarly, the external applications that
    make the REST/SOAP API calls also interact with this layer.
  prefs: []
  type: TYPE_NORMAL
- en: When the components of a service layer are being interacted with, they usually
    make calls to the underlying domain layer.
  prefs: []
  type: TYPE_NORMAL
- en: The *domain* layer is really the business logic of Magento. This layer is all
    about generic data objects and models that compose the business logic. The domain
    layer models themselves do not contribute to data persistence, but they do contain
    a reference to a resource model that is used to retrieve and persist the data
    to a MySQL database. A domain layer code from one module can interact with a domain
    module code from another module via the use of *event observers*, *plugins*, and
    the *di.xml* definitions. We will look into the details of these later on in other
    chapters. Given the power of plugins and di.xml, its important to note that this
    interaction is best established using service contracts (the PHP interface).
  prefs: []
  type: TYPE_NORMAL
- en: When the components of the domain layer are being interacted with, they usually
    make calls to the underlying persistence layer.
  prefs: []
  type: TYPE_NORMAL
- en: The *persistence* layer is where the data gets persisted. This layer is in charge
    of all the **CRUD** (short for **create, read, update, and delete**) requests.
    Magento uses an active record pattern strategy for the persistence layer. The
    model object contains a resource model that maps an object to one or more database
    rows. Here, it is important to differentiate the cases of simple resource model
    and the **Entity-Attribute-Value** (**EAV**) resource models. A simple resource
    model maps to a single table, while the EAV resource models have their attributes
    spread out over a number of MySQL tables. As an example, the `Customer` and `Catalog`
    resource models use EAV resource models, while the newsletter's `Subscriber` resource
    model uses a simple resource model.
  prefs: []
  type: TYPE_NORMAL
- en: The top-level filesystem structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following list depicts the root Magento filesystem structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.htaccess`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.htaccess.sample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.php_cs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.travis.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHANGELOG.md`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONTRIBUTING.md`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONTRIBUTOR_LICENSE_AGREEMENT.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPYING.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gruntfile.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE_AFL.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`composer.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`composer.lock`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nginx.conf.sample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`php.ini.sample`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pub`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`var`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `app/etc/di.xml` file is one of the most important files that we might often
    look into during development. It contains various class mappings or preferences
    for individual interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The `var/magento/language-*` directories is where the registered languages reside.
    Though each module can declare its own translations under `app/code/{VendorName}/{ModuleName}/i18n/`,
    Magento will eventually fall back to its own individual module named `i18n` in
    case translations are not found in the custom module or within the theme directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `bin` directory is where we can find the `magento` file. The `magento` file
    is a script that is intended to be run from a console. Once triggered via the
    `php bin/magento` command, it runs an instance of the `Magento\Framework\Console\Cli`
    application, presenting us with quite a number of console options. We can use
    the `magento` script to enable/disable cache, enable/disable modules, run an indexer,
    and do many other things.
  prefs: []
  type: TYPE_NORMAL
- en: The `dev` directory is where we can find the Magento test scripts. We will have
    a look at more of those in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The `lib` directory comprises two major subdirectories, namely the server-side
    PHP library code and fonts found under `lib/internal` and the client-side JavaScript
    libraries found in `lib/web`.
  prefs: []
  type: TYPE_NORMAL
- en: The `pub` directory is where the publicly exposed files are located. This is
    the directory that we should set as root when setting up Apache or Nginx. The
    `pub/index.php` file is what gets triggered when the storefront is opened in a
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: The `var` directory is where the dynamically generated group type of files such
    as cache, log, and a few others get created in. We should be able to delete the
    content of this folder at any time and have Magento automatically recreate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `vendor` directory is where most of the code is located. This is where
    we can find various third-party vendor code, Magento modules, themes, and language
    packs. Looking further into the `vendor` directory, you will see the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.htaccess`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`braintree`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`composer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doctrine`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fabpot`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`justinrainbow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`league`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lusitanian`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`magento`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`monolog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oyejorge`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdepend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pelago`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpmd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpseclib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpunit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`psr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sebastian`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seld`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sjparkinson`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`squizlabs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symfony`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tedivm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tubalmartin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zendframework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within the vendor directory, we can find code from various vendors, such as
    `phpunit`, `phpseclib`, `monolog`, `symfony`, and so on. Magento itself can be
    found here. The Magento code is located under `vendor/magento` directory, listed
    (partially) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`composer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`language-en_us`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`magento-composer-installer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`magento2-base`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-authorization`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-backend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-catalog`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-customer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-theme`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-translation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-ui`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-url-rewrite`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-version`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-webapi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module-widget`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme-adminhtml-backend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme-frontend-blank`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme-frontend-luma`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will see that the further structuring of directories follows a certain naming
    schema, whereas the `theme-*` directory stores themes, the `module-*` directory
    stores modules, and the `language-*` directory stores registered languages.
  prefs: []
  type: TYPE_NORMAL
- en: The module filesystem structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento identifies itself as a highly modular platform. What this means is
    that there is literally a directory location where modules are placed. Let''s
    take a peak at the individual module structure now. The following structure belongs
    to one of the simpler core Magento modules—the `Contact` module that can be found
    in `vendor/magento/module-contact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Block`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`composer.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controller`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etc`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`acl.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminhtml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email_templates.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frontend`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`di.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`page_types.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routes.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Helper`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i18n`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE_AFL.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Model`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.md`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registration.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unit`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Block`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controller`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Helper`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Model`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminhtml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frontend`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contact_index_index.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default.xml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form.phtml`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though the preceding structure is for one of the simpler modules, you can
    see that it is still quite extensive.
  prefs: []
  type: TYPE_NORMAL
- en: The `Block` directory is where the view-related block PHP classes are located.
  prefs: []
  type: TYPE_NORMAL
- en: The `Controller` directory is where the controller-related PHP classes are stored.
    This is the code that responds to the storefront `POST` and `GET HTTP` actions.
  prefs: []
  type: TYPE_NORMAL
- en: The `etc` directory is where the module configuration files are present. Here,
    we can see files such as `module.xml`, `di.xml`, `acl.xml`, `system.xml`, `config.xml`,
    `email_templates.xml`, `page_types.xml`, `routes.xml`, and so on. The `module.xml`
    file is an actual module declaration file. We will look into the contents of some
    of these files in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The `Helper` directory is where various helper classes are located. These classes
    are usually used to abstract various store configuration values into the getter
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `i18n` directory is where the module translation package CSV files are stored.
  prefs: []
  type: TYPE_NORMAL
- en: The `Module` directory is where the entities, resource entities, collections,
    and various other business classes can be found.
  prefs: []
  type: TYPE_NORMAL
- en: The `Test` directory stores the module unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: The `view` directory contains all the module administrator and storefront template
    files (`.phtml` and `.html`) and static files (`.js` and `.css`).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `registration.php` is a module registration file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a quick look at the technology stack used in Magento.
    We discussed how Magento, being an open source product, takes extensive use of
    other open source projects and libraries such as MySQL, Apache, Nginx, Zend Framework,
    Symfony, jQuery, and so on. We then learned how these libraries are arranged into
    directories. Finally, we explored one of the existing core modules and briefly
    took a look at an example of a module's structure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to tackle the environment setup so that we
    can get Magento installed and ready for development.
  prefs: []
  type: TYPE_NORMAL
