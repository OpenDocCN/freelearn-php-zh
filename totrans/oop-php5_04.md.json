["```php\n<?\n//interface.Notifier.php\ninterface notifier\n{\n  public function notify();\n}\n?>\n```", "```php\nclass.emailnotifier.php\n<?\ninclude_once(\"interface.notifier.php\");\nclass EmailNotifier implements notifier \n{\n  public function notify()\n  {\n    //do something to notify the user by Email\n  }\n}\n?>\n```", "```php\nclass.faxnotifier.php\n<?\ninclude_once(\"notifier.php\");\nclass FaxNotifier implements notifier \n{\n  public function notify()\n  {\n    //do something to notify the user by Fax\n  }\n}\n?>\n```", "```php\nclass.smsnotifier.php\n<?\ninclude_once(\"notifier.php\");\nclass SMSNotifier implements notifier \n{\n  public function notify()\n  {\n    //do something to notify the user by SMS\n  }\n}\n?>\n```", "```php\n<?\ninclude_once(\"EmailNotifier.php\");\ninclude_once(\"FaxNotifier.php\");\ninclude_once(\"SMSNotifier.php\");\n\n/**\n * Let's create a mock object User which we assume has a method named\n * getNotifier(). This method returns either \"sms\" or \"fax\" or \"email\"\n */\n\n$user = new User();\n$notifier = $user->getNotifier();\nswitch ($notifier)\n{\n  case \"email\":\n    $objNotifier = new EmailNotifier();\n    break;\n  case \"sms\":\n    $objNotifier = new SMSNotifier();\n    break;\n  case \"fax\":\n    $objNotifier = new FaxNotifier();\n  break;\n}\n\n$objNotifier->notify();\n?>\n```", "```php\n<?\nclass MySQLManager\n{\n  public function setHost($host)\n  {\n    //set db host\n  }\n\n  public function setDB($db)\n  {\n    //set db name\n  }\n  public function setUserName($user)\n  {\n    //set user name\n  }\n  public function setPassword($pwd)\n  {\n    //set password\n  }\n\n  public function connect()\n  {\n    //now connect\n  }\n}\ns\n?>\n```", "```php\n<?\n$MM = new MySQLManager();\n$MM->setHost(\"host\");\n$MM->setDB(\"db\");\n$MM->setUserName(\"user\");\n$MM->setPassword(\"pwd\");\n$MM->connect();\n?>\n```", "```php\n<?\nclass PostgreSQLManager\n{\n  public function setHost($host)\n  {\n    //set db host\n  }\n\n  public function setDB($db)\n  {\n    //set db name\n  }\n  public function setUserName($user)\n  {\n    //set user name\n  }\n  public function setPassword($pwd)\n  {\n    //set password\n  }\n\n  public function connect()\n  {\n    //now connect\n  }\n}\n\n?>\n```", "```php\n<?\n$PM = new PostgreSQLManager();\n$PM->setHost(\"host\");\n$PM->setDB(\"db\");\n$PM->setUserName(\"user\");\n$PM->setPassword(\"pwd\");\n$PM->connect();\n?>\n```", "```php\n<?\n  If ($dbtype==\"mysql\")\n  //use mysql class\n  Else if ($dbtype==\"postgresql\")\n  //use postgresql class\n?>\n```", "```php\n<?\nclass DBManager\n{\n  public static function setDriver($driver)\n  {\n    $this->driver = $driver;\n  //set the driver\n  }\n\n  public static function connect()\n  {\n    if ($this->driver==\"mysql\")\n    {\n      $MM = new MySQLManager();\n      $MM->setHost(\"host\");\n      $MM->setDB(\"db\");\n      $MM->setUserName(\"user\");\n      $MM->setPassword(\"pwd\");\n      $this->connection = $MM->connect();\n    }\n    else if($this->driver==\"pgsql\")\n    {\n      $PM = new PostgreSQLManager();\n      $PM->setHost(\"host\");\n      $PM->setDB(\"db\");\n      $PM->setUserName(\"user\");\n      $PM->setPassword(\"pwd\");\n      $this->connection= $PM->connect();\n    }\n  }\n}\n?>\n```", "```php\n<?\n$DM = new DBManager();\n$DM->setDriver(\"mysql\");\n$DM->connect(\"host\",\"user\",\"db\",\"pwd\");\n?>\n```", "```php\n<?\nabstract class DBDriver\n{\n  public function connect();\n  public function executeQuery();\n  public function insert_id();\n  public function setHost($host)\n  {\n    //set db host\n  }\n\n  public function setDB($db)\n  {\n    //set db name\n  }\n  public function setUserName($user)\n  {\n    //set user name\n  }\n  public function setPassword($pwd)\n  {\n    //set password\n  }\n  //.....\n}\n?>\n```", "```php\n<?\nclass MySQLManager extends DBDriver \n{\n  public function connect()\n  {\n    //implement own connection procedures\n  }\n\n  public function executeQuery()\n  {\n    //execute mysql query and return result\n  }\n\n  public function insertId()\n  {\n    //find the latest inserted id\n  }\n}\n?>\n```", "```php\n<?\nclass Writely implements DocManager()\n{\n  public function authenticate($user, $pwd)\n  {\n    //authenticate using Writely authentication scheme\n  }\n\n  public function getDocuments($folderid)\n  {\n    //get documents available in a folder\n  }\n\n  public function getDocumentsByType($folderid, $type)\n  {\n    //get documents of specific type from a folder\n  }\n  public function getFolders($folderid=null)\n  {\n    //get all folders under a specific folder\n  }\n\n  public function saveDocuments($document)\n  {\n    //save the document\n  }\n}\n?> \n```", "```php\n<?\ninterface DocManager\n{\n  public function authenticate($user, $pwd);\n  public function getDocuments($folderid);\n  public function getDocumentsByType($folderid, $type);\n  public function getFolders($folderid=null);\n  public function saveDocument($document);\n}\n?>\n```", "```php\n<?\nclass GoogleDocs\n{\n  public function authenticateByClientLogin()\n  {\n    //authenticate using Writely authentication scheme\n  }\n\n  public function setUser()\n  {\n    //set user\n  }\n\n  public function setPassword()\n  {\n    //set password\n  }\n\n  public function getAllDocuments()\n  {\n    //get documents available in a folder\n  }\n  public function getRecentDocuments()\n  {\n\n  }\n\n  public function getDocument()\n  {\n\n  }\n}\n?>\n```", "```php\n<?php\nClass GoogleDocsAdapter implements DocManager \n{\n  private $GD;\n\n  public function __construct()\n  {\n    $this->GD = new GoogleDocs();\n  }\n\n  public function authenticate($user, $pwd)\n  {\n    $this->GD->setUser($user);\n    $this->GD->setPwd($pwd);\n    $this->GD->authenticateByClientLogin();\n  }\n\n  public function getDocuments($folderid)\n  {\n    return $this->GD->getAllDocuments();\n  }\n\n  public function getDocumentsByType($folderid, $type)\n  {\n     //get documents using GoogleDocs object and return only\n     // which match the type\n  }\n\n  public function getFolders($folderid=null)\n  {\n    //for example there is no folder in GoogleDocs, so \n    //return anything. \n  }\n\n  public function saveDocument($document)\n  {\n    //save the document using GoogleDocs object\n  }\n}\n?>\n```", "```php\n<?\nclass MySQLManager\n{\n  private static $instance;\n\n  public function __construct()\n  {\n    if (!self::$instance)\n    {\n      self::$instance = $this;\n      echo \"New Instance\\n\";\n      return self::$instance;\n    }\n    else \n    {\n      echo \"Old Instance\\n\";\n      return self::$instance;\n    }\n  }\n//keep other methods same\n}\n?>\n```", "```php\n<?\n$a = new MYSQLManager();\n$b = new MYSQLManager();\n$c = new MYSQLManager();\n$d = new MYSQLManager();\n$e = new MYSQLManager();\n?>\n```", "```php\nNew Instance\nOld Instance\nOld Instance\nOld Instance\nOld Instance\n```", "```php\nprivate static $instance;\n```", "```php\n<?\n$posts = getAllPosts(); //example function return all post ids of this author\nfor($i = 0; $i<count($posts); $i++) \n{\n  $title = getPostTitle($post[$i]);\n  echo $title;\n  $author = getPostAuthor($post[$i]);\n  $content = parseBBCode(getPostContent($post[$i]));\n  echo \"Content\";\n  $comments = getAllComments($post[$i]);\n  for ($j=0; $j<count($comments); $j++)\n  {\n    $commentAuthor = getCommentAuthor($comments[$j]);\n    echo $commentAuthor;\n    $comment = getCommentContent($comments[$j]);\n    echo $comment;\n  }\n}\n?>\n```", "```php\n<?\ninterface Iterator \n{\n  function rewind();\n\n  function current();\n\n  function key();\n\n  function next();\n\n  function valid();\n}\n?>\n```", "```php\n<?php\nclass Posts implements Iterator\n{\n  private $posts = array();\n\n  public function __construct($posts)\n  {\n    if (is_array($posts)) {\n      $this->posts = $posts;\n    }\n  }\n\n  public function rewind() {\n    reset($this->posts);\n  }\n\n  public function current() {\n    return current($this->posts);\n  }\n\n  public function key() {\n    return key($this->var);\n  }\n\n  public function next() {\n    return next($this->var);\n  }\n\n  public function valid() {\n    return ($this->current() !== false);\n  }\n}\n?>\n```", "```php\n<?\n$blogposts = getAllPosts();\n$posts = new Posts($posts);\nforeach ($posts as $post)\n{\n  echo $post->getTitle();\n  echo $post->getAuthor();\n  echo $post->getDate();\n  echo $post->getContent();\n  $comments = new Comments($post->getComments()); \n  //another Iterator for comments, code is same as Posts\n  foreach ($comments as $comment)\n  {\n    echo $comment->getAuthor();\n    echo $comment->getContent();\n  }\n}\n?>\n```", "```php\n<?\ninterface observer\n{\n  public function notify();\n}\n?>\n```", "```php\n<?\nclass YMNotifier implements observer \n{\n  public function notify()\n  {\n    //send alerts using YM\n    echo \"Notifying via YM\\n\";\n  }\n};\n?>\n```", "```php\n<?\nclass EmailNotifier implements observer \n{\n  public function notify()\n  {\n    //send alerts using Email\n    echo \"Notifying via Email\\n\";\n   }\n};\n?>\n```", "```php\n<?\nclass observable\n{\n  private $observers = array();\n\n  public function register($object)\n  {\n    if ($object instanceof observer )\n    $this->observers[] =$object; \n    else \n    echo \"The object must implement observer interface\\n\";\n  }\n  public function stateChange()\n  {\n    foreach ($this->observers as $observer)\n    {\n      $observer->notify();\n    }\n  }\n}\n?>\n```", "```php\n<?\n$postmonitor = new observable();\n$ym = new YMNotifier();\n$em = new EmailNotifier();\n$s= new stdClass();\n$postmonitor->register($ym);\n$postmonitor->register($em);\n$postmonitor->register($s);\n$postmonitor->stateChange();\n?>\n```", "```php\nThe object must implement observer interface\nNotifying via YM\nNotifying via Email \n```", "```php\n<?php\n\ninclude('IXR_Library.inc.php');\n\nfunction gmtTime() {\n    return gmdate(\"F, d Y H:i:s\");\n}\n\n$server = new IXR_Server(array(\n    'time.getGMTTime' => 'gmtTime',\n));\n\n?>\n```", "```php\n<?\ninclude('IXR_Library.inc.php');\n$client = new IXR_Client('http://localhost/proxy/server.php');\n\nif (!$client->query('time.getGMTTime')) \n{\n    die('Something went wrong - '.$client->getErrorCode().' : \n                                 '.$client->getErrorMessage());\n}\n\necho ($client->getResponse());\n?>\n```", "```php\n<?\nclass Post\n{\n  private $title;\n  private $content;\n  //additional properties\n\n  public function filter()\n  {\n    //do necessary processing\n    $this->content = $filtered_content;\n    $this->title = $filtered_title;\n  }\n\n  public function getContent()\n  {\n    return $this->content;\n  }\n\n  //additional methods\n}\n?>\n<?\nclass Comment\n{\n  private $date;\n  private $content;\n  //additional properties\n\n  public function filter()\n  {\n    //do necessary processing\n    $this->content = $filtered_content;\n  }\n\n  public function getContent()\n  {\n    return $this->content;\n  }\n\n  //additional methods\n}\n?>\n```", "```php\n<?\nclass BBCodeParser\n{\n  private $post;\n  public function __construct($object)\n  {\n    $this->post = $object;\n  }\n\n  public function getContent()\n  {\n    //parse bbcode\n  $post->filter();\n    $content = $this->parseBBCode($post->getContent());\n    return $content;\n  }\n\n  private function parseBBCode($content)\n  {\n    //process BB code in the content and return it\n  }\n}\n?> \n```", "```php\n<?\nclass EmoticonParser\n{\n  private $post;\n  public function __construct($object)\n  {\n    $this->post = $object;\n  }\n\n  public function getContent()\n  {\n    //parse bbcode\n    $post->filter();\n    $content = $this->parseEmoticon($post->getContent());\n    return $content;\n  }\n\n  private function parseEmoticon($content)\n  {\n    //process Emoticon code in the content and return it\n  }\n\n}\n?>\n```", "```php\n<?\n$post = new Post();//set the properties of the post object\n$comment = new Comment();//set the properties of the comment object\n\n$post->filter();\n$comment->filter();\n\nif ($BBCodeEnabled==false && $EmoticonEnabled==false)\n{\n  $PostContent = $post->getContent();\n  $CommentContent = $comment->getContent();\n}\nelseif ($BBCodeEnabled==true && $EmoticonEnabled==false)\n{\n  $bb = new BBCodeParser($post);//passing a post object to \n                                //BBCodeParser\n  $PostContent = $bb->getContent();\n\n  $bb = new BBCodeParser($comment);//passing a comment object to \n                                   //BBCodeParser\n\n  $CommentContent = $bb->getContent();\n}\n\nelseif ($BBCodeEnabled==true && $EmoticonEnabled==false)\n{\n  $em = new EmoticonParser($post);\n  $PostContent = $bb->getContent();\n  $em = new EmoticonParser($comment);\n  $CommentContent = $bb->getContent();\n}\n?>\n```", "```php\n<?\nclass ApartmentFinder\n{\n\n  public function locateApartments($place)\n  {\n    //use the web service and locate all apartments suitable \n    //search name\n    //now return them all in an array\n    return $apartmentsArray();\n  }\n}\n?>\n\n<?\nclass GeoLocator\n{\n  public function getLocations($place)\n  {\n    //use public geo coding service like yahoo and get the \n    //lattitude and\n    //longitude of that place\n\n    return array(\"lat\"=>$lattitude, \"lng\"=>$longitude);\n  }\n}\n?>\n\n<?\nclass GoogleMap\n{\n  public function initialize()\n  {\n    //do initialize\n\n  }\n\n  public function drawLocations($locations /* array */)\n  {\n    //locate all the points using Google Map Locator\n  }\n\n  public function dispatch($divid)\n  {\n    //draw the map with in a div with the div id\n  }\n}\n?>\n```", "```php\n<?\nclass Facade\n{\n\n  public function findApartments($place, $divid)\n  {\n    $AF = new ApartmentFinder();\n    $GL =new GeoLocator();\n    $GM = new GoogleMap();\n\n    $apartments = $AF->locateApartments($place);\n    foreach ($apartments as $apartment)\n    {\n      $locations[] = $GL->getLocations($apartment);\n    }\n\n    $GM->initialize();\n    $GM->drawLocations($locations);\n    $GM->dispatch($divid);\n  }\n\n}\n?>\n```", "```php\n<?\n$F = new Facade();\n$F->findApartments(\"London, Greater London\",\"mapdiv\");\n?>\n```"]