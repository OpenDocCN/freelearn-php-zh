- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding and Organizing the Business Requirements of Our Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before writing a single line of code, we first need to understand the goals
    of a project and what problems we are trying to solve. We build software to solve
    problems, and if we do not adequately understand what the client or the business
    is trying to achieve, we will have problems coming up with the ideal solution—or,
    worse, we can end up spending months building software that doesn’t even address
    the business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: As software developers, it is great to have a clear list of what needs to be
    built. It’s just like having a simple grocery list. This list will help us determine
    which features we need to develop or release first. So, before we start building
    solutions to a problem by writing software, we will try to come up with a simple
    example where we will try to interpret business problems and goals into a list
    of software features that we will need to write code for.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will come up with an example business problem. We will try
    to analyze what the example business is trying to achieve, and what’s stopping
    it from achieving this goal. We will present a solution to help us define and
    organize the business requirements into a workable list of *user stories*. These
    user stories, in turn, will be used to represent our behavior-driven tests. These
    behavior-driven tests will help us build our test-driven codes. **Behavior-driven
    development** (**BDD**) will be discussed in more detail in [*Chapter 6*](B18318_06.xhtml#_idTextAnchor094),
    *Applying* *Behavior-Driven Development*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Building with TDD and BDD](img/Figure_2.01_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Building with TDD and BDD
  prefs: []
  type: TYPE_NORMAL
- en: 'In contrast to **test-driven development** (**TDD**) and BDD, developers can
    also write solution code directly for a user story or a requirement. This is a
    recipe for future disaster. In fact, this is how I used to develop software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Developing a solution without tests](img/Figure_2.02_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Developing a solution without tests
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will focus on building solution code based on the business
    requirements, represented by test programs. So, let’s get started with understanding
    the example business problem and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The example business project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking down the business requirements into software features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jira with Bitbucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires the reader to have basic knowledge of Git version control.
  prefs: []
  type: TYPE_NORMAL
- en: The example business project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using a simple example—a *motor museum*—to help us go through the
    process of defining goals and problems and organizing them into workable units.
  prefs: []
  type: TYPE_NORMAL
- en: The business scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I was having a catch-up and drinks with my friends from Perth months ago, and
    they told me that they had volunteered during weekends for fun to help a motor
    museum organize an inventory of toy car model donations the museum has received.
    The museum receives big boxes of toy car donations.
  prefs: []
  type: TYPE_NORMAL
- en: As we were drinking, they told me that it’s both fun and sometimes challenging
    as there’s no specific tool or process to itemize the toy cars that the museum
    receives. Sometimes, they open a whole box of toy cars with no information about
    the toys, and sometimes there are whole boxes containing toy cars properly packaged
    with all the information in each toy car’s box, such as the year of manufacture,
    the racing driver who drove it, color, and so on. They must itemize these toys
    and put them in a spreadsheet, and this is where things get interesting.
  prefs: []
  type: TYPE_NORMAL
- en: They said they used a spreadsheet file that they would share around and hand
    over to the next volunteer. Recording information about a toy car is a bit of
    a task—for instance, someone records a toy car’s color as blue, but someone else
    might just write down “flames”, which obviously is not a color. Sometimes colors
    are mispelled. So, now, if they want to search for all cars that are blue, it
    can get complicated as sometimes people might misspell blue when saving the information.
    They also want to be able to search for model cars a specific racing driver has
    driven, and they want to discover in which section of the museum the toy car model
    can be found.
  prefs: []
  type: TYPE_NORMAL
- en: As we were chatting, I couldn’t help but start imagining data being entered,
    submitted, validated, processed, and then persisted. I forgot about my drink for
    a second, and my mind started to drift away and started imagining code. If you’re
    a software developer, you probably know what I mean!
  prefs: []
  type: TYPE_NORMAL
- en: 'I thought: I can use this real-life challenge and use it as an example business
    project. It’s simple and it sounds fun, but it will also serve as a good example
    to demonstrate how to implement TDD and BDD.'
  prefs: []
  type: TYPE_NORMAL
- en: I asked my friends if they were okay with me using their example for this project,
    and they were happy with it. So, from now on, we will refer to them as our clients
    or the business.
  prefs: []
  type: TYPE_NORMAL
- en: Making sense of the scenario and the problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By talking to the business or client, we can get some very important information
    about the problems they have. We can try coming up with a very rough and simple
    list of problems, constraints, and possible solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '**What the business is trying** **to achieve**:'
  prefs: []
  type: TYPE_NORMAL
- en: Inventory clerks or volunteers are able to itemize and record toy car model
    information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users are able to search through the records and find in which section of the
    museum the car model can be viewed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Problems/challenges**:'
  prefs: []
  type: TYPE_NORMAL
- en: No system allows different users to record car model data simultaneously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No system validates the data being stored—for example, for color spelling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No easy way for visitors to find or search for where a specific car model is
    being displayed in the museum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constraints**:'
  prefs: []
  type: TYPE_NORMAL
- en: The project is only focused on the toy car model inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only registered museum staff can enter data into the inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Solutions**:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a simple inventory system for the toy car models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a simple page with a table for visitors to view the inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We were able to come up with a list of very important points about the business
    scenario. At the end of the day, all the items we have listed will end up satisfying
    one thing, and that is to address what the business is trying to achieve. This
    is the most important thing to understand. We are building solutions by first
    understanding properly what the problems are. And after we solve the problems,
    we must be sure that we have addressed what the business is trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The solution](img/Figure_2.03_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The solution
  prefs: []
  type: TYPE_NORMAL
- en: I had an experience where I saw developers spend a lot of time building software,
    and when the project got handed over to me, I realized that the direction in which
    they were going was totally incorrect. So, it doesn’t matter how good the software
    is—it is of no value if it cannot address the real problem and if it cannot help
    in achieving the business goal.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined what the business is trying to achieve and have identified
    the problems and challenges the business is facing, we can now start organizing
    a list of things we need to do to solve the problems.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down the business requirements into software features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need a solution to organize all the tasks we need to work on. We can
    do this by using a notebook, a scratchpad, post-it notes, or even a simple Kanban
    board. But since we are planning to develop maintainable software and we want
    to have visibility into the progress of our development process, it would be great
    to have a more powerful solution than, say, a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will be using **Atlassian Jira**. Jira is software that
    we can use to organize all the items that we need to build and work on. We will
    use it as a turbo-charged notebook to contain our to-do lists of software features.
  prefs: []
  type: TYPE_NORMAL
- en: We will not be focusing deeply on the methodology; instead, we will be using
    Jira just to help us organize our project so that we can start writing software
    in an organized sequence.
  prefs: []
  type: TYPE_NORMAL
- en: We want to have the ability to link our Git branches, pull requests, and commits
    to an issue that we are working on. We want the ability to integrate our **continuous
    integration** (**CI**) ([*Chapter 9*](B18318_09.xhtml#_idTextAnchor138)*,* *Continuous
    Integration*) solution into our issues as well. You can think of a *Jira issue*
    as a list item representing a business problem or a software feature.
  prefs: []
  type: TYPE_NORMAL
- en: We will start breaking down the business requirements into a list of software
    features represented by user stories, which is an issue type in Jira. But for
    that, we first need to create a Jira account and initialize our project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Jira Cloud account and initializing the Jira Cloud project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Jira Cloud account and initialize the Jira Cloud project, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we first need to create a free Jira account. You can do so
    by going to the following URL: [https://www.atlassian.com/try/cloud/signup?bundle=jira-software&edition=free](https://www.atlassian.com/try/cloud/signup?bundle=jira-software&edition=free).
    Then, sign up for an account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.4 – Jira sign\uFEFF-up](img/Figure_2.04_B18318.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Jira sign-up
  prefs: []
  type: TYPE_NORMAL
- en: 'After signing up for an account, you will be prompted to enter a subdomain
    name in the **Your site** field. Use any subdomain name you want. After this step,
    you can skip all other popups until you get to the **Project** **templates** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Entering a subdomain name](img/Figure_2.05_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Entering a subdomain name
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Project templates** page, select **Scrum**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Selecting Scrum](img/Figure_2.06_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Selecting Scrum
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Scrum** page, click on the **Use template** button at the top or bottom
    right of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Use template button](img/Figure_2.07_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Use template button
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Choose a project type** page, click on **Select a** **team-managed
    project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Select a team-managed project](img/Figure_2.08_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Select a team-managed project
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `toycarmodels` as the name of the project and enter `TOYC` for the **Key**
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Add project details](img/Figure_2.09_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Add project details
  prefs: []
  type: TYPE_NORMAL
- en: 'After these steps, you should end up with an empty **TOYC** **board** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 2.10– Empty \uFEFFTOYC Kanban board](img/Figure_2.10_B18318.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10– Empty TOYC Kanban board
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a Jira project to play with, we can start creating tickets
    to represent the things we need to do to help the restaurant business with its
    online booking system project. We will be using *Jira epics* to group related
    Jira issues representing software features we want to build.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Jira epic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we take a step back and think about the problems and solutions we defined
    earlier, we can come up with a simple list of things that we can build as features.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have identified that we want to build a way for inventory clerk volunteers
    to be able to record donated toy car models in the inventory, and we also identified
    the need for museum visitors to search through the inventory and locate where
    the toy car model is being displayed in the museum. Now, we have identified that
    we will have two types of users:'
  prefs: []
  type: TYPE_NORMAL
- en: Users who need to input and store data (inventory clerks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users who want to view the data (museum visitors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That means that we can separate the programs we need to build into two separate
    small projects: one small project for inventory clerks, and another one for visitors.
    Sometimes, it helps to segregate different parts of a big project into their own
    smaller projects; this can help in resourcing different developers for different
    areas of the projects and it can also help focus the developers’ efforts.'
  prefs: []
  type: TYPE_NORMAL
- en: The inventory clerk-facing solution will probably contain a lot of smaller tasks.
    We can start defining those tasks into actual Jira tickets, but before thinking
    about the smaller tickets, let’s create an epic first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to the Jira **TOYC board** page from the previous instruction
    set and let’s start creating tickets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left menu, click on the **Roadmap** menu item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Jira roadmap](img/Figure_2.11_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Jira roadmap
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the table, click on the `What needs to` `be done?`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Epic title ](img/Figure_2.12_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Epic title
  prefs: []
  type: TYPE_NORMAL
- en: 'In the textbox, enter `Inventory Clerk Solution`, then hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – First epic](img/Figure_2.13_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – First epic
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the epic you just created, and a popup will appear. In the description
    text area, you can enter any description detailing a summary of things we need
    to do. In this example, I will just use the following text: `Enable the inventory
    clerk to be able to input and store toy car model data` and under the **Assignee**
    field, click on the **Assign to** **me** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Epic description](img/Figure_2.14_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Epic description
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Assignee](img/Figure_2.15_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Assignee
  prefs: []
  type: TYPE_NORMAL
- en: Close the popup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created a Jira epic, we can add *items* to this epic. The items
    we will be adding to the epic will be user stories.
  prefs: []
  type: TYPE_NORMAL
- en: Writing user stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *Jira user story* is a software feature written informally in a descriptive
    and expressive way from the perspective of an end user. An end user can be a non-technical
    customer or a software developer who will end up being the consumer of the software
    that will be produced.
  prefs: []
  type: TYPE_NORMAL
- en: We created an epic called **Inventory Clerk Solution** in the previous section,
    which will contain all the things we will need for an inventory clerk to record
    all information about donated toy car models.
  prefs: []
  type: TYPE_NORMAL
- en: But what would the inventory clerks need to be able to achieve that goal? First,
    they will need a window or a web page that contains a form. This form will then
    be used to record the data for a specific toy car model.
  prefs: []
  type: TYPE_NORMAL
- en: But how would an inventory clerk identify themself to the system? It looks like
    we will need authentication and authorization functionalities, and with these
    functionalities, we will be able to restrict the data input part of the system
    to authorized users only.
  prefs: []
  type: TYPE_NORMAL
- en: After inventory clerks have authenticated themselves, they should be able to
    start inputting and recording toy car model data into the system.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s stick to these simple features and start writing stories.
  prefs: []
  type: TYPE_NORMAL
- en: We have identified at least three user stories just by thinking about what the
    inventory clerk needs to be able to do to input and record a toy car model into
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following template to write our own user stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '*As a/an [Actor], [I want to], [**so that]*'
  prefs: []
  type: TYPE_NORMAL
- en: As an inventory clerk, I want to be able to log in to the system so that I can
    access the inventory system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an inventory clerk, I want to be able to input toy car model data so that
    I can save the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an inventory clerk, I want to be able to see a table containing the records
    so that I can review all the toy car model data stored
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a list of customer user stories we need, let’s create tickets
    for them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Jira user stories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create Jira user stories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mouse over on the `What needs to` `be done?`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – What needs to be done? text: user story title](img/Figure_2.16_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16 – What needs to be done? text: user story title'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dropdown to the left of the text field, make sure **Story** is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Selecting Story from the dropdown](img/Figure_2.17_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Selecting Story from the dropdown
  prefs: []
  type: TYPE_NORMAL
- en: 'In the text field, enter a title for our first user story, `As an inventory
    clerk, I want to be able to login to the system, so that I can access the inventory
    system`, and hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – First user story](img/Figure_2.18_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – First user story
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the steps to create the three stories we have listed down:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Epic with user stories ](img/Figure_2.19_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Epic with user stories
  prefs: []
  type: TYPE_NORMAL
- en: These user stories will play a very important role in the behavior-driven tests
    we are going to be writing in [*Chapter 6*](B18318_06.xhtml#_idTextAnchor094),
    *Applying* *Behaviour-Driven Development*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created our first epic and user stories for the **Inventory
    Clerk Solution** epic, repeat the steps to create visitor epic and user stories.
    You can use the following epic name and user stories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Admin epic name: **Visitors Page**'
  prefs: []
  type: TYPE_NORMAL
- en: 'User stories:'
  prefs: []
  type: TYPE_NORMAL
- en: As a visitor, I’d like to see a public page with a table with car model info,
    so that I can browse through the inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a visitor, I’d like to be able to filter the table, so that I can narrow
    down the results:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Epics and user stories](img/Figure_2.20_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Epics and user stories
  prefs: []
  type: TYPE_NORMAL
- en: After those steps, we will now have some lists of things we want to achieve
    as a customer and as an admin. The list of things we want to achieve is called
    **User Stories**, and we have grouped it by using epics. Before writing code,
    we want to be able to store and version our code somewhere. We will use Bitbucket
    as our version control solution.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Jira with Bitbucket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a Git repository for our code, and it would be great if we could
    integrate it with the list of tasks (Jira tickets) we need to build. Jira offers
    a lot of software integration solutions, which is great. Jira can be integrated
    with our code repository, and with CI solutions, which will be discussed in [*Chapter
    9*](B18318_09.xhtml#_idTextAnchor138), *Continuous Integration*.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of Git version control hosting software out there, but for this
    project, we will be using Bitbucket so that we can quickly integrate it with Jira
    and spend more of our precious time on actual coding.
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to create a Bitbucket account for this example project.
    Go to [https://bitbucket.org/product](https://bitbucket.org/product) and sign
    up for an account. If you have an existing Bitbucket account, that should work
    too.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lengthy set of instructions for integrating Bitbucket with Jira Cloud;
    follow the instructions at https://support.atlassian.com/jira-software-cloud/docs/enable-code/
    or [https://support.atlassian.com/jira-cloud-administration/docs/connect-jira-cloud-to-bitbucket/](https://support.atlassian.com/jira-cloud-administration/docs/connect-jira-cloud-to-bitbucket/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also just click on the **Code** link on the left menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Code page](img/Figure_2.21_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Code page
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Connect to Bitbucket** button on the main panel. You can then
    follow the instructions to connect your Jira project to your selected Bitbucket
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the **Project settings** link on the left menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Project settings menu item](img/Figure_2.22_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Project settings menu item
  prefs: []
  type: TYPE_NORMAL
- en: 'While inside the **Project settings** page, click on the **Features** menu
    item. Once on the **Features** page, in the **Development** group, click on the
    **Configure…** button inside the **Code** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Code Configure… button](img/Figure_2.23_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Code Configure… button
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Configure…** button, you’ll be redirected to a **Toolchain**
    page; in the **Build** section, click on the **+ Add** **repository** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – + Add repository button](img/Figure_2.24_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – + Add repository button
  prefs: []
  type: TYPE_NORMAL
- en: 'A popup will appear—select whichever Git solution you want to use with the
    project. In my case, I’m using a free Bitbucket account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Selecting a Git product](img/Figure_2.25_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Selecting a Git product
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on **Bitbucket**, you can now enter a new repository name you
    want to integrate the Jira project with. Or, you can also select a pre-existing
    repository you have created in your own account. For this example, I’ll just create
    a new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Creating a new repository for the Jira project](img/Figure_2.26_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Creating a new repository for the Jira project
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **+ Create** button, and your Jira project should now be integrated
    with your Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Repository integrated with Jira](img/Figure_2.27_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Repository integrated with Jira
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can go back to the project window by clicking the **Back to project**
    link; then, click on the **Roadmap** link. Click on the **Inventory Clerk Solution**
    epic we created earlier, and you should see a new **Development** section in our
    ticket:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.28 – Ticket: new Development section with \uFEFFa Create Branch\
    \ link](img/Figure_2.28_B18318.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28 – Ticket: new Development section with a Create Branch link'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that everything is configured, you should be able to create Bitbucket branches
    from your Jira tickets. In the **Inventory Clerk Solution** popup, click on the
    **Create Branch** link. You’ll be redirected to your Git repository page where
    you can proceed to create a branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.29 – Creating a new branch for the epic](img/Figure_2.29_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Creating a new branch for the epic
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the **Roadmap** page, and refresh the page. Open the **Inventory
    Clerk Solution** epic again, and this time, in the **Development** section, you
    will see that there is now one branch connected to our Jira epic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.30 – One branch connected to the Jira epic](img/Figure_2.30_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – One branch connected to the Jira epic
  prefs: []
  type: TYPE_NORMAL
- en: We now have the ability to create Git repositories using Jira. This will come
    in handy as we go along in the project because this means that our Git repository
    is now integrated properly with our ticketing solution.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using BitBucket for this example project, but you are free to choose
    your own preferred version control system and integrate it with Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we were able to come up with an example project based on a
    real-life problem that my friends encountered with a car museum. By trying to
    understand what the business or client wants to achieve, we were able to identify
    the problems or challenges that are stopping the business or client from achieving
    that goal. By analyzing our proposed solution to the problems, we were able to
    come up with plans for a solution. We listed down the solutions as user stories
    and grouped them under an epic.
  prefs: []
  type: TYPE_NORMAL
- en: These user stories tell us about behaviors—system behaviors, to be exact. Why
    are these important? Well, by understanding what we need to build, we developers
    can plan *how* we build solutions better. I have seen software being built for
    weeks or months, and after completion, the developers and business analysts realize
    that the solution does not even solve the problem that is stopping the business
    or the client from achieving its goal simply because the business analysts and
    developers did not understand what the business was trying to achieve or solve.
  prefs: []
  type: TYPE_NORMAL
- en: By having a clean list of items that define what needs to be built, we will
    be able to come up with automated tests that will check whether we have satisfied
    the desired behavior. We will be building those automated behavior-driven tests
    in [*Chapter 6*](B18318_06.xhtml#_idTextAnchor094), *Applying* *Behaviour-Driven
    Development*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be introducing *Docker containers* and building
    our own container. This container will then be used to contain and run the PHP
    software solution that we will be building to achieve the business’s goal.
  prefs: []
  type: TYPE_NORMAL
