["```php\ncomposer global requires laravel/installer\n```", "```php\nlaravel new octane-ch04\n```", "```php\ncd octane-ch04\n```", "```php\nbrew install mysql\n```", "```php\nsudo apt install mysql-server\n```", "```php\ncomposer require laravel/sail --dev\n```", "```php\nphp artisan sail:install\n```", "```php\n./vendor/bin/sail up -d\n```", "```php\n./vendor/bin/sail php artisan db:show\n```", "```php\n./vendor/bin/sail php artisan migrate\n```", "```php\nphp artisan migrate\n```", "```php\nphp -m\n```", "```php\n./vendor/bin/sail php -m\n```", "```php\n./vendor/bin/sail composer require laravel/octane\n```", "```php\n./vendor/bin/sail php artisan octane:install\n```", "```php\n./vendor/bin/sail artisan sail:publish\n```", "```php\n# command=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80\ncommand=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\n```", "```php\n./vendor/bin/sail build --no-cache\n```", "```php\n./vendor/bin/sail stop\n./vendor/bin/sail up -d\n```", "```php\n./vendor/bin/sail php -m\n```", "```php\n./vendor/bin/sail php -m | grep -i swoole\n```", "```php\n./vendor/bin/sail php -i\n```", "```php\n./vendor/bin/sail php -i | grep ini\n```", "```php\nConfiguration File (php.ini) Path => /etc/php/8.1/cli\nLoaded Configuration File => /etc/php/8.1/cli/php.ini\nScan this dir for additional .ini files => /etc/php/8.1/cli/conf.d\nAdditional .ini files parsed => /etc/php/8.1/cli/conf.d/10-mysqlnd.ini,\n```", "```php\n./vendor/bin/sail php -i | grep ini\n```", "```php\n/etc/php/8.1/cli/conf.d/25-swoole.ini\n```", "```php\n./vendor/bin/sail shell\n```", "```php\nless /etc/php/8.1/cli/conf.d/25-swoole.ini\n```", "```php\nextension=swoole.so\n```", "```php\n; extension=swoole.so\n```", "```php\nphp artisan make:model Event -ms\n```", "```php\n<?php\nuse App\\Models\\User;\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('events',\n                       function (Blueprint $table) {\n            $table->id();\n            $table->foreignIdFor(User::class)->index();\n            $table->string('type', 30);\n            $table->string('description', 250);\n            $table->integer('value');\n            $table->dateTime('date');\n            $table->timestamps();\n        });\n    }\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('events');\n    }\n};\n```", "```php\n<?php\nnamespace Database\\Seeders;\nuse App\\Models\\User;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\Hash;\nclass UserSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        $data = [];\n        $passwordEnc = Hash::make(fake()->password());\n        for ($i = 0; $i < 1000; $i++) {\n            $data[] =\n            [\n                'name' => fake()->firstName(),\n                'email' => fake()->unique()->email(),\n                'password' => $passwordEnc,\n            ];\n        }\n        foreach (array_chunk($data, 100) as $chunk) {\n            User::insert($chunk);\n        }\n    }\n}\n```", "```php\n<?php\nnamespace Database\\Seeders;\nuse App\\Models\\Event;\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Arr;\nclass EventSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        $data = [];\n        for ($i = 0; $i < 100_000; $i++) {\n            $data[] = [\n                'user_id' => random_int(1, 1000),\n                'type' => Arr::random(\n                    [\n                        'ALERT', 'WARNING', 'INFO',\n                    ]\n                ),\n                'description' => fake()->realText(),\n                'value' => random_int(1, 10),\n                'date' => fake()->dateTimeThisYear(),\n            ];\n        }\n        foreach (array_chunk($data, 100) as $chunk) {\n            Event::insert($chunk);\n        }\n    }\n}\n```", "```php\nselect * from events INTO OUTFILE '/var/lib/mysql-files/export-events.txt';\n```", "```php\nsecure-file-priv=/var/lib/mysql-files\n```", "```php\n[mysqld]\nbind-address = 127.0.0.1\nmysqlx-bind-address = 127.0.0.1\nsecure-file-priv = \"/Users/roberto\"\n```", "```php\nbrew services restart mysql\n```", "```php\nphp artisan db\n```", "```php\nselect * from events INTO OUTFILE '/Users/roberto/export-events.txt';\n```", "```php\n./vendor/bin/sail php artisan db\n```", "```php\nselect * from events INTO OUTFILE '/var/lib/mysql-files/export-events.txt';\n```", "```php\nLOAD DATA INFILE '/Users/roberto/export-events.txt' INTO TABLE events;\n```", "```php\n        $this->call([\n            UserSeeder::class,\n            EventSeeder::class,\n        ]);\n```", "```php\nphp artisan migrate --seed\n```", "```php\nphp artisan migrate:refresh --seed\n```", "```php\nphp artisan migrate:fresh --seed\n```", "```php\nuse Laravel\\Octane\\Facades\\Octane;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\DashboardController;\nOctane::route('GET', '/dashboard', function() {\n    return new Response(\n      (new DashboardController)->index());\n});\nOctane::route('GET', '/dashboard-concurrent', function() {\n    return new Response(\n      (new DashboardController)->indexConcurrent());\n});\n```", "```php\nOctane::route('GET', '/a', function () {\n    return new Response(view('welcome'));\n});\nRoute::get('/b', function () {\n    return new Response(view('welcome'));\n});\n```", "```php\n<?php\nnamespace App\\Http\\Controllers;\nclass DashboardController extends Controller\n{\n    public function index()\n    {\n        return view('welcome');\n    }\n    public function indexConcurrent()\n    {\n        return view('welcome');\n    }\n}\n```", "```php\n<?php\nnamespace App\\Models;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Event extends Model\n{\n    use HasFactory;\n    /**\n     * This is a simulation of a\n     * complex query that is time-consuming\n     *\n     * @param  mixed  $query\n     * @param  string  $type\n     * @return mixed\n     */\n    public function scopeOfType($query, $type)\n    {\n        sleep(1);\n        return $query->where('type', $type)\n        ->where('description', 'LIKE', '%something%')\n        ->orderBy('date')->limit(5);\n    }\n}\n```", "```php\nEvent::count();\n```", "```php\nEvent::ofType('INFO')->get();\n```", "```php\nEvent::ofType('WARNING')->get();\n```", "```php\nEvent::ofType('ALERT')->get();\n```", "```php\nuse App\\Models\\Event;\n// …\npublic function index()\n{\n    $time = hrtime(true);\n    $count = Event::count();\n    $eventsInfo = Event::ofType('INFO')->get();\n    $eventsWarning = Event::ofType('WARNING')->get();\n    $eventsAlert = Event::ofType('ALERT')->get();\n    $time = (hrtime(true) - $time) / 1_000_000;\n    return view('dashboard.index',\n        compact('count', 'eventsInfo', 'eventsWarning',\n                'eventsAlert', 'time')\n    );\n}\n```", "```php\n    public function indexConcurrent()\n    {\n        $time = hrtime(true);\n        try {\n            [$count,$eventsInfo,$eventsWarning,$eventsAlert] =\n            Octane::concurrently([\n                fn () => Event::count(),\n                fn () => Event::ofType('INFO')->get(),\n                fn () => Event::ofType('WARNING')->get(),\n                fn () => Event::ofType('ALERT')->get(),\n            ]);\n        } catch (TaskTimeoutException $e) {\n            return \"Error: \" . $e->getMessage();\n        }\n        $time = (hrtime(true) - $time) / 1_000_000;\n        return view('dashboard.index',\n            compact('count', 'eventsInfo', 'eventsWarning',\n                    'eventsAlert', 'time')\n        );\n    }\n```", "```php\nuse Laravel\\Octane\\Exceptions\\TaskTimeoutException;\n```", "```php\nreturn view('dashboard.index',\n            compact('count', 'eventsInfo', 'eventsWarning',\n                    'eventsAlert', 'time')\n        );\n```", "```php\n<x-layout>\n    <div>\n        Count : {{ $count }}\n    </div>\n    <div>\n        Time : {{ $time }} milliseconds\n    </div>\n    @foreach ($eventsInfo as $e)\n    <div>\n        {{ $e->type }} ({{ $e->date }}): {{ $e->description }}\n    </div>\n    @endforeach\n    @foreach ($eventsWarning as $e)\n    <div>\n        {{ $e->type }} ({{ $e->date }}): {{ $e->description }}\n    </div>\n    @endforeach\n    @foreach ($eventsAlert as $e)\n    <div>\n        {{ $e->type }} ({{ $e->date }}): {{ $e->description }}\n    </div>\n    @endforeach\n</x-layout>\n```", "```php\n<html>\n    <head>\n        <title>{{ $title ?? 'Laravel Octane Example' }}\n        </title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width,\n          initial-scale=1.0\">\n    </head>\n    <body>\n        <h1>Laravel Octane Example</h1>\n        <hr/>\n        {{ $slot }}\n    </body>\n</html>\n```", "```php\nOctane::route('GET', '/api/sentence', function () {\n    sleep(1);\n    return response()->json([\n        'text' => fake()->sentence()\n    ]);\n});\nOctane::route('GET', '/api/name', function () {\n    sleep(1);\n    return response()->json([\n        'name' => fake()->name()\n    ]);\n});\n```", "```php\nOctane::route('GET', '/httpcall/sequence', function () {\n    $time = hrtime(true);\n    $sentenceJson =\n      Http::get('http://127.0.0.1:8000/api/sentence')->\n      json();\n    $nameJson =\n      Http::get('http://127.0.0.1:8000/api/name')->json();\n    $time = hrtime(true) - $time;\n    return response()->json(\n        array_merge(\n            $sentenceJson,\n            $nameJson,\n            [\"time_ms\" => $time / 1_000_000]\n        )\n        );\n});\n```", "```php\nOctane::route('GET', '/httpcall/parallel', function () {\n    $time = hrtime(true);\n    [$sentenceJson, $nameJson] = Octane::concurrently([\n        fn() =>\n          Http::get('http://127.0.0.1:8000/api/sentence')->\n          json(),\n        fn() =>\n          Http::get('http://127.0.0.1:8000/api/sequence')->\n          json()\n    ]\n    );\n    $time = hrtime(true) - $time;\n    return response()->json(\n        array_merge(\n            $sentenceJson,\n            $nameJson,\n            [\"time_ms\" => $time / 1_000_000]\n        )\n        );\n});\n```", "```php\nOctane::route('GET', '/api/error', function () {\n    return response(\n        status: 500\n    );\n});\n```", "```php\nRoute::get('/httpcall/parallel-witherror', function () {\n    $time = hrtime(true);\n    $sentenceJson = [];\n    $nameJson = [];\n    try {\n        [$sentenceJson, $nameJson] = Octane::concurrently([\n            fn () => Http::get(\n              'http://127.0.0.1:8000/api/sentence')->json()\n              ?? [],\n            fn () => Http::get(\n              'http://127.0.0.1:8000/api/error')->json() ??\n              [],\n        ]\n        );\n    } catch (Exception $e) {\n        // The error: $e->getMessage();\n    }\n    $time = hrtime(true) - $time;\n    return response()->json(\n        array_merge(\n            $sentenceJson,\n            $nameJson,\n            ['time_ms' => $time / 1_000_000]\n        )\n    );\n});\n```", "```php\nuse Illuminate\\Support\\Facades\\Cache;\n$secondsTimeToLive = 5;\n$cacheKey= 'cache-key';\n$value = Cache::remember($cacheKey, $secondsTimeToLive, function () {\n    return Http::get('http://127.0.0.1:8000/api/sentence')\n      ->json() ?? [];\n});\n```", "```php\n$getHttpCached = function ($url) {\n        $data = Cache::store('octane')->remember(\n                'key-'.$url, 20, function () use ($url) {\n            return Http::get(\n              'http://127.0.0.1:8000/api/'.$url)->json() ??\n              [];\n        });\n        return $data;\n    };\n```", "```php\n[$sentenceJson, $nameJson] = Octane::concurrently([\n            fn () => $getHttpCached('sentence'),\n            fn () => $getHttpCached('name'),\n        ]\n        );\n```", "```php\nOctane::route('GET','/httpcall/parallel-caching', function () {\n    $getHttpCached = function ($url) {\n        $data = Cache::store('octane')->remember(\n                'key-'.$url, 20, function () use ($url) {\n            return Http::get(\n              'http://127.0.0.1:8000/api/'.$url)->json() ??\n              [];\n        });\n        return $data;\n    };\n    $time = hrtime(true);\n    $sentenceJson = [];\n    $nameJson = [];\n    try {\n        [$sentenceJson, $nameJson] = Octane::concurrently([\n            fn () => $getHttpCached('sentence'),\n            fn () => $getHttpCached('name'),\n        ]\n        );\n    } catch (Exception $e) {\n        // The error: $e->getMessage();\n    }\n    $time = hrtime(true) - $time;\n    return response()->json(\n        array_merge(\n            $sentenceJson,\n            $nameJson,\n            ['time_ms' => $time / 1_000_000]\n        )\n    );\n});\n```", "```php\nOctane::route('GET', '/httpcall/caching', function () {\n    $time = hrtime(true);\n    $sentenceJson = [];\n    $nameJson = [];\n    try {\n        [$sentenceJson, $nameJson] =\n        Cache::store('octane')->remember('key-checking',\n                                          20, function () {\n            return Octane::concurrently([\n                fn () => Http::get(\n                  'http://127.0.0.1:8000/api/sentence')->\n                  json(),\n                fn () => Http::get(\n                 'http://127.0.0.1:8000/api/name')->json(),\n            ]);\n        });\n    } catch (Exception $e) {\n        // The error: $e->getMessage();\n    }\n    $time = hrtime(true) - $time;\n    return response()->json(\n        array_merge(\n            $sentenceJson,\n            $nameJson,\n            ['time_ms' => $time / 1_000_000]\n        )\n    );\n});\n```", "```php\n  200    GET /api/sentence ........ 18.57 mb 17.36 ms\n  200    GET /api/name ............ 18.57 mb 17.36 ms\n  200    GET /httpcall/caching .... 17.43 mb 59.82 ms\n  200    GET /httpcall/caching ..... 17.64 mb 3.38 ms\n  200    GET /httpcall/caching ..... 17.64 mb 2.36 ms\n  200    GET /httpcall/caching ..... 17.64 mb 3.80 ms\n  200    GET /httpcall/caching ..... 17.64 mb 3.30 ms\n```", "```php\n  200    GET /api/sentence ........ 18.57 mb 15.22 ms\n  200    GET /api/name ............. 18.68 mb 0.64 ms\n  200    GET /httpcall/sequence ... 18.79 mb 60.81 ms\n  200    GET /api/sentence ......... 18.69 mb 3.26 ms\n  200    GET /api/name ............. 18.69 mb 1.68 ms\n  200    GET /httpcall/sequence ... 18.94 mb 15.55 ms\n  200    GET /api/sentence ......... 18.70 mb 1.30 ms\n  200    GET /api/name ............. 18.70 mb 1.09 ms\n  200    GET /httpcall/sequence .... 18.97 mb 9.52 ms\n  200    GET /api/sentence ......... 18.71 mb 1.32 ms\n  200    GET /api/name ............. 18.71 mb 1.05 ms\n  200    GET /httpcall/sequence .... 19.00 mb 9.28 ms\n```", "```php\n// Importing Octane class\nuse Laravel\\Octane\\Facades\\Octane;\n// Importing Response class\nuse Illuminate\\Http\\Response;\n// Importing the DashboardController class\nuse App\\Http\\Controllers\\DashboardController;\nOctane::route('GET', '/dashboard-concurrent-cached', function () {\n    return new Response((new DashboardController)->\n     indexConcurrentCached());\n});\n```", "```php\npublic function indexConcurrentCached()\n{\n    $time = hrtime(true);\n    try {\n        [$count,$eventsInfo,$eventsWarning,$eventsAlert] =\n        Cache::store('octane')->remember(\n            key: 'key-event-cache',\n            ttl: 20,\n            callback: function () {\n                return Octane::concurrently([\n                    fn () => Event::count(),\n                    fn () => Event::ofType('INFO')->get(),\n                    fn () => Event::ofType('WARNING')->\n                             get(),\n                    fn () => Event::ofType('ALERT')->get(),\n                ]);\n            }\n        );\n    } catch (Exception $e) {\n        return 'Error: '.$e->getMessage();\n    }\n    $time = (hrtime(true) - $time) / 1_000_000;\n    return view('dashboard.index',\n        compact('count', 'eventsInfo', 'eventsWarning',\n                'eventsAlert', 'time')\n    );\n}\n```", "```php\n  200    GET /dashboard ...... 19.15 mb 261.34 ms\n  200    GET /dashboard ...... 19.36 mb 218.45 ms\n  200    GET /dashboard ...... 19.36 mb 223.23 ms\n  200    GET /dashboard ...... 19.36 mb 222.72 ms\n  200    GET /dashboard-concurrent-cached .............................. 19.80 mb 112.64 ms\n  200    GET /dashboard-concurrent-cached ................................ 19.81 mb 3.93 ms\n  200    GET /dashboard-concurrent-cached ................................ 19.81 mb 3.69 ms\n  200    GET /dashboard-concurrent-cached ................................ 19.81 mb 4.28 ms\n  200    GET /dashboard-concurrent-cached ................................ 19.81 mb 4.62 ms\n```", "```php\nValue [a:4:{i:0;i:100000;i:...] is too large for [value] column\n```", "```php\n    'cache' => [\n        'rows' => 1000,\n        'bytes' => 10000,\n    ],\n```", "```php\n    'cache' => [\n        'rows' => 1000,\n        'bytes' => 100000,\n    ],\n```"]