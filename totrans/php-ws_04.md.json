["```php\n// simplest callable is a function\nfunction foo()\n{\n}\n```", "```php\n// function that calculates the average of values that you pass to it\nfunction average()\n{\n    $count = func_num_args();\n    $total = 0;\n    foreach (func_get_args() as $number) {\n        $total += $number;\n    }\n    return $total / $count;\n}\n```", "```php\nfunction howManyTimesDidWeTellYou(int $numberOfTimes): string\n{\n    return \"You told me $numberOfTimes times\";\n}\n```", "```php\n<?php\ndeclare(strict_types=1);\nfunction howManyTimesDidWeTellYou(int $numberOfTimes): string\n{\n    return \"You told me {$numberOfTimes} times\";\n}\n```", "```php\nhowManyTimesDidWeTellYou(1);\n```", "```php\necho howManyTimesDidWeTellYou(1);\n```", "```php\nphp how-many-times-did-we-tell-you.php \n```", "```php\nYou told me 1 times\n```", "```php\n    <?php\n    ```", "```php\n    echo substr('Hello World', 0, 5);\n    ```", "```php\n    echo PHP_EOL;\n    ```", "```php\n    php hello.php\n    ```", "```php\n    echo substr('Hello World', 5);\n    ```", "```php\n    echo substr('Hello World', -4, 3);\n    ```", "```php\n    echo substr('ideeën', -3);\n    ```", "```php\n    echo mb_substr('ideeën', -3);\n    ```", "```php\n<?php\n// Defining a typical object, take note of the method that we defined\nclass Dog {\n    public function __invoke(){\n    echo \"Bark\";\n    }\n}\n// Initialize a new instance of the dog object\n$sparky = new Dog();\n// Here's where the magic happens, we can now call this \n$sparky(); \n```", "```php\nBark\n```", "```php\n// simplest callable is a function\nfunction foo()\n{\n}\necho is_callable('foo') ? '\"foo\" is callable' : '\"foo\" is NOT a callable',   PHP_EOL;\n// an anonymous function is also a callable\nif (true === is_callable(function () {})) {\n    echo 'anonymous function is a callable';\n} else {\n    echo 'anonymous function is NOT a callable';\n}\n```", "```php\n// echo is a language construct\necho 'hello world'; // echo does not return a value\n// print is also a language construct\nprint('hello world'); // print returns 1\n```", "```php\necho strtoupper('Foo');\n// output: FOO\n```", "```php\nphp -v \n```", "```php\nphp -m\n```", "```php\n<?php\nprint_r(get_loaded_extensions());\n```", "```php\nphp list-extensions.php\n```", "```php\nprint_r(get_extension_funcs('gd'));\n```", "```php\n<?php\n// get_loaded_extensions is called without arguments\n// the array returned from it is stored in the variable $extensions\n$extensions = get_loaded_extensions();\n// the variable $extensions is then offered as the first argument to print_r\n// print_r prints the array in a human readable form\nprint_r($extensions);\n```", "```php\n$document = new Document();\n$clonedDocument = clone $document;\n```", "```php\n$document = new DomDocument();\n```", "```php\n$a = 10;\n```", "```php\n$fruits = [\n    'Pear',\n    'Orange',\n    'Apple',\n    'Banana',\n];\n```", "```php\nsort($fruits);\nprint_r($fruits);\n```", "```php\nArray\n(\n    [0] => Apple\n    [1] => Banana\n    [2] => Orange\n    [3] => Pear\n)\n```", "```php\n$reversedFruits = array_reverse($fruits);\n// the original $fruits is still in the original order\nprint_r($reversedFruits);\n```", "```php\nArray\n(\n    [0] => Banana\n    [1] => Apple\n    [2] => Orange\n    [3] => Pear\n)\n```", "```php\n<?php\n$text = \"We would like to see if any spaces followed by three word characters   are in this text\";\n// i is a modifier, that makes the pattern case-insensitive\n$pattern = \"/\\s\\w{3}/i\";\n// empty matches array, passed by reference\n$matches = [];\n// now call the function\npreg_match($pattern, $text, $matches);\nprint_r($matches);\n```", "```php\n(\n    [0] => wou\n)\n```", "```php\npreg_match($pattern, $text, $matches);\n...\n```", "```php\npreg_match_all($pattern, $text, $matches);\n...\n```", "```php\n(\n    [0] => Array\n        (\n            [0] => wou\n            [1] => lik\n            [2] => see\n            [3] => any\n            [4] => spa\n            [5] => fol\n            [6] => thr\n            [7] => wor\n            [8] => cha\n            [9] => are\n            [10] => thi\n            [11] => tex\n        )\n)\n```", "```php\n$values = [\n    'foo',\n    'bar',\n];\n```", "```php\nArray\n(\n    [0] => foo\n    [1] => bar\n)\n```", "```php\n$output = print_r($values, true);\n```", "```php\n\"Array\n(\n    [0] => foo\n    [1] => bar\n)\"\n```", "```php\n    <?php\n         $shapes = [\n                 'circle',\n                 'rectangle',\n                 'triangle'\n         ];\n    ```", "```php\n    echo $shapes;\n    ```", "```php\n    php print_r.php\n    ```", "```php\n    Array\n    ```", "```php\n    print_r($shapes);\n    ```", "```php\n    php print_r.php\n    ```", "```php\n$format = 'You have used the maximum amount of %d credits you are allowed   to spend in a %s. You will have to wait %d days before new credits become   available.';\nprintf($format, 1000, 'month', 9);\n```", "```php\nYou have used the maximum amount of 1000 credits you are allowed to spend in a month. You will have to wait 9 days before new credits become available.\n```", "```php\n$fruits = [\n    'Pear',\n    'orange', // notice orange is all lowercase\n    'Apple',\n    'Banana',\n];\n// sort with flags combined with bitwise OR operator\nsort($fruits, SORT_FLAG_CASE | SORT_NATURAL);\nprint_r($fruits);\n```", "```php\nArray\n(\n    [0] => Apple\n    [1] => Banana\n    [2] => orange\n    [3] => Pear\n)\n```", "```php\n    <?php\n    $signal = ['red', 'amber', 'green'];\n    ```", "```php\n    print_r($signal);\n    ```", "```php\n    php array-functions.php\n    ```", "```php\n    $reversed = array_reverse($signal);\n    ```", "```php\n    print_r($reversed);\n    ```", "```php\n    print_r($signal);\n    ```", "```php\n    php array-functions.php\n    ```", "```php\n    $reversed = array_reverse($signal, $preserve_keys = true);\n    ```", "```php\n    $streets = [\n        'walbrook',\n        'Moorgate',//Starts with an uppercase\n        'crosswall',\n        'lothbury',\n    ];\n    ```", "```php\n    sort($streets, SORT_STRING | SORT_FLAG_CASE );\n    print_r($streets);\n    ```", "```php\n    sort($streets, SORT_STRING & SORT_FLAG_CASE );\n    print_r($streets);\n    ```", "```php\n /**\n * Determines the output directory where your files will \n * go, based on where the system temp directory is. It will use /tmp as \n * the default path to the system temp directory.\n *\n * @param string $systemTempDirectory\n * @return string\n */\nfunction determineOutputDirectory(string $systemTempDirectory = '/tmp'): string { \n    // … code goes here\n}\n```", "```php\n<?php\nnamespace You;\nclass Date{}\n```", "```php\n<?php\nnamespace Me;\nclass Date{}\n```", "```php\n<?php\nnamespace Chapter04;\nfunction foo(){\n    return 'I was called';\n}\n// call it, inside the same namespace:\nfoo();\n```", "```php\n<?php\nrequire_once __DIR__ . '/chapter04-foo.php;\n// call your function\nChapter04\\foo();\n```", "```php\nuse Chapter04;\n// later on in the test, or any other namespace, even the root namespace.\nfoo(); // will work, because we \"use\" Chapter04.\n```", "```php\n<?php\n// we are in global scope here\n$count = 0;\nfunction countMe(){\n    // we enter function scope here\n    // $count is pulled from global scope using the keyword global\n    global $count;\n    $count++;\n}\ncountMe();\ncountMe();\necho $count;\n```", "```php\n2\n```", "```php\n    <?php\n    // we are in global scope here\n    $count = 0;\n    function countMe(){\n        // we enter function scope here\n        // $count is pulled from global scope using the keyword global\n        global $count;\n        $count++;\n    }\n    ```", "```php\n    function countMe()\n    {\n    }\n    ```", "```php\n    function countMe()\n    {\n        $GLOBALS['count']++;\n    }\n    ```", "```php\ncount-me-with-GLOBALS.php\n1  <?php\n2  // declare global $count variable\n3  $count = 0;\n4  /**\n5   * This function increments the global\n6   * $count variable each time it is called.\n7   */\n8  function countMe()\n9  {\n10     $GLOBALS['count']++;\n11 }\n12 // call the function countMe once\n13 countMe();\n14 // and twice\n15 countMe();\nhttps://packt.live/323pJfR\n```", "```php\nfunction [identifier] ([[typeHint][…] [&]$parameter1[…][= defaultValue]][,   [&]$p2, ..$pn]])[: [?]returnType|void] \n{\n     // function body, any number of statements\n     [global $someVariable [, $andAnother]] // bad idea, but possible\n     [return something;]\n}\n```", "```php\nfunction __( $text, $domain = 'default' ) {\n    return translate( $text, $domain );\n}\n```", "```php\nfunction createOutOfCreditsWarning(int $maxCredits, string $period, int $waitDays): string\n{\n    $format = 'You have used the maximum amount of %d credits you are             \n        allowed to spend in a %s. You will have to wait %d days before  \n        new credits become available.';\n    return sprintf($format, $maxCredits, $period, $waitDays);\n}\n```", "```php\nfunction processDocuments(DomDocument … $xmlDocuments):Generator\n{\n    $xsltProcessor = new XsltProcessor();\n    $xsltProcessor->loadStylesheet('style.xslt');\nforeach($xmlDocuments as $document){\n     yield $xsltProcessor->process($document);\n    }\n}\n```", "```php\n// create two documents and load an XML file in each of them\n$document1 = new DomDocument();\n$document1->load($pathToXmlFile1);\n$document2 = new DomDocument();\n$document2->load($pathToXmlFile2);\n// group the documents in an array\n$documents = [$document1, $document2];\n// feed the documents to our function\n$processedDocuments = processDocuments(…$documents);\n// because the result is a Generator, you could also loop over the \n// result:\nforeach(processDocuments(…$documents) as $transformedDocument) {\n     // .. do something with it\n}\n```", "```php\nint\n```", "```php\nint $offset\n```", "```php\nint $offset = 0\n```", "```php\n([typeHint [&]$parameter1[= defaultValue], [&]$p2, …])[: returnType]\n```", "```php\nreturn true;\nreturn 1 < $var;\nreturn 42;\nreturn $documents;\nreturn; // return type will be \"void\" if specified\nreturn null; // return type must be nullable if specified\n```", "```php\nfunction argCounter() {\n   $numOfArgs = func_num_args();\n    echo \"You passed $numOfArgs arg(s)\";\n}\nargCounter(1,2,3,4,5);\n```", "```php\nYou passed 5 arg(s)\n```", "```php\nfunction dynamicArgs(){\n     $count = func_num_args();\n     $arguments = func_get_args();\n     if($count > 0){\n           for($i = 0; $i < $count; $i++){\n                echo \"Argument $i: $arguments[$i]\";\n                echo PHP_EOL;\n           }\n     }\n}\ndynamicArgs(1,2,3,4,5);\n```", "```php\nArgument 0: 1\nArgument 1: 2\nArgument 2: 3\nArgument 3: 4\nArgument 4: 5\n```", "```php\nfunction sayHello($name = 'John') {\n    return \"Hello $name\";\n}\n```", "```php\n<?php\nfunction countMeByReference(int &$count): void\n{\n    $count++;\n}\n```", "```php\n$count = 0;\ncountMeByReference($count);\ncountMeByReference($count);\ncountMeByReference($count);\necho $count; // will print 3\n```", "```php\n/**\n * @param string $systemTempDirectory\n * @return string\n */\nfunction determineOutputDirectory(string $systemTempDirectory = '/tmp'): string\n{\n    return $systemTempDirectory . DIRECTORY_SEPARATOR . 'output';\n}\n```", "```php\n    <?php\n    function add($param1, $param2): string\n    {\n    }\n    ```", "```php\n    if (false === is_numeric($param1)) {\n        throw new DomainException('$param1 should be numeric.');\n    }\n    if (false === is_numeric($param2)) {\n        throw new DomainException('$param2 should be numeric.');\n    }\n    ```", "```php\n    $sum = $param1 + $param2;\n    ```", "```php\n    return \"The sum of $param1 and $param2 is: $sum\";\n    ```", "```php\n    return 'The sum of ' . $param1 . ' and ' . $param2 ' . '  is: ' . $sum;\n    ```", "```php\n    echo add(1, 2);\n    ```", "```php\n    echo PHP_EOL;\n    ```", "```php\n    php add.php\n    ```", "```php\n$callable = 'strtolower';\necho $callable('Foo'); // will print foo;\n```", "```php\nfunction(float $value): int{\n    if (0 <= $value) {\n        return -1; // this is called an early return\n    }\n    return 1;\n}\n```", "```php\necho (function(float $value): int{\n    if (0 <= $value) {\n        return 1;\n    }\n    return -1;\n})(2.3);\n```", "```php\n$callable = function(float $value): int{\n    if (0 <= $value) {\n        return 1;\n    }\n    return -1;\n}; // here semicolon is added as we assign the function to $callable variable.\necho $callable(-11.4); // will print -1, because -11.4 is less than 0.\n```", "```php\n    <?php\n    ```", "```php\n    $a = 15;\n    ```", "```php\n    $callable = function() use ($a) {\n        return $a;\n    };\n    ```", "```php\n    $a = 'different';\n    ```", "```php\n    echo $callable();\n    ```", "```php\n    echo PHP_EOL;\n    ```", "```php\n    php callable.php \n    ```", "```php\n    15\n    ```", "```php\n    <?\n    $a = 15;\n    $callable = function() use (&$a) {\n        return $a;\n    };\n    $a = 'different';\n    echo $callable(); // outputs 'different'\n    // newline for readability\n    echo PHP_EOL;\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    ```", "```php\n    $greeting = function(string $name): void \n    {\n        echo 'Hello ' . $name;\n    };\n    ```", "```php\n    $greeting('Susan');\n    ```", "```php\n    echo PHP_EOL;\n    ```", "```php\n    <?php\n    ```", "```php\n    activity-functions.php\n    2  $directors = [\n    3      'steven-spielberg' => [\n    4          'ET',\n    5          'Raiders of the lost ark',\n    6          'Saving Private Ryan'\n    7      ],\n    8      'martin-scorsese' => [\n    9          'Ashes and Diamonds',\n    10         'The Leopard',\n    11         'The River'\n    12     ],\n    https://packt.live/2p9Zbe6\n    ```", "```php\n    function processDirectorName($name){\n         $nameParts = explode('-', $name);\n         $firstname = ucfirst($nameParts[0]);\n         $lastname = strtoupper($nameParts[1]);\n         return \"$firstname $lastname\";\n    }\n    ```", "```php\n    function processMovies($movies)\n    {\n        $formattedStrings = [];\n        for ($i = 0; $i < count($movies); $i++) {\n            $formattedStrings[] = '\"' . strtoupper($movies[$i]) . '\"';\n        }\n        return implode(\",\", $formattedStrings);\n    }\n    ```", "```php\n    ksort($directors);\n    foreach ($directors as $key => $value) {\n        echo processDirectorName($key) . \": \";\n        echo processMovies($value);\n        echo PHP_EOL;\n    }\n    ```", "```php\n    php activity-functions.php\n    ```", "```php\n    Felix GARY: \"MEN IN BLACK: INTERNATIONAL\",\"THE FATE OF THE FURIOUS\",\"LAW ABIDING CITIZEN\"\n    Kathryn BIGELOW: \"DETROIT\",\"LAST DAYS\",\"THE HURT LOCKER\"\n    Martin SCORSESE: \"ASHES AND DIAMONDS\",\"THE LEOPARD\",\"THE RIVER\"\n    Steven SPIELBERG: \"ET\",\"RAIDERS OF THE LOST ARK\",\"SAVING PRIVATE RYAN\"\n    ```"]