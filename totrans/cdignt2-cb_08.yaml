- en: Chapter 8. Calendaring, Right Place, and Right Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 日历、正确的时间和地点
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Building a CodeIgniter Calendar helper with database results
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库结果构建CodeIgniter日历助手
- en: Building an appointment manager with Calendar Library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日历库构建约会管理器
- en: Creating a helper to work with a person's date of birth
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于处理个人出生日期的助手
- en: Working with fuzzy dates in CodeIgniter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CodeIgniter中处理模糊日期
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: CodeIgniter comes bundled with many functions and helpers to help support your
    application when working with time and dates, calendars, and so on. We're going
    to use a few of them in this chapter, but we will also create a few helpers of
    our own, which can be useful in everyday tasks, such as calculating a person's
    age (useful for an age verification script) and working with fuzzy dates (that
    is, writing a description of the date or time rather than just writing out an
    accurate date).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter附带了许多函数和助手，以帮助支持您在处理时间、日期、日历等时的应用程序。在本章中，我们将使用其中的一些，但我们还将创建一些自己的助手，这些助手在日常任务中非常有用，例如计算一个人的年龄（对于年龄验证脚本很有用）和处理模糊日期（即，编写日期或时间的描述而不是只写出准确的日期）。
- en: Building a CodeIgniter Calendar helper with database results
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库结果构建CodeIgniter日历助手
- en: CodeIgniter comes with a really useful calendar helper that allows you to display
    months in a grid. It is possible to develop functionality to pull events from
    a database (such as a table that stores diary appointments) and indicate to the
    user if there is an appointment on a given day.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter附带了一个非常有用的日历助手，允许您以网格形式显示月份。您可以开发从数据库（例如存储日记约会的表）中提取事件的功能，并告知用户在特定一天是否有约会。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As we''re storing appointments in a database, we''ll need a database table.
    Copy the following code into your database:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在数据库中存储约会，我们需要一个数据库表。将以下代码复制到您的数据库中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We''re going to create two files:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个文件：
- en: '`/path/to/codeigniter/application/controllers/app_cal.php`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/app_cal.php`'
- en: '`/path/to/codeigniter/application/models/app_cal_model.php`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/app_cal_model.php`'
- en: '`/path/to/codeigniter/application/views/app_cal/view.php`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/app_cal/view.php`'
- en: 'In order to create those two files we execute the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这两个文件，我们执行以下步骤：
- en: 'Create the file `/path/to/codeigniter/application/controllers/app_cal.php`
    and add the following code to it:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/app_cal.php` 并添加以下代码：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the file `/path/to/codeigniter/application/models/app_cal_model.php`
    and add the following code to it:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/models/app_cal_model.php` 并添加以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/view.php` and
    add the following code to it:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/app_cal/view.php` 并添加以下代码：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We start off by loading the controller `app_cal` (that stands for Appointment
    Calendar, in case you were wondering) in our web browser. Note that we load the
    helpers `''url''` and `''date''` in the constructor:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在我们的网页浏览器中加载控制器 `app_cal`（如果你想知道，它代表约会日历），在构造函数中加载助手 `'url'` 和 `'date'`：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first function loaded is `index()`, which redirects us to the `show()`
    function, where we immediately begin to define some preferences for the calendar
    functionality:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 加载的第一个函数是 `index()`，它将我们重定向到 `show()` 函数，在那里我们立即开始定义日历功能的一些偏好：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Each item is fairly self-explanatory but I''ll go into them anyway:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目相当直观，但我仍然会详细介绍它们：
- en: '| Preference | Description |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Preference | 描述 |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| start_day | Specifies which day of the week is leftmost in the calendar grid,
    so if you entered ''sunday'', the day row (the row which describes the days) in
    the calendar grid will start at Sunday. If for some peculiar reason you wanted
    your calendar to start on a Wednesday, you would enter ''wednesday'' and the calendar
    week would start with Wednesday. But don''t really do that; it would look odd!
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| start_day | 指定日历网格中最左侧是星期几，所以如果你输入 ''sunday''，日历网格中的日行（描述日子的行）将从星期日开始。如果你出于某种奇怪的原因想让你的日历从星期三开始，你将输入
    ''wednesday''，日历周将从星期三开始。但请真的不要这样做；这看起来会很奇怪！|'
- en: '| month_type | Specifies how the month is written. ''long'' is the full month
    name, such as August, and ''short'' is a shortened version, such as Aug. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| month_type | 指定月份的书写方式。''long'' 是完整的月份名称，例如 August，而 ''short'' 是缩写版本，例如 Aug。|'
- en: '| day_type | Specifies how the days of the week are written in the days row
    of the calendar grid. ''long'' is Monday, Tuesday, Wednesday, and so on, and ''short''
    is Mon, Tue, Wed, and so on. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| day_type | 指定日历网格中日期行的星期几是如何书写的。''long'' 是 Monday、Tuesday、Wednesday 等等，而
    ''short'' 是 Mon、Tue、Wed 等等。 |'
- en: '| show_next_prev | Could be either TRUE or FALSE. This lets CodeIgniter know
    if it should display the next and previous chevrons ( << and >>); clicking these
    will advance the calendar forward or backward one month at a time. If this is
    set to TRUE (which it is in this recipe) you''ll need to specify next_prev_url.
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| show_next_prev | 可以是 TRUE 或 FALSE。这会让 CodeIgniter 知道它是否应该显示下一个和上一个的箭头（ <<
    和 >>）；点击这些箭头将使日历向前或向后移动一个月。如果设置为 TRUE（在这个菜谱中就是这样），你需要指定 next_prev_url。 |'
- en: '| next_prev_url | Specifies the URL CodeIgniter should use for the << or >>
    links. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| next_prev_url | 指定 CodeIgniter 应该使用的 << 或 >> 链接的 URL 代码。 |'
- en: 'Next, we load the calendar library and pass the `$prefs` array to it as a second
    parameter. Then, we test for the existence of a fourth `uri` segment:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们加载日历库，并将 `$prefs` 数组作为第二个参数传递给它。然后，我们检查是否存在第四个 `uri` 段：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The third and fourth `uri` segments are years (YYYY) and months (MM) respectively,
    and if they don't exist, it is probably the first time the calendar is being loaded
    (or the calendar isn't being accessed via `'next_prev_url'`). Either way, because
    we don't have a third or fourth `uri` segment to pass to our model, we'll have
    to make them up. But what should we use? How about the current month and current
    year (see the preceding highlighted code)?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个和第四个 `uri` 段分别是年份（YYYY）和月份（MM），如果它们不存在，可能是因为第一次加载日历（或者日历不是通过 `'next_prev_url'`
    访问的）。无论如何，因为我们没有第三个或第四个 `uri` 段传递给我们的模型，我们不得不自己创建它们。但我们应该使用什么？比如当前月份和当前年份（参见前面的高亮代码）？
- en: 'Now, we load the model `App_model` and pass to it our `$year` and `$month`
    variables:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们加载模型 `App_model` 并将我们的 `$year` 和 `$month` 变量传递给它：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's take a look at the model now and see what's happening. We store our appointments
    in the database using timestamps, and because the years and months are being passed
    to the `app_cal` controller as the strings 'YYYY' and 'MM' we'll need to convert
    the 'YYYY', 'MM' strings to timestamps, so we can query the database and work
    out whether we have an appointment for a particular day in the selected month.
    This means we'll need to use the PHP function `strtotime`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看模型，看看发生了什么。我们使用时间戳在数据库中存储我们的预约，因为年份和月份被作为字符串 'YYYY' 和 'MM' 传递给 `app_cal`
    控制器，所以我们需要将 'YYYY'、'MM' 字符串转换为时间戳，以便我们可以查询数据库并确定在所选月份的特定一天是否有预约。这意味着我们需要使用 PHP
    函数 `strtotime`。
- en: Those of you who are familiar with the function (or even those who just read
    the function name) will understand that `strtotime` converts a string of written
    English to a Unix timestamp, so writing "last Wednesday", for example, will make
    `strtotime` return whatever the timestamp was for last Wednesday. It's a great
    way to get a timestamp, but it does mean that you'll need to generate some sort
    of string description for the date you wish to calculate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉该函数（或者甚至只是阅读了函数名称）的人来说，会明白 `strtotime` 将写成的英文字符串转换为 Unix 时间戳，例如，写入 "last
    Wednesday"，`strtotime` 将返回上一次周三的时间戳。这是一个获取时间戳的好方法，但它确实意味着你需要为要计算的日期生成某种类型的字符串描述。
- en: 'We want to grab all the appointments for a particular month, which means generating
    a database query with a WHERE clause looking for "appointments greater than the
    timestamp representing the first day of a month and less than a timestamp representing
    the last day of a month". So, to get ready for that, let''s take a look at the
    following `$month_as_written` array in the code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要获取特定月份的所有预约，这意味着生成一个带有 WHERE 子句的数据库查询，查找 "预约大于代表一个月第一天的日期时间戳，并且小于代表一个月最后一天的日期时间戳"。因此，为了准备这个，让我们看看代码中的以下
    `$month_as_written` 数组：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You'll see that the key of each item in the array matches the format of `$month
    (MM)`. That's important, as we'll use the value in `$month` to write out in English
    the required month name.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到数组中每个项目的键都与 `$month (MM)` 的格式相匹配。这很重要，因为我们将使用 `$month` 中的值来用英文写出所需的月份名称。
- en: 'We''ll prepend it with `''01 ''` to indicate the first of the month and append
    it with `$year`, like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用 `'01 '` 预先添加，以表示月初，然后用 `$year` 后缀，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The written string is stored in the variable `$start_date`, which is then passed
    to `strtotime()`, which in turn returns the Unix timestamp for the start of the
    month. Next, we calculate the end date:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 写入的字符串存储在变量 `$start_date` 中，然后传递给 `strtotime()`，它反过来返回月份开始的 Unix 时间戳。接下来，我们计算结束日期：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we use the CodeIgniter function `days_in_month()`; passing it `$month`
    and `$year` it will return the number of days in the month as an integer. We then
    concatenate this value with a space `' '` and the written month from the `$month_as_written`
    array before finishing with `$year`. The string is then passed to `strtotime($end_date)`,
    which gives us the Unix timestamp for the end of the month; this value is stored
    in the variable `$end_of_month`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 CodeIgniter 函数 `days_in_month()`；传入 `$month` 和 `$year` 参数，它将返回该月的天数作为一个整数。然后我们将这个值与一个空格
    `' '` 和 `$month_as_written` 数组中的月份名称连接起来，最后以 `$year` 结尾。然后将这个字符串传递给 `strtotime($end_date)`，它给出了月份结束的
    Unix 时间戳；这个值存储在变量 `$end_of_month` 中。
- en: 'Well use the two variables `$start_of_month` and `$end_of_month` in our database
    query, asking it to return appointments after the start but before the end of
    the calculated month:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在数据库查询中使用两个变量 `$start_of_month` 和 `$end_of_month`，要求它返回计算月份开始之后的预约，但不超过月份结束：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next up, we need to build an array to store the appointments and URLs. First,
    let''s declare the array:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要构建一个数组来存储预约和 URL。首先，让我们声明这个数组：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we''ll loop through the `App_model` result (contained in the variable
    `$appointments`) building the array as we go:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将遍历 `App_model` 结果（包含在变量 `$appointments` 中），在遍历过程中构建数组：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once finished, the array should take this structure:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，数组应该具有以下结构：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `$data` array is passed along with `$year` and `$month` to the calendar
    library function `generate()`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`$data` 数组与 `$year` 和 `$month` 一起传递给日历库函数 `generate()`：'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The product of this is stored in `$data['cal_data']` and then passed to the
    view `app_cal/view`, from where it is rendered to the screen.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果存储在 `$data['cal_data']` 中，然后传递给视图 `app_cal/view`，从那里渲染到屏幕上。
- en: Building an appointment manager with Calendar Library
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日历库构建预约管理器
- en: The preceding recipe used the CodeIgniter Calendar library to help build an
    interactive calendar. However, you could only view items in the calendar that
    were already in the database. The next logical step is building a small application
    that allows you to create items for the calendar with a form; a simple appointment
    manager would do the trick. We're basing this recipe on the previous one; however,
    you don't need to go back and work through that recipe. Everything you need is
    contained in this recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的食谱使用了 CodeIgniter 日历库来帮助构建交互式日历。然而，您只能查看数据库中已经存在的日历项目。下一步的逻辑是构建一个小型应用程序，允许您通过表单创建日历项目；一个简单的预约管理器就可以做到这一点。我们基于之前的食谱；然而，您不需要回到并完成那个食谱。您需要的所有内容都包含在这个食谱中。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll need to make a database table to store our appointments. If you have
    used the previous recipe, you should have the database table already; if so, run
    the following code in your database:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个数据库表来存储我们的预约。如果您已经使用了之前的食谱，您应该已经有了数据库表；如果是这样，请在您的数据库中运行以下代码：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, if you haven''t already got the table, run this code in your
    database:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您还没有创建表格，请在您的数据库中运行以下代码：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that the database is sorted, let''s look at the code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经排序，让我们看看代码：
- en: How to do it…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We''re going to create the following six files:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建以下六个文件：
- en: '`/path/to/codeigniter/application/controllers/app_cal.php`: This contains all
    the code necessary to run the show, including the HTML 6 template for the calendar'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/app_cal.php`：这个文件包含运行显示所需的所有代码，包括日历的
    HTML 6 模板'
- en: '`/path/to/codeigniter/application/models/app_cal_model.php`: This contains
    all necessary code for interacting with the database'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/app_cal_model.php`：这个文件包含与数据库交互所需的所有代码'
- en: '`/path/to/codeigniter/application/views/app_cal/view.php`: This will display
    the calendar'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/app_cal/view.php`：这个页面将显示日历'
- en: '`/path/to/codeigniter/application/views/app_cal/appointment.php`: This will
    display a form where you can add appointments'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/app_cal/appointment.php`：这个页面将显示一个表单，您可以在其中添加预约'
- en: '`/path/to/codeigniter/application/views/app_cal/new.php`: This displays a form
    allowing the user to create a new appointment'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/app_cal/new.php`：这个页面显示一个表单，允许用户创建新的预约'
- en: '`/path/to/codeigniter/application/views/app_cal/delete.php`: This displays
    a delete confirmation message'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/app_cal/delete.php`：此文件显示删除确认消息'
- en: 'We need to execute the following steps to create those files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下步骤来创建这些文件：
- en: 'Create the file `/path/to/codeigniter/application/controllers/app_cal.php`
    and add to it the following code (this is quite a big controller, so I''m going
    to break down the bigger functions to explain what they do):'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/controllers/app_cal.php` 并向其中添加以下代码（这是一个相当大的控制器，所以我将分解较大的函数来解释它们的功能）：
- en: '[PRE18]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The public function `show()`will display the Calendar on the screen; it is responsible
    for deciding what month and what year to show.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公共函数 `show()` 将在屏幕上显示日历；它负责决定显示哪个月份和哪一年份。
- en: '[PRE19]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The public function `create()` will handle the creation of appointments, so
    it'll display the appointment form, validate input, and send data to the model
    for insertion into the database.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公共函数 `create()` 将处理预约的创建，因此它将显示预约表单，验证输入，并将数据发送到模型以将其插入数据库。
- en: '[PRE20]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The public function `delete()` is responsible for removing (deleting) an appointment.
    It will load the delete confirmation form, validate the input, and pass data to
    the model for deletion from the database.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公共函数 `delete()` 负责删除（删除）一个预约。它将加载删除确认表单，验证输入，并将数据传递到模型以从数据库中删除。
- en: '[PRE21]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the file `/path/to/codeigniter/application/models/app_cal_model.php`
    and add the following code to it:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/models/app_cal_model.php` 并向其中添加以下代码：
- en: '[PRE22]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/view.php` and
    add the following code to it:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/app_cal/view.php` 并向其中添加以下代码：
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/appointment.php`
    and add the following code to it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/app_cal/appointment.php` 并向其中添加以下代码：
- en: '[PRE24]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/delete.php`
    and add the following code to it:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/app_cal/delete.php` 并向其中添加以下代码：
- en: '[PRE25]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/new.php` and
    add the following code to it:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件 `/path/to/codeigniter/application/views/app_cal/new.php` 并向其中添加以下代码：
- en: '[PRE26]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For the most part the functionality is broadly similar to the previous recipe,
    but there are some differences; we've added support to manage appointments. So,
    let's begin with looking at `public function view()`. You'll notice that we have
    moved some code around; the code which either grabs the dates from the uri or
    makes the date on the fly is now before the `$prefs` array — this is because of
    the `$tpl` variable. What's `$tpl` then?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分功能与之前的菜谱类似，但有一些差异；我们添加了管理预约的支持。因此，让我们首先看看 `public function view()`。你会注意到我们已经移动了一些代码；从
    uri 中获取日期的代码或即时生成日期的代码现在在 `$prefs` 数组之前——这是由于 `$tpl` 变量的原因。那么 `$tpl` 是什么呢？
- en: 'The content of the `$tpl` variable string, more specifically it is a calendar
    template used by the Calendar library; the template supports a tag for days—`{day}`—but
    not for the month or year. This means that we have to insert these values manually
    into the template. But to do that, we need to know the year and month values beforehand;
    that''s why the code to calculate the month and day is now moved up before the
    `$prefs` array. The template code that I use is a modified version of what is
    available from the CodeIgniter website user guide: [http://ellislab.com/codeigniter/user-guide/libraries/calendar.html](http://ellislab.com/codeigniter/user-guide/libraries/calendar.html).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`$tpl` 变量字符串的内容，更具体地说，它是日历库使用的日历模板；模板支持用于天数的标签——`{day}`——但不支持月份或年份。这意味着我们必须手动将这些值插入模板中。但为了做到这一点，我们需要事先知道年份和月份的值；这就是为什么计算月份和日期的代码现在被移动到
    `$prefs` 数组之前。我使用的模板代码是 CodeIgniter 网站用户指南中可用的修改版本：[http://ellislab.com/codeigniter/user-guide/libraries/calendar.html](http://ellislab.com/codeigniter/user-guide/libraries/calendar.html)。'
- en: 'From here onwards it''s the same functionality as the `view()` function in
    the previous recipe: we load the Calendar library, fetch all appointments for
    the current month, and pass it to the `app_cal/view.php` view file. Let''s go
    through some of the newer functions in more detail:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，其功能与之前菜谱中的 `view()` 函数相同：我们加载日历库，获取当前月份的所有预约，并将其传递给 `app_cal/view.php`
    视图文件。让我们更详细地了解一下一些新函数：
- en: The public function create()
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共函数 `create()`
- en: 'When the user enters the new appointment''s details and posts the create form,
    the public function `create()` first declares the validation rules for the new
    appointment. We''ll then need to grab the year, month, and day for the specific
    appointment from either the `post` or `get` arrays. The public `create()`function
    checks for this and stores the date values in variables:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入新预约的详细信息并提交创建表单时，公共函数`create()`首先声明新预约的验证规则。然后我们需要从`post`或`get`数组中获取特定预约的年、月和日。公共`create()`函数会检查这一点并将日期值存储在变量中：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There are three tests here as the public function `create()` can be accessed
    in different ways. The first test looks for whether the page is accessed by someone
    by clicking on an add appointment link **+** in the calendar grid, the second
    test looks for the variables if the page has been posted, and the third (an else)
    is for when the **New Appointment** link is clicked.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三个测试，因为公共函数`create()`可以通过不同的方式访问。第一个测试是查看是否有人通过点击日历网格中的添加预约链接**+**来访问页面，第二个测试是查看页面是否已提交，第三个（else）是当点击**新预约**链接时。
- en: Next, we check if the page validation is passed or not; `FALSE` can mean a failure
    of validation or that `create()` is being accessed for the first time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查页面验证是否通过；`FALSE`可能意味着验证失败，或者`create()`是第一次被访问。
- en: 'We set some form values for CodeIgniter to render in the view and begin to
    build the variables necessary for the date dropdowns:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为CodeIgniter设置一些表单值以在视图中渲染，并开始构建日期下拉菜单所需的变量：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We then show the `view` file and wait for the user to submit. Upon successful
    submission (that is, when the form passes validation), we calculate the Unix timestamp
    for the appointment date variable (day, month, and year) and package everything
    into the `$data` array, ready for insertion into the database. A successful insertion
    will redirect the user to the month and year in which their appointment sits.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后展示`view`文件并等待用户提交。在提交成功（即，当表单通过验证时），我们计算预约日期变量（日、月和年）的Unix时间戳，并将所有内容打包到`$data`数组中，以便插入数据库。成功插入后，将用户重定向到他们的预约所在的月份和年份。
- en: The public function delete()
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公共函数`delete()`
- en: 'This is quite simple; we check for the existence of an appointment ID in either
    the `get` or `post` arrays:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单；我们检查`get`或`post`数组中是否存在预约ID：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We look in both `get` and `post` because the function can be accessed for the
    first time by someone clicking on a URL, and the second time by someone posting
    (when they click on the **confirm delete** button in the view).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`get`和`post`中都查找，因为函数可以由第一次点击URL的人访问，也可以由第二次点击（当他们点击视图中的**确认删除**按钮时）的人提交。
- en: If the form is being submitted with errors, or run for the first time, the appointment
    details are fetched from the database (having been passed `$id` from the preceding
    code).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单提交时出现错误，或者第一次运行，将从数据库中获取预约详情（前一段代码已传递`$id`）。
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We then fetch `app_name` and `app_date` from the database result and store them
    as items in the `$data` array for passing to the `app_cal/delete.php` view file.
    Upon a successful submit (if nothing failed the validation) the model function
    `delete()` is called, and if a delete occurred the user is redirected to the same
    month and year where their deleted appointment previously sat.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后从数据库结果中获取`app_name`和`app_date`并将它们作为项目存储在`$data`数组中，以便传递给`app_cal/delete.php`视图文件。在成功提交（如果没有验证失败）后，调用模型函数`delete()`，如果发生了删除，用户将被重定向到他们之前删除的预约所在的相同月份和年份。
- en: Creating a helper to work with a person's date of birth
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个助手函数来处理一个人的出生日期
- en: From time to time, you'll need an age verification script, a method to ascertain
    whether or not a user is of a certain age. Based on their age, they may be allowed,
    or disallowed, from viewing content, for example, a website that promotes adult
    products, such as alcohol or tobacco or a games site that promotes a game rated
    for certain ages. The code in this recipe helps you to ascertain a user's age,
    compares that against a minimum age requirement, and displays an HTML file accordingly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要一个年龄验证脚本，一个确定用户是否达到一定年龄的方法。根据他们的年龄，他们可能被允许或禁止查看内容，例如，推广成人产品的网站，如酒精或烟草，或者推广特定年龄评级游戏的网站。这个菜谱中的代码帮助你确定用户的年龄，将其与最低年龄要求进行比较，并相应地显示HTML文件。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''re going to create five files:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建五个文件：
- en: '`/path/to/codeigniter/application/controllers/register.php`: This is the controller
    for our recipe'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/register.php`：这是我们的菜谱控制器'
- en: '`/path/to/codeigniter/application/helpers/dob_val_helper.php`: This file calculates
    the user''s age, compares it to the required age, and returns true or false depending
    on the result'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/helpers/dob_val_helper.php`：此文件计算用户的年龄，将其与所需年龄进行比较，并根据结果返回
    `TRUE` 或 `FALSE`'
- en: '`/path/to/codeigniter/application/views/register/signup.php`: This file displays
    the age verification form'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/register/signup.php`：此文件显示年龄验证表单'
- en: '`/path/to/codeigniter/application/views/register/enter.php`: This is displayed
    if the user can enter'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/register/enter.php`：如果用户可以进入，则显示此文件'
- en: '`/path/to/codeigniter/application/views/register/noenter.php`: This is displayed
    if the user cannot enter'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/register/noenter.php`：如果用户不能进入，则显示此文件'
- en: 'Create the controller file, `register.php`, and add the following code to it:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件 `register.php`，并将以下代码添加到其中：
- en: '[PRE31]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create the helper file, `dob_val_helper.php`, and add the following code to
    it:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建辅助程序文件 `dob_val_helper.php`，并将以下代码添加到其中：
- en: '[PRE32]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the view file, `signup.php`, and add the following code to it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件 `signup.php`，并将以下代码添加到其中：
- en: '[PRE33]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the view file `enter.php` and add the following code to it:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件 `enter.php`，并将以下代码添加到其中：
- en: '[PRE34]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the view file `noenter.php` and add the following code to it:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图文件 `noenter.php`，并将以下代码添加到其中：
- en: '[PRE35]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First off, we come to the controller; the controller loads the URL helper (as
    we''re using the `redirect()` function and a helper we will create called `dob_val`):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来到控制器；控制器加载 URL 辅助程序（因为我们使用 `redirect()` 函数以及我们将创建的名为 `dob_val` 的辅助程序）：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We then set up form validation and set the rules for our day, month, and year
    fields from the HTML. The `register/signup.php` view file is loaded, ready for
    the user to enter their date of birth in the three form fields.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置表单验证并从 HTML 中设置我们的日、月和年字段的规则。`register/signup.php` 视图文件被加载，准备用户在三个表单字段中输入他们的出生日期。
- en: 'The user will press submit, and if the submission passes for validation, the
    three form values are put into the `$dob` array:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将点击提交，如果提交通过验证，则三个表单值将被放入 `$dob` 数组中：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We set our minimum age (the age the user must be in order to view age restricted
    content) like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置最小年龄（用户必须达到的年龄才能查看受年龄限制的内容）如下：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we pass the `$dob` array along with the `$at_least` variable to the `dob_val`
    helper:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `$dob` 数组以及 `$at_least` 变量传递给 `dob_val` 辅助程序：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The helper calculates if the user is above or below the `$at_least` age, returning
    `TRUE` if they are above and `FALSE` if they are not. If they are, they see the
    `register/enter` view file, and if they aren't they see the `register/noenter`
    view file.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助程序会计算用户是否超过或低于 `$at_least` 年龄，如果超过则返回 `TRUE`，如果没有则返回 `FALSE`。如果用户符合条件，他们会看到
    `register/enter` 视图文件，如果不满足条件，则会看到 `register/noenter` 视图文件。
- en: Working with fuzzy dates in CodeIgniter
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CodeIgniter 中处理模糊日期
- en: What is a fuzzy date? A fuzzy date is a more familiar and general way to describe
    a data or time rather than an exact, precise time; it describes an event in a
    way that is more familiar to a reader than a precise timestamp. For example, rather
    than saying that an email was sent at 17:41, you could say it was sent "less than
    a minute ago" (assuming you sent it within the last minute) or even "a few moments
    ago". The precise time at which something occurred is considered unimportant—or
    at least unnecessary—information and it is instead replaced with a more general,
    informal, and conversational description of the date and time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是模糊日期？模糊日期是一种更熟悉和通用的方式来描述数据或时间，而不是精确的时间；它以一种对读者来说更熟悉的方式描述事件。例如，与其说一封电子邮件在
    17:41 发送，不如说它是在“不到一分钟前”发送的（假设你在最后一分钟内发送了它）或者甚至是“几分钟前”。某事发生的精确时间被认为是不重要的一—或者至少是不必要的——信息，取而代之的是对日期和时间的更一般、非正式和会话式的描述。
- en: How to do it…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We''re going to create two files:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建两个文件：
- en: '`/path/to/codeigniter/application/controllers/fuzzy_date.php`: This controller
    will call the `fuzzy_date_helper.php` file and pass to it some dates (as a Unix
    timestamp) for the helper to convert.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/fuzzy_date.php`：此控制器将调用 `fuzzy_date_helper.php`
    文件，并将一些日期（作为 Unix 时间戳）传递给它以供辅助程序转换。'
- en: '`/path/to/codeigniter/application/helpers/fuzzy_date_helper.php`: This helper
    will be called by the controller and will convert the dates passed to it, returning
    a written description every time.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/helpers/fuzzy_date_helper.php`：这个辅助程序将由控制器调用，并将转换传递给它的日期，每次都返回一个文字描述。'
- en: 'Create the controller file, `fuzzy_date.php`, and add the following code to
    it:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制器文件，`fuzzy_date.php`，并向其中添加以下代码：
- en: '[PRE40]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the helper file, `fuzzy_date_helper.php`, and add the following code
    to it:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建辅助程序文件，`fuzzy_date_helper.php`，并向其中添加以下代码：
- en: '[PRE41]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'Let''s take a look at the `fuzzy_date` controller, the controller loads in
    the constructor, which in turn loads our `fuzzy_date_helper`, this is the helper
    which will translate Unix timestamps into descriptive text for us:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`fuzzy_date`控制器，控制器在构造函数中加载，它反过来加载我们的`fuzzy_date_helper`，这是将Unix时间戳转换为描述性文本的辅助程序：
- en: '[PRE42]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We then load the public function `index()`, which calls `fuzzydate_helper`,
    passing to it a timestamp (at the moment, the input passed is set to be `time()
    + 30`).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们加载公共函数`index()`，它调用`fuzzydate_helper`，并传递给它一个时间戳（目前，传入的输入设置为`time() + 30`）。
- en: Why `time() + 30`? Well, `time()` is the `php` function that returns the Unix
    timestamp for "now" (whenever "now" is for you), and the `+ 30` is 30 seconds
    added to the current timestamp value returned by `time()`, meaning "now plus 30
    seconds" (or "30 seconds in the future"). I've set it to that for the initial
    demonstration, but I will describe how this can be altered later in the description.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么是`time() + 30`？好吧，`time()`是`php`函数，它返回“现在”的Unix时间戳（对你来说，“现在”是什么时候），而`+ 30`是将30秒加到`time()`返回的当前时间戳值上，意味着“现在加30秒”（或“未来30秒”）。我将其设置为初始演示，但稍后我将描述如何修改它。
- en: 'In the controller we pass ''now plus 30 seconds'' to the helper:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，我们将“现在加30秒”传递给辅助程序：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The incoming function augment (that is, what we defined in the controller)
    is declared locally for the helper as `$time_in`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 进入函数的传入函数（即我们在控制器中定义的）在辅助程序中本地声明为`$time_in`：
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The helper takes the `$time_in` variable, looks at its value, and works out
    if the timestamp value is greater than, or less than, `$now` as defined in the
    helper as $now = time():'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助程序获取`$time_in`变量，查看其值，并计算出时间戳值是否大于或小于辅助程序中定义的`$now`（即$now = time()）：
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As ''now plus 30 seconds'' is greater than now (30 seconds more, to be precise)
    the helper goes to the `else` part of the `if` structure and then begins a series
    of comparisons, trying to find a place where the value defined in `$time_in` will
    fit. As ''now plus 30 seconds'' is less than ''now plus 60 seconds'' (30 seconds
    less, in fact), the first `if` statement is applied and the helper returns the
    first item in the `$future_descriptions` array:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“现在加30秒”大于现在（精确地说，多了30秒），辅助程序进入`if`结构的`else`部分，然后开始一系列比较，试图找到一个地方，其中在`$time_in`中定义的值可以匹配。由于“现在加30秒”小于“现在加60秒”（实际上少了30秒），第一个`if`语句被应用，辅助程序返回`$future_descriptions`数组中的第一个元素：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: That would be a minute from now?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 那将是现在一分钟之后吗？
- en: You can, of course, alter the timestamp passed to the helper in the controller;
    you could set it to `time() + 250` (which would be now plus 250 seconds). Now,
    plus 250 seconds is greater than a minute (60 seconds) but less than 5 minutes
    (300 seconds), causing the second `if` statement to apply and return the text
    'in the next few minutes'.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以在控制器中修改传递给辅助程序的时间戳；您可以将其设置为`time() + 250`（这将现在是250秒）。现在，加上250秒大于一分钟（60秒），但小于五分钟（300秒），这将导致第二个`if`语句应用并返回文本“在接下来的几分钟内”。
- en: 'We can also pass a lower timestamp value than "now": `time() – 4000` (that
    is "now minus 4000 seconds"). Passing a lower timestamp will cause the behavior
    of the helper to change. How? Well, remember that initial `if` statement?'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传递一个比“现在”更低的时间戳值：`time() – 4000`（即“现在减去4000秒”）。传递一个较低的时间戳将导致辅助程序的行为改变。如何？别忘了最初的`if`语句？
- en: '[PRE47]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This time, we won't go down to the else part of it; instead, the initial `if`
    part will be triggered and the helper will begin to process times in the past.
    So, by setting the helper input to `time() - 4000` (now minus 4000 seconds, which
    is more than a minute ago, more than 5 minutes ago, and more than an hour ago
    but less than a full day ago), the helper will return the text "earlier today".
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们不会进入它的else部分；相反，初始的`if`部分将被触发，辅助程序将开始处理过去的时间。因此，通过将辅助程序输入设置为`time() - 4000`（现在是4000秒之前，超过一分钟，超过五分钟，超过一小时但不到一天），辅助程序将返回文本“今天早些时候”。
- en: You can, of course, add many, many more detailed comparisons and descriptions;
    in fact, I encourage you to do so—go nuts!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以添加更多更多详细的比较和描述；实际上，我鼓励你这样做——尽情发挥吧！
- en: In a real situation, you would amend the helper function call in the controller,
    removing the input of `time() +` or – `number_of_seconds` to just the timestamp
    of the thing you want to describe – be it a blog post created date, file upload
    date, appointment date…whatever…you get the idea I'm sure.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际情况中，你会在控制器中修改辅助函数的调用，移除`time() +`或`- number_of_seconds`的输入，只保留你想要描述的事物的时戳——无论是博客文章的创建日期、文件上传日期、预约日期……无论什么……我相信你明白了我的意思。
