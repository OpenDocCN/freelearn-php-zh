- en: Chapter 8. Calendaring, Right Place, and Right Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a CodeIgniter Calendar helper with database results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an appointment manager with Calendar Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a helper to work with a person's date of birth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with fuzzy dates in CodeIgniter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter comes bundled with many functions and helpers to help support your
    application when working with time and dates, calendars, and so on. We're going
    to use a few of them in this chapter, but we will also create a few helpers of
    our own, which can be useful in everyday tasks, such as calculating a person's
    age (useful for an age verification script) and working with fuzzy dates (that
    is, writing a description of the date or time rather than just writing out an
    accurate date).
  prefs: []
  type: TYPE_NORMAL
- en: Building a CodeIgniter Calendar helper with database results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodeIgniter comes with a really useful calendar helper that allows you to display
    months in a grid. It is possible to develop functionality to pull events from
    a database (such as a table that stores diary appointments) and indicate to the
    user if there is an appointment on a given day.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''re storing appointments in a database, we''ll need a database table.
    Copy the following code into your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/app_cal.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/app_cal_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/app_cal/view.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to create those two files we execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the file `/path/to/codeigniter/application/controllers/app_cal.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/models/app_cal_model.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/view.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start off by loading the controller `app_cal` (that stands for Appointment
    Calendar, in case you were wondering) in our web browser. Note that we load the
    helpers `''url''` and `''date''` in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The first function loaded is `index()`, which redirects us to the `show()`
    function, where we immediately begin to define some preferences for the calendar
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Each item is fairly self-explanatory but I''ll go into them anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Preference | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| start_day | Specifies which day of the week is leftmost in the calendar grid,
    so if you entered ''sunday'', the day row (the row which describes the days) in
    the calendar grid will start at Sunday. If for some peculiar reason you wanted
    your calendar to start on a Wednesday, you would enter ''wednesday'' and the calendar
    week would start with Wednesday. But don''t really do that; it would look odd!
    |'
  prefs: []
  type: TYPE_TB
- en: '| month_type | Specifies how the month is written. ''long'' is the full month
    name, such as August, and ''short'' is a shortened version, such as Aug. |'
  prefs: []
  type: TYPE_TB
- en: '| day_type | Specifies how the days of the week are written in the days row
    of the calendar grid. ''long'' is Monday, Tuesday, Wednesday, and so on, and ''short''
    is Mon, Tue, Wed, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| show_next_prev | Could be either TRUE or FALSE. This lets CodeIgniter know
    if it should display the next and previous chevrons ( << and >>); clicking these
    will advance the calendar forward or backward one month at a time. If this is
    set to TRUE (which it is in this recipe) you''ll need to specify next_prev_url.
    |'
  prefs: []
  type: TYPE_TB
- en: '| next_prev_url | Specifies the URL CodeIgniter should use for the << or >>
    links. |'
  prefs: []
  type: TYPE_TB
- en: 'Next, we load the calendar library and pass the `$prefs` array to it as a second
    parameter. Then, we test for the existence of a fourth `uri` segment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The third and fourth `uri` segments are years (YYYY) and months (MM) respectively,
    and if they don't exist, it is probably the first time the calendar is being loaded
    (or the calendar isn't being accessed via `'next_prev_url'`). Either way, because
    we don't have a third or fourth `uri` segment to pass to our model, we'll have
    to make them up. But what should we use? How about the current month and current
    year (see the preceding highlighted code)?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we load the model `App_model` and pass to it our `$year` and `$month`
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the model now and see what's happening. We store our appointments
    in the database using timestamps, and because the years and months are being passed
    to the `app_cal` controller as the strings 'YYYY' and 'MM' we'll need to convert
    the 'YYYY', 'MM' strings to timestamps, so we can query the database and work
    out whether we have an appointment for a particular day in the selected month.
    This means we'll need to use the PHP function `strtotime`.
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who are familiar with the function (or even those who just read
    the function name) will understand that `strtotime` converts a string of written
    English to a Unix timestamp, so writing "last Wednesday", for example, will make
    `strtotime` return whatever the timestamp was for last Wednesday. It's a great
    way to get a timestamp, but it does mean that you'll need to generate some sort
    of string description for the date you wish to calculate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to grab all the appointments for a particular month, which means generating
    a database query with a WHERE clause looking for "appointments greater than the
    timestamp representing the first day of a month and less than a timestamp representing
    the last day of a month". So, to get ready for that, let''s take a look at the
    following `$month_as_written` array in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You'll see that the key of each item in the array matches the format of `$month
    (MM)`. That's important, as we'll use the value in `$month` to write out in English
    the required month name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll prepend it with `''01 ''` to indicate the first of the month and append
    it with `$year`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The written string is stored in the variable `$start_date`, which is then passed
    to `strtotime()`, which in turn returns the Unix timestamp for the start of the
    month. Next, we calculate the end date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we use the CodeIgniter function `days_in_month()`; passing it `$month`
    and `$year` it will return the number of days in the month as an integer. We then
    concatenate this value with a space `' '` and the written month from the `$month_as_written`
    array before finishing with `$year`. The string is then passed to `strtotime($end_date)`,
    which gives us the Unix timestamp for the end of the month; this value is stored
    in the variable `$end_of_month`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well use the two variables `$start_of_month` and `$end_of_month` in our database
    query, asking it to return appointments after the start but before the end of
    the calculated month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we need to build an array to store the appointments and URLs. First,
    let''s declare the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll loop through the `App_model` result (contained in the variable
    `$appointments`) building the array as we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once finished, the array should take this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$data` array is passed along with `$year` and `$month` to the calendar
    library function `generate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The product of this is stored in `$data['cal_data']` and then passed to the
    view `app_cal/view`, from where it is rendered to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Building an appointment manager with Calendar Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding recipe used the CodeIgniter Calendar library to help build an
    interactive calendar. However, you could only view items in the calendar that
    were already in the database. The next logical step is building a small application
    that allows you to create items for the calendar with a form; a simple appointment
    manager would do the trick. We're basing this recipe on the previous one; however,
    you don't need to go back and work through that recipe. Everything you need is
    contained in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll need to make a database table to store our appointments. If you have
    used the previous recipe, you should have the database table already; if so, run
    the following code in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you haven''t already got the table, run this code in your
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the database is sorted, let''s look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following six files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/app_cal.php`: This contains all
    the code necessary to run the show, including the HTML 6 template for the calendar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/app_cal_model.php`: This contains
    all necessary code for interacting with the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/app_cal/view.php`: This will display
    the calendar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/app_cal/appointment.php`: This will
    display a form where you can add appointments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/app_cal/new.php`: This displays a form
    allowing the user to create a new appointment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/app_cal/delete.php`: This displays
    a delete confirmation message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to execute the following steps to create those files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the file `/path/to/codeigniter/application/controllers/app_cal.php`
    and add to it the following code (this is quite a big controller, so I''m going
    to break down the bigger functions to explain what they do):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The public function `show()`will display the Calendar on the screen; it is responsible
    for deciding what month and what year to show.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The public function `create()` will handle the creation of appointments, so
    it'll display the appointment form, validate input, and send data to the model
    for insertion into the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The public function `delete()` is responsible for removing (deleting) an appointment.
    It will load the delete confirmation form, validate the input, and pass data to
    the model for deletion from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/models/app_cal_model.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/view.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/appointment.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/delete.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `/path/to/codeigniter/application/views/app_cal/new.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the most part the functionality is broadly similar to the previous recipe,
    but there are some differences; we've added support to manage appointments. So,
    let's begin with looking at `public function view()`. You'll notice that we have
    moved some code around; the code which either grabs the dates from the uri or
    makes the date on the fly is now before the `$prefs` array — this is because of
    the `$tpl` variable. What's `$tpl` then?
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of the `$tpl` variable string, more specifically it is a calendar
    template used by the Calendar library; the template supports a tag for days—`{day}`—but
    not for the month or year. This means that we have to insert these values manually
    into the template. But to do that, we need to know the year and month values beforehand;
    that''s why the code to calculate the month and day is now moved up before the
    `$prefs` array. The template code that I use is a modified version of what is
    available from the CodeIgniter website user guide: [http://ellislab.com/codeigniter/user-guide/libraries/calendar.html](http://ellislab.com/codeigniter/user-guide/libraries/calendar.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'From here onwards it''s the same functionality as the `view()` function in
    the previous recipe: we load the Calendar library, fetch all appointments for
    the current month, and pass it to the `app_cal/view.php` view file. Let''s go
    through some of the newer functions in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The public function create()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user enters the new appointment''s details and posts the create form,
    the public function `create()` first declares the validation rules for the new
    appointment. We''ll then need to grab the year, month, and day for the specific
    appointment from either the `post` or `get` arrays. The public `create()`function
    checks for this and stores the date values in variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There are three tests here as the public function `create()` can be accessed
    in different ways. The first test looks for whether the page is accessed by someone
    by clicking on an add appointment link **+** in the calendar grid, the second
    test looks for the variables if the page has been posted, and the third (an else)
    is for when the **New Appointment** link is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we check if the page validation is passed or not; `FALSE` can mean a failure
    of validation or that `create()` is being accessed for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set some form values for CodeIgniter to render in the view and begin to
    build the variables necessary for the date dropdowns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We then show the `view` file and wait for the user to submit. Upon successful
    submission (that is, when the form passes validation), we calculate the Unix timestamp
    for the appointment date variable (day, month, and year) and package everything
    into the `$data` array, ready for insertion into the database. A successful insertion
    will redirect the user to the month and year in which their appointment sits.
  prefs: []
  type: TYPE_NORMAL
- en: The public function delete()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is quite simple; we check for the existence of an appointment ID in either
    the `get` or `post` arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We look in both `get` and `post` because the function can be accessed for the
    first time by someone clicking on a URL, and the second time by someone posting
    (when they click on the **confirm delete** button in the view).
  prefs: []
  type: TYPE_NORMAL
- en: If the form is being submitted with errors, or run for the first time, the appointment
    details are fetched from the database (having been passed `$id` from the preceding
    code).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We then fetch `app_name` and `app_date` from the database result and store them
    as items in the `$data` array for passing to the `app_cal/delete.php` view file.
    Upon a successful submit (if nothing failed the validation) the model function
    `delete()` is called, and if a delete occurred the user is redirected to the same
    month and year where their deleted appointment previously sat.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a helper to work with a person's date of birth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, you'll need an age verification script, a method to ascertain
    whether or not a user is of a certain age. Based on their age, they may be allowed,
    or disallowed, from viewing content, for example, a website that promotes adult
    products, such as alcohol or tobacco or a games site that promotes a game rated
    for certain ages. The code in this recipe helps you to ascertain a user's age,
    compares that against a minimum age requirement, and displays an HTML file accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create five files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/register.php`: This is the controller
    for our recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/helpers/dob_val_helper.php`: This file calculates
    the user''s age, compares it to the required age, and returns true or false depending
    on the result'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/register/signup.php`: This file displays
    the age verification form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/register/enter.php`: This is displayed
    if the user can enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/register/noenter.php`: This is displayed
    if the user cannot enter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `register.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the helper file, `dob_val_helper.php`, and add the following code to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file, `signup.php`, and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `enter.php` and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the view file `noenter.php` and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, we come to the controller; the controller loads the URL helper (as
    we''re using the `redirect()` function and a helper we will create called `dob_val`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We then set up form validation and set the rules for our day, month, and year
    fields from the HTML. The `register/signup.php` view file is loaded, ready for
    the user to enter their date of birth in the three form fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user will press submit, and if the submission passes for validation, the
    three form values are put into the `$dob` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We set our minimum age (the age the user must be in order to view age restricted
    content) like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we pass the `$dob` array along with the `$at_least` variable to the `dob_val`
    helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The helper calculates if the user is above or below the `$at_least` age, returning
    `TRUE` if they are above and `FALSE` if they are not. If they are, they see the
    `register/enter` view file, and if they aren't they see the `register/noenter`
    view file.
  prefs: []
  type: TYPE_NORMAL
- en: Working with fuzzy dates in CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a fuzzy date? A fuzzy date is a more familiar and general way to describe
    a data or time rather than an exact, precise time; it describes an event in a
    way that is more familiar to a reader than a precise timestamp. For example, rather
    than saying that an email was sent at 17:41, you could say it was sent "less than
    a minute ago" (assuming you sent it within the last minute) or even "a few moments
    ago". The precise time at which something occurred is considered unimportant—or
    at least unnecessary—information and it is instead replaced with a more general,
    informal, and conversational description of the date and time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/fuzzy_date.php`: This controller
    will call the `fuzzy_date_helper.php` file and pass to it some dates (as a Unix
    timestamp) for the helper to convert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/helpers/fuzzy_date_helper.php`: This helper
    will be called by the controller and will convert the dates passed to it, returning
    a written description every time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the controller file, `fuzzy_date.php`, and add the following code to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the helper file, `fuzzy_date_helper.php`, and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `fuzzy_date` controller, the controller loads in
    the constructor, which in turn loads our `fuzzy_date_helper`, this is the helper
    which will translate Unix timestamps into descriptive text for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We then load the public function `index()`, which calls `fuzzydate_helper`,
    passing to it a timestamp (at the moment, the input passed is set to be `time()
    + 30`).
  prefs: []
  type: TYPE_NORMAL
- en: Why `time() + 30`? Well, `time()` is the `php` function that returns the Unix
    timestamp for "now" (whenever "now" is for you), and the `+ 30` is 30 seconds
    added to the current timestamp value returned by `time()`, meaning "now plus 30
    seconds" (or "30 seconds in the future"). I've set it to that for the initial
    demonstration, but I will describe how this can be altered later in the description.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the controller we pass ''now plus 30 seconds'' to the helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The incoming function augment (that is, what we defined in the controller)
    is declared locally for the helper as `$time_in`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The helper takes the `$time_in` variable, looks at its value, and works out
    if the timestamp value is greater than, or less than, `$now` as defined in the
    helper as $now = time():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As ''now plus 30 seconds'' is greater than now (30 seconds more, to be precise)
    the helper goes to the `else` part of the `if` structure and then begins a series
    of comparisons, trying to find a place where the value defined in `$time_in` will
    fit. As ''now plus 30 seconds'' is less than ''now plus 60 seconds'' (30 seconds
    less, in fact), the first `if` statement is applied and the helper returns the
    first item in the `$future_descriptions` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: That would be a minute from now?
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, alter the timestamp passed to the helper in the controller;
    you could set it to `time() + 250` (which would be now plus 250 seconds). Now,
    plus 250 seconds is greater than a minute (60 seconds) but less than 5 minutes
    (300 seconds), causing the second `if` statement to apply and return the text
    'in the next few minutes'.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also pass a lower timestamp value than "now": `time() – 4000` (that
    is "now minus 4000 seconds"). Passing a lower timestamp will cause the behavior
    of the helper to change. How? Well, remember that initial `if` statement?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This time, we won't go down to the else part of it; instead, the initial `if`
    part will be triggered and the helper will begin to process times in the past.
    So, by setting the helper input to `time() - 4000` (now minus 4000 seconds, which
    is more than a minute ago, more than 5 minutes ago, and more than an hour ago
    but less than a full day ago), the helper will return the text "earlier today".
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, add many, many more detailed comparisons and descriptions;
    in fact, I encourage you to do so—go nuts!
  prefs: []
  type: TYPE_NORMAL
- en: In a real situation, you would amend the helper function call in the controller,
    removing the input of `time() +` or – `number_of_seconds` to just the timestamp
    of the thing you want to describe – be it a blog post created date, file upload
    date, appointment date…whatever…you get the idea I'm sure.
  prefs: []
  type: TYPE_NORMAL
