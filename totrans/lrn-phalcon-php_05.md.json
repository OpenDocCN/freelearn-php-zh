["```php\n$data = [\n  'name' => 'John Doe',\n  'age' => 50\n];\n\necho json_encode($data);\n```", "```php\n    GET /getAllArticles\n    GET /getArticle\n    POST /newArticle\n    ```", "```php\n    GET /articles (Retrieve all articles)\n    GET /article/12 (Retrieve article with id 12)\n    POST /article (Create a new article)\n    PUT /article/12 (Update article with id 12)\n    DELETE /article/12 (Delete article with id 12)\n    ```", "```php\n    GET /search?title=Learning+Phalcon\n    ```", "```php\n    https://learning-phalcon.localhost/api/v1\n    https://api.learning-phalcon.localhost/v1/\n\n    ```", "```php\n    GET /articles?author=John\n    GET /articles?author=John&sort=created_at\n    ```", "```php\n    $ sudo mkdir /etc/nginx/ssl\n\n    ```", "```php\n    $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt\n\n    ```", "```php\n    server {\n      listen 80;\n      listen 443 ssl;\n\n     ssl_certificate /etc/nginx/ssl/nginx.crt;\n     ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n      #....rest of the code\n    }\n    ```", "```php\n    $ sudo service nginx reload\n\n    ```", "```php\n    <?php\n    $versions = [\n      'v1' => '/api/v1',\n      'v2' => '/api/v2'\n    ];\n    $router->removeExtraSlashes(true);\n\n    // Articles group\n    $articles = new \\Phalcon\\Mvc\\Router\\Group(array(\n      'module' => 'api',\n      'controller' => 'articles'\n    ));\n\n    $articles->setPrefix($versions['v1'].'/articles');\n    $articles->addGet('', array(\n      'module' => 'api',\n      'controller' => 'articles',\n      'action' => 'list'\n    ));\n\n    $router->mount($articles);\n    ```", "```php\n    <?php\n\n    $di['router'] = function () use ($default_module, $modules, $di, $config) {\n\n      $router = new \\Phalcon\\Mvc\\Router(false);\n      $router->clear();\n\n      $moduleRouting = __DIR__.'/../modules/'.ucfirst($default_module).'/Config/routing.php';\n\n      if (file_exists($moduleRouting) && is_file($moduleRouting)) {\n        include $moduleRouting;\n      } else {\n        $router->add('#^/(|/)$#', array(\n          'module' => $default_module,\n          'controller' => 'index',\n          'action' => 'index',\n        ));\n\n        $router->add('#^/([a-zA-Z0-9\\_]+)[/]{0,1}$#', array(\n          'module' => $default_module,\n          'controller' => 1,\n        ));\n\n        $router->add('#^/{0,1}([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#', array(\n          'module' => $default_module,\n          'controller' => 1,\n          'action' => 2,\n          'params' => 3,\n        ));\n      }\n\n      foreach ($modules as $moduleName => $module) {\n        if ($default_module == $moduleName) {\n          continue;\n        }\n\n        $moduleRouting = __DIR__.'/../modules/'.ucfirst($moduleName).'/Config/routing.php';\n\n        if (file_exists($moduleRouting) && is_file($moduleRouting)) {\n          include $moduleRouting;\n        }\n      }\n\n      return $router;\n    };\n    ```", "```php\n    <?php\n    $router->add('/', array(\n      'module' => 'frontend',\n      'controller' => 'index',\n      'action' => 'index'\n    ));\n\n    $router->add('#^/articles[/]{0,1}$#', array(\n      'module' => 'frontend',\n      'controller' => 'article',\n      'action' => 'list'\n    ));\n\n    $router->add('#^/articles/([a-zA-Z0-9\\-]+)[/]{0,1}$#', array(\n      'module' => 'frontend',\n      'controller' => 'article',\n      'action' => 'read',\n      'slug' => 1\n    ));\n    ```", "```php\n    <?php\n    namespace App\\Api\\Controllers;\n\n    class ArticlesController extends BaseController {\n      public function listAction() {\n        $this->view->disable();\n        echo __METHOD__;\n      }\n    }\n    ```", "```php\n    <?php\n    namespace App\\Api\\Controllers;\n\n    use \\Phalcon\\Http\\Response;\n\n    class BaseController extends \\Phalcon\\Mvc\\Controller {\n      protected $statusCode = 200;\n\n      protected $headers    = [\n        'Access-Control-Allow-Origin' => '*',\n        'Access-Control-Allow-Headers' => 'X-Requested-With, content-type, access-control-allow-origin, accept, apikey',\n        'Access-Control-Allow-Methods' => 'GET, PUT, POST, DELETE, OPTIONS','Access-Control-Allow-Credentials' => 'true'\n      ];\n\n      protected $payload = '';\n\n      protected $format = 'json';\n\n      protected function initResponse($status = 200) {\n        $this->statusCode = $status;\n        $this->headers    = array();\n        $this->payload    = '';\n      }\n\n      protected function _getContent($payload) {\n        return json_encode($payload);\n      }\n\n      protected function output() {\n        $payload     = $this->getPayload();\n        $status      = $this->getStatusCode();\n        $description = $this->getHttpCodeDescription($status);\n        $headers     = $this->getHeaders();\n\n        $response = (new Response())\n          ->setStatusCode($status, $description)\n          ->setContentType('application/json', 'UTF-8')\n          ->setContent(json_encode($payload, JSON_PRETTY_PRINT))\n        ;\n\n        foreach ($headers as $key => $value) {\n          $response->setHeader($key, $value);\n        }\n\n        $this->view->disable();\n\n        return $response;\n      }\n\n      protected function render($st_output, $statusCode = 200){\n        $this->initResponse();\n\n        $this->setStatusCode($statusCode);\n        $this->setPayload($st_output);\n\n        return $this->output();\n      }\n    }\n    ```", "```php\n    public function listAction() {\n      try {\n        $st_output = [\n          'method' => __METHOD__\n        ];\n\n        return $this->render($st_output);\n      } catch (\\Exception $e) {\n        return $this->render($e->getMessage(), 500);\n      }\n    }\n    ```", "```php\npublic function getTranslations($arguments = null) {\n  return $this->getRelated('translations', $arguments);\n}\n\npublic function getCategories($arguments = null) {\n  return $this->getRelated('categories', $arguments);\n}\n\npublic function getHashtags($arguments = null) {\n  return $this->getRelated('hashtags', $arguments);\n}\n\npublic function getUser($arguments = null) {\n  return $this->getRelated('user', $arguments);\n}\n\npublic function toArray($columns = null) {\n  $output = parent::toArray($columns);\n\n  $output['article_translations'] = $this->getTranslations([\n    'columns' => [\n      'article_translation_short_title',\n      'article_translation_long_title',\n      'article_translation_slug',\n      'article_translation_description',\n      'article_translation_lang'\n    ]\n  ])->toArray();\n\n  $output['article_categories'] = $this->getCategories()->filter(function($category){\n    return $category->toArray(['id','category_translations']);\n  });\n\n  $output['article_hashtags'] = $this->getHashtags([\n    'columns' => [\n      'id',\n      'hashtag_name'\n    ]\n  ])->filter(function($hashtag){\n    return $hashtag->toArray();\n  });\n\n  $output['article_author'] = $this->getUser([\n    'columns' => [\n      'user_first_name',\n      'user_last_name',\n      'user_email'\n    ]\n  ])->toArray();\n\n  return $output;\n}\n```", "```php\npublic function getTranslations($arguments = null) {\n  return $this->getRelated('translations', $arguments);\n}\n\npublic function toArray($columns = null) {\n  $output = parent::toArray($columns);\n\n  $output['category_translations'] = $this->getTranslations([\n    'columns' => [\n      'category_translation_name',\n      'category_translation_slug',\n      'category_translation_lang'\n    ]\n  ])->toArray();\n\n  return $output;\n}\n```", "```php\npublic function restGet(array $parameters = null, array $options = null, $page = 1, $limit = 10) {\n  $articles = $this->find($parameters);\n\n  $result = $articles->filter(function($article){\n    return $article->toArray();\n  });\n\n  $paginator = new \\Phalcon\\Paginator\\Adapter\\NativeArray([\n    'data'  => $result,\n    'limit' => $limit,\n    'page'  => $page\n  ]);\n\n  $data = $paginator->getPaginate();\n\n  if ($data->total_items > 0) {\n    return $data;\n  }\n\n  if (isset($parameters['bind']['id'])) {\n    throw new \\Exception('Not Found', 404);\n  } else {\n    throw new \\Exception('No Content', 204);\n  }\n}\n```", "```php\npublic function listAction() {\n  try {\n    $manager = $this->getDI()->get('core_article_manager');\n    $page    = $this->request->getQuery('p', 'int', 0);\n\n    $st_output = $manager->restGet([], [], $page);\n\n    return $this->render($st_output);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage()\n    ], $e->getCode());\n  }\n}\n```", "```php\n$ curl -i -X GET \\\n 'http://learning-phalcon.localhost/api/v1/articles'\n\n```", "```php\n$.get('http://learning-phalcon.localhost/api/v1/articles', function(data){\n    // render a list with articles\n});\n```", "```php\n    $articles->addGet('/{id}', array(\n      'module' => 'api',\n      'controller' => 'articles',\n      'action' => 'get'\n    ));\n    ```", "```php\n    public function getAction($id) {\n      try {\n        $manager = $this->getDI()->get('core_article_manager');\n\n        $st_output = $manager->restGet([\n          'id = :id:',\n          'bind' => [\n            'id' => $id\n          ],\n        ]);\n\n        return $this->render($st_output);\n      } catch (\\Exception $e) {\n        return $this->render([\n          'code' => $e->getCode(),\n          'message' => $e->getMessage()\n        ], $e->getCode());\n      }\n    }\n    ```", "```php\n$ curl -i -X GET  'http://learning-phalcon.localhost/api/v1/articles/6'\n\n```", "```php\n    $articles->addPut('/{id}', array(\n        'module' => 'api',\n        'controller' => 'articles',\n        'action' => 'update'\n    ));\n    ```", "```php\n    public function updateAction($id) {\n      try {\n        $manager = $this->getDI()->get('core_article_manager');\n\n        if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n          $data = $this->request->getJsonRawBody(true);\n        } else {\n          $data = [$this->request->getPut()];\n        }\n\n        if (count($data[0]) == 0) {\n          throw new \\Exception('Please provide data', 400);\n        }\n\n        $result = $manager->restUpdate($id, $data);\n\n        return $this->render($result);\n      } catch (\\Exception $e) {\n        return $this->render([\n          'code' => $e->getCode(),\n          'message' => $e->getMessage()\n        ], $e->getCode());\n      }\n    }\n    ```", "```php\n    var data = [{ \"article_is_published\" : 1 }];\n    $.ajax({\n      type: \"PUT\",\n      url: \"/api/v1/articles/6\",\n      processData: false,\n      contentType: 'application/json',\n      data: JSON.stringify(data),\n      success: function(response) {\n        console.log(response);\n      }\n    });\n    ```", "```php\npublic function restUpdate($id, $data) {\n  $article = Article::findFirstById((int)$id);\n\n  if (!$article) {\n    throw new \\Exception('Not found', 404);\n  }\n\n  $article->setArticleIsPublished($data[0]['article_is_published']);\n\n  if (false === $article->update()) {\n    foreach ($article->getMessages() as $message) {\n      throw new \\Exception($message->getMessage(), 500);\n    }\n  }\n  return $article->toArray();\n}\n```", "```php\n$ curl -i -X PUT -H \"Content-Type:application/json\" -d '[{\"article_is_pu blished\": 0}]' 'http://learning-phalcon.localhost/api/v1/articles/6'\n\n```", "```php\n    $articles->addDelete('/{id}', array(\n      'module' => 'api',\n      'controller' => 'articles',\n      'action' => 'delete'\n    ));\n    ```", "```php\n    public function deleteAction($id) {\n      try {\n        $manager = $this->getDI()->get('core_article_manager');\n\n        $st_output = $manager->restDelete($id);\n\n        return $this->render($st_output);\n      } catch (\\Exception $e) {\n        return $this->render([\n          'code' => $e->getCode(),\n          'message' => $e->getMessage()\n        ], $e->getCode());\n      }\n    }\n    ```", "```php\n    public function restDelete($id) {\n      $article = Article::findFirstById((int)$id);\n\n      if (!$article) {\n        throw new \\Exception('Not found', 404);\n      }\n\n      if (false === $article->delete()) {\n        foreach ($article->getMessages() as $message) {\n          throw new \\Exception($message->getMessage(), 500);\n        }\n      }\n\n      return true;\n    }\n    ```", "```php\n$this->hasMany('id', 'App\\Core\\Models\\ArticleTranslation', 'article_translation_article_id', array(\n  'alias' => 'translations',\n  'foreignKey' => array(\n    'action' => \\Phalcon\\Mvc\\Model\\Relation::ACTION_CASCADE\n  )\n));\n```", "```php\n$ curl -i -X DELETE 'http://learning-phalcon.localhost/api/v1/articles/1'\n\n```", "```php\n    $articles->addPost('', array(\n      'module' => 'api',\n      'controller' => 'articles',\n      'action' => 'create'\n    ));\n    ```", "```php\n    public function createAction() {\n      try {\n        $manager   = $this->getDI()->get('core_article_manager');\n\n        if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n          $data = $this->request->getJsonRawBody(true);\n        } else {\n          $data = $this->request->getPost();\n        }\n\n        if (count($data) == 0) {\n          throw new \\Exception('Please provide data', 400);\n        }\n\n        $st_output = $manager->restCreate($data);\n\n        return $this->render($st_output);\n      } catch (\\Exception $e) {\n        return $this->render([\n          'code' => $e->getCode(),\n          'message' => $e->getMessage()\n        ], $e->getCode());\n      }\n    }\n    ```", "```php\n    public function restCreate($data) {\n      $result = $this->create($data);\n\n      return $result->toArray();\n    }\n\n    public function create($input_data) {\n      $default_data = array(\n        'article_user_id' => 1,\n        'article_is_published' => 0,\n        'translations' => array(\n          'en' => array(\n            'article_translation_short_title' => 'Short title',\n            'article_translation_long_title' => 'Long title',\n            'article_translation_description' => 'Description',\n            'article_translation_slug' => '',\n            'article_translation_lang' => 'en',\n          )\n        ),\n        'categories' => array(),\n        'hashtags' => array(),\n      );\n\n      $data = array_merge($default_data, $input_data);\n\n      $article = new Article();\n      $article->setArticleIsPublished($data['article_is_published']);\n\n      $articleTranslations = array();\n\n      foreach ($data['translations'] as $lang => $translation){\n        $tmp = new ArticleTranslation();\n        $tmp->assign($translation);\n        array_push($articleTranslations, $tmp);\n      }\n\n      if (count($data['categories']) > 0) {\n        $article->categories = Category::find([\n          \"id IN (\".implode(',', $data['categories']).\")\"\n        ])->filter(function($category){\n          return $category;\n        });\n      }\n\n      if (count($data['hashtags']) > 0) {\n        $article->hashtags = Hashtag::find([\n          \"id IN (\".implode(',', $data['hashtags']).\")\"\n        ])->filter(function($hashtag){\n          return $hashtag;\n        });\n      }\n\n      $user = User::findFirstById((int) $data['article_user_id']);\n\n      if (!$user) {\n        throw new \\Exception('User not found', 404);\n      }\n\n      $article->setArticleUserId($data['article_user_id']);\n\n      $article->translations = $articleTranslations;\n\n      return $this->save($article, 'create');\n    }\n    ```", "```php\n$ curl -i -X POST -H \"Content-Type:application/json\" -d '{\"article_user_id\":12,\"article_is_published\":1,\"translations\":{\"en\":{\"article_translation_short_title\":\"Test API create\",\"article_translation_long_title\":\"Test API create\",\"article_translation_description\":\"Test API create description\",\"article_translation_slug\":\"test-api-create\",\"article_translation_lang\":\"en\"}},\"categories\":[9,16],\"hashtags\":[1]}' 'http://learning-phalcon.localhost/api/v1/articles'\n\n```", "```php\n    'apiKeys' => array(\n      '6y825Oei113X3vbz78Ck7Fh7k3xF68Uc0lki41GKs2Z73032T4z8m1I81648JcrY'\n    )\n    ```", "```php\n    <?php\n    namespace App\\Core\\Listeners;\n\n    class ApiListener extends \\Phalcon\\Mvc\\User\\Plugin{\n      public function beforeExecuteRoute($event, $dispatcher) {\n        $hasValidKey = $this->checkForValidApiKey();\n\n        if (false === $hasValidKey) {\n          return false;\n        }\n      }\n\n      private function checkForValidApiKey() {\n        $apiKey = $this->request->getHeader('APIKEY');\n\n        if (!in_array($apiKey, $this->config->apiKeys->toArray())) {\n          $this->response->setStatusCode(403, 'Forbidden');\n          $this->response->sendHeaders();\n          $this->response->send();\n          $this->view->disable();\n\n          return false;\n        }\n\n        return true;\n      }\n    }\n    ```", "```php\n    $di['dispatcher'] = function () use ($di) {\n      $eventsManager = $di->getShared('eventsManager');\n\n      $apiListener = new \\App\\Core\\Listeners\\ApiListener();\n      $eventsManager->attach('dispatch', $apiListener);\n\n      $dispatcher = new Phalcon\\Mvc\\Dispatcher();\n      $dispatcher->setEventsManager($eventsManager);\n      $dispatcher->setDefaultNamespace(\"App\\Api\\Controllers\");\n\n      return $dispatcher;\n    };\n    ```", "```php\n$ curl -i -X GET 'http://learning-phalcon.localhost/api/v1/articles/6'\n\n```", "```php\n$ curl -i -X GET -H \"APIKEY:6y825Oei113X3vbz78Ck7Fh7k3xF68Uc0lki41GKs2Z73032T4z8m1I81648JcrY\" 'http://learning-phalcon.localhost/api/v1/articles/6'\n\n```", "```php\n    private function checkIpRateLimit() {\n      $ip   = $this->request->getClientAddress();\n      $time = time();\n      $key  = $ip.':'.$time;\n\n      $redis   = $this->getDI()->get('redis');\n      $current = $redis->get($key);\n\n      if ($current != null && $current > 5) {\n\n        $this->response->setStatusCode(429, 'Too Many Requests');\n        $this->response->sendHeaders();\n        $this->response->send();\n        $this->view->disable();\n\n        return false;\n      } else {\n        $redis->multi();\n        $redis->incr($key, 1);\n        $redis->expire($key, 5);\n        $redis->exec();\n      }\n\n      return true;\n    }\n    ```", "```php\n    public function beforeExecuteRoute($event, $dispatcher) {\n      $hasValidKey = $this->checkForValidApiKey();\n      $ipRateLimit = $this->checkIpRateLimit();\n\n      if (false === $hasValidKey || false === $ipRateLimit) {\n        return false;\n      }\n    }\n    ```", "```php\n    private function resourceWithToken() {\n      if (in_array($this->dispatcher->getActionName(), ['update','delete','create'])) {\n        if ($this->request->getHeader('TOKEN') != 'mySecretToken') {\n          $this->response->setStatusCode(405, 'Method Not Allowed');\n          $this->response->sendHeaders();\n          $this->response->send();\n          $this->view->disable();\n\n          return false;     }\n\n        return true;\n      }\n    }\n    ```", "```php\n    if (false === $this->resourceWithToken()) {\n      return false;\n    }\n    ```", "```php\n$ curl -i -X PUT    -H \"Content-Type:application/json\"    -H \"APIKEY:6y825Oei113X3vbz8Ck7Fh7k3xF68Uc0lki41GKs2Z73032T4z8m1I81648JcrY\"    -H \"TOKEN:mySecretToken\"    -d '{\"article_user_id\":12,\"article_is_published\":1,\"translations\":{\"en\":{\"article_translation_short_title\":\"Test API create\",\"article_translation_long_title\":\"Test API create\",\"article_translation_description\":\"Test API create description\",\"article_translation_slug\":\"test-api-create\",\"article_translation_lang\":\"en\"}},\"categories\":[9,16],\"hashtags\":[1]}'  'http://learning-phalcon.localhost/api/v1/articles/6'\n\n```", "```php\n$ php composer.phar require crada/php-apidoc\n$ php composer.phar update\n\n```", "```php\n    <?php\n    use Crada\\Apidoc\\Builder;\n    use Crada\\Apidoc\\Exception;\n\n    class ApidocTask extends BaseTask {\n      /**\n      * @Description(\"Build API Documentation\")\n      * @Example(\"php apps/cli.php apidoc generate\")\n      */\n      public function generateAction($params = null) {\n        $classes = [\n          'App\\Api\\Controllers\\ArticlesController'\n        ];\n\n        try {\n          $builder = new Builder($classes, __DIR__.'/../../docs/api', 'index.html');\n          $builder->generate();\n          exec(\"ln -s \".__DIR__.\"/../../docs/api \".__DIR__.\"/../../public/apidoc\");\n          $this->consoleLog('ok! : '.__DIR__.'/../../docs/api/index.html');\n\n        } catch (Exception $e) {\n          $this->consoleLog($e->getMessage(), 'red');\n        }\n      }\n    }\n    ```", "```php\n    /**\n      * @ApiDescription(section=\"Articles\", description=\"Retrieve a list of articles\")\n      * @ApiMethod(type=\"get\")\n      * @ApiRoute(name=\"/articles\")\n      * @ApiParams(name=\"p\", type=\"integer\", nullable=true, description=\"Page number\")\n      * @ApiReturnHeaders(sample=\"HTTP 200 OK\")\n      * @ApiReturn(type=\"object\", sample=\"{\n      *  'items': [{\n      *    'id':'int',\n      *    'article_user_id':'int',\n      *    'article_is_published':'int',\n      *    'article_created_at':'string',\n      *    'article_updated_at':'string',\n      *    'article_translations':[{\n      *      'article_translation_short_title':'string',\n      *      'article_translation_long_title':'string',\n      *      'article_translation_slug':'string',\n      *      'article_translation_description':'string',\n      *      'article_translation_lang':'string'\n      *    }],\n      *    'article_categories':[{\n      *      'id':'int',\n      *      'category_translations':[{\n      *        'category_translation_name':'string',\n      *        'category_translation_slug':'string',\n      *        'category_translation_lang':'string'\n      *      }]\n      *    }],\n      *    'article_hashtags':[{\n      *      'id':'int',\n      *      'hashtag_name':'string'\n      *    }],\n      *    'article_author':{\n      *      'user_first_name':'string',\n      *      'user_last_name':'string',\n      *      'user_email':'string'\n      *    }\n      *  }],\n      *  'before':'int',\n      *  'first':'int',\n      *  'next':'int',\n      *  'last':'int',\n      *  'current':'int',\n      *  'total_pages':'int',\n      *  'total_items':'int',\n      *}\")\n      */\n    public function listAction() {\n\n    }\n    ```", "```php\n$ php modules/cli.php apidoc generate\n\n```"]