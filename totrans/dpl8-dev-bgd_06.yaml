- en: Chapter 6. Enhancing the Content Author's User Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In this chapter, we are going to explore the built-in WYSIWYG editor that
    is in the Drupal 8 core, and explore the concepts of CKEditor plugins, Drupal
    Plugin API, and Block API.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the built-in WYSIWYG editor for Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How inline editing works and how to get the best out of it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make changes and save them through configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a custom block via the new Block API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to include default configuration in our custom block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick introduction to CKEditor in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Drupal 8 is finally shipping with a default WYSIWYG editor: CKEditor. CKEditor
    is an open source text editor that aims to bring word processing features to web
    pages. In previous versions of Drupal, several modules tried to fill this gap,
    but their configuration at most times was a bit tricky as they were relying on
    external JavaScript libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bringing CKEditor''s capabilities directly in core, Drupal 8 can provide a
    richer authoring experience to content editors. Users are given a drag-and-drop
    interface to customize available functionality and export configurations to share
    with other systems. Developers are given a unified way of accessing properties,
    adding plugins, and extending the editor''s functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A quick introduction to CKEditor in Drupal 8](img/4659_06_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring CKEditor profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CKEditor profiles would not be much without the ability of being customized
    to the editor's liking. Now we are going to customize the basic HTML profile.
    Log in to your Drupal 8 website and you should see the new admin toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - adding some buttons to the basic HTML profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click on **Configuration** and then on **Text formats and editors**:![Time for
    action - adding some buttons to the basic HTML profile](img/4659_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Text formats and editor** screen, click on the **Configure** button
    next to the **Basic HTML** profile:![Time for action - adding some buttons to
    the basic HTML profile](img/4659_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to **TOOLBAR CONFIGURATION**, and drag the image icon out of the
    toolbar into the pool of other elements to remove it from the configuration. Note
    that the image and the configuration are no longer part of the page:![Time for
    action - adding some buttons to the basic HTML profile](img/4659_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save configuration** at the very bottom of the page:![Time for action
    - adding some buttons to the basic HTML profile](img/4659_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! If you visit a content page form and choose the **Basic HTML** profile,
    then the image button will not be there anymore:![Time for action - adding some
    buttons to the basic HTML profile](img/4659_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following this procedure, we customized the existing profiles by removing the
    upload image button from the CKEditor profile.
  prefs: []
  type: TYPE_NORMAL
- en: Configurations are exportable in D8 and can be imported to other environments.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - exporting CKEditor configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click on **Configuration**. Then click on **Configuration** synchronization
    and select the **Export** tab. Click on **Single item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Configuration type**, choose **Text Editor**, and on **Configuration
    name**, choose **Basic HTML**:![Time for action - exporting CKEditor configuration](img/4659_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the configuration and import it into another environment by clicking on
    **Configuration**. Then click on **Configuration synchronization** and select
    the **Import** tab. Click on **Single item**:![Time for action - exporting CKEditor
    configuration](img/4659_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have configured an existing profile, removed some fields, and learned how
    to export that configuration and import it into another environment.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new CKEditor profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most often, built-in profiles cover a website's needs. The defaults, however,
    do not provide a way for anonymous users to have a smooth editing experience when
    inputting text (for example, comments). To provide that functionality, we need
    to create a new profile and assign it to the anonymous user.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - creating a text-only control profile for anonymous users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the admin toolbar, go to **Configuration** | **Text formats and editors**
    and choose **Add text format**:![Time for action - creating a text-only control
    profile for anonymous users](img/4659_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the name, enter `Text only controls`. Tick on **Anonymous user** and choose
    **CKEditor** in the **Text editor** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Underline** button and keep **Bold, Italic and Ordered/Unordered**
    lists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the following filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Limit allowed HTML tags and correct faulty HTML**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convert line breaks into HTML (i.e. <br> and <p>)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correct faulty and chopped off HTML**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the configuration:![Time for action - creating a text-only control profile
    for anonymous users](img/4659_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Text formats and editors** configuration page should contain the newly
    created format. Move the new format above the **Restricted HTML** format, which
    is an alternative provided by Drupal for anonymous users skipping the editor altogether:![Time
    for action - creating a text-only control profile for anonymous users](img/4659_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! If you visit a page that allows comments from anonymous users, the
    newly created format will be used to capture those comments:![Time for action
    - creating a text-only control profile for anonymous users](img/4659_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just added a new CKEditor profile that targets anonymous users on your website,
    giving them the ability to input rich text and lists.
  prefs: []
  type: TYPE_NORMAL
- en: Classic editor and inline editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The examples we have seen so far used CKEditor at the backend. This is based
    on an iframe being added to the page, and they do not share the CSS styles as
    they appear on the frontend. You can, however, customize the CSS of the editor
    by including the following in your `.info.yml` theme file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An exciting new possibility in Drupal 8 is the use of inline editing. This is
    used for quick in-place edits and is used without an iframe. Inline editing gives
    editors the ability to quickly edit a piece of content without the need to edit
    the full node. CSS styles are inherited from the theme, leading to a real WYSISYG
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using inline editing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure that the **Quick edit** module is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the pencil icon in the top left of the page and select **Quick edit**:![Time
    for action – using inline editing](img/4659_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new editor instance opens at the top of the content area, and you can start
    editing text straightaway:![Time for action – using inline editing](img/4659_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! You can now use this instead of visiting the edit form to quickly
    edit things on the fly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding widgets to CKEditor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CKEditor comes preconfigured with a series of buttons that can be added to a
    profile. As a programmer, you can extend CKEditor and add your own buttons. This
    can happen by adding plugins or widgets. The difference between the two is that
    widgets are plugins that group the behavior of more than one component. An example
    of a widget is an image where the image itself, alternative text, and a caption
    form an item and they can be moved around the WYSIWYG area as one item.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use additional widgets, you will need to do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Download or create a plugin for CKEditor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell the Drupal core that a new CKEditor plugin should be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To learn more about the CKEditor side of things, read the documentation on adding
    CKEditor plugins or CKEditor widgets. Plugins and widgets for CKEditor can be
    downloaded from [http://ckeditor.com/addons/plugins/all](http://ckeditor.com/addons/plugins/all).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a CKEditor plugin, you need to tell Drupal core that a new CKEditor
    plugin needs to be loaded via `\Drupal\ckeditor\CKEditorPluginInterface`. This
    will create a 1:1 relationship between the CKEditor JavaScript plugin and the
    Drupal CKEditor Plugin plugin (a confusing name, nonetheless). A default implementation
    is provided via `Drupal\ckeditor\CKEditorPluginBase`, so not every method needs
    to be implemented by CKEditor plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the following interfaces can be implemented on the Drupal side
    to extend the plugin functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Drupal\ckeditor\CKEditorPluginButtonsInterface` allows a CKEditor plugin
    to define which buttons it provides so that users can configure a CKEditor toolbar
    instance via the drag-and-drop-based UI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Drupal\ckeditor\CKEditorPluginContextualInterface` allows a CKEditor plugin
    to enable itself automatically based on the context: if some other CKEditor plugin''s
    button is enabled, if some filter is enabled, if some CKEditor plugin''s setting
    has a certain value, or a combination of all of these'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Drupal\ckeditor\CKEditorPluginConfigurableInterface` allows a CKEditor plugin
    to define a settings form to configure any settings that this CKEditor plugin
    may have'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Drupal\ckeditor\CKEditorPluginCssInterface` allows a CKEditor plugin to define
    additional CSS to be loaded in iframe instances of CKEditor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To do that, you will need to create a new module utilizing the Drupal Plugin
    API. Even though CKEditor and Drupal share the notation of plugins, note that
    these are very different things. As per the Drupal Plugin API, plugin implementations
    must be annotated with the `@CKEditorPlugin` annotation so that they can be discovered.
  prefs: []
  type: TYPE_NORMAL
- en: When creating CKEditor plugins, keep in mind that you are creating functionality
    intended for content editors, so the user interface and user experience should
    be excellent. Have a look at `ckeditor.drupalimage.admin.js` and `ckeditor.stylescombo.admin.js`
    for examples of good implementations (see also [https://www.drupal.org/node/2567801](https://www.drupal.org/node/2567801)).
  prefs: []
  type: TYPE_NORMAL
- en: We will extensively make use of the Drupal Plugin API in the next section of
    this chapter when adding a new block, but Drupal plugins are essentially swappable
    pieces of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero - create a CKEditor plugin and allow Drupal to discover it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To declare a Drupal instance of a CKEditor plugin, you need to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your module structure as follows. Within `js`, the CKEditor plugin is
    placed, and the Drupal plugin is placed within `lib`:![Have a go hero - create
    a CKEditor plugin and allow Drupal to discover it](img/4659_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that the CKEditor plugin (named `plugin.js` within the `js` directory)
    is namespaced as Drupal expects it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file that will contain the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extend the `CKEditorPluginBase` class within that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For further information, you can visit the documentation for the `Drupal\ckeditor`
    namespace at [https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x](https://api.drupal.org/api/drupal/namespace/Drupal%21ckeditor/8.2.x).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Block API for Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Drupal 7, adding a block was just a matter of implementing a hook such as
    `hook_block_info()` and a few more in a custom module. The block then was available
    in the user interface for you to place wherever you wanted.
  prefs: []
  type: TYPE_NORMAL
- en: In Drupal 8, custom blocks provided by a module implement the Block Plugin API,
    which is a subset of the more generic Plugin API. What used to be info hooks that
    returned arrays for block discovery is now composed of Annotations and the use
    of PSR-0, so Drupal can both find and understand your blocks. Callback functions
    that returned the content of your block are now methods on `Drupal\block\BlockPluginInterface`
    that we can override as needed in our custom block code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a block in Drupal 8 requires creating a plugin according to the Plugin
    API and annotation-based plugin discovery. Throughout the book, we have seen both
    of these at play when creating field widgets or CKEditor profiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'A workflow of creating a block can be visualized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a block plugin using annotations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Drupal\Core\Block\BlockBase` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the `Drupal\Core\Block\BlockPluginInterface` class methods according
    to the use case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a custom block named `author_tool`, a PSR-4-compliant structure is `author_tool/src/Plugin/Block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to the Block API for Drupal 8](img/4659_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – creating a block to aid the authoring experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a custom block that will be available to authenticated users
    to create new recipes when visiting a recipe page. Our module will be called `author_tool`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a structure similar to what we saw in the last screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `author_tool.info.yml` file and create a dependency of your module
    with the block system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extend the `BlockBase` class with your own implementation, `AuthorToolBlock`,
    and place the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within your class, implement the `BlockPluginInterface::build` method like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The build method is returning a renderable array or content like `hook_block_view`
    did for Drupal 7\. Render arrays are the preferred way in Drupal 8\. The complete
    implementation is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your module is ready. Go to **Extend**, locate it, and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now it's time to place your block on the recipe pages for authenticated users
    to see. From the main menu, select **Structure** | **Block Layout**, scroll down
    to **Sidebar first**, and click on the **Place block** button:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate your block and click on **Place block**:![Time for action – creating
    a block to aid the authoring experience](img/4659_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your block to display only recipe content types:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your block to display for authenticated users only:![Time for action
    – creating a block to aid the authoring experience](img/4659_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the image, and that's it! Now visit a recipe page to verify that it is
    there:![Time for action – creating a block to aid the authoring experience](img/4659_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this is a very simple example of creating a block through code, the
    simplicity of creating a block through the newly arrived Block API in Drupal 8
    is clear. You created a block to aid with the author UI and learned the basics
    of extending the Plugin API to add custom functionality to the system.
  prefs: []
  type: TYPE_NORMAL
- en: To explore further, have a look at [https://api.drupal.org/api/drupal](https://api.drupal.org/api/drupal)
    for the BlockBase class to get a sense of all the methods there that can be added.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – including default configuration in your module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have placed your block in your theme, you may wish to include that
    configuration when the module installs. By including a default configuration at
    installation time, you are able to provide a sensible default for placing that
    block. Also, within your deployment mechanism, all you have to worry about is
    installing the module, and the rest of the configuration will be applied at that
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: Export the configuration by going to **Structure** | **Configuration** | **Configuration
    synchronization** | **Export** | **Single item**, and choose **Block** and **Author
    tool block**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you copy and paste everything but the `uuid` line (shown in the following
    screenshot):![Time for action – including default configuration in your module](img/4659_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within your module, create the following structure and place the contents in
    a file named `block.block.authortoolblock.yml`:![Time for action – including default
    configuration in your module](img/4659_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it again! Try uninstalling and installing the module again. The block
    should be placed automatically at exactly the same position with the same visibility
    rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to enhance the author UI by installing, configuring,
    and reusing that configuration of the built-in WYSIWYG editor, which is a part
    of Drupal 8 core now. You explored both the backend editor instance as well as
    the inline editing capabilities, and had a go of adding your own CKEditor plugin.
    You also learned how to use the new Block API, add a new block to the system through
    a custom module, extend default methods, and provide default configuration when
    installing modules.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to see how to work with media and integrate
    them into our new Drupal 8 site.
  prefs: []
  type: TYPE_NORMAL
