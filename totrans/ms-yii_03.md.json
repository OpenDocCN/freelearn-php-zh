["```php\n$connection = new \\yii\\db\\Connection([\n    'dsn' => 'sqlite:/' . \\Yii::getAlias('@app') . '/runtime/db.sqlite',\n    'charset' => 'utf8'\n]);\n\n$connection->open();\n```", "```php\n<?php return [\n    'dsn' => 'sqlite:/' . \\Yii::getAlias('@app') . '/runtime/db.sqlite',\n    'class' => 'yii\\db\\Connection',\n    'charset' => 'utf8'\n];\n```", "```php\n\\Yii::$app->db;\n```", "```php\n'components' => [\n    // [...]\n    'db' => [\n        'class' => 'yii\\db\\Connection',\n        'driverName' => 'mysql', 'dsn' => 'odbc:Driver={MySQL};Server=localhost;Database=test',\n        'username' => 'username',\n      'password' => 'password',\n  ]\n]\n```", "```php\n'components' => [\n  //[...\n  'db' => [\n        'dsn' => 'sqlite:/' . \\Yii::getAlias('@app') . '/runtime/db.sqlite',\n        'class' => 'yii\\db\\Connection',\n        'charset' => 'utf8',\n 'enableQueryCache' => true,\n 'queryCache' => 'filecache',\n 'queryCacheDuration' => 60\n    ],\n    'filecache' => [\n        'class' => 'yii\\caching\\FileCache',\n    ],\n]\n```", "```php\n'components' => [\n  // [...]\n  'db' => [\n        'dsn' => 'sqlite:/' . \\Yii::getAlias('@app') . '/runtime/db.sqlite',\n        'class' => 'yii\\db\\Connection',\n        'charset' => 'utf8',\n 'enableSchemaCache' => true,\n 'schemaCache' => 'filecache',\n 'schemaCacheDuration' => 3600\n    ],\n    'filecache' => [\n        'class' => 'yii\\caching\\FileCache',\n    ],\n]\n```", "```php\nSchema::<CONSTANT>\n```", "```php\nSchema::TYPE_INTEGER\n```", "```php\n./yii migrate/create init\n\n```", "```php\n<?php\n\nuse yii\\db\\Schema;\nuse yii\\db\\Migration;\n\nclass m150523_194158_init extends Migration\n{\n    public function up() {}\n\n    public function down()\n    {\n        echo \"m150523_194158_init cannot be reverted.\\n\";\n        return false;\n    }\n\n    /*\n    // Use safeUp/safeDown to run migration code within a transaction\n    public function safeUp() {}\n\n    public function safeDown() {}\n    */\n}\n```", "```php\nclass m150523_194158_init extends Migration\n{\n    public function safeUp()\n    {\n         return $this->createTable('user', [\n            'id'           => Schema::TYPE_PK, // $this->primaryKey()\n            'email'        => Schema::TYPE_STRING, // $this->string(255) // String with 255 characters\n            'password'     => Schema::TYPE_STRING,\n            'name'         => Schema::TYPE_STRING,\n            'created_at'   => Schema::TYPE_INTEGER, // $this->integer()\n            'updated_at'   => Schema::TYPE_INTEGER\n        ]);\n    }\n\n    public function safeDown()\n    {\n        return $this->dropTable('user');\n    }\n}\n```", "```php\n./yii migrate/up\n\n```", "```php\nsqlite3 /path/to/runtime/db.sqlite\n\n```", "```php\nsqlite> .tables\n\n```", "```php\nCREATE TABLE `user` (\n        `id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,\n        `email` varchar(255),\n        `password` varchar(255),\n        `name` varchar(255),\n        `created_at` integer,\n        `updated_at` integer\n);\n```", "```php\n./yii migrate/create name_change --interactive=0\n\n```", "```php\npublic function safeUp()\n{\n    $this->renameColumn('user', 'name', 'first_name');\n    $this->alterColumn('user', 'first_name', SCHEMA::TYPE_STRING);\n    $this->addColumn('user', 'last_name', SCHEMA::TYPE_STRING);\n    $this->alterColumn('user', 'email', SCHEMA::TYPE_STRING . ' NOT NULL');\n    $this->createIndex('user_unique_email', 'user', 'email', true);\n}\n```", "```php\n./yii migrate/up\n\n```", "```php\n*** applying m150523_203944_name_change\n > rename column name in table user to first_name \\\n...Exception: yii\\db\\sqlite\\QueryBuilder::renameColumn is not \\\n supported by SQLite. \\\n(/var/www/ch3/vendor/yiisoft/yii2/db/sqlite/QueryBuilder.php:201)\n\n```", "```php\npublic function safeUp()\n{\n    $this->dropTable('user');\n\n    $this->createTable('user', [\n        'id'           => Schema::TYPE_PK,\n        'email'        => Schema::TYPE_STRING . ' NOT NULL',\n        'password'     => Schema::TYPE_STRING . ' NOT NULL',\n        'first_name'   => Schema::TYPE_STRING,\n        'last_name'    => Schema::TYPE_STRING,\n        'created_at'   => Schema::TYPE_INTEGER,\n        'updated_at'   => Schema::TYPE_INTEGER\n    ]);\n\n    $this->createIndex('user_unique_email', 'user', 'email', true);\n}\n\npublic function safeDown()\n{\n    return true;\n}\n```", "```php\n./yii migrate/up\n\n```", "```php\nsqlite3 /path/to/runtime/db.sqlite\n\n```", "```php\n$users = \\Yii::$app->db\n        ->createCommand('SELECT * FROM user;')\n        ->queryAll();\n```", "```php\nArray\n(\n    [0] => Array\n    (\n        [id] => 1\n        [email] => test@example.com\n        [password] => test123\n        [first_name] => test\n        [last_name] => user\n        [created_at] => 0\n        [updated_at] => 0\n    )\n)\n```", "```php\n$user = \\Yii::$app->db\n        ->createCommand('SELECT * FROM user WHERE id = 1;')\n        ->queryOne();\n```", "```php\nArray\n(\n    [id] => 1\n    [email] => test@example.com\n    [password] => test123\n    [first_name] => test\n    [last_name] => user\n    [created_at] => 0\n    [updated_at] => 0\n)\n```", "```php\n$count = \\Yii::$app->db\n        ->createCommand('SELECT COUNT(*) FROM user;')\n        ->queryScalar();\n```", "```php\n$user = \\Yii::$app->db\n        ->createCommand('SELECT email FROM user;')\n        ->queryColumn();\n```", "```php\nArray\n(\n    [0] => test@example.com\n)\n```", "```php\n    ./yii migrate/down\n\n    ```", "```php\n    ./yii migrate/to m150523_194158_init\n\n    ```", "```php\n    sqlite3 /path/to/runtime/db.sqlite INSERT INTO user (email, password, name) VALUES ('test@example.com', 'test1', 'test user');\n    INSERT INTO user (email, password, name) VALUES ('test2@example.com', 'test2', 'test user 2');\n\n    ```", "```php\n    public function safeUp()\n    {\n        $users = \\Yii::$app->db\n                  ->createCommand('SELECT * FROM user')\n                  ->queryAll();\n\n        $this->dropTable('user');\n\n        $this->createTable('user', [\n            'id'           => Schema::TYPE_PK,\n            'email'        => Schema::TYPE_STRING . ' NOT NULL',\n            'password'     => Schema::TYPE_STRING . ' NOT NULL',\n            'first_name'   => Schema::TYPE_STRING,\n            'last_name'    => Schema::TYPE_STRING,\n            'created_at'   => Schema::TYPE_INTEGER,\n            'updated_at'   => Schema::TYPE_INTEGER\n        ]);\n\n        $this->createIndex('user_unique_email', 'user', 'email', true);\n\n        foreach ($users as $user)\n        {\n            $this->insert('user', [\n                'id'         => $user['id'],\n                'email'      => $user['email'],\n                'password'   => $user['password'],\n                'first_name' => $user['name'],\n                'created_at' => $user['created_at'],\n                'updated_at' => $user['updated_at']\n            ]);\n        }\n    }\n    ```", "```php\n    ./yii migrate/up â€“interactive=0\n\n    ```", "```php\n    sqlite3 /path/to/runtime/db.sqlite\n\n    ```", "```php\n[[column name]]\n```", "```php\n{{table name}}\n```", "```php\n$result = \\Yii::$app->db\n          ->createCommand(\"SELECT COUNT([[id]]) FROM {{user}}\")\n          ->queryScalar();\n```", "```php\n\\Yii::$app->db\n    ->createCommand('INSERT INTO user (email, password) VALUES (\"test3@example.com\", \"test3\");')\n    ->execute();\n```", "```php\n// INSERT ( tablename, [ attributes => attr ] )\n\\Yii::$app->db\n    ->createCommand()\n    ->insert('user', [\n      'email'      => 'test4@example.com',\n      'password'   => 'changeme7',\n      'first_name' => 'Test',\n      'last_name'  => 'User',\n      'created_at' => time(),\n      'updated_at' => time()\n    ])\n   ->execute();\n```", "```php\n// UPDATE (tablename, [ attributes => attr ], condition )\n\\Yii::$app->db\n    ->createCommand()\n    ->update('user', [\n        'updated_at' => time()\n    ], '1 = 1')\n   ->execute();\n```", "```php\n// DELETE ( tablename, condition )\n\\Yii::$app->db\n    ->createCommand()\n    ->delete('user', 'id = 3')\n    ->execute();\n```", "```php\n// batchInsert( tablename, [ properties ], [ rows ] )\n\\Yii::$app->db\n    ->createCommand()\n    ->batchInsert('user', ['email', 'password', 'first_name', 'last_name', 'created_at', 'updated_at'], \n    [\n        ['james.franklin@example.com', 'changeme7', 'James', 'Franklin', time(), time()],\n        ['linda.marks@example.com', 'changeme7', 'Linda', 'Marks', time(), time()]\n        ['roger.martin@example.com', 'changeme7', 'Roger', 'Martin', time(), time()]\n    ])\n    ->execute();\n```", "```php\n\\Yii::$app->db\n    ->createCommand(\"UPDATE user SET first_name = 'Tom' WHERE id  = \" . $_GET['id'])\n    ->execute();\n```", "```php\nUPDATE user SET first_name = 'Tom' WHERE id = 1;\n```", "```php\nUPDATE user SET first_name = 'Tom' WHERE id = 1; DROP TABLE user; --\n\n```", "```php\n\\Yii::$app->db\n    ->createCommand(\"UPDATE user SET first_name = :name WHERE id  = :id)\n    ->bindValue(':name', 'Tom')\n    ->bindValue(':id', $_GET['id'])\n    ->execute();\n```", "```php\n\\Yii::$app->db\n    ->createCommand(\"UPDATE user SET first_name = :name WHERE id  = :id)\n    ->bindValues([ ':name' => 'Tom', ':id' => $_GET['id'] ])\n    ->execute();\n```", "```php\n$params = [ ':name' => 'Tom', ':id' => $_GET['id'] ];\n\\Yii::$app->db\n    ->createCommand(\"UPDATE user SET first_name = :name WHERE id  = :id, $params)\n    ->execute();\n```", "```php\n$id = 1;\n$name = 'Tom';\n$q = \\Yii::$app->db\n    ->createCommand(\"UPDATE user SET first_name = :name WHERE id  = :id)\n    ->bindParam(':name', $name)\n    ->bindParam(':id', $id);\n```", "```php\n$q->execute();\n$id = 2;\n$name = 'Kevin';\n$q->execute();\n```", "```php\n$transaction = \\Yii::$app->db->beginTransaction();\n\ntry {\n    \\Yii::$app->db->createCommand($sql)->execute();\n    \\Yii::$app->db->createCommand($sql)->execute();\n    //[ â€¦ more queries â€¦]\n    $transaction->commit();\n} catch (\\Exception $e) {\n    $transaction->rollBack();\n}\n```", "```php\n$users = (new \\yii\\db\\Query())\n    ->select(['id', 'email'])\n    ->from('user')\n    ->all();\n```", "```php\n$query = (new \\yii\\db\\Query());\n```", "```php\n$query->select('id, first_name)->from('user');\n$query->select(['id', 'last_name'])->from('user');\n```", "```php\n$query->select([\n    'id' => 'user_id', \n    'user.first_name' => 'fName']\n)->from('user');\n```", "```php\n$query->select([\n    \"id\", \n    \"CONCACT(first_name, ' ', last_name)\" => 'full_name'\n])->from('user'); \n```", "```php\n$query->select('COUNT(*)')->from('user');\n```", "```php\n$query->select('first_name')->distinct()->from('user');\n```", "```php\n$query->select('first_name')->from(['u' => 'users']);\n```", "```php\n$query->select(['first_name', 'last_name'])\n           ->from('user')\n      ->where('id = :id')\n      ->addParams([':id' => 1]);\n```", "```php\n$query->select(['first_name', 'last_name'])\n      ->from('user')\n      ->where('id = :id', [':id' => 1]);\n```", "```php\n$query->from('user')\n      ->where([\n       'first_name' => 'John',\n       'pets_name' => NULL,\n       'age' => [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n       ]);\n```", "```php\nSELECT * \nFROM user \nWHERE first_name = \"John\" AND \n        pets_name IS NULL AND \n        age IN (20, 21, 22, 23, 24, 25, 26, 27, 28, 29);\n```", "```php\nwhere([ operator, condition1, condition2 ]);\n```", "```php\n$query->where(['or', 'John', 'Jill']);\n```", "```php\n$query->andWhere(['in', 'id', [1,2,3,4,5]);\n```", "```php\n$query->from('user')\n      ->orderBy('age ASC');\n```", "```php\n$query->from('user')\n      ->limit(5)\n      ->offset(5);\n```", "```php\n$query->select(['age', 'COUNT(*)' => 'users'])\n      ->from('user')\n      ->groupBy('age');\n```", "```php\nSELECT age, COUNT(*) AS users FROM user GROUP BY age;\n```", "```php\n$query->select(['age', 'COUNT(*)' => 'users'])\n      ->from('user')\n      ->groupBy('age')\n      ->having('>', 'age', 30');\n```", "```php\n$query->join( $type, $table, $on, $params );\n```", "```php\n$query->join('LEFT JOIN', 'post', 'post.user_id = user.id');\n```", "```php\n$query1->union($query2);\n```", "```php\n$results = $query->all();\n```", "```php\n$row = $query->one();\n```", "```php\n$areUsersInDb = (new \\yii\\db\\Query)\n              ->from('user')\n              ->exists();\n```", "```php\n$count = (new \\yii\\db\\Query)\n       ->from('user')\n       ->count();\n```", "```php\n$age = (new \\yii\\db\\Query)\n     ->select('MAX(age)')\n     ->from('user')\n     ->scalar();\n```", "```php\n$result = (new \\yii\\db\\Query)\n        ->from('user')\n        ->column();\n```", "```php\n$command = $query->select(['first_name', 'last_name'])\n                 ->from('user')\n                 ->where('id = :id', [':id' => 1])\n                 ->createCommand();\n\n// Show the generated SQL statement\necho $command->sql;\n\n// Show the bound parameters\nvar_dump($command->params);\n\n// Execute the query via normal DAO commands\n$rows = $command->queryAll();\n```", "```php\n$query->from('user');\n\n// $users will ben an array of 100 or fewer rows from the database\nforeach ($query->batch() as $users) {}\n\n// Whereas the each() method allows you to iterate over the first 50 or fewer users one by one\nforeach ($query->each(50) as $user) {}\n```", "```php\n$provider = new ActiveDataProvider([\n    'query' => User::find(),\n    'pagination' => [\n        'pageSize' => 20,\n    ],\n]);\n```", "```php\n$query = new yii\\db\\Query();\n$provider = new ActiveDataProvider([\n    'query' => $query->from('user'),\n    'pagination' => [\n        'pageSize' => 20,\n    ],\n]);\n```", "```php\n$query = new yii\\db\\Query();\n$provider = new yii\\data\\ActiveDataProvider([\n    'query' => $query->from('user'),\n    'pagination' => [\n        'pageSize' => 2, \n    ],  \n]);\n\necho yii\\grid\\GridView::widget([\n    'dataProvider' => $provider\n]);\n```", "```php\necho yii\\grid\\GridView::widget([\n    'dataProvider' => $provider,\n    'columns' => [\n        'id',\n        'email',\n        'first_name',\n        'last_name',\n        'created_at',\n        'updated_at'\n    ]\n]);\n```", "```php\n$query = new yii\\db\\Query();\n$provider = new yii\\data\\ActiveDataProvider([\n    'query' => $query->from('user'),\n    'sort' => new yii\\data\\Sort([\n        'attributes' => [\n            'email',\n            'first_name',\n            'last_name'\n        ]\n    ]),\n    'pagination' => [\n        'pageSize' => 2,\n    ],  \n]);\n```", "```php\necho yii\\widgets\\DetailView::widget([\n    'model' => $user,    \n    'attributes' => [\n        'id',               \n        'first_name',\n        'last_name',\n        'email',\n        // Format the updated dates as datetime object\n        // Rather than an integer\n        'updated_at:datetime'\n    ]\n]);\n```", "```php\n'attributes' => [\n    [...],\n    'updated_at:datetime'\n]\n```", "```php\n$config = [\n    'class' => 'yii\\db\\Connection',\n\n    // configuration for the master\n    'dsn' => '<master_dns>',\n    'username' => 'master',\n    'password' => '<master_password>',\n\n    // common configuration for slaves\n    'slaveConfig' => [\n        'username' => 'slave',\n        'password' => '<slave_password>',\n        'attributes' => [\n            // Use a small connection timeout\n            PDO::ATTR_TIMEOUT => 10,\n        ],\n    ],\n\n    // List of slave configurations.\n    'slaves' => [\n        ['dsn' => '<slave1_dsn>'],\n        ['dsn' => '<slave2_dsn>'],\n        ['dsn' => '<slave3_dsn>'],\n    ]\n];\n\n$db = Yii::createObject($config);\n\n// Would execute against an available slave\n$users = $db->createCommand('SELECT * FROM user')->queryAll();\n\n// Would execute against the master\n$db->createCommand('UPDATE user SET updated_at = NOW()')->execute();\n```", "```php\n$config = [\n    'class' => 'yii\\db\\Connection',\n    'masterConfig' => [\n        'username' => 'master',\n        'password' => '<master_password>',\n        'attributes' => [\n            // use a smaller connection timeout\n            PDO::ATTR_TIMEOUT => 10,\n        ],\n    ],\n\n    // list of master configurations\n    'masters' => [\n        ['dsn' => '<master1_dsn>'],\n        ['dsn' => '<master2_dsn>'],\n    ],\n\n    'slaveConfig' => [...],\n    'slaves' => [...]\n];\n```", "```php\n$rows = $db->useMaster(function ($db) {\n    return $db->createCommand('SELECT * FROM user')->queryAll();\n});\n```", "```php\n$transaction = $db->slave->beginTransaction();\n```"]