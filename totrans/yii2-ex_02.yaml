- en: Chapter 2. Creating a Simple News Reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to write your first controller in order to display
    news items list and details, make interactions between controllers and views,
    and then customize the view's layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating controller and action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view to display the news list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the controller sends the data to view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – create a controller to display the static news items list and details
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Split the common view content into reusable views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – render partial in view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating static pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share data between views and layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – change layout background based on the URL parameter
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout with dynamic blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – add dynamic box to display advertising info
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using different layout to create responsive and not responsive layout
    for the same view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Controller and Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to handle a request, the first thing to do is to create a new controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The things you must remember while creating a file controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The namespace at the top (in basic application usually app\controllers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `use` path for used class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller class must extend the `yii\web\Controller` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actions are handled from controller functions whose name starts with `action`
    and the first letter of each word is in uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's point to `basic/controllers` and create a file named `NewsController.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create a class with the same name as the file and extend it from controller;
    finally, create an action named `index` to manage request for `news/index`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we try to point the browser to `http://hostname/basic/web/index.php?r=news/index`,
    we will see a blank page with the notice **this is my first controller**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see which common errors can occur when we ignore those four things
    to remember mentioned at the top of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The namespace defines the hierarchical organization for names used in our application.
    If we forget to declare a namespace, Yii2 with `YII_DEBUG` set to true in `web/index.php`,
    will display the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Controller and Action](img/B04656_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The missing Controller namespace
  prefs: []
  type: TYPE_NORMAL
- en: Yii2 reports an error in an excellent way, giving us the possibility to solve
    it by checking if we are missing the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `Use` keyword is employed to specify the complete path of a class
    in the application. A class that has a `path/to/class/ClassName` complete path,
    can be referenced in the app using only `ClassName` if we put an `use path/to/class/ClassName`
    just after namespace declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we use just `ClassName` without defining the `use` declaration
    at the top of the file, an error such as the following can occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Controller and Action](img/B04656_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This error is simple to explain, but harder to find, especially for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the screenshot shows that it has been used the `Controller` name
    (after the `extends` keyword) at row 9\. Since there is no complete path for the
    `Controller` class name, Yii2 will try to look for the `Controller` class under
    `app\controllers`, without finding it.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, we must change `Controller` with `yii\web\Controller`
    at row 9 and for all the next rows that will use the `Controller` class name without
    defining a complete class path, or that insert a `use` declaration at the top
    of the file, we must employ `yii\web\Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: A controller is always a subclass of `yii\web\Controller` or simply, if we have
    used the keyword `use`, a subclass of `Controller`. Action names follow the rules
    described in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a view to display a news list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create a simple news list in a view named `itemsList`. We will
    point to this view from `NewsController`, so we have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `news` folder under `basic/views`, that `NewsController` will use as
    the base folder to search for the views to be rendered (according to the view
    names' rules explained in the previous chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `itemsList.php` file under `basic/views/news`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, open `basic/views/news/itemsList.php`, create an array with a list of
    data and display the output with a simple table of items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to create an action provided by a function named `actionItemsList`
    that will be rendered by `http://hostname/basic/web/index.php?r=news/items-list`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pay attention to names for routes, controllers, and actions:'
  prefs: []
  type: TYPE_NORMAL
- en: The route for this action is `news/items-list` (lowercase and words separated
    by dashes);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller class name is `NewsController` (uppercase with the word Controller
    in the end);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The action function name in `NewsController` is `actionItemsList` (the function
    name has `action` word as prefix, dashes in the route are removed, and the first
    letter of each word is in uppercase);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The function to append in the `NewsController` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `render()` method that belongs to `\yii\web\Controller`, displays in the
    layout content of the view passed as the first parameter. When the framework is
    looking for the view, it will append `.php` extension to the name passed as the
    first parameter of the `render()` method and it will look for it in `basic/view/news`.
    The last member of the path is the name that is calling the `render()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can point to `http://hostname/basic/web/index.php?r=news/items-list`,
    to see our beautiful table!
  prefs: []
  type: TYPE_NORMAL
- en: How the controller sends data to view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous paragraph, we have seen how to display the content view. However,
    the view should only be responsible for displaying data, and not for manipulation.
    Consequently, any work on data should be done in controller action and then passed
    to view.
  prefs: []
  type: TYPE_NORMAL
- en: The `render()` method in the action of the controller has a second parameter,
    which is an array whose keys are names of variables, and values are the content
    of these variables available in view context.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move all data manipulation of our `itemsList` example in controller,
    leaving out just the code to format the output (such as HTML).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of the `actionItemsList()` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In `views/news/itemsList.php`, we only have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Thus, we have correctly split the working of controller and view.
  prefs: []
  type: TYPE_NORMAL
- en: Example – create a controller to display the static news items list and details
    using the bootstrap template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our next goal is to complete the news reader displaying details of single news
    in another page.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are going to use the same data for list and detail, we will extract
    the `$newsList` data from action to a function, in order to be reused for more
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `NewsController`, we will have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After this, we will create a new function in `NewsController`, `actionItemDetail`,
    that is used to handle requests of detail of a news item. This function will expect
    a parameter, which will allow to filter the correct items from `$newsList`, for
    example, the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of `actionItemDetail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next we have to create a new view file in `views/news` named `itemDetail.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of `itemDetail.php` located under `views/news/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we point to `http://hostname/basic/web/index.php?r=news/item-detail` without
    passing the title parameter, we will see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – create a controller to display the static news items list and details
    using the bootstrap template](img/B04656_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It displays an error that tells us that the title parameter is missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to pass `First%20%World%20War` as the title parameter to the URL, like
    this `http://hostname/basic/web/index.php?r=news/item-detail&title=First%20World%20War`;
    the following will be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – create a controller to display the static news items list and details
    using the bootstrap template](img/B04656_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That is what we are expecting!
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we want to connect together `itemsList` and `itemDetail`. In `views/news/itemsList.php`,
    we must change the title content into an anchor element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To build a link, there is an available component, `urlManager`, which allows
    us to create links through the `createUrl()` method. The parameter in `createUrl()`
    is an array that contains the route path and variable to pass to the URL. To learn
    more about this method, just refer to the link [http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail).
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we have `news/item-detail` as the route to be called and the `title`
    parameter to be passed to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The date can be formatted using the built-in formatter component. For example,
    to to display a date in the d/m/Y format, `d/m/Y : Yii::$app->formatter->asDatetime($item[''date''],
    "php:d/m/Y");`.'
  prefs: []
  type: TYPE_NORMAL
- en: It is advisable to use a unique identifier to pass data between routes. For
    this purpose, we add a third parameter, named `id`, to identify a record univocally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of `NewsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the parameter in the `createUrl` parameter in `views/news/itemsList.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Splitting the common view content into reusable views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, views share the same common portion of content. In the examples made
    until now, we have seen that a common area for `itemsList` and `itemDetail` could
    be copyright data, which displays a disclaimer about copyright info.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make this, we must put the common content in a separate view and
    call it using the `renderPartial()` method of controller ([http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail)).
    It has the same types of parameters of the `render()` method; the main difference
    between the `render()` and `renderPartial()` methods is that `render()` writes
    a view content in layout and `renderPartial()` writes only view contents to output.
  prefs: []
  type: TYPE_NORMAL
- en: Example – render partial in view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we create a common view for both `itemsList` and `itemDetail`
    about copyright data.
  prefs: []
  type: TYPE_NORMAL
- en: Create a view file named `_copyright.php` in `views/news`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, in Yii2's app, a view name that starts with underscore stands for common
    reusable view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this file, put only a text for copyright into `views/news/_copyright.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, we want to display this view inside the `itemsList` and `itemDetail` views.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the content in `itemsList.php` located at `views/news/` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the content in `itemDetail.php` located at `views/news/` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have put a common code at the top of the file in both views:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will render the content of the `_copyright.php` view without layout.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pay attention! Since `renderPartial()` is a method of the `Controller` class
    and `$this` refers to the `View` class in the view file, to access from `$this`
    to `renderPartial()` we will use the context member, which represents the `Controller`
    object in the `View` object.
  prefs: []
  type: TYPE_NORMAL
- en: Creating static pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All websites contain static pages, whose content is static.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a static page in a common way, we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a function (`action`) to execute action in `Controller`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a view for static content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Append the following action to `Controller`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then, create a view in `views/controller/action-name.php`. This procedure is
    simple but too long and redundant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii2 provides a quick alternative, adding static pages to the `actions()` method
    of `Controller` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With this simple declaration, we can put all static content under `views/controllerName/pages`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can point to the URL with route `controller_name/page` and the `view`
    parameter with the name of a view file such as `http://hostname/basic/web/index.php?r=controllerName/pages&view=name_of_view`.
  prefs: []
  type: TYPE_NORMAL
- en: Example – add a contact page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we have learned how to create a static page, it is time to write a contact
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put a short static content in `views/site/pages/contact.php` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s add a `page` attribute in the return array from the `actions()`
    method of `Controller`. To simplify, we will use `SiteController` that has this
    default implementation of the `actions()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After the last attribute, we will append the `page` attribute, and the following
    will be the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, every request to `site/pages/` is routed using the `ViewAction` class,
    which handles it simply by rendering static content of relative view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test it by clicking on `http://hostname/basic/web/index.php?r=site/pages&view=contact`,
    and we should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – add a contact page](img/B04656_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can customize the last part of the route with these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: The attribute name of array returned from the `actions()` method of `Controller`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `viewPrefix` attribute of the `ViewAction` class declaration with the
    first part of the URL that we want to use to reach the pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the name of the subfolder under `views/controllerName`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, we want to use `static` as the last part of the URL to reach static
    pages in `SiteController`.
  prefs: []
  type: TYPE_NORMAL
- en: We want to point to `http://hostname/basic/web/index.php?r=site/static&view=contact`
    to display the contact view.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be the `ViewAction` node in the array from the `actions()` method
    of `SiteController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We must also change the name of the static pages subfolder, renaming it from
    `views/site/pages` to `views/site/static`, and we can point to `http://hostname/basic/web/index.php?r=site/static&view=contact`.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data between views and layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 provides a standard solution to share data between views and layout, through
    the `params` property of the View component that you can use to share data among
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a standard solution since the `params` property exists in all views
    and it is attached to the View component.
  prefs: []
  type: TYPE_NORMAL
- en: This property, `params`, is an array that we can use without any restriction.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we want to fill the breadcrumb element in the layout to track the
    path of navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main layout at `views/layouts/main.php`; you should find the default
    implementation of breadcrumb just before declaring the footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We need to fill the breadcrumbs property of `params` in view to display from
    any view to the layout custom path. For example, we want to display breadcrumbs
    in the `SiteController` index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `views/site/index.php` and add the following code at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we are in view file, `$this` refers to View component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://hostname/basic/web/index.php?r=site/index` to see the breadcrumb
    bar appearing at the top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing data between views and layout](img/B04656_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Example – change the layout background based on a URL parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another example of communication between view and layout is, for instance, to
    change the layout background color based on a URL parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We need to change the background of route `site/index` passing the `bckg` parameter
    in URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we must open `views/site/index.php` and put this code at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code will set $`backgroundColor` to `#FFFFFF` (white color), if it is not
    passed to the `bckg` parameter, otherwise it will be passed a value.
  prefs: []
  type: TYPE_NORMAL
- en: Then, set the `params` attribute of View component in order to write its content
    in layout.
  prefs: []
  type: TYPE_NORMAL
- en: Open `views/layout/main.php`, and, in the `body` tag, apply the style based
    on `params['background_color']` passed from view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let''s change the layout of the body tag with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Finally, go to `http://hostname/basic/web/index.php?r=site/index&bckg=yellow`
    to have a yellow background or to `http://hostname/basic/web/index.php?r=site/index&bckg=#FF0000`
    to have a red one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we are setting the `background` property of `params` only
    in `views/site/index.php`. Other views do not set this property, so if we have
    not checked whether `background_color` property exists in the layout file, we
    will receive an error of missing the attribute from the framework, which means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Layout with dynamic block
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of the `params` property to allow communication between view and layout,
    is advisable for simple cases, but there are some more complex cases where we
    must share the block of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: For example, think about the advertising box in layout (usually left or right
    column of the template), that could change according to the view that is being
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we need to pass the entire block of HTML code from view to layout.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, this framework provides Block statements, where we can define
    entire blocks of data to send from view to layout.
  prefs: []
  type: TYPE_NORMAL
- en: Using Blocks means to define the `Block` statement in view and display it in
    another view, usually layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the `Block` statement in view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, `beginBlock` and `endBlock` define the beginning and the end of the `block1`
    named statement. This content is saved into the `blocks` property of the view
    component with the `block1` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: We can access this block through `$view>blocks[$blockID]` in every view, including
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'To render a block in layout view, if available, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, we can define all the blocks that we want.
  prefs: []
  type: TYPE_NORMAL
- en: Example – add a dynamic box to display advertising info
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will see how to display, when available, a box with advertising
    info that displays data sent from view.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is to add a block in layout displaying data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter in `views/layouts/main.php` and change `div` with container class as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We have added a div with the `well` class to display the content of `blockADV`,
    if available. If `blockADV` is available in `$this->blocks`, it will display its
    content; otherwise, it will display `no content available`, as a courtesy message.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create a new action in `NewsController`, called `advTest`, and
    then will create a brand new view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start off by creating a file in `views/news/advTest.php` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We can insert any content in a block; in this case, we have put in text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The position where block is defined in view is not important.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, open `NewsController` and add a new action `advTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, point the browser to `http://hostname/basic/web/index.php?r=news/adv-test`
    and we will see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – add a dynamic box to display advertising info](img/B04656_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All other pages will only show `no content available` in the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the building of a website or a web application, usually it could be required
    to render different views with different layouts. Think about, for example, the
    lists and details of news made in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The layout is managed by the `$layout` property of `Controller`; `main` is the
    default value for this property.
  prefs: []
  type: TYPE_NORMAL
- en: Just set this property to change the layout file where to render the content
    of the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some important rules to write the value of the `$layout` property:'
  prefs: []
  type: TYPE_NORMAL
- en: A path alias (for example, `@app/views/layouts/main`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An absolute path (for example, `/main`) is where the layout value starts with
    a slash. The actual layout file will be looked for under the application layout
    path, which defaults to `@app/views/layouts`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A relative path (for example, `main`) is where the actual layout file will be
    looked for under the context module's layout path, which defaults to the `views/layouts`
    directory under the module directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Boolean value false is where no layout will be applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the layout value does not contain a file extension, it will use the default
    `.php`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example – using different layouts to create responsive and nonresponsive content
    layout for the same view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will create a new action in `NewsController` that will change
    its layout depending on a value passed in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add a new action in `NewsController` called `actionResponsiveContentTest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this action, we get a responsive parameter from the URL and set the `$responsive`
    variable to this value or 0 if not passed.
  prefs: []
  type: TYPE_NORMAL
- en: Then, set the `$layout` property of `Controller` to responsive or not according
    to the `$responsive` value, and pass this variable to view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create a new view in `views/news/responsiveContentTest.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This displays a different text block according to the `$responsive` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, make a clone of main layout copying `views/layouts/main.php` in `views/layouts/responsive.php`
    and change in a new file `views/layouts/responsive.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This change makes the div container fluid (responsive), in other words, its
    content is resized with respect to percentage available in the horizontal space
    (instead the fixed value).
  prefs: []
  type: TYPE_NORMAL
- en: If we point to `http://hostname/basic/web/index.php?r=news/responsive-content-test`,
    we will see content in a fixed layout. Instead, if we pass the `responsive` parameter
    with value 1, `http://hostname/basic/web/index.php?r=news/responsive-content-test&responsive=1`,
    we will see the content in a full width screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, after understanding how a Yii2 app is structured, we have created
    our first Controllers and relative views. We have seen static and dynamic views,
    we have learned how to render views in layout and pass data from Controller to
    View and then we have looked at reusing Views through partial views and blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have manipulated layouts, changing them conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will display URLs in a pretty format, which is very
    important for all **search engine optimization** (**SEO**) activities on the website.
    Then, we will learn how to create a custom URL handler to manage any required
    URL customizations.
  prefs: []
  type: TYPE_NORMAL
