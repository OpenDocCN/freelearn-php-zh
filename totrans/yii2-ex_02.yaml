- en: Chapter 2. Creating a Simple News Reader
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 创建简单的新闻阅读器
- en: This chapter explains how to write your first controller in order to display
    news items list and details, make interactions between controllers and views,
    and then customize the view's layout.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何编写第一个控制器以显示新闻条目列表和详情，实现控制器和视图之间的交互，然后自定义视图布局。
- en: 'In this chapter, we will go through the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我们将介绍以下内容：
- en: Creating controller and action
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器和动作
- en: Creating a view to display the news list
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个视图来显示新闻列表
- en: How the controller sends the data to view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器如何将数据发送到视图
- en: Example – create a controller to display the static news items list and details
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 创建一个控制器来显示静态新闻条目列表和详情
- en: Split the common view content into reusable views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将公共视图内容拆分为可重用的视图
- en: Example – render partial in view
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 在视图中渲染部分
- en: Creating static pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建静态页面
- en: Share data between views and layout
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图和布局之间共享数据
- en: Example – change layout background based on the URL parameter
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 根据URL参数更改布局背景
- en: Layout with dynamic blocks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有动态块的布局
- en: Example – add dynamic box to display advertising info
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 添加动态框来显示广告信息
- en: Using multiple layouts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个布局
- en: Example – using different layout to create responsive and not responsive layout
    for the same view
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 使用不同的布局为同一视图创建响应式和非响应式布局
- en: Creating Controller and Action
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器和动作
- en: In order to handle a request, the first thing to do is to create a new controller.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理请求，首先要做的是创建一个新的控制器。
- en: 'The things you must remember while creating a file controller are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件控制器时必须记住的事项如下：
- en: The namespace at the top (in basic application usually app\controllers)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部的命名空间（在基本应用程序中通常是`app\controllers`）
- en: The `use` path for used class
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类所用的`use`路径
- en: The controller class must extend the `yii\web\Controller` class
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类必须扩展`yii\web\Controller`类
- en: The actions are handled from controller functions whose name starts with `action`
    and the first letter of each word is in uppercase
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作由以`action`开头且每个单词首字母大写的控制器函数处理
- en: Let's point to `basic/controllers` and create a file named `NewsController.php`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们指向`basic/controllers`并创建一个名为`NewsController.php`的文件。
- en: 'Then, create a class with the same name as the file and extend it from controller;
    finally, create an action named `index` to manage request for `news/index`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个与文件同名的类，并从控制器扩展它；最后，创建一个名为`index`的动作来管理`news/index`的请求：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we try to point the browser to `http://hostname/basic/web/index.php?r=news/index`,
    we will see a blank page with the notice **this is my first controller**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试将浏览器指向`http://hostname/basic/web/index.php?r=news/index`，我们将看到一个空白页面，并显示通知**这是我的第一个控制器**。
- en: Now, let's see which common errors can occur when we ignore those four things
    to remember mentioned at the top of this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当我们忽略本章开头提到的四个注意事项时，可能会发生哪些常见错误。
- en: 'The namespace defines the hierarchical organization for names used in our application.
    If we forget to declare a namespace, Yii2 with `YII_DEBUG` set to true in `web/index.php`,
    will display the following error message:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间定义了我们应用程序中使用的名称的层次结构组织。如果我们忘记声明命名空间，当`YII_DEBUG`在`web/index.php`中设置为true时，Yii2将显示以下错误消息：
- en: '![Creating Controller and Action](img/B04656_02_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![创建控制器和动作](img/B04656_02_01.jpg)'
- en: The missing Controller namespace
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少的控制器命名空间
- en: Yii2 reports an error in an excellent way, giving us the possibility to solve
    it by checking if we are missing the namespace.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2以极好的方式报告错误，它给了我们检查是否缺少命名空间来解决问题的可能性。
- en: Then, the `Use` keyword is employed to specify the complete path of a class
    in the application. A class that has a `path/to/class/ClassName` complete path,
    can be referenced in the app using only `ClassName` if we put an `use path/to/class/ClassName`
    just after namespace declaration.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`Use`关键字来指定应用程序中类的完整路径。如果一个类具有`path/to/class/ClassName`的完整路径，我们只需在命名空间声明后立即添加`use
    path/to/class/ClassName`，就可以在应用程序中使用`ClassName`来引用该类。
- en: 'However, if we use just `ClassName` without defining the `use` declaration
    at the top of the file, an error such as the following can occur:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们只使用`ClassName`而没有在文件顶部定义`use`声明，可能会出现以下错误：
- en: '![Creating Controller and Action](img/B04656_02_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![创建控制器和动作](img/B04656_02_02.jpg)'
- en: This error is simple to explain, but harder to find, especially for beginners.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误很容易解释，但很难找到，尤其是对于初学者来说。
- en: In this case, the screenshot shows that it has been used the `Controller` name
    (after the `extends` keyword) at row 9\. Since there is no complete path for the
    `Controller` class name, Yii2 will try to look for the `Controller` class under
    `app\controllers`, without finding it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，截图显示在第 9 行已经使用了 `Controller` 名称（在 `extends` 关键字之后）。由于没有 `Controller`
    类名的完整路径，Yii2 将尝试在 `app\controllers` 下查找 `Controller` 类，但没有找到。
- en: To solve this problem, we must change `Controller` with `yii\web\Controller`
    at row 9 and for all the next rows that will use the `Controller` class name without
    defining a complete class path, or that insert a `use` declaration at the top
    of the file, we must employ `yii\web\Controller`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们必须在第 9 行将 `Controller` 替换为 `yii\web\Controller`，以及所有后续将使用 `Controller`
    类名而不定义完整类路径的行，或者在该文件顶部插入 `use` 声明，我们必须使用 `yii\web\Controller`。
- en: A controller is always a subclass of `yii\web\Controller` or simply, if we have
    used the keyword `use`, a subclass of `Controller`. Action names follow the rules
    described in the previous chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器始终是 `yii\web\Controller` 的子类，或者如果我们使用了 `use` 关键字，那么是 `Controller` 的子类。动作名称遵循前一章中描述的规则。
- en: Creating a view to display a news list
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个视图来显示新闻列表
- en: 'Now, we will create a simple news list in a view named `itemsList`. We will
    point to this view from `NewsController`, so we have to:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在名为 `itemsList` 的视图中创建一个简单的新闻列表。我们将从 `NewsController` 指向此视图，因此我们必须：
- en: Create a `news` folder under `basic/views`, that `NewsController` will use as
    the base folder to search for the views to be rendered (according to the view
    names' rules explained in the previous chapter)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `basic/views` 下创建一个 `news` 文件夹，`NewsController` 将使用该文件夹作为基本文件夹来搜索要渲染的视图（根据前一章中解释的视图名称规则）。
- en: Create an `itemsList.php` file under `basic/views/news`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `basic/views/news` 下创建一个 `itemsList.php` 文件
- en: 'Now, open `basic/views/news/itemsList.php`, create an array with a list of
    data and display the output with a simple table of items:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 `basic/views/news/itemsList.php`，创建一个包含数据列表的数组，并使用简单的项目表格显示输出：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, we need to create an action provided by a function named `actionItemsList`
    that will be rendered by `http://hostname/basic/web/index.php?r=news/items-list`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个名为 `actionItemsList` 的动作，它将通过 `http://hostname/basic/web/index.php?r=news/items-list`
    渲染。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载示例代码文件，以获取您购买的所有
    Packt Publishing 书籍。如果您在其他地方购买了此书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以直接将文件通过电子邮件发送给您。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Pay attention to names for routes, controllers, and actions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意路由、控制器和动作的命名：
- en: The route for this action is `news/items-list` (lowercase and words separated
    by dashes);
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此动作的路由为 `news/items-list`（小写，单词由破折号分隔）；
- en: The controller class name is `NewsController` (uppercase with the word Controller
    in the end);
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器类名为 `NewsController`（大写，以 Controller 结尾）。
- en: The action function name in `NewsController` is `actionItemsList` (the function
    name has `action` word as prefix, dashes in the route are removed, and the first
    letter of each word is in uppercase);
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NewsController` 中的动作函数名为 `actionItemsList`（函数名以 `action` 字词为前缀，路由中的破折号被移除，每个单词的首字母大写）；'
- en: 'The function to append in the `NewsController` class is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 需要添加到 `NewsController` 类中的函数如下：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `render()` method that belongs to `\yii\web\Controller`, displays in the
    layout content of the view passed as the first parameter. When the framework is
    looking for the view, it will append `.php` extension to the name passed as the
    first parameter of the `render()` method and it will look for it in `basic/view/news`.
    The last member of the path is the name that is calling the `render()` method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 属于 `\yii\web\Controller` 的 `render()` 方法，在布局中显示传递给第一个参数的视图内容。当框架查找视图时，它将 `.php`
    扩展名附加到 `render()` 方法的第一个参数名称，并在 `basic/view/news` 中查找它。路径的最后一个成员是调用 `render()`
    方法的名称。
- en: Now, we can point to `http://hostname/basic/web/index.php?r=news/items-list`,
    to see our beautiful table!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以指向 `http://hostname/basic/web/index.php?r=news/items-list`，以查看我们的美丽表格！
- en: How the controller sends data to view
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器如何向视图发送数据
- en: In the previous paragraph, we have seen how to display the content view. However,
    the view should only be responsible for displaying data, and not for manipulation.
    Consequently, any work on data should be done in controller action and then passed
    to view.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一段中，我们看到了如何显示内容视图。然而，视图只应该负责显示数据，而不应该进行操作。因此，任何数据操作都应该在控制器动作中完成，然后传递给视图。
- en: The `render()` method in the action of the controller has a second parameter,
    which is an array whose keys are names of variables, and values are the content
    of these variables available in view context.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器动作中的 `render()` 方法有一个第二个参数，它是一个数组，其键是变量的名称，值是这些变量在视图上下文中的内容。
- en: Now, let's move all data manipulation of our `itemsList` example in controller,
    leaving out just the code to format the output (such as HTML).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将 `itemsList` 示例中的所有数据操作移到控制器中，只留下格式化输出（如 HTML）的代码。
- en: 'The following is the content of the `actionItemsList()` controller:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `actionItemsList()` 控制器中的内容：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In `views/news/itemsList.php`, we only have the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `views/news/itemsList.php` 中，我们只有以下代码：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Thus, we have correctly split the working of controller and view.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经正确地分割了控制器和视图的工作。
- en: Example – create a controller to display the static news items list and details
    using the bootstrap template
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 – 创建一个控制器，使用 bootstrap 模板显示静态新闻条目列表和详情
- en: Our next goal is to complete the news reader displaying details of single news
    in another page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个目标是完成新闻阅读器，在另一页面上显示单条新闻的详细信息。
- en: Since we are going to use the same data for list and detail, we will extract
    the `$newsList` data from action to a function, in order to be reused for more
    actions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用相同的数据来显示列表和详情，我们将从动作中提取 `$newsList` 数据到一个函数中，以便在更多动作中重用。
- en: 'In `NewsController`, we will have the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `NewsController` 中，我们将有以下代码：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After this, we will create a new function in `NewsController`, `actionItemDetail`,
    that is used to handle requests of detail of a news item. This function will expect
    a parameter, which will allow to filter the correct items from `$newsList`, for
    example, the title.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在 `NewsController` 中创建一个新的函数 `actionItemDetail`，用于处理新闻条目详情的请求。此函数将期望一个参数，允许从
    `$newsList` 中过滤出正确的条目，例如标题。
- en: 'The following is the content of `actionItemDetail`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `actionItemDetail` 中的内容：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next we have to create a new view file in `views/news` named `itemDetail.php`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须在 `views/news` 中创建一个新的视图文件，命名为 `itemDetail.php`。
- en: 'The following is the content of `itemDetail.php` located under `views/news/`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `views/news/` 目录下 `itemDetail.php` 的内容：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we point to `http://hostname/basic/web/index.php?r=news/item-detail` without
    passing the title parameter, we will see the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不传递标题参数，指向 `http://hostname/basic/web/index.php?r=news/item-detail`，我们将看到以下截图：
- en: '![Example – create a controller to display the static news items list and details
    using the bootstrap template](img/B04656_02_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 创建一个控制器，使用 bootstrap 模板显示静态新闻条目列表和详情](img/B04656_02_04.jpg)'
- en: It displays an error that tells us that the title parameter is missing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了一个错误，告诉我们标题参数缺失。
- en: 'Try to pass `First%20%World%20War` as the title parameter to the URL, like
    this `http://hostname/basic/web/index.php?r=news/item-detail&title=First%20World%20War`;
    the following will be the output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将 `First%20%World%20War` 作为标题参数传递到 URL 中，如下所示 `http://hostname/basic/web/index.php?r=news/item-detail&title=First%20World%20War`；以下将是输出：
- en: '![Example – create a controller to display the static news items list and details
    using the bootstrap template](img/B04656_02_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 创建一个控制器，使用 bootstrap 模板显示静态新闻条目列表和详情](img/B04656_02_05.jpg)'
- en: That is what we are expecting!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们期望的！
- en: 'Finally, we want to connect together `itemsList` and `itemDetail`. In `views/news/itemsList.php`,
    we must change the title content into an anchor element, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望将 `itemsList` 和 `itemDetail` 连接起来。在 `views/news/itemsList.php` 中，我们必须将标题内容更改为锚点元素，如下所示：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To build a link, there is an available component, `urlManager`, which allows
    us to create links through the `createUrl()` method. The parameter in `createUrl()`
    is an array that contains the route path and variable to pass to the URL. To learn
    more about this method, just refer to the link [http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建链接，有一个可用的组件 `urlManager`，它允许我们通过 `createUrl()` 方法创建链接。`createUrl()` 中的参数是一个包含路由路径和要传递给URL的变量的数组。要了解更多关于这个方法的信息，请参考链接
    [http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-web-urlmanager.html#createUrl%28%29-detail)。
- en: In our case, we have `news/item-detail` as the route to be called and the `title`
    parameter to be passed to the URL.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们有一个 `news/item-detail` 作为要调用的路由，以及要传递给URL的 `title` 参数。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The date can be formatted using the built-in formatter component. For example,
    to to display a date in the d/m/Y format, `d/m/Y : Yii::$app->formatter->asDatetime($item[''date''],
    "php:d/m/Y");`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '日期可以使用内置的格式化组件进行格式化。例如，要显示 d/m/Y 格式的日期，可以使用以下代码：`d/m/Y : Yii::$app->formatter->asDatetime($item[''date''],
    "php:d/m/Y");`。'
- en: It is advisable to use a unique identifier to pass data between routes. For
    this purpose, we add a third parameter, named `id`, to identify a record univocally.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用唯一的标识符在路由之间传递数据。为此，我们添加了一个名为 `id` 的第三个参数，用于唯一标识记录。
- en: 'The following is the content of `NewsController`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `NewsController` 的内容：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, change the parameter in the `createUrl` parameter in `views/news/itemsList.php`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，修改 `views/news/itemsList.php` 中的 `createUrl` 参数：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Splitting the common view content into reusable views
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将通用视图内容拆分为可重用视图
- en: Sometimes, views share the same common portion of content. In the examples made
    until now, we have seen that a common area for `itemsList` and `itemDetail` could
    be copyright data, which displays a disclaimer about copyright info.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，视图会共享相同的内容部分。在到目前为止的例子中，我们已经看到 `itemsList` 和 `itemDetail` 的通用区域可以是版权数据，它显示有关版权信息的免责声明。
- en: In order to make this, we must put the common content in a separate view and
    call it using the `renderPartial()` method of controller ([http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail)).
    It has the same types of parameters of the `render()` method; the main difference
    between the `render()` and `renderPartial()` methods is that `render()` writes
    a view content in layout and `renderPartial()` writes only view contents to output.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们必须将通用内容放在一个单独的视图中，并使用控制器中的 `renderPartial()` 方法来调用它 ([http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail](http://www.yiiframework.com/doc-2.0/yii-base-controller.html#renderPartial%28%29-detail))。它具有与
    `render()` 方法相同的参数类型；`render()` 和 `renderPartial()` 方法的主要区别在于，`render()` 将视图内容写入布局，而
    `renderPartial()` 只将视图内容写入输出。
- en: Example – render partial in view
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 在视图中渲染部分内容
- en: In this example, we create a common view for both `itemsList` and `itemDetail`
    about copyright data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们为 `itemsList` 和 `itemDetail` 创建了一个关于版权数据的通用视图。
- en: Create a view file named `_copyright.php` in `views/news`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `views/news` 目录下创建一个名为 `_copyright.php` 的视图文件。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Usually, in Yii2's app, a view name that starts with underscore stands for common
    reusable view.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Yii2的应用中，以下划线开头的视图名称表示通用可重用视图。
- en: 'In this file, put only a text for copyright into `views/news/_copyright.php`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，只将版权文本放入 `views/news/_copyright.php`：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we want to display this view inside the `itemsList` and `itemDetail` views.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想在 `itemsList` 和 `itemDetail` 视图中显示这个视图。
- en: 'Change the content in `itemsList.php` located at `views/news/` as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将位于 `views/news/` 目录下的 `itemsList.php` 文件中的内容修改如下：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, change the content in `itemDetail.php` located at `views/news/` as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将位于 `views/news/` 目录下的 `itemDetail.php` 文件中的内容修改如下：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have put a common code at the top of the file in both views:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个视图中都把通用代码放在了文件顶部：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will render the content of the `_copyright.php` view without layout.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将渲染 `_copyright.php` 视图的内容，但不包含布局。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pay attention! Since `renderPartial()` is a method of the `Controller` class
    and `$this` refers to the `View` class in the view file, to access from `$this`
    to `renderPartial()` we will use the context member, which represents the `Controller`
    object in the `View` object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！由于 `renderPartial()` 是 `Controller` 类的一个方法，而 `$this` 在视图文件中指向 `View` 类，为了从
    `$this` 访问 `renderPartial()`，我们将使用上下文成员，它在 `View` 对象中代表 `Controller` 对象。
- en: Creating static pages
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建静态页面
- en: All websites contain static pages, whose content is static.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网站都包含静态页面，其内容是静态的。
- en: 'To create a static page in a common way, we need to:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要以常规方式创建一个静态页面，我们需要：
- en: Create a function (`action`) to execute action in `Controller`
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Controller`中创建一个执行操作的函数（`action`）
- en: Create a view for static content
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建静态内容的视图
- en: 'Append the following action to `Controller`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下操作追加到`Controller`：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, create a view in `views/controller/action-name.php`. This procedure is
    simple but too long and redundant.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`views/controller/action-name.php`中创建一个视图。这个过程很简单，但太长且冗余。
- en: 'Yii2 provides a quick alternative, adding static pages to the `actions()` method
    of `Controller` as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2提供了一个快速替代方案，将静态页面添加到`Controller`的`actions()`方法中，如下所示：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this simple declaration, we can put all static content under `views/controllerName/pages`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简单的声明，我们可以将所有静态内容放在`views/controllerName/pages`下。
- en: Finally, we can point to the URL with route `controller_name/page` and the `view`
    parameter with the name of a view file such as `http://hostname/basic/web/index.php?r=controllerName/pages&view=name_of_view`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过路由`controller_name/page`指向URL，以及通过视图文件名称（如`http://hostname/basic/web/index.php?r=controllerName/pages&view=name_of_view`）来指定`view`参数。
- en: Example – add a contact page
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 添加一个联系页面
- en: After we have learned how to create a static page, it is time to write a contact
    page.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习了如何创建静态页面之后，现在是时候编写一个联系页面了。
- en: 'Let''s put a short static content in `views/site/pages/contact.php` as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`views/site/pages/contact.php`中放置一段简短的静态内容，如下所示：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, let''s add a `page` attribute in the return array from the `actions()`
    method of `Controller`. To simplify, we will use `SiteController` that has this
    default implementation of the `actions()` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们在`Controller`的`actions()`方法返回的数组中添加一个`page`属性。为了简化，我们将使用具有此默认`actions()`方法实现的`SiteController`：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After the last attribute, we will append the `page` attribute, and the following
    will be the result:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个属性之后，我们将追加`page`属性，以下将是结果：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, every request to `site/pages/` is routed using the `ViewAction` class,
    which handles it simply by rendering static content of relative view.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个对`site/pages/`的请求都使用`ViewAction`类进行路由，它通过简单地渲染相对视图的静态内容来处理它。
- en: 'Test it by clicking on `http://hostname/basic/web/index.php?r=site/pages&view=contact`,
    and we should see this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击`http://hostname/basic/web/index.php?r=site/pages&view=contact`进行测试，我们应该看到以下内容：
- en: '![Example – add a contact page](img/B04656_02_06.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 添加一个联系页面](img/B04656_02_06.jpg)'
- en: 'We can customize the last part of the route with these changes:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这些更改自定义路由的最后部分：
- en: The attribute name of array returned from the `actions()` method of `Controller`
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`Controller`的`actions()`方法返回的数组中的属性名
- en: Set the `viewPrefix` attribute of the `ViewAction` class declaration with the
    first part of the URL that we want to use to reach the pages
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`ViewAction`类声明中的`viewPrefix`属性设置为我们要使用的URL的第一部分，以到达页面
- en: Change the name of the subfolder under `views/controllerName`
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改`views/controllerName`下的子文件夹名称
- en: For example, we want to use `static` as the last part of the URL to reach static
    pages in `SiteController`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想在`SiteController`中通过URL的最后部分使用`static`来访问静态页面。
- en: We want to point to `http://hostname/basic/web/index.php?r=site/static&view=contact`
    to display the contact view.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想指向`http://hostname/basic/web/index.php?r=site/static&view=contact`以显示联系视图。
- en: 'This will be the `ViewAction` node in the array from the `actions()` method
    of `SiteController`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是`SiteController`的`actions()`方法数组中的`ViewAction`节点：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We must also change the name of the static pages subfolder, renaming it from
    `views/site/pages` to `views/site/static`, and we can point to `http://hostname/basic/web/index.php?r=site/static&view=contact`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须更改静态页面子文件夹的名称，将其从`views/site/pages`重命名为`views/site/static`，并且我们可以指向`http://hostname/basic/web/index.php?r=site/static&view=contact`。
- en: Sharing data between views and layout
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图和布局之间的数据共享
- en: Yii2 provides a standard solution to share data between views and layout, through
    the `params` property of the View component that you can use to share data among
    views.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2通过视图组件的`params`属性提供了一种标准解决方案，该属性可用于在视图之间共享数据。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a standard solution since the `params` property exists in all views
    and it is attached to the View component.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准解决方案，因为`params`属性存在于所有视图中，并且它附加到视图组件上。
- en: This property, `params`, is an array that we can use without any restriction.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性，`params`，是一个我们可以无限制使用的数组。
- en: Imagine that we want to fill the breadcrumb element in the layout to track the
    path of navigation.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们想填充布局中的面包屑元素以跟踪导航路径。
- en: 'Open the main layout at `views/layouts/main.php`; you should find the default
    implementation of breadcrumb just before declaring the footer:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 打开主布局 `views/layouts/main.php`；你应该在声明页脚之前找到默认的面包屑实现：
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We need to fill the breadcrumbs property of `params` in view to display from
    any view to the layout custom path. For example, we want to display breadcrumbs
    in the `SiteController` index.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在视图中填充 `params` 的面包屑属性，以便从任何视图显示到布局的定制路径。例如，我们希望在 `SiteController` 的 index
    中显示面包屑。
- en: 'Go to `views/site/index.php` and add the following code at the top of the file:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 `views/site/index.php` 并在文件顶部添加以下代码：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since we are in view file, `$this` refers to View component.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处于视图文件中，`$this` 指的是视图组件。
- en: 'Go to `http://hostname/basic/web/index.php?r=site/index` to see the breadcrumb
    bar appearing at the top of the page:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 `http://hostname/basic/web/index.php?r=site/index` 以查看页面顶部的面包屑栏出现：
- en: '![Sharing data between views and layout](img/B04656_02_07.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![在视图和布局之间共享数据](img/B04656_02_07.jpg)'
- en: Example – change the layout background based on a URL parameter
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 根据URL参数更改布局背景
- en: Another example of communication between view and layout is, for instance, to
    change the layout background color based on a URL parameter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 视图和布局之间通信的另一个例子是，例如，根据 URL 参数更改布局的背景颜色。
- en: We need to change the background of route `site/index` passing the `bckg` parameter
    in URL.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过 URL 中的 `bckg` 参数更改路由 `site/index` 的背景。
- en: 'Therefore, we must open `views/site/index.php` and put this code at the top:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须打开 `views/site/index.php` 并将此代码放在顶部：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code will set $`backgroundColor` to `#FFFFFF` (white color), if it is not
    passed to the `bckg` parameter, otherwise it will be passed a value.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递到 `bckg` 参数，此代码将设置 `$``backgroundColor` 为 `#FFFFFF`（白色），否则它将传递一个值。
- en: Then, set the `params` attribute of View component in order to write its content
    in layout.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，设置视图组件的 `params` 属性，以便在布局中写入其内容。
- en: Open `views/layout/main.php`, and, in the `body` tag, apply the style based
    on `params['background_color']` passed from view.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `views/layout/main.php`，并在 `body` 标签中，根据从视图传递的 `params['background_color']`
    应用样式。
- en: 'Then, let''s change the layout of the body tag with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们使用以下方式更改 `body` 标签的布局：
- en: '[PRE24]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Finally, go to `http://hostname/basic/web/index.php?r=site/index&bckg=yellow`
    to have a yellow background or to `http://hostname/basic/web/index.php?r=site/index&bckg=#FF0000`
    to have a red one.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，访问 `http://hostname/basic/web/index.php?r=site/index&bckg=yellow` 以获得黄色背景，或访问
    `http://hostname/basic/web/index.php?r=site/index&bckg=#FF0000` 以获得红色背景。
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In this example, we are setting the `background` property of `params` only
    in `views/site/index.php`. Other views do not set this property, so if we have
    not checked whether `background_color` property exists in the layout file, we
    will receive an error of missing the attribute from the framework, which means:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们仅在 `views/site/index.php` 中设置 `params` 的 `background` 属性。其他视图没有设置此属性，因此如果我们没有检查布局文件中是否存在
    `background_color` 属性，我们将收到框架缺少属性的错误，这意味着：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Layout with dynamic block
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有动态块的布局
- en: The use of the `params` property to allow communication between view and layout,
    is advisable for simple cases, but there are some more complex cases where we
    must share the block of HTML.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `params` 属性允许视图和布局之间的通信，对于简单情况是可取的，但还有一些更复杂的情况，我们必须共享 HTML 块。
- en: For example, think about the advertising box in layout (usually left or right
    column of the template), that could change according to the view that is being
    displayed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑布局中的广告框（通常是模板的左侧或右侧列），它可以根据显示的视图而改变。
- en: In this case, we need to pass the entire block of HTML code from view to layout.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要从视图传递整个 HTML 块代码到布局。
- en: For this purpose, this framework provides Block statements, where we can define
    entire blocks of data to send from view to layout.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，这个框架提供了 Block 语句，我们可以定义整个数据块从视图发送到布局。
- en: Using Blocks means to define the `Block` statement in view and display it in
    another view, usually layout.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blocks 的意思是，在视图中定义 `Block` 语句并在另一个视图中显示它，通常是布局。
- en: 'We define the `Block` statement in view as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在视图中定义了 `Block` 语句如下：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, `beginBlock` and `endBlock` define the beginning and the end of the `block1`
    named statement. This content is saved into the `blocks` property of the view
    component with the `block1` attribute.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`beginBlock` 和 `endBlock` 定义了名为 `block1` 的语句的开始和结束。此内容被保存到具有 `block1` 属性的视图组件的
    `blocks` 属性中。
- en: We can access this block through `$view>blocks[$blockID]` in every view, including
    layout.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在每一个视图（包括布局）中使用`$view>blocks[$blockID]`来访问这个块。
- en: 'To render a block in layout view, if available, use the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有布局视图可用，要渲染一个块，可以使用以下代码：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Obviously, we can define all the blocks that we want.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们可以定义我们想要的全部块。
- en: Example – add a dynamic box to display advertising info
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 添加一个动态框以显示广告信息
- en: In this example, we will see how to display, when available, a box with advertising
    info that displays data sent from view.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将看到如何显示，当可用时，一个带有广告信息的框，该框显示从视图发送的数据。
- en: The first thing to do is to add a block in layout displaying data.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 首件事是向布局中添加一个显示数据的块。
- en: 'Enter in `views/layouts/main.php` and change `div` with container class as
    follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在`views/layouts/main.php`中输入并更改具有容器类的`div`如下：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have added a div with the `well` class to display the content of `blockADV`,
    if available. If `blockADV` is available in `$this->blocks`, it will display its
    content; otherwise, it will display `no content available`, as a courtesy message.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了一个带有`well`类的`div`来显示`blockADV`的内容，如果有的话。如果`blockADV`在`$this->blocks`中可用，它将显示其内容；否则，它将显示`no
    content available`，作为一个礼貌信息。
- en: Now, we will create a new action in `NewsController`, called `advTest`, and
    then will create a brand new view.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`NewsController`中创建一个新的动作，名为`advTest`，然后创建一个全新的视图。
- en: 'Let''s start off by creating a file in `views/news/advTest.php` with the following
    content:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`views/news/advTest.php`中创建一个包含以下内容的文件开始：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can insert any content in a block; in this case, we have put in text.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在块中插入任何内容；在这种情况下，我们放入了文本。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The position where block is defined in view is not important.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 视图中定义块的位置并不重要。
- en: 'Then, open `NewsController` and add a new action `advTest`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`NewsController`并添加一个新的动作`advTest`：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, point the browser to `http://hostname/basic/web/index.php?r=news/adv-test`
    and we will see the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将浏览器指向`http://hostname/basic/web/index.php?r=news/adv-test`，我们将看到以下截图：
- en: '![Example – add a dynamic box to display advertising info](img/B04656_02_08.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![示例 - 添加一个动态框以显示广告信息](img/B04656_02_08.jpg)'
- en: All other pages will only show `no content available` in the screenshot.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他页面在截图中只会显示`no content available`。
- en: Using multiple layouts
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个布局
- en: During the building of a website or a web application, usually it could be required
    to render different views with different layouts. Think about, for example, the
    lists and details of news made in this chapter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网站或网络应用程序的过程中，通常可能需要渲染具有不同布局的不同视图。例如，考虑本章中制作的新闻列表和详情。
- en: The layout is managed by the `$layout` property of `Controller`; `main` is the
    default value for this property.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 布局由`Controller`的`$layout`属性管理；`main`是这个属性的默认值。
- en: Just set this property to change the layout file where to render the content
    of the view.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 只需设置此属性以更改渲染视图内容布局的文件。
- en: 'There are some important rules to write the value of the `$layout` property:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写`$layout`属性的值时，有一些重要的规则：
- en: A path alias (for example, `@app/views/layouts/main`).
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径别名（例如，`@app/views/layouts/main`）。
- en: An absolute path (for example, `/main`) is where the layout value starts with
    a slash. The actual layout file will be looked for under the application layout
    path, which defaults to `@app/views/layouts`.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对路径（例如，`/main`）是指布局值以斜杠开头的地方。实际的布局文件将在应用程序布局路径下查找，默认为`@app/views/layouts`。
- en: A relative path (for example, `main`) is where the actual layout file will be
    looked for under the context module's layout path, which defaults to the `views/layouts`
    directory under the module directory.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对路径（例如，`main`）是指实际的布局文件将在上下文模块的布局路径下查找，默认为模块目录下的`views/layouts`目录。
- en: The Boolean value false is where no layout will be applied.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值`false`表示不应用任何布局。
- en: Note
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the layout value does not contain a file extension, it will use the default
    `.php`.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果布局值不包含文件扩展名，它将使用默认的`.php`。
- en: Example – using different layouts to create responsive and nonresponsive content
    layout for the same view
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用不同的布局为同一视图创建响应式和非响应式内容布局
- en: In this example, we will create a new action in `NewsController` that will change
    its layout depending on a value passed in the URL.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将在`NewsController`中创建一个新的动作，该动作将根据URL中传递的值改变其布局。
- en: 'First, add a new action in `NewsController` called `actionResponsiveContentTest`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`NewsController`中添加一个名为`actionResponsiveContentTest`的新动作：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this action, we get a responsive parameter from the URL and set the `$responsive`
    variable to this value or 0 if not passed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作中，我们从URL中获取一个响应参数，并将`$responsive`变量设置为这个值或如果没有传递则设置为0。
- en: Then, set the `$layout` property of `Controller` to responsive or not according
    to the `$responsive` value, and pass this variable to view.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据`$responsive`值将`Controller`的`$layout`属性设置为响应或不响应，并将这个变量传递给视图。
- en: 'Then, create a new view in `views/news/responsiveContentTest.php`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`views/news/responsiveContentTest.php`中创建一个新的视图：
- en: '[PRE32]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This displays a different text block according to the `$responsive` value.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `$responsive` 值显示不同的文本块。
- en: 'Finally, make a clone of main layout copying `views/layouts/main.php` in `views/layouts/responsive.php`
    and change in a new file `views/layouts/responsive.php`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将主布局克隆到`views/layouts/responsive.php`中，复制`views/layouts/main.php`，并在新的文件`views/layouts/responsive.php`中进行更改：
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This change makes the div container fluid (responsive), in other words, its
    content is resized with respect to percentage available in the horizontal space
    (instead the fixed value).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改使div容器变为流体（响应式），换句话说，其内容根据水平空间中可用的百分比进行缩放（而不是固定值）。
- en: If we point to `http://hostname/basic/web/index.php?r=news/responsive-content-test`,
    we will see content in a fixed layout. Instead, if we pass the `responsive` parameter
    with value 1, `http://hostname/basic/web/index.php?r=news/responsive-content-test&responsive=1`,
    we will see the content in a full width screen.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指向`http://hostname/basic/web/index.php?r=news/responsive-content-test`，我们将看到固定布局的内容。相反，如果我们传递带有值1的`responsive`参数，即`http://hostname/basic/web/index.php?r=news/responsive-content-test&responsive=1`，我们将看到全宽屏幕的内容。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, after understanding how a Yii2 app is structured, we have created
    our first Controllers and relative views. We have seen static and dynamic views,
    we have learned how to render views in layout and pass data from Controller to
    View and then we have looked at reusing Views through partial views and blocks.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，在了解Yii2应用的架构之后，我们创建了我们的第一个控制器和相关的视图。我们看到了静态和动态视图，我们学习了如何在布局中渲染视图，如何从控制器传递数据到视图，然后我们通过部分视图和块来查看视图的重用。
- en: Finally, we have manipulated layouts, changing them conditionally.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已操纵布局，有条件地改变它们。
- en: In the next chapter, we will display URLs in a pretty format, which is very
    important for all **search engine optimization** (**SEO**) activities on the website.
    Then, we will learn how to create a custom URL handler to manage any required
    URL customizations.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将以美观的格式显示URL，这对于网站上所有**搜索引擎优化**（**SEO**）活动非常重要。然后，我们将学习如何创建自定义URL处理程序来管理任何所需的URL自定义。
