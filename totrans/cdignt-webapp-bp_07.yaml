- en: Chapter 7. Creating an E-Commerce Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a small, concise e-commerce application. There's no admin CMS to manage
    products (it would have been too much to write about in this chapter), but there
    is an easy-to-use (and importantly for you easy to adapt) process to display products
    and let customers order them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will create a simple shopping cart. This application will
    allow customers to view products, filter products by category, and add products
    to their cart.
  prefs: []
  type: TYPE_NORMAL
- en: It will also let customers alter their shopping cart by removing items or changing
    the quantity of these items.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is a customer details form that allows their personal details
    to be saved against an order for processing.
  prefs: []
  type: TYPE_NORMAL
- en: To create the web application for this project, we will create one controller;
    this will handle the display of products, amend the quantities of products in
    the cart, and also handle the processing of orders.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a language file to store text, which will allow you to have multiple
    language support should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and a model to interface with the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app along with all the others in this book relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*; although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should take a look at what we plan to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we will provide a brief description of our intent. We plan to build
    an app that will allow people to view products as an online shop. They can sort
    these products by category. Add products to a cart and enter their details to
    create an order. A special code called `order_fulfilment_code` is generated (saved
    in the database in `orders.order_fulfilment_code`). This code will allow you to
    track any order through a payment system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So that''s the site map—the first thing to notice is how simple the site is.
    There are only four main areas to this project. Let''s go over each item and get
    a brief idea of what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home**: This is the initial landing area. The `index()` function displays
    products to view and also displays categories with which a user can filter the
    products to see items related to that category. So, by clicking on the Books category,
    they will see only products that are assigned the category as books.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add to cart**: This processes the addition of a product to the user''s cart.
    The number of items in a cart is presented in the navigation bar at all times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cart**: This displays a list of items in the cart as well as an option to
    increase or decrease the number of each items in that cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proceed to checkout**: This displays a form to the users, inviting them to
    enter their information. Once they press Go, their order and details are added
    to the database for processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: Home – index()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **1** (the Home (`index()`)
    item) in the site map. Initially, the user is shown a list of products. This list
    is not filtered. On the right-hand side of the wireframe is a list of categories
    (as found in the `categories` table). The user is able to click on these categories
    to filter the results they view on the left-hand side, and clicking on All Categories
    clears the filter once more.
  prefs: []
  type: TYPE_NORMAL
- en: Beneath each product is the **Add to cart** button, which allows the user to
    add a particular product to their cart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Home – index()](img/7093OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add to cart – add()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a user clicking and adding a product to their
    cart. This is done by clicking on an **Add to** **cart** button below a particular
    product. Clicking on this button will call the `shop` controller's `add()` function,
    which will then call the CodeIgniter `Cart` class' `$this->cart->insert()` function,
    which will add the product to the cart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Add to cart – add()](img/7093OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cart – display_cart()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point 3 (the Cart `display_cart()`
    item) in the site map. The user is presented with a list of items currently in
    the cart. The `display_cart()` function is accessed in two ways—either by clicking
    on the **Cart** link in the top navigation menu or immediately after clicking
    on **Add to cart** under a product displayed in point **1** (the Home `index()`
    item) in the site map. Adjusting the value in the text box under Quantity and
    pressing the **Update Cart** button will increase or decrease the number of that
    product in the cart.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Proceed to check out will call the `user_details()` function from point
    **4** (the Proceed to checkout item) in the site map.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cart – display_cart()](img/7093OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: User Details – user_details()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **4** (the Proceed
    to checkout `user_details()` item) in the site map. The user is presented with
    a form in which they can add their contact and delivery details for the order.
    Once the user enters their details and presses Go, their order (content of the
    cart) and contact details are written to the `orders` and `customer` tables, which
    are joined in the `orders` table by the customer ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![User Details – user_details()](img/7093OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a relatively small project, and all in all, we''re only going to create
    seven files; these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/shop_model.php`: This provides read/write
    access to the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`: This displays
    a list of products to the user, allows them to add a product to the cart, and
    filters products by categories—as defined in the `categories` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`: This displays
    the contents of the cart to the user. There are form options to amend product
    quantities and proceed to the checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/user_details.php`: This displays
    a form to the user, allowing them to enter their contact details for their order
    fulfillment. User information is stored in the `customer` table, which is joined
    to the `orders` table—in the `orders` table—by the `customer` table''s primary
    key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/shop.php`: This contains all
    the necessary functions to display products, add products to a cart, amend that
    cart, and process the customer details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding seven files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However, it's not the end of the world if you haven't;
    the code can easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll build the database. Copy the following MySQL code to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now take a look at that last bit of SQL code; it's quite big and fiddly. Don't
    panic; all SQL code is available online from this book's support page on the Packt
    website.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that the first table we create is `ci_sessions`. We need this to
    allow CodeIgniter to manage sessions, specifically, a customer's cart. However,
    this is just the standard session table available from the *CodeIgniter User Guide*,
    so I'll not include a description of that table as it's not technically specific
    to this application. However, if you're interested, there's a description at [http://ellislab.com/codeigniter/user-guide/libraries/sessions.html](http://ellislab.com/codeigniter/user-guide/libraries/sessions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Right, let's take a look at each item in each table and see what it means. First
    we will see the `categories` table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: categories |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_id` | This is the primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_name` | This is the name of the category, and it is displayed as a title
    in the right-hand side category filter list in the `views/shop/display_products.php`
    file |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_url_name` | This is the short version of the `cat_name` element; it
    is used as the third parameter of the URL when a user clicks on a category in
    the right-hand side category filter list in the `views/shop/display_products.php`
    file |'
  prefs: []
  type: TYPE_TB
- en: 'Now take a look at the `products` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: products |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `product_id` | This is the primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `product_name` | This is the name of the product |'
  prefs: []
  type: TYPE_TB
- en: '| `product_code` | This is a place where you can store your internal reference
    code for the product |'
  prefs: []
  type: TYPE_TB
- en: '| `product_description` | This is the description of the product |'
  prefs: []
  type: TYPE_TB
- en: '| `category_id` | This is the category that the product belongs to, and it
    is the primary key of the `categories` table |'
  prefs: []
  type: TYPE_TB
- en: '| `product_price` | This is the price of the product |'
  prefs: []
  type: TYPE_TB
- en: 'Next we will see the `customer` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: customer |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_id` | This is the primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_first_name` | This is the customer''s first name |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_last_name` | This is the customer''s last name |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_email` | This is the customer''s e-mail address |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_created_at` | This is the MySQL timestamp of the date on which the
    row was created in the database |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_address` | This is the customer address (payment address) |'
  prefs: []
  type: TYPE_TB
- en: 'Finally, let''s see the `orders` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: orders |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `order_id` | This is the primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `cust_id` | This is the primary key of the customer from the `customer` table
    |'
  prefs: []
  type: TYPE_TB
- en: '| `order_details` | This is a serialized dump of the `cart` table populated
    by the `serialize($this->cart->contents()` `)` line |'
  prefs: []
  type: TYPE_TB
- en: '| `order_subtotal` | This is the value of the order |'
  prefs: []
  type: TYPE_TB
- en: '| `order_created_at` | This is the MySQL timestamp of the date the row that
    was created in the database |'
  prefs: []
  type: TYPE_TB
- en: '| `order_closed` | The default value is `0` but can be `1`. `0`; it indicates
    that this is a new order, and `1` is that the order has been fulfilled |'
  prefs: []
  type: TYPE_TB
- en: '| `order_fulfilment_code` | This is the value of the `$payment_code` generated
    in the `shop` controller''s `user_details()` function, and it can be used to track
    the order through a payment system |'
  prefs: []
  type: TYPE_TB
- en: '| `order_delivery_address` | This is the delivery address of the order |'
  prefs: []
  type: TYPE_TB
- en: We'll also need to make amends to the `config/database.php` file, namely setting
    the database access details, username password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation; so, enter your username,
    password, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the config.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few things in this file that we''ll need to configure to support
    sessions and encryption. So open the `config/config.php` file and make the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to set an encryption key; both sessions and CodeIgniter''s encryption
    functionality require a encryption key to be set in the `$config` array, so find
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Now obviously, don't actually change the value to literally a-random-string-of-alphanum-characters;
    instead, change it to, er, a random string of alphanum characters—if that makes
    sense? Yeah, you know what I mean.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the lines with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to redirect the user to the `shop` controller rather than the default
    CodeIgniter `welcome` controller. We will need to amend the default controller
    setting in the `routes.php` file to reflect this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file for editing and find the following lines
    (near the bottom of the file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Firstly, we need to change the default controller. Initially in a CodeIgniter
    application, the default controller is set to `welcome`; however, we don''t need
    that. Instead, we want the default controller to be `shop`. So, find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one model in this project—`shop_model.php`—which contains functions
    that are specific to searching and writing products to the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is our one and only model for this project; let's briefly go over each
    function in it to give us a general idea of what it does, and then we will go
    into more detail in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five main functions in this model, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_product_details()`: This accepts one argument—the `$product_id`—of the
    product being added to the cart and returns a database result object that contains
    information about a specific product. This model function is used by the `shop`
    controller''s `add()` function to fetch the correct details about a product before
    it is added to the cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_all_products()`: This accepts no argument. This model function will return
    a list of products (as defined in the `products` table) to the `shop` controller''s
    `index()` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_all_products_by_category_name()`: This accepts one argument—`$cat_url_name`
    (defined in the database as `categories.cat_url_name`). This function is called
    if a user has clicked on a category filter link (displayed on the right-hand side
    of the wireframe in the *Home – index()* section of this chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_all_categories()`: This fetches categories from the `categories` table.
    It is used to populate the categories list (displayed on the right-hand side of
    the wireframe in the *Home – index()* section of this chapter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_cart_to_database()`: This accepts two arguments: `$cust_data` and `$order_data`.
    The `$cust_data` is data submitted by the user in point **4** (the Proceed to
    checkout `user_details()` item) in the site map, and `$order_data` is the contents
    of their cart. The customer data is added to the `customer` table and the primary
    key that''s generated is used as a foreign key in the `orders` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That was a quick overview, so let's create the model and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/shop_model.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `get_product_details()` function returns a list of all products.
    This function is called by the `shop` controller's `index()` function if the user
    hasn't filtered any results, that is, they haven't clicked on a category link
    in the `views/shop/display_products.php` file:products() {
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding `get_all_products()` function returns a list of products with
    a filter applied. This function is called by the `shop` controller''s `index()`
    function if the user has filtered the products by a category, that, they have
    clicked on a category link in the `views/shop/display_products.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding `get_all_products_by_category_name()` function returns a list
    of all categories in the `categories` table. This model function is called from
    the `shop` controller''s `index()` function to supply data to the product categories
    list on the right-hand side of the `views/shop/display_products.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `get_all_categories()` function returns a list of all categories
    in the `categories` table. This list is used in the `views/shop/display_products.php`
    file where a `foreach` loop iterates over the database object and displays the
    categories to the user. A user can then click on a category and filter their results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, take a look at the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `save_cart_to_database()` function saves an order to the database;
    it converts the data in a cart, along with the data entered by the user in the
    `views/shop/user_details.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the model is fairly straightforward and concise, so let's now
    take a look at the views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four views in this project, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`: This displays
    a list of products to the user and allows them to add products to their cart and
    also filter products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`: This displays
    all products in the user''s cart, allows them to alter the quantities of products
    in their cart, and also gives an option to move to the checkout stage. This is
    a customized version of the cart template available from the CodeIgniter documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/user_details.php`: This displays
    a form to the user, allowing them to enter information about their order, such
    as their contact details and delivery address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this is very simple, containing a project name
    and link to go to the `` shop` `` controller and a link named **Cart**; there
    is a variable positioned next to the word Cart, displaying the value (0 by default);
    however, this is in fact the number of items in the cart at any one time. If there
    were seven items in the cart, the link would say Cart (7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That was a good overview of the views; now let's go over each one, build the
    code, and discuss how they function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/shop/display_products.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block of code outputs a list of products and displays them with
    a description (`products.product_description`), price (`products.product_price`),
    and link to add to cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `foreach` loop is used to iterate over the products in `$query`. The `$query`
    value is populated by data returned by the `get_all_products()` function of `Shop_model`;
    or, if the user has filtered by a category (explained in the following HTML),
    then `$query` is populated by the `get_all_products_by_category_name()` function
    of `Shop_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block of code outputs a list of categories that the user can use
    to filter results. We use a `foreach` loop to iterate over the `$cat_query` array.
    This array is supplied by the `get_all_categories()` function of `Shop_model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/shop/display_cart.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This view is responsible for displaying the contents of the cart to the user
    and also allowing the user to adjust item quantities in the cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following line of code; with it, we create the `$i` variable. This
    variable is incremented in the `foreach` loop. We use the `$i` variable to give
    the product quantity textbox a unique name, that is, 1, 2, 3, 4, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This `foreach` loop iterates over each item in the CodeIgniter `Cart` class''s
    `$this->cart->contents()` function. Each iteration is treated as the `$item` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `foreach` loop, we display a button to the user. The following code
    is for the button that will submit the form along with any adjusted item quantities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `/path/to/codeigniter/application/views/shop/user_details.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block of code creates a form into which the user can enter contact
    details necessary for fulfilling their order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding block of code creates the navigation menu at the top of the page.
    Take a look at the code in bold, shown again here (restructured):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block of code displays the word Cart along with a value in brackets.
    This value is initially set to 0 (zero). However, this value is in fact the quantity
    of items in the cart—if no items are in the cart, that number will be zero by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, we use a PHP ternary operator to switch between displaying zero
    and the actual number of items in the cart. If the number of items is greater
    than zero, then there must be some items in the cart. So, we display that number
    of items, otherwise we display zero.
  prefs: []
  type: TYPE_NORMAL
- en: The word Cart is set in the language file, but what about the value of the number
    of cart items? Where does that come from?
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of items in the cart is calculated from several functions in the
    `shop` controller, which are `index()`, `update_cart()` and `user_details()`.
    Let''s take a look at just one of these (as they all work the same) and see how
    it works in the `index()` function; check out the following code segment from
    the `index()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We fetch the contents of the cart stored in the `cart_contents` session item
    and store it in the `$cart_contents` variable (to keep it simple).
  prefs: []
  type: TYPE_NORMAL
- en: The CodeIgniter `Cart` class automatically keeps a running total of the number
    of all items currently in the cart and conveniently stores it in the `total_items`
    item in the `$cart_contents` array.
  prefs: []
  type: TYPE_NORMAL
- en: We then assign `$data['items']` the value of `total_items` (which should be
    the number of items in the cart) and send it to the `nav/top_nav.php` view file
    where is it displayed next to the word Cart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/shop.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go over that controller now, look at the code, and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/shop.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We want to display the correct products and as such, we need to test whether
    the user has clicked on one of the filter links on the right-hand side of the
    `views/shop/display_products.php` file. We test for the presence of a third `uri`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: If the third parameter does not exist, then we can safely assume the user does
    not want any filtering. So we call the `get_all_products()` function of `Shop_model`.
  prefs: []
  type: TYPE_NORMAL
- en: If a third parameter exists, then the user must be filtering their results.
    So we call the `get_all_products_by_category_name($this->uri->segment(3))` function,
    passing to it the third parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The third parameter comes from the `categories.cat_url_name` column in the database,
    which is written out in the `views/shop/display_products.php` file by a `foreach`
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The loop iterates over the `cat_query` database object, which is populated
    by the `get_all_categories()` function of `Shop_model`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned in the preceding paragraph, the `get_all_categories()` function
    of `Shop_model` is called, returning its result to `$data[''cat_query'']`. In
    the `views/shop/display_products.php` file, it is iterated over with a `foreach`
    loop to create a list of categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we fetch the number of items in the cart from the `cart_contents` session
    item. A full explanation of this is in the *Creating the views* section of this
    chapter, specifically in the explanation for the `/path/to/codeigniter/application/views/nav/top_nav.php`
    view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `add()` function adds an item to the cart. It is called from
    the `views/shop/display_products.php` file when a user clicks on Add to cart.
    The third parameter of the link in **Add to cart** is the product ID (`products.product_id`).
    We grab the product ID from the URI (it''s the third segment) and pass it to the
    `get_product_details($product_id)` function of `Shop_model`. This will return
    the product details in the `$query` variable. We loop over `$query`, pulling out
    the individual details for the product and saving them to the `$data` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We save the `$data` array to the cart using the CodeIgniter `Cart` class''s
    `$this->cart->insert();`function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We then fetch a list of all categories and the new number of items in the cart
    and send them to the `nav/top_nav.php` view file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `shop/display_cart.php` view file will loop over the contents of the cart
    using the CodeIgniter `Cart` class''s `$this->cart->contents()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `update_cart()` function is called when the user clicks on the **Update
    Cart** button in the `views/shop/display_cart.php` file. When it is called, it
    loops over the input posted from the form in `views/shop/display_cart.php` and
    saves it to the `$data` array; let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: First we create an array called `$data` in which we can store the adjusted cart
    data (we'll use this later). Then, we create a `$i` variable; we'll use this to
    create a multidimensional array, incrementing the value of `$i` on every iteration
    of the loop—with `$i` keeping the `rowid` value (the ID of the product in the
    cart) and `qty` value linked and related to each other.
  prefs: []
  type: TYPE_NORMAL
- en: We loop over the posted data (from the form in `views/shop/display_cart.php`),
    treating each iteration of the loop as `$item`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `$item` has a `rowid` element (the position of the product in the cart)
    and `qty`, which is the adjusted product quantity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the cart data has been looped over and any quantity adjustments made,
    we''ll use the CodeIgniter `Cart` class''s `$this->cart->update()` function to
    update the cart. We then redirect the user using the `redirect()` function to
    the `shop` controller''s `display_cart()` function, which will report the new
    values to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual iteration over the cart data is done in the `views/shop/display_cart.php`
    view file, but the `display_cart()` function exists to offer a specific way to
    view items in the cart. Calling this function loads the `views/shop/display_cart.php`
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `user_details()` function is responsible for displaying a form to the user,
    allowing them to enter their contact details, validating those details, and converting
    their cart to an order. Let's look in detail at how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, we start by setting the validation rules for the form submission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is the initial page load or there were errors with the submission of
    the form, then the `$this->form_validation->run()` function will return `FALSE`.
    If either of these happens, then we will begin to build the form elements, defining
    the settings for each form item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we fetch the number of items in the cart from the `cart_contents` session
    item. A full explanation of this is in the *Creating the views* section of this
    chapter under the explanation for the `/path/to/codeigniter/application/views/nav/top_nav.php`
    view file. After we have the contents of the cart for the **Cart** link in the
    navigation bar, we''ll load the `views/shop/user_details.php` file, which will
    do the job of displaying the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If, however, there were no errors with the form when it was submitted, then
    we will arrive at the following code. We define two arrays—one called `$cust_data`,
    which will store the information submitted by the user in the form in the `views/shop/user_details.php`
    file and the other called `$order_details`, which will store a serialized dump
    of the cart. So, the following block of code saves the users'' form data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$payment_code` value acts as a type of hook that you can use for payment
    processing. For example, most payment processing systems support the addition
    of a *code*—usually a string of text and/or numbers that are generated by the
    shop application, saved to the database, and sent off to the payment provider.
    After the payment, a webhook script will receive a signal from the payment processing
    system containing a success or error message (the success or error of the attempted
    payment from the customer''s bank account), along with the *code*. This way, you
    can ensure that the correct order has been paid for (or not); anyway, `$payment_code`
    is the following method in the current project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code saves the cart data to the `$order_data` array.
    The contents of the cart are fetched from the cart by the CodeIgniter `Cart` class''s
    `$this->cart->contents()` function. The retuned array is passed to the `serialize()`
    PHP function and is written to `$order_data[''order_details''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now that the customer's contact details and order details are in arrays, we
    can start to save them to the database. We call the `save_cart_to_database()`
    function of `Shop_model`, passing to it the `$cust_data` and `$order_data` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `save_cart_to_database()` function of `Shop_model` first saves the customer
    to the `customer` table, returning the primary key of the insert and using that
    primary key as the foreign key value that goes in `orders.cust_id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, here are a few examples that will help put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering a search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you filter a search, the following events take place:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and CodeIgniter routes them to the `shop` controller.
    The `shop` controller loads the `index()` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function recognizes that there is no third parameter in the URL,
    so it calls the `get_all_products()` function of `Shop_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function loads the `get_all_categories()` function of `Shop_model`,
    passing the retuned result to `$data['cat_query']`. This is passed to the `views/shop/display_products.php`
    file, which—using a `foreach` loop—echoes out the categories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user clicks on a category in the list. The URL calls the `index()` function,
    but this time with a third parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function recognizes this third parameter and loads the `get_all_products_by_category_name()`
    function of `Shop_model`, passing it the third `uri` segment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_all_products_by_category_name()` function of `Shop_model` then looks
    in the `categories` table for a category whose `categories.cat_url_name` value
    matches that supplied in the third parameter and returns the primary key of the
    category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It then looks in the `products` table for all products whose `products.category_id`
    value matches the primary key of the category found in just the previous step
    using `get_all_products_by_category_name()` and then returns the query to the
    `shop` controller's `index()` function, where it is sent to the `views/shop/view_products.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding to cart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sequence of events to add items to a cart is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the site and CodeIgniter routes them to the `shop` controller.
    The `shop` controller loads the `index()` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function recognizes that there is no third parameter in the URL,
    so it calls the `get_all_products()` function of `Shop_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a `foreach` loop, the `views/shop/display_products.php` file iterates
    over the result object from `get_all_products()` and displays each product in
    turn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user clicks on the **Add to cart** button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter calls the `shop` controller's `add()` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `add()` function grabs the product ID from the third `uri` segment and sends
    it to the `get_product_details()` function of `Shop_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_product_details()` function looks in the `products` table for the product
    whose primary key matches that in the argument passed to it and returns it to
    the `$query` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a `foreach` loop, we iterate over `$query`, fetching the details of the
    product, such as `product_name` and `product_price`, and saving them to an array
    called `$data`, which we will add to the cart. We also set the `qty` value to
    `1` (as they're only adding one item).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the CodeIgniter `Cart` class's `$this->cart->insert()` function, we add
    the product to the cart by passing it the `$data` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then direct the user to `display_cart()` to make any amends should they wish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Altering the product quantity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The user can access the cart in one of these two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on **Cart** in the navigation bar at the top of the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By being directed there automatically once they add an item to their cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll pick up the story assuming that the user has used either of these methods
    (as they both drop us here):'
  prefs: []
  type: TYPE_NORMAL
- en: CodeIgniter calls the `display_cart()` shop function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bulk of the work in displaying the cart occurs in the `views/shop/display_cart.php`
    file, which is a modified version of the template found in the CodeIgniter documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A variable called `$i` is created and given the value of `1`; this will increment
    as the loop iterates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a `foreach` loop, we iterate ever the CodeIgniter `Cart` class's `$this->cart->contents()`
    function. For each iteration, we call `$item`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An iteration writes the details of each product to an HTML table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An HTML text input is created called `$i`, so if the current iteration is `1`,
    then the name of the textbox will be `1`, and if the current iteration is `4`,
    the name of the textbox will be `4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are three items in the cart (three rows). Each row shows that there is
    one item of each of the three products in the cart. The user wishes to change
    the quantities of the product in the third row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user selects the value of the textbox named `3` and replaces the value in
    that textbox with the number `2` (which means that the user wishes to buy one
    item of product 1, one item of product 2, and two items of product 3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user presses the **Update Cart** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CodeIgniter calls the `update_cart()` shop function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `update_cart()` function adjusts the quantity of the third product in the
    cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a detailed breakdown, check out the explanation in the *Creating the controllers*
    section of this chapter—look for the `update_cart()` function description.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, you saw the beginnings of a great shop platform. As always,
    there are a few things you can do to expand upon the functionality, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product CMS**: This project doesn''t come with a CMS to manage products or
    categories—this is simply because adding such a functionality would have been
    far too big a topic to cover. However, perhaps you could add some sort of functionality
    to govern products, adding new ones, deleting old ones, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product images**: You could add a column to the `products` table where an
    image file name can be stored and then echo out that value in an HTML `<img src="img/li>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``**Product pages**: You could add a link to the product title, opening a new
    page and displaying detailed information about that product, such as color, size,
    weight, "what''s in the box", and so on. Of course, you''ll need to add extra
    columns to the `products` table to support the new information, but this can be
    done quite easily.``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**BOGOFF**: Verb, British slang—an encouragement from one person to another
    to leave! Depart! Never to be seen again!  Well, not quite, but you could add
    a **Buy One Get One Free** (erm, not sure about the last F) option. You could
    add logic so that if a certain number of products are selected, a discount is
    applied.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
