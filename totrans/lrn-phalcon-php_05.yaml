- en: Chapter 5. The API Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An **Application Programming Interface** (**API**) is the most common way of
    exposing services to third parties, and lately, most of the software out there
    is driven by APIs. Why? Because, by having an API for your application, not only
    is it easy to implement a fully functional HTML + JS frontend, but you can also
    use it if you develop a mobile application, for example. In this chapter, we will
    implement most of the functionalities needed for our project, covering topics
    such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: Using APIs—recommended practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling SSL on our local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the module structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a fully functional REST module with Phalcon PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing an API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using APIs – recommended practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are completely new to APIs, I recommend that you read at least the basics
    about developing an API. In the simplest way, an API response can be created with
    plain PHP, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to talk about some general rules that you should follow
    when developing an API, which are discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use plural nouns instead of verbs, use concrete names, and make use of HTTP
    verbs (`GET`, `POST`, `PUT`, and `DELETE`) to operate on them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This format is bad:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This format is good:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use verbs when the response does not involve a resource:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Always version your API. In this way, when you make changes to your application,
    you ensure backward compatibility. Some examples are given here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Always use a secure connection (HTTPS), as you can see in the preceding information
    box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allow data filtering and sorting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `camelCase` instead of `snake_case`. I know that using snake case it would
    be easier to read, and I agree with you. But since (I assume that) you are going
    to represent your data in JSON format, you should use the JavaScript naming conventions.
    Anyway, this is a recommendation. After many years, I still cannot get used to
    camel case for these situations. In this book, I will use snake case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a business decision does not force you to expose XML format, go with JSON.
    From my point of view, XML is kind of dead.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few general rules. You are going to learn about a few more,
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't know much about APIs, please check out resources such as [https://blog.apigee.com/taglist/restful](https://blog.apigee.com/taglist/restful),
    [http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api),
    or *Web API design*, an e-book by Brian Mulloy (38 pages).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SSL on our local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will take into account one of the API rules: always use a secure connection.
    Assuming that you are using Nginx, this can be done in four easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory, `/etc/nginx/ssl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a new certificate using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point you will be asked to provide some information about the new certificate,
    as shown in the following diagram:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Enabling SSL on our local machine](img/B03522_05_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Open the `learning-phalcon.localhost` configuration file (`/etc/nginx/sites-available/learning-phalcon.localhost`)
    and enable SSL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then reload the Nginx configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you can try to access `https://learning-phalcon.localhost/`. In any browser
    that you are using, you will get a warning saying that the server certificate
    is not trusted. This is normal because it has not been signed by any authority.
    On Chrome, you should click on the **Advanced** link (seen in the following screenshot)
    and then on the **Proceed to learning-phalcon.localhost (unsafe**) link (shown
    in the next screenshot). Other browsers will have similar links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling SSL on our local machine](img/B03522_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click on **Advanced**, a new page will open and it should look like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling SSL on our local machine](img/B03522_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that your connection is not actually secured. The purpose of this was for
    us to be able to access our project via HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the module structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already created the basic structure in the previous chapters. The directory
    structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the module structure](img/B03522_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is okay. What we need to do here is enable the routing and add some methods
    to `BaseController` so that we can move forward. Let''s start this process by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `routing.php` file from the `api` module, delete its content, and
    put in this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we add an array with the available versions of our API, and we tell the
    router to remove extra slashes. Therefore, a request to `/api/v1/articles` will
    be the same as a request to `/api/v1/articles/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we make use of the router's capability of grouping and create a
    new group for the articles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we mount the `articles` group onto the router.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are a few things that we need to fix regarding the routing system. They
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be putting in new content in the global routing file (`config/routing.php`),
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the `modules/App/Core/Config/routing.php` file—we are not going to have
    any routes for the core module. This module is more like a library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, replace the content of `modules/Frontend/Config/routing.php` with
    this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new router group uses a controller named `Articles`, which does not exist.
    Now, let''s continue with further processes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create `ArticlesController.php` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the output after running the `ArticlesController.php`
    file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating the module structure](img/B03522_05_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, if you access `https://learning-phalcon.localhost/api/v1/articles`, you
    should see the same content as shown in the preceding screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s modify our base controller. Open `BaseController.php` and append
    this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we have left out some methods. For a complete class, check out the
    source code for this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s edit the `listAction()` function in `ArticlesController.php`. The
    new `listAction()`function will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now reopen `https://learning-phalcon.localhost/api/v1/articles` and
    check the result. You should see JSON-encoded text, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the module structure](img/B03522_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have the basics. Let's move forward with our project and develop its API.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a fully functional REST module with Phalcon PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting, I recommend that you use a RESTful client that will help you
    test things faster. Personally, I prefer DHC (it's a Chrome extension), which
    can be found at [https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en](https://chrome.google.com/webstore/detail/dhc-resthttp-api-client/aejoelaoggembcahagimdiliamlcdmfm?hl=en).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to develop the CRUD operations for `Articles`, `Categories`, `Hashtags`
    and `Users`. Let's start with `Articles`.
  prefs: []
  type: TYPE_NORMAL
- en: Articles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already created the controller, so by executing a `GET` method on `https://learning-phalcon.localhost/api/v1/articles`,
    you should get a response. Let's implement the article manager for the articles
    listing so that we can retrieve real data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will make some changes to the `Article` model and overwrite
    the `toArray()` method. Open `modules/Core/Models/Article.php` and append the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we append everything related to the article: translations,
    information about the author, categories, and hashtags.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the categories have translations, we will also overwrite the `toArray()`
    method from the category model. Open `modules/Core/Models/Category.php` and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: All we have to do now is implement a new method in the Article manager. We call
    that method from the Article controller, and we should have our first call ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `modules/Core/Managers/ArticleManager.php` and append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You will see that the method name is `restGet`. I like to append the `rest`
    prefix to my methods that are strictly used for APIs. It is a personal preference;
    you can use any naming conventions for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: The `restGet()` method will throw exceptions. If we request a list of articles
    and the request is successful but we don't have the articles in the database,
    we use HTTP code 204\. In simple words, it means, *Your request was okay, but
    I have no content*. We use HTTP `404 (not found)` if we try to get an article
    by ID but that article does not exist in our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to call this method from our controller. Open `modules/Api/Controllers/ArticlesController.php`
    and update the `listAction()` method with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! From your favorite API client, make a `GET` request to `http://learning-phalcon.localhost/api/v1/articles`,
    or do it from the command line with CURL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you did everything well, you should be able to see a response similar to
    what is presented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Articles](img/B03522_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have all of the information needed to render the most common data for
    an article. Consider, for example, if you are going to get this data with jQuery,
    it is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also append the page number in your request like this: `http://learning-phalcon.localhost/api/v1/articles?p=2`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with our CRUD operations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a service to retrieve a single article. Open the `routing.php`
    file from the `api` module, and append the following route to the `$articles`
    group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we add the `get()` method to `ArticlesController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it! You can now request an article that exists in your database, and
    you should get exactly the same structure. Also, the `items` key will contain
    only this article. In my case, it was the article with the ID equal to `6`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you request a non-existing article, you should get a response similar to
    what is shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Articles](img/B03522_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we are going to implement the `update` method for an article as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the routing information. Open `modules/Api/Config/routing.php`
    and append the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we use `PUT`, the recommended method for updating resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new method named `updateAction()` in `ArticlesController.php` with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `updateAction()`, we check whether the content-type header is of the `application/json`
    type. If it is, we call `getJsonRawBody()` from the request object. The `true`
    Boolean parameter means that we force decoding as an array. If the data is received
    via a form, we will make use of the `getPut()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Submitting data as a JSON body is the best approach from my point of view.
    Using jQuery, you can do this very simply, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s see how our `restUpdate()` method looks. Open `ArticleManager.php`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, for now, we are going to update only one field: `article_is_published`.
    If the article has been successfully updated, you will get the new update article
    as a response (check out the following screenshot). Now let''s test this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![Articles](img/B03522_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we don''t provide any data, we will get a `400 Bad Request` message, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Articles](img/B03522_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Well done! So far, we have exposed a service with three methods: `GET` for
    a list of articles, `GET` for a single article, and `PUT` for updating an article.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue developing the remaining two methods: `DELETE` (for deleting)
    and `POST` (for creation). Let''s start with the easier one, which is `DELETE`.
    To do so, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the API routing file and append the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we create a method named `deleteAction()` in `ArticlesController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the `restDelete()` method in `ArticlesManager.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before testing, we must make a small change to the `Articles.php` model by adding
    `\Phalcon\Mvc\Model\Relation::ACTION_CASCADE` to the foreign key for translations,
    otherwise, we will get an error message saying **Record is referenced by model
    App\\Core\\Models\\ArticleTranslation**. This change is needed because of the
    existing relation between articles and translations. When we delete an article,
    its translation will be automatically deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `modules/Core/Models/Article.php` file and replace the relation for translations
    with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now test our code, and the result should be similar to what is shown
    in the following screenshot. If the article was not found, you will receive a
    404 error instead of 200:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Articles](img/B03522_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! You can delete articles by simply making a `DELETE` request to the
    right URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s continue with the implementation of `POST` (to create an article).
    To do so, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `modules/Api/Config/routing.php` and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a `createAction()` method in `ArticlesController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The manager (`ArticleManager.php`) will contain a new method named `restCreate()`,
    but we will also update the `create()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s test the new code. Create a JSON body content and the `POST` method
    data to `/api/v1/articles` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to replace the user ID, and the IDs of the categories and hashtags
    that you have in your database. The result should be a newly created article,
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Articles](img/B03522_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Following the same rule as followed in `Articles`, you should try to develop
    the rest of the endpoints (categories, hashtags, and users). If you don't feel
    comfortable with it, you can always check out the source code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Securing an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, when you put something online, it is not secure anymore. Virtually
    anything can be hacked. What can you do in this case? Well, if you are not a billionaire
    who can afford huge investments in human resources and security software and hardware,
    all that you can do is try to make the attackers' life a bit rough and always
    monitor your stuff.
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of books about security and securing an API. We will try
    to implement a few basic security methods that can help you avoid a disaster.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what are these methods? Here is a list:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an API key for extra protection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit the number of requests per second from the same IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit access to resources, such as `DELETE`, `PUT`, `POST`, for authenticated
    users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SSL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to elaborate on SSL. Using a secure connection is how you need
    to go about it. SSL certificates are quite cheap these days. For example, the
    guys from [http://www.namecheap.com](http://www.namecheap.com) sell the multi-domain
    SSL certificate for 80 EUR per year.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an API key for extra protection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a white list of API keys in our global configuration. We will
    append an APIKEY header to all our requests and check it against the values from
    config. If the API key does not match, the server will respond with a `403 Forbidden`
    error. If you use this key in a JavaScript environment, everyone will be able
    to see it, but at least you can take control and change the API key in a second.
    Let''s implement the protection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/config.php` global configuration file and append this code
    to the `$config` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new directory named `Listeners` in `modules/Core/`, and create a new
    file named `ApiListener.php` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, inject this service into `dispatcher`. Open `modules/Api/service.php`
    and replace the `$di[''dispatcher'']` array with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you make a request using the following command line, you will notice that
    all you get is a `403 Forbidden` error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The `403 Forbidden` error is as presented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an API key for extra protection](img/B03522_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This happened because you didn''t provide the APIKEY header. All you need to
    do is provide the correct header with the correct key, and you will get the article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This is it! Of course, this method can be improved, but that is beyond the scope
    of this book. Additionally, you can map API keys with clients and/or IP addresses,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting the number of requests per second from the same IP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use a simple solution from Redis for limiting the number of requests
    per second from the same IP. Let''s assume that we want a limit of five requests
    per second from the same IP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `ApiListener.php` and add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `beforeExecuteRoute()` method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's all! You can easily test it by replacing `5` with `2`, and make some
    requests. You will get a 429 response. You can use this method in conjunction
    with API keys and users to limit the requests for a certain user.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting access to resources such as DELETE, PUT, and POST for authenticated
    users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are going to expose your API, you need to be sure that only authenticated
    users can access certain resources. This means that you shouldn''t access these
    resources from a public interface, for example, the frontend. A quick and convenient
    solution would be to use another header (let''s call it `TOKEN`) that will be
    used in CRUD operations from the admin interface. Let''s perform the following
    set of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''ll first add a new method, `resourceWithToken()`, in `ApiListener.php`
    as follows, and then update `beforeExecuteRoute()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the following code to the `beforeExecuteRoute()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you try `POST`, `PUT`, or `DELETE`, you will get a 405 error. From now on,
    you need to append the header named TOKEN with the `mySecretToken` value, as shown
    in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Remember that this will not secure your API if you call it from a frontend using
    JavaScript, because the value of the token will be visible to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of other solutions, and you should carefully study what is
    needed. Also, securing your API is not enough. Securing the entire application,
    plus the server (for example, by using firewalls), is important too. But just
    for the purpose of this chapter, what we did should be enough to protect us from
    the most common attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Read more, document yourself, and ask for experts' opinions. Most of the time,
    what seems to be a good solution for someone might not be a good solution for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is probably one of the most important things you should spend
    time on. When I discovered Phalcon, the first thing that I did was to develop
    a simple API. When I needed to create documentation for my API, I found myself
    in a strange situation; there were just a few solutions out there, and most of
    them had dependencies. This was back in the summer of 2013 or so.
  prefs: []
  type: TYPE_NORMAL
- en: So, I decided to create my own API documentation generator, without any dependencies—just
    pure PHP. I am going to use this tool (it is publicly available on GitHub at [https://github.com/calinrada/php-apidoc](https://github.com/calinrada/php-apidoc))
    to create and generate the API documentation for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should already have it, because I was using the extractor from it to generate
    comments for the CLI tasks. If you missed it, you can do it in two easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll perform a couple of steps to properly understand the usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new CLI task named `ApidocTask.php` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are going to use annotation to document each method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For additional information on this, check out [https://github.com/calinrada/php-apidoc#usage](https://github.com/calinrada/php-apidoc#usage)
    and [https://github.com/calinrada/php-apidoc#available-methods](https://github.com/calinrada/php-apidoc#available-methods).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `ArticlesController.php` and append the following content to the `listActi/on()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now switch to the command prompt and execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The task creates a new symlink in your public folder. Now you can access the
    API documentation at `http://learning-phalcon.localhost/apidoc/`, and you should
    be able to see exactly the same output as presented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage](img/B03522_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's time to close this chapter. Please take your time to read as much as possible
    about developing APIs, especially secure APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered how easily and quickly we can develop an API.
    You learned about the recommended practices and a few common ways of securing
    an API. We covered new topics, such as route grouping and filtering results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will switch layouts and JavaScript integration, but
    we will continue to adapt, or change, things in the API, database, and models.
  prefs: []
  type: TYPE_NORMAL
