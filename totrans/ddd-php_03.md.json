["```php\nclass Currency \n{ \n    private $isoCode;\n\n    public function __construct($anIsoCode)\n    {\n        $this->setIsoCode($anIsoCode);\n    }\n\n    private function setIsoCode($anIsoCode)\n    {\n        if (!preg_match('/^[A-Z]{3}$/', $anIsoCode)) {\n           throw new InvalidArgumentException();\n        }\n\n        $this->isoCode = $anIsoCode;\n    }\n\n    public function isoCode()\n    {\n        return $this->isoCode;\n    }\n}\n\n```", "```php\nclass Money \n{ \n    private $amount; \n    private $currency;\n\n    public function __construct($anAmount, Currency $aCurrency)\n    {\n        $this->setAmount($anAmount);\n        $this->setCurrency($aCurrency);\n    }\n\n    private function setAmount($anAmount)\n    {\n        $this->amount = (int) $anAmount;\n    }\n\n    private function setCurrency(Currency $aCurrency)\n    {\n        $this->currency = $aCurrency;\n    }\n\n    public function amount()\n    {\n        return $this->amount;\n    }\n\n    public function currency()\n    {\n        return $this->currency;\n    }\n}\n\n```", "```php\nclass Money \n{ \n    // ...\n    public static function fromMoney(Money $aMoney)\n    {\n        return new self(\n            $aMoney->amount(),\n            $aMoney->currency()\n        );\n    }\n\n    public static function ofCurrency(Currency $aCurrency)\n    {\n        return new self(0, $aCurrency);\n    }\n}\n\n```", "```php\nclass Money \n{ \n   // ...\n    public function increaseAmountBy($anAmount)\n    {\n        return new self(\n            $this->amount() + $anAmount,\n            $this->currency()\n        );\n    }\n}\n\n```", "```php\n$aMoney = new Money(100, new Currency('USD')); \n$otherMoney = $aMoney->increaseAmountBy(100);\n\nvar_dump($aMoney === otherMoney); // bool(false)\n\n$aMoney = $aMoney->increaseAmountBy(100); \nvar_dump($aMoney === $otherMoney); // bool(false)\n\n```", "```php\nclass Product \n{ \n    private id; \n    private name;\n    /**\n     * @var int\n     */\n    private $amount;\n    /**\n     * @var string\n     */\n    private $currency;\n\n    // ...\n}\n\n```", "```php\n$a = new Currency('USD'); \n$b = new Currency('USD');\n\nvar_dump($a == $b); // bool(true) \nvar_dump($a === $b); // bool(false)\n\n$c = new Currency('EUR');\n\nvar_dump($a == $c); // bool(false)\nvar_dump($a === $c); // bool(false)\n\n```", "```php\nclass Currency \n{ \n    // ...\n    public function equals(Currency $currency)\n    {\n        return $currency->isoCode() === $this->isoCode();\n    }\n}\n\n```", "```php\nclass Money \n{ \n    // ...\n    public function equals(Money $money)\n    {\n        return\n            $money->currency()->equals($this->currency()) &&\n            $money->amount() === $this->amount();\n    }\n}\n\n```", "```php\n$this−>price = new Money(100, new Currency('USD')); \n//...\n$this->price = $this->price->increaseAmountBy(200);\n\n```", "```php\nclass Money \n{ \n    // ...\n    public function add(Money $money)\n    {\n        if ($money->currency() !== $this->currency()) {\n            throw new InvalidArgumentException();\n        }\n\n        $this->amount += $money->amount();\n    }\n}\n\n```", "```php\nclass Banking \n{\n    public function doSomething() \n    { \n        $aMoney = new Money(100, new Currency('USD')); \n\n        $this->otherMethod($aMoney);//mysterious call\n        // ...\n    }\n}\n\n```", "```php\nclass Money \n{ \n    // ...\n    public function add(Money $money)\n    {\n        if (!$money->currency()->equals($this->currency())) {\n            throw new \\InvalidArgumentException();\n        }\n\n        return new self(\n            $money->amount() + $this->amount(),\n            $this->currency()\n        );\n    }\n}\n\n```", "```php\n$a = 10; \n$b = 10; \nvar_dump($a == $b); \n// bool(true) \nvar_dump($a === $b); \n// bool(true) \n$a = 20; \nvar_dump($a); \n// integer(20) \n$a = $a + 30; \nvar_dump($a); \n// integer(50); \n\n```", "```php\nclass MoneyTest extends *Framework*TestCase \n{ \n    /** \n     * @test \n     */ \n    public function copiedMoneyShouldRepresentSameValue()\n    { \n        $aMoney = new Money(100, new Currency('USD'));\n\n        $copiedMoney = Money::fromMoney($aMoney);\n\n        $this->assertTrue($aMoney->equals($copiedMoney));\n    }\n\n    /**\n     * @test\n     */\n    public function originalMoneyShouldNotBeModifiedOnAddition()\n    {\n        $aMoney = new Money(100, new Currency('USD'));\n\n        $aMoney->add(new Money(20, new Currency('USD')));\n\n        $this->assertEquals(100, $aMoney->amount());\n    }\n\n    /**\n     * @test\n     */\n    public function moniesShouldBeAdded()\n    {\n        $aMoney = new Money(100, new Currency('USD'));\n\n        $newMoney = $aMoney->add(new Money(20, new Currency('USD')));\n\n        $this->assertEquals(120, $newMoney->amount());\n    }\n\n    // ...\n}\n\n```", "```php\n class Product\n {\n     private $productId;\n     private $name;\n     private $price;\n\n     public function __construct(\n         $aProductId,\n         $aName,\n         Money $aPrice\n     ) {\n         $this->setProductId($aProductId);\n         $this->setName($aName);\n         $this->setPrice($aPrice);\n     }\n\n     // ...\n }\n\n```", "```php\n$product = new Product(\n    $productRepository->nextIdentity(), \n    'Domain-Driven Design in PHP', \n    new Money(999, new Currency('USD')) \n);\n$productRepository−>persist(product);\n\n```", "```php\nCREATE TABLE `products` (\n    id INT NOT NULL,\n    name VARCHAR( 255) NOT NULL,\n    price_amount INT NOT NULL,\n    price_currency VARCHAR( 3) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nclass DbalProductRepository\n    extends DbalRepository\n    implements ProductRepository\n{\n     public function add(Product $aProduct)\n     {\n         $sql = 'INSERT INTO products VALUES (?, ?, ?, ?)' ;\n         $stmt = $this->connection()->prepare($sql);\n         $stmt->bindValue(1, $aProduct->id());\n         $stmt->bindValue(2, $aProduct->name());\n         $stmt->bindValue(3, $aProduct->price()->amount());\n         $stmt->bindValue(4, $aProduct\n             ->price()->currency()->isoCode());\n         $stmt->execute();\n\n       // ...\n     }\n }\n\n```", "```php\nmysql> select * from products \\G\n*************************** 1\\. row ***************************\nid: 1\nname: Domain-Driven Design in PHP\nprice_amount: 999\nprice_currency: USD\n1 row in set (0.00 sec)\n\n```", "```php\nclass DbalProductRepository\n    extends DbalRepository\n    implements ProductRepository\n{\n    public function productOfId($anId)\n    {\n        $sql = 'SELECT * FROM products WHERE id = ?';\n        $stmt = $this->connection()->prepare($sql);\n        $stmt->bindValue(1, $anId);\n        $res = $stmt->execute();\n        // ...\n\n        return new Product(\n            $row['id'],\n            $row['name'],\n            new Money(\n                $row['price_amount'],\n                new Currency($row['price_currency'])\n            )\n        );\n    }\n}\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<doctrine-mapping \n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Product\"\n        table=\"product\">\n        <id\n            name=\"id\"\n            column=\"id\"\n            type=\"string\"\n            length=\"255\">\n            <generator strategy=\"NONE\">\n            </generator>\n        </id>\n\n        <field\n            name=\"name\"\n            type=\"string\"\n            length=\"255\"\n        />\n\n        <embedded\n            name=\"price\"\n            class=\"Ddd\\Domain\\Model\\Money\"\n        />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <embeddable\n        name=\"Ddd\\Domain\\Model\\Money\">\n\n        <field\n            name=\"amount\"\n            type=\"integer\"\n        />\n        <embedded\n            name=\"currency\"\n            class=\"Ddd\\Domain\\Model\\Currency\"\n        />\n    </embeddable>\n</doctrine-mapping>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <embeddable\n        name=\"Ddd\\Domain\\Model\\Currency\">\n\n        <field\n            name=\"iso\"\n            type=\"string\"\n            length=\"3\"\n        />\n    </embeddable>\n</doctrine-mapping>\n\n```", "```php\nclass Product \n{ \n    private $productId; \n    private $name; \n    private $price;\n    private $surrogateCurrencyIsoCode;\n    private $surrogateAmount;\n\n    public function __construct($aProductId, $aName, Money $aPrice)\n    {\n        $this->setProductId($aProductId);\n        $this->setName($aName);\n        $this->setPrice($aPrice);\n    }\n\n    private function setPrice(Money $aMoney)\n    {\n        $this->price = $aMoney;\n        $this->surrogateAmount = $aMoney->amount();\n        $this->surrogateCurrencyIsoCode =\n            $aMoney->currency()->isoCode();\n    }\n\n    private function price()\n    {\n        if (null === $this->price) {\n            $this->price = new Money(\n                $this->surrogateAmount,\n                new Currency($this->surrogateCurrency)\n            );\n        }\n        return $this->price;\n    }\n\n    // ...\n}\n\n```", "```php\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Product\"\n        table=\"product\">\n\n        <id\n            name=\"id\"\n            column=\"id\"\n            type=\"string\"\n            length=\"255\" >\n            <generator strategy=\"NONE\">\n            </generator>\n        </id>\n\n       <field\n           name=\"name\"\n           type=\"string\"\n           length=\"255\"\n       />\n\n       <field\n           name=\"surrogateAmount\"\n           type=\"integer\"\n           column=\"price_amount\"\n       />\n       <field\n           name=\"surrogateCurrencyIsoCode\"\n           type=\"string\"\n           column=\"price_currency\"\n       />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\nCREATE TABLE ` products` (\n    id INT NOT NULL,\n    name VARCHAR( 255) NOT NULL,\n    price TEXT NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nclass DbalProductRepository extends DbalRepository implements ProductRepository\n{ \n    public function add(Product $aProduct) \n    { \n        $sql = 'INSERT INTO products VALUES (?, ?, ?)'; \n        $stmt = this->connection()->prepare(sql); \n        $stmt->bindValue(1, aProduct−>id()); \n        $stmt->bindValue(2, aProduct−>name()); \n        $stmt->bindValue(3, $this−>serialize($aProduct->price())); \n\n        // ...\n    }\n\n    private function serialize($object)\n    {\n        return serialize($object);\n    }\n}\n\n```", "```php\nmysql > select * from products \\G\n*************************** 1.row***************************\nid   : 1\nname : Domain-Driven Design in PHP\nprice : O:22:\"Ddd\\Domain\\Model\\Money\":2:{s:30:\"Ddd\\Domain\\Model\\\\\nMoney amount\";i :\n999;s:32:\"Ddd\\Domain\\Model\\Money currency\";O : 25:\"Ddd\\Domain\\Model\\\\\nCurrency\":1:{\\\ns:34:\" Ddd\\Domain\\Model\\Currency isoCode\";s:3:\"USD\";}}1 row in set(\\ 0.00 sec)\n\n```", "```php\n$myMoney = new Money(999, new Currency('USD'));\n\n$serializer = JMS\\Serializer\\SerializerBuilder::create()->build(); \n$jsonData = $serializer−>serialize(myMoney, 'json');\n\n```", "```php\n$serializer = JMS\\Serializer\\SerializerBuilder::create()->build(); \n// ... \n$myMoney = $serializer−>deserialize(jsonData, 'Ddd', 'json');\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Product\"\n        table=\"products\">\n\n        <id\n            name=\"id\"\n            column=\"id\"\n            type=\"string\"\n            length=\"255\">\n            <generator strategy=\"NONE\">\n            </generator>\n        </id>\n        <field\n            name=\"name\"\n            type=\"string\"\n            length=\"255\"\n        />\n        <field\n            name=\"price\"\n            type=\"object\"\n        />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\n// ... \n$em−>persist($product); \n$em−>flush($product);\n\n```", "```php\n// ...\n$repository = $em->getRepository('Ddd\\\\Domain\\\\Model\\\\Product');\n$item = $repository->find(1);\nvar_dump($item);\n\n/*\nclass Ddd\\Domain\\Model\\Product#177 (3) {\n    private $productId => int(1)\n    private $name => string(41) \"Domain-Driven Design in PHP\"\n    private $money => class Ddd\\Domain\\Model\\Money#174 (2) {\n        private $amount => string(3) \"100\"\n        private $currency => class Ddd\\Domain\\Model\\Currency#175 (1){\n            private $isoCode => string(3) \"USD\"\n        }\n    }\n}\n* /\n\n```", "```php\nuse Ddd\\Domain\\Model\\Currency;\nuse Ddd\\Domain\\Model\\Money;\nuse Doctrine\\DBAL\\Types\\TextType;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\n\nclass MoneyType extends TextType \n{ \n    const MONEY = 'money';\n\n    public function convertToPHPValue(\n        $value,\n        AbstractPlatform $platform\n    ) {\n        $value = parent::convertToPHPValue($value, $platform);\n        $value = explode('|', $value);\n        return new Money(\n            $value[0],\n            new Currency($value[1])\n        );\n    }\n\n    public function convertToDatabaseValue(\n        $value,\n        AbstractPlatform $platform\n    ) {\n        return implode(\n           '|',\n           [\n               $value->amount(),\n               $value->currency()->isoCode()\n           ]\n        );\n    }\n\n    public function getName()\n    {\n        return self::MONEY;\n    }\n}\n\n```", "```php\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\Tools\\Setup;\n\nclass EntityManagerFactory \n{ \n    public function build() \n    { \n        Type::addType( \n            'money',\n            'Ddd\\Infrastructure\\Persistence\\Doctrine\\Type\\MoneyType' \n        );\n\n        return EntityManager::create(\n            [\n                'driver' => 'pdo_mysql',\n                'user' => 'root',\n                'password' => '',\n                'dbname' => 'ddd',\n            ],\n            Setup::createXMLMetadataConfiguration(\n                [__DIR__.'/config'],\n                true\n            )\n        );\n    }\n}\n\n```", "```php\n<?xml version = \"1.0\" encoding = \"utf-8\"?>\n<doctrine-mapping>\n    <entity\n        name = \"Product\"\n        table = \"product\">\n\n        <!-- ... -->\n        <field\n            name = \"price\"\n            type = \"money\"\n        />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\nmysql> select * from products \\G\n*************************** 1\\. row***************************\nid: 1\nname: Domain-Driven Design in PHP\nprice: 999|USD\n1 row in set (0.00 sec)\n\n```", "```php\nclass HistoricalProduct extends Product \n{ \n    /** \n     * @var Money[] \n     */ \n    protected $prices;\n\n    public function __construct(\n        $aProductId, \n        $aName, \n        Money $aPrice,\n        array $somePrices\n    ){\n        parent::__construct($aProductId, $aName, $aPrice);\n        $this->setPrices($somePrices);\n    }\n\n    private function setPrices(array $somePrices)\n    {\n        $this->prices = $somePrices;\n    }\n\n    public function prices()\n    {\n        return $this->prices;\n    }\n}\n\n```", "```php\nCREATE TABLE ` historical_products` (\n    `id` char( 36) COLLATE utf8mb4_unicode_ci NOT NULL,\n    `name` varchar( 255) COLLATE utf8mb4_unicode_ci NOT NULL,\n    `price_amount` int( 11 ) NOT NULL,\n    `price_currency` char( 3) COLLATE utf8mb4_unicode_ci NOT NULL,\n     PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nCREATE TABLE `prices`(\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `amount` int(11) NOT NULL,\n    `currency` char(3) COLLATE utf8mb4_unicode_ci NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nCREATE TABLE `products_prices` (\n    `product_id` char( 36) COLLATE utf8mb4_unicode_ci NOT NULL,\n    `price_id` int( 11 ) NOT NULL,\n    PRIMARY KEY (`product_id`, `price_id`),\n    UNIQUE KEY `UNIQ_62F8E673D614C7E7` (`price_id`),\n    KEY `IDX_62F8E6734584665A` (`product_id`),\n    CONSTRAINT `FK_62F8E6734584665A` FOREIGN KEY (`product_id`)\n        REFERENCES `historical_products` (`id`),\n    CONSTRAINT `FK_62F8E673D614C7E7` FOREIGN KEY (`price_id`)\n        REFERENCES `prices`(`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n```", "```php\nclass Money \n{ \n    private $amount; \n    private $currency;\n    private $surrogateId;\n    private $surrogateCurrencyIsoCode;\n\n    public function __construct($amount, Currency $currency)\n    {\n        $this->setAmount($amount);\n        $this->setCurrency($currency);\n    }\n\n    private function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    private function setCurrency(Currency $currency)\n    {\n        $this->currency = $currency;\n        $this->surrogateCurrencyIsoCode =\n            $currency->isoCode();  \n    }\n\n    public function currency()\n    {\n       if (null === $this->currency) {\n           $this->currency = new Currency(\n               $this->surrogateCurrencyIsoCode\n           );\n       }\n       return $this->currency;\n    } \n\n    public function amount()\n    {\n        return $this->amount;\n    }\n\n    public function equals(Money $aMoney)\n    {\n        return\n            $this->amount() === $aMoney->amount() &&\n            $this->currency()->equals($this->currency());\n    }\n}\n\n```", "```php\n<?xml version = \"1.0\" encoding = \"utf-8\"?>\n<doctrine-mapping\n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Ddd\\Domain\\Model\\Money\"\n        table=\"prices\">\n\n        <id\n            name=\"surrogateId\"\n            type=\"integer\"\n            column=\"id\">\n            <generator\n                strategy=\"AUTO\">\n            </generator>\n\n        </id>\n        <field\n            name=\"amount\"\n            type=\"integer\"\n            column=\"amount\"\n        />\n        <field\n            name=\"surrogateCurrencyIsoCode\"\n            type=\"string\"\n            column=\"currency\"\n        />\n    </entity>\n</doctrine-mapping>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<doctrine-mapping \n\n    xsi:schemaLocation=\"\n        http://doctrine-project.org/schemas/orm/doctrine-mapping\n    https://raw.github.com/doctrine/doctrine2/master/doctrine-mapping.xsd\">\n\n    <entity\n        name=\"Ddd\\Domain\\Model\\HistoricalProduct\" \n        table=\"historical_products\"\n        repository-class=\"\n            Ddd\\Infrastructure\\Domain\\Model\\DoctrineHistoricalProductRepository\n        \">\n        <many-to-many\n            field=\"prices\"\n            target-entity=\"Ddd\\Domain\\Model\\Money\">\n\n            <cascade>\n                <cascade-all/>\n            </cascade>\n\n            <join-table\n                name=\"products_prices\">\n                <join-columns>\n                    <join-column\n                        name=\"product_id\"\n                        referenced-column-name=\"id\"\n                    />\n                </join-columns>\n                <inverse-join-columns>\n                    <join-column\n                        name=\"price_id\"\n                        referenced-column-name=\"id\"\n                        unique=\"true\"\n                    />\n                </inverse-join-columns>\n            </join-table>\n        </many-to-many>\n    </entity>\n</doctrine-mapping>\n\n```"]