["```php\n… \nMage::register('original_include_path', get_include_path());\nif (defined('COMPILER_INCLUDE_PATH')) {\n    $appPath = COMPILER_INCLUDE_PATH;\n    set_include_path($appPath . PS . Mage::registry('original_include_path'));\n    include_once \"Mage_Core_functions.php\";\n    include_once \"Varien_Autoload.php\";\n} else {\n    /**\n     * Set include path\n     */\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'local';\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'community';\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'core';\n    $paths[] = BP . DS . 'lib';\n\n    $appPath = implode(PS, $paths);\n    set_include_path($appPath . PS . Mage::registry('original_include_path'));\n    include_once \"Mage/Core/functions.php\";\n    include_once \"Varien/Autoload.php\";\n}\n\nVarien_Autoload::register();\n```", "```php\n    /**\n     * Load class source code\n     *\n     * @param string $class\n     */\n    public function autoload($class)\n    {\n        if ($this->_collectClasses) {\n            $this->_arrLoadedClasses[self::$_scope][] = $class;\n        }\n        if ($this->_isIncludePathDefined) {\n            $classFile =  COMPILER_INCLUDE_PATH . DIRECTORY_SEPARATOR . $class;\n        } else {\n            $classFile = str_replace(' ', DIRECTORY_SEPARATOR, ucwords(str_replace('_', ' ', $class)));\n        }\n        $classFile.= '.php';\n        //echo $classFile;die();\n        return include $classFile;\n    }\n```", "```php\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'local';\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'community';\n    $paths[] = BP . DS . 'app' . DS . 'code' . DS . 'core';\n    $paths[] = BP . DS . 'lib';\n```", "```php\npublic function match(Zend_Controller_Request_Http $request)\n{\n  …\n   $path = trim($request->getPathInfo(), '/');\n            if ($path) {\n                $p = explode('/', $path);\n            } else {\n                $p = explode('/', $this->_getDefaultPath());\n            }\n  …\n}\n```", "```php\n$p = Array\n(\n    [0] => catalog\n    [1] => category\n    [2] => view\n)\n```", "```php\n      // get module name\n        if ($request->getModuleName()) {\n            $module = $request->getModuleName();\n        } else {\n            if (!empty($p[0])) {\n                $module = $p[0];\n            } else {\n                $module = $this->getFront()->getDefault('module');\n                $request->setAlias(Mage_Core_Model_Url_Rewrite::REWRITE_REQUEST_PATH_ALIAS, '');\n            }\n        }\n        if (!$module) {\n            if (Mage::app()->getStore()->isAdmin()) {\n                $module = 'admin';\n            } else {\n                return false;\n            }\n        }\n```", "```php\n…\n        foreach ($modules as $realModule) {\n            $request->setRouteName($this->getRouteByFrontName($module));\n\n            // get controller name\n            if ($request->getControllerName()) {\n                $controller = $request->getControllerName();\n            } else {\n                if (!empty($p[1])) {\n                    $controller = $p[1];\n                } else {\n                    $controller = $front->getDefault('controller');\n                    $request->setAlias(\n                        Mage_Core_Model_Url_Rewrite::REWRITE_REQUEST_PATH_ALIAS,\n                        ltrim($request->getOriginalPathInfo(), '/')\n                    );\n                }\n            }\n\n            // get action name\n            if (empty($action)) {\n                if ($request->getActionName()) {\n                    $action = $request->getActionName();\n                } else {\n                    $action = !empty($p[2]) ? $p[2] : $front->getDefault('action');\n                }\n            }\n\n            //checking if this place should be secure\n            $this->_checkShouldBeSecure($request, '/'.$module.'/'.$controller.'/'.$action);\n\n            $controllerClassName = $this->_validateControllerClassName($realModule, $controller);\n            if (!$controllerClassName) {\n                continue;\n            }\n\n            // instantiate controller class\n            $controllerInstance = Mage::getControllerInstance($controllerClassName, $request, $front->getResponse());\n\n            if (!$controllerInstance->hasAction($action)) {\n                continue;\n            }\n\n            $found = true;\n            break;\n        }\n...\n```", "```php\n$controllerClassName = $this->_validateControllerClassName($realModule, $controller);\n```", "```php\nMage::getModel('core/url_rewrite')->rewrite();\n```", "```php\nArray (\n  [\"url_rewrite_id\"] => \"10\"\n  [\"store_id\"]       => \"1\"\n  [\"category_id\"]    => \"10\"\n  [\"product_id\"]     => NULL\n  [\"id_path\"]        => \"category/10\"\n  [\"request_path\"]   => \"books.html\"\n  [\"target_path\"]    => \"catalog/category/view/id/10\"\n  [\"is_system\"]      => \"1\"\n  [\"options\"]        => NULL\n  [\"description\"]    => NULL\n)\n```", "```php\n<global>\n…\n<models>\n     <group_classname>\n          <class>Namespace_Modulename_Model</class>\n     <group_classname>\n</models>\n...\n</global>\n```", "```php\n<global>\n…\n<models>\n     <modulenamemodulename>\n      <rewrite>\n             <groupgroup_classname>Namespace_Modulename_Model</groupgroup_classname>\n      </rewrite>\n     <//modulename>\n</models>\n...\n</global>\n```", "```php\n<config>\n  <sections>\n    <section_name translate=\"label\">\n      <label>Section Description</label>\n      <tab>general</tab>\n      <frontend_type>text</frontend_type>\n      <sort_order>1000</sort_order>\n      <show_in_default>1</show_in_default>\n      <show_in_website>1</show_in_website>\n      <show_in_store>1</show_in_store>\n      <groups>\n       <group_name translate=\"label\">\n         <label>Demo Of Config Fields</label>\n         <frontend_type>text</frontend_type>\n         <sort_order>1</sort_order>\n         <show_in_default>1</show_in_default>\n         <show_in_website>1</show_in_website>\n         <show_in_store>1</show_in_store>  \n   <fields>\n          <field_name translate=\"label comment\">\n             <label>Enabled</label>\n             <comment>\n               <![CDATA[Comments can contain <strong>HTML</strong>]]>\n             </comment>\n             <frontend_type>select</frontend_type>\n             <source_model>adminhtml/system_config_source_yesno</source_model>\n             <sort_order>10</sort_order>\n             <show_in_default>1</show_in_default>\n             <show_in_website>1</show_in_website>\n             <show_in_store>1</show_in_store>\n          </field_name>\n         </fields>\n        </group_name>\n       </groups>\n    </section_name>\n  </sections>\n</config>\n```", "```php\n<layout version=\"0.1.0\">\n<default>\n    <reference name=\"left\">\n        <block type=\"core/template\" name=\"left.permanent.callout\" template=\"callouts/left_col.phtml\">\n            <action method=\"setImgSrc\"><src>images/media/col_left_callout.jpg</src></action>\n            <action method=\"setImgAlt\" translate=\"alt\" module=\"catalog\"><alt>Our customer service is available 24/7.Call us at (555) 555-0123.</alt></action>\n            <action method=\"setLinkUrl\"><url>checkout/cart</url></action>\n        </block>\n    </reference>\n    <reference name=\"right\">\n        <block type=\"catalog/product_compare_sidebar\" before=\"cart_sidebar\" name=\"catalog.compare.sidebar\" template=\"catalog/product/compare/sidebar.phtml\"/>\n        <block type=\"core/template\" name=\"right.permanent.callout\" template=\"callouts/right_col.phtml\">\n            <action method=\"setImgSrc\"><src>images/media/col_right_callout.jpg</src></action>\n            <action method=\"setImgAlt\" translate=\"alt\" module=\"catalog\"><alt>Visit our site and save A LOT!</alt></action>\n        </block>\n    </reference>\n    <reference name=\"footer_links\">\n        <action method=\"addLink\" translate=\"label title\" module=\"catalog\" ifconfig=\"catalog/seo/site_map\"><label>Site Map</label><url helper=\"catalog/map/getCategoryUrl\" /><title>Site Map</title></action>\n    </reference>\n    <block type=\"catalog/product_price_template\" name=\"catalog_product_price_template\" />\n</default>\n```", "```php\n<div class=\"product-view\">\n...\n    <div class=\"product-name\">\n        <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>\n    </div>\n...           \n    <?php echo $this->getReviewsSummaryHtml($_product, false, true)?>\n    <?php echo $this->getChildHtml('alert_urls') ?>\n    <?php echo $this->getChildHtml('product_type_data') ?>\n    <?php echo $this->getTierPriceHtml() ?>\n    <?php echo $this->getChildHtml('extrahint') ?>\n...\n\n    <?php if ($_product->getShortDescription()):?>\n        <div class=\"short-description\">\n            <h2><?php echo $this->__('Quick Overview') ?></h2>\n            <div class=\"std\"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>\n        </div>\n    <?php endif;?>\n...\n</div> \n```", "```php\n    public function viewAction()\n    {\n        $this->loadLayout();\n        $this->renderLayout();\n    }\n```", "```php\n…\n<field_name translate=\"label comment\">\n    <label>Enabled</label>\n    <comment>\n         <![CDATA[Comments can contain <strong>HTML</strong>]]>\n     </comment>\n     <frontend_type>select</frontend_type>\n     <source_model>adminhtml/system_config_source_yesno</source_model>\n     <sort_order>10</sort_order>\n     <show_in_default>1</show_in_default>\n     <show_in_website>1</show_in_website>\n     <show_in_store>1</show_in_store>\n</field_name>\n…\n```", "```php\n$product = Mage::getModel('catalog/product'); \n```", "```php\npublic static function getModel($modelClass = '', $arguments = array())\n    {\n        return self::getConfig()->getModelInstance($modelClass, $arguments);\n    }\n\ngetModel calls the getModelInstance from the Mage_Core_Model_Config class.\n\npublic function getModelInstance($modelClass='', $constructArguments=array())\n{\n    $className = $this->getModelClassName($modelClass);\n    if (class_exists($className)) {\n        Varien_Profiler::start('CORE::create_object_of::'.$className);\n        $obj = new $className($constructArguments);\n        Varien_Profiler::stop('CORE::create_object_of::'.$className);\n        return $obj;\n    } else {\n        return false;\n    }\n}\n```", "```php\npublic function getModelClassName($modelClass)\n{\n    $modelClass = trim($modelClass);\n    if (strpos($modelClass, '/')===false) {\n        return $modelClass;\n    }\n    return $this->getGroupedClassName('model', $modelClass);\n}\n```", "```php\npublic function getGroupedClassName($groupType, $classId, $groupRootNode=null)\n{\n    if (empty($groupRootNode)) {\n        $groupRootNode = 'global/'.$groupType.'s';\n    }\n    $classArr = explode('/', trim($classId));\n    $group = $classArr[0];\n    $class = !empty($classArr[1]) ? $classArr[1] : null;\n\n    if (isset($this->_classNameCache[$groupRootNode][$group][$class])) {\n        return $this->_classNameCache[$groupRootNode][$group][$class];\n    }\n    $config = $this->_xml->global->{$groupType.'s'}->{$group};\n    $className = null;\n    if (isset($config->rewrite->$class)) {\n        $className = (string)$config->rewrite->$class;\n    } else {\n        if ($config->deprecatedNode) {\n            $deprecatedNode = $config->deprecatedNode;\n            $configOld = $this->_xml->global->{$groupType.'s'}->$deprecatedNode;\n            if (isset($configOld->rewrite->$class)) {\n                $className = (string) $configOld->rewrite->$class;\n            }\n        }\n    }\n    if (empty($className)) {\n        if (!empty($config)) {\n            $className = $config->getClassName();\n        }\n        if (empty($className)) {\n            $className = 'mage_'.$group.'_'.$groupType;\n        }\n        if (!empty($class)) {\n            $className .= '_'.$class;\n        }\n        $className = uc_words($className);\n    }\n    $this->_classNameCache[$groupRootNode][$group][$class] = $className;\n    return $className;\n}\n```", "```php\nprotected function _beforeSave()\n{\n    if (!$this->getId()) {\n        $this->isObjectNew(true);\n    }\n    Mage::dispatchEvent('model_save_before', array('object'=>$this));\n    Mage::dispatchEvent($this->_eventPrefix.'_save_before', $this->_getEventData());\n    return $this;\n}\n\nprotected function _afterSave()\n{\n    $this->cleanModelCache();\n    Mage::dispatchEvent('model_save_after', array('object'=>$this));\n    Mage::dispatchEvent($this->_eventPrefix.'_save_after', $this->_getEventData());\n    return $this;\n}\n```", "```php\npublic static function dispatchEvent($name, array $data = array())\n{\n    $result = self::app()->dispatchEvent($name, $data);\n    return $result;\n}\n```", "```php\npublic function dispatchEvent($eventName, $args)\n{\n    foreach ($this->_events as $area=>$events) {\n        if (!isset($events[$eventName])) {\n            $eventConfig = $this->getConfig()->getEventConfig($area, $eventName);\n            if (!$eventConfig) {\n                $this->_events[$area][$eventName] = false;\n                continue;\n            }\n            $observers = array();\n            foreach ($eventConfig->observers->children() as $obsName=>$obsConfig) {\n                $observers[$obsName] = array(\n                    'type'  => (string)$obsConfig->type,\n                    'model' => $obsConfig->class ? (string)$obsConfig->class : $obsConfig->getClassName(),\n                    'method'=> (string)$obsConfig->method,\n                    'args'  => (array)$obsConfig->args,\n                );\n            }\n            $events[$eventName]['observers'] = $observers;\n            $this->_events[$area][$eventName]['observers'] = $observers;\n        }\n        if (false===$events[$eventName]) {\n            continue;\n        } else {\n            $event = new Varien_Event($args);\n            $event->setName($eventName);\n            $observer = new Varien_Event_Observer();\n        }\n\n        foreach ($events[$eventName]['observers'] as $obsName=>$obs) {\n            $observer->setData(array('event'=>$event));\n            Varien_Profiler::start('OBSERVER: '.$obsName);\n            switch ($obs['type']) {\n                case 'disabled':\n                    break;\n                case 'object':\n                case 'model':\n                    $method = $obs['method'];\n                    $observer->addData($args);\n                    $object = Mage::getModel($obs['model']);\n                    $this->_callObserverMethod($object, $method, $observer);\n                    break;\n                default:\n                    $method = $obs['method'];\n                    $observer->addData($args);\n                    $object = Mage::getSingleton($obs['model']);\n                    $this->_callObserverMethod($object, $method, $observer);\n                    break;\n            }\n            Varien_Profiler::stop('OBSERVER: '.$obsName);\n        }\n    }\n    return $this;\n}\n```", "```php\n<events>\n    <event_name>\n        <observers>\n            <observer_identifier>\n                <class>module_name/observer</class>\n                <method>function_name</method>\n            </observer_identifier>\n        </observers>\n    </event_name>\n</events>\n```", "```php\nclass Namespace_Modulename_Model_Observer\n{\n    public function methodName(Varien_Event_Observer $observer)\n    {\n        //some code\n    }\n}\n```"]