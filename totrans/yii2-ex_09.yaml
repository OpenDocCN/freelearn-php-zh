- en: Chapter 9. Frontend to Display Rooms to Everyone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover topics about using templates to have multiple apps in
    the same context.
  prefs: []
  type: TYPE_NORMAL
- en: Yii, indeed, allows you to have an advanced installation able to contain multiple
    instances of an Yii application. Therefore, every folder in the project is actually
    a new Yii application.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to install and configure the project, share data between them,
    and finally customize the URL to make them pretty for the search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an advanced template to split frontend and backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an application using init
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – creating frontend for public access
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing ActiveRecord models among applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – displaying available rooms in frontend site
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing a URL in an advanced template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using advanced templates in the same domain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use advanced templates in shared hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an advanced template to split frontend and backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until now, we have seen simple applications with only one single entry point
    to access. However, a single entry point isn''t enough for more general applications.
    In advanced web applications, in fact, we have not just a single entry point but
    often three: frontend, backend, and a common area used as shared zone for every
    entry point.'
  prefs: []
  type: TYPE_NORMAL
- en: The frontend entry point is a public access that is available to all users without
    restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the backend entry point is a restricted access available
    only for authenticated users that have administration roles for managing content
    in the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the common entry point is used to share data between entry points.
  prefs: []
  type: TYPE_NORMAL
- en: Think about a reservation system, where frontend is the website displaying room
    availability and prices, while backend is the administration area, where operators
    can manage rooms.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, another example of frontend and backend could be a newspaper
    website that comprises a frontend area with news publically visible to all users,
    and a backend area where journalists can insert news.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the differences between frontend and backend and their aim,
    we will create an advanced Yii application.
  prefs: []
  type: TYPE_NORMAL
- en: The steps to install an advanced template of the Yii application are similar
    to the ones to install basic templates.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is highly recommended, at this point, to have a console access the host,
    where we can put files.
  prefs: []
  type: TYPE_NORMAL
- en: Locate the web hosting document root folder in the web hosting. Starting from
    it, we will launch commands to create the advanced application in a new subfolder
    named `yiiadv`, which stands for Yii installation with the advanced template.
  prefs: []
  type: TYPE_NORMAL
- en: We will install the Yii advanced template using Composer as it is the most recommended
    way. If we have not installed Composer as the global application yet, we can install
    it now in the `yiiadv` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the instructions to install Yii advanced template starting
    from document root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'By opening the `yiiadv` subfolder, we can see some new folders beside the basic
    template, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`backend`: This folder is the entry point for the backend application of the
    project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common`: This folder is the entry point for the application containing common
    data for the other applications in the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console`: This folder is the entry point for the console application of the
    project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frontend`: This folder is the entry point for the frontend application of
    the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This structure is the result of the experience on developing the web application.
    Backend and frontend entry points have been formerly discussed; the common entry
    point is an area where to put data (common models, components, and so on) shared
    among all the other applications in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every application in the project (backend, frontend, common, and console) is
    considered as a single namespace in the web application. So, when we refer to
    `RoomsController` in the frontend, the complete class namespace will be `frontend/controllers/RoomsController`.
  prefs: []
  type: TYPE_NORMAL
- en: This installation is still raw and requires an initialization using the `init`
    command. However, if we try to open any of these applications, we can recognize
    the same basic template structure with `assets`, `config`, `controllers`, `models`,
    `runtime`, `views`, and `web` subfolders. So, a basic template application can
    be considered the only unique application in an advanced template one.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the advanced template properties, every application starting point
    is always in `web/index.php`. For example, for the frontend application, the starting
    point is `frontend/web/index.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an application using init
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from having multiple kinds of configuration, we can have multiple entry
    points in advanced applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In advanced web applications, in fact, we also have a different approach in
    the development stage. We usually have two environments: development and production.
    In the first one, we make tests using fake users, data, and so on, while in the
    second one we must take care to guarantee the proper functioning of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we will have different sets of configuration files and parameters
    based on environments where we will work in.
  prefs: []
  type: TYPE_NORMAL
- en: We could wish, in fact, to test the application using the development database
    instead of the production database, or specific parameters available only in a
    specific environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, the `init` command offers this capability to switch different configuration
    and parameters for different environments. Basically, there are two environments:
    development and production.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A first initialization is needed to make sure that the project could work.
  prefs: []
  type: TYPE_NORMAL
- en: The `init` command can be launched both in interactive mode as well as in noninteractive
    (silent) one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the interactive mode, starting from the `yiiadv` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And in a noninteractive (silent) mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In both modalities, we need to specify only the target environment if we want
    to overwrite all the current configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: This command will simply copy the content of the chosen environment (according
    to the type of selected environment) in the respective application folder, with
    the same name starting from root.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, open the folder in `environments/dev/backend`. We will see two
    folders: `config` and `web`, containing the first two configuration files and
    the other files `index.php` and `index-test.php`. These files will overwrite the
    corresponding files in the `backend` folder starting from the root folder of the
    project.'
  prefs: []
  type: TYPE_NORMAL
- en: So, if we launch the preceding command with parameters of `init`, the content
    of the folders in `environments/dev` (the `backend`, `common`, `console`, and
    `frontend` folders) will be copied in the `backend`, `common`, `console`, and
    `frontend` folders starting from the root folder of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Also, with this command, other operations such as making some folders writable
    or applying specific values to configuration properties, are accomplished. However,
    the `init` command is mainly used to switch different configurations and `index.php`
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from any application of the project (backend, frontend, common, and
    console), configuration values and parameters taken from the top of any application''s
    `index.php` file (backend, frontend, common, or console) are read in the following
    sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '`common/config/main.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common/config/main-local.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config/main.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config/main-local.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that the `config` parameters are initially read firstly from `common/config/main.php`
    then from `common/config/main-local.php`, then again from `application config/main.php`,
    and finally from `application config/main-local.php`. The properties with same
    name will be overwritten during the reading of other configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, if the same configuration property is declared in all four configuration
    files, its value will be the same as `config/main-local.php`, which is the last
    configuration file to be read.
  prefs: []
  type: TYPE_NORMAL
- en: Since, we locally have a last chance to apply differences towards a specific
    property of configuration with the `-local` version of files, the content of environment
    subfolders will be only about the `-local` version of a specific file. For example,
    if we open `environments/dev/backend/config path`, we will see only `main-local.php`
    and `params-local.php`, practically the last two filenames that `index.php` will
    read in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: So if we change the database connection parameters in `environments/dev/backend/config/main-local.php`
    and then apply `init` with the `dev` target environment, this file will overwrite
    `backend/config/main-local.php`. This is the last configuration file that `backend/web/index.php`
    will read during its bootstrap (if we browse `/backend/web/index.php`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have executed the `init` command in the `dev` environment, we can
    point the browser to `http://hostname/yiiadv/frontend/web` and we should see the
    same congratulations page of the basic template.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the backend entry point is also available pointing to `http://hostname/yiiadv/backend/web`,
    where a login form is displayed by default (this is because it is a restricted
    area).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to add a new application in the project, it is enough to copy the
    content of frontend or backend folder to another new folder in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Example – creating frontend for public access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen, the frontend application is a reachable pointing browser to
    `http://hostname/yiiadv/frontend/web`.
  prefs: []
  type: TYPE_NORMAL
- en: However, the first thing to set in the frontend access is URL-friendly customization;
    this is because it is important that our public website is well positioned in
    the search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have done in the basic template, we can render pretty URLs in the advanced
    template too, following these two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `.htaccess` file in `yiiadv/frontend/web`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `urlManager` component in `yiiadv/frontend/config/main.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In step 1, it is enough to create a file in `yiiadv/frontend/web/.htaccess`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code will make the web server URL rewrite work, rewriting all requests
    to the `index.php` file in `yiiadv/frontend/web`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While, in step 2, we must add the `urlManager` property in `yiiadv/frontend/config/main.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we can refresh the web browser to `http://hostname/yiiadv/frontend/web`
    and navigation to the URL link on the top, and we can see, for instance, that
    URL is in pretty form.
  prefs: []
  type: TYPE_NORMAL
- en: We can consider the `frontend` folder as a Yii standalone application and we
    can create controllers, views, models, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing ActiveRecord models among applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although every folder in the main Yii project could be considered a Yii standalone
    application, with its own controllers, models, views, and so on, it is conventionally
    accepted that all shared data are located in the `common` folder.
  prefs: []
  type: TYPE_NORMAL
- en: So every shared model (such as `User`, `Room`, `Reservation`, and `Customer`)
    that could be used in other Yii applications, should be inserted in `common/models`,
    under the `common\models` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: From my point of view, when an application needs to use an ActiveRecord from
    `common/models`, I rather prefer to point to an extended version in its namespace,
    so as to have a chance again to add custom methods or properties to model for
    that application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider we have the `Room` model in `common/models`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the backend application, we will create an empty extension to the `Room`
    class from common namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we have the possibility to add custom methods or properties to
    that specific application (namespace), if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, every controller, view, or model in backend namespace will point
    to `\backend\models\Room`, when it needs to refer to the `Room` ActiveRecord.
  prefs: []
  type: TYPE_NORMAL
- en: Example – displaying available rooms in the frontend site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will emphasize the few differences between basic and advanced applications
    occurring in the developing phase.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is to check whether the database configuration is right,
    since we have just initialized an advanced application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The database configuration on the production server can be found in `common/config/main.php`,
    whereas the database configuration on the developing server is located in `common/config/main-local.php`,
    which overwrites the configuration in `common/config/main.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `common/config/main.php` and add the `db` property to the configuration
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Change the database properties (`host`, `username`, and `password`) according
    to our configuration parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to comment out the database configuration in `common/config/main-local.php`
    to avoid overwriting configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we will have complete access to the database and tables previously
    created, and to rooms' data, indeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are ready to create:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Room` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Rooms` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View of index action of the `Rooms` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step requires the use of Gii. By default, Gii is enabled with basic
    configuration in the frontend application (only from localhost).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will overwrite this configuration so as to use Gii from everywhere. Therefore,
    in the frontend local configuration (`frontend/config/main-local.php`), which
    has the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace them with these ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can finally access Gii from everywhere. Using the browser, go to `http://hostname/yiiadv/frontend/web/gii`;
    a welcome page should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Model Generator** and fill the first field, `Table Name`, with `room`,
    the name of model we are creating, just as we have done in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Since, we are working with the advanced template, model files (like other objects
    created by Gii) will be created in the `frontend` namespace, or rather in `frontend/models`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, it is necessary to change the first field of **Model Generator**,
    **Namespace**, so as to switch from `app/models` to `common/models`, the shared
    area of common data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – displaying available rooms in the frontend site](img/B04656_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gii model generator in advanced template
  prefs: []
  type: TYPE_NORMAL
- en: In `common/models`, there should be a `Room.php` file containing the model of
    the `Room` table.
  prefs: []
  type: TYPE_NORMAL
- en: The second step it is to create the controller and the action of the controller
    to display the rooms list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the controller under `frontend/controllers/RoomsController.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the namespace declaration on top is `frontend\controllers`, since
    every application in the web project has its own namespace (in this case, `frontend`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We should never directly subclass `yii\web\Controller`, instead we should create
    a custom controller for each application, for example, `frontend\controllers\BaseController`,
    and then subclass it from every controller that we will create in `frontend\controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the third step is to create view content of index action in `frontend/views/rooms/index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following output with the data available in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – displaying available rooms in the frontend site](img/B04656_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rooms availability in the frontend
  prefs: []
  type: TYPE_NORMAL
- en: Customizing a URL in the advanced template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with multiple applications in the same project, you might require
    access from an application to another, for example, from the backend to a frontend
    link. This is because we want to display public page rendering in the frontend
    after inserting data in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: The `urlManager` property is customized with references about the application
    where it is defined. However, we can add specific properties to refer to the respective
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, in `common/config/main.php`, we can add these two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For example, we can get a URL to frontend from everywhere. It is enough to write
    this code `echo Yii::$app->urlManagerFrontend->createUrl(...)` to create a URL
    from frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is necessary to put the `.htaccess` file in the `web` folder of each application
    that has the `enablePrettyUrl` property in the `urlManager` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii also provides convenient aliases to application paths, other than the default
    aliases of the basic template:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@common`: This is the common directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@frontend`: This is the frontend web application directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@backend`: This is the backend web application directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@console`: This is the console directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using the advanced template in the same domain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that the advanced template creates more applications in the same
    web application than we can reach using `/frontend` or `/backend` or any other
    application name prefix in the URL. However, it is not advisable, especially for
    frontend, that all URLs contain a `/frontend` prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to have this URL format for frontend: `http://hostname/yiiadv/`; and
    this one for backend: `http://hostname/yiiadv/admin` (we can choose the name we
    want).'
  prefs: []
  type: TYPE_NORMAL
- en: All requests have to be managed on the `/yiiadv` folder level. So, we will add
    an `.htaccess` file in the `/yiiadv` folder that it will dispatch to the correct
    route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the actions that must be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure `.htaccess` in `/yiiadv` to handle all requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the backend application to customize its `baseUrl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the frontend application to customize its `baseUrl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is obvious that steps 2 and 3 must be repeated for any other application,
    for which we want to manipulate the base URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'For step 1, let''s put the `.htaccess` file with the following content in the
    `/yiiadv` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, in the `Backend` block of `.htaccess`, we catch requests in `/yiiadv/admin`
    and redirect them to the `yiiadv/backend/web/` base URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'For step 2, the backend requests capture is completed when we also make these
    changes in backend configuration, adding the `request` property in `backend/config/main.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, point the browser to `http://hostname/yiiadv/admin` and if we did everything
    correctly we should finally be able to see the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure there is a `request` attribute in the configuration array in `backend/config/main-local.php`;
    we need to comment this otherwise it will overwrite `request` in the `backend/config/main.php`
    file that we have just changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, just like we have done with backend requests, in step 3, we need to
    change the `request` property for frontend requests under `frontend/config/main.php`
    in the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, point the browser to `http://hostname/yiiadv` and if we did everything
    correctly, we should see the congratulation page of the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the last part of this example, if we want to reach the frontend to the `http://hostname`
    URL and backend to the `http://hostname/admin` URL, we must put an `.htaccess`
    file in the document root folder with this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we must change the `request` property of the frontend configuration in
    `frontend/config/main.php` with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, change the `request` property of the backend configuration in `backend/config/main.php`
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this way, the frontend is now reachable pointing the browser to `http://hostname`
    and the backend to `http://hostname/admin`.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the advanced template in the shared hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion, almost all applications should use the advanced template, since
    it provides the right project structure from the very start, so as to immediately
    handle frontend and backend occurring in every web project.
  prefs: []
  type: TYPE_NORMAL
- en: However, we have also seen that the advanced template requires a console access
    to execute installation and initialization commands. So, if we have a remote hosting
    without this capability, it could be difficult for us to install and use Yii with
    the advanced template.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we cannot add the console capability to remote hosting, we have two possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the project in the local environment where we can install what we want
    and need; it is enough to locally install a WAMP or a LAMP distribution (based
    on the operating system of the hosting machine) and then launch the composer command
    to install Yii
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch the `init` command to initialize the project (it could be initialized
    from start in production mode so that no other changes are needed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, the project is ready to be uploaded to remote hosting. Remember that
    project environment is in production mode, but in this way, we do not have to
    change the configuration manually if we want to pass from development to production
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to use Yii to build a modern web project based on
    frontend and backend applications. We have found out differences between basic
    and advanced templates, installing our first advanced project based on advanced
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Then we have used the `init` command to customize development or production
    environment in which to make the application run. Then we have written an example
    to display in the frontend rooms list, similar to what we have done in the previous
    basic template.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we customized URLs to make them pretty also in the advanced template,
    to refer to frontend and backend without URL application prefix. We also learned
    how to use advanced templates in shared hosting that does not have access to the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain how to write a multilingual app, adapt,
    and render the app in different languages without changes to the source code.
  prefs: []
  type: TYPE_NORMAL
