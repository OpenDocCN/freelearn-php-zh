- en: Chapter 13. Final Refactoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the final stage of our development. Now that we have written all the
    working code, we must make it reusable but most importantly, maintainable. This
    chapter will help you to reuse code by means of widgets and other components.
    We will see some practical examples on how to use them. Then, we will deal with
    documentation, an important aspect of app development that allows everyone to
    quickly learn how a project is structured and built.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the documentation, we are going to use the two most important tools provided
    by the framework in order to build API and guide references, making a real-life
    example. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – creating a widget with a carousel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – creating a component that creates a backup of the MySQL database and
    sends an e-mail to the administrator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating the API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – using API documentation to generate doc of the app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A widget is a reusable client-side code (containing JavaScript, CSS, and HTML)
    with minimal logic wrapped in a `yii\base\Widget` object that we can easily insert
    and apply in any view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a widget requires you to extend two methods of `yii\base\Widget`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `init()` method initializes the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `run()` method executes the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to instance a widget, it is enough to call the static `widget()` method
    that accepts just one parameter or better still an array containing values for
    its public properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This returns a string containing widget output, passing its value `value of
    prop1` for its `prop1` public properties.
  prefs: []
  type: TYPE_NORMAL
- en: If we need to insert an extra code in a widget's execution (for example, in
    the ActiveForm widget), we have a more complex way of instantiating the widget,
    using the `begin()` and `end()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The first method, `begin()`, accepts a function parameter with a configuration
    array to pass to the widget, and it will return the widget object.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the second method, `end()`, is called, the code between these two methods
    will be displayed and simultaneously, the `end()` method directly echoes the output
    of the widget `run()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As for any other views, in the `run()` method, we can refer to a view file,
    through the `render()` method, in order to display the widget output.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a widget could be a real-time date/time clock. For this purpose,
    we will build a clock based on a block containing the date/time string updated
    by the JavaScript code. We can pass to widget construct time some values concerning
    for example, the color of the border box.
  prefs: []
  type: TYPE_NORMAL
- en: To make an instance, let's start with the basic template app (but this is obviously
    also valid for the advanced template app). Create a new folder (if it does not
    exist) named `components` in the root of the project at the same level of `controllers`,
    `models`, `views`, and so on, which will contain all the widgets we want to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in this folder, we will create a new file named `ClockWidget.php` with
    the complete path `basic/components/ClockWidget.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the `init()` method, we have also made references to the jQuery asset to
    request the framework to load the jQuery plugin, since we need it in the view
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In the `run()` method, we have rendered the `clock` view, whose content will
    be discussed in next rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, create a new folder at `basic/components/views` and, within it, a new file
    named `clock.php` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code simply displays a box with a string containing real-time values of
    the current date and time, updated every second.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can use our widget in any view using this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Example – creating a widget with a carousel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will create a widget that consists of a carousel with some
    rooms (we can choose which one to display by passing them to the widget with the
    public property). Again, we will use a basic template application; however, everything
    is equally applicable to the advanced template apps.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will create a new controller to use its view as a widget
    container.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create this new controller named `TestCarouselController` at `basic/controller/TestCarouselController.php`.
    From here, we will pass the `models` property, consisting of a list of maximum
    three rooms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create the view at `basic/views/test-carousel/index.php` with
    the widget output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This builds the widget filling and its public properties `models` and `options`.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to create our widget. To isolate the widget from another code
    as much as possible, we create a specific widget folder at the `basic/components`
    folder, under a subfolder named `CarouselWidget` inside of which we will create
    the widget file named `CarouselWidget.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This widget includes a public property, `models` that contains the room''s
    model that has been passed from the container view. It is necessary to pass these
    models to the Carousel widget at `\yii\bootstrap\Carousel` as an array of this
    kind:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this way, in the `init()` method, we will create an internal representation
    of the models according to the Bootstrap Yii2 widget expectation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the `run()` method, we will output the view now in the views folder
    at `basic/components/CarouselWidget/views`. This is the widget content; remember
    that it is stored in `CarouselWidget.php` at `basic/components/CarouselWidget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The widget view, called in the `run()` method, will be stored in the `carousel.php`
    file at `basic/components/CarouselWidget/views`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Browsing to `http://hostname/basic/web/test-carousel/index`, we will see the
    carousel widget (only text, but we can also insert some images within).
  prefs: []
  type: TYPE_NORMAL
- en: Creating components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A component is a reusable object that should contain only logic, and it is callable
    from every point of the app. In a component, we put all the functions that are
    usable in more than one place of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, a component extends `yii\base\Component` that implements the property,
    event and behavior features. We can have two kinds of component: component and
    application component. The only difference between them is that the second has
    to be also configured in the configuration file of the app in the `components`
    property and it is available as a property from the `Yii::$app` object. Examples
    of application components are `db`, `user`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, components are stored in the `components` folder starting from the
    root folder of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to create a simple custom component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can instantiate this component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will have a new instance of the `MyComponent` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to render this component into the application component and access
    to it through `Yii::$app->myComponent`, we must update the configuration file,
    `web.php`, at `basic/config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can call `myComponent` using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that an application component is a single and shared instance of the
    same object.
  prefs: []
  type: TYPE_NORMAL
- en: We can make custom initializations when a component is instantiated by overriding
    the `init()` method of the component.
  prefs: []
  type: TYPE_NORMAL
- en: A concrete example of the component (or the application component, according
    to our needs) could be sending an SMS to the SMS gateway for the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This example is suitable to use this component as an application component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'That is usable directly from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Another common example for an application component could be an object to send
    push notifications to mobile devices, which is made in the same way as the previous
    SMS gateway object.
  prefs: []
  type: TYPE_NORMAL
- en: Example – creating a component that creates a backup of the MySQL database and
    sends an e-mail to the administrator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will show a common task concerning the creation of backup copies
    for the main database and the alert messages that the administrator receives once
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: A backup will be taken using the command line MySQL tool.
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance operations should be executed in a console environment since they
    can be scheduled (every day, every week, two days a week, and so on), and they
    could cause a web server timeout (usually, if an operation is not finished, the
    web server will return a timeout error after 30 seconds) if this operation takes
    longer than the maximum time available. So we will start by creating a console
    controller in the advanced template that we previously installed.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the project root folder for the advanced template is `yiiadv`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new component in `Maintenance.php` at `yiiadv/common/components` with
    this content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `launchBackup()` method will launch `mysqldump` (which should be installed
    in the system) by passing the username, password, database, and the destination
    file path where the SQL output of this command is to be stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it will return an array with these values: command, exit code of command,
    and its possible output text. Now let''s create the console controller that we
    will use to launch the command. We could also launch it from a web controller,
    for example after clicking on a button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the console controller in `MaintenanceController.php` at `yiiadv/console/controllers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make some considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: We could set the `launchBackup()` method of the maintenance component as static
    by avoiding to create an instance of the object; however, if we keep it nonstatic,
    we could also use it as application component. Otherwise, if we mark the method
    as static, and then use it as application component when calling the static method
    `launchBackup()` from the object, we will receive a warning from PHP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could move the file creation inside the `launchBackup()` method because in
    this case it is a temporary file, but generally we could use a specific file path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could avoid passing database info and get it from Yii parameters, if we store
    them in the parameters file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A more complete action is to back up and send an e-mail to the administrator,
    containing the backup result and eventually, if needed, also the backup file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A module is practically an application inside the main application. In fact,
    it is organized as a directory that is called the base path of the module. Within
    the directory, there are folders containing its controllers, models, views, and
    other code, just like in an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the typical structure of a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `module` class file is instanced when a module is being accessed and it
    is used to share data and components for code, such as application instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'The module class file has these characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: It is by default named `Module.php`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is instanced once during the code execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is located directly under the module's base path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It extends from `yii\base\Module`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at an example of a module class for `myCustomModule` (under the
    `app\modules\myCustomModule` namespace):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As a standard application, a module can have its own configuration based on
    a config file that has the same contents of a standard application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We load this in the `init()` method of the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Then, we create and use controllers, models, and views in the same way we do
    with a normal application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We always have to take care to specify the right namespace at the top of every
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to use a module in an application, we simply configure the application
    by listing the module in the module''s property of the application. The following
    code in the application configuration uses the forum module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Generating an API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is definitively one of the most important aspects of an app, since
    it provides information about its flows and structures. Unfortunately, it is often
    omitted due to lack of time.
  prefs: []
  type: TYPE_NORMAL
- en: Yii give us a powerful tool to automatically generate a pretty documentation.
    Basically, it uses all the documentation comments present in the app, those starting
    with `/**` instead of the classic `/*`.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we have the advantage that comments in the code are used to produce
    a complete documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Inside these comments, there are few keywords that are usable according to the
    context—file, class, or function/method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of a file, the most common keywords to put on top are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@link url`, where `url` is the reference URL linked to the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@copyright text`, where text is the content of copyright'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@license url`, where `url` is the reference to license content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In case of a class, the most common keywords to put on top are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@author name`, where name is the name of the author'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@since version`, where version is the version of the project in which this
    class has been included'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In case of a function/method, the most common keywords to put on top are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@param type name`, where type is the type of parameter and name is the name
    of the parameter passed as an argument of the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@return type`, where type is the returned type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@throws class`, where class is the exception class thrown by the exception'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides API documentation, Yii provides tools to create pretty guide files that
    are in the `.md` format (typical of GitHub). It is easy to find information on
    formatting a `.md` file by surfing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Example – using an API documentation to generate a doc of app and services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's now see which commands automatically produce a documentation from the
    Yii app.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two kinds of documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: API documentation, which is a reference of each `.php` file in the project,
    completed with doc comments referred to a single file, class, or function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guide, which is a pretty manual for the app, created using the `.md` files that
    Yii renders in pretty `.html` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first step is to install `api-doc`, if it is not already present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Point to the project root folder and launch this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will install the `yii2-apidoc` extension.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If this command is not properly complete, launch also a Composer update as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can launch the command to produce an API documentation starting from
    the project root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter, `api`, identifies the command to execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter, `./`, identifies the path of the source files to scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter, `../app-doc`, identifies the destination folder of the
    created documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After launching the command, going to the `../app-doc` folder on a browser will
    show us the API documentation created by the framework.
  prefs: []
  type: TYPE_NORMAL
- en: When we make any changes in the source file, it is necessary to relaunch the
    command to update the API documentation. The second kind of documentation is the
    guide, a set of `.html` files produced by `.md` files.
  prefs: []
  type: TYPE_NORMAL
- en: So we need to create a folder, starting from the project root folder, for example,
    the folder named `guide`, where we will put all the `.md` files that we want to
    convert into `.html` pretty files from the command `guide`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to launch the command to create our guide, which is totally
    similar to the previously made API command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This command will convert all the `.md` files present in the `./guide` folder
    into `.html` files, storing them in the `../app-doc` folder (together with the
    API documentation files).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a concrete example. Starting with the basic template project, create
    a new controller named `TestDocController` in `TestDocController.php` at `basic/controllers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open a shell console on host, and from the project root folder, launch
    the command to generate the API documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will create the documentation for all files starting with the root folder
    (`./`) and storing the HTML result files in `../app-doc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, on your browser, go to `http://hostname/app-doc` and we will display the
    API documentation index page. Search for `TestDocController.php` in the side menu
    and click on it. This should be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using an API documentation to generate a doc of app and services](img/B04656_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: TestDocController API documentation
  prefs: []
  type: TYPE_NORMAL
- en: Now, we want to demonstrate the second kind of documentation—guide documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder from the project root folder named `app-guide`. In it, put
    a new file named `test-doc-controller.md` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: $a = 10;
  prefs: []
  type: TYPE_NORMAL
- en: $b = 20;
  prefs: []
  type: TYPE_NORMAL
- en: $c = $this->makeSum(float $a, float $b)     // $c = 30;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the shell console of the hosting and from the project root folder, launch
    the command to generate the guide documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This will create the guide documentation for all `.md` files in the `./app-guide`
    folder and will store `.html` results in `../app-doc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your browser go to `http://hostname/app-doc/guide-test-doc-controller.html`,
    you should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – using an API documentation to generate a doc of app and services](img/B04656_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: TestDocController guide documentation
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, you learned how to make reusable and easily maintainable
    code, using widgets and components. Talking about reusable view code (HTML, JavaScript,
    and CSS), we introduced widgets, defined and focused on the benefits they add
    to the project. Next, you learned to build and use them, and finally, we did a
    practical example by building a new widget from scratch. Talking of reusable logic
    code, we discovered its components, distinguished between components and application
    components, and also did some practical examples by building useful components
    for real-life problems.
  prefs: []
  type: TYPE_NORMAL
- en: Then we mastered the documentation generator, specifically API and guide documentation.
    You learned how to launch and use the tools provided by Yii. Finally, we built
    a controller class to explain, with a practical example, how to build the API
    reference and the guide reference for that controller.
  prefs: []
  type: TYPE_NORMAL
