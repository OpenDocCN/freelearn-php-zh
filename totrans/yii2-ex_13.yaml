- en: Chapter 13. Final Refactoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。最终重构
- en: This is the final stage of our development. Now that we have written all the
    working code, we must make it reusable but most importantly, maintainable. This
    chapter will help you to reuse code by means of widgets and other components.
    We will see some practical examples on how to use them. Then, we will deal with
    documentation, an important aspect of app development that allows everyone to
    quickly learn how a project is structured and built.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的开发阶段的最后阶段。现在我们已经编写了所有的工作代码，我们必须使其可重用，但更重要的是，可维护。本章将帮助你通过小部件和其他组件重用代码。我们将看到一些如何使用它们的实际示例。然后，我们将处理文档，这是应用开发的一个重要方面，它允许每个人快速了解项目的结构和构建方式。
- en: 'For the documentation, we are going to use the two most important tools provided
    by the framework in order to build API and guide references, making a real-life
    example. We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文档，我们将使用框架提供的两个最重要的工具来构建API和指南参考，通过一个真实世界的示例。我们将涵盖以下主题：
- en: Creating widgets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建小部件
- en: Example – creating a widget with a carousel
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 创建带有轮播的小部件
- en: Creating components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建组件
- en: Example – creating a component that creates a backup of the MySQL database and
    sends an e-mail to the administrator
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 创建一个创建MySQL数据库备份并发送电子邮件给管理员的组件
- en: Creating modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模块
- en: Generating the API documentation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成API文档
- en: Example – using API documentation to generate doc of the app
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 - 使用API文档生成应用的文档
- en: Creating widgets
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建小部件
- en: A widget is a reusable client-side code (containing JavaScript, CSS, and HTML)
    with minimal logic wrapped in a `yii\base\Widget` object that we can easily insert
    and apply in any view.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件是一个可重用的客户端代码（包含JavaScript、CSS和HTML），它包含最少的逻辑，并封装在`yii\base\Widget`对象中，我们可以轻松地将其插入并应用于任何视图。
- en: 'Building a widget requires you to extend two methods of `yii\base\Widget`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构建小部件需要你扩展`yii\base\Widget`的两个方法：
- en: The `init()` method initializes the object
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init()`方法初始化对象'
- en: The `run()` method executes the object
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run()`方法执行对象'
- en: In order to instance a widget, it is enough to call the static `widget()` method
    that accepts just one parameter or better still an array containing values for
    its public properties.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实例化一个小部件，只需调用接受一个参数或更好的是一个包含其公共属性值的数组的静态`widget()`方法。
- en: 'The following is an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This returns a string containing widget output, passing its value `value of
    prop1` for its `prop1` public properties.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个包含小部件输出的字符串，传递其`prop1`公共属性的`value of prop1`值。
- en: If we need to insert an extra code in a widget's execution (for example, in
    the ActiveForm widget), we have a more complex way of instantiating the widget,
    using the `begin()` and `end()` methods.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在部件的执行中插入额外的代码（例如，在ActiveForm部件中），我们可以使用`begin()`和`end()`方法以更复杂的方式实例化部件。
- en: The first method, `begin()`, accepts a function parameter with a configuration
    array to pass to the widget, and it will return the widget object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法，`begin()`，接受一个带有配置数组的函数参数，并将其传递给小部件，然后它将返回小部件对象。
- en: 'When the second method, `end()`, is called, the code between these two methods
    will be displayed and simultaneously, the `end()` method directly echoes the output
    of the widget `run()` method:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用第二种方法`end()`时，这两个方法之间的代码将被显示，并且同时，`end()`方法直接回显小部件`run()`方法的输出：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As for any other views, in the `run()` method, we can refer to a view file,
    through the `render()` method, in order to display the widget output.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何其他视图，在`run()`方法中，我们可以通过`render()`方法引用视图文件，以显示小部件输出。
- en: For example, a widget could be a real-time date/time clock. For this purpose,
    we will build a clock based on a block containing the date/time string updated
    by the JavaScript code. We can pass to widget construct time some values concerning
    for example, the color of the border box.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个部件可能是一个实时日期/时间时钟。为此目的，我们将基于一个包含由JavaScript代码更新的日期/时间字符串的块来构建一个时钟。我们可以向部件构造函数传递一些值，例如边框框的颜色。
- en: To make an instance, let's start with the basic template app (but this is obviously
    also valid for the advanced template app). Create a new folder (if it does not
    exist) named `components` in the root of the project at the same level of `controllers`,
    `models`, `views`, and so on, which will contain all the widgets we want to build.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个实例，让我们从基本的模板应用开始（但这显然也适用于高级模板应用）。在项目的根目录中创建一个名为`components`的新文件夹（如果不存在），位于`controllers`、`models`、`views`等同一级别，它将包含我们想要构建的所有小部件。
- en: 'Then, in this folder, we will create a new file named `ClockWidget.php` with
    the complete path `basic/components/ClockWidget.php`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这个文件夹中，我们将创建一个名为 `ClockWidget.php` 的新文件，完整路径为 `basic/components/ClockWidget.php`：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the `init()` method, we have also made references to the jQuery asset to
    request the framework to load the jQuery plugin, since we need it in the view
    file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `init()` 方法中，我们还引用了 jQuery 资产，请求框架加载 jQuery 插件，因为我们需要在视图文件中使用它。
- en: In the `run()` method, we have rendered the `clock` view, whose content will
    be discussed in next rows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `run()` 方法中，我们渲染了 `clock` 视图，其内容将在下一行讨论。
- en: 'So, create a new folder at `basic/components/views` and, within it, a new file
    named `clock.php` with the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 `basic/components/views` 下创建一个新的文件夹，并在其中创建一个名为 `clock.php` 的新文件，其代码如下：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code simply displays a box with a string containing real-time values of
    the current date and time, updated every second.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码简单地显示一个包含实时日期和时间值的字符串的框，每秒更新一次。
- en: 'Finally, we can use our widget in any view using this code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用以下代码在任何视图中使用我们的组件：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Example – creating a widget with a carousel
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 创建带有轮播的组件
- en: In this example, we will create a widget that consists of a carousel with some
    rooms (we can choose which one to display by passing them to the widget with the
    public property). Again, we will use a basic template application; however, everything
    is equally applicable to the advanced template apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个包含一些房间的轮播组件（我们可以通过将它们传递给组件的公共属性来选择显示哪一个）。再次，我们将使用基本的模板应用程序；然而，所有这些同样适用于高级模板应用程序。
- en: For this example, we will create a new controller to use its view as a widget
    container.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将创建一个新的控制器来使用其视图作为组件容器。
- en: 'So, let''s create this new controller named `TestCarouselController` at `basic/controller/TestCarouselController.php`.
    From here, we will pass the `models` property, consisting of a list of maximum
    three rooms:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们在 `basic/controller/TestCarouselController.php` 下创建这个名为 `TestCarouselController`
    的新控制器。从这里，我们将传递 `models` 属性，它包含最多三个房间的列表：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we will create the view at `basic/views/test-carousel/index.php` with
    the widget output as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在 `basic/views/test-carousel/index.php` 下创建视图，组件输出如下：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This builds the widget filling and its public properties `models` and `options`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将构建组件填充及其公共属性 `models` 和 `options`。
- en: Now it is time to create our widget. To isolate the widget from another code
    as much as possible, we create a specific widget folder at the `basic/components`
    folder, under a subfolder named `CarouselWidget` inside of which we will create
    the widget file named `CarouselWidget.php`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建我们的组件的时候了。为了尽可能地将组件与其他代码隔离，我们在 `basic/components` 文件夹下创建一个特定的组件文件夹，在 `CarouselWidget`
    子文件夹中，我们将创建一个名为 `CarouselWidget.php` 的组件文件。
- en: 'This widget includes a public property, `models` that contains the room''s
    model that has been passed from the container view. It is necessary to pass these
    models to the Carousel widget at `\yii\bootstrap\Carousel` as an array of this
    kind:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件包含一个公共属性 `models`，它包含从容器视图传递过来的房间模型。在 `\yii\bootstrap\Carousel` 中将这些模型作为此类数组传递是必要的：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this way, in the `init()` method, we will create an internal representation
    of the models according to the Bootstrap Yii2 widget expectation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，在 `init()` 方法中，我们将根据 Bootstrap Yii2 组件的期望创建模型的内部表示。
- en: 'Finally, in the `run()` method, we will output the view now in the views folder
    at `basic/components/CarouselWidget/views`. This is the widget content; remember
    that it is stored in `CarouselWidget.php` at `basic/components/CarouselWidget`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `run()` 方法中，我们将输出现在位于 `basic/components/CarouselWidget/views` 视图文件夹中的视图。这是组件内容；请记住，它存储在
    `basic/components/CarouselWidget` 下的 `CarouselWidget.php` 中：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The widget view, called in the `run()` method, will be stored in the `carousel.php`
    file at `basic/components/CarouselWidget/views`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `run()` 方法中调用的组件视图将存储在 `basic/components/CarouselWidget/views` 下的 `carousel.php`
    文件中：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Browsing to `http://hostname/basic/web/test-carousel/index`, we will see the
    carousel widget (only text, but we can also insert some images within).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到 `http://hostname/basic/web/test-carousel/index`，我们将看到轮播组件（仅包含文本，但我们也可以在其中插入一些图片）。
- en: Creating components
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组件
- en: A component is a reusable object that should contain only logic, and it is callable
    from every point of the app. In a component, we put all the functions that are
    usable in more than one place of the app.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是一个可重用的对象，应该只包含逻辑，并且可以从应用程序的任何位置调用。在组件中，我们放置所有在应用程序的多个位置可用的函数。
- en: 'Technically, a component extends `yii\base\Component` that implements the property,
    event and behavior features. We can have two kinds of component: component and
    application component. The only difference between them is that the second has
    to be also configured in the configuration file of the app in the `components`
    property and it is available as a property from the `Yii::$app` object. Examples
    of application components are `db`, `user`, and so on.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，一个组件扩展了`yii\base\Component`，实现了属性、事件和行为功能。我们可以有两种类型的组件：组件和应用组件。它们之间的唯一区别是第二个组件还需要在应用的配置文件中的`components`属性中进行配置，并且它作为属性从`Yii::$app`对象中可用。应用组件的例子有`db`、`user`等等。
- en: Usually, components are stored in the `components` folder starting from the
    root folder of the project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，组件存储在项目根目录开始的`components`文件夹中。
- en: 'Let''s see how to create a simple custom component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个简单的自定义组件：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can instantiate this component as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式实例化此组件：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, we will have a new instance of the `MyComponent` object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将有一个新的`MyComponent`对象实例。
- en: 'If we want to render this component into the application component and access
    to it through `Yii::$app->myComponent`, we must update the configuration file,
    `web.php`, at `basic/config`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将此组件渲染为应用组件并通过`Yii::$app->myComponent`访问它，我们必须更新配置文件`web.php`中的`basic/config`：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, we can call `myComponent` using:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们可以使用以下方式调用`myComponent`：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that an application component is a single and shared instance of the
    same object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，应用组件是相同对象的单个共享实例。
- en: We can make custom initializations when a component is instantiated by overriding
    the `init()` method of the component.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过覆盖组件的`init()`方法来在组件实例化时进行自定义初始化。
- en: A concrete example of the component (or the application component, according
    to our needs) could be sending an SMS to the SMS gateway for the app.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的一个具体例子（或根据我们的需求，应用组件）可能是向应用短信网关发送短信。
- en: 'The component could be:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以是：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This example is suitable to use this component as an application component:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例适合将此组件用作应用组件：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That is usable directly from:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以直接从以下位置使用：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Another common example for an application component could be an object to send
    push notifications to mobile devices, which is made in the same way as the previous
    SMS gateway object.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 应用组件的另一个常见例子可能是向移动设备发送推送通知的对象，它是以与之前短信网关对象相同的方式制作的。
- en: Example – creating a component that creates a backup of the MySQL database and
    sends an e-mail to the administrator
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 创建一个组件，该组件备份MySQL数据库并向管理员发送电子邮件
- en: This example will show a common task concerning the creation of backup copies
    for the main database and the alert messages that the administrator receives once
    complete.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将展示一个关于创建主数据库备份副本和管理员完成时接收的警报消息的常见任务。
- en: A backup will be taken using the command line MySQL tool.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用命令行MySQL工具进行备份。
- en: Maintenance operations should be executed in a console environment since they
    can be scheduled (every day, every week, two days a week, and so on), and they
    could cause a web server timeout (usually, if an operation is not finished, the
    web server will return a timeout error after 30 seconds) if this operation takes
    longer than the maximum time available. So we will start by creating a console
    controller in the advanced template that we previously installed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 维护操作应在控制台环境中执行，因为它们可以被安排（每天、每周、每周两天等），并且如果此操作耗时超过最大时间，可能会导致Web服务器超时（通常，如果操作未完成，Web服务器将在30秒后返回超时错误）。因此，我们将首先在之前安装的高级模板中创建一个控制台控制器。
- en: Remember that the project root folder for the advanced template is `yiiadv`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，高级模板的项目根文件夹是`yiiadv`。
- en: 'Create a new component in `Maintenance.php` at `yiiadv/common/components` with
    this content:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`yiiadv/common/components`的`Maintenance.php`中创建一个新的组件，内容如下：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `launchBackup()` method will launch `mysqldump` (which should be installed
    in the system) by passing the username, password, database, and the destination
    file path where the SQL output of this command is to be stored.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchBackup()`方法将通过传递用户名、密码、数据库和SQL命令输出要存储的目标文件路径来启动`mysqldump`（应该在系统中安装）。'
- en: 'Then, it will return an array with these values: command, exit code of command,
    and its possible output text. Now let''s create the console controller that we
    will use to launch the command. We could also launch it from a web controller,
    for example after clicking on a button.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将返回一个包含这些值的数组：命令、命令的退出代码以及可能的输出文本。现在让我们创建将用于启动命令的控制台控制器。我们也可以从网络控制器启动它，例如在点击按钮后。
- en: 'Let''s create the console controller in `MaintenanceController.php` at `yiiadv/console/controllers`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `yiiadv/console/controllers` 下的 `MaintenanceController.php` 中创建控制台控制器：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s make some considerations:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些考虑：
- en: We could set the `launchBackup()` method of the maintenance component as static
    by avoiding to create an instance of the object; however, if we keep it nonstatic,
    we could also use it as application component. Otherwise, if we mark the method
    as static, and then use it as application component when calling the static method
    `launchBackup()` from the object, we will receive a warning from PHP.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过避免创建对象实例来将维护组件的 `launchBackup()` 方法设置为静态；然而，如果我们保持它为非静态，我们也可以将其用作应用程序组件。否则，如果我们将方法标记为静态，然后在调用对象中的静态方法
    `launchBackup()` 时将其用作应用程序组件，我们将收到 PHP 的警告。
- en: We could move the file creation inside the `launchBackup()` method because in
    this case it is a temporary file, but generally we could use a specific file path.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将文件创建移动到 `launchBackup()` 方法内部，因为在这种情况下它是一个临时文件，但通常我们可以使用特定的文件路径。
- en: We could avoid passing database info and get it from Yii parameters, if we store
    them in the parameters file.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们将数据库信息存储在参数文件中，我们可以避免传递数据库信息，并从 Yii 参数中获取它。
- en: 'A more complete action is to back up and send an e-mail to the administrator,
    containing the backup result and eventually, if needed, also the backup file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更完整的操作是备份并发送电子邮件给管理员，包含备份结果，如果需要，还可以包含备份文件：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating modules
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模块
- en: A module is practically an application inside the main application. In fact,
    it is organized as a directory that is called the base path of the module. Within
    the directory, there are folders containing its controllers, models, views, and
    other code, just like in an application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 模块实际上是在主应用内部的一个应用。实际上，它被组织成一个名为模块基本路径的目录。在目录内，有包含其控制器、模型、视图和其他代码的文件夹，就像在一个应用中一样。
- en: 'Follow the typical structure of a module:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按照模块的典型结构：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `module` class file is instanced when a module is being accessed and it
    is used to share data and components for code, such as application instances.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问模块时，会实例化 `module` 类文件，它用于在代码中共享数据组件，例如应用程序实例。
- en: 'The module class file has these characteristics:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`module` 类文件具有以下特点：'
- en: It is by default named `Module.php`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认命名为 `Module.php`
- en: It is instanced once during the code execution
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码执行过程中仅实例化一次
- en: It is located directly under the module's base path
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它位于模块基本路径的直接下方
- en: It extends from `yii\base\Module`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它继承自 `yii\base\Module`
- en: 'Let''s look at an example of a module class for `myCustomModule` (under the
    `app\modules\myCustomModule` namespace):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `myCustomModule` 模块（在 `app\modules\myCustomModule` 命名空间下）的模块类文件示例：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As a standard application, a module can have its own configuration based on
    a config file that has the same contents of a standard application:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准应用，模块可以基于具有与标准应用相同内容的配置文件有自己的配置：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We load this in the `init()` method of the module:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模块的 `init()` 方法中加载这个：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then, we create and use controllers, models, and views in the same way we do
    with a normal application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们以与普通应用相同的方式创建和使用控制器、模型和视图。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We always have to take care to specify the right namespace at the top of every
    file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是需要在每个文件的最顶部指定正确的命名空间。
- en: 'Finally, to use a module in an application, we simply configure the application
    by listing the module in the module''s property of the application. The following
    code in the application configuration uses the forum module:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要在应用中使用模块，我们只需在应用的模块属性中列出模块。以下代码在应用配置中使用论坛模块：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Generating an API documentation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 API 文档
- en: Documentation is definitively one of the most important aspects of an app, since
    it provides information about its flows and structures. Unfortunately, it is often
    omitted due to lack of time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 文档无疑是应用最重要的方面之一，因为它提供了关于其流程和结构的信息。不幸的是，由于时间不足，它经常被省略。
- en: Yii give us a powerful tool to automatically generate a pretty documentation.
    Basically, it uses all the documentation comments present in the app, those starting
    with `/**` instead of the classic `/*`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Yii为我们提供了一个强大的工具来自动生成漂亮的文档。基本上，它使用应用程序中存在的所有文档注释，那些以`/**`开头而不是经典的`/*`。
- en: Therefore, we have the advantage that comments in the code are used to produce
    a complete documentation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有这样的优势，即代码中的注释被用来生成完整的文档。
- en: Inside these comments, there are few keywords that are usable according to the
    context—file, class, or function/method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些注释中，有一些关键字可以根据上下文使用——文件、类或函数/方法。
- en: 'In case of a file, the most common keywords to put on top are:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的情况下，最常见的关键字放在顶部的是：
- en: '`@link url`, where `url` is the reference URL linked to the file'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@link url`，其中`url`是链接到文件的参考URL'
- en: '`@copyright text`, where text is the content of copyright'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@copyright text`，其中`text`是版权内容'
- en: '`@license url`, where `url` is the reference to license content'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@license url`，其中`url`是许可证内容的参考'
- en: 'In case of a class, the most common keywords to put on top are:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在类的情况下，最常见的关键字放在顶部的是：
- en: '`@author name`, where name is the name of the author'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@author name`，其中`name`是作者名称'
- en: '`@since version`, where version is the version of the project in which this
    class has been included'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@since version`，其中`version`是包含此类的项目版本'
- en: 'In case of a function/method, the most common keywords to put on top are:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数/方法的情况下，最常见的关键字放在顶部的是：
- en: '`@param type name`, where type is the type of parameter and name is the name
    of the parameter passed as an argument of the function'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@param type name`，其中`type`是参数的类型，`name`是作为函数参数传递的参数名称'
- en: '`@return type`, where type is the returned type'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@return type`，其中`type`是返回的类型'
- en: '`@throws class`, where class is the exception class thrown by the exception'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@throws class`，其中`class`是抛出的异常类'
- en: Besides API documentation, Yii provides tools to create pretty guide files that
    are in the `.md` format (typical of GitHub). It is easy to find information on
    formatting a `.md` file by surfing the Internet.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除了API文档外，Yii还提供创建`.md`格式（典型的GitHub）的漂亮指南文件的工具。通过在互联网上搜索，很容易找到有关格式化`.md`文件的信息。
- en: Example – using an API documentation to generate a doc of app and services
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 - 使用API文档生成应用程序和服务的文档
- en: Let's now see which commands automatically produce a documentation from the
    Yii app.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看哪些命令能自动从Yii应用程序生成文档。
- en: 'There are two kinds of documentation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 文档有两种类型：
- en: API documentation, which is a reference of each `.php` file in the project,
    completed with doc comments referred to a single file, class, or function
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API文档，它是项目中每个`.php`文件的参考，由指向单个文件、类或函数的doc注释完成
- en: Guide, which is a pretty manual for the app, created using the `.md` files that
    Yii renders in pretty `.html` files
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指南，这是一个相当好的应用程序手册，使用Yii渲染的`.md`文件创建的`.html`文件
- en: The first step is to install `api-doc`, if it is not already present.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装`api-doc`，如果尚未安装。
- en: 'Point to the project root folder and launch this command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 指向项目根目录并启动此命令：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will install the `yii2-apidoc` extension.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装`yii2-apidoc`扩展。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If this command is not properly complete, launch also a Composer update as
    follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此命令没有正确完成，请按以下方式启动Composer更新：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we can launch the command to produce an API documentation starting from
    the project root folder:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从项目根目录启动命令以生成API文档：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The parameters are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参数如下：
- en: The first parameter, `api`, identifies the command to execute
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数`api`标识要执行的命令
- en: The second parameter, `./`, identifies the path of the source files to scan
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数`./`标识要扫描的源文件路径
- en: The third parameter, `../app-doc`, identifies the destination folder of the
    created documentation
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数`../app-doc`标识创建的文档的目标文件夹
- en: After launching the command, going to the `../app-doc` folder on a browser will
    show us the API documentation created by the framework.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 启动命令后，在浏览器中转到`../app-doc`文件夹将显示框架创建的API文档。
- en: When we make any changes in the source file, it is necessary to relaunch the
    command to update the API documentation. The second kind of documentation is the
    guide, a set of `.html` files produced by `.md` files.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在源文件中做出任何更改时，必须重新启动命令以更新API文档。第二种文档是指南，是一组由`.md`文件生成的`.html`文件。
- en: So we need to create a folder, starting from the project root folder, for example,
    the folder named `guide`, where we will put all the `.md` files that we want to
    convert into `.html` pretty files from the command `guide`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要从项目根文件夹创建一个文件夹，例如名为`guide`的文件夹，我们将把所有想要从命令`guide`转换为`.html`格式漂亮文件的`.md`文件放入其中。
- en: 'Now we are ready to launch the command to create our guide, which is totally
    similar to the previously made API command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备启动命令来创建我们的指南，这与之前制作的API命令完全相同：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This command will convert all the `.md` files present in the `./guide` folder
    into `.html` files, storing them in the `../app-doc` folder (together with the
    API documentation files).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将把`./guide`文件夹中所有的`.md`文件转换为`.html`文件，并将它们存储在`../app-doc`文件夹中（与API文档文件一起）。
- en: 'Let''s make a concrete example. Starting with the basic template project, create
    a new controller named `TestDocController` in `TestDocController.php` at `basic/controllers`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个具体的例子。从基本模板项目开始，在`basic/controllers`中的`TestDocController.php`创建一个名为`TestDocController`的新控制器：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now open a shell console on host, and from the project root folder, launch
    the command to generate the API documentation:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在主机上打开一个shell控制台，从项目根文件夹启动生成API文档的命令：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will create the documentation for all files starting with the root folder
    (`./`) and storing the HTML result files in `../app-doc`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为从根文件夹（`./`）开始的 所有文件创建文档，并将HTML结果文件存储在`../app-doc`。
- en: 'Now, on your browser, go to `http://hostname/app-doc` and we will display the
    API documentation index page. Search for `TestDocController.php` in the side menu
    and click on it. This should be the output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的浏览器中，访问`http://hostname/app-doc`，我们将显示API文档索引页面。在侧菜单中搜索`TestDocController.php`并点击它。这应该是输出：
- en: '![Example – using an API documentation to generate a doc of app and services](img/B04656_13_01.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用API文档生成应用和服务的文档](img/B04656_13_01.jpg)'
- en: TestDocController API documentation
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: TestDocController API文档
- en: Now, we want to demonstrate the second kind of documentation—guide documentation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想展示第二种文档类型——指南文档。
- en: 'Create a folder from the project root folder named `app-guide`. In it, put
    a new file named `test-doc-controller.md` with the following content:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目根文件夹创建一个名为`app-guide`的文件夹。在其中，放置一个名为`test-doc-controller.md`的新文件，内容如下：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $a = 10;
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`$a = 10;`'
- en: $b = 20;
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`$b = 20;`'
- en: $c = $this->makeSum(float $a, float $b)     // $c = 30;
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`$c = $this->makeSum(float $a, float $b)`     // $c = 30;'
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Go to the shell console of the hosting and from the project root folder, launch
    the command to generate the guide documentation:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 前往托管的shell控制台，从项目根文件夹启动生成指南文档的命令：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will create the guide documentation for all `.md` files in the `./app-guide`
    folder and will store `.html` results in `../app-doc`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`./app-guide`文件夹中的所有`.md`文件创建指南文档，并将`.html`结果存储在`../app-doc`。
- en: 'On your browser go to `http://hostname/app-doc/guide-test-doc-controller.html`,
    you should see the following screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中访问`http://hostname/app-doc/guide-test-doc-controller.html`，你应该看到以下屏幕：
- en: '![Example – using an API documentation to generate a doc of app and services](img/B04656_13_02.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![示例 – 使用API文档生成应用和服务的文档](img/B04656_13_02.jpg)'
- en: TestDocController guide documentation
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: TestDocController指南文档
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this final chapter, you learned how to make reusable and easily maintainable
    code, using widgets and components. Talking about reusable view code (HTML, JavaScript,
    and CSS), we introduced widgets, defined and focused on the benefits they add
    to the project. Next, you learned to build and use them, and finally, we did a
    practical example by building a new widget from scratch. Talking of reusable logic
    code, we discovered its components, distinguished between components and application
    components, and also did some practical examples by building useful components
    for real-life problems.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，你学习了如何使用小部件和组件制作可重用且易于维护的代码。谈到可重用视图代码（HTML、JavaScript和CSS），我们介绍了小部件，定义了它们并为项目带来的好处。接下来，你学习了如何构建和使用它们，最后，我们通过从头开始构建一个新的小部件进行了实际示例。谈到可重用逻辑代码，我们发现了其组件，区分了组件和应用组件，并通过为现实生活中的问题构建有用的组件进行了一些实际示例。
- en: Then we mastered the documentation generator, specifically API and guide documentation.
    You learned how to launch and use the tools provided by Yii. Finally, we built
    a controller class to explain, with a practical example, how to build the API
    reference and the guide reference for that controller.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们掌握了文档生成器，特别是API和指南文档。你学习了如何启动和使用Yii提供的工具。最后，我们构建了一个控制器类，通过一个实际示例来解释如何为该控制器构建API参考和指南参考。
