["```php\n    CREATE TABLE `users`(\n    `id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n    `name` VARCHAR(255) NOT NULL,\n    `email` VARCHAR(255) NOT NULL,\n    PRIMARY KEY(`id`)\n    );\n\n    ```", "```php\n    CREATE TABLE `blogs`(\n    `id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n    `user_id` INT UNSIGNED NOT NULL,\n    `name` VARCHAR(255) NOT NULL,\n    PRIMARY KEY(`id`),\n    KEY `user_id`(`user_id`),\n    CONSTRAINT `blogs__users` FOREIGN KEY(`user_id`) REFERENCES `users`(`id`)\n    );\n\n    ```", "```php\n    CREATE TABLE `posts`(\n    `id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n    `blog_id` INT UNSIGNED NOT NULL,\n    `title` VARCHAR(255) NOT NULL,\n    `body` TEXT NOT NULL,\n    `created` DATETIME NOT NULL,\n    `modified` DATETIME NOT NULL,\n    PRIMARY KEY(`id`),\n    KEY `blog_id`(`blog_id`),\n    CONSTRAINT `posts__blogs` FOREIGN KEY(`blog_id`) REFERENCES `blogs`(`id`)\n    );\n\n    ```", "```php\n    INSERT INTO `users`(`id`, `name`, `email`) VALUES\n    (1, 'John Doe', 'john.doe@example.com'),\n    (2, 'Jane Doe', 'jane.doe@example.com');\n    INSERT INTO `blogs`(`user_id`, `name`) VALUES\n    (1, 'John Doe\\'s Blog'),\n    (2, 'Jane Doe\\'s Blog');\n    INSERT INTO `posts`(`blog_id`, `title`, `body`, `created`, `modified`) VALUES\n    (1, 'John\\'s Post 1', 'Body for John\\'s Post 1', '2010-04-19 14:00:00', '2010-04-19 14:00:00'),\n    (1, 'John\\'s Post 2', 'Body for John\\'s Post 2', '2010-04-19 14:30:00', '2010-04-19 14:30:00'),\n    (1, 'John\\'s Post 3', 'Body for John\\'s Post 3', '2010-04-20 14:00:00', '2010-04-20 14:00:00'),\n    (1, 'John\\'s Post 4', 'Body for John\\'s Post 4', '2010-05-03 14:00:00', '2010-05-03 14:00:00'),\n    (2, 'Jane\\'s Post 1', 'Body for Jane\\'s Post 1', '2010-04-19 15:00:00', '2010-04-19 15:00:00'),\n    (2, 'Jane\\'s Post 2', 'Body for Jane\\'s Post 2', '2010-06-18 15:00:00', '2010-06-18 15:00:00'),\n    (2, 'Jane\\'s Post 3', 'Body for Jane\\'s Post 3', '2010-10-06 15:00:00', '2010-10-06 15:00:00');\n\n    ```", "```php\n    <?php\n    class Post extends AppModel {\n    public $belongsTo = array('Blog');\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    class PostsController extends AppController {\n    public function index() {\n    $this->set(compact('data'));\n    }\n    }\n    ?>\n\n    ```", "```php\n    <?php debug($data); ?>\n\n    ```", "```php\n$data = $this->Post->find('all', array(\n'group' => array('Blog.id')\n));\n\n```", "```php\n$data = $this->Post->find('all', array(\n'fields' => array('COUNT(Post.id) AS total', 'Blog.*'),\n'group' => array('Blog.id')\n));\n\n```", "```php\narray(\narray(\n0 => array(\n'total' => 4\n),\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n)\n),\narray(\n0 => array(\n'total' => 3\n),\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n)\n)\n)\n\n```", "```php\n<?php\nclass AppModel extends Model {\npublic function afterFind($results, $primary = false) {\nif (!empty($results)) {\nforeach($results as $i => $row) {\nif (!empty($row[0])) {\nforeach($row[0] as $field => $value) {\nif (!empty($row[$this->alias][$field])) {\n$field = 'total_' . $field;\n}\n$results[$i][$this->alias][$field] = $value;\n}\nunset($results[$i][0]);\n}\n}\n}\nreturn parent::afterFind($results, $primary);\n}\n}\n?>\n\n```", "```php\narray(\narray(\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n),\n'Post' => array(\n'total' => 4\n)\n),\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'total' => 3\n)\n)\n)\n\n```", "```php\n$data = $this->Post->find('all', array(\n'fields' => array(\n'CONCAT(YEAR(Post.created), \\'-\\', MONTH(Post.created)) AS period',\n'COUNT(Post.id) AS total',\n'Blog.*'\n),\n'group' => array('Blog.id', 'period')\n));\n\n```", "```php\narray(\narray(\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-4',\n'total' => 4\n)\n),\narray(\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-5',\n'total' => 1\n)\n),\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-10',\n'total' => 1\n)\n),\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-4',\n'total' => 1\n)\n)\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-6',\n'total' => 1\n)\n)\n)\n\n```", "```php\n<?php\nclass Post extends AppModel {\npublic $belongsTo = array('Blog');\npublic $virtualFields = array(\n'period' => 'CONCAT(YEAR(Post.created), \\'-\\', MONTH(Post.created))',\n'total' => 'COUNT(*)'\n);\n}\n?>\n\n```", "```php\n$data = $this->Post->find('all', array(\n'fields' => array(\n'period',\n'total',\n'Blog.*'\n),\n'group' => array('Blog.id', 'period')\n));\n\n```", "```php\narray(\narray(\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-4',\n'total' => 4\n)\n),\narray(\n'Blog' => array(\n'id' => 1,\n'user_id' => 1,\n'name' => 'John Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-5',\n'total' => 1\n)\n),\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-10',\n'total' => 1\n)\n),\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-4',\n'total' => 1\n)\n)\narray(\n'Blog' => array(\n'id' => 2,\n'user_id' => 2,\n'name' => 'Jane Doe\\'s Blog'\n),\n'Post' => array(\n'period' => '2010-6',\n'total' => 1\n)\n)\n)\n\n```", "```php\n$data = $this->Post->find('all', array(\n'fields' => array_keys($this->Post->schema())\n));\n\n```", "```php\n<?php\nclass AppModel extends Model {\npublic function beforeFind($query) {\nif (!empty($this->virtualFields)) {\n$virtualFields = isset($query['virtualFields']) ?\n$query['virtualFields'] :\narray_keys($this->virtualFields);\nif ($virtualFields !== true) {\n$this->_backVirtualFields = $this->virtualFields;\n$this->virtualFields = !empty($virtualFields) ?\narray_intersect_key($this->virtualFields, array_flip((array) $virtualFields)) :\narray();\n}\n}\nreturn parent::beforeFind($query);\n}\npublic function afterFind($results, $primary = false) {\nif (!empty($this->_backVirtualFields)) {\n$this->virtualFields = $this->_backVirtualFields;\n}\nreturn parent::afterFind($results, $primary);\n}\n}\n?>\n\n```", "```php\n$person = $this->Post->find('all', array(\n'virtualFields' => array('period')\n));\n\n```", "```php\n<?php\nclass AppModel extends Model {\npublic $actsAs = array('Containable');\n}\n?>\n\n```", "```php\n<?php\nclass Blog extends AppModel {\npublic $belongsTo = array('User');\n}\n?>\n\n```", "```php\n$post = $this->Post->find('first', array(\n'contain' => array(\n'Blog' => array(\n'fields' => array('name'),\n'User' => array('fields' => array('name'))\n)\n)\n));\n\n```", "```php\nSELECT `Post`.`id`, `Post`.`blog_id`, `Post`.`title`, `Post`.`body`, `Post`.`created`, `Post`.`modified`, `Blog`.`name`, `Blog`.`user_id` FROM `posts` AS `Post` LEFT JOIN `blogs` AS `Blog` ON (`Post`.`blog_id` = `Blog`.`id`) WHERE 1 = 1 LIMIT 1;\nSELECT `Blog`.`name`, `Blog`.`user_id` FROM `blogs` AS `Blog` WHERE `Blog`.`id` = 1;\nSELECT `User`.`name` FROM `users` AS `User` WHERE `User`.`id` = 1;\n\n```", "```php\n$post = $this->Post->find('first', array(\n'fields' => array(\n'Post.id',\n'Post.title',\n'Blog.name',\n'User.name'\n),\n'joins' => array(\narray(\n'type' => 'inner',\n'alias' => 'Blog',\n'table' => $this->Post->Blog->table,\n'conditions' => array(\n'Blog.id = Post.blog_id'\n)\n),\narray(\n'type' => 'inner',\n'alias' => 'User',\n'table' => $this->Post->Blog->User->table,\n'conditions' => array(\n'User.id = Blog.user_id'\n)\n)\n),\n'recursive' => -1\n));\n\n```", "```php\nSELECT `Post`.`id`, `Post`.`blog_id`, `Post`.`title`, `Post`.`body`, `Post`.`created`, `Post`.`modified` FROM `posts` AS `Post` inner JOIN blogs AS `Blog` ON (`Blog`.`id` = `Post`.`blog_id`) inner JOIN users AS `User` ON (`User`.`id` = `Blog`.`user_id`) WHERE 1 = 1 LIMIT 1\nAnd would generate the following data structure:\narray(\n'Post' => array(\n'id' => 1,\n'title' => 'John\\'s Post 1'\n),\n'Blog' => array(\n'name' => 'John Doe\\'s Blog'\n),\n'User' => array(\n'name' => 'John Doe'\n)\n)\n\n```", "```php\n$posts = $this->Post->find('all', array(\n'fields' => array('Post.id', 'Post.title'),\n'conditions' => array('or' => array(\narray('Post.title LIKE ?' => '%Post 1%'),\narray('Post.body LIKE ?' => '%Post 1%'),\narray('Post.title LIKE ?' => '%Post 2%'),\narray('Post.body LIKE ?' => '%Post 2%'),\n)),\n'recursive' => -1\n));\n\n```", "```php\narray(\n'Post' => array(\n'id' => 1,\n'title' => 'John\\'s Post 1'\n),\n'Post' => array(\n'id' => 2,\n'title' => 'John\\'s Post 2'\n),\n'Post' => array(\n'id' => 5,\n'title' => 'Jane\\'s Post 1'\n),\n'Post' => array(\n'id' => 6,\n'title' => 'Jane\\'s Post 2'\n)\n)\n\n```", "```php\narray('Post.title LIKE ?' => '%term%')\n\n```", "```php\n`Post`.`title` LIKE '%term%'\n\n```", "```php\narray(\n'Post.title LIKE ?' => '%term%',\n'Post.title LIKE ?' => '%anotherTerm%'\n)\n\n```", "```php\n`Post`.`title` LIKE '%anotherTerm%'\n\n```", "```php\narray(\narray('Post.title LIKE ?' => '%term%'),\narray('Post.title LIKE ?' => '%anotherTerm%')\n)\n\n```", "```php\n`Post`.`title` LIKE '%term%' OR `Post`.`title` LIKE '%anotherTerm%'\n\n```", "```php\n    <?php\n    class Post extends AppModel {\n    public $belongsTo = array('Blog');\n    public $_findMethods = array('search' => true);\n    protected function _findSearch($state, $query, $results = array()) {\n    if ($state == 'before') {\n    if (!empty($query['terms'])) {\n    $fields = array('title', 'body');\n    $conditions = array();\n    foreach ((array) $query['terms'] as $term) {\n    foreach ($fields as $field) {\n    $model = $this->alias;\n    if (strpos($field, '.') !== false) {\n    list($model, $field) = explode('.', $field);\n    }\n    $conditions[] = array(\n    $model . '.' . $field . ' LIKE ?' => '%'.$term.'%'\n    );\n    }\n    }\n    if (empty($query['fields'])) {\n    $query['fields'] = array('Post.title', 'Post.body');\n    }\n    $query['conditions'][] = array('or' => $conditions);\n    }\n    return array_diff_key($query, array('terms'=>null));\n    }\n    return $results;\n    }\n    }\n    ?>\n\n    ```", "```php\n    $posts = $this->Post->find('search', array(\n    'terms' => array(\n    'Post 1',\n    'Post 2'\n    ),\n    'recursive' => -1\n    ));\n\n    ```", "```php\n    <?php\n    class AppModel extends Model {\n    public function find($conditions=null, $fields=array(), $order=null, $recursive=null) {\n    if (\n    is_string($conditions) && $conditions=='count' &&\n    is_array($fields) && !empty($fields['type']) &&\n    array_key_exists($fields['type'],$this->_findMethods)\n    ) {\n    $fields['operation'] = 'count';\n    return parent::find($fields['type'], array_diff_key(\n    $fields,\n    array('type'=>null)\n    ));\n    }\n    return parent::find($conditions, $fields, $order, $recursive);\n    }\n    }\n    ?>\n\n    ```", "```php\n    protected function _findSearch($state, $query, $results = array()) {\n    if ($state == 'before') {\n    if (!empty($query['terms'])) {\n    $fields = array('title', 'body');\n    $conditions = array();\n    foreach ((array) $query['terms'] as $term) {\n    foreach ($fields as $field) {\n    $model = $this->alias;\n    if (strpos($field, '.') !== false) {\n    list($model, $field) = explode('.', $field);\n    }\n    $conditions[] = array(\n    $model . '.' . $field . ' LIKE ?' => '%'.$term.'%'\n    );\n    }\n    }\n    if (empty($query['fields'])) {\n    $query['fields'] = array('Post.title', 'Post.body');\n    }\n    if (!empty($query['operation']) && $query['operation'] == 'count') {\n    $query['fields'] = 'COUNT(*) AS total';\n    }\n    $query['conditions'][] = array('or' => $conditions);\n    }\n    return array_diff_key($query, array('terms'=>null));\n    } elseif (\n    $state == 'after' && !empty($query['operation']) &&\n    $query['operation'] == 'count'\n    ) {\n    return (!empty($results[0][0]['total']) ? $results[0][0]['total'] : 0);\n    }\n    return $results;\n    }\n\n    ```", "```php\n    $count = $this->Post->find('count', array(\n    'type' => 'search',\n    'terms' => array(\n    'Post 1',\n    'Post 2'\n    )\n    ));\n\n    ```", "```php\n    <?php\n    class PostsController extends AppController {\n    public function index() {\n    $this->paginate['Post'] = array(\n    'search',\n    'fields' => array(\n    'Post.id',\n    'Post.title'\n    ),\n    'terms' => array(\n    'Post 1',\n    'Post 2'\n    ),\n    'limit' => 3\n    );\n    $posts = $this->paginate('Post');\n    $this->set(compact('posts'));\n    }\n    }\n    ?>\n\n    ```", "```php\n    <p>\n    <?php echo $this->Paginator->prev(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->numbers(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </p>\n    <ul>\n    <?php foreach($posts as $post) { ?>\n    <li>#<?php echo $post['Post']['id']; ?>: <?php echo $post['Post']['title']; ?></li>\n    <?php } ?>\n    </ul>\n\n    ```", "```php\n$this->paginate['Post'] = array(\n'search',\n'terms' => array(\n'Post 1',\n'Post 2'\n),\n'limit' => 3\n);\n\n```", "```php\n    <head>\n    <title><?php echo $title_for_layout; ?></title>\n    <?php echo $this->Html->script('http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'); ?>\n    </head>\n    <body>\n    <div id=\"main\">\n    <div id=\"loading\" style=\"display: none; float: right;\">Loading...</div>\n    <div id=\"content\">\n    <?php echo $content_for_layout; ?>\n    </div>\n    </div>\n    </body>\n    </html>\n\n    ```", "```php\n    <?php\n    class PostsController extends AppController {\n    public $components = array('RequestHandler');\n    public $helpers = array('Js' => 'Jquery');\n    public function index() {\n    $this->paginate['Post'] = array(\n    'search',\n    'terms' => array(\n    'Post 1',\n    'Post 2'\n    ),\n    'limit' => 3\n    );\n    $posts = $this->paginate('Post');\n    $this->set(compact('posts'));\n    }\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    $this->Paginator->options(array(\n    'evalScripts' => true,\n    'update' => '#content',\n    'before' => $this->Js->get('#loading')->effect('fadeIn', array('speed'=>'fast')),\n    'complete' => $this->Js->get('#loading')->effect('fadeOut', array('speed'=>'fast')),\n    ));\n    ?>\n    <p>\n    <?php echo $this->Paginator->prev(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->numbers(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </p>\n    <ul>\n    <?php foreach($posts as $post) { ?>\n    <li>#<?php echo $post['Post']['id']; ?>: <?php echo $post['Post']['title']; ?></li>\n    <?php } ?>\n    </ul>\n    <?php echo $this->Js->writeBuffer(); ?>\n\n    ```", "```php\n<?php\n$this->Paginator->options(array(\n'evalScripts' => true,\n'update' => '#content',\n'before' => '$(\"#loading\").fadeIn(\"fast\");',\n'complete' => '$(\"#loading\").fadeOut(\"fast\");'\n));\n?>\n\n```"]