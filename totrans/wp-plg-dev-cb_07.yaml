- en: Customizing User Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will show us how to augment the WordPress user editor and use
    the additional data associated with users through the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom fields to the user editor
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and storing user custom data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying new user data in the user list page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom user data in containing shortcode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After learning how to customize the post editor and taxonomies with custom data
    fields, the next area that we will be making additions to is the user creation
    and edition tool. This type of addition can be used for many different purposes,
    including tracking when users have last visited a site or storing additional data
    on the types of services they are interested in. This chapter expands on the private
    content plugin that we started in Chapter 2, *Plugin Framework Basics* and [Chapter
    3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and Administration
    Pages* in the recipes entitled *Creating a new enclosing shortcode* and *Storing
    stylesheet data in user settings,* by adding a second level of content protection
    that will restrict some posts or pages so that they are only available to paid
    users.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom fields to the user editor
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the taxonomy editor, the user editor allows developers to add extra
    fields through action hooks and facilitates this task by using the same HTML structure,
    whether a new user is being created or an existing one is modified. This recipe
    shows how to assign a callback function to add a new section to the user editor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a complete plugin with a stylesheet and administration panel, you
    should have already followed the *Storing stylesheet data in user settings* recipe
    in [Chapter 3](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 3/ch2-private-item-text-edit-stylesheet/ch2-private-item-text.php`)
    from the downloaded code bundle and rename `ch2-private-item-text-edit-stylesheet`
    to `ch2-private-item-text`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to just create a new empty plugin file and follow this chapter's
    recipes by making a folder called `ch2-private-item-text` in your plugin directory
    with a text file called `ch2-private-item-text.php`, and only adding a standard
    plugin header at the top.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code snippet at the end of the file to declare a global variable
    and initialize the variable''s content:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following lines of code to register a function to be called when new
    users are added to the site through the administration interface or when users
    are edited:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following block of code to provide an implementation for the `ch2pit_show_user_profile`
    function:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save and close the plugin file.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Plugins section of the administration interface and make sure that
    the `Chapter 2 - Private Item Text` plugin is activated.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Add New User menu item under the Users section to view the user
    creation page and see the new Site membership level section at the bottom of the
    form:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/717c062c-5d9b-4a21-87da-0ff870e3a66c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Edit one of the existing users on the site to see that the additional section
    is also displayed. If you try to save the user in either situation, the newly
    added field will not be saved until you perform the steps in the next recipe.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `user_new_form` and `edit_user_profile` action hooks allow developers to
    add content to the user editor when a new user is added to the site and when users
    are edited, respectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: WordPress offers a third action hook called `show_user_profile`. Functions associated
    with that hook get called when users view their own profile. You should carefully
    consider whether or not it makes sense to register a function with this action
    hook, depending on the nature of your plugin and the additional information to
    be stored. That being said, if you do not register any function with this hook,
    as we are doing in this recipe, you will not see the additional fields created
    when viewing your own user profile on the site, even if you are the administrator.
    You will still be able to see paid content, since we will display it to users
    with administrator privileges.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Our callback function first checks to see whether it received a valid user
    through the `$user` parameter or whether a new user is being created. Based on
    the result, it retrieves the associated user level data by calling the `get_user_meta`
    function or initializes a blank variable. The syntax of `get_user_meta` follows
    the same structure as the `get_post_meta` and `get_term_meta` functions, with
    the first parameter being used to specify the user ID and the remaining fields
    indicating the field name to be retrieved and whether data should be returned
    as a single variable or an array:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The rest of our callback functions are responsible for rendering a basic HTML
    select list and selecting one of the items in the list based on the current user
    membership level.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: The only additional element that we put in place in this recipe is the declaration
    of an array of user membership levels as a `global` variable that we will be referencing
    in multiple functions in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Storing stylesheet data in user settings* recipe
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing and storing user custom data
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As user profiles are created or updated, WordPress offers an easy way to register
    a callback to save custom user data in the site's database. This recipe shows
    how to use this action hook.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding custom fields to the user editor*
    recipe to have a starting point for this recipe and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 7/ch2-private-item-text/ch2-private-item-text-v3.php`) from the
    downloaded code bundle, renaming it as `ch2-private-item-text.php`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code at the end of the file to register functions
    to be called when user data is stored upon initial creation or when a user is
    updated:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following block of code to provide an implementation for the `ch2pit_save_user_data`
    function:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save and close the plugin file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit one of the existing users on the site or create a new one to see that the
    user level value is saved.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly to adding fields to the user editor, WordPress offers two different
    action hooks to register functions that will be called when a user is initially
    registered (`user_register`) and when a user profile is updated (`profile_update`).
    As you can see, we are registering the same callback function in both cases, where
    we check to see whether we received a value indicating the desired user level
    and use the `update_user_meta` function to save it. Similar to the post and term
    meta update functions, this function has three parameters to indicate the user
    ID that the information should be associated with, the name of the custom data
    field, and the value to be stored:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As an additional precaution, we check to see whether the value we received is
    present in our global array of user levels using the PHP `array_key_exists` function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The `else` branch of the `if` statement is put in place to set a default user
    level if the field is absent, which can happen if the site allows visitors to
    register for accounts by themselves.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this current process of classifying users as regular users or paid
    users is very manual, requiring site administrators to log in to the site's dashboard
    and update their status individually. A more elaborate solution could be to set
    the value of this field based on receiving a payment to the site using an online
    payment service.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding custom fields to the user editor* recipe
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying new user data in user list page
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As new fields are added to user profiles, it can be very useful for site administrators
    to see this data in the site user list and be able to filter users to see only
    the ones that were assigned certain values. This recipe shows how to add extra
    columns to the user listing of the WordPress administration area and how to add
    a filter function to reduce the number of records shown.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Processing and storing user custom data*
    recipe to have a starting point for this recipe and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 7/ch2-private-item-text/ch2-private-item-text-v4.php`) from the
    downloaded code bundle, renaming it `ch2-private-item-text.php`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when WordPress
    is preparing the list of columns to be displayed in the user listing page:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add an implementation for the `ch2pit_add_user_columns` function with the following
    block of code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following line of code to assign a function to be called when WordPress
    prepares the content of each column as it displays a list of all the users:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Provide an implementation for the `ch2pit_display_user_columns_data` function
    by inserting the following code section:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code snippet to register a function to be called when WordPress
    prepares the list of quick actions that can be performed by administrators on
    the user listing page:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add this code section to provide a body for the `ch2pit_add_user_filter` function:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following line of code to register a function to be called when WordPress
    is rendering the footer of the administration pages:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Provide an implementation for the `ch2pit_user_filter_js` function by adding
    the following code section:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add this line of code to register a function that will be executed when WordPress
    is preparing the query to retrieve the list of users from the database:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Insert the following block of code to define the `ch2pit_filter_users` function:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save and close the plugin file.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Users section of the administration interface to see the new User
    Level column.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/baf5e7bb-3131-475b-8b85-47bc8b1cc42a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Use the filter drop-down list and click on Filter to limit the number of records
    displayed.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first code section in this recipe is a filter function that gets a list
    of all columns that the system intends on displaying in the users section of the
    administration interface. While we could have just added our new entry at the
    end of the array, similar to what we did in the *Displaying additional columns
    in the custom post list page* recipe in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*, we take a more advanced approach in this recipe;
    we use the PHP `array_slice` function to split the columns array into two sections
    and insert our new column name between the existing items.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: We continue this recipe by providing a function that displays the user level
    assigned to each user. This is done by simply retrieving the information based
    on the current user ID and returning the data to be displayed. It should be noted
    that the user management page takes an approach that is slightly different from
    the post and pages custom column content, since it uses a filter function where
    we return data instead of using an action hook that directly sends content to
    the browser.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The next code section is responsible for rendering a drop-down list of user
    levels that can be used to filter the user list; this is done by using standard
    HTML and code to loop through the list of user levels and display them. Unfortunately,
    WordPress complicates things by calling our function twice, before and after listing
    users, resulting in two drop-down lists on the same page with no way to differentiate
    them. To avoid having issues with the two drop-down lists being set to different
    values and sending these conflicting values to our filtering code, the next function
    places Javascript code in the page footer of all the user listing pages. This
    allows us to synchronize either drop-down list with the other's value when the
    user interacts with them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Our last step consists of modifying the user query if we find a filtering argument
    in the page URL when displaying the user listing. If an argument is found and
    the page is the correct one, we will check whether the value is part of our user
    levels array and then add it to the system's current query variables.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Processing and storing user custom data* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom user data in containing shortcode
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have additional data stored in user profiles and have facilitated
    the viewing of this information in the administration pages, the only missing
    component to achieve our goal of restricting some site content to paid users is
    to introduce a new enclosing shortcode that will check a user's level before displaying
    content. The recipe will show how to create this new shortcode.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Display new user data in user list page*
    recipe to have a starting point for this recipe and the resulting plugin should
    still be active in your development site. Alternatively, you can get the resulting
    code (`Chapter 7/ch2-private-item-text/ch2-private-item-text-v5.php`) from the
    [Chapter 7](3a74e0e8-c6b8-4641-a7d2-badf67c6f1f2.xhtml), *Customizing User Data*
    section of the downloaded code bundle, renaming it as `ch2-private-item-text.php`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the `ch2-private-item-text` folder of the WordPress plugin directory
    of your development installation.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ch2-private-item-text.php` file in a text editor.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to define a new shortcode and define the function
    to be called when it is used:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Provide an implementation for `ch2pit_paid_shortcode` with the following code
    section:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save and close the plugin file.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new post and wrap some or all of the content with the `[paid]` and
    `[/paid]` tags. View the page as an administrator, a visitor who is not logged
    in, a registered regular user, and a registered paid user to validate that the
    content is only displayed in the first and last cases.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的帖子，并用 `[paid]` 和 `[/paid]` 标签包裹部分或全部内容。以管理员、未登录的访问者、注册的普通用户和注册的付费用户身份查看页面，以验证内容仅在第一种和最后一种情况下显示。
- en: '![](img/4cb4cf44-1383-4b87-a8eb-6a3a0851a413.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4cb4cf44-1383-4b87-a8eb-6a3a0851a413.png)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Similar to the `[private]` shortcode that we created back in the *Creating a
    new enclosing shortcode* recipe in [Chapter 2](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml),
    *Plugin Framework Basics*, the new `[paid]` shortcode that this recipe puts in
    place can be used by content creators to identify one or more sections of a post
    or page that can only be viewed by users whose user level is set as a paid member.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在[第2章](f7395811-9e4a-4913-8a02-cc68875d0071.xhtml)中创建的 *创建新的封装短代码* 菜单中的 `[private]`
    短代码类似，这个菜谱中设置的新的 `[paid]` 短代码可以让内容创建者识别一篇文章或页面中的一或多个只能由设置为付费会员的用户查看的部分。
- en: To do this, our shortcode implementation first checks whether the visitor is
    logged in. If that is the case, it further validates the user by asking WordPress
    to provide data on the current user, then uses the user ID to retrieve the `user_level`
    metadata that we stored in the previous recipes in this chapter. Alternatively,
    it checks if the user is a site administrator by using the `current_user_can`
    WordPress function and specifying `'activate_plugins'` as the argument, since
    only administrators can perform this action. If all of these conditions are met,
    the enclosed post content will be displayed. Otherwise, a message will be shown
    to indicate that users must be paid members to see this content.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们的短代码实现首先检查访问者是否已登录。如果是这样，它将进一步通过请求WordPress提供当前用户的数据来验证用户，然后使用用户ID检索我们在本章前面的菜谱中存储的
    `user_level` 元数据。或者，它使用 `current_user_can` WordPress函数并指定 `'activate_plugins'`
    作为参数来检查用户是否是网站管理员，因为只有管理员才能执行此操作。如果所有这些条件都满足，则将显示封装的帖子内容。否则，将显示一条消息，表明用户必须是付费会员才能查看此内容。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Display new user data in user list page* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在用户列表页面显示新用户数据* 菜单'
