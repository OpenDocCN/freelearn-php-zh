- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Custom Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will make custom pages with controllers. A controller is
    a class that contains a method used to build a page when Drupal is accessed at
    a specific path. Creating custom pages allows you to extend Drupal beyond just
    the content pages. This chapter will cover the process of creating custom pages,
    receiving dynamic values from paths, and serving JSON or file download responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a controller to provide a custom page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic redirect page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a JSON response
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving files for download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires an existing custom module installed on your Drupal site.
    This custom module will contain the controllers created throughout this recipe.
    [*Chapter 4*](B18548_04.xhtml#_idTextAnchor131), *Extending Drupal with Custom
    Code*, covers how to create a custom module. You can find the full code used in
    this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05)'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a controller to provide a custom page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever an HTTP request is made to a Drupal site, the path for the URL is routed
    to a controller. Controllers are responsible for returning the response for a
    path that has been defined as a route. Generally, these controllers return render
    arrays for Drupal’s render system to convert into HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will define a controller that returns a render array to display
    a message on the page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our `controller`
    class the `Controller` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `HelloWorldController.php` in the controller directory.
    This will hold our `HelloWorldController` controller class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our `HelloWorldController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal is able to determine as the `src/Controller` directory
    in our module. As per PSR-4, the filename and class name must also be the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that could be leveraged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a method that returns a render array to display a string
    of text. Add the following method to our `HelloWorldController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page method returns a render array that the Drupal rendering system will
    parse. The `#markup` key denotes a value that does not have any additional rendering
    or theming and allows basic HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Give the route a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we register the path with our controller. This is done using the `defaults`
    key where we provide the controller and page title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_controller` key is the fully qualified class name with the class method
    to be used. The `_title` key provides the page title to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, define a requirements key to specify the access requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_permission` option tells the routing system to verify the current user
    has specific permission in order to view a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `/hello-world` on your Drupal site and view your custom page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The /hello-world page](img/Figure_5.1_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – The /hello-world page
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drupal’s routing is built on top of Symfony’s routing component. Each route
    has a method in a controller class that returns a response. Most commonly, the
    returned response is a render array. Other recipes in this chapter will show you
    how to return response objects directly. The routes are collected into Drupal’s
    routing system.
  prefs: []
  type: TYPE_NORMAL
- en: When an HTTP request comes to Drupal, the system tries to match the path to
    known routes. If a route is found, the route’s definition is used to deliver the
    page. If a route cannot be found, a 404 page is displayed. If a route is found,
    Drupal performs access checks based on the requirements key. If the requirements
    key conditions fail, then Drupal may return a 403 page or 404 page.
  prefs: []
  type: TYPE_NORMAL
- en: After the controller has returned the response, Drupal checks whether the value
    is a render array or a response from Symfony’s `HttpFoundation` component. The
    `onViewRenderArray` method of the `MainContentViewSubscriber` class checks whether
    the controller response is an array. If it is, the renderer is then resolved and
    converts the render array into an HTML response. Otherwise, it allows the returned
    response object to be handled.
  prefs: []
  type: TYPE_NORMAL
- en: When writing controllers, the `ControllerBase` base class is not required; but
    it does provide simplified access to common services without setting up dependency
    injection.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following sections, we will cover more items about routes.
  prefs: []
  type: TYPE_NORMAL
- en: Route requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Routes can define different access requirements through the requirements key.
    Multiple validators can be added. However, there must be one that provides a true
    result, or else the route will return 403, access denied. This is true if the
    route defines no requirement validators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Route requirement validators are defined by implementing `\Drupal\Core\Routing\Access\AccessInterface`.
    The following list shows some of the common requirement validators defined throughout
    Drupal core:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_access: ''TRUE''`: This always grants access to the route. Be careful when
    granting this instead of a permission or role check, as this means anyone can
    access the route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_entity_access`: This validates that the current user can perform an entity
    operation. For example, `node.update` verifies the user can update the node in
    the URL parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_permission`: This checks whether the current user has the provided permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_user_is_logged_in`: This validates that the user is logged in. The value
    of `''TRUE''` requires the user to be logged in and `''FALSE''` is for the user
    to be logged out. An example of `''FALSE''` is for the user login page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing dynamic routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The routing system allows modules to define routes programmatically. This can
    be accomplished by providing a `routing_callbacks` key that defines a class and
    method that will return an array of the `\``Symfony\Component\Routing\Route` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the module’s `routing.yml` file, you will define the routing callbacks key
    and related class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Drupal\mymodule\Routing\CustomRoutes` class will then have a method named
    routes, which returns an array of route objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If a module provides a class that interacts with routes, the best practice is
    to place it in the routing portion of the module’s namespace. This helps you identify
    its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'The invoked method is expected to return an array of initiated route objects.
    The `Route` class takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path`: This is the path for the route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`defaults`: This is the array of defaults for the route and its controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements`: This is an array of validators to make sure the route is accessible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This is an array that can be passed and used optionally to hold
    metadata about the route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering existing routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the routing system is being rebuilt, an event is dispatched to alter the
    discovered routes. This involves implementing an event subscriber. Drupal provides
    a base class to ease this implementation. Here, `\Drupal\Core\Routing\RouteSubscriberBase`
    implements the required interface methods and subscribes to the `RoutingEvents::ALTER`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `src/Routing/RouteSubscriber.php` file for your module to hold the
    route `subscriber` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code extends `RouteSubscriberBase` and implements the `alterRoutes`
    method. We fetch the route object from the route collection, if it exists, and
    change the path from `/hello-world` to just `/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we must register the event subscriber in the module’s `mymodule.services.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: After adding this change, clear the Drupal cache. This makes Drupal aware of
    our event subscriber so that it can react to the dispatch of the `RoutingEvents::ALTER`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Symfony Routing component: [https://symfony.com/doc/current/create_framework/routing.html](https://symfony.com/doc/current/create_framework/routing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we defined a route and controller that responded to
    the `/hello-world` path. A route can add variables to the path, called route parameters,
    so that the controller can handle different URLs.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a route that takes a user ID as a route parameter
    to display information about that user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the route created in the *Defining a controller* recipe to
    provide a custom page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, remove the `src/Routing/RouteSubscriber.php` file and `mymodule.services.yml`
    from the previous section and clear the Drupal cache, so it does not interfere
    with what we are about to do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, edit `routing.yml` so that we can add a route parameter of `user` to
    the path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Route parameters are wrapped with an opening bracket (`{`) and a closing bracket
    (`}`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the requirements key to specify that the `user` parameter
    should be an integer for a user ID, and that the current user has access to view
    other profiles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `user` key under requirements represents the same route parameter. The routing
    system allows you to provide regular expressions to validate the value of a route
    parameter. This validates the user parameter as any digit value.
  prefs: []
  type: TYPE_NORMAL
- en: We then use the `_entity_access` requirement to verify the current user has
    access to perform the view operation on the entity type user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we add a new options key to the route definition so that we can identify
    what type of value the user route parameter is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This defines the user route parameter as being of the `entity:user` type. Drupal
    will use this to convert the ID value into a user object for our controller.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/Controller/HelloWorldController.php` file so that the page method
    can be updated to receive the user route parameter value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the page method to receive the user route parameter as a user object
    in its method parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The routing system passes route parameter values to the method based on parameter
    names for the method. Our parameter’s definition specifies that Drupal should
    convert the ID in the URL into a user object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s adjust the returned text from `Hello world!` to replace “world” with
    the email of the user object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use `sprintf` to return a formatted string that contains the user’s email
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the changes to the module’s new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you visit `/hello-world`, the route’s old path without a route parameter,
    Drupal will return a 404 error for page not found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you visit `/hello-world/1`, the page will display our formatted text with
    the user’s email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The formatted text with the user’s email address](img/Figure_5.2_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The formatted text with the user’s email address
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the previous recipe, the routing system compares the path from
    the incoming HTTP request. The path is then matched against registered routes.
    When a route does not contain route parameters, the match is simple. To accomplish
    route matching based on an incoming path from a URL, the route has a matching
    pattern compiled. This matching pattern converts the route path and its route
    patterns into a regular expression that can be matched against the path from the
    incoming URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Drupal\Core\Routing\RouteCompiler` class extends the `RouteCompiler` from
    Symfony’s routing component. When a route is compiled, the route’s path is converted
    into a regular expression that is used to compare it against the path from the
    incoming URL. Given our route path of `/hello-world/{user}` with a requirement
    of `\d+`, here is the compiled regular expression the user route parameter matching
    the regular expression used to match our route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: When this regular expression is evaluated through `preg_match`, the matches
    will return an associated array of matches. If the path from the incoming URL
    matches, then the matches array will contain a key of user with the value found
    in the path.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal’s routing system has a concept of parameter converters that transform
    route parameter values from their value raw. With the route’s definition of `options.parameters.user`
    as `entity:user`, the `\Drupal\Core\ParamConverter\EntityConverter` class converts
    the user ID into a loaded user object.
  prefs: []
  type: TYPE_NORMAL
- en: After the route has been matched and the parameters converted, they are matched
    against the defined parameters for the controller method. The `ArgumentResolver`
    from Symfony’s `HttpKernel` uses reflection to assemble the correct argument order
    before calling the controller to handle the request.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Symfony’s documentation for the HttpKernel component and argument resolving:
    [https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments](https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Symfony’s documentation for the routing component and route parameters: [https://symfony.com/doc/current/routing.html#route-parameters](https://symfony.com/doc/current/routing.html#route-parameters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic redirect page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers for routes in Drupal can return request objects provided by the
    Symfony `HttpFoundation` component instead of a render array. When a response
    object is returned, the render system is bypassed and the response object is handled
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a route that redirects authenticated users to
    the homepage and anonymous users to the user login form.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `RedirectController.php` in the `Controller` directory.
    This will hold our `RedirectController` controller class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our `RedirectController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal can determine as the `src/Controller` directory in our
    module. As per PSR-4, the filename and class name must also be the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that can be leveraged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a method that checks whether the current user is logged
    in or not. Update the `RedirectController` class to include the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ControllerBase` class provides a `currentUser` method that accesses the
    current user object. We can call the `isAuthenticated` method to check whether
    the user is logged in or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the code to return a `RedirectResponse` object to a URL
    that is generated from a route name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We set the route name in the `$route_name` variable. While `<front>` is not
    a typical path, it is a route name available to route to the appropriate path
    that is set as the homepage. Drupal core defines special slugs such as `<front>`
    and `<none>` for convenience in routing. See the core `Url` class for more information.
  prefs: []
  type: TYPE_NORMAL
- en: We then construct a new URL object with the static `fromRoute` method of the
    `\Drupal\Core\Url` class. We then return a `RedirectResponse` object that redirects
    to our URL. We have to get the string for the URL using the `toString` method
    on the URL object.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Give the route a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we register the path with our controller. This is done with the `defaults`
    key where we provide the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, define a requirements key to specify the access requirements. We want
    the route to always be accessible since we handle authenticated and anonymous
    users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_access` option allows us to specify that a route is always accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `/user-redirect` on your Drupal site as an anonymous user and you will
    be redirected to the user login form. If you are authenticated, you will be redirected
    to the homepage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `RedirectResponse` object comes from Symfony’s `HttpFoundation` component
    and represents an HTTP redirect response. When converted into a response sent
    from the web server, it will set the location header to the URL provided. It also
    passes one of the valid 3xx HTTP status codes. The redirect response defaults
    to the HTTP status code of 302 Found. A 302 redirect is intended to be temporary
    and not cacheable by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal can generate URLs from a given route name. As we have learned in previous
    recipes, route names are used to identify a specific path, controller, and other
    information. When invoking `toString`, the URL object invokes the URL generator
    to convert the route name into a URL.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTTP/1.1 RFC Redirection 3xx specification: [https://datatracker.ietf.org/doc/html/rfc2616#section-10.3](https://datatracker.ietf.org/doc/html/rfc2616#section-10.3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a JSON response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routes can also return **JavaScript Object Notation** (**JSON**) responses.
    A JSON response is often used for building API routes since it is an interchange
    format that is supported by all programming languages. This allows exposing data
    to be consumed by a third-party consumer.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a route that returns a JSON response containing
    information about the Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file named `SiteInfoController.php` in the `Controller` directory.
    This will hold our `SiteInfoController` controller class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our `SiteInfoController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal can determine as the `src/Controller` directory in our
    module. As per PSR-4, the filename and class name must also be the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that can be leveraged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a method that returns a `JsonResponse` object. Add the
    following method to our `SiteInfoController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page method returns a `JsonResponse` object. This ensures the `Content-Type`
    header for the response is set to `application/json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add content to our response object with data from the `system.site` configuration
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `config` method provided by `ControllerBase` to retrieve the `system.site`
    configuration object. Then, we provide an associative array of data to the `JsonResponse`
    object. The array will be converted into JSON when the response is sent.
  prefs: []
  type: TYPE_NORMAL
- en: Create the `mymodule.routing.yml` file in your module’s directory. This file
    is provided by modules to define routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Give the route a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we register the path with our controller. This is done with the `defaults`
    key where we provide the controller and page title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, define a requirements key to specify the access requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_access` option allows the route to always be accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `/site-info` on your Drupal site, and you should receive a JSON response
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `JsonResponse` object is used to represent a JSON response. Its constructor
    receives an array or object of data and passes it to PHP’s `json_encode` function
    for you. It sets the response’s `Content-Type` header to be `application/json`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JSON response controller can be enhanced to leverage the harness-caching
    capabilities of Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Caching JSON responses with Drupal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal also provides `\Drupal\Core\Cache\CacheableJsonResponse`. This extends
    `JsonResponse` and allows the response to be cached by Drupal’s page caching.
    However, you will want to make the `system.site` configuration object a cacheable
    dependency of the response. That way the response cache is invalidated if that
    configuration object is changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code would be updated with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: The main difference is that we do not directly return the response object. We
    set the configuration object as a cacheable dependency, first.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18548_12.xhtml#_idTextAnchor383), *Building APIs* *with Drupal*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving files for download
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routes can be used to serve file downloads with the `BinaryFileResponse` response
    object. Using the `BinaryFileResponse` to serve a file for download allows you
    to keep the original file’s URL private or to send dynamic content as a file download.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a route that provides a download for a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a PDF file that is located in the same directory as the module.
    You can use any other available file type, such as a text file. A test PDF can
    be found on the World Wide Web Consortium website at [https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf](https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `DownloadController.php` in the `Controller` directory.
    This will hold our `DownloadController` controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal is able to determine as the `src/Controller` directory
    in our module. As per PSR-4, the filename and class name must also be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a method that returns a `BinaryFileResponse` object. Add
    the following method to our `DownloadController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page method returns a `BinaryFileResponse` object. We define a file path
    where our PDF exists. The file path may be relative to Drupal’s document root
    (web). Our module’s directory is `modules/custom/mymodule` relative to the document
    root. We set the `Content-Disposition` header to attachment and specify a filename
    so that the file automatically downloads. We use PHP’s basename function to get
    the filename from the path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller is almost ready. We should also provide a `Content-Type` header
    for the response. Using the `file.mime_type.guesser` service, we can get the correct
    header value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `file.mime_type.guesser` service is used to determine the appropriate MIME
    type for a file based on its extension. In this case, it would `return application/pdf`.
  prefs: []
  type: TYPE_NORMAL
- en: Create `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Give the route a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we register the path with our controller. This is done with the defaults
    key where we provide the controller and page title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, define a requirements key to specify the access requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_user_is_logged_in` option requires a user to be authenticated to access
    the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `/pdf-download` on your Drupal site, and you will be prompted to download
    the `dummy.pdf` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `BinaryFileResponse` stores information about the file until the response
    is prepared to be sent. When the response is prepared to be sent, the `Content-Length`
    header is populated based on the file size. Then, when the response is sent, the
    contents of the file are streamed to the visitor via the web server.
  prefs: []
  type: TYPE_NORMAL
