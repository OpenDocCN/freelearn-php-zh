- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Creating Custom Pages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义页面
- en: In this chapter, we will make custom pages with controllers. A controller is
    a class that contains a method used to build a page when Drupal is accessed at
    a specific path. Creating custom pages allows you to extend Drupal beyond just
    the content pages. This chapter will cover the process of creating custom pages,
    receiving dynamic values from paths, and serving JSON or file download responses.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用控制器创建自定义页面。控制器是一个类，它包含一个在 Drupal 访问特定路径时构建页面的方法。创建自定义页面允许你扩展 Drupal
    超出仅内容页面的范围。本章将涵盖创建自定义页面、从路径接收动态值以及提供 JSON 或文件下载响应的过程。
- en: 'In this chapter, we will learn about the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下配方：
- en: Defining a controller to provide a custom page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义控制器以提供自定义页面
- en: Using route parameters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由参数
- en: Creating a dynamic redirect page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动态重定向页面
- en: Creating a JSON response
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 JSON 响应
- en: Serving files for download
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供文件下载服务
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter requires an existing custom module installed on your Drupal site.
    This custom module will contain the controllers created throughout this recipe.
    [*Chapter 4*](B18548_04.xhtml#_idTextAnchor131), *Extending Drupal with Custom
    Code*, covers how to create a custom module. You can find the full code used in
    this chapter on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求在你的 Drupal 网站上安装一个现有的自定义模块。这个自定义模块将包含在整个配方中创建的控制器。[*第 4 章*](B18548_04.xhtml#_idTextAnchor131)，*使用自定义代码扩展
    Drupal*，介绍了如何创建自定义模块。你可以在 GitHub 上找到本章使用的完整代码：[https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp05)
- en: Defining a controller to provide a custom page
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义控制器以提供自定义页面
- en: Whenever an HTTP request is made to a Drupal site, the path for the URL is routed
    to a controller. Controllers are responsible for returning the response for a
    path that has been defined as a route. Generally, these controllers return render
    arrays for Drupal’s render system to convert into HTML.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每当对 Drupal 网站发出 HTTP 请求时，URL 的路径会被路由到控制器。控制器负责返回已定义为路由的路径的响应。通常，这些控制器返回渲染数组供
    Drupal 的渲染系统转换为 HTML。
- en: In this recipe, we will define a controller that returns a render array to display
    a message on the page.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将定义一个控制器，它返回一个渲染数组以在页面上显示消息。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our `controller`
    class the `Controller` namespace:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建 `src/Controller` 目录。我们将把我们的控制器类放在这个目录中，这给我们的 `controller` 类赋予了
    `Controller` 命名空间：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a file named `HelloWorldController.php` in the controller directory.
    This will hold our `HelloWorldController` controller class.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器目录中创建一个名为 `HelloWorldController.php` 的文件。这将包含我们的 `HelloWorldController`
    控制器类。
- en: 'Our `HelloWorldController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的 `HelloWorldController` 类将扩展由 Drupal 核心提供的 `ControllerBase` 基类：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal is able to determine as the `src/Controller` directory
    in our module. As per PSR-4, the filename and class name must also be the same.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 PSR-4 自动加载约定，我们的类位于 `\Drupal\mymodule\Controller` 命名空间中，Drupal 能够将其确定为我们的模块中的
    `src/Controller` 目录。根据 PSR-4，文件名和类名也必须相同。
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that could be leveraged.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Controller\ControllerBase` 类提供了一些可以利用的实用方法。'
- en: 'Next, we will create a method that returns a render array to display a string
    of text. Add the following method to our `HelloWorldController` class:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个方法，该方法返回一个渲染数组以显示文本字符串。将以下方法添加到我们的 `HelloWorldController` 类中：
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The page method returns a render array that the Drupal rendering system will
    parse. The `#markup` key denotes a value that does not have any additional rendering
    or theming and allows basic HTML elements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 页面方法返回一个渲染数组，Drupal 渲染系统将解析它。`#markup` 键表示一个没有额外渲染或主题化的值，并允许使用基本的 HTML 元素。
- en: Create the `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块目录中创建 `mymodule.routing.yml` 文件。`routing.yml` 文件由模块提供，用于定义路由。
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义路由的第一步是为路由提供一个名称，该名称用作其标识符，用于URL生成和其他目的：
- en: '[PRE17]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Give the route a path:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为路由提供一个路径：
- en: '[PRE18]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we register the path with our controller. This is done using the `defaults`
    key where we provide the controller and page title:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将路径与我们的控制器注册。这是通过使用`defaults`键来完成的，我们在其中提供控制器和页面标题：
- en: '[PRE20]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `_controller` key is the fully qualified class name with the class method
    to be used. The `_title` key provides the page title to be displayed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`_controller`键是用于的完整类名，其中包含要使用的方法。`_title`键提供了要显示的页面标题。'
- en: 'Lastly, define a requirements key to specify the access requirements:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个`requirements`键来指定访问要求：
- en: '[PRE26]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `_permission` option tells the routing system to verify the current user
    has specific permission in order to view a page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`_permission`选项告诉路由系统验证当前用户是否有查看页面的特定权限。'
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal缓存其路由信息。我们必须重建Drupal的缓存，以便它能够了解模块的新路由：
- en: '[PRE34]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Go to `/hello-world` on your Drupal site and view your custom page:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的Drupal站点上的`/hello-world`并查看您的自定义页面：
- en: '![Figure 5.1 – The /hello-world page](img/Figure_5.1_B18548.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – /hello-world页面](img/Figure_5.1_B18548.jpg)'
- en: Figure 5.1 – The /hello-world page
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – /hello-world页面
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Drupal’s routing is built on top of Symfony’s routing component. Each route
    has a method in a controller class that returns a response. Most commonly, the
    returned response is a render array. Other recipes in this chapter will show you
    how to return response objects directly. The routes are collected into Drupal’s
    routing system.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal的路由建立在Symfony的路由组件之上。每个路由都有一个控制器类中的方法，该方法返回一个响应。最常见的是返回一个渲染数组。本章的其他食谱将向您展示如何直接返回响应对象。路由被收集到Drupal的路由系统中。
- en: When an HTTP request comes to Drupal, the system tries to match the path to
    known routes. If a route is found, the route’s definition is used to deliver the
    page. If a route cannot be found, a 404 page is displayed. If a route is found,
    Drupal performs access checks based on the requirements key. If the requirements
    key conditions fail, then Drupal may return a 403 page or 404 page.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当HTTP请求到达Drupal时，系统会尝试将路径与已知路由匹配。如果找到路由，则使用路由的定义来提供页面。如果找不到路由，则显示404页面。如果找到路由，Drupal将根据`requirements`键执行访问检查。如果`requirements`键条件失败，则Drupal可能返回403页面或404页面。
- en: After the controller has returned the response, Drupal checks whether the value
    is a render array or a response from Symfony’s `HttpFoundation` component. The
    `onViewRenderArray` method of the `MainContentViewSubscriber` class checks whether
    the controller response is an array. If it is, the renderer is then resolved and
    converts the render array into an HTML response. Otherwise, it allows the returned
    response object to be handled.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器返回响应后，Drupal会检查该值是否是渲染数组或来自Symfony的`HttpFoundation`组件的响应。`MainContentViewSubscriber`类的`onViewRenderArray`方法检查控制器响应是否为数组。如果是，则解析渲染器并将渲染数组转换为HTML响应。否则，它允许处理返回的响应对象。
- en: When writing controllers, the `ControllerBase` base class is not required; but
    it does provide simplified access to common services without setting up dependency
    injection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写控制器时，不需要`ControllerBase`基类；但它确实提供了对常见服务的简化访问，而无需设置依赖注入。
- en: There’s more…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the following sections, we will cover more items about routes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍更多关于路由的内容。
- en: Route requirements
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由要求
- en: Routes can define different access requirements through the requirements key.
    Multiple validators can be added. However, there must be one that provides a true
    result, or else the route will return 403, access denied. This is true if the
    route defines no requirement validators.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 路由可以通过`requirements`键定义不同的访问要求。可以添加多个验证器。然而，必须有一个提供真值的结果，否则路由将返回403，访问被拒绝。如果路由没有定义要求验证器，这也适用。
- en: 'Route requirement validators are defined by implementing `\Drupal\Core\Routing\Access\AccessInterface`.
    The following list shows some of the common requirement validators defined throughout
    Drupal core:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 路由要求验证器是通过实现`\Drupal\Core\Routing\Access\AccessInterface`定义的。以下列表显示了Drupal核心中定义的一些常见要求验证器：
- en: '`_access: ''TRUE''`: This always grants access to the route. Be careful when
    granting this instead of a permission or role check, as this means anyone can
    access the route.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_access: ''TRUE''`: 这始终授予路由访问权限。在授予此权限而不是权限或角色检查时要小心，因为这意味着任何人都可以访问该路由。'
- en: '`_entity_access`: This validates that the current user can perform an entity
    operation. For example, `node.update` verifies the user can update the node in
    the URL parameters.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_entity_access`: 这验证当前用户能否执行实体操作。例如，`node.update` 验证用户能否更新 URL 参数中的节点。'
- en: '`_permission`: This checks whether the current user has the provided permissions.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_permission`: 这检查当前用户是否有提供的权限。'
- en: '`_user_is_logged_in`: This validates that the user is logged in. The value
    of `''TRUE''` requires the user to be logged in and `''FALSE''` is for the user
    to be logged out. An example of `''FALSE''` is for the user login page.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_user_is_logged_in`: 这验证用户是否已登录。`''TRUE''` 的值要求用户必须登录，而 `''FALSE''` 是指用户已注销。`''FALSE''`
    的一个例子是用户登录页面。'
- en: Providing dynamic routes
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供动态路由
- en: The routing system allows modules to define routes programmatically. This can
    be accomplished by providing a `routing_callbacks` key that defines a class and
    method that will return an array of the `\``Symfony\Component\Routing\Route` objects.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 路由系统允许模块以编程方式定义路由。这可以通过提供一个 `routing_callbacks` 键来实现，该键定义了一个类和将返回一个 `\Symfony\Component\Routing\Route`
    对象数组的类和方法。
- en: 'In the module’s `routing.yml` file, you will define the routing callbacks key
    and related class:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块的 `routing.yml` 文件中，你将定义路由回调键和相关类：
- en: '[PRE35]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `Drupal\mymodule\Routing\CustomRoutes` class will then have a method named
    routes, which returns an array of route objects:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Drupal\mymodule\Routing\CustomRoutes` 类将会有一个名为 routes 的方法，该方法返回一个路由对象数组：'
- en: '[PRE36]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If a module provides a class that interacts with routes, the best practice is
    to place it in the routing portion of the module’s namespace. This helps you identify
    its purpose.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个模块提供了一个与路由交互的类，最佳实践是将它放在模块命名空间的路由部分。这有助于你识别其目的。
- en: 'The invoked method is expected to return an array of initiated route objects.
    The `Route` class takes the following arguments:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 预期调用的方法返回一个已启动的路由对象数组。`Route` 类接受以下参数：
- en: '`path`: This is the path for the route.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`: 这是路由的路径。'
- en: '`defaults`: This is the array of defaults for the route and its controller.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaults`: 这是路由及其控制器的默认值数组。'
- en: '`requirements`: This is an array of validators to make sure the route is accessible.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements`: 这是一个验证器数组，确保路由可访问。'
- en: '`options`: This is an array that can be passed and used optionally to hold
    metadata about the route.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`: 这是一个数组，可以传递并可选地使用它来保存有关路由的元数据。'
- en: Altering existing routes
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改现有路由
- en: When the routing system is being rebuilt, an event is dispatched to alter the
    discovered routes. This involves implementing an event subscriber. Drupal provides
    a base class to ease this implementation. Here, `\Drupal\Core\Routing\RouteSubscriberBase`
    implements the required interface methods and subscribes to the `RoutingEvents::ALTER`
    event.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由系统正在重建时，会触发一个事件来修改发现的路由。这涉及到实现事件订阅者。Drupal 提供了一个基类以简化此实现。在这里，`\Drupal\Core\Routing\RouteSubscriberBase`
    实现了所需的接口方法并订阅了 `RoutingEvents::ALTER` 事件。
- en: 'Create a `src/Routing/RouteSubscriber.php` file for your module to hold the
    route `subscriber` class:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的模块创建一个 `src/Routing/RouteSubscriber.php` 文件来保存路由 `subscriber` 类：
- en: '[PRE37]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding code extends `RouteSubscriberBase` and implements the `alterRoutes`
    method. We fetch the route object from the route collection, if it exists, and
    change the path from `/hello-world` to just `/hello`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码扩展了 `RouteSubscriberBase` 并实现了 `alterRoutes` 方法。如果存在，我们从路由集合中获取路由对象，并将路径从
    `/hello-world` 更改为仅 `/hello`。
- en: 'Then, we must register the event subscriber in the module’s `mymodule.services.yml`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须在模块的 `mymodule.services.yml` 文件中注册事件订阅者：
- en: '[PRE38]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: After adding this change, clear the Drupal cache. This makes Drupal aware of
    our event subscriber so that it can react to the dispatch of the `RoutingEvents::ALTER`
    event.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此更改后，清除 Drupal 缓存。这使 Drupal 了解我们的事件订阅者，以便它可以对 `RoutingEvents::ALTER` 事件的触发做出反应。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The Symfony Routing component: [https://symfony.com/doc/current/create_framework/routing.html](https://symfony.com/doc/current/create_framework/routing.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Symfony 路由组件：[https://symfony.com/doc/current/create_framework/routing.html](https://symfony.com/doc/current/create_framework/routing.html)
- en: Using route parameters
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由参数
- en: In the previous recipe, we defined a route and controller that responded to
    the `/hello-world` path. A route can add variables to the path, called route parameters,
    so that the controller can handle different URLs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们定义了一个响应 `/hello-world` 路径的路由和控制器。路由可以向路径添加变量，称为路由参数，以便控制器可以处理不同的 URL。
- en: In this recipe, we will create a route that takes a user ID as a route parameter
    to display information about that user.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们将创建一个路由，它接受一个用户 ID 作为路由参数来显示该用户的信息。
- en: Getting started
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: This recipe uses the route created in the *Defining a controller* recipe to
    provide a custom page.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用在 *定义控制器* 菜谱中创建的路由来提供自定义页面。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: First, remove the `src/Routing/RouteSubscriber.php` file and `mymodule.services.yml`
    from the previous section and clear the Drupal cache, so it does not interfere
    with what we are about to do.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从上一个部分中删除 `src/Routing/RouteSubscriber.php` 文件和 `mymodule.services.yml`，并清除
    Drupal 缓存，以免干扰我们即将要做的事情。
- en: 'Next, edit `routing.yml` so that we can add a route parameter of `user` to
    the path:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑 `routing.yml` 以便我们可以将 `user` 路由参数添加到路径中：
- en: '[PRE39]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Route parameters are wrapped with an opening bracket (`{`) and a closing bracket
    (`}`).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数用开括号（`{`）和闭括号（`}`）包裹。
- en: 'Next, we will update the requirements key to specify that the `user` parameter
    should be an integer for a user ID, and that the current user has access to view
    other profiles:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新要求键，指定 `user` 参数应为用户 ID 的整数，并且当前用户有权查看其他配置文件：
- en: '[PRE40]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `user` key under requirements represents the same route parameter. The routing
    system allows you to provide regular expressions to validate the value of a route
    parameter. This validates the user parameter as any digit value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 限制条件下的 `user` 键代表相同的路由参数。路由系统允许你提供正则表达式来验证路由参数的值。这验证了用户参数为任何数字值。
- en: We then use the `_entity_access` requirement to verify the current user has
    access to perform the view operation on the entity type user.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用 `_entity_access` 要求来验证当前用户是否有权对用户类型实体执行视图操作。
- en: 'Then, we add a new options key to the route definition so that we can identify
    what type of value the user route parameter is:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在路由定义中添加一个新的选项键，以便我们可以识别用户路由参数的类型：
- en: '[PRE43]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This defines the user route parameter as being of the `entity:user` type. Drupal
    will use this to convert the ID value into a user object for our controller.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了用户路由参数为 `entity:user` 类型。Drupal 将使用此类型将 ID 值转换为用户对象，供我们的控制器使用。
- en: Open the `src/Controller/HelloWorldController.php` file so that the page method
    can be updated to receive the user route parameter value.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/Controller/HelloWorldController.php` 文件，以便更新页面方法以接收用户路由参数值。
- en: 'Update the page method to receive the user route parameter as a user object
    in its method parameters:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面方法更新为接收用户路由参数作为其方法参数的用户对象：
- en: '[PRE47]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The routing system passes route parameter values to the method based on parameter
    names for the method. Our parameter’s definition specifies that Drupal should
    convert the ID in the URL into a user object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 路由系统根据方法参数名称将路由参数值传递给方法。我们的参数定义指定 Drupal 应将 URL 中的 ID 转换为用户对象。
- en: 'Let’s adjust the returned text from `Hello world!` to replace “world” with
    the email of the user object:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们调整从 `Hello world!` 返回的文本，用用户对象的电子邮件地址替换“world”：
- en: '[PRE61]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We use `sprintf` to return a formatted string that contains the user’s email
    address.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `sprintf` 返回一个包含用户电子邮件地址的格式化字符串。
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the changes to the module’s new route:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal 缓存其路由信息。我们必须重建 Drupal 的缓存，以便它能够意识到模块新路由的变化：
- en: '[PRE65]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: When you visit `/hello-world`, the route’s old path without a route parameter,
    Drupal will return a 404 error for page not found.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你访问 `/hello-world` 时，没有路由参数的旧路径，Drupal 将返回 404 错误表示页面未找到。
- en: 'When you visit `/hello-world/1`, the page will display our formatted text with
    the user’s email address:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你访问 `/hello-world/1` 时，页面将显示包含用户电子邮件地址的格式化文本：
- en: '![Figure 5.2 – The formatted text with the user’s email address](img/Figure_5.2_B18548.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 包含用户电子邮件地址的格式化文本](img/Figure_5.2_B18548.jpg)'
- en: Figure 5.2 – The formatted text with the user’s email address
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 包含用户电子邮件地址的格式化文本
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: As discussed in the previous recipe, the routing system compares the path from
    the incoming HTTP request. The path is then matched against registered routes.
    When a route does not contain route parameters, the match is simple. To accomplish
    route matching based on an incoming path from a URL, the route has a matching
    pattern compiled. This matching pattern converts the route path and its route
    patterns into a regular expression that can be matched against the path from the
    incoming URL.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个菜谱中讨论的，路由系统比较传入HTTP请求的路径。然后，路径与已注册的路由进行匹配。当一个路由不包含路由参数时，匹配是简单的。为了根据从URL传入的路径完成路由匹配，路由有一个编译好的匹配模式。这个匹配模式将路由路径及其路由模式转换成一个可以与传入URL的路径进行匹配的正则表达式。
- en: 'The `Drupal\Core\Routing\RouteCompiler` class extends the `RouteCompiler` from
    Symfony’s routing component. When a route is compiled, the route’s path is converted
    into a regular expression that is used to compare it against the path from the
    incoming URL. Given our route path of `/hello-world/{user}` with a requirement
    of `\d+`, here is the compiled regular expression the user route parameter matching
    the regular expression used to match our route:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`Drupal\Core\Routing\RouteCompiler`类扩展了来自Symfony路由组件的`RouteCompiler`。当路由被编译时，路由的路径被转换成一个正则表达式，用于与从传入URL的路径进行比较。考虑到我们的路由路径`/hello-world/{user}`和`\d+`的要求，以下是用户路由参数匹配的正则表达式，用于匹配我们的路由：'
- en: '[PRE66]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: When this regular expression is evaluated through `preg_match`, the matches
    will return an associated array of matches. If the path from the incoming URL
    matches, then the matches array will contain a key of user with the value found
    in the path.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个正则表达式通过`preg_match`评估时，匹配将返回一个匹配的关联数组。如果从传入URL的路径匹配，那么匹配数组将包含一个键为user，其值为在路径中找到的值。
- en: Drupal’s routing system has a concept of parameter converters that transform
    route parameter values from their value raw. With the route’s definition of `options.parameters.user`
    as `entity:user`, the `\Drupal\Core\ParamConverter\EntityConverter` class converts
    the user ID into a loaded user object.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal的路由系统有一个参数转换器的概念，它将路由参数值从其原始值转换。使用路由定义的`options.parameters.user`为`entity:user`，`\Drupal\Core\ParamConverter\EntityConverter`类将用户ID转换为已加载的用户对象。
- en: After the route has been matched and the parameters converted, they are matched
    against the defined parameters for the controller method. The `ArgumentResolver`
    from Symfony’s `HttpKernel` uses reflection to assemble the correct argument order
    before calling the controller to handle the request.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由匹配和参数转换之后，它们与控制器方法定义的参数进行匹配。来自Symfony的`HttpKernel`的`ArgumentResolver`使用反射在调用控制器处理请求之前组装正确的参数顺序。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Symfony’s documentation for the HttpKernel component and argument resolving:
    [https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments](https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Symfony的HttpKernel组件和参数解析的文档：[https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments](https://symfony.com/doc/current/components/http_kernel.html#4-getting-the-controller-arguments)
- en: 'Symfony’s documentation for the routing component and route parameters: [https://symfony.com/doc/current/routing.html#route-parameters](https://symfony.com/doc/current/routing.html#route-parameters)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Symfony路由组件和路由参数的文档：[https://symfony.com/doc/current/routing.html#route-parameters](https://symfony.com/doc/current/routing.html#route-parameters)
- en: Creating a dynamic redirect page
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态重定向页面
- en: Controllers for routes in Drupal can return request objects provided by the
    Symfony `HttpFoundation` component instead of a render array. When a response
    object is returned, the render system is bypassed and the response object is handled
    directly.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal中路由的控制器可以返回由Symfony的`HttpFoundation`组件提供的请求对象，而不是渲染数组。当返回响应对象时，渲染系统被绕过，响应对象被直接处理。
- en: In this recipe, we will create a route that redirects authenticated users to
    the homepage and anonymous users to the user login form.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个路由，将认证用户重定向到主页，将匿名用户重定向到用户登录表单。
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Controller`目录。我们将把我们的控制器类放在这个目录中，这给我们的控制器类赋予了`Controller`命名空间：
- en: '[PRE67]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Create a file named `RedirectController.php` in the `Controller` directory.
    This will hold our `RedirectController` controller class.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Controller` 目录下创建一个名为 `RedirectController.php` 的文件。这个文件将包含我们的 `RedirectController`
    控制器类。
- en: 'Our `RedirectController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的 `RedirectController` 类将扩展由 Drupal 核心提供的 `ControllerBase` 基类：
- en: '[PRE68]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal can determine as the `src/Controller` directory in our
    module. As per PSR-4, the filename and class name must also be the same.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 根据PSR-4自动加载约定，我们的类位于 `\Drupal\mymodule\Controller` 命名空间中，Drupal可以将其确定为模块中的 `src/Controller`
    目录。根据PSR-4，文件名和类名也必须相同。
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that can be leveraged.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Controller\ControllerBase` 类提供了一些实用方法，这些方法可以被利用。'
- en: 'Next, we will create a method that checks whether the current user is logged
    in or not. Update the `RedirectController` class to include the following method:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个方法来检查当前用户是否已登录。更新 `RedirectController` 类以包含以下方法：
- en: '[PRE73]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The `ControllerBase` class provides a `currentUser` method that accesses the
    current user object. We can call the `isAuthenticated` method to check whether
    the user is logged in or not.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControllerBase` 类提供了一个 `currentUser` 方法，用于访问当前用户对象。我们可以调用 `isAuthenticated`
    方法来检查用户是否已登录。'
- en: 'Next, we will update the code to return a `RedirectResponse` object to a URL
    that is generated from a route name:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新代码以返回一个重定向到由路由名称生成的 URL 的 `RedirectResponse` 对象：
- en: '[PRE94]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: We set the route name in the `$route_name` variable. While `<front>` is not
    a typical path, it is a route name available to route to the appropriate path
    that is set as the homepage. Drupal core defines special slugs such as `<front>`
    and `<none>` for convenience in routing. See the core `Url` class for more information.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `$route_name` 变量中设置路由名称。虽然 `<front>` 不是一个典型的路径，但它是一个可用于路由到已设置为主页的适当路径的路由名称。Drupal
    核心定义了如 `<front>` 和 `<none>` 这样的特殊别名，以便于路由。有关更多信息，请参阅核心 `Url` 类。
- en: We then construct a new URL object with the static `fromRoute` method of the
    `\Drupal\Core\Url` class. We then return a `RedirectResponse` object that redirects
    to our URL. We have to get the string for the URL using the `toString` method
    on the URL object.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后使用 `\Drupal\Core\Url` 类的静态 `fromRoute` 方法构建一个新的 URL 对象。然后我们返回一个重定向到我们 URL
    的 `RedirectResponse` 对象。我们必须使用 URL 对象上的 `toString` 方法来获取 URL 字符串。
- en: Create the `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的模块目录中创建 `mymodule.routing.yml` 文件。`routing.yml` 文件由模块提供，用于定义路由。
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义路由的第一步是提供一个路由名称，该名称用作其标识符，用于 URL 生成和其他目的：
- en: '[PRE104]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Give the route a path:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为路由指定一个路径：
- en: '[PRE105]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Next, we register the path with our controller. This is done with the `defaults`
    key where we provide the controller:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将路径注册到我们的控制器。这是通过 `defaults` 键完成的，我们提供了控制器：
- en: '[PRE107]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`_controller` 键是带有要使用的类方法的完全限定类名。'
- en: 'Lastly, define a requirements key to specify the access requirements. We want
    the route to always be accessible since we handle authenticated and anonymous
    users:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个 `requirements` 键来指定访问要求。我们希望路由始终可访问，因为我们处理了认证用户和匿名用户：
- en: '[PRE112]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The `_access` option allows us to specify that a route is always accessible.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`_access` 选项允许我们指定一个路由始终可访问。'
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal 缓存其路由信息。我们必须重建 Drupal 的缓存，以便它能够了解模块的新路由：
- en: '[PRE119]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Go to `/user-redirect` on your Drupal site as an anonymous user and you will
    be redirected to the user login form. If you are authenticated, you will be redirected
    to the homepage.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以匿名用户身份访问你的 Drupal 网站的 `/user-redirect`，你将被重定向到用户登录表单。如果你已认证，你将被重定向到主页。
- en: How it works…
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `RedirectResponse` object comes from Symfony’s `HttpFoundation` component
    and represents an HTTP redirect response. When converted into a response sent
    from the web server, it will set the location header to the URL provided. It also
    passes one of the valid 3xx HTTP status codes. The redirect response defaults
    to the HTTP status code of 302 Found. A 302 redirect is intended to be temporary
    and not cacheable by the browser.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`RedirectResponse`对象来自Symfony的`HttpFoundation`组件，表示HTTP重定向响应。当转换为从Web服务器发送的响应时，它将设置位置头为提供的URL。它还传递一个有效的3xx
    HTTP状态代码。重定向响应默认为HTTP状态码302找到。302重定向旨在是临时的，并且不能被浏览器缓存。'
- en: Drupal can generate URLs from a given route name. As we have learned in previous
    recipes, route names are used to identify a specific path, controller, and other
    information. When invoking `toString`, the URL object invokes the URL generator
    to convert the route name into a URL.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal可以从给定的路由名称生成URL。正如我们在之前的菜谱中学到的，路由名称用于标识特定的路径、控制器和其他信息。当调用`toString`时，URL对象将调用URL生成器将路由名称转换为URL。
- en: See also
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The HTTP/1.1 RFC Redirection 3xx specification: [https://datatracker.ietf.org/doc/html/rfc2616#section-10.3](https://datatracker.ietf.org/doc/html/rfc2616#section-10.3)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP/1.1 RFC 重定向 3xx 规范：[https://datatracker.ietf.org/doc/html/rfc2616#section-10.3](https://datatracker.ietf.org/doc/html/rfc2616#section-10.3)
- en: Creating a JSON response
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建JSON响应
- en: Routes can also return **JavaScript Object Notation** (**JSON**) responses.
    A JSON response is often used for building API routes since it is an interchange
    format that is supported by all programming languages. This allows exposing data
    to be consumed by a third-party consumer.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 路由也可以返回**JavaScript对象表示法**（**JSON**）响应。JSON响应通常用于构建API路由，因为它是一种所有编程语言都支持的交换格式。这允许暴露数据供第三方消费者使用。
- en: In this recipe, we will create a route that returns a JSON response containing
    information about the Drupal site.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个返回包含有关Drupal站点信息的JSON响应的路由。
- en: How to do it…
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Controller`目录。我们将把我们的控制器类放在这个目录中，这将为我们的控制器类提供`Controller`命名空间：
- en: '[PRE120]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Create a file named `SiteInfoController.php` in the `Controller` directory.
    This will hold our `SiteInfoController` controller class.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controller`目录中创建一个名为`SiteInfoController.php`的文件。这将包含我们的`SiteInfoController`控制器类。
- en: 'Our `SiteInfoController` class will extend the `ControllerBase` base class
    provided by Drupal core:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`SiteInfoController`类将扩展由Drupal核心提供的`ControllerBase`基类：
- en: '[PRE121]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal can determine as the `src/Controller` directory in our
    module. As per PSR-4, the filename and class name must also be the same.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循PSR-4自动加载约定，我们的类位于`\Drupal\mymodule\Controller`命名空间中，Drupal可以将其确定为我们的模块中的`src/Controller`目录。根据PSR-4，文件名和类名也必须相同。
- en: The `\Drupal\Core\Controller\ControllerBase` class provides a handful of utility
    methods that can be leveraged.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Drupal\Core\Controller\ControllerBase`类提供了一些可以利用的实用方法。'
- en: 'Next, we will create a method that returns a `JsonResponse` object. Add the
    following method to our `SiteInfoController` class:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个返回`JsonResponse`对象的方法。将以下方法添加到我们的`SiteInfoController`类中：
- en: '[PRE127]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: The page method returns a `JsonResponse` object. This ensures the `Content-Type`
    header for the response is set to `application/json`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`方法返回一个`JsonResponse`对象。这确保了响应的`Content-Type`头设置为`application/json`。'
- en: 'Let’s add content to our response object with data from the `system.site` configuration
    object:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用来自`system.site`配置对象的 数据向我们的响应对象添加内容：
- en: '[PRE137]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: We use the `config` method provided by `ControllerBase` to retrieve the `system.site`
    configuration object. Then, we provide an associative array of data to the `JsonResponse`
    object. The array will be converted into JSON when the response is sent.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ControllerBase`提供的`config`方法检索`system.site`配置对象。然后，我们将一个关联数组的数据提供给`JsonResponse`对象。当发送响应时，该数组将被转换为JSON。
- en: Create the `mymodule.routing.yml` file in your module’s directory. This file
    is provided by modules to define routes.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块目录中创建`mymodule.routing.yml`文件。该文件由模块提供，用于定义路由。
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义路由的第一步是提供一个路由名称，该名称用于URL生成和其他目的：
- en: '[PRE152]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Give the route a path:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为路由指定路径：
- en: '[PRE153]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Next, we register the path with our controller. This is done with the `defaults`
    key where we provide the controller and page title:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将路径注册到我们的控制器中。这是通过`defaults`键完成的，我们在这里提供控制器和页面标题：
- en: '[PRE155]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`_controller`键是用于的完全限定类名以及要使用的方法。'
- en: 'Lastly, define a requirements key to specify the access requirements:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个`requirements`键来指定访问要求：
- en: '[PRE160]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: The `_access` option allows the route to always be accessible.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`_access`选项允许路由始终可访问。'
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal缓存其路由信息。我们必须重建Drupal的缓存，以便它能够了解模块的新路由：
- en: '[PRE167]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Go to `/site-info` on your Drupal site, and you should receive a JSON response
    like the following:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的Drupal网站的`/site-info`，你应该会收到如下所示的JSON响应：
- en: '[PRE168]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: How it works…
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `JsonResponse` object is used to represent a JSON response. Its constructor
    receives an array or object of data and passes it to PHP’s `json_encode` function
    for you. It sets the response’s `Content-Type` header to be `application/json`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`JsonResponse`对象用于表示JSON响应。其构造函数接收一个数组或对象的数据，并将其传递给PHP的`json_encode`函数。它将响应的`Content-Type`头设置为`application/json`。'
- en: There’s more…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The JSON response controller can be enhanced to leverage the harness-caching
    capabilities of Drupal.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: JSON响应控制器可以增强以利用Drupal的 harness-caching 功能。
- en: Caching JSON responses with Drupal
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Drupal缓存JSON响应
- en: Drupal also provides `\Drupal\Core\Cache\CacheableJsonResponse`. This extends
    `JsonResponse` and allows the response to be cached by Drupal’s page caching.
    However, you will want to make the `system.site` configuration object a cacheable
    dependency of the response. That way the response cache is invalidated if that
    configuration object is changed.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal还提供了`\Drupal\Core\Cache\CacheableJsonResponse`。这扩展了`JsonResponse`，允许Drupal的页面缓存缓存响应。然而，你可能希望将`system.site`配置对象作为响应的缓存依赖项。这样，如果该配置对象发生变化，响应缓存就会失效。
- en: 'The code would be updated with the following:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将更新如下：
- en: '[PRE174]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The main difference is that we do not directly return the response object. We
    set the configuration object as a cacheable dependency, first.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别是我们不直接返回响应对象。首先，我们将配置对象设置为缓存依赖项。
- en: See also
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[*Chapter 12*](B18548_12.xhtml#_idTextAnchor383), *Building APIs* *with Drupal*'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18548_12.xhtml#_idTextAnchor383)，*使用Drupal*构建API'
- en: Serving files for download
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供下载文件服务
- en: Routes can be used to serve file downloads with the `BinaryFileResponse` response
    object. Using the `BinaryFileResponse` to serve a file for download allows you
    to keep the original file’s URL private or to send dynamic content as a file download.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用路由来通过`BinaryFileResponse`响应对象提供文件下载。使用`BinaryFileResponse`来提供文件下载允许你保持原始文件的URL私有或发送动态内容作为文件下载。
- en: In this recipe, we will create a route that provides a download for a PDF.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个提供PDF下载的路由。
- en: Getting started
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: This recipe uses a PDF file that is located in the same directory as the module.
    You can use any other available file type, such as a text file. A test PDF can
    be found on the World Wide Web Consortium website at [https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf](https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用一个位于模块同一目录下的PDF文件。你可以使用任何其他可用的文件类型，例如文本文件。可以在万维网联盟网站上找到一个测试PDF：[https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf](https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf)。
- en: How to do it…
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we need to create the `src/Controller` directory in the module’s directory.
    We will put our controller class in this directory, which gives our controller
    class the `Controller` namespace:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在模块目录中创建`src/Controller`目录。我们将把我们的控制器类放在这个目录中，这给我们的控制器类赋予了`Controller`命名空间：
- en: '[PRE175]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Create a file named `DownloadController.php` in the `Controller` directory.
    This will hold our `DownloadController` controller class:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controller`目录下创建一个名为`DownloadController.php`的文件。这将包含我们的`DownloadController`控制器类：
- en: '[PRE176]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Following PSR-4 autoloading conventions, our class is in the `\Drupal\mymodule\Controller`
    namespace, which Drupal is able to determine as the `src/Controller` directory
    in our module. As per PSR-4, the filename and class name must also be the same.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循PSR-4自动加载约定，我们的类位于`\Drupal\mymodule\Controller`命名空间中，Drupal能够将其确定为模块中的`src/Controller`目录。根据PSR-4，文件名和类名也必须相同。
- en: 'Next, we will create a method that returns a `BinaryFileResponse` object. Add
    the following method to our `DownloadController` class:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个返回 `BinaryFileResponse` 对象的方法。将以下方法添加到我们的 `DownloadController` 类中：
- en: '[PRE180]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: The page method returns a `BinaryFileResponse` object. We define a file path
    where our PDF exists. The file path may be relative to Drupal’s document root
    (web). Our module’s directory is `modules/custom/mymodule` relative to the document
    root. We set the `Content-Disposition` header to attachment and specify a filename
    so that the file automatically downloads. We use PHP’s basename function to get
    the filename from the path.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 页面方法返回一个 `BinaryFileResponse` 对象。我们定义了一个包含我们的 PDF 文件的文件路径。文件路径可能是相对于 Drupal
    的文档根目录（web）。我们的模块目录是相对于文档根目录的 `modules/custom/mymodule`。我们将 `Content-Disposition`
    头部设置为附件，并指定一个文件名，以便文件自动下载。我们使用 PHP 的 basename 函数从路径中获取文件名。
- en: 'The controller is almost ready. We should also provide a `Content-Type` header
    for the response. Using the `file.mime_type.guesser` service, we can get the correct
    header value:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器几乎准备好了。我们还应该为响应提供 `Content-Type` 头部。使用 `file.mime_type.guesser` 服务，我们可以获取正确的头部值：
- en: '[PRE196]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: The `file.mime_type.guesser` service is used to determine the appropriate MIME
    type for a file based on its extension. In this case, it would `return application/pdf`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`file.mime_type.guesser` 服务用于根据文件的扩展名确定文件的适当 MIME 类型。在这种情况下，它将 `return application/pdf`。'
- en: Create `mymodule.routing.yml` file in your module’s directory. The `routing.yml`
    file is provided by modules to define routes.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的模块目录中创建 `mymodule.routing.yml` 文件。`routing.yml` 文件由模块提供，用于定义路由。
- en: 'The first step in defining a route is to provide a name for the route, which
    is used as its identifier for URL generation and other purposes:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义路由的第一步是提供一个路由名称，该名称用作其标识符，用于 URL 生成和其他目的：
- en: '[PRE219]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Give the route a path:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为路由提供一个路径：
- en: '[PRE220]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Next, we register the path with our controller. This is done with the defaults
    key where we provide the controller and page title:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用我们的控制器注册路径。这是通过默认键完成的，我们在其中提供控制器和页面标题：
- en: '[PRE222]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: The `_controller` key is the fully qualified class name with the class method
    to be used.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`_controller` 键是用于的完整类名，其中包含要使用的方法。'
- en: 'Lastly, define a requirements key to specify the access requirements:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个 requirements 键来指定访问要求：
- en: '[PRE227]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: The `_user_is_logged_in` option requires a user to be authenticated to access
    the route.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`_user_is_logged_in` 选项要求用户必须经过身份验证才能访问路由。'
- en: 'Drupal caches its routing information. We must rebuild Drupal’s caches in order
    for it to be aware of the module’s new route:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal 缓存其路由信息。我们必须重建 Drupal 的缓存，以便它能够了解模块的新路由：
- en: '[PRE234]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Go to `/pdf-download` on your Drupal site, and you will be prompted to download
    the `dummy.pdf` file.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的 Drupal 网站上的 `/pdf-download`，您将被提示下载 `dummy.pdf` 文件。
- en: How it works…
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `BinaryFileResponse` stores information about the file until the response
    is prepared to be sent. When the response is prepared to be sent, the `Content-Length`
    header is populated based on the file size. Then, when the response is sent, the
    contents of the file are streamed to the visitor via the web server.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`BinaryFileResponse` 存储有关文件的信息，直到响应准备发送。当响应准备发送时，基于文件大小填充 `Content-Length`
    头部。然后，当响应发送时，文件的内容通过 Web 服务器流式传输到访客。'
