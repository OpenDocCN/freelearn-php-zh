["```php\n$ pear channel-discover channelserver.example.com \n\n```", "```php\n$ pear install channelserver.example.com/Packagename \n\n```", "```php\n$ pear install Package \n\n```", "```php\n$ pear install pear.php.net/Package \n\n```", "```php\n$ pear install PEAR/Foo \n\n```", "```php\n$ pear install pear/Package \n\n```", "```php\n$ pear channel-alias pear.php.net p $ pear install p/Package \n\n```", "```php\n<file name=\"foo.php\" role=\"php\" baseinstalldir=\"My/Package\"/>\n\n```", "```php\n<file name=\"foo.php\" role=\"data\" baseinstalldir=\"My/Package\"/>\n\n```", "```php\n<?php\n/**\n* PEAR_Installer_Role_Php\n*\n* PHP versions 4 and 5\n*\n* LICENSE: This source file is subject to version 3.0 of the PHP\n* license\n* that is available through the world-wide-web at the following URI:\n* http://www.php.net/license/3_0.txt. If you did not receive a copy\n* of the PHP License and are unable to obtain it through the web,\n* please send a note to license@php.net so we can mail you a copy\n* immediately.\n*\n* @category pear\n* @package PEAR\n* @author Greg Beaver <cellog@php.net>\n* @copyright 1997-2005 The PHP Group\n* @license http://www.php.net/license/3_0.txt PHP License 3.0\n* @version CVS: $Id: Php.php,v 1.5 2005/07/28 16:51:53 cellog Exp\n$\n* @link http://pear.php.net/package/PEAR\n* @since File available since Release 1.4.0a1\n*/\n/**\n* @category pear\n* @package PEAR\n* @author Greg Beaver <cellog@php.net>\n* @copyright 1997-2005 The PHP Group\n* @license http://www.php.net/license/3_0.txt PHP License 3.0\n* @version Release: @package_version@\n* @link http://pear.php.net/package/PEAR\n* @since Class available since Release 1.4.0a1\n*/\nclass PEAR_Installer_Role_Php extends PEAR_Installer_Role_Common {}\n?>\n\n```", "```php\n<role version=\"1.0\">\n<releasetypes>php</releasetypes>\n<releasetypes>extsrc</releasetypes>\n<releasetypes>extbin</releasetypes>\n<installable>1</installable>\n<locationconfig>php_dir</locationconfig>\n<honorsbaseinstall>1</honorsbaseinstall>\n<unusualbaseinstall />\n<phpfile>1</phpfile>\n<executable />\n<phpextension />\n<config_vars />\n</role>\n\n```", "```php\n<package>\n<name>Role_Chiaramdb2schema</name>\n<channel>pear.chiaraquartet.net</channel>\n</package>\n\n```", "```php\n<usesrole>\n<role>chiaramdb2schema</role>\n<package>Role_Chiaramdb2schema</package>\n<channel>pear.chiaraquartet.net</channel>\n</usesrole>\n\n```", "```php\nThis package contains role \"chiaramdb2schema\" and requires package \"pear.chiaraquartet.net/Role_Chiaramdb2schema\" to be used \n\n```", "```php\n<file name=\"dbcontents.xml\" role=\"chiaramdb2schema\"/>\n\n```", "```php\n<config_vars>\n<chiaramdb2schema_driver>\n<type>string</type>\n<default />\n<doc>MDB2 database driver used to connect to the database</doc>\n<prompt>Database driver type. This must be a valid MDB2 driver.\nExample drivers are mysql, mysqli, pgsql, sqlite, and so on</prompt>\n<group>Database</group>\n</chiaramdb2schema_driver>\n<chiaramdb2schema_dsn>\n<type>string</type>\n<default />\n<doc>PEAR::MDB2 dsn string[s] for database connection, separated\nby ;.\nThis must be of format:\n[user@]host/dbname[;[Package[#schemafile]::]dsn2...]\nOne default database connection must be specified, and package-\nspecific databases\nmay be specified. The driver type and password should be excluded.\nPasswords\nare set with the chiaramdb2schema_password config variable\n</doc>\n<prompt>Database connection DSN[s] (no driver/password)</prompt>\n<group>Database</group>\n</chiaramdb2schema_dsn>\n<chiaramdb2schema_password>\n<type>string</type>\n<default />\n<doc>PEAR::MDB2 dsn password[s] for database connection.\nThis must be of format: password[:password...]\nEach DSN in chiaramdb2schema_dsn must match with a password in this\nlist, or\nnone will be used. To use no password, simply put another :: like\n::::\n</doc>\n<prompt>Database connection password[s]</prompt>\n<group>Database</group>\n</chiaramdb2schema_password>\n</config_vars>\n\n```", "```php\n<?php\n/**\n* Custom file role for MDB2_Schema-based database setup files\n*\n* This file contains the PEAR_Installer_Role_Chiaramdb2schema file * role\n*\n* PHP versions 4 and 5\n*\n* @package Role_Chiaramdb2schema\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2005 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version Release: 0.2.0\n* @link\nhttp://pear.chiaraquartet.net/index.php?package=Role_Chiaramdb2schema\n*/\n/**\n* Contains the PEAR_Installer_Role_Data class\n*/\nrequire_once 'PEAR/Installer/Role/Data.php';\n/**\n* chiaramdb2schema Custom file role for MDB2_Schema-based database\n* setup files\n*\n* This file role provides the <var>chiaramdb2schema_driver</var>,\n* <var>chiaramdb2schema_dsn</var>, and\n<var>chiaramdb2schema_password</var>\n* configuration variables for use by the chiara-managedb custom task\n* to set up and initialize database files\n*\n* PHP versions 4 and 5\n*\n* @package Role_Chiaramdb2schema\n* @author Greg Beaver <cellog@php.net>\n* @copyright 2005 Gregory Beaver\n* @license http://www.opensource.org/licenses/bsd-license.php BSD\n* License\n* @version Release: 0.2.0\n* @link http://pear.chiaraquartet.net/index.php?package=Role_Chiaramdb2schema\n*/\nclass PEAR_Installer_Role_Chiaramdb2schema extends\nPEAR_Installer_Role_Data\n{\n}\n?>\n\n```", "```php\n<role version=\"1.0\">\n<releasetypes>php</releasetypes>\n<releasetypes>extsrc</releasetypes>\n<releasetypes>extbin</releasetypes>\n<installable>1</installable>\n<locationconfig>data_dir</locationconfig>\n<honorsbaseinstall />\n<unusualbaseinstall />\n<phpfile />\n<executable />\n<phpextension />\n<config_vars>\n<chiaramdb2schema_driver>\n<type>string</type>\n<default />\n<doc>MDB2 database driver used to connect to the database</doc>\n<prompt>Database driver type. This must be a valid MDB2 driver.\nExample drivers are mysql, mysqli, pgsql, sqlite, and so on</prompt>\n<group>Database</group>\n</chiaramdb2schema_driver>\n<chiaramdb2schema_dsn>\n<type>string</type>\n<default />\n<doc>PEAR::MDB2 dsn string[s] for database connection, separated\nby ;.\nThis must be of format:\n[user@]host/dbname[;[Package[#schemafile]::]dsn2...]\nOne default database connection must be specified, and package-\nspecific databases\nmay be specified. The driver type and password should be excluded.\nPasswords\nare set with the chiaramdb2schema_password config variable\n</doc>\n<prompt>Database connection DSN[s] (no driver/password)</prompt>\n<group>Database</group>\n</chiaramdb2schema_dsn>\n<chiaramdb2schema_password>\n<type>string</type>\n<default />\n<doc>PEAR::MDB2 dsn password[s] for database connection.\nThis must be of format: password[:password...]\nEach DSN in chiaramdb2schema_dsn must match with a password in this\nlist, or\nnone will be used. To use no password, simply put another :: like\n::::\n</doc>\n<prompt>Database connection password[s]</prompt>\n<group>Database</group>\n</chiaramdb2schema_password>\n</config_vars>\n</role>\n\n```", "```php\n/**\n* Do any unusual setup here\n* @param PEAR_Installer\n* @param PEAR_PackageFile_v2\n* @param array file attributes\n* @param string file name\n*/\nfunction setup(&$installer, $pkg, $atts, $file)\n\n```", "```php\n    array(\n    'name' => 'Full/Path/To/File.php',\n    'role' => 'customrolename',\n    'baseinstalldir' => 'Whatever',\n    );\n\n    ```", "```php\n<config_vars>\n<foo>\n<type>string</type>\n<default />\n<doc>Foo configuration</doc>\n<prompt>Foo protocol login</prompt>\n<group>Auth</group>\n</foo>\n</config_vars>\n\n```", "```php\n<config_vars>\n<foo>\n<type>set</type>\n<default />\n<doc>Foo configuration</doc>\n<valid_set>bar</valid_set>\n<valid_set>baz</valid_set>\n<valid_set>gronk</valid_set>\n<prompt>Foo protocol type</prompt>\n<group>Auth</group>\n</foo>\n</config_vars>\n\n```", "```php\n<default><php_dir/></default>\n\n```", "```php\n<default><constant>PHP_OS</constant></default>\n\n```", "```php\n<default><text>hello world</text></default>\n\n```", "```php\n<default><php_dir/><constant>DIRECTORY_SEPARATOR</constant> <text>foo</text></default>\n\n```", "```php\n<default><text1>.</text1><constant>PATH_SEPARATOR</constant> <text2>mychannel</text2></default>\n\n```", "```php\n<file name=\"foo.php\" role=\"php\">\n<tasks:replace from=\"@blah@\" to=\"data_dir\" type=\"pear-config\"/>\n<tasks:replace from=\"@blah@\" to=\"version\" type=\"package-info\"/>\n</file>\n\n```", "```php\n<file name=\"foo.php\" role=\"php\">\n<tasks:replace from=\"@blah@\" to=\"version\" type=\"package-info\"/>\n<tasks:replace from=\"@blah@\" to=\"data_dir\" type=\"pear-config\"/>\n</file>\n\n```", "```php\nvar $phase = PEAR_TASK_PACKAGEANDINSTALL;\n\n```", "```php\n<?php\n/**\n* <tasks:windowseol>\n*\n* PHP versions 4 and 5\n*\n* LICENSE: This source file is subject to version 3.0 of the PHP\n* license that is available through the world-wide-web at the * following URI:\n* http://www.php.net/license/3_0.txt. If you did not receive a copy * of the PHP License and are unable to obtain it through the web,\n* please send a note to license@php.net so we can mail you a copy\nimmediately.\n*\n* @category pear\n* @package PEAR\n* @author Greg Beaver <cellog@php.net>\n* @copyright 1997-2005 The PHP Group\n* @license http://www.php.net/license/3_0.txt PHP License 3.0\n* @version CVS: $Id: Windowseol.php,v 1.6 2005/10/02 06:29:39\ncellog Exp $\n* @link http://pear.php.net/package/PEAR\n* @since File available since Release 1.4.0a1\n*/\n/**\n* Base class\n*/\nrequire_once 'PEAR/Task/Common.php';\n/**\n* Implements the windows line endings file task.\n* @category pear\n* @package PEAR\n* @author Greg Beaver <cellog@php.net>\n* @copyright 1997-2005 The PHP Group\n* @license http://www.php.net/license/3_0.txt PHP License 3.0\n* @version Release: @package_version@\n* @link http://pear.php.net/package/PEAR\n* @since Class available since Release 1.4.0a1\n*/\nclass PEAR_Task_Windowseol extends PEAR_Task_Common\n{\nvar $type = 'simple';\nvar $phase = PEAR_TASK_PACKAGE;\nvar $_replacements;\n/**\n* Validate the raw xml at parsing-time.\n* @param PEAR_PackageFile_v2\n* @param array raw, parsed xml\n* @param PEAR_Config\n* @static\n*/\nfunction validateXml($pkg, $xml, &$config, $fileXml)\n{\nif ($xml != '') {\nreturn array(PEAR_TASK_ERROR_INVALID, 'no attributes allowed');\n}\nreturn true;\n}\n/**\n* Initialize a task instance with the parameters\n* @param array raw, parsed xml\n* @param unused\n*/\nfunction init($xml, $attribs)\n{\n}\n/**\n* Replace all line endings with windows line endings\n*\n* See validateXml() source for the complete list of allowed\nfields\n* @param PEAR_PackageFile_v1|PEAR_PackageFile_v2\n* @param string file contents\n* @param string the eventual final file location (informational\nonly)\n* @return string|false|PEAR_Error false to skip this file,\nPEAR_Error to fail\n* (use $this->throwError), otherwise return the new contents\n*/\nfunction startSession($pkg, $contents, $dest)\n{\n$this->logger->log(3, \"replacing all line endings with \\\\r\\\\n in $dest\");\nreturn preg_replace(\"/\\r\\n|\\n\\r|\\r|\\n/\", \"\\r\\n\", $contents);\n}\n}\n?>\n\n```", "```php\n<tasks:chiara-managedb/>\n<tasks:chiara-managedb unique=\"0\"/>\n<tasks:chiara-managedb unique=\"1\"/>\n\n```", "```php\n<file name=\"blah.xml\" role=\"chiaramdb2schema\">\n<tasks:chiara-managedb/>\n</file>\n\n```", "```php\n/**\n* Validate the raw xml at parsing-time.\n* @param PEAR_PackageFile_v2\n* @param array raw, parsed xml\n* @param PEAR_Config\n* @static\n*/\nfunction validateXml($pkg, $xml, &$config, $fileXml)\n{\nif ($fileXml['role'] !='chiaramdb2schema') {\nreturn array(PEAR_TASK_ERROR_INVALID,\n'chiara_managedb task can only be ' .\n'used with files whose role is chiaramdb2schema.\nFile is role \"' .\n$fileXml['role'] . '\"');\n}\nif (isset($xml['attribs'])) {\nif (!isset($xml['attribs']['unique'])) {\nreturn array(PEAR_TASK_ERROR_MISSING_ATTRIB, 'unique');\n}\nif (!in_array($xml['attribs']['unique'], array('0', '1'))) {\nreturn array (PEAR_TASK_ERROR_WRONG_ATTRIB_VALUE, 'unique',\n$xml['attribs']['unique'], array('0', '1'));\n}\n}\nreturn true;\n}\n\n```", "```php\n/**\n* Initialize a task instance with the parameters\n* @param array raw, parsed xml\n* @param unused\n*/\nfunction init($xml, $attribs)\n{\nif (isset($xml['attribs']['unique']) &&\n$xml['attribs']['unique']) {\n$this->_unique = true;\n} else {\n$this->_unique = false;\n}\n}\n\n```", "```php\n/**\n* parse the chiaramdb2schema_dsn config variable and the\n* password variable to determine an actual DSN that should be * used for this task.\n* @return string|PEAR_Error\n* @access private\n*/\nfunction _parseDSN($pkg)\n{\n// get channel-specific configuration for this variable\n$driver = $this->config->get('chiaramdb2schema_driver', null, $pkg->getChannel());\nif (!$driver) {\nreturn PEAR::raiseError('Error: no driver set. use\n\"config-set ' . 'chiaramdb2schema_driver <drivertype>\" before installing');\n}\n$allDSN = $this->config->get('chiaramdb2schema_dsn', null, $pkg->getChannel());\nif (!$allDSN) {\nreturn $this->throwError('Error: no dsn set. use\n\"config-set ' . 'chiaramdb2schema_dsn <dsn>\" before installing');\n}\n$allPasswords = $this->config->get('chiaramdb2schema_password', null, $pkg->getChannel());\n$allDSN = explode(';', $allDSN);\n$badDSN = array();\n$allPasswords = explode(':', $allPasswords);\nfor ($i = 0; $i < count($allDSN); $i++) {\nif ($i && strpos($allDSN[$i], '::')) {\n$allDSN[$i] = explode('::', $allDSN[$i]);\n$password = (isset($allPasswords[$i]) &&\n$allPasswords[$i]) ? $allPasswords[$i] : '';\nif (!strpos($allDSN[$i][1], '@')) {\n$password = '';\n} elseif ($password) {\n// insert password into DSN\n$a = explode('@', $allDSN[$i][1]);\n$allDSN[$i][1] = $a[0] . ':' . $password . '@';\nunset($a[0]);\n$allDSN[$i][1] .= implode('@', $a);\n}\n} elseif (!$i && !strpos($allDSN[0], '::')) {\n$password = (isset($allPasswords[0]) &&\n$allPasswords[0]) ? $allPasswords[0] : '';\nif (!strpos($allDSN[0], '@'))\n{$password = '';\n} elseif ($password) {\n// insert password into DSN\n$a = explode('@', $allDSN[0]);\n$allDSN[0] = $a[0] . ':' . $password . '@';\nunset($a[0]);\n$allDSN[0] .= implode('@', $a);\n}\n} else {\n// invalid DSN\n$badDSN[$i] = $allDSN[$i];\n$allDSN[$i] = false;\n}\n}\nif ($this->_unique) {\n$lookfor = array($pkg->getPackage(), $pkg->getPackage() . '#' . $this->_file);\nforeach ($allDSN as $i => $dsn) {\nif (!$i) {\ncontinue;\n}\nif (strcasecmp($dsn[0], $lookfor[0]) === 0) {\nreturn $driver . '://' . $dsn[1];\n}\nif (strcasecmp($dsn[0], $lookfor[1]) === 0) {\nreturn $driver . '://' . $dsn[1];\n}\n}\nreturn $this->throwError('No valid DSNs for package \"' .\n$pkg->getPackage() . '\" were found in config variable\nchiaramdb2schema_dsn');\n} else {\nif (!$allDSN[0]) {\nreturn $this->throwError('invalid default DSN \"' .\n$badDSN[0] . '\" in config variable chiaramdb2schema_dsn');\n}\nreturn $driver . '://' . $allDSN[0];\n}\n}\n\n```", "```php\n// get channel-specific configuration for this variable\n$driver = $this->config->get('chiaramdb2schema_driver', null, $pkg->getChannel());\nif (!$driver) {\nreturn PEAR::raiseError('Error: no driver set. use\n\"config-set ' . 'chiaramdb2schema_driver <drivertype>\" before installing');\n}\n$allDSN = $this->config->get('chiaramdb2schema_dsn', null, $pkg->getChannel());\nif (!$allDSN) {\nreturn $this->throwError('Error: no dsn set. use\n\"config-set ' . 'chiaramdb2schema_dsn <dsn>\" before installing');\n}\n$allPasswords = $this->config->get('chiaramdb2schema_password', null, $pkg->getChannel());\n\n```", "```php\n$allDSN = explode(';', $allDSN);\n$badDSN = array();\n$allPasswords = explode(':', $allPasswords);\nfor ($i = 0; $i < count($allDSN); $i++) {\nif ($i && strpos($allDSN[$i], '::')) {\n$allDSN[$i] = explode('::', $allDSN[$i]);\n$password = (isset($allPasswords[$i]) &&\n$allPasswords[$i]) ?\n$allPasswords[$i] : '';\nif (!strpos($allDSN[$i][1], '@')) {\n$password = '';\n} elseif ($password) {\n// insert password into DSN\n$a = explode('@', $allDSN[$i][1]);\n$allDSN[$i][1] = $a[0] . ':' . $password . '@';\nunset($a[0]);\n$allDSN[$i][1] .= implode('@', $a);\n}\n} elseif (!$i && !strpos($allDSN[0], '::')) {\n$password = (isset($allPasswords[0]) &&\n$allPasswords[0]) ?\n$allPasswords[0] : '';\nif (!strpos($allDSN[0], '@')) {\n$password = '';\n} elseif ($password) {\n// insert password into DSN\n$a = explode('@', $allDSN[0]);\n$allDSN[0] = $a[0] . ':' . $password . '@';\nunset($a[0]);\n$allDSN[0] .= implode('@', $a);\n}\n} else {\n// invalid DSN\n$badDSN[$i] = $allDSN[$i];\n$allDSN[$i] = false;\n}\n}\n\n```", "```php\nif ($this->_unique) {\n$lookfor = array($pkg->getPackage(), $pkg->getPackage() . '#' . $this->_file);\nforeach ($allDSN as $i => $dsn) {\nif (!$i) {\ncontinue;\n}\nif (strcasecmp($dsn[0], $lookfor[0]) === 0) {\nreturn $driver . ':/' . $dsn[1];\n}\nif (strcasecmp($dsn[0], $lookfor[1]) === 0) {\nreturn $driver . ':/' . $dsn[1];\n}\n}\nreturn $this->throwError('No valid DSNs for package \"' .\n$pkg->getPackage() .\n'\" were found in config variable\nchiaramdb2schema_dsn');\n} else {\nif (!$allDSN[0]) {\nreturn $this->throwError('invalid default DSN \"' .\n$badDSN[0] . '\" in config variable\nchiaramdb2schema_dsn');\n}\nreturn $driver . ':/' . $allDSN[0];\n}\n\n```", "```php\n/**\n* Update the database.\n*\n* First, determine which DSN to use from the\n* chiaramdb2schema_dsn config variable\n* with {@link _parseDSN()}, then determine whether the database\n* already exists based\n* on the contents of a previous installation, and finally use\n* {@link MDB2_Schema::updateDatabase()} * to update the database itself\n*\n* PEAR_Error is returned on any problem.\n* See validateXml() source for the complete list of allowed fields\n* @param PEAR_PackageFile_v2\n* @param string file contents\n* @param string the eventual final file location * (informational only)\n* @return string|false|PEAR_Error false to skip this file,\n* PEAR_Error to fail\n* (use $this->throwError), otherwise return the new contents\n*/\nfunction startSession($pkg, $contents, $dest)\n{\n$this->_file = basename($dest);\n$dsn = $this->_parseDSN($pkg);\nif (PEAR::isError($dsn)) {\nreturn $dsn;\n}\nrequire_once 'MDB2/Schema.php';\nrequire_once 'System.php';\n$tmp = System::mktemp(array('foo.xml'));\nif (PEAR::isError($tmp)) {\nreturn $tmp;\n}\n$fp = fopen($tmp, 'wb');\nfwrite($fp, $contents);\nfclose($fp);\n$schema = &MDB2_Schema::factory($dsn);\n$reg = &$this->config->getRegistry();\nif ($installed && file_exists($dest)) {\n// update existing database\n$res = $schema->updateDatabase($tmp, $dest);\nif (PEAR::isError($res)) {\nreturn PEAR::raiseError($res->getMessage() . $res->getUserInfo());\n}\n} else {\n// create new database\n$res = $schema->updateDatabase($tmp);\nif (PEAR::isError($res)) {\nreturn PEAR::raiseError($res->getMessage() . $res->getUserInfo());\n}\n}\n// unmodified\nreturn $contents;\n}\n\n```", "```php\narray('attribs' => array('name' => 'Filename', 'role' =>\n'filerole',...));\n\n```", "```php\n<file name=\"rolesetup.php\" role=\"php\">\n<tasks:postinstallscript>\n<tasks:paramgroup>\n<tasks:id>setup</tasks:id>\n<tasks:param>\n<tasks:name>channel</tasks:name>\n<tasks:prompt>Choose a channel to modify configuration\nvalues from</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>pear.php.net</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>driver</tasks:id>\n<tasks:instructions>\nIn order to set up the database, please choose a database\ndriver.\nThis should be a MDB2-compatible driver name, such as mysql, mysqli,\nPgsql, oci8, etc.\n</tasks:instructions>\n<tasks:param>\n<tasks:name>driver</tasks:name>\n<tasks:prompt>Database driver?</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>choosedsn</tasks:id>\n<tasks:param>\n<tasks:name>dsnchoice</tasks:name>\n<tasks:prompt>%sChoose a DSN to modify, or to add a new\ndsn, type\n&quot;new&quot;. To remove a DSN prepend with\n&quot;!&quot;</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>new</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>deletedsn</tasks:id>\n<tasks:param>\n<tasks:name>confirm</tasks:name>\n<tasks:prompt>Really delete &quot;%s&quot; DSN? (yes to\ndelete)</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>no</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>modifydsn</tasks:id>\n<tasks:name>choosedsn::dsnchoice</tasks:name>\n<tasks:conditiontype>!=</tasks:conditiontype>\n<tasks:value>new</tasks:value>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>Database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>newpackagedsn</tasks:id>\n<tasks:param>\n<tasks:name>package</tasks:name>\n<tasks:prompt>Package name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>root</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>Database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>newdefaultdsn</tasks:id>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>root</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n</tasks:postinstallscript>\n</file>\n\n```", "```php\n<?php\n/**\n* Post-installation script for the Chiara_Managedb task.\n*\n* This script takes user input on DSNs and sets up DSNs, allowing\n* the addition of one custom DSN per iteration.\n* @version @package_version@\n*/\nclass rolesetup_postinstall\n{\n/**\n* object representing package.xml\n* @var PEAR_PackageFile_v2\n* @access private\n*/\nvar $_pkg;\n/**\n* Frontend object\n* @var PEAR_Frontend\n* @access private\n*/\nvar $_ui;\n/**\n* @var PEAR_Config\n* @access private\n*/\nvar $_config;\n/**\n* The actual DSN value as will be saved to the configuration file\n* @var string\n*/\nvar $dsnvalue;\n/**\n* The actual password value as will be saved to the * configuration file\n* @var string\n*/\nvar $passwordvalue;\n/**\n* The channel to modify configuration values from\n*\n* @var string\n*/\nvar $channel;\n/**\n* The task object used for dsn serialization/unserialization\n* @var PEAR_Task_Chiara_Managedb\n*/\nvar $managedb;\n/**\n* An \"unserialized\" array of DSNs parsed from the chiaramdb2schema\n* configuration variables.\n* @var array\n*/\nvar $dsns;\n/**\n* The index of the DSN in $this->dsns we will be modifying\n* @var string\n*/\nvar $choice;\n/**\n* Initialize the post-installation script\n*\n* @param PEAR_Config $config\n* @param PEAR_PackageFile_v2 $pkg\n* @param string|null $lastversion Last installed version. * Not used in this script\n* @return boolean success of initialization\n*/\nfunction init(&$config, &$pkg, $lastversion)\n{\nrequire_once 'PEAR/Task/Chiara/Managedb.php';\n$this->_config = &$config;\n$this->_ui = &PEAR_Frontend::singleton();\n$this->managedb = new PEAR_Task_Chiara_Managedb($config,\n$this->_ui, PEAR_TASK_INSTALL);\n$this->_pkg = &$pkg;\nif (!in_array('chiaramdb2schema_dsn', $this->_config->getKeys())) {\n// fail: role was not installed?\nreturn false;\n}\n$this->channel = $this->_config->get('default_channel');\n$this->dsns = PEAR::isError( $e = $this->managedb->unserializeDSN($pkg)) ? array() : $e;\nreturn true;\n}\n/**\n* Set up the prompts properly for the script\n*\n* @param array $prompts\n* @param string $section\n* @return array\n*/\nfunction postProcessPrompts($prompts, $section)\n{\nswitch ($section) {\ncase 'driver' :\nif ($this->driver) {\n$prompts[0]['default'] = $this->driver;\n}\nbreak;\ncase 'deletedsn' :\n$count = 1;\nforeach ($this->dsns as $i => $dsn) {\n$text = ($i ? \"(Package $i) \" : '') . $dsn;\nif ($count == $this->choice) {\nbreak;\n}\n$count++;\n}\n$prompts[0]['prompt'] = sprintf($prompts[0]['prompt'], $text);\nbreak;\ncase 'choosedsn' :\n$text = '';\n$count = 1;\nforeach ($this->dsns as $i => $dsn) {\n$text .= \"[$count] \" . ($i ? \"(Package $i) \" : '') . $dsn . \"\\n\";\n$count++;\n}\n$prompts[0]['prompt'] =\nsprintf($prompts[0]['prompt'], $text);\nbreak;\ncase 'modifydsn' :\n$count = 1;\n$found = false;\nforeach ($this->dsns as $i => $dsn) {\nif ($count == $this->choice) {\n$found = true;\nbreak;\n}\n$count++;\n}\nif ($found) {\n$dsn = MDB2::parseDSN($this->dsns[$i]);\n// user\n$prompts[0]['default'] = $dsn['username'];\n// password\nif (isset($dsn['password'])) {\n$prompts[1]['default'] = $dsn['password'];\n}\n// host\n$prompts[2]['default'] = $dsn['hostspec'];\nif (isset($dsn['port'])) {\n$prompts[2]['default'] .= ':' . $dsn['port'];\n}\n// database\n$prompts[3]['default'] = $dsn['database'];\n}\nbreak;\n}\nreturn $prompts;\n}\n/**\n* Run the script itself\n*\n* @param array $answers\n* @param string $phase\n*/\nfunction run($answers, $phase)\n{\nswitch ($phase) {\ncase 'setup' :\nreturn $this->_doSetup($answers);\nbreak;\ncase 'driver' :\nrequire_once 'MDB2.php';\nPEAR::pushErrorHandling(PEAR_ERROR_RETURN);\nif (PEAR::isError($err =\nMDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n$answers['driver']))) {\nPEAR::popErrorHandling();\n$this->_ui->outputData( 'ERROR: Unknown MDB2 driver \"' .\n$answers['driver'] . '\": ' .\n$err->getUserInfo() . '. Be sure you have\ninstalled ' . 'MDB2_Driver_' .\n$answers['driver']);\nreturn false;\n}\nPEAR::popErrorHandling();\n$ret = $this->_config->set('chiaramdb2schema_driver',\n$answers['driver'],\n'user', $this->channel);\nreturn $ret && $this->_config->writeConfigFile();\nbreak;\ncase 'choosedsn' :\nif ($answers['dsnchoice'] && $answers['dsnchoice']{0} == '!') {\n// delete a DSN\n$answers['dsnchoice'] =\nsubstr($answers['dsnchoice'], 1);\n} else {\n$this->_ui->skipParamgroup('deletedsn');\n}\nif ($answers['dsnchoice'] > count($this->dsns)) {\n$this->_ui->outputData('ERROR: No suchdsn \"' .\n$answers['dsnchoice'] . '\"');\nreturn false;\n}\n$this->choice = $answers['dsnchoice'];\nbreak;\ncase 'deletedsn' :\n$this->_ui->skipParamgroup('modifydsn');\n$this->_ui->skipParamgroup('newpackagedsn');\n$this->_ui->skipParamgroup('newdefaultdsn');\nif ($answers['confirm'] == 'yes') {\n$count = 1;\nforeach ($this->dsns as $i => $dsn) {\nif ($count == $this->choice) {\nunset($this->dsns[$i]);\nbreak;\n}\n$count++;\n}\n$this->_ui->outputData('DSN deleted');\n$this->managedb->serializeDSN($this->dsns, $this->channel);\nreturn true;\n} else {\n$this->_ui->outputData('No changes performed');\n}\nbreak;\ncase 'modifydsn' :\n$count = 1;\n$found = false;\nforeach ($this->dsns as $i => $dsn) {\nif ($count == $this->choice) {\n$found = true;\nbreak;\n}\n$count++;\n}\nif (!$found) {\n$this->_ui->outputData('ERROR: DSN \"' . $this->choice . '\" not found!');\nreturn false;\n}\n$dsn = $answers['user'] . ':' . $answers['password'] . '@' .\n$answers['host'] . '/' . $answers['database'];\n$this->dsns[$i] = $dsn;\n$this->managedb->serializeDSN($this->dsns, $this->channel);\n$this->_ui->skipParamgroup('newpackagedsn');\n$this->_ui->skipParamgroup('newdefaultdsn');\nbreak;\ncase 'newpackagedsn' :\n$dsn = $answers['user'] . ':' . $answers['password'] . '@' .\n$answers['host'] . '/' . $answers['database'];\n$this->dsns[$answers['package']] = $dsn;\n$this->managedb->serializeDSN($this->dsns, $this->channel);\n$this->_ui->skipParamgroup('newdefaultdsn');\nbreak;\ncase 'newdefaultdsn' :\n$dsn = $answers['user'] . ':' . $answers['password'] . '@' .\n$answers['host'] . '/' . $answers['database'];\n$this->dsns[0] = $dsn;\n$this->managedb->serializeDSN($this->dsns, $this->channel);\nbreak;\ncase '_undoOnError' :\n// answers contains paramgroups that succeeded in\n// reverse order foreach ($answers as $group) {\n}\nbreak;\n}\nreturn true;\n}\n/**\n* Run the setup paramgroup\n*\n* @param array $answers\n* @return boolean\n* @access private\n*/\nfunction _doSetup($answers)\n{\n$reg = &$this->_config->getRegistry();\nif (!$reg->channelExists($answers['channel'])) {\n$this->_ui->outputData('ERROR: channel \"' .\n$answers['channel'] . '\" is not registered, use the channel-discover command');\nreturn false;\n}\n$this->channel = $answers['channel'];\n$this->driver = $this->_config->get('chiaramdb2schema_driver', null, $this->channel);\n$this->dsnvalue = $this->_config->get('chiaramdb2schema_dsn',\nnull, $this->channel);\n$this->passwordvalue = $this->_config->get('chiaramdb2schema_dsn', null,\n$this->channel);\nif (!$this->dsnvalue) {\n// magically skip the \"choosedsn\", \"deleteDSN\" and\n// \"modifydsn\" <paramgroup>s,\n// and only create a new, default DSN\n$this->_ui->skipParamgroup('choosedsn');\n$this->_ui->skipParamgroup('deletedsn');\n$this->_ui->skipParamgroup('modifydsn');\n$this->_ui->skipParamgroup('newpackagedsn');\n}\nreturn true;\n}\n}\n?>\n\n```", "```php\n/**\n* Initialize the post-installation script\n*\n* @param PEAR_Config $config\n* @param PEAR_PackageFile_v2 $pkg\n* @param string|null $lastversion Last installed version. * Not used in this script\n* @return boolean success of initialization\n*/\nfunction init(&$config, &$pkg, $lastversion)\n{\nrequire_once 'PEAR/Task/Chiara/Managedb.php';\n$this->_config = &$config;\n$this->_ui = &PEAR_Frontend::singleton();\n$this->managedb = new PEAR_Task_Chiara_Managedb($config, $this->_ui,\nPEAR_TASK_INSTALL);\n$this->_pkg = &$pkg;\nif (!in_array('chiaramdb2schema_dsn', $this->_config->getKeys())) {\n// fail: role was not installed?\nreturn false;\n}\n$this->channel = $this->_config->get('default_channel');\n$this->dsns = PEAR::isError($e = $this->managedb->unserializeDSN($pkg)) ? array() : $e;\nreturn true;\n}\n\n```", "```php\n/**\n* Set up the prompts properly for the script\n*\n* @param array $prompts\n* @param string $section\n* @return array\n*/\nfunction postProcessPrompts($prompts, $section)\n{\nswitch ($section) {\ncase 'driver' :\nif ($this->driver) {\n$prompts[0]['default'] = $this->driver;\n}\nbreak;\ncase 'deletedsn' :\n$count = 1;\nforeach ($this->dsns as $i => $dsn) {\n$text = ($i ? \"(Package $i) \" : '') . $dsn;\nif ($count == $this->choice) {\nbreak;\n}\n$count++;\n}\n$prompts[0]['prompt'] =\nsprintf($prompts[0]['prompt'], $text);\nbreak;\ncase 'choosedsn' :\n$text = '';\n$count = 1;\nforeach ($this->dsns as $i => $dsn) {\n$text .= \"[$count] \" . ($i ? \"(Package $i) \" :\n'') . $dsn . \"\\n\";\n$count++;\n}\n$prompts[0]['prompt'] =\nsprintf($prompts[0]['prompt'], $text);\nbreak;\ncase 'modifydsn' :\n$count = 1;\n$found = false;\nforeach ($this->dsns as $i => $dsn) {\nif ($count == $this->choice) {\n$found = true;\nbreak;\n}\n$count++;\n}\nif ($found) {\n$dsn = MDB2::parseDSN($this->dsns[$i]);\n// user\n$prompts[0]['default'] = $dsn['username'];\n// password\nif (isset($dsn['password'])) {\n$prompts[1]['default'] = $dsn['password'];\n}\n// host\n$prompts[2]['default'] = $dsn['hostspec'];\nif (isset($dsn['port'])) {\n$prompts[2]['default'] .= ':' . $dsn['port'];\n}\n// database\n$prompts[3]['default'] = $dsn['database'];\n}\nbreak;\n}\nreturn $prompts;\n}\n\n```", "```php\n<tasks:paramgroup>\n<tasks:id>databaseSetup</tasks:id>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>%s database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>pear</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>%s database username</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>%s_pear</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n\n```", "```php\narray(\n'id' => 'databaseSetup';\n'param' =>\narray(\narray(\n'name' => 'database',\n'prompt' => '%s database name',\n'type' => 'string',\n'default' => 'pear',\n),\narray(\n'name' => 'user',\n'prompt' => '%s database username',\n'type' => 'string',\n'default' => '%s_pear',\n),\n),\n);\n\n```", "```php\narray(\n'id' => 'databaseSetup';\n'param' =>\narray(\narray(\n'name' => 'database',\n'prompt' => 'Postgresql database name',\n'type' => 'string',\n'default' => 'pear',\n),\narray(\n'name' => 'user',\n'prompt' => 'Postgresql database username',\n'type' => 'string',\n'default' => 'pgsql_pear',\n),\n),\n);\n\n```", "```php\narray(\n'id' => 'databaseSetup';\n'param' =>\narray(\narray(\n'name' => 'database',\n'prompt' => 'Nom de la base de données Postgresql',\n'type' => 'string',\n'default' => 'pear',\n),\narray(\n'name' => 'user',\n'prompt' => 'Nom d'utilisateur de la base de données Postgresql',\n'type' => 'string',\n'default' => 'pgsql_pear',\n),\n),\n);\n\n```", "```php\narray(\n'database' => 'huggiepear',\n'user' => 'killinator',\n);\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package version=\"2.0\" \n\nxsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0\nhttp://pear.php.net/dtd/tasks-1.0.xsd\nhttp://pear.php.net/dtd/package-2.0\nhttp://pear.php.net/dtd/package-2.0.xsd\">\n<name>PEAR_all</name>\n<channel>pear.php.net</channel>\n<summary>PEAR Base System</summary>\n<description>\nThe PEAR package and its dependencies\n</description>\n<lead>\n<name>Greg Beaver</name>\n<user>cellog</user>\n<email>cellog@php.net</email>\n<active>yes</active>\n</lead>\n<date>2005-09-25</date>\n<version>\n<release>1.4.2</release>\n<api>1.0.0</api>\n</version>\n<stability>\n<release>stable</release>\n<api>stable</api>\n</stability>\n<license uri=\"http://www.php.net/license\">PHP License</license>\n<notes>\nThis contains PEAR version 1.4.2 and its dependencies\n</notes>\n<contents>\n<bundledpackage>PEAR-1.4.2.tgz</bundledpackage>\n<bundledpackage>Archive_Tar-1.3.1.tgz</bundledpackage>\n<bundledpackage>Console_Getopt-1.2.tgz</bundledpackage>\n<bundledpackage>XML_RPC-1.4.3.tgz</bundledpackage>\n</contents>\n<dependencies>\n<required>\n<php>\n<min>4.2</min>\n</php>\n<pearinstaller>\n<min>1.4.0a12</min>\n</pearinstaller>\n</required>\n</dependencies>\n<bundle/>\n</package>\n\n```", "```php\n$ pear upgrade PEAR_all-1.4.2.tgz \n\n```", "```php\n$ pear package \n\n```", "```php\n$ pear config-set preferred_state beta \n\n```", "```php\n$ pear install PEAR_PackageFileManager-beta \n\n```", "```php\n<?php\n/**\n* package.xml generation script for Task_Chiara_Managedb package\n* @author Gregory Beaver <cellog@php.net>\n*/\nrequire_once 'PEAR/PackageFileManager2.php';\nPEAR::setErrorHandling(PEAR_ERROR_DIE);\n$pfm = &PEAR_PackageFileManager2::importOptions('package.xml',\narray(\n// set a subdirectory everything is installed into\n'baseinstalldir' => 'PEAR/Task/Chiara',\n// location of files to package\n'packagedirectory' => dirname(__FILE__),\n// what method is used to glob files? cvs, svn, perforce\n// and file are options\n'filelistgenerator' => 'file',\n// don't distribute this script\n'ignore' => array('package.php', 'package2.xml', 'package.xml'),\n// put the post-installation script in a\n// different location from the task itself\n'installexceptions' =>\narray(\n'rolesetup.php' => 'Chiara/Task/Managedb',\n),\n// make the output human-friendly\n'simpleoutput' => true,\n));\n$pfm->setPackage('PEAR_Task_Chiara_Managedb');\n$pfm->setChannel('pear.chiaraquartet.net');\n$pfm->setLicense('BSD license', 'http://www.opensource.org/licenses/bsd-license.php');\n$pfm->setSummary('Provides the <tasks:chiara-managedb/> file task for\nmanaging ' . 'databases on installation');\n$pfm->setDescription('Task_Chiara_Managedb provides the code to\nimplement the <tasks:chiara-managedb/> task, as well as a post- installation script to manage the configuration variables it needs.\nThis task works in conjunction with the chiaramdb2schema file role\n(package PEAR_Installer_Role_Chiaramdb2schema) to create databases\nused by a package on installation, and to upgrade the database structure automatically on upgrade. To do this, it uses MDB2_Schema\\'s\nupdateDatabase() functionality.\nThe post-install script must be run with \"pear run-scripts\"\nto initialize configuration variables');\n// initial release version should be 0.1.0\n$pfm->addMaintainer('lead', 'cellog', 'Greg Beaver',\n'cellog@php.net', 'yes');\n$pfm->setAPIVersion('0.1.0');\n$pfm->setReleaseVersion('0.1.0');\n// our API is reasonably stable, but may need tweaking\n$pfm->setAPIStability('beta');\n// the code is very new, and may change dramatically\n$pfm->setReleaseStability('alpha');\n// release notes\n$pfm->setNotes('initial release');\n// this is a PHP script, not a PECL extension source/binary or a\n// bundle package\n$pfm->setPackageType('php');\n$pfm->addRelease();\n// set up special file properties\n$pfm->addGlobalReplacement('package-info', '@package_version@',\n'version');\n$script = &$pfm->initPostinstallScript('rolesetup.php');\n// add paramgroups to the post-install script\n$script->addParamGroup(\n'setup',\n$script->getParam('channel', 'Choose a channel to modify\nconfiguration values from',\n'string', 'pear.php.net'));\n$script->addParamGroup(\n'driver',\n$script->getParam('driver', 'Database driver?'),\n'In order to set up the database, please choose a database\ndriver. This should be a MDB2-compatible driver name, such as mysql, mysqli, Pgsql, oci8, etc.');\n$script->addParamGroup(\n'choosedsn',\n$script->getParam('dsnchoice', '%sChoose a DSN to modify, or to add a' . ' new dsn, type \"new\". To remove a DSN prepend with \"!\"'));\n$script->addParamGroup(\n'deletedsn',\n$script->getParam('confirm', 'Really delete \"%s\" DSN? (yes to delete)', 'string', 'no'));\n$script->addConditionTypeGroup(\n'modifydsn',\n'choosedsn', 'dsnchoice', 'new', '!=',\narray(\n$script->getParam('user', 'User name', 'string', 'root'),\n$script->getParam('password', 'Database password',\n'password'),\n$script->getParam('host', 'Database host', 'string',\n'localhost'),\n$script->getParam('database', 'Database name'),\n));\n$script->addParamGroup(\n'newpackagedsn',\narray(\n$script->getParam('package', 'Package name'),\n$script->getParam('user', 'User name', 'string', 'root'),\n$script->getParam('password', 'Database password',\n'password'),\n$script->getParam('host', 'Database host', 'string',\n'localhost'),\n$script->getParam('database', 'Database name'),\n));\n$script->addParamGroup(\n'newdefaultdsn',\narray(\n$script->getParam('user', 'User name', 'string', 'root'),\n$script->getParam('password', 'Database password',\n'password'),\n$script->getParam('host', 'Database host', 'string',\n'localhost'),\n$script->getParam('database', 'Database name'),\n));\n$pfm->addPostinstallTask($script, 'rolesetup.php');\n// start over with dependencies\n$pfm->clearDeps();\n$pfm->setPhpDep('4.2.0');\n// we use post-install script features fixed in PEAR 1.4.3\n$pfm->setPearinstallerDep('1.4.3');\n$pfm->addPackageDepWithChannel('required', 'PEAR', 'pear.php.net',\n'1.4.3');\n$pfm->addPackageDepWithChannel('required', 'MDB2_Schema',\n'pear.php.net', '0.3.0');\n$pfm->addPackageDepWithChannel('required',\n'PEAR_Installer_Role_Chiaramdb2schmea',\n'pear.chiaraquartet.net', '0.1.0');\n// create the <contents> tag\n$pfm->generateContents();\n// create package.xml 1.0 to gracefully tell PEAR 1.3.x users they have\n// to upgrade to use this package\n$pfm1 = $pfm->exportCompatiblePackageFile1(array(\n// set a subdirectory everything is installed into\n'baseinstalldir' => 'PEAR/Task/Chiara',\n// location of files to package\n'packagedirectory' => dirname(__FILE__),\n// what method is used to glob files? cvs, svn, perforce\n// and file are options\n'filelistgenerator' => 'file',\n// don't distribute this script\n'ignore' => array('package.php', 'package.xml', 'package2.xml', 'rolesetup.php'),\n// put the post-installation script in a\n// different location from the task itself\n// make the output human-friendly\n'simpleoutput' => true,\n));\n// display the package.xml by default to allow \"debugging\" by eye,\n// and then create it if explicitly asked to\nif (isset($_GET['make']) || (isset($_SERVER['argv']) &&\n@$_SERVER['argv'][1] == 'make')) {\n$pfm1->writePackageFile();\n$pfm->writePackageFile();\n} else {\n$pfm1->debugPackageFile();\n$pfm->debugPackageFile();\n}\n?>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package packagerversion=\"1.4.3\" version=\"2.0\"\n\nxsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0\nhttp://pear.php.net/dtd/tasks-1.0.xsd\nhttp://pear.php.net/dtd/package-2.0\nhttp://pear.php.net/dtd/package-2.0.xsd\">\n<name>PEAR_Task_Chiara_Managedb</name>\n<channel>pear.chiaraquartet.net</channel>\n<summary>Provides the &lt;tasks:chiara-managedb/&gt; file task for\nmanaging databases on installation</summary>\n<description>Task_Chiara_Managedb provides the code to implement the\n&lt;tasks:chiara-managedb/&gt; task, as well as a post-installation\nscript to manage the configuration variables it needs.\nThis task works in conjunction with the chiaramdb2schema file role\n(package PEAR_Installer_Role_Chiaramdb2schema) to create databases\nused by a package on installation, and to upgrade the database structure automatically on upgrade. To do this, it uses MDB2_Schema&apos;s\nupdateDatabase() functionality.\nThe post-install script must be run with &quot;pear run-scripts&quot;\nto initialize configuration variables</description>\n<lead>\n<name>Greg Beaver</name>\n<user>cellog</user>\n<email>cellog@php.net</email>\n<active>yes</active>\n</lead>\n<date>2005-10-18</date>\n<time>23:55:29</time>\n<version>\n<release>0.1.0</release>\n<api>0.1.0</api>\n</version>\n<stability>\n<release>alpha</release>\n<api>beta</api>\n</stability>\n<license uri=\"http://www.opensource.org/licenses/bsd-\nlicense.php\">BSD license</license>\n<notes>initial release</notes>\n<contents>\n<dir baseinstalldir=\"PEAR/Task/Chiara\" name=\"/\">\n<dir name=\"Managedb\">\n<file name=\"rw.php\" role=\"php\">\n<tasks:replace from=\"@package_version@\" to=\"version\"\ntype=\"package-info\" />\n</file>\n</dir> <!-- //Managedb -->\n<file name=\"Managedb.php\" role=\"php\">\n<tasks:replace from=\"@package_version@\" to=\"version\"\ntype=\"package-info\" />\n</file>\n<file name=\"rolesetup.php\" role=\"php\">\n<tasks:postinstallscript>\n<tasks:paramgroup>\n<tasks:id>setup</tasks:id>\n<tasks:param>\n<tasks:name>channel</tasks:name>\n<tasks:prompt>Choose a channel to modify configuration values\nfrom</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>pear.php.net</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>driver</tasks:id>\n<tasks:instructions>In order to set up the database, please choose a database driver.\nThis should be a MDB2-compatible driver name, such as mysql, mysqli, Pgsql, oci8, etc. </tasks:instructions>\n<tasks:param>\n<tasks:name>driver</tasks:name>\n<tasks:prompt>Database driver?</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>choosedsn</tasks:id>\n<tasks:param>\n<tasks:name>dsnchoice</tasks:name>\n<tasks:prompt>%sChoose a DSN to modify, or to add a new dsn, type &quot;new&quot;. To remove a DSN prepend with &quot;!&quot; </tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>deletedsn</tasks:id>\n<tasks:param>\n<tasks:name>confirm</tasks:name>\n<tasks:prompt>Really delete &quot;%s&quot; DSN? (yes to delete)</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>no</tasks:default>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>modifydsn</tasks:id>\n<tasks:name>choosedsn::dsnchoice</tasks:name>\n<tasks:conditiontype>!=</tasks:conditiontype>\n<tasks:value>new</tasks:value>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>root</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>Database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>newpackagedsn</tasks:id>\n<tasks:param>\n<tasks:name>package</tasks:name>\n<tasks:prompt>Package name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>root</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>Database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n<tasks:paramgroup>\n<tasks:id>newdefaultdsn</tasks:id>\n<tasks:param>\n<tasks:name>user</tasks:name>\n<tasks:prompt>User name</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>root</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>password</tasks:name>\n<tasks:prompt>Database password</tasks:prompt>\n<tasks:type>password</tasks:type>\n</tasks:param>\n<tasks:param>\n<tasks:name>host</tasks:name>\n<tasks:prompt>Database host</tasks:prompt>\n<tasks:type>string</tasks:type>\n<tasks:default>localhost</tasks:default>\n</tasks:param>\n<tasks:param>\n<tasks:name>database</tasks:name>\n<tasks:prompt>Database name</tasks:prompt>\n<tasks:type>string</tasks:type>\n</tasks:param>\n</tasks:paramgroup>\n</tasks:postinstallscript>\n<tasks:replace from=\"@package_version@\" to=\"version\"\ntype=\"package-info\" />\n</file>\n</dir> <!-- / -->\n</contents>\n<dependencies>\n<required>\n<php>\n<min>4.2.0</min>\n</php>\n<pearinstaller>\n<min>1.4.3</min>\n</pearinstaller>\n<package>\n<name>PEAR</name>\n<channel>pear.php.net</channel>\n<min>1.4.3</min>\n</package>\n<package>\n<name>MDB2_Schema</name>\n<channel>pear.php.net</channel>\n<min>0.3.0</min>\n</package>\n<package>\n<name>PEAR_Installer_Role_Chiaramdb2schema</name>\n<channel>pear.chiaraquartet.net</channel>\n<min>0.1.0</min>\n</package>\n</required>\n</dependencies>\n<phprelease />\n<changelog>\n<release>\n<version>\n<release>0.1.0</release>\n<api>0.1.0</api>\n</version>\n<stability>\n<release>alpha</release>\n<api>beta</api>\n</stability>\n<date>2005-10-18</date>\n<license>BSD license</license>\n<notes>initial release</notes>\n</release>\n</changelog>\n</package>\n\n```", "```php\n$pfm = &PEAR_PackageFileManager2::importOptions('package.xml',\n\n```", "```php\n$pfm = &PEAR_PackageFileManager2::importOptions('package2.xml',\n\n```", "```php\n// create the <contents> tag\n$pfm->generateContents();\n// create package.xml 1.0 to gracefully tell PEAR 1.3.x users they\n// have to upgrade to use this package\n$pfm1 = $pfm->exportCompatiblePackageFile1(array(\n// set a subdirectory everything is installed into\n'baseinstalldir' => 'PEAR/Task/Chiara',\n// location of files to package\n'packagedirectory' => dirname(__FILE__),\n// what method is used to glob files? cvs, svn, perforce\n// and file are options\n'filelistgenerator' => 'file',\n// don't distribute this script\n'ignore' => array('package.php', 'package.xml',\n'package2.xml', 'rolesetup.php'),\n// put the post-installation script in a\n// different location from the task itself\n// make the output human-friendly\n'simpleoutput' => true,\n));\n// display the package.xml by default to allow \"debugging\" by eye,\n// and then create it if explicitly asked to\nif (isset($_GET['make']) || (isset($_SERVER['argv']) &&\n@$_SERVER['argv'][1] == 'make')) {\n$pfm1->writePackageFile();\n$pfm->writePackageFile();\n} else {\n$pfm1->debugPackageFile();\n$pfm->debugPackageFile();\n}\n?>\n\n```", "```php\n$ pear package \n\n```", "```php\n$ pear install Foo-1.2.3.tgz \n\n```", "```php\n$ pear package Z \n\n```", "```php\n$ pear package package-PEAR.xml package2.xml \n\n```", "```php\n$ pear package package2.xml package-PEAR.xml \n\n```"]