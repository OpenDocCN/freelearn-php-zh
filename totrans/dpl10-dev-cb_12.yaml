- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building APIs with Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal 10 comes with several awesome features to help facilitate building out
    RESTful APIs using the core Serialization and JSON:API modules. These enable you
    to build headless and/or decoupled solutions that can still interact with and
    query for data in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data from Drupal using JSON:API ([https://jsonapi.org/](https://jsonapi.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using POST to create data with JSON:API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PATCH to update data with JSON:API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using DELETE to remove data with JSON:API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Views to provide custom data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OAuth methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Serialization module provides a means of serializing data to or deserializing
    from formats such as JSON and XML. The RESTful Web Services module then exposes
    entities and other resource types through web APIs. Operations done over RESTful
    resource endpoints use the same create, edit, delete, and view permissions that
    would be used in a non-API context. The JSON:API module exposes your data entities
    (nodes, taxonomy, media, and users) in JSON representation on API routes. We will
    also cover how to handle custom authentication for your API.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the APIs in this chapter operate over HTTP. An HTTP response code is
    returned, regardless of whether the request was successful or not. If you are
    not familiar with HTTP response codes or just need to brush up on them, you can
    review them here: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).
    You will see plenty of HTTP response codes when working with the APIs in Drupal,
    so it is a good idea to review them. You can find the full code used in this chapter
    on GitHub: [https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp12](https://github.com/PacktPublishing/Drupal-10-Development-Cookbook/tree/main/chp12)'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data from Drupal using JSON:API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With just a few clicks, we can open up and expose data from Drupal to consume
    from external services. This will enable us to ask Drupal for data and return
    it to us in JSON, making it easy to consume.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to enable some core modules. Head to **Admin** | **Extend**
    and enable the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP** **Basic Authentication**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON:API**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RESTful** **Web Services**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serialization**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Enabling the necessary modules in Drupal](img/Figure_12.1_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Enabling the necessary modules in Drupal
  prefs: []
  type: TYPE_NORMAL
- en: The JSON:API module users the Serialization module to handle the normalization
    of a response and denormalization of data from requests. Endpoints support specific
    formats (JSON, XML, and so on), and authentication providers support passing authentication
    in the headers of requests.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that at the time of writing, multilingual support is still being finalized
    under JSON:API. You can track the status of this issue here: [https://www.drupal.org/project/drupal/issues/2794431](https://www.drupal.org/project/drupal/issues/2794431).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have a new area in the **Configuration** section of the Drupal admin
    area called **JSON:API**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – JSON:API adds a new configuration section of the Drupal admin
    area](img/Figure_12.2_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – JSON:API adds a new configuration section of the Drupal admin
    area
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON:API does not provide many settings out of the box beyond two security
    settings. One allows only read endpoints, while the other allows **create, read,
    update, delete** (**CRUD**) operations on endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Configuration options for JSON:API](img/Figure_12.3_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Configuration options for JSON:API
  prefs: []
  type: TYPE_NORMAL
- en: Leave the default as-is for now. Create a new `Basic Page` node and save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go to this URL (replace `localhost` with your local site domain):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Drupal will respond with a JSON:API representation of all `Basic Page` nodes
    in your site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – A sample JSON:API response from Drupal](img/Figure_12.4_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – A sample JSON:API response from Drupal
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to fetch a specific node by ID, you can use the `filter` keyword
    in the request URL as a query parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The format for `filter` is `filter[attribute]`. Following that, we can fetch
    a node with an ID of 1 by requesting this URL in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the same response you got in the first example, but now, the `data`
    array in the response will contain `only` the node matching ID 1\. This works
    for any attribute you want to filter by. If you know an entity’s UUID, you can
    also request it directly by using it as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By passing the UUID as a URL parameter, you would get that specific `Basic
    Page` node type’s node information. Create a few more `Basic Page` nodes using
    the word `Test` in the title. Suppose you wanted to filter by nodes containing
    the word `Test` in the title; you could request this like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Drupal will only return nodes with the word “Test” in the title. Here, we also
    added `&fields[node—page]=title` to the request to make the response easier to
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – A filtered JSON:API response from Drupal](img/Figure_12.5_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – A filtered JSON:API response from Drupal
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use `cURL` instead, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can request this from any HTTP API in any language or command-line tool
    such as `cURL`, so long as your parameters and options are correct. Consult the
    appropriate documentation on using `fetch` ([https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API))
    in JavaScript, for example, to integrate this with a decoupled JavaScript application.
  prefs: []
  type: TYPE_NORMAL
- en: 'curl: (60) SSL certificate problem'
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error about an SSL certificate problem with cURL, it is likely
    your SSL certificate could not be verified. This is common with local self-signed
    certificates. To get around this error in development, you can pass the `--insecure`
    flag with the cURL request mentioned previously. In production, make sure you
    have a valid working SSL certificate – do not use this flag for real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: JSON:API can also include related data in the response by asking for it with
    `include`. If we add `include` to the query parameter plus any relationship name
    under the relationships section of a JSON item, we receive them back with the
    JSON:API response.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want the node author information, for example, you can request it like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive that information in the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – A sample JSON:API response with the author data attached](img/Figure_12.6_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – A sample JSON:API response with the author data attached
  prefs: []
  type: TYPE_NORMAL
- en: Note that to view user data, the requesting user needs the `View user information`
    permission. You will get an **access denied** error otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Any item listed under **relationships** can be requested – for example, author
    data, taxonomy attached to returned entities, media attached to returned entities,
    or other types of related data.
  prefs: []
  type: TYPE_NORMAL
- en: Paginating, filtering, and sorting requests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pagination is done by appending a page query parameter. To limit the request
    to 10 nodes, we must use `append ?page[limit]=10`. To access the next set of results,
    we must also pass `page[offset]=10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of returning the first and second pages of results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Each request contains a link property; this will also contain the next and previous
    links when using a paginated result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering is done by appending a filter query parameter. The following is an
    example of requesting all nodes that have been promoted to the front page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Each filter is defined by a name – in the preceding example, it is promoted.
    The filter then takes `path`, which is the field to filter on. The value and operator
    decide how to filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorting is the simplest operation to perform. Here, a `sort` query parameter
    is added. The field name value is the field to sort by; to sort in descending
    order, you must add a minus symbol in front of the field name. The following examples
    show how to sort by `nid` in ascending and descending order, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Serialization module in Drupal provides the necessary plumbing to normalize
    and denormalize data structures to and from formats such as JSON and XML. When
    requests are made to Drupal, the responsible route gets the resource and normalizes
    it to an array; then, a registered **encoder** (in this case, **JsonEncoder**)
    returns the data in the requested format (JSON, XML, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – A high-level look at how serialization works in Drupal](img/Figure_12.7_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – A high-level look at how serialization works in Drupal
  prefs: []
  type: TYPE_NORMAL
- en: This is the backbone of the normalization and serialization of data in Drupal.
    When you enabled the `JSON:API` module, new routes were registered for resources
    under `/jsonapi/`. These dynamically generated routes automatically encode data
    and return it as JSON. Any time an entity is requested, the serializer and encoders
    are responsible for building the data for the response.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing the JSON:API Extras module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JSON:API Extras module provides a user interface for additional customization.
    The JSON:API Extras module should be added to your Drupal installation like all
    other modules – that is, using Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once the module has been installed in Drupal, you will be able to enable or
    disable endpoints, change resource names, alter resource paths, disable fields,
    provide alias field names, and enhance field outputs of JSON:API routes.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the JSON:API path prefix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The API path prefix can be changed from `jsonapi` to `api` or any other prefix
    using the Extras module.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the administrative toolbar, navigate to **Configuration**. Under the **Web
    services** section, click on **JSON:API Overwrites** to customize the JSON:API
    implementation. The **Settings** tab allows you to modificy the API path prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Using JSON:API Extras to change the JSON path prefix](img/Figure_12.9_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Using JSON:API Extras to change the JSON path prefix
  prefs: []
  type: TYPE_NORMAL
- en: After changing **Path prefix**, clear the cache in Drupal to see the result
    and the new path.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling and enhancing returned entity fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JSON:API Extras module allows you to overwrite endpoints automatically exposed
    by the JSON:API module. This allows you to disable fields from being returned.
    It also allows you to use enhancers to simplify the structure of a field property.
  prefs: []
  type: TYPE_NORMAL
- en: From the administrative toolbar, go to **Configuration**. Under the **Web services**
    section, click on **JSON:API Overwrites** to customize the JSON:API implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable an endpoint, click on **Overwrite** on any endpoint. Check the **Disabled**
    checkbox to turn off that specific endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – You can disable resources with JSON:API Extras so that endpoints
    are not accessible](img/Figure_12.10_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – You can disable resources with JSON:API Extras so that endpoints
    are not accessible
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable, alias, or use an enhancer, click on `POST`/`PATCH` requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – You can change field aliases and disable fields in JSON:API
    endpoints](img/Figure_12.11_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – You can change field aliases and disable fields in JSON:API endpoints
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have disabled the revision fields from appearing in the JSON:API output.
    We can apply enhancers to the created and changed fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – Using enhancers to format data returned in JSON:API](img/Figure_12.12_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – Using enhancers to format data returned in JSON:API
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the created and changed fields will no longer return Unix timestamps,
    but *RFC ISO* *8601*-formatted timestamps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back and viewing our JSON:API route now, we can see that revision fields
    were removed and that the created and changed fields are formatted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12 – A JSON:API response customized by the JSON:API Extras module](img/Figure_12.13_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – A JSON:API response customized by the JSON:API Extras module
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JSON and XML are not the only formats Drupal can return data in as a response.
    There are contributed modules that provide other data formats as well, such as
    PDF, CSV, and XLS (Excel) serialization. Check out the source code of these modules
    if you are curious as to how they work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PDF serialization: [https://www.drupal.org/project/pdf_serialization](https://www.drupal.org/project/pdf_serialization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSV serialization: [https://www.drupal.org/project/csv_serialization](https://www.drupal.org/project/csv_serialization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Excel Serialization serialization: [https://www.drupal.org/project/xls_serialization](https://www.drupal.org/project/xls_serialization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using POST to create data with JSON:API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An API that returns data is great, but to make a more functional decoupled app
    or integrate external services, we need to be able to send data into Drupal as
    well. After reading the following section, you will be able to create entities
    in a Drupal 10 application from remote sources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use the `Article` content type that comes installed in the Drupal
    10 standard profile. If you do not have an `Article` content type, create one
    and add a basic field such as `Body`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to tell Drupal to allow CRUD operations for JSON:API. Head back
    to the JSON:API settings page in the **Configuration** section of the Drupal admin
    and enable **Accept all JSON:API create, read, update, and** **delete operations.**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Enabling JSON:API to allow more actions](img/Figure_12.14_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Enabling JSON:API to allow more actions
  prefs: []
  type: TYPE_NORMAL
- en: If you do not enable this, you cannot do anything other than read data from
    a JSON:API endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a user account that has only the necessary permissions to create
    an `Article` node. This is the account we will use in our requests to create new
    nodes. You should not use an administrator account in your APIs for security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: With each request to create an API in Drupal, we need to authenticate before
    our request will be accepted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal (command line). Unlike the previous section, we cannot perform
    these requests directly in the browser. For this, we are going to use `curl`,
    which comes pre-installed on many operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Again, remember to replace `localhost` with the correct hostname for your development
    site. We created a user named `chapter12` with a password of `chapter12` and set
    them as the `Content Editor` role (included with the Standard install profile),
    which has basic permissions to create and edit nodes. This user is passed in the
    `--``user` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response will return either a successful or unsuccessful authorization
    response. If it succeeded, you will see a large JSON response reflecting the new
    node that was created, and you will see the new node in Drupal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – The node created by a POST request](img/Figure_12.15_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – The node created by a POST request
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see that it was correctly added to the body field, along with the
    text format we specified in the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Verifying that the content we passed in a POST request was
    created correctly](img/Figure_12.16_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Verifying that the content we passed in a POST request was created
    correctly
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look back at our JSON:API route in the browser, we will see this new
    node there as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – Accessing the newly created node with an HTTP request](img/Figure_12.17_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Accessing the newly created node with an HTTP request
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this instance, the JSON:API module in this instance is not doing anything
    extra concerning authentication or entity access. The request is processed by
    Drupal no differently than if the `chapter12` user came to the site, logged in,
    and created the node in the admin interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of request is a `POST` request. This is different from the `GET` request
    in the first section for reading data. A `POST` is required to send data to the
    server. You can read more about `POST` request(s) on MDN: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST).'
  prefs: []
  type: TYPE_NORMAL
- en: This is a powerful abstraction that can help you build out APIs and decoupled
    applications as it requires valid user authentication, but it cannot perform any
    actions outside of the scope of what that user/user role is permitted to do. This
    means that if we were to remove the permission to `Create article nodes` for the
    Content Editor role, this `POST` request would fail with a `403` Forbidden response.
    Therefore, it is a good idea to create an `API User` role with limited permissions
    in the real world that you can toggle on or off at a moment’s notice.
  prefs: []
  type: TYPE_NORMAL
- en: '`Never` use the superuser (`user 1`) or user with the administrator role for
    API requests. If the credentials leak, a bad actor could perform any request they
    desire. After reading this chapter, it would be a good idea to review the security
    considerations when using APIs in Drupal on Drupal.org: [https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/security-considerations](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/security-considerations).'
  prefs: []
  type: TYPE_NORMAL
- en: In the `curl` request, when we pass the `--user` parameter, it automatically
    creates the Authorization header for the request. This header passes along a basic
    authentication, which the Basic Auth module in Drupal intercepts and uses to authenticate
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can get the basic auth token manually with the command line;
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns `Y2hhcHRlcjEyOmNoYXB0ZXIxMg==`. Then, you can pass that in a header
    instead of using the `–user` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While powerful, **cURL** is a low-level tool that can be difficult to use from
    the command line for longer, larger requests. You can install Google’s Postman
    tool to make working with APIs easier. You can download it from [https://www.postman.com/](https://www.postman.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Using PATCH to update data with JSON:API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to create some data in Drupal, let’s learn how to update
    existing data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our request will look similar to the `POST` request from the previous sections
    but with a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: First, to update an entity in Drupal, you need to pass the entity UUID in the
    request payload for it to work. This is different than the numeric entity ID.
    You can get the UUID from fetching data from JSON:API, as we saw in the *Fetching
    data from Drupal using JSON:API* section. For the node that we created in our
    `POST` request, the UUID value is `1ddf244d-e8e6-40f5-be48-23bc8fa0fa3e`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and change the title and body of the article node we created
    previously. This time, we must pass the UUID in the URL as well as the request
    body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `id` property is outside of the `attributes` data. If you try
    to pass it under `attributes`, you will get an `HTTP 422 Unprocessable Content`
    error. If you pass invalid attributes, you will receive a `500` error. What you
    are updating must match the data model to be successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'After submitting this request, we get the updated node back in JSON format
    on the command line, and we will see in Drupal that our updates were applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Reviewing a node that was updated using a PATCH request](img/Figure_12.18_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Reviewing a node that was updated using a PATCH request
  prefs: []
  type: TYPE_NORMAL
- en: What if we wanted to attribute the node to another user? It is a good idea to
    use an account solely to handle API actions, but we certainly don’t want all content
    attributed to that user.
  prefs: []
  type: TYPE_NORMAL
- en: For example, assume you have an external publishing platform where users are
    submitting content. When content is published, that system makes a `POST` request
    to Drupal so that the content is created. Let’s attribute that content to a user
    in Drupal named `Johnny Editor` with a UUID of `c1ce9fe6-4eea-4f69-92c2-883415019002`.
    Like nodes, you can view user entity data at `/jsonapi/user/user`.
  prefs: []
  type: TYPE_NORMAL
- en: We can fix the existing content with a `PATCH` request and change the author
    from the `chapter12` user to the `Johnny Editor` user by passing `relationships`
    data in the request body. Before we can do that, though, our API user role needs
    `PATCH` the data. Go ahead and enable that permission.
  prefs: []
  type: TYPE_NORMAL
- en: This is because, in this example, we are requesting to change ownership of a
    node from one user to another, and this is explicitly checked by Drupal before
    the action is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Review your permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, once you’ve read this chapter, it is a good idea to review the security
    considerations when using APIs in Drupal on Drupal.org: [https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/security-considerations](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/security-considerations).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can make our new `PATCH` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we receive a successful response from Drupal, along with the JSON representation
    of the node. We can see that the content was updated and that the node owner was
    re-assigned to **Johnny Editor**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Re-assigning node ownership using a PATCH request](img/Figure_12.19_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Re-assigning node ownership using a PATCH request
  prefs: []
  type: TYPE_NORMAL
- en: You can use relationships to add any entity reference you want to add to entities.
    Using this same formula, we can add some taxonomy to this article. Let’s assume
    there are two terms in the `taxonomy` tag called `Technology` and `News`. We want
    to tag them in this article.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like nodes and users, you can see taxonomy term data by navigating to `/jsonapi/taxonomy_term/tags`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.19 – Reading taxonomy terms using its JSON:API endpoint](img/Figure_12.20_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Reading taxonomy terms using its JSON:API endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the UUIDs here, we can pass both of them in the `relationships` part
    of the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When submitted, we will see that the article node was successfully updated
    with the two taxonomy terms specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.20 – Taxonomy tags added to a node via a PATCH request](img/Figure_12.21_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – Taxonomy tags added to a node via a PATCH request
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we were to fetch the data from Drupal as we did in the first section,
    we will see the author and taxonomy relationships in the node data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Taxonomy relationships in the response for a node](img/Figure_12.22_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Taxonomy relationships in the response for a node
  prefs: []
  type: TYPE_NORMAL
- en: 'When you combine that this with `include` in the URL query string, you will
    get the author data, as well as the taxonomy data: `include=uid,field_tags`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to remove referenced items, you can submit a `PATCH` request without
    that item. If we wanted to remove one of the terms, we can just pass the term
    we want to keep:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To completely empty the `tags` field, pass an empty value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that the terms have been removed from the article node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22 – Passing an empty value in a PATCH request will remove relationships](img/Figure_12.23_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Passing an empty value in a PATCH request will remove relationships
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like `POST`, `PATCH` provides a powerful way to update entity data in Drupal
    from a decoupled application or remote system. When you understand your entity
    data and schema, you can create and manipulate it in any way that you want via
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: Also like `POST`, `PATCH` requests must abide by the permission system in Drupal.
    The same rules are respected as if this were a real user logging in to Drupal
    to update content.
  prefs: []
  type: TYPE_NORMAL
- en: With these two methods, you can create a decoupled site that can collect data
    from users and post it back to Drupal, such as a kiosk, survey, or commenting
    system. The possibilities are endless.
  prefs: []
  type: TYPE_NORMAL
- en: Using DELETE to remove data with JSON:API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we have come to the final action of the CRUD acronym: the `delete`
    method. This method removes requested data in Drupal, provided you have the UUID.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like `PATCH`, issuing `DELETE` requires the appropriate permission in Drupal.
    In this case, the role assigned to our API user needs to be allowed to delete
    article nodes. Head back to the permissions section of the Drupal admin area and
    grant **Article: Delete any content** to the role.'
  prefs: []
  type: TYPE_NORMAL
- en: We need to assign `delete any` instead of `delete own` since we assigned the
    node ownership to another user.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the `DELETE` request needs is the UUID of the entity we wish to remove.
    Using the node we created, the UUID of it is `1ddf244d-e8e6-40f5-be48-23bc8fa0fa3e`.
    The `DELETE` request looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When you submit it this time, there will be no response output on the command
    line. When successful, the response will be an `HTTP 204` empty response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JSON:API route now shows no nodes, which means `DELETE` was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – After using a DELETE request, the node was successfully deleted](img/Figure_12.24_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – After using a DELETE request, the node was successfully deleted
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like `POST` and `PATCH`, `DELETE` performs actions on behalf of the specified
    user. Since this user has permission to `delete any` article content, the request
    is permitted and Drupal removes the article node from the website.
  prefs: []
  type: TYPE_NORMAL
- en: For some use cases, `DELETE` may be too destructive of an action to either have
    an API perform or permission to grant. In this case, you could use `PATCH` and
    change the entity status to `unpublished` or `archived` (if using the `Content`
    `Moderation` module).
  prefs: []
  type: TYPE_NORMAL
- en: Using Views to provide custom data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides Views plugins that allow you to expose
    data over Views for your RESTful API. This allows you to create a view that has
    a path and outputs data using a serializer plugin. You can use this to output
    entities in JSON or XML and it can be sent with appropriate headers.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a view that outputs the users of the Drupal site,
    providing their username, email, and picture if provided.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure you have the following core modules enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to **Structure** and then **Views**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add new view**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the view `API Users` and have it show `/api/users`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Setting the path for Views for a custom REST endpoint](img/Figure_12.25_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Setting the path for Views for a custom REST endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Save the view and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the view created, make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the format of the row plugin from **Entity** to **Fields** so that we
    can control the specific output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the **Settings** section of format, enable **json** under **Accepted**
    **request formats**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that your view has **Name**, **Email**, and **Picture** as user entity
    fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change the **User: Name** field to the **Plain text** formatter. Do not link
    it to the user to ensure the response does not contain any HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change the **User: Picture** field so that it uses the URL to image formatter
    so that only a URL is returned and not HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the updated View.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access your view by visiting `/api/users`. You will receive a JSON response
    containing the user information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your browser, you will see the output of the users in your system formatted
    in the way we set it in the View:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides a display, row, and format plugin that
    allows you to export content entities in a serialized format. The REST Export
    display plugin is what allows you to specify a path to access the RESTful endpoint,
    and properly assigns the `Content-Type` header for the requested format.
  prefs: []
  type: TYPE_NORMAL
- en: The Serializer style is provided as the only supported style plugin for the
    REST Export display. This style plugin only supports row plugins that identify
    themselves as data display types. It expects data from the row plugin to be raw
    so that it can be passed to the appropriate serializer.
  prefs: []
  type: TYPE_NORMAL
- en: You then have the option of using the Data entity or Data field row plugins.
    Instead of returning a render array from their render method, they return raw
    data that will be serialized into the proper format. With the row plugins returning
    raw format data and the data then serialized by the style plugin, the display
    plugin will return the response, converted into the proper format via the Serialization
    module, which we saw earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using Views is an excellent way to provide API routes for reading. You get all
    the convenience of using the Views UI that you are used to in Drupal with the
    combined power of JSON or XML serialization. You can create as many of these as
    you need to satisfy different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views allow you to deliver specific RESTful endpoints. With Views, you can add
    displays with custom paths and add fields to them, creating a custom JSON response.
    This makes for a rapid way of developing custom read-only data APIs in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the key name in the JSON output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Data fields row plugin allows you to configure field aliases. When the
    data is returned to the view, it will contain Drupal’s machine names. This means
    that custom fields will look something like `field_my_field`, which may not make
    sense to the consumer. By clicking on **Settings** next to **Fields**, you can
    set aliases in the modal form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25 – You can alias field names in a Views REST display](img/Figure_12.26_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – You can alias field names in a Views REST display
  prefs: []
  type: TYPE_NORMAL
- en: 'When you provide an alias, the fields will match. For example, `user_picture`
    can be changed to `avatar` and the `mail` key can be changed to `email`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Controlling access to RESTful Views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you create a RESTful endpoint with Views, you are not using the same permissions
    created by the RESTful Web Services module. You need to define the route permissions
    within the view, allowing you to specify specific roles or permissions for the
    request.
  prefs: []
  type: TYPE_NORMAL
- en: The default `GET` method provided by the `EntityResource` plugin does not provide
    a way to list entities and allows any entity to be retrieved by an ID. Using Views,
    you can provide a list of entities, limiting them to specific bundles and much
    more.
  prefs: []
  type: TYPE_NORMAL
- en: With Views, you can even provide a new endpoint to retrieve a specific entity.
    Using Contextual filters, you can add route parameters and filters to limit and
    validate entity IDs. For example, you may want to expose the article content over
    the API, but not pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using OAuth methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the RESTful Web Services module, we can define specific supported authentication
    providers for an endpoint. Drupal core provides a cookie provider, which authenticates
    through a valid cookie, such as your regular login experience. Then, there is
    the HTTP Basic Authentication module to support HTTP authentication headers.
  prefs: []
  type: TYPE_NORMAL
- en: Some alternatives provide more robust authentication methods. With cookie-based
    authentication, you need to use CSRF tokens to prevent unrequested page loads
    by an unauthorized party. When you use HTTP authentication, you are sending a
    password for each request in the request header.
  prefs: []
  type: TYPE_NORMAL
- en: A popular, and open, authorization framework is OAuth. OAuth is a proper authentication
    method that uses tokens and not passwords. In this recipe, we will implement the
    `Simple OAuth` module to provide OAuth 2.0 authentication for `GET` and `POST`
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are not familiar with OAuth or OAuth 2.0, it is a standard for authorization.
    The implementation of OAuth revolves around the usage of tokens sent in HTTP headers.
    Refer to the OAuth home page for more information: [http://oauth.net/](http://oauth.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: For the following sections, you will need the contributed **Rest UI** module.
    Rest UI will make it easier for you to see and control your REST-based routes
    in Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go ahead and get the necessary module with Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Enable the **REST UI** module in the admin area under **Extend**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must add the `Simple OAuth` module to our Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to **Configuration** and click on **REST** under **Web Services** to configure
    the available endpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.26 – With the REST UI module, you can manage RESTful endpoints
    in the admin](img/Figure_12.27_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – With the REST UI module, you can manage RESTful endpoints in
    the admin
  prefs: []
  type: TYPE_NORMAL
- en: Now that the endpoint has been enabled, it must be configured. Check the `GET`
    and `POST` requests. Then, check the **JSON** checkbox so that data can be returned
    as JSON. Check the **oauth2** checkbox and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we can configure the `Simple OAuth` module, we have to generate a pair
    of keys to encrypt the `OAuth` tokens. We can do this in one of two ways:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory outside of the webroot, then click **Generate keys**. In
    the dialog that appears, add the full path to this folder on the server and click
    **Generate**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the admin UI does not work, we can use the following two commands to generate
    keys. Place them on the server outside of the webroot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the keys generated, go to the **Configuration** page and then to **Simple
    OAuth**. Enter the paths to the private and public keys that were just generated
    and click on **Save configuration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Managing keys in Simple OAuth in the admin area](img/Figure_12.28_B18548.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – Managing keys in Simple OAuth in the admin area
  prefs: []
  type: TYPE_NORMAL
- en: From the **Simple** **OAuth** **Settings** configuration form, click on **+**
    **Add Client**. Provide a label for the client and select the **Administrator**
    scope. Then, click on **Save** to create the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will generate a token through the `/oauth/` token endpoint. You will
    need the ID from the client you just created. We must pass `grant_type`, `client_id`,
    and the username and password. `grant_type` is the password, whereas `client_id`
    is the ID from the created client. The username and password will be of the account
    you wish to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The response will contain an `access_token` property. This is to be used as
    your token when making API requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Request a node over REST with the **Authorization: Bearer [****token]** header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s it! You can now set authenticated routes using OAuth to various resources
    in Drupal and configure all the different REST endpoints with the methods and
    authentication types they accept.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Simple OAuth` module is built using the `League\OAuth2` PHP library, a
    community standard library for OAuth2 implementation.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical authentication request, there is an authentication manager that
    uses the `authentication_collector` service to collect all the tagged authentication
    provider servers. Based on the provider’s set priority, each service is invoked
    to check whether it applies to the current request. Each applied authentication
    provider then gets invoked to see whether the authentication is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: For the RESTful Web Services module, this process is more explicit. The providers
    identified in the `supported_auth` definition for the endpoint are the only services
    that run through the `applies` and `authenticates` processes.
  prefs: []
  type: TYPE_NORMAL
