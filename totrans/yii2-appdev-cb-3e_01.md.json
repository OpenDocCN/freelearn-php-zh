["```php\nsudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n\n```", "```php\ncomposer\n\n```", "```php\nphp composer.phar\n\n```", "```php\n   ______\n  / ____/___  ____ ___  ____  ____  ________  _____\n / /   / __ \\/ __ '__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                    /_/\nComposer version 1.2.0 2016-07-18 11:27:19\n```", "```php\n    composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n\n    ```", "```php\n    composer create-project --prefer-dist yiisoft/yii2-app-basic basic\n\n    ```", "```php\n    cd basic\n    php requirements.php\n\n    ```", "```php\n    php yii serve\n\n    ```", "```php\n    composer global require \"fxp/composer-asset-plugin:^1.2.0\"\n\n    ```", "```php\n    composer create-project --prefer-dist yiisoft/yii2-app-advanced advanced\n\n    ```", "```php\n    cd advanced\n    php init\n\n    ```", "```php\n    php requirements.php\n\n    ```", "```php\n    php yii migrate\n\n    ```", "```php\n    php yii serve --docroot=@frontend/web --port=8080\n\n    ```", "```php\n    php yii serve --docroot=@backend/web --port=8090\n\n    ```", "```php\n$service = new MyGiantSuperService();\n```", "```php\n$service = new MyService(\n    new Repository(new PDO('dsn', 'username', 'password')),\n    new Session(),\n    new Mailer(new SmtpMailerTransport('username', 'password', host')),\n    new Cache(new FileSystem('/tmp/cache')),\n);\n```", "```php\n$service = Yii::$container->get('app\\services\\MyService')\n```", "```php\n$service = Yii::createObject('app\\services\\MyService')\n```", "```php\nuse app\\services\\MyService;\nclass OtherService\n{\n    public function __construct(MyService $myService) { … }\n}\n```", "```php\n$otherService = Yii::createObject('app\\services\\OtherService')\n```", "```php\n    <?php\n    namespace app\\cart;\n\n    use app\\cart\\storage\\StorageInterface;\n\n    class ShoppingCart\n    {\n        private $storage;\n\n        private $_items = [];\n\n        public function __construct(StorageInterface $storage)\n        {\n            $this->storage = $storage;\n        }\n\n        public function add($id, $amount)\n        {\n            $this->loadItems();\n            if (array_key_exists($id, $this->_items)) {\n                $this->_items[$id]['amount'] += $amount;\n            } else {\n                $this->_items[$id] = [\n                    'id' => $id,\n                    'amount' => $amount,\n                ];\n            }\n            $this->saveItems();\n        }\n\n        public function remove($id)\n        {\n            $this->loadItems();\n            $this->_items = array_diff_key($this->_items, [$id => []]);\n            $this->saveItems();\n        }\n\n        public function clear()\n        {\n            $this->_items = [];\n            $this->saveItems();\n        }\n\n        public function getItems()\n        {\n            $this->loadItems();\n            return $this->_items;\n        }\n\n        private function loadItems()\n        {\n            $this->_items = $this->storage->load();\n        }\n\n        private function saveItems()\n        {\n            $this->storage->save($this->_items);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\cart\\storage;\n\n    interface StorageInterface\n    {\n        /**\n        * @return array of cart items\n        */\n        public function load();\n\n        /**\n        * @param array $items from cart\n        */\n        public function save(array $items);\n    }\n    ```", "```php\n    <?php\n    namespace app\\cart\\storage;\n\n    use yii\\web\\Session;\n\n    class SessionStorage implements StorageInterface\n    {\n        private $session;\n        private $key;\n\n        public function __construct(Session $session, $key)\n        {\n            $this->key = $key;\n            $this->session = $session;\n        }\n\n        public function load()\n        {\n            return $this->session->get($this->key, []);\n        }\n\n        public function save(array $items)\n        {\n            $this->session->set($this->key, $items);\n        }\n    }\n    ```", "```php\n    <?php\n    use app\\cart\\storage\\SessionStorage;\n\n    Yii::$container->setSingleton('app\\cart\\ShoppingCart');\n\n    Yii::$container->set('app\\cart\\storage\\StorageInterface', function() {\n        return new SessionStorage(Yii::$app->session, 'primary-cart');\n    });\n\n    $params = require(__DIR__ . '/params.php');\n\n    //…\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use app\\cart\\ShoppingCart;\n    use app\\models\\CartAddForm;\n    use Yii;\n    use yii\\data\\ArrayDataProvider;\n    use yii\\filters\\VerbFilter;\n    use yii\\web\\Controller;\n\n    class CartController extends Controller\n    {\n        private $cart;\n\n        public function __construct($id, $module, ShoppingCart $cart, $config = [])\n        {\n            $this->cart = $cart;\n            parent::__construct($id, $module, $config);\n        }\n\n        public function behaviors()\n        {\n            return [\n                'verbs' => [\n                    'class' => VerbFilter::className(),\n                    'actions' => [\n                        'delete' => ['post'],\n                    ],\n                ],\n            ];\n        }\n\n        public function actionIndex()\n        {\n            $dataProvider = new ArrayDataProvider([\n                'allModels' => $this->cart->getItems(),\n            ]);\n\n            return $this->render('index', [\n                'dataProvider' => $dataProvider,\n            ]);\n        }\n\n        public function actionAdd()\n        {\n            $form = new CartAddForm();\n\n            if ($form->load(Yii::$app->request->post()) && $form->validate()) {\n                $this->cart->add($form->productId, $form->amount);\n                return $this->redirect(['index']);\n            }\n\n            return $this->render('add', [\n                'model' => $form,\n            ]);\n        }\n\n        public function actionDelete($id)\n        {\n            $this->cart->remove($id);\n\n            return $this->redirect(['index']);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n\n    use yii\\base\\Model;\n\n    class CartAddForm extends Model\n    {\n        public $productId;\n        public $amount;\n\n        public function rules()\n        {\n            return [\n                [['productId', 'amount'], 'required'],\n                [['amount'], 'integer', 'min' => 1],\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\grid\\ActionColumn;\n    use yii\\grid\\GridView;\n    use yii\\grid\\SerialColumn;\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $dataProvider yii\\data\\ArrayDataProvider */\n\n    $this->title = 'Cart';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"cart-index\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <p><?= Html::a('Add Item', ['add'], ['class' => 'btn btn-success']) ?></p>\n\n        <?= GridView::widget([\n            'dataProvider' => $dataProvider,\n            'columns' => [\n                ['class' => SerialColumn::className()],\n\n                'id:text:Product ID',\n                'amount:text:Amount',\n\n                [\n                    'class' => ActionColumn::className(),\n                    'template' => '{delete}',\n                ]\n            ],\n        ]) ?>\n    </div>\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\bootstrap\\ActiveForm;\n\n    /* @var $this yii\\web\\View */\n    /* @var $form yii\\bootstrap\\ActiveForm */\n    /* @var $model app\\models\\CartAddForm */\n\n    $this->title = 'Add item';\n    $this->params['breadcrumbs'][] = ['label' => 'Cart', 'url' => ['index']];\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"cart-add\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <?php $form = ActiveForm::begin(['id' => 'contact-form']); ?>\n            <?= $form->field($model, 'productId') ?>\n            <?= $form->field($model, 'amount') ?>\n            <div class=\"form-group\">\n                <?= Html::submitButton('Add', ['class' => 'btn btn-primary']) ?>\n            </div>\n        <?php ActiveForm::end(); ?>\n    </div>\n    ```", "```php\n    ['label' => 'Home', 'url' => ['/site/index']],\n    ['label' => 'Cart', 'url' => ['/cart/index']],\n    ['label' => 'About', 'url' => ['/site/about']],\n    // …\n    ```", "```php\nclass ShoppingCart\n{\n    public function __construct(StorageInterface $storage) { … }\n}\n\ninterface StorageInterface\n{\n   public function load();\n   public function save(array $items);\n}\n```", "```php\nclass SessionStorage implements StorageInterface\n{\n    public function __construct(Session $session, $key) { … }\n}\n```", "```php\n$storage = new SessionStorage(Yii::$app->session, 'primary-cart');\n$cart = new ShoppingCart($storage)\n```", "```php\nclass A {\n     public function __construct(B $b, C $c) { … }\n}\n\nclass B {\n    ...\n}\n\nclass C {\n    public function __construct(D $d) { … }\n}\n\nclass D {\n    ...\n}\n```", "```php\n$a = Yii::$container->get('app\\services\\A')\n// or\n$a = Yii::createObject('app\\services\\A')\n```", "```php\nYii::$container->setSingleton('app\\cart\\ShoppingCart');\n```", "```php\nYii::$container->set('app\\cart\\storage\\StorageInterface', 'app\\cart\\storage\\CustomStorage',);\n```", "```php\nclass SessionStorage implements StorageInterface\n{\n    public function __construct(Session $session, $key) { … }\n}\n```", "```php\nYii::$container->set('app\\cart\\storage\\StorageInterface', function() {\n    return new SessionStorage(Yii::$app->session, 'primary-cart');\n});\n```", "```php\n$cart = Yii::createObject('app\\cart\\ShoppingCart')\n```", "```php\nclass CartController extends Controller\n{\n    private $cart;\n\n    public function __construct($id, $module, ShoppingCart $cart, $config = [])\n    {\n        $this->cart = $cart;\n        parent::__construct($id, $module, $config);\n    }\n\n    // ...\n}\n```", "```php\npublic function actionDelete($id)\n{\n    $this->cart->remove($id);\n    return $this->redirect(['index']);\n}\n```", "```php\n    <?php\n    namespace app\\components;\n\n    use Yii;\n    use yii\\base\\Component;\n\n    class ShoppingCart extends Component\n    {\n        public $sessionKey = 'cart';\n\n        private $_items = [];\n\n        public function add($id, $amount)\n        {\n            $this->loadItems();\n            if (array_key_exists($id, $this->_items)) {\n                $this->_items[$id]['amount'] += $amount;\n            } else {\n                $this->_items[$id] = [\n                    'id' => $id,\n                    'amount' => $amount,\n                ];\n            }\n           $this->saveItems();\n        }\n\n        public function remove($id)\n        {\n            $this->loadItems();\n            $this->_items = array_diff_key($this->_items, [$id => []]);\n            $this->saveItems();\n        }\n\n        public function clear()\n        {\n            $this->_items = [];\n            $this->saveItems();\n        }\n\n        public function getItems()\n        {\n            $this->loadItems();\n            return $this->_items;\n        }\n\n        private function loadItems()\n        {\n            $this->_items = Yii::$app->session->get($this->sessionKey, []);\n        }\n\n        private function saveItems()\n        {\n            Yii::$app->session->set($this->sessionKey, $this->_items);\n        }\n    }\n    ```", "```php\n    'components' => [\n        …\n        'cart => [\n            'class' => 'app\\components\\ShoppingCart',\n            'sessionKey' => 'primary-cart',\n        ],\n    ]\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use app\\models\\CartAddForm;\n    use Yii;\n    use yii\\data\\ArrayDataProvider;\n    use yii\\filters\\VerbFilter;\n    use yii\\web\\Controller;\n\n    class CartController extends Controller\n    {\n        public function behaviors()\n        {\n            return [\n                'verbs' => [\n                    'class' => VerbFilter::className(),\n                    'actions' => [\n                        'delete' => ['post'],\n                    ],\n                ],\n            ];\n        }\n\n        public function actionIndex()\n        {\n            $dataProvider = new ArrayDataProvider([\n                'allModels' => Yii::$app->cart->getItems(),\n            ]);\n\n            return $this->render('index', [\n                'dataProvider' => $dataProvider,\n            ]);\n        }\n\n        public function actionAdd()\n        {\n            $form = new CartAddForm();\n\n            if ($form->load(Yii::$app->request->post()) && $form->validate()) {\n                Yii::$app->cart->add($form->productId, $form->amount);\n                return $this->redirect(['index']);\n            }\n\n            return $this->render('add', [\n                'model' => $form,\n            ]);\n        }\n\n        public function actionDelete($id)\n        {\n            Yii::$app->cart->remove($id);\n\n            return $this->redirect(['index']);\n        }\n    }\n    ```", "```php\n    <?php\n    namespace app\\models;\n\n    use yii\\base\\Model;\n\n    class CartAddForm extends Model\n    {\n        public $productId;\n        public $amount;\n\n        public function rules()\n        {\n            return [\n                [['productId', 'amount'], 'required'],\n                [['amount'], 'integer', 'min' => 1],\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    use yii\\grid\\ActionColumn;\n    use yii\\grid\\GridView;\n    use yii\\grid\\SerialColumn;\n    use yii\\helpers\\Html;\n\n    /* @var $this yii\\web\\View */\n    /* @var $dataProvider yii\\data\\ArrayDataProvider */\n\n    $this->title = 'Cart';\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-contact\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <p><?= Html::a('Add Item', ['add'], ['class' => 'btn btn-success']) ?></p>\n\n        <?= GridView::widget([\n            'dataProvider' => $dataProvider,\n            'columns' => [\n                ['class' => SerialColumn::className()],\n\n                'id:text:Product ID',\n                'amount:text:Amount',\n\n                [\n                   'class' => ActionColumn::className(),\n                   'template' => '{delete}',\n                ]\n            ],\n        ]) ?>\n    </div>\n    ```", "```php\n    <?php\n    use yii\\helpers\\Html;\n    use yii\\bootstrap\\ActiveForm;\n\n    /* @var $this yii\\web\\View */\n    /* @var $form yii\\bootstrap\\ActiveForm */\n    /* @var $model app\\models\\CartAddForm */\n\n    $this->title = 'Add item';\n    $this->params['breadcrumbs'][] = ['label' => 'Cart', 'url' => ['index']];\n    $this->params['breadcrumbs'][] = $this->title;\n    ?>\n    <div class=\"site-contact\">\n        <h1><?= Html::encode($this->title) ?></h1>\n\n        <?php $form = ActiveForm::begin(['id' => 'contact-form']); ?>\n            <?= $form->field($model, 'productId') ?>\n            <?= $form->field($model, 'amount') ?>\n            <div class=\"form-group\">\n                <?= Html::submitButton('Add', ['class' => 'btn btn-primary']) ?>\n            </div>\n        <?php ActiveForm::end(); ?>\n    </div>\n    ```", "```php\n    ['label' => 'Home', 'url' => ['/site/index']],\n    ['label' => 'Cart', 'url' => ['/cart/index']],\n    ['label' => 'About', 'url' => ['/site/about']],\n    // …\n    ```", "```php\n<?php\nnamespace app\\components;\nuse yii\\base\\Component;\n\nclass ShoppingCart extends Component\n{\n    public $sessionKey = 'cart';\n\n    // …\n}\n```", "```php\n'components' => [\n    …\n    'cart => [\n        'class' => 'app\\components\\ShoppingCart',\n        'sessionKey' => 'primary-cart',\n    ],\n]\n```", "```php\n$cart = Yii::$app->cart;\n$cart = Yii::$app->get('cart');\n```", "```php\nYii::$app->cart\n```", "```php\nnamespace yii\\di;\n\nclass ServiceLocator extends Component\n{\n    private $_components = [];\n    private $_definitions = [];\n\n    public function __get($name)\n    {\n        if ($this->has($name)) {\n            return $this->get($name);\n        } else {\n            return parent::__get($name);\n        }\n    }\n    // …\n}\n```", "```php\nYii::$app->get('cart);\n```", "```php\n$cart1 = Yii::$app->cart;\n$cart2 = Yii::$app->cart;\nvar_dump($cart1 === $cart2); // bool(true)\n```", "```php\npublic function rules()\n{\n    return [\n        [['first_name', 'last_name'], 'required'],\n        [['last_update'], 'safe'],\n        [['first_name', 'last_name'], 'string', 'max' => 45],\n    ];\n}\n```", "```php\npublic function getFilmActors()\n{\n    return $this->hasMany(FilmActor::className(), ['actor_id' => 'actor_id']);\n}\n\npublic function getFilms()\n{\n    return $this->hasMany(Film::className(), ['film_id' => 'film_id'])->viaTable('film_actor', ['actor_id' => 'actor_id']);\n}\n```", "```php\nreturn [\n    …\n    'components' => [\n        'db' => [\n            'class' => 'system.db.CDbConnection',\n            'dsn' => 'mysql:host=localhost;dbname=database_name',\n            'username' => 'root',\n            'password' => '',\n            'charset' => 'utf8',\n        ],\n        …\n    ],\n    …\n];\n```", "```php\nreturn [\n    …\n    'components' => [\n        'db' => [\n            'class' => app\\components\\MyConnection',\n            …\n        ],\n        …\n    ],\n     …\n);\n```", "```php\n    CREATE TABLE 'article' (\n        'id' int(11) NOT NULL AUTO_INCREMENT,\n        'name' varchar(255) DEFAULT NULL,\n        'description' text,\n        PRIMARY KEY ('id')\n    ) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;\n    ```", "```php\n    public function actionTest()\n    {\n        $article = new Article();\n        $article->name = 'Valentine\\'s Day\\'s coming? Aw crap! I forgot to get a girlfriend again!';\n        $article->description = 'Bender is angry at Fry for dating a robot. Stay away from our women.\n        You've got metal fever, boy. Metal fever';\n\n        // $event is an object of yii\\base\\Event or a child class\n        $article->on(ActiveRecord::EVENT_AFTER_INSERT, function($event) {\n            $followers = ['john2@teleworm.us', 'shivawhite@cuvox.de', 'kate@dayrep.com' ];\n            foreach($followers as $follower) {\n                Yii::$app->mailer->compose()\n                    ->setFrom('techblog@teleworm.us')\n                    ->setTo($follower)\n                    ->setSubject($event->sender->name)\n                    ->setTextBody($event->sender->description)\n                    ->send();\n            }\n            echo 'Emails has been sent';\n        });\n\n        if (!$article->save()) {\n            echo VarDumper::dumpAsString($article->getErrors());\n        };\n    }\n    ```", "```php\n    'mailer' => [\n        'class' => 'yii\\swiftmailer\\Mailer',\n        'useFileTransport' => false,\n    ],\n    ```", "```php\npublic function actionTestNew()\n{\n    $article = new Article();\n    $article->name = 'Valentine\\'s Day\\'s coming? Aw crap! I forgot to get a girlfriend again!';\n    $article->description = 'Bender is angry at Fry for dating a robot. Stay away from our women.\n    You've got metal fever, boy. Metal fever';\n\n    // $event is an object of yii\\base\\Event or a child class\n    $article->on(Article::EVENT_OUR_CUSTOM_EVENT, function($event) {\n        $followers = ['john2@teleworm.us', 'shivawhite@cuvox.de', 'kate@dayrep.com' ];\n        foreach($followers as $follower) {\n            Yii::$app->mailer->compose()\n                ->setFrom('techblog@teleworm.us')\n                ->setTo($follower)\n                ->setSubject($event->sender->name)\n                ->setTextBody($event->sender->description)\n                ->send();\n        }\n        echo 'Emails have been sent';\n    });\n\n    if ($article->save()) {\n        $article->trigger(Article::EVENT_OUR_CUSTOM_EVENT);\n    }\n}\n```", "```php\nclass Article extends \\yii\\db\\ActiveRecord\n{\n    CONST EVENT_OUR_CUSTOM_EVENT = 'eventOurCustomEvent';\n…\n}\n```", "```php\n    composer require ramsey/uuid\n\n    ```", "```php\n    <?php\n    namespace app\\commands;\n\n    use Ramsey\\Uuid\\Uuid;\n    use yii\\console\\Controller;\n\n    class UuidController extends Controller\n    {\n        public function actionGenerate()\n        {\n            $this->stdout(Uuid::uuid4()->toString() . PHP_EOL);\n            $this->stdout(Uuid::uuid4()->toString() . PHP_EOL);\n            $this->stdout(Uuid::uuid4()->toString() . PHP_EOL);\n            $this->stdout(Uuid::uuid4()->toString() . PHP_EOL);\n            $this->stdout(Uuid::uuid4()->toString() . PHP_EOL);\n        }\n    }\n    ```", "```php\n    ./yii uuid/generate\n    ```", "```php\n    25841e6c-6060-4a81-8368-4d99aa3617dd\n    fcac910a-a9dc-4760-8528-491c17591a26\n    4d745da3-0a6c-47df-aee7-993a42ed915c\n    0f3e6da5-88f1-4385-9334-b47d1801ca0f\n    21a28940-c749-430d-908e-1893c52f1fe0\n    ```", "```php\n    <?php\n    namespace awesome\\namespaced;\n\n    class Library\n    {\n        public function method()\n        {\n            return 'I am an awesome library with namespace.';\n        }\n    }\n    ```", "```php\n    <?php\n    class OldLibrary\n    {\n        function method()\n        {\n            return 'I am an old library without namespace.';\n        }\n    }\n    ```", "```php\n    <?php\n    function simpleFunction()\n    {\n        return 'I am a simple function.';\n    }\n    ```", "```php\n    $config = [\n        'id' => 'basic',\n        'basePath' => dirname(__DIR__),\n        'bootstrap' => ['log'],\n        'aliases' => [\n            '@awesome' => '@app/awesome',\n        ],\n        'components' => [\n            // …\n        ],\n        'params' => // …\n    ];\n    ```", "```php\n    Yii::setAlias('@awesome', '@app/awesome');\n    ```", "```php\n    Yii::$classMap['OldLibrary'] = '@old/OldLibrary.php';\n    ```", "```php\n    \"require-dev\": {\n        ...\n    },\n    \"autoload\": {\n        \"files\": [\"old/functions.php\"]\n    },\n    \"config\": {\n        ...\n    },\n    ```", "```php\n    composer update\n\n    ```", "```php\n    <?php\n    namespace app\\controllers;\n\n    use yii\\base\\Controller;\n\n    class LibraryController extends Controller\n    {\n        public function actionIndex()\n        {\n            $awesome = new \\awesome\\namespaced\\Library();\n            echo '<pre>' . $awesome->method() . '</pre>';\n\n            $old = new \\OldLibrary();\n            echo '<pre>' . $old->method() . '</pre>';\n\n            echo '<pre>' . simpleFunction() . '</pre>';\n        }\n    }\n    ```", "```php\n{\n    ...\n    \"extra\": {\n        \"asset-installer-paths\": {\n            \"npm-asset-library\": \"vendor/npm\",\n            \"bower-asset-library\": \"vendor/bower\"\n        }\n    }\n}\n```", "```php\ncomposer require yiisoft/yii2\n\n```", "```php\nrequire(__DIR__ . '/../vendor/autoload.php');\nrequire(__DIR__ . '/../vendor/yiisoft/yii2/Yii.php');\n$config = require(__DIR__ . '/../config/yii/web.php');\nnew yii\\web\\Application($config);\n```", "```php\n\"autoload\": {\n    \"psr-0\": { \"\": \"old/\" },\n    \"psr-4\": {\"awesome\\\\\": \"awesome/\"},\n    \"files\": [\"old/functions.php\"]\n}\n```", "```php\ncomposer update\n\n```"]