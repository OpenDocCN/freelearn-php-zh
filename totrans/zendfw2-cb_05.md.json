["```php\n<?php\n\nreturn array(\n\n  // Set up the service manager\n  'service_manager' => array(\n\n    // Initiate the connection at the start of the \n    // application\n    'factories' => array(\n\n      // Use the service factory to start up our db \n      // adapter\n      'Zend\\Db\\Adapter\\Adapter' =>\n      'Zend\\Db\\Adapter\\AdapterServiceFactory',\n    ),\n\n    'aliases' => array(\n      // Use this db alias in the controllers to get the \n      // initialized connection. The value of the db key refers to \n      // the factories key with the same name.\n      'db' => 'Zend\\Db\\Adapter\\Adapter',\n    ),\n  ),\n  'db' => array(\n    // We want to use the PDO to connect to the database\n    'driver' => 'pdo',\n\n    // DSN, or data source name is a connection url that \n    // shows the driver (in this case the PDO) where to \n    // connect to. The first bit is the driver to use, \n    // then follows the database name and the host. More    \n    // information on the dsn options can be found here:\n    // http://php.net/manual/en/pdo.construct.php\n    'dsn' => 'mysql:dbname=some_db_name;host=localhost',\n\n    // Username and password (or at the very least the \n    // password) should NOT be in the global.php. This \n    // file usually will be committed to a version \n    // control, which means your password will be \n    // publicly available.\n    'username'  => 'aGreatUser',\n    'password'  => 'somePassword',\n  ),\n);\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass SomeController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Get the db adapter through our service manager\n    $db = $this->getServiceLocator()->get('db');\n\n    // Now we can execute queries\n    $query = $db->query('SELECT * FROM table');\n  }\n}\n```", "```php\n<?php\nreturn array(\n  'db' => array(\n    'adapters' => array(\n      // The first (default) database connection\n      'db_one' => array(\n        'driver' => 'pdo',\n        'dsn' => 'mysql:dbname=db_1;host=localhost',\n        'username'  => 'someUser',\n        'password'  => 'aGreatPassword',\n      ),\n\n      // Now the second database connection\n      'db_two' => array(\n        'driver' => 'pdo',\n        'dsn' => 'mysql:dbname=db_2;host=localhost',\n        'username'  => 'someOtherUser',\n        'password'  => 'anotherGreatPassword',\n      ),\n    ),\n  ),\n  'service_manager' => array(\n    // Let's make sure our adapters get instantiated\n    'abstract_factories' => array(      \n      'Zend\\Db\\Adapter\\AdapterAbstractServiceFactory',\n    ),\n  ),\n);\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass SomeController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Get the first db adapter\n    $dbOne = $this->getServiceLocator()->get('db_one'); \n\n    // Get the second db adapter\n    $dbOne = $this->getServiceLocator()->get('db_two');\n  }\n}\n```", "```php\n<?php \n\n// We need to import this to use the Db Adapter\nuse Zend\\Db\\Adapter\\Adapter;\n\nclass someClass \n{\n  // This is the property where our database adapter will be \n  // stored in \n  private $db;\n\n  // First we want to connect to the database on instantiation of \n  // this class\n  public function __construct()\n  {\n    // Create the new database adapter\n    $this->db = new Adapter(array(\n      'driver' => 'Pdo_Mysql', \n      'hostname' => 'localhost',\n      'database' => 'example_database',\n      'username' => 'developer',\n      'password' => 'developer-password'\n    ));\n  }\n\n  // This method will execute a query on the database, to show \n  // how easy it is to now make use of our database\n  public function someData()\n  {\n    // Create a statement where we select everything from our \n    // tableName table\n    $statement = $this->db->createStatement(\n      \"SELECT * FROM tableName\"\n    );\n\n    return $statement->execute();\n  }\n}\n```", "```php\n<?php \n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Let's assume there is a service called 'db' that connect to \n    // the database\n    $connection = $this->getServiceLocator()->get('db');\n\n    // We now start to build up our query\n    $query = $connection->query(\n      // We will put our raw SQL statement in here, and \n      // every variable we want to put in we replace with \n      // a question mark. This means we will fill in the \n      // blanks later.\n      \"SELECT * FROM cards WHERE type = ?\", \n\n      // We don't want to execute the statement yet, just \n      // prepare it.\n      Adapter::QUERY_MODE_PREPARE\n    );\n\n    // These are the parameters that will replace the question \n    // marks (?) in the SQL statement above, in the defined order\n    $replacements = array('number');\n\n    // Now execute the query with the parameters attached to \n    // replace\n    $result = $query->execute($replacements);\n\n    // Iterate over the results\n    foreach ($result as $res) {\n      // Do something with the result, in this case a raw echo\n      echo '<pre>'. print_r($res, true). '</pre>';\n    }\n  }\n}\n```", "```php\n// We now start to build up our query\n$query = $connection->query(\n  // We will put our raw SQL statement in here, and \n  // every variable we want to put in we replace with \n  // a question mark. This means we will fill in the \n  // blanks later.\n  \"SELECT * FROM cards WHERE type = ?\", \n\n  // These are the parameters that will replace the question \n  // marks (?) in the SQL statement above, in the defined order\n  array('number')\n);\n```", "```php\n<?php \n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Let's assume there is a service called 'db' that connect to \n    // the database\n    $connection = $this->getServiceLocator()->get('db');\n\n    // Now let's create a prepared statement\n    $statement = $connection->createStatement();\n\n    // Set up the prepared statement\n    $statement->setSql(\"\n      SELECT \n      * \n      FROM cards \n      WHERE type = :type\n      AND color = :color\n    \");\n\n    // Create a new parameter container to store our where \n    // parameters in\n    $container = new ParameterContainer(array(\n      // These are the variables used in the same order as \n      // displayed in the where condition\n      'type' => 'picture', 'color' => 'diamond'\n    ));\n\n    // Set the container to be used in our statement \n    $statement->setParameterContainer($container);\n\n    // Prepare the statement for use with the database\n    $statement->prepare();\n\n    // Now execute the statement and get the resultset\n    $result = $statement->execute();\n\n    // Iterate over the results\n    foreach ($result as $res) {\n      // Do something with the result, in this case a raw echo\n    echo '<pre>'. print_r($res, true). '</pre>';\n    }\n  }\n}\n```", "```php\n<?php\n\n// Adapter is of type Zend\\Db\\Adapter\\Adapter\necho $adapter->getPlatform()->quoteIdentifier('some_var');\n```", "```php\n\"some_var\"\n```", "```php\n<?php\n\n// Adapter is of type Zend\\Db\\Adapter\\Adapter\necho $adapter->getPlatform()->quoteIdentifierChain(array(\n  'some_table', 'some_column'\n));\n```", "```php\n\"some_table\".\"some_column\"\n```", "```php\n<?php\n\n// You can either use quoteValue or quoteTrustedValue,\n// quoteValue will log an error in the PHP error log if \n// there is no driver or module available to quote the \n// value. Both methods output the same value.\necho $adapter->getPlatform()->quoteValue(\"great-value\");\n\n// Adapter is of type Zend\\Db\\Adapter\\Adapter\necho $adapter->getPlatform()->quoteTrustedValue(\"great-value\");\n```", "```php\n'great-value'\n```", "```php\n<?php\n\n// Adapter is of type Zend\\Db\\Adapter\\Adapter\necho $adapter->getPlatform()->quoteValueList(array(\n  \"value_one\", \"value_two\"\n));\n```", "```php\n'value_one', 'value_two'\n```", "```php\n<?php\n\n// Adapter is of type Zend\\Db\\Adapter\\Adapter\necho $adapter->getPlatform()->quoteIdentifierInFragment(\n  '(fork.* AS spoon)',\n\n   // Use the braces as a safe word so that they\n   // will not be quoted.\n   array('(', ')')\n);\n```", "```php\n`fork`.* AS `spoon`\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Zend\\Db\\TableGateway\\TableGateway;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Let's assume there is a service called 'db' that connect to \n    // the database\n    $connection = $this->getServiceLocator()->get('db');\n\n    // Let's make this object for examples later on\n    // $sql = new Sql($this->connection);\n\n    // Create a new Zend\\Db\\Sql\\Insert object\n    // You can also do $sql->insert();\n    $insert = new Insert('cards');\n\n    // Define the columns in the table, although not \n    //required, it is best practice\n    $insert->columns(array(\n      'id',\n      'color',\n      'type',\n      'value',\n    ));\n\n    // Assign the values we want to insert, the column \n    // names are in the keys so that the code knows what \n    // to insert where.\n    $insert->values(array(\n      'color' => 'diamond',\n      'type' => 'picture',\n      'value' => 'Goblin'\n    ));\n\n    // Create a new table gateway to perform our SQL on\n    $tableGateway = new TableGateway(\n      'cards', $connection\n    );\n\n    // We will now use the TableGateway to insert our \n    // statement in the table.\n    // The insert() / insertWith() method throws an \n    // exception whenever the query goes wrong. We need to  \n    // make sure we catch that.\n    try {\n      $tableGateway->insertWith($insert);\n\n      // If we reach this point we can assume that the \n      // query went fine.\n      echo \"Insert success!\";\n      $hasResult = true;\n    } catch (Exception $e) {\n      echo \"Insert failed.\";\n    }\n  }\n}\n```", "```php\n// This will prepare a StatementInterface for us to use\n$statement = $sql->prepareStatementForSqlObject(\n  // Put the insert object in here\n  $insert\n);\n\n// Now we simply execute the statement to insert the \n// record.\n$statement->execute();\n```", "```php\n// If an Exception happened, we will have a false in our \n// result.\nif (isset($hasResult)) {\n  // Let's get the primary key from our last insert for \n  // later use.\n  $primaryKey = $tableGateway->getLastInsertValue();\n\n  // Now let's update our record\n  // You can also do $sql->update();\n  $update = new Update('cards');\n\n  // Set the new values (and column names as keys) for \n  // the data we want to update.\n  $update->set(array(\n    'color' => 'spade',\n    'value' => '10',\n    'type' => 'number',\n  ));\n\n  // Now create a where statement\n  $where = new Where();\n\n  // We want to match our record on the primary key that \n  // we got back from our insertion.\n  $where->equalTo(\"id\", $primaryKey);\n\n  // Set the where in the update statement so that we \n  // use that when executing the update. We can add as \n  // many where statements as we like, but we only match \n  // on one here.\n  $update->where($where);\n\n  // Now update the record\n  $updated = $tableGateway->updateWith($update);\n```", "```php\n// Delete everything again\n// You can also do $sql->delete();\n$delete = new Delete('cards');\n\n// We can use the same where statement as before!\n$delete->where($where);\n\n// Now let's delete it, as there is nothing else to it.\n$deleted = $tableGateway->deleteWith($delete);\n```", "```php\n<?php \n\nnamespace Application\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Zend\\Db\\TableGateway\\TableGateway;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // Let's assume there is a service called 'db' that connect to \n    // the database\n    $connection = $this->getServiceLocator()->get('db');\n\n    // First create our Zend\\Db\\Sql\\Sql object, and let's \n    // assume $connection has a Zend\\Db\\Adapter defined.\n    $sql = new Sql($connection);\n\n    // Now create a Zend\\Db\\Sql\\Select statement with \n    // 'people' as the table we want to select from.\n    $select = $sql->select('people');\n\n    // By default we will select all the fields, but let's \n    // just change that a bit for sake of the example\n    $select->columns(array('first_name', 'last_name'));\n\n    // Now set up our join condition\n    $select->join(\n      // We want to join the 'addresses' table\n      'addresses',\n\n      // We now define the join condition to match the \n      // records on \n      'addresses.id = people.address_id',\n\n      // We want to select different columns than the \n      // default wildcard selection.\n      array('street', 'number', 'city', 'postcode'),\n\n      // We want to do a LEFT JOIN on the table\n      Select::JOIN_LEFT\n    );\n\n    // Now we are ready to execute the statement.\n    $statement = $sql->prepareStatementForSqlObject(\n      $select\n    );\n\n    // .. And finally execute it\n    $records = $statement->execute();\n\n    // Output to the screen for convenience\n    echo '<pre>'. print_r($records, true). '</pre>';\n  }\n}\n```", "```php\n<?php\nuse Zend\\Db\\Adapter\\Profiler\\Profiler;\n\n// Instantiate the Zend\\Db\\Adapter\\Profiler\\Profiler\n$profiler = new Profiler();  \n\n// Let's assume $connection is an active Db\\Adapter,\n// we then need to set the profiler to be used by the \n// adapter.\n$connection->setProfiler($profiler);\n```", "```php\n<?php\n// This will return all the statements that have been \n// executed by the adapter.\n$results = $profiler->getProfiles();\n```", "```php\narray(3) {\n   [0] => array(5) {\n     [\"sql\"] => string(77) \n        \"INSERT INTO `cards` (`color`, `type`, `value`) \n        VALUES (:color, :type, :value)\"\n     [\"parameters\"] => object(\n  Zend\\Db\\Adapter\\ParameterContainer)#255 (3) {\n         [\"data\":protected] => array(3) {\n         [\"color\"] => string(7) \"diamond\"\n         [\"type\"] => string(7) \"picture\"\n         [\"value\"] => string(6) \"Goblin\"\n      }\n     [\"positions\":protected] => array(3) {\n       [0] => string(5) \"color\"\n       [1] => string(4) \"type\"\n       [2] => string(5) \"value\"\n      }\n       [\"errata\":protected] => array(0) {\n      }\n    }\n     [\"start\"] => float(1372316727.1188)\n     [\"end\"] => float(1372316727.1209)\n     [\"elapse\"] => float(0.0020461082458496)\n  }\n}\n```", "```php\nmodule\\DAO\\\n  config\\\n    module.config.php\n  src\\\n    DAO\\\n  Connection\\\n    Connector.php\n  DTO\\\n    Cards.php\n\nMapper\\\n  Cards.php\n  MapperAbstract.php\n  MapperInterface.php\n  Module.php\n```", "```php\n<?php\n\nreturn array(\n  // This is going to be the configuration from which we \n  // will read. Obviously the username/password should \n  // be in the local.php but we will just put it here \n  // example wise.\n  'dao' => array(\n    'hostname' => 'localhost',\n    'username' => 'some_user',\n    'password' => 'some_password',\n    'database' => 'book',\n\n    // This mapper will contain all of our mapper \n    // classes such as DAO\\Db\\Mapper\\Cards and let them \n    // know which table they need to connect to.\n    'mapper' => array(\n      'Cards' => 'cards',\n    ),\n  ),\n\n  // Initialize our service manager so that we can reach \n  // our mappers from anywhere else in the application \n  // (every mapper should have its own entry) and our \n  // connector which should be reached only by the \n  // mappers and not anywhere else\n  'service_manager' => array(\n    'invokables' => array(\n      'DAO_Connector' =>'DAO\\Db\\Connection\\Connector',\n      'DAO_Mapper_Cards' =>'DAO\\Db\\Mapper\\Cards',\n    ),\n  ),\n);\n```", "```php\n<?php\n\n// Set the correct namespace\nnamespace DAO\\Db\\Connection;\n\n// We will be using the following classes\nuse Zend\\ServiceManager\\ServiceLocatorAwareInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\nuse Zend\\Db\\Adapter\\Adapter;\n\n// We are going to make this as a Service, so make sure \n// we implement the ServiceLocatorAwareInterface\nclass Connector implements ServiceLocatorAwareInterface \n{\n  // Our service locator will be placed in here\n  protected $serviceLocator;\n\n  // Now set our service manager instance required by the \n  // ServiceLocatorAwareInterface\n  public function setServiceLocator(ServiceLocatorInterface $serviceLocator)\n  {\n    $this->serviceLocator = $serviceLocator;\n  }\n\n  // And add our getter for the service manager, as is required by \n  // the ServiceLocatorAwareInterface\n  public function getServiceLocator()\n  {\n    return $this->serviceLocator;\n  }\n\n  /**\n   * Initializes a connection and returns a fresh \n   * adapter.\n   *\n   * @return \\Zend\\Db\\Adapter\\Adapter\n   * @throws \\Exception\n   */\n  public function initialize()\n  {\n    // Get the configuration from the module.config.php\n    $dao = $this->getServiceLocator()->get('config');\n\n    // The following array of configuration items should \n    // be in there\n    $configItems = array(\n      'hostname', \n      'username', \n      'database', \n      'password'\n    );\n\n    // Check if everything is there in the configuration\n    foreach ($configItems as $required) {\n      if (!in_array($required, array_keys($dao['dao']))) \n      {\n        // If there is a config item missing, just let\n        // the develop know\n        throw new \\Exception(\"{$required} is not in the DAO configuration!\");\n      }\n    }\n\n    // We can assume we have everything, now set up our \n    // MySQL connection\n    return new Adapter(array(\n      'driver' => 'Pdo_Mysql',\n      'database' => $dao['dao']['database'],\n      'hostname' => $dao['dao']['hostname'],\n      'username' => $dao['dao']['username'],\n      'password' => $dao['dao']['password'],\n    ));\n  }\n}\n```", "```php\n<?php\n\n// Make sure we have the namespace right\nnamespace DAO\\Db\\Mapper;\n\n// Note that this is an interface, and not a regular \n// class.\ninterface MapperInterface\n{\n  // We need an insert method in our mapper.  \n  public function insert($data);\n\n  // And obviously we want to update data\n  public function update($data);\n\n  // If we want to update, we also want to delete data\n  public function delete($id);\n\n  // And of course we want to load one specific record\n  public function load($id);\n\n  // Last but not least we also want a method to get all \n  // the records in the table\n  public function getAll();\n}\n```", "```php\n<?php\n\n// Namespace, do I need to say more ;-)\nnamespace DAO\\Db\\Mapper;\n\n// Use the following classes\nuse Zend\\ServiceManager\\ServiceLocatorAwareInterface;\nuse Zend\\ServiceManager\\ServiceLocatorInterface;\nuse Zend\\Db\\Sql\\Sql;\n\n// Note that we are again using the \n// ServiceLocatorAwareInterface and therefore need to \n// implement the getServiceLocator and setServiceLocator \n// (not shown here).\nclass MapperAbstract implements ServiceLocatorAwareInterface \n{\n  // Our sql object will be put here\n  private $sqlObject;\n\n  // We'll just put our service locator in here\t\n  protected $serviceLocator;\n```", "```php\n// This method will set up our connection, initialize \n// the right table and return a Sql object\nprotected function getSqlObject()\n{\n  // We only want to set up our connection once, no \n  // point in doing it more, right?\n\n  if ($this->connection === null) {\n    // Get our configuration from the \n    // module.config.php\n    $config = $this->getServiceLocator()->get('config');\n\n  // Get our class name\n  $class = explode('\\\\', get_class($this));\n\n  // Now check if our class name is defined in the \n  // mapper configuration of the dao configuration, \n  // so that we can get our table name. Looks more \n  // complicated than it is really.\n  if (isset($config['dao']['mapper']) === true && isset($config['dao']['mapper'][end($class)])) {\n\n    // Get the database adapter from our connector\n    $adapter = $this->getServiceLocator()\n                    ->get('DAO_Connector')\n                    ->initialize();\n\n    // We have a configuration, now return our SQL \n    // object with the right table name included\n    $this->sqlObject = new Sql(\n      $adapter, \n      $config['dao']['mapper'][end($class)]\n    );\n      } else {\n        // Make sure the developer knows not all the \n        // configuration is set.\n        throw new \\Exception(\"Configuration dao\\mapper\\\\\". end($class). \" not set.\");\n   }\n    } \n\n    // Now return our sql object\n    return $this->sqlObject;\n  }\n}\n```", "```php\n<?php\n\n// Namespace, quite essential\nnamespace DAO\\Db\\DTO;\n\n// We should name our class simply Cards, as that is \n// used in the mapper later on as well\nclass Cards\n{\n  // Our 'cards' table exists of an id column, color, \n  // type and value, let's just define them as private \n  // properties.\n  private $id;\n  private $color;\n  private $type;\n  private $value;\n```", "```php\npublic function getId() { return $this->id; }\npublic function getColor() { return $this->color; }\npublic function getType() { return $this->type; }\npublic function getValue() { return $this->value; }\n```", "```php\n// The id will only be set if we update a record, or \n// when we retrieve a record from a database. Never \n// when we want to insert a record.\npublic function setId($id) {\n  $this->id = $id;\n}\n\n// Make sure we can only use colors that are valid in \n// our table.\npublic function setColor($color) \n{\n  $validColors = array('diamond', 'spade', 'heart', 'club');\n\n  if (in_array($color,$validColors)== false) {\n    throw new \\Exception(\n      \"Type can only be 'diamond', 'spade', 'heart'\".   \n      \"or 'club'.\"\n    );\n  }\n\n  $this->color = $color;\n}\n\n// Make sure only a valid type is entered.\npublic function setType($type) \n{\n  $validTypes = array('number', 'picture');\n\n  if (!in_array($type, $validTypes)) {\n    throw new \\Exception(\n      \"Type can only be 'number' or 'picture'.\"\n    );\n  }\n\n  $this->type = $type;\n}\n\n// A value can only have a maximum of 6 character\npublic function setValue($value) \n{\n  $maxValue = 6;\n\n  if (strlen($value) >$maxValue) {\n    throw new \\Exception(\n      \"Maximum length of value is 6.\"\n    );\n  }\n\n  $this->value = $value;\n}\n```", "```php\n  public function __construct($type, $value, $color, $id = null) \n  {\n    // Id is optional, so see if it is parsed or not\n    if ($id !== null) $this->setId($id);\n\n    $this->setColor($color);\n    $this->setType($type);\n    $this->setValue($value);\n  }\n}\n```", "```php\n<?php\n\nnamespace DAO\\Db\\Mapper;\n\nuse Zend\\Db\\Sql\\Where;\nuse DAO\\Db\\DTO\\Cards as CardsDto;\nuse DAO\\Db\\Mapper\\MapperInterface;\n\n// This class will extend and implement both our \n// Abstract as our Interface class\nclass Cards extends MapperAbstract implements MapperInterface\n{\n```", "```php\n/**\n * Delete a specific row.\n * \n * @param int $id\n */\npublic function delete($id) \n{\n  // Get our fresh Sql object from our Abstract method\n  $sql = $this->getSqlObject();\n\n  // Create a new WHERE clause\n  $where = new Where();\n\n  // When deleting we want to match on an id\n  $where->equalTo('id', $id);\n\n  // Statements can throw exceptions, so make sure we \n  //catch them in time.\n  try {\n    // Create a new delete object with our where class    \n    // attached and then immediately turn it into a \n    // statement. That is called pure laziness\n    $statement = $sql->prepareStatementForSqlObject(               \n      $sql->delete()->where($where)\n    );\n\n    // Execute the statement\n    $result = $statement->execute();\n\n    // If there is more than 0 rows deleted return \n    // true, otherwise false\n    return $result->getAffectedRows() > 0;\n  } catch (\\Exception $e) {\n    // Something went terribly wrong, just ignore it \n    // for now ;-)\n    // TIP: Don't do this in real life, at least log your \n    //exceptions.\n    return false;\n  }\n}\n```", "```php\n/**\n * Returns all the records in the database.\n * \n * @return \\DAO\\Db\\DTO\\Cards\n */\npublic function getAll()\n{\n  // Get the SQL object\n  $sql = $this->getSqlObject();\n\n  // Prepare a select statement\n  $statement = $sql->prepareStatementForSqlObject(\n    $sql->select()\n  );\n\n  // Execute the freshly made statement\n  $records = $statement->execute();\n\n  // Create our return array\n  $retval = array();\n\n  // Loop through the records and add them to the \n  // result array\n  foreach ($records as $row) {\n    // Create a new Cards DTO and assign our record\n    $retval[] = new CardsDto(\n      $row['type'], \n      $row['value'], \n      $row['color'], \n      $row['id']\n    );\n  }\n\n  return $retval;\n}\n```", "```php\n/**\n * Inserts a record.\n * \n * @param \\DAO\\Db\\DTO\\Cards $data\n */\npublic function insert($data)\n{\n  // We can easily insert this as we know the DTO has \n  // already taken care of the validation of the values.\n  if (!$data instanceof DAO\\Db\\DTO\\Cards) {\n    throw new \\Exception(\n      \"Data needs to be of type DAO\\Db\\DTO\\Cards\"\n    );\n  }\n\n  // Get our SQL object\n  $sql = $this->getSqlObject();\n\n  try {\n    // Create our insert statement with the values \n    // assigned into it.\n    $statement = $sql->prepareStatementForSqlObject(\n      $sql->insert()\n          ->values(array(\n            'color' => $data->getColor(),\n            'type' => $data->getType(),\n            'value' => $data->getValue()\n      ))\n  );\n\n    // Execute our statement\n    $result = $statement->execute();\n\n    // Return our primary key after insertion\n    return $result->getGeneratedValue();\n  } catch (\\Exception $e) { \n    // Something went wrong, handle exception and \n    // return false\n    return false;\n    }\n  }\n```", "```php\npublic function load($id) \n{\n  // Get the SQL object\n  $sql = $this->connection();\n\n  // A fresh WHERE clause\n  $where = new Where();\n  $where->equalTo('id', $id);\n\n  try {\n    // Prepare a select statement with the where \n    // clause attached.\n    $statement = $sql->prepareStatementForSqlObject(\n      $sql->select()->where($where)\n    );\n\n    // Execute the statement and return the first row\n    $record = $statement->execute()->current();\n\n    // Now let's return a fresh Cards DTO object\n    return new CardsDto(\n      $record['type'], \n      $record['value'], \n      $record['color'], \n      $record['id']\n    );\n  } catch (\\Exception $e) {\n return false;\n  }\n}\n```", "```php\n  public function update($data) \n  {\n    // We can easily insert this as we know the DTO has \n    // already taken care of the validation of the   \n    // values.\n    if (get_class($data) !== 'DAO\\Db\\DTO\\Cards') {\n      throw new \\Exception(\n        \"Data needs to be of type DAO\\Db\\DTO\\Cards\"\n      );\n    }\n\n    if ($data->getId() === null) {\n      throw new \\Exception(\n           \"Can't update anything if we don't have a card id!\"\n      );\n    }\n\n    // Get the connection\n    $sql = $this->connection();\n\n    try {\n      // Create the WHERE clause\n      $where = new Where();\n      $where->equalTo('id', $data->getId());\n\n      // Create the update class\n      $update = $sql->update();\n\n      // Set the where clause\n      $update->where($where);\n      $update->set(array(\n        'color' => $data->getColor(),\n        'type' => $data->getType(),\n        'value' => $data->getValue()\n      ));\n\n      // Create the statement\n      $statement = $sql->prepareStatementForSqlObject($update);\n\n      // Execute the statement\n      $result = $statement->execute();\n\n      // If more than 0 rows were updated return true, \n      // otherwise false\n      return $result->getAffectedRows() > 0;\n    } catch (\\Exception $e) { \n      return false;\n    }\n  }\n}\n```", "```php\n<?php\n\nnamespace Cards\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass CardsController extends AbstractActionController\n{\n  public function viewAction()\n  {\n    if (!$this->getParam('id'))\n        throw new \\Exception(\"Missing id\");\n\n    // Get the record to load from the query string\n    $id = $this->params()->fromQuery('id');\n\n    // Get the card mapper from the service manager\n    $cardMapper = $this->getServiceLocator()\n                       ->get('DAO_Mapper_Cards');\n\n    // Load the requested card\n    $card = $cardMapper->load($id);\n\n    // Dump the loaded record to the screen\n    echo '<pre>'. Print_r($card, true). '</pre>';\n  }\n}\n```"]