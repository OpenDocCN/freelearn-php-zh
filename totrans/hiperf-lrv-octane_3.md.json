["```php\nlaravel new octane-ch03\ncd octane-ch03\n```", "```php\ncomposer show laravel/sail\n```", "```php\nphp artisan sail:install\n```", "```php\nAPP_PORT=81\n```", "```php\n./vendor/bin/sail up\n```", "```php\n./vendor/bin/sail composer require laravel/octane\n```", "```php\n./vendor/bin/sail artisan sail:publish\n```", "```php\ncommand=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80\n```", "```php\ncommand=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80\n```", "```php\n./vendor/bin/sail build --no-cache\n```", "```php\n./vendor/bin/sail up\n```", "```php\ncurl -I 127.0.0.1:81 -s | grep ^Server\n```", "```php\nServer: swoole-http-server\n```", "```php\n# installing new Laravel application\nlaravel new octane-ch03-openswoole\n# entering into the new directory\ncd octane-ch03-openswoole\n# installing Pecl module\npecl install openswoole\n# installing Octane package\ncomposer require laravel/octane\n# installing Laravel Octane files\nphp artisan octane:install\n# launching the OpenSwoole server\nphp artisan octane:start\n```", "```php\ncurl -I 127.0.0.1:8000 -s | grep ^Server\n```", "```php\nServer: OpenSwoole 4.11.1\n```", "```php\nphp artisan octane:reload --server=swoole\n```", "```php\nvendor/bin/sail php artisan octane:reload --server=swoole\n```", "```php\nnpm install --save-dev chokidar\n```", "```php\ncommand=/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan octane:start --server=swoole --host=0.0.0.0 --port=80 --watch\n```", "```php\nvendor/bin/sail build\nvendor/bin/sail up\n```", "```php\nINFO  Application change detected. Restarting workers…\n```", "```php\nRoute::get('/serial-task', function () {\n    $start = hrtime(true);\n    [$fn1, $fn2] = [\n        function () {\n            sleep(2);\n            return 'Hello';\n        },\n        function () {\n            sleep(2);\n            return 'World';\n        },\n    ];\n    $result1 = $fn1();\n    $result2 = $fn2();\n    $end = hrtime(true);\n    return \"{$result1} {$result2} in \".($end - $start) /\n      1000000000 .' seconds';\n});\n```", "```php\nHello World in 4.001601125 seconds\n```", "```php\nuse Laravel\\Octane\\Facades\\Octane;\nRoute::get('/concurrent-task', function () {\n    $start = hrtime(true);\n    [$result1, $result2] = Octane::concurrently([\n        function () {\n            sleep(2);\n            return 'Hello';\n        },\n        function () {\n            sleep(2);\n            return 'World';\n        },\n    ]);\n    $end = hrtime(true);\n    return \"{$result1} {$result2} in \".($end - $start) /\n      1000000000 .' seconds';\n});\n```", "```php\nHello World in 2.035140709 seconds\n```", "```php\nuse Laravel\\Octane\\Facades\\Octane;\nRoute::get('/who-is-the-first', function () {\n    $start = hrtime(true);\n    [$result1, $result2] = Octane::concurrently([\n        function () {\n            sleep(2);\n            Log::info('Concurrent function: First');\n            return 'Hello';\n        },\n        function () {\n            sleep(1);\n            Log::info('Concurrent function: Second');\n            return 'World';\n        },\n    ]);\n    $end = hrtime(true);\n    return \"{$result1} {$result2} in \".($end - $start) /\n      1000000000 .' seconds';\n});\n```", "```php\nlocal.INFO: Concurrent function: Second\nlocal.INFO: Concurrent function: First\n```", "```php\n    public function boot()\n    {\n        Octane::tick('simple-ticker', fn () =>\n        Log::info('OCTANE TICK.', ['timestamp' => now()]))\n        ->seconds(10)\n        ->immediate();\n    }\n```", "```php\nuse Laravel\\Octane\\Facades\\Octane;\nuse Illuminate\\Support\\Facades\\Log;\n```", "```php\n[2022-07-29 08:23:11] local.INFO: OCTANE TICK. {\"timestamp\":\"2022-07-29 08:23:11\"}\n[2022-07-29 08:23:22] local.INFO: OCTANE TICK. {\"timestamp\":\"2022-07-29 08:23:21\"}\n[2022-07-29 08:23:31] local.INFO: OCTANE TICK. {\"timestamp\":\"2022-07-29 08:23:31\"} [2022-07-26 20:45:19] local.INFO: OCTANE TICK. {\"timestamp\":\"2022-07-26 20:45:19\"}\n```", "```php\n        Octane::tick('cache-last-random-number',\n            function () {\n                $number = rand(1, 1000);\n                Cache::store('octane')->put(\n                       'last-random-number', $number);\n                Log::info(\"New number in cache: ${number}\",\n                         ['timestamp' => now()]);\n                return;\n            }\n        )\n        ->seconds(10)\n        ->immediate();\n```", "```php\nuse Illuminate\\Support\\Facades\\Cache;\nuse Laravel\\Octane\\Facades\\Octane;\nuse Illuminate\\Support\\Facades\\Log;\n```", "```php\nuse Illuminate\\Support\\Facades\\Cache;\nRoute::get('/get-random-number', function () {\n    $number = Cache::store('octane')->get(\n      'last-random-number', 0);\n    return $number;\n});\n```", "```php\nRoute::get('/increment-number', function () {\n    $number =\n      Cache::store('octane')->increment('my-number');\n    return $number;\n});\nRoute::get('/decrement-number', function () {\n    $number =\n      Cache::store('octane')->decrement('my-number');\n    return $number;\n});\nRoute::get('/get-number', function () {\n    $number = Cache::store('octane')->get('my-number', 0);\n    return $number;\n});\n```", "```php\nRoute::get('/save-many', function () {\n    Cache::store('octane')->putMany([\n        'my-number' => 42,\n        'my-string' => 'Hello World!',\n        'my-array' => ['Kiwi', 'Strawberry', 'Lemon'],\n    ]);\n    return \"Items saved!\";\n});\nRoute::get('/get-many', function () {\n    $array = Cache::store('octane')->many([\n        'my-number',\n        'my-string',\n        'my-array',\n    ]);\n    return $array;\n});\n```", "```php\n{\"my-number\":42,\"my-string\":\"Hello World!\",\"my-array\":[\"Kiwi\",\"Strawberry\",\"Lemon\"]}\n```", "```php\nRoute::get('/get-one-from-many/{key?}', function ($key = \"my-number\") {\n    return Cache::store('octane')->get($key);\n});\n```", "```php\nHello World!\n```", "```php\n        'my-table:100' => [\n            'uuid' => 'string:36',\n            'name' => 'string:1000',\n            'age' => 'int',\n            'value' => 'float',\n        ],\n```", "```php\nRoute::get('/table-create', function () {\n    // Getting the table instance\n    $table = Octane::table('my-table');\n    // looping 1..90 creating rows with fake() helper\n    for ($i=1; $i <= 90; $i++) {\n        $table->set($i,\n        [\n            'uuid' => fake()->uuid(),\n            'name' => fake()->name(),\n            'age' => fake()->numberBetween(18, 99),\n            'value' => fake()->randomFloat(2, 0, 1000)\n        ]);\n    }\n    return \"Table created!\";\n});\n```", "```php\nSwoole\\Table::set(): failed to set('91'), unable to allocate memory\n```", "```php\nRoute::get('/table-get', function () {\n    $table = Octane::table('my-table');\n    $row = $table->get(1);\n    return $row;\n});\n```", "```php\n{\"uuid\":\"6e7c7eb6-9ecf-3cf8-8de9-5034f4c44ab5\",\"name\":\"Hugh Larson IV\",\"age\":81,\"value\":945.67}\n```", "```php\nRoute::get('/table-get-all', function () {\n    $table = Octane::table('my-table');\n    $rows=[];\n    foreach ($table as $key => $value) {\n        $rows[$key] = $table->get($key);\n    }\n    // adding as first row the table rows count\n    $rows[0] = count($table);\n    return $rows;\n});\n```", "```php\nuse Illuminate\\Support\\Facades\\App;\nRoute::get('/metrics', function () {\n    $server = App::make(Swoole\\Http\\Server::class);\n    return $server->stats();\n});\n```"]