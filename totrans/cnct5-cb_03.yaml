- en: Chapter 3. Files and File Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a file by its ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a file's path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a file to the file manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a file set by its ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a file to a file set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a file from a file set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a file is part of a file set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting all of the files in a file set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicating a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reindexing a file's search attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting passwords on file objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting permissions on files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the download URL for a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the download statistics for a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a file picker to a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to robust content editing features, **concrete5** comes with a powerful
    tool to manage static files on your website, called the **file manager**. The
    file manager is where you can store any type of static document, including images,
    videos, PDFs, documents, and audio files. The file manager allows you to create
    downloadable links to the files, embed photos into your site content, and much
    more. You can even assign permissions to files inside the file manager to allow
    for greater control in deciding what files users can download.
  prefs: []
  type: TYPE_NORMAL
- en: Working with files through the concrete5 interface is a delight, but sometimes
    you will want to integrate the powerful functionality of the file manager into
    your own custom applications built in concrete5\. In this chapter, we will show
    how to interact with files, upload new files, and even upload new files to the
    file manager.
  prefs: []
  type: TYPE_NORMAL
- en: A note about the code in this chapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much of the code presented in this chapter can go just about anywhere in a concrete5
    application. Since we are just going to be trying out simple code snippets, it
    makes sense to experiment with this code in a sandbox area. There are a few places
    in concrete5 that make sense for this, but we will be using `/config/site_post.php`
    to test out our code.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to erase any experimental and arbitrary code from `site_post.php`
    after each recipe, so that your site is ready for the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will need to dump the contents of variables from time to time. Each
    PHP developer has his or her own way of doing this, but in this chapter we will
    be using a custom debug function. You may recognize this function from [Chapter
    1](ch01.html "Chapter 1. Pages and Page Types"), *Pages and Page Types*. We will
    continue using it here, as it makes the output easy to read and saves some time
    while developing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following PHP function at the top of `/config/site_post.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we can dump variable contents by calling `my_debug($variableName)` and see
    a nicely formatted output of the contents of the variable. Feel free to use `print_r`
    or `var_dump` as an alternative.
  prefs: []
  type: TYPE_NORMAL
- en: Placing debug code in `site_post.php` is great for experimentation and trying
    out the concrete5 API, but it will disrupt the regular operation of a concrete5
    website. It is recommended that all of the recipes in this chapter be performed
    on a testing copy of concrete5.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a file by its ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common interaction with files for most concrete5 developers is loading
    files and interacting with them. To do this, we must load a file by its ID. The
    code in this recipe can be placed wherever you need to load a file and retrieve
    or modify its attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to know the ID of the file that we are loading. In this recipe,
    we will load a file with the **ID** of `17`. If your concrete5 site does not have
    a file with an **ID** of `17`, upload a new file to the file manager and change
    the **ID** in this recipe to match the **ID** of the newly uploaded file. You
    can get the **ID** of a file by visiting the file manager, clicking on a file,
    and choosing **Properties**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/4548OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor, or place this code, wherever
    it is appropriate in your own application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to load and be sure to set this to something relevant
    for your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the contents of the file variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will use this function to load the relevant file from the database,
    based on the numeric ID that you passed in. The static `getByID` function will
    return a fully loaded `file` object that you can work further with.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a file's path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have loaded the `file` object, there are a multitude of different methods
    that you can call, to get all of the different attributes associated with that
    file. One of the most common and important attributes is that file's path.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will get a file's path and use it to display an image stored
    in the file manager.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, we will be referencing an image with the ID of `1`. Be sure to adapt
    the code in this recipe to load an image that actually exists in your concrete5
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to be loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the file''s path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the path to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The file manager stores files in various locations through the concrete5 website,
    typically beneath the `files/` folder, which gets broken up into a few machine-readable
    folders consisting of integers. Since these paths are too hard to figure out and
    predict on a regular basis, the file object API allows us to get those paths with
    a simple function call.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need the actual absolute path of a file, if you are working with the
    image in PHP''s `fopen` function, for instance. For that, you will use the `getPath`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a file by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, you will need to get several files at once. For example, if you
    were building a photo gallery, you would want to get a list of files to display
    in the gallery.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will get a list of the first hundred images stored in the
    file manager and output their file paths.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that there is at least one image stored in concrete5's file
    manager. Please make sure that your own version of concrete5 has one or more images
    stored.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the file list model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `FileList` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Filter the list to only show images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Get an array of images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loop through the images array and output each image's path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much like listing pages and other object in concrete5, we loaded a `FileList`
    object that extends the core `DatabaseItemList` class. This afforded us an object-oriented
    manner in which to filter, search, and retrieve an array of files.
  prefs: []
  type: TYPE_NORMAL
- en: We called the `get()` function to return the images found in the file manager.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'concrete5 stores a few file type constants in the `FileType` class, which you
    can view in `concrete/libraries/file/types.php`. The following constants are available
    to filter by different file types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FileType::T_APPLICATION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_AUDIO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_DOCUMENT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_IMAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_TEXT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_UNKNOWN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileType::T_VIDEO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are quite a few functions available on the `FileList` class to search
    and filter the list of files. The following are a few more functions that you
    can use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter the list by file extension (do not supply a period in the extension
    parameter):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Filter the list by a keyword phrase (searches by the file title, filename,
    and some other attributes):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are a few more specific filters available for the `FileList` class. You
    can dive into these filter functions by browsing the `FileList` class source code,
    or by viewing the online concrete5 developer documentation at [http://www.concrete5.org/documentation/developers/files/searching-and/](http://www.concrete5.org/documentation/developers/files/searching-and/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting all of the files in a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a file to the file manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you will want to store user-supplied files in the file manager, or
    perhaps want to migrate the existing files on the server to the file manager.
    There are obvious security concerns whenever you are dealing with user-generated
    content, but there are plenty of legitimate reasons to want to programmatically
    add files to the file manager.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires us to create a basic HTML form with a file upload input.
    We will place the HTML form in a single page located at `/single_pages/upload.php`.
    Be sure to install the single page by visiting `/dashboard/pages/single` and adding
    a new page with a path of `/upload`.
  prefs: []
  type: TYPE_NORMAL
- en: Since this recipe is a little bit more complex, it may be useful to check out
    the free code download for this chapter on this book's website.
  prefs: []
  type: TYPE_NORMAL
- en: We also will be using the custom debug function that we discussed in the chapter
    introduction.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new single page at `/single_pages/upload.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the single page to the concrete5 website by visiting /`dashboard/pages/single`
    and entering the path `/upload`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a basic HTML form in the `upload.php` file with a file input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create `/config/site_process.php`, if it does not exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `site_process.php`, check to see if a file has been uploaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `if` statement, load the `FileImporter` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a new instance of the `FileImporter` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the uploaded file from the `$_FILES` super global:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the file''s current temporary location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the file to the file manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If `$newFile` is an integer, concrete5 has encountered an error. Output the
    error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Otherwise, the file upload was successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the site's file manager at `/dashboard/files/search/` to see the newly
    uploaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `FileImporter` class takes the temporary path of the uploaded file (taken
    from the `$_FILES` super global) and a name for the file. The file is then added
    to the file manager, where it can be used throughout the concrete5 website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a file picker to a form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a file set by its ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows you to group files into sets. Some developers consider file
    sets to be similar to using folders on your computer, except that a file can be
    in multiple sets (or no sets) at a time, so a more apt description would be that,
    these are file categories.
  prefs: []
  type: TYPE_NORMAL
- en: File sets are great to organize files used for different purposes in your concrete5
    website. For example, you might have one file set for a slideshow on the home
    page, while there is another file set for staff photos, and another for internal
    documents.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will load a file set using its numeric ID.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we assume the existence of a file set with the ID of `1`. Please
    adjust the code in this recipe to suit your own concrete5 environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will assume that we want to load a file set that has an ID of `1`. Have
    a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure you know the ID of the file set that you wish to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you wish, you can verify that the file set has loaded correctly by dumping
    the `$fileSet` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will query the database for the file set that has the ID you supplied.
    Once it finds the appropriate record, it will return a `FileSet` object that you
    can interact with.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also retrieve file sets by providing their names as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a file to a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a list of files* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a file to a file set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A useful aspect of working with file sets is the ability to add files to a given
    set using PHP code. Fortunately, this is a very simple task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to know the ID of the file that you are adding, or have the `File`
    object already loaded. This recipe will assume the existence of a file with the
    ID of `1` and of a file set also with an ID of `1`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare the file ID of the file that you wish to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the file set ID of the file set that you wish to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file set by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the file to the file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the resulting FileSetFile object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will create an association between the file and the file set, and
    then return a `FileSetFile` object once it is complete.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alternatively, if you don''t wish to load the file object, you can just provide
    the ID of the file that you are adding. Have a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Removing a file from a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a file is part of a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a file from a file set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to being able to add files to file sets, developers can also remove
    files from their file sets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will again assume the existence of a file with an ID of `1`,
    as well as a file set with an ID of `1`. Make sure to adjust the code as needed
    for your own concrete5 instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor, so that we can play with some
    arbitrary code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the file ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the file set ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file set by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the file from the file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 simply destroys the relationship between the file and the file set.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a file to a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a file is part of a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a file is part of a file set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Occasionally, developers may want to know if a file is a member of a certain
    file set. In this recipe, we will load a file, load a file set, and then find
    out if the file is a member of the given file set.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, we will be assuming the existence of a file and a file set in this
    recipe. We will be using the ID of `1` for both the file and the file set, so
    be sure to make the necessary adjustments to the code to make this work in your
    own concrete5 system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` and clear any existing code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to be loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the ID of the file set that we will be working with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file set by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the file is a member of the file set, output a `yes` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the file is not a member of the set, output `no`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will do the heavy lifting of querying the database to find out if
    the file is a member of the given set.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding a file to a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Removing a file from a file set* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting all of the files in a file set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to load file sets and add files to them, we can learn how
    to get all of the files from a file set. We will be using the `FileList` class,
    which we first described earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue working with the assumption that there is at least one file
    and one file set installed in concrete5, both with an ID of `1`. Make the necessary
    adjustments to the variables in this recipe to suit your own needs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor, removing any existing code
    that might be in there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the `FileList` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new instance of the `FileList` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the ID of the file set to filter by:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Filter the list by the loaded file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get an array of files in the file set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Loop through the array, printing each file''s path to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh your website to see the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we are simply instantiating the `FileList` class, which will
    expose several methods to filter files. The method we are interested in is `filterBySet`.
  prefs: []
  type: TYPE_NORMAL
- en: We have to pass a `FileSet` object to this function and then we can call the
    `get` function, which will return an array of files that belong to that file set.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting a list of files* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a file set by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicating a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as in traditional file systems, concrete5 allows developers to duplicate
    files; in this recipe, we will load a file by its ID and then create a duplicate
    copy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be sure to adjust the file ID in this recipe to something that exists in your
    concrete5 database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to be duplicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Duplicate the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the contents of the new copy, using our custom debugging function that
    we created in the chapter intro:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will create a carbon copy of the original file and return the new
    file once the function has completed.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 allows developers to delete files through the PHP API. In this recipe,
    we will load a file by its ID and then delete it permanently.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once a file has been deleted, it cannot be recovered. It is a good idea to experiment
    with a temporary or dummy file in this recipe so you do not delete anything important.
    This recipe will use the ID of `1` for the file to delete, but be sure to change
    this to something that you would be comfortable deleting.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to delete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will delete the file from your server's file system, as well as remove
    the reference to it in the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Reindexing a file's search attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When changing a file's attributes programmatically, sometimes the concrete5
    search engine needs to be made aware of the new changes. In this exercise, we
    will reindex the search attributes for a file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will assume that a file with an ID of `1` exists in your concrete5 installation.
    Please adjust the ID in this recipe to a file that exists.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to reindex:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reindex the search attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will query the database and update the search index for the given
    file. This will make sure that the internal search engine is able to find a file
    based on its most current attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting passwords on file objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 supports adding passwords to individual files, so site owners can
    restrict the download of these files to only those people who possess the shared
    password.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will continue with the assumption of a file with the ID of `1`.
    Please make sure to adjust this ID to match something that exists in your own
    concrete5 website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` so we have a place to try out this code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the file ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file by its ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the password on the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will store the password in the database in plain text. Since this
    password is meant to be shared with several people, it is inherently insecure.
    As a result, concrete5 does not hash or encrypt the password for the file in the
    database. Once the password is set, the `on_file_set_password` event is fired.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One can retrieve the password on a file by simply calling the `getPassword`
    function on the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a file by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting permissions on files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we discussed how to set a shared password on the file.
    Sometimes, though, more robust security is desired. For that, we can hook into
    the concrete5 permissions model to provide more advanced access control.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will give a user read access to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will assume the existence of a file with the ID of `1` and also
    of a user with an ID of `1`. Adjust those IDs as needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file that we will be applying permissions to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the ID of the user who will be receiving these permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the permissions on the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'concrete5 uses static constants for the permission modes (none, mine, and all).
    These constants are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FilePermissions::PTYPE_NONE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FilePermissions::PTYPE_MINE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FilePermissions::PTYPE_ALL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Working with Users and Permissions"), *Working
    With Users and Permissions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the download URL for a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 can enforce permissions on files as well as keep track of download
    statistics by funneling all download requests through a special URL. This also
    has the added advantage of serving the correct HTTP headers to force the download
    to the user's computer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, we will have to assume the presence of a file with the ID of `1` in
    the file manager. Feel free to change this ID to something appropriate for your
    own website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your favorite code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the download URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the download URL to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 passes the download request through a special URL that is able to
    track permissions, downloads, and also send the correct HTTP headers for the download.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a file by its ID* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the download statistics for a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you serve files using the download function described in the previous recipe,
    then the download numbers would be stored in the database. You can get these statistics
    using just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will assume that a file with an ID of `1` exists in the file manager. Change
    this variable as needed for your own concrete5 website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your preferred code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the ID of the file of which we want to get the statistics for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the statistics array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the contents of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we call the `getDownloadStatistics` method of the file object, concrete5
    will return only the 20 most recent downloads by default. By providing `false`
    as the parameter, we are telling concrete5 to return all of the results.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a file picker to a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building applications in concrete5, you will often find yourself creating
    **CRUD** (create, read, update, delete) interfaces on the dashboard for site editors
    and administrators to manage custom content. In some instances, you may have to
    handle file uploads on these backend forms. A useful tool on such forms would
    be to provide an interface to browse the file manager, rather than using the standard
    HTML file input. concrete5 uses the asset library widget to facilitate this for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a basic HTML form that will send the selected
    file ID from the file manager along with the form submission. The full code for
    this recipe is available for download from the book's website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new single page (if it doesn't already exist) at `/single_pages/upload.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to, add the single page to the sitemap, by visiting `/dashboard/pages/single`
    and entering `upload` as the page path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `upload.php`, load the asset Library helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML form that outputs the file picker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create `/config/site_process.php` if it doesn't already exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check to see if a file upload has occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `if` statement, get the file ID of the chosen file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the chosen file ID to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The asset Library helper will output all of the necessary HTML and JavaScript
    to provide a nice, modal interface for the user to select a file from the file
    manager (or upload a new file to the file manager). Once the user selects a file,
    the file ID will be added to a hidden input which has the name that you provided
    in the `file()` function's second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user submits the form surrounding the file selector, the file ID will
    be included in the `$_POST` array (in this example, it would be in `$_POST['file_id']`),
    which you can then use for further storage or processing on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also bring up a file manager window that is limited to only images.
    Use the following code to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that the only change here is that, instead of calling `file()`
    on the `asset` `library` class, we call `image()`. This will do the same exact
    thing as `file()`, except limit the modal window to contain only images.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Uploading a file to the file manager* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
