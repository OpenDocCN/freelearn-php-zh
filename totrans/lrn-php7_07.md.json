["```php\n$ composer â€“version\n\n```", "```php\n$ composer require monolog/monolog\n\n```", "```php\nUsing version ^1.17 for monolog/monolog\n./composer.json has been created\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n - Installing psr/log (1.0.0)\n Downloading: 100%\n\n - Installing monolog/monolog (1.17.2)\n Downloading: 100%\n...\nWriting lock file\nGenerating autoload files\n\n```", "```php\n$ composer require twig/twig\n\n```", "```php\nUsing version ^1.23 for twig/twig\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n - Installing twig/twig (v1.23.1)\n Downloading: 100%\n\nWriting lock file\nGenerating autoload files\n\n```", "```php\n{\n    \"require\": {\n        \"monolog/monolog\": \"^1.17\",\n        \"twig/twig\": \"^1.23\"\n    }\n}\n```", "```php\n{\n    \"require\": {\n        \"monolog/monolog\": \"^1.17\",\n        \"twig/twig\": \"^1.23\"\n    },\n \"autoload\": {\n \"psr-4\": {\n \"Bookstore\\\\\": \"src\"\n }\n }\n}\n```", "```php\n$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nNothing to install or update\nWriting lock file\nGenerating autoload files\n\n```", "```php\n{\n    \"name\": \"picahielos/bookstore\",\n    \"description\": \"Manages an online bookstore.\",\n    \"minimum-stability\": \"stable\",\n    \"license\": \"Apache-2.0\",\n    \"type\": \"project\",\n    \"authors\": [\n        {\n            \"name\": \"Antonio Lopez\",\n            \"email\": \"antonio.lopez.zapata@gmail.com\"\n        }\n    ],\n    // ...\n}\n```", "```php\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nclass Request {\n    const GET = 'GET';\n    const POST = 'POST';\n\n    private $domain;\n    private $path;\n    private $method;\n\n    public function __construct() {\n        $this->domain = $_SERVER['HTTP_HOST'];\n        $this->path = $_SERVER['REQUEST_URI'];\n        $this->method = $_SERVER['REQUEST_METHOD'];\n    }\n\n    public function getUrl(): string {\n        return $this->domain . $this->path;\n    }\n\n    public function getDomain(): string {\n        return $this->domain;\n    }\n\n    public function getPath(): string {\n        return $this->path;\n    }\n\n    public function getMethod(): string {\n        return $this->method;\n    }\n\n    public function isPost(): bool {\n        return $this->method === self::POST;\n    }\n\n    public function isGet(): bool {\n        return $this->method === self::GET;\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nclass FilteredMap {\n    private $map;\n\n    public function __construct(array $baseMap) {\n        $this->map = $baseMap;\n    }\n\n    public function has(string $name): bool {\n        return isset($this->map[$name]);\n    }\n\n    public function get(string $name) {\n        return $this->map[$name] ?? null;\n    }\n}\n```", "```php\npublic function getInt(string $name) {\n    return (int) $this->get($name);\n}\n\npublic function getNumber(string $name) {\n    return (float) $this->get($name);\n}\n\npublic function getString(string $name, bool $filter = true) {\n    $value = (string) $this->get($name);\n    return $filter ? addslashes($value) : $value;\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nclass Request {\n    // ...\n private $params;\n private $cookies;\n\n    public function __construct() {\n        $this->domain = $_SERVER['HTTP_HOST'];\n        $this->path = explode('?', $_SERVER['REQUEST_URI'])[0];\n        $this->method = $_SERVER['REQUEST_METHOD'];\n $this->params = new FilteredMap(\n array_merge($_POST, $_GET)\n );\n $this->cookies = new FilteredMap($_COOKIE);\n    }\n\n    // ...\n\n public function getParams(): FilteredMap {\n return $this->params;\n }\n\n public function getCookies(): FilteredMap {\n return $this->cookies;\n }\n}\n```", "```php\n$price = $request->getParams()->getNumber('price');\n```", "```php\n$price = $_POST['price'];\n```", "```php\n{\n  \"books/:page\": {\n    \"controller\": \"Book\",\n    \"method\": \"getAllWithPage\",\n    \"params\": {\n      \"page\": \"number\"\n    }\n  }\n}\n```", "```php\npublic function getAllWithPage(int $page): string {\n    //...\n}\n```", "```php\n{\n//...\n  \"books\": {\n    \"controller\": \"Book\",\n    \"method\": \"getAll\"\n  },\n  \"book/:id\": {\n    \"controller\": \"Book\",\n    \"method\": \"get\",\n    \"params\": {\n      \"id\": \"number\"\n    }\n  },\n  \"books/search\": {\n    \"controller\": \"Book\",\n    \"method\": \"search\"\n  }, \n  \"login\": {\n    \"controller\": \"Customer\",\n    \"method\": \"login\"\n  },\n  \"sales\": {\n    \"controller\": \"Sales\",\n    \"method\": \"getByUser\" ,\n    \"login\": true\n  },\n  \"sales/:id\": {\n    \"controller\": \"Sales\",\n    \"method\": \"get\",\n    \"login\": true,\n    \"params\": {\n      \"id\": \"number\"\n    }\n  },\n  \"my-books\": {\n    \"controller\": \"Book\",\n    \"method\": \"getByUser\",\n    \"login\": true\n  }\n}\n```", "```php\n{\n  // ...\n  \"book/:id/buy\": {\n    \"controller\": \"Sales\",\n    \"method\": \"add\",\n    \"login\": true\n    \"params\": {\n      \"id\": \"number\"\n    }\n  },\n  \"book/:id/borrow\": {\n    \"controller\": \"Book\",\n    \"method\": \"borrow\",\n    \"login\": true\n    \"params\": {\n      \"id\": \"number\"\n    }\n  },\n  \"book/:id/return\": {\n    \"controller\": \"Book\",\n    \"method\": \"returnBook\",\n    \"login\": true\n    \"params\": {\n      \"id\": \"number\"\n    }\n  }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nuse Bookstore\\Controllers\\ErrorController;\nuse Bookstore\\Controllers\\CustomerController;\n\nclass Router {\n    private $routeMap;\n    private static $regexPatters = [\n        'number' => '\\d+',\n        'string' => '\\w'\n    ];\n\n    public function __construct() {\n        $json = file_get_contents(\n            __DIR__ . '/../../config/routes.json'\n        );\n        $this->routeMap = json_decode($json, true);\n    }\n\n    public function route(Request $request): string {\n        $path = $request->getPath();\n\n        foreach ($this->routeMap as $route => $info) {\n            $regexRoute = $this->getRegexRoute($route, $info);\n            if (preg_match(\"@^/$regexRoute$@\", $path)) {\n                return $this->executeController(\n                    $route, $path, $info, $request\n                );\n            }\n        }\n\n        $errorController = new ErrorController($request);\n        return $errorController->notFound();\n    }\n}\n```", "```php\npreg_match(\"@^/$regexRoute$@\", $path)\n```", "```php\nprivate function getRegexRoute(\n    string $route,\n    array $info\n): string {\n    if (isset($info['params'])) {\n        foreach ($info['params'] as $name => $type) {\n            $route = str_replace(\n                ':' . $name, self::$regexPatters[$type], $route\n            );\n        }\n    }\n\n    return $route;\n}\n```", "```php\nprivate function extractParams(\n    string $route,\n    string $path\n): array {\n    $params = [];\n\n    $pathParts = explode('/', $path);\n    $routeParts = explode('/', $route);\n\n    foreach ($routeParts as $key => $routePart) {\n        if (strpos($routePart, ':') === 0) {\n            $name = substr($routePart, 1);\n            $params[$name] = $pathParts[$key+1];\n        }\n    }\n\n    return $params;\n}\n```", "```php\nprivate function executeController(\n    string $route,\n    string $path,\n    array $info,\n    Request $request\n): string {\n    $controllerName = '\\Bookstore\\Controllers\\\\'\n        . $info['controller'] . 'Controller';\n    $controller = new $controllerName($request);\n\n    if (isset($info['login']) && $info['login']) {\n        if ($request->getCookies()->has('user')) {\n            $customerId = $request->getCookies()->get('user');\n            $controller->setCustomerId($customerId);\n        } else {\n            $errorController = new CustomerController($request);\n            return $errorController->login();\n        }\n    }\n\n    $params = $this->extractParams($route, $path);\n    return call_user_func_array(\n        [$controller, $info['method']], $params\n    );\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nuse PDO;\n\nclass Db {\n    private static $instance;\n\n    private static function connect(): PDO {\n        $dbConfig = Config::getInstance()->get('db');\n        return new PDO(\n            'mysql:host=127.0.0.1;dbname=bookstore',\n            $dbConfig['user'],\n            $dbConfig['password']\n        );\n    }\n\n    public static function getInstance(){\n        if (self::$instance == null) {\n            self::$instance = self::connect();\n        }\n        return self::$instance;\n    }\n}\n```", "```php\nPDO instance. From now on, in order to get a database connection, we just need to write Db::getInstance().\n```", "```php\n<?php\n\nnamespace Bookstore\\Models;\n\nuse PDO;\n\nabstract class AbstractModel {\n    private $db;\n\n    public function __construct(PDO $db) {\n        $this->db = $db;\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Exceptions;\n\nuse Exception;\n\nclass DbException extends Exception {\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Models;\n\nuse Bookstore\\Domain\\Customer;\nuse Bookstore\\Domain\\Customer\\CustomerFactory;\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass CustomerModel extends AbstractModel {\n    public function get(int $userId): Customer {\n        $query = 'SELECT * FROM customer WHERE customer_id = :user';\n        $sth = $this->db->prepare($query);\n        $sth->execute(['user' => $userId]);\n\n        $row = $sth->fetch();\n\n        if (empty($row)) {\n            throw new NotFoundException();\n        }\n\n        return CustomerFactory::factory(\n            $row['type'],\n            $row['id'],\n            $row['firstname'],\n            $row['surname'],\n            $row['email']\n        );\n    }\n\n    public function getByEmail(string $email): Customer {\n        $query = 'SELECT * FROM customer WHERE email = :user';\n        $sth = $this->db->prepare($query);\n        $sth->execute(['user' => $email]);\n\n        $row = $sth->fetch();\n\n        if (empty($row)) {\n            throw new NotFoundException();\n        }\n\n        return CustomerFactory::factory(\n            $row['type'],\n            $row['id'],\n            $row['firstname'],\n            $row['surname'],\n            $row['email']\n        );\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Book {\n    private $id;\n    private $isbn;\n    private $title;\n    private $author;\n    private $stock;\n    private $price;\n\n    public function getId(): int {\n        return $this->id;\n    }\n\n    public function getIsbn(): string {\n        return $this->isbn;\n    }\n\n    public function getTitle(): string {\n        return $this->title;\n    }\n\n    public function getAuthor(): string {\n        return $this->author;\n    }\n\n    public function getStock(): int {\n        return $this->stock;\n    }\n\n    public function getCopy(): bool {\n        if ($this->stock < 1) {\n            return false;\n        } else {\n            $this->stock--;\n            return true;\n        }\n    }\n\n    public function addCopy() {\n        $this->stock++;\n    }\n\n    public function getPrice(): float {\n        return $this->price;\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Models;\n\nuse Bookstore\\Domain\\Book;\nuse Bookstore\\Exceptions\\DbException;\nuse Bookstore\\Exceptions\\NotFoundException;\nuse PDO;\n\nclass BookModel extends AbstractModel {\n    const CLASSNAME = '\\Bookstore\\Domain\\Book';\n\n    public function get(int $bookId): Book {\n        $query = 'SELECT * FROM book WHERE id = :id';\n        $sth = $this->db->prepare($query);\n        $sth->execute(['id' => $bookId]);\n\n $books = $sth->fetchAll(\n PDO::FETCH_CLASS, self::CLASSNAME\n );\n        if (empty($books)) {\n            throw new NotFoundException();\n        }\n\n        return $books[0];\n    }\n}\n```", "```php\npublic function getAll(int $page, int $pageLength): array {\n    $start = $pageLength * ($page - 1);\n\n    $query = 'SELECT * FROM book LIMIT :page, :length';\n    $sth = $this->db->prepare($query);\n    $sth->bindParam('page', $start, PDO::PARAM_INT);\n    $sth->bindParam('length', $pageLength, PDO::PARAM_INT);\n    $sth->execute();\n\n    return $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);\n}\n\npublic function getByUser(int $userId): array {\n    $query = <<<SQL\nSELECT b.*\nFROM borrowed_books bb LEFT JOIN book b ON bb.book_id = b.id\nWHERE bb.customer_id = :id\nSQL;\n    $sth = $this->db->prepare($query);\n    $sth->execute(['id' => $userId]);\n\n    return $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);\n}\n\npublic function search(string $title, string $author): array {\n    $query = <<<SQL\nSELECT * FROM book\nWHERE title LIKE :title AND author LIKE :author\nSQL;\n    $sth = $this->db->prepare($query);\n    $sth->bindValue('title', \"%$title%\");\n    $sth->bindValue('author', \"%$author%\");\n    $sth->execute();\n\n    return $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);\n}\n```", "```php\npublic function borrow(Book $book, int $userId) {\n    $query = <<<SQL\nINSERT INTO borrowed_books (book_id, customer_id, start)\nVALUES(:book, :user, NOW())\nSQL;\n    $sth = $this->db->prepare($query);\n    $sth->bindValue('book', $book->getId());\n    $sth->bindValue('user', $userId);\n    if (!$sth->execute()) {\n        throw new DbException($sth->errorInfo()[2]);\n    }\n\n    $this->updateBookStock($book);\n}\n\npublic function returnBook(Book $book, int $userId) {\n    $query = <<<SQL\nUPDATE borrowed_books SET end = NOW()\nWHERE book_id = :book AND customer_id = :user AND end IS NULL \nSQL;\n    $sth = $this->db->prepare($query);\n    $sth->bindValue('book', $book->getId());\n    $sth->bindValue('user', $userId);\n    if (!$sth->execute()) {\n        throw new DbException($sth->errorInfo()[2]);\n    }\n\n    $this->updateBookStock($book);\n}\n\nprivate function updateBookStock(Book $book) {\n    $query = 'UPDATE book SET stock = :stock WHERE id = :id';\n    $sth = $this->db->prepare($query);\n    $sth->bindValue('id', $book->getId());\n    $sth->bindValue('stock', $book->getStock());\n    if (!$sth->execute()) {\n        throw new DbException($sth->errorInfo()[2]);\n    }\n}\n```", "```php\nborrow and returnBook methods.\n```", "```php\n<?php\n\nnamespace Bookstore\\Domain;\n\nclass Sale {\n    private $id;\n    private $customer_id;\n    private $books;\n    private $date;\n\n    public function setCustomerId(int $customerId) {\n        $this->customer_id = $customerId;\n    }\n\n    public function getId(): int {\n        return $this->id;\n    }\n\n    public function getCustomerId(): int {\n        return $this->customer_id;\n    }\n\n    public function getBooks(): array {\n        return $this->books;\n    }\n\n    public function getDate(): string {\n        return $this->date;\n    }\n\n    public function addBook(int $bookId, int $amount = 1) {\n        if (!isset($this->books[$bookId])) {\n            $this->books[$bookId] = 0;\n        }\n        $this->books[$bookId] += $amount;\n    }\n\n    public function setBooks(array $books) {\n        $this->books = $books;\n    }\n}\n```", "```php\n<?php\nnamespace Bookstore\\Models;\n\nuse Bookstore\\Domain\\Sale;\nuse Bookstore\\Exceptions\\DbException;\nuse PDO;\n\nclass SaleModel extends AbstractModel {\n    const CLASSNAME = '\\Bookstore\\Domain\\Sale';\n\n    public function getByUser(int $userId): array {\n        $query = 'SELECT * FROM sale WHERE s.customer_id = :user';\n        $sth = $this->db->prepare($query);\n        $sth->execute(['user' => $userId]);\n\n        return $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);\n    }\n\n    public function get(int $saleId): Sale {\n        $query = 'SELECT * FROM sale WHERE id = :id';\n        $sth = $this->db->prepare($query);\n        $sth->execute(['id' => $saleId]);\n        $sales = $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);\n\n        if (empty($sales)) {\n            throw new NotFoundException('Sale not found.');\n        }\n        $sale = array_pop($sales);\n\n        $query = <<<SQL\nSELECT b.id, b.title, b.author, b.price, sb.amount as stock, b.isbn\nFROM sale s\nLEFT JOIN sale_book sb ON s.id = sb.sale_id\nLEFT JOIN book b ON sb.book_id = b.id\nWHERE s.id = :id\nSQL;\n        $sth = $this->db->prepare($query);\n        $sth->execute(['id' => $saleId]);\n        $books = $sth->fetchAll(\n            PDO::FETCH_CLASS, BookModel::CLASSNAME\n        );\n\n        $sale->setBooks($books);\n        return $sale;\n    }\n}\n```", "```php\npublic function create(Sale $sale) {\n $this->db->beginTransaction();\n\n    $query = <<<SQL\nINSERT INTO sale(customer_id, date)\nVALUES(:id, NOW())\nSQL;\n    $sth = $this->db->prepare($query);\n    if (!$sth->execute(['id' => $sale->getCustomerId()])) {\n $this->db->rollBack();\n        throw new DbException($sth->errorInfo()[2]);\n    }\n\n $saleId = $this->db->lastInsertId();\n    $query = <<<SQL\nINSERT INTO sale_book(sale_id, book_id, amount)\nVALUES(:sale, :book, :amount)\nSQL;\n    $sth = $this->db->prepare($query);\n    $sth->bindValue('sale', $saleId);\n    foreach ($sale->getBooks() as $bookId => $amount) {\n        $sth->bindValue('book', $bookId);\n        $sth->bindValue('amount', $amount);\n        if (!$sth->execute()) {\n $this->db->rollBack();\n            throw new DbException($sth->errorInfo()[2]);\n        }\n    }\n\n $this->db->commit();\n}\n```", "```php\n$loader = new Twig_Loader_Filesystem(__DIR__ . '/views');\n$twig = new Twig_Environment($loader);\n```", "```php\n$bookModel = new BookModel(Db::getInstance());\n$book = $bookModel->get(1);\n\n$params = ['book' => $book];\necho $twig->loadTemplate('book.twig')->render($params);\n```", "```php\n<h2>{{ book.title }}</h2>\n<h3>{{ book.author }}</h3>\n\n<hr>\n\n<p>\n    <strong>ISBN</strong> {{ book.isbn }}\n</p>\n<p>\n    <strong>Stock</strong> {{ book.stock }}\n</p>\n<p>\n    <strong>Price</strong> {{ book.price|number_format(2) }} â‚¬\n</p>\n\n<hr>\n\n<h3>Actions</h3>\n\n<form method=\"post\" action=\"/book/{{ book.id }}/borrow\">\n    <input type=\"submit\" value=\"Borrow\">\n</form>\n\n<form method=\"post\" action=\"/book/{{ book.id }}/buy\">\n    <input type=\"submit\" value=\"Buy\">\n</form>\n```", "```php\n<html>\n<head>\n <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n    <div style=\"border: solid 1px\">\n        <a href=\"/books\">Books</a>\n        <a href=\"/sales\">My Sales</a>\n        <a href=\"/my-books\">My Books</a>\n        <hr>\n        <form action=\"/books/search\" method=\"get\">\n            <label>Title</label>\n            <input type=\"text\" name=\"title\">\n            <label>Author</label>\n            <input type=\"text\" name=\"author\">\n            <input type=\"submit\" value=\"Search\">\n        </form>\n    </div>\n {% block content %}{% endblock %}\n</body>\n</html>\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n {{ book.title }}\n{% endblock %}\n\n{% block content %}\n<h2>{{ book.title }}</h2>\n//...\n</form>\n{% endblock %}\n\n```", "```php\n$bookModel = new BookModel(Db::getInstance());\n$books = $bookModel->getAll(1, 3);\n\n$params = ['books' => $books, 'currentPage' => 2];\necho $twig->loadTemplate('books.twig')->render($params);\n```", "```php\nbooks.twig template, sending an array of books from page number 1, and showing 3 books per page. This array, though, might not always return 3 books, maybe because there are only 2 books in the database. We should then use a loop to iterate the list instead of assuming the size of the array. In Twig, you can emulate a foreach loop using {% for <element> in <array> %} in order to iterate an array. Let's use it for your views/books.twig:\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n    Books\n{% endblock %}\n\n{% block content %}\n<table>\n    <thead>\n        <th>Title</th>\n        <th>Author</th>\n        <th></th>\n    </thead>\n{% for book in books %}\n    <tr>\n        <td>{{ book.title }}</td>\n        <td>{{ book.author }}</td>\n        <td><a href=\"/book/{{ book.id }}\">View</a></td>\n    </tr>\n{% endfor %}\n</table>\n{% endblock %}\n```", "```php\n{% if currentPage != 1 %}\n    <a href=\"/books/{{ currentPage - 1 }}\">Previous</a>\n{% endif %}\n{% if not lastPage %}\n    <a href=\"/books/{{ currentPage + 1 }}\">Next</a>\n{% endif %}\n```", "```php\n$saleModel = new SaleModel(Db::getInstance());\n$sales = $saleModel->getByUser(1);\n\n$params = ['sales' => $sales];\necho $twig->loadTemplate('sales.twig')->render($params);\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n    My sales\n{% endblock %}\n\n{% block content %}\n<table>\n    <thead>\n        <th>Id</th>\n        <th>Date</th>\n    </thead>\n{% for sale in sales %}\n    <tr>\n        <td>{{ sale.id}}</td>\n        <td>{{ sale.date }}</td>\n        <td><a href=\"/sales/{{ sale.id }}\">View</a></td>\n    </tr>\n{% endfor %}\n</table>\n{% endblock %}\n```", "```php\n$saleModel = new SaleModel(Db::getInstance());\n$sale = $saleModel->get(1);\n\n$params = ['sale' => $sale];\necho $twig->loadTemplate('sale.twig')->render($params);\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n    Sale {{ sale.id }}\n{% endblock %}\n\n{% block content %}\n<table>\n    <thead>\n        <th>Title</th>\n        <th>Author</th>\n        <th>Amount</th>\n        <th>Price</th>\n        <th></th>\n    </thead>\n    {% for book in sale.books %}\n        <tr>\n            <td>{{ book.title }}</td>\n            <td>{{ book.author }}</td>\n            <td>{{ book.stock }}</td>\n            <td>{{ (book.price * book.stock)|number_format(2) }} â‚¬</td>\n            <td><a href=\"/book/{{ book.id }}\">View</a></td>\n        </tr>\n    {% endfor %}\n</table>\n{% endblock %}\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n    Error\n{% endblock %}\n\n{% block content %}\n    <h2>Error: {{ errorMessage }}</h2>\n{% endblock %}\n```", "```php\n{% extends 'layout.twig' %}\n\n{% block title %}\n    Login\n{% endblock %}\n\n{% block content %}\n {% if errorMessage is defined %}\n        <strong>{{ errorMessage }}</strong>\n    {% endif %}\n    <form action=\"/login\" method=\"post\">\n        <label>Email</label>\n        <input type=\"text\" name=\"email\">\n        <input type=\"submit\">\n    </form>\n{% endblock %}\n```", "```php\n<?php\n\nuse Bookstore\\Core\\Router;\nuse Bookstore\\Core\\Request;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$router = new Router();\n$response = $router->route(new Request());\necho $response;\n\n```", "```php\n<?php\n\nnamespace Bookstore\\Controllers;\n\nuse Bookstore\\Core\\Config;\nuse Bookstore\\Core\\Db;\nuse Bookstore\\Core\\Request;\nuse Monolog\\Logger;\nuse Twig_Environment;\nuse Twig_Loader_Filesystem;\nuse Monolog\\Handler\\StreamHandler;\n\nabstract class AbstractController {\n    protected $request;\n    protected $db;\n    protected $config;\n    protected $view;\n    protected $log;\n\n    public function __construct(Request $request) {\n        $this->request = $request;\n        $this->db = Db::getInstance();\n        $this->config = Config::getInstance();\n\n        $loader = new Twig_Loader_Filesystem(\n            __DIR__ . '/../../views'\n        );\n        $this->view = new Twig_Environment($loader);\n\n        $this->log = new Logger('bookstore');\n        $logFile = $this->config->get('log');\n        $this->log->pushHandler(\n            new StreamHandler($logFile, Logger::DEBUG)\n        );\n    }\n\n    public function setCustomerId(int $customerId) {\n        $this->customerId = $customerId;\n    }\n}\n```", "```php\nprotected function render(string $template, array $params): string {\n    return $this->view->loadTemplate($template)->render($params);\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Controllers;\n\nclass ErrorController extends AbstractController {\n    public function notFound(): string {\n        $properties = ['errorMessage' => 'Page not found!'];\n        return $this->render('error.twig', $properties);\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Controllers;\n\nuse Bookstore\\Exceptions\\NotFoundException;\nuse Bookstore\\Models\\CustomerModel;\n\nclass CustomerController extends AbstractController {\n    public function login(string $email): string {\n        if (!$this->request->isPost()) {\n return $this->render('login.twig', []);\n        }\n\n        $params = $this->request->getParams();\n\n        if (!$params->has('email')) {\n            $params = ['errorMessage' => 'No info provided.'];\n return $this->render('login.twig', $params);\n        }\n\n        $email = $params->getString('email');\n        $customerModel = new CustomerModel($this->db);\n\n        try {\n            $customer = $customerModel->getByEmail($email);\n        } catch (NotFoundException $e) {\n            $this->log->warn('Customer email not found: ' . $email);\n            $params = ['errorMessage' => 'Email not found.'];\n return $this->render('login.twig', $params);\n        }\n\n        setcookie('user', $customer->getId());\n\n        $newController = new BookController($this->request);\n return $newController->getAll();\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Controllers;\n\nuse Bookstore\\Models\\BookModel;\n\nclass BookController extends AbstractController {\n    const PAGE_LENGTH = 10;\n\n    public function getAllWithPage($page): string {\n        $page = (int)$page;\n        $bookModel = new BookModel($this->db);\n\n        $books = $bookModel->getAll($page, self::PAGE_LENGTH);\n\n        $properties = [\n            'books' => $books,\n            'currentPage' => $page,\n            'lastPage' => count($books) < self::PAGE_LENGTH\n        ];\n        return $this->render('books.twig', $properties);\n    }\n\n    public function getAll(): string {\n        return $this->getAllWithPage(1);\n    }\n\n    public function get(int $bookId): string {\n        $bookModel = new BookModel($this->db);\n\n        try {\n            $book = $bookModel->get($bookId);\n        } catch (\\Exception $e) {\n            $this->log->error(\n                'Error getting book: ' . $e->getMessage()\n            );\n            $properties = ['errorMessage' => 'Book not found!'];\n            return $this->render('error.twig', $properties);\n        }\n\n        $properties = ['book' => $book];\n        return $this->render('book.twig', $properties);\n    }\n\n    public function getByUser(): string {\n        $bookModel = new BookModel($this->db);\n\n        $books = $bookModel->getByUser($this->customerId);\n\n        $properties = [\n            'books' => $books,\n            'currentPage' => 1,\n            'lastPage' => true\n        ];\n        return $this->render('books.twig', $properties);\n    }\n}\n```", "```php\npublic function search(): string {\n    $title = $this->request->getParams()->getString('title');\n    $author = $this->request->getParams()->getString('author');\n\n    $bookModel = new BookModel($this->db);\n    $books = $bookModel->search($title, $author);\n\n    $properties = [\n        'books' => $books,\n        'currentPage' => 1,\n        'lastPage' => true\n    ];\n    return $this->render('books.twig', $properties);\n}\n```", "```php\npublic function borrow(int $bookId): string {\n    $bookModel = new BookModel($this->db);\n\n    try {\n        $book = $bookModel->get($bookId);\n    } catch (NotFoundException $e) {\n $this->log->warn('Book not found: ' . $bookId);\n        $params = ['errorMessage' => 'Book not found.'];\n        return $this->render('error.twig', $params);\n    }\n\n    if (!$book->getCopy()) {\n        $params = [\n            'errorMessage' => 'There are no copies left.'\n       ];\n        return $this->render('error.twig', $params);\n    }\n\n    try {\n        $bookModel->borrow($book, $this->customerId);\n    } catch (DbException $e) {\n $this->log->error(\n 'Error borrowing book: ' . $e->getMessage()\n        );\n        $params = ['errorMessage' => 'Error borrowing book.'];\n        return $this->render('error.twig', $params);\n    }\n\n    return $this->getByUser();\n}\n\npublic function returnBook(int $bookId): string {\n    $bookModel = new BookModel($this->db);\n\n    try {\n        $book = $bookModel->get($bookId);\n    } catch (NotFoundException $e) {\n $this->log->warn('Book not found: ' . $bookId);\n        $params = ['errorMessage' => 'Book not found.'];\n        return $this->render('error.twig', $params);\n    }\n\n    $book->addCopy();\n\n    try {\n        $bookModel->returnBook($book, $this->customerId);\n    } catch (DbException $e) {\n $this->log->error(\n 'Error returning book: ' . $e->getMessage()\n        );\n        $params = ['errorMessage' => 'Error returning book.'];\n        return $this->render('error.twig', $params);\n    }\n\n    return $this->getByUser();\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Controllers;\n\nuse Bookstore\\Domain\\Sale;\nuse Bookstore\\Models\\SaleModel;\n\nclass SalesController extends AbstractController {\n    public function add($id): string {\n        $bookId = (int)$id;\n        $salesModel = new SaleModel($this->db);\n\n        $sale = new Sale();\n        $sale->setCustomerId($this->customerId);\n        $sale->addBook($bookId);\n\n        try {\n            $salesModel->create($sale);\n        } catch (\\Exception $e) {\n            $properties = [\n                'errorMessage' => 'Error buying the book.'\n           ];\n            $this->log->error(\n                'Error buying book: ' . $e->getMessage()\n            );\n            return $this->render('error.twig', $properties);\n        }\n\n        return $this->getByUser();\n    }\n\n    public function getByUser(): string {\n        $salesModel = new SaleModel($this->db);\n\n        $sales = $salesModel->getByUser($this->customerId);\n\n        $properties = ['sales' => $sales];\n        return $this->render('sales.twig', $properties);\n    }\n\n    public function get($saleId): string {\n        $salesModel = new SaleModel($this->db);\n\n        $sale = $salesModel->get($saleId);\n\n        $properties = ['sale' => $sale];\n        return $this->render('sale.twig', $properties);\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Utils;\n\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass DependencyInjector {\n    private $dependencies = [];\n\n    public function set(string $name, $object) {\n        $this->dependencies[$name] = $object;\n    }\n\n    public function get(string $name) {\n        if (isset($this->dependencies[$name])) {\n            return $this->dependencies[$name];\n        }\n        throw new NotFoundException(\n            $name . ' dependency not found.'\n        );\n    }\n}\n```", "```php\n<?php\n\nnamespace Bookstore\\Core;\n\nuse Bookstore\\Exceptions\\NotFoundException;\n\nclass Config {\n    private $data;\n\n    public function __construct() {\n        $json = file_get_contents(\n            __DIR__ . '/../../config/app.json'\n        );\n        $this->data = json_decode($json, true);\n    }\n\n    public function get($key) {\n        if (!isset($this->data[$key])) {\n            throw new NotFoundException(\"Key $key not in config.\");\n        }\n        return $this->data[$key];\n    }\n}\n```", "```php\n$config = new Config();\n\n$dbConfig = $config->get('db');\n$db = new PDO(\n    'mysql:host=127.0.0.1;dbname=bookstore',\n    $dbConfig['user'],\n    $dbConfig['password']\n);\n\n$loader = new Twig_Loader_Filesystem(__DIR__ . '/../../views');\n$view = new Twig_Environment($loader);\n\n$log = new Logger('bookstore');\n$logFile = $config->get('log');\n$log->pushHandler(new StreamHandler($logFile, Logger::DEBUG));\n\n$di = new DependencyInjector();\n$di->set('PDO', $db);\n$di->set('Utils\\Config', $config);\n$di->set('Twig_Environment', $view);\n$di->set('Logger', $log);\n\n$router = new Router($di);\n//...\n```", "```php\npublic function __construct(\n    DependencyInjector $di,\n    Request $request\n) {\n    $this->request = $request;\n    $this->di = $di;\n\n    $this->db = $di->get('PDO');\n    $this->log = $di->get('Logger');\n    $this->view = $di->get('Twig_Environment');\n    $this->config = $di->get('Utils\\Config');\n\n    $this->customerId = $_COOKIE['id'];\n}\n```", "```php\npublic function __construct(DependencyInjector $di) {\n    $this->di = $di;\n\n    $json = file_get_contents(__DIR__ . '/../../config/routes.json');\n    $this->routeMap = json_decode($json, true);\n}\n```", "```php\npublic function route(Request $request): string {\n    $path = $request->getPath();\n\n    foreach ($this->routeMap as $route => $info) {\n        $regexRoute = $this->getRegexRoute($route, $info);\n        if (preg_match(\"@^/$regexRoute$@\", $path)) {\n            return $this->executeController(\n                $route, $path, $info, $request\n            );\n        }\n    }\n\n $errorController = new ErrorController(\n $this->di,\n $request\n );\n    return $errorController->notFound();\n}\n\nprivate function executeController(\n    string $route,\n    string $path,\n    array $info,\n    Request $request\n): string {\n    $controllerName = '\\Bookstore\\Controllers\\\\' \n        . $info['controller'] . 'Controller';\n $controller = new $controllerName($this->di, $request);\n\n    if (isset($info['login']) && $info['login']) {\n        if ($request->getCookies()->has('user')) {\n            $customerId = $request->getCookies()->get('user');\n            $controller->setCustomerId($customerId);\n        } else {\n $errorController = new CustomerController(\n $this->di,\n $request\n );\n            return $errorController->login();\n        }\n    }\n\n    $params = $this->extractParams($route, $path);\n    return call_user_func_array(\n        [$controller, $info['method']], $params\n    );\n}\n```", "```php\n$newController = new BookController($this->di, $this->request);\n```"]