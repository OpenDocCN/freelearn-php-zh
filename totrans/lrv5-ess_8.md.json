["```php\n$associative = [\n  'foo' => 1,\n  'bar' => 2,\n];\n$multidimensional = [\n  'foo' => [\n      'bar' => 123,\n  ],\n];\n$list_key_values = [\n  ['foo' => 'bar'], \n  ['foo' => 'baz'],\n];\n```", "```php\n    array_get($multidimensional, 'foo.bar', 'default');\n    // Returns 123\n    ```", "```php\n    array_forget($multidimensional, 'foo.bar');\n    // $multidimensional == ['foo' => []];\n    ```", "```php\n    array_pull($multidimensional, 'foo.bar');\n    // Returns 123 and removes the value from the array\n    ```", "```php\n    array_set($multidimensional, 'foo.baz', '456');\n    // $multidimensional == ['foo' => ['bar' => 123, 'baz' => '456']];\n    ```", "```php\n    array_dot($multidimensional);\n    // Returns ['foo.bar' => 123];\n    array_dot($list_key_values);\n    // Returns ['0.foo' => 'bar', '1.foo' => 'baz'];\n    ```", "```php\n    array_except($associative, ['foo']);\n    // Returns ['bar' => 2];\n    ```", "```php\n    array_only($associative, ['bar']);\n    // Returns ['bar' => 2];\n    ```", "```php\n    array_fetch($list_key_values, 'foo');\n    // Returns ['bar', 'baz'];\n    ```", "```php\n    array_first($associative, function($key, $value) {\n       return $key == 'foo';\n    });\n    // Returns 1\n    ```", "```php\n    array_flatten($multidimensional);\n    // Returns [123]\n    ```", "```php\n    array_pluck($list_key_values, 'foo');\n    // Returns ['bar', 'baz'];\n    ```", "```php\n    head($array); // Aliases to reset($array)\n    last($array); // Aliases to end($array)\n    ```", "```php\n    Str::is('projects/*', 'projects/php/'); // Returns true\n    ```", "```php\n    Str::contains('Getting Started With Laravel', 'Python');\n    // returns false\n    ```", "```php\n    Str::startsWith('.gitignore', '.git'); // Returns true\n    Str::endsWith('index.php', ['html', 'php']); // Returns true\n    ```", "```php\n    Str::slug('A/B testing is fun!');\n    // Returns \"ab-testing-is-fun\"\n    ```", "```php\n    Str::title('getting started with laravel');\n    // Returns 'Getting Started With Laravel'\n    ```", "```php\n    Str::finish('/one/trailing/slash', '/');\n    Str::finish('/one/trailing/slash/', '/');\n    // Both will return '/one/trailing/slash/'\n    ```", "```php\n    Str::limit($value, $limit = 100, $end = '...')\n    ```", "```php\n    Str::words($value, $words = 100, $end = '...')\n    ```", "```php\n    Str::plural('cat');\n    // Returns 'cats'\n    Str::plural('fish');\n    // Returns 'fish'\n    Str::plural('monkey');\n    // Returns 'monkeys'\n\n    ```", "```php\n    Str::singular('elves');\n    // Returns 'elf'\n    ```", "```php\nStorage::exists('foo.txt');\n```", "```php\nStorage::disk('local')->exists('foo.txt');\n```", "```php\nStorage::put('foo.txt', $contents);\n$contents = Storage::get('foo.txt');\n```", "```php\nStorage::prepend('foo.txt', 'Text to prepend.');\nStorage::append('foo.txt', 'Text to append.');\n```", "```php\nStorage::copy($source, $destination);\nStorage::move($source, $destination);\n```", "```php\nStorage::delete('foo.txt');\nStorage::delete(['foo.txt', 'bar.txt']);\n```", "```php\nStorage::size('foo.txt');\nStorage::lastModified('foo.txt');\n```", "```php\nStorage::files('path/to/directory');\n```", "```php\nStorage::allFiles('path/to/directory');\n```", "```php\nStorage::makeDirectory('path/to/directory');\n```", "```php\nStorage::deleteDirectory('path/to/directory');\n```", "```php\n{!! Form::open(['files' => true) !!}\n```", "```php\n{!! Form::file('avatar') !!}\n```", "```php\npublic function store(Request $request){$file = $request->file('avatar');}\n```", "```php\npublic function store(Request $request)\n{\n  $file = $request->file('avatar');\n  $file->move(storage_path('uploads/avatars'));\n}\n```", "```php\n$path = $request->file('avatar')->getRealPath();\n```", "```php\n$name = $request->file('avatar')->getClientOriginalName();\n```", "```php\n$ext = $request->file('avatar')->getClientOriginalExtension();\n```", "```php\n    Mail::send('email.view', $data, function($message) {});\n    ```", "```php\n    Mail::send(array('html.view', 'text.view'), $data, $callback);\n    ```", "```php\n    Mail::later(5, 'email.view', $data, function($message) {});\n    ```", "```php\n<p>Product Screenshot:</p>\n<p>{!! $message->embed('screenshot.jpg') !!}</p>\n```", "```php\n$post = App\\Post::find(123);\necho $post->created_at->diffForHumans(); \n```", "```php\nclass Post extends Model {\n  // ...\n  protected $dates = [\n    'published_at',\n    'deleted_at',\n  ];\n}\n\n```", "```php\n$ php artisan make:command CommandName --handler --queued\n```", "```php\nQueue::push(new SendConfirmationEmail($order));\n```", "```php\npublic function purchase(Product $product)\n{\n  // Create order\n  $this->dispatch(new SendConfirmationEmail($order));\n}\n```", "```php\n<?php namespace App\\Commands;\n\nuse App\\Order;\nuse Illuminate\\Contracts\\Queue\\ShouldBeQueued; \nuse Illuminate\\Queue\\InteractsBeQueued;\nuse Illuminate\\Queue\\SerializesModels; \n\nclass SendConfirmationEmail extends Command implements ShouldBeQueued {\n\n  use InteractsWithQueue, SerializesModels;\n\n  public $order;\n\n  public function __construct(Order $order) {\n    $this->order = $order;\n  }\n}\n```", "```php\n<?php namespace App\\Handlers\\Commands;\n\nuse App\\Commands\\SendConfirmationEmail;\nuse Illuminate\\Contracts\\Mail\\Mailer;\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass SendConfirmationEmailHandler {\n\n  public function __construct(Mailer $mail) {\n    $this->mail = $mail;\n  }\n\n  public function handle(SendConfirmationEmail $command) {\n    $order = $command->order;\n    $data = compact('order');\n    $this->mail->send('emails.order.confirmation', $data, function($message) use ($order) {\n      $message->subject('Your order confirmation');\n      $message->to(\n        $order->customer->email,\n        $order->customer->name\n      );\n    });\n  }\n}\n```", "```php\n    $ php artisan queue:listen\n    ```", "```php\n    $ php artisan queue:listen connection\n    ```", "```php\n    $ php artisan queue:listen important,not-so-important\n    ```", "```php\n    Queue::failing(function($job, $data) {\n      // Send email notification\n    });\n    ```", "```php\n    $ php artisan queue:failed-table // Create the table \n    $ php artisan queue:failed // View the failed jobs\n    ```", "```php\nRoute::post('queue/receive', function() {\n  return Queue::marshal();\n});\n```", "```php\n$ php artisan queue:subscribe queue_name http://yourapp.example.com/queue/receive\n```"]