- en: Chapter 9. Eliminating Stress with the Help of Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章. 利用自动化消除压力
- en: 'So far, we''ve covered almost every aspect of what testing in practice is.
    We''ve learned what can be done with Codeception at all the levels of testing:
    unit, functional, and acceptance. We''ve covered additional resources on how to
    improve and debug your tests while looking at architectural choices and long-term
    considerations.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了测试实践中几乎每个方面的内容。我们学习了在测试的所有级别（单元、功能、验收）上可以使用 Codeception 做些什么。我们还涵盖了如何通过考虑架构选择和长期考虑来改进和调试测试的额外资源。
- en: 'To keep it short, in this chapter, we''re going to take the final step, which
    is nowadays considered as the best practice: continuous integration.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在本章中，我们将采取最终一步，这在当今被认为是最佳实践：持续集成。
- en: We are going to understand what a continuous integration system is, and what
    the choices that we have are. We'll also start working with Jenkins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将了解什么是持续集成系统，以及我们有哪些选择。我们还将开始使用 Jenkins。
- en: 'In this chapter, we will discuss everything that we need to install and configure.
    We will run our builds and obtain the required level of automation for our project.
    We''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论我们需要安装和配置的所有内容。我们将运行我们的构建，并为我们的项目获得所需的自动化水平。我们将涵盖以下主题：
- en: Automating the build process
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建过程
- en: Creating the required build files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建所需的构建文件
- en: Configuring the Jenkins build
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Jenkins 构建
- en: Going forward
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展望未来
- en: Automating the build process
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化构建过程
- en: There are two aspects that you should always take into consideration when planning
    and implementing your tests. Firstly, 100 percent code coverage won't help you
    in removing the possibility of having or introducing a bug, which means that exploratory
    manual testing will always be needed, and it will have to be factored in while
    writing your initial draft of the master test plan. Secondly, until now, all the
    tests and reports that we've generated for such a small project can be run manually
    by whoever changes the code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划和实施测试时，你应该始终考虑两个方面的因素。首先，100% 的代码覆盖率并不能帮助你消除出现或引入错误的可能性，这意味着探索性手动测试始终是必要的，并且它必须在编写初始测试计划草案时考虑进去。其次，到目前为止，我们为这样一个小型项目生成的所有测试和报告都可以由更改代码的任何人手动运行。
- en: When the size of your code starts to grow and you start to support hundreds
    of classes and multi-faceted frontend functionalities, when your code lives past
    the first month and more than one developer will need to access it over and over
    again, all the knowledge related to tests and how they work or what kind of information
    can be extracted from them will become more and more difficult to maintain. The
    worst part is that most likely nobody will use it without any struggle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码规模开始增长，你开始支持数百个类和多方面的前端功能时，当你的代码存活超过第一个月，并且不止一个开发者需要反复访问它时，所有与测试及其工作方式或可以从它们中提取的信息相关的知识将变得越来越难以维护。最糟糕的是，很可能没有人会不费吹灰之力地使用它。
- en: 'Here, you have two choices: accept the fate that your tests will be long forgotten
    and nobody will know what''s been covered and what needs to be covered, or start
    automating all this by forcing some sort of automated code revision, which might
    trigger reports and e-mails to warn about anything that can potentially go wrong,
    or has already gone wrong.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你有两个选择：接受你的测试最终会被遗忘的命运，没有人会知道已经覆盖了什么以及还需要覆盖什么，或者通过强制某种形式的自动化代码修订来开始自动化所有这些，这可能会触发报告和电子邮件来警告可能发生或已经发生的问题。
- en: Introducing continuous integration systems
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍持续集成系统
- en: '**Extreme Programming** (**XP**) has introduced the concept of **continuous
    integration** (**CI**). Nowadays, it''s used in many companies as a part of their
    QA procedures, regardless of the practice adopted.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**极限编程**（**XP**）引入了**持续集成**（**CI**）的概念。如今，它被许多公司作为其 QA 流程的一部分使用，无论采用何种实践。'
- en: Whether frequent integration is better than continuous integration is something
    I'd prefer to leave out of this discussion. The main difference between the two
    is based on the frequency at which the integration happens. On top of this, CI
    has been conceived to be a part of TDD, and it is specifically aimed at running
    tests before merging any features into the active branch. This is done to ensure
    that the new functionality won't break the existing one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 频繁集成是否比持续集成更好，我更愿意将这个问题留到讨论之外。两者之间的主要区别在于集成的频率。在此基础上，CI 被构想为 TDD 的一部分，并且专门针对在将任何功能合并到活动分支之前运行测试。这样做是为了确保新功能不会破坏现有功能。
- en: Systems like Jenkins (formerly known as Hudson), Bamboo, CruiseControl, and
    Travis, have been created so that the work of the different developers can be
    *integrated* and tested before being shipped. This also ensures that certain quality
    standards are reached so that we can avoid introducing incoherence in the code
    base, and we can report the results to the developers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 Jenkins（以前称为 Hudson）、Bamboo、CruiseControl 和 Travis 这样的系统，是为了在发货前将不同开发者的工作集成和测试而创建的。这也确保了达到一定的质量标准，以避免在代码库中引入不一致性，并且可以将结果报告给开发者。
- en: These software systems perform a multitude of tasks. They're made in such a
    way that they can support any programming language and testing framework.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件系统执行了众多任务。它们被设计成可以支持任何编程语言和测试框架。
- en: 'Usually, they''re built for providing a flexible way of defining your integration
    work flow: code check out, preparation, build (which usually includes testing
    and other quality assurance-related tasks), report publishing, artifact creation,
    and eventually deployment. All of these steps can be controlled within the system
    and/or through scripting of various types. For instance, you can use Ant or Maven
    in Travis, Bamboo, or Jenkins. Apart from the basic functionality, several plugins
    are normally available in these systems for extending the functionality of integrating
    additional third-party applications, libraries, and services.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，它们被构建成提供一种灵活的方式来定义你的集成工作流程：代码检出、准备、构建（通常包括测试和其他质量保证相关的任务）、报告发布、工件创建，最终部署。所有这些步骤都可以在系统内部或通过各种类型的脚本进行控制。例如，你可以在
    Travis、Bamboo 或 Jenkins 中使用 Ant 或 Maven。除了基本功能外，这些系统中通常还提供了一些插件，用于扩展集成第三方应用程序、库和服务的功能。
- en: Before getting into the nitty-gritty details of configuring the continuous integration
    system of our choice, we may want to first see what's available and how we can
    choose.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解我们选择的持续集成系统的配置细节之前，我们可能首先想看看有哪些可用的选项以及我们如何进行选择。
- en: Available systems
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用系统
- en: There are a number of CI systems, and many of them have been created specifically
    for certain programming languages; therefore, they can perform only a restricted
    set of operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 CI 系统，其中许多是为特定的编程语言专门创建的；因此，它们只能执行一组有限的操作。
- en: The more complex the system is, the more time it takes to prepare it to behave
    as we want it to, but you'll have the ability to perform as many functions as
    required, and you will also have the ability to switch them on or off on a per-project
    basis.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 系统越复杂，准备它按照我们的期望运行所需的时间就越长，但你将能够执行所需的所有功能，并且你还可以根据项目需求逐个开启或关闭它们。
- en: The most well-known system is Jenkins. It is an open source system ([http://jenkins-ci.org](http://jenkins-ci.org)).
    It was forked in 2011 from Hudson, after a dispute with Oracle. It is a CI system
    written in Java, and it became popular as an alternative to CruiseControl. It
    has always been regarded as the most polyfunctional CI system available. This
    is also because its huge community provides hundreds of different plugins for
    any kind of functionality.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的系统是 Jenkins。它是一个开源系统 ([http://jenkins-ci.org](http://jenkins-ci.org))。它在
    2011 年从 Hudson 分支出来，之后与 Oracle 发生争议。它是一个用 Java 编写的 CI 系统，并作为 CruiseControl 的替代品而流行起来。它一直被视为最多功能化的
    CI 系统。这也得益于其庞大的社区，为各种功能提供了数百种不同的插件。
- en: The only problem I see with Jenkins, apart from configuring it, is hosting it,
    although, installing and maintaining it has always been easy for me.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的 Jenkins 的唯一问题，除了配置之外，就是托管它，尽管安装和维护对我来说一直都很简单。
- en: You might be unable to host the system yourself, so you may want to look for
    something that provides a hosted solution. Bamboo is another choice that is said
    to be particularly straightforward if you are migrating from Jenkins. It also
    provides out-of-the-box integration with other Atlassian products, such as Jira,
    BitBucket, HipChat, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能无法自己托管系统，因此您可能想寻找提供托管解决方案的东西。Bamboo 是另一个选择，据说如果您从 Jenkins 迁移，它特别简单。它还提供了与其他
    Atlassian 产品（如 Jira、BitBucket、HipChat 等）开箱即用的集成。
- en: As a matter of choice, we'll be looking into Jenkins, installing the required
    plugins, and then creating the build by using the Apache Ant scripts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种选择，我们将研究 Jenkins，安装所需的插件，然后使用 Apache Ant 脚本创建构建。
- en: Installing and configuring Jenkins
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 Jenkins
- en: There isn't much to be said about the installation of Jenkins. As the installation
    page shows, it's cross-compatible and it can be run on operating systems, such
    as Windows, Linux, Unix, and Docker. For more information, check out [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Jenkins 的安装没有太多可说的。正如安装页面所示，它是跨兼容的，可以在 Windows、Linux、Unix 和 Docker 等操作系统上运行。更多信息，请查看[https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins)。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important to remember that its only requirement is Java, so you should
    have up-to-date versions of JDK and JRE.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，它唯一的依赖项是 Java，因此您应该有 JDK 和 JRE 的最新版本。
- en: Most distributions already package Jenkins and provide it with their official
    package repositories, thereby solving most of the problems of dependencies.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数发行版已经打包了 Jenkins，并提供了他们的官方软件包仓库，从而解决了大多数依赖性问题。
- en: The installation on *nix systems will create its own dedicated user `Jenkins,`
    which will be used for doing all the operations that will be run through its interface.
    Never run Jenkins as a superuser. This can cause security issues. The workspace
    where the projects will be checked out is normally located at `/var/lib/jenkins/home/workspace,`
    which you can inspect manually if something goes wrong.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *nix 系统上的安装将创建其自己的专用用户 `Jenkins`，该用户将用于执行通过其界面运行的所有操作。永远不要以超级用户身份运行 Jenkins。这可能会引起安全问题。项目将被检出到的工
    作空间通常位于 `/var/lib/jenkins/home/workspace`，如果出现问题，您可以手动检查。
- en: When started, Jenkins will be listening on port `8080` (not always, be sure
    to read the post-installation instructions, if any, or check the opened ports
    using `netstat -ltn` on Linux), and it will be accessible from the web browser.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Jenkins 启动时，它将监听端口 `8080`（不总是这样，如果有的话，请务必阅读安装后的说明，或者使用 Linux 上的 `netstat -ltn`
    检查已打开的端口），并且可以通过网页浏览器访问。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to expose your service to a wider audience, then you might want
    to install a proxy in order to serve it from port `80`, with whichever hostname
    you want. We won't cover this aspect, but Jenkins provides additional documentation
    on how to achieve this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将您的服务暴露给更广泛的受众，那么您可能需要安装一个代理，以便从端口 `80` 以您想要的任何主机名提供服务。我们不会涉及这个方面，但 Jenkins
    提供了额外的文档，说明如何实现这一点。
- en: So, let's open `http://<yourhostname>:8080` in our browser, and let's start
    configuring the basics.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们在我们的浏览器中打开 `http://<yourhostname>:8080`，并开始配置基本设置。
- en: Understanding the Jenkins organization
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Jenkins 组织结构
- en: Before doing this, you may need to understand how Jenkins is organized. If you
    are already experienced with it, then you may want to skip over to the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做之前，您可能需要了解 Jenkins 的组织结构。如果您已经对它有经验，那么您可能想跳到下一节。
- en: 'There are only two sections that you need to keep an eye out for:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要关注两个部分：
- en: The jobs list
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: job 列表
- en: The management panel
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理面板
- en: The first one is where you will normally land, and it is what you will be working
    on most of the time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个通常是您通常会到达的地方，也是您大部分时间将在此处工作的地方。
- en: In the Jenkins terminology, a **job** is a specific set of rules and operations
    that needs to be performed in a specific project. You can have different jobs
    for the same project, which perform slightly or completely different operations,
    and these can be triggered sequentially.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 术语中，一个 **job** 是在特定项目中需要执行的一组特定的规则和操作。您可以为同一项目设置不同的 job，它们执行稍微不同或完全不同的操作，并且这些可以按顺序触发。
- en: A **build** is the process of executing a job. We will cover this and see what
    we can achieve with a single build by configuring the various aspects of the job.
    The build can result in the creation of one or more artefacts, deploy the build
    result somewhere or trigger some other job or process within Jenkins itself, or
    outside of it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建**是执行作业的过程。我们将介绍这一点，并看看通过配置作业的各个方面，我们可以通过单个构建实现什么。构建可以导致创建一个或多个工件，部署构建结果到某个地方，或者在Jenkins内部或外部触发其他作业或进程。'
- en: You need to fix Jenkins' security immediately after installing it, unless you
    will be the only person accessing it and the server where it's installed will
    have no external access, it's probably better to navigate to `http://jenkins:8080/configureSecurity/`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Jenkins后，你需要立即修复其安全性，除非你将是唯一访问它的人，并且安装它的服务器将没有外部访问，那么导航到`http://jenkins:8080/configureSecurity/`可能更好。
- en: 'You can set up whichever authentication system you want, using PAM, LDAP, or
    its internal user database. We will be using the latter, but remember that if
    you''re willing to do something a bit stronger or interconnected, there may be
    additional steps that you may need to follow. Most of the interface forms have
    a few small info buttons that you can use to display some information, as shown
    in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置你想要的任何身份验证系统，使用PAM、LDAP或其内部用户数据库。我们将使用后者，但请记住，如果你愿意做一点更强大或更互联的事情，可能需要遵循额外的步骤。大多数界面表单都有几个小的信息按钮，你可以使用它们来显示一些信息，如下面的截图所示：
- en: '![Understanding the Jenkins organization](img/B03646_09_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![理解Jenkins组织结构](img/B03646_09_01.jpg)'
- en: View of the **Configure Global Security** page with an open info box
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置全局安全**页面的视图，带有打开的信息框'
- en: The second aspect that requires a little thinking from your side is how Jenkins
    will be accessing and checking your repository.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要你稍微思考的第二个方面是Jenkins将如何访问和检查你的仓库。
- en: Any major online repository provider, such as GitHub and BitBucket will let
    you create a so-called **deployment key**, which is used for a read-only access
    to the repository.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 任何主要的在线仓库提供商，如GitHub和BitBucket，都会让你创建一个所谓的**部署密钥**，它用于对仓库的只读访问。
- en: 'For anything more complex, such as merging and pushing your branches, you would
    need to set up its own user, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的事情，比如合并和推送你的分支，你需要为它设置自己的用户，如下面的截图所示：
- en: '![Understanding the Jenkins organization](img/B03646_09_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![理解Jenkins组织结构](img/B03646_09_02.jpg)'
- en: The deployment keys setup page in BitBucket, available from the settings of
    each repository
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: BitBucket中部署密钥设置页面，可通过每个仓库的设置访问
- en: If you have more repositories that are hosted by different places, then you
    need to set up as many credentials as needed for Jenkins. This can be accomplished
    by going to `http://jenkins:8080/credential-store/` (or **Home** | **Credentials**
    | **Global Credentials**). As you can see, there's a lot behind the scenes, so
    feel free to explore and read the documentation for understanding what's needed.
    Normally starting with the setup of the global credentials may be enough, but
    there are cases where a non-global configuration is needed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多于一个由不同地方托管的仓库，那么你需要为Jenkins设置所需数量的凭证。这可以通过访问`http://jenkins:8080/credential-store/`（或**首页**
    | **凭证** | **全局凭证**）来完成。正如你所见，幕后有很多内容，所以请随意探索并阅读文档以了解所需内容。通常，从设置全局凭证开始可能就足够了，但在某些情况下可能需要非全局配置。
- en: In order to do so, we need to create the SSH key pairs for the user `jenkins`
    first.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们首先需要为用户`jenkins`创建SSH密钥对。
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that you have your SSH key, you need to grab the public key, which is stored
    at `/var/lib/jenkins/.ssh/id_rsa.pub,` and then copy it to your repository as
    a deployment key. You can copy it to the clipboard by using the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了你的SSH密钥，你需要获取公钥，它存储在`/var/lib/jenkins/.ssh/id_rsa.pub`，然后将其作为部署密钥复制到你的仓库中。你可以使用以下命令将其复制到剪贴板：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This has been done through the `root` user because the `jenkins` user won''t
    have the X display setup in its environment and this is likely to cause the error
    shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过`root`用户完成的，因为`jenkins`用户在其环境中不会设置X显示，这很可能会引起这里显示的错误：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are on a headless server, then you won't have many choices. You can either
    `scp` on the file to your local machine or `cat` the file and then paste it in
    the browser manually.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个无头服务器上，那么你不会有太多选择。你可以将文件`scp`到你的本地机器，或者`cat`文件然后手动将其粘贴到浏览器中。
- en: Now that you have your deployment key set up, you need to go back to Jenkins
    and then navigate to the credentials store. Once there, set the username as `jenkins`
    (which is the system's user name), and set the private key as `From the Jenkins
    master ~/.ssh`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置了部署密钥，需要回到Jenkins并导航到凭据存储。一旦到达那里，将用户名设置为`jenkins`（这是系统用户名），并将私钥设置为`From
    the Jenkins master ~/.ssh`。
- en: The following sections will cover the installation of additional plugins and
    the configuration of the job.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将涵盖额外插件的安装和作业的配置。
- en: Installing the required plugins
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装所需的插件
- en: Now that you have covered the basic configuration of Jenkins, you need to install
    the required plugins so that everything works as expected.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了Jenkins的基本配置，需要安装所需的插件，以确保一切按预期工作。
- en: This section is normally handled easily by Jenkins. There's a project that is
    specifically for the PHP projects on Jenkins. You can find it at [http://jenkins-php.org](http://jenkins-php.org).
    Not only does the project list the following plugins, but it also lists a meta
    plugin, which is available on Jenkins, and it will download all the required plug-ins.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分通常由Jenkins轻松处理。有一个专门针对Jenkins上PHP项目的项目。您可以在[http://jenkins-php.org](http://jenkins-php.org)找到它。该项目不仅列出了以下插件，还列出了一个可在Jenkins上使用的元插件，它将下载所有所需的插件。
- en: '**Checkstyle**: This is used for processing the PHP_CodeSniffer log files in
    the Checkstyle format'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Checkstyle**：这是用于处理Checkstyle格式的PHP_CodeSniffer日志文件'
- en: '**Clover PHP**: This is used for processing the PHPUnit''s Clover XML log file'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clover PHP**：这是用于处理PHPUnit的Clover XML日志文件'
- en: '**Crap4J**: This is used for processing the PHPUnit''s Crap4J XML log file'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Crap4J**：这是用于处理PHPUnit的Crap4J XML日志文件'
- en: '**DRY**: This is used for processing the phpcpd log files in the PMD-CPD format'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DRY**：这是用于处理PMD-CPD格式的phpcpd日志文件'
- en: '**HTML Publisher**: This is used for publishing the documentation generated
    by phpDox'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML Publisher**：这是用于发布由phpDox生成的文档'
- en: '**JDepend**: This is used for processing the PHP_Depend log files in the JDepend
    format'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDepend**：这是用于处理JDepend格式的PHP_Depend日志文件'
- en: '**Plot**: This is used for processing the phploc CSV output'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Plot**：这是用于处理phploc CSV输出的'
- en: '**PMD**: This is used for processing the PHPMD log files in the PMD format'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PMD**：这是用于处理PMD格式的PHPMD日志文件'
- en: '**Violations**: This is used for processing the various log files'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Violations**：这是用于处理各种日志文件'
- en: '**xUnit**: This is used for processing the PHPUnit''s JUnit XML log file'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xUnit**：这是用于处理PHPUnit的JUnit XML日志文件'
- en: The preceding list is taken from [http://jenkins-php.org/installation.html](http://jenkins-php.org/installation.html),
    and it might change in the future, so keep that in mind.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表来自[http://jenkins-php.org/installation.html](http://jenkins-php.org/installation.html)，未来可能会有所变化，请记住这一点。
- en: If you navigate to **Manage Jenkins** | **Manage Plugins**, then you can search
    for the plugin `php` and select **Install without restart**. When you are on the
    installation page, select the **Restart Jenkins when installation is complete
    and no jobs are running** option (sometimes the installation page does not refresh
    itself automatically, so you might have to refresh the page; a list of plugins
    will get installed even if you navigate away from this page).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您导航到**管理Jenkins** | **管理插件**，然后可以搜索插件`php`并选择**安装无需重启**。当您处于安装页面时，选择**安装完成后重启Jenkins且没有作业运行时**选项（有时安装页面不会自动刷新，因此您可能需要刷新页面；即使您离开此页面，也会安装插件列表）。
- en: 'Now, you need to install the tools needed by these plugins, so open the `composer.json`
    file and then add the following to your `require-dev` section:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要安装这些插件所需的工具，因此打开`composer.json`文件，然后在`require-dev`部分添加以下内容：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, run the `composer update` to install these effectively.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`composer update`以有效安装这些插件。
- en: Creating the required build files
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建所需的构建文件
- en: A part of the configuration of the build will be stored in Jenkins, but it's
    mostly for publishing the reports and the documentation (if you need it). We saw
    the actual configuration on how to run the various scripts in [Chapter 8](ch08.html
    "Chapter 8. Analyzing Testing Information"), *Analyzing Testing Information*.
    This is in the `build.xml` file. This default name can be picked up by Jenkins
    automatically. This can be configured, but it's pointless to do so unless you
    already have a file with that name.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 构建配置的一部分将存储在 Jenkins 中，但它主要用于发布报告和文档（如果需要的话）。我们在[第 8 章](ch08.html "第 8 章。分析测试信息")中看到了如何运行各种脚本的实际配置，*分析测试信息*。这位于
    `build.xml` 文件中。这个默认名称可以被 Jenkins 自动识别。这可以进行配置，但除非你已经有一个同名文件，否则这样做是没有意义的。
- en: The build file should sit at the root of the project repository, and it should
    have a valid XML.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件应该位于项目仓库的根目录，并且应该具有有效的 XML 格式。
- en: The language we are going to use to write the build file is Apache Ant. There
    are either more complex solutions, such as Maven, or more ad-hoc solutions such
    as Phing for this, but I still prefer Ant. This is because it's simple and flexible
    (it's verbose, but once you've written it, there isn't much to be said). It also
    allows you to run anything that is not specific for a particular language.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用来编写构建文件的语言是 Apache Ant。对于这个问题，有更复杂的解决方案，如 Maven，或者更定制的解决方案，如 Phing，但我仍然更喜欢
    Ant。这是因为它简单且灵活（它很冗长，但一旦编写，就没有多少可说的）。它还允许你运行任何非特定于特定语言的任何东西。
- en: We're going to create the build file by copying the basic structure from the
    `jenkins-php` project (available at [http://jenkins-php.org/automation.html](http://jenkins-php.org/automation.html)),
    and then by amending it with the corrections that I'll explain in the next few
    paragraphs. I'll be splitting the functionality of Composer, Yii, and Codeception
    in separate files, while the main functionality (from `jenkins-php`) will remain
    as it is.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过从 `jenkins-php` 项目（可在 [http://jenkins-php.org/automation.html](http://jenkins-php.org/automation.html)
    获取）复制基本结构来创建构建文件，然后通过在下几段中解释的修正来修改它。我将把 Composer、Yii 和 Codeception 的功能分别放在单独的文件中，而主功能（来自
    `jenkins-php`）将保持不变。
- en: Understanding the basic Ant structure
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解基本的 Ant 结构
- en: Ant is quite simple because it's a collection of directives. The root of the
    XML is a `<project>` tag, which contains a series of `<target>` tags that can
    be called from the Jenkins job, and you can choose the `<property>` option for
    defining the properties, and then choose the `<include>` statements for including
    separate files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ant 非常简单，因为它是一系列指令的集合。XML 的根是一个 `<project>` 标签，它包含一系列 `<target>` 标签，这些标签可以从
    Jenkins 作业中调用，你可以选择 `<property>` 选项来定义属性，然后选择 `<include>` 语句来包含单独的文件。
- en: There is no default name for the targets, but the main target is usually called
    `build`. It comes with a series of dependencies, which trigger the other targets
    sequentially.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 目标没有默认名称，但主要目标通常称为 `build`。它附带一系列依赖项，这些依赖项会依次触发其他目标。
- en: Each directive has a series of additional attributes and tags, and these can
    be nested in them. The user contributed directives can also be downloaded separately
    for these (and most of the Linux distributions provide the common ones in a separate
    package). This can help you in avoiding the effort that is put in when you have
    to create these by hand. For instance, you can use this for archiving and packaging
    a collection of files, which are normally wrappers for the actual command-line
    tools.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每个指令都有一系列额外的属性和标签，并且这些可以嵌套在其中。用户贡献的指令也可以单独下载（并且大多数 Linux 发行版都在单独的包中提供了常见的指令）。这可以帮助你在手动创建这些指令时节省精力。例如，你可以用它来归档和打包一组文件，这些文件通常是实际命令行工具的包装器。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that Ant is not an imperative programming language, so check its documentation
    if you want to extend and modify the language.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Ant 不是一个命令式编程语言，所以如果你想扩展和修改该语言，请检查其文档。
- en: The documentation for the core Ant directives is available online at [http://ant.apache.org/manual/](http://ant.apache.org/manual/),
    and it's probably a good starting point for understanding it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Ant指令的文档可在 [http://ant.apache.org/manual/](http://ant.apache.org/manual/)
    在线获取，这可能是理解它的良好起点。
- en: Adjusting the build.xml file
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整 build.xml 文件
- en: Compared to the file you have copied from `jenkins-php`, we are going to keep
    most of the targets, albeit the `phpunit` target, which can be safely deleted.
    This is because we're going to switch to a custom target specifically for Codeception.
    The rest of the changes will be made in separate files, and they will be discussed
    after this.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与您从`jenkins-php`复制的文件相比，我们将保留大部分目标，尽管`phpunit`目标可以安全删除。这是因为我们将切换到专门针对Codeception的自定义目标。其余的更改将在单独的文件中进行，并且将在之后进行讨论。
- en: 'The most important changes that need to be made are relative to the folders
    you want these programs to work on. Every single command accepts different arguments,
    so include all the directories you want. Let''s start amending the first target,
    which will do a syntax check of all the files that we specify:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 需要做的最重要的更改与您希望这些程序工作的文件夹有关。每个命令都接受不同的参数，因此请包含您想要的所有目录。让我们开始修改第一个目标，它将对所有指定的文件进行语法检查：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we can add our code directories to be picked up by phploc, which will
    give us an idea of the complexity of our project:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将我们的代码目录添加到phploc中，这样我们就可以了解我们项目的复杂度：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'pdepend uses a different syntax in defining new directories; as you can see,
    if you need to make changes, you will need to invoke the commands'' help manually:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: pdepend在定义新目录时使用不同的语法；正如您所看到的，如果您需要做出更改，您将需要手动调用命令的帮助：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next in line is PHP Mess Detection (PHPMD), which will help us keep the code
    clean and tidy. Once again, the syntax is slightly different than the previous
    ones:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是PHP混乱检测（PHPMD），它将帮助我们保持代码整洁。再次强调，语法与之前的不同：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'PHP Code Sniffer (PHPCS) can be also taken as an additional and more important
    step for linting your code. As explained, we also need to specify the specific
    Yii coding standard:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PHP代码检查器（PHPCS）也可以作为代码检查的额外且更重要的一步。正如解释的那样，我们还需要指定特定的Yii编码标准：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The last one is PHP Copy-Paste Detector (PHPCPD), which does exactly what it
    says on the label:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个是PHP复制粘贴检测器（PHPCPD），它确实如其标签所示：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you have probably noticed, some of the targets that I've pasted here are
    the `-ci` targets. These targets are required by Jenkins in order to generate
    all the necessary reports. We will pick these up and publish them in our build
    later. Remember to mirror the changes on the other targets as well; I have excluded
    them here to avoid redundancy.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，我粘贴的一些目标是`-ci`目标。这些目标是Jenkins生成所有必要报告所必需的。我们将选择这些目标，并在我们的构建中发布它们。请记住，也要在其他目标上镜像这些更改；我在这里排除了它们以避免冗余。
- en: In addition to these changes, it's worth noticing that I've selected the Yii
    2 CheckStyle rule set for validating the syntax. This step is quite useful for
    maintaining the overall code style and for keeping it in sync with the one used
    by the developers of the framework, and cross-team.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些更改之外，值得注意的是，我选择了Yii 2 CheckStyle规则集来验证语法。这一步对于维护整体代码风格以及与框架开发者和跨团队使用的风格保持同步非常有用。
- en: Now that we've made the basic changes, let's go to the Composer, Yii, and the
    Codeception files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做出了基本更改，让我们转到Composer、Yii和Codeception文件。
- en: Preparing the environment for the build
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备构建环境
- en: The `build` command, which is the default invoked target, has a chain of dependencies
    that will sequentially trigger the `prepare` target, run some other targets for
    the build, run the tests, and then generate the required documentation with phpDox.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认调用的`build`命令有一个依赖链，将依次触发`prepare`目标，运行一些构建的其他目标，运行测试，然后使用phpDox生成所需的文档。
- en: The `prepare` target depends on the `clean` target. These two steps will clean
    up the environment, generate the required folder structure to accommodate the
    results that will be produced by the following steps, and set some properties
    to avoid invoking the target twice.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepare`目标依赖于`clean`目标。这两个步骤将清理环境，生成所需的文件夹结构以容纳后续步骤将产生的结果，并设置一些属性以避免两次调用目标。'
- en: 'For instance, the `prepare` target has the following property set at the end:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`prepare`目标在最后设置了以下属性：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'While the target definition is:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的目标定义是：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It has now become clear that *unless* the property is set, we can execute the
    content of the target. The same thing happens with the `clean` target.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经很明显，*除非*设置了属性，否则我们可以执行目标的内联内容。`clean`目标也会发生同样的事情。
- en: In these two targets, we need to update the list of directories that are cleaned
    and recreated every time the job is run. You should, at least, have the following
    directories, and you can also include any other directories that are relevant
    to your project for `clean`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个目标中，我们需要更新每次作业运行时清理和重新创建的目录列表。至少，你应该有以下目录，你也可以为`clean`包括任何与你的项目相关的其他目录。
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And for `prepare`, the following directories will be recreated:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`prepare`，以下目录将被重新创建：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding the required configuration settings
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加所需的配置设置
- en: Before we start adding our custom files, we need to add some of the configuration
    files, which some of the executables, namely phpmd and PHPDox, will expect to
    be in the `/build` directory.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始添加自定义文件之前，我们需要添加一些配置文件，这些文件中的一些可执行文件（即phpmd和PHPDox）期望在`/build`目录中。
- en: The `jenkins-php` project will provide most of these configuration files, and
    these can be copied from [http://jenkins-php.org/configuration.html](http://jenkins-php.org/configuration.html).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`jenkins-php`项目将提供大部分这些配置文件，并且可以从[http://jenkins-php.org/configuration.html](http://jenkins-php.org/configuration.html)复制。'
- en: In case of phpmd, you can adjust the level of the cyclomatic complexity threshold.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在phpmd的情况下，你可以调整循环复杂度阈值的级别。
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The default value is normally `10`, but the suggested value is `5`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值通常是`10`，但建议的值是`5`。
- en: 'For PHPDox, the story is a little complex. The current configuration is not
    particularly flexible, so I''ve decided to go through the longest possible route,
    which is, generating the skeleton file with the help of the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PHPDox，情况稍微复杂一些。当前的配置并不特别灵活，所以我决定走最长可能的路线，即使用以下命令生成骨架文件：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This created a file that has all the documented options, and from there, I
    created my own configuration file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个包含所有文档选项的文件，然后我创建了自定义的配置文件：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Regardless of my efforts, the current version that I'm using (0.7) had a bug
    that caused it to crash when run from Jenkins. This has been fixed in the current
    dev-master version, but this has caused other problems for me. I'm pretty sure
    that you should be fine when the next version will be released. In our case, the
    documentation is less critical from the perspective of the non-working tests.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 不论我如何努力，我目前使用的版本（0.7）存在一个bug，导致它在从Jenkins运行时崩溃。这个问题已经在当前的dev-master版本中修复，但这给我带来了其他问题。我非常确信，当下一个版本发布时，你应该不会有问题。在我们的情况下，从非工作测试的角度来看，文档并不是那么关键。
- en: Adding Composer, Yii, and Codeception support in Ant
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Ant中添加Composer、Yii和Codeception支持
- en: Now we need to integrate the changes that are needed to prepare our application
    for testing. We will be using Composer to install the required dependencies and
    Yii to run the needed migrations. After this we will need support for Codeception,
    as it's the main tool for running the tests.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要集成准备我们的应用程序进行测试所需的变化。我们将使用Composer来安装所需的依赖项，并使用Yii来运行所需的迁移。之后，我们需要支持Codeception，因为它是运行测试的主要工具。
- en: As we've seen in the definition of `prepare`, the target is dependent on `clean`,
    `composer.composer` and `yii.migrate-all`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在`prepare`的定义中看到的，目标是依赖于`clean`、`composer.composer`和`yii.migrate-all`。
- en: The first target is taken from [https://github.com/shrikeh/ant-phptools](https://github.com/shrikeh/ant-phptools),
    which provides a wrapper for Composer. It's not the best, but it was the only
    one that showed up on a quick search. The package does what it does quite well,
    and it's dependent on a properties file called `composer.properties`, and an example
    of it is provided by the project author.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个目标是来自[https://github.com/shrikeh/ant-phptools](https://github.com/shrikeh/ant-phptools)的，它为Composer提供了一个包装器。它不是最好的，但它是快速搜索中唯一出现的一个。这个包做得相当不错，并且依赖于一个名为`composer.properties`的属性文件，项目作者提供了一个示例。
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are some built-in properties that are accessible in an Ant script, which
    can be useful for understanding, for instance, the current directory and building
    up the appropriate paths in a more distributable fashion. This is available at
    [http://ant.apache.org/manual/properties.html](http://ant.apache.org/manual/properties.html).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ant脚本中，有一些内置属性是可访问的，这有助于理解，例如，当前目录，并以更可分发的方式构建适当的路径。这可以在[http://ant.apache.org/manual/properties.html](http://ant.apache.org/manual/properties.html)找到。
- en: Calling the `composer.composer` target will install Composer, if not found in
    the specified directory, and use it to update all the dependencies. I would prefer
    if it wiped the installation directory of the dependencies and then ran `composer
    install`. Unfortunately, that's the only way to install the dependencies defined
    in the `composer.lock`, instead of updating them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`composer.composer`目标将安装 Composer，如果指定目录中未找到，并使用它来更新所有依赖项。我更希望它清除依赖项的安装目录，然后运行`composer
    install`。不幸的是，这是安装`composer.lock`中定义的依赖项的唯一方法，而不是更新它们。
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you have any doubts about the differences between `composer.lock` and `composer.json`,
    feel free to step back for a second, and skim through [Chapter 2](ch02.html "Chapter 2. Tooling
    up for Testing"), *Tooling up for Testing*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对`composer.lock`和`composer.json`之间的差异有任何疑问，请随时退后一步，快速浏览[第 2 章](ch02.html
    "第 2 章。为测试做准备")，*为测试做准备*。
- en: I've put the `composer.xml` and the `composer.properties` file in the `/build`
    directory, and I've added the following at the beginning of the project defined
    in `build.xml`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将`composer.xml`和`composer.properties`文件放在了`/build`目录中，并在`build.xml`中定义的项目开头添加了以下内容。
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we can add the dependency of `composer.composer` to the list of the targets
    defined in the `prepare` target without any problems.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`composer.composer`的依赖项添加到`prepare`目标中定义的目标列表中，而不会出现任何问题。
- en: The second step is resetting the database to a state that we can use, and we
    will do it by re-running all of the migrations and applying all of the missing
    ones.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是将数据库重置到我们可以使用的状态，我们将通过重新运行所有迁移并应用所有缺失的迁移来实现这一点。
- en: For this, I've created a simple Ant project. You can place it in your `/build`
    directory, which you can download from [https://github.com/ThePeach/Yii2-Ant](https://github.com/ThePeach/Yii2-Ant).
    The project provides a wrapper for the Yii CLI interface for running the migrations.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，我创建了一个简单的 Ant 项目。您可以将它放在您的`/build`目录中，您可以从[https://github.com/ThePeach/Yii2-Ant](https://github.com/ThePeach/Yii2-Ant)下载它。该项目为运行迁移的
    Yii CLI 界面提供了一个包装器。
- en: I won't go into the details of this project, as it's simple and it can be understood
    quite easily.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入这个项目的细节，因为它很简单，可以很容易地理解。
- en: 'We can include it like we did in the Composer project earlier, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像在早期的 Composer 项目中那样包含它，如下所示：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can invoke it either by calling the ready-made target `migrate-all`, as
    we did for the dependencies of `prepare` in our `build.xml`, or by calling the
    `migrate` MacroDef the way you want:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用现成的目标`migrate-all`来调用它，就像我们在`build.xml`中为`prepare`的依赖项所做的那样，或者按照您想要的方式调用`migrate`
    MacroDef：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ant has to extend its basic syntax, which defines new tasks like MacroDef. You
    can read more about this in the official Apache Ant documentation, which can be
    found at [https://ant.apache.org/manual/Tasks/macrodef.html](https://ant.apache.org/manual/Tasks/macrodef.html).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Ant 必须扩展其基本语法，这定义了新的任务，如 MacroDef。您可以在官方 Apache Ant 文档中了解更多信息，该文档可在[https://ant.apache.org/manual/Tasks/macrodef.html](https://ant.apache.org/manual/Tasks/macrodef.html)找到。
- en: The `migrate` action will always pass `all` as an argument to the `yii` script,
    and this is enough for what we need to achieve, but this could be improved.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate`操作将始终将`all`作为参数传递给`yii`脚本，这对于我们想要实现的目标来说已经足够了，但这一点可以改进。'
- en: Codeception is added in a similar way. You can grab a copy from the repository
    I've created at [https://github.com/ThePeach/CodeCeption-Ant](https://github.com/ThePeach/CodeCeption-Ant).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式添加了 Codeception。您可以从我创建的存储库中获取副本，该存储库位于[https://github.com/ThePeach/CodeCeption-Ant](https://github.com/ThePeach/CodeCeption-Ant)。
- en: This Ant project provides a main target called `run-tests`, which you can execute
    without worrying too much about the parameters and such. You can also dynamically
    pass some parameters at run time to fine-tune the invocation of Codeception, such
    as `codeception.suites` and `codeception.options`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Ant 项目提供了一个名为`run-tests`的主要目标，您可以在不担心太多参数的情况下执行它。您还可以在运行时动态传递一些参数来微调 Codeception
    的调用，例如`codeception.suites`和`codeception.options`。
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If not set, these will be assigned an empty value and `--xml --coverage-xml
    --coverage-html` respectively.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未设置，这些将分别分配空值和`--xml --coverage-xml --coverage-html`。
- en: Configuring the Jenkins build
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Jenkins 构建
- en: The easiest way to configure the build is by starting with the `jenkins-php`
    project template. You can always import it separately and integrate it with your
    own project later.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 配置构建的最简单方法是从`jenkins-php`项目模板开始。您始终可以单独导入它，并在以后将其与自己的项目集成。
- en: The *Integration* page available at the `jenkins-php` website ([http://jenkins-php.org/integration.html](http://jenkins-php.org/integration.html))
    will explain how to import the project. Remember to adjust the parameters to your
    own configuration.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`jenkins-php`网站上可用的**集成**页面（[http://jenkins-php.org/integration.html](http://jenkins-php.org/integration.html)）将解释如何导入项目。请记住根据您的配置调整参数。
- en: Now go to the dashboard, click on the new project **jenkins-php**, and then
    select **Configure** from the menu.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到仪表板，点击新的项目**jenkins-php**，然后从菜单中选择**配置**。
- en: If you've never used Jenkins, then you might get a little scared by the length
    of the configuration page. However, there are only three sections that you need
    to keep in mind, and we'll cover them now.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未使用过 Jenkins，那么配置页面的长度可能会让您有些害怕。然而，您只需要记住三个部分，我们现在将介绍它们。
- en: Generic build settings
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用构建设置
- en: Generic build settings contains settings for the enable/disable switch for the
    build, how many builds to keep, when to discard the build and the repository configuration,
    and so on.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通用构建设置包含构建的启用/禁用开关设置、保留多少构建、何时丢弃构建以及仓库配置等设置。
- en: If you're using Git, then you will have the ability to configure almost anything,such
    as being able to merge branches, committing and pushing back integrated changes,
    and so on.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Git，那么您将能够配置几乎任何东西，例如能够合并分支、提交并推送集成更改等。
- en: We will just need to specify the branch as `*/master` and the deployment key
    as we what saved before, from our repository provider.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需指定分支为`*/master`，并将部署密钥设置为之前在代码库提供商处保存的值。
- en: Build settings
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建设置
- en: The build settings are the only thing that you need to care about when deciding
    what to run; here you specify the target names and any additional options.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当决定要运行什么时，您只需要关注构建设置；在这里，您指定目标名称和任何附加选项。
- en: In our case, this is `build`, and by clicking **Advanced**, we can fill in the
    **Properties** field with `codeception.suites=unit`. This will allow us to run
    a test build without having to wait for long.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，这是`build`，通过点击**高级**，我们可以将`codeception.suites=unit`填入**属性**字段。这将允许我们在不等待很长时间的情况下运行测试构建。
- en: Postbuild settings
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建后设置
- en: This is the longest section of the configuration. All the steps that will be
    performed for publishing the reports in the dashboard of the build, such as linking
    the documentation that you need to the various pieces, choosing what the thresholds
    required to decide are, and deciding when to mark the job failed, and so on are
    defined here.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是配置中最长的部分。所有将在构建仪表板中发布报告的步骤，例如将文档链接到各个部分、选择所需的阈值以决定是否标记作业失败等，都定义在这里。
- en: The default threshold values defined here are quite high, so there isn't much
    that you should be worried about.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义的默认阈值相当高，所以您不必担心太多。
- en: The only changes that we will need to make are regarding the reports generated
    by Codeception, which will provide the JUnit XML reports, the Clover XML reports,
    and the coverage in the HTML format.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的唯一更改是关于 Codeception 生成的报告，它将提供 JUnit XML 报告、Clover XML 报告以及 HTML 格式的覆盖率。
- en: Toward the end of the configuration page, you will find a section titled **Publish
    Clover PHP Coverage Report**, here update the Clover XML report path to `tests/codeception/_output/coverage.xml,`
    and the **Publish HTML Report** to `tests/codeception/_output/coverage/`. If you
    click on **Advanced panel**, then you will be able to modify the thresholds, and
    you can use them to decide how much coverage you require from your tests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置页面的末尾，您将找到一个标题为**发布 Clover PHP 覆盖率报告**的部分，在这里更新 Clover XML 报告路径为`tests/codeception/_output/coverage.xml`，并将**发布
    HTML 报告**更新为`tests/codeception/_output/coverage/`。如果您点击**高级面板**，那么您将能够修改阈值，并可以使用它们来决定您需要从测试中获得多少覆盖率。
- en: Just after this step, you will see **Publish xUnit test results report**, here
    change `PHPUnit-3.x Pattern` to `tests/codeception/_output/report.xml`. As you
    have done before, in the next step, you can configure the thresholds for the failed
    tests. By default, there shouldn't be any failed tests. So, all the fields will
    be set to 0\. Do not change this setting, unless you want to live in shame.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤之后，您将看到**发布 xUnit 测试结果报告**，在这里将`PHPUnit-3.x 模式`更改为`tests/codeception/_output/report.xml`。像之前一样，在下一步中，您可以配置失败测试的阈值。默认情况下，不应该有任何失败的测试。因此，所有字段都将设置为0。除非您想生活在耻辱中，否则不要更改此设置。
- en: Executing the job
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行作业
- en: Let's test everything and check if it is working as expected. Save the configuration,
    and click on **Build Now** to execute the job.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一切，并检查它是否按预期工作。保存配置，然后点击**立即构建**来执行作业。
- en: 'Once finished, you can head back to the page of the build, and then you will
    see the following graphs:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，您可以回到构建页面，然后您将看到以下图表：
- en: '![Executing the job](img/B03646_09_03.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![执行作业](img/B03646_09_03.jpg)'
- en: The project dashboard at a glance
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 项目仪表板概览
- en: Most of the graphs that appear on the right-hand side of the column are a quick
    way of understanding what triggered a failed build.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 列表右侧的大多数图表都是快速了解触发失败构建原因的方法。
- en: The two graphs, which are generated by PDepend, displayed at the very top show
    the so-called **Overview Pyramid** and the **Abstraction Instability Chart**.
    Both of them show interesting stats about your project, which you can depend on
    for taking some decisions in terms of performance, scalability, and maintainability.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 由 PDepend 生成的两个图表，显示在最上方，分别是所谓的**概览金字塔**和**抽象不稳定性图表**。它们都显示了关于您项目的有趣统计数据，您可以根据这些数据在性能、可扩展性和可维护性方面做出一些决策。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'PDepend documentation provides further information about both of these graphs,
    and I highly recommend reading the following sources:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: PDepend 文档提供了关于这两个图表的更多信息，我强烈推荐阅读以下资源：
- en: The Overview Pyramid at [http://pdepend.org/documentation/handbook/reports/overview-pyramid.html](http://pdepend.org/documentation/handbook/reports/overview-pyramid.html)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[概览金字塔](http://pdepend.org/documentation/handbook/reports/overview-pyramid.html)'
- en: The Abstraction Instability Chart at [http://pdepend.org/documentation/handbook/reports/abstraction-instability-chart.html](http://pdepend.org/documentation/handbook/reports/abstraction-instability-chart.html)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[抽象不稳定性图表](http://pdepend.org/documentation/handbook/reports/abstraction-instability-chart.html)'
- en: At this point, you should have all the tools required for stepping forward and
    implementing, improving and excelling at testing and at automating your projects.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经拥有了前进并实施、改进和精通测试以及自动化项目的所有工具。
- en: Going forward
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来
- en: If you've managed to get to this point, then you might need to make some additional
    considerations.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经到达这个阶段，那么你可能需要考虑一些额外的因素。
- en: As we've seen, automation incorporates a lot of reporting tools, suites for
    testing, and other projects to help you understand, improve, and analyze your
    project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，自动化结合了大量的报告工具、测试套件和其他项目，以帮助您理解、改进和分析您的项目。
- en: One of the biggest gripes of automation is the speed at which it performs all
    the tests.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化的最大抱怨之一是它执行所有测试的速度。
- en: There are techniques to halve the time it takes to perform these tests. While
    Jenkins and `jenkins-php` provide targets for running the targets in parallel,
    by executing `build-parallel`. With Codeception, the story is a bit different
    and you would need to take a different route by extending the Ant project we've
    created before. Codeception uses robo-paracept to parallelize the tests.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技术可以将执行这些测试所需的时间减半。虽然 Jenkins 和 `jenkins-php` 通过执行 `build-parallel` 提供了并行运行目标的目标，但
    Codeception 的情况略有不同，你需要通过扩展我们之前创建的 Ant 项目来采取不同的路线。Codeception 使用 robo-paracept
    来并行化测试。
- en: If you want to discover more about Codeception, then there's a nice article
    available at [http://codeception.com/docs/12-ParallelExecution](http://codeception.com/docs/12-ParallelExecution).
    You'll notice that it will work by marking groups of tests together and aggregating
    them so that Paracept will be able to run in parallel.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 Codeception 的信息，那么在 [http://codeception.com/docs/12-ParallelExecution](http://codeception.com/docs/12-ParallelExecution)
    有一个不错的文章。你会注意到它将通过标记测试组并聚合它们来运行，这样 Paracept 就能够并行执行。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You've seen most of what you need to know about automation. The topic is quite
    vast, and we've covered Jenkins, how it works, and how it is configured. We've
    learned to make use of Ant to decide what to do, and how to drive your build.
    We've also looked at what is being generated by the build and displayed it in
    the Jenkins dashboard.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了关于自动化所需了解的大部分内容。这个话题相当广泛，我们已经涵盖了 Jenkins，它的运作方式以及如何配置它。我们学习了如何使用 Ant 来决定要做什么，以及如何驱动构建。我们还查看了构建生成的内容，并在
    Jenkins 仪表板上显示。
