- en: Chapter 9. Eliminating Stress with the Help of Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we''ve covered almost every aspect of what testing in practice is.
    We''ve learned what can be done with Codeception at all the levels of testing:
    unit, functional, and acceptance. We''ve covered additional resources on how to
    improve and debug your tests while looking at architectural choices and long-term
    considerations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep it short, in this chapter, we''re going to take the final step, which
    is nowadays considered as the best practice: continuous integration.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to understand what a continuous integration system is, and what
    the choices that we have are. We'll also start working with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss everything that we need to install and configure.
    We will run our builds and obtain the required level of automation for our project.
    We''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Automating the build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the required build files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Jenkins build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going forward
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating the build process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two aspects that you should always take into consideration when planning
    and implementing your tests. Firstly, 100 percent code coverage won't help you
    in removing the possibility of having or introducing a bug, which means that exploratory
    manual testing will always be needed, and it will have to be factored in while
    writing your initial draft of the master test plan. Secondly, until now, all the
    tests and reports that we've generated for such a small project can be run manually
    by whoever changes the code.
  prefs: []
  type: TYPE_NORMAL
- en: When the size of your code starts to grow and you start to support hundreds
    of classes and multi-faceted frontend functionalities, when your code lives past
    the first month and more than one developer will need to access it over and over
    again, all the knowledge related to tests and how they work or what kind of information
    can be extracted from them will become more and more difficult to maintain. The
    worst part is that most likely nobody will use it without any struggle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you have two choices: accept the fate that your tests will be long forgotten
    and nobody will know what''s been covered and what needs to be covered, or start
    automating all this by forcing some sort of automated code revision, which might
    trigger reports and e-mails to warn about anything that can potentially go wrong,
    or has already gone wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing continuous integration systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Extreme Programming** (**XP**) has introduced the concept of **continuous
    integration** (**CI**). Nowadays, it''s used in many companies as a part of their
    QA procedures, regardless of the practice adopted.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether frequent integration is better than continuous integration is something
    I'd prefer to leave out of this discussion. The main difference between the two
    is based on the frequency at which the integration happens. On top of this, CI
    has been conceived to be a part of TDD, and it is specifically aimed at running
    tests before merging any features into the active branch. This is done to ensure
    that the new functionality won't break the existing one.
  prefs: []
  type: TYPE_NORMAL
- en: Systems like Jenkins (formerly known as Hudson), Bamboo, CruiseControl, and
    Travis, have been created so that the work of the different developers can be
    *integrated* and tested before being shipped. This also ensures that certain quality
    standards are reached so that we can avoid introducing incoherence in the code
    base, and we can report the results to the developers.
  prefs: []
  type: TYPE_NORMAL
- en: These software systems perform a multitude of tasks. They're made in such a
    way that they can support any programming language and testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, they''re built for providing a flexible way of defining your integration
    work flow: code check out, preparation, build (which usually includes testing
    and other quality assurance-related tasks), report publishing, artifact creation,
    and eventually deployment. All of these steps can be controlled within the system
    and/or through scripting of various types. For instance, you can use Ant or Maven
    in Travis, Bamboo, or Jenkins. Apart from the basic functionality, several plugins
    are normally available in these systems for extending the functionality of integrating
    additional third-party applications, libraries, and services.'
  prefs: []
  type: TYPE_NORMAL
- en: Before getting into the nitty-gritty details of configuring the continuous integration
    system of our choice, we may want to first see what's available and how we can
    choose.
  prefs: []
  type: TYPE_NORMAL
- en: Available systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of CI systems, and many of them have been created specifically
    for certain programming languages; therefore, they can perform only a restricted
    set of operations.
  prefs: []
  type: TYPE_NORMAL
- en: The more complex the system is, the more time it takes to prepare it to behave
    as we want it to, but you'll have the ability to perform as many functions as
    required, and you will also have the ability to switch them on or off on a per-project
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: The most well-known system is Jenkins. It is an open source system ([http://jenkins-ci.org](http://jenkins-ci.org)).
    It was forked in 2011 from Hudson, after a dispute with Oracle. It is a CI system
    written in Java, and it became popular as an alternative to CruiseControl. It
    has always been regarded as the most polyfunctional CI system available. This
    is also because its huge community provides hundreds of different plugins for
    any kind of functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The only problem I see with Jenkins, apart from configuring it, is hosting it,
    although, installing and maintaining it has always been easy for me.
  prefs: []
  type: TYPE_NORMAL
- en: You might be unable to host the system yourself, so you may want to look for
    something that provides a hosted solution. Bamboo is another choice that is said
    to be particularly straightforward if you are migrating from Jenkins. It also
    provides out-of-the-box integration with other Atlassian products, such as Jira,
    BitBucket, HipChat, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: As a matter of choice, we'll be looking into Jenkins, installing the required
    plugins, and then creating the build by using the Apache Ant scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There isn't much to be said about the installation of Jenkins. As the installation
    page shows, it's cross-compatible and it can be run on operating systems, such
    as Windows, Linux, Unix, and Docker. For more information, check out [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to remember that its only requirement is Java, so you should
    have up-to-date versions of JDK and JRE.
  prefs: []
  type: TYPE_NORMAL
- en: Most distributions already package Jenkins and provide it with their official
    package repositories, thereby solving most of the problems of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The installation on *nix systems will create its own dedicated user `Jenkins,`
    which will be used for doing all the operations that will be run through its interface.
    Never run Jenkins as a superuser. This can cause security issues. The workspace
    where the projects will be checked out is normally located at `/var/lib/jenkins/home/workspace,`
    which you can inspect manually if something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: When started, Jenkins will be listening on port `8080` (not always, be sure
    to read the post-installation instructions, if any, or check the opened ports
    using `netstat -ltn` on Linux), and it will be accessible from the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to expose your service to a wider audience, then you might want
    to install a proxy in order to serve it from port `80`, with whichever hostname
    you want. We won't cover this aspect, but Jenkins provides additional documentation
    on how to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's open `http://<yourhostname>:8080` in our browser, and let's start
    configuring the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Jenkins organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before doing this, you may need to understand how Jenkins is organized. If you
    are already experienced with it, then you may want to skip over to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only two sections that you need to keep an eye out for:'
  prefs: []
  type: TYPE_NORMAL
- en: The jobs list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The management panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first one is where you will normally land, and it is what you will be working
    on most of the time.
  prefs: []
  type: TYPE_NORMAL
- en: In the Jenkins terminology, a **job** is a specific set of rules and operations
    that needs to be performed in a specific project. You can have different jobs
    for the same project, which perform slightly or completely different operations,
    and these can be triggered sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: A **build** is the process of executing a job. We will cover this and see what
    we can achieve with a single build by configuring the various aspects of the job.
    The build can result in the creation of one or more artefacts, deploy the build
    result somewhere or trigger some other job or process within Jenkins itself, or
    outside of it.
  prefs: []
  type: TYPE_NORMAL
- en: You need to fix Jenkins' security immediately after installing it, unless you
    will be the only person accessing it and the server where it's installed will
    have no external access, it's probably better to navigate to `http://jenkins:8080/configureSecurity/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set up whichever authentication system you want, using PAM, LDAP, or
    its internal user database. We will be using the latter, but remember that if
    you''re willing to do something a bit stronger or interconnected, there may be
    additional steps that you may need to follow. Most of the interface forms have
    a few small info buttons that you can use to display some information, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Jenkins organization](img/B03646_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: View of the **Configure Global Security** page with an open info box
  prefs: []
  type: TYPE_NORMAL
- en: The second aspect that requires a little thinking from your side is how Jenkins
    will be accessing and checking your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Any major online repository provider, such as GitHub and BitBucket will let
    you create a so-called **deployment key**, which is used for a read-only access
    to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For anything more complex, such as merging and pushing your branches, you would
    need to set up its own user, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Jenkins organization](img/B03646_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The deployment keys setup page in BitBucket, available from the settings of
    each repository
  prefs: []
  type: TYPE_NORMAL
- en: If you have more repositories that are hosted by different places, then you
    need to set up as many credentials as needed for Jenkins. This can be accomplished
    by going to `http://jenkins:8080/credential-store/` (or **Home** | **Credentials**
    | **Global Credentials**). As you can see, there's a lot behind the scenes, so
    feel free to explore and read the documentation for understanding what's needed.
    Normally starting with the setup of the global credentials may be enough, but
    there are cases where a non-global configuration is needed.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we need to create the SSH key pairs for the user `jenkins`
    first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have your SSH key, you need to grab the public key, which is stored
    at `/var/lib/jenkins/.ssh/id_rsa.pub,` and then copy it to your repository as
    a deployment key. You can copy it to the clipboard by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This has been done through the `root` user because the `jenkins` user won''t
    have the X display setup in its environment and this is likely to cause the error
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are on a headless server, then you won't have many choices. You can either
    `scp` on the file to your local machine or `cat` the file and then paste it in
    the browser manually.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your deployment key set up, you need to go back to Jenkins
    and then navigate to the credentials store. Once there, set the username as `jenkins`
    (which is the system's user name), and set the private key as `From the Jenkins
    master ~/.ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections will cover the installation of additional plugins and
    the configuration of the job.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have covered the basic configuration of Jenkins, you need to install
    the required plugins so that everything works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: This section is normally handled easily by Jenkins. There's a project that is
    specifically for the PHP projects on Jenkins. You can find it at [http://jenkins-php.org](http://jenkins-php.org).
    Not only does the project list the following plugins, but it also lists a meta
    plugin, which is available on Jenkins, and it will download all the required plug-ins.
  prefs: []
  type: TYPE_NORMAL
- en: '**Checkstyle**: This is used for processing the PHP_CodeSniffer log files in
    the Checkstyle format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clover PHP**: This is used for processing the PHPUnit''s Clover XML log file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crap4J**: This is used for processing the PHPUnit''s Crap4J XML log file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DRY**: This is used for processing the phpcpd log files in the PMD-CPD format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML Publisher**: This is used for publishing the documentation generated
    by phpDox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JDepend**: This is used for processing the PHP_Depend log files in the JDepend
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plot**: This is used for processing the phploc CSV output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PMD**: This is used for processing the PHPMD log files in the PMD format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Violations**: This is used for processing the various log files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xUnit**: This is used for processing the PHPUnit''s JUnit XML log file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list is taken from [http://jenkins-php.org/installation.html](http://jenkins-php.org/installation.html),
    and it might change in the future, so keep that in mind.
  prefs: []
  type: TYPE_NORMAL
- en: If you navigate to **Manage Jenkins** | **Manage Plugins**, then you can search
    for the plugin `php` and select **Install without restart**. When you are on the
    installation page, select the **Restart Jenkins when installation is complete
    and no jobs are running** option (sometimes the installation page does not refresh
    itself automatically, so you might have to refresh the page; a list of plugins
    will get installed even if you navigate away from this page).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to install the tools needed by these plugins, so open the `composer.json`
    file and then add the following to your `require-dev` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, run the `composer update` to install these effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the required build files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A part of the configuration of the build will be stored in Jenkins, but it's
    mostly for publishing the reports and the documentation (if you need it). We saw
    the actual configuration on how to run the various scripts in [Chapter 8](ch08.html
    "Chapter 8. Analyzing Testing Information"), *Analyzing Testing Information*.
    This is in the `build.xml` file. This default name can be picked up by Jenkins
    automatically. This can be configured, but it's pointless to do so unless you
    already have a file with that name.
  prefs: []
  type: TYPE_NORMAL
- en: The build file should sit at the root of the project repository, and it should
    have a valid XML.
  prefs: []
  type: TYPE_NORMAL
- en: The language we are going to use to write the build file is Apache Ant. There
    are either more complex solutions, such as Maven, or more ad-hoc solutions such
    as Phing for this, but I still prefer Ant. This is because it's simple and flexible
    (it's verbose, but once you've written it, there isn't much to be said). It also
    allows you to run anything that is not specific for a particular language.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to create the build file by copying the basic structure from the
    `jenkins-php` project (available at [http://jenkins-php.org/automation.html](http://jenkins-php.org/automation.html)),
    and then by amending it with the corrections that I'll explain in the next few
    paragraphs. I'll be splitting the functionality of Composer, Yii, and Codeception
    in separate files, while the main functionality (from `jenkins-php`) will remain
    as it is.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basic Ant structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ant is quite simple because it's a collection of directives. The root of the
    XML is a `<project>` tag, which contains a series of `<target>` tags that can
    be called from the Jenkins job, and you can choose the `<property>` option for
    defining the properties, and then choose the `<include>` statements for including
    separate files.
  prefs: []
  type: TYPE_NORMAL
- en: There is no default name for the targets, but the main target is usually called
    `build`. It comes with a series of dependencies, which trigger the other targets
    sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: Each directive has a series of additional attributes and tags, and these can
    be nested in them. The user contributed directives can also be downloaded separately
    for these (and most of the Linux distributions provide the common ones in a separate
    package). This can help you in avoiding the effort that is put in when you have
    to create these by hand. For instance, you can use this for archiving and packaging
    a collection of files, which are normally wrappers for the actual command-line
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that Ant is not an imperative programming language, so check its documentation
    if you want to extend and modify the language.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for the core Ant directives is available online at [http://ant.apache.org/manual/](http://ant.apache.org/manual/),
    and it's probably a good starting point for understanding it.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the build.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compared to the file you have copied from `jenkins-php`, we are going to keep
    most of the targets, albeit the `phpunit` target, which can be safely deleted.
    This is because we're going to switch to a custom target specifically for Codeception.
    The rest of the changes will be made in separate files, and they will be discussed
    after this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important changes that need to be made are relative to the folders
    you want these programs to work on. Every single command accepts different arguments,
    so include all the directories you want. Let''s start amending the first target,
    which will do a syntax check of all the files that we specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can add our code directories to be picked up by phploc, which will
    give us an idea of the complexity of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'pdepend uses a different syntax in defining new directories; as you can see,
    if you need to make changes, you will need to invoke the commands'' help manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next in line is PHP Mess Detection (PHPMD), which will help us keep the code
    clean and tidy. Once again, the syntax is slightly different than the previous
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'PHP Code Sniffer (PHPCS) can be also taken as an additional and more important
    step for linting your code. As explained, we also need to specify the specific
    Yii coding standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The last one is PHP Copy-Paste Detector (PHPCPD), which does exactly what it
    says on the label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you have probably noticed, some of the targets that I've pasted here are
    the `-ci` targets. These targets are required by Jenkins in order to generate
    all the necessary reports. We will pick these up and publish them in our build
    later. Remember to mirror the changes on the other targets as well; I have excluded
    them here to avoid redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these changes, it's worth noticing that I've selected the Yii
    2 CheckStyle rule set for validating the syntax. This step is quite useful for
    maintaining the overall code style and for keeping it in sync with the one used
    by the developers of the framework, and cross-team.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've made the basic changes, let's go to the Composer, Yii, and the
    Codeception files.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the environment for the build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `build` command, which is the default invoked target, has a chain of dependencies
    that will sequentially trigger the `prepare` target, run some other targets for
    the build, run the tests, and then generate the required documentation with phpDox.
  prefs: []
  type: TYPE_NORMAL
- en: The `prepare` target depends on the `clean` target. These two steps will clean
    up the environment, generate the required folder structure to accommodate the
    results that will be produced by the following steps, and set some properties
    to avoid invoking the target twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the `prepare` target has the following property set at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While the target definition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It has now become clear that *unless* the property is set, we can execute the
    content of the target. The same thing happens with the `clean` target.
  prefs: []
  type: TYPE_NORMAL
- en: In these two targets, we need to update the list of directories that are cleaned
    and recreated every time the job is run. You should, at least, have the following
    directories, and you can also include any other directories that are relevant
    to your project for `clean`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And for `prepare`, the following directories will be recreated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adding the required configuration settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start adding our custom files, we need to add some of the configuration
    files, which some of the executables, namely phpmd and PHPDox, will expect to
    be in the `/build` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `jenkins-php` project will provide most of these configuration files, and
    these can be copied from [http://jenkins-php.org/configuration.html](http://jenkins-php.org/configuration.html).
  prefs: []
  type: TYPE_NORMAL
- en: In case of phpmd, you can adjust the level of the cyclomatic complexity threshold.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The default value is normally `10`, but the suggested value is `5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For PHPDox, the story is a little complex. The current configuration is not
    particularly flexible, so I''ve decided to go through the longest possible route,
    which is, generating the skeleton file with the help of the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This created a file that has all the documented options, and from there, I
    created my own configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Regardless of my efforts, the current version that I'm using (0.7) had a bug
    that caused it to crash when run from Jenkins. This has been fixed in the current
    dev-master version, but this has caused other problems for me. I'm pretty sure
    that you should be fine when the next version will be released. In our case, the
    documentation is less critical from the perspective of the non-working tests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Composer, Yii, and Codeception support in Ant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we need to integrate the changes that are needed to prepare our application
    for testing. We will be using Composer to install the required dependencies and
    Yii to run the needed migrations. After this we will need support for Codeception,
    as it's the main tool for running the tests.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen in the definition of `prepare`, the target is dependent on `clean`,
    `composer.composer` and `yii.migrate-all`.
  prefs: []
  type: TYPE_NORMAL
- en: The first target is taken from [https://github.com/shrikeh/ant-phptools](https://github.com/shrikeh/ant-phptools),
    which provides a wrapper for Composer. It's not the best, but it was the only
    one that showed up on a quick search. The package does what it does quite well,
    and it's dependent on a properties file called `composer.properties`, and an example
    of it is provided by the project author.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some built-in properties that are accessible in an Ant script, which
    can be useful for understanding, for instance, the current directory and building
    up the appropriate paths in a more distributable fashion. This is available at
    [http://ant.apache.org/manual/properties.html](http://ant.apache.org/manual/properties.html).
  prefs: []
  type: TYPE_NORMAL
- en: Calling the `composer.composer` target will install Composer, if not found in
    the specified directory, and use it to update all the dependencies. I would prefer
    if it wiped the installation directory of the dependencies and then ran `composer
    install`. Unfortunately, that's the only way to install the dependencies defined
    in the `composer.lock`, instead of updating them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any doubts about the differences between `composer.lock` and `composer.json`,
    feel free to step back for a second, and skim through [Chapter 2](ch02.html "Chapter 2. Tooling
    up for Testing"), *Tooling up for Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: I've put the `composer.xml` and the `composer.properties` file in the `/build`
    directory, and I've added the following at the beginning of the project defined
    in `build.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can add the dependency of `composer.composer` to the list of the targets
    defined in the `prepare` target without any problems.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is resetting the database to a state that we can use, and we
    will do it by re-running all of the migrations and applying all of the missing
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: For this, I've created a simple Ant project. You can place it in your `/build`
    directory, which you can download from [https://github.com/ThePeach/Yii2-Ant](https://github.com/ThePeach/Yii2-Ant).
    The project provides a wrapper for the Yii CLI interface for running the migrations.
  prefs: []
  type: TYPE_NORMAL
- en: I won't go into the details of this project, as it's simple and it can be understood
    quite easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can include it like we did in the Composer project earlier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can invoke it either by calling the ready-made target `migrate-all`, as
    we did for the dependencies of `prepare` in our `build.xml`, or by calling the
    `migrate` MacroDef the way you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ant has to extend its basic syntax, which defines new tasks like MacroDef. You
    can read more about this in the official Apache Ant documentation, which can be
    found at [https://ant.apache.org/manual/Tasks/macrodef.html](https://ant.apache.org/manual/Tasks/macrodef.html).
  prefs: []
  type: TYPE_NORMAL
- en: The `migrate` action will always pass `all` as an argument to the `yii` script,
    and this is enough for what we need to achieve, but this could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: Codeception is added in a similar way. You can grab a copy from the repository
    I've created at [https://github.com/ThePeach/CodeCeption-Ant](https://github.com/ThePeach/CodeCeption-Ant).
  prefs: []
  type: TYPE_NORMAL
- en: This Ant project provides a main target called `run-tests`, which you can execute
    without worrying too much about the parameters and such. You can also dynamically
    pass some parameters at run time to fine-tune the invocation of Codeception, such
    as `codeception.suites` and `codeception.options`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If not set, these will be assigned an empty value and `--xml --coverage-xml
    --coverage-html` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Jenkins build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to configure the build is by starting with the `jenkins-php`
    project template. You can always import it separately and integrate it with your
    own project later.
  prefs: []
  type: TYPE_NORMAL
- en: The *Integration* page available at the `jenkins-php` website ([http://jenkins-php.org/integration.html](http://jenkins-php.org/integration.html))
    will explain how to import the project. Remember to adjust the parameters to your
    own configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Now go to the dashboard, click on the new project **jenkins-php**, and then
    select **Configure** from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: If you've never used Jenkins, then you might get a little scared by the length
    of the configuration page. However, there are only three sections that you need
    to keep in mind, and we'll cover them now.
  prefs: []
  type: TYPE_NORMAL
- en: Generic build settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generic build settings contains settings for the enable/disable switch for the
    build, how many builds to keep, when to discard the build and the repository configuration,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using Git, then you will have the ability to configure almost anything,such
    as being able to merge branches, committing and pushing back integrated changes,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We will just need to specify the branch as `*/master` and the deployment key
    as we what saved before, from our repository provider.
  prefs: []
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The build settings are the only thing that you need to care about when deciding
    what to run; here you specify the target names and any additional options.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, this is `build`, and by clicking **Advanced**, we can fill in the
    **Properties** field with `codeception.suites=unit`. This will allow us to run
    a test build without having to wait for long.
  prefs: []
  type: TYPE_NORMAL
- en: Postbuild settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the longest section of the configuration. All the steps that will be
    performed for publishing the reports in the dashboard of the build, such as linking
    the documentation that you need to the various pieces, choosing what the thresholds
    required to decide are, and deciding when to mark the job failed, and so on are
    defined here.
  prefs: []
  type: TYPE_NORMAL
- en: The default threshold values defined here are quite high, so there isn't much
    that you should be worried about.
  prefs: []
  type: TYPE_NORMAL
- en: The only changes that we will need to make are regarding the reports generated
    by Codeception, which will provide the JUnit XML reports, the Clover XML reports,
    and the coverage in the HTML format.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of the configuration page, you will find a section titled **Publish
    Clover PHP Coverage Report**, here update the Clover XML report path to `tests/codeception/_output/coverage.xml,`
    and the **Publish HTML Report** to `tests/codeception/_output/coverage/`. If you
    click on **Advanced panel**, then you will be able to modify the thresholds, and
    you can use them to decide how much coverage you require from your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Just after this step, you will see **Publish xUnit test results report**, here
    change `PHPUnit-3.x Pattern` to `tests/codeception/_output/report.xml`. As you
    have done before, in the next step, you can configure the thresholds for the failed
    tests. By default, there shouldn't be any failed tests. So, all the fields will
    be set to 0\. Do not change this setting, unless you want to live in shame.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's test everything and check if it is working as expected. Save the configuration,
    and click on **Build Now** to execute the job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once finished, you can head back to the page of the build, and then you will
    see the following graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing the job](img/B03646_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project dashboard at a glance
  prefs: []
  type: TYPE_NORMAL
- en: Most of the graphs that appear on the right-hand side of the column are a quick
    way of understanding what triggered a failed build.
  prefs: []
  type: TYPE_NORMAL
- en: The two graphs, which are generated by PDepend, displayed at the very top show
    the so-called **Overview Pyramid** and the **Abstraction Instability Chart**.
    Both of them show interesting stats about your project, which you can depend on
    for taking some decisions in terms of performance, scalability, and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PDepend documentation provides further information about both of these graphs,
    and I highly recommend reading the following sources:'
  prefs: []
  type: TYPE_NORMAL
- en: The Overview Pyramid at [http://pdepend.org/documentation/handbook/reports/overview-pyramid.html](http://pdepend.org/documentation/handbook/reports/overview-pyramid.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Abstraction Instability Chart at [http://pdepend.org/documentation/handbook/reports/abstraction-instability-chart.html](http://pdepend.org/documentation/handbook/reports/abstraction-instability-chart.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, you should have all the tools required for stepping forward and
    implementing, improving and excelling at testing and at automating your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Going forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've managed to get to this point, then you might need to make some additional
    considerations.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, automation incorporates a lot of reporting tools, suites for
    testing, and other projects to help you understand, improve, and analyze your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest gripes of automation is the speed at which it performs all
    the tests.
  prefs: []
  type: TYPE_NORMAL
- en: There are techniques to halve the time it takes to perform these tests. While
    Jenkins and `jenkins-php` provide targets for running the targets in parallel,
    by executing `build-parallel`. With Codeception, the story is a bit different
    and you would need to take a different route by extending the Ant project we've
    created before. Codeception uses robo-paracept to parallelize the tests.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to discover more about Codeception, then there's a nice article
    available at [http://codeception.com/docs/12-ParallelExecution](http://codeception.com/docs/12-ParallelExecution).
    You'll notice that it will work by marking groups of tests together and aggregating
    them so that Paracept will be able to run in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've seen most of what you need to know about automation. The topic is quite
    vast, and we've covered Jenkins, how it works, and how it is configured. We've
    learned to make use of Ant to decide what to do, and how to drive your build.
    We've also looked at what is being generated by the build and displayed it in
    the Jenkins dashboard.
  prefs: []
  type: TYPE_NORMAL
