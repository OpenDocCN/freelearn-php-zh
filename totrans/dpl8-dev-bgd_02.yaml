- en: Chapter 2. Custom Module Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*We have setup our development environment in [Chapter 1](ch01.html "Chapter 1. Setting
    Up a Drupal Development Environment"), *Setting Up a Drupal Development Environment*.
    Now let''s get started and create a new content type and create a basic custom
    module to change one of the fields on our content type. We will also explore the
    concept of test driven development as good programming practice.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a custom content type (Recipe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics of object-oriented programming in Drupal 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction of Symfony with Drupal 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics of Drupal 8 module development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Field formatter API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test-driven development** (**TDD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and running functional tests for custom module functionality using an
    inbuilt PHPUnit test framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and running unit tests with code coverage reports from within the
    PHPStorm IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom Recipe content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we installed Drupal 8 on our system. Now we are going
    to create our custom recipe content type. Before that, we will discuss five new
    fields added in Drupal 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date**: The **Date** field is the **Date** module in Drupal 7\. We can choose
    to record the **Date and time** or **Date only** as options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: The **Date** module is simple but the **Email** field is even simpler.
    There are no settings at all for the **Email** field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link**: The **Link** field allows both internal and external links, along
    with a link text option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telephone**: The **Telephone** field is disabled by default in Drupal 8,
    so we need to enable the module to use it. It has no settings. It really is just
    a text field that adds `<a href="tel:` to turn the text into a telephone link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reference**: The **Reference** module is the most powerful field. We can
    link to anything that''s an entity, which means we can link to comments, content,
    blocks, files, terms, and users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now login to your Drupal 8 website. You should see a new admin toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating custom content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a custom content type by following these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Structure** in the admin toolbar, and then click on **Content types**.![Time
    for action – creating custom content type](img/4659_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Content types** screen, click on the **Add content type** link.![Time
    for action – creating custom content type](img/4659_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write `Recipe` in the **Name** text field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the description, enter this text `Simple recipe content type based on the
    schema.org base HTML5 Microdata schema for Recipes at: http://schema.org/Recipe/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Title** field label, enter `name`.![Time for action – creating custom
    content type](img/4659_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and manage fields** button. For now we will go with the
    default content type configuration for everything else.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, delete the **Body** field that is automatically added to our content type,
    by clicking on the **Delete** link, and then confirming by clicking on the **Delete**
    button on the next screen.![Time for action – creating custom content type](img/4659_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will add some new fields to our Recipe content type. We will use the
    Recipe schema property names as our field names. The first property listed in
    the table at `http://schema.org/Recipe/` is **description**. Once you click on
    the **Add Field** button, you will get the option **Add a new field** select box.
    In that you need to select **Text (formatted, long, with summary**). On the label,
    you need to write `description`.![Time for action – creating custom content type](img/4659_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on **Save and continue**. On the next screen, set **Allowed number
    of values** limited to `1`, and click on the **Save field settings** button.![Time
    for action – creating custom content type](img/4659_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **description settings for Recipe** page, enter `A short description
    of the item` as **Help text**. Accept the rest of the default settings, and then
    click on the **Save settings** button at the bottom of the page:![Time for action
    – creating custom content type](img/4659_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will move on to the image property. We are going to use an existing
    field for this property. In the **Re-use an existing field** section, select **Image:
    field_image (Image)**.![Time for action – creating custom content type](img/4659_02_08.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and continue** button to accept the default settings on
    the **FIELD SETTINGS** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the **Save settings** button to accept the **Image**
    settings for Recipe and **IMAGE FIELD SETTINGS**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **DatePublished** and **Author** properties will be captured by the core
    Drupal node properties. We will skip the rest of the **Properties from CreativeWork**
    for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a new number field `cookTime`, **Label** as `cookTime` field type as
    **Number(integer)** from the dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save and continue** button to accept the default settings on
    the **FIELD SETTINGS** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, enter `The time it takes to actually cook the dish in minutes.`
    as the **Help text**. Enter `minute|minutes` as the **Suffix** under the **cookTime
    settings for Recipe** page, and click on the **Save settings** button.![Time for
    action – creating custom content type](img/4659_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Along with **cookingMethod**, we will also skip the **nutrition**, **recipeCategory**,
    **recipeCuisine**, and **totalTime** properties for now. We will add these properties
    later in the book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **ingredients** property, the settings will be **label: ingredients**
    from the **Add a new field** dropdown you can select a **Field type : Text (plain)**.
    Click on the **Save and continue** button. On the next screen, accept the default
    setting of 255 for maximum length and the **Allowed number of values** as **Unlimited**,
    then click on **Save field settings**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **ingredients settings for Recipe** page, enter `An ingredient used in
    the recipe` as the **Help text**. Accept the rest of the default settings, and
    click on the **Save settings** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **prepTime** property, the settings will be **label: prepTime** and
    from the **Add a new field** dropdown you can select a **Field type: Number(integer)**.Click
    on the **Save and continue** button to accept the default settings on the **FIELD
    SETTINGS** page. On the next page, enter the length of time it takes to prepare
    the recipe in minutes as the **Help text**, enter `minute|minute` as the **Suffix**
    under the **prepTime settings for Recipe** page, and then click on the **Save
    settings** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next add the **recipeInstructions** property. Click on the **Add field** button.
    In the next screen, select **Field type** as **Text(formatted,long)** and **Label**
    as **recipeInstructions**. Then click on the **Save and continue** button. On
    the next page, leave all the settings as default and click on the **Save** button.
    In the next settings page, enter `The steps to make the dish.` as the **Help text**
    and leave rest of the settings, and click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the **recipeYield** property, the settings will be **label: recipeYield**
    from the **Add a new field** dropdown you can select a **Field type : Text(plain)**.
    Click on the **Save and continue** button. On the next screen, accept the default
    setting of 255 for **Maximum length** and the **Allowed number of values** as
    **Limited** to **1** then click on **Save field settings**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **recipeYield settings for Recipe** page, enter `The quantity produced
    by the recipe (for example, number of people served, number of servings, and so
    on).` as the **Help text**. Accept the rest of the default settings, and click
    on the **Save settings** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now have a **Manage fields** screen for our Recipe content type that
    looks similar to the following screenshot:![Time for action – creating custom
    content type](img/4659_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You created the new Recipe content type and added new fields.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a new recipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created the new recipe content type and modified its fields,
    let's create a new recipe by clicking on the **Add content** link in the shortcut
    bar, and then click on the link for Recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the path **Manage** | **Content** and click on the **Add content** button,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – adding a new recipe](img/4659_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is my recipe for Awesome Sauce that you may use, but you are welcome to
    add any recipe you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**: `Awesome Sauce`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**description**: `A deliciously sweet and spicy sauce that makes everything
    you put it on that much awesome. A little goes a long way...`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ingredients**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`One ghost pepper (optional)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Two habanera peppers`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Three Thai peppers`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Four jalapeno peppers`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Four garlic cloves`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Three cups of rice vinegar`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`One tea spoon of fish sauce`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`One cup of sugar`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**recipeInstructions**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1\. Remove the stems from the peppers.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2\. Add the peppers and garlic to a food processor, and blend until pureed.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3\. Add vinegar, sugar, fish sauce, and puree to a small saucepan, and bring
    to a simmer over low heat.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4\. Simmer sauce for 20 to 30 minutes, until the sugar has completely dissolved.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5\. Remove the saucepan from the burner and let it stand for 10 minutes.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6\. Your Awesome Sauce is ready to serve, or it can be refrigerated for up
    to three weeks.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thai peppers and fish sauce are typically available in most Asian markets. Ghost
    peppers are generally considered to be the hottest pepper in the world and may
    be left out for those who have a little less tolerance for heat, or if you aren't
    able to find them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Yield**: `12 servings`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**prepTime**: **10 minutes**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**cookTime**: **30 minutes**![Time for action – adding a new recipe](img/4659_02_12.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are done, save it to view your new recipe page.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added our own recipe to the site.
  prefs: []
  type: TYPE_NORMAL
- en: OOP concepts in Drupal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we dive into developing our first custom module, let's understand the
    basics of the modern **object-oriented programming** (**OOP**) approach which
    has been adopted in Drupal 8 to make it more familiar for developers using other
    pure PHP frameworks. The OOP design patterns have been used to implement a variety
    of Drupal concepts, such as fields, views, entities, and nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although OOP comes with a steep learning curve that includes mastering key
    programming techniques such as inheritance and polymorphism, it has been found
    to be easier to extend, refactor, and maintain in the long run when compared to
    the procedural programs. This lets you focus on the programming part instead of
    wasting time on maintenance issues. The Dependency Injection is one of the OOP
    design patterns that has been used extensively in Drupal 8\. A basic understanding
    of this concept is crucial to gain access to and make use of some core APIs. Here
    they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objects**: An **object** is an individual instance of the data structure
    defined by a class. A class is defined once and then you make an object to belong
    to a class. In other words, a class can be represented as a type of object. It
    is a blueprint from which you can create an individual object. A class is composed
    of three primary components: attributes, name, and operations. Here is a small
    PHP example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Abstraction**: One of the core principles in OOP, **abstraction** refers
    to the representation of any type of data in which you can keep the implemented
    details abstracted or hidden. It allows you to write code that works seamlessly
    with abstract data structures such as lists, arrays, and other data types. As
    the code remains unchanged while you work with different data types, you can write
    a new data type and make it work with a program without changing it. Here is a
    small PHP example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Encapsulation**: Also synonymous for information hiding, encapsulation is
    basically the amalgamation of all the resources that are needed for an object
    to function, including the methods and the data. This process is carried out by
    creating classes that help you expose the public methods and properties. A class
    is seen as a capsule or a container that encapsulates the attributes and the properties
    along with a set of methods in order to provide indented functionalities to other
    classes. Here is a small PHP example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Polymorphism**: Polymorphism derives its name from *multiple shapes* and
    refers to the function of requesting the same operations that can be performed
    by different types of things. There are three major techniques that can be used
    to achieve polymorphism: method overloading, method overriding, and operator overloading.
    Here is a small PHP example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content of file `ShpeInterface.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The content of file `Circle.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Inheritance**: You can create a new class from an existing class by extending
    it, and this process is known as **inheritance**. One of the key relationships
    used among objects is specialization, which is implemented using the principle
    of inheritance. Here is a small PHP example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we will see the preceding concepts in action while developing our new custom
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing a custom module in Drupal 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we are going to create a custom module which will print `Hello World`
    in a page under the path: `mypage/page`. Follow the basics steps involved in the
    custom module development in Drupal 8\. Before that, we will discuss the Drupal
    root directory structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – developing a custom module in Drupal 8](img/4659_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the preceding screenshot. We will see what each directory contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/core`: All the files provided by core that don''t have an explicit reason
    to be in the / directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/modules`: The directory into which all the custom and contrib modules go.
    Splitting this up into the sub-directories contrib and custom can make it easier
    to keep track of the modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/profiles`: This folder contains contributed and custom profiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/themes`: - contributed and custom (sub)themes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/sites/[domain OR default]/{modules,themes}`: Site specific modules and themes
    can be moved into these directories to avoid them showing up on every site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sites/[domain OR default]/files`: Site specific files tend to go here. This
    could be files uploaded by the users, such as images, but also includes the configuration,
    active as well as staged config. The configuration is read and written by Drupal,
    and should have the minimal amount of privileges required for the web server,
    and the only the web server, to read and modify them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/vendor`: This folder contains all the backend libraries that Drupal Core
    depends on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding your module folder name. Unlike Drupal 7 where we used
    to keep the modules folder inside `site/all`, in Drupal 8 we have to keep our
    custom or contributed modules within the module available under the root directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to use different file structures as follows in case of multisite configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's name our module `d8dev` and create a folder name `d8dev` under the `modules/custom`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `.info.yml` file. In Drupal 7, we used to have the `.info` file.
    This has been changed to `.info.yml` in Drupal 8\. Now instead of the `.info`
    parser, we use the Symfony YML component. And the new extension `.info.yml` applies
    to modules, themes, and profiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Drupal uses some of the Symfony components for this version. By using the HTTP
    Kernel component, Drupal and Symfony projects became more interoperable. We will
    be able to easily integrate custom Symfony applications with Drupal and vice versa.
    You can learn more about the Symfony structure and how Drupal uses it. Follow
    this link [http://symfony.com/projects/drupal](http://symfony.com/projects/drupal).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**YAML**: Similar to PHP, YML is a simple language and there are syntaxes for
    simple types; for example Integers, Strings, Floats, or Booleans.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Drupal 8, the new `info.yml` files are required to update Drupal core about
    different modules, themes, or any install profile. This also provides additional
    criteria to manage modules along with version compatibility.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `d8dev.info.yml` file under the `d8dev` directory we created in Step
    1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What have we added in `d8dev.info.yml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`name`: As is obvious, the `name` field is required for our module as the identifier
    and will be displayed on the `Module` page. We should follow the convention of
    capitalized and Symantec names.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: We have added a short one-liner description to help acquaint
    the administrator with what this module does.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: We should use the name of the package if this is going to be part
    of other modules. Since we are developing a custom module, we have kept `Custom`
    or you can use `Other` if you are not sure.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is a required property to let Drupal know if it is a module, or
    a theme, or an installation profile.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: We should specify the version number of the module we are developing.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core`: We need to specify the Drupal version for which this module will be
    used with, `8.x`. This is a mandatory property.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `.routing.yml`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Routing system**: A route is a path which is defined for Drupal to return
    some sort of content on. For example, the default front page /node is a route.
    When Drupal receives a request, it tries to match the requested path to a route
    it knows about. If the route is found, then the route''s definition is used to
    return the content. Otherwise, Drupal returns a 404.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routes and controllers**: Drupal''s routing system works with the Symfony
    HTTP kernel. Reading a bit on Symfony will be helpful. Basic knowledge about the
    Symfony HTTP Kernel would be enough to do general route operations. The following
    diagram explains how the different components relate to each other:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '![Time for action – developing a custom module in Drupal 8](img/4659_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We are going to write the path in the `.routing.yml` file. Again, here we are
    going to use the Symfony2 components to handle the routing. Following is our `d8dev.routing.yml`
    code which includes defining routes as the configuration and managing the callback
    in a controller, which is a method of a Controller class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding code, the first line `d8dev.my_page` is route, a Symfony component
    which maps an HTTP request in Drupal to a set of configuration variables. Route
    is defined as a machine name as `module_name.route_name`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next is path, where we specify the URL path we want this route to register.
    Do not forget to add a leading forward slash.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We have two configurations under defaults: `_controller`, which references
    a method on the `d8devController` class, and `_title`, where we add the default
    page title, such as `My first page in Drupal 8`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As part of the requirements configuration we have specified the permission,
    who can access the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can read more on the routing file at [https://www.drupal.org/node/2092643](https://www.drupal.org/node/2092643).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the Route Controller class. We have to create our `ModuleController.php`
    according to the PSR-4 naming standard which has been implemented in Drupal 8
    for package-based PHP namespace auto-loading by the PHP Framework Interoperability
    Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: PSR describes the specification for writing auto-loading classes from file paths.
    It also describes where to place the files that will be autoloaded according to
    the specification. Read more about PSR-4 namespaces and auto-loading at [http://www.php-fig.org/psr/psr-4/](http://www.php-fig.org/psr/psr-4/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a folder `modules/custom/d8dev/src/Controller`. Within this folder,
    create a file named `d8devController.php` with the following content:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Controller is a PHP function we add which takes the information from the HTTP
    request and constructs and returns an HTTP response.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The controller includes all the logic our application needs to display the content
    of the page. Based on the matching route, the specific controller is executed
    and it creates and returns a response object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, if the browser requests the page having the path `/mypage/page`,
    it will execute the `d8devController::myPage()` controller and display a page
    that simply prints `Hello world!`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enable the module. Go to the path `admin/modules`.![Time for action – developing
    a custom module in Drupal 8](img/4659_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have enabled the module and opened the path `http://localhost/d8dev/mypage/page`
    in your favorite browser, you'll see the **Hello world!** text printed from our
    module.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We completed our first custom module and displayed the **Hello World!** message
    on a custom page URL. Reward yourself with one hot cup of coffee before getting
    deeper into module development and introduction of Drupal API.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing custom field formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open the recipe page we created just before developing our custom module.
    On our recipe page which we created using our custom content type, all time fields
    (**cookTime** and **prepTime**) values are displayed in minutes, for example,
    60 minutes and 90 minutes. It would be nice if 60 minutes was displayed as 1 hour
    and 90 minutes was displayed as 1 1⁄2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: One way we can make this happen is to develop a custom module to create a custom
    field formatter that will display the duration related fields of **cookTime**
    and **prepTime** as hours instead of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the basic steps involved in creating a new plugin or creating
    a custom field formatter:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the custom formatter class. This class defines its meta information in
    its annotation block, which holds the ID of the formatter, label, and field type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Core ones are defined either by core modules that can be found inside the `Drupal\Core\Field\Plugin\Field\FieldFormatter`
    and namespace plugins are placed inside the `src/Plugin/` folder of our module.
    In the case of field formatters, this will be the `src/Plugin/Field/FieldFormatter`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For creating a formatter, you need to follow these next steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create `RecipeFormatter.php`. Copy this to within our module folder as `d8dev/src/Plugin/Field/FieldFormatter/RecipeFormatter.php`
    and add the following lines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Drupal 7, we used to have `hook_field_formatter_info`. Instead of that, a
    new annotations system has been introduced in Drupal 8\. Now, we need to define
    the formatter using annotations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following lines to `RecipeFormatter.php` we created in step 1:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The PHP comment docblock before your formatter class with the `@FieldFormatter`
    annotation is really important:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`class RecipeFormatter extends FormatterBase { }`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The annotation attributes are pretty self-explanatory. All we've done is define
    an ID, label, and which field type this formatter should be available on. The
    `field_types` attribute is the most important part, if you don't add `integer`,
    `decimal`, or `float` then this formatter will not appear on the manage display
    page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last bit of work we'll do on the formatter is add the `viewElements()` method.
    This method will be used to display the actual formatter and it's the only method
    required if the formatter class extends `FormatterBase`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append the following lines into the `RecipeFormatter.php` class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we're doing here is passing the processed value into a custom template
    that'll be used to display the embedded HTML code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also need to create a helper function to process the value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Append the following lines to the `RecipeFormatter.php` class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, our `RecipeFormatter.php` class looks like the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the template. So far, now we have created the formatter. Now we need
    to create a custom template to complete this module development. The template
    will be called `recipe_time_display` and it''ll accept the `value` as the single
    parameter. For creating the template, we will follow these next steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up `d8dev.module` and add the following function:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a folder in the module called `templates` and a file named `recipe-time-display.html.twig`.
    The path is : `d8dev/templates/recipe-time-display.html.twig`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can have a brief look at Twig on [http://symfony.com/doc/current/book/templating.html](http://symfony.com/doc/current/book/templating.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here we are just printing the value directly. If you want you can add more
    HTML to the value through this file. Add the following to `recipe-time-display.html.twig`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After saving all the files from the previous steps, go to your site on the browser
    and **Clear all caches** from the path `admin/config/development/performance`.![Time
    for action – developing custom field formatter](img/4659_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clearing cache, you can go to the path `admin/structure/types/manage/recipe/display`
    and change the **FORMAT** fields **cookTime** and **prepTme** to the formatter
    from **Default** to **Duration**.![Time for action – developing custom field formatter](img/4659_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that you click on the **Save** button on the **Manage display** page.
    Now view the Recipe content item that we created earlier, and you should see the
    new time format.![Time for action – developing custom field formatter](img/4659_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a custom module that allows us to format our Recipe content duration
    field the way we wanted it—integers converted to hours and fraction of hours.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driven development (TDD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lot of times we hear that Drupal is not a good choice for writing complex web
    applications. One of the chief reasons is that Drupal doesn't support TTD or automated
    testing. But in Drupal 8 we have the PHPUnit tests and Simpletest tests in the
    core.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8 is developed keeping in mind the use of automated tests, including
    unit tests as well as functional tests. Unit test is at the lower level and used
    primarily to test the functionality of classes, whereas functional test is done
    at the higher level to check the web output.
  prefs: []
  type: TYPE_NORMAL
- en: Important is run both types of tests for most of the features we develop before
    making any changes to the existing Drupal system to make sure no existing functionality
    is breaking up. We also call this regression testing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Test-driven development (TDD)](img/4659_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To follow TDD, we need to follow these two processes:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you make a patch to fix a bug or to change an existing functionality,
    make sure to write a test that fails before changes have been in the code and
    that it passes after you make the changes in the code. The goal of this test is
    to help the reviewer understand the bug he/she encounters, to highlight that the
    code written has fixed the intended bug, and to ensure that it will not appear
    again whenever new changes are made to the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, in the case of writing code to implement a new feature, make sure
    to include unit and/or functional tests in your code. This will ensure that the
    reviewer knows the code you have written works and that the changes will not break
    the new functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHPUnit tests for Drupal classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use an industry standard PHPUnit framework to write a test for
    our Drupal classes. Generally we write PHPUnit test cases to test the functionality
    of a class when we do not require the Drupal environment (databases, settings,
    and so on) and web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To write a PHPUnit test, follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a class extending `\Drupal\Tests\UnitTestCase`. Make sure the class name
    ends with the word `test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your test class file `ind8dev/tests/src/Unit` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include a phpDoc comment with the description giving information about the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start writing your test class with names starting with `test`. Each test class
    should include part of the functionality to be tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Read more about PHPUnit at [https://www.drupal.org/phpunit](https://www.drupal.org/phpunit).
    For full documentation on how to write PHPUnit tests for Drupal go to [http://phpunit.de](http://phpunit.de)
    and for general information on the PHPUnit framework, object-oriented programming
    topics, for more on PSR-4, namespaces, and where to place classes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Functional tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use inbuilt Simpletest as part of the Drupal core to write functional test
    cases. Unlike unit test cases, we use functional test to test the functionality
    of the different systems of Drupal when it depends on databases as well as configurations
    or to test the browser output.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – writing and testing functional test from our d8dev custom
    module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enable the module **Testing** from the path `admin/modules`:![Time for action
    – writing and testing functional test from our d8dev custom module](img/4659_02_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `D8devTest` class in the `D8devTest.php` file under `d8dev/src/tests/`
    and add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the phpDoc comment block for the `Test` class, it is mandatory to have this
    block with the `@group` annotation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Test Case**: In the `D8devTest` class, we check our custom page `mypage/page`
    created from our d8dev module using the function `testCustomPageExists()`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clear the cache from the path `admin/config/development/performance`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the testing module user interface from the path `admin/config/development/testing`
    or you can navigate to **Configuration** | **Testing**.![Time for action – writing
    and testing functional test from our d8dev custom module](img/4659_02_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **\Drupal\d8dev\Tests\D8devTest** and click on the **Run tests** button.
    You will find the result as in the following screenshot:![Time for action – writing
    and testing functional test from our d8dev custom module](img/4659_02_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations! You should now be familiar with TDD approach implementation
    in Drupal 8\. We learned how to write a functional test case for our custom module
    functionality. We also learned how to write and run the test in Drupal 8 by testing
    a module user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create new content type in Drupal and developed
    our custom module to modify one of the fields using the field formatter API. We
    also explored how TDD has been incorporated in the new Drupal core.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn more about newly introduced configuration
    management in Drupal 8 and how to use views which have been moved as core modules.
  prefs: []
  type: TYPE_NORMAL
