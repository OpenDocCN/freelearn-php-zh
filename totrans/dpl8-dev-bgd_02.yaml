- en: Chapter 2. Custom Module Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 自定义模块开发
- en: '*We have setup our development environment in [Chapter 1](ch01.html "Chapter 1. Setting
    Up a Drupal Development Environment"), *Setting Up a Drupal Development Environment*.
    Now let''s get started and create a new content type and create a basic custom
    module to change one of the fields on our content type. We will also explore the
    concept of test driven development as good programming practice.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在[第一章](ch01.html "第一章. 设置Drupal开发环境")中设置了我们的开发环境，*设置Drupal开发环境*。现在让我们开始创建一个新的内容类型，并创建一个基本的自定义模块来更改内容类型上的一个字段。我们还将探讨测试驱动开发作为良好的编程实践的概念。*'
- en: 'In this chapter, we will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Defining a custom content type (Recipe)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自定义内容类型（Recipe）
- en: Basics of object-oriented programming in Drupal 8
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8面向对象编程的基础
- en: Introduction of Symfony with Drupal 8
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8与Symfony的介绍
- en: Basics of Drupal 8 module development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Drupal 8模块开发的基础
- en: Field formatter API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段格式化API
- en: '**Test-driven development** (**TDD**)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）'
- en: Writing and running functional tests for custom module functionality using an
    inbuilt PHPUnit test framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置的PHPUnit测试框架编写和运行自定义模块功能的测试
- en: Configuring and running unit tests with code coverage reports from within the
    PHPStorm IDE
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHPStorm IDE中配置和运行单元测试，并生成代码覆盖率报告
- en: Creating custom Recipe content type
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义Recipe内容类型
- en: 'In the previous chapter, we installed Drupal 8 on our system. Now we are going
    to create our custom recipe content type. Before that, we will discuss five new
    fields added in Drupal 8:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在系统中安装了Drupal 8。现在我们将创建我们的自定义食谱内容类型。在此之前，我们将讨论Drupal 8中新增的五个字段：
- en: '**Date**: The **Date** field is the **Date** module in Drupal 7\. We can choose
    to record the **Date and time** or **Date only** as options.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期**：日期字段是Drupal 7中的日期模块。我们可以选择记录**日期和时间**或**仅日期**作为选项。'
- en: '**Email**: The **Date** module is simple but the **Email** field is even simpler.
    There are no settings at all for the **Email** field.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**：日期模块很简单，但**电子邮件**字段更简单。电子邮件字段没有任何设置。'
- en: '**Link**: The **Link** field allows both internal and external links, along
    with a link text option.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接**：链接字段允许内部和外部链接，以及链接文本选项。'
- en: '**Telephone**: The **Telephone** field is disabled by default in Drupal 8,
    so we need to enable the module to use it. It has no settings. It really is just
    a text field that adds `<a href="tel:` to turn the text into a telephone link.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话**：电话字段在Drupal 8中默认禁用，因此我们需要启用模块才能使用它。它没有设置。它实际上只是一个添加`<a href="tel:`将文本转换为电话链接的文本字段。'
- en: '**Reference**: The **Reference** module is the most powerful field. We can
    link to anything that''s an entity, which means we can link to comments, content,
    blocks, files, terms, and users.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用**：引用模块是最强大的字段。我们可以链接到任何实体，这意味着我们可以链接到评论、内容、块、文件、术语和用户。'
- en: Now login to your Drupal 8 website. You should see a new admin toolbar.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在登录到您的Drupal 8网站。您应该看到一个新管理工具栏。
- en: Time for action – creating custom content type
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践 – 创建自定义内容类型
- en: 'Let''s create a custom content type by following these next steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建一个自定义内容类型：
- en: Click on **Structure** in the admin toolbar, and then click on **Content types**.![Time
    for action – creating custom content type](img/4659_02_01.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管理工具栏中的**结构**，然后点击**内容类型**。![动手实践 – 创建自定义内容类型](img/4659_02_01.jpg)
- en: On the **Content types** screen, click on the **Add content type** link.![Time
    for action – creating custom content type](img/4659_02_02.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容类型**屏幕上，点击**添加内容类型**链接。![动手实践 – 创建自定义内容类型](img/4659_02_02.jpg)
- en: Write `Recipe` in the **Name** text field.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本字段中写入`Recipe`。
- en: 'In the description, enter this text `Simple recipe content type based on the
    schema.org base HTML5 Microdata schema for Recipes at: http://schema.org/Recipe/`.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在描述中输入此文本`基于schema.org base HTML5 Microdata schema的简单食谱内容类型，位于：http://schema.org/Recipe/`。
- en: For the **Title** field label, enter `name`.![Time for action – creating custom
    content type](img/4659_02_03.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**标题**字段标签，输入`name`。![动手实践 – 创建自定义内容类型](img/4659_02_03.jpg)
- en: Click on the **Save and manage fields** button. For now we will go with the
    default content type configuration for everything else.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存和管理字段**按钮。目前我们将使用默认的内容类型配置来配置其他所有内容。
- en: Next, delete the **Body** field that is automatically added to our content type,
    by clicking on the **Delete** link, and then confirming by clicking on the **Delete**
    button on the next screen.![Time for action – creating custom content type](img/4659_02_04.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过点击**删除**链接，然后确认点击下一屏幕上的**删除**按钮，删除自动添加到我们的内容类型中的**正文**字段。![创建自定义内容类型的时机](img/4659_02_04.jpg)
- en: Now, we will add some new fields to our Recipe content type. We will use the
    Recipe schema property names as our field names. The first property listed in
    the table at `http://schema.org/Recipe/` is **description**. Once you click on
    the **Add Field** button, you will get the option **Add a new field** select box.
    In that you need to select **Text (formatted, long, with summary**). On the label,
    you need to write `description`.![Time for action – creating custom content type](img/4659_02_05.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将向我们的食谱内容类型添加一些新的字段。我们将使用食谱模式属性名称作为字段名称。在`http://schema.org/Recipe/`表格中列出的第一个属性是**description**。一旦您点击**添加字段**按钮，您将获得一个选项**添加新字段**选择框。在那里您需要选择**文本（格式化，长文本，带摘要**）。在标签上，您需要写上`description`。![创建自定义内容类型的时机](img/4659_02_05.jpg)
- en: Then click on **Save and continue**. On the next screen, set **Allowed number
    of values** limited to `1`, and click on the **Save field settings** button.![Time
    for action – creating custom content type](img/4659_02_06.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**保存并继续**。在下一屏幕上，将**允许的值数**限制为`1`，并点击**保存字段设置**按钮。![创建自定义内容类型的时机](img/4659_02_06.jpg)
- en: On the **description settings for Recipe** page, enter `A short description
    of the item` as **Help text**. Accept the rest of the default settings, and then
    click on the **Save settings** button at the bottom of the page:![Time for action
    – creating custom content type](img/4659_02_07.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**食谱描述设置**页面，将`A short description of the item`作为**帮助文本**输入。接受其余的默认设置，然后点击页面底部的**保存设置**按钮：![创建自定义内容类型的时机](img/4659_02_07.jpg)
- en: 'Now we will move on to the image property. We are going to use an existing
    field for this property. In the **Re-use an existing field** section, select **Image:
    field_image (Image)**.![Time for action – creating custom content type](img/4659_02_08.jpg)'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，我们将继续到图像属性。我们将为此属性使用一个现有的字段。在**重用现有字段**部分，选择**Image: field_image (Image)**。![创建自定义内容类型的时机](img/4659_02_08.jpg)'
- en: Click on the **Save and continue** button to accept the default settings on
    the **FIELD SETTINGS** page.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存并继续**按钮以接受**字段设置**页面上的默认设置。
- en: On the next page, click on the **Save settings** button to accept the **Image**
    settings for Recipe and **IMAGE FIELD SETTINGS**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，点击**保存设置**按钮以接受食谱的**图像**设置和**图像字段设置**。
- en: The **DatePublished** and **Author** properties will be captured by the core
    Drupal node properties. We will skip the rest of the **Properties from CreativeWork**
    for now.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DatePublished**和**Author**属性将由核心Drupal节点属性捕获。我们暂时将**CreativeWork属性**的其余部分跳过。'
- en: Now, add a new number field `cookTime`, **Label** as `cookTime` field type as
    **Number(integer)** from the dropdown.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个新的数字字段`cookTime`，**标签**为`cookTime`，字段类型为**整数**，从下拉菜单中选择。
- en: Click on the **Save and continue** button to accept the default settings on
    the **FIELD SETTINGS** page.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存并继续**按钮以接受**字段设置**页面上的默认设置。
- en: On the next page, enter `The time it takes to actually cook the dish in minutes.`
    as the **Help text**. Enter `minute|minutes` as the **Suffix** under the **cookTime
    settings for Recipe** page, and click on the **Save settings** button.![Time for
    action – creating custom content type](img/4659_02_09.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，将`The time it takes to actually cook the dish in minutes.`作为**帮助文本**输入。在**cookTime设置**页面下，将`minute|minutes`作为**后缀**输入，并点击**保存设置**按钮。![创建自定义内容类型的时机](img/4659_02_09.jpg)
- en: Along with **cookingMethod**, we will also skip the **nutrition**, **recipeCategory**,
    **recipeCuisine**, and **totalTime** properties for now. We will add these properties
    later in the book.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了**cookingMethod**之外，我们还将暂时跳过**nutrition**、**recipeCategory**、**recipeCuisine**和**totalTime**属性。我们将在本书的后面添加这些属性。
- en: 'For the **ingredients** property, the settings will be **label: ingredients**
    from the **Add a new field** dropdown you can select a **Field type : Text (plain)**.
    Click on the **Save and continue** button. On the next screen, accept the default
    setting of 255 for maximum length and the **Allowed number of values** as **Unlimited**,
    then click on **Save field settings**.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**ingredients**属性，设置将是**标签：ingredients**，从**添加新字段**下拉菜单中，你可以选择**字段类型：文本（纯文本）**。点击**保存并继续**按钮。在下一屏幕中，接受最大长度为255的默认设置和**允许的值数量**为**无限**，然后点击**保存字段设置**。
- en: On the **ingredients settings for Recipe** page, enter `An ingredient used in
    the recipe` as the **Help text**. Accept the rest of the default settings, and
    click on the **Save settings** button at the bottom of the page.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**食谱的成分设置**页面，输入`食谱中使用的成分`作为**帮助文本**。接受其余的默认设置，并点击页面底部的**保存设置**按钮。
- en: 'For the **prepTime** property, the settings will be **label: prepTime** and
    from the **Add a new field** dropdown you can select a **Field type: Number(integer)**.Click
    on the **Save and continue** button to accept the default settings on the **FIELD
    SETTINGS** page. On the next page, enter the length of time it takes to prepare
    the recipe in minutes as the **Help text**, enter `minute|minute` as the **Suffix**
    under the **prepTime settings for Recipe** page, and then click on the **Save
    settings** button.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**prepTime**属性，设置将是**标签：prepTime**，从**添加新字段**下拉菜单中，你可以选择**字段类型：数字（整数）**。点击**保存并继续**按钮以接受**字段设置**页面的默认设置。在下一页，输入准备食谱所需的时间（分钟）作为**帮助文本**，在**prepTime设置**页面下输入`minute|minute`作为**后缀**，然后点击**保存设置**按钮。
- en: Next add the **recipeInstructions** property. Click on the **Add field** button.
    In the next screen, select **Field type** as **Text(formatted,long)** and **Label**
    as **recipeInstructions**. Then click on the **Save and continue** button. On
    the next page, leave all the settings as default and click on the **Save** button.
    In the next settings page, enter `The steps to make the dish.` as the **Help text**
    and leave rest of the settings, and click on the **Save** button.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来添加**recipeInstructions**属性。点击**添加字段**按钮。在下一屏幕中，选择**字段类型**为**文本（格式化，长文本）**和**标签**为**recipeInstructions**。然后点击**保存并继续**按钮。在下一页，保留所有设置默认并点击**保存**按钮。在下一设置页面，输入`制作菜肴的步骤。`作为**帮助文本**，并保留其余设置，然后点击**保存**按钮。
- en: 'For the **recipeYield** property, the settings will be **label: recipeYield**
    from the **Add a new field** dropdown you can select a **Field type : Text(plain)**.
    Click on the **Save and continue** button. On the next screen, accept the default
    setting of 255 for **Maximum length** and the **Allowed number of values** as
    **Limited** to **1** then click on **Save field settings**.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**recipeYield**属性，设置将是**标签：recipeYield**，从**添加新字段**下拉菜单中，你可以选择**字段类型：文本（纯文本）**。点击**保存并继续**按钮。在下一屏幕中，接受**最大长度**为255和**允许的值数量**为**限制**到**1**的默认设置，然后点击**保存字段设置**。
- en: On the **recipeYield settings for Recipe** page, enter `The quantity produced
    by the recipe (for example, number of people served, number of servings, and so
    on).` as the **Help text**. Accept the rest of the default settings, and click
    on the **Save settings** button at the bottom of the page.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**食谱的recipeYield设置**页面，输入`该食谱产生的数量（例如，服务人数，份量等）。`作为**帮助文本**。接受其余的默认设置，并点击页面底部的**保存设置**按钮。
- en: You should now have a **Manage fields** screen for our Recipe content type that
    looks similar to the following screenshot:![Time for action – creating custom
    content type](img/4659_02_10.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该有一个类似于以下截图的**管理字段**屏幕，用于我们的食谱内容类型：![行动时间 – 创建自定义内容类型](img/4659_02_10.jpg)
- en: '*What just happened?*'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: You created the new Recipe content type and added new fields.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您已创建新的食谱内容类型并添加了新字段。
- en: Time for action – adding a new recipe
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 添加新食谱
- en: Now that we have created the new recipe content type and modified its fields,
    let's create a new recipe by clicking on the **Add content** link in the shortcut
    bar, and then click on the link for Recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了新的食谱内容类型并修改了其字段，让我们通过点击快捷栏中的**添加内容**链接来创建一个新的食谱，然后点击食谱链接。
- en: 'Go to the path **Manage** | **Content** and click on the **Add content** button,
    as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前往路径**管理** | **内容**并点击以下截图所示的**添加内容**按钮：
- en: '![Time for action – adding a new recipe](img/4659_02_11.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 添加新食谱](img/4659_02_11.jpg)'
- en: 'Here is my recipe for Awesome Sauce that you may use, but you are welcome to
    add any recipe you like:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的Awesome Sauce食谱，你可以使用它，但欢迎你添加任何你喜欢的食谱：
- en: '**name**: `Awesome Sauce`'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**名称**：`Awesome Sauce`'
- en: '**description**: `A deliciously sweet and spicy sauce that makes everything
    you put it on that much awesome. A little goes a long way...`'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**描述**：`一种美味甜辣酱，让你的任何食物都变得更加出色。一点就能走得很远...`'
- en: '**ingredients**:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配料**:'
- en: '`One ghost pepper (optional)`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`一个鬼椒（可选）`'
- en: '`Two habanera peppers`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`两个哈瓦那辣椒`'
- en: '`Three Thai peppers`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`三个泰国辣椒`'
- en: '`Four jalapeno peppers`'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`四个墨西哥辣椒`'
- en: '`Four garlic cloves`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`四个大蒜瓣`'
- en: '`Three cups of rice vinegar`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`三杯米醋`'
- en: '`One tea spoon of fish sauce`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`一茶匙鱼露`'
- en: '`One cup of sugar`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`一杯糖`'
- en: '**recipeInstructions**:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**食谱说明**：'
- en: '`1\. Remove the stems from the peppers.`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1. 剥去辣椒的茎。`'
- en: '`2\. Add the peppers and garlic to a food processor, and blend until pureed.`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2. 将辣椒和大蒜加入食品加工机中，搅拌至成泥。`'
- en: '`3\. Add vinegar, sugar, fish sauce, and puree to a small saucepan, and bring
    to a simmer over low heat.`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3. 将醋、糖、鱼露和果泥加入一个小锅中，用低温煮沸。`'
- en: '`4\. Simmer sauce for 20 to 30 minutes, until the sugar has completely dissolved.`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4. 煮酱20到30分钟，直到糖完全溶解。`'
- en: '`5\. Remove the saucepan from the burner and let it stand for 10 minutes.`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5. 将锅从炉子上取下，静置10分钟。`'
- en: '`6\. Your Awesome Sauce is ready to serve, or it can be refrigerated for up
    to three weeks.`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6. 你的Awesome Sauce已经准备好供食用，或者可以冷藏长达三周。`'
- en: Thai peppers and fish sauce are typically available in most Asian markets. Ghost
    peppers are generally considered to be the hottest pepper in the world and may
    be left out for those who have a little less tolerance for heat, or if you aren't
    able to find them.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 泰国辣椒和鱼露通常在大多数亚洲市场都有售。鬼椒通常被认为是世界上最辣的辣椒，对于那些对辣味不太耐受的人或者找不到它们的情况下可以省略。
- en: '**Yield**: `12 servings`'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**产量**：`12份`'
- en: '**prepTime**: **10 minutes**'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准备时间**：**10分钟**'
- en: '**cookTime**: **30 minutes**![Time for action – adding a new recipe](img/4659_02_12.jpg)'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**烹饪时间**：**30分钟**![行动时间 – 添加新食谱](img/4659_02_12.jpg)'
- en: When you are done, save it to view your new recipe page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，保存它以查看你的新食谱页面。
- en: '*What just happened?*'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We added our own recipe to the site.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将我们的食谱添加到了网站上。
- en: OOP concepts in Drupal
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Drupal中的OOP概念
- en: Before we dive into developing our first custom module, let's understand the
    basics of the modern **object-oriented programming** (**OOP**) approach which
    has been adopted in Drupal 8 to make it more familiar for developers using other
    pure PHP frameworks. The OOP design patterns have been used to implement a variety
    of Drupal concepts, such as fields, views, entities, and nodes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入开发第一个自定义模块之前，让我们了解现代**面向对象编程**（**OOP**）的基础，这是Drupal 8采用的，以便让使用其他纯PHP框架的开发者更加熟悉。面向对象的设计模式已被用于实现各种Drupal概念，如字段、视图、实体和节点。
- en: 'Although OOP comes with a steep learning curve that includes mastering key
    programming techniques such as inheritance and polymorphism, it has been found
    to be easier to extend, refactor, and maintain in the long run when compared to
    the procedural programs. This lets you focus on the programming part instead of
    wasting time on maintenance issues. The Dependency Injection is one of the OOP
    design patterns that has been used extensively in Drupal 8\. A basic understanding
    of this concept is crucial to gain access to and make use of some core APIs. Here
    they are:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然OOP的学习曲线很陡峭，包括掌握诸如继承和多态等关键编程技术，但与过程式程序相比，它被发现更容易扩展、重构和维护，从长远来看，这让你可以专注于编程部分，而不是浪费时间在维护问题上。依赖注入是Drupal
    8中广泛使用的OOP设计模式之一。对这个概念的基本理解对于访问和使用一些核心API至关重要。以下是它们：
- en: '**Objects**: An **object** is an individual instance of the data structure
    defined by a class. A class is defined once and then you make an object to belong
    to a class. In other words, a class can be represented as a type of object. It
    is a blueprint from which you can create an individual object. A class is composed
    of three primary components: attributes, name, and operations. Here is a small
    PHP example:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**：一个**对象**是一个由类定义的数据结构的单个实例。一个类只定义一次，然后你创建一个对象使其属于一个类。换句话说，一个类可以表示为一种对象类型。它是一个蓝图，你可以从中创建一个单独的对象。一个类由三个主要组件组成：属性、名称和操作。以下是一个小的PHP示例：'
- en: '[PRE0]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Abstraction**: One of the core principles in OOP, **abstraction** refers
    to the representation of any type of data in which you can keep the implemented
    details abstracted or hidden. It allows you to write code that works seamlessly
    with abstract data structures such as lists, arrays, and other data types. As
    the code remains unchanged while you work with different data types, you can write
    a new data type and make it work with a program without changing it. Here is a
    small PHP example:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象**：面向对象编程的核心原则之一，**抽象**指的是以任何类型的数据表示，你可以保持实现的细节抽象或隐藏。它允许你编写与列表、数组和其他数据类型等抽象数据结构无缝工作的代码。由于代码在处理不同数据类型时保持不变，你可以编写一个新的数据类型，并使其与程序一起工作，而无需对其进行更改。以下是一个小的PHP示例：'
- en: '[PRE1]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Encapsulation**: Also synonymous for information hiding, encapsulation is
    basically the amalgamation of all the resources that are needed for an object
    to function, including the methods and the data. This process is carried out by
    creating classes that help you expose the public methods and properties. A class
    is seen as a capsule or a container that encapsulates the attributes and the properties
    along with a set of methods in order to provide indented functionalities to other
    classes. Here is a small PHP example:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：也等同于信息隐藏，封装基本上是将对象功能所需的全部资源合并在一起的过程，包括方法和数据。这个过程是通过创建帮助您公开方法和属性的类来实现的。一个类被视为一个胶囊或容器，它封装了属性和属性以及一组方法，以便为其他类提供特定的功能。以下是一个小的PHP示例：'
- en: '[PRE2]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Polymorphism**: Polymorphism derives its name from *multiple shapes* and
    refers to the function of requesting the same operations that can be performed
    by different types of things. There are three major techniques that can be used
    to achieve polymorphism: method overloading, method overriding, and operator overloading.
    Here is a small PHP example:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多态**：多态的名字来源于**多种形状**，指的是请求可以由不同类型的事物执行的同一种操作的功能。有三种主要技术可以用来实现多态：方法重载、方法覆盖和运算符重载。以下是一个小的PHP示例：'
- en: 'The content of file `ShpeInterface.php`:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件`ShpeInterface.php`的内容：
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The content of file `Circle.php`:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件`Circle.php`的内容：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Inheritance**: You can create a new class from an existing class by extending
    it, and this process is known as **inheritance**. One of the key relationships
    used among objects is specialization, which is implemented using the principle
    of inheritance. Here is a small PHP example:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承**：你可以通过扩展现有类来创建一个新的类，这个过程被称为**继承**。在对象之间使用的关键关系之一是**特殊化**，它是通过继承原则实现的。以下是一个小的PHP示例：'
- en: '[PRE5]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we will see the preceding concepts in action while developing our new custom
    module.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过开发我们新的自定义模块来展示前面提到的概念。
- en: Time for action – developing a custom module in Drupal 8
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践 – 在Drupal 8中开发自定义模块
- en: 'Here we are going to create a custom module which will print `Hello World`
    in a page under the path: `mypage/page`. Follow the basics steps involved in the
    custom module development in Drupal 8\. Before that, we will discuss the Drupal
    root directory structure.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个自定义模块，该模块将在路径`mypage/page`下的页面上打印`Hello World`。在讨论Drupal根目录结构之前，我们将讨论在Drupal
    8中自定义模块开发的基本步骤。
- en: '![Time for action – developing a custom module in Drupal 8](img/4659_02_13.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![动手实践 – 在Drupal 8中开发自定义模块](img/4659_02_13.jpg)'
- en: 'Look at the preceding screenshot. We will see what each directory contains:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面的截图。我们将看到每个目录包含的内容：
- en: '`/core`: All the files provided by core that don''t have an explicit reason
    to be in the / directory.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/core`：所有由核心提供的文件，没有明确理由放在/目录下。'
- en: '`/modules`: The directory into which all the custom and contrib modules go.
    Splitting this up into the sub-directories contrib and custom can make it easier
    to keep track of the modules.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/modules`：所有自定义和贡献模块放入的目录。将它们分成子目录contrib和custom可以使跟踪模块更容易。'
- en: '`/profiles`: This folder contains contributed and custom profiles.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/profiles`：这个文件夹包含贡献的和自定义的配置文件。'
- en: '`/themes`: - contributed and custom (sub)themes.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/themes`：- 贡献的和自定义的（子）主题。'
- en: '`/sites/[domain OR default]/{modules,themes}`: Site specific modules and themes
    can be moved into these directories to avoid them showing up on every site.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sites/[domain OR default]/{modules,themes}`：可以将特定站点的模块和主题移动到这些目录中，以避免它们在所有站点上显示。'
- en: '`sites/[domain OR default]/files`: Site specific files tend to go here. This
    could be files uploaded by the users, such as images, but also includes the configuration,
    active as well as staged config. The configuration is read and written by Drupal,
    and should have the minimal amount of privileges required for the web server,
    and the only the web server, to read and modify them.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sites/[domain OR default]/files`: 站点特定的文件通常会放在这里。这可能包括用户上传的文件，如图片，也包括配置文件，包括活动配置和暂存配置。配置由
    Drupal 读取和写入，并且应该具有最小的权限，仅允许 Web 服务器读取和修改它们。'
- en: '`/vendor`: This folder contains all the backend libraries that Drupal Core
    depends on.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/vendor`: 这个文件夹包含 Drupal 核心所依赖的所有后端库。'
- en: 'Now, let''s begin:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始：
- en: Let's start by adding your module folder name. Unlike Drupal 7 where we used
    to keep the modules folder inside `site/all`, in Drupal 8 we have to keep our
    custom or contributed modules within the module available under the root directory
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先添加您的模块文件夹名称。与 Drupal 7 不同，我们曾经将模块文件夹放在 `site/all` 内，在 Drupal 8 中，我们必须将我们的自定义或贡献模块保存在根目录下的模块中。
- en: '[PRE6]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We need to use different file structures as follows in case of multisite configuration.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多站点配置的情况下，我们需要使用不同的文件结构如下。
- en: '[PRE7]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's name our module `d8dev` and create a folder name `d8dev` under the `modules/custom`
    directory.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们的模块命名为 `d8dev`，并在 `modules/custom` 目录下创建一个名为 `d8dev` 的文件夹。
- en: Create the `.info.yml` file. In Drupal 7, we used to have the `.info` file.
    This has been changed to `.info.yml` in Drupal 8\. Now instead of the `.info`
    parser, we use the Symfony YML component. And the new extension `.info.yml` applies
    to modules, themes, and profiles.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `.info.yml` 文件。在 Drupal 7 中，我们曾经使用过 `.info` 文件。在 Drupal 8 中，这已经被改为 `.info.yml`。现在，我们不再使用
    `.info` 解析器，而是使用 Symfony YML 组件。新的扩展 `.info.yml` 适用于模块、主题和配置文件。
- en: Note
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Drupal uses some of the Symfony components for this version. By using the HTTP
    Kernel component, Drupal and Symfony projects became more interoperable. We will
    be able to easily integrate custom Symfony applications with Drupal and vice versa.
    You can learn more about the Symfony structure and how Drupal uses it. Follow
    this link [http://symfony.com/projects/drupal](http://symfony.com/projects/drupal).
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Drupal 使用了一些 Symfony 组件来支持这个版本。通过使用 HTTP Kernel 组件，Drupal 和 Symfony 项目变得更加互操作。我们将能够轻松地将自定义
    Symfony 应用程序与 Drupal 集成，反之亦然。您可以了解更多关于 Symfony 结构以及 Drupal 如何使用它的信息。请点击此链接 [http://symfony.com/projects/drupal](http://symfony.com/projects/drupal)。
- en: '**YAML**: Similar to PHP, YML is a simple language and there are syntaxes for
    simple types; for example Integers, Strings, Floats, or Booleans.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**YAML**: 与 PHP 类似，YML 是一种简单的语言，并且有简单类型的语法；例如整数、字符串、浮点数或布尔值。'
- en: In Drupal 8, the new `info.yml` files are required to update Drupal core about
    different modules, themes, or any install profile. This also provides additional
    criteria to manage modules along with version compatibility.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Drupal 8 中，新的 `info.yml` 文件是必需的，用于更新 Drupal 核心关于不同的模块、主题或任何安装配置文件。这也提供了额外的标准来管理模块以及版本兼容性。
- en: 'Create a `d8dev.info.yml` file under the `d8dev` directory we created in Step
    1:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一步中创建的 `d8dev` 目录下创建一个 `d8dev.info.yml` 文件：
- en: '[PRE8]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What have we added in `d8dev.info.yml`:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `d8dev.info.yml` 中我们添加了什么：
- en: '`name`: As is obvious, the `name` field is required for our module as the identifier
    and will be displayed on the `Module` page. We should follow the convention of
    capitalized and Symantec names.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 如同显而易见，`name` 字段是我们模块的标识符，将在 `模块` 页面上显示。我们应该遵循大写和 Symantec 命名约定。'
- en: '`description`: We have added a short one-liner description to help acquaint
    the administrator with what this module does.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 我们添加了一条简短的一行描述，以帮助管理员了解此模块的功能。'
- en: '`package`: We should use the name of the package if this is going to be part
    of other modules. Since we are developing a custom module, we have kept `Custom`
    or you can use `Other` if you are not sure.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`: 如果这将成为其他模块的一部分，我们应该使用包的名称。由于我们正在开发一个自定义模块，我们保留了 `Custom`，或者如果您不确定，可以使用
    `Other`。'
- en: '`type`: This is a required property to let Drupal know if it is a module, or
    a theme, or an installation profile.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 这是一个必需的属性，用于让 Drupal 知道它是一个模块、一个主题还是一个安装配置文件。'
- en: '`version`: We should specify the version number of the module we are developing.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 我们应该指定我们正在开发的模块的版本号。'
- en: '`core`: We need to specify the Drupal version for which this module will be
    used with, `8.x`. This is a mandatory property.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`: 我们需要指定此模块将要使用的 Drupal 版本，`8.x`。这是一个强制属性。'
- en: Create `.routing.yml`
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `.routing.yml`
- en: '**Routing system**: A route is a path which is defined for Drupal to return
    some sort of content on. For example, the default front page /node is a route.
    When Drupal receives a request, it tries to match the requested path to a route
    it knows about. If the route is found, then the route''s definition is used to
    return the content. Otherwise, Drupal returns a 404.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由系统**：路由是指为Drupal定义的路径，用于返回某种内容。例如，默认的前页 /node 就是一个路由。当Drupal收到一个请求时，它会尝试将请求的路径与它所知道的某个路由进行匹配。如果找到路由，则使用该路由的定义来返回内容。否则，Drupal将返回404错误。'
- en: '**Routes and controllers**: Drupal''s routing system works with the Symfony
    HTTP kernel. Reading a bit on Symfony will be helpful. Basic knowledge about the
    Symfony HTTP Kernel would be enough to do general route operations. The following
    diagram explains how the different components relate to each other:'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由和控制器**：Drupal的路由系统与Symfony HTTP内核协同工作。对Symfony的了解将有所帮助。对Symfony HTTP内核的基本了解就足以进行一般的路由操作。以下图表解释了不同组件之间的关系：'
- en: '[PRE9]'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Time for action – developing a custom module in Drupal 8](img/4659_02_14.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 - 在Drupal 8中开发自定义模块](img/4659_02_14.jpg)'
- en: 'We are going to write the path in the `.routing.yml` file. Again, here we are
    going to use the Symfony2 components to handle the routing. Following is our `d8dev.routing.yml`
    code which includes defining routes as the configuration and managing the callback
    in a controller, which is a method of a Controller class:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在`.routing.yml`文件中编写路径。同样，这里我们将使用Symfony2组件来处理路由。以下是我们`d8dev.routing.yml`代码，它包括定义路由作为配置，并在控制器中管理回调，控制器是控制器类的一个方法：
- en: In the preceding code, the first line `d8dev.my_page` is route, a Symfony component
    which maps an HTTP request in Drupal to a set of configuration variables. Route
    is defined as a machine name as `module_name.route_name`.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，第一行`d8dev.my_page`是路由，这是一个将Drupal中的HTTP请求映射到一组配置变量的Symfony组件。路由被定义为机器名，作为`module_name.route_name`。
- en: Next is path, where we specify the URL path we want this route to register.
    Do not forget to add a leading forward slash.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来是路径，我们在这里指定我们想要此路由注册的URL路径。不要忘记添加一个前置的正斜杠。
- en: 'We have two configurations under defaults: `_controller`, which references
    a method on the `d8devController` class, and `_title`, where we add the default
    page title, such as `My first page in Drupal 8`.'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在默认设置下，我们有两种配置：`_controller`，它引用了`d8devController`类上的一个方法，以及`_title`，在这里我们添加默认页面标题，例如`My
    first page in Drupal 8`。
- en: As part of the requirements configuration we have specified the permission,
    who can access the page.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为要求配置的一部分，我们指定了权限，谁可以访问页面。
- en: You can read more on the routing file at [https://www.drupal.org/node/2092643](https://www.drupal.org/node/2092643).
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在[https://www.drupal.org/node/2092643](https://www.drupal.org/node/2092643)了解更多关于路由文件的信息。
- en: Create the Route Controller class. We have to create our `ModuleController.php`
    according to the PSR-4 naming standard which has been implemented in Drupal 8
    for package-based PHP namespace auto-loading by the PHP Framework Interoperability
    Group.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建路由控制器类。我们必须根据已经在Drupal 8中实施的PSR-4命名标准创建我们的`ModuleController.php`文件，该标准由PHP框架互操作性小组用于基于包的PHP命名空间自动加载。
- en: Note
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PSR describes the specification for writing auto-loading classes from file paths.
    It also describes where to place the files that will be autoloaded according to
    the specification. Read more about PSR-4 namespaces and auto-loading at [http://www.php-fig.org/psr/psr-4/](http://www.php-fig.org/psr/psr-4/).
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PSR描述了从文件路径编写自动加载类的规范。它还描述了根据规范放置将被自动加载的文件的位置。有关PSR-4命名空间和自动加载的更多信息，请参阅[http://www.php-fig.org/psr/psr-4/](http://www.php-fig.org/psr/psr-4/)。
- en: 'Create a folder `modules/custom/d8dev/src/Controller`. Within this folder,
    create a file named `d8devController.php` with the following content:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为`modules/custom/d8dev/src/Controller`的文件夹。在这个文件夹内，创建一个名为`d8devController.php`的文件，内容如下：
- en: '[PRE10]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Controller is a PHP function we add which takes the information from the HTTP
    request and constructs and returns an HTTP response.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制器是我们添加的PHP函数，它从HTTP请求中获取信息，构建并返回HTTP响应。
- en: The controller includes all the logic our application needs to display the content
    of the page. Based on the matching route, the specific controller is executed
    and it creates and returns a response object.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制器包含了我们的应用程序需要显示页面内容的所有逻辑。根据匹配的路由，执行特定的控制器，并创建并返回一个响应对象。
- en: For example, if the browser requests the page having the path `/mypage/page`,
    it will execute the `d8devController::myPage()` controller and display a page
    that simply prints `Hello world!`.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果浏览器请求路径为`/mypage/page`的页面，它将执行`d8devController::myPage()`控制器，并显示一个简单地打印`Hello
    world!`的页面。
- en: Enable the module. Go to the path `admin/modules`.![Time for action – developing
    a custom module in Drupal 8](img/4659_02_15.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用模块。转到路径`admin/modules`![行动时间 – 在Drupal 8中开发自定义模块](img/4659_02_15.jpg)
- en: Once you have enabled the module and opened the path `http://localhost/d8dev/mypage/page`
    in your favorite browser, you'll see the **Hello world!** text printed from our
    module.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启用了模块并在您最喜欢的浏览器中打开了路径`http://localhost/d8dev/mypage/page`，您将看到从我们的模块打印出的**Hello
    world!**文本。
- en: '*What just happened?*'
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We completed our first custom module and displayed the **Hello World!** message
    on a custom page URL. Reward yourself with one hot cup of coffee before getting
    deeper into module development and introduction of Drupal API.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了我们的第一个自定义模块，并在自定义页面URL上显示了**Hello World!**消息。在深入模块开发和介绍Drupal API之前，给自己一杯热咖啡作为奖励。
- en: Time for action – developing custom field formatter
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 开发自定义字段格式化器
- en: Let's open the recipe page we created just before developing our custom module.
    On our recipe page which we created using our custom content type, all time fields
    (**cookTime** and **prepTime**) values are displayed in minutes, for example,
    60 minutes and 90 minutes. It would be nice if 60 minutes was displayed as 1 hour
    and 90 minutes was displayed as 1 1⁄2 hours.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开我们在开发自定义模块之前创建的食谱页面。在我们的食谱页面上，我们使用自定义内容类型创建，所有时间字段（**cookTime**和**prepTime**）的值都以分钟显示，例如，60分钟和90分钟。如果60分钟显示为1小时，90分钟显示为1
    1⁄2小时，那就更好了。
- en: One way we can make this happen is to develop a custom module to create a custom
    field formatter that will display the duration related fields of **cookTime**
    and **prepTime** as hours instead of minutes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现的其中一种方式是开发一个自定义模块来创建一个自定义字段格式化器，该格式化器将**cookTime**和**prepTime**相关字段以小时而不是分钟的形式显示。
- en: 'Following are the basic steps involved in creating a new plugin or creating
    a custom field formatter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新插件或创建自定义字段格式化器涉及以下基本步骤：
- en: Create the custom formatter class. This class defines its meta information in
    its annotation block, which holds the ID of the formatter, label, and field type.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建自定义格式化器类。这个类在其注解块中定义了其元信息，包括格式化器的ID、标签和字段类型。
- en: Core ones are defined either by core modules that can be found inside the `Drupal\Core\Field\Plugin\Field\FieldFormatter`
    and namespace plugins are placed inside the `src/Plugin/` folder of our module.
    In the case of field formatters, this will be the `src/Plugin/Field/FieldFormatter`
    directory.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心模块定义在`Drupal\Core\Field\Plugin\Field\FieldFormatter`中，而命名空间插件放置在我们的模块的`src/Plugin/`文件夹中。在字段格式化器的案例中，这将是在`src/Plugin/Field/FieldFormatter`目录中。
- en: 'For creating a formatter, you need to follow these next steps:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了创建格式化器，您需要遵循以下步骤：
- en: 'Create `RecipeFormatter.php`. Copy this to within our module folder as `d8dev/src/Plugin/Field/FieldFormatter/RecipeFormatter.php`
    and add the following lines:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建`RecipeFormatter.php`。将其复制到我们的模块文件夹中的`d8dev/src/Plugin/Field/FieldFormatter/RecipeFormatter.php`，并添加以下行：
- en: '[PRE11]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In Drupal 7, we used to have `hook_field_formatter_info`. Instead of that, a
    new annotations system has been introduced in Drupal 8\. Now, we need to define
    the formatter using annotations.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Drupal 7中，我们曾经使用`hook_field_formatter_info`。在Drupal 8中，我们引入了一个新的注解系统。现在，我们需要使用注解来定义格式化器。
- en: 'Add the following lines to `RecipeFormatter.php` we created in step 1:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下行添加到我们在步骤1中创建的`RecipeFormatter.php`文件中：
- en: '[PRE12]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The PHP comment docblock before your formatter class with the `@FieldFormatter`
    annotation is really important:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在您的格式化器类之前使用`@FieldFormatter`注解的PHP注释docblock非常重要：
- en: '`class RecipeFormatter extends FormatterBase { }`'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`class RecipeFormatter extends FormatterBase { }`'
- en: The annotation attributes are pretty self-explanatory. All we've done is define
    an ID, label, and which field type this formatter should be available on. The
    `field_types` attribute is the most important part, if you don't add `integer`,
    `decimal`, or `float` then this formatter will not appear on the manage display
    page.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注解属性相当直观。我们所做的就是定义了一个ID、标签以及此格式化器应在哪种字段类型上可用。`field_types`属性是最重要的部分，如果您不添加`integer`、`decimal`或`float`，则此格式化器将不会出现在管理显示页面上。
- en: The last bit of work we'll do on the formatter is add the `viewElements()` method.
    This method will be used to display the actual formatter and it's the only method
    required if the formatter class extends `FormatterBase`.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在格式化器上进行的最后一点工作是添加`viewElements()`方法。这个方法将用于显示实际的格式化器，如果格式化器类扩展了`FormatterBase`，则这是唯一需要的方法。
- en: 'Append the following lines into the `RecipeFormatter.php` class:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下行追加到`RecipeFormatter.php`类中：
- en: '[PRE13]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What we're doing here is passing the processed value into a custom template
    that'll be used to display the embedded HTML code.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里所做的就是将处理过的值传递到一个自定义模板中，该模板将用于显示嵌入的HTML代码。
- en: We also need to create a helper function to process the value.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要创建一个辅助函数来处理值。
- en: 'Append the following lines to the `RecipeFormatter.php` class:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下行追加到`RecipeFormatter.php`类中：
- en: '[PRE14]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, our `RecipeFormatter.php` class looks like the following code:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们的`RecipeFormatter.php`类看起来像以下代码：
- en: '[PRE15]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the template. So far, now we have created the formatter. Now we need
    to create a custom template to complete this module development. The template
    will be called `recipe_time_display` and it''ll accept the `value` as the single
    parameter. For creating the template, we will follow these next steps:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模板。到目前为止，我们已经创建了格式化器。现在我们需要创建一个自定义模板来完成这个模块的开发。该模板将被称为`recipe_time_display`，它将接受`value`作为单个参数。为了创建模板，我们将遵循以下下一步：
- en: 'Open up `d8dev.module` and add the following function:'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`d8dev.module`并添加以下函数：
- en: '[PRE16]'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a folder in the module called `templates` and a file named `recipe-time-display.html.twig`.
    The path is : `d8dev/templates/recipe-time-display.html.twig`.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块中创建一个名为`templates`的文件夹和一个名为`recipe-time-display.html.twig`的文件。路径是：`d8dev/templates/recipe-time-display.html.twig`。
- en: '[PRE17]'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You can have a brief look at Twig on [http://symfony.com/doc/current/book/templating.html](http://symfony.com/doc/current/book/templating.html).
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以简要了解Twig在[http://symfony.com/doc/current/book/templating.html](http://symfony.com/doc/current/book/templating.html)。
- en: 'Here we are just printing the value directly. If you want you can add more
    HTML to the value through this file. Add the following to `recipe-time-display.html.twig`:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们只是直接打印值。如果你想，你可以通过这个文件向值中添加更多的HTML。将以下内容添加到`recipe-time-display.html.twig`：
- en: After saving all the files from the previous steps, go to your site on the browser
    and **Clear all caches** from the path `admin/config/development/performance`.![Time
    for action – developing custom field formatter](img/4659_02_16.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存上一步骤中所有文件后，打开浏览器中的你的网站，并从路径`admin/config/development/performance`中**清除所有缓存**。![动手实践
    – 开发自定义字段格式化器](img/4659_02_16.jpg)
- en: After clearing cache, you can go to the path `admin/structure/types/manage/recipe/display`
    and change the **FORMAT** fields **cookTime** and **prepTme** to the formatter
    from **Default** to **Duration**.![Time for action – developing custom field formatter](img/4659_02_17.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除缓存后，你可以转到路径`admin/structure/types/manage/recipe/display`，并将**格式**字段**cookTime**和**prepTme**从**默认**更改为**持续时间**。![动手实践
    – 开发自定义字段格式化器](img/4659_02_17.jpg)
- en: After that you click on the **Save** button on the **Manage display** page.
    Now view the Recipe content item that we created earlier, and you should see the
    new time format.![Time for action – developing custom field formatter](img/4659_02_18.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你点击**管理显示**页面上的**保存**按钮。现在查看我们之前创建的食谱内容项，你应该看到新的时间格式。![动手实践 – 开发自定义字段格式化器](img/4659_02_18.jpg)
- en: '*What just happened?*'
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We created a custom module that allows us to format our Recipe content duration
    field the way we wanted it—integers converted to hours and fraction of hours.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个自定义模块，允许我们以我们想要的方式格式化我们的食谱内容持续时间字段——整数转换为小时和小时的分数。
- en: Test-driven development (TDD)
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）
- en: Lot of times we hear that Drupal is not a good choice for writing complex web
    applications. One of the chief reasons is that Drupal doesn't support TTD or automated
    testing. But in Drupal 8 we have the PHPUnit tests and Simpletest tests in the
    core.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 很多次我们听到Drupal不适合编写复杂的Web应用程序。其中一个主要原因是Drupal不支持TDD或自动化测试。但在Drupal 8中，核心中包含了PHPUnit测试和Simpletest测试。
- en: Drupal 8 is developed keeping in mind the use of automated tests, including
    unit tests as well as functional tests. Unit test is at the lower level and used
    primarily to test the functionality of classes, whereas functional test is done
    at the higher level to check the web output.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Drupal 8的开发考虑到自动化测试的使用，包括单元测试以及功能测试。单元测试处于较低级别，主要用于测试类的功能，而功能测试则处于较高级别，用于检查Web输出。
- en: Important is run both types of tests for most of the features we develop before
    making any changes to the existing Drupal system to make sure no existing functionality
    is breaking up. We also call this regression testing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在对现有Drupal系统进行任何更改之前，对大多数我们开发的功能运行这两种类型的测试非常重要，以确保不会破坏现有功能。我们也将此称为回归测试。
- en: '![Test-driven development (TDD)](img/4659_02_19.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发 (TDD)](img/4659_02_19.jpg)'
- en: 'To follow TDD, we need to follow these two processes:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循TDD，我们需要遵循以下两个过程：
- en: Whenever you make a patch to fix a bug or to change an existing functionality,
    make sure to write a test that fails before changes have been in the code and
    that it passes after you make the changes in the code. The goal of this test is
    to help the reviewer understand the bug he/she encounters, to highlight that the
    code written has fixed the intended bug, and to ensure that it will not appear
    again whenever new changes are made to the code.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当你修复一个错误或更改现有功能时，确保编写一个在更改代码之前失败的测试，并在你更改代码后通过测试。这个测试的目的是帮助审阅者理解他/她遇到的错误，突出显示编写的代码已修复预期的错误，并确保它不会在代码的任何新更改中出现。
- en: Similarly, in the case of writing code to implement a new feature, make sure
    to include unit and/or functional tests in your code. This will ensure that the
    reviewer knows the code you have written works and that the changes will not break
    the new functionality.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，在编写代码以实现新功能的情况下，确保在代码中包含单元测试和/或功能测试。这将确保审阅者知道你编写的代码是有效的，并且更改不会破坏新功能。
- en: PHPUnit tests for Drupal classes
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHPUnit测试用例用于Drupal类
- en: We are going to use an industry standard PHPUnit framework to write a test for
    our Drupal classes. Generally we write PHPUnit test cases to test the functionality
    of a class when we do not require the Drupal environment (databases, settings,
    and so on) and web browser.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用行业标准PHPUnit框架来编写我们的Drupal类的测试。通常，当我们不需要Drupal环境（数据库、设置等）和浏览器时，我们编写PHPUnit测试用例来测试类的功能。
- en: 'To write a PHPUnit test, follow these next steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写PHPUnit测试，请遵循以下步骤：
- en: Define a class extending `\Drupal\Tests\UnitTestCase`. Make sure the class name
    ends with the word `test`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个扩展 `\Drupal\Tests\UnitTestCase` 的类。确保类名以单词 `test` 结尾。
- en: Place your test class file `ind8dev/tests/src/Unit` directory.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的测试类文件放置在 `ind8dev/tests/src/Unit` 目录下。
- en: Include a phpDoc comment with the description giving information about the test.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含一个phpDoc注释，提供有关测试的描述信息。
- en: Start writing your test class with names starting with `test`. Each test class
    should include part of the functionality to be tested.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始编写你的测试类，类名应以 `test` 开头。每个测试类应包括要测试的功能的一部分。
- en: Note
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Read more about PHPUnit at [https://www.drupal.org/phpunit](https://www.drupal.org/phpunit).
    For full documentation on how to write PHPUnit tests for Drupal go to [http://phpunit.de](http://phpunit.de)
    and for general information on the PHPUnit framework, object-oriented programming
    topics, for more on PSR-4, namespaces, and where to place classes
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [https://www.drupal.org/phpunit](https://www.drupal.org/phpunit) 上了解更多关于PHPUnit的信息。有关如何为Drupal编写PHPUnit测试的完整文档，请访问
    [http://phpunit.de](http://phpunit.de)，以及有关PHPUnit框架、面向对象编程主题的通用信息，更多关于PSR-4、命名空间以及放置类的地方。
- en: Functional tests
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能测试
- en: We use inbuilt Simpletest as part of the Drupal core to write functional test
    cases. Unlike unit test cases, we use functional test to test the functionality
    of the different systems of Drupal when it depends on databases as well as configurations
    or to test the browser output.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用内建的 Simpletest 作为 Drupal 核心的一部分来编写功能测试用例。与单元测试用例不同，我们使用功能测试来测试 Drupal 不同的系统功能，当它依赖于数据库以及配置或测试浏览器输出时。
- en: Time for action – writing and testing functional test from our d8dev custom
    module
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行时间 – 从我们的 d8dev 自定义模块编写和测试功能测试
- en: Enable the module **Testing** from the path `admin/modules`:![Time for action
    – writing and testing functional test from our d8dev custom module](img/4659_02_20.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从路径 `admin/modules` 启用模块 **Testing**：![执行时间 – 从我们的 d8dev 自定义模块编写和测试功能测试](img/4659_02_20.jpg)
- en: 'Create the `D8devTest` class in the `D8devTest.php` file under `d8dev/src/tests/`
    and add the following lines of code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `d8dev/src/tests/` 目录下的 `D8devTest.php` 文件中创建 `D8devTest` 类，并添加以下代码行：
- en: '[PRE18]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the phpDoc comment block for the `Test` class, it is mandatory to have this
    block with the `@group` annotation.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Test` 类的 phpDoc 注释块中，必须有这个带有 `@group` 注解的块。
- en: '[PRE19]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Test Case**: In the `D8devTest` class, we check our custom page `mypage/page`
    created from our d8dev module using the function `testCustomPageExists()`.'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**测试用例**: 在 `D8devTest` 类中，我们使用函数 `testCustomPageExists()` 检查由我们的 d8dev 模块创建的自定义页面
    `mypage/page`。'
- en: Clear the cache from the path `admin/config/development/performance`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从路径 `admin/config/development/performance` 清除缓存。
- en: Open the testing module user interface from the path `admin/config/development/testing`
    or you can navigate to **Configuration** | **Testing**.![Time for action – writing
    and testing functional test from our d8dev custom module](img/4659_02_21.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从路径 `admin/config/development/testing` 打开测试模块用户界面，或者您可以通过 **配置** | **测试**
    导航到。![执行动作 – 从我们的 d8dev 自定义模块编写和测试功能测试](img/4659_02_21.jpg)
- en: Select **\Drupal\d8dev\Tests\D8devTest** and click on the **Run tests** button.
    You will find the result as in the following screenshot:![Time for action – writing
    and testing functional test from our d8dev custom module](img/4659_02_22.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **\Drupal\d8dev\Tests\D8devTest** 并点击 **运行测试** 按钮。您将看到以下截图中的结果：![执行动作 – 从我们的
    d8dev 自定义模块编写和测试功能测试](img/4659_02_22.jpg)
- en: '*What just happened?*'
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Congratulations! You should now be familiar with TDD approach implementation
    in Drupal 8\. We learned how to write a functional test case for our custom module
    functionality. We also learned how to write and run the test in Drupal 8 by testing
    a module user interface.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在应该熟悉了 Drupal 8 中测试驱动开发（TDD）方法的实现。我们学习了如何为我们的自定义模块功能编写功能测试用例。我们还学习了如何在
    Drupal 8 中通过测试模块用户界面来编写和运行测试。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create new content type in Drupal and developed
    our custom module to modify one of the fields using the field formatter API. We
    also explored how TDD has been incorporated in the new Drupal core.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在 Drupal 中创建新的内容类型，并开发我们的自定义模块以使用字段格式化器 API 修改其中一个字段。我们还探讨了测试驱动开发（TDD）是如何被纳入新
    Drupal 核心的。
- en: In the next chapter, we are going to learn more about newly introduced configuration
    management in Drupal 8 and how to use views which have been moved as core modules.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于 Drupal 8 中新引入的配置管理以及如何使用已作为核心模块移动的视图。
