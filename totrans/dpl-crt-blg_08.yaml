- en: Chapter 8. Drupal's Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working on your site's interface to make it distinctive and attractive not only
    requires some technical know-how when it comes to Drupal, but like any design-like
    task, it also needs some creativity. Your site as it stands at the moment is fully
    functional and doesn't look awful—it's a bit plain, but it will get the job done!
    As you will see, however, with a bit of effort creating something entirely new
    is not out of your reach, and as you might expect, Drupal comes with a host of
    features to make our lives easier.
  prefs: []
  type: TYPE_NORMAL
- en: If, like me, you enjoy working on the more creative aspects of a website, then
    this is really the chapter you have been waiting for. It's time to design, plan,
    and implement the visual environment in which users will *be immersed—if* you
    can succeed in creating a pleasing atmosphere in which to interact, then you will
    certainly have done a lot in terms of ensuring users are happy with your site.
  prefs: []
  type: TYPE_NORMAL
- en: However, like everything else in this book, we can't simply dive in headlong
    and learn to swim once we have begun working. There are plenty of interesting
    things to think about and learn before we begin customizing Drupal's interface.
  prefs: []
  type: TYPE_NORMAL
- en: You also have the luxury of having a website already set up for you, which frees
    you to simply make changes here and there to achieve your design goals rather
    than develop the HTML from scratch. To some extent, this luxury actually restricts
    you because anything short of a total rewrite of the pages will mean your site
    retains some of the Drupal *flavor*. But that's not a bad thing at all now, is
    it?
  prefs: []
  type: TYPE_NORMAL
- en: 'To this end, this chapter will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning a web-based interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Drupal's interface works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I should warn you that there is quite a lot involved with coming up with an
    entirely fresh, pleasing, and distinct look for a site. There are lots of fiddly
    little bits to play around with, so you should be prepared to spend some time
    on this section because after all, your site's look and feel is really the face
    you present to your community, and in turn the face of your community to the outside
    world.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to remember is that you should take some time to look at what
    is already out there. Many issues that you will encounter while designing your
    site have already been successfully dealt with all over the show, and not only
    by Drupal users of course. Also, don't be scared to treat your design as an ongoing
    process—while it is never good to drastically change your site on a weekly basis,
    regular tweaking or upgrading of your interface can keep it modern and looking
    shiny new.
  prefs: []
  type: TYPE_NORMAL
- en: Planning a Web-Based Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tenet *form follows function* is widely applied in many spheres of human
    knowledge, ranging from evolution to biokinetics and engineering. It is a well
    understood concept, which basically says that the way something is built or made
    must reflect the purpose it was made for. This is an exceptionally sensible thought,
    and applying it to the design of your site will provide you with a yardstick to
    measure how well you have designed it. If you, or preferably everyone you ask,
    can honestly say that your site looks like it is meant to do whatever it is you
    are doing, then you are doing a good job.
  prefs: []
  type: TYPE_NORMAL
- en: That's not to say your site should look like every other site that performs
    the same function. In fact, if anything, you want to make it as distinctive as
    possible without stepping over the bounds of what you believe your target user
    will consider *good taste* or *common sense*.
  prefs: []
  type: TYPE_NORMAL
- en: '*How do you do that?* The trick is to relate what you have or do as a website
    with your specific target audience. If you are providing content that has appeal
    to both sexes of all ages across all nationalities, races, or religions, then
    obviously you should go with something that everyone can use. If anything, this
    might be a slightly flavorless site since you wouldn''t want to marginalize any
    group of users by explicitly making your site friendly to another group. Luckily,
    though, to some extent your target audience will be slightly easier to define
    than this, so you can generally make some concessions for a particular type of
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that while these following sections refer to *visual* or *functional*
    design, what you are really thinking about is the visual or functional aspect
    of the *interaction* design, which encompasses all visual and functional design.
    The interaction design is how you envision your audience using and interacting
    with your site. This is an important distinction because thinking about everything
    from the perspective of the user will help to define your choices as you go along.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's no beating about the bush on this issue. Make the site appear as visually
    simple as possible without hiding any critical or useful information. By this,
    I mean you shouldn't be afraid to leave a fairly large list of items on a page
    if all the items on that list are useful, and will be (or are) used frequently.
    Hiding an important thing from users—no matter how easy it appears to be to find
    it on other pages—will frustrate them, and your popularity might suffer. A consequence
    of this is that you should not be afraid to have quite long pages that users must
    scroll down—rather have information available at the bottom of the page than have
    a complex navigation structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'How you make your site look can also have a big impact on how users understand
    the site''s working. For example, if you have several different fonts that apply
    to different links, then it is entirely likely that users will not think of clicking
    on one type of link or another because of the different font styles. Think about
    this yourself for a moment! If you were reading a page of text and the links were
    all given in the same font as the writing, how would you know on which words to
    click? This can be summed up as:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure your site is visually consistent and that there are no style discrepancies
    from one page to the next.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are quite a few so-called rules of visual design, which you could apply
    to your site. These are largely theoretical, and you may or may not wish to read
    up on these further—might I suggest Google for some good reading matter. Some
    that might apply to you are: the rule of thirds, which states that things divided
    up into thirds—either vertically or horizontally—are more visually appealing than
    other designs; the visual center rule, which states that the visual center of
    the page (where the eye is most attracted to) is just above and to the right of
    the actual center of the page.'
  prefs: []
  type: TYPE_NORMAL
- en: Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now this is a truly interesting part of your site's design, and the art of writing
    for the Web is a lot more subtle than just saying what you mean. The reason for
    this is that you are no longer writing simply for human consumption, but also
    for consumption by machines. Since machines can only follow a certain number of
    rules when interpreting a page, the concessions on the language used must be made
    by the writers (if they want their sites to feature highly on search engines).
  prefs: []
  type: TYPE_NORMAL
- en: Before you worry about making your site's text highly optimized for searching,
    there are a few more fundamental things that you need to get right. First off,
    make sure your language is clear and concise! This is the most important; rather
    sacrifice racy, stylized copy for more mundane text if the mundane text is going
    to elucidate your important points better.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the actual content of your language, the visual and structural appearance
    of the copy is also important. Use bold or larger fonts to emphasize headings
    or important points, and ensure that you space your text out nicely to make the
    page easier on the eye and therefore easier to read and understand—we saw an example
    of this in the previous chapter when we posted a well formatted and laid out "about
    us" page.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working with images for the Web is very much an art! I don't mean this in the
    sense that generally you should be quite artistic in order to make nice pictures.
    I mean that actually managing and dealing with image files is itself an art. There
    is a lot of work to be done for the aspiring website owner with respect to attaining
    a pleasing and meaningful visual environment. This is because the Web is the one
    environment that is most reliant on visual images to have an effect on users because
    sight and sound are the only two senses that are targeted by the Internet, for
    now.
  prefs: []
  type: TYPE_NORMAL
- en: In order to have the freedom to manipulate images as required by your site,
    you really need to use a reasonably powerful image editor. Photoshop or Paint
    Shop Pro are examples of good image-editing environments, but anything that allows
    you to save files in a variety of different formats and provides resizing capabilities
    should be sufficient. Of course, if you have to take digital photographs yourself,
    then you will need to ensure you make the photos as uniform as possible, with
    a background that doesn't distract from the object in question—editing the images
    to remove the background altogether is probably best.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several areas of concern when working with images, all of which need
    to be closely scrutinized if you hope to produce an integrated and pleasing visual
    environment (not all of these relate to what your customers actually see, funnily
    enough):'
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest problems with images is that they take up a lot more memory
    than text or code. For this reason you need to have an effective method for dealing
    with large images that will be required for your site—simply squashing large images
    into thumbnails will slow everything down because the server still has to upload
    the entire large file to the user's machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One common mistake people make when dealing with images is not working on them
    early on in the process to make them as uniform in size and type as possible.
    If all your images are of one size and of the same dimension, then you are going
    to have things a lot easier than most. In fact, this should really be your aim
    before you do anything involving the site—make *sure your images are all uniform*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding what type of image you actually want to use from the multitude available
    can also be a bit of an issue because some image types take up more space than
    others, and some may not even be rendered properly in a browser. By and large
    there are really only three image types that are most commonly used—GIF, PNG,
    and JPG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The intended use of an image can also be a big factor when deciding how to create,
    size, and format the file. For example, icons and logos should really be saved
    as PNG or GIF files whereas photos and large or complex images should be saved
    in the JPG format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three types of image files were mentioned in the bulleted list. Let's take a
    quick look at those here.
  prefs: []
  type: TYPE_NORMAL
- en: '**GIF**, or Graphics Interchange Format, is known for its compression and the
    fact that it can store and display multiple images. The major drawback to GIF
    is that images can only display up to 256 distinct colors. For photographic-quality
    images, this is a significant obstacle. However, you should use GIFs for:'
  prefs: []
  type: TYPE_NORMAL
- en: Images with a transparent background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animated graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller, less complex images requiring no more than 256 colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PNG**, or Portable Network Graphics, is actually designed as a replacement
    for GIF files. In general it can achieve greater file compression, give a wider
    range of color depth, and quite a bit more. PNG, unlike GIF files, does not support
    animations. You can use PNG files for anything that you would otherwise use GIFs
    for, with the exception of animations.'
  prefs: []
  type: TYPE_NORMAL
- en: Incidentally, there is also an MNG format, which allows for animations—you might
    want to check that out as an alternative to animated GIFs.
  prefs: []
  type: TYPE_NORMAL
- en: '**JPG**, or JPEG (Joint Photographic Experts Group), should be used when presenting
    photo‑realistic images. JPG can compress large images while retaining the overall
    photographic quality. JPG files can use any number of colors, and so it''s a very
    convenient format for images that require a lot of colors. JPG should be used
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: Photographs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Larger, complex images requiring more than 256 to display properly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That about covers it for the planning phase of your site's interface development.
    Before we begin an in-depth look at themes, which are responsible for just about
    everything when it comes to your site's look and feel, we will need to take a
    look at how the various web technologies are combined in Drupal to provide your
    site with its interface.
  prefs: []
  type: TYPE_NORMAL
- en: How Drupal's Interface Works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing a bit about the theory behind creating an appealing site is one thing;
    applying this knowledge within the context of a Drupal site is another thing entirely.
    Because of this it is important that we take some time to understand exactly how
    everything is tied together. You have already seen that HTML and PHP can and do
    form part of a site's interface, but many of you will have noticed the **themes**
    link under the **administer** menu item and wondered what all that is about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, some of you might have also been wondering what on earth a theme engine
    is, and how both themes and theme engines relate to your Drupal site. The following
    two definitions should clear up a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Theme:** A file, or set of PHP files, that defines and controls the layout
    of Drupal''s web pages. The look and feel of these pages is in turn controlled
    by **CSS** (Cascading Style Sheet) files, also provided by the theme. Various
    standard images might also be held within the theme for use by the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theme engine:** Provides functionality to create your own unique theme, which
    in turn gives excellent control over the all aspects of a Drupal site, ranging
    from what functionality to include within a page, to how individual page elements
    will be presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Making use of a theme engine requires some programming know-how, as themes
    are built using code. Modifying themes, on the other hand, is fairly easy, and
    once a suitable base theme has been found, creating your own unique site is a
    matter of modifying the theme accordingly. The following diagram should help you
    picture how everything works together, and will place the subject matter of this
    chapter into context:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How Drupal''s Interface Works](img/1800_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This diagram shows a kind of upside-down waterfall in that the arrows between
    each level of the diagram represent a contribution of something to the level above.
    In other words, we can regard PHP, HTML, and CSS as being fundamental technologies
    that provide the base from which theme engines and themes provide HTML to browsers.
    Once a theme has provided the HTML to the browser, the browser renders this to
    the screen for the user to view.
  prefs: []
  type: TYPE_NORMAL
- en: There are several things to make a note of here. Firstly, not all theme engines
    are pure PHP based. For example, there is a Smarty theme engine available in Drupal
    for use by people who are familiar with Smarty templates. Second, there are many
    types of browser out there, and not all of them are created equal. What this means
    is that a page that is rendered nicely on one browser might look bad, or worse,
    not even function properly on another. For this reason you should *test your site
    using several different browsers!*
  prefs: []
  type: TYPE_NORMAL
- en: 'The Drupal help site has this to say about browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended you use the Firefox browser with developer toolbar and the
    view formatted source extensions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can obtain a copy of the Firefox browser at [http://www.mozilla.com/firefox/](http://www.mozilla.com/firefox/)
    if you wish to use something other than Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in terms of how this relates to our situation, we are going to limit ourselves
    to the selection of a base theme, which we will modify to provide us with the
    site's interface. This means that for now, you don't have to concern yourself
    with the intricacies of theme engines. *Can we now move on and look at themes
    directly?* Not yet; notice that in the previous diagram there is a box containing
    the term CSS. This is very important in terms of developing our interface, and
    since we have already seen HTML and PHP in action, let's learn a bit about CSS
    before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pages in a Drupal site obtain their style-related information from associated
    style sheets, which are held in the site's theme. Using style sheets gives designers
    excellent, fine-grained control over the appearance of web pages, and even allows
    you to produce some great effects. The appearance of pretty much every aspect
    of the site can be controlled from within a theme, and all that is needed is a
    little knowledge of fonts, colors, and style sheet syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go any further, it will make life easier if you have a readymade
    list of the type of things you should look at setting using the style sheet. The
    following is a list of the most common areas (defined by HTML elements) where
    style sheets can be used to determine the look and feel of a site''s:'
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Border
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Margin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Padding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As well as being able to change all these aspects of HTML, you can also apply
    different effects depending on whether certain conditions, like a mouse hovering
    over the specified area, are met—this will be demonstrated a little later on.
    You can also specify attributes for certain HTML tags, which can then be used
    to apply style-sheet styles to those specific tags instead of creating application-wide
    changes. For example, if you had one paragraph style with a `class` attribute
    set, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'you could specify this type of paragraph in your style sheet explicitly by
    saying something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Analyzing this line highlights the structure of the standard style-sheet code
    block, which appears in the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selector:** in this case `p.center`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property:** in this case `color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delimiter:** always `:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value:** in this case `green`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that all the property/value pairs are contained within curly braces, and
    each is ended with a semi-colon. This introduction to CSS has been very brief,
    and there are plenty of excellent resources available. If you would like to learn
    more about this (and it is highly recommended), then visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS Discuss:**[http://css-discuss.incutio.com/](http://css-discuss.incutio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML Dog:** [http://www.htmldog.com/](http://www.htmldog.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have an understanding of how Drupal's interface is created through
    the use of HTML, PHP, CSS, and themes, along with the knowledge of how stylesheets
    work, we are ready to begin looking at…
  prefs: []
  type: TYPE_NORMAL
- en: Themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of themes makes Drupal exceptionally flexible when it comes to working
    with the site's interface. Because the functionality of the site is by and large
    decoupled from the presentation of the site, it is quite easy to chop and change
    the look, without having to worry about affecting the functionality at all. This
    is obviously a very useful aspect because it frees you up to experiment however
    you please knowing that, if worst comes to worst, you can reset the default settings
    and start from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of a theme as a *template for your site*, which you can modify
    in order to achieve the look and feel you want. Of course, different themes have
    wildly varying attributes; so it is important to find the theme that most closely
    resembles what you are looking for in order to reduce the amount of work you need
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, the first task we need to complete is…
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a Base Theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Drupal ships with a few default themes and there are quite a few
    more available in the **Downloads** section of the Drupal site.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some themes require the use of a theme engine, in which case, you will need
    to also download and install the appropriate engine before attempting to use that
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at what''s already present on the **themes** page in Drupal, we can
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing a Base Theme](img/1800_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You might be wondering why it is possible to enable as many themes as you like,
    yet select only one as the default. The reason for this is that if you enable
    more than one option, then these options are available for users (assuming they
    have sufficient permissions) to select by editing their **Theme configuration**
    preferences on the **edit** tab of the **my account** page as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing a Base Theme](img/1800_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, **bluemarine, chameleon**, and **marvin** have all been enabled,
    with **bluemarine** selected as the default. Users can then themselves select
    their preference for how they wish to view the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the list of available themes! Enabling the **pushbutton** theme, and
    setting it as the default, causes the site, which has been presented in the standard
    bluemarine theme up until now, to look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing a Base Theme](img/foo.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a fairly vast change from the previous look provided by the bluemarine
    theme; however, you should be able to spot the fact that the generic layout hasn't
    changed much—there are still three columns, there is a heading section containing
    the site name and logo, there is a navigation section and various boxes, and so
    forth. What *have* changed are the fonts, colors, and a few images—notice in particular
    that there is now a background image in the heading section of this theme.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should take the time to view each and every theme that is available by default
    in order to get a feel for what is on offer.
  prefs: []
  type: TYPE_NORMAL
- en: That is not the end of the story, because the Drupal site also has a whole bunch
    of themes for us to explore, so let's head on over to the themes page at [http://drupal.org/project/Themes](http://drupal.org/project/Themes)
    and select the relevant version tab to bring up the themes that are available
    for your installation of Drupal. Please make note that some of these themes require
    you to download a theme engine—the **Box_grey_smarty** contribution is an example
    of a theme that requires the Smarty theme engine in order to function.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have already seen how to download and install other modules, and the process
    for installing themes is no different—simply download and extract the contents
    of the desired theme to your `themes` folder. For example, the **box_grey** theme
    was downloaded, and provides us with two new options in our list of themes, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing a Base Theme](img/1800_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enabling the **box_grey** option and setting it as the default causes the site
    to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing a Base Theme](img/1800_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You now have a bunch of default themes to choose from as well as a couple of
    contributed ones to look over. Once you have decided on one you like, there are
    a few things to contend with before moving to the next phase. As you might have
    expected, we can configure the theme by simply clicking on the **configure** link
    on the **themes** page, so let's take a look at that here.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Your Themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clicking on the **configure** tab at the top of the themes page brings up the
    global theme options, which will influence each theme regardless of which one
    is being used—useful if you know that you always want certain features enabled
    (it's also easy enough to navigate between global and theme-specific settings
    using the links given at the top of the **configure** page).
  prefs: []
  type: TYPE_NORMAL
- en: We will concentrate on the **global settings** page here as this is representative
    of all the theme configuration pages, so you won't have any problems working on
    each one individually. Remember that you can override these settings by working
    on the **configure** page of a specific theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first section allows you to either use the default logo supplied with the
    theme, or alternatively, specify a path to your own logo or upload a new logo
    to the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Your Themes](img/1800_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the case of the demo site, we will be making use of a background image to
    display the logo and name; so this can be unchecked. If you have a site logo,
    or plan to have one, then simply upload it here.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal also provides us with the ability to specify which content types require
    post information to be displayed. Now, we have already seen that there are certain
    types of pages for which we don't need to display this type of information—for
    example, the *about us* page should be presented as is without informing users
    precisely who created it.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for the settings as shown in the last screenshot is that it is important
    to identify a blog posting with the person who posted it, and likewise for forum
    topics. However, when it comes to things like polls, pages, book pages, or stories,
    it is less important to do so—often because these sorts of things will be handled
    by site administrators anyway. For the moment, I have left the **page** type as
    the only type to forgo post information.
  prefs: []
  type: TYPE_NORMAL
- en: Please bear in mind that you need to think about what makes sense for your site
    and apply the settings that reflect *your specific needs*. For example, it may
    well be important to identify who has contributed certain book pages so that the
    authors can be contacted in case there is a need to query or modify content on
    the book page (especially since books are generally collaborative efforts).
  prefs: []
  type: TYPE_NORMAL
- en: The following section allows you to specify **Logo image settings** and an icon
    that will be displayed in the site's address bar and in any bookmarks. Once again,
    what you use here is really up to you. For the purposes of our site, we need not
    create a specific icon, and we don't yet have a logo to upload; so we can leave
    things blank for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the **configure** page looks like this as a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Your Themes](img/1800_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you might have guessed, everything has been left blank because we are not
    specifying anything new and we don't want the default logo or icon to display.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to ensure that whatever you set here is not unintentionally overridden
    in the individual theme's **configure** page.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Your Theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up until now, any settings or changes you have made have been fairly generic.
    Things are about to change as we begin to implement some more radical modifications
    that will require amendments to the style sheet in order to get things just right.
    In the case of the demo site, I have chosen to work with the **box_grey** theme
    as this most closely resembles the look that is envisaged and has features that
    are suitable for learning purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some information about **box_grey**, from their `readme` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '*box_ is intended to be relatively easy to modify for those that aren''t competent
    in CSS positioning. Instead of using entirely CSS for layout it is a so called
    hybrid layout—it uses CSS combined with very simple tables*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*It is a standard three-column layout using a table for the central three columns
    with a header above the table and a footer below. This reduces accessibility and
    adds a little code bloat but has certain advantages:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The content columns won''t overlap if a user inserts wide content*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The content appears in the template (page.tpl.php) in the order it appears
    on the page*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*You can add any sized logo image; the header should expand to fit*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features are useful from the point of view of learning how to work with
    style sheets and this will not only give you an effective means of customizing
    the look of your site, but also build a platform from which you can attempt some
    more advanced customizations on other themes when you are ready.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you haven't already, now is the time to find a fairly good code editor as
    you will be looking at code files of one sort or another from here on out.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `themes` folder in your Drupal installation and make a copy
    of the `box_grey` folder, naming it `box_grey_dev`. This allows us to work on
    a development version of the theme without putting the original files at risk.
    Go back to **themes** in your Drupal **administer** section and enable the new
    **box_grey_dev** theme, setting it as the default. It is important you do this
    so that you know that you are viewing the correct theme when you check to see
    what effect any changes you make have on the look of the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, opening up the `box_grey_dev` folder, you will notice that there are a
    few `.tpl.php` files, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`node.tpl.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`page.tpl.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_gallery.tpl.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'which are responsible for the layout of their namesakes. For example, a snippet
    of the code in `page.tpl.php` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this uses HTML to create a table that defines the content of
    each page. It uses a bunch of PHP `if` statements to check whether or not, for
    example, to display things like the left‑hand sidebar or even the mission statement.
    The PHP code is embedded within HTML tags, which have certain attributes associated
    with them—like `id="mission"` or `id="message"`. Don't worry about how these PHP
    variables are populated; we don't want to alter the way in which the site functions,
    we are simply looking at how it is laid out.
  prefs: []
  type: TYPE_NORMAL
- en: '*But why have they bothered to set the class and id attributes for different
    sections of the HTML page?* This is where the power of CSS comes into play. We
    already know that we want to create a consistent look for our site. What this
    means is that every type of related content should have the same look and feel—in
    other words, the content of each page should be presented in a similar manner.
    This being the case, we can classify a `class` or `id` of content to be of a certain
    type, and then, using that attribute tag, specify how it should be laid out within
    the style sheet.'
  prefs: []
  type: TYPE_NORMAL
- en: You should be asking for proof, and here it is…
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `style.css` file in the `box_grey_dev` theme and search for the
    snippet of code that reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change this to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Save these changes, and refresh the view of your Drupal site in your browser.
    You should now find that the content on your page has changed so that your pages
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Your Theme](img/1800_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A single change to the `body` tag in the style sheet has changed the background
    color throughout each and every page of the whole site. This is quite a powerful
    and useful property of style sheets, and is precisely why everyone uses them so
    much nowadays. You can change this back to your original setting or leave it as
    is—it makes no difference at the moment since it will no doubt change once you
    have decided on a color scheme for your site.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to implement a change and view the effects of this change
    on your site, you are ready to continue with modifying the style sheet to reflect
    how you want the site to look. In the sections that follow, we will discuss several
    different types of modifications, without grinding through each and every one—and
    there are a lot of different properties associated with web pages, believe me!
    Once you have the hang of making changes in one area, it is easy to apply that
    knowledge somewhere else, so you should find the coverage here sufficient to get
    you up and running with confidence.
  prefs: []
  type: TYPE_NORMAL
- en: One of the first tasks required for the demo site is to create and upload an
    image that will serve as the logo and title in the header section of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images and background images can be tricky to work with because they are generally
    a fixed width in length, unlike web pages, which can be resized. It can look quite
    awful if an image stops short of the page size or is in the wrong place, and so
    we need to work out how to make our images blend into the site so that viewers
    working on different screens don't end up seeing un-neat images.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the demo site, I wanted a rough and fairly evocative scene in
    nature, and what better to use than a sunset shown through African bush (notice
    that the site''s name/logo is actually part of this image, which is why we have
    done away with the standard site name and logo):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](img/1800_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to present this on the site, however, we need to do a bit of work
    with the style sheet. Also, we want this to be presented right up against the
    top left-hand corner of the page so this will effectively be our site''s logo
    image. Adding this as the site''s logo is a simple matter of uploading it in the
    theme''s **configure** page as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](img/1800_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'and ensuring that the **Logo** option is enabled for this particular theme.
    Since you have access to the file system, you could also copy the image directly
    to the `files` folder and then reference it from the **Path to custom logo** text
    box directly above the **Upload logo image** box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](img/1800_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You could also simply save the new logo image over the old original one, and
    it will display as normal too.
  prefs: []
  type: TYPE_NORMAL
- en: If you find that you are having problems with viewing this image, then it is
    most likely that your **File system settings** in the **settings** section of
    the **administer** menu are at fault. Check them to ensure that you are saving
    files to the correct places and that you are then attempting to access them from
    the correct place.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that done, we can now take a look at the site to see the effect this has
    had:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](img/1800_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Oh dear! This doesn't look very good at the moment, because if you look carefully,
    the new image is offset to the right (as well as downwards, even though this may
    not be so noticeable in the screenshot). In order to rectify this we will need
    to take a look at the cause of the offset. To do this, we need to find out which
    code is responsible for displaying this area of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking near the top of the `page.tpl.php` file we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted code at the bottom of this snippet is responsible for displaying
    the site''s logo (depending on `$logo)`. As you can see this section uses `header`
    as the `id` attribute for the`<div>` tag, so we should be able to find out what''s
    going on by looking this up in the style sheet. Sure enough, we find the following
    two header-related tags, which affect our image''s position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Both of these can be modified to remove the padding and margin that cause the
    unwanted offset, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With these changes saved, you will find that the image is displayed in the desired
    position. Obviously, you could add padding or change the margins associated with
    the image as you please.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to realize at this point that changes like this might not be
    limited only to the area you intend. It may so happen that making a change meant
    to correct one area actually harms another area—in this case, the loss of padding
    might have caused images in other areas of the heading, if we were using any,
    to look bad. *How can this problem be resolved?* You already know that we can
    add certain attributes to certain tags on a page. To solve this problem, you would
    add your own custom tag to the area to be altered, and reference it from the style
    sheet, giving it the properties you require.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you might want to add a background image to your site too. If you
    do intend to use background images, make sure that they don't affect the usability
    of the site. Don't distract or hinder the user in any way from viewing the content.
    If you are sure that your background image won't be detrimental in any way, then
    the use of the `background` property is the way forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I modified the `body` block in the style sheet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From this you can see that the `background` attribute can actually do far more
    than specify the color to be used—we are not even specifying a background color
    at the moment because we will deal with colors shortly. In this case, it also
    sets an address where the background image is to be found. It forces the browser
    not to repeat the image (we don''t want a busy pattern of repeated images in the
    background cluttering up the site), and finally tells the browser to render the
    image at the top of the body area. Assuming you have in fact created an image
    that you want to use (in this case the image is entitled `block_background.png)`
    and have ensured that it is small, you would end up with something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](img/1800_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can hopefully tell, this background image is fairly unobtrusive and doesn't
    make it particularly difficult to read any of the content, although, quite clearly,
    it not the same color as the background yet. Of course, you aren't limited to
    adding background images to the body of the site—you can add them in other places
    too. Just check which HTML tags support the `background` or `background-image`
    options first.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to look at colors, it is important to realize that there is
    an unfortunate problem with the way things have been done here. Can you spot it?
    Think about will happen when these changes are deployed to your live site. *What
    is the URL of that domain going to be?* It is certain that it will not be `http://localhost/drupal`;
    so when the time comes for your style sheet to go off in search of your background
    image by looking for `http://localhost/drupal/files/ block_background.png`, it
    is going to fail.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider adding all theme-related images to the actual `theme` folder and not
    simply uploading them to the standard `files` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try this out by creating an `images` folder under `box_grey_dev`. Insert
    your background image into this folder and then change the absolute URL `http://localhost/drupal/files/block_background.png`
    to the relative URL `images/block_background.png` and confirm that you get the
    expected result.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when the time comes to deploy your site, you won't have the problem of
    losing images, because the relative URL paths are conserved—it is the absolute
    paths that change.
  prefs: []
  type: TYPE_NORMAL
- en: Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the new images in place, you might have noticed that neither fits well
    with the rest of the site because it is currently white by default. In order to
    rectify this, we are going to change the background color of the site''s `body`
    tag to the following color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The site now looks a little better with that modification. The background image
    integrates seamlessly and the header image now fades into the correct color so
    that there is a natural transition between the image and the rest of the page
    as users expand the width of their browsers.
  prefs: []
  type: TYPE_NORMAL
- en: With the change in background color, however, a host of changes need to be made
    to other colors, especially the colors used for hyperlinks. Of course, it's not
    even necessary to change the background color! I could have always blended the
    header image with the default color, or made the background of the background
    image transparent, but let's continue on with some more changes to get an idea
    of what can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there can be as many or as few changes as you like to your site's colors.
    You have already seen that changing the color of an attribute such as `background`
    or `color` is simply a matter of inserting the new color code into the correct
    place; now we will make a list of the more interesting changes as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '*Hyperlinks:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Sidebars:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Input:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Footer:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '*Primary:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the color changes have been made, a standard page might look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Colors](img/1800_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The site as it now stands is easy to use, and hopefully you will agree that
    the color co-ordination is at least easy on the eye. Remember when making your
    own adjustments that there are plenty of color-related settings in the style sheet,
    so you really need to go through your site with a fine-tooth comb to ensure that
    there are no nasty surprises when links disappear because they are very similar
    in color to the background and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Page Modifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s entirely possible that the actual layout of the page is not to your liking.
    In this case, there are two options open to you when it comes to effecting change.
    The style sheet can be used for limited numbers of change. For example, if you
    found that the sidebars were too narrow for the site, they can be broadened (or
    narrowed if required) to a fixed width in pixels, by altering the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*But what if you needed some more drastic alterations to the site?* Let''s
    say, for example, that you wanted to add an extra column to each page in order
    to insert some advertising in the hope that you could generate some revenue from
    the site. In order to do this we need to look at the `page.tpl.php` file, since
    this is where the layout of each page is controlled. Depending on how adventurous
    you are, you could add some conditional PHP code in order to display the column
    with its advertising only at specific times. For our purposes, it is enough to
    simply add the new column.'
  prefs: []
  type: TYPE_NORMAL
- en: Incidentally, the advertising we will use for the demonstration comes directly
    from the Amazon associates site, and if you are interested in using this type
    of advertising, make sure you check out the various Amazon-related contributions
    on the Drupal site. For the moment, the important bit is seeing how to add the
    column—you can take a look at the contributions or Amazon associates at your leisure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want the column to appear on the far right-hand side of the page,
    after the right sidebar, so that it doesn''t really impinge on the use of the
    site in any appreciable way. If this is the case, we need to find the spot in
    the code where the right sidebar is added, and add the new column in there. Look
    for this snippet of code in the `page.tpl.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can tell, this is responsible for adding a table cell that contains
    the right sidebar. Simply adding another cell after this should do the trick,
    so let''s go ahead and try that. Make the following changes to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There are several important points to note here. Firstly, the new cell, enclosed
    by`<td>` tags, was placed after the PHP `if` statement because we don't want it
    subjected to the same conditions as the right sidebar (it should simply display
    on every single page).
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, as well as content being vertically aligned at the top of the cell,
    the width of the cell is given as 120 pixels because we know from the Amazon code
    that the width of the advertisement is always 120 pixels (this is because we have
    selected the ad to be of a specific dimension). Finally, the advertisement code
    that has been added is provided by Amazon, and if you wish to obtain ads like
    this, then at some stage you will need to register with Amazon to obtain your
    ID (blanked out in the previous code with `*` symbols).
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a look at the site now shows that the advertisement is displayed as
    expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Page Modifications](img/1800_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, there are plenty of different things you may want to achieve on your
    pages, so spending some time playing around with the code will help you out later
    on when you need to make more serious changes to the site. You might even want
    to add banner ads in the header section. Recall that we cheated slightly by turning
    the site's logo space into the whole header. Doing this means that there is still
    space allocated for other things within the header (even though this is not visible)
    and as an exercise you might want to see if you can make use of this space.
  prefs: []
  type: TYPE_NORMAL
- en: This reminds me to reiterate…
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is extremely important that you test out whatever changes you make to your
    site on more than one browser!
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing your layout goes deeper than simply checking if everything is in the
    correct place. It is important that you ensure CSS and HTML is valid and correct,
    and resources to achieve this are available automatically in `box_grey`. Simply
    scroll down to the bottom of the page until you see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Page Modifications](img/1800_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once your site is up and running on the Internet at a public domain, clicking
    on these links will help you ensure that your layout code is valid. If any problems
    are reported, then it is up to you to ensure that your site complies as closely
    as possible. Unfortunately, if you try this from your development machine you
    will more than likely receive an error message because these services will only
    work on public domains.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From learning about what considerations must be taken into account when planning
    your website's look and feel, to making changes to the code, this chapter has
    given you a firm grounding in the fundamentals of working with Drupal interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important aspects of customizing a site's look is understanding
    how Drupal is set up in order to leverage the power of themes. As we saw, themes
    provide a kind of template from which you can work to create your own unique site.
    This saves us a lot of time and effort because we no longer need to work from
    scratch. We also briefly touched on the possibility of generating themes from
    theme engines and hopefully you will feel confident enough to begin looking at
    this in more detail once you gain more experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'With respect to building your site''s interface, experience is very important.
    There are three main technologies that you need to spend some time working with:
    HTML, CSS, and PHP. In this chapter we looked at CSS in some detail before setting
    about modifying the style sheet supplied with our chosen base theme. Whatever
    theme you choose as your site''s base, the tasks you face will be similar in nature
    to the ones discussed in this chapter and hopefully you will find that CSS is
    a most powerful and useful weapon in your armory.'
  prefs: []
  type: TYPE_NORMAL
- en: The knowledge gained from working with images and HTML, as well as the application
    of the design considerations discussed will help not only with your Drupal site,
    but with any other web‑based application that you end up working with. Gaining
    an appreciation for the various different types of design, as well as having to
    work with images and code, will allow you to create more ambitious graphical user
    interfaces in the future.
  prefs: []
  type: TYPE_NORMAL
