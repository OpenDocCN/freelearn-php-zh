- en: Chapter 4. Introduction to the Field Types API and Developing the Custom Field
    Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 字段类型API简介和自定义字段模块开发
- en: '*In the last chapter, we learned how to use views and about configuration management.
    Now let''s understand more about the Field Types API and how to use it to develop
    custom field modules.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一章中，我们学习了如何使用视图和配置管理。现在让我们更深入地了解Field Types API以及如何使用它来开发自定义字段模块。*'
- en: 'In this chapter, we will learn these topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Creating field types, widgets, and formatters using field APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字段API创建字段类型、小部件和格式化器
- en: Developing custom field modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自定义字段模块
- en: Introducing the NutritionInformation module
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍NutritionInformation模块
- en: In the previous chapter, one of the [http://schema.org/Recipe](http://schema.org/Recipe)
    properties that we did not include with our Drupal Recipe content type is the
    `NutritionInformation` property. The reason for this is that the `NutritionInformation`
    property is itself an `itemType` from [http://schema.org](http://schema.org),
    and as such is made up of a number of its own individual properties. In order
    to add `NutritionInformation` to our custom Recipe content type, we will need
    to create a custom Drupal compound field module that is based on the specification
    at [http://schema.org/NutritionInformation](http://schema.org/NutritionInformation).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们没有包含在我们的Drupal Recipe内容类型中的[http://schema.org/Recipe](http://schema.org/Recipe)属性之一是`NutritionInformation`属性。这是因为`NutritionInformation`属性本身是来自[http://schema.org](http://schema.org)的`itemType`，因此它由许多自己的单独属性组成。为了将`NutritionInformation`添加到我们的自定义Recipe内容类型中，我们需要创建一个基于[http://schema.org/NutritionInformation](http://schema.org/NutritionInformation)规范的定制Drupal复合字段模块。
- en: Time for action – developing a custom module for a compound NutritionInformation
    field
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践 – 开发一个用于复合NutritionInformation字段的自定义模块
- en: 'Rather than adding the code to create this compound field to our existing module,
    we are going to create a new module, as it is possible that it is something that
    could be useful to the Drupal community as a whole, and we may want to eventually
    contribute it to Drupal ([https://www.drupal.org/](https://www.drupal.org/)).
    We need to create a compound field that consists of several different form elements
    (a select number and several text fields). We can now have a basic compound field
    in three basic steps: first is defining the field (info and schema), second is
    defining the field form (widget), and then comes defining the output (formatter).
    All of these steps are explained here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是将创建这个复合字段的代码添加到我们现有的模块中，而是将创建一个新的模块，因为它可能是整个Drupal社区都可能有用的事情，我们可能最终希望将其贡献给Drupal
    ([https://www.drupal.org/](https://www.drupal.org/))。我们需要创建一个由几个不同的表单元素（一个选择数字和几个文本字段）组成的复合字段。现在，我们可以通过三个基本步骤创建一个基本的复合字段：首先定义字段（信息和模式），其次是定义字段表单（小部件），然后是定义输出（格式化器）。所有这些步骤都在这里解释：
- en: In Phpstorm, create a new folder named `nutritioninfo` in the `/modules/custom`
    directory.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Phpstorm中，在`/modules/custom`目录下创建一个名为`nutritioninfo`的新文件夹。
- en: Create the `nutritioninfo.module` and `nutritioninfo.info.yml` files with the
    same name as the folder—`nutritioninfo`. Create the templates `src/Plugin/Field`
    folders and you should have a folder structure that looks similar to the following
    screenshot:![Time for action – developing a custom module for a compound NutritionInformation
    field](img/4659_04_01.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建与文件夹同名的`nutritioninfo.module`和`nutritioninfo.info.yml`文件——`nutritioninfo`。创建模板`src/Plugin/Field`文件夹，你应该有一个类似于以下截图的文件夹结构：![动手实践
    – 开发一个用于复合NutritionInformation字段的自定义模块](img/4659_04_01.jpg)
- en: 'Now, open the `nutrtioninfo.info` file and add the following configuration:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`nutrtioninfo.info`文件并添加以下配置：
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Drupal 7, the `hook_field_schema` hook allows us to define a database schema
    for storing our custom field information. But in Drupal 8, field types changed
    to a plugin system ([https://www.drupal.org/node/2064123](https://www.drupal.org/node/2064123)).
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Drupal 7中，`hook_field_schema`钩子允许我们定义一个数据库模式来存储我们的自定义字段信息。但在Drupal 8中，字段类型变为插件系统([https://www.drupal.org/node/2064123](https://www.drupal.org/node/2064123))。
- en: 'Next, we are going to use the following code from the telephone core module
    (`/core/modules/telephone/src/Plugin/Field/FieldType/TelephoneItem.php`). We are
    only copying this file and changing to the `NutritioninfoItem.php` file. In the
    next step, we create the `/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`
    file and core `TelephoneItem.php` file, which looks like this:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用来自电话核心模块（`/core/modules/telephone/src/Plugin/Field/FieldType/TelephoneItem.php`）的以下代码。我们只是复制此文件并将其更改为`NutritioninfoItem.php`文件。在下一步中，我们创建`/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`文件和核心`TelephoneItem.php`文件，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we discussed in step 4, Drupal 8 introduced a plugin system. Most plugins
    in Drupal 8 use annotations to register themselves and describe their metadata.
    Here, `@FieldType` is the annotation it is registering to the `telephone` field
    type. The `schema` function holds columns and its properties such as `type` and
    `length`.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在第4步中讨论的那样，Drupal 8引入了插件系统。Drupal 8中的大多数插件使用注解来注册自己并描述其元数据。在这里，`@FieldType`是它注册到`telephone`字段类型的注解。`schema`函数包含列及其属性，如`type`和`length`。
- en: The `PropertyDefinitions` function is for setting column property values such
    as `label` and `description`. The `isEmpty` function determines whether the list
    contains any nonempty items.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`PropertyDefinitions`函数用于设置列属性值，例如`label`和`description`。`isEmpty`函数用于确定列表中是否包含任何非空项。'
- en: 'Drupal 8 implemented the PSR-4 standard for package-based PHP namespace auto-loading
    by the PHP Framework. Each module has a namespace that corresponds to its module
    name (`namespace Drupal\telephone\Plugin\Field\FieldType`). In our module, it
    should be `namespace Drupal\nutritioninfo\Plugin\Field\FieldType`. And the module''s
    namespace is mapped to the `./src/` folder in the module directory. Classes and
    interfaces with a backslash (`\`) inside their fully qualified name (for example,
    use `Drupal\Core\Field\FieldItemBase;`) must not use their fully qualified name
    inside the code. If the namespace differs from the namespace of the current file,
    put a `use` statement at the top of the file. Here is an example:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drupal 8通过PHP框架实现了基于包的PHP命名空间自动加载的PSR-4标准。每个模块都有一个与其模块名称对应的命名空间（例如`namespace
    Drupal\telephone\Plugin\Field\FieldType`）。在我们的模块中，它应该是`namespace Drupal\nutritioninfo\Plugin\Field\FieldType`。并且模块的命名空间映射到模块目录中的`./src/`文件夹。在完全限定名称（例如，使用`Drupal\Core\Field\FieldItemBase;`）内部带有反斜杠（`\`）的类和接口，不得在代码中使用它们的完全限定名称。如果命名空间与当前文件的命名空间不同，请在文件顶部放置一个`use`语句。以下是一个示例：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we are going create the `/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`
    file. We need to add the `NutritioninfoItem` class. The `NutritioninfoItem.php`
    code looks as follows without any methods added:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建`/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`文件。我们需要添加`NutritioninfoItem`类。`NutritioninfoItem.php`代码如下，尚未添加任何方法：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the `@FieldType` annotation registers the `nutritioninfo` field type.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`@FieldType`注解注册了`nutritioninfo`字段类型。
- en: 'Next, we need to add schema columns in the `schema` function. In `TelephoneItem`,
    we have only one column value. But in `NutritioninfoItem`, there are 12 columns
    need to be added. So that `schema` function looks as follows. Add these functions
    inside the `NutritioninfoItem` class:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`schema`函数中添加模式列。在`TelephoneItem`中，我们只有一个列值。但在`NutritioninfoItem`中，需要添加12个列。因此，`schema`函数看起来如下。将这些函数添加到`NutritioninfoItem`类中：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we need to add the `isEmpty()` function. This determines whether the
    list contains any nonempty items. Add these functions inside the `NutritioninfoItem`
    class:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加`isEmpty()`函数。这个函数用于确定列表中是否包含任何非空项。将这些函数添加到`NutritioninfoItem`类中：
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The last method in this class is `propertyDefinitions()`, which is used to
    set column property values such as `label` and `description`. Add these functions
    inside the `NutritioninfoItem` class:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个类中的最后一个方法是`propertyDefinitions()`，用于设置列属性值，例如`label`和`description`。将这些函数添加到`NutritioninfoItem`类中：
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, our `NutritioninfoItem.php` code looks as shown here: [https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php).'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们的`NutritioninfoItem.php`代码如下所示：[https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php)。
- en: 'Next, we need to tell Drupal how to handle our compound field on the node edit
    form. In Drupal 7, we have `hook_field_widget_info` for making Drupal aware of
    our custom widget, and then `hook_field_widget_form` for actually adding the form
    components to the node form. In Drupal 8, field widgets have become plugins. Now,
    we are going to add the `FieldWidget/NutritioninfoDefaultWidget.php` file in the
    `/modules/nutritioninfo/src/Plugin/Field/FieldWidget` folder. And the file looks
    like this without any methods:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉Drupal如何在节点编辑表单上处理我们的复合字段。在Drupal 7中，我们有`hook_field_widget_info`来让Drupal了解我们的自定义小部件，然后是`hook_field_widget_form`来实际将表单组件添加到节点表单中。在Drupal
    8中，字段小部件已成为插件。现在，我们将把`FieldWidget/NutritioninfoDefaultWidget.php`文件添加到`/modules/nutritioninfo/src/Plugin/Field/FieldWidget`文件夹中。文件看起来如下，没有任何方法：
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `FieldItemListInterface` interface is for fields, being lists of field items.
    This interface must be implemented by every entity field, whereas contained field
    items must implement `FieldItemInterface`. Moreover, `FormStateInterface` provides
    an interface for an object containing the current state of a form. It will be
    used to store information related to the processed data in the form.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FieldItemListInterface`接口用于字段，是字段项的列表。每个实体字段都必须实现此接口，而包含的字段项必须实现`FieldItemInterface`。此外，`FormStateInterface`提供了一个包含表单当前状态的接口。它将用于存储与表单中处理的数据相关的信息。'
- en: Here, the `@FieldWidget` annotation registers the `nutritioninfo_default` widget.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`@FieldWidget`注解注册了`nutritioninfo_default`小部件。
- en: 'Next, we need to add the `formElement()` function. In this function, form elements
    will be added, which are displayed in the node edit/add form for the nutrition
    field. We are taking one form element to understand:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加`formElement()`函数。在这个函数中，将添加表单元素，这些元素将在节点编辑/添加表单中显示营养字段。我们用一个表单元素来理解：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is the calories `textfield`. It will display as a `textfield` while editing/adding
    the form. The `formElement()`function''s code looks like this:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是卡路里`textfield`。在编辑/添加表单时，它将显示为`textfield`。`formElement()`函数的代码如下：
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The full file, `NutritioninfoDefaultWidget.php`, looks as shown here: [https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php).'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的文件，`NutritioninfoDefaultWidget.php`，看起来如下所示：[https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php).
- en: 'Now, we need to format our compound field when displaying a content item. In
    Drupal 7, we used the `hook_ field_formatter_info` and `hook_field_formatter_view`
    hooks. Now in Drupal 8, these hooks are used as plugins. We are going to add the
    `NutritioninfoDefaultFormatter.php` file in the `/modules/nutritioninfo/src/Plugin/Field/FieldFormatter`
    folder. And the code looks like this without any methods:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在显示内容项时格式化我们的复合字段。在Drupal 7中，我们使用了`hook_field_formatter_info`和`hook_field_formatter_view`钩子。现在在Drupal
    8中，这些钩子被用作插件。我们将把`NutritioninfoDefaultFormatter.php`文件添加到`/modules/nutritioninfo/src/Plugin/Field/FieldFormatter`文件夹中。代码如下，没有任何方法：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, the `@FieldFormatter` annotation is registering the `nutritioninfo` formatter.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`@FieldFormatter`注解正在注册`nutritioninfo`格式化器。
- en: 'Next, we need to add the `viewElements()` function. This builds a renderable
    array for table theme markup. The `viewElements()` function''s code looks as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加`viewElements()`函数。这个函数构建了一个可渲染的数组，用于表格主题标记。`viewElements()`函数的代码如下：
- en: '[PRE11]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code of the full `NutritioninfoDefaultFormatter.php` file is shown here:
    [https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php](https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的`NutritioninfoDefaultFormatter.php`文件的代码如下所示：[https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php](https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php).
- en: All right, now it's time to enable our new module. Open up your d8dev Drupal
    site in your favorite browser, and click on the **Modules** link in the **Admin**
    toolbar. Search for `Nutrition` and check the checkbox next to your new **Nutrition
    Information** field module:![Time for action – developing a custom module for
    a compound NutritionInformation field](img/4659_04_02.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在是我们启用新模块的时候了。在你的浏览器中打开你的d8dev Drupal站点，点击**管理**工具栏中的**模块**链接。搜索`Nutrition`，并勾选你新创建的**营养信息**字段模块旁边的复选框：![操作时间
    – 开发用于复合NutritionInformation字段的自定义模块](img/4659_04_02.jpg)
- en: Finally, scroll to the bottom of the page and click on the **I****nstall** button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，滚动到页面底部并点击**安装**按钮。
- en: '*What just happened?*'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: That was some serious development. We created a fairly complex custom module,
    and now we have a field that offers a more complete Recipe content type. We used
    the Field Types API and created a new custom field, nutrition. In this process,
    we learned how to create FieldType, Field, and Field formatter, which are required
    for the nutrition field. We also learned about Drupal namespaces and how to use
    them in custom modules.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项相当复杂的发展。我们创建了一个相当复杂的自定义模块，现在我们有一个提供更完整食谱内容类型的字段。我们使用了字段类型API并创建了一个新的自定义字段，营养。在这个过程中，我们学习了如何创建FieldType、Field和Field
    formatter，这些都是营养字段所需的。我们还了解了Drupal命名空间以及如何在自定义模块中使用它们。
- en: Time for action – updating the Recipe content type to use the NutritionInformation
    field
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 更新食谱内容类型以使用NutritionInformation字段
- en: 'Now, let''s put our new module to use and add our new compound field to our
    Recipe content type, using our new custom `nutritioninfo` field for the `NutrionInformation`
    property of the [http://schema.org/Recipe](http://schema.org/Recipe) definition:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的新模块投入使用，并将我们的新复合字段添加到我们的食谱内容类型中，使用我们新的自定义`nutritioninfo`字段来为[http://schema.org/Recipe](http://schema.org/Recipe)定义的`NutrionInformation`属性：
- en: 'Go to the **Manage Fields** configuration page for the Recipe content type:
    `http://localhost/d7dev/admin/structure/types/ manage/recipe/fields`.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往食谱内容类型的**管理字段**配置页面：`http://localhost/d7dev/admin/structure/types/ manage/recipe/fields`。
- en: 'Now, add a new field with the following settings—**Label**: `nutrition`, **Name**:
    `field_nutrition_information`, and **Type**: `Nutrition Information` . Click on
    the **Save and continue** button:![Time for action – updating the Recipe content
    type to use the NutritionInformation field](img/4659_04_03.jpg)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个具有以下设置的新字段——**标签**：`nutrition`，**名称**：`field_nutrition_information`，**类型**：`Nutrition
    Information`。点击**保存并继续**按钮：![操作时间 – 更新食谱内容类型以使用NutritionInformation字段](img/4659_04_03.jpg)
- en: There is nothing to set for the field settings, so just click on the **Save
    field settings** button.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于字段设置没有需要设置的，所以只需点击**保存字段设置**按钮。
- en: Next, click on the **Find content** link in the **Shortcuts** toolbar, and click
    on the **Edit** link for the first Recipe content item in the list.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**快捷方式**工具栏中的**查找内容**链接，然后点击列表中第一个食谱内容项的**编辑**链接。
- en: Towards the bottom of the node edit form, you will see inputs for our new compound
    field.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在节点编辑表单的底部，你会看到我们新复合字段的一些输入。
- en: '*What just happened?*'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We completed the development of a new module. It will create a nutrition field
    programmatically, which will display the data in a specific format as required.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了新模块的开发。它将程序性地创建一个营养字段，并将数据以所需的具体格式显示。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we developed a custom compound field module based on the microdata
    specification at [http://schema.org/NutritionInformation](http://schema.org/NutritionInformation),
    allowing us to enhance our Recipe content type. However, at this point, our Nutrition
    Information field module is still a bit rough around the edges.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们基于[http://schema.org/NutritionInformation](http://schema.org/NutritionInformation)的微数据规范开发了一个自定义复合字段模块，使我们能够增强我们的食谱内容类型。然而，到目前为止，我们的营养信息字段模块仍然有些粗糙。
- en: In the next chapter, we will introduce some more code examples, and clean up
    some of those rough edges.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些更多的代码示例，并清理一些那些粗糙的边缘。
