- en: Chapter 4. Introduction to the Field Types API and Developing the Custom Field
    Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the last chapter, we learned how to use views and about configuration management.
    Now let''s understand more about the Field Types API and how to use it to develop
    custom field modules.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating field types, widgets, and formatters using field APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing custom field modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the NutritionInformation module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, one of the [http://schema.org/Recipe](http://schema.org/Recipe)
    properties that we did not include with our Drupal Recipe content type is the
    `NutritionInformation` property. The reason for this is that the `NutritionInformation`
    property is itself an `itemType` from [http://schema.org](http://schema.org),
    and as such is made up of a number of its own individual properties. In order
    to add `NutritionInformation` to our custom Recipe content type, we will need
    to create a custom Drupal compound field module that is based on the specification
    at [http://schema.org/NutritionInformation](http://schema.org/NutritionInformation).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing a custom module for a compound NutritionInformation
    field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rather than adding the code to create this compound field to our existing module,
    we are going to create a new module, as it is possible that it is something that
    could be useful to the Drupal community as a whole, and we may want to eventually
    contribute it to Drupal ([https://www.drupal.org/](https://www.drupal.org/)).
    We need to create a compound field that consists of several different form elements
    (a select number and several text fields). We can now have a basic compound field
    in three basic steps: first is defining the field (info and schema), second is
    defining the field form (widget), and then comes defining the output (formatter).
    All of these steps are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: In Phpstorm, create a new folder named `nutritioninfo` in the `/modules/custom`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `nutritioninfo.module` and `nutritioninfo.info.yml` files with the
    same name as the folder—`nutritioninfo`. Create the templates `src/Plugin/Field`
    folders and you should have a folder structure that looks similar to the following
    screenshot:![Time for action – developing a custom module for a compound NutritionInformation
    field](img/4659_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open the `nutrtioninfo.info` file and add the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Drupal 7, the `hook_field_schema` hook allows us to define a database schema
    for storing our custom field information. But in Drupal 8, field types changed
    to a plugin system ([https://www.drupal.org/node/2064123](https://www.drupal.org/node/2064123)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we are going to use the following code from the telephone core module
    (`/core/modules/telephone/src/Plugin/Field/FieldType/TelephoneItem.php`). We are
    only copying this file and changing to the `NutritioninfoItem.php` file. In the
    next step, we create the `/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`
    file and core `TelephoneItem.php` file, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we discussed in step 4, Drupal 8 introduced a plugin system. Most plugins
    in Drupal 8 use annotations to register themselves and describe their metadata.
    Here, `@FieldType` is the annotation it is registering to the `telephone` field
    type. The `schema` function holds columns and its properties such as `type` and
    `length`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `PropertyDefinitions` function is for setting column property values such
    as `label` and `description`. The `isEmpty` function determines whether the list
    contains any nonempty items.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drupal 8 implemented the PSR-4 standard for package-based PHP namespace auto-loading
    by the PHP Framework. Each module has a namespace that corresponds to its module
    name (`namespace Drupal\telephone\Plugin\Field\FieldType`). In our module, it
    should be `namespace Drupal\nutritioninfo\Plugin\Field\FieldType`. And the module''s
    namespace is mapped to the `./src/` folder in the module directory. Classes and
    interfaces with a backslash (`\`) inside their fully qualified name (for example,
    use `Drupal\Core\Field\FieldItemBase;`) must not use their fully qualified name
    inside the code. If the namespace differs from the namespace of the current file,
    put a `use` statement at the top of the file. Here is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are going create the `/modules/nutritioninfo/src/Plugin/Field/FieldType/NutritioninfoItem.php`
    file. We need to add the `NutritioninfoItem` class. The `NutritioninfoItem.php`
    code looks as follows without any methods added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `@FieldType` annotation registers the `nutritioninfo` field type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to add schema columns in the `schema` function. In `TelephoneItem`,
    we have only one column value. But in `NutritioninfoItem`, there are 12 columns
    need to be added. So that `schema` function looks as follows. Add these functions
    inside the `NutritioninfoItem` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to add the `isEmpty()` function. This determines whether the
    list contains any nonempty items. Add these functions inside the `NutritioninfoItem`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last method in this class is `propertyDefinitions()`, which is used to
    set column property values such as `label` and `description`. Add these functions
    inside the `NutritioninfoItem` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, our `NutritioninfoItem.php` code looks as shown here: [https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldType/NutritioninfoItem.php).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to tell Drupal how to handle our compound field on the node edit
    form. In Drupal 7, we have `hook_field_widget_info` for making Drupal aware of
    our custom widget, and then `hook_field_widget_form` for actually adding the form
    components to the node form. In Drupal 8, field widgets have become plugins. Now,
    we are going to add the `FieldWidget/NutritioninfoDefaultWidget.php` file in the
    `/modules/nutritioninfo/src/Plugin/Field/FieldWidget` folder. And the file looks
    like this without any methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FieldItemListInterface` interface is for fields, being lists of field items.
    This interface must be implemented by every entity field, whereas contained field
    items must implement `FieldItemInterface`. Moreover, `FormStateInterface` provides
    an interface for an object containing the current state of a form. It will be
    used to store information related to the processed data in the form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, the `@FieldWidget` annotation registers the `nutritioninfo_default` widget.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to add the `formElement()` function. In this function, form elements
    will be added, which are displayed in the node edit/add form for the nutrition
    field. We are taking one form element to understand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the calories `textfield`. It will display as a `textfield` while editing/adding
    the form. The `formElement()`function''s code looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full file, `NutritioninfoDefaultWidget.php`, looks as shown here: [https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php](https://raw.githubusercontent.com/valuebound/nutritioninfo/master/src/Plugin/Field/FieldWidget/NutritioninfoDefaultWidget.php).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to format our compound field when displaying a content item. In
    Drupal 7, we used the `hook_ field_formatter_info` and `hook_field_formatter_view`
    hooks. Now in Drupal 8, these hooks are used as plugins. We are going to add the
    `NutritioninfoDefaultFormatter.php` file in the `/modules/nutritioninfo/src/Plugin/Field/FieldFormatter`
    folder. And the code looks like this without any methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `@FieldFormatter` annotation is registering the `nutritioninfo` formatter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to add the `viewElements()` function. This builds a renderable
    array for table theme markup. The `viewElements()` function''s code looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The code of the full `NutritioninfoDefaultFormatter.php` file is shown here:
    [https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php](https://github.com/valuebound/nutritioninfo/blob/master/src/Plugin/Field/FieldFormatter/NutritioninfoDefaultFormatter.php).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All right, now it's time to enable our new module. Open up your d8dev Drupal
    site in your favorite browser, and click on the **Modules** link in the **Admin**
    toolbar. Search for `Nutrition` and check the checkbox next to your new **Nutrition
    Information** field module:![Time for action – developing a custom module for
    a compound NutritionInformation field](img/4659_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, scroll to the bottom of the page and click on the **I****nstall** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That was some serious development. We created a fairly complex custom module,
    and now we have a field that offers a more complete Recipe content type. We used
    the Field Types API and created a new custom field, nutrition. In this process,
    we learned how to create FieldType, Field, and Field formatter, which are required
    for the nutrition field. We also learned about Drupal namespaces and how to use
    them in custom modules.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – updating the Recipe content type to use the NutritionInformation
    field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s put our new module to use and add our new compound field to our
    Recipe content type, using our new custom `nutritioninfo` field for the `NutrionInformation`
    property of the [http://schema.org/Recipe](http://schema.org/Recipe) definition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Manage Fields** configuration page for the Recipe content type:
    `http://localhost/d7dev/admin/structure/types/ manage/recipe/fields`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add a new field with the following settings—**Label**: `nutrition`, **Name**:
    `field_nutrition_information`, and **Type**: `Nutrition Information` . Click on
    the **Save and continue** button:![Time for action – updating the Recipe content
    type to use the NutritionInformation field](img/4659_04_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is nothing to set for the field settings, so just click on the **Save
    field settings** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Find content** link in the **Shortcuts** toolbar, and click
    on the **Edit** link for the first Recipe content item in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Towards the bottom of the node edit form, you will see inputs for our new compound
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We completed the development of a new module. It will create a nutrition field
    programmatically, which will display the data in a specific format as required.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we developed a custom compound field module based on the microdata
    specification at [http://schema.org/NutritionInformation](http://schema.org/NutritionInformation),
    allowing us to enhance our Recipe content type. However, at this point, our Nutrition
    Information field module is still a bit rough around the edges.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce some more code examples, and clean up
    some of those rough edges.
  prefs: []
  type: TYPE_NORMAL
