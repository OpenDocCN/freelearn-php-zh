- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up Our Development Environment Using Docker Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*It works on my machine*” is a phrase you’ve probably heard as a software developer;
    you might even have said it yourself as well. I’m sure I did! And to be fair,
    my colleague Ben Hansen, who was our test automation engineer at that time, also
    pointed out that he’s also allowed to say, “*It doesn’t work on my machine*” in
    response to us developers. As a developer myself, I’ve had my fair share of frustrating
    experiences caused by running the same PHP application across different environments
    with inconsistent server setups. There were times in my career when I struggled
    to replicate some production environment bugs from my local development machine.
    We would find out that the PHP application we were developing would be deployed
    in staging or production on a different operating system with various libraries
    installed, which were out of sync with the developers’ development environment
    setups. It was a nightmare!
  prefs: []
  type: TYPE_NORMAL
- en: When we develop PHP applications, we need to ensure that the applications we
    develop behave consistently across different deployment environments such as staging
    or production. Also, when a new developer joins your team, it’s great if they
    can set up their local development environments on their development machines
    easily and quickly. **Containers** can help solve these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: In our example project, we will need a development environment to run our PHP
    application consistently wherever we deploy it. If our PHP tests and applications
    pass and run properly from our local machines, they should also pass and run correctly
    when we deploy them.
  prefs: []
  type: TYPE_NORMAL
- en: We will go through the concept of containers and define what they are. We will
    learn how to create a Docker image and run Docker containers. Docker containers
    will help us easily package our application, making it easy to run our application
    in other server environments more consistently.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will define and cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a container?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our PHP development container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to have access to *Bash*. If you are using a Mac or
    Linux OS, you can just use *terminal*. If you’re on a Windows OS, you will need
    to install a third-party Bash program.
  prefs: []
  type: TYPE_NORMAL
- en: For the instructions defined in this chapter, you can experiment with the complete
    Docker setup found in [*Chapter 3*](B18318_03.xhtml#_idTextAnchor039) Git repository
    at [https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203](https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/tree/main/Chapter%203).
  prefs: []
  type: TYPE_NORMAL
- en: Quick Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the complete development setup with Docker containers for this chapter,
    in a macOS development machine, follow the instructions in this chapter to install
    Docker Desktop, and then simply run the following command from your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is a container?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A container is a packaging solution that will contain all the software dependencies
    that your application needs to run correctly. Different container platforms are
    available, but we will be using Docker in this book. We will be using Docker to
    build and run our containers for our example project.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is an open source containerization solution that will enable us to package
    our PHP solution and run it on different development machines and deployment environments,
    including our **continuous integration (CI) solution**, which will be discussed
    more in [*Chapter 9*](B18318_09.xhtml#_idTextAnchor138), *Continuous Integration*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined what containers are and the containerization solution
    we will be using for our project, let’s start setting up our development containers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our PHP development container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need a development environment for our PHP application. We will be
    separating our development environment structure into two main parts: the Docker
    container (server) and the PHP application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `docker` directory will contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose.yml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `codebase` directory will serve as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The root directory for our PHP application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vendor directory for composer packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us set up our PHP development container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following directory structure in your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Base tree](img/Figure_3.2_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Base tree
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install **Docker Desktop**. Before we create the required Docker files, we will
    need to download and install Docker Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **macOS** users, Docker can be downloaded from [https://docs.docker.com/desktop/mac/install/](https://docs.docker.com/desktop/mac/install/).
  prefs: []
  type: TYPE_NORMAL
- en: For **Windows** users, the download link is https://docs.docker.com/desktop/windows/install/.
  prefs: []
  type: TYPE_NORMAL
- en: Once Docker Desktop has been installed on your macOS machine, we can now organize
    our development directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to create a `Dockerfile` within the `phptdd/docker/` directory.
    Create a `phptdd/docker/Dockerfile` file, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We declare the base Docker image in the first line using the `FROM` keyword.
    Every `Dockerfile` must start with this keyword. The second line is an instruction
    to run a command on top of the current image. Since we will also need a database
    for our project, we can install the **MySQL** extensions we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need more than just PHP for our example project: we will need a database,
    a web server, and other tools. Therefore, we need a way to run and organize multiple
    containers. Let’s see how to do that next.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run multiple containers, let’s use the Compose tool that is pre-installed
    when you install Docker Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `phptdd/docker/docker-compose.yml` file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `docker-compose.yml` file, we have declared and configured three main
    containers, which are all accessible through different ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '`server-web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app-phpmyadmin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We were able to install Docker Desktop and create the required `Dockerfile`
    and `docker-compose.yml` files that contain the template to build our containers.
    Let’s try running all the containers and make sure that they are configured correctly
    and can communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Running Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the two base Docker files that we need, let’s create an example
    PHP program that we can use to make sure that our containers are working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `phptdd/codebase/index.php` PHP file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, we have created three files and have the following directory
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Base files](img/Figure_3.3_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Base files
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through this directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dockerfile`: The file where we declared which base Docker image to use and
    added instructions to install MySQL extensions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker-compose.yml`: The file where we added configurations for the three
    base containers we want to run to serve as our **Linux Apache MySQL PHP** (**LAMP**)
    stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.php`: The test PHP file we created to test if the PHP application was
    able to connect to the MySQL container and show some details about the PHP server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before being able to run our containers, we need to build the main image that
    we need to run the containers first.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Docker image and running containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command to download the base image and build our Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It will take a few minutes to run on the first try. The command will pull the
    base image that we have declared inside the `Dockerfile` from the Docker repository,
    and it will also execute the `RUN` command we added in the second line of the
    `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the build is done, we can run the three containers we have configured
    by using the `docker-compose.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the command, you should see all three containers being created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Containers created](img/Figure_3.4_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Containers created
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see if the containers are running properly; run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the three containers we have created, and the status should
    indicate that they are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Containers are running](img/Figure_3.5_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Containers are running
  prefs: []
  type: TYPE_NORMAL
- en: We can see from the list in *Figure 3**.4* that the containers are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try to run the PHP test program we wrote: open a web browser and
    try to access [http://127.0.0.1:8081](http://127.0.0.1:8081). If you check the
    `docker-compose.yml` file, you will see we have declared that we want to route
    port `8081` from your host machine to port `80` of the container. You will also
    be able to see the port routing for running containers using the `docker ps -``a`
    command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a `server-web` container is connected to the `server-mysql`
    container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Test script: successful PHP to MySQL connection and PHP info](img/Figure_3.6_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5 – Test script: successful PHP to MySQL connection and PHP info'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also configured the third container to serve our `phpMyAdmin` application;
    this is entirely optional. Using your web browser, go to `http://127.0.0.1:3333`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – phpMyAdmin screen](img/Figure_3.7_B18318.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – phpMyAdmin screen
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the **phpMyAdmin** main dashboard, with the default databases
    listed in the left column.
  prefs: []
  type: TYPE_NORMAL
- en: This is all looking good. The three containers we have configured are running
    correctly and are able to communicate and link to each other. We now have a basic
    development environment for our PHP application. Next, let’s try to stop the containers.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are times when you need to stop containers, such as when you want to reload
    new configurations, or if you just want to stop containers that you no longer
    need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop running containers, as well as remove their configurations, run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you try to check the status of the containers by running `docker ps`,
    you will see that our three containers are gone from the list. You can also use
    `docker kill <container_name>` to stop a specific container.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Docker and used it to create and run containers.
    Containers are instances of packaged applications. Although we have seen that
    containers are packages and isolated, they can also communicate with each other.
    For instance, our example PHP program is running inside the `server-web` container
    and then connects to the `server-mysql` container that runs our MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen how simple it is to launch containers. We have two PHP containers
    running (`server-web` and `app-phpmyadmin`) and one database container (`server-mysql`),
    and we can run more containers if we need to. We will be using the base containers
    we have created to build our PHP project; we will continue modifying our containers
    and will install more libraries and tools as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start building our base PHP application. We will
    try to go through the features and reasons why we decided to use PHP in the first
    place. We will be installing the **Laravel framework** to simplify the process
    of writing our solution so that we can focus more on **test-driven development**
    (**TDD**) itself and not on writing tons of bootstrap code.
  prefs: []
  type: TYPE_NORMAL
