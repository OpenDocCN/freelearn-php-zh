- en: Chapter 2. Model Bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding `Containable` to all models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting the bindings returned in a find
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying binding parameters for a find
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying binding conditions for a find
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the JOIN type of one-to-one associations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining multiple associations to the same model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding bindings on the fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter deals with one of the most important aspects of a CakePHP application:
    the relationship between models, also known as **model bindings** or **associations**.'
  prefs: []
  type: TYPE_NORMAL
- en: Being an integral part of any application's logic, it is of crucial importance
    that we master all aspects of how model bindings can be manipulated to get the
    data we need, when we need it.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we will go through a series of recipes that will show us
    how to change the way bindings are fetched, what bindings and what information
    from a binding is returned, how to create new bindings, and how to build hierarchical
    data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Containable to all models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Containable` behavior is a part of the CakePHP core, and is probably one
    of the most important behaviors we have to help us deal with model bindings.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all CakePHP applications will benefit from its functionalities, so in
    this recipe we see how to enable it for all models.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file named `app_model.php` and place it in your `app/` folder, with
    the following contents. If you already have one, make sure that either you add
    the `actsAs` property shown as follows, or that your `actsAs` property includes
    `Containable`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Containable` behavior is nothing more and nothing less than a wrapper around
    the `bindModel()` and `unbindModel()` methods, defined in the CakePHP's `Model`
    class. It is there to help us deal with the management of associations without
    having to go through a lengthy process of redefining all the associations when
    calling one of these methods, thus making our code much more readable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very important point, because a common mistake CakePHP users make
    is to think that `Containable` is involved in the query-making process, that is,
    during the stage where CakePHP creates actual SQL queries to fetch data.
  prefs: []
  type: TYPE_NORMAL
- en: '`Containable` saves us some unneeded queries, and optimizes the information
    that is fetched for each related model, but it will not serve as a way to change
    how queries are built in CakePHP.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Limiting the bindings returned in a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modifying binding parameters for a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modifying binding conditions for a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting the bindings returned in a find
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use `Containable` to specify what related models are
    returned as a result of a `find` operation. It also shows us how to limit which
    fields are obtained for each association.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe we need some sample tables to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table named `families`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `people`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `profiles`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `posts`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you do not want to add foreign key constraints to your tables, make
    sure you use KEYs for each field that is a reference to a record in another table.
    By doing so, you will significantly improve the speed of your SQL queries when
    the referenced tables are joined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add some sample data, using the following SQL statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need `Containable` added to all our models, so follow the recipe *Adding
    Containable to all models*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We proceed now to create the main model. Create a file named `person.php` and
    place it in your `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the model `Family` in a file named `family.php` and place it in your
    `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `Containable` is available for our models, we can add a setting to the
    `find` operation called `contain`. In that setting we specify, in an array-based
    hierarchy, the associated data we want returned. A special value `contain` can
    receive is `false`, or an empty array, which tells `Containable` not to return
    any associated data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to get the first `Person` record without associated data, we simply
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to tell CakePHP not to obtain related data is through the use of
    the `recursive` find setting. Setting `recursive` to `-1` will have exactly the
    same effect as setting `contain` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to obtain the first `Person` record together with the `Family` they
    belong to, we do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Using our sample data, the above query will result in the following array structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that now we also want to obtain all `Post` records for the person
    and all members in the family that `Person` belongs to. We would then have to
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The above would result in the following array structure (the `created` and
    `modified` fields have been removed for readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use `Containable` to specify which fields from a related model
    we want to fetch. Using the preceding sample, let''s limit the `Post` fields so
    we only return the `title` and the `Person` records for the person''s `Family`,
    so we only return the `name` field. We do so by adding the name of the field to
    the associated model hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned data structure will then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that even when we indicated specific fields for the `Family =>
    Person` binding, and for the `Post` binding, there are some extra fields being
    returned. Those fields (such as `family_id`) are needed by CakePHP, and known
    as foreign key fields, to fetch the associated data, so `Containable` is smart
    enough to include them in the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us say that we also want a person''s e-mail. As there is more than a field
    needed, we will need to use the array notation, using the `fields` setting to
    specify the list of fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use the `contain` find setting to specify what type of containment we want
    to use for the find operation. That containment is given as an array, where the
    array hierarchy mimics that of the model relationships. As the hierarchy can get
    deep enough to make array notation complex to deal with, the dot notation used
    throughout this recipe serves as an useful and more readable alternative.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to refer to the model `Person` that belongs to the model `Family`,
    the proper `contain` syntax for that is `Person => Family` (we can also use `Person.Family`,
    which is more concise.)
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `fields` setting to specify which fields we want fetched for
    a binding. We do that by specifying an array of field names as part of the binding
    `Containable` setting.
  prefs: []
  type: TYPE_NORMAL
- en: '`Containable` looks for the `contain` find setting right before we issue a
    find operation on a model. If it finds one, it alters the model bindings to be
    returned by issuing `unbindModel()` calls on the appropriate models to unbind
    those relationships that are not specified in the `contain` find setting. It then
    sets the `recursive` find setting to the minimum value required to fetch the associated
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us use a practical example to further understand this wrapping process.
    Using our `Person` model (which has a `belongsTo` relationship to `Family`, a
    `hasOne` relationship to `Profile`, and a `hasMany` relationship to `Post)`, the
    following `Containable` based query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'or the same query using array notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'is equivalent to the following set of instructions, which do not use `Containable`,
    but the built in `unbindModel()` method available in CakePHP''s `Model` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Not using `Containable` is not only much more complicated, but can also pose
    a problem if we decide to alter some of our relationships. In the preceding example,
    if we decide to remove the `Profile` binding, or change its relationship type,
    we would have to modify the `unbindModel()` call. However, if we are using `Containable`,
    the same code applies, without us having to worry about such changes.
  prefs: []
  type: TYPE_NORMAL
- en: Format of the contain find parameter
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We have seen how to use the `contain` find parameter to limit which bindings
    are returned after a `find` operation. Even when its format seems self-explanatory,
    let us go through another example to have a deeper understanding of `Containable''s`
    array notation. Assume that we have the models and relationships shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Format of the contain find parameter](img/1926OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Transforming that diagram to something the `Containable` behavior understands
    is as simple as writing it using an array structure. For example, if we are issuing
    a `find` operation on the `User` model and we want to refer to the `Profile` relationship,
    a simple `array('Profile')` expression would suffice, as the `Profile` model is
    directly related to the `User` model.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to refer to the `Comment` relationship for the `Article` records
    the `User` is an owner of, which belongs to an `Article` that itself belongs to
    our `User` model, then we add another dimension to the structure, which is now
    represented as `array('Article' => 'Comment')`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can already deduce how the next example will look like. Assume we want to
    obtain the `Comment` together with the `Profile` of the `User` that commented
    on each `Article`. The structure will then look like: `array(''Article'' => array(''Comment''
    => array(''User'' => ''Profile'')))`.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we want to simplify the readability, and fortunately the `Containable`
    behavior allows the above expression to be rewritten as `array('Article.Comment.User.Profile')`,
    which is known as dot notation. However, if you want to change other parameters
    to the binding, then this syntax would have to be changed to the full array-based
    expression (see section *See also* in this recipe).
  prefs: []
  type: TYPE_NORMAL
- en: Reset of binding changes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you issue a find operation that uses the `Containable` behavior to change
    some of its bindings, CakePHP will reset all bindings' changes to their original
    states, once the find is completed. This is what is normally wanted on most cases,
    but there are some scenarios where you want to keep your changes until you manually
    reset them, such as when you need to issue more than one find operation and have
    all those finds use the modified bindings.
  prefs: []
  type: TYPE_NORMAL
- en: 'To force our binding changes to be kept, we use the `reset` option in the `contain`
    find parameter, setting it to `false`. When we are ready to reset them, we issue
    a call to the `resetBindings()` method added by the `Containable` behavior to
    our model. The following sample code shows this procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to achieve the same result is by calling the `contain()` method
    (setting its first argument to the contained bindings, and its second argument
    to `false` to indicate that we wish to keep these containments), available to
    all models that use `Containable`, issue the find (without, need to use the `contain`
    setting), and then reset the bindings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Modifying binding parameters for a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modifying binding conditions for a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying binding parameters for a find
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use `Containable` to change some of the parameters
    that affect model bindings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, we need some sample tables to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table named `users`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `profiles`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `articles`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `Containable` behavior to all your models by following the recipe *Adding
    Containable to all models*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we need to create the main model. Create a file named `user.php` and place
    it in your `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we want to obtain the first `User` record together with the `Article` records
    that the `User` owns, but ordered by latest articles first, we use the `order`
    binding setting (we also use the `fields` setting to limit the fields returned
    for each `Article`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Using our sample data, the above query will result in the following array structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to get the same data, but make sure we only obtain the latest `Article`
    a `User` has written, we use the `limit` binding setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Using our sample data, the above query will result in the following array structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Another option that is useful on some scenarios is `offset`, applicable to the
    `hasMany` and `hasAndBelongsToMany` bindings. Using the example above, we now
    want to obtain the two most recent articles a `User` created, after the latest
    `Article`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned data structure now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Containable` behavior uses the built-in `bindModel()` method defined in
    CakePHP's `Model` class to alter the binding settings defined in the `contain`
    find setting.
  prefs: []
  type: TYPE_NORMAL
- en: It goes through the defined bindings and checks to see whether there are defined
    binding settings. If there are, it passes them to the `bindModel()` method for
    each of the specified bindings.
  prefs: []
  type: TYPE_NORMAL
- en: Some binding settings make sense only on some relationship types. For example,
    the `limit` setting used previously would not be useful on `belongsTo` or `hasOne`
    relationships.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list includes which settings can be specified for each relationship
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`belongsTo: className, conditions, foreignKey, order`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hasOne: className, conditions, foreignKey, order`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hasMany: className, conditions, finderQuery, foreignKey, limit, offset, order`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hasAndBelongsToMany: associationForeignKey, className, conditions, deleteQuery,
    finderQuery, foreignKey, insertQuery, joinTable, limit, offset, order, unique,
    with`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Modifying binding conditions for a find*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying binding conditions for a find
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use `Containable` to change the conditions used to
    fetch data related to a model through a binding.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to have `Containable` added to our models, and we also need some sample
    models and data to work with. Follow the recipe, *Adding Containable to all models*,
    and the *Getting ready* section of the recipe, *Modifying binding parameters for
    a find*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to obtain the first `User` record together with the published `Article`
    records that user owns, but ordered by latest articles first, and limiting some
    of the returned fields, we use the `conditions` binding setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Using our sample data, the preceding query will result in the following array
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The conditions binding setting is another binding parameter, such as those shown
    in the recipe, *Modifying binding parameters for a find*. As such, the `Containable`
    behavior uses the built-in `bindModel()` method defined in CakePHP's `Model` class
    to alter the binding conditions defined in the `contain` find operation.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the JOIN type of one-to-one associations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are querying a model that has other associated models, CakePHP will
    issue a new query to fetch the associated data, or use a `LEFT JOIN` SQL statement
    if the associated model has a one-to-one relationship with the main model (through
    a binding defined with `belongsTo` or `hasOne`.)
  prefs: []
  type: TYPE_NORMAL
- en: However there are times where we need to change the join type for one-to-one
    associations, to use either a `RIGHT JOIN` or an `INNER JOIN`. This recipe shows
    us how to change the join type for `belongsTo` and `hasOne` associations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the *Getting ready* section of the recipe, *Limiting the bindings returned
    in a find*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `Person` model, and change the binding definitions for `belongsTo`
    and `hasOne` associations, as shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we add bindings to a model, we can pass an array of settings to the binding
    definition to configure different aspects of the binding. One of those settings
    is `type`, only applicable to `belongsTo` and `hasOne` bindings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `type` setting allows us to define what type of `JOIN` CakePHP will use
    when fetching the associated model (only when querying the main model.) The available
    `JOIN` types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`INNER JOIN`: Joins and only returns records from associated models that match
    the default join condition. When a binding is set to use this join type, only
    records that have a record for the binding will be returned. In the example above,
    only `Person` records that belong to a `Family` will be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LEFT JOIN`: This is the default join type used by CakePHP. All records are
    returned even if there is no record for the binding. In the example above, if
    the `Family` binding type is set to `LEFT`, then `Person` records will be returned
    even if they don''t belong to a `Family`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RIGHT JOIN`: The opposite of `LEFT JOIN`, shows all records from the related
    model even if they are not related to the main model, and shows only records in
    the main model that are linked to the related model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining multiple associations to the same model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to set up more than one association from one model to
    the same model, a need that normally arises on most applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe we need some sample tables to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table named `addresses`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table named `users`, using the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some sample data, using the following SQL statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to create the main model. Create a file named `user.php` and place
    it in your `app/models` folder with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Edit the `User` model, and add the binding definitions to include both references
    to the `Address` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If we issue a find operation to fetch the `User`, we would obtain the following
    data structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, the naming convention we used for the bindings is the standard
    CakePHP uses for field names, where each uppercase letter is prefixed by an underscore
    sign, everything is converted to lowercase, and the suffix `_id` is added. Thus,
    the standard field name the binding named `BillingAddress` is `billing_address_id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However there are times where we need to use a field name that does not comply
    with this standard. In that case, we can use the `foreignKey` binding setting
    to specify the field name. For example, we could change the `User` model definition
    so the name of the `HomeAddress` becomes `Address`, which would make the `User`
    model look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we use different aliases to refer to the same model, certain model callback
    implementations, such as `beforeSave`, will need to be changed to avoid using
    the name of the model directly, and instead use the property `alias`, available
    in all models. More information about this can be obtained from Nick Baker's article
    available at [http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases](http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases).
  prefs: []
  type: TYPE_NORMAL
- en: Adding bindings on the fly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to set up new bindings right before a find operation,
    including bindings that are automatically removed after the operation is executed,
    and bindings that are permanently added.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need some sample models and data to work with. Follow the *Getting ready*
    section of the recipe, *Modifying binding parameters for a find*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to obtain the latest published `Article` when we are fetching a `User`,
    we could add a permanent binding to the `User` model. However, if we want to do
    this on a need-by-need basis, it is smarter to add the binding before the find
    operation that needs it, thus avoiding the unneeded overhead for other operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the needed binding and then issue the `find` operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code would give us the following data structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to make the binding permanent until the request ends, but without
    adding the binding to the `User` model, we simply add the value `false` as a second
    parameter to the `bindModel()` call (this is needed if the operation is a `paginate
    ()` call, as this call will issue two `find` operations):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you issue a `bindModel()` call, CakePHP will add the binding as if you
    specified it on the model itself. If you did not set the second parameter to the
    method as `false`, that binding will be automatically removed after the `find`
    operation is completed. If you did set it in order to avoid the reset, then it
    will be kept until the script instance of your application is finished.
  prefs: []
  type: TYPE_NORMAL
- en: The format to specify bindings through `bindModel()` is an array, indexed by
    the binding type (one of `belongsTo, hasOne, hasMany`, and `hasAndBelongsToMany`),
    whose value for each binding type is an array of associations.
  prefs: []
  type: TYPE_NORMAL
- en: You define each association (as you would normally do) in the model, indexing
    it by association name (if it is different than the model's name it is pointing
    to or if you have binding parameters to define), or, optionally, simply referring
    to the related model.
  prefs: []
  type: TYPE_NORMAL
