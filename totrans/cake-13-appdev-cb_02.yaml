- en: Chapter 2. Model Bindings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 模型绑定
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Adding `Containable` to all models
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `Containable` 添加到所有模型中
- en: Limiting the bindings returned in a find
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制查找中返回的绑定
- en: Modifying binding parameters for a find
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改查找的绑定参数
- en: Modifying binding conditions for a find
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改查找的绑定条件
- en: Changing the JOIN type of one-to-one associations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变一对一关联的 JOIN 类型
- en: Defining multiple associations to the same model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义对同一模型的多个关联
- en: Adding bindings on the fly
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态添加绑定
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'This chapter deals with one of the most important aspects of a CakePHP application:
    the relationship between models, also known as **model bindings** or **associations**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了 CakePHP 应用程序最重要的一个方面：模型之间的关系，也称为 **模型绑定** 或 **关联**。
- en: Being an integral part of any application's logic, it is of crucial importance
    that we master all aspects of how model bindings can be manipulated to get the
    data we need, when we need it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为任何应用程序逻辑的组成部分，掌握如何操纵模型绑定以获取我们所需数据、所需时刻的所有方面至关重要。
- en: In order to do so, we will go through a series of recipes that will show us
    how to change the way bindings are fetched, what bindings and what information
    from a binding is returned, how to create new bindings, and how to build hierarchical
    data structures.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将通过一系列食谱来展示如何改变绑定获取的方式，哪些绑定和哪些绑定信息被返回，如何创建新的绑定，以及如何构建层次数据结构。
- en: Adding Containable to all models
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Containable 添加到所有模型中
- en: The `Containable` behavior is a part of the CakePHP core, and is probably one
    of the most important behaviors we have to help us deal with model bindings.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Containable` 行为是 CakePHP 核心的一部分，可能是我们用来处理模型绑定的最重要的行为之一。'
- en: Almost all CakePHP applications will benefit from its functionalities, so in
    this recipe we see how to enable it for all models.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有 CakePHP 应用程序都将受益于其功能，因此在这个食谱中，我们展示了如何为所有模型启用它。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a file named `app_model.php` and place it in your `app/` folder, with
    the following contents. If you already have one, make sure that either you add
    the `actsAs` property shown as follows, or that your `actsAs` property includes
    `Containable`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `app_model.php` 的文件，并将其放置在您的 `app/` 文件夹中，内容如下。如果您已经有了这样的文件，请确保您添加了以下所示的
    `actsAs` 属性，或者您的 `actsAs` 属性包含了 `Containable`。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Containable` behavior is nothing more and nothing less than a wrapper around
    the `bindModel()` and `unbindModel()` methods, defined in the CakePHP's `Model`
    class. It is there to help us deal with the management of associations without
    having to go through a lengthy process of redefining all the associations when
    calling one of these methods, thus making our code much more readable and maintainable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Containable` 行为不过是 `bindModel()` 和 `unbindModel()` 方法的包装，这些方法定义在 CakePHP 的
    `Model` 类中。它的目的是帮助我们处理关联管理，而无需在调用这些方法时重新定义所有关联的繁琐过程，从而使我们的代码更加可读和可维护。'
- en: This is a very important point, because a common mistake CakePHP users make
    is to think that `Containable` is involved in the query-making process, that is,
    during the stage where CakePHP creates actual SQL queries to fetch data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常重要的观点，因为 CakePHP 用户常犯的一个错误是认为 `Containable` 参与了查询制作过程，即在 CakePHP 创建实际
    SQL 查询以获取数据的过程中。
- en: '`Containable` saves us some unneeded queries, and optimizes the information
    that is fetched for each related model, but it will not serve as a way to change
    how queries are built in CakePHP.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Containable` 为我们节省了一些不必要的查询，并优化了为每个相关模型获取的信息，但它不会作为改变 CakePHP 中查询构建方式的方法。'
- en: See also
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Limiting the bindings returned in a find*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*限制查找中返回的绑定*'
- en: '*Modifying binding parameters for a find*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改查找的绑定参数*'
- en: '*Modifying binding conditions for a find*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改查找的绑定条件*'
- en: Limiting the bindings returned in a find
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制查找中返回的绑定
- en: This recipe shows how to use `Containable` to specify what related models are
    returned as a result of a `find` operation. It also shows us how to limit which
    fields are obtained for each association.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何使用 `Containable` 来指定 `find` 操作的结果中返回哪些相关模型。它还展示了如何限制每个关联获取的字段。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe we need some sample tables to work with.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一些样本表来操作。
- en: 'Create a table named `families`, using the following SQL statement:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句创建一个名为 `families` 的表：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a table named `people`, using the following SQL statement:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句创建一个名为 `people` 的表：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a table named `profiles`, using the following SQL statement:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句创建一个名为`profiles`的表：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a table named `posts`, using the following SQL statement:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句创建一个名为`posts`的表：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if you do not want to add foreign key constraints to your tables, make
    sure you use KEYs for each field that is a reference to a record in another table.
    By doing so, you will significantly improve the speed of your SQL queries when
    the referenced tables are joined.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使您不想为表添加外键约束，也请确保为每个引用另一个表中的记录的字段使用KEY。通过这样做，当引用的表被连接时，您将显著提高SQL查询的速度。
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些样本数据，使用以下SQL语句：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need `Containable` added to all our models, so follow the recipe *Adding
    Containable to all models*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将`Containable`添加到所有我们的模型中，因此请遵循以下步骤*将Containable添加到所有模型*。
- en: 'We proceed now to create the main model. Create a file named `person.php` and
    place it in your `app/models` folder with the following contents:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在继续创建主模型。创建一个名为`person.php`的文件，并将其放置在您的`app/models`文件夹中，以下是其内容：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the model `Family` in a file named `family.php` and place it in your
    `app/models` folder with the following contents:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`family.php`的文件中创建模型`Family`，并将其放置在您的`app/models`文件夹中，以下是其内容：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: When `Containable` is available for our models, we can add a setting to the
    `find` operation called `contain`. In that setting we specify, in an array-based
    hierarchy, the associated data we want returned. A special value `contain` can
    receive is `false`, or an empty array, which tells `Containable` not to return
    any associated data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Containable`对我们的模型可用时，我们可以在`find`操作中添加一个名为`contain`的设置。在这个设置中，我们指定一个基于数组的层次结构，返回我们想要的相关数据。`contain`可以接收的特殊值是`false`或一个空数组，这告诉`Containable`不要返回任何相关数据。
- en: 'For example, to get the first `Person` record without associated data, we simply
    do:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要获取不带相关数据的第一个`Person`记录，我们只需这样做：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another way to tell CakePHP not to obtain related data is through the use of
    the `recursive` find setting. Setting `recursive` to `-1` will have exactly the
    same effect as setting `contain` to `false`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种让CakePHP不获取相关数据的方法是通过使用`recursive`查找设置。将`recursive`设置为`-1`将产生与将`contain`设置为`false`完全相同的效果。
- en: 'If we want to obtain the first `Person` record together with the `Family` they
    belong to, we do:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想获取第一个`Person`记录及其所属的`Family`，我们这样做：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using our sample data, the above query will result in the following array structure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的样本数据，上述查询将产生以下数组结构：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s say that now we also want to obtain all `Post` records for the person
    and all members in the family that `Person` belongs to. We would then have to
    do:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在我们还想获取属于`Person`的所有`Post`记录以及该`Person`所属家庭的成员的所有`Post`记录。那么我们就必须这样做：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above would result in the following array structure (the `created` and
    `modified` fields have been removed for readability):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作将产生以下数组结构（为了可读性，已移除`created`和`modified`字段）：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also use `Containable` to specify which fields from a related model
    we want to fetch. Using the preceding sample, let''s limit the `Post` fields so
    we only return the `title` and the `Person` records for the person''s `Family`,
    so we only return the `name` field. We do so by adding the name of the field to
    the associated model hierarchy:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`Containable`来指定从相关模型中获取哪些字段。使用前面的示例，让我们限制`Post`字段，以便我们只返回`title`和`Person`记录的`Family`的`name`字段。我们通过将字段名添加到关联模型层次结构中来实现这一点：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The returned data structure will then look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据结构将如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You may notice that even when we indicated specific fields for the `Family =>
    Person` binding, and for the `Post` binding, there are some extra fields being
    returned. Those fields (such as `family_id`) are needed by CakePHP, and known
    as foreign key fields, to fetch the associated data, so `Containable` is smart
    enough to include them in the query.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，即使我们为`Family => Person`绑定和`Post`绑定指明了特定的字段，仍然会返回一些额外的字段。这些字段（如`family_id`）是CakePHP需要的，被称为外键字段，用于获取相关数据，因此`Containable`足够智能，会将它们包含在查询中。
- en: 'Let us say that we also want a person''s e-mail. As there is more than a field
    needed, we will need to use the array notation, using the `fields` setting to
    specify the list of fields:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们还想获取一个人的电子邮件。由于需要多个字段，我们需要使用数组表示法，使用`fields`设置来指定字段列表：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We use the `contain` find setting to specify what type of containment we want
    to use for the find operation. That containment is given as an array, where the
    array hierarchy mimics that of the model relationships. As the hierarchy can get
    deep enough to make array notation complex to deal with, the dot notation used
    throughout this recipe serves as an useful and more readable alternative.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`contain`查找设置来指定我们想要在查找操作中使用哪种包含类型。这种包含类型以数组的形式给出，其中数组层次结构模仿模型关系。由于层次结构可能足够深，使得数组表示法难以处理，因此本食谱中使用的点表示法提供了一个有用且更易读的替代方案。
- en: If we want to refer to the model `Person` that belongs to the model `Family`,
    the proper `contain` syntax for that is `Person => Family` (we can also use `Person.Family`,
    which is more concise.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要引用属于`Family`模型的`Person`模型，该关系的正确`contain`语法是`Person => Family`（我们也可以使用`Person.Family`，这更简洁。）
- en: We also use the `fields` setting to specify which fields we want fetched for
    a binding. We do that by specifying an array of field names as part of the binding
    `Containable` setting.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`fields`设置来指定我们想要为绑定获取哪些字段。我们通过指定作为绑定`Containable`设置一部分的字段名数组来实现这一点。
- en: '`Containable` looks for the `contain` find setting right before we issue a
    find operation on a model. If it finds one, it alters the model bindings to be
    returned by issuing `unbindModel()` calls on the appropriate models to unbind
    those relationships that are not specified in the `contain` find setting. It then
    sets the `recursive` find setting to the minimum value required to fetch the associated
    data.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`Containable`在我们对一个模型执行查找操作之前寻找`contain`查找设置。如果找到，它通过在适当的模型上发出`unbindModel()`调用来更改模型绑定，以解除`contain`查找设置中未指定的那些关系的绑定。然后，它将`recursive`查找设置设置为获取关联数据所需的最小值。'
- en: 'Let us use a practical example to further understand this wrapping process.
    Using our `Person` model (which has a `belongsTo` relationship to `Family`, a
    `hasOne` relationship to `Profile`, and a `hasMany` relationship to `Post)`, the
    following `Containable` based query:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个实际例子来进一步理解这个包装过程。使用我们的`Person`模型（它具有与`Family`模型的`belongsTo`关系、与`Profile`模型的`hasOne`关系以及与`Post`模型的`hasMany`关系），以下基于`Containable`的查询：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'or the same query using array notation:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用数组表示法执行相同的查询：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'is equivalent to the following set of instructions, which do not use `Containable`,
    but the built in `unbindModel()` method available in CakePHP''s `Model` class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 等价于以下不使用`Containable`但使用 CakePHP 的`Model`类中内置的`unbindModel()`方法的指令集：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Not using `Containable` is not only much more complicated, but can also pose
    a problem if we decide to alter some of our relationships. In the preceding example,
    if we decide to remove the `Profile` binding, or change its relationship type,
    we would have to modify the `unbindModel()` call. However, if we are using `Containable`,
    the same code applies, without us having to worry about such changes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用`Containable`不仅更加复杂，而且如果我们决定更改一些关系，也可能引发问题。在前面的例子中，如果我们决定删除`Profile`绑定或更改其关系类型，我们就必须修改`unbindModel()`调用。然而，如果我们使用`Containable`，相同的代码适用，我们无需担心此类更改。
- en: Format of the contain find parameter
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 包含查找参数的格式
- en: 'We have seen how to use the `contain` find parameter to limit which bindings
    are returned after a `find` operation. Even when its format seems self-explanatory,
    let us go through another example to have a deeper understanding of `Containable''s`
    array notation. Assume that we have the models and relationships shown in the
    following diagram:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用`contain`查找参数来限制`find`操作之后返回的绑定。即使其格式看似不言自明，让我们再通过另一个例子来深入理解`Containable`的数组表示法。假设我们有以下图中显示的模型和关系：
- en: '![Format of the contain find parameter](img/1926OS_02_01.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![包含查找参数的格式](img/1926OS_02_01.jpg)'
- en: Transforming that diagram to something the `Containable` behavior understands
    is as simple as writing it using an array structure. For example, if we are issuing
    a `find` operation on the `User` model and we want to refer to the `Profile` relationship,
    a simple `array('Profile')` expression would suffice, as the `Profile` model is
    directly related to the `User` model.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将该图转换为`Containable`行为理解的内容，就像使用数组结构编写它一样简单。例如，如果我们正在对`User`模型执行`find`操作，并且想要引用`Profile`关系，一个简单的`array('Profile')`表达式就足够了，因为`Profile`模型直接与`User`模型相关。
- en: If we want to refer to the `Comment` relationship for the `Article` records
    the `User` is an owner of, which belongs to an `Article` that itself belongs to
    our `User` model, then we add another dimension to the structure, which is now
    represented as `array('Article' => 'Comment')`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要引用`Article`记录的`Comment`关系，该记录的`User`是所有者，并且属于一个属于我们`User`模型的`Article`，那么我们就在结构中添加另一个维度，现在它表示为`array('Article'
    => 'Comment')`。
- en: 'We can already deduce how the next example will look like. Assume we want to
    obtain the `Comment` together with the `Profile` of the `User` that commented
    on each `Article`. The structure will then look like: `array(''Article'' => array(''Comment''
    => array(''User'' => ''Profile'')))`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以预先推断出下一个示例将如何呈现。假设我们想要获取每个`Article`中评论的`User`的`Profile`和`Comment`。结构将如下所示：`array('Article'
    => array('Comment' => array('User' => 'Profile')))`。
- en: Sometimes we want to simplify the readability, and fortunately the `Containable`
    behavior allows the above expression to be rewritten as `array('Article.Comment.User.Profile')`,
    which is known as dot notation. However, if you want to change other parameters
    to the binding, then this syntax would have to be changed to the full array-based
    expression (see section *See also* in this recipe).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们想要简化可读性，幸运的是，`Containable`行为允许将上述表达式重写为`array('Article.Comment.User.Profile')`，这被称为点表示法。然而，如果你想要更改绑定的其他参数，那么这个语法将必须更改为基于完整数组的表达式（参见本配方中的*参见*部分）。
- en: Reset of binding changes
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绑定更改的重置
- en: When you issue a find operation that uses the `Containable` behavior to change
    some of its bindings, CakePHP will reset all bindings' changes to their original
    states, once the find is completed. This is what is normally wanted on most cases,
    but there are some scenarios where you want to keep your changes until you manually
    reset them, such as when you need to issue more than one find operation and have
    all those finds use the modified bindings.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发出一个使用`Containable`行为来改变一些其绑定的查找操作时，一旦查找完成，CakePHP将重置所有绑定的更改到它们原始状态。这在大多数情况下是通常想要的，但也有一些场景，你希望保留你的更改直到你手动重置它们，例如当你需要发出多个查找操作并且所有这些查找都使用修改后的绑定时。
- en: 'To force our binding changes to be kept, we use the `reset` option in the `contain`
    find parameter, setting it to `false`. When we are ready to reset them, we issue
    a call to the `resetBindings()` method added by the `Containable` behavior to
    our model. The following sample code shows this procedure:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强制我们的绑定更改被保留，我们在`contain`查找参数中使用`reset`选项，将其设置为`false`。当我们准备好重置它们时，我们发出对`Containable`行为为我们模型添加的`resetBindings()`方法的调用。以下示例代码显示了此过程：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Another way to achieve the same result is by calling the `contain()` method
    (setting its first argument to the contained bindings, and its second argument
    to `false` to indicate that we wish to keep these containments), available to
    all models that use `Containable`, issue the find (without, need to use the `contain`
    setting), and then reset the bindings:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实现相同结果的另一种方式是通过调用`contain()`方法（将其第一个参数设置为包含的绑定，并将其第二个参数设置为`false`以指示我们希望保留这些包含），这对于所有使用`Containable`的模型都是可用的，发出查找（无需使用`contain`设置），然后重置绑定：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: '*Modifying binding parameters for a find*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改查找的绑定参数*'
- en: '*Modifying binding conditions for a find*'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改查找的绑定条件*'
- en: Modifying binding parameters for a find
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改查找的绑定参数
- en: This recipe shows how to use `Containable` to change some of the parameters
    that affect model bindings.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何使用`Containable`来改变影响模型绑定的一些参数。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, we need some sample tables to work with.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个配方，我们需要一些示例表来工作。
- en: 'Create a table named `users`, using the following SQL statement:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句创建一个名为`users`的表：
- en: '[PRE21]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a table named `profiles`, using the following SQL statement:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句创建一个名为`profiles`的表：
- en: '[PRE22]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a table named `articles`, using the following SQL statement:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句创建一个名为`articles`的表：
- en: '[PRE23]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下SQL语句添加一些示例数据：
- en: '[PRE24]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Add the `Containable` behavior to all your models by following the recipe *Adding
    Containable to all models*.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过遵循配方*将Containable添加到所有模型*，将`Containable`行为添加到所有模型中。
- en: 'Now we need to create the main model. Create a file named `user.php` and place
    it in your `app/models` folder with the following contents:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建主模型。创建一个名为`user.php`的文件，并将其放置在`app/models`文件夹中，内容如下：
- en: '[PRE25]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'If we want to obtain the first `User` record together with the `Article` records
    that the `User` owns, but ordered by latest articles first, we use the `order`
    binding setting (we also use the `fields` setting to limit the fields returned
    for each `Article`):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取第一个`User`记录以及该`User`拥有的`Article`记录，但首先按最新文章排序，我们使用`order`绑定设置（我们还将使用`fields`设置来限制每个`Article`返回的字段）：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Using our sample data, the above query will result in the following array structure:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的示例数据，上述查询将导致以下数组结构：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we want to get the same data, but make sure we only obtain the latest `Article`
    a `User` has written, we use the `limit` binding setting:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取相同的数据，但确保我们只获取`User`最新写的一篇`Article`，我们使用`limit`绑定设置：
- en: '[PRE28]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using our sample data, the above query will result in the following array structure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的示例数据，上述查询将导致以下数组结构：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Another option that is useful on some scenarios is `offset`, applicable to the
    `hasMany` and `hasAndBelongsToMany` bindings. Using the example above, we now
    want to obtain the two most recent articles a `User` created, after the latest
    `Article`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下，另一个有用的选项是`offset`，适用于`hasMany`和`hasAndBelongsToMany`绑定。使用上面的示例，我们现在想要获取在最新`Article`之后的两个最新`User`创建的文章。
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The returned data structure now looks like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据结构现在看起来像这样：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Containable` behavior uses the built-in `bindModel()` method defined in
    CakePHP's `Model` class to alter the binding settings defined in the `contain`
    find setting.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Containable`行为使用在CakePHP的`Model`类中定义的内置`bindModel()`方法来更改在`contain`查找设置中定义的绑定设置。'
- en: It goes through the defined bindings and checks to see whether there are defined
    binding settings. If there are, it passes them to the `bindModel()` method for
    each of the specified bindings.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它会遍历定义的绑定，并检查是否存在定义的绑定设置。如果有，它将它们传递给每个指定绑定的`bindModel()`方法。
- en: Some binding settings make sense only on some relationship types. For example,
    the `limit` setting used previously would not be useful on `belongsTo` or `hasOne`
    relationships.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些绑定设置仅在某些关系类型上有意义。例如，之前使用的`limit`设置在`belongsTo`或`hasOne`关系上可能没有用。
- en: 'The following list includes which settings can be specified for each relationship
    type:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表包括可以为每种关系类型指定的设置：
- en: '`belongsTo: className, conditions, foreignKey, order`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`belongsTo: className, conditions, foreignKey, order`。'
- en: '`hasOne: className, conditions, foreignKey, order`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasOne: className, conditions, foreignKey, order`。'
- en: '`hasMany: className, conditions, finderQuery, foreignKey, limit, offset, order`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasMany: className, conditions, finderQuery, foreignKey, limit, offset, order`。'
- en: '`hasAndBelongsToMany: associationForeignKey, className, conditions, deleteQuery,
    finderQuery, foreignKey, insertQuery, joinTable, limit, offset, order, unique,
    with`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasAndBelongsToMany: associationForeignKey, className, conditions, deleteQuery,
    finderQuery, foreignKey, insertQuery, joinTable, limit, offset, order, unique,
    with`。'
- en: See also
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关内容
- en: '*Modifying binding conditions for a find*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*修改查找的绑定条件*'
- en: Modifying binding conditions for a find
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改查找的绑定条件
- en: This recipe shows how to use `Containable` to change the conditions used to
    fetch data related to a model through a binding.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方展示了如何使用`Containable`来更改通过绑定获取与模型相关数据时使用的条件。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need to have `Containable` added to our models, and we also need some sample
    models and data to work with. Follow the recipe, *Adding Containable to all models*,
    and the *Getting ready* section of the recipe, *Modifying binding parameters for
    a find*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`Containable`添加到我们的模型中，我们还需要一些示例模型和数据来工作。遵循配方，*将Containable添加到所有模型中*，以及配方中的*准备工作*部分，*修改查找的绑定参数*。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'If we want to obtain the first `User` record together with the published `Article`
    records that user owns, but ordered by latest articles first, and limiting some
    of the returned fields, we use the `conditions` binding setting:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取第一个`User`记录以及该用户拥有的已发布的`Article`记录，但首先按最新文章排序，并限制返回的字段，我们使用`conditions`绑定设置：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Using our sample data, the preceding query will result in the following array
    structure:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的示例数据，前面的查询将导致以下数组结构：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The conditions binding setting is another binding parameter, such as those shown
    in the recipe, *Modifying binding parameters for a find*. As such, the `Containable`
    behavior uses the built-in `bindModel()` method defined in CakePHP's `Model` class
    to alter the binding conditions defined in the `contain` find operation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 条件绑定设置是另一个绑定参数，如食谱中所示，*修改查找的绑定参数*。因此，`Containable` 行为使用 CakePHP 的 `Model` 类中定义的内置
    `bindModel()` 方法来更改 `contain` 查找操作中定义的绑定条件。
- en: Changing the JOIN type of one-to-one associations
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改一对一关联的 JOIN 类型
- en: When we are querying a model that has other associated models, CakePHP will
    issue a new query to fetch the associated data, or use a `LEFT JOIN` SQL statement
    if the associated model has a one-to-one relationship with the main model (through
    a binding defined with `belongsTo` or `hasOne`.)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查询具有其他关联模型的模型时，CakePHP 将发出新的查询以获取关联数据，或者如果关联模型与主模型（通过使用 `belongsTo` 或 `hasOne`
    定义的绑定）具有一对一关系，则使用 `LEFT JOIN` SQL 语句。
- en: However there are times where we need to change the join type for one-to-one
    associations, to use either a `RIGHT JOIN` or an `INNER JOIN`. This recipe shows
    us how to change the join type for `belongsTo` and `hasOne` associations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们需要更改一对一关联的 JOIN 类型，以使用 `RIGHT JOIN` 或 `INNER JOIN`。这个食谱展示了如何更改 `belongsTo`
    和 `hasOne` 关联的 JOIN 类型。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the *Getting ready* section of the recipe, *Limiting the bindings returned
    in a find*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 按照食谱中的 *准备工作* 部分，*限制查找中返回的绑定*。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit the `Person` model, and change the binding definitions for `belongsTo`
    and `hasOne` associations, as shown below:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `Person` 模型，并更改 `belongsTo` 和 `hasOne` 关联的绑定定义，如下所示：
- en: '[PRE34]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we add bindings to a model, we can pass an array of settings to the binding
    definition to configure different aspects of the binding. One of those settings
    is `type`, only applicable to `belongsTo` and `hasOne` bindings.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向模型添加绑定时，我们可以传递一个设置数组到绑定定义中，以配置绑定的不同方面。其中一个设置是 `type`，仅适用于 `belongsTo` 和
    `hasOne` 绑定。
- en: 'The `type` setting allows us to define what type of `JOIN` CakePHP will use
    when fetching the associated model (only when querying the main model.) The available
    `JOIN` types are:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`type` 设置允许我们定义 CakePHP 在获取关联模型时将使用哪种类型的 `JOIN`（仅在查询主模型时适用）。可用的 `JOIN` 类型有：'
- en: '`INNER JOIN`: Joins and only returns records from associated models that match
    the default join condition. When a binding is set to use this join type, only
    records that have a record for the binding will be returned. In the example above,
    only `Person` records that belong to a `Family` will be returned.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INNER JOIN`：连接并仅返回与默认连接条件匹配的关联模型的记录。当绑定设置为使用此连接类型时，只有具有绑定记录的记录将被返回。在上面的例子中，只有属于
    `Family` 的 `Person` 记录将被返回。'
- en: '`LEFT JOIN`: This is the default join type used by CakePHP. All records are
    returned even if there is no record for the binding. In the example above, if
    the `Family` binding type is set to `LEFT`, then `Person` records will be returned
    even if they don''t belong to a `Family`.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LEFT JOIN`：这是 CakePHP 使用的默认 JOIN 类型。即使没有绑定记录，也会返回所有记录。在上面的例子中，如果 `Family`
    绑定类型设置为 `LEFT`，则即使 `Person` 记录不属于 `Family`，也会返回 `Person` 记录。'
- en: '`RIGHT JOIN`: The opposite of `LEFT JOIN`, shows all records from the related
    model even if they are not related to the main model, and shows only records in
    the main model that are linked to the related model.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RIGHT JOIN`：`LEFT JOIN` 的对立面，即使它们与主模型没有关联，也会显示相关模型的全部记录，并且只显示与相关模型链接的主模型的记录。'
- en: Defining multiple associations to the same model
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义多个关联到同一模型
- en: This recipe shows how to set up more than one association from one model to
    the same model, a need that normally arises on most applications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何从一个模型设置多个关联到同一模型，这种需求通常在大多数应用程序中都会出现。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe we need some sample tables to work with.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，我们需要一些样本表来操作。
- en: 'Create a table named `addresses`, using the following SQL statement:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句创建一个名为 `addresses` 的表：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a table named `users`, using the following SQL statement:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句创建一个名为 `users` 的表：
- en: '[PRE36]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add some sample data, using the following SQL statements:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 SQL 语句添加一些样本数据：
- en: '[PRE37]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now we need to create the main model. Create a file named `user.php` and place
    it in your `app/models` folder with the following contents:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建主模型。创建一个名为 `user.php` 的文件，并将其放置在您的 `app/models` 文件夹中，内容如下：
- en: '[PRE38]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Edit the `User` model, and add the binding definitions to include both references
    to the `Address` model:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`User`模型，并添加绑定定义以包括对`Address`模型的引用：
- en: '[PRE39]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If we issue a find operation to fetch the `User`, we would obtain the following
    data structure:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发出一个查找操作来获取`User`，我们会得到以下数据结构：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There's more...
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this example, the naming convention we used for the bindings is the standard
    CakePHP uses for field names, where each uppercase letter is prefixed by an underscore
    sign, everything is converted to lowercase, and the suffix `_id` is added. Thus,
    the standard field name the binding named `BillingAddress` is `billing_address_id`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们用于绑定的命名约定是CakePHP用于字段名称的标准约定，其中每个大写字母都由一个下划线符号作为前缀，所有内容都转换为小写，并添加后缀`_id`。因此，绑定的标准字段名称`BillingAddress`是`billing_address_id`。
- en: 'However there are times where we need to use a field name that does not comply
    with this standard. In that case, we can use the `foreignKey` binding setting
    to specify the field name. For example, we could change the `User` model definition
    so the name of the `HomeAddress` becomes `Address`, which would make the `User`
    model look like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们需要使用不符合此标准的字段名称。在这种情况下，我们可以使用`foreignKey`绑定设置来指定字段名称。例如，我们可以更改`User`模型定义，使`HomeAddress`的名称变为`Address`，这将使`User`模型看起来像这样：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we use different aliases to refer to the same model, certain model callback
    implementations, such as `beforeSave`, will need to be changed to avoid using
    the name of the model directly, and instead use the property `alias`, available
    in all models. More information about this can be obtained from Nick Baker's article
    available at [http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases](http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用不同的别名来引用同一个模型时，某些模型回调实现，如`beforeSave`，需要更改以避免直接使用模型名称，而是使用所有模型都有的属性`alias`。更多关于这方面的信息可以从Nick
    Baker的文章中获得，该文章可在[http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases](http://www.webtechnick.com/blogs/view/230/The_Power_of_CakePHP_aliases)找到。
- en: Adding bindings on the fly
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态添加绑定
- en: This recipe shows how to set up new bindings right before a find operation,
    including bindings that are automatically removed after the operation is executed,
    and bindings that are permanently added.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何在查找操作之前设置新的绑定，包括在操作执行后自动删除的绑定，以及永久添加的绑定。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We need some sample models and data to work with. Follow the *Getting ready*
    section of the recipe, *Modifying binding parameters for a find*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些样本模型和数据来工作。按照食谱中的*准备就绪*部分，*修改查找操作的绑定参数*。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: If we want to obtain the latest published `Article` when we are fetching a `User`,
    we could add a permanent binding to the `User` model. However, if we want to do
    this on a need-by-need basis, it is smarter to add the binding before the find
    operation that needs it, thus avoiding the unneeded overhead for other operations.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在我们获取`User`时想要获取最新发布的`Article`，我们可以在`User`模型中添加一个永久的绑定。然而，如果我们需要根据需要添加绑定，那么在需要它的查找操作之前添加绑定会更智能，这样可以避免为其他操作带来不必要的开销。
- en: 'We can add the needed binding and then issue the `find` operation:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加所需的绑定，然后发出`find`操作：
- en: '[PRE42]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The preceding code would give us the following data structure:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码会给我们以下数据结构：
- en: '[PRE43]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If we want to make the binding permanent until the request ends, but without
    adding the binding to the `User` model, we simply add the value `false` as a second
    parameter to the `bindModel()` call (this is needed if the operation is a `paginate
    ()` call, as this call will issue two `find` operations):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在请求结束时使绑定永久，但又不将其添加到`User`模型中，我们只需在`bindModel()`调用中将值`false`作为第二个参数添加（如果操作是`paginate()`调用，则需要这样做，因为这个调用将发出两个`find`操作）：
- en: '[PRE44]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you issue a `bindModel()` call, CakePHP will add the binding as if you
    specified it on the model itself. If you did not set the second parameter to the
    method as `false`, that binding will be automatically removed after the `find`
    operation is completed. If you did set it in order to avoid the reset, then it
    will be kept until the script instance of your application is finished.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发出`bindModel()`调用时，CakePHP会像你指定在模型本身上一样添加绑定。如果你没有将方法第二个参数设置为`false`，那么该绑定将在`find`操作完成后自动删除。如果你设置了它以避免重置，那么它将保留到你的应用程序的脚本实例完成。
- en: The format to specify bindings through `bindModel()` is an array, indexed by
    the binding type (one of `belongsTo, hasOne, hasMany`, and `hasAndBelongsToMany`),
    whose value for each binding type is an array of associations.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `bindModel()` 指定绑定的格式是一个数组，通过绑定类型（`belongsTo, hasOne, hasMany` 和 `hasAndBelongsToMany`
    之一）进行索引，每个绑定类型的值是一个关联数组。
- en: You define each association (as you would normally do) in the model, indexing
    it by association name (if it is different than the model's name it is pointing
    to or if you have binding parameters to define), or, optionally, simply referring
    to the related model.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在模型中定义每个关联（就像你通常做的那样），通过关联名称（如果它不同于指向的模型名称或如果你有要定义的绑定参数）进行索引，或者，可选地，简单地引用相关模型。
