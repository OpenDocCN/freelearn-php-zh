["```php\nreturn $query->where('type', $type)\n    ->where('description', 'LIKE', '%something%')\n    ->orderBy('date')->limit(5);\n```", "```php\nSchema::create('events', function (Blueprint $table) {\n    $table->id();\n    $table->foreignIdFor(User::class)->index();\n    $table->string('type', 30);\n    $table->string('description', 250);\n    $table->integer('value');\n    $table->dateTime('date');\n    $table->timestamps();\n});\n```", "```php\nreturn $query->where('type', $type)\n    ->where('description', 'LIKE', '%something%')\n    ->orderBy('date')->limit(5);\n```", "```php\n$count = Event::count();\n$eventsInfo = Event::ofType('INFO')->get();\n$eventsWarning = Event::ofType('WARNING')->get();\n$eventsAlert = Event::ofType('ALERT')->get();\n```", "```php\nphp artisan octane:start\n```", "```php\nphp artisan make:migration create_event_indexes\n```", "```php\nSchema::table('events', function (Blueprint $table) {\n    $table->index('type', 'event_type_index');\n    $table->index('description',\n                  'event_description_index');\n    $table->index('date', 'event_date_index');\n});\n```", "```php\nSchema::table('events', function (Blueprint $table) {\n    $table->dropIndex('event_type_index');\n    $table->dropIndex('event_description_index');\n    $table->dropIndex('event_date_index');\n});\n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan db:table events\n```", "```php\npublic function scopeOfType($query, $type)\n{\n    return $query->where('type', $type)\n    ->where('description', 'LIKE', 'something%')\n    ->orderBy('date')->limit(5);\n}\n```", "```php\n    php artisan migrate\n    ```", "```php\n    php artisan db\n    ```", "```php\n    SELECT * FROM events WHERE description LIKE 'something%';\n    ```", "```php\n    SHOW STATUS LIKE 'Last_query_cost';\n    ```", "```php\n    mysql> SHOW STATUS LIKE 'Last_query_cost';\n    ```", "```php\n    +-----------------+----------+\n    ```", "```php\n    | Variable_name   | Value    |\n    ```", "```php\n    +-----------------+----------+\n    ```", "```php\n    | Last_query_cost | 5.209000 |\n    ```", "```php\n    +-----------------+----------+\n    ```", "```php\n    1 row in set (0.00 sec)\n    ```", "```php\n    php artisan migrate:rollback --step=1\n    ```", "```php\n    SELECT * FROM events WHERE description LIKE 'something%';\n    ```", "```php\n    SHOW STATUS LIKE 'Last_query_cost';\n    ```", "```php\nmysql> SHOW STATUS LIKE 'Last_query_cost';\n+-----------------+-------------+\n| Variable_name   | Value       |\n+-----------------+-------------+\n| Last_query_cost | 1018.949000 |\n+-----------------+-------------+\n1 row in set (0.01 sec)\n```", "```php\nSELECT * FROM events WHERE type='ALERT' AND description LIKE 'something%' ORDER BY date;\n```", "```php\nmysql> SHOW STATUS LIKE 'Last_query_cost';\n+-----------------+--------------+\n| Variable_name   | Value        |\n+-----------------+--------------+\n| Last_query_cost | 10645.949000 |\n+-----------------+--------------+\n```", "```php\nmysql> SHOW STATUS LIKE 'Last_query_cost';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| Last_query_cost | 16.209000 |\n+-----------------+-----------+\n```", "```php\ndescription LIKE '%something%'\n```", "```php\n    php artisan make:migration create_event_fulltext_index\n    ```", "```php\nSchema::table('events', function (Blueprint $table) {\n    $table->dropIndex('event_description_index');\n    $table->fullText('description', 'event_description_fulltext_index');\n});\n```", "```php\npublic function scopeOfType($query, $type)\n{\n    return $query->where('type', $type)\n        //->where('description', 'LIKE', '%something%')\n        ->whereFullText('description', 'something other')\n        ->orderBy('date')->limit(5);\n}\n```", "```php\n// including these classes\nuse Illuminate\\Support\\Facades\\Log;\nuse Laravel\\Octane\\Facades\\Octane;\nuse App\\Models\\Event;\nuse Illuminate\\Support\\Facades\\Cache;\n// in the boot() method\nOctane::tick('caching-query', function () {\n    Log::info('caching-query.', ['timestamp' => now()]);\n    $time = hrtime(true);\n    $count = Event::count();\n    $eventsInfo = Event::ofType('INFO')->get();\n    $eventsWarning = Event::ofType('WARNING')->get();\n    $eventsAlert = Event::ofType('ALERT')->get();\n    $time = (hrtime(true) - $time) / 1_000_000;\n    $result = ['count' => $count,\n        'eventsInfo'=> $eventsInfo,\n        'eventsWarning' => $eventsWarning,\n        'eventsAlert'=> $eventsAlert,\n    ];\n    Cache::store('octane')->put('cached-result-tick', $result);\n})\n->seconds(60)\n->immediate();\n```", "```php\nuse Illuminate\\Support\\Facades\\Cache;\nuse Exception;\npublic function indexTickCached()\n{\n    $time = hrtime(true);\n    try {\n        $result = Cache::store('octane')->get(\n          'cached-result-tick');\n    } catch (Exception $e) {\n        return 'Error: '.$e->getMessage();\n    }\n    $time = (hrtime(true) - $time) / 1_000_000;\n    $result['time'] = $time;\n    return view('dashboard.index', $result);\n}\n```", "```php\nuse Laravel\\Octane\\Facades\\Octane;\nuse App\\Http\\Controllers\\DashboardController;\nuse Illuminate\\Http\\Response;\nOctane::route('GET', '/dashboard-tick-cached', function () {\n    return new Response((new DashboardController)->\n                        indexTickCached());\n});\n```", "```php\n  200    GET /dashboard ............ 19.71 mb 66.60 ms\n  200    GET /dashboard ............ 19.83 mb 42.31 ms\n  200    GET /dashboard ............ 19.83 mb 37.31 ms\n  200    GET /dashboard ............ 19.83 mb 30.07 ms\n  200    GET /dashboard ............ 19.83 mb 42.25 ms\n  200    GET /dashboard-tick-cached . 19.89 mb 7.51 ms\n  200    GET /dashboard-tick-cached . 19.89 mb 4.32 ms\n  200    GET /dashboard-tick-cached . 19.89 mb 4.96 ms\n```"]