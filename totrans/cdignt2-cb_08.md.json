["```php\nCREATE TABLE `appointments` (\n  `app_id` int(11) NOT NULL AUTO_INCREMENT,\n  `app_date` varchar(11) NOT NULL,\n  `app_url` varchar(255) NOT NULL,\n  `app_name` varchar(255) NOT NULL,\n  PRIMARY KEY (`app_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;\n\nINSERT INTO `appointments` (`app_id`, `app_date`, `app_url`, `app_name`) VALUES\n(1, '1375465528', 'http://localhost/1', 'My Appointment'),\n(2, '1375638327', 'http://localhost/2', 'My Second Appointment'),\n(3, '1375897527', 'http://localhost/3', 'My Third Appointment'),\n(4, '1381167927', 'http://localhost/4', 'My Forth Name');\n```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class App_cal extends CI_Controller {\n        function __construct() {\n            parent::__construct();\n            $this->load->helper('url');\n            $this->load->helper('date');\n        }\n\n      public function index() {\n            redirect('app_cal/show');\n        }\n\n        public function show() {\n            $prefs = array (\n               'start_day'    => 'monday',\n               'month_type'   => 'long',\n               'day_type'     => 'short',\n               'show_next_prev'  => TRUE,\n               'next_prev_url'   => 'http://www.your_domain.com/app_cal/show/'\n             );\n\n            $this->load->library('calendar', $prefs);\n\n            if ($this->uri->segment(4)) {\n                $year= $this->uri->segment(3);\n                $month = $this->uri->segment(4);\n            } else {\n                $year = date(\"Y\", time());\n                $month = date(\"m\", time());\n            }\n\n            $this->load->model('App_cal_model');\n            $appointments = $this->App_cal_model->get_appointments($year, $month);\n            $data = array();\n\n            foreach ($appointments->result() as $row) {\n                $data[(int)date(\"d\",$row->app_date)] = $row->app_url;\n            }\n\n            $data['cal_data'] = $this->calendar->generate($year, $month, $data);\n\n            $this->load->view('app_cal/view', $data);\n        }        \n    }\n    ```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class App_cal_model extends CI_Model {\n        function __construct() {\n            parent::__construct();\n        }\n\n        function get_appointments($year, $month) {\n            $month_as_written = array(\n                '01' => 'January',\n                '02' => 'February',\n                '03' => 'March',\n                '04' => 'April',\n                '05' => 'May',\n                '06' => 'June',\n                '07' => 'July',\n                '08' => 'August',\n                '09' => 'September',\n                '10' => 'October',\n                '11' => 'November',\n                '12' => 'December'\n            );\n\n            $start_date = '01' . ' ' . $month_as_written[$month] . ' ' . $year;\n            $start_of_month = strtotime($start_date);\n\n            $end_date = days_in_month($month, $year) . ' ' . $month_as_written[$month] . ' ' . $year;\n            $end_of_month = strtotime($end_date);\n\n            $this->db->where('app_date > ', $start_of_month);\n            $this->db->where('app_date < ', $end_of_month);\n            $query = $this->db->get('appointments');\n\n            return $query;\n        }\n    }\n    ```", "```php\n    <?php echo $cal_data ; ?>\n    ```", "```php\n        $this->load->helper('url');\n        $this->load->helper('date');\n```", "```php\n        $prefs = array (\n           'start_day'    => 'monday',\n           'month_type'   => 'long',\n           'day_type'     => 'short',\n           'show_next_prev'  => TRUE,\n           'next_prev_url'   => 'http://www.your_domain.com/app_cal/show/'\n         );\n```", "```php\nif ($this->uri->segment(4)) {\n$year= $this->uri->segment(3);\n$month = $this->uri->segment(4);\n} else {\n$year = date(\"Y\", time());\n$month = date(\"m\", time());\n}\n```", "```php\n$this->load->model('App_cal_model');\n$appointments = $this->App_cal_model->get_appointments($year, $month);\n```", "```php\n$month_as_written = array(\n'01' => 'January',\n'02' => 'February',\n'03' => 'March',\n'04' => 'April',\n'05' => 'May',\n'06' => 'June',\n'07' => 'July',\n'08' => 'August',\n'09' => 'September',\n'10' => 'October',\n'11' => 'November',\n'12' => 'December'\n);\n```", "```php\n$start_date = '01' . ' ' . $month_as_written[$month] . ' ' . $year;\n$start_of_month = strtotime($start_date);\n```", "```php\n$end_date = days_in_month($month, $year) . ' ' . $month_as_written[$month] . ' ' . $year;\n$end_of_month = strtotime($end_date);\n```", "```php\n$this->db->where('app_date > ', $start_of_month);\n$this->db->where('app_date < ', $end_of_month);\n$query = $this->db->get('appointments');\n\nreturn $query;\n```", "```php\n$data = array();\n```", "```php\nforeach ($appointments->result() as $row) {\n$data[(int)date(\"d\",$row->app_date)] = $row->app_url;\n}\n```", "```php\narray(3) {\n  [2]=>\n  string(18) \"http://localhost/1\"\n  [4]=>\n  string(18) \"http://localhost/2\"\n  [7]=>\n  string(18) \"http://localhost/3\"\n}\n```", "```php\n$data['cal_data'] = $this->calendar->generate($year, $month, $data);\n\n$this->load->view('app_cal/view', $data);\n```", "```php\nALTER TABLE  `appointments` ADD  `app_description` VARCHAR( 255 ) NOT NULL AFTER  `app_name`\n```", "```php\nCREATE TABLE `appointments` (\n  `app_id` int(11) NOT NULL AUTO_INCREMENT,\n  `app_date` varchar(11) NOT NULL,\n  `app_url` varchar(255) NOT NULL,\n  `app_name` varchar(255) NOT NULL,\n  `app_description` varchar(255) NOT NULL,\n  PRIMARY KEY (`app_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;\n```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class App_cal extends CI_Controller {\n        function __construct() {\n            parent::__construct();\n            $this->load->helper('url');\n            $this->load->helper('date');\n            $this->load->helper('form');\n            $this->load->model('App_cal_model');\n        }\n\n      public function index() {\n            redirect('app_cal/show');\n        }\n    ```", "```php\n        public function show() {\n            if ($this->uri->segment(4)) {\n                $year= $this->uri->segment(3);\n                $month = $this->uri->segment(4);\n            } else {\n                $year = date(\"Y\", time());\n                $month = date(\"m\", time());\n            }\n\n            $tpl = '\n               {table_open}<table border=\"1\" cellpadding=\"15\" cellspacing=\"1\">{/table_open}\n\n               {heading_row_start}<tr>{/heading_row_start}\n\n               {heading_previous_cell}<th><a href=\"{previous_url}\">&lt;&lt;</a></th>{/heading_previous_cell}\n               {heading_title_cell}<th colspan=\"{colspan}\">{heading}</th>{/heading_title_cell}\n               {heading_next_cell}<th><a href=\"{next_url}\">&gt;&gt;</a></th>{/heading_next_cell}\n\n               {heading_row_end}</tr>{/heading_row_end}\n\n               {week_row_start}<tr>{/week_row_start}\n               {week_day_cell}<td>{week_day}</td>{/week_day_cell}\n               {week_row_end}</tr>{/week_row_end}\n\n               {cal_row_start}<tr>{/cal_row_start}\n               {cal_cell_start}<td>{/cal_cell_start}\n\n               {cal_cell_content}'.anchor('app_cal/create/'.$year.'/'.$month.'/{day}', '+').' <a href=\"{content}\">{day}</a>{/cal_cell_content}\n               {cal_cell_content_today}<div class=\"highlight\">'.anchor('app_cal/create/'.$year.'/'.$month.'/{day}', '+').'<a href=\"{content}\">{day}</a></div>{/cal_cell_content_today}\n\n               {cal_cell_no_content}'.anchor('app_cal/create/'.$year.'/'.$month.'/{day}', '+').' {day}{/cal_cell_no_content}\n               {cal_cell_no_content_today}<div class=\"highlight\">'.anchor('app_cal/create/'.$year.'/'.$month.'/{day}', '+').'{day}</div>{/cal_cell_no_content_today}\n\n               {cal_cell_blank}&nbsp;{/cal_cell_blank}\n\n               {cal_cell_end}</td>{/cal_cell_end}\n               {cal_row_end}</tr>{/cal_row_end}\n\n               {table_close}</table>{/table_close}' ;\n\n            $prefs = array (\n                'start_day'         => 'monday',\n                'month_type'        => 'long',\n                'day_type'          => 'short',\n                'show_next_prev'    => TRUE,\n                'next_prev_url'     => 'http://www.your_domain.com/app_cal/show/',\n                'template'          => $tpl         \n             );\n\n            $this->load->library('calendar', $prefs);\n\n            $appointments = $this->App_cal_model->get_appointments($year, $month);\n            $data = array();\n\n            foreach ($appointments->result() as $row) {\n                $data[(int)date(\"d\",$row->app_date)] = $row->app_url;\n            }\n\n            $data['cal_data'] = $this->calendar->generate($year, $month, $data);\n\n            $this->load->view('app_cal/view', $data);\n        }        \n    ```", "```php\n        public function create() {\n            $this->load->library('form_validation');\n            $this->form_validation->set_error_delimiters('', '<br />');\n\n            $this->form_validation->set_rules('app_name',  'Appointment Name', 'required|min_length[1]|max_length[255]|trim');\n            $this->form_validation->set_rules('app_description',  'Appointment Description', 'min_length[1]|max_length[255]|trim');\n            $this->form_validation->set_rules('day',  'Appointment Start Day', 'required|min_length[1]|max_length[11]|trim');\n            $this->form_validation->set_rules('month',  'Appointment Start Month', 'required|min_length[1]|max_length[11]|trim');\n            $this->form_validation->set_rules('year',  'Appointment Start Year', 'required|min_length[1]|max_length[11]|trim');\n\n            if ($this->uri->segment(3)) {\n                $year   = $this->uri->segment(3);\n                $month  = $this->uri->segment(4);\n                $day    = $this->uri->segment(5);\n            } elseif ($this->input->post()) {\n                $year   = $this->input->post('year');\n                $month  = $this->input->post('month');\n                $day    = $this->input->post('day');\n            } else {\n                $year   = date(\"Y\", time());\n                $month  = date(\"m\", time());\n                $day    = date(\"j\", time());\n            }\n\n            if ($this->form_validation->run() == FALSE) { // First load, or problem with form\n                $data['app_name']           = array('name' => 'app_name', 'id' => 'app_name', 'value' => set_value('app_name', ''), 'maxlength'   => '100', 'size' => '35');\n                $data['app_description']    = array('name' => 'app_description', 'id' => 'app_description', 'value' => set_value('app_description', ''), 'maxlength' => '100', 'size' => '35');\n\n                $days_in_this_month = days_in_month($month,$year);\n\n                $days_i = array();\n                for ($i=1;$i<=$days_in_this_month;$i++) {\n                    ($i<10 ? $days_i['0'.$i] = '0'.$i : $days_i[$i] = $i) ;\n                }\n\n                $data['days']   = $days_i;\n                $data['months'] = array('01' => 'January','02' => 'February','03' => 'March','04' => 'April','05' => 'May','06' => 'June','07' => 'July','08' => 'August','09' => 'September','10' => 'October','11' => 'November','12' => 'December');\n                $data['years']  = array('2013' => '2013');\n                $data['day']    = $day;\n                $data['month']  = $month;\n                $data['year']   = $year;\n                $this->load->view('app_cal/new', $data);\n            } else {\n                $app_date = mktime(0,0,0,$month,$day,$year);\n\n                $data = array(\n                    'app_name'          => $this->input->post('app_name'),\n                    'app_description'   => $this->input->post('app_description'),\n                    'app_date'          => $app_date,\n                    'app_url'           => base_url('index.php/app_cal/appointment/'.$year.'/'.$month.'/'.$day)\n                    );\n\n                if ($this->App_cal_model->create($data)) {\n                    redirect('app_cal/show/'.$year.'/'.$month);\n                } else {\n                    redirect('app_cal/index');\n                }  \n            }      \n        }\n    ```", "```php\n            public function delete() {\n            $this->load->library('form_validation');\n            $this->form_validation->set_error_delimiters('', '<br />');\n\n            if ($this->input->post('app_id')) {\n                $id = $this->input->post('app_id');\n            } else {\n                $id = $this->uri->segment(3);\n            }        \n\n            $this->form_validation->set_rules('app_id',  'Appointment ID', 'min_length[1]|max_length[11]|is_natural|trim');\n\n            if ($this->form_validation->run() == FALSE) { // First load, or problem with form\n                $appointment = $this->App_cal_model->get_single($id);\n                $data['id'] = $id;\n\n                foreach ($appointment->result() as $row) {\n                    $data['app_name'] = $row->app_name;\n                    $data['app_date'] = $row->app_date;\n                }\n\n                $this->load->view('app_cal/delete', $data);\n            } else {\n                if ($this->App_cal_model->delete($id)) {\n                    redirect('app_cal/index');\n                } else {\n                    redirect('app_cal/index');\n                }\n            }\n        }    \n\n        public function appointment() {\n            if ($this->uri->segment(3)) {\n                $year   = $this->uri->segment(3);\n                $month  = $this->uri->segment(4);\n                $day    = $this->uri->segment(5);\n\n                $data['appointments'] = $this->App_cal_model->get_appointment($year, $month, $day);\n                $this->load->view('app_cal/appointment', $data);\n            } else {\n\n            }\n        }\n    }\n    ```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class App_cal_model extends CI_Model {\n\n        function __construct() {\n            parent::__construct();\n        }\n\n        function get_appointments($year, $month) {\n            $month_as_written = array(\n                '01' => 'January',\n                '02' => 'February',\n                '03' => 'March',\n                '04' => 'April',\n                '05' => 'May',\n                '06' => 'June',\n                '07' => 'July',\n                '08' => 'August',\n                '09' => 'September',\n                '10' => 'October',\n                '11' => 'November',\n                '12' => 'December'\n            );\n\n            $sd = '01' . ' ' . $month_as_written[$month] . ' ' . $year;\n            $start_of_month = strtotime($sd);\n\n            $ed = days_in_month($month, $year) . ' ' . $month_as_written[$month] . ' ' . $year;\n            $end_of_month = strtotime($ed);\n\n            $this->db->where('app_date > ', $start_of_month);\n            $this->db->where('app_date < ', $end_of_month);\n            $query = $this->db->get('appointments');\n            $this->db->last_query();\n\n            return $query;\n        }\n\n        function get_appointment($year, $month, $day) {\n            $start_of_day = mktime(0,0,0,$month,$day,$year);\n            $end_of_day = $start_of_day + 86400;\n            $this->db->where('app_date >= ', $start_of_day);\n            $this->db->where('app_date <= ', $end_of_day);\n            $query = $this->db->get('appointments');\n\n            return $query;\n        }\n\n        function create($data) {\n            if ($this->db->insert('appointments', $data)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        function delete($id) {\n            $this->db->where('app_id', $id);\n            if ($this->db->delete('appointments')) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        function get_single($id) {\n            $this->db->where('app_id', $id);\n            $query = $this->db->get('appointments');\n            return $query;\n        }\n    }\n    ```", "```php\n    <?php echo anchor ('app_cal/create', 'New Appointment') ; ?>\n    <?php echo $cal_data ; ?>\n    ```", "```php\n    <?php echo anchor ('app_cal/index', 'View Calendar') ; ?>\n    <a href=\"\"></a><h2>Appointments</h2>\n\n    <?php foreach ($appointments->result() as $row) : ?>\n    \t<?php echo anchor('app_cal/delete/'.$row->app_id, 'Delete') ; ?><br />\n    \t<?php echo date(\"j-m-Y\",$row->app_date) ; ?><br />\n    \t<?php echo $row->app_name ; ?><br />\n    \t<?php echo $row->app_description ; ?>\n    \t<hr>\n    <?php endforeach ; ?>\n    ```", "```php\n    <h2>Delete Appointment</h2>\n\n    <?php if (validation_errors()) : ?>\n        <p><?php echo validation_errors() ;?></p>\n    <?php endif ; ?>\n\n    <?php echo form_open('app_cal/delete') ; ?>\n    <h4>Are you sure you want to delete the following appointment?</h4>\n\n    <?php echo $app_name . ' on ' . date(\"d-m-Y h:i:s\", $app_date); ?>\n\n    <?php echo form_hidden('app_id', $id) ; ?>\n\n    <br /><br />\n\n    <input type=\"submit\" value=\"Delete\" />\n    or <?php echo anchor ('app_cal', 'Cancel') ; ?>\n    <?php echo form_close() ; ?>\n    ```", "```php\n    <h2>New Appointment</h2>\n    <h4>Appointment Name</h4>\n\n    <?php if (validation_errors()) : ?>\n        <p><?php echo validation_errors() ;?></p>\n    <?php endif ; ?>\n\n    <?php echo form_open('app_cal/create') ; ?>\n    <?php echo form_input($app_name); ?>\n    <h4>Appointment Description</h4>\n    <?php echo form_input($app_description); ?>\n    <h4>Appointment Date</h4>\n    <?php echo form_dropdown('day', $days, $day); ?>\n    <?php echo form_dropdown('month', $months, $month); ?>\n    <?php echo form_dropdown('year', $years, $year); ?>\n\n    <br /><br />\n\n    <input type=\"submit\" value=\"Save\" />\n    or <?php echo anchor ('app_cal', 'Cancel') ; ?>\n    <?php echo form_close() ; ?>\n    ```", "```php\nif ($this->uri->segment(3)) {\n   $year   = $this->uri->segment(3);\n   $month  = $this->uri->segment(4);\n   $day    = $this->uri->segment(5);\n} elseif ($this->input->post()) {\n   $year   = $this->input->post('year');\n   $month  = $this->input->post('month');\n   $day    = $this->input->post('day');\n} else {\n   $year   = date(\"Y\", time());\n   $month  = date(\"m\", time());\n   $day    = date(\"j\", time());\n}\n```", "```php\n$days_in_this_month = days_in_month($month,$year);\n$days_i = array();\nfor ($i=1;$i<=$days_in_this_month;$i++) {\n   ($i<10 ? $days_i['0'.$i] = '0'.$i : $days_i[$i] = $i) ;\n}\n```", "```php\nif ($this->input->post('app_id')) {\n$id = $this->input->post('app_id');\n} else {\n$id = $this->uri->segment(3);\n}\n```", "```php\n$appointment = $this->App_cal_model->get_single($id);\n\nforeach ($appointment->result() as $row) {\n$data['app_name'] = $row->app_name;\n$data['app_date'] = $row->app_date;\n}\n\n$this->load->view('app_cal/delete', $data);\n```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class Register extends CI_Controller {\n      function __construct() {\n        parent::__construct();\n        $this->load->helper('form');\n        $this->load->helper('dob_val');\n      }\n      public function index() {\t\n        $this->load->library('form_validation');\n        $this->form_validation->set_error_delimiters('', '<br />');\n        $this->form_validation->set_rules('year', 'Year', 'required|min_length[4]|max_length[4]|trim');\n        $this->form_validation->set_rules('month', 'Month', 'required|min_length[2]|max_length[2]|trim');\n        $this->form_validation->set_rules('day', 'Day', 'required|min_length[2]|max_length[2]|trim');\n\n        if ($this->form_validation->run() == FALSE) {\n          $this->load->view('register/signup');\n        } else {\n          $dob = array(\n            'year' => $this->input->post('year'),\n            'month' => $this->input->post('month'),\n            'day' => $this->input->post('day')\n          );\n          $at_least = 18;\n          if (are_they_old_enough($dob, $at_least = 18)) {\n            $this->load->view('register/enter');\n          } else {\n            $this->load->view('register/noenter');\n          }\n        }\n      }\n    }\n    ```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n    function are_they_old_enough($dob, $at_least = 18) {\n      $birthday = strtotime($dob['year'].'-'.$dob['month'].'-'.$dob['day']);\n      $diff = floor((time() - $birthday) / (60 * 60 * 24 * 365));\n\n      if ($diff >= $at_least) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    ```", "```php\n    <?php echo form_open() ; ?>\n\n      <?php echo validation_errors() ; ?>\n\n      Day <input type=\"text\" name=\"day\" size=\"5\" value=\"<?php echo set_value('day') ; ?>\"/>\n\n      Month <input type=\"text\" name=\"month\" size=\"5\" value=\"<?php echo set_value('month') ; ?>\"/>\n\n      Year <input type=\"text\" name=\"year\" size=\"5\" value=\"<?php echo set_value('year') ; ?>\"/>\n\n      <input type=\"submit\" value=\"go\" />\n\n    <?php echo form_close() ; ?>\n    ```", "```php\n    <p>You are old enough to view page</p>\n    ```", "```php\n    <p>You are NOT old enough to view page</p>\n    ```", "```php\nfunction __construct() {\n  parent::__construct();\n  $this->load->helper('form');\n  $this->load->helper('dob_val');\n}\n```", "```php\n$dob = array(\n\t'year' => $this->input->post('year'),\n\t'month' => $this->input->post('month'),\n\t'day' => $this->input->post('day')\n);\n```", "```php\n$at_least = 18;\n```", "```php\nif (are_they_old_enough($dob, $at_least = 18)) {\n  $this->load->view('register/enter');\n} else {\n  $this->load->view('register/noenter');\n}\n```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    class Fuzzy_date extends CI_Controller {\n    \tfunction __construct() {\n    \t\tparent::__construct();\n    \t\t$this->load->helper('url');\n    \t\t$this->load->helper('fuzzy_date_helper');););\n    \t}\n\n    \tpublic function index() {\n    \t\techo describe_the_time(time() + 30);\n    \t}\n    }\n    ?>\n    ```", "```php\n    <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\n    function describe_the_time($time_in) {\n      define('SECOND', 1);\n      define('MINUTE', 60 * SECOND);\n      define('HOUR', 60 * MINUTE);\n      define('DAY', 24 * HOUR);\n      define('MONTH', 30 * DAY);\n      define('YEAR', 12 * MONTH);\n\n      $past_descriptions = array(\n        1 => 'about a minute ago',\n        2 => 'a few minutes ago',\n        3 => 'within the last hour',\n        4 => 'earlier today',\n        5 => 'yesterday',\n        6 => 'earlier this week',\n        7 => 'earlier this month',\n        8 => 'last month',\n        9 => 'earlier this year',\n        10 => 'last year',\n        11 => 'a long time ago',\n        12 => 'I don\\'t know that time'\n        );\n\n      $future_descriptions = array(\n        1 => 'a minute from now',\n        2 => 'in the next few minutes',\n        3 => 'in the next hour',\n        4 => 'later today',\n        5 => 'tomorrow',\n        6 => 'later this week',\n        7 => 'later this month',\n        8 => 'next month',\n        9 => 'later this year',\n        10 => 'next year',\n        11 => 'a long way off',\n        12 => 'I don\\'t know that time'\n        );\n\n      $now = time();\n\n      if ($time_in < $now) {\n        if ($time_in > $now - MINUTE) { // About a minute ago\n          return $past_descriptions[1];\n        } elseif ( ($time_in >= $now - (MINUTE * 5) ) && ($time_in <= $now ) ) { // A few minutes ago\n          return $past_descriptions[2];\n        } elseif ( ($time_in >= $now - (MINUTE * 60)) && ($time_in <= $now ) ) { // Within the last hour\n          return $past_descriptions[3];\n        } elseif ( ($time_in >= $now - (HOUR * 24)) && ($time_in <= $now - (MINUTE * 60) ) ) { // Earlier today\n          return $past_descriptions[4];\n        } elseif ( ($time_in >= $now - (HOUR * 48)) && ($time_in <= $now - (HOUR * 24) ) ) { // Yesterday\n          return $past_descriptions[5];\n        } elseif ( ($time_in >= $now - (DAY * 7)) && ($time_in <= $now - (HOUR * 48) ) ) { // Earlier this week\n          return $past_descriptions[6];\n        } elseif ( ($time_in >= $now - (DAY * 31)) && ($time_in <= $now - (DAY * 7) ) ) { // Earlier this month\n          return $past_descriptions[7];\n        } elseif ( ($time_in >= $now - (DAY * 62)) && ($time_in <= $now - (DAY * 31) ) ) { // Last Month\n          return $past_descriptions[8];\n        } elseif ( ($time_in >= $now - (MONTH * 12)) && ($time_in <= $now - (MONTH * 31) ) ) { // Earlier this year\n          return $past_descriptions[9];\n        } elseif ( ($time_in >= $now - (MONTH * 24)) && ($time_in <= $now - (MONTH * 12) ) ) { // Last year\n          return $past_descriptions[10];\n        } elseif ( ($time_in >= $now - (MONTH * 24) && ($time_in <= $now - (MONTH * 12) ) ) ){  // Last year\n          return $past_descriptions[11];\n        } else {\n          return $past_descriptions[12];\n        }\n      } else {\n        if ($time_in < $now + MINUTE) { // A minute from now\n          return $future_descriptions[1];\n        } elseif ( ($time_in <= $now + (MINUTE * 5) ) && ($time_in >= $now ) ) { // In the next few minutes\n          return $future_descriptions[2];\n        } elseif ( ($time_in <= $now + (MINUTE * 59)) && ($time_in >= $now ) ) { // In the next hour\n          return $future_descriptions[3];\n        } elseif ( ($time_in <= $now + (HOUR * 24)) && ($time_in >= $now + (MINUTE * 59) ) ) { // Later today\n          return $future_descriptions[4];\n        } elseif ( ($time_in <= $now + (HOUR * 48)) && ($time_in >= $now + (HOUR * 24) ) ) { // Yesterday\n          return $future_descriptions[5];\n        } elseif ( ($time_in <= $now + (DAY * 7)) && ($time_in >= $now + (HOUR * 48) ) ) { // Earlier this week\n          return $future_descriptions[6];\n        } elseif ( ($time_in <= $now + (DAY * 31)) && ($time_in >= $now + (DAY * 7) ) ) { // Earlier this month\n          return $future_descriptions[7];\n        } elseif ( ($time_in <= $now + (DAY * 62)) && ($time_in >= $now + (DAY * 31) ) ) { // Last Month\n          return $future_descriptions[8];\n        } elseif ( ($time_in <= $now + (MONTH * 12)) && ($time_in >= $now + (MONTH * 31) ) ) { // Earlier this year\n        return $future_descriptions[9];\n        } elseif ( ($time_in <= $now + (MONTH * 24)) && ($time_in >= $now + (MONTH * 12) ) ) { // Last year\n          return $future_descriptions[10];\n        } elseif ( ($time_in <= $now + (MONTH * 24) ) ) { // Last year\n          return $future_descriptions[11];\n        } else {\n          return $future_descriptions[12];\n        }\n      }\n    }\n\n    ?>\n    ```", "```php\n  function __construct() {\n    parent::__construct();\n    $this->load->helper('url');\n    $this->load->helper('fuzzydate_helper');\n  }\n```", "```php\necho describe_the_time(time() + 30);\n```", "```php\nfunction describe_the_time($time_in) {\n```", "```php\nif ($time_in < $now) {\n... // $time_in is in the past\n} else {\n... // $time_in is in the future\n}\n```", "```php\nif ($time_in < $now + MINUTE) { // A minute from now\n  return $future_descriptions[1];\n}\n```", "```php\nif ($time_in < $now) {\n... \n} else {\n...\n}\n```"]