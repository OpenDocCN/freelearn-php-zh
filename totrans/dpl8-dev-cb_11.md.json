["```php\nname: My Module! \ntype: module \ndescription: Provides an AngularJS app. \ncore: 8.x\n```", "```php\n$ bower init \n? name mymodule \n? description Example module with AngularJS \n? main file  \n? what types of modules does this package expose?  \n? keywords  \n? authors Matt Glaman <nmd.matt@gmail.com> \n? license GPL \n? homepage  \n? set currently installed components as dependencies? Yes \n? would you like to mark this package as private which prevents it from being accidentally published to the registry? No \n{ \n  name: 'mymodule', \n  authors: [ \n    'Matt Glaman <nmd.matt@gmail.com>' \n  ], \n  description: 'Example module with AngularJS', \n  main: '', \n  moduleType: [], \n  license: 'GPL', \n  homepage: '', \n  ignore: [ \n    '**/.*', \n    'node_modules', \n    'bower_components', \n    'test', \n    'tests' \n  ] \n} \n\n? Looks good? Yes \n```", "```php\n$ bower install --save angular \nbower angular#*                 cached git://github.com/angular/bower-angular.git#1.5.0 \nbower angular#*               validate 1.5.0 against git://github.com/angular/bower-angular.git#* \nbower angular#^1.5.0           install angular#1.5.0 \nangular#1.5.0 bower_components/angular \n```", "```php\nangular: \n  js: \n    'bower_components/angular/angular.js: {} \n  css: \n    component: \n      'bower_components/angular/angular-csp.css': {} \n```", "```php\n<?php \n\n/** \n * Implements hook_preprocess_html(). \n */ \nfunction mymodule_preprocess_html(&$variables) { \n    $variables['html_attributes']['ng-app'] = ''; \n} \n```", "```php\n<?php \n\nnamespace Drupal\\mymodule\\Plugin\\Block; \n\nuse Drupal\\Core\\Block\\BlockBase; \n\n/** \n * Provides a block for AngularJS example. \n * \n * @Block( \n *   id = \"mymodule_angular_block\", \n *   admin_label = @Translation(\"AngularJS Block\") \n * ) \n */ \nclass AngularBlock extends BlockBase { \n\n  public function build() { \n    return [ \n      'input' => [ \n        '#type' => 'textfield', \n        '#title' => $this->t('Name'), \n        '#placeholder' => $this->t('Enter a name here'), \n        '#attributes' => [ \n          'ng-model' => 'yourName', \n        ], \n      ], \n      'name' => [ \n        '#markup' => '<hr><h1>Hello {{yourName}}!</h1>', \n      ], \n      '#attached' => [ \n        'library' => [ \n          'mymodule/angular', \n        ], \n      ], \n    ]; \n  } \n\n} \n```", "```php\n\ndropzonejs: \n  title: 'Dropzonejs' \n  website: http://www.dropzonejs.com \n  version: 4.0.1 \n  license: \n    name: MIT \n    url: https://github.com/enyo/dropzone/blob/master/LICENSE \n    gpl-compatible: true \n  js: \n    /libraries/dropzone/dist/min/dropzone.min.js: {} \n  css: \n    component: \n      /libraries/dropzone/dist/min/dropzone.min.css: {} \n\n```", "```php\n$ bower init \n? name mytheme \n? description Example theme with Semantic UI \n? main file  \n? what types of modules does this package expose?  \n? keywords  \n? authors Matt Glaman <nmd.matt@gmail.com> \n? license GPL \n? homepage  \n? set currently installed components as dependencies? Yes \n? would you like to mark this package as private which prevents it from being accidentally published to the registry? No \n{ \n  name: 'mytheme', \n  authors: [ \n    'Matt Glaman <nmd.matt@gmail.com>' \n  ], \n  description: 'Example theme with Semantic UI, \n  main: '', \n  moduleType: [], \n  license: 'GPL', \n  homepage: '', \n  ignore: [ \n    '**/.*', \n    'node_modules', \n    'bower_components', \n    'test', \n   'tests' \n  ] \n} \n\n? Looks good? Yes \n```", "```php\n$ bower install --save semantic-ui \nbower semantic-ui#*         not-cached git://github.com/Semantic-Org/Semantic-UI.git#* \nbower semantic-ui#*            resolve git://github.com/Semantic-Org/Semantic-UI.git#* \nbower semantic-ui#*           download https://github.com/Semantic-Org/Semantic-UI/archive/2.1.8.tar.gz \nbower semantic-ui#*            extract archive.tar.gz \nbower semantic-ui#*           resolved git://github.com/Semantic-Org/Semantic-UI.git#2.1.8 \nbower jquery#>=1.8          not-cached git://github.com/jquery/jquery-dist.git#>=1.8 \nbower jquery#>=1.8             resolve git://github.com/jquery/jquery-dist.git#>=1.8 \nbower jquery#>=1.8            download https://github.com/jquery/jquery-dist/archive/2.2.0.tar.gz \nbower jquery#>=1.8             extract archive.tar.gz \nbower jquery#>=1.8            resolved git://github.com/jquery/jquery-dist.git#2.2.0 \nbower semantic#^2.1.8          install semantic#2.1.8 \nbower jquery#>=1.8             install jquery#2.2.0 \n```", "```php\nsemantic_ui.form: \n  js: \n    bower_components/semantic/dist/components/form.js: {} \n  css: \n    component: \n      bower_components/semantic/dist/components/form.css: {} \n```", "```php\nsemantic_ui.button: \n  css: \n    component: \n      bower_components/semantic/dist/components/button.css: {} \nsemantic_ui.input: \n  css: \n    component: \n      bower_components/semantic/dist/components/input.css: {} \nsemantic_ui.label: \n  css: \n    component: \n      bower_components/semantic/dist/components/label.css: {} \n```", "```php\n{{ attach_library('mytheme/semantic_ui.form') }} \n  <form{{ attributes.addClass(['ui', 'form']) }}> \n{{ children }} \n</form> \n```", "```php\n{{ attach_library('mytheme/semantic_ui.input') }} \n<input{{ attributes.addClass(['ui', 'input']) }} />{{ children }} \n```", "```php\n{{ attach_library('mytheme/semantic_ui.button') }} \n<input{{ attributes.addClass(['ui', 'button', 'primary']) }} />{{ children }} \n```", "```php\n{{ attach_library('mytheme/semantic_ui.label') }} \n\n{% \n  set classes = [ \n    title_display == 'after' ? 'option', \n    title_display == 'invisible' ? 'visually-hidden', \n    required ? 'js-form-required', \n    required ? 'form-required', \n    'ui', \n    'label', \n  ] \n%} \n{% if title is not empty or required -%} \n  <label{{ attributes.addClass(classes) }}>{{ title }}</label> \n{%- endif %} \n```", "```php\ncomposer require alsar/stack-ip-restrict \n```", "```php\nname: IP Restrict \ntype: module \ndescription: Restricts access to the Drupal site based on allowed IP addresses \ncore: 8.x \n```", "```php\nparameters: \n  ip_restrict: \n    enabled: true \n    ipAddresses: ['127.0.0.1', 'fe80::1', '::1'] \nservices: \n  ip_restrict.middleware: \n    class: Alsar\\Stack\\IpRestrict \n    arguments: ['%ip_restrict%'] \n    tags: \n      - { name: http_middleware } \n```", "```php\n<?php \n\nnamespace Drupal\\ip_restrict\\Compiler; \n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder; \nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface; \n\n/** \n * Adds the IP Restrict middleware if enabled. \n */ \nclass IpRestrictPass implements CompilerPassInterface { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function process(ContainerBuilder $container) { \n    if (FALSE === $container->hasDefinition('ip_restrict.middleware')) { \n      return; \n    } \n\n    $ip_restrict_config = $container->getParameter('ip_restrict'); \n\n    if (!$ip_restrict_config['enabled']) { \n      $container->removeDefinition('ip_restrict.middleware'); \n    } \n  } \n\n} \n```"]