- en: Structuring Content Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](a5a4cb5a-1fb0-4fc0-b5d1-20961ec8daec.xhtml), *Finding Your Way
    Around Drupal*, we learned what Drupal is and how to install it. This chapter
    will explore the fundamentals of Drupal content types, and the formats that define
    what information is saved with each piece of content. Upon reading this chapter,
    you will learn about content types and fields, creating a content type, adding
    fields to a content type, customizing the form used to enter content, and customizing
    the way the content is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: What is content?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We all know what content is...sort of. This book is made up of content. This
    chapter contains content, as does this section within this chapter. The more important
    question is: what is it in the context of Drupal? This question is best answered
    with the home page as an example, because you''ll know it when you see it!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a piece of content that I added to the site,
    in the main content area, with a thick rectangle around it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0788ca76-855e-4f83-bb41-050febe63f33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When rendered and displayed in the browser, it''s simply content, but up until
    that point, it is content of a certain type, of a content type, also known in
    Drupal as a node bundle. Does Drupal look at this content simply as:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 - Understanding Content Types
  prefs: []
  type: TYPE_NORMAL
- en: We all know what content is ... sort of. This book is made up of content. This
    chapter contains content, as does this section within the chapter. The more important
    question is, what is it in the context of Drupal? The question is best answered
    with the home page as an example, because you'll know it when you see it.
  prefs: []
  type: TYPE_NORMAL
- en: No, content is stored within Drupal in a way that facilitates selecting it based
    on almost any criteria you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the database for a moment. This isn''t something that
    you need to learn, but it''s good for illustration purposes. If we were to look
    at the main identifying information for this piece of content within the Drupal
    database, we would see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see this in the `article` value in the `type` column, which contains
    the content type in this table. "Article" is the content type of our content.
    Let's leave the database behind and look at our content and its content type in
    the way that you will use it, via the **user interface** (**UI**).
  prefs: []
  type: TYPE_NORMAL
- en: In the Drupal documentation, you will often find a URL specified in an abbreviated
    manner, omitting the domain name to avoid confusion since most users will be using
    different domain names, so instead of `mysite.com/page1` you might simply see
    `/page1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the pages used most often by a content editor is the content administration
    page. We''ll begin there by clicking the Content link in the admin menu, which
    will take us to `admin/content`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f35b958-fa10-4486-9819-02a460302a12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, our content is listed, its title
    is on the left, and the type given is Article. We will learn more about the use
    of this page in [Chapter 4](5dc26faf-5b24-463c-9587-e06ec89742a7.xhtml), *Creating
    and Editing Content*, but for now we want to use it to lead us to the page on
    which we can edit our content. Let''s click the Edit link at the opposite end
    of the row from the content title, which will display a node edit form for the
    content, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Content as fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We sometimes tend to think of content as a big block of body text, but content
    can be stored as discreet fields so that important elements can be easily accessed
    and properly formatted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2bc21c0-395a-408b-a0e3-bb3e77a472ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the same content in this form as you did on the page. However,
    here you also see the fields that hold that content. The content title is in a
    field labeled Title, and the main text is in a field labeled Body. There are two
    additional fields that are not being used by this particular piece of content:
    a field for categories, labeled Tags, and one that is used for attaching an image
    to the content, labeled Image.'
  prefs: []
  type: TYPE_NORMAL
- en: By having a Title field and a Body field, both the user and Drupal understand
    that the information in each is separate from the other. This doesn't mean that
    they cannot be displayed together, but there are many reasons why we may want
    to be able to differentiate them.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when this content was displayed on the homepage, the title and
    the body text were formatted differently. Another example is that we might want
    to have Drupal provide us with a list of content titles. In both examples, it
    is important for Drupal to be able to determine which part of the content *is*
    the title. If all of the content in the piece was thrown together, there would
    be no way for Drupal to know where the title ends and the body text begins. Having
    them in separate fields removes any ambiguity.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have seen what the content looks like when separated into separate fields.
    But where do the fields come from? How does Drupal know which fields to offer
    to receive our input? Let's take a look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding content types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A content type is essentially a collection of fields used to hold the various
    items that together form the whole of the content. In the case of the piece of
    content that we have been using, it is an example of the Article content type,
    which is one of the two content types that are present when you first create a
    new Drupal site, with the other being the Page content type.
  prefs: []
  type: TYPE_NORMAL
- en: If you think of a company's job application, every application contains the
    same fields for entering information, even though the information differs from
    one to another. In this example, the job application is a content type. Let's
    take a look at the Article content type in terms of how Drupal provides it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To navigate via the admin menu, click Structure. Then, on the next page, click Content
    types, which will lead to a page that you can also reach via the browser instead
    at `/admin/structure/types`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5af9fbb-e374-4bc6-9b07-c94fb4a3541c.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining the content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll now take a look at the content type definition. To start, rather than
    click on the default choice of Manage fields, click the arrow next to that and
    select Edit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebbdbf00-6faa-45cb-aef7-9a3796adead6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a brief look at the settings in the preceding form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: This is the plain language name that the content type will be identified
    with. In this case, this is Article. To the right of this human-readable name
    is what is referred to as the Machine name, which is the internal name. This is
    generated automatically by Drupal, and is usually the lowercase version of the
    name, with multiple words having spaces replaced by an underscore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: This is a place to describe the purpose of the content type and,
    perhaps,  rules of its usage. The descriptive text entered here will be displayed
    along with the content type name when given a list of available content types
    to choose from when creating content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following these two fields is a series of vertical tabs that provide additional
    configuration items.
  prefs: []
  type: TYPE_NORMAL
- en: Submission form settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The submission form is the form with which content is created:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Title field label: All content has some identifying key that also acts as a
    title when the content is displayed. The default is to refer to this value as
    the *Title*, but in some cases, this may not be appropriate. For example, with
    a content type that defines travel destinations, the title would work better as *Destination*
    or *Location* than *Title*. This field is required. Its value will be used as
    the prompt on the entry screen when creating a piece of content of this type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Preview before submitting: When creating or editing content, it is likely that
    the content, as viewed in the editor, will differ from the content as viewed on
    the web page. Previewing provides the latter view. The selection here will determine
    whether previewing is available, and if so, whether it will be optional or required
    to do so before submitting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Explanation or submission guidelines: This is simply a place to enter a description
    that will be shown to the person creating or editing the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, content is entered in a rich text editor window in a form. Since
    this entry can very well be the first draft of that content, it may not be desired
    to have it published immediately. Some content types will be of this type, more
    often than not, while others, such as one that contains only a title and URL,
    will not require more than one draft. Because of this, publishing options are
    provided. Here, in the content type form, the default choice for these options
    can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '* Published*: If selected, the content will be published as soon as it is saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Promoted to front page*: Not all content is necessarily intended for the homepage,
    and a piece of content having this value set, or not, can be used to determine
    whether it should appear there'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Drupal, the site's homepage is sometimes referred to as the *front page*,
    like in a newspaper.
  prefs: []
  type: TYPE_NORMAL
- en: '*Sticky at top of lists*: When no other scheme is put in place, the front page
    displays a specified number of article teasers, and as more content is created,
    the older ones "drop" off the page. If a piece of content is meant to remain on
    the page while others cycle on and off, such as a welcome message, it can be accomplished
    by setting this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Create new revision*: Imagine making changes to content, saving them, and
    realizing that something was changed that shouldn''t have been. What do you do?
    The original version is gone! Or is it? When a new revision is created, it contains
    the content as it existed before the changes were made. Should the need arise,
    the current version can be reverted to that of the revision, providing a complete
    undo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Display author and date information*: whether to set this or not depends on
    the type of content that will be displayed and the look that''s desired for the
    site.'
  prefs: []
  type: TYPE_NORMAL
- en: Menu settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, it is desirable to add a piece of content to a menu, particularly
    if it is somewhat static on the site. For example, Terms and Conditions would
    be persistent site content, whereas a notice about the current week''s activities
    would not. The former might be one of a specific content type, perhaps Legal,
    and you might desire that every piece of such content be listed in the Footer
    menu. In this example, the Footer within the list of Available menus would be
    checked, and if there were a heading, Legal, already in that menu, it could be
    selected as the Default parent item. In that case, all content of that type would,
    by default, be added to the Footer menu as child content to Legal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c449d035-b48f-401a-bc7f-a98b5ecdd868.png)'
  prefs: []
  type: TYPE_IMG
- en: More on menus will be found in Chapter 8.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the main form for content types. We will be creating a new content
    type later in this chapter. For now, let's move on to managing content type fields.
  prefs: []
  type: TYPE_NORMAL
- en: Managing content type fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A field can be thought of as a container that you put something in, that something
    in our context being content. Why do content types have fields rather than one
    big box in which to put the content, like a page in MS Word? Let's consider an
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose our content is related to appointments. Ms. Jones is making an appointment.
    One possibility is that the appointment is entered as text, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '*January 20 at 1:30 PM Ms. Jones will see Mr. Kim to discuss investments.*'
  prefs: []
  type: TYPE_NORMAL
- en: All of the information needed is there. However, what happens when a list is
    needed of all the appointments for the next two weeks? Or when a list of all Ms.
    Jones's appointments are needed? Or when a decision is made to change the date
    format on all appointments? In those cases, having the information in a form that
    is difficult to aggregate, search, or edit globally is problematic.
  prefs: []
  type: TYPE_NORMAL
- en: What if the appointments were stored like a spreadsheet?
  prefs: []
  type: TYPE_NORMAL
- en: '| Date/Time | Client | Seeing | Reason |'
  prefs: []
  type: TYPE_TB
- en: '| January 20, 2018 | Ms. Jones | Mr. Kim | Investment discussion |'
  prefs: []
  type: TYPE_TB
- en: With the information segregated into meaningful pieces, it is much easier to
    find what is needed and edit it. That is the idea behind fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve been working with the Article content type. Let''s take a look at how
    its fields are defined. At the top of the current page, we''ll click on the Manage
    fields tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba4fab96-d35c-4135-ae52-183c3af3d111.png)'
  prefs: []
  type: TYPE_IMG
- en: We saw the title field on the content type form. This screen is for optional
    fields. There could be no additional fields for the content type at all, but since
    all content types must have a title field, whatever its label, it isn't included
    here.
  prefs: []
  type: TYPE_NORMAL
- en: When we looked at the content edit form, we saw the title and body fields. The
    body field is listed here. The field is of a type meant to hold text without any
    specific use or format in mind. We'll be looking more at field types when we create
    a new content type later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The comments field is meant to hold a comment about the content. There may be
    several instances of this field, one for each comment created. A comment is actually
    a content entity type on its own, and so even though the comments are seen when
    viewing the article's content, the actual contents of the comment field is simply
    the ID of the comment.
  prefs: []
  type: TYPE_NORMAL
- en: The image field is used for displaying an image along with the content, allowing
    an image to be uploaded. The image field is a reference of the information needed
    to retrieve the actual image from where it is stored, and the article image field,
    if an image is being used, will contain the address of that record.
  prefs: []
  type: TYPE_NORMAL
- en: The final field is for tags. Think of tags as categorical information that can
    be used for searching for the content. This is using another reference field type
    like comments and images, that is, taxonomy. We will be looking at taxonomy more
    in Chapter 7.
  prefs: []
  type: TYPE_NORMAL
- en: '*Taxonomy* is a content structure, referred to as an *Entity* in Drupal. Another
    type of entity is a *User*. Article is a content type, also known as a *Bundle*,
    which is a sub-type of an Entity type known as a *Node*. Bundles can include Article,
    Page, Blog post, and other types of content that''s intended for readers.'
  prefs: []
  type: TYPE_NORMAL
- en: We can look at the other two tabs at the top of the page, Manage form display
    and Manage display when we create a content type. In fact, let's do that now!
  prefs: []
  type: TYPE_NORMAL
- en: Designing a content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already taken a look at the *Article* content type. It contains a title
    and a place to enter text, and allows the addition of an image and category tags.
    So, with all that, why would you want to create a content type? Well, because
    vanilla is a nice flavor, but not the only flavor!
  prefs: []
  type: TYPE_NORMAL
- en: We need an appointment list. Well, not really, but we're going to need an example
    of a type of content that is nothing like an article, and an appointment is a
    good example of that.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do after determining that a new content type is needed is
    designing it. Looking back at the Article content type, it had settings and fields.
    So will this one. It helps to decide in advance what those will be in order to
    create a design, so let's do that. We'll use two forms for the design – nothing
    fancy, just lists to refer to when entering information into the content type
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: Content type settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Setting | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | Appointment |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | Appointment information |'
  prefs: []
  type: TYPE_TB
- en: '| **Title field label** | Name |'
  prefs: []
  type: TYPE_TB
- en: '| **Default options** | Published Promoted  Sticky  Revision |'
  prefs: []
  type: TYPE_TB
- en: With this content type, we will pretend that we are in an office that gives
    appointments to its clients. The content type *Name* and *Description* values
    are self-evident.
  prefs: []
  type: TYPE_NORMAL
- en: The *Title field* label will be Name, since it will contain the name of the
    person who has the appointment.
  prefs: []
  type: TYPE_NORMAL
- en: The selected Default options will be *Published* and *Revision*. We are selecting
    *Published* because we want appointments to be active and set as soon as they
    are saved.
  prefs: []
  type: TYPE_NORMAL
- en: '*Promoted* is not set because we don''t want the appointments to be displayed
    on the front page like an article, nor do we want the most recently entered appointment
    to be the one shown. We will want the appointment nearest to the current date
    and time to be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sticky* is not set because we have no need for any appointment to remain on
    the front page.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we do set *Create new revision*, so that any time an appointment is
    changed, Drupal will save the previous version rather than simply overwriting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make no changes to the default settings on the other tabs since they
    meet our needs, and so they do not appear in the list. With our list complete,
    on the administrative menu, we can click *Structure*, then *Content types*, and
    then the *+Add content type* button, which will lead us to the page at `/admin/structure/types/add`.
    Once there, enter the information from the form, and after ensuring that the *Default
    options* settings are as they should be, as shown in the following form, click
    the *Save and manage fields* button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1176a3b5-148d-4eca-9ffd-05eed362f665.png)'
  prefs: []
  type: TYPE_IMG
- en: Fielding the content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have created the *Appointment* content type. At this point, it could
    be used for creating content. However, it is not yet constructed to fulfil its
    purpose. It only has two fields, one being the title, Name, and the other a field
    for body text, of which there will be none with this content type. We will need
    to do a little work to make this content type usable for our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: In order to add the necessary fields to the content type, it would be helpful
    to know what the choices are.
  prefs: []
  type: TYPE_NORMAL
- en: Field types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fresh installation of Drupal contains a number of field types that are ready
    to use, and a few that first need to be enabled in order to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GENERAL FIELDS:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boolean**: Can have only two values, such as Yes/No, On/Off or, with one
    value being understood, such as Completed. This is commonly represented by a checkbox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date**: Displays a date in whatever format is configured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email**: Accepts text formatted as a valid email address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link**: Accepts text formatted as a valid URL and the text that will be clicked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timestamp**: A long numeric value that stores a date, time, and time zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NUMERIC FIELDS:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number (decimal)**: A value that can have numerals before and after the decimal
    point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number (integer)**: A value that contains no fractional portion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number (float)**: A value that requires a large number of decimal positions
    and great precision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List (float)**: A floating point number that must match one from a list of
    values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List (integer)**: An integer value that must match one from a list of values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REFERENCE FIELDS (fields that refer to other content):**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content**: A reference to another piece of content, of one of the content
    types configured for use with the field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comments**: Used for accepting comments about the content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File**: A reference to a file that was uploaded to the system, such as a
    PDF'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: A reference to an uploaded image, such as a JPG or PNG'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taxonomy term**: A value or set group of information among others of a common
    category (taxonomy), such as tags, countries, months, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User:** A reference to a user account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other**: A reference to a custom type of entity (other than those mentioned
    previously)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TEXT FIELDS:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**List (text)**: A text field whose value must be one of a provided list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text (formatted)**: Text of a short length that can be formatted, such as
    being bold, italic, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text (formatted, long, with summary)**: Text that can be formatted, lengthy,
    and can have a separate summary for use as an abbreviated teaser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text (plain)**: A short piece of text that will not have any formatting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text (plain, long)**: Text that will not have any formatting and can be lengthy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIELDS REQUIRING ENABLING:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Address**: An address field that can be configured based on the country to
    which the address applies and the fields desired'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Computed Field**: A field that can be tied to programming to determine a
    certain value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datetime Range**: Stores a beginning and ending date in whichever format
    is needed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entity Reference Revisions**: Provides a reference to an entity and also
    provides for the storing of revisions whenever the entity is modified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple Google Maps**: Provides the ability to display a link to a Google
    map or a one-line address as a Google map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telephone**: For holding a validly formatted phone number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the fields that are available from a new Drupal installation. As additional
    modules are added, this list can grow.
  prefs: []
  type: TYPE_NORMAL
- en: Our content type field
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can see from the preceding lists, there are fields for most of the various
    types of information that you will need to store. It's not just a matter of the
    type of data, like text or number, but often what information the data represents,
    like a phone number or URL, and that's because there is often programming code
    that provides the formatting or validates what has been entered. For example,
    entering an email address in a phone number field will cause an error to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s take a look at a list of the information  that we will want to store
    for an appointment, and the type of field that we can use for that. We''ll also
    decide on a name for each field, which will be used for its label on the entry
    form, and help text with a a description to remind us or inform other users about
    the field''s use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Information needed | Field type | Label | Help Text |'
  prefs: []
  type: TYPE_TB
- en: '| Client name | text  (plain) | Name¹ |  |'
  prefs: []
  type: TYPE_TB
- en: '| Client phone number | text (plain)² | Phone | `###-###-####` |'
  prefs: []
  type: TYPE_TB
- en: '| Client email address | email | Email | For example, `bill@gmail.com` |'
  prefs: []
  type: TYPE_TB
- en: '| Appointment date and time | date | Date |  |'
  prefs: []
  type: TYPE_TB
- en: '| Who the appointment is with | list (text) | With | Select a name |'
  prefs: []
  type: TYPE_TB
- en: '| The purpose of the appointment | text (plain, long) | Reason |  |'
  prefs: []
  type: TYPE_TB
- en: '| The status of the appointment | list (text) | Status | Select a status |'
  prefs: []
  type: TYPE_TB
- en: ¹ This is the renamed Title field
  prefs: []
  type: TYPE_NORMAL
- en: ² There is a field type for telephone number, but it is not enabled, so we will
    use plain text
  prefs: []
  type: TYPE_NORMAL
- en: With our list prepared, it's time to create the fields for our content type.
  prefs: []
  type: TYPE_NORMAL
- en: Adding fields to the content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Still on the Manage *fields* page (`/admin/structure/types/manage/appointment/fields`),
    let''s first make a change to the one existing field: Body. We will not have body
    text in this content type, so:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the arrow next to Edit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Delete
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: confirm the deletion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that done, click the *+Add field* button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the fields shown in the preceding order for the most part. The page
    we see now has two dropdown select widgets: one for creating a new field, and
    one for reusing a field on this content type that already exists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping in mind that the Name field already exists in our content type, being
    the renamed Title field that all content types contain, the first field we will
    add is Client phone number:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the *Add a new field* dropdown
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and select *Text (plain)* from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new field, *Label*, appears, and is marked with a red asterisk, indicating
    that it is required that you type something in the field:'
  prefs: []
  type: TYPE_NORMAL
- en: The label, as found in our preceding table, will be **Phone**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Having entered the label, you will notice that to the right of the field that
    a *Machine name* appears. The machine name is the name by which Drupal will identify
    the field. Once you save the field, the label can be changed at any time, but
    the field name will not change, because it will already have been *set in stone* within
    the database. Were you to desire a specific machine name, now is the time it can
    be changed, by clicking the *Edit* link. You would be able to edit the name, keeping
    in mind that there are some naming rules, such as needing to use underscores rather
    than hyphens, and that the **field_** prefix cannot be removed. We have no need
    to override the field name:'
  prefs: []
  type: TYPE_NORMAL
- en: Click *Save and continue*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A new page is loaded, which is for defining the field storage. Fields in Drupal
    have three components: the *definition*, which describes the field, the *storage*,
    which defines how the field will be stored in the database, and the actual *contents*
    of the field for a given piece of content, when that content is created.'
  prefs: []
  type: TYPE_NORMAL
- en: The first field is *Maximum length*, and is required. For this field type, a
    standard (as opposed to long) text field is desired. The default is 255, meaning
    that the field can hold up to 255 characters. It's alright if less are entered
    when the content is created. You need only change this value if the contents should
    be of a particular length and no more. In the case of the phone field, it depends.
    If all client contacts will be local, or at least domestic, then it would be alright
    to limit the length to match the structure of your phone numbers. For example,
    in the U.S., phone numbers are ten digits. That said, the length of such a phone
    number can be greater than ten digits if entered with a format such as (212) 555-1212\.
    So, be careful when limiting the length. We'll just leave it at 255.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Allowed number of values* field defines whether a piece of content, an
    appointment in this case, can contain more than one occurrence of this field.
    We have the option to leave it as **Limited** to one value, or change the number
    to another specific quantity, or click the dropdown widget and selecting **Unlimited**
    to indicated any number of instances of this field can be created. We want to
    be able to take two contact numbers for the client in case the need to contact
    them arises and attempts of using the first number are not successful:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the 1 to 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *Save field settings*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third, and final, page in the field creation process is now displayed. If
    we want to change the storage settings that we just saved, we could click the
    Field settings tab and do so.
  prefs: []
  type: TYPE_NORMAL
- en: The storage settings for a field can not be changed once content has been created
    that uses that field, unless all such content is first deleted. Attempts to click
    this tab after content has been created will result in a display of the settings
    with a message indicating that they can no longer be changed due to content existing.
  prefs: []
  type: TYPE_NORMAL
- en: The first field in the form is for the *Label*. This is the value that we entered
    earlier. It can be changed now if we have since decided on a new name. The *Machine
    name* can no longer be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the *Help text* field, if any, will be displayed on the content
    form beneath the field you are creating. We''ll use the entry from our table to
    provide the content creator with a hint as to the field contents, which in our
    case is the format of the phone number used locally:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter **###-###-####** in the *Help Text* field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Help Text field can contain HTML, as indicated by its own help text. For
    example, we could elaborate on our description by instead entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter a phone number with the format <strong>###-###-####</strong>
  prefs: []
  type: TYPE_NORMAL
- en: 'Which would be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter a phone number with the format **###-###-####**
  prefs: []
  type: TYPE_NORMAL
- en: The next field in the form is the *Required* field. If this box is checked,
    the field will appear in the content form with its label containing whatever formatting
    is defined for a required field in the site theme. By default, this would be a
    red asterisk, as we see in the current form beside *Label*.
  prefs: []
  type: TYPE_NORMAL
- en: If a field is required, content cannot be saved unless a value has been provided
    for the field. Be careful not to require a field that could legitimately be left
    empty. Examples of this are a zip code or post code for an optional address, a
    list of options where none may apply, or a checkbox, where empty indicates "no".
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will leave the phone field as not being required. The final
    field is for a default value. Of course, a phone number field is unlikely to have
    a default value, given that we have no idea what the value will be. There are
    circumstances where a default value makes sense. For example, if we have a grouping
    of address fields, one of which is Country, and if most of the entries will be
    from the United Kingdom, it would make sense to offer it as a default value rather
    than forcing the user to scroll down a list of countries to the U's.
  prefs: []
  type: TYPE_NORMAL
- en: If you provide a default value, be prepared for erroneous content due to users
    accidentally leaving the field untouched and saving the form with the default
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will leave the form containing no default value:'
  prefs: []
  type: TYPE_NORMAL
- en: Click *Save settings*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, we have saved our first field configuration, *Phone*. Technically,
    the field does not exist until content is created using this field, but its definition
    and configuration exist at this point. You can see that our content type field
    list for the *Appointment* content type has changed, with *field_phone* having
    been added to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will follow the same process for each of the remaining fields in our table.
    For each of them, I note any considerations for their storage and configuration
    settings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Date*: *date* field type – the checkbox for *Required* should be checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '*With*: *list (text)* field type – in the *Allowed values list* box, add 2-3
    names in the form last name, first name, one person per line. As an example, I
    have added the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jones, Janet**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smith, Steve**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Status:* *list (text)* field type – in the *Allowed values list* box, add
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pending**'
  prefs: []
  type: TYPE_NORMAL
- en: '**active**'
  prefs: []
  type: TYPE_NORMAL
- en: '**canceled**'
  prefs: []
  type: TYPE_NORMAL
- en: '**completed**'
  prefs: []
  type: TYPE_NORMAL
- en: And in the *Default Value* dropdown, select **pending**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having created all of the fields in our table, the Manage Fields page should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad74ad15-1ddd-4297-9a1a-07bf4369f101.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned the following: firstly, what a content type
    is, and then why we would want to create one. Furthermore, we looked at content
    fields, found out what they are, and looked at what field types are available.
    Then, we moved on and looked at how to design and create content types, before
    finally finishing by adding fields to our content types.'
  prefs: []
  type: TYPE_NORMAL
- en: What a content type is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why we would want to create a content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What content type fields are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which field types are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to design a content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add fields to the content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will return to our content type later in this book when we learn about creating
    content for it, configuring the content creation form, and designing the way the
    content is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We added fields to a new content type in this chapter. It is also possible,
    using the same administrative pages, to edit existing content types and add new
    fields to them, change existing fields, and remove fields that are no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about administering users, their roles, and
    the permissions assigned to those roles.
  prefs: []
  type: TYPE_NORMAL
