- en: Chapter 5. Modules, Widgets, and Helpers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 模块、小部件和辅助工具
- en: Like its predecessor, Yii2 provides several useful tools and reusable code blocks
    to help us quickly develop our applications, known as widgets and helpers. Yii2
    also provides us with the ability to build and include mini applications known
    as modules that can enable us to rapidly add new features to our application while
    maintaining a clear separation of concerns in our main application and any extended
    functionality. In this chapter, we'll cover the basics of building and working
    with modules within our application. We'll also cover several of Yii2's built-in
    widgets and helpers and learn how we can implement our own custom widgets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与其前身一样，Yii2提供了几个有用的工具和可重用的代码块，帮助我们快速开发应用程序，这些工具和代码块被称为小部件和辅助工具。Yii2还为我们提供了构建和包含称为模块的迷你应用程序的能力，这使我们能够快速向应用程序添加新功能，同时在我们的主要应用程序和任何扩展功能中保持关注点的清晰分离。在本章中，我们将介绍在我们的应用程序中构建和使用模块的基本知识。我们还将介绍Yii2的一些内置小部件和辅助工具，并学习我们如何实现自己的定制小部件。
- en: Modules
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: In Yii2, modules are considered to be mini self-contained software packages
    containing the complete MVC stack. When paired with an application, modules provide
    a way to extend applications by adding new features and tools without adding code
    to our main code base. Consequently, modules are a great way to create and reuse
    code. When creating applications with Yii2, you'll most likely work with prebuilt
    models, such as Gii or the Yii2 dev module; however, modules can also be custom
    applications created specifically to build upon and separate code for a specific
    purpose. In this section, we'll go over the basic modules in Yii2 as well as cover
    how to create and implement them within our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中，模块被视为包含完整MVC栈的迷你自包含软件包。当与应用程序配对时，模块通过在不向我们的主要代码库中添加代码的情况下添加新功能和工具，为扩展应用程序提供了一种方法。因此，模块是创建和重用代码的绝佳方式。在用Yii2创建应用程序时，你很可能会使用预构建的模型，例如Gii或Yii2开发模块；然而，模块也可以是专门为构建特定目的而创建的定制应用程序，用于在特定目的上构建和分离代码。在本节中，我们将介绍Yii2中的基本模块，以及如何在我们的应用程序中创建和实现它们。
- en: Module components
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块组件
- en: 'Compared to Yii1, modules in Yii2 haven''t changed much. At their core, they
    still consist of the same structure and share many of the same ideas. In Yii2,
    modules are stored in the `modules` directory of our application root and are
    registered with our application through our web or console configuration files.
    If we were to break down a basic module, its directory structure and core files
    would be as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与Yii1相比，Yii2中的模块变化不大。在核心上，它们仍然由相同的结构组成，并共享许多相同的思想。在Yii2中，模块存储在我们的应用程序根目录的`modules`目录中，并通过我们的网络或控制台配置文件与我们的应用程序注册。如果我们分解一个基本模块，其目录结构和核心文件如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each module registered with our application resides within its own dedicated
    module folder, which registers itself with its corresponding route with our URL
    manager by default (in this instance, the `mymodule` folder will correspond to
    the `/mymodule` URI route). Consequently, any controller within the module, unless
    otherwise registered with our URL manager, will be available as a dedicated controller
    route within the module itself. For example, the `DefaultController.php` controller
    will map to the root route of our module `(/mymodule`), while any other controller
    will map to the controller name within the `/mymodule` URI.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中注册的每个模块都位于其自己的专用模块文件夹中，该文件夹默认通过其对应的路由与我们的URL管理器注册（在本例中，`mymodule`文件夹将对应于`/mymodule`
    URI路由）。因此，除非在URL管理器中另行注册，否则模块中的任何控制器都将作为模块本身的专用控制器路由可用。例如，`DefaultController.php`控制器将映射到我们模块的根路由（`/mymodule`），而任何其他控制器将映射到`/mymodule`
    URI中的控制器名称。
- en: Additionally, modules provide full support for the basic MVC architecture within
    Yii2\. Each module may have its own set of models, views, controllers, and even
    components. Like complete applications, modules also have support for their own
    views and layouts, allowing them to be styled and managed differently than our
    main application. As part of a Yii2 application, they also have complete access
    to the models and classes implemented within our main application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，模块在Yii2中提供了对基本MVC架构的全面支持。每个模块可能都有自己的模型、视图、控制器，甚至组件。像完整的应用程序一样，模块也有自己的视图和布局的支持，允许它们以不同于我们的主要应用程序的方式被样式化和管理。作为Yii2应用程序的一部分，它们也完全访问我们主要应用程序中实现的模型和类。
- en: The module class structure
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块类结构
- en: 'The most important part of a module is the module class defined in the `Module.php`
    file in the root directory of our module. At its most basic level, a module must
    simply extend the `yii\base\Module` class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模块最重要的部分是在我们模块根目录下的`Module.php`文件中定义的模块类。在最基本层面上，一个模块必须简单地扩展`yii\base\Module`类：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Like everything in Yii2, however, modules can define their custom initialization
    code and configuration files by overloading the public `init()` method of our
    class. At the minimum, when overloading this method, we'll want to ensure that
    the parent `init()` method from `yii\base\Module` is called.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就像Yii2中的所有内容一样，模块可以通过覆盖我们类中的公共`init()`方法来定义它们自己的初始化代码和配置文件。至少，当我们覆盖这个方法时，我们想要确保调用父类`yii\base\Module`中的`init()`方法。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can also define additional custom parameters with our module by adding values
    to the `yii\base\Module::$params` array. Additionally, custom configurations can
    be registered to our module using the `Yii::configure()` static method. This configuration
    can be a simple key-value pair, or it can be a complete configuration file, such
    as those used in our web and console configuration files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过向`yii\base\Module::$params`数组中添加值来定义我们模块的附加自定义参数。此外，可以使用`Yii::configure()`静态方法将自定义配置注册到我们的模块中。这种配置可以是一个简单的键值对，也可以是一个完整的配置文件，例如我们在Web和控制台配置文件中使用的那些。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Yii2 configuration syntax can be explored in detail in the Yii2 guide located
    at [http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html](http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在位于[http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html](http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html)的Yii2指南中详细了解Yii2的配置语法。
- en: Controllers
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: 'Within a module, controllers are placed within the `controllers/` directory
    of the main module, and as per the Yii2 convention, they live within the module''s
    namespace. For example, to create the default controller for our `mymodule` module,
    we would add the following to `app/modules/mymodule/controllers/DefaultController.php`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个模块中，控制器被放置在主模块的`controllers/`目录中，并且根据Yii2的约定，它们位于模块的命名空间中。例如，为了创建我们`mymodule`模块的默认控制器，我们会在`app/modules/mymodule/controllers/DefaultController.php`中添加以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Like other controllers within our project, the default action within our controller
    is the index action. Since controllers within our module extend `yii\web\controller`,
    we can adjust our default action by setting the `yii\web\controller::$defaultAction`
    parameter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们项目中的其他控制器一样，我们控制器中的默认操作是索引操作。由于我们模块中的控制器扩展了`yii\web\controller`，我们可以通过设置`yii\web\controller::$defaultAction`参数来调整我们的默认操作。
- en: 'By default, Yii2 will route the `/mymodule` URI route to the `DefaultController`
    class. Should we wish to change this, however, we can adjust the `$defaultRoute`
    parameter of our `Module` class. For instance, if we have a controller to handle
    users called `UserController`, we can make our default route map to our controller,
    as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Yii2会将`/mymodule` URI路由路由到`DefaultController`类。但是，如果我们想改变这个设置，我们可以调整我们`Module`类的`$defaultRoute`参数。例如，如果我们有一个名为`UserController`的控制器来处理用户，我们可以使默认路由映射到我们的控制器，如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Consequently, navigating to `/mymodule` within our module will result in our
    `UserController` class being executed rather than `DefaultController`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在模块内导航到`/mymodule`将导致我们的`UserController`类被执行而不是`DefaultController`。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember that unless otherwise specified, controllers will always be available
    in their named URI. In our example, both `/mymodule` and `/mymodule/user` will
    map to the same controller and perform similar actions. If you do not want the
    named controller route to be enabled after adjusting the `$defaultRoute` parameter,
    adjust your router accordingly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，除非另有说明，否则控制器将始终在其命名的URI中可用。在我们的例子中，`/mymodule`和`/mymodule/user`都将映射到相同的控制器并执行类似操作。如果您在调整`$defaultRoute`参数后不希望启用命名的控制器路由，请相应地调整您的路由器。
- en: Views and layouts
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图和布局
- en: Since controllers within modules extend from `yii\web\controller`, we can take
    advantage of view and layout rendering within our module. To get started with
    rendering our view, we first need to define which layout we want to use. By default,
    modules will use whatever the parent modules layout file is until it reaches the
    main layout file, and then it will default to the layout file defined in `app/views/layouts`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块中的控制器扩展自`yii\web\controller`，我们可以利用模块中的视图和布局渲染。要开始渲染我们的视图，我们首先需要定义我们想要使用哪个布局。默认情况下，模块将使用父模块的布局文件，直到达到主布局文件，然后它将默认到`app/views/layouts`中定义的布局文件。
- en: 'If we do not want to use our application''s layout file, we can define a custom
    layout file for our module by setting the `yii\base\Module::$layout` property,
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想使用我们应用程序的布局文件，我们可以通过设置`yii\base\Module::$layout`属性来为我们的模块定义一个自定义布局文件，如下所示：
- en: 'We will then define a layout file called `main.php` within the `app/modules/mymodules/views/layouts`
    folder:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在`app/modules/mymodules/views/layouts`文件夹中定义一个名为`main.php`的布局文件：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The only component needed in a layout file to render our view files is `<?php
    echo $content ?>`. When working with views, however, you may find many things
    you would expect to work in views will not however unless a full HTML document
    is defined with the `beginPage()`, `endPage()`, `beginBody()`, `endBody()`, and
    `head()` methods from `yii\base\view`. For more information on these methods,
    refer to the layout section of the Yii2 documentation at [http://www.yiiframework.com/doc-2.0/guide-structure-views.html#layouts
    and the yii\base\view class at http://www.yiiframework.com/doc-2.0/yii-base-view.html](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#layouts%20and%20the%20yii%5Cbase%5Cview%20class%20at%20http://www.yiiframework.com/doc-2.0/yii-base-view.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件中渲染我们的视图文件所需的唯一组件是`<?php echo $content ?>`。然而，当与视图一起工作时，你可能会发现许多你期望在视图中工作的事情却不会工作，除非使用`beginPage()`、`endPage()`、`beginBody()`、`endBody()`和`head()`方法定义一个完整的HTML文档，这些方法来自`yii\base\view`。有关这些方法的更多信息，请参阅Yii2文档中的布局部分[http://www.yiiframework.com/doc-2.0/guide-structure-views.html#layouts]和`yii\base\view`类[http://www.yiiframework.com/doc-2.0/yii-base-view.html]。
- en: 'After defining our layout, we''ll need to define the view file for our `DefaultController::actionIndex()`
    method, where we previously declared that we wanted to render the index view.
    Within modules, views are PHP files with the same name as the requested view within
    our `render()` method, and they map to the `app/modules/mymodule/views/<controller>`
    path. In our case, this view maps to `app/modules/mymodule/views/default/index.php`.
    For now, let''s simply add the following to this view file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 定义我们的布局后，我们需要定义我们的`DefaultController::actionIndex()`方法的视图文件，其中我们之前声明了我们要渲染索引视图。在模块中，视图是与我们的`render()`方法中请求的视图同名的PHP文件，并且它们映射到`app/modules/mymodule/views/<controller>`路径。在我们的例子中，这个视图映射到`app/modules/mymodule/views/default/index.php`。现在，让我们简单地添加以下内容到这个视图文件中：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Registering modules
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册模块
- en: 'Once we have created our module, we need to register it with our configuration
    file by defining a `modules` section within our `app/config/web.php` file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了我们的模块，我们需要通过在`app/config/web.php`文件中定义一个`modules`部分来将其注册到我们的配置文件中：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, if we want to pass additional parameters to our module, we can
    define our configuration as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想向我们的模块传递额外的参数，我们可以定义我们的配置如下：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Like many configuration options in Yii2, modules can receive additional arguments
    using the previously mentioned configuration file. Any key-value pair will populate
    the public property of the specified class with the value listed in the array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与Yii2中的许多配置选项一样，模块可以通过之前提到的配置文件接收额外的参数。任何键值对都会将数组中列出的值填充到指定类的公共属性中。
- en: Dynamically registering modules
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 动态注册模块
- en: Often when working with large projects, several components will be broken down
    into modules that need to be registered with our application. Moreover, there
    may be circumstances where only certain modules need to be registered at a given
    time. One way to automate the process of registering many different modules at
    once is to create a dynamic configuration script and let our application scan
    our modules for us.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型项目时，通常会将几个组件分解成需要注册到我们的应用程序中的模块。此外，可能存在只有某些模块需要在特定时间注册的情况。一次自动注册多个不同模块的过程的一种方法是为我们的应用程序创建一个动态配置脚本，并让我们的应用程序为我们扫描模块。
- en: 'To do this, we first need to adjust the modules section of our `app/config/web.php`
    file to load a custom configuration for our modules, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们首先需要调整`app/config/web.php`文件中的模块部分，为我们的模块加载自定义配置，如下所示：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, we''ll define `app/config/module.php`, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义`app/config/module.php`，如下所示：
- en: First, we'll want to set the directory that we want to scan as well as try to
    load a precached configuration file, should one exist.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将想要设置我们想要扫描的目录，以及尝试加载一个预先缓存的配置文件，如果存在的话。
- en: '[PRE10]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Then, we'll try to return our cached configuration file, should it exist.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将尝试返回我们的缓存配置文件，如果它存在的话。
- en: '[PRE11]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we don''t have a precached configuration file, we''ll then want to iterate
    all the folders in our `app/modules` directory and then dynamically build a module
    configuration array. Additionally, we''ll also attempt to load a module specific
    configuration file located at `app/modules/<module>/config/main.php`. This will
    enable us to package the configuration with our module without making changes
    to our `app/config/web.php` file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们没有预先缓存的配置文件，我们将迭代我们的`app/modules`目录中的所有文件夹，然后动态构建一个模块配置数组。此外，我们还将尝试加载位于`app/modules/<module>/config/main.php`的模块特定配置文件。这将使我们能够将配置与我们的模块打包在一起，而无需更改我们的`app/config/web.php`文件：
- en: '[PRE12]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we generate a cached version of our generated configuration file to
    eliminate duplicate work on each request. Now, when adding new modules to our
    application, we simply need to remove the `runtime/modules.confg.php` file rather
    than tediously update our web configuration file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们生成生成配置文件的缓存版本，以消除每个请求上的重复工作。现在，当向我们的应用程序添加新模块时，我们只需简单地删除`runtime/modules.confg.php`文件，而不是繁琐地更新我们的网络配置文件：
- en: '[PRE13]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Altogether, our dynamic configuration file will look as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们的动态配置文件将如下所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using a configuration file and the module registration process, we can drastically
    reduce our configuration file management overhead and make our application extremely
    flexible, should we package features into separate modules that may or may not
    be installed at the same time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用配置文件和模块注册过程，我们可以大幅减少我们的配置文件管理开销，并使我们的应用程序极其灵活，如果我们将功能打包到可能或可能不会同时安装的单独模块中。
- en: Bootstrapping modules
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引导模块
- en: 'Some modules, such as the `debug` module, need to be executed on every request
    when enabled. To ensure that these modules run on every request, we can Bootstrap
    them by adding them to the Bootstrap section of our configuration file. If you''re
    familiar with Yii1, the `bootstrap` option is used in a manner similar to the
    Yii1 preload configuration option:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块，如`debug`模块，在启用时需要在每个请求上执行。为了确保这些模块在每次请求上运行，我们可以通过将它们添加到配置文件的引导部分来引导它们。如果你熟悉Yii1，`bootstrap`选项的使用方式与Yii1的预加载配置选项类似：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Due to the way Yii2 lazily loads new objects, you may encounter race conditions
    between Yii2's autoloading of the class and the actual population of that object.
    The `Bootstrap` parameter of our configuration option will ensure that Yii2 will
    autoload and register the object early on in the execution flow rather than waiting
    until the class it requires.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Yii2按需懒加载新对象的方式，你可能会遇到Yii2自动加载类和实际填充该对象之间的竞争条件。我们的配置选项的`Bootstrap`参数将确保Yii2在执行流程的早期自动加载并注册对象，而不是等待所需的类。
- en: Be careful with adding items to the `bootstrap` section, however, as forcing
    Yii2 to register objects before they're needed can introduce performance degradation
    into your application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`bootstrap`部分添加项目时要小心，因为强制Yii2在需要之前注册对象可能会降低你的应用程序的性能。
- en: Accessing modules
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问模块
- en: 'When working with modules, you may need to get the instance of the currently
    running module to either access the module ID and parameters or components associated
    to the module. To retrieve the current active instance of a module, you can use
    the `getInstance()` method on the module class directly:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当与模块一起工作时，你可能需要获取当前正在运行的模块的实例，以便访问模块ID和参数或与模块关联的组件。要检索当前活动的模块实例，可以直接在模块类上使用`getInstance()`方法：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alternatively, if you know the name of the module, you can access it through
    the `\Yii` instance:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你知道模块的名称，你可以通过`\Yii`实例来访问它：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Moreover, if you are working in a controller, you can access a module from
    within a running controller using the following method:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你在一个控制器中工作，你可以使用以下方法在运行中的控制器内访问一个模块：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you have an instance of the module, you can access any public properties,
    parameters, and components associated with that module:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了模块的实例，你可以访问与该模块相关的任何公共属性、参数和组件：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Managing modules with Composer
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Composer 管理模块
- en: 'When packaging projects, it''s often beneficial to manage and version our modules
    independent of our main applications. Using Composer and semantic versioning,
    we can manage our modules such that they are versioned to specific points in time
    in our application while still enabling developers to work with us. Moreover,
    we can also configure our main project to automatically install modules for us
    on deployment, which can drastically reduce the overhead involved in managing
    modules:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在打包项目时，通常有益于独立于我们的主应用程序来管理和版本化我们的模块。使用 Composer 和语义版本化，我们可以管理我们的模块，使它们在我们的应用程序中的特定时间点进行版本化，同时仍然允许开发者与我们合作。此外，我们还可以配置我们的主项目，在部署时自动为我们安装模块，这可以大大减少管理模块的开销：
- en: To get started with managing our modules with Composer, we first need to move
    our module source code out of our main application and push it to our DCVS repository.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用 Composer 管理我们的模块，我们首先需要将我们的模块源代码从主应用程序中移出，并将其推送到我们的 DCVS 仓库。
- en: 'Next, we need to create a `composer.json` file within our new module''s repository:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在我们新模块的仓库中创建一个 `composer.json` 文件：
- en: '[PRE20]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The tool we are using to manage the installation of our modules is called composer-installers.
    To automatically install modules to our modules directory, we need to explicitly
    declare the type of our Composer package. The composer-installers project does
    not support Yii-specific modules currently; however, for our purpose, the `drupal-module`
    type does what we need.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们用来管理模块安装的工具称为 composer-installers。为了自动将模块安装到我们的模块目录中，我们需要明确声明我们的 Composer
    包的类型。composer-installers 项目目前不支持 Yii 特定的模块；然而，为了我们的目的，`drupal-module` 类型可以满足我们的需求。
- en: 'Next, we''ll need to make some changes to our main projects'' `composer.json`
    file. The first change we need to make is the inclusion of the composer-installers
    dependency. We can do this by adding the following to the require block of our
    `composer.json` file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要对我们的主项目的 `composer.json` 文件进行一些修改。我们需要做的第一个修改是在 `composer.json` 文件的
    require 块中包含 composer-installers 依赖项。我们可以通过在 `composer.json` 文件的 require 块中添加以下内容来实现：
- en: '[PRE21]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The second change we need to make to our main project''s `composer.json` file
    is reference our modules'' DCVS repository. We can do this by creating a repositories
    block populated with the DCVS information for our module `repository` and then
    adding the module to our `require` block:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对主项目的 `composer.json` 文件进行的第二个修改是引用我们模块的 DCVS 仓库。我们可以通过创建一个包含我们模块 `repository`
    的 DCVS 信息的 repositories 块，然后将模块添加到我们的 `require` 块中来实现：
- en: '[PRE22]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we need to add the installation information to the extras section of
    our `composer.json` file. This provides the required information to the composer-installers
    package:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将安装信息添加到 `composer.json` 文件的 extras 部分。这为 composer-installers 包提供了所需的信息：
- en: '[PRE23]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, we''ll want to ensure that our module directory is excluded from our
    DCVS repository. We can do this adding a .`gitignore` file to our module directory
    with the following information:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们想要确保我们的模块目录被排除在我们的 DCVS 仓库之外。我们可以通过在我们的模块目录中添加一个包含以下信息的 `.gitignore` 文件来实现：
- en: '[PRE24]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we can run Composer to update and automatically install our module:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以运行 Composer 来更新和自动安装我们的模块：
- en: '[PRE25]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since we have specified that we wanted to use the `dev-master` branch of our
    `mymodule` repository, Composer will clone the project into our application, which
    will allow us to develop it independent of our main application, as usual. During
    deployments, however, you should semantically version your module so that the
    versioned copy of the module is downloaded rather than cloned.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们指定了想要使用 `mymodule` 仓库的 `dev-master` 分支，Composer 将将项目克隆到我们的应用程序中，这将允许我们像往常一样独立于主应用程序开发它。然而，在部署期间，你应该对模块进行语义版本化，以便下载模块的版本化副本而不是克隆。
- en: Our module has now been installed from Composer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主模块现在已通过 Composer 安装。
- en: Modules in summary
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块概述
- en: Modules are best used in large applications where certain features or reusable
    components need to be created. As we've shown in this section, modules are extremely
    powerful and can be used to extend our application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 模块最适合在大型应用程序中使用，在这些应用程序中需要创建某些功能或可重用的组件。正如本节所展示的，模块非常强大，可以用来扩展我们的应用程序。
- en: Widgets
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件
- en: In Yii2, widgets are reuseable code blocks that are used in views to add configurable
    user interface logic to our application in an object-oriented way. Yii2 comes
    with several different types of reusable widgets, some of which we have already
    seen in previous chapters. Custom widgets can also be created to create tools
    that can be reused across multiple projects. In this section, we'll go over the
    basic types of widgets, how to use them, and how to implement our own within our
    applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii2中，小部件是可重用的代码块，用于在视图中以面向对象的方式添加可配置的用户界面逻辑到我们的应用程序中。Yii2自带了多种不同类型的小部件，其中一些我们在前面的章节中已经见过。也可以创建自定义小部件来创建可以在多个项目中重用的工具。在本节中，我们将介绍小部件的基本类型、如何使用它们以及如何在我们的应用程序中实现它们。
- en: Using widgets
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用小部件
- en: 'As a presentation layer tool, widgets are most commonly used within our view
    files. In Yii2, widgets can be used in one of two distinct ways. The first way
    to use widgets is to call the `yii\base\Widget::widget()` method on a supported
    widget within a view. This method takes a configuration array as an option and
    returns a rendered widget as a result. For instance, to display a Twitter Bootstrap
    3 style alert on our page, we can use the `yii\bootstrap\Alert` widget as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为表示层工具，小部件通常在我们的视图文件中使用。在Yii2中，小部件可以通过两种不同的方式使用。使用小部件的第一种方式是在视图中的一个支持小部件上调用`yii\base\Widget::widget()`方法。此方法接受一个配置数组作为选项，并返回一个渲染的小部件作为结果。例如，要在我们的页面上显示Twitter
    Bootstrap 3样式的警报，我们可以使用以下`yii\bootstrap\Alert`小部件：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Alternatively, we can construct an instance of a specific widget using `yii\base\widget::begin()`
    and `yii\base\widget::end()` to construct our widget. Using our previous example,
    this will look as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`yii\base\widget::begin()`和`yii\base\widget::end()`来构造特定的小部件实例。使用我们之前的例子，这将如下所示：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Using widgets](img/00036.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用小部件](img/00036.jpeg)'
- en: What both Alert widgets will look like once rendered
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 两个警报小部件渲染后的样子
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a view object, widgets are responsible for registering and loading their
    own assets to ensure that they are presented properly. This is why we can create
    an instance of `yii\bootstrap\Alert` and see an alert rendered with all the appropriate
    styles and functionalities.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作为视图对象，小部件负责注册和加载它们自己的资产以确保它们被正确呈现。这就是为什么我们可以创建`yii\bootstrap\Alert`的实例并看到带有所有适当样式和功能的警报被渲染。
- en: Commonly used built-in widgets
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常用内置小部件
- en: To help quickly develop applications, Yii2 comes with several powerful widgets
    built in that we can use to jumpstart development.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助快速开发应用程序，Yii2内置了几个强大的小部件，我们可以使用它们来加速开发。
- en: Bootstrap widgets
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bootstrap小部件
- en: 'One of the main widget types Yii2 provides is specific to Twitter Bootstrap
    3 styles and provides a quick and easy way to add a functionality to our application.
    When working with Bootstrap widgets, Yii2 will inject the necessary HTML, CSS,
    and JavaScript objects into the DOM for us. However, this can be optimized by
    including the core Bootstrap assets within our application''s asset manager, `AppAsset.php`,
    located in your `@app/assets` directory:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2提供的主要小部件类型之一是针对Twitter Bootstrap 3样式的，它为我们提供了快速简单地向应用程序添加功能的方法。当使用Bootstrap小部件时，Yii2会自动将必要的HTML、CSS和JavaScript对象注入DOM中。然而，这可以通过在我们的应用程序的资产管理者`AppAsset.php`中包含核心Bootstrap资产来优化，该文件位于您的`@app/assets`目录中：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We'll cover `AssetManager` in more detail in [Chapter 6](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 6. Asset Management"), *Asset Management*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7 "第6章。资产管理")中更详细地介绍`AssetManager`，*资产管理*。
- en: 'All Bootstrap-specific widgets belong to the `\yii\bootstrap` namespace. These
    core widgets are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Bootstrap特定的小部件都属于`\yii\bootstrap`命名空间。这些核心小部件如下：
- en: '| Widget | Result |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 结果 |'
- en: '| --- | --- |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ActiveForm | A styled ActiveForm instance |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| ActiveForm | 一个样式化的ActiveForm实例 |'
- en: '| Alert | A style alert |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 警报 | 一种样式警报 |'
- en: '| Button | A styled button |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 一个样式化的按钮 |'
- en: '| Button Dropdown | A button drop-down group |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 按钮下拉 | 一个按钮下拉组 |'
- en: '| Button Group | A button group |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 按钮组 | 一个按钮组 |'
- en: '| Carousel | An images or a text carousel |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 轮播 | 图片或文本轮播 |'
- en: '| Collapse | An accordion collapse JavaScript widget |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 折叠 | 一个手风琴折叠JavaScript小部件 |'
- en: '| Dropdown | A drop-down menu |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 下拉菜单 | 一个下拉菜单 |'
- en: '| Model | A model |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 模型 | 一个模型 |'
- en: '| Nav | A navigation menu |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 导航 | 一个导航菜单 |'
- en: '| NavBar | A navigation top bar |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| NavBar | 一个导航顶部栏 |'
- en: '| Progress | A styled process bar |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 进度条 | 一个样式化的进度条 |'
- en: '| Tabs | A styled tab |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 标签页 | 一个样式化的标签页 |'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More information on Bootstrap-specific widgets can be found on the Yii guide
    at [http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html](http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html).
    More information on Twitter Bootstrap 3 can be found at [http://getbootstrap.com](http://getbootstrap.com).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Bootstrap 特定小部件的信息可以在 Yii 指南中找到，链接为 [http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html](http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html)。更多关于
    Twitter Bootstrap 3 的信息可以在 [http://getbootstrap.com](http://getbootstrap.com)
    找到。
- en: jQuery UI widgets
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery UI 小部件
- en: 'Through an official Yii2 extension, Yii2 also provides several jQuery-UI-specific
    widgets. Support for jQuery UI widgets can be added to our application by including
    the `yii2-jui` Composer package in our application:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过官方 Yii2 扩展，Yii2 还提供了一些 jQuery-UI 特定的小部件。可以通过在我们的应用程序中包含 `yii2-jui` Composer
    包来将 jQuery UI 小部件的支持添加到我们的应用程序中：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once installed, the jQuery UI package provides support for the following widgets
    under the `\yii\jui` namespace:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，jQuery UI 包在 `\yii\jui` 命名空间下提供了以下小部件的支持：
- en: '| Widget | Result |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 结果 |'
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Accordion | An accordion element |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 折叠面板 | 一个折叠面板元素 |'
- en: '| AutoComplete | An autocomplete element |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 自动完成 | 一个自动完成元素 |'
- en: '| DatePicker | A date time picker object |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 日期选择器 | 一个日期时间选择器对象 |'
- en: '| Dialog | A dialog box |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 对话框 | 一个对话框 |'
- en: '| Draggable | A draggable element |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 可拖动 | 一个可拖动元素 |'
- en: '| Droppable | A droppable element |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 可丢弃 | 一个可丢弃元素 |'
- en: '| Menu | A menu |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 菜单 | 一个菜单 |'
- en: '| ProgressBar | A styled progress bar |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 进度条 | 一个样式化的进度条 |'
- en: '| Resizable | A resizable element |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 可调整大小 | 一个可调整大小的元素 |'
- en: '| Selectable | A selectable element |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 可选择 | 一个可选择元素 |'
- en: '| Slider | A slider |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 滑块 | 一个滑块 |'
- en: '| SliderInput | An input slider |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 滑块输入 | 一个输入滑块 |'
- en: '| Sortable | A sortable element |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 可排序 | 一个可排序元素 |'
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: More information on jQuery-UI-specific widgets can be found in the Yii guide
    at [http://www.yiiframework.com/doc-2.0/guide-widget-jui.html](http://www.yiiframework.com/doc-2.0/guide-widget-jui.html).
    More information on jQuery UI can be found at [https://jqueryui.com](https://jqueryui.com).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 jQuery-UI 特定小部件的信息可以在 Yii 指南中找到，链接为 [http://www.yiiframework.com/doc-2.0/guide-widget-jui.html](http://www.yiiframework.com/doc-2.0/guide-widget-jui.html)。更多关于
    jQuery UI 的信息可以在 [https://jqueryui.com](https://jqueryui.com) 找到。
- en: Yii-specific widgets
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Yii 特定小部件
- en: Yii2 comes with support for familiar Yii1 widgets such as ActiveForm and GridView,
    both of which we explored in previous chapters. All widgets in Yii2 that are specific
    to Yii2 are namespaced under `\yii\widget`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Yii2 支持熟悉的 Yii1 小部件，如 ActiveForm 和 GridView，这两个小部件我们在前面的章节中都有探讨。所有特定于 Yii2 的小部件都命名空间在
    `\yii\widget` 下。
- en: '| Widget | Result |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 小部件 | 结果 |'
- en: '| --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ActiveForm | An ActiveForm instance used to display Yii2 forms |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| ActiveForm | 用于显示 Yii2 表单的 ActiveForm 实例 |'
- en: '| GridView | A view to display model and data provider data in a grid table
    view |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 网格视图 | 一个用于在网格表格视图中显示模型和数据提供者数据的小部件 |'
- en: '| DetailView | A view to display data for a specific modal |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 详细视图 | 一个用于显示特定模态数据的视图 |'
- en: '| ListView | A list view to display multiple modals on a single page |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 列表视图 | 一个列表视图，用于在单个页面上显示多个模态框 |'
- en: '| AjaxForm | A widget to construct an Ajax form |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| Ajax表单 | 一个用于构建 Ajax 表单的小部件 |'
- en: '| LinkPager | A widget to display a pagination element for multiple records
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 链接分页器 | 一个用于显示多个记录的分页小部件 |'
- en: '| LinkSorter | A widget to sort data from a data provider |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 链接排序器 | 一个用于对数据提供者中的数据进行排序的小部件 |'
- en: '| Pjax | An implementation of jQuery''s pjax functionality in Yii2 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| Pjax | Yii2 中 jQuery 的 pjax 功能的实现 |'
- en: '| Breadcrumb | A widget to display a breadcrumb trail |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 面包屑 | 用于显示面包屑路径的小部件 |'
- en: '| ContentDecorator | The content decorator widget is used to capture all output
    between the `begin()` and `end()` methods and pass it to the corresponding view
    in the `$content` variable. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 内容装饰器 | 内容装饰器小部件用于捕获 `begin()` 和 `end()` 方法之间的所有输出，并将其传递到 `$content` 变量中对应的视图中。
    |'
- en: '| FragmentCache | Used to cache view fragments |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 片段缓存 | 用于缓存视图片段 |'
- en: '| InputWidget | A widget used to display an input field. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 输入小部件 | 用于显示输入字段的 小部件。 |'
- en: '| MaskedInput | An input widget used to force users to enter properly formatted
    data |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 马赛克输入 | 一个输入小部件，用于强制用户输入格式正确的数据 |'
- en: '| Menu | A widget used to display a Yii menu |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 菜单 | 用于显示 Yii 菜单的小部件 |'
- en: '| Spaceless | A widget to remove whitespace characters between HTML tags |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 空间删除 | 一个用于删除 HTML 标签之间空白字符的小部件 |'
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Several online projects also exist to extend Yii2's widget collection. Before
    trying to implement your own widget, try to search Yii2's extensions to see whether
    someone might have already implemented what you need.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom widgets
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some instances, it may make more sense to create our own widget to handle
    a specific task. To create a custom widget in Yii2, we need to create a class
    that extends `yii\base\Widget` and implements either the `init()` or `run()` method.
    For instance, suppose we want to create a widget that displays a greeting with
    the user''s name depending upon the time of the day. We can create that widget
    by implementing the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can then implement our widget by adding the following to our view file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![Creating custom widgets](img/00037.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'We can also write our widgets so that they use the `begin()` and `end()` format.
    As an illustration, let''s create a widget that outputs whatever is wrapped within
    a `begin()` and `end()` tag in an HTML `div` element. We can write this class
    as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can then use our widget as follows in our view:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: When using widgets, you may find it necessary to pass information to a view
    file to handle more complex view logic. In Yii2, widgets have native support for
    the `render()` method, allowing us to render view files.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: By default, view files should be stored within the `WidgetPath\views` folder.
    In our example, since the `GreetingWidget` class is namespaced under `app\components`,
    our greeting view file will be located at `@app\components\views\greeting.php`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: A summary of widgets
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Widgets are powerful object-oriented reusable code blocks that we can add to
    our views to quickly and easily add additional functionality to our application.
    As self-contained objects, widgets follow the MVC pattern and handle dependency
    management for any and all assets and external scripts required for the widget
    to function.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 has several built-in helper classes to streamline common coding tasks,
    such as HTML, array, and JSON manipulation. These helper functions take the form
    of static classes (which means that they should be called statically rather than
    being instantiated) and live underneath the `\yii\helpers` namespace. In this
    section, we'll go over several of the more common helpers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comprehensive documentation for all helpers Yii2 supports can be found on the
    Yii2 API documentation page underneath the helpers section at [http://www.yiiframework.com/doc-2.0/](http://www.yiiframework.com/doc-2.0/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The URL helper
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first helper commonly used in Yii2 is the URL helper. The URL helper helps
    us retrieve specific URLs, such as the base and home URL, and generate URL routes
    to specific paths. The URL helper lives under the `yii\helpers\Url` namespace.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the home URL of your application, use the `home()` static method.
    Several different arguments can be passed to get different types of URLs:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Alternatively, you can use the `base()` method to retrieve the base URL of
    your application:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `home()` method returns the home route for our application, whereas the
    `base()` method returns the base URL for our application for internal use.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL helper can also be used to generate routes to other parts of your application
    using the `toRoute()` and `to()` method. In general, the `toRoute()` method takes
    the following form:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Alternatively, `toRoute()` can generate absolute URLs by adding a preceding
    slash to the first array parameter:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Furthermore, the method can be reduced to a single string if we do not have
    the need for extra parameters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As an alternative to the `toRoute()` method, the `to()` method can be used.
    The `to()` method is identical to the `toRoute()` method, except that it always
    expects an array rather than a string:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Additionally, if we want to retrieve the current URL, we can use the `current()`
    method. When passed without arguments, the current URL will be returned. Any array
    arguments passed to the method will generate the current URL with its parameters:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The HTML helper
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another common helper in Yii is the HTML helper. The HTML helper provides many
    different static methods to generate HTML safe tags. In general, HTML tags can
    be generated by calling the `tag()` method, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As shown in the previous example, data can also be HTML-encoded to make it safe
    for client viewing using the `Html::encode()` method.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any piece of data submitted by the end user should be wrapped within the `encode()`
    method to prevent XSS injection.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS styles for our HTML tags can also be managed by our HTML helper via
    the `removeCssClass()` and `addCssClass()` methods. The `addCssClass()` method
    can work with either a string or an array definition of a class, and it will not
    add a class if it already exists:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The HTML helper can also be used to generate links:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The helper can also be used to generate image tags:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Moreover, the HTML helper can be used to include inline CSS styles and JavaScript:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'CSS files and JavaScript can also be included with the HTML helper:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Tip
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML helper can also be used to generate many different types of HTML tags.
    A complete method list is available at [http://www.yiiframework.com/doc-2.0/yii-helpers-html.html](http://www.yiiframework.com/doc-2.0/yii-helpers-html.html).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: The JSON helper
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with JSON objects can often be complicated. To help alleviate some
    of the problems with complex JSON objects, Yii2 provides the `yii\helpers\Json`
    class, which provides support for the encoding and decoding of complex JSON objects:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tip
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `yii\helpers\Json` class builds upon the native PHP `json_enocde()` and
    `json_decode()` classes to provide more robust support for complex JSON objects.
    It's recommended when using Yii that you use this class instead of the native
    PHP functions.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: The Markdown helper
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Markdown is a text to HTML conversion tool used to write on the Web. Meant to
    replace problematic WYSIWYG editors, Markdown has very quickly become the preferred
    writing method for professionals across the world. To help you work with Markdown,
    Yii2 provides the `yii\helpers\Markdown` helper with support for some of the most
    common markdown flavors, including GitHub Flavored Markdown and Markdown Extra.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown是一种将文本转换为HTML的工具，用于在网络上写作。旨在取代有问题的WYSIWYG编辑器，Markdown已经迅速成为全球专业人士首选的写作方法。为了帮助您使用Markdown，Yii2提供了`yii\helpers\Markdown`辅助类，支持一些最常用的Markdown风味，包括GitHub风味Markdown和Markdown
    Extra。
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Variable dumping
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量转储
- en: Often when debugging, we need to explore a given array or object. Most developers
    will use the native PHP functions `var_dump()` or `print_r()`, both of which can
    be problematic with large arrays or objects. To help work with objects and arrays,
    Yii2 provides the VarDumper helper within the `yii\helpers\VarDumper` namespace.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 经常在调试时，我们需要探索给定的数组或对象。大多数开发者会使用原生的PHP函数`var_dump()`或`print_r()`，这两个函数在大数组或对象中可能会存在问题。为了帮助处理对象和数组，Yii2在`yii\helpers\VarDumper`命名空间中提供了VarDumper辅助类。
- en: 'While this class replicates much of the functionality of `var_dump()` and `print_r()`,
    it can identify recursive structures to avoid recursive display of the same object
    over and over again. VarDumper can be used as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个类复制了`var_dump()`和`print_r()`的大部分功能，但它可以识别递归结构以避免重复显示相同的对象。VarDumper可以使用如下：
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Inflector
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象化
- en: 'Often when working with strings, we need to apply inflection to the string
    to get the appropriate tense or plural. The `yii\helpers\Inflector` class enables
    us to do this. Several examples of inflector are provided as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 经常在处理字符串时，我们需要对字符串应用抽象化以获得适当的时态或复数形式。`yii\helpers\Inflector`类使我们能够做到这一点。以下是一些抽象化示例：
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The inflection class will work only with English words.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象类将仅与英语单词一起工作。
- en: FileHelper
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FileHelper
- en: 'To help us work with files, Yii2 provides the `yii\helpers\FileHelper` class.
    To search for files in a given directory, we can use `FileHelper`, as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们处理文件，Yii2提供了`yii\helpers\FileHelper`类。要搜索给定目录中的文件，我们可以使用`FileHelper`，如下所示：
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now, you have all files listed in the `$files` variable as an array.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经在`$files`变量中以数组的形式列出了所有文件。
- en: 'With the find files method, we can specify the file type we want to have or
    exclude:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用查找文件方法，我们可以指定我们想要有或排除的文件类型：
- en: '[PRE53]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'By default, `fileHelper()` will perform a recursive search. To disable this
    behavior, we can set the `recursive` attribute to `false`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`fileHelper()`将执行递归搜索。要禁用此行为，我们可以将`recursive`属性设置为`false`：
- en: '[PRE54]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`FileHelper` can also be used to determine the MIME type of a specific file
    or a file extension:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileHelper`也可以用来确定特定文件或文件扩展名的MIME类型：'
- en: '[PRE55]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered many of the different tools we can use to help us
    develop applications quicker in Yii2 and extend Yii2\. We first covered the basics
    of a module, its MVC structure, and how to integrate it into our main application.
    We also covered how to use Composer to automate the inclusion of modules in our
    projects for development as well as deployment. We then covered widgets in Yii2
    and learned how we can use them in our application. We also covered how to create
    our own widgets. Finally, we covered several of the built-in helpers in Yii2 and
    learned how to use them.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了许多可以帮助我们在Yii2中更快地开发应用程序并扩展Yii2的不同工具。我们首先介绍了模块的基础知识、其MVC结构以及如何将其集成到我们的主应用程序中。我们还介绍了如何使用Composer来自动化模块在我们项目中的包含，无论是开发还是部署。然后，我们介绍了Yii2中的小部件，并学习了如何在我们的应用程序中使用它们。我们还介绍了如何创建我们自己的小部件。最后，我们介绍了Yii2中的一些内置辅助类，并学习了如何使用它们。
- en: In the next chapter, we'll explore how assets are managed in Yii2 and how to
    use `yii\web\AssetManager` to optimize the usage of our assets. We'll also cover
    how we can integrate other tools, such as Grunt, Node, and Bower, to simplify
    the use of our assets in Yii2.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在Yii2中如何管理资源以及如何使用`yii\web\AssetManager`来优化我们资源的用法。我们还将介绍如何集成其他工具，例如Grunt、Node和Bower，以简化我们在Yii2中资源的使用。
