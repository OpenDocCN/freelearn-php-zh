- en: Chapter 5. Modules, Widgets, and Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like its predecessor, Yii2 provides several useful tools and reusable code blocks
    to help us quickly develop our applications, known as widgets and helpers. Yii2
    also provides us with the ability to build and include mini applications known
    as modules that can enable us to rapidly add new features to our application while
    maintaining a clear separation of concerns in our main application and any extended
    functionality. In this chapter, we'll cover the basics of building and working
    with modules within our application. We'll also cover several of Yii2's built-in
    widgets and helpers and learn how we can implement our own custom widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii2, modules are considered to be mini self-contained software packages
    containing the complete MVC stack. When paired with an application, modules provide
    a way to extend applications by adding new features and tools without adding code
    to our main code base. Consequently, modules are a great way to create and reuse
    code. When creating applications with Yii2, you'll most likely work with prebuilt
    models, such as Gii or the Yii2 dev module; however, modules can also be custom
    applications created specifically to build upon and separate code for a specific
    purpose. In this section, we'll go over the basic modules in Yii2 as well as cover
    how to create and implement them within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Module components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compared to Yii1, modules in Yii2 haven''t changed much. At their core, they
    still consist of the same structure and share many of the same ideas. In Yii2,
    modules are stored in the `modules` directory of our application root and are
    registered with our application through our web or console configuration files.
    If we were to break down a basic module, its directory structure and core files
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each module registered with our application resides within its own dedicated
    module folder, which registers itself with its corresponding route with our URL
    manager by default (in this instance, the `mymodule` folder will correspond to
    the `/mymodule` URI route). Consequently, any controller within the module, unless
    otherwise registered with our URL manager, will be available as a dedicated controller
    route within the module itself. For example, the `DefaultController.php` controller
    will map to the root route of our module `(/mymodule`), while any other controller
    will map to the controller name within the `/mymodule` URI.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, modules provide full support for the basic MVC architecture within
    Yii2\. Each module may have its own set of models, views, controllers, and even
    components. Like complete applications, modules also have support for their own
    views and layouts, allowing them to be styled and managed differently than our
    main application. As part of a Yii2 application, they also have complete access
    to the models and classes implemented within our main application.
  prefs: []
  type: TYPE_NORMAL
- en: The module class structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most important part of a module is the module class defined in the `Module.php`
    file in the root directory of our module. At its most basic level, a module must
    simply extend the `yii\base\Module` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Like everything in Yii2, however, modules can define their custom initialization
    code and configuration files by overloading the public `init()` method of our
    class. At the minimum, when overloading this method, we'll want to ensure that
    the parent `init()` method from `yii\base\Module` is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also define additional custom parameters with our module by adding values
    to the `yii\base\Module::$params` array. Additionally, custom configurations can
    be registered to our module using the `Yii::configure()` static method. This configuration
    can be a simple key-value pair, or it can be a complete configuration file, such
    as those used in our web and console configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Yii2 configuration syntax can be explored in detail in the Yii2 guide located
    at [http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html](http://www.yiiframework.com/doc-2.0/guide-concept-configurations.html).
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within a module, controllers are placed within the `controllers/` directory
    of the main module, and as per the Yii2 convention, they live within the module''s
    namespace. For example, to create the default controller for our `mymodule` module,
    we would add the following to `app/modules/mymodule/controllers/DefaultController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Like other controllers within our project, the default action within our controller
    is the index action. Since controllers within our module extend `yii\web\controller`,
    we can adjust our default action by setting the `yii\web\controller::$defaultAction`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Yii2 will route the `/mymodule` URI route to the `DefaultController`
    class. Should we wish to change this, however, we can adjust the `$defaultRoute`
    parameter of our `Module` class. For instance, if we have a controller to handle
    users called `UserController`, we can make our default route map to our controller,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Consequently, navigating to `/mymodule` within our module will result in our
    `UserController` class being executed rather than `DefaultController`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that unless otherwise specified, controllers will always be available
    in their named URI. In our example, both `/mymodule` and `/mymodule/user` will
    map to the same controller and perform similar actions. If you do not want the
    named controller route to be enabled after adjusting the `$defaultRoute` parameter,
    adjust your router accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Views and layouts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since controllers within modules extend from `yii\web\controller`, we can take
    advantage of view and layout rendering within our module. To get started with
    rendering our view, we first need to define which layout we want to use. By default,
    modules will use whatever the parent modules layout file is until it reaches the
    main layout file, and then it will default to the layout file defined in `app/views/layouts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we do not want to use our application''s layout file, we can define a custom
    layout file for our module by setting the `yii\base\Module::$layout` property,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then define a layout file called `main.php` within the `app/modules/mymodules/views/layouts`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only component needed in a layout file to render our view files is `<?php
    echo $content ?>`. When working with views, however, you may find many things
    you would expect to work in views will not however unless a full HTML document
    is defined with the `beginPage()`, `endPage()`, `beginBody()`, `endBody()`, and
    `head()` methods from `yii\base\view`. For more information on these methods,
    refer to the layout section of the Yii2 documentation at [http://www.yiiframework.com/doc-2.0/guide-structure-views.html#layouts
    and the yii\base\view class at http://www.yiiframework.com/doc-2.0/yii-base-view.html](http://www.yiiframework.com/doc-2.0/guide-structure-views.html#layouts%20and%20the%20yii%5Cbase%5Cview%20class%20at%20http://www.yiiframework.com/doc-2.0/yii-base-view.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'After defining our layout, we''ll need to define the view file for our `DefaultController::actionIndex()`
    method, where we previously declared that we wanted to render the index view.
    Within modules, views are PHP files with the same name as the requested view within
    our `render()` method, and they map to the `app/modules/mymodule/views/<controller>`
    path. In our case, this view maps to `app/modules/mymodule/views/default/index.php`.
    For now, let''s simply add the following to this view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Registering modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once we have created our module, we need to register it with our configuration
    file by defining a `modules` section within our `app/config/web.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if we want to pass additional parameters to our module, we can
    define our configuration as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like many configuration options in Yii2, modules can receive additional arguments
    using the previously mentioned configuration file. Any key-value pair will populate
    the public property of the specified class with the value listed in the array.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically registering modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Often when working with large projects, several components will be broken down
    into modules that need to be registered with our application. Moreover, there
    may be circumstances where only certain modules need to be registered at a given
    time. One way to automate the process of registering many different modules at
    once is to create a dynamic configuration script and let our application scan
    our modules for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we first need to adjust the modules section of our `app/config/web.php`
    file to load a custom configuration for our modules, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll define `app/config/module.php`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll want to set the directory that we want to scan as well as try to
    load a precached configuration file, should one exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, we'll try to return our cached configuration file, should it exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we don''t have a precached configuration file, we''ll then want to iterate
    all the folders in our `app/modules` directory and then dynamically build a module
    configuration array. Additionally, we''ll also attempt to load a module specific
    configuration file located at `app/modules/<module>/config/main.php`. This will
    enable us to package the configuration with our module without making changes
    to our `app/config/web.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we generate a cached version of our generated configuration file to
    eliminate duplicate work on each request. Now, when adding new modules to our
    application, we simply need to remove the `runtime/modules.confg.php` file rather
    than tediously update our web configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Altogether, our dynamic configuration file will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using a configuration file and the module registration process, we can drastically
    reduce our configuration file management overhead and make our application extremely
    flexible, should we package features into separate modules that may or may not
    be installed at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Some modules, such as the `debug` module, need to be executed on every request
    when enabled. To ensure that these modules run on every request, we can Bootstrap
    them by adding them to the Bootstrap section of our configuration file. If you''re
    familiar with Yii1, the `bootstrap` option is used in a manner similar to the
    Yii1 preload configuration option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the way Yii2 lazily loads new objects, you may encounter race conditions
    between Yii2's autoloading of the class and the actual population of that object.
    The `Bootstrap` parameter of our configuration option will ensure that Yii2 will
    autoload and register the object early on in the execution flow rather than waiting
    until the class it requires.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful with adding items to the `bootstrap` section, however, as forcing
    Yii2 to register objects before they're needed can introduce performance degradation
    into your application.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with modules, you may need to get the instance of the currently
    running module to either access the module ID and parameters or components associated
    to the module. To retrieve the current active instance of a module, you can use
    the `getInstance()` method on the module class directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you know the name of the module, you can access it through
    the `\Yii` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, if you are working in a controller, you can access a module from
    within a running controller using the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have an instance of the module, you can access any public properties,
    parameters, and components associated with that module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Managing modules with Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When packaging projects, it''s often beneficial to manage and version our modules
    independent of our main applications. Using Composer and semantic versioning,
    we can manage our modules such that they are versioned to specific points in time
    in our application while still enabling developers to work with us. Moreover,
    we can also configure our main project to automatically install modules for us
    on deployment, which can drastically reduce the overhead involved in managing
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started with managing our modules with Composer, we first need to move
    our module source code out of our main application and push it to our DCVS repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to create a `composer.json` file within our new module''s repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The tool we are using to manage the installation of our modules is called composer-installers.
    To automatically install modules to our modules directory, we need to explicitly
    declare the type of our Composer package. The composer-installers project does
    not support Yii-specific modules currently; however, for our purpose, the `drupal-module`
    type does what we need.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll need to make some changes to our main projects'' `composer.json`
    file. The first change we need to make is the inclusion of the composer-installers
    dependency. We can do this by adding the following to the require block of our
    `composer.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second change we need to make to our main project''s `composer.json` file
    is reference our modules'' DCVS repository. We can do this by creating a repositories
    block populated with the DCVS information for our module `repository` and then
    adding the module to our `require` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to add the installation information to the extras section of
    our `composer.json` file. This provides the required information to the composer-installers
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll want to ensure that our module directory is excluded from our
    DCVS repository. We can do this adding a .`gitignore` file to our module directory
    with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can run Composer to update and automatically install our module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we have specified that we wanted to use the `dev-master` branch of our
    `mymodule` repository, Composer will clone the project into our application, which
    will allow us to develop it independent of our main application, as usual. During
    deployments, however, you should semantically version your module so that the
    versioned copy of the module is downloaded rather than cloned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our module has now been installed from Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Modules in summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules are best used in large applications where certain features or reusable
    components need to be created. As we've shown in this section, modules are extremely
    powerful and can be used to extend our application.
  prefs: []
  type: TYPE_NORMAL
- en: Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Yii2, widgets are reuseable code blocks that are used in views to add configurable
    user interface logic to our application in an object-oriented way. Yii2 comes
    with several different types of reusable widgets, some of which we have already
    seen in previous chapters. Custom widgets can also be created to create tools
    that can be reused across multiple projects. In this section, we'll go over the
    basic types of widgets, how to use them, and how to implement our own within our
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a presentation layer tool, widgets are most commonly used within our view
    files. In Yii2, widgets can be used in one of two distinct ways. The first way
    to use widgets is to call the `yii\base\Widget::widget()` method on a supported
    widget within a view. This method takes a configuration array as an option and
    returns a rendered widget as a result. For instance, to display a Twitter Bootstrap
    3 style alert on our page, we can use the `yii\bootstrap\Alert` widget as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can construct an instance of a specific widget using `yii\base\widget::begin()`
    and `yii\base\widget::end()` to construct our widget. Using our previous example,
    this will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![Using widgets](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What both Alert widgets will look like once rendered
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a view object, widgets are responsible for registering and loading their
    own assets to ensure that they are presented properly. This is why we can create
    an instance of `yii\bootstrap\Alert` and see an alert rendered with all the appropriate
    styles and functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Commonly used built-in widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help quickly develop applications, Yii2 comes with several powerful widgets
    built in that we can use to jumpstart development.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the main widget types Yii2 provides is specific to Twitter Bootstrap
    3 styles and provides a quick and easy way to add a functionality to our application.
    When working with Bootstrap widgets, Yii2 will inject the necessary HTML, CSS,
    and JavaScript objects into the DOM for us. However, this can be optimized by
    including the core Bootstrap assets within our application''s asset manager, `AppAsset.php`,
    located in your `@app/assets` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll cover `AssetManager` in more detail in [Chapter 6](part0039_split_000.html#1565U2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 6. Asset Management"), *Asset Management*.
  prefs: []
  type: TYPE_NORMAL
- en: 'All Bootstrap-specific widgets belong to the `\yii\bootstrap` namespace. These
    core widgets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ActiveForm | A styled ActiveForm instance |'
  prefs: []
  type: TYPE_TB
- en: '| Alert | A style alert |'
  prefs: []
  type: TYPE_TB
- en: '| Button | A styled button |'
  prefs: []
  type: TYPE_TB
- en: '| Button Dropdown | A button drop-down group |'
  prefs: []
  type: TYPE_TB
- en: '| Button Group | A button group |'
  prefs: []
  type: TYPE_TB
- en: '| Carousel | An images or a text carousel |'
  prefs: []
  type: TYPE_TB
- en: '| Collapse | An accordion collapse JavaScript widget |'
  prefs: []
  type: TYPE_TB
- en: '| Dropdown | A drop-down menu |'
  prefs: []
  type: TYPE_TB
- en: '| Model | A model |'
  prefs: []
  type: TYPE_TB
- en: '| Nav | A navigation menu |'
  prefs: []
  type: TYPE_TB
- en: '| NavBar | A navigation top bar |'
  prefs: []
  type: TYPE_TB
- en: '| Progress | A styled process bar |'
  prefs: []
  type: TYPE_TB
- en: '| Tabs | A styled tab |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on Bootstrap-specific widgets can be found on the Yii guide
    at [http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html](http://www.yiiframework.com/doc-2.0/guide-widget-bootstrap.html).
    More information on Twitter Bootstrap 3 can be found at [http://getbootstrap.com](http://getbootstrap.com).
  prefs: []
  type: TYPE_NORMAL
- en: jQuery UI widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Through an official Yii2 extension, Yii2 also provides several jQuery-UI-specific
    widgets. Support for jQuery UI widgets can be added to our application by including
    the `yii2-jui` Composer package in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, the jQuery UI package provides support for the following widgets
    under the `\yii\jui` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Accordion | An accordion element |'
  prefs: []
  type: TYPE_TB
- en: '| AutoComplete | An autocomplete element |'
  prefs: []
  type: TYPE_TB
- en: '| DatePicker | A date time picker object |'
  prefs: []
  type: TYPE_TB
- en: '| Dialog | A dialog box |'
  prefs: []
  type: TYPE_TB
- en: '| Draggable | A draggable element |'
  prefs: []
  type: TYPE_TB
- en: '| Droppable | A droppable element |'
  prefs: []
  type: TYPE_TB
- en: '| Menu | A menu |'
  prefs: []
  type: TYPE_TB
- en: '| ProgressBar | A styled progress bar |'
  prefs: []
  type: TYPE_TB
- en: '| Resizable | A resizable element |'
  prefs: []
  type: TYPE_TB
- en: '| Selectable | A selectable element |'
  prefs: []
  type: TYPE_TB
- en: '| Slider | A slider |'
  prefs: []
  type: TYPE_TB
- en: '| SliderInput | An input slider |'
  prefs: []
  type: TYPE_TB
- en: '| Sortable | A sortable element |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on jQuery-UI-specific widgets can be found in the Yii guide
    at [http://www.yiiframework.com/doc-2.0/guide-widget-jui.html](http://www.yiiframework.com/doc-2.0/guide-widget-jui.html).
    More information on jQuery UI can be found at [https://jqueryui.com](https://jqueryui.com).
  prefs: []
  type: TYPE_NORMAL
- en: Yii-specific widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 comes with support for familiar Yii1 widgets such as ActiveForm and GridView,
    both of which we explored in previous chapters. All widgets in Yii2 that are specific
    to Yii2 are namespaced under `\yii\widget`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Widget | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ActiveForm | An ActiveForm instance used to display Yii2 forms |'
  prefs: []
  type: TYPE_TB
- en: '| GridView | A view to display model and data provider data in a grid table
    view |'
  prefs: []
  type: TYPE_TB
- en: '| DetailView | A view to display data for a specific modal |'
  prefs: []
  type: TYPE_TB
- en: '| ListView | A list view to display multiple modals on a single page |'
  prefs: []
  type: TYPE_TB
- en: '| AjaxForm | A widget to construct an Ajax form |'
  prefs: []
  type: TYPE_TB
- en: '| LinkPager | A widget to display a pagination element for multiple records
    |'
  prefs: []
  type: TYPE_TB
- en: '| LinkSorter | A widget to sort data from a data provider |'
  prefs: []
  type: TYPE_TB
- en: '| Pjax | An implementation of jQuery''s pjax functionality in Yii2 |'
  prefs: []
  type: TYPE_TB
- en: '| Breadcrumb | A widget to display a breadcrumb trail |'
  prefs: []
  type: TYPE_TB
- en: '| ContentDecorator | The content decorator widget is used to capture all output
    between the `begin()` and `end()` methods and pass it to the corresponding view
    in the `$content` variable. |'
  prefs: []
  type: TYPE_TB
- en: '| FragmentCache | Used to cache view fragments |'
  prefs: []
  type: TYPE_TB
- en: '| InputWidget | A widget used to display an input field. |'
  prefs: []
  type: TYPE_TB
- en: '| MaskedInput | An input widget used to force users to enter properly formatted
    data |'
  prefs: []
  type: TYPE_TB
- en: '| Menu | A widget used to display a Yii menu |'
  prefs: []
  type: TYPE_TB
- en: '| Spaceless | A widget to remove whitespace characters between HTML tags |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several online projects also exist to extend Yii2's widget collection. Before
    trying to implement your own widget, try to search Yii2's extensions to see whether
    someone might have already implemented what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some instances, it may make more sense to create our own widget to handle
    a specific task. To create a custom widget in Yii2, we need to create a class
    that extends `yii\base\Widget` and implements either the `init()` or `run()` method.
    For instance, suppose we want to create a widget that displays a greeting with
    the user''s name depending upon the time of the day. We can create that widget
    by implementing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then implement our widget by adding the following to our view file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating custom widgets](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also write our widgets so that they use the `begin()` and `end()` format.
    As an illustration, let''s create a widget that outputs whatever is wrapped within
    a `begin()` and `end()` tag in an HTML `div` element. We can write this class
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use our widget as follows in our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: When using widgets, you may find it necessary to pass information to a view
    file to handle more complex view logic. In Yii2, widgets have native support for
    the `render()` method, allowing us to render view files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: By default, view files should be stored within the `WidgetPath\views` folder.
    In our example, since the `GreetingWidget` class is namespaced under `app\components`,
    our greeting view file will be located at `@app\components\views\greeting.php`.
  prefs: []
  type: TYPE_NORMAL
- en: A summary of widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Widgets are powerful object-oriented reusable code blocks that we can add to
    our views to quickly and easily add additional functionality to our application.
    As self-contained objects, widgets follow the MVC pattern and handle dependency
    management for any and all assets and external scripts required for the widget
    to function.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 has several built-in helper classes to streamline common coding tasks,
    such as HTML, array, and JSON manipulation. These helper functions take the form
    of static classes (which means that they should be called statically rather than
    being instantiated) and live underneath the `\yii\helpers` namespace. In this
    section, we'll go over several of the more common helpers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comprehensive documentation for all helpers Yii2 supports can be found on the
    Yii2 API documentation page underneath the helpers section at [http://www.yiiframework.com/doc-2.0/](http://www.yiiframework.com/doc-2.0/).
  prefs: []
  type: TYPE_NORMAL
- en: The URL helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first helper commonly used in Yii2 is the URL helper. The URL helper helps
    us retrieve specific URLs, such as the base and home URL, and generate URL routes
    to specific paths. The URL helper lives under the `yii\helpers\Url` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the home URL of your application, use the `home()` static method.
    Several different arguments can be passed to get different types of URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the `base()` method to retrieve the base URL of
    your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `home()` method returns the home route for our application, whereas the
    `base()` method returns the base URL for our application for internal use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL helper can also be used to generate routes to other parts of your application
    using the `toRoute()` and `to()` method. In general, the `toRoute()` method takes
    the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, `toRoute()` can generate absolute URLs by adding a preceding
    slash to the first array parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, the method can be reduced to a single string if we do not have
    the need for extra parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to the `toRoute()` method, the `to()` method can be used.
    The `to()` method is identical to the `toRoute()` method, except that it always
    expects an array rather than a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, if we want to retrieve the current URL, we can use the `current()`
    method. When passed without arguments, the current URL will be returned. Any array
    arguments passed to the method will generate the current URL with its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The HTML helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another common helper in Yii is the HTML helper. The HTML helper provides many
    different static methods to generate HTML safe tags. In general, HTML tags can
    be generated by calling the `tag()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the previous example, data can also be HTML-encoded to make it safe
    for client viewing using the `Html::encode()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any piece of data submitted by the end user should be wrapped within the `encode()`
    method to prevent XSS injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS styles for our HTML tags can also be managed by our HTML helper via
    the `removeCssClass()` and `addCssClass()` methods. The `addCssClass()` method
    can work with either a string or an array definition of a class, and it will not
    add a class if it already exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML helper can also be used to generate links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The helper can also be used to generate image tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, the HTML helper can be used to include inline CSS styles and JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'CSS files and JavaScript can also be included with the HTML helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTML helper can also be used to generate many different types of HTML tags.
    A complete method list is available at [http://www.yiiframework.com/doc-2.0/yii-helpers-html.html](http://www.yiiframework.com/doc-2.0/yii-helpers-html.html).
  prefs: []
  type: TYPE_NORMAL
- en: The JSON helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with JSON objects can often be complicated. To help alleviate some
    of the problems with complex JSON objects, Yii2 provides the `yii\helpers\Json`
    class, which provides support for the encoding and decoding of complex JSON objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `yii\helpers\Json` class builds upon the native PHP `json_enocde()` and
    `json_decode()` classes to provide more robust support for complex JSON objects.
    It's recommended when using Yii that you use this class instead of the native
    PHP functions.
  prefs: []
  type: TYPE_NORMAL
- en: The Markdown helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Markdown is a text to HTML conversion tool used to write on the Web. Meant to
    replace problematic WYSIWYG editors, Markdown has very quickly become the preferred
    writing method for professionals across the world. To help you work with Markdown,
    Yii2 provides the `yii\helpers\Markdown` helper with support for some of the most
    common markdown flavors, including GitHub Flavored Markdown and Markdown Extra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Variable dumping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when debugging, we need to explore a given array or object. Most developers
    will use the native PHP functions `var_dump()` or `print_r()`, both of which can
    be problematic with large arrays or objects. To help work with objects and arrays,
    Yii2 provides the VarDumper helper within the `yii\helpers\VarDumper` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this class replicates much of the functionality of `var_dump()` and `print_r()`,
    it can identify recursive structures to avoid recursive display of the same object
    over and over again. VarDumper can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Inflector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often when working with strings, we need to apply inflection to the string
    to get the appropriate tense or plural. The `yii\helpers\Inflector` class enables
    us to do this. Several examples of inflector are provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The inflection class will work only with English words.
  prefs: []
  type: TYPE_NORMAL
- en: FileHelper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To help us work with files, Yii2 provides the `yii\helpers\FileHelper` class.
    To search for files in a given directory, we can use `FileHelper`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have all files listed in the `$files` variable as an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the find files method, we can specify the file type we want to have or
    exclude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `fileHelper()` will perform a recursive search. To disable this
    behavior, we can set the `recursive` attribute to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '`FileHelper` can also be used to determine the MIME type of a specific file
    or a file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered many of the different tools we can use to help us
    develop applications quicker in Yii2 and extend Yii2\. We first covered the basics
    of a module, its MVC structure, and how to integrate it into our main application.
    We also covered how to use Composer to automate the inclusion of modules in our
    projects for development as well as deployment. We then covered widgets in Yii2
    and learned how we can use them in our application. We also covered how to create
    our own widgets. Finally, we covered several of the built-in helpers in Yii2 and
    learned how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll explore how assets are managed in Yii2 and how to
    use `yii\web\AssetManager` to optimize the usage of our assets. We'll also cover
    how we can integrate other tools, such as Grunt, Node, and Bower, to simplify
    the use of our assets in Yii2.
  prefs: []
  type: TYPE_NORMAL
