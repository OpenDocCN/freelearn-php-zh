- en: Chapter 9. Creating a Shipping Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing module configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an adapter model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the shipping method features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the module in the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shipping ordered products to customers is one of the key parts of the e-commerce
    flow. In most cases, a shop owner has a contract with a shipping handler where
    everyone has their own business rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a standard Magento, the following shipping handlers are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: DHL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FedEx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your handler is not on the list, have a look if there is a module available
    at Magento Connect. If not, you can configure a standard shipping method or you
    can create your own, which we will do in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing module configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Creating a Module"), *Creating a Module*,
    we learned how we can create a custom module. In this recipe, we will create the
    necessary files for a shipping module, which we will extend with more features
    using the recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your code editor with the Magento project. Also, get access to the backend
    where we will check some things.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how we can create the configuration for a shipping
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Shipme/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Shipme/etc/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Shipme/Model/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Shipme/Model/Carrier`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the module file named `Packt_Shipme.xml` in the folder `app/etc/modules`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `config.xml` file in the folder `app/code/local/Packt/Shipme/etc/`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and navigate in the backend to **System** | **Configuration**
    | **Advanced** | **Disable Modules Output**. Observe that the `Packt_Shipme` module
    is on the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the module is initialized and working. Now, we have to create
    a `system.xml` file where we will put the configuration parameters for our shipping
    module. Create the file `app/code/local/Packt/Shipme/etc/system.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will create the configuration parameters for our shipping
    module. When you paste the following code in the file, you will create an extra
    group in the shipping method''s configuration. In this group, we can set the settings
    for the new shipping method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache and navigate in the backend to the shipping method configuration
    page. To do that, navigate to **System** | **Configuration** | **Sales** | **Shipping
    methods**. You will see that an extra group is added as shown in the following
    screenshot:![How to do it...](img/3329OS_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that there is a new shipping method called **Shipme**. We will
    extend this configuration with some values. Add the following code under the `<fields>`
    tag of the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and reload the backend. You will now see the other configurations
    under the **Shipme – Express** shipping method as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we have done is to create the necessary files to initialize
    the module. The following files are required to initialize a module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app/etc/modules/Packt_Shipme.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app/code/local/Packt/Shipme/etc/config.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first file, we will activate the module with the `<active>` tag. The
    `<codePool>` tag describes that the module is located in the local code pool,
    which represents the folder `app/code/local/`.
  prefs: []
  type: TYPE_NORMAL
- en: In this file, there is also the `<depends>` tag. First this will check if the
    `Mage_Shipping` module is installed or not. If not, Magento will throw an exception.
    If the module is available, the dependency will load this module after the `Mage_Shipping`
    module. This makes it possible to rewrite some values from the `Mage_Shipping`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second file, `config.xml`, we configured all the stuff that we will
    need in this module. These are the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The version number (`0.0.1`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some default values for the configuration values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last thing we did was create a `system.xml` file so that we can create a
    custom configuration for the shipping module.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration in the `system.xml` file adds some extra values to the shipping
    method configuration, which is available in the backend under the menu **System**
    | **Configuration** | **Sales** | **Shipping methods**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this module, we created a new shipping handler called `Shipme`. Within this
    handler, you can configure two shipping options: **express** and **business**.
    In the `system.xml` file, we created the fields to configure the visibility, name,
    and price of the options.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the `system.xml` file of the module to create the configuration
    values. You can find information about this in the *Extending the system configuration*
    recipe from [Chapter 7](ch07.html "Chapter 7. Magento Backend"), *Magento Backend*.
  prefs: []
  type: TYPE_NORMAL
- en: Writing an adapter model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A new shipping module is initialized in the previous recipe. What we did in
    the previous recipe was a preparation to continue with the business part we will
    see in this recipe. We will add a model with the business logic for the shipping
    method. The model is called an **adapter** class because Magento requires an adapter
    class for each shipping method. This class will extend the `Mage_Shipping_Model_Carrier_Abstract`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class will be used for the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the shipping method available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculate the shipping costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the title in the frontend of the shipping methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create the adapter class for the shipping method:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the folder `app/code/local/Packt/Shipme/Model/Carrier` if it doesn't
    already exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this folder, create a file named `Shipme.php` and add the following content
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and clear the cache; your adapter model has now created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previously created class handles all the business logic that is needed for
    the shipping method. Because this adapter class is an extension of the `Mage_Shipping_Model_Carrier_Abstract`
    class, we can overwrite some methods to customize the business logic of the standard.
  prefs: []
  type: TYPE_NORMAL
- en: The first method we overwrite is the `isAvailable()` function. In this function,
    we have to return `true` or `false` to say that the module is active. In our code,
    we will activate the module based on the system configuration field `active`.
  prefs: []
  type: TYPE_NORMAL
- en: The second method is the `collectRates()` function. This function is used to
    set the right parameters for every shipping method. For every shipping method,
    we can set the title and price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class implements the interface `Mage_Shipping_Model_Carrier_Interface`.
    In this interface, two functions are declared: the `isTrackingAvailable()` and
    `getAllowedMethods()` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: We created the function `getAllowedMethods()` in the adapter class. The `isTrackingAvailable()`
    function is declared in the parent class `Mage_Shipping_Model_Carrier_Abstract`.
  prefs: []
  type: TYPE_NORMAL
- en: We configured two options under the **Shipme** shipping method. These options
    are called **Express delivery** and **Business delivery**. We will check if they
    are enabled in the configuration and set the configured title and price for each
    option.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do is return the right values. We have to return an instance
    of the class `Mage_Shipping_Model_Rate_Result`. We created an empty instance of
    the class, where we will append the methods to when they are available.
  prefs: []
  type: TYPE_NORMAL
- en: To add a method, we have to use the function `append($method)`. This function
    requires an instance of the class `Mage_Shipping_Model_Rate_Result_Method` that
    we created in the two `if` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the shipping method features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When all the files are installed, we can add more features to the shipping method.
    In this recipe, we will add a country configuration and we will enable tracking
    codes for the shipping method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to tracking codes and country-specific shipping:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the adapter file `app/code/local/Packt/Shipme/Model/Carrier/Shipme.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following function in this file to enable tracking codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tracking codes are now enabled for the `Shipme` shipping methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable country-specific shipping, we have to add some configuration fields
    in the `system.xml` file of the module. Add the following code as the child of
    the `<fields>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clear the cache and open the configuration page of the shipping method. You
    will see that there are two new configuration options. When you change **Ship
    to Applicable Countries** to **Specific Countries**, you can select multiple countries
    as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did was enable the possibility to create tracking codes for
    the `Shipme` shipping method. We overwrote the `isTrackingAvailable()` function,
    which returns the standard `false`. By returning `true`, we enable the tracking
    codes.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing we did was enable country-specific shipping. We configured
    two fields with a standard naming convention. When we enable the configuration
    in the backend, we can only use the shipping method when the shipping address
    is in one of the selected countries.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the module in the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will test that the shipping method appears in the frontend.
    We prepared the code and configuration in the previous recipes to make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will check the configuration and place a test order with
    the new shipping method:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the admin panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the shipping methods page by going to **System** | **Configuration**
    | **Sales** | **Shipping methods**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that all the values are correct for the **Shipme – Express** method. Also
    make sure it is enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the frontend, add a product to the shopping cart, and checkout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the right data for the billing and shipping steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the shipping method step, new methods will appear as shown in the following
    screenshot:![How to do it...](img/3329OS_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a method from the list and click on the **Continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the payment method step, choose the **Check Money Order** method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't see the **Check Money Order** payment method, you have to enable
    it in the system configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Continue** and place the order. You will see the success page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the backend, go to **Sales** | **Orders** and click on the latest order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete the order, we have to create an invoice for it to confirm that the
    order is paid. When you click on the **Invoice** button, you will be redirected
    to the invoice form where you can submit your invoice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the invoice is saved, you will see that the status of the order has changed
    to **Processing**. When the status is **Processing**, you can click on the **Ship**
    button to create the shipment. You will see the following screen:![How to do it...](img/3329OS_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on the **Add Tracking Number** button, choose the **Shipme shipping**
    option from the drop-down and add a tracking code such as `1234567890`:![How to
    do it...](img/3329OS_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on the **Submit Shipment** button, your shipment is processed
    and the status of the order will change to **Complete**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we tested the shipping method that we created in this chapter.
    We placed an order with the new shipping method to check that everything works
    the way we wanted it to.
  prefs: []
  type: TYPE_NORMAL
