["```php\n<?php\n\npublic function postAdd(Request $request)\n{\n  $author = new Author;\n\n  $author->first_name = $request->input('first_name');\n  $author->last_name = $request->input('last_name');\n\n  $author->save();\n}\n```", "```php\n<?php\n\npublic function postAdd(Request $request)\n{\n  $this->validate($request, [\n    'first_name' => 'required',\n    'last_name' => 'required'\n  ], [\n    'first_name.required' => 'You forgot the first name!',\n    'last_name.required' => 'You forgot the last name!'\n  ]);\n\n  $author = new Author;\n\n  $author->first_name = $request->input('first_name');\n  $author->last_name = $request->input('last_name');\n\n  $author->save();\n}\n```", "```php\n<?php\n\n$user = new User;\n\n// using magic methods...\n$user->first_name = 'Francesco';\n$user->last_name = 'Malatesta';\n\n...\n```", "```php\n<?php\n\n$user = User::create([\n  'first_name' => 'Francesco',\n  'last_name' => 'Malatesta',\n]);\n```", "```php\n<?php\n\n$user = new User;\n\n// some assignments...\n$user->first_name = 'Francesco';\n// ...\n\n// and then save!\n$user->save();\n```", "```php\n<?php\n\n$user = new User;\n$user->save();\n```", "```php\n<?php\n\n$user = new User;\n\n$user->first_name = 'Francesco';\n$user->last_name = 'Malatesta';\n// other assignments here...\n\n$user->save();\n```", "```php\n<?php namespace App;\n\nuse App\\Aweloquent\\AweloquentModel;\n\nclass Author extends AweloquentModel {\n\n  protected $fillable = [\n    'first_name', 'last_name', 'bio'\n  ];\n\n  protected static $rules = [\n    'everytime' => [\n      'first_name' => 'required'\n    ],\n\n     'create' => [\n      'last_name' => 'required'\n    ],\n\n    'update' => [\n      'bio' => 'required'\n    ],\n  ];\n\n  protected static $messages = [\n    'first_name.required' => 'You forgot the first name!',\n    'last_name.required' => 'You forgot the last name!',\n    'bio.required' => 'You forgot the biography!'\n  ];\n\n}\n```", "```php\n<?php\n\nnamespace App\\Aweloquent;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AweloquentModel extends Model {}\n```", "```php\n<?php\n\n$user = new User([\n  'first_name' => 'Francesco',\n  'last_name' => 'Malatesta'\n]);\n```", "```php\n/**\n   * Create a new Eloquent model instance.\n   *\n   * @param  array  $attributes\n   * @return void\n   */\n\n  public function __construct(array $attributes = array())\n  {\n    $this->bootIfNotBooted();\n\n    $this->syncOriginal();\n\n    $this->fill($attributes);\n  }\n```", "```php\n<?php\n\nnamespace App\\Aweloquent;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass AweloquentModel extends Model {\n\n  public function __construct(array $attributes = [])\n  {\n    $attributes = $this->autoHydrate($attributes);\n\n    parent::__construct($attributes);\n  }\n\n  private function autoHydrate(array $attributes)\n  {\n    // getting the request instance using the service container\n    $request = app('Illuminate\\Http\\Request');\n\n    // getting the request form data, except the token\n    $requestData = $request->except('_token');\n\n    foreach($requestData as $name => $value)\n    {\n      // manually specified attribute has priority over auto- \n\t  hydrated one.\n      if(!isset($attributes[$name]))\n      $attributes[$name] = $value;\n    }\n\n    return $attributes;\n  }\n}\n```", "```php\n<?php namespace App;\n\nuse App\\Aweloquent\\AweloquentModel;\n\nclass Author extends AweloquentModel {\n\n  protected $fillable = [\n    'first_name', 'last_name', 'bio'\n  ];\n\n  protected static $rules = [\n    'first_name' => 'required',\n    'last_name' => 'required'\n  ];\n\n  protected static $messages = [\n    'first_name.required' => 'You forgot the first name!',\n    'last_name.required' => 'You forgot the last name!'\n  ];\n\n}\n```", "```php\n<?php\n\n$user = new User;\n\nif(!$user->validate())\n{\n  dd($user->errors);\n}\n```", "```php\n<?php\n\nnamespace App\\Aweloquent;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass AweloquentModel extends Model {\n\n  protected static $rules = [];\n  protected static $messages = [];\n\n  public $errors;\n\n  public function __construct(array $attributes = [])\n  {\n    $attributes = $this->autoHydrate($attributes);\n\n    parent::__construct($attributes);\n  }\n\n  public function validate()\n  {\n    $validator = Validator::make($this->attributes, static::$rules, static::$messages);\n\n    if($validator->fails())\n    {\n      $this->errors = $validator->messages();\n      return false;\n    }\n\n    return true;\n  }\n\n  private function autoHydrate(array $attributes)\n  {\n    // auto hydrate method here...\n  }\n\n}\n```", "```php\n<?php namespace App;\n\nuse App\\Aweloquent\\AweloquentModel;\n\nclass Author extends AweloquentModel {\n\n  protected $fillable = [\n    'first_name', 'last_name', 'bio'\n  ];\n\n  protected static $rules = [\n    'everytime' => [\n      'first_name' => 'required'\n    ],\n\n    'create' => [\n      'last_name' => 'required'\n    ],\n\n    'update' => [\n      'bio' => 'required'\n    ],\n  ];\n\n  protected static $messages = [\n    'first_name.required' => 'You forgot the first name!',\n    'last_name.required' => 'You forgot the last name!',\n    'bio.required' => 'You forgot the biography!'\n  ];\n\n}\n```", "```php\n<?php\n\nclass AweloquentModel extends Model {\n\n  ...\n\n  public function __construct(array $attributes = [])\n  {\n    // constructor remains the sameâ€¦\n  }\n\n  public function validate()\n  {\n    static::$rules = $this->mergeValidationRules();\n\n    $validator = Validator::make($this->attributes, static::$rules, static::$messages);\n\n    if($validator->fails())\n    {\n      $this->errors = $validator->messages();\n      return false;\n    }\n\n    return true;\n  }\n\n  private function mergeValidationRules()\n  {\n    // if updating, use \"update\" rules, \"create\" otherwise.\n    if($this->exists)\n      $mergedRules = array_merge_recursive(static::$rules['everytime'], static::$rules\n      ['update']);\n  else\n    $mergedRules = array_merge_recursive(static::$rules['everytime'], static::$rules\n\n    ['create']);\n\n  $finalRules = [];\n\n  foreach($mergedRules as $field => $rules){\n    if(is_array($rules))\n      $finalRules[$field] = implode(\"|\", $rules);\n    else\n      $finalRules[$field] = $rules;\n    }\n\n    return $finalRules;\n  }\n\n}\n```", "```php\nstatic::$rules = $this->mergeValidationRules();\n```", "```php\nif($this->exists)\n```", "```php\nprivate function smartPasswordHashing()\n{\n  if($this->attributes['password'])\n    $this->attributes['password'] = Hash::make($this- >attributes['password']);\n}\n```", "```php\nprivate function purgeConfirmationFields()\n{\n  foreach($this->attributes as $name => $value)\n  {\n    if(Str::endsWith($name, '_confirmation'))\n      unset($this->attributes[$name]);\n  }\n}\n```", "```php\n<?php\n\nnamespace App\\Aweloquent;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Str;\n\nclass AweloquentModel extends Model {\n\n  protected static $rules = [];\n  protected static $messages = [];\n\n  public $errors;\n\n  public function __construct(array $attributes = [])\n  {\n    $attributes = $this->autoHydrate($attributes);\n\n    parent::__construct($attributes);\n  }\n\n  public function save(array $options = [])\n  {\n    if($this->validate())\n    {\n      $this->smartPasswordHashing();\n      $this->purgeConfirmationFields();\n\n      return parent::save($options);\n    }\n    else\n      return false;\n  }\n\n  public function validate()\n  {\n    static::$rules = $this->mergeValidationRules();\n\n    $validator = Validator::make($this->attributes, static::$rules, static::$messages);\n\n    if($validator->fails())\n    {\n      $this->errors = $validator->messages();\n      return false;\n    }\n\n    return true;\n  }\n\n  private function autoHydrate(array $attributes)\n  {\n    // getting the request instance using the service container\n    $request = app('Illuminate\\Http\\Request');\n\n    // getting the request form data, except the token\n    $requestData = $request->except('_token');\n\n    foreach($requestData as $name => $value)\n    {\n      // manually specified attribute has priority over auto- \n\t  hydrated one.\n      if(!isset($attributes[$name]))\n        $attributes[$name] = $value;\n    }\n\n    return $attributes;\n  }\n\n  private function mergeValidationRules()\n  {\n    // if updating, use \"update\" rules, \"create\" otherwise.\n    if($this->exists)\n      $mergedRules = array_merge_recursive(static::$rules['everytime'], static::$rules\n\n      ['update']);\n    else\n      $mergedRules = array_merge_recursive(static::$rules['everytime'], static::$rules\n\n    ['create']);\n\n    $finalRules = [];\n\n    foreach($mergedRules as $field => $rules){\n      if(is_array($rules))\n        $finalRules[$field] = implode(\"|\", $rules);\n      else\n        $finalRules[$field] = $rules;\n    }\n\n    return $finalRules;\n  }\n\n  private function smartPasswordHashing()\n  {\n    if($this->attributes['password'])\n      $this->attributes['password'] = Hash::make($this- >attributes['password']);\n  }\n\n  private function purgeConfirmationFields()\n  {\n    foreach($this->attributes as $name => $value)\n    {\n      if(Str::endsWith($name, '_confirmation'))\n        unset($this->attributes[$name]);\n    }\n  }\n}\n```", "```php\npublic function save(array $options = [])\n{\n  if($this->validate())\n  {\n    $this->smartPasswordHashing();\n    $this->purgeConfirmationFields();\n\n    return parent::save($options);\n  }\n  else\n    return false;\n}\n```", "```php\n<?php namespace Warehouse;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Item extends Model {\n\n  // properties and methods here...\n\n}\nYou are probably using this model in a controller, like this one:\n<?php namespace Warehouse\\Http\\Controllers;\n\nclass ItemsController extends Controller {\n\n  public function getIndex()\n  {\n    $items = \\Warehouse\\Item::orderBy('created_at', 'DESC')- >paginate(30);\n\n    return view('item.list', compact('items'));\n  }\n\n}\n```", "```php\n$items = \\Warehouse\\Item::orderBy('created_at', 'DESC')->paginate(30);\n```", "```php\n <?php namespace Warehouse\\Http\\Controllers;\n\nclass ItemsController extends Controller {\n\n  public function getIndex(ItemsRepository $itemsRepository)\n  {\n    // this is an example...\n    $items = $itemsRepository->getRecent(30, 1);\t\n\n    return view('item.list', compact('items'));\n  }\n\n}\n```", "```php\n<?php\n\nRoute::get('api/v1/items', function(ItemsRepository $repo){\n\n  return $repo->getRecent(30, 1);\n\n});\n```", "```php\n<?php\n\nnamespace App\\Repositories;\n\nuse App\\Author;\n\nclass DbAuthorsRepository {\n\n  private $model;\n\n  public function __construct(Author $model)\n  {\n    $this->model = $model;\n  }\n\n  public function getAll($perPage, $pageNumber)\n  {\n    $authors = $this->model->skip(($pageNumber - 1) * $perPage)- >take($perPage)->get();\n    return $authors->toArray();\n  }\n\n  public function find($authorId)\n  {\n    return $this->model->find($authorId)->toArray();\n  }\n\n  public function search($firstName, $lastName)\n  {\n    return $this->model\n    ->where('first_name', 'LIKE', '%'.$firstName.'%')\n    ->where('last_name', 'LIKE', '%'.$lastName.'%')\n    ->get()\n    ->toArray();\n  }\n\n  public function create($authorData)\n  {\n    return $this->model->create($authorData);\n  }\n\n  public function update($authorData, $authorId)\n  {\n    return $this->model->find($authorId)->update($authorData);\n  }\n\n}\n```", "```php\n<?php\n\nRoute::get('authors', function(\\App\\Repositories\\DbAuthorsRepository $repository){\n\n  return $repository->getAll(10, 1);\n\n});\n\nRoute::get('create_author', function(\\App\\Repositories\\DbAuthorsRepository $repository){\n\n  $repository->create([\n    'first_name' => 'Francesco',\n    'last_name' => 'Malatesta',\n    'bio' => 'Lorem ipsum...'\n  ]);\n\n});\n\nRoute::get('update_author', function(\\App\\Repositories\\DbAuthorsRepository $repository){\n\n  $repository->update([\n    'first_name' => 'Frank',\n    'last_name' => 'Smith',\n    'bio' => 'Other ipsum...'\n  ], 6);\n\n});\n```", "```php\nRoute::get('authors', function(\\App\\Repositories\\DbAuthorsRepository $repository){\n\n  return $repository->getAll(10, 1);\n\n});\n```", "```php\n<?php\n\nnamespace App\\Repositories;\n\nuse App\\Author;\n\nclass DbAuthorsRepository {\n\n  private $model;\n\n  public function __construct(Author $model)\n  {\n    $this->model = $model;\n  }\n\n  public function getAll($perPage, $pageNumber)\n  {\n    $authors = $this->model->skip(($pageNumber - 1) * $perPage)- >take($perPage)->get();\n    return $authors->toArray();\n  }\n\n}\n```", "```php\n    <?php\n\n    namespace App\\Repositories\\Contracts;\n    interface AuthorsRepository {\n\n      public function getAll($perPage, $pageNumber);\n\n      public function find($authorId);\n\n      public function search($firstName, $lastName);\n\n      public function create($authorData);\n\n      public function update($authorData, $authorId);\n\n    }\n    ```", "```php\n    class DbAuthorsRepository {\n    It now becomes:\n    class DbAuthorsRepository implements AuthorsRepository {\n    ```", "```php\n    public function register()\n    {\n      $this->app->bind(\n        'App\\Repositories\\Contracts\\AuthorsRepository',\n        'App\\Repositories\\DbAuthorsRepository'\n      );\n    }\n    ```", "```php\n    <?php\n\n    Route::get('authors', function(\\App\\Repositories\\Contracts\\AuthorsRepository $repository){\n\n        return $repository->getAll(10, 1);\n\n    });\n    ```", "```php\n    Route::get('authors', function(){\n\n        $repository = app('App\\Repositories\\Contracts\\AuthorsRepository');\n\n        return $repository->getAll(10, 1);\n\n    });\n    ```", "```php\n    <?php\n\n    namespace App\\Repositories;\n\n    use App\\Repositories\\Contracts\\AuthorsRepository;\n\n    class FileAuthorsRepository implements AuthorsRepository {\n\n      public function getAll($perPage, $pageNumber)\n      {\n        dd('getting all records from flat file driver...');\n      }\n\n      public function find($authorId)\n      {\n        dd('searching by id: ' . $authorId);\n      }\n\n      public function search($firstName, $lastName)\n      {\n        dd('searching by first and last name...', $firstName, $lastName);\n      }\n\n      public function create($authorData)\n      {\n        dd('creating new author ', $authorData);\n      }\n\n      public function update($authorData, $authorId)\n      {\n        dd('updating author ' . $authorId, $authorData);\n      }\n\n    }\n    ```", "```php\n    public function register()\n    {\n      $this->app->bind(\n        'App\\Repositories\\Contracts\\AuthorsRepository',\n        'App\\Repositories\\FileAuthorsRepository'\n      );\n    }\n    ```"]