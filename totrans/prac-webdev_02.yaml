- en: Chapter 2. HTML
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。HTML
- en: 'In this chapter, we will walk you through the basics of HTML. In [Chapter 1](ch01.html
    "Chapter 1. The World Wide Web"), *The World Wide Web*, we already covered what
    the letters HTML mean, where the language comes from, and what it is used for:
    to create the content part of your web pages. We already know that this content
    is placed in between tags: `<tag>` to open and `</tag>` to close.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍HTML的基础知识。在[第1章](ch01.html "第1章。万维网")《万维网》中，我们已经介绍了HTML的含义，该语言的来源以及它的用途：创建网页的内容部分。我们已经知道，这些内容放置在标签之间：`<tag>`用于打开，`</tag>`用于关闭。
- en: It would be beyond the scope of this book to provide a complete reference to
    all HTML tags, or elements (we will use these words interchangeably), and all
    of their attributes. There are some good references listed in the bibliography
    and of course there are some cool online references. I personally like [w3schools.com](http://w3schools.com)
    but, if you don't, simply Google "HTML" followed by a tag name you would like
    to know more about and you will find some great alternate sources.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的范围内提供所有HTML标签或元素（我们将交替使用这些词）及其所有属性的完整参考是不可能的。在参考文献中列出了一些很好的参考资料，当然还有一些很酷的在线参考资料。我个人喜欢[w3schools.com](http://w3schools.com)，但如果你不喜欢，只需在Google上搜索“HTML”后跟一个你想要了解更多信息的标签名称，你将找到一些很好的替代资源。
- en: We will therefore only describe the most commonly used HTML tags in this chapter,
    grouped by the role they play in the document. For example, all the tags that
    can be used in a table are grouped under the heading `table`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们只描述最常用的HTML标签，按它们在文档中扮演的角色分组。例如，所有可以在表格中使用的标签都归类在标题`表格`下。
- en: HTML versions
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML版本
- en: 'Since its creation, there have of course been several different versions and
    flavors of HTML. The most notable are HTML4, XHTML, and HTML5:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，自从它的创建以来，HTML已经出现了几个不同的版本和风味。最显著的是HTML4、XHTML和HTML5：
- en: '**HTML4**: This is the last of a series of versions of HTML and is what most
    people will implicitly refer to when they talk about HTML.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML4**：这是HTML一系列版本中的最后一个版本，也是大多数人谈论HTML时会隐含指代的版本。'
- en: '**XHTML**: This is a different definition of HTML and an attempt to make HTML
    a member of the XML family, giving it more strict rules. An advantage is that
    it would be easier to use tools and languages that are intended to manipulate
    and translate XML documents. However, interest in maintaining that standard seems
    to have faded.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XHTML**：这是HTML的不同定义，以及将HTML变成XML家族成员的尝试，给它带来了更严格的规则。一个优点是，它将更容易使用旨在操作和转换XML文档的工具和语言。然而，维护该标准的兴趣似乎已经减弱。'
- en: '**HTML5**: This is the newest kid on the proverbial HTML block. A lot of books
    have been published about it and, if you have read one of them, you will have
    discovered that HTML5 is more than just a new version of the markup language.
    Granted, it comes with quite a few new tags, such as the `<nav>` or `<section>`
    tags. HTML5 also features the use of custom data attributes such as `data-whateveryouchoose`
    that you can use in your document. Later on you can manipulate these using JavaScript.
    It is a way to pass data along inside an element; hence the name chosen: `data-*`.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5**：这是传说中的HTML中的最新版本。关于它的书籍已经出版了很多，如果你读过其中之一，你会发现HTML5不仅仅是一个标记语言的版本。诚然，它带来了很多新的标签，如`<nav>`或`<section>`标签。HTML5还引入了自定义数据属性的使用，如`data-whateveryouchoose`，你可以在文档中使用这些属性。稍后，你可以使用JavaScript来操作这些属性。这是一种在元素内部传递数据的方式；因此，选择了这个名字：`data-*`。'
- en: Did I say JavaScript? All the other new features in HTML5 are actually JavaScript
    APIs like HTML5 Canvas. Canvas lets you draw things on your web page, pie charts
    for example. Exciting as these APIs may be, they are beyond the scope of this
    chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我说过JavaScript吗？HTML5中的所有其他新功能实际上都是JavaScript API，如HTML5 Canvas。Canvas允许你在网页上绘制东西，比如饼图。尽管这些API可能很吸引人，但它们超出了本章的范围。
- en: Semantic and presentational HTML
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义和表现性HTML
- en: The approach we are taking in this chapter and in the first part of the book
    overall is to only use HTML elements and attributes that are covered by all three
    standards. In practice, this means we will not use any HTML4 attributes that disappeared
    in HTML5 and will not use any HTML5 elements or attributes that did not exist
    in HTML4.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章以及本书整体的第一部分所采取的方法是只使用所有三个标准都涵盖的HTML元素和属性。在实践中，这意味着我们不会使用任何在HTML5中消失的HTML4属性，也不会使用任何在HTML4中不存在的HTML5元素或属性。
- en: On the other hand, we do not want to discourage the use of new things, so we
    will list HTML5-specific elements in a separate list. We will also use the new
    elements in the second section of the book where we introduce a cool CSS/JavaScript
    framework.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们不想阻止大家使用新事物，因此我们将HTML5特有的元素列在单独的列表中。我们也会在书的第二部分介绍一个酷炫的CSS/JavaScript框架时使用这些新元素。
- en: 'One could easily divide HTML elements into two groups. The first group consists
    of elements that refer to parts of a document: headers, paragraphs, tables, forms,
    lists, and so on. ( `<h1>`, `<h2>`, `<p>`, `<table>`, `<ul>`). We call this semantic
    HTML as they refer to the names of things; they describe what they are.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易将HTML元素分为两组。第一组包括指向文档各部分的元素：标题、段落、表格、表单、列表等（`<h1>`, `<h2>`, `<p>`, `<table>`,
    `<ul>`）。我们称其为语义性HTML，因为它们指的是事物的名称；它们描述了它们是什么。
- en: 'Another group contains the elements used to indicate how things look: how they
    are aligned, which font is used, if it is in bold or italics, and so on ( `<center>`,
    `<font>`, `<b>`, `<i>`), and we could call them presentational HTML. The same
    is true for HTML attributes. `class="green"` or `id="chapter"` would be semantic,
    while `width="150px"` or `valign="top"` would be presentational.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组包含用于指示事物外观的元素：它们的对齐方式、使用的字体、是否加粗或斜体等（`<center>`, `<font>`, `<b>`, `<i>`），我们可以称它们为表现性HTML。HTML属性也是如此。`class="green"`或`id="chapter"`是语义性的，而`width="150px"`或`valign="top"`则是表现性的。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is the recommendation of the W3C to use CSS for presentational things, and
    we follow that recommendation. This way will also avoid you learning a bunch of
    new things, only to later find out that they are no longer used, as most HTML4
    elements and attributes that are no longer available in HTML5 happen to be presentational.
    The word you will find online to indicate that something is no longer used is
    *deprecated*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: W3C建议使用CSS进行表现性处理，我们遵循这一建议。这种方式也将避免你学习一大堆新事物，后来却发现它们不再被使用，因为大多数HTML4元素和属性在HTML5中不再可用，恰好是表现性的。你会在网上找到的表示某事物不再使用的词是*过时*。
- en: When I first ran into this word I misread it as depreciated. That word might
    have been a better choice. Either way, if elements and attributes are labeled
    as such, avoid using them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次遇到这个单词时，我误读为过时了。那个词可能是一个更好的选择。无论如何，如果元素和属性被标记为这样的，请避免使用它们。
- en: As a consequence, we are not going to show you pretty examples of HTML documents
    in this chapter, as the part that will make it pretty, CSS, will have to wait
    for a while until we get to [Chapter 3](ch03.html "Chapter 3. CSS"), *CSS*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不会在本章中展示漂亮的HTML文档示例，因为使其变得漂亮的CSS部分将不得不等待一段时间，直到我们到达[第3章](ch03.html "第3章。CSS")，*CSS*。
- en: The structure and syntax of an HTML document
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML文档的结构和语法
- en: 'An HTML document is a text file with a name ending in `.html`, for example,
    `hello.html`. A modern, minimal HTML document looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文档是一个以`.html`结尾的文本文件，例如，`hello.html`。一个现代的、最简的HTML文档看起来像这样：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Doctype
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Doctype
- en: The first line specifies the document type (`<!DOCTYPE html>`). Today, this
    can be as simple as the word `html` telling a browser that this file is to be
    interpreted as an HTML5 document. Documents written to the older specifications
    contain the name of that spec followed by a path to a **Document Type Definition**
    (**DTD**) file that can be used to examine the document for conformance. Things
    are a lot more flexible these days.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行指定了文档类型（`<!DOCTYPE html>`）。今天，这可以简单到只使用单词`html`来告诉浏览器这个文件将被解释为HTML5文档。按照旧规范编写的文档包含该规范的名称，后跟一个指向**文档类型定义**（**DTD**）文件的路径，该文件可以用来检查文档的兼容性。如今，事情要灵活得多。
- en: <html>
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<html>`'
- en: This is the root of the document. Everything in the remainder of the document
    will be inside this `html` tag. What is inside the `html` tag consists of two
    sections, the `head` and the `body`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文档的根。文档剩余部分的所有内容都将位于这个`html`标签内。`html`标签内的内容分为两个部分，即`head`和`body`。
- en: <head>
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`<head>`'
- en: The head section contains one or more `<meta>` tags. The one in our earlier
    example specifies that the encoding of the text part of the document has to be
    in **UTF-8**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 头部部分包含一个或多个`<meta>`标签。在我们之前的例子中，它指定了文档文本部分的编码必须为**UTF-8**。
- en: This section is also where the `<title>` tag lives. The text inside this element
    is the text that will be displayed at the top of the browser window and is looked
    at heavily by search engines. So it is important to always include a `title` tag
    and for its contents to be correct and meaningful.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the `<head>` section is used to include more information that the
    browser will have to read before the `body` part of the document is loaded. Your
    most typical example will be the paths to the **CSS stylesheets** that are used
    for the document. We will have many examples in this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: <body>
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Inside the `body` tag is the core content of our document. As a consequence,
    if there are certain style elements that you want to be used in the entire document,
    you will be able to do that by simply styling the `<body>` tag. We will remind
    you about that later. Of course, we first have to learn what we can put inside
    the body.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Syntax for tags or elements inside the document
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax of an HTML tag is very simple:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is followed by the `next` tag. You can place everything on a single line
    or every pair of tags on a separate line for readability as new lines and spaces
    in between tag pairs are ignored.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `text` portion, spaces are not ignored, but multiple spaces in a
    row are reduced to one. So if you want to insert more spaces, you will have to
    use a different method (See *HTML entities* later in this chapter).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'For elements that have no content, there is a shorthand notation. We can use:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We use that instead of:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In our example, the shorthand notation is used for:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `class` attribute can have multiple values, in which case it would be written
    like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It is not written like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This last line demonstrates a common oversight when a `class` attribute is added
    without realizing that a class attribute was already present. In this case, the
    second one will be ignored. The browser will also ignore all elements and attributes
    that are not recognized as HTML tags.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Unlike compilers for old school programming languages, you will never see an
    error message when you mistype something. Things will simply not look right or
    you may even get a blank screen. This is why it is extremely productive to use
    an HTML editor or other tool that recognizes tags and attributes as valid HTML
    ones, preferably tools that display them in color.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: HTML comments
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anywhere inside HTML code, you can insert a comment: a reminder to yourself
    , for posterity, or (probably more important) for others in your team who need
    to share your code. The syntax is very simple. Anything that is inside an HTML
    block can be commented by putting `<!--` in the front of it and `-->` after it:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'We recommend strongly inserting more comments rather than less. Applying comments
    is also useful when someone asks you to remove something from the website and
    you have this feeling that it might come back. Because if you remove it: gone
    is gone!'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, every line of HTML comment adds a line to your file and also
    makes it visible to the world, as every browser has an option to look at the source
    code. So once you start using a server-side language such as PHP, which you will
    learn in a few chapters, it is better to place your comments inside that code.
    You will discover that the syntax for comments in CSS and PHP is different.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，HTML注释的每一行都会在你的文件中增加一行，并且也会让全世界看到，因为每个浏览器都有一个查看源代码的选项。所以一旦你开始使用PHP这样的服务器端语言，你将在接下来的几章中学习，最好将你的注释放在那段代码中。你会发现CSS和PHP中注释的语法是不同的。
- en: 'As promised, we will now describe the most important HTML tags and attributes,
    divided in functionality groups. We will start with what started it all: **links**.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如承诺的那样，我们现在将描述最重要的HTML标签和属性，按功能分组。我们将从一切开始的地方开始：**链接**。
- en: Links
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接
- en: In all likelihood, the first web page that was ever created contained a link
    to the second ever web page. To place a link on a page, we use the anchor tag
    `<a>`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，第一个创建的网页包含了对第二个网页的链接。要在页面上放置链接，我们使用锚点标签 `<a>`。
- en: The <a> tag and attributes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<a>` 标签和属性'
- en: If we simply place some text inside an `<a>` tag, nothing will really happen
    when you click on it, unless you program the event in JavaScript. However, you
    can tell from the way it looks on the screen that the intent is for it to be a
    link. By default, the content of an `<a>` tag is rendered in the (by now probably
    notorious) underlined and blue style.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仅仅在 `<a>` 标签内放置一些文本，当你点击它时，实际上并不会发生任何事情，除非你在JavaScript中编程了这个事件。然而，你可以从它在屏幕上的外观来判断，它的意图是成为一个链接。默认情况下，`<a>`
    标签的内容以（现在可能臭名昭著的）下划线和蓝色样式渲染。
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The href attribute
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`href` 属性'
- en: 'To make the link work, you need to use the **href** or **hypertext reference**
    attribute. You can link to another web page, external or local, a document or
    image, or another section of the current page. Here are some examples:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要使链接工作，您需要使用 **href** 或 **超文本引用** 属性。您可以链接到另一个网页，外部或本地，文档或图片，或者当前页面的另一个部分。以下是一些示例：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first three examples should be self-explanatory. There is a complete URL,
    a single file name, `index.html`, and a relative path to a PDF file. Absolute
    pathnames are supported but their use is not recommended. The last example requires
    more explanation. Did you notice the sharp sign?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个例子应该是自解释的。有一个完整的URL，一个单独的文件名，`index.html`，以及到PDF文件的相对路径。支持绝对路径名，但建议不要使用。最后一个例子需要更多的解释。你注意到那个尖号了吗？
- en: The <a> name attribute
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<a>` 标签的 `name` 属性'
- en: The `name` attribute when used in conjunction with the `<a>` tag can be used
    to name a particular spot on the page. That name can then be used elsewhere on
    the page in a link.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 `<a>` 标签一起使用时，`name` 属性可以用来命名页面上特定的位置。然后可以在页面的其他地方使用这个名称来创建链接。
- en: 'So, you could put this somewhere near the top of your page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以将此内容放置在页面顶部附近：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A link somewhere else on the page, using the same name, but preceded with a
    `#` sign, will take us back there:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的另一个位置有一个链接，使用相同的名称，但前面有一个 `#` 符号，将带我们回到那里：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The <a> target attribute
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<a>` 标签的 `target` 属性'
- en: When a user clicks on a link and arrives at a new page, they sometimes want
    to go back to where they came from. Some devices and most browsers feature a **back**
    and even **forward** button a visitor can click on only to discover that the browser
    does not always take them back to the page they expect. Or the button may not
    have any effect at all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击链接并到达新页面时，他们有时想回到他们来的地方。一些设备和大多数浏览器都有一个**后退**按钮，甚至还有一个**前进**按钮，访客可以点击，但浏览器并不总是带他们回到他们期望的页面。或者按钮可能没有任何效果。
- en: 'In the second half of the book, we will spend an entire chapter on this topic
    and the notion of what a **previous** page should really be. For now, you can
    help your cause and your visitor by adding the `target` attribute to your anchor
    element. It allows you to determine whether or not the `target` page (hence the
    name of the attribute) will open in a new browser window or not. There are four
    options:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后半部分，我们将用整整一章来讨论这个主题以及“上一页”应该真正是什么的概念。现在，你可以通过向你的锚点元素添加 `target` 属性来帮助你的事业和你的访客。它允许你确定是否在新的浏览器窗口中打开
    `target` 页面。有四种选项：
- en: '**target="_blank"**: This page opens up in a new window or tab'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target="_blank"**：此页面将在新窗口或标签页中打开'
- en: '**target="_self"**: This page opens in the same window it was clicked in; this
    is the default but also sometimes means that you created a point of no return'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target="_self"**: 此页面将在点击的同一窗口中打开；这是默认设置，但有时也意味着你创建了一个无法回头的点。'
- en: '**target="_top"**: This page opens in the full window size of the browser'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target="_top"**: 此页面将在浏览器全窗口大小中打开'
- en: '**target="_parent"**: This page opens in the parent window'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**target="_parent"**: 此页面将在父窗口中打开'
- en: Classic document elements
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经典文档元素
- en: This section lists a few HTML elements that will look familiar to users of word
    processors or desktop publishing programs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本节列出了几个对文字处理软件或桌面出版程序用户来说熟悉的HTML元素。
- en: <h1>, <h2>, <h3>, … <h6> – headings
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <h1>, <h2>, <h3>, … <h6> – 标题
- en: These are headings. The smaller the number, the larger the font size the browser
    will render the heading in.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是标题。数字越小，浏览器渲染标题时字体的大小就越大。
- en: <p> – paragraph
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <p> – 段落
- en: This is the paragraph tag. Browsers automatically add some space (margin) before
    and after each `<p>` element. The margins can be modified with CSS (with the margin
    properties).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是段落标签。浏览器会自动在每个 `<p>` 元素前后添加一些空间（外边距）。这些外边距可以用CSS（使用外边距属性）进行修改。
- en: <span> – span
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <span> – span
- en: The `span` tag by itself has no visual effect but it is extremely useful when
    you need to style just a portion of text.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`span` 标签本身没有视觉效果，但当你需要仅对文本的一部分进行样式设置时，它非常有用。'
- en: 'You can use it like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样使用它：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Lists
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: In almost every document, you will find the need to sum up a number of items
    in a list. In HTML you have the choice between an unordered list (think bullets)
    and an ordered list (think numbers). The HTML elements for these lists are `<ul>`
    and `<ol>`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在几乎每一份文档中，你都会发现需要将多个项目总结成列表。在HTML中，你可以选择无序列表（想想项目符号）或有序列表（想想数字）。这些列表的HTML元素是
    `<ul>` 和 `<ol>`。
- en: 'This example produces a list of colors:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子生成一个颜色列表：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will generate a list of colors, each preceded by a (round) bullet. Replacing
    `<ul>/</ul> by <ol>/</ol>` will give you a numbered list. Attributes existed to
    specify the shape of the bullet but these are long gone. Bullet styles are specified
    in CSS these days. You can even use an image file for the bullet.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个颜色列表，每个颜色前都有一个（圆形）项目符号。用 `<ul>/</ul>` 替换 `<ol>/</ol>` 将得到一个编号列表。曾经有属性可以指定项目符号的形状，但这些属性已经消失了。现在，项目符号样式由CSS指定。你甚至可以使用图片文件作为项目符号。
- en: A third list element that is worth looking into is `<dl>` or data list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一看的第三个列表元素是 `<dl>` 或数据列表。
- en: Images
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片
- en: It is hard to imagine a website without images. Most people assume that adding
    a picture to a site is easy, that it may take a little bit of Photoshopping and
    that's it. This is actually not true, but it is all manageable. Being a photographer
    myself, I was disappointed to discover on my first time experimenting with HTML
    that putting text right next to a picture on a web page was painful. That was
    because I did not know enough CSS at the time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 很难想象一个没有图片的网站。大多数人认为在网站上添加图片很容易，可能只需要一点Photoshop处理就完成了。实际上并非如此，但这都是可以管理的。作为一名摄影师，我在第一次尝试使用HTML时发现，在网页上把文字放在图片旁边是非常痛苦的。那是因为我当时对CSS了解不够。
- en: 'There is actually only one HTML element needed to deal with images: the `<img>`
    tag.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，处理图片只需要一个HTML元素：`<img>` 标签。
- en: <img> element and attributes
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<img>` 元素和属性'
- en: 'A typical piece of HTML containing an image would be:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 包含图片的典型HTML代码如下：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'An `img` tag will never have any content inside so we always use the shorthand
    notation. The two attributes that are always present are `src` and `alt`. The
    value of the `alt` attribute is a text that will be displayed when the image file
    cannot be found or when device is used that cannot display images. The `src` attribute
    contains the path to the image file. An image file can be in one of many different
    formats: `.jpeg`, `.gif`, `.png`, `.tiff`, etc.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `img` 标签永远不会包含任何内容，所以我们总是使用缩写形式。始终存在的两个属性是 `src` 和 `alt`。`alt` 属性的值是当图片文件找不到或设备无法显示图片时将显示的文本。`src`
    属性包含图片文件的路径。图片文件可以有多种不同的格式：`.jpeg`, `.gif`, `.png`, `.tiff`, 等等。
- en: When no information is given about the actual size of the part of the screen
    that we want to use to display the image, it will be shown at its actual size,
    so beware of large image files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有提供关于我们想要用于显示图片的屏幕部分实际大小信息时，图片将以其实际大小显示，所以要注意大图片文件。
- en: Image width and height
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片宽度和高度
- en: 'There are two attributes you can use for this: **width** and **height**. This
    will cause the browser to render the image at the size you specify, but it is
    far better to not use these attributes at and specify the width and height in
    CSS. So give your `<img>` tag a class or an `id` tag to do so.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用两个属性来做到这一点：**宽度**和**高度**。这将导致浏览器以你指定的尺寸渲染图像，但最好不使用这些属性，并在CSS中指定宽度和高度。所以给你的`<img>`标签添加一个类或一个`id`标签来这样做。
- en: You will later learn that you even have the opportunity to specify different
    image sizes for different screen sizes when we are discussing **responsive** designs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你将很快了解到，在讨论**响应式**设计时，你甚至有机会为不同的屏幕尺寸指定不同的图像尺寸。
- en: Either way, once you know what the largest ever size of the image that is going
    to be used is, create a version of your image file of exactly those dimensions
    to use on your site. If the original was larger, you will not force the visitor
    to download a large file that they do not need. If the original was smaller, create
    a quality image file at the larger size, so it will look good, rather than you
    relying on how the browser will extrapolate the image.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，一旦你知道将要使用的图像的最大尺寸，就创建一个与此尺寸完全一致的照片文件用于你的网站。如果原始文件更大，你不会强迫访客下载他们不需要的大文件。如果原始文件更小，创建一个在较大尺寸下的高质量图像文件，这样它看起来会更好，而不是依赖于浏览器如何外推图像。
- en: Input forms
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入表单
- en: 'You have all seen them and used them and now you are going to create them:
    registration forms, order forms—in short: **forms**. What all forms have in common
    is that the user will enter, or input, some information. Next, that input is validated—for
    example, to verify that an e-mail address is actually in the correct format—and
    then it is processed one way or another.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你都见过并使用过它们，现在你将创建它们：注册表单、订单表单——简而言之：**表单**。所有表单的共同之处在于用户将输入或输入一些信息。接下来，该输入将被验证——例如，验证电子邮件地址是否确实处于正确的格式——然后以某种方式进行处理。
- en: The form will, of course, be written in HTML and CSS. Validation can happen
    on the client side before it is processed, in JavaScript, and on the server side
    while it is processed. The processing is, in most cases, done in PHP and the result
    stored in some kind of database, such as MySQL or MongoDB, or a non-database,
    such as a flat file, an XML file, or an Excel spreadsheet. For now, let's focus
    on the creation of the form itself.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，表单将使用HTML和CSS编写。验证可以在客户端发生，在处理之前，使用JavaScript，以及在服务器端处理时。在大多数情况下，处理是在PHP中完成的，结果存储在某种类型的数据库中，如MySQL或MongoDB，或者非数据库，如平面文件、XML文件或Excel电子表格。现在，让我们专注于表单的创建本身。
- en: Form elements
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单元素
- en: 'The elements we will discuss here to be used in forms are : `<form>`, `<label>`,
    `<input>`, `<textarea>`, `<button>`, `<select>`, and `<option>`. We will treat
    `<select>` separately.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将要讨论并用于表单的元素有：`<form>`、`<label>`、`<input>`、`<textarea>`、`<button>`、`<select>`以及`<option>`。我们将单独处理`<select>`元素。
- en: 'This is an example of a typical portion of HTML describing a form:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的HTML部分示例，描述了一个表单：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Form attributes
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单属性
- en: Notice the `action` and `method` attributes for the `form` tag. They indicate
    the name of the program that will be used to process the data and the method used
    to do so. We will explain this in great detail in [Chapter 5](ch05.html "Chapter 5. PHP"),
    *PHP*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`form`标签的`action`和`method`属性。它们指明了将用于处理数据的程序名称以及处理数据的方法。我们将在[第5章](ch05.html
    "第5章。PHP")中详细解释，*PHP*。
- en: The label attribute
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标签属性
- en: The `label` element is a useful tag to label the `input` elements. The `for`
    attribute ties a `label` tag to an `input` tag.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`元素是一个用于标记`input`元素的非常有用的标签。`for`属性将一个`label`标签与一个`input`标签关联起来。'
- en: Input attributes
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入属性
- en: The `input` element is the most versatile element to be used in a form. It is
    used to let the user give input, either by typing some text or by checking off
    a checkbox or radio button.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`input`元素是在表单中使用的最灵活的元素。它用于让用户输入信息，无论是通过输入一些文本还是通过勾选复选框或单选按钮。'
- en: 'There are several types, specified by the `type` attribute:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种类型，由`type`属性指定：
- en: '| Attribute | Description |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| This is the default so there is no need to specify this attribute: this is
    for text. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 这是默认值，因此无需指定此属性：这是用于文本的。 |'
- en: '|'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| This one does not show, but it is extremely useful to pass values. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 这个选项不会显示，但它对于传递值来说极其有用。 |'
- en: '|'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| This creates a radio button: only one can be selected. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 这将创建一个单选按钮：只能选择一个。 |'
- en: '|'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '| This creates a checkbox: multiple checkboxes can be selected. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 这创建了一个复选框：可以选中多个复选框。|'
- en: '|'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| This is like text but the inputted characters are not shown. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 这就像文本，但输入的字符不会显示。|'
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| This creates a button. You can also create buttons using the `<button>` tag.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 这创建了一个按钮。你还可以使用`<button>`标签创建按钮。|'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '| This creates a submit button. This means the form will be send to the server.
    You can also create a submit button using the `<button>` element and its `type="submit"`
    attribute. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 这创建了一个提交按钮。这意味着表单将被发送到服务器。你还可以使用`<button>`元素及其`type="submit"`属性创建提交按钮。|'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| This creates a file upload dialog with a `Choose file` button. When you use
    the `multiple` attribute and the browser supports it, you can select multiple
    files. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 这创建了一个带有“选择文件”按钮的文件上传对话框。当你使用`multiple`属性并且浏览器支持它时，你可以选择多个文件。|'
- en: The name attribute
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称属性
- en: Every input element that is going to be processed once your visitor has done
    something with it, needs to have a name. That name will end up being used to create
    a variable name on the server side when the form is processed. `Radio button`
    input elements that belong together should be given the same name.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在你访客对其进行了操作后将要被处理的输入元素都需要有一个名称。这个名称最终将用于在表单处理时在服务器端创建变量名。属于一起的`radio button`输入元素应该有相同的名称。
- en: In the case of the `checkbox` type input, you should not only use the same name
    for every checkbox input element, you also want to use square brackets behind
    the name. The result of this is that you will have access to an array of all the
    checked elements on the processing side, which will become extremely handy.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在`checkbox`类型输入的情况下，你应该不仅为每个复选框输入元素使用相同的名称，还希望在名称后面使用方括号。结果是，你将能够访问所有已选中元素的处理侧数组，这将变得非常有用。
- en: The value attribute
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值属性
- en: This one is used to assign default values to input elements or to assign values
    that were previously used in the form and were since stored in a database, as
    would be the case in any kind of "This was your choice, would you like to change
    anything?" situation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用于为输入元素分配默认值，或者分配在表单中之前使用并已存储在数据库中的值，就像在“这是你的选择，你想改变任何东西吗？”这类情况中一样。
- en: The checked attribute
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已选中属性
- en: Use this when a `radio button` or `checkbox` needs to be checked by default.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此属性时，如果`radio button`或`checkbox`需要默认选中。
- en: The readonly attribute
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只读属性
- en: If you specify `readonly`, the visitor will not be able to enter any input.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你指定了`readonly`，访客将无法输入任何内容。
- en: Textarea
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本区域
- en: 'When input is expected in a form that is longer than just a few words, you
    can use the `textarea` element to display an input box. You can specify the size
    of the box in rows and columns by using the `rows` and `cols` attributes. Here
    is an example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当在比几个单词更长的表单中期望输入时，你可以使用`textarea`元素来显示输入框。你可以通过使用`rows`和`cols`属性来指定框的大小。以下是一个示例：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Drop-down lists
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下拉列表
- en: 'Often we need to have visitors make a choice from a list. For this purpose,
    we can use the `<select>` element in combination with the `<option>` tag for every
    individual choice. The text portion of the `<option>` element is what will be
    displayed, and the value of the `value` attribute is what will be passed on for
    processing. It is very useful to make the first option the one that is not to
    be chosen, as in the following example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 经常我们需要让访客从列表中选择一个选项。为此，我们可以使用`<select>`元素与每个单独选择的`<option>`标签结合。`<option>`元素的文本部分将显示出来，而`value`属性的值将用于处理。将第一个选项设置为不选择的选项非常有用，如下例所示：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The disabled attribute
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用属性
- en: Both the `<select>` and the `<option>` support **disabled** in case you want
    to enable an option (or the entire drop-down list) to be displayed but not selectable.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`<select>`和`<option>`都支持`disabled`，如果你想要显示一个选项（或整个下拉列表）但不可选择。'
- en: The selected attribute
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已选择属性
- en: If you want to preselect one of the choices, use the **selected** attribute
    of `<option>`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要预选一个选项，请使用`<option>`的`selected`属性。
- en: Tables
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格
- en: Tables are heavily used in HTML documents. If you want to present data in a
    grid of columns and rows, like in a spreadsheet, you may want to create a table.
    A cell in a table can not only contain numbers or words, it can even contain an
    image or ... another table.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 表格在HTML文档中被广泛使用。如果你想以行列网格的形式展示数据，就像在电子表格中一样，你可能需要创建一个表格。表格中的一个单元格不仅可以包含数字或文字，甚至可以包含一个图像或...另一个表格。
- en: By default, the browser will make a judgment call as to how wide each column
    will have to be, depending on the width of the cell contents and how much room
    there is for the table overall.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器将根据单元格内容的宽度和表格整体的空间来决定每个列的宽度。
- en: Table elements
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格元素
- en: 'The following HTML elements are used to create tables:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 HTML 元素用于创建表格：
- en: <table>
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<table>`'
- en: This is the main tag to create a table. Every table begins with a `<table>`
    tag and ends with a `</table>` tag.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建表格的主要标签。每个表格都以 `<table>` 标签开始，以 `</table>` 标签结束。
- en: <thead> <tbody>
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<thead> <tbody>`'
- en: These (optional) elements allow you to separate (and subsequently style) the
    header part and body part of a table. Like in spreadsheets, the header is used
    for the descriptions of what goes in the table rows, and the body for the actual
    content. You can use more than one `<tbody>` section to better organize (and style)
    your table.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些（可选）元素允许你将表格的标题部分和主体部分分开（并随后进行样式化）。就像在电子表格中一样，标题用于描述表格行中包含的内容，而主体用于实际内容。你可以使用多个
    `<tbody>` 部分来更好地组织（并样式化）你的表格。
- en: <tr>
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<tr>`'
- en: No rows? No table. The `<tr>` or **table row** is the element you are going
    to use for all the rows in your table, both the header and body section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 没有行？没有表格。`<tr>` 或 **表格行** 是你将用于表格中所有行的元素，包括标题和主体部分。
- en: <th> <td>
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<th> <td>`'
- en: These are the elements for your table cells. The `<th>` tags are used for your
    labels in the table header and the `<td>` (table data) for your content cells
    in the table body.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是表格单元格的元素。`<th>` 标签用于表格标题中的标签，而 `<td>`（表格数据）用于表格主体中的内容单元格。
- en: Table attributes
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格属性
- en: Some of the table elements have attributes that are unique to tables. We will
    discuss them here.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一些表格元素具有仅适用于表格的属性。我们将在下面讨论它们。
- en: colspan (td)
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: colspan (td)
- en: 'A table that consists of *x* rows and *y* columns will of course contain *x
    times y* cells. With the `colspan` attribute, you can specify that, for a given
    cell, you want to span it across a number of columns. The following line will
    span this table cell across three columns:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由 *x* 行和 *y* 列组成的表格当然会包含 *x 乘以 y* 个单元格。使用 `colspan` 属性，你可以指定对于给定的单元格，你想要它在多个列中跨行。以下行将跨越这个表格单元格的三个列：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: rowspan (td)
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: rowspan (td)
- en: This is the equivalent of `colspan` but for rows. With this attribute, you can
    specify that you want a table cell to be higher than just a single row.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `colspan` 的行版本。使用此属性，你可以指定你想要一个表格单元格比单个行更高。
- en: 'Let''s take a look at a table example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个表格的例子：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: <div>, the "uebertag"
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<div>`, “uebertag”'
- en: Finally, there is the `<div>`, the tag of all tags. When you run into a problem
    trying to fit things on the page where you want them, you will most likely solve
    it by inserting a number of `<div>` elements. Think of a `<div>` as a rectangular
    section of your page. You can even organize your page as a grid. The framework
    we will be using in the second half of the book is exactly that. It uses a 12-column
    grid.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是 `<div>`，所有标签的标签。当你遇到在页面上想要的位置放置内容的问题时，你很可能会通过插入多个 `<div>` 元素来解决它。将 `<div>`
    想象为页面上的一个矩形区域。你甚至可以将你的页面组织成一个网格。本书后半部分我们将使用的框架正是如此。它使用一个12列的网格。
- en: 'Look at this very simple, yet not uncommon example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 看这个非常简单，但并不罕见的一个例子：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Just make this the body of a new HTML page, `minigrid.html`, and look at it.
    You will see ... nothing, because none of the `<div>` elements have any content,
    in which case they do not have any size. `<div>` elements are so-called block
    elements. We will cover this in great detail in the next chapter. Before we do
    that, we are going to conclude this chapter on HTML with a very important topic:
    **HTML entities**.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将此作为新 HTML 页面 `minigrid.html` 的主体，查看它。你会看到……什么也没有，因为没有任何 `<div>` 元素包含任何内容，在这种情况下，它们没有大小。`<div>`
    元素是所谓的块元素。我们将在下一章详细讨论这一点。在我们这样做之前，我们将以一个非常重要的话题来结束本章关于 HTML 的讨论：**HTML 实体**。
- en: HTML entities
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 实体
- en: As we know, all tags begin with a `<` sign and end with a `>` sign. Just imagine
    you want to use one of those as part of your content. This just might confuse
    the browser. That is why we have HTML entities.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，所有标签都以 `<` 符号开始，以 `>` 符号结束。只需想象你想使用其中之一作为你内容的一部分。这可能会让浏览器困惑。这就是为什么我们有
    HTML 实体的原因。
- en: HTML entities are strings that begin with an ampersand and end with a semicolon.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 实体是以 ampersand 符号开始并以分号结束的字符串。
- en: 'This represents the ampersand itself:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这代表的是和号本身：
- en: '[PRE28]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A very useful HTML entity is the non-breaking space:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非常有用的 HTML 实体是不换行空格：
- en: '[PRE29]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It allows you to insert one or more spaces in you content. To use the `<` or
    `>` sign in your content, we have: `&lt;` and `&gt;`'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also very useful are `&eur;`, for the Euro symbol, `&copy;` for the copyright
    sign, and `&reg;` for the Registered Trademark sign.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-English characters can be represented as HTML entities as well, for example,
    `&eacute;` for é, `&egrave;` for è, and `&ecirc;` for ê.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We recommend you look up some of the online references if you want to see a
    complete list.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: HTML5-specific tags
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 introduced a number of new tags that can help you to add structure to
    your document, as they all have the names of common components of a document or
    site, such as header, footer, or article.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: If you have been doing web development for a while, you will have used these
    names in all likelihood, but as a class to categorize `<div>` elements. So if
    you used `<div class="header">`, you can now use `<header>`. Or, to turn things
    around, if you already use `<header>`, your fallback plan to support non-HTML5-capable
    browsers could contain `<div class="header">`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a brief overview of what they are and how they can be used:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`<header>`: This is used to contain the headline for a page or section. It
    typically contains a company logo and navigational elements.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<footer>`: Footers typically contain links to other related information, contact
    info, and copyright statements. Make sure you keep the latter up-to-date. People
    will not trust the information on a site that has a date of two years ago.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<nav>`: This container can be used for the main navigation portion of your
    site.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<aside>`: This tag is very useful to place the component of your side that
    often is placed on the left, next to everything else.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<article>` and `<section>`: These two are useful to better organize your document.
    You can use them for blog posts or, as the names suggest, articles or sections.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of HTML, the first of several languages
    we will use to do web development. HTML uses tags such as `<div>` and tags can
    also have attributes, for example, `<p class="blue">blue paragraph</p>`. All these
    tags combined on a page, an HTML page, form the building blocks of a website.
    Rather than giving an exhaustive list and description of all available HTML elements
    of tags, we walked you through the most common and useful ones.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: HTML elements are used to add content to a website, not to give the site a certain
    look. Colors, the background and foreground, letter types, borders around images,
    and many more visible features of a site are handled through style sheets and
    another language. That language is CSS and that is the topic of our next chapter.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
