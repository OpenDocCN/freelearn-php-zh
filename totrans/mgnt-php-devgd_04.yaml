- en: Chapter 4. Backend Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we added all the frontend functionality for the gift
    registry. Now, customers are able to create registries and add products to the
    customer registries, and in general, have full control over their own registries.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going build all the functionality that store owners
    need to manage and control the registries through the Magento backend.
  prefs: []
  type: TYPE_NORMAL
- en: The Magento backend can be considered, in many senses, as a separate application
    from the Magento frontend. It uses a completely separate theme, style, and a different
    base controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our gift registry, we want to allow store owners to see all customer registries,
    modify the information, and add/remove items. In this chapter, we will cover the
    following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending Adminhtml with configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the grid widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the form widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access and permissions with **Access Control Lists** (**ACLs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Adminhtml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Mage_Adminhtml` is a single module that provides all the backend functionality
    for Magento through the usage of configuration. As we learned before, Magento
    uses scopes to define the configuration. In the previous chapter, we used the
    frontend scope to set up the configuration for our custom module.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify the backend, we need to create a new scope in our configuration file
    called `admin`. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `config.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code is very similar to the one we used before to specify our frontend
    route. However, by declaring the route this way, we are breaking an unwritten
    Magento design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep things consistent on the backend, all new modules should extend
    the main admin route.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of defining the route with the previous code, we are creating a completely
    new admin route.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, you don't want to do this for the Magento backend unless you are creating
    a new route that requires admin access but not the rest of the Magento backend.
    A callback URL for an admin action would be a good example of something like this.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a very easy way to share route names among Magento modules.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing route names was introduced in Magento 1.3, but to this day, we still
    see extensions that don't use this pattern properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `config.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the route''s configuration file located at `app/code/local/Mdg/Giftregistry/etc/config.xml`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After making this change, we can properly access our `admin` controllers through
    the `admin` namespace, for example, `http://magento.localhost.com/giftregistry/index`
    will now be `http://magento.localhost.com/admin/giftregistry/index`.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to create a new controller that we can use to manage the customer
    registries. Let's call this controller `GiftregistryController.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your module's `controllers` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `Adminhtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `GiftregistryController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following code into this file located at `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/GiftregistryController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice something important; this new controller extends `Mage_Adminhtml_Controller_Action`
    instead of `Mage_Core_Controller_Front_Action`, which we have been using so far.
    This is because the `Adminhtml` controller has additional validation to prevent
    non-admin users from accessing their actions.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are placing our controller inside a new subfolder inside the
    `controllers/` directory. By using this subdirectory, we are keeping the frontend
    and backend controllers organized. This is a widely accepted Magento standard
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's leave this blank controller alone, extend the Magento backend
    navigation, and add some extra tabs to the customer edit page.
  prefs: []
  type: TYPE_NORMAL
- en: Back to the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have seen so far, much of Magento is controlled by XML configuration
    files and the backend layout is no different. We need a new `adminhtml` layout
    file. We create it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `design` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new folder named `adminhtml`, and inside it, create the following
    folder structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adminhtml/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--default/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`----default/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`------template/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`------layout/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `layout` folder, let's create a new layout file called `giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code to the `layout` file located at `app/design/adminhtml/default/default/layout/giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add the new layout file to the `config.xml` module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `config.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code to the `config.xml` file located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we are doing inside the layout is creating a new container block and declaring
    a new tab that contains this block.
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly test our changes so far by logging in to the Magento backend and
    opening the customer information by going into **Customer Manager** by navigating
    to **Customers** | **Manage Customers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should get the following error at the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Back to the configuration](img/4195OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because we are trying to add a block that has not been declared yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this, we need to create a new block class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Block` folder and create a new block class following the directory
    structure named `Giftregistry.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `Giftregistry.php` file located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Customer/Edit/Tab/Giftregistry.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are a couple of interesting things happening with this block class. For
    starters, we are extending a different block class, `Mage_Adminhtml_Block_Template`,
    and implementing a new interface, `Mage_Adminhtml_Block_Widget_Tab_Interface`.
    This is done in order to access all the features and functionality of the Magento
    backend.
  prefs: []
  type: TYPE_NORMAL
- en: We are also setting the block template inside the `construct` function of our
    class. Additionally, under `getCustomerId`, we are making use of the Magento global
    variables to get the current customer.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to create the corresponding template file for this block, otherwise,
    we will get an error on the block initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Create a template file named `main.phtml` under the `adminhtml` template folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into `main.phtml`, located at `app/design/adminhtml/default/default/template/mdg/giftregistry/customer/main.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For now, we are just adding the placeholder content to the template, so we can
    actually see our tabs in action. Now, if we go to the customer section in the
    backend, we should see that a new tab is available. Clicking on that tab will
    display our placeholder content.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we have modified the backend and added a **Customers** tab to the customer
    section just by changing a configuration and adding some simple blocks and template
    files. However, so far, this hasn't been particularly useful, so we need a way
    of displaying all the customer gift registries under the **Gift registry** tab.
  prefs: []
  type: TYPE_NORMAL
- en: The grid widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of having to write our own grid blocks from scratch, we can reuse the
    ones that are already provided by the Magento `Adminhtml` module.
  prefs: []
  type: TYPE_NORMAL
- en: The block that we will be extending is called the grid widget. The grid widget
    is a special type of block designed to render a collection of Magento objects
    in a particular table grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'A grid widget is normally rendered inside a grid container. The combination
    of both elements not only allows us to display our data in grid form, but also
    adds search, filtering, sorting, and mass action capabilities. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the block's `Adminhtml/` folder and create a folder named `Giftregistry/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `List.php` inside that folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code inside `List.php`, located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Customer/Edit/Tab/Giftregistry/List.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Looking at the class we just created, there are only three functions involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__construct()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_prepareCollection()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_prepareColumns()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `__construct` function, we are specifying a few important options about
    our grid class, we are setting the grid ID, and the default sort to by `event_date`,
    and we are enabling pagination and filtering.
  prefs: []
  type: TYPE_NORMAL
- en: The `_prepareCollection()` function loads a collection of registries filtered
    by the current customer ID. This function can be used for more complex operations
    in our collection as well. For example, joining a secondary table to get more
    information about the customer or another related record.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, by using the `_prepareColumns()` function, we are telling Magento which
    attributes and columns of our data collection should be shown and how to render
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created a functional grid block, let''s make some changes
    to our layout XML file in order to display it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `giftregistry.xml` folder under the `adminhtml` layout folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the following changes in this folder, which is located at `app/design/adminhtml/default/default/layout/giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What we did was add the grid block as part of our main block, but if we go
    to the customer edit page and click on the **Gift Registry** tab, we still see
    the old placeholder text where the grid is not displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid widget](img/4195OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we haven''t made the necessary changes to our `main.phtml`
    template file. In order to display children blocks, we specifically need to tell
    the templating system to load any or a specific child. For now, let''s just load
    our specific grid block:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `main.phtml` template file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the template code located at `app/design/adminhtml/default/default/template/mdg/giftregistry/customer/main.phtml`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `getChildHtml()` function is responsible for rendering all the child blocks.
  prefs: []
  type: TYPE_NORMAL
- en: The `getChildHtml()` function can be called with a specific child block name
    or without parameters. When called without parameters, it will load all the available
    children blocks.
  prefs: []
  type: TYPE_NORMAL
- en: In our extension, we are only interested in instantiating a particular child
    block. So, we will be passing the block name as the function parameter. Now, if
    we refresh the page, we should see our grid block loaded with all the gift registries
    available for that particular customer.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the registries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, this comes in handy if we want to manage the registries for a specific
    customer, but it does not really help us if we want to manage all the registries
    available in a store. For the latter, we need to create a grid that loads all
    the available gift registries.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already created a `giftregistry` controller for the backend, we can
    use the index action to display all the available registries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is modify the Magento backend navigation to show
    a link to our new controller index action. Again, we can achieve this by using
    XML. In this particular case, we are going to create a new XML file named `adminhtml.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your module `etc` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `adminhtml.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following content in the file located at `app/code/local/Mdg/Giftregistry/etc/adminhtml.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that while the standard is to have this configuration added inside the
    `adminhtml.xml` file, you are likely to encounter extensions where this standard
    is not followed. This configuration can be located inside the `config.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration code creates a new main level menu and a new child-level
    option under it. We are also specifying which action the menu should be mapped
    to, in this case, the index action of our `giftregistry` controller.
  prefs: []
  type: TYPE_NORMAL
- en: If we refresh the backend now, we should see a new gift registry menu added
    to the top-level navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions and ACL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we need to restrict access to certain features of our module, or even
    the whole module, based on the admin rule. Magento allows us to do this by using
    a power feature called Access Control List (ACL). Each role in the Magento backend
    can have different permissions and different ACLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to enable ACLs with our custom module is to define which resources
    should be restricted by the ACL. Not so surprisingly, this is controlled by the
    configuration XML files. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `adminhtml.xml` configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the menu path `app/code/local/Mdg/Giftregistry/etc/adminhtml.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we go to the Magento backend by navigating to **System** | **Permissions**
    | **Roles**. Next, we select the administrator''s role and try to set **Role Resources**
    at the bottom of the list. We will see the new ACL resources we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions and ACL](img/4195OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we gain granular control over which operations each user has
    access to.
  prefs: []
  type: TYPE_NORMAL
- en: If we click on the **Manage Registries** menu, we should get a blank page. As
    we haven't created the corresponding grid block, layouts, and templates, we should
    see a completely blank page.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's start by creating the blocks that we need for our new grid. The way
    we create our `giftregistry` grid will be slightly different from what we did
    for our **Customers** tab.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a grid container block and a grid block. The grid container
    is used to hold the grid header, the buttons, and the grid content, while the
    grid block is only in charge of rendering the grid with pagination, filtering,
    and mass actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to your block `Adminhtml` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new block named `Registries.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the block located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One important thing we are setting up in the `construct` function inside our
    grid container is the protected value of _`controller` and `_blockGroup`. Both
    are used by the Magento grid container to identify the corresponding grid block.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to clarify that `$this->_controller` is not the actual controller's
    name but the `block` class' name, and `$this->_blockGroup` is actually the module's
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue by creating the grid block that as we learned previously. It
    has three main functions, namely _`construct`, `_prepareCollection()`, and `_prepareColumns()`.
    However, in this case, we will add a new function called `_prepareMassActions()`,
    which allow us to modify selected sets of records without having to edit each
    individually. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your block's `Adminhtml` folder and create a new folder called `Registries`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `Model` folder, create a new block called `Grid.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the block located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Grid.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This grid code is very similar to what we created before for the **Customers**
    tab with the exception that, this time, we are not specifically filtering by a
    customer record. Also, this time, we are also creating a grid container block
    instead of implementing a custom block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in order to show the grid in our controller action, we need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `giftregistry.xml` file inside the `adminhtml` layout folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the `giftregistry.xml` file located at `app/code/design/adminhtml/default/default/layout/giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are using a grid container, we only need to specify the grid container
    block; Magento will take care of loading the matching grid container.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to specify or create a template file for the grid or the grid
    container. Both blocks automatically load the base templates from the `adminhtml/default/default`
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can check our newly added gift registry by going to the backend. To
    do so, navigate to **Gift Registry** | **Manage Registries** and to the screen
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Permissions and ACL](img/4195OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating in bulk with mass actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating our base grid block, we defined a function called `_prepareMassactions()`.
    Mass actions provide an easy way of manipulating multiple records from the grid.
    In our case, for now, let''s just implement a mass delete action. Perform the
    following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Giftregistry` grid block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `_prepareMassaction()` function with the following code in this
    block located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Grid.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The way mass actions work is that they pass a series of selected IDs to our
    specified controller action (in this case `massDelete()`). Inside, the `massDelete()`
    action will add code to iterate through the registry collection and delete each
    of the specified registries. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GiftregistryController.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the blank `massDelete()` action with the following code in the file
    located at `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/GiftregistryController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge**: Add two new mass actions to change the status of the registries
    to enabled or disabled. To see the answer with the complete code and full breakdown,
    visit [http://www.magedevguide.com/](http://www.magedevguide.com/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we also want to be able to edit the records listed in our grid. For
    that, we need to add a new function to our registries'' grid class. This function
    is called `getRowUrl()` and is used to specify the action to be taken when clicking
    on a grid row. In our particular case, we want to map that function to the `editAction()`
    function. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Grid.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following function to the file located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Grid.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The form widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have a working gift registry grid, but right now, we aren't able
    to do much more than just getting the list of all the available registries or
    deleting registries in bulk. We need a way of getting the details for a specific
    registry. We can map this to the edit controller action.
  prefs: []
  type: TYPE_NORMAL
- en: The edit controller action will display the registry-specific details and will
    also allow us to modify the registry details and status. We need to create a few
    blocks and templates for this action.
  prefs: []
  type: TYPE_NORMAL
- en: In order to view and edit the registry information, we must implement a form
    widget block. Form widgets work in a similar fashion to the grid widget blocks
    and need to have a form block and a form container block that extend the `Mage_Adminhtml_Block_Widget_Form_Container`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create the form container, let''s take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class file named `Edit.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the class file located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Edit.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Like the grid widget, the form container widget will automatically identify
    and load the matching form block.
  prefs: []
  type: TYPE_NORMAL
- en: One additional protected attribute that is being declared in the form container
    is the `mode` attribute. This protected attribute is used by the container to
    specify the location of the form block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find the code responsible for the creation of the form block inside
    the `Mage_Adminhtml_Block_Widget_Form_Container` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created the form container block, we can proceed to create
    the matching form block:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Registries` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder called `Edit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `Edit` folder, create a new file called `Form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file located at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Edit/Form.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to modify our layout file and tell Magento to load our form container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following code to the `giftregistry.xml` layout file located at `app/code/design/adminhtml/default/default/layout/giftregistry.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check our progress at this point by going into the Magento backend and
    clicking on one of our example registries. We should see the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The form widget](img/4195OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, there seems to be an issue. None of the data is loaded; we just have
    an empty form. We have to modify our `editAction()` controller in order to load
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by modifying the `editAction()` function inside our `GiftregistryController.php`
    file located at `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/GiftregistryController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'What we are doing inside our `editAction()` controller is checking for a registry
    with the same ID, and if it exists, we load that registry entity and make it available
    to our form. Previously, when adding the form code to the `Form.php` file located
    at `app/code/local/Mdg/Giftregistry/Block/Adminhtml/Registries/Edit/Form.php`,
    we included the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can test our changes by reloading the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading the data](img/4195OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Saving the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have created the form to edit a registry, we need to create the
    corresponding action to process and save the data posted by the form. We can use
    the `saveAction()` function to handle this. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GiftregistryController.php` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the blank `saveAction()` function with the following code to the file
    located at `app/code/local/Mdg/Giftregistry/controllers/Adminhtml/GiftregistryController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break down what this code does step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: It checks whether the request has valid post data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It checks that both the `$data` and the `$id` variables are set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If both variables are set, we load a new `registry` entity and set the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we try to save the `registry` entity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing we do is check that the data posted is not empty and that we
    are getting a registry ID as part of the parameters. We also check whether the
    registry ID is a valid instance of the registry entity.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to modify and extend the Magento backend in
    accordance with our specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: While extending, the frontend extends the functionality that the customers and
    users can use. Extending the backend allows us to control this custom functionality
    and how customers interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Grids and forms are important parts of the Magento backend and, by using them
    properly, we can add a lot of functionality without having to write a lot of code
    or reinventing the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to use the permissions and Magento ACL to control and
    restrict the permissions of our custom extension and Magento in general.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into the Magento API and learn how to
    extend it to manipulate our registry data using several methods such as SOAP,
    XML-RPC, and REST.
  prefs: []
  type: TYPE_NORMAL
