["```php\ncurl -Lo phptdd.zip \"https://github.com/PacktPublishing/Test-Driven-Development-with-PHP-8/raw/main/Chapter%207/base.zip\" && unzip -o phptdd.zip && cd base && ./demoSetup.sh\n```", "```php\ndocker ps\n```", "```php\ndocker-compose build && docker-compose up -d\ndocker exec -it docker-server-web-1 /bin/bash\n```", "```php\n/var/www/html/symfony# ./setup.sh\n/var/www/html/behat# ./setup.sh \n```", "```php\n<?php\nnamespace App\\Tests\\Unit;\nuse PHPUnit\\Framework\\TestCase;\nclass HelloTest extends TestCase\n{\n    public function testCanSayHello()\n    {\n        $this->fail(\"--- RED ---\");\n    }\n}\n```", "```php\n    /var/www/html/symfony# php bin/phpunit --filter testCanSayHello --color=always\n    ```", "```php\n<?php\nnamespace App\\Tests\\Unit;\nuse App\\Speaker;\nuse PHPUnit\\Framework\\TestCase;\nclass HelloTest extends TestCase\n{\n    public function testCanSayHello()\n    {\n        $speaker = new Speaker();\n        $this->assertEquals('Hello' $speaker->\n            sayHello());\n    }\n}\n```", "```php\n<?php\nnamespace App;\nclass Speaker\n{\n    public function sayHello(): string\n    {\n        return 'Hello';\n    }\n}\n```", "```php\n    /var/www/html/symfony# php bin/phpunit --filter testCanSayHello --color=always\n    ```", "```php\n<?php\nnamespace App\\Tests\\Unit;\nuse App\\Speaker;\nuse PHPUnit\\Framework\\TestCase;\nclass HelloTest extends TestCase\n{\n    /**\n     * @param \\Closure $func\n     * @param string $expected\n     * @dataProvider provideHelloStrings\n     */\n    public function testCanSayHello(\\Closure \n        $func, string $expected)\n    {\n        $speaker        = new Speaker();\n        $helloMessage   = $speaker->sayHello($func);\n        $this->assertEquals($expected, $helloMessage);\n    }\n    /**\n     * @return array[]\n     */\n    private function provideHelloStrings(): array\n    {\n        return [\n            [function($str) {return ucfirst($str);},  \n                'Hello'],\n            [function($str) {return strtolower($str)\n                ;}, 'hello'],\n            [function($str) {return strtoupper($str)\n                ;}, 'HELLO'],\n        ];\n    }\n}\n```", "```php\n<?php\nnamespace App;\nclass Speaker\n{\n    /**\n     * @return string \n     */\n    public function sayHello(\\Closure $func): string\n    {\n        return $func('Hello');\n    }\n}\n```", "```php\n    /var/www/html/symfony# php bin/phpunit --filter testCanSayHello --color=always\n    ```", "```php\n$ docker-compose build && docker-compose up -d\n```", "```php\n$ docker exec -it docker_server-web_1 /bin/bash\n```", "```php\nFeature: Inventory Clerk Registration\n  In order to access the inventory system\n  As an Inventory Clerk\n  I need to be able to create a clerk account\n  Scenario: Access Registration Page\n    Given I am in the home \"/\" path\n    When I click the \"Register\" link\n    Then I should be redirected to the registration page\n  Scenario: Register\n    Given I am in the register \"/register\" path\n    When I fill in Email \"Email\" with \n        \"clerk_email@phptdd.bdd\"\n    And I fill in Password \"Password\" with \"password\"\n    And I check the \"AgreeTerms\" checkbox\n    And I click on the \"Register\" button\n    Then I should be able to register a new account\n```", "```php\n/var/www/html/behat# composer install\n```", "```php\ndefault:\n  suites:\n    default:\n      contexts:\n        - FeatureContext\n        - HomeContext\n        - InventoryClerkRegistrationContext\n```", "```php\n    /var/www/html/behat# ./vendor/bin/behat --init \n    ```", "```php\n/var/www/html/behat# ./vendor/bin/behat features/inventory_clerk_registration.feature --append-snippets\n```", "```php\n    /var/www/html/behat# ./vendor/bin/behat\n    ```", "```php\n    /var/www/html/symfony# composer install\n    ```", "```php\n/**\n * @Given I am on \\/\n */\npublic function iAmOn()\n{\n    throw new \\Exception();\n}\n```", "```php\n    /var/www/html/behat# vendor/bin/behat\n    ```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Controller;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nclass HomeControllerTest extends WebTestCase\n{\n    public function testCanLoadIndex(): void\n    {\n        $client = static::createClient();\n        $client->request('GET', '/');\n        $this->assertResponseIsSuccessful();\n    }\n}\n```", "```php\n<?php\nnamespace App\\Tests\\Integration\\Controller;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nclass RegistrationControllerTest extends WebTestCase\n{\n    public function testCanLoadRegister(): void\n    {\n        $client = static::createClient();\n        $client->request('GET', '/register');\n        $this->assertResponseIsSuccessful();\n        $this->markTestIncomplete();\n    }\n}\n```", "```php\n/var/www/html/symfony# php bin/phpunit --testsuite Functional \n```", "```php\n/var/www/html/symfony# php bin/console make:user \n```", "```php\n/var/www/html/symfony# php bin/console doctrine:database:create --env=test\n/var/www/html/symfony# php bin/console doctrine:database:create\n/var/www/html/symfony# php bin/console make:migration\n/var/www/html/symfony# php bin/console doctrine:migrations:migrate -n --env=test\n/var/www/html/symfony# php bin/console doctrine:migrations:migrate -n\n```", "```php\n/var/www/html/symfony# php bin/console make:registration-form\n```", "```php\n/var/www/html/symfony# php bin/phpunit --filter RegistrationControllerTest\n```", "```php\n/var/www/html/symfony# php bin/phpunit --filter RegistrationControllerTest\n```", "```php\n/var/www/html/symfony# php bin/console make:controller HomeController\n```", "```php\n/var/www/html/symfony# php bin/phpunit --testsuite Functional --debug\n```", "```php\n<div class=\"example-wrapper\">\n    <h1>{{ controller_name }}</h1>\n    <ul>\n        <li><a href=\"/register\" id=\"lnk-register\">\n            Register</a> </li>\n    </ul>\n</div>\n```", "```php\n<?php\nuse Behat\\Mink\\Mink;\nuse Behat\\Mink\\Session;\nuse Behat\\Mink\\Driver\\GoutteDriver;\nuse Behat\\MinkExtension\\Context\\MinkContext;\nuse Behat\\MinkExtension\\Context\\MinkAwareContext;\n/**\n * Defines application features from the specific context.\n */\nclass InventoryClerkRegistrationContext extends MinkContext implements MinkAwareContext\n{\n    /**\n     * Initializes context.\n     *\n     * Every scenario gets its own context instance.\n     * You can also pass arbitrary arguments to the\n     * context constructor through behat.yml.\n     */\n    public function __construct()\n    {\n        $mink = new Mink([\n            'goutte'    => new Session(new GoutteDriver()), // Headless browser\n        ]);\n        $this->setMink($mink);\n        $this->getMink()->getSession('goutte')->start();\n    }\n}  \n```", "```php\n/**\n * @Given I am in the home :arg1 path\n */\npublic function iAmInTheHomePath($arg1)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $sessionHeadless->visit($arg1);\n    // Make sure the register link exists.\n    $assertHeadless = $this->assertSession('goutte');\n    $assertHeadless->elementExists('css', '#lnk-register');\n}\n/**\n * @When I click the :arg1 link\n */\npublic function iClickTheLink($arg1)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $homePage = $sessionHeadless->getPage();\n    $homePage->clickLink($arg1);\n}\n```", "```php\n/**\n * @Then I should be redirected to the registration page\n */\npublic function iShouldBeRedirectedToTheRegistrationPage()\n{\n    // Make sure we are in the correct page.\n    $assertHeadless = $this->assertSession('goutte');\n    $assertHeadless->pageTextContains('Register');\n    $assertHeadless->elementExists('css', '#registration_form_email');\n} \n```", "```php\n/**\n * @When I fill in Email :arg1 with :arg2\n */\npublic function iFillInEmailWith($arg1, $arg2)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $registrationPage = $sessionHeadless->getPage();\n    $registrationPage->fillField($arg1, $arg2);\n}\n/**\n * @When I fill in Password :arg1 with :arg2\n */\npublic function iFillInPasswordWith($arg1, $arg2)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $registrationPage = $sessionHeadless->getPage();\n    $registrationPage->fillField($arg1, $arg2);\n}\n```", "```php\n/**\n * @When I check the :arg1 checkbox\n */\npublic function iCheckTheCheckbox($arg1)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $registrationPage = $sessionHeadless->getPage();\n    $registrationPage->checkField($arg1);\n}\n/**\n * @When I click on the :arg1 button\n */\npublic function iClickOnTheButton($arg1)\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $registrationPage = $sessionHeadless->getPage();\n    $registrationPage->pressButton($arg1);\n}\n```", "```php\n/**\n * @Then I should be able to register a new account\n */\npublic function iShouldBeAbleToRegisterANewAccount()\n{\n    $sessionHeadless = $this->getMink()->getSession\n        ('goutte');\n    $thePage = $sessionHeadless->getPage()->getText();\n    if (!str_contains($thePage, 'There is already an \n        account with this email')) {\n    $assertHeadless = $this->assertSession('goutte');\n    $assertHeadless->addressEquals('/home');\n}\n```", "```php\n/var/www/html/behat# ./runBehat.sh --suite=suite_a features/inventory_clerk_registration.feature\n```"]