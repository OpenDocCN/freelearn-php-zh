["```php\n            $a = 2 + 5 \n\n    ```", "```php\n            if ($a > 5) { } \n\n    ```", "```php\nSELECT * FROM user WHERE id = 42 \n\n```", "```php\nfunction sum($array) { \n    $sum = 0; \n    foreach ($array as $value) { \n        $sum += $value; \n    } \n    saveToDatabase($sum); \n    return $sum; \n} \nsum([5, 1, 3, 7, 9]); \n\n```", "```php\nfunction add($first, $second) { \n    return $first + $second; \n} \nadd(5, 2); \n\n```", "```php\nfunction greaterThan($collection, $threshold) { \n    $out = []; \n    foreach ($collection as $val) { \n        if ($val > $threshold) { \n            $out[] = $val; \n        } \n    } \n    return $out; \n} \ngreaterThan([5, 12, 8, 9, 42], 8); \n// will return: [12, 9, 42] \n\n```", "```php\n$input = ['apple', 'banana', 'orange', 'raspberry']; \n$lengths = array_map(function($item) { \n    return strlen($item); \n}, $input); \n// $lengths = [5, 6, 6, 9]; \n\n```", "```php\narray_map(function($item) { \n    return strlen($item); \n}, $input); \n\n```", "```php\n$result = []; \nforeach ($input as $value) { \n    $result[] = strlen($value); \n} \n\n```", "```php\n$input = ['apple', 'banana', 'orange', 'raspberry']; \n$sum = 0; \nforeach ($input as $fruit) { \n    $length = strlen($fruit); \n    if ($length > 5) { \n        $sum += $length; \n    } \n} \n// $sum = 21 \nprintf(\"sum: %d\\n\", $sum); \n\n```", "```php\n$lengths = array_map(function($fruit) { \n    return strlen($fruit); \n}, $input); \n$filtered = array_filter($lengths, function($length) { \n    return $length > 5; \n}); \n$sum = array_reduce($filtered, function($a, $b) { \n    return $a + $b; \n}); \n\n```", "```php\n$sum = array_reduce(array_filter(array_map(function($fruit) { \n    return strlen($fruit); \n}, $input), function($length) { \n    return $length > 5; \n}), function($a, $b) { \n    return $a + $b; \n}); \n\n```", "```php\narray array_map(callable $callback, array $array1 [, $... ]) \narray array_filter(array $array, callable $callback) \nmixed array_reduce(array $array, callable $callback) \n\n```", "```php\nuse function Functional\\map; \nuse function Functional\\filter; \nuse function Functional\\reduce_left; \n\n$sum = reduce_left(filter(map($input, function($fruit) { \n    return strlen($fruit); \n}), function($length) { \n    return $length > 5; \n}), function($val, $i, $col, $reduction) { \n    return $val + $reduction; \n}); \n\n```", "```php\nvar sum = inputs \n    .map(fruit => fruit.length) \n    .filter(len => len > 5) \n    .reduce((a, b) => a + b);  \n\n```", "```php\n$count = function() { \n    printf(\"%d \", count($this->fruits)); \n}; \nvar_dump(get_class($count)); \n// string(7) \"Closure\" \n\n```", "```php\nclass MyClass { \n    public $fruits; \n    public function __construct($arr) { \n        $this->fruits = $arr; \n    } \n} \n\n```", "```php\n// closures_01.php \n// ... the class definition goes here \n$count = function() { \n    printf(\"%d \", count($this->fruits)); \n}; \n\n$obj1 = new MyClass(['apple', 'banana', 'orange']); \n$obj2 = new MyClass(['raspberry', 'melon']); \n\n$count->call($obj1); \n$count->call($obj2); \n\n```", "```php\n$ php closures_01.php\n3\n2\n\n```", "```php\n// closures_03.php \n$str = 'Hello, World'; \n\n$func = function() use ($str) { \n    $str .= '!!!'; \n    echo $str . \"\\n\"; \n}; \n$func(); \necho $str . \"\\n\"; \n\n$func2 = function() use (&$str) { \n    $str .= '???'; \n    echo $str . \"\\n\"; \n}; \n$func2(); \necho $str . \"\\n\"; \n\n```", "```php\n$ php closures_03.php\nHello, World!!!\nHello, World\nHello, World???\nHello, World???\n\n```", "```php\n// observer_01.php \nclass Observable { \n    /** @var Observer[] */ \n    private $observers = []; \n    private $id; \n    static private $total = 0; \n\n    public function __construct() { \n        $this->id = ++self::$total; \n    } \n\n    public function registerObserver(Observer $observer) { \n        $this->observers[] = $observer; \n    } \n\n    public function notifyObservers() { \n        foreach ($this->observers as $observer) { \n            $observer->notify($this, func_get_args()); \n        } \n    } \n\n    public function __toString() { \n        return sprintf('Observable #%d', $this->id); \n    } \n} \n\n```", "```php\n// observer_01.php \nclass Observer { \n    static private $total = 0; \n    private $id; \n\n    public function __construct(Observable $observable) { \n        $this->id = ++self::$total; \n        $observable->registerObserver($this); \n    } \n\n    public function notify($obsr, $args) { \n        $format = \"Observer #%d got \"%s\" from %s\\n\"; \n        printf($format, $this->id, implode(', ', $args), $obsr); \n    } \n} \n\n```", "```php\n$observer1 = new Observer($subject); \n$observer2 = new Observer($subject); \n$subject->notifyObservers('test'); \n\n```", "```php\n$ php observer_01.php\n// Observer #1 got \"test\" from Observable #1\n// Observer #2 got \"test\" from Observable #1\n\n```", "```php\n$.get('/foo/bar').done(response => { \n    // ... \n}).fail(response => { \n    // ... \n}).complete(response => { \n    // ... \n}); \n\n```", "```php\n// promises_01.js \nfunction functionReturningAPromise() { \n    var d = $.Deferred(); \n    setTimeout(() => d.resolve(42), 0); \n    return d.promise(); \n} \n\nfunctionReturningAPromise() \n    .then(value => value + 1) \n    .then(value => 'result: ' + value) \n    .then(value => console.log(value)); \n\n```", "```php\n$ node promises_01.js \nresult: 43\n\n```", "```php\ngulp.src('src/*.js') \n  .pipe(concat('all.min.js')) \n  .pipe(gulp.dest('build')); \n\n```", "```php\nvar filter = require('gulp-filter'); \nvar stream = gulp.src('src/*.js'); \nvar substream1 = stream.pipe(filter(['*.min.js'])); \nvar substream2 = stream.pipe(filter(['!/app/*'])); \n\n```", "```php\nvar merge = require('merge2'); \nmerge(gulp.src('src/*.js'), gulp.src('vendor/*')) \n    .pipe(uglify()); \n    .pipe(gulp.dest('build')); \n\n```", "```php\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher; \n$dispatcher = new EventDispatcher(); \n$listener = new AcmeListener(); \n$dispatcher->addListener('event_name', [$listener, 'action']); \n\n```", "```php\nfunction searchAndReturnPromise(term) { \n    // perform an AJAX request and return a Promise \n} \n\nvar keyup = Rx.Observable.fromEvent($('#textInput'), 'keyup') \n    .map(e => e.target.value) \n    .filter(text => text.length > 2) \n    .debounceTime(750) \n    .distinctUntilChanged(); \nvar searcher = keyup.switchMap(searchAndReturnPromise); \n\n```", "```php\nvar mouseup   = Rx.Observable.fromEvent(dragTarget, 'mouseup'); \nvar mousemove = Rx.Observable.fromEvent(document, 'mousemove'); \nvar mousedown = Rx.Observable.fromEvent(dragTarget, 'mousedown'); \n\nvar mousedrag = mousedown.mergeMap(md => { \n    var sX = md.offsetX, sY = md.offsetY; \n    return mousemove.map(mm => { \n        mm.preventDefault(); \n        return {left: mm.clientX - sX, top: mm.clientY - sY}; \n    }).takeUntil(mouseup); \n}); \n\nvar subscription = mousedrag.subscribe(pos => { \n    dragTarget.style.top = pos.top + 'px'; \n    dragTarget.style.left = pos.left + 'px'; \n}); \n\n```", "```php\n$ mkdir rxphp_01\n$ cd rxphp_01\n$ php composer.phar init\n\n```", "```php\n$ php composer.phar require reactivex/rxphp\n\n```", "```php\n// rxphp_01.php \nrequire __DIR__ . '/vendor/autoload.php'; \n\n$fruits = ['apple', 'banana', 'orange', 'raspberry']; \n$observer = new \\Rx\\Observer\\CallbackObserver( \n    function($value) { \n        printf(\"%s\\n\", $value); \n    }, null, function() { \n        print(\"Complete\\n\"); \n    }); \n\n\\Rx\\Observable::fromArray($fruits) \n    ->map(function($value) { \n        return strlen($value); \n    }) \n    ->subscribe($observer); \n\n```", "```php\n$ php rxphp_01.php \n5\n6\n6\n9\nComplete\n\n```"]