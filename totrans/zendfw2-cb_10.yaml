- en: Appendix A. Setting up the Essentials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 设置基本要素
- en: 'In the appendix we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在附录中，我们将涵盖：
- en: Making sure you have all that you need
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你拥有所有你需要的东西
- en: Downloading Zend Framework 2 and finding its documentation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Zend Framework 2并查找其文档
- en: Composer and its uses within Zend Framework 2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer及其在Zend Framework 2中的用途
- en: Basic Zend Framework 2 structures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本Zend Framework 2结构
- en: About storage adapters and patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于存储适配器和模式
- en: Making sure you have all that you need
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保你拥有所有你需要的东西
- en: The Zend Server is a nice piece of software that takes out a lot of work from
    our hands by installing everything we need (or at least provide a good platform)
    to code Zend Framework 2 (and Zend Framework 1!) applications. Although the paid
    version of Zend Server might not be necessary for production applications, developing
    in the developer version of the Zend Server is a pure delight as it will give
    a proper overview of the system, logs, configuration, and everything else we need
    to know.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Server是一款优秀的软件，通过安装我们需要的所有东西（或者至少提供一个良好的平台）来从我们的手中解脱出来，以便编码Zend Framework
    2（以及Zend Framework 1！）应用程序。尽管Zend Server的付费版本可能对于生产应用程序不是必需的，但在Zend Server的开发版本中进行开发是一种纯粹的乐趣，因为它将提供系统的适当概述、日志、配置以及我们需要了解的一切。
- en: We are going the cheap way by installing the Zend Server Community Edition,
    which installs everything we need to use Zend Framework and Zend Framework 2\.
    The handy thing about the Zend Server is not only the ease of installation, but
    the immense toolset you get with the server itself. It is a great product to get
    a good overview of any PHP related configuration and is also able to monitor performance
    and track events in your system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择通过安装Zend Server社区版来走便宜的路，它安装了我们使用Zend Framework和Zend Framework 2所需的所有东西。关于Zend
    Server的好处不仅在于安装的简便性，还在于服务器本身提供的庞大工具集。这是一款很好的产品，可以了解任何PHP相关的配置，并且还能够监控性能和跟踪系统中的事件。
- en: To install the Zend Server we need to download it first from the Zend website
    ([http://www.zend.com](http://www.zend.com)), at the moment Zend Server 6.2.0
    is the latest version of the application, and although we use it, the installation
    process should be the same for any later versions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装Zend Server，我们首先需要从Zend网站([http://www.zend.com](http://www.zend.com))下载它，目前Zend
    Server 6.2.0是该应用程序的最新版本，尽管我们使用它，但安装过程对于任何后续版本都应该是相同的。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Zend Server is not needed to run Zend Framework 2, but does, however, provide
    an excellent platform that needs only minimal configuration to get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Server不是运行Zend Framework 2所必需的，但它确实提供了一个优秀的平台，只需要进行最小配置就可以开始使用。
- en: Installing Zend Server Community Edition on a Linux environment
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux环境中安装Zend Server社区版
- en: When we have downloaded Zend Server for Linux (you need a free Zend account
    to download any of their software), we will have a file called `ZendServer-6.2.0-RepositoryInstaller-linux.tar.gz`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载了Linux版本的Zend Server（你需要一个免费的Zend账户来下载他们的任何软件）时，我们将有一个名为`ZendServer-6.2.0-RepositoryInstaller-linux.tar.gz`的文件。
- en: 'Next, to install the Zend Server we need to execute the following command sequence:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了安装Zend Server，我们需要执行以下命令序列：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will unpack the Gzipped Tarball (this is a compression method) package
    and extract it in the `ZendServer-RepositoryInstaller-linux` directory. Now let''s
    install the Zend Server:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解压Gzipped Tarball（这是一种压缩方法）包，并将其提取到`ZendServer-RepositoryInstaller-linux`目录中。现在让我们安装Zend
    Server：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have chosen to install PHP 5.4, and if there is no reasonable explanation
    why we need PHP 5.3, we recommend keeping it in this version. If we need PHP 5.3,
    however, we can easily change the 5.4 to 5.3 and it will install the lower PHP
    version. Once we execute the `install_zs.sh` command as the root user (hence,
    the `sudo`, which tells the system we want to execute a command as a super user)
    we will get a short confirmation window asking us if we really want to install
    the Zend Server. Simply press *Enter* to continue the installation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择安装PHP 5.4，如果没有合理的解释说明为什么我们需要PHP 5.3，我们建议保持在这个版本。如果我们需要PHP 5.3，我们可以轻松地将5.4改为5.3，并且它会安装较低的PHP版本。一旦我们以root用户身份执行`install_zs.sh`命令（因此，使用`sudo`，它告诉系统我们想要以超级用户身份执行命令），我们将得到一个简短的确认窗口，询问我们是否真的想要安装Zend
    Server。只需按*Enter*键继续安装。
- en: At some point during the installation, the script will ask if you want to install
    X amount of new packages. You want to answer `Y` or `yes` for that, otherwise
    the installation will end there.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中某个时刻，脚本会询问你是否想要安装X数量的新包。你想要回答`Y`或`yes`，否则安装将在这里结束。
- en: 'The installation itself takes a couple of minutes and upon successful installation,
    the script will display the following message:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 安装本身只需要几分钟，安装成功后，脚本将显示以下信息：
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Security wise it is best to always use the secure version of Zend Server, as
    you want to make sure that passwords are put in securely. However, while working
    locally it doesn't really matter that much.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全方面，最好始终使用Zend Server的安全版本，因为您想确保密码被安全地存储。然而，在本地工作的时候，这并不是特别重要。
- en: Installing Zend Server Community Edition on a Windows environment
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows环境下安装Zend Server社区版
- en: When we have downloaded the Zend Server for Microsoft Windows (you need a free
    Zend account to download any of their software) and we started up the `ZendServer-6.2.0-php-5.4.21-Windows_x86.exe`
    file, we find ourselves again with a very simple installation. If we choose the
    custom installation, we have a few options that we can change, but normally the
    default options are fine enough for us.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们下载了针对Microsoft Windows的Zend Server（您需要免费的Zend账户来下载他们的任何软件）并启动了`ZendServer-6.2.0-php-5.4.21-Windows_x86.exe`文件后，我们发现自己又遇到了一个非常简单的安装。如果我们选择自定义安装，我们可以更改一些选项，但通常默认选项对我们来说已经足够好了。
- en: Another great thing about the Windows installation of Zend Server is that the
    installation program asks us if we want to use an existing IIS web server or install
    an Apache server instead.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Windows环境下安装Zend Server的另一个优点是，安装程序会询问我们是否想使用现有的IIS网络服务器或安装Apache服务器。
- en: What option you choose is all down to the configuration requirements for the
    rest of the project, assuming that we have more requirements; otherwise, we would
    really need to reconsider using Windows for our PHP environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择哪个选项完全取决于整个项目的配置要求，假设我们有更多的要求；否则，我们真的需要重新考虑是否使用Windows作为我们的PHP环境。
- en: After a summary screen of the installation we are about to commence, the installation
    will continue and configure the system. If the installation has been completed
    successfully, we get the option to start working with the Zend Server and to add
    the Zend Server as a desktop icon.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将开始的安装摘要屏幕之后，安装将继续并配置系统。如果安装成功完成，我们将有选项开始使用Zend Server并将Zend Server添加到桌面图标。
- en: First-time run of Zend Server
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首次运行Zend Server
- en: If we go to the Zend Server interface in the browser for the first time (please
    note that the Zend Server in Windows does not have the secure connection built-in
    like the Linux version has), we will see the license agreement, which we need
    to accept before we can go on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们第一次在浏览器中访问Zend Server界面（请注意，Windows版本的Zend Server没有内置安全连接，就像Linux版本那样），我们将看到许可协议，我们需要接受它才能继续。
- en: In the next screen, depending on the purpose of the Zend Server, we need to
    choose between the Development, Single Server, or Cluster license. The Single
    Server and Cluster license come standard with a 30-day trial version, and if we
    are new to the Zend Server then this is the best option to see the full server
    capabilities in action.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏幕中，根据Zend Server的目的，我们需要在开发、单服务器或集群许可之间进行选择。单服务器和集群许可都附带30天的试用版，如果我们是Zend
    Server的新用户，那么这是查看服务器全部功能的最优选项。
- en: Next up is setting the administrator and developer password. If we are not the
    only one working on the server environment, it is best to use separate accounts
    as that creates a better maintenance structure in the organization; if only one
    person (or account) is capable of changing the system settings, then we can just
    skip filling in the developer details as they will not really have any use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是设置管理员和开发者密码。如果我们不是唯一一个在服务器环境中工作的人，最好使用单独的账户，因为这会在组织中创建更好的维护结构；如果只有一个人（或账户）能够更改系统设置，那么我们可以直接跳过填写开发者详细信息，因为它们实际上并没有什么用处。
- en: Once we have done all that, we are ready to login for the first time in our
    brand new system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了所有这些，我们就可以准备在我们的全新系统中首次登录。
- en: By default the login URL to the administration panel is `http://localhost:10081/ZendServer`
    for the non secure panel and `https://localhost:10082/ZendServer` for the secure
    administration panel.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，登录管理面板的URL是非安全面板的`http://localhost:10081/ZendServer`，而对于安全管理面板则是`https://localhost:10082/ZendServer`。
- en: The first thing we will see is the overview of the server's health, which also
    displays the current events that have taken place such as high memory uses, exceptions,
    and slow execution times.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先看到的是服务器健康状况概述，它还显示了当前发生的事件，如高内存使用、异常和缓慢的执行时间。
- en: 'The main bit we want to view now is the PHP configuration, which can be found
    in the **Configuration** screen, under **PHP**. It is very important to set the
    time zone for PHP as otherwise PHP will annoy us(for a reason: as some application
    developers erroneously believe that the machine is running on their local time
    zone, and base many of their date and time code on this) with warnings telling
    us that this should be set. If we search for the `date.timezone` in the search
    bar in the top right corner of the screen, it will take us (and highlight) immediately
    to the setting that we need to change. We can easily search on the Internet what
    the relevant value is for our specific time zone; this can be, for example, `Europe/London`
    or `America/New_York`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想查看的主要部分是 PHP 配置，它可以在 **配置** 屏幕下的 **PHP** 下找到。为 PHP 设置时区非常重要，否则 PHP 会通过警告来打扰我们（原因：因为一些应用程序开发者错误地认为机器运行在他们的本地时区，并将许多日期和时间代码基于此），告诉我们应该设置它。如果我们搜索屏幕右上角的搜索栏中的
    `date.timezone`，它将立即带我们去（并突出显示）我们需要更改的设置。我们可以在互联网上轻松搜索我们特定时区的相关值；例如，可以是 `Europe/London`
    或 `America/New_York`。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'PHP manual: This is a list of supported time zones [http://php.net/manual/en/timezones.php](http://php.net/manual/en/timezones.php)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 手册：这是一个支持时区的列表 [http://php.net/manual/en/timezones.php](http://php.net/manual/en/timezones.php)
- en: Downloading Zend Framework 2 and finding its documentation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Zend Framework 2 和查找其文档
- en: Let's find out where to get all the essential literature on the Zend Framework.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来了解一下获取所有关于 Zend Framework 的关键文献的地方。
- en: Finding Zend Framework 2
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找 Zend Framework 2
- en: The main website of Zend Framework 2 is [http://framework.zend.com](http://framework.zend.com)
    and always holds the most updated information on Zend Framework 2\. We can easily
    download the framework from there, as well as some packages, for example the framework
    including the Zend Server, or the minimal package of Zend Framework.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 2 的官方网站是 [http://framework.zend.com](http://framework.zend.com)，并且始终包含有关
    Zend Framework 2 的最新信息。我们可以轻松地从那里下载框架，以及一些包，例如包含 Zend Server 的框架，或者 Zend Framework
    的最小包。
- en: Downloading only the framework itself, without any context like the skeleton
    application is a great way of starting an application from scratch without any
    of the clutter that comes with the default skeleton.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仅下载框架本身，而不包含任何上下文，如骨架应用程序，是从头开始构建应用程序的好方法，无需携带默认骨架带来的任何杂乱。
- en: Coding in the phpcloud
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 phpcloud 中编码
- en: A new toy made by Zend that is currently still in beta level is the phpcloud,
    which allows developers to create a fast reliable development environment for
    developers to develop on. One of the features of using the phpcloud is that it
    not only comes with Zend Framework 2, but also runs on the Zend Server which allows
    spectacular debugging capabilities and application deployment. At the moment sign
    up for the phpcloud is free, but we can assume that this will change in the future.
    How this will turn out, however, is not known to us yet.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Zend 制造的新玩具目前仍处于测试阶段，是 phpcloud，它允许开发者创建一个快速可靠的开发环境，以便开发者进行开发。使用 phpcloud
    的一个特性是它不仅包含 Zend Framework 2，而且运行在 Zend Server 上，这允许出色的调试能力和应用程序部署。目前注册 phpcloud
    是免费的，但我们预计这将在未来发生变化。然而，结果如何，我们目前还不知道。
- en: The documentation and getting started guide
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档和入门指南
- en: The Zend Framework 2 documentation is luckily much more reliable than the original
    Zend Framework documentation (which is a good thing, trust me). Zend really committed
    to creating a framework that is well documented and has an open contribution that
    is powered by a strong community and tools like Github (instead of Subversion
    as in the original framework). The documentation and getting started guide can
    both be found under the **Learn** menu option on the main Zend Framework 2 website.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Zend Framework 2 的文档幸运地比原始的 Zend Framework 文档（这确实是个好事，请相信我）要可靠得多。Zend 真正致力于创建一个文档详尽且拥有强大社区和如
    Github（而不是原始框架中的 Subversion）支持的开放贡献的框架。文档和入门指南都可以在主 Zend Framework 2 网站的 **学习**
    菜单选项下找到。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The main Zend Framework 2 website found at [http://framework.zend.com](http://framework.zend.com)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在 [http://framework.zend.com](http://framework.zend.com) 找到主要的 Zend Framework
    2 网站。
- en: The Zend Framework 2 Coding Standards found at [http://framework.zend.com/wiki/x/yQCvAg](http://framework.zend.com/wiki/x/yQCvAg)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://framework.zend.com/wiki/x/yQCvAg](http://framework.zend.com/wiki/x/yQCvAg)
    可以找到 Zend Framework 2 编码标准。
- en: The latest Zend Framework 2 Documentation PDF found at [https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf](https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf](https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf)
    可以找到最新的 Zend Framework 2 文档 PDF。
- en: The Zend Framework 2 Security RSS Feed found at [http://framework.zend.com/security/feed/](http://framework.zend.com/security/feed/)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://framework.zend.com/security/feed/](http://framework.zend.com/security/feed/)
    可以找到 Zend Framework 2 安全 RSS Feed。
- en: The Zend Framework 2 Blog RSS Feed found at [http://framework.zend.com/blog/feed-rss.xml](http://framework.zend.com/blog/feed-rss.xml)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [http://framework.zend.com/blog/feed-rss.xml](http://framework.zend.com/blog/feed-rss.xml)
    可以找到 Zend Framework 2 博客的 RSS Feed。
- en: Composer and its uses within Zend Framework 2
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer 和其在 Zend Framework 2 中的用途
- en: Composer is a dependency manager tool for PHP, which has been live since the
    spring of 2011, and is incredibly handy when it comes to getting projects set
    up with ease.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 是一个 PHP 依赖管理工具，自 2011 年春季以来一直活跃，在轻松设置项目时非常方便。
- en: Composer reads its configuration from a file called `composer.json`, which is
    a JSON file that is being read by `composer.phar` (PHP archive).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 从名为 `composer.json` 的文件中读取其配置，这是一个由 `composer.phar`（PHP 归档）读取的 JSON
    文件。
- en: We can use Composer to initialize the Zend Framework 2 library when we are using
    the Zend Framework 2 skeleton application. Other functionalities within Zend Framework
    2 include installing new modules or libraries, which we can use to extend our
    application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Zend Framework 2 骨架应用时，可以使用 Composer 初始化 Zend Framework 2 库。Zend Framework
    2 中的其他功能包括安装新的模块或库，我们可以使用这些来扩展我们的应用。
- en: The composer.json file
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`composer.json` 文件'
- en: 'If we open up the `composer.json` file we can see that the file has a couple
    of keys defined, which tells the Composer what it needs to load, and what versions
    we need. By default, the Zend Framework 2 skeleton application''s `composer.json`
    will look similar to the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开 `composer.json` 文件，我们可以看到文件定义了一些键，这些键告诉 Composer 需要加载什么，以及需要哪些版本。默认情况下，Zend
    Framework 2 骨架应用的 `composer.json` 将类似于以下内容：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see the file is pretty easy to understand, and the keys are pretty
    self explanatory, but to be sure we will go through them quickly to make sure
    we understand what is going on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个文件很容易理解，键也很容易解释，但为了确保我们理解正在发生的事情，我们将快速浏览它们。
- en: '`name`: This is the name of the package with the vendor name as the prefix,
    in this case the vendor is `zendframework` and the `skeleton-application` is the
    package.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 这是带有供应商名称作为前缀的包名，在这种情况下，供应商是 `zendframework`，而 `skeleton-application`
    是包名。'
- en: '`description`: This short description tells us what the package does.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 这段简短描述告诉我们这个包的功能。'
- en: '`license`: This is the license the software is licensed under, normally this
    is one of the numerous open source/software licenses such as the BSD, GPL and
    MIT licenses. However, a closed-source software license is also available under
    the key ''proprietary''.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`license`: 这是软件的许可协议，通常这是众多开源/软件许可协议之一，如 BSD、GPL 和 MIT 许可协议。然而，在 ''proprietary''
    键下也有可用的闭源软件许可协议。'
- en: '`keywords`: This is an array of keywords that is used when searching for this
    package on the getcomposer.org website.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keywords`: 这是一个关键词数组，用于在 getcomposer.org 网站上搜索此包时使用。'
- en: '`homepage`: Well this is pretty clear, is it not?'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`homepage`: 这一点非常清楚，不是吗？'
- en: '`require:` Now this is getting interesting, as this will tell Composer exactly
    what we need to run our package. In this case it is an array with PHP, where we
    need Version 5.3.3 or higher and Zend Framework 2 version 2.2.0rc1 or higher.
    Please note however, that in production we should always avoid a dev Version or
    a package with a greater than symbol, as it could potentially break our application.
    Always (please remember!) to get the exact version required when putting the application
    live.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require:` 现在变得有趣了，因为它将告诉 Composer 我们需要运行我们的包的确切内容。在这种情况下，它是一个包含 PHP 的数组，我们需要版本
    5.3.3 或更高版本，以及 Zend Framework 2 版本 2.2.0rc1 或更高版本。请注意，然而，在生产环境中，我们应该始终避免使用 dev
    版本或带有大于符号的包，因为这可能会破坏我们的应用。请记住，在将应用上线时，始终获取所需的精确版本。'
- en: Although it doesn't say it here, Composer will always install Zend Framework
    2 to the vendor directory, as the required section in the `composer.json` says
    we need `zendframework/zendframework` to run our application. Composer knows that
    it needs to be installed to the vendor directory because the `zendframework/zendframework`
    package is of the type library, and that type is always being copied by Composer
    to the vendor directory.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里没有明确说明，但 Composer 总是将 Zend Framework 2 安装到 vendor 目录，因为 `composer.json`
    中所需的部分说明我们需要 `zendframework/zendframework` 来运行我们的应用程序。Composer 知道它需要安装到 vendor
    目录，因为 `zendframework/zendframework` 包的类型是库，而这种类型总是被 Composer 复制到 vendor 目录。
- en: Upgrading packages
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级包
- en: Sometimes we just want to update our libraries, for example, when we know that
    a bug has been solved in Zend Framework 2's library, and we really want to have
    it. Fortunately, Composer comes with a great self-update and update command that
    we have for our disposal.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们只想更新我们的库，例如，当我们知道 Zend Framework 2 的库中已经解决了某个错误，并且我们真的想要它。幸运的是，Composer
    提供了一个出色的自更新和更新命令，我们可以使用。
- en: 'To update our libraries automatically through Composer, we should execute the
    following commands in the terminal (this cannot be done properly through the web
    browser):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 Composer 自动更新我们的库，我们应该在终端中执行以下命令（这不能通过网页浏览器正确完成）：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First we want to make sure that we are using the latest Composer, as using an
    outdated Composer might give unnecessary errors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想要确保我们使用的是最新的 Composer，因为使用过时的 Composer 可能会引发不必要的错误。
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will update all our packages that we have put in the `require` section
    of the `composer.json` to update to the latest (compatible) version. We should
    be wary, however, that when we want a new package installed, but without the updation
    rest of the packages, we should use the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新我们放在 `composer.json` 的 `require` 部分中的所有包，以更新到最新（兼容）版本。然而，我们应该小心，当我们想要安装新包，但不更新其他包时，我们应该使用以下命令：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here `vendor-name` and `package-name` are the names of the packages we want
    to install.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`vendor-name` 和 `package-name` 是我们想要安装的包的名称。
- en: Composer works because all the packages are registered on their website [getcomposer.org](http://getcomposer.org).
    In the website they keep all the packages together, and whenever we try to update
    or install, the `composer.phar` will connect to the website and retrieve the newest
    packages.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Composer之所以能工作，是因为所有包都在其网站上注册了 [getcomposer.org](http://getcomposer.org)。在网站上，他们把所有包放在一起，每次我们尝试更新或安装时，`composer.phar`
    都会连接到网站并检索最新的包。
- en: When we create our own modules or libraries, we can also submit that to the
    composer website. Submitting to composer's website will create a better community
    and a better understanding of the dependencies needed when we begin developing
    certain applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建自己的模块或库时，我们也可以将其提交到 composer 网站。提交到 composer 的网站将创建一个更好的社区，并在我们开始开发某些应用程序时，更好地理解所需的依赖关系。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The composer's main website [http://getcomposer.org](http://getcomposer.org)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer 的官方网站 [http://getcomposer.org](http://getcomposer.org)
- en: Basic Zend Framework 2 structures
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本Zend Framework 2结构
- en: When we consider the Zend Framework 2 structure, we must be aware that Zend
    Framework 2 doesn't actually care how our directory structure looks like, as long
    as we tell Zend Framework 2 in our configuration where all the paths can be found.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑 Zend Framework 2 结构时，我们必须意识到，只要我们在配置中告诉 Zend Framework 2 所有路径的位置，Zend
    Framework 2 实际上并不关心我们的目录结构看起来如何。
- en: In the skeleton application we see that our configuration can be found in the
    `config/application.config.php` file. But that file solely exists there because
    in the `public/index.php` it is being loaded. If we, for example, want to change
    the location of that configuration file to somewhere else, we (in this case) only
    need to change it in the `public/index.php` file. The same goes for the module
    and vendor directory, as these can be anywhere we like, as long as we tell the
    `application.config.php` file where exactly that location is.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在骨架应用程序中，我们看到我们的配置可以在 `config/application.config.php` 文件中找到。但那个文件仅仅存在于那里，因为
    `public/index.php` 中正在加载它。如果我们，例如，想要将配置文件的存储位置更改为其他地方，我们（在这种情况下）只需要在 `public/index.php`
    文件中更改它。同样，对于模块和 vendor 目录也是如此，因为它们可以放在我们喜欢的任何地方，只要我们告诉 `application.config.php`
    文件确切的位置即可。
- en: If we want to change the public directory, we can safely change it to any name
    we want, as long as we tell our web server where the new `DocumentRoot` is. Obviously
    making a good structure is of course, the key to a successful application, and
    therefore the skeleton application was created. That doesn't mean that different
    structure requirements have to make us stop using Zend Framework 2, as the framework
    can be fully configured to such requirements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想更改公共目录，我们可以安全地将其更改为我们想要的任何名称，只要我们告诉我们的Web服务器新的`DocumentRoot`在哪里。显然，构建一个好的结构当然是成功应用的关键，因此骨架应用被创建出来。但这并不意味着不同的结构要求必须让我们停止使用Zend
    Framework 2，因为框架可以被完全配置以满足这些要求。
- en: However, we can assume that because we are using the skeleton made available
    by Zend, it displays a very optimal structure for us to develop in.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以假设，因为我们正在使用由Zend提供的骨架，它为我们提供了一个非常优化的结构，以便我们开发。
- en: 'When we list the initial folder of our skeleton application, we note some of
    the following objects of importance:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们列出我们骨架应用的初始文件夹时，我们注意到一些以下重要对象：
- en: '`config`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`'
- en: '`module`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module`'
- en: '`public`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`'
- en: '`vendor`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`'
- en: '`init_autoloader.php`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init_autoloader.php`'
- en: As we can see there are many objects in our folder, but these have no significant
    importance to our basic application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们的文件夹中有许多对象，但这些对我们基本应用没有显著的重要性。
- en: Folder – config
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件夹 – config
- en: 'The `config` folder consists of the following objects by default:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`文件夹默认包含以下对象：'
- en: '`autoload/`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload/`'
- en: '`global.php`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.php`'
- en: '`local.php.dist`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local.php.dist`'
- en: '`application.config.php`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application.config.php`'
- en: Probably the most important file in this folder would be the `application.config.php`
    as it contains all of our main configuration options. If we open this file we
    can see that it has a couple of options set to make our application work.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，最关键的文件可能是`application.config.php`，因为它包含了我们所有的主要配置选项。如果我们打开这个文件，我们可以看到它设置了一些选项，使我们的应用能够工作。
- en: The file contains, for example, the `modules` key, which tells the framework
    which modules we need to load in for our application. It also contains the `module_listener_options
    - module_paths`, which tells our framework where to find our modules and libraries,
    which modules and vendor are by default.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含，例如，`modules`键，它告诉框架我们需要为我们的应用加载哪些模块。它还包含`module_listener_options - module_paths`，它告诉我们的框架在哪里可以找到我们的模块和库，默认情况下是哪些模块和供应商。
- en: The `config` folder also contains an `autoload` folder, which in itself contains
    two files which are the global configuration override and the local configuration
    override files. Both files are empty by default.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`文件夹还包含一个`autoload`文件夹，该文件夹本身包含两个文件，一个是全局配置覆盖文件，另一个是本地配置覆盖文件。这两个文件默认都是空的。'
- en: Folder – module
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件夹 – module
- en: 'The default `module` folder consists of the following important objects:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`module`文件夹包含以下重要对象：
- en: '`Application/config/`**module.config.php**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/config/`**module.config.php**'
- en: '`Application/language/src/Application/Controller/`**IndexController.php**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/language/src/Application/Controller/`**IndexController.php**'
- en: '`Application/src/Application/Controller/`**IndexController.php**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/src/Application/Controller/`**IndexController.php**'
- en: '`Application/view/Application/index/`**index.phtml**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/view/Application/index/`**index.phtml**'
- en: '`Application/view/Application/error/`**404.phtml**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/view/Application/error/`**404.phtml**'
- en: '`Application/view/Application/error/`**index.phtml**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/view/Application/error/`**index.phtml**'
- en: '`Application/view/Application/layout/`**layout.phtml**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/view/Application/layout/`**layout.phtml**'
- en: '`Application/`**Module.php**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/`**Module.php**'
- en: The application module gives away the basic structure that we would like to
    see when creating a new module. The most important file that we see here is the
    `Module.php`, which tells the framework how our module is built up, where it can
    find our controllers, and many more.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应用模块提供了我们创建新模块时希望看到的基本结构。我们在这里看到的最重要文件是`Module.php`，它告诉框架我们的模块是如何构建的，它可以在哪里找到我们的控制器，以及更多。
- en: Depending on how our application is built up, we would also want to have a configuration
    file for each module as we would like to keep the application as dynamic as possible.
    In the skeleton application we can see that our `Module.php` contains a method
    called `Module::getConfig()`; all it does is a simple include to the `config/module.config.php`
    file. Although we theoretically could just define the configuration in the `Module.php`,it
    is nicer if we separate the actual configuration file from our code, as that also
    brings a lot more maintainability with itself if we don't need to change the code
    for a simple change in configuration.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的应用程序是如何构建的，我们也希望为每个模块有一个配置文件，因为我们希望尽可能保持应用程序的动态性。在骨架应用程序中，我们可以看到我们的`Module.php`包含一个名为`Module::getConfig()`的方法；它所做的只是简单地包含到`config/module.config.php`文件中。虽然理论上我们可以在`Module.php`中直接定义配置，但如果我们将实际的配置文件与代码分开，会更好一些，因为这样也带来了更多的可维护性，如果我们不需要更改代码来简单地更改配置。
- en: We can also see a `language` folder in this folder, which contains all the i18n
    (short for internationalization as it contains 18 characters between I and N)
    files needed for translating our application. Although probably used by a lot
    of developers, not all of our application will require translation, so we might
    not need this folder at all in our project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在这个文件夹中看到一个`language`文件夹，它包含翻译我们的应用程序所需的全部i18n（国际化的缩写，因为它在I和N之间有18个字符）文件。尽管可能被许多开发者使用，但并非我们的所有应用程序都需要翻译，所以我们可能根本不需要在我们的项目中使用这个文件夹。
- en: But if we do require `i18n` and `l10n` (localization) then it would be beneficial
    to do this module wise instead of application wise, again for maintainability
    as we don't want the application (which is the whole application) to define `i18n/l10n`
    for all the modules, as theoretically not all of the modules have to be there.
    That is why working module oriented makes the code a lot more dynamic, but also
    maintainable as we can safely assume that if an error occurs in one of our modules,
    the problem also lies in that module.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们确实需要`i18n`和`l10n`（本地化），那么按模块而不是按应用程序来做会更有益，这同样是为了可维护性，因为我们不希望整个应用程序（即整个应用程序）为所有模块定义`i18n/l10n`，因为理论上并非所有模块都必须存在。这就是为什么以模块为导向的工作可以使代码更加动态，同时也更加可维护，因为我们可以安全地假设，如果我们的模块中发生错误，问题也出在那个模块中。
- en: The next folder `src` might very well be one of the most interesting folders
    in our module, as it contains—as we might have guessed—the source of our module.
    The folder `src` only contains another folder called `Application`, which is the
    defined namespace of the classes inside.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个文件夹`src`可能是我们模块中最有趣的文件夹之一，因为它包含——正如我们可能猜测的那样——我们模块的源代码。`src`文件夹只包含另一个名为`Application`的文件夹，这是其中类定义的命名空间。
- en: Make sure that you name your subdirectories in `src` to the namespace they are
    using. Otherwise it might not only lead to conflicts, but also confusion and inconsistencies.
    For example, if your module is called `Winter`, then our directory should be called
    `src/Winter`, to make sure that all our `Winter` namespaces are in that directory.
    That way we can safely assume that all our code for that namespace has been neatly
    put in that directory and its sub directories.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在`src`中的子目录命名与它们使用的命名空间相匹配。否则，这不仅可能导致冲突，还可能导致混淆和不一致。例如，如果您的模块名为`Winter`，那么我们的目录应该被称为`src/Winter`，以确保所有我们的`Winter`命名空间都在该目录中。这样我们就可以安全地假设所有针对该命名空间的代码都整洁地放在该目录及其子目录中。
- en: The subfolder in `Application` is in our skeleton application `Controller`,
    which contains only the `IndexController.php`. The `IndexController.php` is an
    extension of the `Zend\Mvc\Controller\AbstractActionController`, which is generally
    used for our day-to-day controllers; however, there is also the `AbstractRestfulController`
    in the same namespace, which we can use if we want to create a restful service.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Application`子文件夹中，我们可以在我们的骨架应用程序`Controller`中找到它，该文件夹只包含`IndexController.php`。`IndexController.php`是`Zend\Mvc\Controller\AbstractActionController`的扩展，通常用于我们的日常控制器；然而，在同一个命名空间中，还有一个`AbstractRestfulController`，如果我们想创建一个RESTful服务，我们可以使用它。
- en: Next up is the `view` folder, which contains all our view scripts. View scripts
    are basically template files we use to do the actual displaying to the user requesting
    the page. As we can see in the default `module.config.php` of our `Application`
    module, we have the view scripts configured to point to the `view` directory,
    which tells the framework that when it needs to find any view scripts, it should
    look in that folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`view`文件夹，它包含了我们所有的视图脚本。视图脚本基本上是我们用来向请求页面的用户实际显示的模板文件。正如我们在`Application`模块的默认`module.config.php`文件中所看到的，我们已经将视图脚本配置为指向`view`目录，这告诉框架当它需要查找任何视图脚本时，应该查看该文件夹。
- en: '![Folder – module](img/4841OS_app_01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![文件夹 – 模块](img/4841OS_app_01.jpg)'
- en: As we can see the `view` folder is built up with the same structure as in the
    configuration file. The `Application` folder refers to the namespace which is
    using this view script that is, `Application`, then we see that there is also
    a layout defined, which is used as a global layout for our module—and the rest
    of the project if none is defined elsewhere—and an `error` folder, that is only
    used whenever an error occurs in the application. If we want to read up more about
    how the layouts work in Zend Framework 2, you should take a look at [Chapter 4](ch04.html
    "Chapter 4. Using View"), *Using View*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`view`文件夹的结构与配置文件中的结构相同。`Application`文件夹指的是使用此视图脚本的命名空间，即`Application`，然后我们看到还定义了一个布局，它用作我们模块的全球布局——如果没有在其他地方定义，则用于整个项目——以及一个`error`文件夹，它仅在应用程序发生错误时使用。如果我们想了解更多关于Zend
    Framework 2中布局如何工作的信息，你应该查看[第4章](ch04.html "第4章。使用视图")，*使用视图*。
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `layout` folder and the `error` folder are usually considered to be the
    main template files for the project. This does not mean, however, that we can
    only have one layout defined; all we need to do is just define another layout
    configuration in our module file, which makes a specific module different to the
    others.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`layout`文件夹和`error`文件夹通常被认为是项目的主体模板文件。但这并不意味着我们只能定义一个布局；我们只需要在我们的模块文件中定义另一个布局配置，这样就可以使特定的模块与其他模块不同。'
- en: That concludes the buildup of our `module` folder, and when creating other modules—when
    using the skeleton application—it requires us to use the same folder structure.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们的`module`文件夹的构建，当创建其他模块——使用骨架应用程序时——它要求我们使用相同的文件夹结构。
- en: Folder – public
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件夹 – public
- en: The `public` folder contains all of the files that the public may see. We need
    to make sure our application is secure, so we will only put images, style sheets,
    and JavaScript files in here. The only file related to the framework here, will
    be the `index.php` file, as that is the file that initializes our application,
    and is used only when an HTTP request is made. Although we can put PHP files here,
    we would strongly recommend against it, as it can potentially make your project
    open for vulnerabilities.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`public`文件夹包含所有公众可能看到的文件。我们需要确保我们的应用程序是安全的，所以我们只会将图片、样式表和JavaScript文件放在这里。这里与框架相关的唯一文件将是`index.php`文件，因为这是初始化我们的应用程序的文件，并且仅在HTTP请求时使用。虽然我们可以在这里放置PHP文件，但我们强烈建议不要这样做，因为它可能会使你的项目容易受到漏洞的攻击。'
- en: Folder – vendor
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件夹 – vendor
- en: The `vendor` folder contains—as the name suggests—libraries that are made by
    a third party. In our default project this will only contain the Zend Framework
    2 libraries, which are needed to run the project (located in the `zendframework/library`
    folder). Whenever we are going to use third party libraries like `Smarty` or `Doctrine`,
    these will be placed here.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor`文件夹包含——正如其名所示——由第三方制作的库。在我们的默认项目中，这只会包含运行项目所需的Zend Framework 2库（位于`zendframework/library`文件夹中）。无论何时我们要使用像`Smarty`或`Doctrine`这样的第三方库，这些库都将被放置在这里。'
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If we have a homemade library that is (or can be) non application specific we
    would recommend putting it in here as well, especially if the library is maintained
    somewhere else. Once we begin scattering our libraries around in other folders,
    it is almost impossible to maintain consistency and maintainability.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个非应用程序特定的自定义库（或可以成为），我们建议也将它放在这里，特别是如果库在其他地方维护的话。一旦我们开始在其他文件夹中散布我们的库，几乎不可能保持一致性和可维护性。
- en: File – init_autoloader.php
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件 – init_autoloader.php
- en: The `init_autoloader.php` file makes sure our project can find the classes and
    namespaces we are trying to use. It is called by the `public/index.php` file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`init_autoloader.php`文件确保我们的项目可以找到我们试图使用的类和命名空间。它由`public/index.php`文件调用。'
- en: 'For the Zend Framework 2 to start up and configure itself, a couple of actions
    happen. If we use the skeleton application, the following flow of information
    can be assumed:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Zend Framework 2启动并配置自身，会发生一系列操作。如果我们使用骨架应用程序，可以假设以下信息流：
- en: '`/public/index.php`: This is the first file that is going to be ran as that
    is the only public script file related to the application. When run, the script
    is including the `init_autoloader.php` in the root folder to the script and after
    that it initializes the Zend Framework 2.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/public/index.php`: 这是将要运行的第一个文件，因为它是与应用程序相关的唯一公共脚本文件。当运行时，该脚本会将根目录中的`init_autoloader.php`包含到脚本中，然后初始化Zend
    Framework 2。'
- en: '`/init_autoloader.php`: This file does exactly what it says it does, it initializes
    the autoloader. One of the best features of Zend Framework 2 is the extensity
    of the autoloader. All this file does is make sure the autoloader has most of
    the namespaces and classes that we use known (but not loaded up yet) before we
    go on and initialize the application, that way the autoloader can simply load
    up the class whenever it is requested. Although the skeleton application has a
    very lazy autoloader, which we shouldn''t use in this form, in a production environment
    it can be a very powerful tool to create the best performance for your application.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/init_autoloader.php`: 这个文件确实做了它所说的，初始化了自动加载器。Zend Framework 2最好的特性之一是自动加载器的扩展性。这个文件所做的只是确保在初始化应用程序之前，自动加载器已经知道我们使用的大多数命名空间和类（但尚未加载），这样自动加载器就可以在需要时简单地加载类。尽管骨架应用程序有一个非常懒惰的自动加载器，我们不应该以这种形式使用它，但在生产环境中，它可以是一个非常强大的工具，为您的应用程序创建最佳性能。'
- en: What's next?
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: After the `public/index.php` has loaded up the locations of known classes and
    namespaces, it is ready to start up the Zend Framework 2 MVC application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在`public/index.php`加载了已知类和命名空间的位置后，它就准备好启动Zend Framework 2 MVC应用程序。
- en: Get the `config/application.config.php` file. It actually doesn't do anything
    with this file at the moment.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`config/application.config.php`文件。实际上，目前这个文件并没有对这个文件做任何事情。
- en: Run the `Zend\Mvc\Application::init($configurationArray)`, where `$configurationArray`
    is the variable that contains the read configuration from step 1.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`Zend\Mvc\Application::init($configurationArray)`，其中`$configurationArray`是包含从步骤1读取的配置的变量。
- en: Initialization of the `ServiceManager`, which handles all the services in the
    application.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServiceManager`的初始化，它处理应用程序中的所有服务。'
- en: Invoke `Zend\EventManager\SharedEventManager`.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用`Zend\EventManager\SharedEventManager`。
- en: Factory `Zend\ModuleManager\ModuleManager`.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工厂`Zend\ModuleManager\ModuleManager`。
- en: Request the `ModuleManager` from the `ServiceManager` and run its `loadModules()`
    method.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`ServiceManager`请求`ModuleManager`并运行其`loadModules()`方法。
- en: This will then resolve all the modules and load in the module-specific configurations.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将解决所有模块并加载模块特定的配置。
- en: Request the `Zend\Mvc\Application` from the `ServiceManager`.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`ServiceManager`请求`Zend\Mvc\Application`。
- en: It will run the `bootstrap()` method.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将运行`bootstrap()`方法。
- en: The `public/index.php` will now execute the `run()` method on the fully initialized
    `Zend\Mvc\Application`, which will make the sure the routing, which will trigger
    the bootstrap, route, dispatch, render and finish events, making sure the application
    has done what was requested of it.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public/index.php`现在将在完全初始化的`Zend\Mvc\Application`上执行`run()`方法，这将确保路由触发引导、路由、调度、渲染和完成事件，确保应用程序完成了所请求的操作。'
- en: After the `Zend\Mvc\Application` has completed its `run()` method, it will execute
    the `send()` method, which will send the output made by the `run()` method back
    to the client.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Zend\Mvc\Application`完成其`run()`方法后，它将执行`send()`方法，该方法将`run()`方法生成的输出发送回客户端。
- en: 'Here is a flow chart diagram to show how the process goes a bit more graphically:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个流程图来展示这个过程如何更直观地展示：
- en: '![What''s next?](img/4841OS_app_02.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![接下来是什么？](img/4841OS_app_02.jpg)'
- en: About storage adapters and patterns
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于存储适配器和模式
- en: The different storage adapters and patterns are a great way of implementing
    different functionality throughout our cache adapters, and storing them on different
    platforms, for example, the file system or just in memory. This recipe will tell
    us all about the default tools available in Zend Framework 2.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的存储适配器和模式是我们在缓存适配器中实现不同功能以及在不同平台上存储数据（例如，文件系统或仅内存中）的极好方式。这个配方将告诉我们Zend Framework
    2中所有默认工具的详细信息。
- en: Storage adapter's implementations
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储适配器的实现
- en: Storage adapters in ZF2 are adapters used to do the actual caching of our data,
    meaning they also control how the data is stored. The storage adapters always
    implement the `Zend\Cache\Storage\StorageInterface`, which contains the basic
    functionality that the storage adapter needs to comply with. Most of the storage
    adapters also extend from the `Zend\Cache\Storage\Adapter\AbstractAdapter`, but
    no guarantee can be given for that. Aside from the `StorageInterface`, storage
    adapters often implement additional interfaces representing enhanced functionality.
    These implementations obviously play a crucial role of the functionality of the
    adapter, so we think it is best to give a short list of implementations that the
    adapter can use that are defined by the framework.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ZF2中的存储适配器是用于实际缓存我们数据的适配器，这意味着它们还控制数据的存储方式。存储适配器始终实现`Zend\Cache\Storage\StorageInterface`，它包含存储适配器需要遵守的基本功能。大多数存储适配器也扩展自`Zend\Cache\Storage\Adapter\AbstractAdapter`，但无法保证这一点。除了`StorageInterface`之外，存储适配器通常还实现表示增强功能的额外接口。这些实现显然在适配器的功能中扮演着至关重要的角色，因此我们认为最好列出适配器可以使用的、由框架定义的实现列表。
- en: '`AvailableSpaceCapableInterface`: This interface provides a method to check
    the available space for the caching.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`：此接口提供了一个检查缓存可用空间的方法。'
- en: '`Capabilities`: This interface provides methods to check the capabilities of
    the Storage adapter, such as the minimum and maximum ttl (time-to-live) of the
    cache, or the supported data types (boolean, string, object, and so on).'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Capabilities`：此接口提供了检查存储适配器功能的方法，例如缓存的最小和最大TTL（生存时间）或支持的数据类型（布尔值、字符串、对象等）。'
- en: '`ClearByNamespaceInterface`: This interface has a method defined that can clear
    cache by the given namespace.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`：此接口定义了一个可以通过给定命名空间清除缓存的方法。'
- en: '`ClearByPrefixInterface`: This interface defines a method that can clear cache
    by the given prefix.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`：此接口定义了一个可以通过给定前缀清除缓存的方法。'
- en: '`ClearExpiredInterface`: This interface provides a method to clear expired
    cache items.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearExpiredInterface`：此接口提供了一个清除过期缓存项的方法。'
- en: '`FlushableInterface`: This interface is able to flush the whole cache.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`：此接口能够刷新整个缓存。'
- en: '`IterableInterface`: This interface provides functionality to iterate over
    the cache items. Super handy to `foreach` over them!'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`：此接口提供了遍历缓存项的功能。对于使用`foreach`遍历它们来说非常方便！'
- en: '`OptimizableInterface`: This interface gives the ability to optimize the caching.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OptimizableInterface`：此接口提供了优化缓存的能力。'
- en: '`TaggableInterface`: This interface provides methods to get and set tags for
    a specific cache item, and the ability to remove all the cache items through a
    certain tag.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TaggableInterface`：此接口提供了获取和设置特定缓存项标签的方法，以及通过某个标签删除所有缓存项的能力。'
- en: '`TotalSpaceCapableInterface`: This interface has a method that returns the
    total space of the cache.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`：此接口有一个返回缓存总空间的方法。'
- en: Storage adapters
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储适配器
- en: Now that we know the interfaces an adapter may implement, it is time to give
    a comprehensive list of the storage adapters available in the `Zend\Cache\Storage\Adapter`
    namespace.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了适配器可能实现的接口，是时候给出`Zend\Cache\Storage\Adapter`命名空间中可用的存储适配器的完整列表了。
- en: Apc caching
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apc缓存
- en: Apc or Alternative PHP Cache is a well known framework that heavily optimizes
    the PHP output and stores the compiled PHP code in the shared-memory. This way
    some of the opcode (operation code) doesn't have to be recompiled again as it
    is ready for immediate use. The Apc adapter also extends from the `AbstractAdapter`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Apc或替代PHP缓存是一个广为人知的框架，它大量优化PHP输出并将编译后的PHP代码存储在共享内存中。这样，一些操作码（操作代码）就不需要重新编译，因为它们已经准备好立即使用。Apc适配器也扩展自`AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`ClearByPrefixInterface`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`FlushableInterface`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This adapter can only work if the APC extension in PHP has been enabled, please
    make sure that it is before trying.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器只能在PHP中启用了APC扩展的情况下才能工作，请在尝试之前确保它已启用。
- en: Dba caching
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dba缓存
- en: You want to store the cache in a pre-relation dbm database, then this is your
    chance! This adapter can store it all neatly away in a nice database. This adapter
    also extends from the `AbstractAdapter`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您想将缓存存储在预关系dbm数据库中，那么这就是您的机会！此适配器可以将所有内容整齐地存储在漂亮的数据库中。此适配器还扩展了`AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`ClearByPrefixInterface`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`FlushableInterface`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: '`OptimizableInterface`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OptimizableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This adapter needs the dba extension enabled in PHP before it can work, please
    make sure it is enabled.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器在能够工作之前需要在PHP中启用dba扩展，请确保它已启用。
- en: File system caching
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件系统缓存
- en: File system caching is a personal favorite, to store the cache on the good old
    file system, a fast and usually reliable place to place it. This adapter also
    extends from the `AbstractAdapter`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统缓存是个人最喜欢的，将缓存存储在古老的文件系统中，这是一个快速且通常可靠的存储位置。此适配器还扩展了`AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`ClearByPrefixInterface`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`ClearExpiredInterface`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearExpiredInterface`'
- en: '`FlushableInterface`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: '`OptimizableInterface`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OptimizableInterface`'
- en: '`TaggableInterface`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TaggableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It sounds as something really obvious, but make sure we have write permissions
    on the directory where we want to store the cache.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来非常明显，但请确保我们对我们想要存储缓存的目录有写权限。
- en: Memcached caching
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Memcached缓存
- en: The Memcached adapter stores the cache in the memory, which is a great way to
    store static file that don't change often and can be considered semi-static. This
    adapter also extends from the `AbstractAdapter`. Please note that Memcached is
    not restricted by PHP's memory limit settings, as Memcached stores the memory
    outside of the PHP process in its own Memcached process.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached适配器将缓存存储在内存中，这对于存储不经常更改的静态文件来说是一个很好的方法，可以被认为是半静态的。此适配器还扩展了`AbstractAdapter`。请注意，Memcached不受PHP内存限制设置的约束，因为Memcached将内存存储在PHP进程之外，在其自己的Memcached进程中。
- en: 'This adapter implements the following interfaces:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`FlushableInterface`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We need the `memcached` PHP extension to cache through this adapter. Please
    make sure it is enabled on your system.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`memcached`PHP扩展才能通过此适配器进行缓存。请确保在您的系统上已安装并启用了该扩展。
- en: Memory caching
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存缓存
- en: The Memory adapter stores all the cache in the PHP process, in comparison to
    the Memcached adapter, as that stores all the cache in an external Memcached process.
    This adapter also extends from the `AbstractAdapter`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 内存适配器将所有缓存存储在PHP进程中，与Memcached适配器相比，后者将所有缓存存储在外部Memcached进程中。此适配器还扩展了`AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByPrefixInterface`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`ClearExpiredInterface`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearExpiredInterface`'
- en: '`FlushableInterface`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: '`TaggableInterface`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TaggableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Redis caching
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Redis缓存
- en: The Redis is a key-value data store that stores the data in-memory, which is
    extremely well done and certainly is a caching method worth using. This adapter
    also extends from the `AbstractAdapter`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一个键值数据存储，将数据存储在内存中，这做得非常好，肯定是一个值得使用的缓存方法。此适配器还扩展了`AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`FlushableInterface`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If we want to use this caching adapter, we need to make sure the `redis` extension
    is loaded, otherwise this storage adapter cannot be used. Please make sure the
    extension is installed and enabled.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要使用此缓存适配器，我们需要确保已加载`redis`扩展，否则此存储适配器无法使用。请确保已安装并启用了该扩展。
- en: Session caching
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 会话缓存
- en: The Session storage adapter uses the session to store our cache in. Although
    handy for one user at a time, this method isn't really effective for users who
    view the same pages as it builds up the cache every time a user initiates a session.
    This adapter also extends from the `AbstractAdapter`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 会话存储适配器使用会话来存储我们的缓存。虽然对于每次只有一个用户来说很方便，但这种方法对于查看相同页面的用户来说并不真正有效，因为它每次用户启动会话时都会构建缓存。此适配器还扩展了
    `AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`ClearByPrefixInterface`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`FlushableInterface`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: WinCache caching
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WinCache 缓存
- en: The WinCache is an excellent adapter that is useful when running PHP on a Microsoft
    Windows server. WinCache supports opcode caching, file system caching, and relative
    path caching. This adapter also extends from the `AbstractAdapter`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: WinCache 是一个在 Microsoft Windows 服务器上运行 PHP 时非常有用的优秀适配器。WinCache 支持opcache 缓存、文件系统缓存和相对路径缓存。此适配器还扩展了
    `AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`FlushableInterface`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For this method the `wincache` extension needs to be loaded, and if that wasn't
    all you also need to be on Microsoft Windows to, to use this.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此方法，需要加载 `wincache` 扩展，并且如果这还不够，您还需要在 Microsoft Windows 上运行，才能使用此功能。
- en: XCache caching
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XCache 缓存
- en: The XCache is an adapter that utilizes the XCache module in PHP, which is another
    cache adapter like APC and is a fast opcode cacher, which is very useful. This
    adapter also extends from the `AbstractAdapter`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: XCache 是一个适配器，它利用 PHP 中的 XCache 模块，类似于 APC 的另一个缓存适配器，它是一个快速的 opcache 缓存器，非常有用。此适配器还扩展了
    `AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`ClearByPrefixInterface`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByPrefixInterface`'
- en: '`FlushableInterface`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`IterableInterface`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IterableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This adapter requires the XCache extension to be loaded and enabled in PHP.
    Please make sure this is the case before trying to use the adapter.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器要求在 PHP 中加载并启用 XCache 扩展。在使用适配器之前，请确保这是正确的。
- en: ZendServerDisk caching
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ZendServerDisk 缓存
- en: The ZendServerDisk adapter is a great file system cache adapter provided by
    the Zend Server application. If we have the Zend Server installed, this adapter
    is a great way of storing the cache on the file system as it integrates ridiculously
    good with the Zend Server. This adapter also extends from the `AbstractAdapter`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ZendServerDisk 适配器是 Zend Server 应用程序提供的一个优秀的文件系统缓存适配器。如果我们已经安装了 Zend Server，那么此适配器是存储缓存在文件系统上的一个好方法，因为它与
    Zend Server 集成得非常好。此适配器还扩展了 `AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`AvailableSpaceCapableInterface`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableSpaceCapableInterface`'
- en: '`ClearByNamespaceInterface`'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`FlushableInterface`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To make this adapter work you'll need to have the Zend Server installed, otherwise
    it will just throw an exception.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此适配器工作，您需要安装 Zend Server，否则它将抛出异常。
- en: ZendServerShm caching
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ZendServerShm 缓存
- en: The ZendServerShm adapter also requires us to have the Zend Server installed,
    but if we have and we want to cache items in the shared memory (shm) then this
    is an amazing way of doing it, as this adapter integrates very nicely with the
    Zend Server. This adapter also extends from the `AbstractAdapter`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ZendServerShm 适配器也要求我们安装 Zend Server，但如果我们已经安装并且我们想在共享内存（shm）中缓存项目，那么这是一种非常棒的方法，因为此适配器与
    Zend Server 集成得非常好。此适配器还扩展了 `AbstractAdapter`。
- en: 'This adapter implements the following interfaces:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此适配器实现了以下接口：
- en: '`ClearByNamespaceInterface`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearByNamespaceInterface`'
- en: '`FlushableInterface`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlushableInterface`'
- en: '`TotalSpaceCapableInterface`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalSpaceCapableInterface`'
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To make this adapter work you'll need to have the Zend Server installed to make
    this adapter work, otherwise it will just throw an exception.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此适配器工作，您需要安装 Zend Server 以使此适配器工作，否则它将抛出异常。
- en: Cache patterns
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存模式
- en: When we start caching, we will quickly find ourselves in situations that are
    counteractive to the performance while we just wanted everything to go faster.
    That is why there are classes in ZF2 that are called Cache patterns, which are
    there for us to use when we want to overcome some common problems.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始缓存时，我们很快就会发现自己处于与性能相反的情况，而我们只是想让一切更快。这就是为什么在ZF2中有一些被称为缓存模式的类，这些类是为了我们在想要克服一些常见问题时使用的。
- en: Like the adapters, patterns are also always implementations of an interface;
    in this case the `PatternInterface`. And because we usually also want some basic
    functionality, most of the patterns also extend from the `AbstractPattern` class.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 就像适配器一样，模式也是接口的实现；在这种情况下是`PatternInterface`。而且因为我们通常也想要一些基本功能，所以大多数模式也扩展自`AbstractPattern`类。
- en: Options for the patterns are defined through the `PatternOptions` class, which
    is explained a bit further on as well.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 模式的选项通过`PatternOptions`类定义，这将在稍后进一步解释。
- en: The CallbackCache pattern
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CallbackCache模式
- en: What do we want, a callback or the cache? Sometimes we just don't know for sure,
    so we'll let the pattern to figure it out itself! The `CallbackCache` pattern
    first makes sure if there is a result for our callback already defined in the
    cache, and if so, returns that. If the result is not in the cache yet, it will
    call our callback function, put our output in the result and then return that.
    Either way, the second time that callback is being handled, we will get our cache
    back. So if this is a long running method, it will be considerably faster when
    we don't have to execute the code again.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的是回调还是缓存？有时我们确实不知道，所以我们将让模式自己决定！`CallbackCache`模式首先确保我们的回调结果已经定义在缓存中，如果是的话，就返回它。如果结果尚未在缓存中，它将调用我们的回调函数，将输出放入结果中，然后返回它。无论如何，第二次处理该回调时，我们将得到我们的缓存。所以如果这是一个长时间运行的方法，我们不需要再次执行代码，这将大大加快速度。
- en: This pattern also takes the arguments for that callback in consideration, which
    means you don't really have to worry much about the callback providing you with
    the wrong results!
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式还考虑了该回调的参数，这意味着你实际上不必过多担心回调会给你提供错误的结果！
- en: This Pattern uses the `AbstractPattern` class.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式使用`AbstractPattern`类。
- en: The CaptureCache pattern
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CaptureCache模式
- en: The `CaptureCache` pattern captures the output we are sending to the browser
    by initiating an `ob_start()` and `ob_implicit_flush()`. We can then do a check
    if the cache exists every time we sent the output out, so that instead of generating
    it we just display the output.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`CaptureCache`模式通过启动`ob_start()`和`ob_implicit_flush()`来捕获我们发送到浏览器的输出。然后我们可以在每次发送输出时检查缓存是否存在，这样我们就可以显示输出而不是生成它。'
- en: This pattern uses the `AbstractPattern` class.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式使用`AbstractPattern`类。
- en: Tip
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This pattern does not automatically output cache once defined, the developer
    needs to get the cache themselves first before using the start method. If we want
    to output cache when it exists before generating new content we should use the
    `OutputCache` pattern.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式在定义后不会自动输出缓存，开发者在使用start方法之前需要首先获取缓存。如果我们希望在生成新内容之前输出已存在的缓存，我们应该使用`OutputCache`模式。
- en: The ClassCache pattern
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ClassCache模式
- en: The `ClassCache` pattern caches the output of a class method call and returns
    that instead of the actual call. But of course, this only happens when the cache
    is actually available, otherwise it will just do the method call and cache the
    results. The class name (not the object) needs to be set in the `PatternOptions::setClass`
    to make it work.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClassCache`模式缓存类方法调用的输出，并返回该输出而不是实际调用。但当然，这只有在缓存实际可用时才会发生，否则它将只执行方法调用并缓存结果。类名（而不是对象）需要设置在`PatternOptions::setClass`中以使其工作。'
- en: This pattern uses the `AbstractPattern` class.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式使用`AbstractPattern`类。
- en: The ObjectCache pattern
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ObjectCache模式
- en: The `ObjectCache` pattern caches the object and can be used to call methods
    upon its retrieval, very handy if we have objects that need to persistent for
    a very long time. The object needs to be set in the `PatternOptions::setObject`
    to make it work.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectCache`模式缓存对象，可以在检索时调用其方法，如果我们有需要长时间持久化的对象，这非常方便。对象需要设置在`PatternOptions::setObject`中以使其工作。'
- en: This pattern uses the `AbstractPattern` class.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式使用`AbstractPattern`类。
- en: The OutputCache pattern
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OutputCache模式
- en: The `OutputCache` pattern outputs the cache if it is defined. If not, then OutputCache
    caches the output and sets the cache upon script end (or call to the end method,
    whichever comes first).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`OutputCache` 模式如果定义了缓存，则会输出缓存。如果没有定义，则 `OutputCache` 会缓存输出并在脚本结束（或调用结束方法，以先到者为准）时设置缓存。'
- en: This pattern uses the `AbstractPattern` class.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式使用 `AbstractPattern` 类。
- en: The PatternOptions pattern
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`PatternOptions` 模式'
- en: The `PatternOptions` pattern can be used to set options or get options from
    and to the patterns (`setOptions` and `getOptions` respectively). For most patterns
    some form of options need to be set before the pattern can be used. Think here
    about the `setStorage` method for example, because the pattern needs to know the
    storage adapter before it can actually store things.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`PatternOptions` 模式可以用来设置或从模式中获取选项（分别对应 `setOptions` 和 `getOptions`）。对于大多数模式，在使用模式之前通常需要设置某种形式的选项。例如，考虑
    `setStorage` 方法，因为模式在实际上存储东西之前需要知道存储适配器。'
- en: Explaining the difference
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释差异
- en: Storage adapters store and retrieve the cache data. We can set options to determine
    the length of the validity or perhaps check if the cache is full or not, but we
    can't determine how it is stored, as that is part of the adapter's job description.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 存储适配器存储和检索缓存数据。我们可以设置选项来确定有效期的长度，或者检查缓存是否已满，但我们不能确定它是如何存储的，因为这是适配器工作描述的一部分。
- en: Patterns however don't store anything themselves. They determine if they need
    to store anything by checking if the cache already exists, or if the cache is
    what we expect it to be (for example, when we use a different method call or different
    arguments to that call). They do tell the adapters what they want to retrieve
    and store, so that the adapter then can find out how to retrieve it from the actual
    storage again.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模式本身并不存储任何内容。它们通过检查缓存是否已经存在，或者缓存是否是我们期望的（例如，当我们使用不同的方法调用或不同的参数时）来确定是否需要存储任何内容。它们确实会告诉适配器它们想要检索和存储的内容，这样适配器就可以找出如何从实际存储中再次检索它。
- en: In a developer's eye we would rather be using patterns before we would want
    to use the adapters, as we'd not want to interfere with the adapters too much
    if there are already patterns doing most of the work for us.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者的眼中，我们更愿意在使用适配器之前使用模式，因为我们不希望过多地干扰适配器，如果已经有模式为我们做了大部分工作的话。
