- en: Appendix A. Setting up the Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the appendix we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Making sure you have all that you need
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Zend Framework 2 and finding its documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer and its uses within Zend Framework 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Zend Framework 2 structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About storage adapters and patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making sure you have all that you need
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Zend Server is a nice piece of software that takes out a lot of work from
    our hands by installing everything we need (or at least provide a good platform)
    to code Zend Framework 2 (and Zend Framework 1!) applications. Although the paid
    version of Zend Server might not be necessary for production applications, developing
    in the developer version of the Zend Server is a pure delight as it will give
    a proper overview of the system, logs, configuration, and everything else we need
    to know.
  prefs: []
  type: TYPE_NORMAL
- en: We are going the cheap way by installing the Zend Server Community Edition,
    which installs everything we need to use Zend Framework and Zend Framework 2\.
    The handy thing about the Zend Server is not only the ease of installation, but
    the immense toolset you get with the server itself. It is a great product to get
    a good overview of any PHP related configuration and is also able to monitor performance
    and track events in your system.
  prefs: []
  type: TYPE_NORMAL
- en: To install the Zend Server we need to download it first from the Zend website
    ([http://www.zend.com](http://www.zend.com)), at the moment Zend Server 6.2.0
    is the latest version of the application, and although we use it, the installation
    process should be the same for any later versions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zend Server is not needed to run Zend Framework 2, but does, however, provide
    an excellent platform that needs only minimal configuration to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zend Server Community Edition on a Linux environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have downloaded Zend Server for Linux (you need a free Zend account
    to download any of their software), we will have a file called `ZendServer-6.2.0-RepositoryInstaller-linux.tar.gz`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to install the Zend Server we need to execute the following command sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will unpack the Gzipped Tarball (this is a compression method) package
    and extract it in the `ZendServer-RepositoryInstaller-linux` directory. Now let''s
    install the Zend Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We have chosen to install PHP 5.4, and if there is no reasonable explanation
    why we need PHP 5.3, we recommend keeping it in this version. If we need PHP 5.3,
    however, we can easily change the 5.4 to 5.3 and it will install the lower PHP
    version. Once we execute the `install_zs.sh` command as the root user (hence,
    the `sudo`, which tells the system we want to execute a command as a super user)
    we will get a short confirmation window asking us if we really want to install
    the Zend Server. Simply press *Enter* to continue the installation.
  prefs: []
  type: TYPE_NORMAL
- en: At some point during the installation, the script will ask if you want to install
    X amount of new packages. You want to answer `Y` or `yes` for that, otherwise
    the installation will end there.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation itself takes a couple of minutes and upon successful installation,
    the script will display the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Security wise it is best to always use the secure version of Zend Server, as
    you want to make sure that passwords are put in securely. However, while working
    locally it doesn't really matter that much.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zend Server Community Edition on a Windows environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have downloaded the Zend Server for Microsoft Windows (you need a free
    Zend account to download any of their software) and we started up the `ZendServer-6.2.0-php-5.4.21-Windows_x86.exe`
    file, we find ourselves again with a very simple installation. If we choose the
    custom installation, we have a few options that we can change, but normally the
    default options are fine enough for us.
  prefs: []
  type: TYPE_NORMAL
- en: Another great thing about the Windows installation of Zend Server is that the
    installation program asks us if we want to use an existing IIS web server or install
    an Apache server instead.
  prefs: []
  type: TYPE_NORMAL
- en: What option you choose is all down to the configuration requirements for the
    rest of the project, assuming that we have more requirements; otherwise, we would
    really need to reconsider using Windows for our PHP environment.
  prefs: []
  type: TYPE_NORMAL
- en: After a summary screen of the installation we are about to commence, the installation
    will continue and configure the system. If the installation has been completed
    successfully, we get the option to start working with the Zend Server and to add
    the Zend Server as a desktop icon.
  prefs: []
  type: TYPE_NORMAL
- en: First-time run of Zend Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we go to the Zend Server interface in the browser for the first time (please
    note that the Zend Server in Windows does not have the secure connection built-in
    like the Linux version has), we will see the license agreement, which we need
    to accept before we can go on.
  prefs: []
  type: TYPE_NORMAL
- en: In the next screen, depending on the purpose of the Zend Server, we need to
    choose between the Development, Single Server, or Cluster license. The Single
    Server and Cluster license come standard with a 30-day trial version, and if we
    are new to the Zend Server then this is the best option to see the full server
    capabilities in action.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is setting the administrator and developer password. If we are not the
    only one working on the server environment, it is best to use separate accounts
    as that creates a better maintenance structure in the organization; if only one
    person (or account) is capable of changing the system settings, then we can just
    skip filling in the developer details as they will not really have any use.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have done all that, we are ready to login for the first time in our
    brand new system.
  prefs: []
  type: TYPE_NORMAL
- en: By default the login URL to the administration panel is `http://localhost:10081/ZendServer`
    for the non secure panel and `https://localhost:10082/ZendServer` for the secure
    administration panel.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will see is the overview of the server's health, which also
    displays the current events that have taken place such as high memory uses, exceptions,
    and slow execution times.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main bit we want to view now is the PHP configuration, which can be found
    in the **Configuration** screen, under **PHP**. It is very important to set the
    time zone for PHP as otherwise PHP will annoy us(for a reason: as some application
    developers erroneously believe that the machine is running on their local time
    zone, and base many of their date and time code on this) with warnings telling
    us that this should be set. If we search for the `date.timezone` in the search
    bar in the top right corner of the screen, it will take us (and highlight) immediately
    to the setting that we need to change. We can easily search on the Internet what
    the relevant value is for our specific time zone; this can be, for example, `Europe/London`
    or `America/New_York`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PHP manual: This is a list of supported time zones [http://php.net/manual/en/timezones.php](http://php.net/manual/en/timezones.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Zend Framework 2 and finding its documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's find out where to get all the essential literature on the Zend Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Zend Framework 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main website of Zend Framework 2 is [http://framework.zend.com](http://framework.zend.com)
    and always holds the most updated information on Zend Framework 2\. We can easily
    download the framework from there, as well as some packages, for example the framework
    including the Zend Server, or the minimal package of Zend Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading only the framework itself, without any context like the skeleton
    application is a great way of starting an application from scratch without any
    of the clutter that comes with the default skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: Coding in the phpcloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A new toy made by Zend that is currently still in beta level is the phpcloud,
    which allows developers to create a fast reliable development environment for
    developers to develop on. One of the features of using the phpcloud is that it
    not only comes with Zend Framework 2, but also runs on the Zend Server which allows
    spectacular debugging capabilities and application deployment. At the moment sign
    up for the phpcloud is free, but we can assume that this will change in the future.
    How this will turn out, however, is not known to us yet.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation and getting started guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Zend Framework 2 documentation is luckily much more reliable than the original
    Zend Framework documentation (which is a good thing, trust me). Zend really committed
    to creating a framework that is well documented and has an open contribution that
    is powered by a strong community and tools like Github (instead of Subversion
    as in the original framework). The documentation and getting started guide can
    both be found under the **Learn** menu option on the main Zend Framework 2 website.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main Zend Framework 2 website found at [http://framework.zend.com](http://framework.zend.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zend Framework 2 Coding Standards found at [http://framework.zend.com/wiki/x/yQCvAg](http://framework.zend.com/wiki/x/yQCvAg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Zend Framework 2 Documentation PDF found at [https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf](https://media.readthedocs.org/pdf/zf2/latest/zf2.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zend Framework 2 Security RSS Feed found at [http://framework.zend.com/security/feed/](http://framework.zend.com/security/feed/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zend Framework 2 Blog RSS Feed found at [http://framework.zend.com/blog/feed-rss.xml](http://framework.zend.com/blog/feed-rss.xml)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer and its uses within Zend Framework 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer is a dependency manager tool for PHP, which has been live since the
    spring of 2011, and is incredibly handy when it comes to getting projects set
    up with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Composer reads its configuration from a file called `composer.json`, which is
    a JSON file that is being read by `composer.phar` (PHP archive).
  prefs: []
  type: TYPE_NORMAL
- en: We can use Composer to initialize the Zend Framework 2 library when we are using
    the Zend Framework 2 skeleton application. Other functionalities within Zend Framework
    2 include installing new modules or libraries, which we can use to extend our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The composer.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we open up the `composer.json` file we can see that the file has a couple
    of keys defined, which tells the Composer what it needs to load, and what versions
    we need. By default, the Zend Framework 2 skeleton application''s `composer.json`
    will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see the file is pretty easy to understand, and the keys are pretty
    self explanatory, but to be sure we will go through them quickly to make sure
    we understand what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the package with the vendor name as the prefix,
    in this case the vendor is `zendframework` and the `skeleton-application` is the
    package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: This short description tells us what the package does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license`: This is the license the software is licensed under, normally this
    is one of the numerous open source/software licenses such as the BSD, GPL and
    MIT licenses. However, a closed-source software license is also available under
    the key ''proprietary''.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keywords`: This is an array of keywords that is used when searching for this
    package on the getcomposer.org website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`homepage`: Well this is pretty clear, is it not?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require:` Now this is getting interesting, as this will tell Composer exactly
    what we need to run our package. In this case it is an array with PHP, where we
    need Version 5.3.3 or higher and Zend Framework 2 version 2.2.0rc1 or higher.
    Please note however, that in production we should always avoid a dev Version or
    a package with a greater than symbol, as it could potentially break our application.
    Always (please remember!) to get the exact version required when putting the application
    live.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although it doesn't say it here, Composer will always install Zend Framework
    2 to the vendor directory, as the required section in the `composer.json` says
    we need `zendframework/zendframework` to run our application. Composer knows that
    it needs to be installed to the vendor directory because the `zendframework/zendframework`
    package is of the type library, and that type is always being copied by Composer
    to the vendor directory.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we just want to update our libraries, for example, when we know that
    a bug has been solved in Zend Framework 2's library, and we really want to have
    it. Fortunately, Composer comes with a great self-update and update command that
    we have for our disposal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update our libraries automatically through Composer, we should execute the
    following commands in the terminal (this cannot be done properly through the web
    browser):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First we want to make sure that we are using the latest Composer, as using an
    outdated Composer might give unnecessary errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will update all our packages that we have put in the `require` section
    of the `composer.json` to update to the latest (compatible) version. We should
    be wary, however, that when we want a new package installed, but without the updation
    rest of the packages, we should use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here `vendor-name` and `package-name` are the names of the packages we want
    to install.
  prefs: []
  type: TYPE_NORMAL
- en: Composer works because all the packages are registered on their website [getcomposer.org](http://getcomposer.org).
    In the website they keep all the packages together, and whenever we try to update
    or install, the `composer.phar` will connect to the website and retrieve the newest
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: When we create our own modules or libraries, we can also submit that to the
    composer website. Submitting to composer's website will create a better community
    and a better understanding of the dependencies needed when we begin developing
    certain applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The composer's main website [http://getcomposer.org](http://getcomposer.org)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Zend Framework 2 structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we consider the Zend Framework 2 structure, we must be aware that Zend
    Framework 2 doesn't actually care how our directory structure looks like, as long
    as we tell Zend Framework 2 in our configuration where all the paths can be found.
  prefs: []
  type: TYPE_NORMAL
- en: In the skeleton application we see that our configuration can be found in the
    `config/application.config.php` file. But that file solely exists there because
    in the `public/index.php` it is being loaded. If we, for example, want to change
    the location of that configuration file to somewhere else, we (in this case) only
    need to change it in the `public/index.php` file. The same goes for the module
    and vendor directory, as these can be anywhere we like, as long as we tell the
    `application.config.php` file where exactly that location is.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to change the public directory, we can safely change it to any name
    we want, as long as we tell our web server where the new `DocumentRoot` is. Obviously
    making a good structure is of course, the key to a successful application, and
    therefore the skeleton application was created. That doesn't mean that different
    structure requirements have to make us stop using Zend Framework 2, as the framework
    can be fully configured to such requirements.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can assume that because we are using the skeleton made available
    by Zend, it displays a very optimal structure for us to develop in.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we list the initial folder of our skeleton application, we note some of
    the following objects of importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_autoloader.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see there are many objects in our folder, but these have no significant
    importance to our basic application.
  prefs: []
  type: TYPE_NORMAL
- en: Folder – config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `config` folder consists of the following objects by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoload/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local.php.dist`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application.config.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probably the most important file in this folder would be the `application.config.php`
    as it contains all of our main configuration options. If we open this file we
    can see that it has a couple of options set to make our application work.
  prefs: []
  type: TYPE_NORMAL
- en: The file contains, for example, the `modules` key, which tells the framework
    which modules we need to load in for our application. It also contains the `module_listener_options
    - module_paths`, which tells our framework where to find our modules and libraries,
    which modules and vendor are by default.
  prefs: []
  type: TYPE_NORMAL
- en: The `config` folder also contains an `autoload` folder, which in itself contains
    two files which are the global configuration override and the local configuration
    override files. Both files are empty by default.
  prefs: []
  type: TYPE_NORMAL
- en: Folder – module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default `module` folder consists of the following important objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Application/config/`**module.config.php**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/language/src/Application/Controller/`**IndexController.php**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/src/Application/Controller/`**IndexController.php**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/view/Application/index/`**index.phtml**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/view/Application/error/`**404.phtml**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/view/Application/error/`**index.phtml**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/view/Application/layout/`**layout.phtml**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Application/`**Module.php**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application module gives away the basic structure that we would like to
    see when creating a new module. The most important file that we see here is the
    `Module.php`, which tells the framework how our module is built up, where it can
    find our controllers, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how our application is built up, we would also want to have a configuration
    file for each module as we would like to keep the application as dynamic as possible.
    In the skeleton application we can see that our `Module.php` contains a method
    called `Module::getConfig()`; all it does is a simple include to the `config/module.config.php`
    file. Although we theoretically could just define the configuration in the `Module.php`,it
    is nicer if we separate the actual configuration file from our code, as that also
    brings a lot more maintainability with itself if we don't need to change the code
    for a simple change in configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see a `language` folder in this folder, which contains all the i18n
    (short for internationalization as it contains 18 characters between I and N)
    files needed for translating our application. Although probably used by a lot
    of developers, not all of our application will require translation, so we might
    not need this folder at all in our project.
  prefs: []
  type: TYPE_NORMAL
- en: But if we do require `i18n` and `l10n` (localization) then it would be beneficial
    to do this module wise instead of application wise, again for maintainability
    as we don't want the application (which is the whole application) to define `i18n/l10n`
    for all the modules, as theoretically not all of the modules have to be there.
    That is why working module oriented makes the code a lot more dynamic, but also
    maintainable as we can safely assume that if an error occurs in one of our modules,
    the problem also lies in that module.
  prefs: []
  type: TYPE_NORMAL
- en: The next folder `src` might very well be one of the most interesting folders
    in our module, as it contains—as we might have guessed—the source of our module.
    The folder `src` only contains another folder called `Application`, which is the
    defined namespace of the classes inside.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you name your subdirectories in `src` to the namespace they are
    using. Otherwise it might not only lead to conflicts, but also confusion and inconsistencies.
    For example, if your module is called `Winter`, then our directory should be called
    `src/Winter`, to make sure that all our `Winter` namespaces are in that directory.
    That way we can safely assume that all our code for that namespace has been neatly
    put in that directory and its sub directories.
  prefs: []
  type: TYPE_NORMAL
- en: The subfolder in `Application` is in our skeleton application `Controller`,
    which contains only the `IndexController.php`. The `IndexController.php` is an
    extension of the `Zend\Mvc\Controller\AbstractActionController`, which is generally
    used for our day-to-day controllers; however, there is also the `AbstractRestfulController`
    in the same namespace, which we can use if we want to create a restful service.
  prefs: []
  type: TYPE_NORMAL
- en: Next up is the `view` folder, which contains all our view scripts. View scripts
    are basically template files we use to do the actual displaying to the user requesting
    the page. As we can see in the default `module.config.php` of our `Application`
    module, we have the view scripts configured to point to the `view` directory,
    which tells the framework that when it needs to find any view scripts, it should
    look in that folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Folder – module](img/4841OS_app_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see the `view` folder is built up with the same structure as in the
    configuration file. The `Application` folder refers to the namespace which is
    using this view script that is, `Application`, then we see that there is also
    a layout defined, which is used as a global layout for our module—and the rest
    of the project if none is defined elsewhere—and an `error` folder, that is only
    used whenever an error occurs in the application. If we want to read up more about
    how the layouts work in Zend Framework 2, you should take a look at [Chapter 4](ch04.html
    "Chapter 4. Using View"), *Using View*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `layout` folder and the `error` folder are usually considered to be the
    main template files for the project. This does not mean, however, that we can
    only have one layout defined; all we need to do is just define another layout
    configuration in our module file, which makes a specific module different to the
    others.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes the buildup of our `module` folder, and when creating other modules—when
    using the skeleton application—it requires us to use the same folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Folder – public
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `public` folder contains all of the files that the public may see. We need
    to make sure our application is secure, so we will only put images, style sheets,
    and JavaScript files in here. The only file related to the framework here, will
    be the `index.php` file, as that is the file that initializes our application,
    and is used only when an HTTP request is made. Although we can put PHP files here,
    we would strongly recommend against it, as it can potentially make your project
    open for vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Folder – vendor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `vendor` folder contains—as the name suggests—libraries that are made by
    a third party. In our default project this will only contain the Zend Framework
    2 libraries, which are needed to run the project (located in the `zendframework/library`
    folder). Whenever we are going to use third party libraries like `Smarty` or `Doctrine`,
    these will be placed here.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have a homemade library that is (or can be) non application specific we
    would recommend putting it in here as well, especially if the library is maintained
    somewhere else. Once we begin scattering our libraries around in other folders,
    it is almost impossible to maintain consistency and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: File – init_autoloader.php
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `init_autoloader.php` file makes sure our project can find the classes and
    namespaces we are trying to use. It is called by the `public/index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Zend Framework 2 to start up and configure itself, a couple of actions
    happen. If we use the skeleton application, the following flow of information
    can be assumed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/public/index.php`: This is the first file that is going to be ran as that
    is the only public script file related to the application. When run, the script
    is including the `init_autoloader.php` in the root folder to the script and after
    that it initializes the Zend Framework 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/init_autoloader.php`: This file does exactly what it says it does, it initializes
    the autoloader. One of the best features of Zend Framework 2 is the extensity
    of the autoloader. All this file does is make sure the autoloader has most of
    the namespaces and classes that we use known (but not loaded up yet) before we
    go on and initialize the application, that way the autoloader can simply load
    up the class whenever it is requested. Although the skeleton application has a
    very lazy autoloader, which we shouldn''t use in this form, in a production environment
    it can be a very powerful tool to create the best performance for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the `public/index.php` has loaded up the locations of known classes and
    namespaces, it is ready to start up the Zend Framework 2 MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: Get the `config/application.config.php` file. It actually doesn't do anything
    with this file at the moment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `Zend\Mvc\Application::init($configurationArray)`, where `$configurationArray`
    is the variable that contains the read configuration from step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialization of the `ServiceManager`, which handles all the services in the
    application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke `Zend\EventManager\SharedEventManager`.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Factory `Zend\ModuleManager\ModuleManager`.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Request the `ModuleManager` from the `ServiceManager` and run its `loadModules()`
    method.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This will then resolve all the modules and load in the module-specific configurations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Request the `Zend\Mvc\Application` from the `ServiceManager`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It will run the `bootstrap()` method.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `public/index.php` will now execute the `run()` method on the fully initialized
    `Zend\Mvc\Application`, which will make the sure the routing, which will trigger
    the bootstrap, route, dispatch, render and finish events, making sure the application
    has done what was requested of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the `Zend\Mvc\Application` has completed its `run()` method, it will execute
    the `send()` method, which will send the output made by the `run()` method back
    to the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a flow chart diagram to show how the process goes a bit more graphically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s next?](img/4841OS_app_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: About storage adapters and patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The different storage adapters and patterns are a great way of implementing
    different functionality throughout our cache adapters, and storing them on different
    platforms, for example, the file system or just in memory. This recipe will tell
    us all about the default tools available in Zend Framework 2.
  prefs: []
  type: TYPE_NORMAL
- en: Storage adapter's implementations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage adapters in ZF2 are adapters used to do the actual caching of our data,
    meaning they also control how the data is stored. The storage adapters always
    implement the `Zend\Cache\Storage\StorageInterface`, which contains the basic
    functionality that the storage adapter needs to comply with. Most of the storage
    adapters also extend from the `Zend\Cache\Storage\Adapter\AbstractAdapter`, but
    no guarantee can be given for that. Aside from the `StorageInterface`, storage
    adapters often implement additional interfaces representing enhanced functionality.
    These implementations obviously play a crucial role of the functionality of the
    adapter, so we think it is best to give a short list of implementations that the
    adapter can use that are defined by the framework.
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`: This interface provides a method to check
    the available space for the caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Capabilities`: This interface provides methods to check the capabilities of
    the Storage adapter, such as the minimum and maximum ttl (time-to-live) of the
    cache, or the supported data types (boolean, string, object, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`: This interface has a method defined that can clear
    cache by the given namespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`: This interface defines a method that can clear cache
    by the given prefix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearExpiredInterface`: This interface provides a method to clear expired
    cache items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`: This interface is able to flush the whole cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`: This interface provides functionality to iterate over
    the cache items. Super handy to `foreach` over them!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OptimizableInterface`: This interface gives the ability to optimize the caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TaggableInterface`: This interface provides methods to get and set tags for
    a specific cache item, and the ability to remove all the cache items through a
    certain tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`: This interface has a method that returns the
    total space of the cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage adapters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know the interfaces an adapter may implement, it is time to give
    a comprehensive list of the storage adapters available in the `Zend\Cache\Storage\Adapter`
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Apc caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apc or Alternative PHP Cache is a well known framework that heavily optimizes
    the PHP output and stores the compiled PHP code in the shared-memory. This way
    some of the opcode (operation code) doesn't have to be recompiled again as it
    is ready for immediate use. The Apc adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This adapter can only work if the APC extension in PHP has been enabled, please
    make sure that it is before trying.
  prefs: []
  type: TYPE_NORMAL
- en: Dba caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You want to store the cache in a pre-relation dbm database, then this is your
    chance! This adapter can store it all neatly away in a nice database. This adapter
    also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OptimizableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This adapter needs the dba extension enabled in PHP before it can work, please
    make sure it is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: File system caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: File system caching is a personal favorite, to store the cache on the good old
    file system, a fast and usually reliable place to place it. This adapter also
    extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearExpiredInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OptimizableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TaggableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It sounds as something really obvious, but make sure we have write permissions
    on the directory where we want to store the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Memcached caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Memcached adapter stores the cache in the memory, which is a great way to
    store static file that don't change often and can be considered semi-static. This
    adapter also extends from the `AbstractAdapter`. Please note that Memcached is
    not restricted by PHP's memory limit settings, as Memcached stores the memory
    outside of the PHP process in its own Memcached process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need the `memcached` PHP extension to cache through this adapter. Please
    make sure it is enabled on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Memory caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Memory adapter stores all the cache in the PHP process, in comparison to
    the Memcached adapter, as that stores all the cache in an external Memcached process.
    This adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearExpiredInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TaggableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Redis is a key-value data store that stores the data in-memory, which is
    extremely well done and certainly is a caching method worth using. This adapter
    also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to use this caching adapter, we need to make sure the `redis` extension
    is loaded, otherwise this storage adapter cannot be used. Please make sure the
    extension is installed and enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Session caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Session storage adapter uses the session to store our cache in. Although
    handy for one user at a time, this method isn't really effective for users who
    view the same pages as it builds up the cache every time a user initiates a session.
    This adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WinCache caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The WinCache is an excellent adapter that is useful when running PHP on a Microsoft
    Windows server. WinCache supports opcode caching, file system caching, and relative
    path caching. This adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this method the `wincache` extension needs to be loaded, and if that wasn't
    all you also need to be on Microsoft Windows to, to use this.
  prefs: []
  type: TYPE_NORMAL
- en: XCache caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The XCache is an adapter that utilizes the XCache module in PHP, which is another
    cache adapter like APC and is a fast opcode cacher, which is very useful. This
    adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByPrefixInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IterableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This adapter requires the XCache extension to be loaded and enabled in PHP.
    Please make sure this is the case before trying to use the adapter.
  prefs: []
  type: TYPE_NORMAL
- en: ZendServerDisk caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ZendServerDisk adapter is a great file system cache adapter provided by
    the Zend Server application. If we have the Zend Server installed, this adapter
    is a great way of storing the cache on the file system as it integrates ridiculously
    good with the Zend Server. This adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AvailableSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make this adapter work you'll need to have the Zend Server installed, otherwise
    it will just throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: ZendServerShm caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ZendServerShm adapter also requires us to have the Zend Server installed,
    but if we have and we want to cache items in the shared memory (shm) then this
    is an amazing way of doing it, as this adapter integrates very nicely with the
    Zend Server. This adapter also extends from the `AbstractAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This adapter implements the following interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClearByNamespaceInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlushableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TotalSpaceCapableInterface`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make this adapter work you'll need to have the Zend Server installed to make
    this adapter work, otherwise it will just throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Cache patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we start caching, we will quickly find ourselves in situations that are
    counteractive to the performance while we just wanted everything to go faster.
    That is why there are classes in ZF2 that are called Cache patterns, which are
    there for us to use when we want to overcome some common problems.
  prefs: []
  type: TYPE_NORMAL
- en: Like the adapters, patterns are also always implementations of an interface;
    in this case the `PatternInterface`. And because we usually also want some basic
    functionality, most of the patterns also extend from the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: Options for the patterns are defined through the `PatternOptions` class, which
    is explained a bit further on as well.
  prefs: []
  type: TYPE_NORMAL
- en: The CallbackCache pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What do we want, a callback or the cache? Sometimes we just don't know for sure,
    so we'll let the pattern to figure it out itself! The `CallbackCache` pattern
    first makes sure if there is a result for our callback already defined in the
    cache, and if so, returns that. If the result is not in the cache yet, it will
    call our callback function, put our output in the result and then return that.
    Either way, the second time that callback is being handled, we will get our cache
    back. So if this is a long running method, it will be considerably faster when
    we don't have to execute the code again.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern also takes the arguments for that callback in consideration, which
    means you don't really have to worry much about the callback providing you with
    the wrong results!
  prefs: []
  type: TYPE_NORMAL
- en: This Pattern uses the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: The CaptureCache pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CaptureCache` pattern captures the output we are sending to the browser
    by initiating an `ob_start()` and `ob_implicit_flush()`. We can then do a check
    if the cache exists every time we sent the output out, so that instead of generating
    it we just display the output.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern uses the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This pattern does not automatically output cache once defined, the developer
    needs to get the cache themselves first before using the start method. If we want
    to output cache when it exists before generating new content we should use the
    `OutputCache` pattern.
  prefs: []
  type: TYPE_NORMAL
- en: The ClassCache pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ClassCache` pattern caches the output of a class method call and returns
    that instead of the actual call. But of course, this only happens when the cache
    is actually available, otherwise it will just do the method call and cache the
    results. The class name (not the object) needs to be set in the `PatternOptions::setClass`
    to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern uses the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: The ObjectCache pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ObjectCache` pattern caches the object and can be used to call methods
    upon its retrieval, very handy if we have objects that need to persistent for
    a very long time. The object needs to be set in the `PatternOptions::setObject`
    to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern uses the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: The OutputCache pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `OutputCache` pattern outputs the cache if it is defined. If not, then OutputCache
    caches the output and sets the cache upon script end (or call to the end method,
    whichever comes first).
  prefs: []
  type: TYPE_NORMAL
- en: This pattern uses the `AbstractPattern` class.
  prefs: []
  type: TYPE_NORMAL
- en: The PatternOptions pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `PatternOptions` pattern can be used to set options or get options from
    and to the patterns (`setOptions` and `getOptions` respectively). For most patterns
    some form of options need to be set before the pattern can be used. Think here
    about the `setStorage` method for example, because the pattern needs to know the
    storage adapter before it can actually store things.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining the difference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storage adapters store and retrieve the cache data. We can set options to determine
    the length of the validity or perhaps check if the cache is full or not, but we
    can't determine how it is stored, as that is part of the adapter's job description.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns however don't store anything themselves. They determine if they need
    to store anything by checking if the cache already exists, or if the cache is
    what we expect it to be (for example, when we use a different method call or different
    arguments to that call). They do tell the adapters what they want to retrieve
    and store, so that the adapter then can find out how to retrieve it from the actual
    storage again.
  prefs: []
  type: TYPE_NORMAL
- en: In a developer's eye we would rather be using patterns before we would want
    to use the adapters, as we'd not want to interfere with the adapters too much
    if there are already patterns doing most of the work for us.
  prefs: []
  type: TYPE_NORMAL
