["```php\n<?php\nclass Example \n{\n    public function doSomething() bool\n    {\n        return true;\n    }\n}\n```", "```php\n$ php -lf example.php\n```", "```php\nPHP Parse error: syntax error, unexpected identifier\n  \"bool\", expecting \";\" or \"{\" in example.php on line 5\nErrors parsing example.php\n```", "```php\n$ php -lf src/*\n```", "```php\n$ composer require friendsofphp/php-cs-fixer --dev\n```", "```php\n<?php\nclass Example\n{\n  public function doSomething(): bool { return true; }\n}\n```", "```php\n$ vendor/bin/php-cs-fixer fix example.php\n```", "```php\n<?php\nclass Example\n{\n    public function doSomething(): bool\n    {\n        return true;\n    }\n}\n```", "```php\n$ vendor/bin/php-cs-fixer fix example.php --dry-run -v\n```", "```php\n$ vendor/bin/php-cs-fixer fix src\n```", "```php\n$ vendor/bin/php-cs-fixer fix src \n  --rules=declare_strict_types\n```", "```php\n$ vendor/bin/php-cs-fixer fix src --rules=@PSR12\n```", "```php\n<?php\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->exclude('templates');\n$config = new PhpCsFixer\\Config();\nreturn $config->setRules([\n    '@PSR12' => true,\n    'declare_strict_types' => true,\n    'array_syntax' => ['syntax' => 'short'],\n])\n->setFinder($finder);\n```", "```php\n$class = get_class($someClass);\n```", "```php\n$class = $someClass::class;\n```", "```php\n$ wget https://phar.phpunit.de/phpcpd.phar\n```", "```php\n$ php phpcpd.phar src\nphpcpd 6.0.3 by Sebastian Bergmann.\nNo clones found.\nTime: 00:00, Memory: 2.00 MB\n```", "```php\n$ php phpcpd.phar --min-lines 4 --min-tokens 20 src\nphpcpd 6.0.3 by Sebastian Bergmann.\nFound 1 clones with 22 duplicated lines in 2 files:\n- /src/example.php:12-23 (11 lines)\n  /src/example.php:28-39\n  /src/example3.php:7-18\n32.35% duplicated lines out of 68 total lines of code.\nAverage size of duplication is 22 lines, largest clone has\n  11 of lines\nTime: 00:00.001, Memory: 2.00 MB\n```", "```php\n$ composer require phpmd/phpmd --dev\n```", "```php\n$ vendor/bin/phpmd src text cleancode,codesize\n```", "```php\n$ vendor/bin/phpmd src html cleancode,codesize > phpmd_report.html\n```", "```php\n<?xml version=\"1.0\"?>\n<ruleset name=\"Custom PHPMD rule set\"\n    xmlns=http://pmd.sf.net/ruleset/1.0.0\n    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance\n    xsi:schemaLocation=http://pmd.sf.net/ruleset/1.0.0  http://pmd.sf.net/ruleset_xml_schema.xsd\nxsi:noNamespaceSchemaLocation=\n  \"http://pmd.sf.net/ruleset_xml_schema.xsd\">\n    <description>\n        Rule set which contains all codesize and cleancode\n        rules\n    </description>\n    <rule ref=\"rulesets/codesize.xml\" />\n    <rule ref=\"rulesets/cleancode.xml\" />\n</ruleset>\n```", "```php\n<rule ref=\"rulesets/cleancode.xml\">\n    <exclude name=\"ElseExpression\" />\n</rule>\n```", "```php\n<rule ref=\"rulesets/cleancode.xml/StaticAccess\" />\n<rule ref=\"rulesets/cleancode.xml/UndefinedVariable\" />\n```", "```php\n<rule ref=\"rulesets/cleancode.xml/StaticAccess\">\n    <properties>\n        <property name=\"exceptions\">\n            <value>\n                \\DateTime,\n                \\DateTimezone\n            </value>\n        </property>\n    </properties>\n</rule>\n```", "```php\n$ vendor/bin/phpmd src text phpmd.xml\n```", "```php\n/**\n* @SuppressWarnings(PHPMD.StaticAccess)\n*/\nclass ExampleClass {\n    public function getUser(int $id): User {\n        return User::find($id);\n    }\n}\n```", "```php\n$ vendor/bin/phpmd src text phpmd.xml --generate-baseline\n```", "```php\n$ vendor/bin/phpmd src text phpmd.xml\n```", "```php\n$ vendor/bin/phpmd src text phpmd.xml --update-baseline\n```", "```php\n$ composer require phpstan/phpstan --dev\n```", "```php\n<?php\nclass Vat\n{\n    private float $vat = 0.19;\n\n    public function getVat(): int\n    {\n        return $this->vat;\n    }\n}\nclass OrderPosition\n{\n    public function getGrossPrice(float $netPrice): float\n    {\n        $vatModel = new Vat();\n        $vat = $vatModel->getVat();\n        return $netPrice * (1 + $vat);\n    }\n}\n$orderPosition = new OrderPosition();\necho $orderPosition->getGrossPrice(100);\n```", "```php\n$ vendor/bin/phpstan analyse src\n```", "```php\n$ vendor/bin/phpstan analyse --level 1 src\n```", "```php\nparameters:\n    level: 4\n    paths:\n        - src\n```", "```php\n$ vendor/bin/phpstan analyse\n```", "```php\n// @phpstan-ignore-next-line\n$exampleClass->foo();\n$exampleClass->bar(); // @phpstan-ignore-line\n```", "```php\nMethod OrderPosition::getGrossPrice() has no return type specified.\n```", "```php\nparameters:\n    level: 6\n    paths:\n        - src\n    ignoreErrors:\n        - '#^Method OrderPosition\\:\\:getGrossPrice\\(\\) has no return type specified\\.$#'\n```", "```php\nignoreErrors:\n    -\n        message: '#^Method\n          OrderPosition\\:\\:getGrossPrice\\(\\) has no return\n          type specified\\.$#'\n        path: src/OrderPosition.php\n```", "```php\n$ vendor/bin/phpstan analyse --generate-baseline\n```", "```php\nincludes:\n    - phpstan-baseline.neon\nparameters:\n    …\n```", "```php\n$ composer require --dev vimeo/psalm\n```", "```php\n$ vendor/bin/psalm --init\n```", "```php\n$ vendor/bin/psalm\n```", "```php\n<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"7\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance\n    xmlns=https://getpsalm.org/schema/config\n    xsi:schemaLocation=https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n```", "```php\nclass Vat\n{\n    private float $vat = 0.19;\n    /**\n     * @psalm-suppress InvalidReturnType\n     */\n    public function getVat(): int\n    {\n        /**\n         * @psalm-suppress InvalidReturnStatement\n         */\n        return $this->vat;\n    }\n}\n```", "```php\n<issueHandlers>\n    <InvalidReturnType errorLevel=\"suppress\" />\n    <InvalidReturnStatement errorLevel=\"suppress\" />\n</issueHandlers>\n```", "```php\n<issueHandlers>\n    <InvalidReturnType>\n        <errorLevel type=\"suppress\">\n            <file name=\"Vat.php\" />\n        </errorLevel>\n    </InvalidReturnType>\n    <InvalidReturnStatement>\n        <errorLevel type=\"suppress\">\n            <dir name=\"src/Vat\" />\n        </errorLevel>\n    </InvalidReturnStatement>\n</issueHandlers>\n```", "```php\n$ vendor/bin/psalm --set-baseline=psalm-baseline.xml\n```", "```php\n$ vendor/bin/psalm --use-baseline=psalm-baseline.xml\n```", "```php\n<psalm\n    ...\n    errorBaseline=\"./psalm-baseline.xml\"\n>\n```", "```php\n$ vendor/bin/psalm --update-baseline\n```", "```php\nPsalm can automatically fix 1 issues.\nRun Psalm again with\n--alter --issues=InvalidReturnType --dry-run\nto see what it can fix.\n```", "```php\n$ vendor/bin/psalm --alter --issues=InvalidReturnType --dry-run\n```"]