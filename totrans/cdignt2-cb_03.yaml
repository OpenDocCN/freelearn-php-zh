- en: Chapter 3. Creating E-commerce Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Amending configuration settings to run sessions in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and searching by product categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the cart to the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Cart` class in CodeIgniter provides basic shopping cart functionality,
    such as adding items, amending the cart, displaying cart details, and removing
    items within the cart. In this chapter, we'll look at creating a simple shop using
    the CodeIgniter `Cart` class.
  prefs: []
  type: TYPE_NORMAL
- en: Amending configuration settings to run sessions in a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Why do I need to do this; I''m not using sessions at the moment and besides,
    I have already covered sessions in another recipe?" I know; I hear you; but the
    CodeIgniter `Cart` class makes use of sessions in order to build a cart for the
    customer or user. We''ll go over sessions here with the `Cart` class in mind.
    If you''ve already implemented sessions, you can probably skip this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we launch into the cart example, we need to do a little housekeeping.
    First, we'll alter some config settings, which will allow CodeIgniter to save
    Cart information to the database, and then we'll create a simple database schema
    to handle products, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are some configuration changes we need to apply before we start, they
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the, `application/config/config.php` file, in a text editor and make the
    following amendments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Config variable | Value | Explanation |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''encryption_key''] = ''''` | `Alphanumeric` | Specifies the encryption
    key CodeIgniter should use when encrypting sessions. The value can be alphanumeric
    and you must decide on a string for its value. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_encrypt_cookie'']` | `TRUE/FALSE` | Specifies whether or
    not to encrypt the sessions in the database; for this example, it should be set
    to `TRUE`. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_use_database]` | `TRUE/FALSE` | Specifies whether or not
    to store sessions in the database; for this example, it should be set to `TRUE`.
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `$config[''sess_table_name'']` | `Alphanumeric` | The name of the table in
    the database that is used to store sessions. For this example, it should be set
    to `sess_cart`. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'There are some tables required to support this recipe, and also some dummy
    data. Copy the following SQL code into your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay so what have we just made? The following is a description of both tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Categories table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The categories table stores information about the category groups that each
    product (in the products table) is associated with. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item name | Attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_id` | `INTEGER(11)` | Table primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `cat_name` | `VARCHAR(50)` | Name of the category. |'
  prefs: []
  type: TYPE_TB
- en: Products table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The products table stores information about each product for sale in the cart.
    It is linked to the categories table by the foreign key (`category_id`). The following
    is the product table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Item name | Attributes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `product_id` | `INTEGER(11)` | Table primary key |'
  prefs: []
  type: TYPE_TB
- en: '| `product_name` | `VARCHAR(125)` | Name of the product |'
  prefs: []
  type: TYPE_TB
- en: '| `product_code` | `INTEGER(11)` | A code for the product, which could be used
    as an internal stock code |'
  prefs: []
  type: TYPE_TB
- en: '| `product_description` | `VARCHAR(255)` | Detailed description of the product
    |'
  prefs: []
  type: TYPE_TB
- en: '| `category_id` | `INTEGER(11)` | The products category ID()as a foreign key
    from the category table |'
  prefs: []
  type: TYPE_TB
- en: '| `product_price` | `INTEGER(11)` | The value of the product. |'
  prefs: []
  type: TYPE_TB
- en: Creating a basic cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be creating the basic files necessary to run a cart.
    Later in the chapter, we will be adding greater functionality to it, but first
    let''s prepare. We will be creating the following four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/controllers/shop.php`: This controller will
    handle any customer interaction between the views and the model, such as handling
    any forms and controlling the customer''s journey through the cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/models/shop_model.php`: This model will handle
    any database interaction between the controller and the database. It will contain
    functions to fetch products and, product categories, and later in the chapter,
    to save the cart to the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/shop/display_cart.php`: This view will
    display a summary of a customer''s cart at any one time, and allow that customer
    to amend the quantities of items in their cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path/to/codeigniter/application/views/shop/view_products.php`: This view will
    display products from the `cart.products` table in the database, and provide options
    to allow the customer to add items to their cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to create the following four files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/shop.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/shop_model.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code into the, `/path/to/codeigniter/application/controllers/shop.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then copy the following code to the, `/path/to/codeigniter/application/models/shop_model.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then copy the following code to the, `path/to/codeigniter/application/views/shop/display_cart.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, copy the following code to the, `path/to/codeigniter/application/views/shop/display_products.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, there''s a lot going on here; so rather than discussing what''s going
    on in each file, we''ll break it down into user actions. There are several actions
    users can perform when interacting with the cart. The most common are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User browses the catalogue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User adds an item to the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User updates or removes items in the cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User browses the catalogue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`public function index()` in `controllers/shop.php` loads all the products
    from the database by calling the `$this->Cart_model->get_all_products()` function
    from `Shop_model`, and passes it to the, `views/shop/display_products.php view`,
    via `$this->load->view(''shop/display_products'', $data)`.'
  prefs: []
  type: TYPE_NORMAL
- en: User adds an item to the cart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User clicks on the **Add to cart** link in the, `views/shop/display_products.php`
    file, next to the item they wish to purchase, which calls `public function add()`
    in `controllers/shop.php`. `public function add()` fetches the product ID passed
    to it in the URL by `$this->uri->segment(3)` . Using this, `$product_id` looks
    up the product details from the database by `$this->Shop_model->get_product_details($product_id)`.
    This data is then written to the cart by `$this->cart->insert($data)`. Finally,
    the user is redirected to the cart with `$this->load->view('shop/display_cart',
    $data)` so they can view their item in the cart and make any amendments if they
    wish to.
  prefs: []
  type: TYPE_NORMAL
- en: User updates or removes items in the cart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This covers two actions: adding more items to the cart or completely removing
    an item or all items from the cart. They are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding to or subtracting items from the cart**: When the user views their
    cart, he they see a table with the quantities of each item in their cart to the
    left. The user can change the quantity of items by changing the values in this
    textbox. If the user increases or decreases the current quantity of a particular
    item and presses the, **Update Cart** button, then we run the shop controller
    function, `update_cart()`. `update_cart()` loops through the post array looking
    at each item and its new or desired quantity. It will track each item with the
    rowed value in the `$data` array, ensuring that the correct item is updated with
    the correct new quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removing items from the cart**: This functions the same way as adding or
    removing items as previously described. However, the difference is that if the
    quantity chosen by the user is `0 (zero)`, then CodeIgniter will remove the item
    completely from the cart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and searching by product categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From a customer perspective, it is useful to be able to narrow down your catalogue
    by viewing products by category, such as shoes, shirts, coats, and so on. If you
    wish to add this functionality, you'll need to amend the database. If you require
    this feature, copy the code in the following *Getting ready* section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to support searching and filtering by categories, we''ll need to add
    a categories table. If you haven''t already done this during the *Getting ready*
    section earlier in the chapter, create the following table in your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll now need to make amendments to the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/views/shop/display_products.php`: This added a small
    menu allowing the user to click on different categories; the results will be filtered
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/views/shop/display_cart.php`: This added a small menu
    allowing the user to click on different categories; the results will be filtered
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/shop.php`: This added code that
    will display categories and also look for a user''s category choice in a form
    submission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/shop_model.php`: This added the code
    that, pulls categories from the database according to a category ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code at the top of the, `path/to/codeigniter/application/views/shop/display_cart.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the following code at the top of the, `path/to/codeigniter/application/views/shop/display_products.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `public function index()` in the shop controller with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the shop controller function, `add()`, with the following code (the
    changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the controller function, `displat_cart()`, with the following code
    (the changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `public function get_all_products()` in the `shop_model` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following function, `get_all_categories()`, to the `shop_model` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve amended `public function index()` so that we can filter the user''s
    browsing results by `$category_id` (which is the primary key of each category
    in the database). If the page is being loaded for the first time (not as a submission),
    then the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: will automatically set `$category_id` to null so `$this->Shop_model->get_all_products($category_id)`
    will return all products regardless of `category_id`. However, if `$category_id`
    is passed with a form submission, then `$this->Shop_model->get_all_products($category_id)`
    will return only the products that are assigned to that category.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the cart to the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before your customers are ready to proceed to payment, you need to take their
    details for payment, delivery, and your own records, and then move their cart
    that is in the session table to a specific table that will store orders.
  prefs: []
  type: TYPE_NORMAL
- en: Once the order has been saved and the customer details are supplied, a unique
    order code is generated and stored in `orders.order_fulfilment_code`. This can
    be used by a payment provider (for example, PayPal, GoCardless, Stripe, and so
    on) to keep track of the payment processing through their system and back into
    yours.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create the following tables in your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have created the database tables to store your customers and orders,
    let''s create the files to support this new functionality. We''re going to create
    the following two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/cust.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/cart_model.php`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create the, `/path/to/codeigniter/application/controllers/cust.php` controller
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `public function save_cart_to_db()` to the `models/shop_model.php` model
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Amend the, `views/shop/display_cart.php` file. At the top of the page, add
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `filepath/to/codeigniter/application/views/shop/user_details.php`
    file and add the following code into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To explain what's happening here, let's look at this from the customer's perspective.
    The customer has taken a look around the store and has selected a few items and
    placed them into the cart. The next step is to convert that cart into an order.
    So, the user clicks on **View Cart** to view the products they wish to order (we've
    already covered this, so we won't go into it again.) When the user clicks on **Proceed
    to checkout**, the public function, `user_details()`, is called, which displays
    `views/shop/user_details.php` to the customer. This asks them to enter some information;
    in this case, their name, e-mail address, payment, delivery address, and so on.
    On successfully submitting the form (that is, no validation errors), their order
    is moved from the cart to the database and matched with their submitted user details.
  prefs: []
  type: TYPE_NORMAL
- en: A tracking code is also created with the line, `$payment_code = mt_rand()`,
    which can be used to track the payment through a payment providers system.
  prefs: []
  type: TYPE_NORMAL
