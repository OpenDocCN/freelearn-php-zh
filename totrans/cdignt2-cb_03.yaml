- en: Chapter 3. Creating E-commerce Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 创建电子商务功能
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Amending configuration settings to run sessions in a database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改配置设置以在数据库中运行会话
- en: Creating a basic cart
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本购物车
- en: Adding and searching by product categories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过产品分类添加和搜索
- en: Saving the cart to the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将购物车保存到数据库中
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The `Cart` class in CodeIgniter provides basic shopping cart functionality,
    such as adding items, amending the cart, displaying cart details, and removing
    items within the cart. In this chapter, we'll look at creating a simple shop using
    the CodeIgniter `Cart` class.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CodeIgniter中的`Cart`类提供了基本的购物车功能，例如添加项目、修改购物车、显示购物车详情以及从购物车中删除项目。在本章中，我们将探讨如何使用CodeIgniter的`Cart`类创建一个简单的商店。
- en: Amending configuration settings to run sessions in a database
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改配置设置以在数据库中运行会话
- en: '"Why do I need to do this; I''m not using sessions at the moment and besides,
    I have already covered sessions in another recipe?" I know; I hear you; but the
    CodeIgniter `Cart` class makes use of sessions in order to build a cart for the
    customer or user. We''ll go over sessions here with the `Cart` class in mind.
    If you''ve already implemented sessions, you can probably skip this recipe.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么我需要这样做；我现在没有使用会话，而且，我已经在其他菜谱中涵盖了会话？”我知道；我听到了你的话；但是CodeIgniter的`Cart`类使用会话来为顾客或用户构建购物车。我们将在这里考虑`Cart`类来讲解会话。如果你已经实现了会话，你可能可以跳过这个菜谱。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we launch into the cart example, we need to do a little housekeeping.
    First, we'll alter some config settings, which will allow CodeIgniter to save
    Cart information to the database, and then we'll create a simple database schema
    to handle products, and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始购物车示例之前，我们需要做一些准备工作。首先，我们将修改一些配置设置，这将允许CodeIgniter将购物车信息保存到数据库中，然后我们将创建一个简单的数据库模式来处理产品等。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'There are some configuration changes we need to apply before we start, they
    are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要应用一些配置更改，如下所示：
- en: 'Open the, `application/config/config.php` file, in a text editor and make the
    following amendments:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文本编辑器中的`application/config/config.php`文件，并进行以下修改：
- en: '| Config variable | Value | Explanation |'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 配置变量 | 值 | 说明 |'
- en: '| --- | --- | --- |'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `$config[''encryption_key''] = ''''` | `Alphanumeric` | Specifies the encryption
    key CodeIgniter should use when encrypting sessions. The value can be alphanumeric
    and you must decide on a string for its value. |'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''encryption_key''] = ''''` | `Alphanumeric` | 指定CodeIgniter在加密会话时应使用的加密密钥。该值可以是字母数字的，你必须决定一个字符串作为其值。
    |'
- en: '| `$config[''sess_encrypt_cookie'']` | `TRUE/FALSE` | Specifies whether or
    not to encrypt the sessions in the database; for this example, it should be set
    to `TRUE`. |'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_encrypt_cookie'']` | `TRUE/FALSE` | 指定是否在数据库中加密会话；对于本例，应设置为`TRUE`。
    |'
- en: '| `$config[''sess_use_database]` | `TRUE/FALSE` | Specifies whether or not
    to store sessions in the database; for this example, it should be set to `TRUE`.
    |'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_use_database]` | `TRUE/FALSE` | 指定是否将会话存储在数据库中；对于本例，应设置为`TRUE`。
    |'
- en: '| `$config[''sess_table_name'']` | `Alphanumeric` | The name of the table in
    the database that is used to store sessions. For this example, it should be set
    to `sess_cart`. |'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `$config[''sess_table_name'']` | `Alphanumeric` | 数据库中用于存储会话的表名。对于本例，应设置为`sess_cart`。
    |'
- en: 'There are some tables required to support this recipe, and also some dummy
    data. Copy the following SQL code into your database:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了支持这个菜谱，需要一些表和一些虚拟数据。将以下SQL代码复制到你的数据库中：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Okay so what have we just made? The following is a description of both tables:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们刚才做了什么？以下是对两个表的描述：
- en: Categories table
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类表
- en: 'The categories table stores information about the category groups that each
    product (in the products table) is associated with. They are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 分类表存储有关每个产品（在产品表中）关联的分类组的信息。它们如下所示：
- en: '| Item name | Attributes | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 属性 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `cat_id` | `INTEGER(11)` | Table primary key. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `cat_id` | `INTEGER(11)` | 表的主键。 |'
- en: '| `cat_name` | `VARCHAR(50)` | Name of the category. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `cat_name` | `VARCHAR(50)` | 分类名称。 |'
- en: Products table
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品表
- en: 'The products table stores information about each product for sale in the cart.
    It is linked to the categories table by the foreign key (`category_id`). The following
    is the product table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 产品表存储有关购物车中每个销售产品的信息。它通过外键（`category_id`）与分类表相关联。以下是产品表：
- en: '| Item name | Attributes | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 属性 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `product_id` | `INTEGER(11)` | Table primary key |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `product_id` | `INTEGER(11)` | 表的主键 |'
- en: '| `product_name` | `VARCHAR(125)` | Name of the product |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `product_name` | `VARCHAR(125)` | 产品名称 |'
- en: '| `product_code` | `INTEGER(11)` | A code for the product, which could be used
    as an internal stock code |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `product_code` | `INTEGER(11)` | 产品代码，可以用作内部库存代码 |'
- en: '| `product_description` | `VARCHAR(255)` | Detailed description of the product
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `product_description` | `VARCHAR(255)` | 产品详细描述 |'
- en: '| `category_id` | `INTEGER(11)` | The products category ID()as a foreign key
    from the category table |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `category_id` | `INTEGER(11)` | 产品分类ID（作为从分类表的外键） |'
- en: '| `product_price` | `INTEGER(11)` | The value of the product. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `product_price` | `INTEGER(11)` | 产品价值。 |'
- en: Creating a basic cart
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本购物车
- en: 'In this section, we will be creating the basic files necessary to run a cart.
    Later in the chapter, we will be adding greater functionality to it, but first
    let''s prepare. We will be creating the following four files:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建运行购物车所需的基本文件。在本章的后面部分，我们将添加更多的功能，但首先让我们做好准备。我们将创建以下四个文件：
- en: '`path/to/codeigniter/application/controllers/shop.php`: This controller will
    handle any customer interaction between the views and the model, such as handling
    any forms and controlling the customer''s journey through the cart.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/controllers/shop.php`: 此控制器将处理视图和模型之间的任何客户交互，例如处理任何表单和控制客户通过购物车的旅程。'
- en: '`path/to/codeigniter/application/models/shop_model.php`: This model will handle
    any database interaction between the controller and the database. It will contain
    functions to fetch products and, product categories, and later in the chapter,
    to save the cart to the database.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/models/shop_model.php`: 此模型将处理控制器与数据库之间的任何数据库交互。它将包含获取产品和产品分类的函数，并在本章的后面部分，将购物车保存到数据库中。'
- en: '`path/to/codeigniter/application/views/shop/display_cart.php`: This view will
    display a summary of a customer''s cart at any one time, and allow that customer
    to amend the quantities of items in their cart.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/shop/display_cart.php`: 此视图将显示任何时刻客户的购物车摘要，并允许该客户修改购物车中项目的数量。'
- en: '`path/to/codeigniter/application/views/shop/view_products.php`: This view will
    display products from the `cart.products` table in the database, and provide options
    to allow the customer to add items to their cart.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path/to/codeigniter/application/views/shop/view_products.php`: 此视图将显示数据库中
    `cart.products` 表的产品，并提供选项允许客户将项目添加到他们的购物车中。'
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create the following four files:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建以下四个文件：
- en: '`/path/to/codeigniter/application/controllers/shop.php`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/shop.php`'
- en: '`/path/to/codeigniter/application/models/shop_model.php`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/shop_model.php`'
- en: '`/path/to/codeigniter/application/views/shop/display_cart.php`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_cart.php`'
- en: '`/path/to/codeigniter/application/views/shop/display_products.php`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/views/shop/display_products.php`'
- en: 'Copy the following code into the, `/path/to/codeigniter/application/controllers/shop.php`
    file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到 `/path/to/codeigniter/application/controllers/shop.php` 文件中：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then copy the following code to the, `/path/to/codeigniter/application/models/shop_model.php`
    file:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将以下代码复制到 `/path/to/codeigniter/application/models/shop_model.php` 文件中：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then copy the following code to the, `path/to/codeigniter/application/views/shop/display_cart.php`
    file:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将以下代码复制到 `path/to/codeigniter/application/views/shop/display_cart.php` 文件中：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, copy the following code to the, `path/to/codeigniter/application/views/shop/display_products.php`
    file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下代码复制到 `path/to/codeigniter/application/views/shop/display_products.php`
    文件中：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Okay, there''s a lot going on here; so rather than discussing what''s going
    on in each file, we''ll break it down into user actions. There are several actions
    users can perform when interacting with the cart. The most common are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这里有很多内容；所以我们不会讨论每个文件中的内容，而是将其分解为用户操作。当用户与购物车交互时，可以执行几种操作。最常见的是以下操作：
- en: User browses the catalogue
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户浏览目录
- en: User adds an item to the cart
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将项目添加到购物车
- en: User updates or removes items in the cart
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户更新或删除购物车中的项目
- en: User browses the catalogue
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户浏览目录
- en: '`public function index()` in `controllers/shop.php` loads all the products
    from the database by calling the `$this->Cart_model->get_all_products()` function
    from `Shop_model`, and passes it to the, `views/shop/display_products.php view`,
    via `$this->load->view(''shop/display_products'', $data)`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`controllers/shop.php`中的`public function index()`通过调用`Shop_model`中的`$this->Cart_model->get_all_products()`函数从数据库中加载所有产品，并通过`$this->load->view(''shop/display_products'',
    $data)`将其传递给`views/shop/display_products.php`视图。'
- en: User adds an item to the cart
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户将项目添加到购物车
- en: User clicks on the **Add to cart** link in the, `views/shop/display_products.php`
    file, next to the item they wish to purchase, which calls `public function add()`
    in `controllers/shop.php`. `public function add()` fetches the product ID passed
    to it in the URL by `$this->uri->segment(3)` . Using this, `$product_id` looks
    up the product details from the database by `$this->Shop_model->get_product_details($product_id)`.
    This data is then written to the cart by `$this->cart->insert($data)`. Finally,
    the user is redirected to the cart with `$this->load->view('shop/display_cart',
    $data)` so they can view their item in the cart and make any amendments if they
    wish to.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用户点击`views/shop/display_products.php`文件中他们想要购买的项目旁边的“**添加到购物车**”链接，这将在`controllers/shop.php`中调用`public
    function add()`。`public function add()`通过`$this->uri->segment(3)`从URL获取传递给它的产品ID。使用这个，`$product_id`通过`$this->Shop_model->get_product_details($product_id)`从数据库中查找产品详情。然后，通过`$this->cart->insert($data)`将这些数据写入购物车。最后，用户通过`$this->load->view('shop/display_cart',
    $data)`被重定向到购物车，以便他们可以查看购物车中的项目，并根据需要做出任何修改。
- en: User updates or removes items in the cart
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户更新或删除购物车中的项目
- en: 'This covers two actions: adding more items to the cart or completely removing
    an item or all items from the cart. They are described as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了两个动作：向购物车添加更多项目或完全删除购物车中的项目或所有项目。它们如下所述：
- en: '**Adding to or subtracting items from the cart**: When the user views their
    cart, he they see a table with the quantities of each item in their cart to the
    left. The user can change the quantity of items by changing the values in this
    textbox. If the user increases or decreases the current quantity of a particular
    item and presses the, **Update Cart** button, then we run the shop controller
    function, `update_cart()`. `update_cart()` loops through the post array looking
    at each item and its new or desired quantity. It will track each item with the
    rowed value in the `$data` array, ensuring that the correct item is updated with
    the correct new quantity.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向购物车添加或减去项目**：当用户查看他们的购物车时，他们会看到左侧一个表格，显示购物车中每个项目的数量。用户可以通过更改此文本框中的值来更改项目的数量。如果用户增加或减少特定项目的当前数量并按下“**更新购物车**”按钮，那么我们将运行商店控制器函数`update_cart()`。`update_cart()`遍历POST数组，查看每个项目和它的新或期望的数量。它将使用`$data`数组中的行值跟踪每个项目，确保正确地更新了正确的数量。'
- en: '**Removing items from the cart**: This functions the same way as adding or
    removing items as previously described. However, the difference is that if the
    quantity chosen by the user is `0 (zero)`, then CodeIgniter will remove the item
    completely from the cart.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从购物车中删除项目**：此功能与之前描述的添加或删除项目的方式相同。然而，区别在于如果用户选择的数量是`0（零）`，那么CodeIgniter将完全从购物车中删除该项目。'
- en: Adding and searching by product categories
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和按产品类别搜索
- en: From a customer perspective, it is useful to be able to narrow down your catalogue
    by viewing products by category, such as shoes, shirts, coats, and so on. If you
    wish to add this functionality, you'll need to amend the database. If you require
    this feature, copy the code in the following *Getting ready* section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户的角度来看，能够通过查看类别（如鞋子、衬衫、外套等）来缩小您的目录是有用的。如果您想添加此功能，您需要修改数据库。如果您需要此功能，请复制以下“准备就绪”部分中的代码。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In order to support searching and filtering by categories, we''ll need to add
    a categories table. If you haven''t already done this during the *Getting ready*
    section earlier in the chapter, create the following table in your database:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持按类别搜索和筛选，我们需要添加一个类别表。如果您在章节前面的“准备就绪”部分还没有这样做，请在您的数据库中创建以下表格：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll now need to make amendments to the following files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要对以下文件进行修改：
- en: '`/path/to/codeigniter/views/shop/display_products.php`: This added a small
    menu allowing the user to click on different categories; the results will be filtered
    accordingly.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/views/shop/display_products.php`：添加了一个小菜单，允许用户点击不同的类别；结果将相应地过滤。'
- en: '`/path/to/codeigniter/views/shop/display_cart.php`: This added a small menu
    allowing the user to click on different categories; the results will be filtered
    accordingly.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/views/shop/display_cart.php`：添加了一个小菜单，允许用户点击不同的类别；结果将相应地过滤。'
- en: '`/path/to/codeigniter/application/controllers/shop.php`: This added code that
    will display categories and also look for a user''s category choice in a form
    submission.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/shop.php`：这段添加的代码将显示类别，并在表单提交中查找用户的类别选择。'
- en: '`/path/to/codeigniter/application/models/shop_model.php`: This added the code
    that, pulls categories from the database according to a category ID.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/shop_model.php`：添加了从数据库根据类别ID获取类别的代码。'
- en: 'Copy the following code at the top of the, `path/to/codeigniter/application/views/shop/display_cart.php`
    file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`path/to/codeigniter/application/views/shop/display_cart.php`文件的顶部复制以下代码：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Copy the following code at the top of the, `path/to/codeigniter/application/views/shop/display_products.php`
    file:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`path/to/codeigniter/application/views/shop/display_products.php`文件的顶部复制以下代码：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Replace `public function index()` in the shop controller with the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将商店控制器中的`public function index()`替换为以下内容：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace the shop controller function, `add()`, with the following code (the
    changes are highlighted):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将商店控制器函数`add()`替换为以下代码（更改已突出显示）：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Replace the controller function, `displat_cart()`, with the following code
    (the changes are highlighted):'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制器函数`displat_cart()`替换为以下代码（更改已突出显示）：
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Replace `public function get_all_products()` in the `shop_model` with the following
    code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`shop_model`中的`public function get_all_products()`替换为以下代码：
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following function, `get_all_categories()`, to the `shop_model` as
    follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数`get_all_categories()`添加到`shop_model`中，如下所示：
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We''ve amended `public function index()` so that we can filter the user''s
    browsing results by `$category_id` (which is the primary key of each category
    in the database). If the page is being loaded for the first time (not as a submission),
    then the code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修改了`public function index()`，以便我们可以通过`$category_id`（这是数据库中每个类别的主键）过滤用户的浏览结果。如果页面是首次加载（不是作为提交），则代码：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: will automatically set `$category_id` to null so `$this->Shop_model->get_all_products($category_id)`
    will return all products regardless of `category_id`. However, if `$category_id`
    is passed with a form submission, then `$this->Shop_model->get_all_products($category_id)`
    will return only the products that are assigned to that category.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将自动将`$category_id`设置为null，因此`$this->Shop_model->get_all_products($category_id)`将返回所有产品，无论`category_id`如何。然而，如果通过表单提交传递了`$category_id`，则`$this->Shop_model->get_all_products($category_id)`将只返回分配给该类别的产品。
- en: Saving the cart to the database
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将购物车保存到数据库
- en: Before your customers are ready to proceed to payment, you need to take their
    details for payment, delivery, and your own records, and then move their cart
    that is in the session table to a specific table that will store orders.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的客户准备好进行支付之前，您需要收集他们的支付、配送和您的记录详情，然后将会话表中的购物车移动到将存储订单的特定表中。
- en: Once the order has been saved and the customer details are supplied, a unique
    order code is generated and stored in `orders.order_fulfilment_code`. This can
    be used by a payment provider (for example, PayPal, GoCardless, Stripe, and so
    on) to keep track of the payment processing through their system and back into
    yours.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦订单已保存并且提供了客户详细信息，就会生成一个唯一的订单代码并存储在`orders.order_fulfilment_code`中。这可以被支付提供商（例如，PayPal、GoCardless、Stripe等）用来跟踪通过他们的系统到您系统的支付处理。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, create the following tables in your database:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在您的数据库中创建以下表：
- en: '[PRE14]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have created the database tables to store your customers and orders,
    let''s create the files to support this new functionality. We''re going to create
    the following two files:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了存储您的客户和订单的数据库表，让我们创建支持这个新功能的文件。我们将创建以下两个文件：
- en: '`/path/to/codeigniter/application/controllers/cust.php`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/controllers/cust.php`'
- en: '`/path/to/codeigniter/application/models/cart_model.php`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/codeigniter/application/models/cart_model.php`'
- en: 'Create the, `/path/to/codeigniter/application/controllers/cust.php` controller
    and add the following code to it:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/path/to/codeigniter/application/controllers/cust.php`控制器中创建控制器并添加以下代码：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add `public function save_cart_to_db()` to the `models/shop_model.php` model
    as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models/shop_model.php`模型中添加`public function save_cart_to_db()`，如下所示：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Amend the, `views/shop/display_cart.php` file. At the top of the page, add
    the following line:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`views/shop/display_cart.php`文件。在页面顶部添加以下行：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the `filepath/to/codeigniter/application/views/shop/user_details.php`
    file and add the following code into it:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`filepath/to/codeigniter/application/views/shop/user_details.php`文件，并将以下代码添加到其中：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To explain what's happening here, let's look at this from the customer's perspective.
    The customer has taken a look around the store and has selected a few items and
    placed them into the cart. The next step is to convert that cart into an order.
    So, the user clicks on **View Cart** to view the products they wish to order (we've
    already covered this, so we won't go into it again.) When the user clicks on **Proceed
    to checkout**, the public function, `user_details()`, is called, which displays
    `views/shop/user_details.php` to the customer. This asks them to enter some information;
    in this case, their name, e-mail address, payment, delivery address, and so on.
    On successfully submitting the form (that is, no validation errors), their order
    is moved from the cart to the database and matched with their submitted user details.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释这里发生的事情，让我们从顾客的角度来看待这个问题。顾客在商店里四处看了看，挑选了几件商品并将它们放入购物车。下一步是将购物车转换为订单。因此，用户点击**查看购物车**来查看他们想要订购的产品（我们已经讨论过这一点，所以不会再深入讨论。）当用户点击**前往结账**时，会调用公共函数`user_details()`，它将`views/shop/user_details.php`显示给顾客。这要求他们输入一些信息；在这种情况下，他们的名字、电子邮件地址、支付方式、送货地址等等。在成功提交表单（即没有验证错误）后，他们的订单将从购物车移动到数据库，并与他们提交的用户详细信息匹配。
- en: A tracking code is also created with the line, `$payment_code = mt_rand()`,
    which can be used to track the payment through a payment providers system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 还通过行`$payment_code = mt_rand()`创建了一个跟踪码，该跟踪码可用于通过支付提供商系统跟踪支付。
