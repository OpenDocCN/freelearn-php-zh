- en: Creating a Simple Theme with WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the WordPress Themes Project book! In this book, we will build 10
    WordPress themes from scratch. We will look at all of the fundamental knowledge
    that is needed to build great themes.
  prefs: []
  type: TYPE_NORMAL
- en: In this first chapter, we will create a very simple project. We will not really
    focus on creating an awesome design; the chapter is more about explaining the
    files that we need to create for our theme, the syntax, the dynamic snippets,
    and related topics.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and setting up WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project will be a little different from the rest because it's going to
    be sort of an introductory project. We will see how to install and set up WordPress,
    so that you can have a fresh installation to work with. We will create a theme,
    but we'll be focusing more on the code and the overall look and style. We'll create
    files and folders, add PHP code, and related things. First, I want to get you
    familiarized with PHP code, and then we can add some simple style.
  prefs: []
  type: TYPE_NORMAL
- en: With respect to an environment, there are a lot of different ways you can run
    WordPress. You may have your own server set up; if you don't, you can use something
    like AMPPS, which is what I'll be using. It gives you an Apache server, PHP, and
    MySQL all on your local machine. You could also use XAMPP, which is very similar,
    or WAMP; there's also MAMP for Mac. There are lot of different choices, but if
    you want to use AMPPS, you can go to [https://ampps.com/](https://ampps.com/)
    and download it. It's available for Windows, Mac, and Linux, and it is pretty
    easy to get set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how to install WordPress. Most of you probably already know
    how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the link [https://wordpress.org/download/](https://wordpress.org/download/)
    and click on the Download WordPress button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9cba11f-138b-40b2-93f5-d041e21fc302.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the package and go to your server root folder, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b59ebf81-858b-4b25-be7f-6ddd305a9576.png)'
  prefs: []
  type: TYPE_IMG
- en: If you're using AMPPS, the package should be in your `C:\` drive or in your
    route drive. In the `Ampps` folder, you'll find a `www` folder; this is the hosting
    root, as shown in the preceding image. In most cases, the default folder will
    be `Program Files` in the `C:\` drive.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `wpthemes`; this is where we will install WordPress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `Downloads` folder and open the WordPress package. Next, extract all
    the files into the project folder, `wpthemes`. Before we proceed, we need a database,
    a MySQL database, and if you installed AMPPS or if you're using XAMPP or something
    similar, then you most likely have phpMyAdmin, as shown as follows; this is what
    we'll be using.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to `http://localhost/phpmyadmin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9424ac66-4bd0-4ad8-9163-7eff871a6e82.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, go to the Databases tab to create a new database called `wpthemes` and
    click on Create. We will see an empty database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll go back to the files we created or brought over from the WordPress package.
    You will see the wp-config-sample.php file. We'll rename this to just `wp-config`,
    and get rid of the `-sample`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `wp-config` file using Sublime Text as the editor. You can use whichever
    editor you feel comfortable with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in this editor, we will change or add some information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will add `DB_NAME`, as shown here, which in this case is `wpthemes`, then
    `DB_USER`, which in this case is `root`, and then `DB_PASSWORD`â€”you need to enter
    whatever the password is for your database. The rest can stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go ahead and save the entered information, and then we should be able
    to go to `localhost/wpthemes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de9f8930-e0ca-463f-a423-ce9a13bc041d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now go ahead and run the installation. As shown in the following screenshot,
    we will enter Site Title as `WordpressDEV` and Username as `admin`. Next, you
    need to enter the password; I''m using a very weak password here. After you enter
    the email address, click on Install WordPress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae0b3009-c916-4c22-8522-1d3fa21e920d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that WordPress has been installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32223c39-9589-4411-8c58-2dfbdbe143c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on Log In, and this will take us to the admin login. Go ahead and
    put your username and password in, and it''ll take you to your backend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/15de4176-41ed-4aaf-bfc1-57108a9b47d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can click on Visit Site, as shown in the preceding image. Open this
    in a new tab, and you''ll see that we have a brand new WordPress site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be1ab351-5ed9-4a1a-99c4-09af801622aa.png)'
  prefs: []
  type: TYPE_IMG
- en: This is what we'll be working with.
  prefs: []
  type: TYPE_NORMAL
- en: I'm sure a lot of you have experience with WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `localhost/wpthemes/wp-admin/` WordPress page, we have our Posts area,
    where we can create and manage posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2891ef4d-db3b-4796-bcb1-70336319f438.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can have Categories, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e314d092-2c92-490e-acff-9547e3f6809b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see Pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf72a7cd-db33-4b5d-af2d-39c0f104e087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Website pages such as About Us, or Services, would go on Pages. If we go to
    Appearance, and click on Themes, it will show us the installed themes, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a872f956-756a-410f-a406-9339bf067e5e.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, we have Twenty Seventeen, Twenty Fifteen, and Twenty Sixteen, but
    we will be creating a new theme in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and enabling themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll see how to create our theme files and enable a theme.
    We''ll use Sublime Text and add the project folder, so that we can access the
    files easily:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to `C:\Ampps\www\wpthemes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The folder in which you want to create your theme is going to be `themes`,
    which is within the `wp-content` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3d8e69f-e1df-4ee7-805a-c2907429a357.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see here that we have the three themes that come with WordPress already
    installed, namely `twentyfifteen`, `twentyseventeen`, and `twentysixteen`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a new folder and call it `simple`. This is going to be the name
    of our theme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4fde87e4-2103-44ca-9c9f-4538b3795a86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two files that you absolutely need in order to enable your theme:
    one will be `style.css`, and the other will be `index.php`. Now, the reason we
    need `style.css` is because that''s where all of our declarations, such as theme
    name and the descriptions, go.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll open up a comment block and enter the fields, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can refer to the documentation at [https://codex.wordpress.org/Theme_Development](https://codex.wordpress.org/Theme_Development),
    which shows all the different fields that you can use. We'll not use all of them
    as they're not required. `Theme Name` is all that's required, but it's good to
    have some other information as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbfb9b7d-9f96-4a5f-a9a9-daceea28fc3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will enter the `Theme Name` as `Simple`. We also need to have an `Author`;
    you can put your own name there if you''d like. We''ll also have `Author URI`.
    If you are creating themes for clients, you''d probably want to put your company''s
    website there. We can have a `Description`. We''ll enter `Very Simple Wordpress
    Theme`, and then enter `Version: 1.0`. Let''s save this. Now, just having this
    information will allow WordPress to see your theme.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s go back into our `localhost/wpthemes/wp-admin/themes.php` backend,
    and go to Appearance and then Themes; you can see the Simple theme, and we can
    actually activate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6767a557-05b8-4493-9865-d8604cc633ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in order for a screenshot to show in the Simple theme, we need to put
    an image in the root of the theme folder and call it `screenshot.png`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef7d13d1-5b20-4974-a437-4e4038d5dc63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a sample screenshot using Photoshop, which just says SimpleTheme,
    and place that in our `theme` folder, as shown in the preceding screenshot. Go
    to the server root, `www\wpthemes\wp-content\themes`, and then `simple`. We''ll
    just paste that screenshot in there. Now if we go back to the backend and reload,
    you can see that we have a screenshot, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab65a2aa-f54e-46ce-8434-9cd66cae70ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, it's not really a screenshot but it's an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we go ahead and activate our theme for this, and go to our frontend
    and reloadâ€”we get absolutely nothing because we haven''t added any code yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78fccd00-c55f-4f9e-aa62-ac0bc1cf6abf.png)'
  prefs: []
  type: TYPE_IMG
- en: Our theme just contains nothing, it's completely blank.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s open the `index.php` file and enter `TEST`, then save and reload;
    we can see that we get `TEST` on our frontend too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e893e2b-086d-49b7-b968-f2cf1f5d38f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, it's reading our `index.php` file by default.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTML structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create our HTML structure. We will put in some core HTML tags, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have `DOCTYPE`, an `html`, `head`, `body`, and `title` tags.
    Now, if you consider starting at the top, we have our `<html>` tags; sometimes,
    you want to include a language here, and WordPress has a function that we can
    actually include in this file to make it dynamic. We can add `php language_attributes`,
    which is a function that will determine the language we want the theme to display.
    You probably want to make your title dynamic, or you want to add your site name;
    to do that, we can say `php` and use a function called `bloginfo`, as shown in
    the preceding code block. This is really useful because it has a bunch of things
    that you can get, such as the site name, the description, the character set, URLs,
    and the list goes on. You can actually look at the documentation to see exactly
    what it includes. However, what we'll use is `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you save this, you can go back and reload the page. You can see that the
    title says WordpressDEV, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f851d2b-91ea-4f06-b91b-9e6b7fc89d48.png)'
  prefs: []
  type: TYPE_IMG
- en: If you remember, this is what we named the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to our `head` tag and continue. We''ll need a character set,
    so we''ll enter `meta charset`. Then, we can use `bloginfo` here as well, and
    just pass in `charset`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save this, and take a look at our source code. Using *Ctrl* + *U*, you
    can look at both the language attributes; it says that we''re using English US
    and the character set is UTF-8, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9792478d-f9f5-41ff-8c0b-0149a9e89d0f.png)'
  prefs: []
  type: TYPE_IMG
- en: These things can now be controlled from within WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the style sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we will do is include our style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `style.css` file and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and reload; we''ll not get a black background as the style sheet
    is not being read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9dff0604-b202-4dee-a82a-388a606b6fe0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order for that style sheet to be seen, we''ll enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will get the style sheet from the correct location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this code and reload. We can now see a black background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0dc2bb58-567b-4108-b0ff-cec4f1f88ecb.png)'
  prefs: []
  type: TYPE_IMG
- en: So whatever we put in our style sheet will now be registered.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a function in the head tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will next see how to enter a function called `wp_head()` in the `<head>`
    tag. This puts any additional information that is needed into the `head` tag.
    For example, when you install a plugin and, let''s say, it needs to include a
    style sheet, or it needs to do something in the head, to do this we need to enter
    the following code. So when you create plugins, you can have stuff pop out right
    in the head:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following source code, we have a bunch of other stuff now, and this
    is all coming from that `wp_head()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0775d382-2c1e-4215-827d-d2529c813ed0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I go ahead and take the `wp_head()` function out, and then go back and reload,
    it just gives us what we have in the `index.php` file. So we''re going to need
    the `wp_head()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c4d39d4-331f-4f82-9005-55a2d00bc9c3.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we'll start to build out the body. We will see how to grab
    posts, create menus, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Building the HTML body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now see how to add basic HTML tags in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create a `<header>` tag, which is an HTML5 tag. We will enter an `<h1>`
    tag, and in this tag we will add the website name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can actually take the dynamic code from the `<title>` tag, which we saw
    earlier, and put that in `<h1>` as well. Now if we save that and look at our frontend,
    we get WordpressDEV:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7cc898a9-faeb-4896-835f-eaec2e6cb0cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we wanted to change the frontend output, we could go to Settings, and
    change Site Title to `My Website`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ac3d240-cf17-4a63-81b9-c43789833751.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the settings. Now, we can see the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In addition to the name, we can also include a Tagline. To do this, we will
    enter the `<small>` tags, but instead of using `name`, we will use `description`,
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you reload it, you can see that we get Just another WordPress site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4abc0b1-98bd-4788-b866-ffdbe4f9c686.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can make the changes in the settings. We''ll enter `The Best Website Ever`
    in the Tagline textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a35d81a0-8d32-4223-b831-8da2cfca09b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the changes and put `description` in the `span` tag, as shown in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When we reload, we get this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42c40148-05c4-4c90-8831-64fcdf80b38b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s add more HTML tags, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we go under the `<header>` tag and enter the `div` class as `main`. We''ll
    fetch our blog posts; WordPress uses something called the loop, or the main loop,
    which will fetch every blog post that you have, regardless of the category or
    whatever it may be. Without specifying any restrictions, it''s going to get every
    post. So, the first thing we''ll do is check to see whether there are any posts.
    We''ll use an `if` statement for that, and then use the shorthand. We will use
    the syntax that will help us go quickly in and out of `php`. We''ll then use `if(have_posts)`
    to see whether there are any posts in WordPress. We''ll also put an `else` statement
    here, so that if there are no posts, then we just want to let the user know that.
    Now, instead of just spitting out text, we''ll use a function. We''ll say echo
    `wpautop`; what this does is that it takes double line breaks and automatically
    makes them into paragraphs. It''s a good function to use when you just want to
    output text. We''ll say, `Sorry, No posts were found`. Then, inside `if(have_posts)`,
    we''ll use `post found`. Let''s go and reload, and you can see that we get post
    found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eea6a0fa-7094-4325-8450-509aabf6b82d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go back to our backend and go to Posts; you can see that we have Hello
    world. We will move that to Trash, and if we now go back and reload, we get Sorry,
    No posts were found, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/884a1265-bbed-433d-a6aa-37e515e6d086.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go to Trash and restore it. We will see that the post can be seen
    again. We will now see how to display these posts. We''ll delete `post found`
    within the `if` statement and we''ll use a while loop for this with a `php` tag.
    We''ll use `while(have_posts)`. Now, with WordPress, we have to use this thing
    called `the_post()`, so we''ll use `the_post()`, which is a little weird as far
    as a syntax is concerned. I''ve never really seen this anywhere else apart from
    WordPress, but just know that you need to have this as well. Then, we''ll use
    `endwhile`; again, this is just using shorthand syntax, so you could just use
    the curly braces. But what we''ll do here is when it finds a post, we want to
    get the title. So, in an `<h3>` tag, we''ll use `<?php the_title(); ?>`, which
    is a function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go and reload, and now you can see that it''s getting the Hello world!
    title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ebeeb26-1ca2-4184-924b-de9b61b51c60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go ahead and create a post as an example. We will name it `My Blog
    Post`, and let''s just get some sample text. I have taken some text from the [www.lipsum.com](http://www.lipsum.com)
    website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47d8ad69-35c1-45db-910b-4e5dc128ec36.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add a couple of paragraphs and publish it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s reload; you can see that it gives us My Blog Post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9298e74c-6c8f-4ac9-b791-66e67b094790.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, to get the actual content, we''ll go right to the `<h3>` tag and enter
    `<?php the_content(); ?>`. As you can see, WordPress makes it really easy in terms
    of the names of the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, this gets us the content from each blog post and displays it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e3d625f-c0b1-4ca9-867a-f6697d1e6951.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are different things that we can display with the posts: the date, author,
    categories, and so on. Let''s go right under the title and add the following code
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we added `Created By` along with the author's name.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we reload, we can see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02821f99-7456-49dc-84d2-841b93ab4b48.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, admin is the username of the person who created the post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you want the date, you can add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When we reload, we get Created By admin on December 12, 2017; basically, it
    gives us the date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd886fd3-8e2d-484f-8bd9-7ebc25b0e325.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now see how to format the date. You can format the date in a lot of
    different ways; if you know PHP and you've worked with the date function, you
    know that there's a lot of different formatting options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will take a look at one such example from `php.net/manual/en/function.date.php`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what that gives us. You can see the format, shown in the following
    screenshot, with the day, date, time, and PM or AM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1df3d68d-f74c-4cca-8df0-8292bc6bf39b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One thing that I like to do is to use the time instead of the date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you just the time; it doesn''t give you the date, but you can
    actually format it to give you the date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we take a look at this, it gives us the date and the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2acbeeec-d58f-4c12-8f2c-436ceec424ad.png)'
  prefs: []
  type: TYPE_IMG
- en: So it's all up to you, it all depends on your preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s do a little bit of styling. We will see how to add a `<footer>`
    tag at the bottom, and a paragraph to make it dynamic. We can put a copyright
    symbol, and then for the year, instead of just typing in the year, we can use
    `the_date()`, and then just pass in as a parameter, `Y`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So we get Â© 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/273fae4a-8879-49e3-a52c-d353f6a5a97a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, if we want the site name, we can just say `bloginfo` and pass in `name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: So now we have a dynamic footer.
  prefs: []
  type: TYPE_NORMAL
- en: Base styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's add some base styling. To do this, we will work with the style sheet.
    Now, the idea of this whole project actually is not to create some great-looking
    theme, I just want you to get familiar with the PHP code and how themes are set
    up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the code and reload. You will get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34a26c90-74f2-4597-bd8e-8b7b2b64ac86.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the empty space at the top; this is because we're logged in as an
    admin, so even on the frontend it knows that, and it's trying to display the admin
    bar. Now, it's not displaying the admin bar because we don't have the special
    function to display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `index.php`, and before the ending body, we''ll add `<?php wp_footer();
    ?>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and reload. You can see that we have the admin bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4abe7ce5-4169-408b-b3f0-954f63868aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will add a little padding to `h1` at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also add a `container` div to the code, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We have set `width` to `1020 px`, `margin` to `0 auto`, and `overflow` to `auto`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now go to `index.php`, to the `<header>` tag, and enter this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add the same code to `main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, for `footer`, it would be the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When you reload, you can see that everything's moved to the middle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add a little bit of styling to `footer`. Just copy what we have in the
    header. We''ll also align the text to the center:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add `margin` to the `main` div:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s reload and this is what we get:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/081348c6-53e4-409c-a46d-b9cdfd9f26bd.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that we have our header and main area, where we're looping through
    the posts and displaying them, and we have our footer area.
  prefs: []
  type: TYPE_NORMAL
- en: Now, common practice in WordPress is to break the header and footer into their
    own files and then include them in the index.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will now create a new file, call it `header.php`, and then create
    a new file called `footer.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go to the `index.php` file and cut the portion of code, as shown in
    the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll replace the highlighted portion with `php get_header`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Go into `header.php` and paste the previous code which was cut, and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now do the same thing with `footer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We will cut the code shown in the preceding code block and replace it with
    `php get_footer()`, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Paste the `footer` code that was cut in *step 18* and place that in the `footer`
    file. The output will look the exact same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will see how just a click on these posts will take us to the actual
    individual post page.
  prefs: []
  type: TYPE_NORMAL
- en: Single posts and thumbnails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we''ll take a look at the single post page. Right now, we have this roll
    of posts from our site, but that''s it; we can''t click on it and go to the individual
    post, where we would have our comments and things like that. So let''s go ahead
    and work on that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the `index.php` file and make the title clickable. We''ll add
    a link to the title. To do this, let''s go to the `<h3>` tag, as shown in the
    following code; add the `<a>` tag, and wrap that around the `<title>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save it and reload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/72e47068-3fb7-4504-8b92-1ad1e558d740.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you'll see we have a link on the titles. For example, when we click on My
    Blog Post, it takes us to the post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a little bit of style to the links. I don''t like the color of the
    links; I also want to make the description bold so that it stands out. It is good
    to wrap each post in its own div. Where we have `while`, we''ll put it in `<article>`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in our style sheet, let''s add the color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The color will be just the same as the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will just add a border at the bottom using this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'When you reload you can see the border at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52e3fae7-a141-4a01-b2f7-a8f594eefed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have the title. The title has a link, but we''ll usually see some kind
    of Read More button as well, so let''s go ahead and add that. All we have to do
    is just add the code, shown in the following code block. We''ll say `Read More`
    and give it the class of a button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we should have a link for `Read More`. To do that, we will add the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now go to the single page, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e90f9596-4d91-4236-8939-a2d9ae9ebf03.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the single page, we don't want My Blog Post to be a link; that's kind
    of silly, so we want to change that. Also, there's going to be other things we
    want. We'll want a comment form as well, so we need to have a special page for
    single posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So we'll create a new file in our theme, and we'll just call it `single.php`,
    and let's just say `TEST`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we go back to the single page and reload, we get TEST. If we go back to our
    main website, which is our main post roll, it is the same as before, but if we
    go to a single page we get TEST only, because it's automatically looking at the
    `single.php` file. So what we can do is copy the code from `index.php`, and we
    can use this code as a starting point. If we paste that in `single.php` and save,
    it'll show us the same result. Now we can change whatever we want in the `single.php`
    file, and it will only take effect on the single page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can get rid of the link and `Read More` in the code; we''re obviously not
    going to want that. So now we have a single page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fdfd50c1-e9cc-4267-b20b-306d71553830.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a little bit of style to our single page. To do that, we will make
    `meta`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, I have also added some padding at the bottom of the post.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not trying to go nuts with the styling, because like I said, I just want
    you to kind of learn the code rather than learn how to create a great design;
    we'll be getting into that later.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an image to the post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if we go to the form shown here to add a post, and you look on the right-hand
    side, you don''t see a Featured Image box, which you may have seen in other WordPress
    themes or on other WordPress websites. The reason for that is we didn''t include
    that functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e07c3f7-15ea-46e1-afb0-0d8c2b04391a.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's go into our `themes` folder, and we'll create a file and save it as `functions.php`.
    Now, this is where we can put a custom function; this is where we can hook into
    certain parts of the code, register widgets, and do all thatâ€”basically, anything
    dynamic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we''ll create a setup function. To do this, we will add the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have added a comment, `Featured Image Support`, followed by a function
    called `add_theme_support`. Now this function isn't going to run if we leave it
    just like this. So, we have used `add_action` and certain hooks that we can hook
    into and run this function. The one that we want is called `after_setup_theme`.
    Then, the second parameter will be the name of the function. We will save it and
    then run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back and reload this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c09afd9-f090-4394-ba36-eca66e634034.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you''ll see down at the bottom that we have the Featured Image box. If
    we click on that, we can go ahead and upload files, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f96944d-fb56-443a-b1c5-9b137e5f38cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, I''ll choose an image and save it so that you can see it''s inserted,
    and we can then click on Update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/393e1455-291b-4d5d-ab0e-a1652fcd512a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if we go to the frontend and reload, we'll not see it yet, because we didn't
    add it to our `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the `index.php` file. You don''t have to show the image in the
    index. You can just show it in single page if you want, but usually you want it
    to be shown on both pages. So, in `index.php`, let''s just add the image right
    below `meta`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: At first, it's not going to look too great, but we'll fix that later on. In
    the preceding code, we have first checked to see if there's an image using an
    `if` statement. If there's a thumbnail, then we'll create a `<div>` tag. We'll
    give it a class of `post-thumbnail` and then add `php the_post_thumbnail`, as
    shown in the preceding code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s save it, go back, and reload. You will get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44dc5b16-5d09-42b8-a570-1fd8d2c74da6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, it looks a little out of the way because it's not reaching 100% across
    the page, but we're actually going to put a sidebar in a little bit, when we get
    to the widgets, so that it looks a lot better. However, I am going to add a width
    of `100%` in the CSS, where we have this post, `this class="post-thumbnail"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go into our style sheet and add the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: For the image, we want the width to be 100% and we can keep `height:auto`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we reload, we can see that it reaches across the whole page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/15f68525-bb51-4a3f-b87b-723d2b9db2f6.png)'
  prefs: []
  type: TYPE_IMG
- en: I know that's really big, but like I said, we'll get a sidebar in there, and
    it'll shrink that a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we also want the image on the single post page. So we''ll copy the code
    from `index.php` and paste it in the `single.php` file, right under `meta`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now we'll get the same image on the single page as well.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, in the posts on the index page, it shows the whole content,
    but we want just a piece of the content to show.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, let''s go to the `index.php` file, and instead of saying `the_content`,
    we can actually say `the_excerpt`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: What this will do is, it will cut the content to around 55 words. You can actually
    customize that and make it as long or as short as you want, and that's actually
    really easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `functions.php` file and create a custom function, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We'll just say `set_excerpt_length`, and all we need to do here is just return
    a number, so let's say we wanted it to be `25`. Then, what we can do is, instead
    of `add_action`, we'll say `add_filter`, because `add_action` is usually used
    to add something or create something; `add_filter` is usually used to change something.
    The filter we want to hook into here is called `excerpt_length`. Then, we just
    want to put in the name of our function, which is `set_excerpt_length`.
  prefs: []
  type: TYPE_NORMAL
- en: If we go back and reload, we can see that it's only 25 words long. If you want
    it a little longer, let's say return 60\. I just wanted to show you that it's
    possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So we have our index page set up, and we have our single post page set up, apart
    from the comments, which we'll do a little later. However, in the next section,
    we will see how we can create a menu and start dealing with pages as well as posts.
  prefs: []
  type: TYPE_NORMAL
- en: Pages and menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll start looking at pages and menus. In addition to creating
    posts in WordPress, we can also create pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to the backend and click on Pages, you''ll see we have a Sample Page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97433255-8d05-4833-84f3-6bdb40a67560.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a new one, and we''ll just call it `About page`. Then we''ll
    just grab some content, say two paragraphs. Let''s just click on Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/821258d4-2c25-428f-b0c3-fdce3904dc04.png)'
  prefs: []
  type: TYPE_IMG
- en: So we have an `About` page, and we have a `Sample Page`. Let's create one more
    and call it `Services`. Now we need some kind of navigation. Let's go ahead and
    do that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to use the menu system, we need to edit the `functions.php` file,
    because right now, if we go to Appearance, there''s no Menus option. So let''s
    open up `functions.php` and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In this `simple_theme_setup` function that we created, we will add `register_nav_menus`.
    Then we will pass in an array, and to do that, we will set the primary and then
    the readable version. We'll use the double underscore function; we don't need
    quotes here, though. It is a localization function, and it has to do with using
    multiple languages in your theme. So we'll enter `Primary Menu` and then save
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go to the backend, reload, and go to Appearance, you''ll see we
    have this Menus option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8cad106-6304-4aa7-97d6-fd6fbed7404a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on Create Menu, now you can see that by default it has all the
    pages on the site and you can remove some if you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91931243-59cd-4fc7-b0e1-4132c605298f.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to add pages, you can easily do it; click on Add to Menu. We'll
    just keep what we have here, and then we need to make sure to choose Primary Menu,
    where it says Theme locations. We'll save this.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we go to the frontend and reload, we'll not see anything yet because
    we haven't included it in our header file; this is where we want to add the menu,
    because we want it on every page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go right underneath the `<header>` tag and create a `<nav>` tag, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We'll add a class of `main-nav`, then we'll wrap it in a container. Then, all
    we have to do is open up some `php` tags and create a variable called `args`.
    This is just going to hold an array of arguments; we only need one for now, and
    that'll be `theme_location`. We're basically specifying what menu we want to put
    here, and that'll be `primary`, which is the only one we have. Then, what we can
    do is, we can call a function called `wp_nav_menu` and just pass in that `args`
    variable. Let's save this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the frontend, reload, and there''s our menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c50e098-3659-46ea-975c-1c945a99aef9.png)'
  prefs: []
  type: TYPE_IMG
- en: The menu has all the pages that we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to remove one, go to Menus, select `Sample Page` we want to remove,
    save, reload, and now that''s gone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4e6c8e0-a51a-4e9a-91ca-b7d86fb62345.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just to style this a little bit, let''s go to `style.css` and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add `main-nav` and give it a background; we''ll add a black background
    and white color for text. To style the list items, we will add `main-nav li`;
    first we want to remove the bullet, so we''ll say `list-style: none`, and then
    we want to float these menu to the left. We will also add `padding-right:15px`,
    and then we will add the links; make sure that they are white, and remove the
    text decoration as well. Next we will add `ul`, and we will remove the default
    margin and padding. Then we''ll add some padding to `main-nav`, say `5px`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we reload, we have a little navigation menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/645f6464-c241-490a-8363-794bcd0917cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on About, it''ll take us to the About page, and it''s the same
    with Services. Now you will notice that when we go to About, it has been formatted
    the exact same way as the `index.php` page, as if it was a postâ€”but it''s not,
    it''s a page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0bb4c9d-156e-4c84-9df5-9945f9dc25bb.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll not need the metadata or the Read More link. So what we need to do is
    add another page to our theme.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file and save it as `page.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if I go back and reload, it's blank because it's looking at the empty file.
    So what we can do is copy the code that's in `index.php` and use it in `page.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are few changes that we will do in the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing we''ll do is remove the link from the title, because we don''t
    want to go anywhere else. Also, we can get rid of `Read More` completely. It also
    has an excerpt, and we don''t want that; we want the whole thing, so we''ll change
    that to `the_content()`. Then, in `meta`, we can get rid of the whole div and
    save it; let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3da40774-cd4b-4442-a09c-61da07886813.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it looks more like a regular web page. We'll do the same thing with Services.
    This is how you can create pages and how you can target the markup for that page.
    You can also create custom pages and custom templates; you can kind of have different
    layouts for different pages, but we'll get into that in the next project. There's
    a lot more to building a theme. There's a lot more you can do that we're not going
    to get into in this project, but I just want to cover the basics in this project.
    We now have pages and a menu. In the next section, we'll get into widget locations,
    because now we want to be able to have a sidebar with widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Widget locations and comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now I'll show you how to create a widget location in the theme. We'll have one
    widget location, and that'll be in the sidebar. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Working with widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at `index.php`, where we have this `<div>` tag with the
    class of `main`. What we want to do is go right between `main` and the ending
    `</div>` tag. We''ll create a `<div>` tag with the class of `sidebar`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We have also added `TEST` in the next line, which shows up as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/576c6fee-da07-45b7-8e7b-8ea7ed28b20b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we want to float the main `<div>` and set a width, and then have the sidebar
    float to the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the style sheet, where we have `main` with `margin:15px`, both
    at the top and bottom. Let''s go ahead and float this to the left, and let''s
    set a width of `68%`, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see what that gives us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ae820ed-c9fc-4af9-90b4-adf23d73ed57.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason that this looks really weird is because we didn't clear the float.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what we''ll do is go under the `sidebar` div and enter `<div class="clr">`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll go to our CSS, add a class called `clr`, and we''ll just say `clear:both;`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s add the `sidebar` class; that''s going to float to the right, and
    we''ll set a width of `28%`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll want to put a container around both of the filesâ€”`index.php` and
    `style.css`, because right now, `main` has a container inside of it, but what
    we want is to remove that and put it above `main`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We will end it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e0305be-5010-4d23-9d35-2b2d2e01e271.png)'
  prefs: []
  type: TYPE_IMG
- en: So now we have the main area and a sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will see how to add widgets, and to do that, we''ll go to `functions.php`.
    Here, we can actually use widgets and define what location we want the widgets
    to be allowed in. We''ll go down to the very bottom of the file and create a function,
    as shown in the following code block. We''ll call it `init_widgets`, and that''ll
    take in `id`, and we''ll call it `register_sidebar`. Now we will create a sidebar
    widget, but just know that no matter where you put it, `register_sidebar` is the
    function that we''ll use, even if it''s not a sidebarâ€”if it''s down below, or
    in the header, or wherever it may be, this is what''s used to actually register
    widget locations. Now, that''s going to take in an array, and it''s going to take
    a `name`; let''s set that to `Sidebar`, and then the ID, which is usually the
    same, just lowercase and no spaces. You can use hyphens if there''s more than
    one word. Then, we can also use `before_widget`. We can also use `<div class="side-widget">`,
    and then we can add `after_widget`; that''s going to be the ending `</div>` tag.
    Then, we can also add `before_title` and `after_title` for the widget, as shown
    in the following code block. We want an `<h3>` tag before the title. Now, this
    code isn''t going to run yet. We need to perform `add_action`, and the hook we
    want is called `widgets_init`; we want to put in our function name, which is `init_widgets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll save the code. If we go back and reload, we get this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4299102-56e6-487b-a5f4-19615cfba565.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a Widgets item at the side and a Sidebar location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s drag the Categories widget and bring that over to the Sidebar. We will
    also bring Recent Posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffaa78ac-4201-4372-aa3c-7914bab9bc0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and go to the frontend; if we reload now, we'll not see anything because
    we need to add it to our template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go down to where we have the sidebar in the `index.php` file, and we''ll
    first check for the widget using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: We'll check whether it'll be a function called `is_active_sidebar()`, and like
    I said before, even if it's not a sidebar, this is still going to work. We will
    also add our location, which happens to be sidebar. We will also add a `dynamic_sidebar()`
    function, and then the ID of the widget again is sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save it, reload, and take a look at it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f712735-d9e4-4894-b883-cd7882813b67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get our two widgets: Categories and Recent Posts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, remember that we put the `side-widget` class in the `function.php` file
    so that we can style widgets using the `style.css` file, as shown in the following
    code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We have added `side-widget` with a border and padding of `10px 10px`. We have
    added `margin-bottom`. Now if we reload, you can see that they have a border.
    Therefore, we will add `margin-top` too. We'll say `margin-top:20px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this look a little better, we will use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have taken away `text-decoration`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you save and reload, you get this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c54490b-5f47-42c0-8e00-3fabfa892a0c.png)'
  prefs: []
  type: TYPE_IMG
- en: So this looks good.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the pages will be messed up now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1c669f9-a08d-4440-833a-9394dc80b865.png)'
  prefs: []
  type: TYPE_IMG
- en: This is because in `page.php`, we still have the `container` class inside of
    `main`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we want to do is just copy what we did in `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: We need to add the sidebar after main ends, and then we actually want to take
    the container out and put that above `main`. We'll need to make sure to take the
    ending `</div>` tag and put that on the outside down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and check that out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/680c9f2f-698d-4410-bcb2-0ccc74afea0d.png)'
  prefs: []
  type: TYPE_IMG
- en: So this looks good.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will repeat the same thing with `Single.php`, and we will get the following
    result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a13745bd-d5a5-437c-8818-1439a36e898d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So all the different formats and all the different pages are all set; they
    have the sidebar implemented. And, of course, if you didn''t want the sidebar
    on one of those, you don''t have to have it. If we want to kind of minimize the
    code a little bit, we can put the following code inside the `footer.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We can cut and save, and then add that code in `footer.php` at the top, as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Save, and then get rid of the following code from `page.php` and `index.php`,
    because it''s now in `footer.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Our frontend should look the exact same way. So that's good, that's widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the comment functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the one thing that is left is commentsâ€”we want the comment functionality.
    This is actually really easy; all we have to do is go to our `single.php` file
    and see where we want the comment, which is right under the end `</div>` tag,
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We can save the code and reload. Here is the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4f91505-8057-4f7f-adef-29e3aa0c4867.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now see the comment functionality. Let's add `Great Post!` and then click
    on Post Comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f55e8675-fb74-4480-96ba-82d13566b980.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that it has an avatar, the username, date, and also a reply link.
    Now you'll realize that this doesn't look like the best comments section you've
    ever seen, but that's just because it's the default design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we take a look at the markup, we can see that they separate everything so
    you can style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5418670-be66-46df-b7e8-ba7eadc483da.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we have `ol commentlist`; each `<li>` has a class of comments, and we
    have classes around the author, around `vcard`, and around the reply. You can
    style this however you like.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can actually replace this whole template by creating a `comments.php`
    file; we'll get into that later on. I don't want to do it in this chapter because
    this is just a very basic introductory theme.
  prefs: []
  type: TYPE_NORMAL
- en: Since the comments are working, we'll not go ahead and create a custom comment
    template or anything like that. I think that's pretty much it. Like I said, there's
    more we could do; we could create a separate template for archived posts.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, what I want to do real quick is to make the author's name a link,
    so that you can click on it and see all of the author's posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to `index.php` and go to where we have the author, and enter following
    highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: As shown here, we'll just add a link around that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s reload, and now admin is a link; I need to change its style because
    we can''t see it. Open `style.css`. Go to `meta` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the author in white now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/923dfa38-986a-4eea-b038-f83eab55504f.png)'
  prefs: []
  type: TYPE_IMG
- en: If I click on admin now, it shows us all the posts by admin, but if there were
    multiple usersâ€”multiple authorsâ€”this would allow us to see all the posts from
    that particular author.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll wrap this up here. You may realize that this isn't the greatest design
    you've ever seen, but the point of this project was to get you familiar with not
    just the code but also the structure of the theme and what files are included.
    As we saw, there are certain names that we need for the files such as `page` and
    `single.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you enjoyed this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we started off by installing and setting up WordPress. We moved
    on to create and enable themes. We also created an HTML structure and body, and
    applied some base styling to it. We dealt with single posts, thumbnails, pages,
    and menus. Later, we saw how we could add images and links to the post. In the
    end, we saw how to create a widget location in the theme and how to add the comments
    functionality to the widgets.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be using what you've learned in this project and applying it in the future
    projects. You'll also learn more as we go.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to build a WordPress theme.
  prefs: []
  type: TYPE_NORMAL
