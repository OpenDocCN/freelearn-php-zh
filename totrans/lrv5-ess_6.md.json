["```php\n$ php artisan changes\n\n```", "```php\n$ php artisan --version\nLaravel Framework version 5.0.16\n\n```", "```php\n$ php artisan route:list\n\n```", "```php\n$ php artisan tinker\n\n```", "```php\n> $cat = 'Garfield';\n> App\\Cat::create(['name' => $cat,'date_of_birth' => new DateTime]);\n> echo App\\Cat::whereName($cat)->get();\n[{\"id\":\"4\",\"name\":\"Garfield 2\",\"date_of_birth\":â€¦}]\n> dd(Config::get('database.default'));\n\n```", "```php\n$ php artisan down\n\n```", "```php\n$ php artisan up\n\n```", "```php\n$ php artisan optimize\n\n```", "```php\n$ php artisan route:cache\n\n```", "```php\n$ php artisan make:model Cat\n\n```", "```php\n$ php artisan make:model Cat --no-migration\n\n```", "```php\n<?php namespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Cat extends Model {\n  //\n}\n```", "```php\n$ php artisan make:command --help\n\n```", "```php\n$ php artisan make:console ExportCatsCommand\n\n```", "```php\nprotected $commands = ['App\\Console\\Commands\\ExportCatsCommand',];\n```", "```php\nprotected $name = 'export:cats';\n\nprotected $description = 'Export all cats';\n```", "```php\npublic function fire()\n```", "```php\nprotected function getArguments() { /* Array of arguments */ }\nprotected function getOptions() { /* Array of options */ }\n```", "```php\n$ command --option_one=value --option_two -v=1 argument_one argument_two\n\n```", "```php\nprotected function getCatsData() {\n  $cats = App\\Cat::with('breed')->get();\n  foreach ($cats as $cat) {\n    $output[] = [\n      $cat->name,\n      $cat->date_of_birth,\n      $cat->breed->name,\n    ];\n  }\n  return $output;\n}\n```", "```php\nprotected function getArguments() {\n  return [\n    ['file', InputArgument::OPTIONAL, 'The output file', null],\n  ];\n}\n```", "```php\nreturn [\n  ['arg_one', InputArgument::OPTIONAL, 'Argument 1', null],\n  ['arg_two', InputArgument::OPTIONAL, 'Argument 2', null],\n];\n\n```", "```php\nprotected function getOptions() {\n  return [\n    ['headers', 'h', InputOption::VALUE_NONE, 'Display headers?',\n    null],\n  ];\n}\n\n```", "```php\npublic function fire() {\n  $output_path = $this->argument('file');\n\n  $headers = ['Name', 'Date of Birth', 'Breed'];\n  $rows = $this->getCatsData();\n\n  if ($output_path) {\n    $handle = fopen($output_path, 'w');\n      if ($this->option('headers')) {\n        fputcsv($handle, $headers);\n      }\n      foreach ($rows as $row) {\n        fputcsv($handle, $row);\n      }\n      fclose($handle);\n\n  } else {\n        $table = $this->getHelperSet()->get('table');\n        $table->setHeaders($headers)->setRows($rows);\n        $table->render($this->getOutput());\n    }\n}\n```", "```php\n$ php artisan export:cats\n$ php artisan export:cats --headers file.csv\n\n```", "```php\n$schedule->command('inspire')->hourly();\n```", "```php\n0 * * * * /path/to/artisan inspire\n```", "```php\n* * * * * php /path/to/artisan schedule:run 1>> /dev/null 2>&1\n```", "```php\n$schedule->command('foo')->everyFiveMinutes();\n$schedule->command('bar')->everyTenMinutes();\n$schedule->command('baz')->everyThirtyMinutes();\n$schedule->command('qux')->daily();\n```", "```php\n$schedule->command('foo')->dailyAt('21:00');\n```", "```php\n$schedule->command('foo')->weekly();\n$schedule->command('bar')->weeklyOn(1, '21:00');\n```", "```php\n$schedule->command('foo')->mondays();\n$schedule->command('foo')->tuesdays();\n$schedule->command('foo')->wednesdays();\n// And so on\n$schedule->command('foo')->weekdays();\n```", "```php\n$schedule->command('foo')->everyFiveMinutes() ->withoutOverlapping();\n\n```", "```php\n$schedule->command('foo')->weekly()->environments('production');\n\n```", "```php\n$schedule->command('foo')->weekly()->evenInMaintenanceMode();\n```", "```php\n$schedule->command('foo')->weekly()\n         ->emailOutputTo('someone@example.com'); \n\n```", "```php\n$schedule->command('foo')->weekly()->sendOutputTo($filepath);\n\n```", "```php\n$schedule->command('foo')->weekly()->thenPing($url);\n\n```", "```php\n$schedule->command('foo')->weekly()\n         ->sendOutputTo($filepath)\n         ->emailOutputTo('someone@example.com');\n\n```"]