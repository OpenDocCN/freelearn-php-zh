- en: Chapter 8. Creating a Simple Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Over the last few years e-commerce has evolved from just online advertisements
    to providing fully functional shopping experiences online. More and more products
    and services are being made available online everyday through the use of various
    online payment systems. The role of e-commerce applications and payment gateways
    has become crucial in this environment.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will be building a simple online store to demonstrate the
    process involved in setting up a simple shopping cart. We will be using PayPal
    Express Checkout as our payment processer during this example. Some of the key
    topics that will be covered in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a online store administration interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Zend Framework 2.0 for PayPal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to PayPal Express Checkout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of PayPal Express Checkout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things that have to be designed while setting up an online
    store is the shopping cart. The shopping cart should ideally allow the end user
    to choose and add multiple products to the cart and be able to check out from
    the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The checkout process is outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Customer visits the product listing page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer selects a product; he/she is taken to the product detail page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer then chooses to purchase the product; customer is expected to add the
    desired quantity to the cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer is redirected to the shopping cart page; here the customer may make
    any changes to the order if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer chooses the mode of payment and enters the payment information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If successful, the customer is presented with an option to update the shipping
    details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customer then confirms the order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The order is received at the retailer; the retailer then goes ahead and processes
    the order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So let''s get started and create our store front; our next step will be to
    design a table structure which will support this store. For this we create the
    following two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`store_products`: This table will store all product related information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store_orders`: This table will store all order-related information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – creating a store front
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For simplicity, we will shorten the `Checkout` process by skipping some steps.
    We have modified the process so that we can only have one product per order; we
    will also skip the updating of shipping details and the customer order confirmation
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create tables to hold the products and orders data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create entities for `StoreOrder` and `StoreProduct`, and also create necessary
    table gateway objects for data access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `StoreController` controller, which will be used as our shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`StoreController` will support the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`indexAction()`: This action will list all products in the website'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`productDetailAction()`: This will display the details of a specific product;
    this will also allow the customer to add a product to the cart'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shoppingCartAction()`: This action is used to render the shopping cart before
    leaving for the payment processing page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paypalExpressCheckoutAction()`: This action will redirect the user to the
    PayPal Express Checkout page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paymentConfirmAction()`: This action will handle the redirection from PayPal
    Express Checkout back to the shopping cart upon successful payment'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paymentCancelAction()`: This action will handle the redirection from PayPal
    Express Checkout back to the shopping cart upon failed payment'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the necessary views to display the content of the shopping cart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the necessary methods to `StoreOrder` to calculate the order total upon
    adding items to the orders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final user interface should look like the following screenshot. The product
    listing page lists all products in the website/category; in this case, the two
    test products are listed in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action – creating a store front](img/1929OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The product detail page allows users to view details of a product, and also
    add the specified quantity to the shopping cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating a store front](img/1929OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Shopping Cart** page lists all products that are added to the cart along
    with their unit price, quantity, and subtotal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating a store front](img/1929OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a shopping cart interface for our new store; we will be modifying
    this interface further in order to add support for the payment processor. But
    before we get to that stage, let's create a simple store administration interface
    to enable us to manage the store and orders.
  prefs: []
  type: TYPE_NORMAL
- en: The store administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The store administration user interface is used to check the status of orders
    once they are created and also to manage the list of products that are available
    for sale in the store. There are two key aspects for the store administration
    user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: The administrator should be able to add, remove, and manage products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The administrator should be able manage order and change statuses using this
    interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action – creating the Store Admin interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for creating the `Store Admin` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller for store administration, and name it `StoreAdminController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This controller will have the following basic actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`indexAction()`: Used for listing all products'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addProductAction()`: Used for adding a new product'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleteProductAction()`: Used for deleting an existing product'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`listOrdersAction()`: Used for listing all orders'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`viewOrderAction()`: Used for viewing a specific order'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateOrderStatusAction()`: Used for updating order status'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the necessary views, and map the actions accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open phpMyadmin and create test records in both the `store_products` and `store_orders`
    tables to test the functionality for the administration UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your favorite browser, log in to the application, and open the **eStore
    Admin** interface. The interface should look like the following one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Manage Products** page lets you add, remove, and edit products from the
    administration interface:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The orders listing page lists all orders placed in the store and allows you
    to view orders and modify their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A screenshot of the **Order Information** page listing the order information
    and providing options to change their status is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – creating the Store Admin interface](img/1929OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The store administration UI is now ready, and our next step is to set up PayPal
    Express checkout and to integrate it with our store, which will enable our user
    to make payments using PayPal. Before we move on to the next section, the following
    section gives you a simple task to try out.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know how to integrate search into a Zend Framework 2.0 application,
    try to add free text search functionality for the **Manage Products** section
    of our store application.
  prefs: []
  type: TYPE_NORMAL
- en: Payments with PayPal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PayPal is the most commonly used payment processor across the world; one of
    the key contributors to PayPal''s success is its easy-to-use API and exhaustive
    documentation that supports this payment gateway. For any new merchant, PayPal
    offers a wide range of options for setting up their payment processor, the most
    important being the types of integrations that are offered. PayPal offers various
    products under Payment Processing; some of them include:'
  prefs: []
  type: TYPE_NORMAL
- en: Express Checkout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PayPal Payments Standards (Website Payments Standards)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PayPal Payments Pro (Website Payments Pro)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be working with Express Checkout in this chapter, since it is the most
    basic implementation method of PayPal.
  prefs: []
  type: TYPE_NORMAL
- en: PayPal and Zend Framework 2.0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing this book, there were no native packages that were offered
    by Zend Framework which supported PayPal integration. There are always third-party
    options that support this integration. In this example, we have made use of one
    such third party package called `SpeckPaypal`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting up PayPal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for setting up PayPal:'
  prefs: []
  type: TYPE_NORMAL
- en: Open [https://packagist.org/](https://packagist.org/), search for `speckpaypal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the repository details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the application''s Composer configuration file to include the `speckpaypal`
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the project dependencies using the Composer update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we will need API credentials for accessing PayPal Express Checkout. This
    can be accessed by logging into [https://developer.paypal.com](https://developer.paypal.com)
    with your PayPal credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Sandbox Accounts** from **Applications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the appropriate merchant account and select **API Credentials** in **Profile**.![Time
    for action – setting up PayPal](img/1929OS_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a note of the API credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now create a new configuration in the `config` file (`CommunicationApp/module/Users/config/module.config.php`)
    in the module''s configuration file and name the array index `speck-paypal-api`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Different PayPal services have different end points. For Express Checkout in
    Sandbox this is `https://api-3t.sandbox.paypal.com/nvp`; if you are switching
    live/production environment, this needs to be changed to `https://api-3t.paypal.com/nvp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we have configured PayPal and SpeckPaypal in our application, our next step
    is to test receiving payments using PayPal Express Checkout.
  prefs: []
  type: TYPE_NORMAL
- en: PayPal Express Checkout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PayPal Express Checkout allows sellers to receive credit card / PayPal payments
    on their websites by redirecting them to PayPal Express Checkout for secure web
    payment and returning them back to the merchant's website once the transaction
    is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Customer on the **Shopping Cart** page chooses to pay by **PayPal Express Checkout**;
    the merchant calls the `SetExpressCheckout` API call and gets the payment token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Payment token, the customer is redirected to the PayPal Express Checkout
    login page; here the customer can enter his/her PayPal login information or get
    a new PayPal account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, the customer is presented with a **Review** option to review
    the payment information before proceeding to continue the checkout with the merchant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the customer is redirected back to the merchant page; the merchant then
    calls the `GetExpressCheckoutDetails` API call and gets the customer information.
    The customer reviews the order and confirms the order. The merchant then completes
    the payment request using the `DoExpressCheckoutPayment` API call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The customer is shown the transaction results along with the order summary.![PayPal
    Express Checkout](img/1929OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PayPal Express Checkout—overview
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about PayPal Express Checkout**'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about PayPal Express Checkout at the PayPal website [https://www.paypal.com/webapps/mpp/express-checkout](https://www.paypal.com/webapps/mpp/express-checkout).
  prefs: []
  type: TYPE_NORMAL
- en: 'Developer documentation on PayPal Express Checkout is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/](https://developer.paypal.com/webapps/developer/docs/classic/express-checkout/integration-guide/ECGettingStarted/).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – accepting payments using PayPal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Preform the following steps for accepting payments using PayPal:'
  prefs: []
  type: TYPE_NORMAL
- en: Now add a button on the **Shopping Cart** page (optionally with Checkout by
    PayPal Image). This button should link to the `paypalExpressCheckoutAction()`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a method in the store controller which will be used to generate the PayPal
    request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `paypalExpressCheckoutAction()` function to send the order information
    to PayPal and redirect the user to PayPal Express Checkout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to handle successful payment from Express Checkout—`paymentConfirmAction()`;
    this method will capture the payment information from PayPal, confirm the payment,
    and then update the order status in our system using the code as shown in the
    following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Capture payment information from PayPal:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm order with PayPal:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Save order with updated shipping/billing information:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally add a method to handle failed payment from Express Checkout—`paymentCancelAction()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now log in to [https://developer.paypal.com](https://developer.paypal.com) again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a new sandbox account of type `PERSONAL`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now access the store and try to purchase using the newly created Sandbox account.
    The final store should look like the following screenshot:![Time for action –
    accepting payments using PayPal](img/1929OS_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After choosing the checkout from the **Shopping Cart** page, you will be redirected
    to the **Pay with my** **PayPal account** login page as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'A screenshot of the PayPal Express Checkout''s order reviewing page is shown
    in the following screenshot; this page is used to review the payment that is being
    made to the merchant from the customer''s PayPal account:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Once the order is successfully placed, the user is redirected to the order
    confirmation page as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – accepting payments using PayPal](img/1929OS_08_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now log in to the Sandbox site for the merchant account to see if the payments
    are credited:![Time for action – accepting payments using PayPal](img/1929OS_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used PayPal Express Checkout to receive payments in our web application
    and complete the simple store application. As you can see, the PayPal API makes
    it relatively easy to set up the payment gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your next task, make use of the `DoDirectPayment` API call to directly make
    a payment on the website without having to redirect the user to the PayPal website
    and back again.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – creating a simple store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following methods is used to send the initial payment information
    for PayPal redirection?
  prefs: []
  type: TYPE_NORMAL
- en: '`RedirectExpressCheckout`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetExpressCheckout`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetExpressCheckoutDetails`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DoExpressCheckoutPayment`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which of the following fields is needed for requesting payment information
    from PayPal?
  prefs: []
  type: TYPE_NORMAL
- en: '`token`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`payerId`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`paymentDetails`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`orderID`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have learned the basics of setting up a simple store online
    and trying to receive payments using PayPal. As you can see from the previous
    example, Zend Framework's use of modules simplifies application development by
    giving developers the ability to download and install external third-party modules
    based on their integration needs. In the next chapter, we will be working on HTML5
    development with Zend Framework 2.0.
  prefs: []
  type: TYPE_NORMAL
