["```php\n$ composer require react/promiseWe\n\n```", "```php\n// deferred_01.php \nuse React\\Promise\\Deferred; \n$deferred = new Deferred(); \n\n$deferred->promise() \n    ->then(function($val) { \n        echo \"Then #1: $val\\n\"; \n        return $val + 1; \n    }) \n    ->then(function($val) { \n        echo \"Then #2: $val\\n\"; \n        return $val + 1; \n    }) \n    ->done(function($val) { \n        echo \"Done: $val\\n\"; \n    }); \n\n$deferred->resolve(42); \n\n```", "```php\n$ php deferred_01.php \nThen #1: 42\nThen #2: 43\nDone: 44\n\n```", "```php\n// deferred_02.php  \n$deferred = new Deferred(); \n$deferred->promise() \n    ->then(function($val) { \n        echo \"Then: $val\\n\"; \n        throw new \\Exception('This is an exception'); \n    }) \n    ->otherwise(function($reason) { \n        echo 'Error: '. $reason->getMessage() . \"\\n\"; \n    }) \n    ->always(function() { \n        echo \"Do cleanup\\n\"; \n    }); \n\n$deferred->resolve(42); \n\n```", "```php\n$ php deferred_02.php \nThen: 42\nError: This is an exception\nDo cleanup\n\n```", "```php\n$deferred->reject(new \\Exception('This is an exception'));\n\n```", "```php\n$ php deferred_02.php \nError: This is an exception\nDo cleanup\n\n```", "```php\n// streams_00.php \n$source = fopen('textfile.txt', 'r'); \n$dest = fopen('destfile.txt', 'w'); \nstream_copy_to_stream($source, $dest); \n\n```", "```php\n$source = fopen('textfile.txt', 'r'); \nfseek($source, 5); \n... \n\n```", "```php\n// streams_01.php \n$source = fopen('textfile.txt', 'r'); \necho get_resource_type($source) . \"\\n\"; \n\n$xml = xml_parser_create(); \necho get_resource_type($xml) . \"\\n\"; \n\n$curl = curl_init(); \necho get_resource_type($curl) . \"\\n\"; \n\n```", "```php\n$ php streams_01.php \nstream\nxml\ncurl\n\n```", "```php\n// streams_02.php \n$stdin = fopen('php://stdin', 'r'); \nstream_set_blocking($stdin, false); \n\n$readStreams = [$stdin]; \n$writeStreams = []; \n$exceptStreams = []; \n\nstream_select($readStreams, $writeStreams, $exceptStreams, 5); \necho \"stdin: \" . strrev(fgets($stdin)); \n\n```", "```php\n// stdin_loop_01.php \nuse React\\EventLoop\\StreamSelectLoop; \n$stdin = fopen('php://stdin', 'r'); \n\n$loop = new StreamSelectLoop(); \n$loop->addReadStream($stdin, function($stream) { \n    $str = trim(fgets($stream)); \n    echo strrev($str) . \"\\n\"; \n}); \n\n$loop->run(); \n\n```", "```php\n// loop_01.php \nuse React\\EventLoop\\StreamSelectLoop; \n\n$loop = new StreamSelectLoop(); \n$loop->addTimer(1.5, function() { \n    echo \"timer 1\\n\"; \n}); \n\n$counter = 0; \n$loop->addPeriodicTimer(1, function () use (&$counter, $loop) { \n    printf(\"periodic timer %d\\n\", ++$counter); \n    if ($counter == 5) { \n        $loop->stop(); \n    } \n}); \n$loop->run(); \n\n```", "```php\n$ php loop_01.php \nperiodic timer 1\ntimer 1\nperiodic timer 2\nperiodic timer 3\nperiodic timer 4\n...\n\n```", "```php\n// loop_02.php \nuse React\\EventLoop\\StreamSelectLoop; \nuse Rx\\Observable; \nuse Rx\\Scheduler\\EventLoopScheduler; \n\n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\nObservable::interval(2000, $scheduler) \n    ->subscribeCallback(function($counter) { \n        printf(\"periodic timer %d\\n\", $counter); \n    }); \n\n$stdin = fopen('php://stdin', 'r'); \n$loop->addReadStream($stdin, function($stream) { \n    $str = trim(fgets($stream)); \n    echo strrev($str) . \"\\n\"; \n}); \n\n$loop->run(); \n\n```", "```php\n// streams_03.php \n$loop = new React\\EventLoop\\StreamSelectLoop(); \n$server = stream_socket_server('tcp://127.0.0.1:8080'); \nstream_set_blocking($server, 0); \n\n$loop->addReadStream($server, function ($server) use ($loop) { \n  $c = stream_socket_accept($server); \n  $data = \"HTTP/1.1 200 OK\\r\\nContent-Length: 3\\r\\n\\r\\nHi\\n\"; \n\n  $loop->addWriteStream($c, function($c) use (&$data, $loop) { \n    $written = fwrite($c, $data); \n    if ($written === strlen($data)) { \n      fclose($conn); \n      $loop->removeStream($c); \n    } else { \n      $data = substr($data, 0, $written); \n    } \n  }); \n}); \n\n$loop->addPeriodicTimer(5, function () { \n  $memory = memory_get_usage() / 1024; \n  $formatted = number_format($memory, 3).'K'; \n  echo \"Current memory usage: {$formatted}\\n\"; \n}); \n\n$loop->run(); \n\n```", "```php\n// loop_03.php \nuse React\\EventLoop\\StreamSelectLoop; \n\n$loop1 = new StreamSelectLoop(); \n$loop1->addPeriodicTimer(1, function() { \n    echo \"timer 1\\n\"; \n}); \n\n$loop2 = new StreamSelectLoop(); \n$loop2->addTimer(2, function() { \n    echo \"timer 2\\n\"; \n}); \n\n$loop1->run(); \n$loop2->run(); \n\n```", "```php\n{ \n    \"require\": { \n        \"wyrihaximus/react-async-interop-loop\": \"^0.1.0\" \n    } \n} \n\n```", "```php\n// event_interop_01.php \nuse Interop\\Async\\Loop; \nuse WyriHaximus\\React\\AsyncInteropLoop\\ReactDriverFactory; \n\nLoop::setFactory(ReactDriverFactory::createFactory()); \n\nLoop::delay(1000, function() { \n    echo \"second\\n\"; \n}); \nLoop::delay(500, function() { \n    echo \"first\\n\"; \n}); \n\nLoop::get()->run(); \n\n```", "```php\n\"autoload\": { \n    \"files\": [\"vendor/reactivex/rxphp/src/bootstrap.php\"] \n} \n\n```", "```php\n// rxphp2_01.php \nuse Rx\\Observable; \n\nObservable::interval(1000) \n    ->take(5) \n    ->flatMap(function($i) { \n        return \\Rx\\Observable::of($i + 1); \n    }) \n    ->subscribe(function($value) { \n        echo \"$value\\n\"; \n    }); \n\n```", "```php\nuse Rx\\Scheduler; \nObservable::interval(1000, Scheduler::getAsync()) \n    ->take(5) \n    ... \n\n```", "```php\n// rxphp2_02.php \nuse Rx\\Observable; \n\nObservable::interval(1000) \n    ->take(3) \n    ->subscribe(function($value) { \n        echo \"First: $value\\n\"; \n    }); \n\nObservable::interval(1000) \n    ->take(3) \n    ->subscribe(function($value) { \n        echo \"Second: $value\\n\"; \n    }); \n\n```", "```php\n$ php rxphp2_02.php\nFirst: 0\nSecond: 0\nFirst: 1\nSecond: 1\nFirst: 2\nSecond: 2\n\n```", "```php\n// rxphp2_03.php \nObservable::interval(1000) \n    ->take(3) \n    ->subscribe(function($value) { \n        echo \"First: $value\\n\"; \n    }); \n\nLoop::get()->run(); \n\nObservable::interval(1000) \n    ->take(3) \n    ->subscribe(function($value) { \n        echo \"Second: $value\\n\"; \n    }); \n\n```", "```php\n$ php rxphp2_03.php\nFirst: 0\nFirst: 1\nFirst: 2\nSecond: 0\nSecond: 1\nSecond: 2\n\n```", "```php\n// higher_order_01.php \nuse Rx\\Observable; \nObservable::range(1, 3) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php higher_order_01.php \n22:54:05 [] onNext: 1 (integer)\n22:54:05 [] onNext: 2 (integer)\n22:54:05 [] onNext: 3 (integer)\n22:54:05 [] onCompleted\n\n```", "```php\n// higher_order_02.php \nuse Rx\\Observable; \n\nObservable::range(1, 3) \n    ->map(function($value) { \n        return Observable::range(0, $value); \n    }) \n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php higher_order_02.php \n23:29:46 [] onNext: RangeObservable (Rx\\Observable\\RangeObservable)\n23:29:46 [] onNext: RangeObservable (Rx\\Observable\\RangeObservable)\n23:29:46 [] onNext: RangeObservable (Rx\\Observable\\RangeObservable)\n23:29:46 [] onCompleted\n\n```", "```php\n// higher_order_03.php \nObservable::range(1, 3)\n    ->map(function($value) {\n        return Observable::range(0, $value);\n    })\n    ->mergeAll()\n    ->subscribe(new DebugSubject()); \n\n```", "```php\n$ php higher_order_03.php \n00:02:26 [] onNext: 0 (integer)\n00:02:26 [] onNext: 0 (integer)\n00:02:26 [] onNext: 1 (integer)\n00:02:26 [] onNext: 0 (integer)\n00:02:26 [] onNext: 1 (integer)\n00:02:26 [] onNext: 2 (integer)\n00:02:26 [] onCompleted\n\n```", "```php\n// higher_order_04.php \n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\nObservable::interval(1000, $scheduler)\n    ->take(3)\n    ->map(function($value) use ($scheduler) {\n        return Observable::interval(600, $scheduler)\n            ->take(3)\n            ->map(function($counter) use ($value) {\n                return sprintf('#%d: %d', $value, $counter);\n            });\n    })\n    ->mergeAll()\n    ->subscribe(new DebugSubject()); \n\n$loop->run(); \n\n```", "```php\n$ php higher_order_04.php \n00:43:55 [] onNext: #0: 0 (string)\n00:43:55 [] onNext: #0: 1 (string)\n00:43:56 [] onNext: #1: 0 (string)\n00:43:56 [] onNext: #0: 2 (string)\n00:43:56 [] onNext: #1: 1 (string)\n00:43:57 [] onNext: #2: 0 (string)\n00:43:57 [] onNext: #1: 2 (string)\n00:43:57 [] onNext: #2: 1 (string)\n00:43:58 [] onNext: #2: 2 (string)\n00:43:58 [] onCompleted\n\n```", "```php\n// higher_order_05.php \n... \n    ->map(function($value) use ($scheduler) {\n       // ...\n    })\n    ->concatAll()\n    ->subscribe(new DebugSubject()); \n... \n\n```", "```php\n$ php higher_order_05.php \n00:55:30 [] onNext: #0: 0 (string)\n00:55:30 [] onNext: #0: 1 (string)\n00:55:31 [] onNext: #0: 2 (string)\n00:55:32 [] onNext: #1: 0 (string)\n00:55:32 [] onNext: #1: 1 (string)\n00:55:33 [] onNext: #1: 2 (string)\n00:55:34 [] onNext: #2: 0 (string)\n00:55:34 [] onNext: #2: 1 (string)\n00:55:35 [] onNext: #2: 2 (string)\n00:55:35 [] onCompleted\n\n```", "```php\n// higher_order_06.php \n... \n    ->map(function($value) use ($scheduler) {\n        // ...\n    })\n    ->switchLatest()\n    ->subscribe(new DebugSubject()); \n... \n\n```", "```php\n$ php higher_order_06.php \n01:26:24 [] onNext: #0: 0 (string)\n01:26:25 [] onNext: #1: 0 (string)\n01:26:26 [] onNext: #2: 0 (string)\n01:26:27 [] onNext: #2: 1 (string)\n01:26:27 [] onNext: #2: 2 (string)\n01:26:27 [] onCompleted\n\n```", "```php\n// combine_latest_01.php \n\nuse React\\EventLoop\\StreamSelectLoop; \nuse Rx\\Scheduler\\EventLoopScheduler; \nuse Rx\\Observable; \n\n$loop = new StreamSelectLoop(); \n$scheduler = new EventLoopScheduler($loop); \n\n$source = Observable::just(42) \n  ->combineLatest([ \n    Observable::interval(175, $scheduler)->take(3), \n    Observable::interval(250, $scheduler)->take(3), \n    Observable::interval(100, $scheduler)->take(5), \n  ]) \n  ->subscribe(new DebugSubject()); \n\n$loop->run(); \n\n```", "```php\n$ php combine_latest_01.php \n09:42:45 [] onNext: [42,0,0,1] (array)\n09:42:46 [] onNext: [42,0,0,2] (array)\n09:42:46 [] onNext: [42,1,0,2] (array)\n09:42:46 [] onNext: [42,1,0,3] (array)\n09:42:46 [] onNext: [42,1,1,3] (array)\n09:42:46 [] onNext: [42,1,1,4] (array)\n09:42:46 [] onNext: [42,2,1,4] (array)\n09:42:46 [] onNext: [42,2,2,4] (array)\n09:42:46 [] onCompleted\n\n```", "```php\n... \n->combineLatest([ \n  Observable::interval(175, $scheduler)->take(3)->startWith(null), \n  Observable::interval(250, $scheduler)->take(3)->startWith(null), \n  Observable::interval(100, $scheduler)->take(5)->startWith(null), \n]) \n... \n\n```", "```php\n$ php combine_latest_01.php \n09:53:46 [] onNext: [42,null,null,null] (array)\n09:53:46 [] onNext: [42,null,null,0] (array)\n09:53:46 [] onNext: [42,0,null,0] (array)\n09:53:46 [] onNext: [42,0,null,1] (array)\n09:53:46 [] onNext: [42,0,0,1] (array)\n09:53:46 [] onNext: [42,0,0,2] (array)\n... \n\n```"]