- en: Chapter 8. Cooking XML with OOP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 使用面向对象的方法烹饪XML
- en: '**XML** (**Extensible** **Markup** **Language**) is a very important format
    for storing multi‑purpose data. It is also known as universal data format, as
    you can represent anything and visualize the data properly with the help of a
    renderer. One of the biggest advantages of XML is that it can be converted from
    one form of data into another easily with the help of XSLT. Also, XML data is
    highly readable.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML**（**可扩展** **标记** **语言**）是存储多用途数据的重要格式。它也被称为通用数据格式，因为你可以借助渲染器表示任何内容，并正确地可视化数据。XML最大的优点之一是它可以通过XSLT轻松地将一种数据形式转换为另一种形式。此外，XML数据易于阅读。'
- en: One of the great blessings of PHP5 is its excellent support to manipulate XML.
    PHP5 comes bundled with new XML extensions for processing XML easily. You have
    a whole new **SimpleXML** API to read XML documents in a pure object-oriented
    way. Also, you have the **DOMDocument** object to parse and create XML documents.
    In this chapter we will learn these APIs and learn how to successfully process
    XML with PHP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PHP5的一个巨大优势是它对操作XML的出色支持。PHP5附带了一些新的XML扩展，可以轻松处理XML。你有一个全新的**SimpleXML** API，可以以纯面向对象的方式读取XML文档。此外，你还有**DOMDocument**对象来解析和创建XML文档。在本章中，我们将学习这些API，并学习如何使用PHP成功处理XML。
- en: Formation of XML
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML的构成
- en: Let us look at the structure of a common XML document in case you are totally
    new to XML. If you are already familiar with XML, which we greatly recommend for
    this chapter, then it is not a section for you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个常见的XML文档的结构，以防你对XML一无所知。如果你已经熟悉XML，我们强烈推荐你在本章中学习，那么这不是为你准备的章节。
- en: 'Let''s look at the following example, which represents a set of emails:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例，它表示一组电子邮件：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So you see that XML documents do have a small declaration at the top which details
    the character set of the document. This is useful if you are storing Unicode texts.
    In XML, you must close the tags as you start it. (XML is strict than HTML, you
    must follow the conventions.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你会发现XML文档在顶部确实有一个小的声明，它详细说明了文档的字符集。如果你正在存储Unicode文本，这很有用。在XML中，你必须像开始时一样关闭标签。（XML比HTML严格，你必须遵循约定。）
- en: 'Let''s look at another example where there are some special symbols in the
    data:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子，其中数据中包含一些特殊符号：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This means you have to enclose all the strings containing special characters
    with `CDATA`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你必须用`CDATA`将包含特殊字符的所有字符串括起来。
- en: 'Again, each entity may have some attributes with it. For example consider the
    following XML where we describe the properties of a student:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，每个实体可能都有一些与之相关的属性。例如，考虑以下XML，其中我们描述了学生的属性：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, there are three attributes to this `student` tag—`age`,
    `class`, and `title`. Using PHP we can easily manipulate them too. In the coming
    sections we will learn how to parse XML documents, or how to create XML documents
    on the fly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，这个`student`标签有三个属性——`age`、`class`和`title`。使用PHP，我们也可以轻松地操作它们。在接下来的章节中，我们将学习如何解析XML文档，或者如何动态创建XML文档。
- en: Introduction to SimpleXML
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SimpleXML 简介
- en: In PHP4 there were two ways to parse XML documents, and these are also available
    in PHP5\. One is parsing documents via SAX (which is a standard) and another one
    is DOM. But it takes quite a long time to parse XML documents using SAX and it
    also needs quite a long time for you to write the code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP4中，有两种解析XML文档的方法，这些方法在PHP5中也是可用的。一种是通过SAX（这是一个标准）解析文档，另一种是DOM。但是使用SAX解析XML文档需要相当长的时间，编写代码也需要相当长的时间。
- en: In PHP5 a new API has been introduced to easily parse XML documents. This was
    named SimpleXML API. Using SimpleXML API you can turn your XML documents into
    an array. Each node will be converted to an accessible form for easy parsing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP5中，引入了一个新的API，可以轻松解析XML文档。这个API被命名为SimpleXML API。使用SimpleXML API，你可以将你的XML文档转换为数组。每个节点都将转换为易于解析的访问形式。
- en: Parsing Documents
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析文档
- en: In this section we will learn how to parse basic XML documents using SimpleXML.
    Let's take a breath and start.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用SimpleXML解析基本的XML文档。让我们喘口气，开始吧。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output is like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So now you can ask how to access each of these properties individually. You
    can access each of them like an object. For example, `$sxml->email[0]` returns
    the first email object. To access the `from` element under this email, you can
    use the following code like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在你可能想知道如何单独访问这些属性中的每一个。你可以像访问一个对象一样访问它们。例如，`$sxml->email[0]`返回第一个电子邮件对象。要访问此电子邮件下的`from`元素，你可以使用以下代码，例如：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, each object, unless available more than once, can be accessed just by its
    name. Otherwise you have to access them like a collection. For example, if you
    have multiple elements, you can access each of them using a `foreach` loop:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个对象，除非有多个相同的对象，否则只需通过其名称即可访问。否则，你必须像访问集合一样访问它们。例如，如果你有多个元素，你可以使用`foreach`循环访问每个元素：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Accessing Attributes
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问属性
- en: 'As we saw in the previous example, XML nodes may have attributes. Remember
    the example document with `class`, `age`, and `title`? Now you can easily access
    these attributes using SimpleXML API. Let''s see the following example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一个示例中看到的，XML节点可能具有属性。还记得那个包含`class`、`age`和`title`的示例文档吗？现在你可以使用SimpleXML
    API轻松访问这些属性。让我们看看以下示例：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will display the text `mime` in the output window. So if you look carefully,
    you will understand that each node is accessible like properties of an object,
    and all attributes are accessed like keys of an array. SimpleXML makes XML parsing
    really fun.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在输出窗口中显示文本`mime`。所以如果你仔细看，你会明白每个节点都可以像对象属性一样访问，所有属性都可以像数组键一样访问。SimpleXML使XML解析变得非常有趣。
- en: Parsing Flickr Feeds using SimpleXML
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SimpleXML解析Flickr源
- en: How about adding some milk and sugar to your coffee? So far we have learned
    what SimpleXML API is and how to make use of it. It would be much better if we
    could see a practical example. In this example we will parse the Flickr feeds
    and display the pictures. Sounds cool? Let's do it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在咖啡里加一些牛奶和糖怎么样？到目前为止，我们已经学习了SimpleXML API是什么以及如何使用它。如果能看到一个实际例子会更好。在这个例子中，我们将解析Flickr源并显示图片。听起来很酷？让我们来做吧。
- en: 'If you are interested what the Flickr public photo feed looks like, here is
    the content. The feed data is collected from [http://www.flickr.com/services/feeds/photos_public.gne](http://www.flickr.com/services/feeds/photos_public.gne):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，想看看Flickr公共照片源的样子，这里就是内容。源数据是从[http://www.flickr.com/services/feeds/photos_public.gne](http://www.flickr.com/services/feeds/photos_public.gne)收集的：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we will extract the description from each entry and display it. Let''s
    have some fun:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将提取每个条目的描述并显示出来。让我们玩得开心一些：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create the following output. See, how easy SimpleXML is? The output
    of the above script is shown below:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建以下输出。看看，SimpleXML有多简单？以上脚本的输出如下所示：
- en: '![Parsing Flickr Feeds using SimpleXML](img/2561_08_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用SimpleXML解析Flickr源](img/2561_08_01.jpg)'
- en: Managing CDATA Sections using SimpleXML
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SimpleXML管理CDATA部分
- en: 'As we said before, some symbols can''t appear directly as a value of any node
    unless you enclose them using `CDATA` tag. For example, take a look at following
    example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所说，一些符号不能直接作为任何节点的值出现，除非你使用`CDATA`标签将其包围。例如，看看以下示例：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will generate the following error:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下错误：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To avoid this problem we have to enclose using a `CDATA` tag. Let''s rewrite
    it like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，我们必须使用`CDATA`标签将其包围。让我们这样重写它：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now it will work perfectly. And you don't have to do any extra work for managing
    this `CDATA` section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它将完美工作。而且你不需要做任何额外的工作来管理这个`CDATA`部分。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, prior to PHP5.1, you had to load this section as shown below:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP5.1之前，你必须像下面这样加载这个部分：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: XPath
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath
- en: 'Another nice addition in SimpleXML is that you can query using XPath. So what
    is XPath? It''s an expression language that helps you to locate specific nodes
    using formatted input. In this section we will learn how to locate a specific
    part of our XML documents using SimpleXML and Xpath. Let''s have a look at the
    following XML:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SimpleXML的另一个很好的补充是，你可以使用XPath进行查询。那么什么是XPath呢？它是一种表达式语言，帮助你使用格式化的输入来定位特定的节点。在本节中，我们将学习如何使用SimpleXML和XPath来定位XML文档的特定部分。让我们看看以下XML：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This document simply states the workflow of an analysis task and then tells
    it what to do at which state. So now you want to search what to do when the task
    type is `analysis` and assigned to `cto` and current state is `new`. SimpleXML
    makes it really easy. Let''s take a look at the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这份文档简单地说明了分析任务的流程，然后告诉它在哪个状态下应该做什么。所以现在你想搜索当任务类型是`analysis`、分配给`cto`且当前状态是`new`时应该做什么。SimpleXML使这变得非常简单。让我们看看以下代码：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will echo the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'However there is something to remember while writing XPath. When your XPath
    is followed by `/` then it means that you should keep the exact sequence of your
    XML document. For example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在编写XPath时，有一些事情需要记住。当你的XPath后面跟着`/`时，这意味着你应该保持XML文档的精确顺序。例如：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will output `2`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出`2`。
- en: '`//state` means take the state node from anywhere in the document. Now if you
    specify `task//state`, it will return all states from under all tasks. For example
    the following code will output `3` and `3`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`//state`意味着从文档的任何地方获取状态节点。现在，如果你指定`task//state`，它将返回所有任务下的所有状态。例如，以下代码将输出`3`和`3`：'
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now what if you want to find `notify` just under `state`, following `assigned`,
    following `action`? Your XPath query should be `//state/assigned/action/notify`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你想在`state`节点下找到`notify`，紧随`assigned`之后，紧随`action`之后？你的XPath查询应该是`//state/assigned/action/notify`。
- en: But if you want that, it should be exactly under the `task` node which is just
    under the root node, it should be `/task/state/assigned/action/notify`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想要这样，它应该正好位于`task`节点下，该节点位于根节点下，它应该是`/task/state/assigned/action/notify`。
- en: 'If you need to match any attribute then match it as `[@AttributeName1=''value'']`
    `[@AttributeName2=''value'']`. If you see the following XPath, it will be clear
    to you:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要匹配任何属性，则应将其匹配为`[@AttributeName1='value']` `[@AttributeName2='value']`。如果你看到以下XPath，它将对你很清晰：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: DOM API
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM API
- en: SimpleXML in PHP is used to parse the document however it cannot create any
    XML document. For creating XML documents on the fly you have to use DOM API that
    comes bundled with PHP 5\. Using DOM API you can also create page-scrapping tools
    fairly easily.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中的SimpleXML用于解析文档，但它不能创建任何XML文档。要动态创建XML文档，你必须使用随PHP 5捆绑的DOM API。使用DOM API，你还可以轻松创建页面抓取工具。
- en: In this section we will learn how to create XML documents using DOM API, and
    then we will learn how to parse existing documents and modify them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用DOM API创建XML文档，然后我们将学习如何解析现有文档并修改它们。
- en: 'In the following example we will create just a basic HTML file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将创建一个基本的HTML文件：
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will produce the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下代码：
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's fairly easy, right?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单，对吧？
- en: 'Let''s do some more:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一些练习：
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will produce the following code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下代码。
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So you can save this XML generated by the DOM engine using the following code
    entered into a file in your file system:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以使用以下代码将DOM引擎生成的XML保存到你的文件系统中的一个文件中：
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Modifying Existing Documents
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有文档
- en: 'DOM API helps to create XML document easily as well as provide easy access
    to load and modify existing documents. With the following XML we will load the
    file we just created a few minutes ago and then we will change the header test
    of the first `h1` object:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: DOM API不仅有助于轻松创建XML文档，还提供了轻松加载和修改现有文档的访问。以下XML示例，我们将加载我们几分钟前创建的文件，然后我们将更改第一个`h1`对象的标题测试：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output is shown below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Other Useful Functions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他有用函数
- en: There are some other useful functions in the DOM library. We are not going to
    discuss them in depth, however they are included in this section for a one line
    overview.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: DOM库中还有一些其他有用的函数。我们不会深入讨论它们，但它们包含在本节中，以提供一个简短的概述。
- en: '`DomNode->setAttribute()`: Helps to set the attribute of any node'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DomNode->setAttribute()`: 帮助设置任何节点的属性'
- en: '`DomNode->hasChildNodes()`: Returns true if a DOM node has a child node'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DomNode->hasChildNodes()`: 如果DOM节点有子节点，则返回true'
- en: '`DomNode->replaceChild()`: Replaces any child node with another one'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DomNode->replaceChild()`: 用另一个节点替换任何子节点'
- en: '`DomNode->cloneNode()`: Creates a deep copy of the current code'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DomNode->cloneNode()`: 创建当前代码的深拷贝'
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: XML API in PHP5 plays a very important role in web application development,
    most notably the new SimpleXML API, which simplifies parsing with ease. Today
    XML is one of the most used data formats for almost all big applications. Therefore
    getting familiar with XML APIs and relevant technologies will definitely help
    you to design robust XML‑based applications more easily.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP5中，XML API在Web应用程序开发中扮演着非常重要的角色，尤其是新的SimpleXML API，它简化了解析过程。今天，XML几乎是所有大型应用程序使用最多的数据格式之一。因此，熟悉XML
    API和相关技术无疑将帮助你更容易地设计健壮的基于XML的应用程序。
- en: In the next chapter we will learn about MVC architecture and build a slick MVC
    framework on our own.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习MVC架构，并自己构建一个简洁的MVC框架。
