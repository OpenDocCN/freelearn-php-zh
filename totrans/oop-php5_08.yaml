- en: Chapter 8. Cooking XML with OOP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XML** (**Extensible** **Markup** **Language**) is a very important format
    for storing multi‑purpose data. It is also known as universal data format, as
    you can represent anything and visualize the data properly with the help of a
    renderer. One of the biggest advantages of XML is that it can be converted from
    one form of data into another easily with the help of XSLT. Also, XML data is
    highly readable.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the great blessings of PHP5 is its excellent support to manipulate XML.
    PHP5 comes bundled with new XML extensions for processing XML easily. You have
    a whole new **SimpleXML** API to read XML documents in a pure object-oriented
    way. Also, you have the **DOMDocument** object to parse and create XML documents.
    In this chapter we will learn these APIs and learn how to successfully process
    XML with PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Formation of XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at the structure of a common XML document in case you are totally
    new to XML. If you are already familiar with XML, which we greatly recommend for
    this chapter, then it is not a section for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following example, which represents a set of emails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So you see that XML documents do have a small declaration at the top which details
    the character set of the document. This is useful if you are storing Unicode texts.
    In XML, you must close the tags as you start it. (XML is strict than HTML, you
    must follow the conventions.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at another example where there are some special symbols in the
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This means you have to enclose all the strings containing special characters
    with `CDATA`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, each entity may have some attributes with it. For example consider the
    following XML where we describe the properties of a student:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, there are three attributes to this `student` tag—`age`,
    `class`, and `title`. Using PHP we can easily manipulate them too. In the coming
    sections we will learn how to parse XML documents, or how to create XML documents
    on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to SimpleXML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In PHP4 there were two ways to parse XML documents, and these are also available
    in PHP5\. One is parsing documents via SAX (which is a standard) and another one
    is DOM. But it takes quite a long time to parse XML documents using SAX and it
    also needs quite a long time for you to write the code.
  prefs: []
  type: TYPE_NORMAL
- en: In PHP5 a new API has been introduced to easily parse XML documents. This was
    named SimpleXML API. Using SimpleXML API you can turn your XML documents into
    an array. Each node will be converted to an accessible form for easy parsing.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will learn how to parse basic XML documents using SimpleXML.
    Let's take a breath and start.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So now you can ask how to access each of these properties individually. You
    can access each of them like an object. For example, `$sxml->email[0]` returns
    the first email object. To access the `from` element under this email, you can
    use the following code like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, each object, unless available more than once, can be accessed just by its
    name. Otherwise you have to access them like a collection. For example, if you
    have multiple elements, you can access each of them using a `foreach` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Accessing Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw in the previous example, XML nodes may have attributes. Remember
    the example document with `class`, `age`, and `title`? Now you can easily access
    these attributes using SimpleXML API. Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will display the text `mime` in the output window. So if you look carefully,
    you will understand that each node is accessible like properties of an object,
    and all attributes are accessed like keys of an array. SimpleXML makes XML parsing
    really fun.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing Flickr Feeds using SimpleXML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How about adding some milk and sugar to your coffee? So far we have learned
    what SimpleXML API is and how to make use of it. It would be much better if we
    could see a practical example. In this example we will parse the Flickr feeds
    and display the pictures. Sounds cool? Let's do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested what the Flickr public photo feed looks like, here is
    the content. The feed data is collected from [http://www.flickr.com/services/feeds/photos_public.gne](http://www.flickr.com/services/feeds/photos_public.gne):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will extract the description from each entry and display it. Let''s
    have some fun:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the following output. See, how easy SimpleXML is? The output
    of the above script is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Parsing Flickr Feeds using SimpleXML](img/2561_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing CDATA Sections using SimpleXML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we said before, some symbols can''t appear directly as a value of any node
    unless you enclose them using `CDATA` tag. For example, take a look at following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid this problem we have to enclose using a `CDATA` tag. Let''s rewrite
    it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now it will work perfectly. And you don't have to do any extra work for managing
    this `CDATA` section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'However, prior to PHP5.1, you had to load this section as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: XPath
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another nice addition in SimpleXML is that you can query using XPath. So what
    is XPath? It''s an expression language that helps you to locate specific nodes
    using formatted input. In this section we will learn how to locate a specific
    part of our XML documents using SimpleXML and Xpath. Let''s have a look at the
    following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This document simply states the workflow of an analysis task and then tells
    it what to do at which state. So now you want to search what to do when the task
    type is `analysis` and assigned to `cto` and current state is `new`. SimpleXML
    makes it really easy. Let''s take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will echo the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'However there is something to remember while writing XPath. When your XPath
    is followed by `/` then it means that you should keep the exact sequence of your
    XML document. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will output `2`.
  prefs: []
  type: TYPE_NORMAL
- en: '`//state` means take the state node from anywhere in the document. Now if you
    specify `task//state`, it will return all states from under all tasks. For example
    the following code will output `3` and `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now what if you want to find `notify` just under `state`, following `assigned`,
    following `action`? Your XPath query should be `//state/assigned/action/notify`.
  prefs: []
  type: TYPE_NORMAL
- en: But if you want that, it should be exactly under the `task` node which is just
    under the root node, it should be `/task/state/assigned/action/notify`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to match any attribute then match it as `[@AttributeName1=''value'']`
    `[@AttributeName2=''value'']`. If you see the following XPath, it will be clear
    to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: DOM API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SimpleXML in PHP is used to parse the document however it cannot create any
    XML document. For creating XML documents on the fly you have to use DOM API that
    comes bundled with PHP 5\. Using DOM API you can also create page-scrapping tools
    fairly easily.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we will learn how to create XML documents using DOM API, and
    then we will learn how to parse existing documents and modify them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example we will create just a basic HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: That's fairly easy, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do some more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will produce the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'So you can save this XML generated by the DOM engine using the following code
    entered into a file in your file system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Modifying Existing Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DOM API helps to create XML document easily as well as provide easy access
    to load and modify existing documents. With the following XML we will load the
    file we just created a few minutes ago and then we will change the header test
    of the first `h1` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Other Useful Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some other useful functions in the DOM library. We are not going to
    discuss them in depth, however they are included in this section for a one line
    overview.
  prefs: []
  type: TYPE_NORMAL
- en: '`DomNode->setAttribute()`: Helps to set the attribute of any node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DomNode->hasChildNodes()`: Returns true if a DOM node has a child node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DomNode->replaceChild()`: Replaces any child node with another one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DomNode->cloneNode()`: Creates a deep copy of the current code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML API in PHP5 plays a very important role in web application development,
    most notably the new SimpleXML API, which simplifies parsing with ease. Today
    XML is one of the most used data formats for almost all big applications. Therefore
    getting familiar with XML APIs and relevant technologies will definitely help
    you to design robust XML‑based applications more easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about MVC architecture and build a slick MVC
    framework on our own.
  prefs: []
  type: TYPE_NORMAL
