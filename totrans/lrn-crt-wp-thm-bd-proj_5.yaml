- en: The Foundation E-Commerce Theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll build an e-commerce theme or an online shop theme. We'll
    not have full functionality to buy products, but just the theme, and we'll look
    at how to format it so that the posts look more like product pages.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot is of the home page we'll create. We have a header
    (MyShop), a spot for a custom image (this is going to be available through the
    theme customizer, so you can upload that), our menu over the top-right corner
    of the page, a showcase widget (which is the big rectangular space right below
    the header, MyShop with a heading—Discount Clothing, some texts, and Read more),
    and we'll see where we can actually edit that content. If we scroll down the page
    (below the showcase widget rectangle) we have the main post loop, but we have
    it formatted so that it looks more like an e-commerce site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we have some side widgets which is to right-hand side of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fa74405-e1ec-4045-b6fc-14ac8bebb317.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we click on Details for one of the products, for example, Black Shirt,
    it''s going to take us to the product page (as shown in the following screenshot).
    It has the image, title, text, price, and then a Buy Now button. Also, we have
    the tags below the Buy Now button as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/901e6715-c845-4b2c-b624-140f1f80ffeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if we go to Blue & White Shirt we can see we have some images, so we
    can include an image gallery as well, and we will see how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32aa4ada-0df3-4dea-aaaf-acd5fd3860f9.png)'
  prefs: []
  type: TYPE_IMG
- en: The pages themselves are very simple. We just have an About page with a title
    and heading, and it's the same with Sample Page. If we go to the backend of the
    page and go to Posts, we can see the different products we have. Click on the
    Pink Shirt product; we have included the text, the price, and the button. If we
    scroll down, on the bottom-right corner we can see we're using the featured image.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the showcase, if we go to Appearance | Widgets, we can see in Showcase
    we have a Showcase widget, which is actually a custom widget that we''ll create
    and use it in the theme. We also have our Sidebar at the right-hand side of the
    page with the Categories and then the Text widget. Now for the gallery, if we
    go to the Blue Shirt product and click on Add Media, we can go to Create Gallery
    and choose a bunch of images, go ahead, and upload that gallery. If we click on
    Visual, you can see that and we can edit it as a whole by clicking on the Edit
    icon as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a868f3f-1818-4dc8-a0c6-68cd62055f8e.png)'
  prefs: []
  type: TYPE_IMG
- en: That's pretty simple. It's not the best looking online shop you've ever seen,
    but it does have some features that are really important. For the logo, what we
    can do to switch that is go to Appearance | Customize | Site Identity and then
    you will see the Logo option from where we can remove it. We can also change it
    and update our title and tagline.
  prefs: []
  type: TYPE_NORMAL
- en: E-commerce HTML template – Part A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll first build a flat-out HTML template and then move on to integrating
    it and making it a WordPress theme. Let''s go ahead and create a folder for this
    template, and we will call this `myshop_html`. Now let us download Foundation
    from [foundation.zurb.com](https://foundation.zurb.com/). Click on the Download
    Foundation 6 button which will take you to the downloads page. Now, click on Download
    Everything under Complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46030c95-20c5-4b57-84f6-4f67cf209487.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now open up the downloaded ZIP file and let''s just take everything
    out and move it to our `myshop_html` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e78cf83f-7170-49bd-b9ae-d59f2b67bf04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we open up `index.html` with our desired web browser, we will see that
    we pretty much have a boilerplate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f6b56ee-42a9-442a-aff1-490a35052adf.png)'
  prefs: []
  type: TYPE_IMG
- en: The CSS is implemented and the JavaScript should be implemented, so let's go
    ahead and open up `index.html` in our editor. We will work through this code of
    `index.html` and replace what we need. Let's open up our CSS file, `app.css`,
    inside the `CSS` folder in the `myshop_html` folder that we have created. There's
    nothing inside our CSS file; the only styles are the core foundation styles.
  prefs: []
  type: TYPE_NORMAL
- en: We also have some images that we need to upload (you will get these images along
    with the code bundle), so we will create a new folder called `img` and paste these
    images inside the `img` folder. If we take a look at the images, we have our `logo.jpg`
    and a bunch of clothes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a bunch of shirts and a hat. The blue shirt has multiple images because
    we''ll implement a mini gallery, so these are all the images that we''ll be needing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb305434-873f-43a8-979d-1f90ea6c6495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go back to the `index.html` file. The head can stay how it is; we''re
    linking our CSS files and our viewport is already set. In the `<body>` tag, you
    will see that we are using the XY grid system. The first `<div>` tag has a class
    of `grid-container`. The grid will default to the full width of the available
    space. To contain it we use the `grid-container` class. Below this, we have a
    `<div>` tag with two classes—`grid-x` and `grid-padding-x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will change this `<div>` to `<header>` and change the `large-12` div to
    `large-6` div, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload the `index.html` page and you will see our logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8dca1791-7f84-455b-98cd-a5cc39d6d5be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add a second `<div>` tag. This will have our navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that and reload the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e2b80bd-21a8-4348-9818-aa0a5a814933.png)'
  prefs: []
  type: TYPE_IMG
- en: The style that the menu has is coming from the core foundation file. We'll add
    some other styles; for instance, we push it down, we push it over, but we'll get
    into the CSS after the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have the showcase area which is going to change quite a bit. We''ll
    add the `showcase` class to the `<div>` tag with the `grid-x` and `grid-padding-x`
    classes. We''ll leave the 12-cells and `callout` div as it is, but we will add
    a class called `secondary`, which will make it gray. Get rid of everything inside
    that. Inside the `secondary` class div we''ll have an `h1`, and this will say
    `Discount Clothing`, and then we will paste in a paragraph and a `button` as seen
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you will see the showcase area which appears in the web page under the
    MyShop logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3ac9fa3-0d8f-4264-86eb-a89a9d21a0fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll add some more styles to the paragraph afterwards so don''t worry about
    it. If we scroll down in our editor, we have another `grid-x grid-padding-x` div,
    this has an 8-cells `div`, which is the main area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4710610-0b8e-4d75-ac39-75bab2ae79b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, way down at the bottom there''s a 4-cells `div`, which is the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14111ed0-387b-4a84-98c7-8fc0908040fe.png)'
  prefs: []
  type: TYPE_IMG
- en: We will clear these divs out completely. Now we have a cleared out 8-cells div
    and a sidebar of 4-cells div. Next, for the products we'll add a `<div>` tag inside
    the 8-cells div and give it a class of `products`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside this div, we will add 4-cell divs and give them a class of `large-4
    medium-4 small-12 columns product end`. We will add the title, price, and image
    and then we''ll put in a button. Here''s how our first product''s div looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we do the WordPress theme things might look a little different than the
    HTML theme because there's some limitation to where we can put the content. So
    just remember that there may be some minor differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s grab the 4-cell div and paste it in a bunch of times. We will just
    change the content a little bit to add all the shirts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now reload the `index.html` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2eb10417-77c4-49bc-905b-db9e548429e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for the sidebar we''ll go down to the 4-cell div and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We have given the div a class of `callout` that gives it a border and some
    padding. We have also added the `Categories` heading and the `<ul>` tag with the
    class of `menu` and `vertical`. We will have one more sidebar widget right below
    it with a heading and some text. This is how our sidebar will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ab17072-2896-4af6-9295-b1dd0a9c2edb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we''ll go down to the very bottom, right above the script tags, and create
    our footer. Our footer is just going to be a paragraph, we''ll put our copyright.
    The code for the footer is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That's it for the `index.html` page! Now we will move on to the details page,
    and obviously we'll fix rest of the index and details page in the second part
    where we'll do the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to our `myshop_html` folder and create a new file called `details.html`.
    Copy the code of `index.html` and paste it in the `details.html` file. Now go
    to the main area, the 8-cell div. We will change the `products` class to `single-product`,
    remove all the products, and change the 4-cell div to 12-cell div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now inside the 12-cell div that we just updated, we''ll have two more columns.
    Here''s the new code after some changes to the 12-column div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the preceding code, we have a 5-cell div in which we will add the
    image and a 7-cell div which will contain the content. Here is how our final code
    will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we want the 5-cell and 7-cell div in a single row, we have added a div of
    classes `grid-x` and `grid-padding-x` in the 12-cell div.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s reload the `details.html` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7985cd08-7396-49ce-a912-b62caef5b290.png)'
  prefs: []
  type: TYPE_IMG
- en: That looks good so far in our web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''re also going to create an About page just to represent a normal page
    that''s not a product page. Let''s go to our `myshop_html` folder again and create
    a new file, and we''ll name it `about.html`. Open that up in our editor, and now
    we are going to copy everything that we have in the `details.html` file. Then
    we will go to the main area and instead of having a 5-cell and a 7-cell, we''ll
    just have the one 12-cell div. The code for the about section is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go to About section in our web page, and there we go, just some text
    and a heading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb7bfa65-2a0e-435c-bbc8-d48b7c285bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: E-commerce HTML template – Part B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the HTML done, but we need to do the CSS bit. Let's go ahead and open
    up `app.css` and if we take a look at the template, we'll have to start with the
    core styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will notice that by default, the buttons and the links are blue. We
    actually want to change that to red. We''ll put `a` tag, let''s write `color`
    and that''s going to be a value of `ec2c2f`, which will give it the red color.
    Now we also want the buttons to have a background color of red. Let''s say, we
    also want to give the buttons a little border at the bottom. So, we''ll use `border-bottom:
    3px #333solid;`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when we hover over the buttons, you''ll see it turns blue, same thing with
    the links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75fbb932-9ab2-42ac-8f71-28f79dd8a5b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix this, let''s use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save the file and reload the page. This is what you will now see with
    the buttons and links in red even when you hover over them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25c2c8e2-ad7c-41a0-bf92-0dba210f8b63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now take care of the positions of the Home, About, and Services links.
    We want them to be at the top-right of the page. Here''s the code to do this with
    some font size modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s reload the page and see the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58b82a9d-a4de-46f6-8249-67eedbb52430.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also give a little margin to the header on the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload the page and this is what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71f4a1b3-1928-4c41-9540-63162c8c8606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s do the showcase area. For this, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you will see now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08ba628a-01a8-4efb-b1d9-63a9eaa54be0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for the products area, we''ll write `products .columns`, we''re just going
    to add a `margin-bottom` and let''s do `product`, singular, and for that we want
    to `text-align` to the `center`. Let''s see, so for the button we want to add
    a little margin to the top, so let''s write `product .button``margin-top` and
    let''s use `10px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that and reload the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/020c64b8-3ac4-4ae0-a893-7516686669f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for the menu on the right-hand side of our webpage (Categories), we will
    add a border underneath each list item. However, we don''t want to have a border
    for the last list item. Type the following code to execute this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save that and reload the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e633aa8-d4d0-4964-a12b-fb9bf42c71eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, let''s add the footer. We''ll set some properties and display the footer
    on the page using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Save that and reload the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8439f67b-2632-43b8-b790-a4acb61b6d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at Details and About page on our webpage. You will see that
    the Details page looks good; however, the About page has the content center-aligned.
    To fix this, go to the `about.html` file and remove `product end` from the 12-column
    div. Reload the page, and the About page should look perfectly fine.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll jump into WordPress and we'll start to create a WordPress
    theme based on this design.
  prefs: []
  type: TYPE_NORMAL
- en: Theme setup, logo, and navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the HTML template is done, we can now start to convert it into a WordPress
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a default installation of WordPress. Let''s create a new theme folder.
    We will go to `wp-content` | `themes` and create a new folder, `MyShop`. Inside
    `MyShop`, we''ll create an `index.php` file and a `style.css` file. Let''s go
    ahead and put our declaration in our `style.css` file as shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that. Now if we go to the backend in our webpage and go to Appearance
    | Themes, we''ll see MyShop as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a31e264-b5f6-4649-bc06-68b467d8c340.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a screenshot that we can pop above the MyShop preview image in our project
    files. Paste this inside the `MyShop` folder. So now we have MyShop, let's go
    ahead and activate it. Obviously, right now if we go and reload the frontend,
    it'll just be blank.
  prefs: []
  type: TYPE_NORMAL
- en: We'll open the `MyShop` and `myshop_html` folders, which is the HTML template
    that we created, and bring over the `css` and the `js` folders into the `MyShop`
    folder. Now we have a `style.css` in our WordPress site. We'll take everything
    out of the `app.css` file from our template, cut that out, put it into `style.css`,
    and save it. Then we can completely delete the `app.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now put everything from our `index.html` folder into `index.php`. Let''s
    save that, and if we go to our website and reload the page, we can see all of
    our HTML there. The CSS isn''t connected yet so we''re not seeing that, but you
    can see the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b1b2444-fe12-48a3-9b3a-23256a0a847a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go to the top of the file. We will add our title and fix the stylesheet
    declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save that, reload our webpage, and now we can see that our CSS is in
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a493e3c0-8871-4ffb-8483-ee08d6636006.png)'
  prefs: []
  type: TYPE_IMG
- en: We're just going to work from the top down. So next is the body! We also want
    to add our body class. So beside our `body` tag, let's add `<?php echo body_class()
    ?>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the logo, we''ll do something that we haven''t done yet; we''ll implement
    an image, a logo upload from the theme customizer. In order to do that, we need
    to create a `functions.php` file. So in our `themes` folder, let''s create a file
    called `functions.php` and create a function for `Theme Support`. Here''s what
    the code should look like inside `functions.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Save that and let''s now go to the `index.php` file. Let''s remove `<img src="img/logo.jpg">`
    and replace it with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We now go to our backend. In the Themes we''ll click on Customize, go to Site
    Identity, and now you should have the area as seen in the following screenshot
    for a logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/340094a9-8500-45db-ba43-e735e5d77a77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to click on Select Logo and we''ll upload the `logo.jpg` file
    from the `myshop_html` folder, crop the image as per your preference, and click
    on Save and then Publish. Now let''s go to our frontend and reload, and we now
    have a logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67bee4d4-a079-4aac-9dce-e9b9bd80adba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s do the menu. We''ll go to the `functions.php` file and add the following
    code for `Nav Menus`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we will go to `index.php` and we have our menu. We''ll get rid of it completely
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s go to our backend. First of all we''ll reload, click on the Menus
    option, and we will keep Sample Page. Make sure that we have the Primary Menu
    option checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03625545-0796-45ef-add0-9ea4b8ede24b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll click on Save Menu and reload our page. We can see that, now we have
    our menu and if we click on it we can see the link has changed. You won''t see
    it in the main area of the web page because we don''t have that area of the theme
    set up yet; it''s just static content for now, but the menu is working and the
    logo is there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19f18b59-5ef4-4f17-9c53-22ce8b2184f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last thing we want to do in this section is to go to the `index.php` file
    and right underneath the `footer` tags, we''ll put `wp_footer` as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'That should give us the admin menu at the top of the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71c04843-7303-49f5-85f4-0eb45dc5723c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section we'll work with widgets. We will see how to create a custom
    widget for our showcase area.
  prefs: []
  type: TYPE_NORMAL
- en: The custom showcase widget plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we'll create a custom widget for our theme. We have the showcase
    area on our web page and we will create a widget that can take in a title and
    some text, and will spit it out right in the widget position.
  prefs: []
  type: TYPE_NORMAL
- en: If we look at the documentation page at [https://codex.wordpress.org/Widgets_API](https://codex.wordpress.org/Widgets_API)
    for the Widgets API, what we need to do basically is create a class that extends
    `WP_Widget`, and it's going to have a few different methods. It'll have a constructor
    to call the constructor of the parent class and also set up the title and description,
    the `widget` method that will output the content of the widget, the `form` method
    that will output the admin form, and `update` that will take care of updating
    any fields.
  prefs: []
  type: TYPE_NORMAL
- en: We'll go into the `wp-content` | `plugins` folder and create a new folder there,
    `showcase-widget` (although it is a plugin, it's also a widget). Let's go ahead
    and create a new file in this folder, `showcase-widget.php`, and then one more
    file, which is going to be the class file, `class.showcase-widget.php`. The `showcase-widget.php`
    file is going to be the main file but the class file is going to be where we'll
    do most of the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now add some code to the `showcase-widget.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`Showcase_Widget` in the `register_widget(''Showcase_Widget'');` is our class
    name. This, in general, needs to be your class name, whatever you choose.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go into the `class.showcase-widget.php` file now. We''ll grab the Default
    Usage code from the documentation page ([https://codex.wordpress.org/Widgets_API](https://codex.wordpress.org/Widgets_API))
    and we''ll paste that in our editor with `php` tags. First of all we will have
    to change the name of the class from `My_Widget` to `Showcase_Widget`, and then
    let''s take a look at the constructor and replace our code in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The widget method will display the frontend of the widget, so we basically
    need three things which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We need the title of the widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need the heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need a field for the text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to paste the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll stay in the same method and paste some other stuff in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we move on to these let''s create `getContent`, which takes in the heading
    and text. Let''s use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a variable called `output` that we're sending it to a template
    with the `h1` and the text. Then we have a button and we are returning the output.
    So this `getContent` is actually going to display content's `echo $this->getContent($headng,
    $text);` where we're calling it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s scroll down to `function form`. This represents the backend form
    where we can actually put the heading and the text and stuff like that. We will
    paste the following code in this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re checking to see if there''s a title, and if there is we''ll set it to
    the variable to whatever is in the instance. If there''s not, then we''re just
    going to set it to `Showcase_Widget`. Then we also need to get the heading and
    the text, which we''re pulling from the instances as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the actual backend form it''s a lot of HTML. We will end the `php`
    tag after `$text = $instance` and start the `php` tag on the next line. We will
    then put all the HTML between these opening and closing `phg` tags. Let''s paste
    the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we have a couple of paragraphs and they contain a label for each
    field and then the input. We can see for the label we can echo out `$this->get_field_id`
    and then what we want is the title. Then for the input we have an `id`, `get_field_id`,
    and then the name of the field which is title. Then for the name we have `get_field_name(
    'title' )`, and for the value we'll use the title variable. We'll escape it with
    the escape attribute, `escape_attr`. We'll do the same thing for the heading and
    for the text. It's really quite simple even although it looks like a lot of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we want to go to the `update` method, when we add a heading and text in
    the backend and we click save, the `update` method is what saves it. Let us grab
    some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We have an instance that equals an empty array. We'll say `instance['title']`
    equals whatever is in the new instance saved as the title. It's the same thing
    with the heading; we'll set it to the new instance heading, and the same with
    the text, and we'll return that instance. This will update whatever we put in
    for the fields in the backend widget form.
  prefs: []
  type: TYPE_NORMAL
- en: We'll make sure both files are saved and then we'll go in the backend and let's
    reload the webpage. Go to Plugins, and we can see in the following screenshot
    the Showcase Widget option; it has the description, version, and name, and we'll
    click on Activate.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ada496d6-f13e-4a6f-a875-6cf0f055dbc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set up a widget position by going into `functions.php` in our `themes`
    folder. We''ll set up our widget locations. So we''ll scroll down to the bottom
    of the file and paste the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'So we have a function called `ms_init_widgets` and we have two places where
    we want widgets: one is on the sidebar and the other in the showcase for the widget
    we just created. In our sidebar we want `div class="callout"` to wrap around the
    whole widget, we want the title to be an h3\. At the end, we''ll call our action
    on `widgets_init` and input the name of our function, `ms_init_widgets`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s save that, go back to the backend, and reload. Now under Appearance
    we can now see Widgets. If we click on that, we can see we have the Sidebar and
    the Showcase available, and if we scroll down the same page, we can see our Showcase
    Widget, which is the plugin we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94e57734-c439-40c6-b393-2e8634345fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: So let's go ahead and add the Showcase Widget to the showcase area. Here, we
    have our title, which we'll get rid of. For the heading we'll type `Discount Clothing`,
    and for the text we'll put some random text in there. Save that, go back. Well
    actually, the frontend is not going to change yet because we didn't implement
    it in the template, but we can see that the content has saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we need to do now is go into our `index.php` file and scroll down to where
    we have this showcase area. Before we actually show it we want to check to make
    sure that it''s enabled. So we''ll modify and put the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Save that, let's go check out the frontend, and we see Discount Clothing on
    the web page, which is our title. Just to make sure that it's actually reading
    our widget, let's go and change the title to `Discount Clothings` and save it.
    Go to the frontend, reload, and we get Discount Clothings. So you know that this
    is coming from our custom plugin.
  prefs: []
  type: TYPE_NORMAL
- en: We created a plugin wherein we'll not only able to use it on this theme, but
    we can use it anywhere. Alright, so in the next section we'll take care of the
    sidebar widgets. We want the Categories section to actually come from WordPress
    categories.
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar widget setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we made a custom widget plugin for our showcase area. We'll
    now implement the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: We've already done half the work. If we look at `functions.php`, we already
    have registered our sidebar area.
  prefs: []
  type: TYPE_NORMAL
- en: So what we need to do now is go to `index.php` and go down to where we have
    our sidebar. Before I get rid of this, let's make sure that we create our widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we already have the Categories one; we don''t have to worry too much about
    that. But let''s create the sidebar heading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a3e9aa1-1307-4a24-a5c7-786023d0ef31.png)'
  prefs: []
  type: TYPE_IMG
- en: OK, so if we go to our backend, we have Categories, we can bring that over to
    the sidebar at the right, enter the title as Categories and save that. Then we
    also want the custom text present at the bottom-left of the window; we'll put
    that right under Categories. Paste in our heading, `Sidebar heading`, and then
    our text and the button from the code. We'll save and now we can go ahead and
    replace this stuff. We remove both the `callout` divs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll then check to see if the sidebar is active, so we''ll put `if(is_active_sidebar)`
    and the position is also called sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we''ll type in `php dynamic_sidebar` and save that.
    Let''s go to the frontend and reload. So there are our widgets, and these are
    coming from the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a82c5163-9df9-4a63-83a4-62b6438cba09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now for the categories let''s create some. By default, it''s only going to
    show categories that have posts in them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19c51077-8706-4531-a6a8-f5762b2260f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now these aren''t the ones we want at all. So we''ll get rid of these and then
    add Shirts, Hats, and Shoes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebd950a8-a66b-4bf9-b975-b6013232bc08.png)'
  prefs: []
  type: TYPE_IMG
- en: If we go and reload, you still don't see them because we don't have anything
    in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now just to make sure that the categories will show up, we''ll add this `Hello
    world` to all of the categories and reload them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18807129-9a8d-4bf7-87e3-78b0c45c1375.png)'
  prefs: []
  type: TYPE_IMG
- en: So now you can see they're showing up. That doesn't look great, so we want it
    to use some custom classes, Foundation classes. We'll create a `widgets` folder
    in the `themes` folder, and let's grab the `widgets` folder. We'll go to `wp-includes`
    | `widgets`, and grab the `class-wp-widget-categories.php` file, so we'll copy
    that and then bring it to the `widgets` in the `themes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Then we can open that from within Sublime Text. We'll add `Custom` to the end
    of the class name and search for the `ul` tag. We will add some classes. OK, so
    `class="menu vertical"` and save it. Then we have to include that file in our
    `functions.php` file. We'll go to the top and let's type in `require_once` and
    then we'll pass in `widgets/class-wp-widget-categories.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll include that file now. Now we''ll have to register it. So, let''s go
    down to the bottom and create a function called `ms_register_widgets`. We will
    pass in the class name, `WP_Widget_Categories_Custom`. We''ll then add an action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Save it, and let''s just go and look at the frontend now. You can see that
    Categories has changed and looks a little better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3114e8ed-6079-474e-b3b0-de8b4d235132.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the next big thing we have to do is the main content area. We'll do that
    in the next section, but before we go there, we just want to split up the `index.php`
    file into our header and footer files. So we'll go from the very top of the file
    to the end of the `header` tag. We'll cut the code and in its place, we'll say
    `<?php get_header(); ?>`. We'll then create a file called `header.php` and paste
    that in there. We should see no change.
  prefs: []
  type: TYPE_NORMAL
- en: So we'll do the same thing with the footer. So in `index.php` we'll go from
    the bottom up to, let's see, till the `footer` tag, cut that out, and then we'll
    put in `get_footer`. We'll then create a file called `footer`, and paste that
    in, go back to the frontend, reload and everything's fine.
  prefs: []
  type: TYPE_NORMAL
- en: The main product post page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll work on this main content area, the area where the posts
    show up. Right now it's just a bunch of static HTML, so we'll go ahead and fix
    that.
  prefs: []
  type: TYPE_NORMAL
- en: So let's go into the `index.php` file in the `MyShop` folder in themes. Let's
    go to `div class="products"` where we have 4-column divs to represent each product.
    We'll add a class of row on this `products` div and then get rid of all but one
    of these 4-column divs. We'll preserve the `div` tag with the black shirt details.
    We'll get rid of all the div tags and then inside the 4-column div we'll go right
    above it and create our `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do the `while` loop, though, let''s make sure that there are some
    posts. So we''ll say `if(have_posts)` and then we''ll end it. Also, if there are
    some posts then we want our `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'So we''ll say `php while`, and we''ll say `while(have_posts)` and then we have
    to just add the `_post`. Then we''ll do the `endwhile` on the bottom of this div.
    So we''ll say `php endwhile`. Now inside the `div` tag, we''ll have an `h3` and
    that''s going to be the title. So we can say `php the_title`. We''re also going
    to have the thumbnail, so let''s do `php` and check for the thumbnail first. We''ll
    say `if(has_post_thumbnail)`. If there''s a thumbnail, then we''ll say `php the_post_thumbnail`.
    Then, we''ll go right under the `endif` and we need our button, so it''s going
    to actually be a link formatted as a button. We''ll give is a class of button,
    and then this is going to go to `php echo the_permalink`. The text will just say
    `Details`. So let''s save that and let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb4c461c-6d85-496c-a310-108d37d157cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The reason we don''t see anything here except for Hello world is that''s the
    only post we have. So we''ll go in and create some posts. Let us just log back
    in real quick. We''ll go to All Posts and you can see we only have Hello world.
    So let''s go ahead and click on Add New:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cd376b1-07c0-4adc-bf4a-59ae3fafbaf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now notice that there''s no area for the featured image down here, so we''ll
    have to make changes in `functions.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: To add that, let's go to `functions.php` and go into the `ms_theme_setup` function.
    We'll type in `add_theme_support`, and we want `post-thumbnails`. Let us now check
    the output.
  prefs: []
  type: TYPE_NORMAL
- en: You can now see the Featured Image box at the bottom-right. So let's go ahead
    and click on the Featured Image box and upload a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have all these shirts. We''ll choose the blue and white one and set that
    as a featured image. Let''s call this `Blue & White Shirt`. For the description,
    we''ll get some sample text real quick:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/190878db-44b7-4d24-ae31-ce951e66be90.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll copy a couple of random sentences for the description and paste that in.
    We want the price as well. So we'll put that in an `h3` and say `$9.99`. We also
    want the button, so we'll give that a class of `button` and we'll just say `Buy
    Now`. It's not going to have actual e-commerce functionality. So this is what
    pretty much all of our product descriptions are going to look like. Let's copy
    that, and then let's choose the Shirts category. We can add some tags; we'll say
    `blue shirt`, `white shirt`, and `clothes`. We added those and that looks good,
    so let's go ahead and publish.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go back to the home page and there''s our shirt. We''ll disable the
    Hello world post in the Posts by moving it to Trash. For the black shirt, we''ll
    go ahead an upload the image. We''ll grab the `shirt_black.jpg` image file, say
    `Black Shirt`, and then paste in what we had for the other one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bead5fc-f147-4477-b955-364bb925f77d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll publish that and go ahead and add the rest of them. We went ahead and
    added the rest of the products. Let''s go to the frontend and reload, and there
    we go! It''s starting to look like a real shopping cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19815457-06ac-4676-bdb2-5d864895e146.png)'
  prefs: []
  type: TYPE_IMG
- en: Now if we go and click on one of the Details buttons, it takes us to the correct
    place, to the right product, but this isn't how we want it to set up. We want
    to have the description and look like a real shopping cart page.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue if we go to a regular page and not a post, like say the About
    page, is that it's formatted the same way as the main post page. So we don't want
    that either. So in the next section, we'll take care of that and get these pages
    looking correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Single product and single page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point we've done pretty well. We have our main post page or our homepage
    done, but if I click on one of these and we go to the single product page, it
    doesn't look too good. We're also missing a bunch of information.
  prefs: []
  type: TYPE_NORMAL
- en: So we'll now create a new file inside the `MyShop` theme folder and save it
    as `single.php`. After creating this file if we go back to the single view and
    reload, it'll be blank because it's looking at the single file. So what we'll
    do is copy everything we have in the `index` page.
  prefs: []
  type: TYPE_NORMAL
- en: So we'll grab all of it, we'll paste it in, and get rid of the `showcase` part
    because we don't want that. We want the showcase on the homepage only. We'll put
    an `hr` tag in there.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll do the same thing as far as checking for posts and looping through the
    post even though it''s a single post as we did in the previous section. But we''ll
    get rid of everything that''s in between the `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We're just going to get that out and then we'll create a new `div` with a class.
    Let's create a div with the class of `row` and also `single-product`. Inside that,
    we'll have a 5-column div. Within this div, we'll have our `Go Back` link, and
    let's put a line break. Then we'll check for the featured image or the thumbnail.
    So we'll copy from the `index.php` file. We just want to check to see if it's
    there, and if it is then we'll display it. Then that should be it for the 5-column
    div. So that's just going to be the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we''ll have a 7-column div. This is going to have the title, which
    we''ll put in an `h2`. So we''ll say `php the_title` and right under that, we''ll
    put `the_content`. We''ll then put an `hr` tag. We want the tags and the following
    code snippet. We''re just checking for the tags, see if the function exists, and
    then spit them out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go ahead and save this. We''ll go back to our page and reload, and now
    we have a product page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36738e39-39de-4de6-943e-dc6397255575.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As for Go Back, right now it won''t do anything. Let''s have it go to the home
    page. We''ll say `php` and we should be able to say `echo site_url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Click on Go Back, and it brings us back to our homepage. So that looks good.
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we also want to be able to have multiple images in here as well. Let''s
    go to our Posts in the backend, and let''s go to Blue & White Shirt. Click on
    Add Media and then Create Gallery. We''ll upload a couple more files. We have
    files in the folder as shown in the following screenshot. We''ll use those and
    create a new gallery:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36b36c00-b10b-4cff-987f-1d3fd22170ac.png)'
  prefs: []
  type: TYPE_IMG
- en: For the link, we'll just say Media File and Insert gallery. Let's update, go
    back to the frontend, reload, and now we have some images for that product. That
    looks pretty much like a like a standard shopping cart details page!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef76707-5f6f-42ba-9ad6-8db6fb9b6ea9.png)'
  prefs: []
  type: TYPE_IMG
- en: We're getting there! Now for the regular pages such as About, we obviously don't
    want this. We'll go into our folder and create a new file, `page.php`. Then if
    we go back and reload, it's going to be blank. Let's grab what we have in the
    `index` page, paste it right in there, and then we want to go down to where the
    `post` loop is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s just take everything out from within the `while` loop and create a `div`
    and this will be a 12-column div, `large-12 columns`. Let''s then add an `h3`,
    which will have `the_title`. Under `the_title` let''s add the whole thumbnail
    thing. We''ll grab it from `single.php`. So if there''s an image it''ll show it,
    and then we just need `the_content`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save it, go back to About, and now we have just a standard page with
    a title and the body. It''s the same thing for Sample Page. We look pretty good
    at the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34184408-4ad7-443f-a0c6-e5422dae557b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if you want to have comments on your product or post pages, you could do
    that. We could go to `single.php`, go after the `div` tag, and just say `php comments_template`
    and save it. Go back, reload, and now we have our comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say `This is a test comment`. It will then leave comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4305f0f-24b6-4b6e-8bac-25867f1986e1.png)'
  prefs: []
  type: TYPE_IMG
- en: You could make your comments template look better as we have done it previously.
  prefs: []
  type: TYPE_NORMAL
- en: You may even re-brand it as reviews (product review).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We introduced a few new aspects of WordPress theme development in this project,
    such as creating your own plugin widget and implementing the image, the logo,
    and the customizer, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's the end of the book, and we have created five amazing WordPress-based
    themes. We hope that you liked the journey this book has taken you through to
    create them. We wish you all the success and hope that you continue to better
    your WordPress themes.
  prefs: []
  type: TYPE_NORMAL
