- en: Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Drupal 8 ships with the RESTful web servers functionality to implement web
    services to interact with your application. This chapter shows you how to enable
    these features and build your API, covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling RESTful interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using POST to create data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PATCH to update data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Views to provide custom data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSON API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several modules provided by Drupal 8 that enable the ability to turn
    it into a web service provider. The Serialization module provides a means of serializing
    data to or deserializing from formats such as JSON and XML. The RESTful web services
    module then exposes entities and other APIs through Web APIs. Operations done
    through RESTful resource endpoints use the same create, edit, delete, and view
    permissions that would be used in a non-API format.
  prefs: []
  type: TYPE_NORMAL
- en: The HAL module serializes entities using the **Hypertext Application Language**
    (**HAL**) format. HAL is an Internet Draft standard convention used to hyperlink
    between resources in an API. HAL+JSON is required when working with POST and PATCH
    methods. For authentication, the HTTP Basic Authentication module provides a simple
    authentication via HTTP headers.
  prefs: []
  type: TYPE_NORMAL
- en: There is a community-lead effort to implement the JSON API specification with
    Drupal, using the JSON API module, covered in the *Using JSON API* recipe of this
    chapter. Like HAL, it provides specifications not only on how data should be represented,
    but also on how it should be sorted and filtered via request parameters.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers how to work with the RESTful Web Services module and the
    supporting modules around developing a RESTful API powered by Drupal 8\. We will
    cover how to use the GET, POST, and PATCH HTTP methods to manipulate content on
    the website. Additionally, we will cover how to use views to provide custom content
    that lists endpoints. Finally, we will cover how to handle custom authentication
    for our API.
  prefs: []
  type: TYPE_NORMAL
- en: In an article, *Putting off PUT*, the team behind the Web services initiative
    chose not to implement PUT and only support PATCH. For more information, refer
    to the original article at [https://groups.drupal.org/node/284948](https://groups.drupal.org/node/284948).
  prefs: []
  type: TYPE_NORMAL
- en: However, the API is open for contributed modules to add the PUT support for
    core resources or their own.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling RESTful interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides routes that expose endpoints for your
    RESTful API. It utilizes the Serialization module to handle the normalization
    to a response and denormalization of data from requests. Endpoints support specific
    formats and authentication providers. Upon installation, the RESTful Web Services
    module does not provide any default configured endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one caveat: RESTful Web Services does not provide a user interface
    to configure available endpoints. Enabling resource endpoints can be done by manually
    editing configuration or the **REST UI** module. We will use the REST UI module
    in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will install RESTful Web Services and enable the proper permissions
    to allow the retrieval of nodes via REST to receive our formatted JSON.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover using GET, POST, PATCH, and DELETE in later recipes. This recipe
    covers the installation and configuration of the base modules to enable Web services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a configuration change that might be required if you are running PHP
    5.6: the `always_populate_raw_post_data` setting. If you try to enable the RESTful
    Web Services module without changing the default setting, you will see the following
    error message on installation:'
  prefs: []
  type: TYPE_NORMAL
- en: The `always_populate_raw_post_data` PHP setting should be set to `-1` in PHP
    version 5.6\. Please check the PHP manual for information on how to correct this.
    (Currently using `always_populate_raw_post_data` PHP setting version not set to
    -1.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we must add the REST UI module to our Drupal site so that we can easily
    configure our endpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to Extend from the administrative toolbar and install the following Web
    services modules: Serialization, RESTful Web Services, and REST UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9b148a49-0009-4a45-a9af-06bfc1bd82cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Configuration and click on REST under Web Services to configure the available
    endpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Enable button for the Content row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef337a85-00c7-4438-8538-5f2c8c8cd21c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the endpoint enabled, it must be configured. Check the GET method checkbox
    to allow GET requests. Then, check the json checkbox so that data can be returned
    as JSON. All endpoints require a selected authentication provider. Check the cookie
    checkbox, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03616b74-74d3-45fe-9a79-ac8297eae48a.png)'
  prefs: []
  type: TYPE_IMG
- en: Any RESTful resource endpoint enabled will use the same create, update, delete,
    and view permissions that have been already configured for the entity type. In
    order to allow anonymous access over GET for content, ensure that anonymous users
    have the **View published content permission**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using cURL on the command line, a piece of content can now be retrieved using
    the RESTful endpoint. You must pass `?_format=json` to ensure that the proper
    format is returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The RESTful Web Services module will return the entire entity object with each
    field the user has access to view.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **RESTful Web Services** module works by implementing an event subscriber
    service, `rest.resource_routes`, that adds routes to Drupal based on implementations
    of its `RestResource` plugin. Each plugin returns the available routes based on
    HTTP methods that are enabled for the resource.
  prefs: []
  type: TYPE_NORMAL
- en: When routes are built, the `\Drupal\rest\Routing\ResourceRoutes` class uses
    the `RestResource` plugin manager to retrieve all the available definitions. The
    endpoint configuration objects are loaded and inspected. If the resource plugin
    provides an HTTP method that is enabled in the configuration definitions, it begins
    to build a new route. Verification is done against the defined supported formats
    and supported auth definitions. If the basic validation passes, the new route
    is added to the `RouteCollection` and returned.
  prefs: []
  type: TYPE_NORMAL
- en: If you provide a `supported_formats` or `supported_auth` value that is not available,
    the endpoint will still be created. There will be an error, however, if you attempt
    to use the route with the invalid plugin. This cannot occur when using the REST
    UI module, but manually providing and managing the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The default routes provided by the base class for resource plugins, `\Drupal\rest\Plugin\ResourceBase`
    class, set `\Drupal\rest\RequestHandler::handle` as the controller and method
    for the route. This method checks the passed `_format` parameter against the configured
    plugin. If the format is valid, the data is passed to the appropriate serializer.
    The serialized data is then returned in the request with appropriate content headers.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides a robust API that has some additional
    items to make a note of. We will explore these in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using _format instead of the Accept header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in the Drupal 8 life cycle, up until 8.0.0-beta12, Drupal supported
    the use of the `Accept` header instead of the `_format` parameter. Unfortunately,
    there were issues with external caches. Drupal was serving HTML and other formats
    on the same path, only using different `Accept` headers. CDNs and reverse proxies
    do not invalidate cache based on this header alone. The only solution to prevent
    cache poisoning on these external caches, such as `Varnish`, was to ensure the
    implementation of the `Vary: Accept` header. There were, however, too many issues
    regarding CDNs and variance of implementation, so the `_format` parameter was
    introduced instead of appending extensions (`.json` and `.xml`) to paths.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A detail of the problem can be found on the following core issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Refer to external caches mix up response formats on URLs where content negotiation
    is in use at [https://www.drupal.org/node/2364011](https://www.drupal.org/node/2364011)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check how to implement query parameter-based content negotiation as an alternative
    to extensions at [https://www.drupal.org/node/2481453](https://www.drupal.org/node/2481453)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RestResource plugin to expose data through RESTful Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module defines a `RestResource` plugin. This plugin
    is used to define resource endpoints. They are discovered in a module's `Plugin/rest/resource`
    namespace and need to implement the `\Drupal\rest\Plugin\ResourceInterface` interface.
    Drupal 8 provides two implementations of the `RestResource` plugin. The first
    is the `EntityResource` class that is provided by the RESTful Web Services module.
    It implements a driver class that allows it to represent each entity type. The
    second is the **Database Logging** module that provides its own `RestResource`
    plugin, as well. It allows you to retrieve logged messages by IDs. The `\Drupal\rest\Plugin\ResourceBase`
    class provides an abstract base class that can be extended for the `RestResource`
    plugin implementations. If the child class provides a method that matches the
    available HTTP methods, it will support them. For example, if a class has only
    a GET method, you can only interact with that endpoint through HTTP `GET` requests.
    On the other hand, you can provide a trace method that allows an endpoint to support
    HTTP `TRACE` requests.
  prefs: []
  type: TYPE_NORMAL
- en: Drupal 8 provides two implementations of the `RestResource` plugin. The first
    is the `EntityResource` class that is provided by the RESTful Web Services module.
    It implements a `deriver` class that allows it to represent each entity type.
    The second is the Database Logging module that provides its own `RestResource`
    plugin. It allows you to retrieve logged messages by IDs.
  prefs: []
  type: TYPE_NORMAL
- en: Rate limiting your API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many APIs implement a rate limit to prevent abuse of public APIs. When you have
    publicly exposed APIs, you will need to control the amount of traffic hitting
    the service and prevent abusers from slowing down or stopping your service.
  prefs: []
  type: TYPE_NORMAL
- en: The **Rate Limiter** module implements multiple ways to control access to your
    public APIs. There is an option to control the rate limit on specific requests,
    IP address-based limiting, and IP whitelisting.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Rate Limiter module at [https://www.drupal.org/project/rate_limiter](https://www.drupal.org/project/rate_limiter).
  prefs: []
  type: TYPE_NORMAL
- en: Using the HAL format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When installed, the HAL module can format the entity returned to provide links
    to related entities, such as the user or revision or any other entity reference
    field. When the HAL module is installed, you can add it as a supported format,
    then do a request with `_format=hal_json`. The response from the recipe would
    come back with a `_links` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the Drupal.org documentation for the RESTful Web Services module at
    [https://www.drupal.org/documentation/modules/rest](https://www.drupal.org/documentation/modules/rest)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to *Change record: Accept header based routing got replaced by a query
    parameter*, [https://www.drupal.org/node/2501221](https://www.drupal.org/node/2501221)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [*Chapter 7*](3994173f-3d31-4f01-b808-99e01368564b.xhtml), *Plug and
    Play with Plugins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Rate Limiter module* at [https://www.drupal.org/project/rate_limiter](https://www.drupal.org/project/rate_limiter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *REST UI module* at [https://www.drupal.org/project/restui](https://www.drupal.org/project/restui)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using POST to create data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with RESTful Web Services, the HTTP POST method is used to create
    new entities. We will use the **HTTP Basic Authentication** to authenticate a
    user and create a new node.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the exposed node endpoint to create a new piece
    of article content through the RESTful Web Services module. We will use the `json`
    format. In the *There's more...* section, we will discuss how to use the HAL module
    for the `hal_json` format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will use the `Article` content type provided by the standard installation.
    Following the preceding recipe, *Enabling RESTful interfaces*, you should have
    the **REST UI** module added to your Drupal installation using Composer. This
    can be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, the Drupal 8 installation is accessible through `http://127.0.0.1:8888`.
    Use the appropriate URL for your Drupal 8 site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to Extend from the administrative toolbar and install the following Web
    Services modules: Serialization, RESTful Web Services, REST UI, and HTTP Basic
    Authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34895758-9c1f-4d70-bc3f-29fb29064b88.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Configuration and click on REST under Web Services to configure the available
    endpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Enable button for the Content row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6eef4dca-6ac0-4c91-9f30-ad1896460e74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the endpoint enabled, it must be configured. Check the GET and POST methods
    checkbox to allow GET and POST requests. Then, check the json checkbox so that
    data can be returned as JSON. Check the basic_auth checkbox, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1280dbfe-c1e5-45fe-9e22-979038943da6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We create our JSON payload to match the field structure expected by Drupal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we send our JSON payload, we will need to retrieve a CSRF token. We
    do this by performing a `GET` request against `/session/token`. We''ll use the
    returned value in our POST request header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can send the request containing our body payload to the `/entity/node?_format=json`
    endpoint path through an HTTP POST request to create our node. Ensure that you
    pass a valid user login where `admin:admin` is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A successful request will return a `201` header code and the full values of
    the created node, including its identifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View your Drupal site and verify that the node was created, by going to `/node/{nid}`,
    using the node ID from the request response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/164085a1-8cd5-4816-b439-3153931668e2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with content entities and the POST method, the endpoint is different
    to the one used for GET requests. The `\Drupal\rest\Plugin\rest\resource\EntityResource`
    class extends the `\Drupal\rest\Plugin\ResourceBase` base class, which provides
    a route method. If a resource plugin provides an `https://www.drupal.org/link-relations/create`
    link template, then that path will be used for the POST path.
  prefs: []
  type: TYPE_NORMAL
- en: The `EntityResource` class defines `/entity/{entity_type}` as the create link
    template. It then overrides the `getBaseRoute` method to ensure that the `entity_type`
    parameter is properly populated from the definition.
  prefs: []
  type: TYPE_NORMAL
- en: The `EntityResource` class will run a set of conditions for the request. First,
    it will validate the POST request by checking whether the entity is `null`. Then,
    the current user is authorized to create the entity type if the current user also
    has access to edit all fields provided, and finally, it checks whether an identifier
    was passed or not. The last condition is important, as updates are only to be
    made through a PATCH request.
  prefs: []
  type: TYPE_NORMAL
- en: If the entity is validated, it will be saved. On a successful save, an empty
    HTTP 201 response will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with POST requests requires some specific formatting that will be explained
    in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using HAL and understanding _links requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the HAL module and the `hal_json` format, you must provide relationships
    for the entity. This is done through the `_links` parameter in the request. This
    is done to ensure that the entity is properly created with any relationships it
    requires, such as the entity type for a content entities bundle. Another example
    will be to create a comment over a RESTful interface. You will need to provide
    a `_links` entry for the user owning the comment.
  prefs: []
  type: TYPE_NORMAL
- en: The `rest.link_manager` service uses the `rest.link_manager.type` and `rest.link_manager.relation`
    and is responsible for returning the URIs for types and relations. By default,
    a bundle will have a path that resembles `/rest/type/{entity_type}/{bundle}` and
    its relations will resemble `/rest/relation/{entity_type}/{bundle}/{field_name}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a user reference as an example, we will have to populate a `uid` field,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, the documentation is sparse, and the best way to learn what `_links`
    are required is to perform a GET request and study the returned `_links` from
    the HAL JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Working with images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most RESTful APIs utilize `base64` encoding of files to support POST operations
    to upload an image. Unfortunately, this is not supported in the Drupal core. Although
    there is a `serializer.normalizer.file_entity.hal` service that serializes file
    entities into HAL JSON, it does not currently work as of 8.3, but is hopefully
    slated for 8.4.
  prefs: []
  type: TYPE_NORMAL
- en: The `\Drupal\hal\Normalizer\FileEntityNormalizer` class supports denormalization;
    however, it does not handle `base64` and expects binary data.
  prefs: []
  type: TYPE_NORMAL
- en: There is a Drupal core issue for this problem, which is available at [https://www.drupal.org/node/1927648](https://www.drupal.org/node/1927648).
  prefs: []
  type: TYPE_NORMAL
- en: Using Cross-Site Request Forgery tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a POST request, you will need to pass a **Cross-Site Request
    Forgery** (**CSRF**) token if you are authenticating with a session cookie. The
    X-CSRF-Token header is required when using a session cookie to prevent accidental
    API requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using the cookie provider for authentication, you will need to request
    a CSRF token from the `/session/token` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to how to serialize file content (`base64`) to support REST GET/POST/PATCH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on file entity at [https://www.drupal.org/node/1927648](https://www.drupal.org/node/1927648)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using PATCH to update data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with RESTful Web Services, the HTTP PATCH method is used to update
    entities. We will use the HTTP Basic Authentication to authenticate our user and
    update a node.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the exposed node endpoint to create a new piece
    of article content through the RESTful Web Services module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `Article` content type provided by the standard installation.
    Following the *Enabling RESTful interfaces* recipe, you should have the REST UI
    module added to your Drupal installation using Composer. This can be done with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to Extend from the administrative toolbar and install the following Web
    Services modules: Serialization, RESTful Web Services, REST UI, and HTTP Basic
    Authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/855e2758-aa42-405c-bfd2-a9fe8887f66e.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Configuration and click on REST under Web Services to configure the available
    endpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Enable button for the Content row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77fd5bab-7b56-491a-b8dc-5875449c4327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the endpoint enabled, it must be configured. Check the GET, POST, and
    PATCH methods checkbox to allow the GET, POST, and PATCH requests. Then, check
    the json checkbox so that data can be sent as JSON. Check the basic_auth checkbox
    and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89afd28a-d7a4-41ee-9172-c673fe67a83d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a sample `Article` node on your Drupal site that you will modify using
    the REST endpoint. Ensure that you note its path. You will use the same path later
    in our request (for example, `/node/4`). This will also show you the node''s ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07ed6ccb-b637-4132-b79f-cc95b5d73dcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, start building your JSON payload. You must provide the identifier (`nid`)
    value for the existing node and the content type (`type`) value. Ensure that you
    provide the value of `nid`, which matches your current node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you send your JSON payload, you will need to retrieve a CSRF token.
    You can do this by performing a GET request against `/session/token`. Then, use
    the returned value in your POST request header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can send the request that contains your body payload to the `/node/4?_format=json`,
    where `/node/4` matches the path of the node you would like to edit, path through
    an HTTP PATCH request to create our node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A successful request will return a `200` header code and the full values of
    the updated node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View your Drupal site and verify that the node was created, by going to `/node/{nid}`,
    using the node ID from the request response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb4923ad-10ef-4e19-82d5-07f7e583f04d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with content entities and the PATCH method, the endpoint is the
    same as the GET method path. The current user's access is checked to see whether
    they have the permission to update the entity type and each of the submitted fields
    provided in the request body.
  prefs: []
  type: TYPE_NORMAL
- en: Each field provided will be updated on the entity and then validated. If the
    entity is validated, it will be saved. On a successful save, an HTTP 200 response
    will be returned with the entire updated entity's content.
  prefs: []
  type: TYPE_NORMAL
- en: Using Views to provide custom data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides Views plugins that allow you to expose
    data over Views for your RESTful API. This allows you to create a view that has
    a path and outputs data using a serializer plugin. You can use this to output
    entities, such as JSON, HAL JSON, or XML, and it can be sent with appropriate
    headers.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a view that outputs the users of the Drupal site,
    providing their username, email, and picture if provided.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Got o Extend from the administrative toolbar and install the following Web
    Services modules: Serialization and RESTful Web Services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ea0b910-a0ed-48c5-9bbd-91dcd7ff8fce.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Structure and then to Views. Click on Add view. Name the view **API Users**
    and make it show Users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the Provide a REST export checkbox, and type in the `api/users` path.
    This is where requests will be made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5be46af4-ec3b-4ad4-b1ca-6315371b7f4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save and edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the format of the row plugin from Entity to Fields instead so that we
    can control the specific output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that your view has the following user entity fields: Name, Email, and
    Picture.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the User: Name field to a plain text formatter and do not link it to
    the user, so the response does not contain any HTML.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the User: Picture field to use URL to image formatter so that only a
    URL is returned and not HTML.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access your view by visiting `/api/users`; you will receive a JSON response
    containing the user information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful Web Services module provides display, row, and format plugins that
    allows you to export content entities to a serialized format. The REST Export
    display plugin allows you to specify a path to access the RESTful endpoint and
    properly assigns the Content-Type header for the requested format.
  prefs: []
  type: TYPE_NORMAL
- en: The Serializer style is provided as the only supported style plugin for the
    REST export display. This style plugin only supports row plugins that identify
    themselves as data display types. It expects data from the row plugin to be raw
    so that it can be passed to the appropriate serializer.
  prefs: []
  type: TYPE_NORMAL
- en: You then have the option of using the data entity or data field row plugins.
    Instead of returning a render array from their render method, they return raw
    data that will be serialized into the proper format.
  prefs: []
  type: TYPE_NORMAL
- en: With the row plugins returning raw format data and the data serialized by the
    style plugin, the display plugin will then return the response that is converted
    into the proper format via the Serialization module.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Views provide a way to deliver specific RESTful endpoints. We will explore some
    additional features in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the key name in JSON output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Data fields row plugin allows you to configure field aliases. When the data
    is returned to the view, it will have Drupal's machine names. This means that
    custom fields will look something like `field_my_field`, which may not make sense
    to the consumer.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on Settings next to Fields, you can set aliases in the modal form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/886a4cce-5590-41f2-a4d8-8a309ff7fb54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you provide an alias, the fields will match. For example, `user_picture`
    can be changed to `avatar` and the mail key can be changed to `email`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Controlling access to RESTful Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a RESTful endpoint with Views, you are not using the same permissions
    created by the RESTful Web Services module. You will need to define the route
    permissions within the view, allowing you to specify specific roles or permissions
    for the request.
  prefs: []
  type: TYPE_NORMAL
- en: The default GET method provided by the `EntityResource` plugin does not provide
    a way to list entities and allows any entity to be retrieved by an ID. Using Views,
    you can provide a list of entities, limiting them to specific bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Using Views, you can even provide a new endpoint to retrieve a specific entity.
    Using Contextual filters, you can add route parameters and filters to limit and
    validate entity IDs. For example, you may want to expose the article content over
    the API, but not pages.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the RESTful Web Services module, we define specific supported authentication
    providers for an endpoint. The Drupal core provides a cookie provider, which authenticates
    through a valid cookie, such as your regular login experience. Then, there is
    the HTTP Basic Authentication module to support HTTP authentication headers.
  prefs: []
  type: TYPE_NORMAL
- en: There are alternatives that provide more robust authentication methods. With
    cookie-based authentication, you will need to use CSRF tokens to prevent unrequested
    page loads by an unauthorized party. When you use the HTTP authentication, you
    are sending a password for each request in the request header.
  prefs: []
  type: TYPE_NORMAL
- en: '**OAuth** is a popular and open authorization framework. It is a proper authentication
    method that uses tokens and not passwords. In this recipe, we will implement the
    Simple OAuth module to provide OAuth 2.0 authentication for GET and POST requests.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not familiar with OAuth or OAuth 2.0, it is a standard for authorization.
    The implementation of OAuth revolves around the usage of tokens sent in HTTP headers.
    Refer to the OAuth home page for more information at [http://oauth.net/](http://oauth.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 'By following the *Enabling RESTful interfaces* recipe, you should have the
    **REST UI** module added to your Drupal installation using Composer. This can
    be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we must add the Simple OAuth module to our Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to Extend from the administrative toolbar and install the following Web
    Services modules: Serialization, RESTful Web Services, REST UI, and Simple OAuth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/389b25fd-4aba-40de-be34-07c45e9f57bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to Configuration and click on REST under Web Services to configure the available
    endpoints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Enable button for the Content row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9976d9f5-9df6-4e82-99ea-43dc82563d88.png)'
  prefs: []
  type: TYPE_IMG
- en: With the endpoint enabled, it must be configured. Check the GET and POST methods
    checkbox to allow GET and POST requests. Then, check the json checkbox so that
    data can be returned as JSON. Check the oauth2 checkbox and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we can configure the Simple OAuth module, we have to generate a pair
    of keys to encrypt the OAuth tokens. Generate these in a path accessible to Drupal,
    but not available through the web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With the keys generated, go to the Configuration page and then to Simple OAuth.
    Enter in the paths to your private and public key that were just generated and
    click on Save configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b43152d1-044a-4fc9-9d09-d76b01e9b2df.png)'
  prefs: []
  type: TYPE_IMG
- en: From the Simple OAuth configuration form, click on Add client. Provide a label
    for the client and select the Administrator scope. Click on Save to create the
    client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will generate a token through the `/oauth/token` endpoint. You will
    need the ID from the client you just created. We must pass `grant_type`, `client_id`,
    `username`, and `password`. The `grant_type` is `password`, the `client_id` is
    the ID from the created client, and then the `username` and `password` of the
    account you wish to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, the endpoint did not accept a JSON body, but
    only form-encoded values.
  prefs: []
  type: TYPE_NORMAL
- en: The response will contain an `access_token` property. This is to be used as
    your token when making API requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Request a node over REST with the `Authorization: Bearer [token]` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Simple OAuth module is built using the `League\OAuth2` PHP library, a community
    de facto library for OAuth2 implementation.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical authentication request, there is an authentication manager that
    uses the `authentication_collector` service to collect all the tagged authentication
    provider servers. Based on the provider's set priority, each service is invoked
    to check whether it applies to the current request. Each applied authentication
    provider then gets invoked to see whether the authentication is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: For the RESTful Web Services module, the process is more explicit. The providers
    identified in the `supported_auth` definition for the endpoint are the only services
    that run through the *applies* and *authenticates* process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will explore more information on working with authentication providers and
    the RESTful Web Services module in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication provider services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with the RESTful Web Services module endpoints, the `supported_auth`
    values reference services tagged with `authentication_provider`. Out of the box,
    Drupal supports cookie authentication. The following code is provided by the `basic_auth`
    module to support the HTTP header authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: An authentication provider can be created by creating a class in your module's
    `Authentication\Provider` namespace and implementing the `\Drupal\Core\Authentication\AuthenticationProviderInterface`
    interface. Then, register the class as a service in your module's `services.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Page cache request policies and authenticated Web service requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with data that expects authenticated users, the authentication
    service provider should also provide a page cache service handler. Services that
    are tagged with `page_cache_request_policy` have the ability to check whether
    the content is cached or not. This prevents authorization requests from being
    cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is taken from the `basic_auth` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `\Drupal\basic_auth\PageCache\DisallowBasicAuthRequests` class implements
    the `\Drupal\Core\PageCache\RequestPolicyInterface` interface. The check method
    allows the page cache policy to explicitly deny or remain neutral on a page's
    ability to be cached. The `basic_auth` module checks whether the default authentication
    headers are present. For the `simple_oauth` module, it checks whether a valid
    token is present.
  prefs: []
  type: TYPE_NORMAL
- en: This is an important security measure if you are implementing your own authentication
    services.
  prefs: []
  type: TYPE_NORMAL
- en: A page cache policy service can be implemented by creating a class in your module's
    `PageCache` namespace and implementing the `\Drupal\Core\PageCache\ResponsePolicyInterface`
    interface. Then, we need to register the class as a service in your module's `services.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: The IP Authentication provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some APIs that implement server-to-server communication will authenticate using
    IP address whitelists. For this use case, we have the IP Consumer Auth module.
    Whitelisted IP addresses are controlled by a form that saves a configuration value.
  prefs: []
  type: TYPE_NORMAL
- en: If an IP address is whitelisted, the user is authenticated as an anonymous user.
    While this may not be recommended for POST, PATCH, and DELETE requests, it can
    provide a simple way to control specific GET endpoints in a private network.
  prefs: []
  type: TYPE_NORMAL
- en: You can download IP Consumer Auth from its project page at [https://www.drupal.org/project/ip_consumer_auth](https://www.drupal.org/project/ip_consumer_auth).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the OAuth Community Site at [http://oauth.net/](http://oauth.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the OAuth module for OAuth 1.0 support at [https://www.drupal.org/project/oauth](https://www.drupal.org/project/oauth)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the simple OAuth module for OAuth 2.0 support at [https://www.drupal.org/project/simple_oauth](https://www.drupal.org/project/simple_oauth)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the IP Consumer Auth module at [https://www.drupal.org/project/ip_consumer_auth](https://www.drupal.org/project/ip_consumer_auth)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JSON API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a backend API for frontend consumers, there is often much debate
    on naming conventions and returned value structures. In comes `{json:api}`, an
    open source specification set to standardize and simplify the building of APIs,
    which consume and return JSON payloads. The specification and documentation can
    be found at [http://jsonapi.org/](http://jsonapi.org/).
  prefs: []
  type: TYPE_NORMAL
- en: For Drupal, there is a community-lead effort to provide a robust JSON API specification
    implementation to turn Drupal into a streamlined API server. This recipe will
    install the JSON API module and show how to enable resources.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the RESTful Web Services module provided by Drupal core, the JSON
    API module does not provide a user interface. It also enables all content to be
    available over the API automatically (given that users have permissions configured
    to access the endpoint.) The JSON API Extra module changes that, and this will
    be covered in the *There's more...* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The JSON API module can be found at [https://www.drupal.org/project/jsonapi](https://www.drupal.org/project/jsonapi)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create sample content using the `Article` content type provided by the standard
    Drupal installation. This will make testing the GET methods much easier.
  prefs: []
  type: TYPE_NORMAL
- en: When making requests, all endpoint paths are prefixed with `jsonapi`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we must add the JSON API module to our Drupal site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the JSON API and Serialization module. Once the module is installed,
    the API endpoints will be active.:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3e32ab7-f92b-44c0-9f8d-32120d746e96.png)'
  prefs: []
  type: TYPE_IMG
- en: To perform a request, you must pass an Accept header with the value `application/vnd.api+json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the JSON API specification, every resource must have a unique type name,
    and JSON API derives this from the entity type and its bundle. The endpoint for
    retrieving Article nodes will be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The entire request can be executed with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The response will resemble the following. The content values will be in the
    attributes property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSON API module implements the `{json:api}` specification. Like the RESTful
    Web Services module provided by Drupal core, it exposes data over various endpoints.
    It builds on top of Drupal's existing routing system to work with non-HTML formats.
    The major difference is it follows a community-driven specification on how the
    data should be formatted, linked, filtered, sorted, and more.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we'll cover filtering, paging, sorting, and the JSON API Extras module.
  prefs: []
  type: TYPE_NORMAL
- en: Paginating, filtering, and sorting requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The request in the recipe will return all available Article nodes in the system.
    These can be paginated, filtered, and sorted. Each of these operations is done
    through query parameters, which contain an array of values.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination is done by appending a `page` query parameter. To limit the request
    to 10 nodes, we would append `?page[limit]=10`. To access the next set of results,
    we would also pass `page[offset]=10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of returning the first and second pages of results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Each request contains a links property; this will also contain the next and
    previous links when using a paginated result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering is done by appending a `filter` query parameter. The following is
    an example for requesting all nodes that have been promoted to the front page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Each filter is defined by a name--in the preceding example, it is `promoted`.
    The filter then takes `path`, which is the field to filter on. The `value` and
    `operator` decide how to filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorting is the simplest operation. A sort query parameter is added. The field
    name value is the field to sort by, and to sort in descending order, you add a
    minute symbol in front of the field name. The following examples show how to sort
    by the `nid` in ascending and descending order, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Installing the JSON API Extras module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JSON API Extras module provides a user interface for additional customization.
    The JSON API Extras module should be added to your Drupal installation like all
    other modules, using Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Once the module is installed in Drupal, you will have the ability to enable
    or disable endpoints, change resource names, alter resource paths, disable fields,
    alias field names, and enhance field outputs.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the API path prefix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API path prefix can be changed from `jsonapi` to `api` or any other prefix
    using the extras module.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the administrative toolbar, navigate to Configuration. Under the Web services
    section, click on JSON API Overwrites to customize the JSON API implementation.
    The Settings tab allows modification of the API path prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b4ec93f-c4d3-4312-b274-064987cc096c.png)'
  prefs: []
  type: TYPE_IMG
- en: Disabling and enhancing returned entity fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSON API Extras module allows overwriting endpoints automatically exposed
    by the JSON API module. This allows disabling fields from being returned. It also
    allows using enhancers to simplify the structure of a field property.
  prefs: []
  type: TYPE_NORMAL
- en: From the administrative toolbar, go to Configuration. Under the Web services
    section, click on JSON API Overwrites to customize the JSON API implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable an endpoint, click on Overwrite on any endpoint. Check the Disabled
    checkbox to turn off that specific endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/467d2d17-7adc-4448-8020-6802ac5546ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To disable, alias, or use an enhancer, click on Overwrite on any endpoint.
    The checkbox will allow you to prevent a field from being used in the API. The
    enhancers allow you to simplify fields when returned or used in POST/PATCH requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de9a7553-27da-4a7e-8fca-182561faa36d.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the `created` and `changed` fields will no longer return Unix
    timestamps, but RFC ISO8601-formatted timestamps. The `promote` and `sticky` fields
    will return their value directly, not nested under a `value` property. Finally,
    no revision information fields will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Contenta CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contenta CMS is a decoupled, API-driven Drupal distribution built using the
    JSON API. It is being built through the same community initiative pushing forward
    the JSON API module. The project's home page can be found at [http://www.contentacms.org/.](http://www.contentacms.org/.)
  prefs: []
  type: TYPE_NORMAL
- en: It provides many preconfigured options, including customizations to default
    endpoints. It also provides Simple OAuth to set up decoupled authentication with
    your frontend consumer and the API backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of delivering a distribution, the community contributors have developed
    various frontend consumers as examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular**: [https://github.com/contentacms/contenta_angular](https://github.com/contentacms/contenta_angular)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue/Nuxt**: [https://github.com/contentacms/contenta_vue_nuxt](https://github.com/contentacms/contenta_vue_nuxt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ember.js**: [https://github.com/contentacms/contenta_ember](https://github.com/contentacms/contenta_ember)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ionic**: [https://github.com/contentacms/contenta_ionic](https://github.com/contentacms/contenta_ionic)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React**: [https://github.com/contentacms/contenta_react](https://github.com/contentacms/contenta_react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON API project page at [https://www.drupal.org/project/jsonapi](https://www.drupal.org/project/jsonapi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON API Extras page at [https://www.drupal.org/project/jsonapi_extras](https://www.drupal.org/project/jsonapi_extras)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON API module documentation at [https://www.drupal.org/docs/8/modules/json-api/json-api](https://www.drupal.org/docs/8/modules/json-api/json-api)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON API module video tutorials at [https://www.youtube.com/playlist?list=PLZOQ_ZMpYrZsyO-3IstImK1okrpfAjuMZ](https://www.youtube.com/playlist?list=PLZOQ_ZMpYrZsyO-3IstImK1okrpfAjuMZ)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `{json:api}` specification documentation at [http://jsonapi.org/](http://jsonapi.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
