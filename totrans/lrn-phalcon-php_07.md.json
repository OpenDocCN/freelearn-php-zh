["```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>{% block pageTitle %}Learning Phalcon{% endblock %}</title>\n\n{{ assets.outputCss('headerCss') }}\n{% block css %}{% endblock %}\n\n<!--[if lt IE 9]>\n      <script src=\"img/html5shiv.min.js\"></script>\n      <script src=\"img/respond.min.js\"></script>\n<![endif]-->\n</head>\n<body>\n  {% include 'common/topbar.volt' %}\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-sm-3 col-md-2 sidebar\">\n        {% include 'common/sidebar.volt' %}\n        </div>\n        <div class=\"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main\">\n          {% block body %}\n          <h1 class=\"page-header\">Dashboard</h1>\n          <h2 class=\"sub-header\">Section title</h2>\n          <div class=\"table-responsive\">\n\n          </div>\n          {% endblock %}\n        </div>\n      </div>\n    </div>\n\n    {{ assets.outputJs('footerJs') }}\n  {% block javascripts %} {% endblock %}\n</body>\n</html>\n```", "```php\n{% include 'common/sidebar' with {'categories': categories} %}\n```", "```php\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"{{ url('') }}\">Learning Phalcon</a>\n    </div>\n    <div id=\"navbar\" class=\"navbar-collapse collapse\">\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li><a href=\"{{ url('auth/signout') }}\">Sign out</a></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n```", "```php\n{% set c_name = dispatcher.getControllerName() %} \n<ul class=\"nav nav-sidebar\"> \n  <li{% if c_name == 'article' %} class=\"active\"{% endif %}>\n    <a href=\"{{ url('article/list') }}\">Articles</a></li> \n  <li{% if c_name == 'category' %} class=\"active\"{% endif %}>\n    <a href=\"{{ url('category/list') }}\">Categories</a></li> \n  <li{% if c_name == 'hashtag' %} class=\"active\"{% endif %}>\n    <a href=\"{{ url('hashtag/list') }}\">Hashtags</a></li> \n  <li{% if c_name == 'user' %} class=\"active\"{% endif %}>\n    <a href=\"{{ url('user/list') }}\">Users</a></li> \n</ul>\n```", "```php\n$di['voltService'] = function ($view, $di) use ($config) {\n  $volt = new \\Phalcon\\Mvc\\View\\Engine\\Volt($view, $di);\n  // ... code\n  $compiler = $volt->getCompiler();\n  $compiler->addFunction('randomGen', function($resolvedArgs, $exprArgs) {\n    return 'App\\Core\\Library\\Util::randomGen(' . $resolvedArgs . ')';\n  });\n  //...code\n\n  return $volt;\n};\n```", "```php\n{{ randomGen(5) }}\n```", "```php\n<?php\n$c_name = $this->dispatcher->getControllerName();\n\nif (c_name == 'article') {\n   // Link is active\n}\n```", "```php\nmodules/Core/Config/config.php\nmodules/Core/Config/services.php\nmodules/Core/Controllers/IndexController.php\nmodules/Core/Module.php\n```", "```php\n'core' => array(\n    'className' => 'App\\Core\\Module',\n    'path' => __DIR__.'/Core/Module.php',\n),\n```", "```php\n    <?php\n    namespace App\\Api\\Controllers;\n\n    use Phalcon\\Http\\Response;\n\n    class BaseController extends \\App\\Core\\Controllers\\BaseController\n    {\n      // code\n    }\n    ```", "```php\n    <?php\n    namespace App\\Backoffice\\Controllers;\n\n    class BaseController extends \\App\\Core\\Controllers\\BaseController\n    {\n      // code\n    }\n    ```", "```php\n->addCss($assets_dir.'default/bower_components/bootstrap/dist/css/bootstrap.min.css')\n```", "```php\n{{stylesheetLink('../assets/default/bower_components/bootstrap/dist/css/bootstrap.min.css') }}\n```", "```php\n<?php\nnamespace App\\Api\\Controllers;\n\nclass HashtagsController extends BaseController{\n  public function listAction() {\n  try {\n    $manager = $this->getDI()->get('core_hashtag_manager');\n    $page    = $this->request->getQuery('p', 'int', 0);\n\n    $st_output = $manager->restGet([], [], $page);\n\n    return $this->render($st_output);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage(),\n    ], $e->getCode());\n  }\n}\n```", "```php\npublic function getAction($id) {\n  try {\n    $manager = $this->getDI()->get('core_hashtag_manager');\n\n    $st_output = $manager->restGet([\n      'id = :id:',\n      'bind' => [\n        'id' => $id,\n      ],\n    ]);\n\n    return $this->render($st_output);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage(),\n    ], $e->getCode());\n  }\n}\n```", "```php\npublic function updateAction($id) {\n  try {\n    $manager = $this->getDI()->get('core_hashtag_manager');\n\n    if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n      $data = $this->request->getJsonRawBody(true);\n    } else {\n      $data = [$this->request->getPut()];\n    }\n\n    if (count($data[0]) == 0) {\n      throw new \\Exception('Please provide data', 400);\n    }\n\n    $result = $manager->restUpdate($id, $data);\n\n    return $this->render($result);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage(),\n    ], $e->getCode());\n  }\n}\n```", "```php\npublic function deleteAction($id) {\n  try {\n    $manager = $this->getDI()->get('core_hashtag_manager');\n\n    $st_output = $manager->restDelete($id);\n\n    return $this->render($st_output);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage(),\n    ], $e->getCode());\n  }\n}\n```", "```php\npublic function createAction() {\n  try {\n    $manager   = $this->getDI()->get('core_hashtag_manager');\n\n    if ($this->request->getHeader('CONTENT_TYPE') == 'application/json') {\n      $data = $this->request->getJsonRawBody(true);\n    } else {\n      $data = $this->request->getPost();\n    }\n\n    if (count($data) == 0) {\n      throw new \\Exception('Please provide data', 400);\n    }\n\n    $st_output = $manager->restCreate($data);\n\n    return $this->render($st_output);\n  } catch (\\Exception $e) {\n    return $this->render([\n      'code' => $e->getCode(),\n      'message' => $e->getMessage(),\n    ], $e->getCode());\n    }\n  }\n}\n```", "```php\n$hashtags = new \\Phalcon\\Mvc\\Router\\Group([\n    'module' => 'api',\n    'controller' => 'hashtags',\n]);\n\n$hashtags->setPrefix($versions['v1'].'/hashtags');\n\n$hashtags->addGet('',         ['action' => 'list']);\n$hashtags->addGet('/{id}',    ['action' => 'get']);\n$hashtags->addPut('/{id}',    ['action' => 'update']);\n$hashtags->addDelete('/{id}', ['action' => 'delete']);\n$hashtags->addPost('',        ['action' => 'create']);\n\n$router->mount($hashtags);\n```", "```php\n$ curl -i -X GET -H \"Content-Type:application/json\" -H \"APIKEY:6y825Oei113X3vbz78Ck7Fh7k3xF68Uc0lki41GKs2Z73032T4z8m1I81648JcrY\"  -H \"TOKEN:mySecretToken\" 'http://learning-phalcon.localhost/api/v1/hashtags'\n\n```", "```php\npublic function apiGet($uri, $params = []) {\n  $config   = $this->getDI()->get('config')->toArray();\n  $uri      = $config['apiUrl'].$uri;\n  $curl     = new \\Phalcon\\Http\\Client\\Provider\\Curl();\n  $response = $curl->get($uri, $params, [\"APIKEY:\".$config['apiKeys'][0]]);\n\n    if ($response->header->statusCode != 200) {\n  throw new \\Exception('API error: '.$response->header->status);\n    }\n\n    return json_decode($response->body, true);\n}\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass HashtagController extends BaseController {\n  public function indexAction() {\n    return $this->dispatcher->forward(['action' => 'list']);\n  }\n\n  /**\n  * Hashtags list\n  */\n  public function listAction() {\n    $page = $this->request->getQuery('p', 'int', 1);\n\n    try {\n      $hashtags = $this->apiGet('hashtags?p='.$page);\n\n      $this->view->hashtags = $hashtags;\n    } catch (\\Exception $e) {\n      $this->flash->error($e->getMessage());\n    }\n  }\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<div class=\"pull-left\">\n    <h1>Hashtags</h1>\n</div>\n<div class=\"pull-right\">\n  <a class=\"btn btn-success\" href=\"{{ url('hashtag/add') }}\" aria-label=\"Left Align\">\n    <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> New\n  </a>\n</div>\n<div class=\"clearfix\"></div>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Hashtag</th>\n          <th>Created at</th>\n          <th>Options</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for hashtag in hashtags['items'] %}\n        <tr>\n          <th scope=\"row\">{{ hashtag['id'] }}</th>\n            <td>{{ hashtag['hashtag_name'] }}</td>\n            <td>{{ hashtag['hashtag_created_at'] }}</td>\n            <td>\n              <a class=\"btn btn-default btn-xs\" href=\"#\" aria-label=\"Left Align\">\n                <span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span>\n              </a>\n              <a class=\"btn btn-danger btn-xs\" href=\"#\" aria-label=\"Left Align\">\n                <span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n              </a>\n              </td>\n            </tr>\n            {% else %}\n            <tr>\n              <td colspan=\"4\">There are no hashtags in your database</td>\n            </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </div>\n</div>\n{% if (hashtags['total_pages'] > 1) %}\n{% include 'common/paginator' with {'page_url' : url('hashtag/list'), 'stack' : hashtags} %}\n{% endif %}\n{% endblock %}\n```", "```php\n<nav>\n  <ul class=\"pager\">\n    <li class=\"previous {% if (stack['current'] < 2) %}disabled{% endif %}\"><a href=\"{{ page_url ~ '?p=' ~ stack['before'] }}\"><span aria-hidden=\"true\">&larr;</span> Previous</a></li>\n\n    <li class=\"next {% if (stack['current'] == stack['total_pages']) %}disabled{% endif %}\"><a href=\"{{ page_url ~ '?p=' ~ stack['next'] }}\">Next <span aria-hidden=\"true\">&rarr;</span></a></li>\n  </ul>\n</nav>\n```", "```php\n<?php\nnamespace App\\Core\\Forms;\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Identical;\n\nclass HashtagForm extends Form {\n  public function initialize() {\n    $hashtag_name = new Text('hashtag_name', array(\n      'placeholder' => 'Name',\n    ));\n\n    $hashtag_name->addValidators(array(\n      new PresenceOf(array(\n        'message' => 'Name is required',\n      ))\n    ));\n\n    $this->add($hashtag_name);\n\n    //CSRF\n    $csrf = new Hidden('csrf');\n\n    $csrf->addValidator(\n      new Identical(array(\n        'value' => $this->security->getSessionToken(),\n        'message' => 'CSRF validation failed',\n      ))\n    );\n\n    $this->add($csrf);\n\n    $this->add(new Submit('add', array(\n      'class' => 'btn btn-lg btn-primary btn-block',\n    )));\n  }\n}\n```", "```php\npublic function addAction() {\n  $manager = $this->getDI()->get('core_hashtag_manager');\n  $this->view->form = $manager->getForm();\n}\n\npublic function createAction() {\n  if (!$this->request->isPost()) {\n    return $this->response->redirect('hashtag/list');\n  }\n\n  $manager = $this->getDI()->get('core_hashtag_manager');\n  $form    = $manager->getForm();\n\n  if ($form->isValid($this->request->getPost())) {\n    try {\n      $manager = $this->getDI()->get('core_hashtag_manager');\n      $manager->create($this->request->getPost());\n      $this->flashSession->success('Object was created successfully');\n\n      return $this->response->redirect('hashtag/list');\n    } catch (\\Exception $e) {\n      $this->flash->error($e->getMessage());\n      return $this->dispatcher->forward(['action' => 'add']);\n    }\n  } else {\n    foreach ($form->getMessages() as $message) {\n      $this->flash->error($message->getMessage());\n    }\n    return $this->dispatcher->forward(['action' => 'add', 'controller' => 'hashtag']);\n  }\n}\n```", "```php\nuse App\\Core\\Forms\\HashtagForm;\nclass HashtagManager extends BaseManager{\n  ...\n  public function getForm($entity = null, $options = null) {\n    return new HashtagForm($entity, $options);\n  }\n  ...\n}\n```", "```php\npublic function create(array $st_inputData)\n{\n    $st_defaultData = [\n        'hashtag_name' => new \\Phalcon\\Db\\RawValue('NULL')\n    ];\n\n    $st_data = array_merge($st_defaultData, $st_inputData);\n\n    $hashtag = new Hashtag();\n    $hashtag->setHashtagName($st_data['hashtag_name']);\n\n    return $this->save($hashtag, 'create');\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Add</h1>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('hashtag/create') }}\">\n      <div class=\"form-group\">\n        <label for=\"hashtag_name\">Name</label>\n        {{ form.render('hashtag_name', {'class':'form-control'}) }}\n      </div>\n    {{ form.render('add', {'value':'Add'}) }}\n    {{ form.render('csrf', {'value':security.getToken()}) }}\n    </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\nALTER TABLE hashtag ADD UNIQUE (hashtag_name);\n```", "```php\npublic function validation(){\n  $this->validate(new Uniqueness([\n    \"field\" => \"hashtag_name\",\n    \"message\" => \"This hashtag already exists\",\n  ]));\n\n  return $this->validationHasFailed() != true;\n}\n```", "```php\npublic function update(array $st_inputData){\n  $st_defaultData = [\n    'hashtag_name' => new \\Phalcon\\Db\\RawValue('NULL')\n  ];\n\n  $st_data = array_merge($st_defaultData, $st_inputData);\n\n  $hashtag = Hashtag::findFirstById($st_data['id']);\n\n  if (!$hashtag) {\n    throw new \\Exception('Object not found');\n  }\n\n  $hashtag->setHashtagName($st_data['hashtag_name']);\n\n  return $this->save($hashtag, 'update');\n}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Edit</h1>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('hashtag/update') }}\">\n      <div class=\"form-group\">\n        <label for=\"hashtag_name\">Name</label>\n        {{ form.render('hashtag_name', {'class':'form-control'})}}\n          </div>\n          {{ form.render('save', {'value':'Save'}) }}\n          {{ form.render('csrf', {'value':security.getToken()})}}\n    </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\npublic function editAction($id){\n  $manager = $this->getDI()->get('core_hashtag_manager');\n  $hashtag = $manager->findFirstById($id);\n\n  if (!$hashtag) {\n    $this->flashSession->error('Object not found');\n    return $this->response->redirect('hashtag/list');\n  }\n\n  $this->persistent->set('id', $id);\n\n  $this->view->form = $manager->getForm($hashtag);\n}\n```", "```php\npublic function updateAction(){\n  if (!$this->request->isPost()) {\n    return $this->response->redirect('hashtag/list');\n  }\n\n  $manager    = $this->getDI()->get('core_hashtag_manager');\n  $hashtag_id = $this->persistent->get('id');\n  $hashtag    = $manager->findFirstById($hashtag_id);\n  $form       = $manager->getForm($hashtag);\n\n  if ($form->isValid($this->request->getPost())) {\n    try {\n      $manager = $this->getDI()->get('core_hashtag_manager');\n      $manager->update([\n        'hashtag_name' => $this->request->getPost('hashtag_name',['string','trim']),\n        'id' => $hashtag_id\n      ]);\n      $this->flashSession->success('Object was updated successfully');\n\n      return $this->response->redirect('hashtag/list');\n    } catch (\\Exception $e) {\n      $this->flash->error($e->getMessage());\n      return $this->dispatcher->forward(['action' => 'edit']);\n    }\n  } else {\n    foreach ($form->getMessages() as $message) {\n      $this->flash->error($message->getMessage());\n    }\n    return $this->dispatcher->forward(['action' => 'edit', 'controller' => 'hashtag']);\n  }\n}\n```", "```php\n<a class=\"btn btn-default btn-xs\" href=\"{{ url('hashtag/edit/' ~ hashtag['id']) }}\" aria-label=\"Left Align\">\n    <span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span>\n</a>\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Confirm deletion</h1>\n<h3>Are you sure you want to delete the selected element?</3>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('hashtag/delete/' ~ id) }}\" class=\"form-inline\">\n    <input type=\"submit\" value=\"Yes, delete\" class=\"btn btn-sm btn-danger btn-block\">\n    <a href=\"{{ url('hashtag/list') }}\" class=\"btn btn-lg btn-default btn-block\">Cancel</a>\n      </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\npublic function deleteAction($id){\n  if ($this->request->isPost()) {\n    try {\n      $manager = $this->getDI()->get('core_hashtag_manager');\n      $manager->delete($id);\n      $this->flashSession->success('Item has been deleted successfully');\n    } catch (\\Exception $e) {\n      $this->flash->error($e->getMessage());\n    }\n\n    return $this->response->redirect('hashtag/list');\n  }\n  $this->view->id = $id;\n}\n```", "```php\npublic function delete($id){\n  $object = Hashtag::findFirstById($id);\n\n  if (!$object) {\n    throw new \\Exception('Hashtag not found');\n  }\n\n  if (false === $object->delete()) {\n    foreach ($object->getMessages() as $message) {\n      $error[] = (string) $message;\n    }\n\n    throw new \\Exception(json_encode($error));\n  }\n\n  return true;\n}\n```", "```php\n<a class=\"btn btn-danger btn-xs\" href=\"{{ url('hashtag/delete/' ~ hashtag['id']) }}\" aria-label=\"Left Align\">\n    <span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n</a>\n```", "```php\nALTER TABLE  `learning_phalcon`.`category_translation` ADD UNIQUE (\n`category_translation_category_id` ,\n`category_translation_lang`\n) COMMENT  '';\n```", "```php\n'i18n' => [\n  'locales' => [ //ISO 639-1: two-letter codes, one per language\n    'en' => 'English'\n  ]\n]\n```", "```php\n<?php\nnamespace App\\Core\\Forms;\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Validation\\Validator\\Identical;\n\nclass CategoryForm extends Form{\n  private $edit = false;\n\n  public function initialize($entity = null, $options = null) {\n    if (isset($options['edit']) && $options['edit'] === true) {\n      $this->edit = true;\n    }\n\n    $locales = $this->getDI()->get('config')->i18n->locales->toArray();\n\n    foreach ($locales as $locale => $name) {\n\n      if (true === $this->edit) {\n        $translations = $entity->getTranslations([\"category_translation_lang = '$locale'\"])->toArray();\n      }\n\n      $category_name[$locale] = new Text (\"translations[$locale][category_translation_name]\", [\n          'value' => $this->edit === true ? $translations[0]['category_translation_name'] : null\n      ]);\n\n      $category_slug[$locale] = new Text (\"translations[$locale][category_translation_slug]\", [\n          'value' => $this->edit === true ? $translations[0]['category_translation_slug'] : null\n      ]);\n\n      $category_lang[$locale] = new Hidden ( \"translations[$locale][category_translation_lang]\", [\n          'value' => $locale\n      ]);\n\n      $this->add( $category_name[$locale] );\n      $this->add( $category_slug[$locale] );\n      $this->add( $category_lang[$locale] );\n    }\n\n    //CSRF\n    $csrf = new Hidden('csrf');\n\n    $csrf->addValidator(\n      new Identical(array(\n        'value' => $this->security->getSessionToken(),\n        'message' => 'CSRF validation failed',\n      ))\n    );\n\n    $this->add($csrf);\n\n    $this->add(new Submit('save', array(\n      'class' => 'btn btn-lg btn-primary btn-block',\n    )));\n  }\n}\n```", "```php\n$this->view->locales = $this->getDI()->get('config')->i18n->locales->toArray();\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<div class=\"pull-left\">\n  <h1>Categories</h1>\n</div>\n<div class=\"pull-right\">\n  <a class=\"btn btn-success\" href=\"{{ url('category/add') }}\" aria-label=\"Left Align\">\n    <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> New\n  </a>\n</div>\n<div class=\"clearfix\"></div>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Category</th>\n          <th>Slug</th>\n          <th>Created at</th>\n          <th>Options</th>\n        </tr>\n      </thead>\n    <tbody>\n    {% for record in records['items'] %}\n      <tr>\n        <th scope=\"row\">{{ record['id'] }}</th>\n          <td>{{ record['category_translations'][0]['category_translation_name'] }}</td>\n          <td>{{ record['category_translations'][0]['category_translation_slug'] }}</td>\n          <td>{{ record['category_created_at'] }}</td>\n          <td>\n            <a class=\"btn btn-default btn-xs\" href=\"{{ url('category/edit/' ~ record['id']) }}\" aria-label=\"Left Align\">\n              <span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span>\n            </a>\n            <a class=\"btn btn-danger btn-xs\" href=\"{{ url('category/delete/' ~ record['id']) }}\" aria-label=\"Left Align\">\n              <span class=\"glyphicon glyphicon-trash\" aria-hidden=\"true\"></span>\n            </a>\n          </td>\n        </tr>\n          {% else %}\n        <tr>\n          <td colspan=\"4\">There are no records in your database</td>\n        </tr>\n          {% endfor %}\n      </tbody>\n    </table>\n  </div>\n</div>\n{% if (records['total_pages'] > 1) %}\n{% include 'common/paginator' with {'page_url' : url('category/list'), 'stack' : records} %}\n{% endif %}\n{% endblock %}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Add</h1>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('category/create') }}\">\n      {% for locale, name in locales %}\n        <h4>Category ({{ name }})</h4>\n        <div class=\"form-group\">\n          <label for=\"category_name\">Name</label>{{ form.render('translations['~locale~'][category_translation_name]', {'class':'form-control'}) }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"category_slug\">Slug</label>\n            {{ form.render('translations['~locale~'][category_translation_slug]', {'class':'form-control'}) }}\n        </div>\n        {{ form.render('translations['~locale~'][category_translation_lang]') }}\n        {% endfor %}\n        {{ form.render('save', {'value':'Save'}) }}\n        {{ form.render('csrf', {'value':security.getToken()}) }}\n    </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n<h1>Confirm deletion</h1>\n<h3>Are you sure you want to delete the selected element?</3>\n<hr>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">\n    <form method=\"post\" action=\"{{ url('category/delete/' ~ id) }}\" class=\"form-inline\">\n      <input type=\"submit\" value=\"Yes, delete\" class=\"btn btn-sm btn-danger btn-block\">\n      <a href=\"{{ url('category/list') }}\" class=\"btn btn-lg btn-default btn-block\">Cancel</a>\n    </form>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n{% extends 'layout.volt' %}\n{% block body %}\n{% include 'common/delete' with {'url':url('category/delete/' ~ id)} %}\n{% endblock %}\n```", "```php\n<?php\nnamespace App\\Backoffice\\Controllers;\n\nclass CategoryController extends BaseController{\n  public function indexAction() {\n    return $this->dispatcher->forward(['action' => 'list']);\n  }\n\n  public function listAction() {\n    $page = $this->request->getQuery('p', 'int', 1);\n\n    try {\n      $records = $this->apiGet('categories?p='.$page);\n\n      $this->view->records = $records;\n    } catch (\\Exception $e) {\n      $this->flash->error($e->getMessage());\n    }\n  }\n\n  public function addAction() {\n    $manager = $this->getDI()->get('core_category_manager');\n    $this->view->form = $manager->getForm();\n  }\n\n  public function editAction($id) {\n    $manager = $this->getDI()->get('core_category_manager');\n    $object  = $manager->findFirstById($id);\n\n    if (!$object) {\n      $this->flashSession->error('Object not found');\n      return $this->response->redirect('category/list');\n    }\n\n    $this->persistent->set('id', $id);\n\n    $this->view->form = $manager->getForm($object,['edit' => true]);\n  }\n\n  public function createAction() {\n    if (!$this->request->isPost()) {\n      return $this->response->redirect('category/list');\n    }\n\n    $manager = $this->getDI()->get('core_category_manager');\n    $form    = $manager->getForm();\n\n    if ($form->isValid($this->request->getPost())) {\n      try {\n        $manager   = $this->getDI()->get('core_category_manager');\n        $post_data = $this->request->getPost();\n        $data      = array_merge($post_data, ['category_is_active' => 1]);\n\n        $manager->create($data);\n        $this->flashSession->success('Object was created successfully');\n\n        return $this->response->redirect('category/list');\n      } catch (\\Exception $e) {\n        $this->flash->error($e->getMessage());\n        return $this->dispatcher->forward(['action' => 'add']);\n      }\n    } else {\n      foreach ($form->getMessages() as $message) {\n        $this->flash->error($message->getMessage());\n      }\n      return $this->dispatcher->forward(['action' => 'add', 'controller' => 'category']);\n    }\n  }\n\n  public function updateAction() {\n    if (!$this->request->isPost()) {\n      return $this->response->redirect('category/list');\n    }\n\n    $manager    = $this->getDI()->get('core_category_manager');\n    $object_id  = $this->persistent->get('id');\n    $object     = $manager->findFirstById($object_id);\n    $form       = $manager->getForm($object);\n\n    if ($form->isValid($this->request->getPost())) {\n      try {\n        $manager = $this->getDI()->get('core_category_manager');\n        $manager->update(array_merge($this->request->getPost(), ['id' => $object_id]));\n        $this->flashSession->success('Object was updated successfully');\n\n        return $this->response->redirect('category/list');\n      } catch (\\Exception $e) {\n        $this->flash->error($e->getMessage());\n        return $this->dispatcher->forward(['action' => 'edit']);\n      }\n    } else {\n      foreach ($form->getMessages() as $message) {\n        $this->flash->error($message->getMessage());\n      }\n      return $this->dispatcher->forward(['action' => 'edit', 'controller' => 'category']);\n    }\n  }\n  public function deleteAction($id) {\n    if ($this->request->isPost()) {\n      try {\n        $manager = $this->getDI()->get('core_category_manager');\n        $manager->delete($id);\n        $this->flashSession->success('Object has been deleted successfully');\n      } catch (\\Exception $e) {\n        $this->flashSession->error($e->getMessage());\n      }\n\n      return $this->response->redirect('category/list');\n    }\n\n    $this->view->id = $id;\n  }\n}\n```", "```php\n<?php\nnamespace App\\Core\\Managers;\n\nuse App\\Core\\Models\\Category;\nuse App\\Core\\Models\\CategoryTranslation;\nuse App\\Core\\Forms\\CategoryForm;\n\nclass CategoryManager extends BaseManager{\n  public function getForm($entity = null, $options = null) {\n    return new CategoryForm($entity, $options);\n  }\n\n  public function find($parameters = null) {\n    return Category::find($parameters);\n  }\n\n  public function findFirst($parameters = null) {\n    return Category::findFirst($parameters);\n  }\n\n  public function findFirstById($id) {\n    return Category::findFirstById($id);\n  }\n\n  public function create(array $input_data) {\n    $default_data = array('translations' => array(\n      'en' => array(\n        'category_translation_name' => 'Category name',\n        'category_translation_slug' => '',\n        'category_translation_lang' => 'en',\n      ),\n    ),\n    'category_is_active' => 0,);\n\n    $data = array_merge($default_data, $input_data);\n\n    $category = new Category();\n    $category->setCategoryIsActive($data['category_is_active']);\n\n    $categoryTranslations = array();\n\n    foreach ($data['translations'] as $lang => $translation) {\n      $tmp = new CategoryTranslation();\n      $tmp->assign($translation);\n      array_push($categoryTranslations, $tmp);\n    }\n\n    $category->translations = $categoryTranslations;\n\n    return $this->save($category, 'create');\n  }\n\n  public function update(array $st_inputData) {\n    $st_defaultData = array('translations' => array(\n      'en' => array(\n        'category_translation_name' => 'Category name',\n        'category_translation_slug' => '',\n        'category_translation_lang' => 'en',\n      ),\n    ));\n\n    $st_data = array_merge($st_defaultData, $st_inputData);\n\n    $object = Category::findFirstById($st_data['id']);\n\n    if (!$object) {\n      throw new \\Exception('Object not found');\n    }\n\n    foreach ($st_data['translations'] as $locale => $values) {\n      $translation = $object->getTranslations([\"category_translation_lang = '$locale'\"]);\n      $translation[0]->setCategoryTranslationName($values['category_translation_name']);\n      $translation[0]->setCategoryTranslationSlug($values['category_translation_slug']);\n      $translation[0]->setCategoryTranslationLang($values['category_translation_lang']);\n      $this->save($translation[0], 'update');\n    }\n\n    return $this->save($object, 'update');\n  }\n\n  public function delete($id) {\n    $object = Category::findFirstById($id);\n\n    if (!$object) {\n      throw new \\Exception('Object not found');\n    }\n\n    if (false === $object->delete()) {\n      foreach ($object->getMessages() as $message) {\n        $error[] = (string) $message;\n      }\n\n      throw new \\Exception(json_encode($error));\n    }\n\n    return true;\n  }\n}\n```", "```php\n$di['core_category_manager'] = function () {\n    return new \\App\\Core\\Managers\\CategoryManager();\n};\n```"]