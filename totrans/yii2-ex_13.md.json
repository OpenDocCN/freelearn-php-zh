["```php\n    MyWidget::widget(['prop1' => 'value of prop1', …])\n```", "```php\n    $widget = MyWidget::begin(['prop1' => 'value of prop1', …]);\n\n    ..\n    .. I can use $widget object here  ..\n    ..\n\n     MyWidget::end();\n```", "```php\n<?php\n\nnamespace app\\components;\n\nuse yii\\base\\Widget;\n\nclass ClockWidget extends Widget\n{\n\n    public function init()\n    {\n        \\yii\\web\\JqueryAsset::register($this->getView());\n    }\n\n    public function run()\n    {\n        return $this->render('clock');\n    }\n\n}\n```", "```php\n<?php\n\n$this->registerJs( <<< EOT_JS\n\n    function ClockWidget_refresh_datetime()\n    {\n        var dateTimeString = new Date().toString();\n        $('#ClockWidget_realtime_clock').html(dateTimeString);\n    }\n\n    setInterval(ClockWidget_refresh_datetime,1000);\n\n    ClockWidget_refresh_datetime();\nEOT_JS\n);\n\n?>\n\n<div style=\"border:1px solid black;padding:5px;width:200px;text-align:center\">\n    <span id=\"ClockWidget_realtime_clock\"></span>\n</div>\n```", "```php\n<?= \\app\\components\\ClockWidget::widget(); ?>\n```", "```php\n<?php\n\nnamespace app\\controllers;\n\nuse yii\\web\\Controller;\nuse app\\models\\Room;\n\nclass TestCarouselController extends Controller\n{\n    public function actionIndex()\n    {\n        $models = Room::find()->limit(3)->all();\n\n        return $this->render('index', ['models' => $models]);\n    }\n}\n```", "```php\nThis is a carousel widget with some rooms:\n<?= \\app\\components\\CarouselWidget\\CarouselWidget::widget(['models' => $models, 'options' => ['style' => 'border:1px solid black;text-align:center;padding:5px;']]); ?>\n```", "```php\nitems => [\n['content' => '...', 'caption' => '...'],\n['content' => '...', 'caption' => '...'],\n['content' => '...', 'caption' => '...'],\n...\n];\n```", "```php\n<?php\n\nnamespace app\\components\\CarouselWidget;\n\nuse yii\\base\\Widget;\n\nclass CarouselWidget extends Widget\n{\n    public $carouselId = 'carouselWidget_0';\n    public $options = [];\n    public $models = [];\n\n    private $carouselItemsContent;\n\n    public function init()\n    {\n        // It is not necessary because yii bootstrap Carousel widget will load it automatically\n        // \\yii\\jui\\JuiAsset::register($this->getView());\n\n        $this->carouselItemsContent = [];\n        foreach($this->models as $model)\n        {\n            $caption = sprintf('<h1>Room #%d</h1>', $model->id);\n            $content = sprintf('This is room #%d at floor %d with %0.2f€ price per day', $model->id, $model->floor, $model->price_per_day);\n            $itemContent = ['content' => $content, 'caption' => $caption];\n            $this->carouselItemsContent[] = $itemContent;\n        }\n\n    }\n\n    public function run()\n    {\n        return $this->render('carousel', ['carouselItemsContent' => $this->carouselItemsContent]);\n    }\n\n}\n```", "```php\n<?php $styleOption = isset($this->context->options['style'])?$this->context->options['style']:''; ?>\n<div id=\"<?php echo $this->context->id ?>\" style=\"<?php echo $styleOption ?>\">\n    <?php\n    echo \\yii\\bootstrap\\Carousel::widget([\n        'id' => $this->context->carouselId,\n        'items' => $carouselItemsContent\n\n    ]);\n    ?>\n\n</div>\n```", "```php\nnamespace app\\components;\n\nuse Yii;\nuse yii\\base\\Component;\n\nclass MyComponent extends Component\n{\n..\n..\n}\n```", "```php\n$myCmp = new \\app\\components\\MyComponent();\n```", "```php\n'components' => [\n    ..\n    ..\n        'myComponent' => [\n            'class' => '\\app\\components\\MyComponent'\n        ],\n]\n```", "```php\nYii:$app->myComponent\n```", "```php\nnamespace app\\components;\n\nuse Yii;\nuse yii\\base\\Component;\n\nclass SmsGateway extends Component\n{\n    public function send($to, $text)\n    {\n        ..\n        ..\n        ..\n    }\n}\n```", "```php\n'components' => [\n    ..\n    ..\n        'smsgw' => [\n            'class' => '\\app\\components\\SmsGateway\n        ],\n]\n```", "```php\nYii:$app->smsgw->send('+3913456789', 'hello world!');\n```", "```php\n<?php\nnamespace common\\components;\n\nuse Yii;\nuse yii\\base\\Component;\n\nclass Maintenance extends Component\n{\n    public function launchBackup($database, $username, $password, $pathDestSqlFile)\n    {\n        $cmd = sprintf('mysqldump -u %s -p%s %s > %s', $username, $password, $database, $pathDestSqlFile);\n        $outputLines = [];\n        exec($cmd, $outputLines, $exitCode);\n\n        return ['cmd' => $cmd, 'exitCode' => $exitCode, 'outputLines' => $outputLines];        \n    }\n}\n?>\n```", "```php\n<?php\n\nnamespace console\\controllers;\n\nuse \\yii\\console\\Controller;\nuse \\yii\\helpers\\Console;\nuse \\common\\components\\Maintenance;\n\nclass MaintenanceController extends Controller\n{\n    public function actionBackupDatabase()\n    {\n        $tmpfname = tempnam(sys_get_temp_dir(), 'FOO');\n        $obj = new Maintenance();\n        $ret = $obj->launchBackup('username', 'password', 'database_name', $tmpfname);\n\n        if($ret['exitCode'] == 0)\n        {\n            $this->stdOut(\"OK\\n\");        \n            $this->stdOut(sprintf(\"Backup successfully stored in: %s\\n\", $tmpfname));        \n        }\n        else\n        {\n            $this->stdOut(\"ERR\\n\");\n        }\n\n        // equivalent to return 0;\n        return $ret['exitCode'];\n    }\n\n}\n\n?>\n```", "```php\n    public function actionBackupDatabaseAndSendEmail()\n    {\n        $tmpfname = tempnam(sys_get_temp_dir(), 'FOO'); // good\n        $obj = new Maintenance();\n        $ret = $obj->launchBackup('username', 'password', 'database_name', $tmpfname);\n\n        $emailAttachment = null;\n        if($ret['exitCode'] == 0)\n        {\n            $this->stdOut(\"OK\\n\");        \n            $this->stdOut(sprintf(\"Backup successfully stored in: %s\\n\", $tmpfname));\n\n            $textEmail = 'Backup database successful! Find it in attachment';\n            $emailAttachment = $tmpfname;\n        }\n        else\n        {\n            $this->stdOut(\"ERR\\n\");\n\n            $textEmail = 'Error in backup database! Check it!';\n        }\n\n        $emailMsg = Yii::$app->mailer->compose()\n            ->setFrom('from@example.com')\n            ->setTo('to@example.com')\n            ->setSubject('Backup database')\n            ->setTextBody($textEmail);\n\n        if($emailAttachment!=null) $emailMsg->attach($emailAttachment, ['fileName' => 'backup_db.sql']);\n        $emailMsg->send();            \n\n        // equivalent to return 0;\n        return $ret['exitCode'];\n    }\n```", "```php\nmyCustomModule/\n    Module.php                   the module class file\n    controllers/                 containing controller class files\n        DefaultController.php    the default controller class file\n    models/                      containing model class files\n    views/                       containing controller view and layout files\n        layouts/                 containing layout view files\n        default/                 containing view files for DefaultController\n            index.php            the index view file\n```", "```php\nnamespace app\\modules\\myCustomModule;\n\nclass Module extends \\yii\\base\\Module\n{\n    public function init()\n    {\n        parent::init();\n\n        $this->params['foo'] = 'bar';\n        // ...  other initialization code ...\n    }\n}\n```", "```php\n<?php\nreturn [\n    'components' => [\n        // list of component configurations\n    ],\n    'params' => [\n        // list of parameters\n    ],\n  ..\n  ..\n  ..\n];\n```", "```php\npublic function init()\n{\n    parent::init();\n    // initialize the module with the configuration loaded from config.php\n    \\Yii::configure($this, require(__DIR__ . '/config.php'));\n}\n```", "```php\n[\n    'modules' => [\n        'myCustomModule' => [\n            'class' => 'app\\modules\\myCustomModule\\Module',\n            // ... other configurations for the module ...\n        ],\n    ],\n]\n```", "```php\n$ php composer.phar require --prefer-dist yiisoft/yii2-apidoc\n\n```", "```php\n$ php composer.phar update\n\n```", "```php\n$ vendor/bin/apidoc api ./ ../app-doc\n\n```", "```php\n$ vendor/bin/apidoc guide ./guide ../app-doc\n\n```", "```php\n<?php\n\n/**\n * This file contains a controller to demonstrate api documentation tool.  \n *\n * @link http://www.example.com/\n * @copyright Copyright (c) 2015\n * @license http://www.example.com/license/\n */\n\nnamespace app\\controllers;\n\nuse Yii;\nuse yii\\web\\Controller;\n\n/**\n * This is a controller class to demonstrate api documentation tool.  \n *\n * @author Fabrizio Caldarelli\n * @since 1.0\n */\nclass TestDocController extends Controller\n{\n    /**\n     * Make sum of the operands\n     *\n     * @param float $a first operand\n     * @param float $b second operand\n     * @return float sum of parameters\n     * @author  \n     */\n    public function makeSum(float $a, float $b)\n    {\n        return $a+$b;\n    }\n}\n```", "```php\n$  vendor/bin/apidoc api ./ ../app-doc\n\n```", "```php\n## TestDoc Controller\n\nThis is the guide for TestDoc Controller.\n\n## Functionalities\n\nIt is provided makeSum function, that makes a sum of two values passed as parameter\n\n```", "```php\n```", "```php\n$  vendor/bin/apidoc guide ./app-guide ../app-doc\n\n```"]