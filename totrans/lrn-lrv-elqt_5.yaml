- en: Chapter 5. Using Collections to Enhance Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, I told you everything about models and how to create relationships
    between them. I explained you how to query your data and relationships and even
    to specify complex conditions and constraints. However, I have never told you
    anything about what Eloquent's outputs are. Yes, sometimes, I mentioned an *array*
    or just the word *results*. Don't worry; it wasn't wrong, but there is something
    more under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Well, in this chapter, I will discuss collections. When retrieving your results
    from a query (using, for instance, `get()` or `all()`), you are getting a collection.
    That's the right term to use.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, you can think of a collection as an array of results but with some
    extra utility methods. In fact, when you use a collection, you are using an instance
    of the `Collection` class under `Illuminate\Database\Eloquent`.
  prefs: []
  type: TYPE_NORMAL
- en: This class implements the `AggregateIterator` interface that lets you treat
    a collection like an array. You can use collections to perform many operations,
    sometimes complex operations as well. First of all, you will see how to perform
    some basic research operations and checks with collections.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will see some results transformation methods. Do you remember, in [Chapter
    3](ch03.html "Chapter 3. The Most Important Element – the Model!"), *The Most
    Important Element – the Model!*, I had told you about the automatic transformation
    in JSON of a model result? Great! It's one of these methods.
  prefs: []
  type: TYPE_NORMAL
- en: Straight after, we will go a little deeper; after all, a collection is made
    up of elements. We will work with these elements. With a collection, obviously,
    you can iterate through its elements. There are some dedicated methods for iterations.
    Also, you will learn how to filter a collection in an easy way, just as many things
    in Eloquent are easy. Finally, we will talk about sorting operations on collections
    and how to deal with them. So, nothing of this really is essential, but it will
    help you to better understand how Eloquent works in every single way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Are you ready? Here are the topics to cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic collection operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating and filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic collection operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with some really basic methods. For a better understanding of
    what you are going to do, I *strongly suggest that you try on your project* every
    single method from the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is `contains()`. It returns true or false if a record with a certain
    ID is included in the collection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All you have to do, here, is to specify the ID as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As I told you earlier, you can use a collection as an array. So, if you want
    to get the third element in a collection, you can use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, if you don''t like this syntax for some reason, you can use `get()`
    in an alternative way, like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this *powered* syntax, you can also specify a default value if the desired
    index doesn''t exist:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obviously, you can check the existence of a specific element, if you want,
    with `has()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the opposite of `get()`, you can add an element with a specific index using
    `put()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you may imagine, the first argument is the desired index, and the second
    argument is the value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another cool method is `prepend()`, which you can use to prepend an element
    to a certain collection. Here''s the syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you want to get an array with all the primary keys, you can use a dedicated
    `modelKeys()` method!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's not over yet; actually, there are many methods you can use for many different
    things.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An example is `random()`, which extracts a single random item from the specified
    collection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, you can use `keys()` or `values()` to get arrays for only keys or values,
    respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What? You want to treat your collection as a stack? No problem, `pop()` and
    `push()` are here to help!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, what about searching for an item in a collection using syntax similar
    to the `here()` you called on models? Take a look at this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that this method returns another category. This means that you can use
    many chained calls of `where()`. Here''s another example that gives a better idea:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's close this first part of our chapter with `perPage`, which is a really
    intuitive method that gets a certain number of items, and all you have to do is
    to specify the page and number of items you want per page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax is something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this simple call, you are getting 10 books, starting from the second page.
    I think this is a great example of expressive syntax of methods that Eloquent
    (and Laravel) offers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to know more about the `Collection` class and what it offers, take
    a look at [http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html](http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Collection.html)
    or look directly at the code in `Illuminate\Database\Eloquent\Collection` and
    `Illuminate\Support\Collection` classes.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quite often, Eloquent automatically takes a collection to transform it into
    something that you can output in a better way. For example, here is the code that
    I am using to show a list of a magazine website''s news categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'However, now consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s change the code to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait, wait; what? Just changing a `dd()` call with a return? Well, you can
    see this magic using two special methods: `toArray` and `toJSON`. You can also
    use them manually, if you need, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Cool, right?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dd()` function I used before is a Laravel utility. It's a mix of the native
    PHP `var_dump()` and `die()`. To be more precise, it shows the value of a certain
    object or variable, and then stops the script.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating and filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you will need something more than passing a collection in to a view,
    or a simple `toArray()` call. An Eloquent collection has many methods that you
    can use to filter and iterate through its elements. Let's see something in action!
  prefs: []
  type: TYPE_NORMAL
- en: Iterating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s begin with simple iteration. You can call the `each()`
    method to iterate the elements of a certain collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'All you have to do is to pass as the first (and only) argument a closure with
    a single parameter: the single item to be used. In this example, I just printed
    all the titles.'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to filter your collection in a more complex way, you can use `filter()`.
    Let''s take an example: I want to select every book that was printed after 1840.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is really similar to the previous example. You have a closure as
    a parameter, with a single argument passed; that is, the collection item.
  prefs: []
  type: TYPE_NORMAL
- en: However, this time you will have to check your conditions and return true or
    false if you want to include (or not) this item in the `result` collection.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this specific case, the current `$book` value was printed after 1840?
    Great, come in. Not printed after 1840? Bye bye!
  prefs: []
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, you can sort data using a certain field. The methods you must use,
    this time, are `sortBy` and `sortByDesc`. I think you are quite smart enough to
    understand what they do, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'However, here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can use a shortcut if your closure logic is really simple, such as
    the earlier examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's be clear; in my opinion, knowing every single method of a collection isn't
    really indispensable. However, it can be really useful in some situations where
    you need a certain method to do something very specific. How can I say it? The
    more things you know, the better you are!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on! After this little break, it's time to go down in to the
    world of events!
  prefs: []
  type: TYPE_NORMAL
