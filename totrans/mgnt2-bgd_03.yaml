- en: Chapter 3. Programming Concepts and Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With years of experience, the Magento platform grew up to implement a lot of
    industry concepts, standards, and conventions. Throughout this chapter, we will
    look into several of these independent sections that stand out in day-to-day interactions
    with Magento development.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go through the following sections in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service contracts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `var` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Composer** is a tool that handles dependency management in PHP. It is not
    a package manager like **Yum** and **Apt** on Linux systems are. Though it deals
    with libraries (packages), it does so on a per-project level. It does not install
    anything globally. Composer is a multiplatform tool. Therefore, it runs equally
    well on Windows, Linux, and OS X.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Composer on a machine is as simple as running the installer in the
    project directory by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: More information about the installation of Composer can be found on its official
    website, which can be viewed by visiting [https://getcomposer.org](https://getcomposer.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'Composer is used to fetch Magento and the third-party components that it uses.
    As seen in the previous chapter, the following `composer` command is what pulls
    everything into the specified directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Magento is downloaded and installed, there are numerous `composer.json`
    files that can be found in its directory. Assuming `<installation directory name>`
    is `magento2`, if we were to do a quick search executing command such as find
    `magento2/ -name ''composer.json''`, that would yield over 100 `composer.json`
    files. Some of these files are (partially) listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The most relevant file is probably the `composer.json` file in the root of
    the `magento` directory. Its content appears like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Composer's JSON file follows a certain schema. You will find a detailed documentation
    of this schema at [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md).
    Applying to the schema ensures validity of the composer file. We can see that
    all the listed keys such as `name`, `description`, `require`, `config`, and so
    on, are defined by the schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the individual module''s `composer.json` file. One of
    the simpler modules with the least amount of dependencies is the `Contact` module
    with its `vendor/magento/module-contact/composer.json` content, which looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will see that the modules define dependencies on the PHP version and other
    modules. Furthermore, you will see the use of PSR-4 for autoloading and the direct
    loading of the `registration.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the contents of `vendor/magento/language-en_us/composer.json`
    from the `en_us` language module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s take a look at the contents of `vendor/magento/theme-frontend-luma/composer.json`
    from the `luma` theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned previously, there are a lot more composer files scattered around
    Magento.
  prefs: []
  type: TYPE_NORMAL
- en: Service contracts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **service contract** is a set of PHP interfaces that is defined by a module.
    This contract comprises data interfaces and service interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The role of the data interface is to preserve data integrity, while the role
    of the service interface is to hide the business logic details from service consumers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data interfaces** define various functions, such as validation, entity information,
    search related functions, and so on. They are defined within the `Api/Data` directory
    of an individual module. To better understand the actual meaning of it, let''s
    take a look at the data interfaces for the `Magento_Cms` module. In the `vendor/magento/module-cms/Api/Data/`
    directory, there are four interfaces defined, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `CMS` module actually deals with two entities, one being `Block` and the
    other one being `Page`. Looking at the interfaces defined in the preceding code,
    we can see that we have separate data interface for the entity itself and separate
    data interface for search results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the (stripped) contents of the `BlockInterface.php`
    file, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding interface defines all the getter and setter methods for the entity
    at hand along with the constant values that denote entity field names. These data
    interfaces do not include management actions, such as `delete`. The implementation
    of this specific interface can be seen in the `vendor/magento/module-cms/Model/Block.php`
    file, where these constants come to use, as follows (partially):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Service interfaces are the ones that include management, repository, and metadata
    interfaces. These interfaces are defined directly within the module''s `Api` directory.
    Looking back at the `Magento Cms` module, its `vendor/magento/module-cms/Api/`
    directory has two service interfaces, which are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A quick look into the contents of `BlockRepositoryInterface.php` reveals the
    following (partial) content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we see methods that are used to save, fetch, search, and delete the entity.
  prefs: []
  type: TYPE_NORMAL
- en: These interfaces are then implemented via the Web API definitions, as we will
    see later in [Chapter 9](part0064_split_000.html#1T1402-818f5224668745eb9070ddf1d85e6bfa
    "Chapter 9. The Web API"), *The Web API*. The result is well-defined and durable
    API's that other modules and third-party integrators can consume.
  prefs: []
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the neat features of the Magento application is code generation. **Code
    generation**, as implied by its name, generates nonexistent classes. These classes
    are generated in Magento's `var/generation` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The directory structure within `var/generation` is somewhat similar to that
    of the core `vendor/magento/module-*` and `app/code` directories. To be more precise,
    it follows the module structure. The code is generated for something that is called
    **Factory**, **Proxy**, and **Interceptor** classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Factory class creates an instance of a type. For example, a `var/generation/Magento/Catalog/Model/ProductFactory.php`
    file with a `Magento\Catalog\Model\ProductFactory` class has been created because
    somewhere within the `vendor/magento` directory and its code, there is a call
    to the `Magento\Catalog\Model\ProductFactory` class, which originally does not
    exist in Magento. During runtime, when `{someClassName}Factory` is called in the
    code, Magento creates a Factory class under the `var/generation` directory if
    it does not exist. The following code is an example of the (partial) `ProductFactory`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note the `create` method that creates and returns the `Product` type instance.
    Also, note how the generated code is *type safe* providing `@return` annotation
    for **integrated development environments** (**IDEs**) to support the autocomplete
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '**Factories** are used to isolate an object manager from the business code.
    Factories can be dependent on the object manager, unlike business objects.'
  prefs: []
  type: TYPE_NORMAL
- en: The Proxy class is a wrapper for some **base class**. Proxy classes provide
    better performance than the base classes because they can be instantiated without
    instantiating a base class. A base class is instantiated only when one of its
    methods is called. This is highly convenient for cases where the base class is
    used as a dependency, but it takes a lot of time to instantiate, and its methods
    are used only during some paths of execution.
  prefs: []
  type: TYPE_NORMAL
- en: Like Factory, the Proxy classes are also generated under the `var/generation`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to take a look at the `var/generation/Magento/Catalog/Model/Session/Proxy.php`
    file that contains the `Magento\Catalog\Model\Session\Proxy` class, we would see
    that it actually extends \`Magento\Catalog\Model\Session`. The wrapping Proxy
    class implements several magical methods along the way, such as `__sleep`, `__wakeup`,
    `__clone`, and `__call`.
  prefs: []
  type: TYPE_NORMAL
- en: Interceptor is yet another class type that gets autogenerated by Magento. It
    is related to the plugins feature, which will be discussed in detail later in
    [Chapter 6](part0043_split_000.html#190862-818f5224668745eb9070ddf1d85e6bfa "Chapter 6. Plugins"),
    *Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: In order to trigger code regeneration, we can use the code compiler that is
    available on the console. We can run either the *single-tenant* compiler or the
    *multi-tenant* compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *single-tenant* implies one website and store, and it is executed by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The *multi-tenant* implies more than one independent Magento application, and
    it is executed by using following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Code compilation generates factories, proxies, interceptors, and several other
    classes, as listed in the `setup/src/Magento/Setup/Module/Di/App/Task/Operation/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The var directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magento does a lot of caching and autogeneration of certain class types. These
    caches and generated classes are all located in Magento''s root `var` directory.
    The usual contents of the `var` directory is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: During development, we will most likely need to periodically clear these so
    that our changes can kick in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can issue the console command as follows to clear individual directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use the built-in `bin/magento` console tool to trigger
    commands that will delete the proper directories for us, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bin/magento setup:upgrade`: This updates the Magento database schema and data.
    While doing this, it truncates the `var/di` and `var/generation` directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin/magento setup:di:compile`: This clears the `var/generation` directory.
    After doing this, it compiles the code in it again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin/magento deploy:mode:set {mode}`: This changes the mode from the developer
    mode to the production mode and vice versa. While doing this, it truncates the
    `var/di`, `var/generation`, and `var/view_preprocessed` directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin/magento cache:clean {type}`: This cleans the `var/cache` and `var/page_cache`
    directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to keep the `var` directory in mind at all times during development.
    Otherwise, the code might encounter exceptions and function improperly.
  prefs: []
  type: TYPE_NORMAL
- en: Coding standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`code documentation. The idea is to unify the usage of code DocBlocks for all
    files regardless of the programming language in use. However, a DocBlock standard
    for that particular language may override it.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` The `a subset of Google JavaScript Style Guide and JSDoc, which can be found
    at [http://usejsdoc.org](http://usejsdoc.org).` ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `The **LESS**` **coding standard defines the formatting and coding style
    when working with LESS and CSS files.** ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Note**`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`**You can read more about the actual details of each standard at [http://devdocs.magento.com](http://devdocs.magento.com),
    as they are too extensive to be covered in this book.**`'
  prefs: []
  type: TYPE_NORMAL
- en: '``**# Summary    In this chapter, we took a look at Composer, which is one
    of the first things that we will interact with when installing Magento. We then
    moved on to service contracts as one of the strongest Magento architectural parts,
    which turned out to be good old PHP interfaces in use. Further, we covered some
    bits about the Magento code generation feature. Thus, we have a basic knowledge
    of the Factory and Proxy classes. We then had a look at the `var` directory and
    explored its role, especially during development. Finally, we touched upon the
    coding standards used in Magento.    In the next chapter, we will discuss the
    dependency injection, which is one of the most important architectural parts of
    Magento.**``'
  prefs: []
  type: TYPE_NORMAL
