- en: Chapter 6. Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the CI models, their role, and their usage with several
    code examples of web applications. The model is responsible for handling the database
    it stores and retrieves database objects used by the application from a database
    and contains the logic implemented by the application.
  prefs: []
  type: TYPE_NORMAL
- en: Much of the data that is part of the persistent state of the application (whether
    that persistent state is stored in files or databases) should reside in the model
    objects after the data is loaded into the application. Because the model objects
    represent knowledge and expertise related to a specific topic, they can be reused
    in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The model represents the application data services and can serve the application
    logic (commonly referred to as business logic), as well. Usually, the model is
    responsible for the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding, modifying, deleting, and searching the application database objects**:
    Generally, this includes the database operations, but implementing the same operations
    and invoking external web services or APIs is not unusual at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encapsulating the application logic**: For example, the model can make data
    validations before storing a data object and can alert the calling application
    module about the problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most common misuse of the CI database class is using it directly from the
    controller, view, or helper. A good practice is to develop the model classes to
    handle all the application database services.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, all the other application modules can benefit, and reuse those models.
  prefs: []
  type: TYPE_NORMAL
- en: The CI models are special classes designed to handle databases or external information
    resources, such as Facebook (we will see an example of this in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The CI models are the PHP classes that are designed to work with information
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will primarily focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI model scope:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model resource path
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using model methods
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a database
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Business logic
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Object Relational Mapping (ORM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1: a CRUD example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: a business logic example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: retrieving data from Facebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by briefly reviewing the CI model scope and will proceed with
    several usage examples, covering different use cases that are combined in a real
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the CI model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI model provides services for all the application modules to access the
    application database(s) or external information resources in an OOP fashion. Typically,
    the model classes will contain functions that help us retrieve, insert, and update
    information in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This section will focus on the CI model syntax and usage guidelines, as a preface
    to the following usage code examples.
  prefs: []
  type: TYPE_NORMAL
- en: The model resource path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model files are located in the folder `application/models/`, in the pattern
    `application/models/<MODEL_NAME>.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading a model can be done automatically or via the controller. More specifically,
    it can be done in a certain controller's constructor or any controller's method.
  prefs: []
  type: TYPE_NORMAL
- en: If the model is used in a few of the controller's methods, it's recommended
    that you load the model in those methods. The scope of the model in that case
    is only in those methods project and will refer to `application/models/mymodel.php`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the model is used in most of the controller's methods, it's recommended that
    you load the model in the controller's constructor. In that case the scope of
    the model is in all the controller's methods project and will refer to `application/models/mymodel.php`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It automatically loads a model `mymodel` for all the CI projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the model is used in most of CI's project controllers, it is recommended
    that you autoload it in `application/config/autoload.php`. In that case the scope
    of the model is in all the CI project and will refer to `application/models/mymodel.php`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$autoload[''model''] = array(''users'', ''mymodel'');`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using model methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the CI model is loaded, we will access the model functions using an object
    with the model name as our class. The model's method is called for performing
    database operations, such as retrieving, inserting, and updating data from the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For example, let's load the model `users` and access its function `get_users`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Connecting to a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will connect manually to a database. The following settings
    are done in `application/config/database.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Business logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Business logic is a set of validation rules and decision criteria defined for
    a certain information object topic or database object.
  prefs: []
  type: TYPE_NORMAL
- en: The model can apply business logic to the database and information objects that
    it handles.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a social network, the model layer would take care of tasks, such
    as saving user data, saving friend associations, storing and retrieving user photos,
    finding new friends for suggestions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Object Relational Mapping (ORM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While CI provides the model class for the developer to expand for object-oriented
    database **CRUD** (**Create, Read, Update, and Delete**) validation, and business
    logic for the defined project database, there's another option that enables automatic
    model services. In this section, we will discuss **Object Relational Mapping**
    (**ORM**). ORM is a new concept of converting the database scheme definition into
    an object-oriented database class API. It provides database CRUD services on a
    given database, so that the minimal code is required, instead of the full model
    development. More than that, the customized validation on the CRUD operation is
    enabled as well. Using an ORM plugin may reduce the need to self-develop our own
    CI models so that only special business logic activities are left to be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Today, ORM plugins provide predefined validation services, as well as user-defined
    services to enforce validations on CRUD requests from the application controllers,
    libraries, or helpers requesting the database CRUD services.
  prefs: []
  type: TYPE_NORMAL
- en: There are pros and cons of using ORM. On one hand, it simplifies a lot of the
    database model development for the database. On there other hand, it dictates
    various rules on the database scheme definition, such as defining user tables
    for an ORM object user, or defining the auto-increment primary key field name,
    such as ID, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ORM plugins for CI; the most well-known and well-documented
    ones, with a large network of community developers, are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Doctrine ORM** ([docs.doctrine-project.org](http://docs.doctrine-project.org)):
    This ORM plugin with the well-documented CI integration guidelines is available
    at [http://docs.doctrine-project.org/en/2.0.x/cookbook/integrating-with-codeigniter.html](http://docs.doctrine-project.org/en/2.0.x/cookbook/integrating-with-codeigniter.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DataMapper CodeIgniter ORM library** ([datamapper.wanwizard.eu](http://datamapper.wanwizard.eu)):
    It provides the CI library, such as user guide web navigator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both ORM libraries provide more than just the table-based CRUD services, but
    can be configured to handle the cross-table relationships of the foreign key fields.
    They can support one-to-many, many-to-one, and many-to-many relationships, or
    even more complex relationships between multiple database tables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ORM plugins also provide validation and manipulation services on the handled
    database fields, such as performing trimming on a string field before it is saved
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Validation services include built-in validations such as valid e-mail fields,
    or a field that must have the same value as another field, such as fields with
    an account creation password retype requirement. The full scope and usage of ORM
    is beyond the scope of this CI book. However, it is highly recommended that you
    learn more about ORM and try using the referred ORM plugins and consider using
    them in your CI projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we do provide a simple usage example of adding a record to the database,
    and retrieving the database records using ORM in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: ORM simple operations example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For example, let''s say we have a user database table with the ID as the primary
    key auto-increment. User name, e-mail, and password are the other fields, and
    if we want to add a new user record to the database, we could do so with the help
    of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is only a very simple usage example, while ORM today provides a rich set
    of CRUD and validation services. Please refer to the provided links to the featured
    ORM plugins for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – a CRUD example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will see how to use a CI model. For this example, we will
    use a model that performs these operations on the database: `SELECT`, `INSERT`,
    and `UPDATE`.'
  prefs: []
  type: TYPE_NORMAL
- en: The example displays, all the products that are retrieved by the model `productmodel`
    at the main page in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`
    and `http://mydomain.com/myproject/product`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code is provided with this book via URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The main page has links for adding and editing a product. These links generate
    a form for editing and adding a product.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`
    and `http://mydomain.com/myproject/product/add`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to edit and update the product with `product_id 1`, the link
    will be `http://mydomain.com/myproject/product/edit/1`. This example will be constructed
    from the following controller, model, and views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controllers/product.php`: This controller loads the model product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This controller renders the following views:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`productsview`: This view displays all the products with links to editing and
    adding a product'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`productform`: This view contains the form for adding and editing a product'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/models/productmodel.php`: This model contains functions that perform
    these operations on the database: `SELECT`, `INSERT`, and `UPDATE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/productsview.php`: The view that displays the products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/productform.php`: The view that contains the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller PHP file is located at `application/controllers/product.php`.
    The controller handles the product's operations, such as adding, editing, updating,
    and displaying the product's table.
  prefs: []
  type: TYPE_NORMAL
- en: The controller creates a form for adding and editing a product.
  prefs: []
  type: TYPE_NORMAL
- en: For more information refer to [Chapter 7](ch07.html "Chapter 7. Views"), *Views*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code and inline explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model PHP file is located at `application/models/productmodel.php`.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the methods of the CI object `db` are called for generating
    and executing the SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the CI database library at [http://ellislab.com/codeigniter/user-guide/database/index.html](http://ellislab.com/codeigniter/user-guide/database/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code and inline explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view PHP file is located at `application/views/productsview.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This view file displays a table with the products list. The following are the
    code and inline explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Example 2 – a business logic example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will demonstrate business logic. Ordering a product will
    trigger the model to update the product's quantity and check whether it's smaller
    than a certain amount.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following controllers, model, and
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controllers/order.php`: This controller loads the model `productmodel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$this->load->model('' productmodel'')`: This controller renders the view `orderview`,
    which displays all the products, and where each product has links to ordering
    a product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/models/productmodel.php`: This model contains functions, which
    retrieve products, updates its quantity, and checks its quantity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/ orderview.php`: The view displays all the products in a
    table, where each row has a link for ordering the product'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`
    and `http://mydomain.com/myproject/order`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code is provided with this book via URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller PHP file is located at `application/controllers/order.php`.
  prefs: []
  type: TYPE_NORMAL
- en: This controller is responsible for displaying the products and updates each
    product. If the product's quantity reaches a limit, it generates an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model PHP file is located at `application/models/productmodel.php`.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the methods of the CI object `db` are called for generating
    and executing the SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the CI database's library available at [http://ellislab.com/codeigniter/user-guide/database/index.html](http://ellislab.com/codeigniter/user-guide/database/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP view file is located at `application/views/orderview.php`. This view
    file displays a table with the products list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code and inline explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Example 3 – retrieving data from Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use the CI built-in model to retrieve data from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: The example displays a Facebook user name and picture and displays the user's
    Facebook friends.
  prefs: []
  type: TYPE_NORMAL
- en: This example uses Facebook PHP SDK as a CI library. It can be downloaded from
    [https://github.com/facebook/php-sdk](https://github.com/facebook/php-sdk). For
    more information, refer to [Chapter 4](ch04.html "Chapter 4. Libraries"), *Libraries*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example will be constructed from the following controllers, model, and
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/controllers/fbpage.php`: This controller loads the model `fbmodel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$this->load->model(''fbmodel'')`: This controller renders the view `fbview`,
    which displays the user''s Facebook picture and name, and table, which contains
    the user''s friends'' names and links to their profiles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/models/fbmodel.php`: This model contains functions that retrieve
    data from Facebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views/fbview.php`: This view displays Facebook data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us assume the URI to the project root is `http://mydomain.com/myproject`
    and `http://mydomain.com/myproject/fbpage`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code is provided with this book via URLs.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller PHP file is located at `application/controllers/fbpage.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The controller is responsible for getting the access token from Facebook and
    redirecting the Facebook user to the Facebook login page to confirm the Facebook
    app's permission.
  prefs: []
  type: TYPE_NORMAL
- en: The controller is also responsible for getting the Facebook user's details and
    friends via the model and rendering the view page accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Facebook API usage and development, please refer
    to the Facebook developer page available at [http://developers.facebook.com/](http://developers.facebook.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code and inline explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model PHP file is located at `application/models/fbmodel.php`.
  prefs: []
  type: TYPE_NORMAL
- en: The model is responsible for interacting with the Facebook SDK and retrieving
    the Facebook user's details and friend lists. The model uses the Facebook FQL
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Facebook API usage and development, please refer
    to the Facebook developer page available at [http://developers.facebook.com/](http://developers.facebook.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view PHP file is located at `application/views/fbview.php`.
  prefs: []
  type: TYPE_NORMAL
- en: This view file displays a Facebook user's details and a table with their friend
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have reviewed the CI model scope, business logic, and ORM.
    We have made the following examples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: a CRUD example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: a business logic example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: retrieving data from Facebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
