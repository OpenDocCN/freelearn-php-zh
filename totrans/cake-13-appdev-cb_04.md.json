["```php\nCREATE TABLE `profiles`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`email` VARCHAR(255) NOT NULL,\n`name` VARCHAR(255) default NULL,\n`twitter` VARCHAR(255) default NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\n<?php\nclass Profile extends AppModel {\npublic $validate = array(\n'email' => array('rule' => 'notEmpty'),\n'name' => array('rule' => 'notEmpty')\n);\n}\n?>\n\n```", "```php\n<?php\nclass ProfilesController extends AppController {\npublic function add() {\nif (!empty($this->data)) {\n$this->Profile->create();\nif ($this->Profile->save($this->data)) {\n$this->Session->setFlash('Profile created');\n$this->redirect('/');\n} else {\n$this->Session->setFlash('Please correct the errors');\n}\n}\n}\n}\n?>\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'email',\n'name',\n'twitter'\n));\necho $this->Form->end('Create');\n?>\n\n```", "```php\nclass Profile extends AppModel {\npublic $validate = array(\n'email' => array(\n'valid' => array(\n'rule' => 'email',\n'message' => 'The email entered is not a valid email address'\n),\n'required' => array(\n'rule' => 'notEmpty',\n'message' => 'Please enter an email'\n)\n),\n'name' => array('rule' => 'notEmpty')\n);\n}\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'email' => array(\n'error' => array(\n'required' => 'Please enter an email',\n'valid' => 'The email entered is not a valid email address'\n)\n),\n'name',\n'twitter'\n));\necho $this->Form->end('Create');\n?>\n\n```", "```php\nclass Profile extends AppModel {\npublic $validate = array(\n'email' => array('rule' => 'notEmpty'),\n'name' => array('rule' => 'notEmpty'),\n'twitter' => array(\n'rule' => 'validateTwitter',\n'allowEmpty' => true,\n'message' => 'This twitter account is not valid'\n)\n);\nprotected static $httpSocket;\nprotected function validateTwitter($data) {\nif (!isset(self::$httpSocket)) {\nApp::import('Core', 'HttpSocket');\nself::$httpSocket = new HttpSocket();\n}\n$value = current($data);\nself::$httpSocket->get('http://twitter.com/status/user_timeline/' . $value . '.json?count=1');\nreturn (self::$httpSocket->response['status']['code'] != 404);\n}\n}\n\n```", "```php\narray('twitter' => 'nonexistingtwitteraccount')\n\n```", "```php\nclass Profile extends AppModel {\npublic $validate = array(\n'email' => array('rule' => 'notEmpty'),\n'name' => array('rule' => 'notEmpty'),\n'twitter' => array(\n'rule' => 'validateTwitter',\n'allowEmpty' => true,\n'url' => 'http://twitter.com/%TWITTER%'\n)\n);\nprotected function validateTwitter($data, $options) {\nstatic $httpSocket;\nif (!isset($httpSocket)) {\nApp::import('Core', 'HttpSocket');\n$httpSocket = new HttpSocket();\n}\n$options = array_merge(array(\n'url' => 'http://twitter.com/status/user_timeline/%TWITTER%.json?count=1'\n), $options);\n$value = current($data);\n$httpSocket->get(str_ireplace('%TWITTER%', $value, $options['url']));\nreturn ($httpSocket->response['status']['code'] != 404);\n}\n}\n\n```", "```php\nclass Profile extends AppModel {\npublic $validate = array(\n'email' => array('rule' => 'notEmpty'),\n'name' => array('rule' => 'notEmpty'),\n'twitter' => array(\n'rule' => array(\n'validateTwitter',\n'http://twitter.com/%TWITTER%'\n),\n'allowEmpty' => true\n)\n);\nprotected static $httpSocket;\nprotected function validateTwitter($data, $url = 'http://twitter.com/status/user_timeline/%TWITTER%.json?count=1') {\nif (!isset(self::$httpSocket)) {\nApp::import('Core', 'HttpSocket');\nself::$httpSocket = new HttpSocket();\n}\n$value = current($data);\nself::$httpSocket->get(str_ireplace('%TWITTER%', $value, $url));\nreturn (self::$httpSocket->response['status']['code'] != 404);\n}\n}\n\n```", "```php\npublic function index() {\n$profiles = $this->Profile->find('all');\n$this->set(compact('profiles'));\n}\n\n```", "```php\n<?php foreach($profiles as $profile) { ?>\n<p>\n<?php echo $this->Html->link(\n$profile['Profile']['twitter'],\n'http://twitter.com/' . $profile['Profile']['twitter'],\narray('title' => $profile['Profile']['twitter'])\n); ?>\n</p>\n<?php } ?>\n\n```", "```php\n    <?php\n    App::import('Core', 'HttpSocket');\n    class TwitterAccountBehavior extends ModelBehavior {\n    protected static $httpSocket;\n    public function setup($model, $config = array()) {\n    parent::setup($model, $config);\n    $this->settings[$model->alias] = array_merge(array(\n    'field' => 'twitter'\n    ), $config);\n    }\n    protected function timeline($twitter, $count = 10, $returnStatus = false) {\n    if (!isset(self::$httpSocket)) {\n    self::$httpSocket = new HttpSocket();\n    }\n    $content = self::$httpSocket->get('http://twitter.com/status/user_timeline/' . $twitter . '.json?count=' . $count);\n    $status = self::$httpSocket->response['status']['code'];\n    if (!empty($content)) {\n    $content = json_decode($content);\n    }\n    if ($returnStatus) {\n    return compact('status', 'content');\n    }\n    return $content;\n    }\n    }\n    ?>\n\n    ```", "```php\n    public function validateTwitter($model, $data) {\n    $field = $this->settings[$model->alias]['field'];\n    if (!empty($data[$field])) {\n    $value = $data[$field];\n    $result = $this->timeline($value, 1, true);\n    if ($result['status'] == 404) {\n    $result = false;\n    }\n    }\n    return $result;\n    }\n\n    ```", "```php\n    <?php\n    class Profile extends AppModel {\n    public $actsAs = array('TwitterAccount');\n    public $validate = array(\n    'email' => array('rule' => 'notEmpty'),\n    'name' => array('rule' => 'notEmpty'),\n    'twitter' => array(\n    'rule' => 'validateTwitter',\n    'allowEmpty' => true,\n    'message' => 'This twitter account is not valid'\n    )\n    );\n    }\n    ?>\n\n    ```", "```php\n    public function beforeFind($model, $query) {\n    $this->settings[$model->alias]['tweets'] = !isset($query['tweets']) ? true : $query['tweets'];\n    return parent::beforeFind($model, $query);\n    }\n    public function afterFind($model, $results, $primary) {\n    $rows = parent::afterFind($model, $results, $primary);\n    if (!is_null($rows)) {\n    $results = $rows;\n    }\n    if (!empty($this->settings[$model->alias]['tweets'])) {\n    $field = $this->settings[$model->alias]['field'];\n    $count = is_int($this->settings[$model->alias]['tweets']) ?\n    $this->settings[$model->alias]['tweets'] :\n    10;\n    foreach($results as $i => $result) {\n    $twitter = $result[$model->alias][$field];\n    $tweets = array();\n    if (!empty($result[$model->alias][$field])) {\n    $result = $this->timeline($twitter, $count);\n    if (!empty($result) && is_array($result)) {\n    foreach($result as $tweet) {\n    $tweets[] = array(\n    'created' => date('Y-m-d H:i:s', strtotime($tweet->created_at)),\n    'source' => $tweet->source,\n    'user' => $tweet->user->screen_name,\n    'text' => $tweet->text\n    );\n    }\n    }\n    }\n    $results[$i]['Tweet'] = $tweets;\n    }\n    }\n    return $results;\n    }\n\n    ```", "```php\n    <?php foreach($profiles as $profile) { ?>\n    <p>\n    <?php echo $this->Html->link(\n    $profile['Profile']['twitter'],\n    'http://twitter.com/' . $profile['Profile']['twitter'],\n    array('title' => $profile['Profile']['twitter'])\n    ); ?>\n    <?php if (!empty($profile['Tweet'])) { ?>\n    <ul>\n    <?php foreach($profile['Tweet'] as $tweet) { ?>\n    <li>\n    <code><?php echo $tweet['text']; ?></code>\n    from <?php echo $tweet['source']; ?>\n    on <?php echo $tweet['created']; ?>\n    </li>\n    <?php } ?>\n    </ul>\n    <?php } ?>\n    </p>\n    <?php } ?>\n\n    ```", "```php\n$this->Profile->find('all', array('tweets' => false));\n\n```", "```php\n$this->Profile->find('all', array('tweets' => 1));\n\n```", "```php\npublic function setup($model, $config = array()) {\nparent::setup($model, $config);\n$this->settings[$model->alias] = array_merge(array(\n'field' => 'twitter',\n'cache' => 'default'\n), $config);\n}\n\n```", "```php\npublic function afterFind($model, $results, $primary) {\n$rows = parent::afterFind($model, $results, $primary);\nif (!is_null($rows)) {\n$results = $rows;\n}\nif (!empty($this->settings[$model->alias]['tweets'])) {\n$field = $this->settings[$model->alias]['field'];\n$count = is_int($this->settings[$model->alias]['tweets']) ?\n$this->settings[$model->alias]['tweets'] :\n10;\n$cacheConfig = $this->settings[$model->alias]['cache'];\nforeach($results as $i => $result) {\n$twitter = $result[$model->alias][$field];\n$tweets = array();\nif (!empty($cacheConfig)) {\n$tweets = Cache::read('tweets_' . $twitter, $cacheConfig);\n}\nif (empty($tweets) && !empty($result[$model->alias][$field])) {\n$result = $this->timeline($twitter, $count);\nif (!empty($result) && is_array($result)) {\nforeach($result as $tweet) {\n$tweets[] = array(\n'created' => date('Y-m-d H:i:s', strtotime($tweet->created_at)),\n'source' => $tweet->source,\n'user' => $tweet->user->screen_name,\n'text' => $tweet->text\n);\n}\n}\nCache::write('tweets_' . $twitter, $tweets, $cacheConfig);\n}\n$results[$i]['Tweet'] = $tweets;\n}\n}\nreturn $results;\n}\n\n```", "```php\npublic function beforeDelete($model, $cascade = true) {\n$field = $this->settings[$model->alias]['field'];\n$this->settings[$model->alias]['delete'] = $model->field($field, array(\n$model->primaryKey => $model->id\n));\nreturn parent::beforeDelete($cascade);\n}\npublic function afterDelete($model) {\nif (!empty($this->settings[$model->alias]['delete'])) {\n$cacheConfig = $this->settings[$model->alias]['cache'];\n$twitter = $this->settings[$model->alias]['delete'];\nCache::delete('tweets_' . $twitter, $cacheConfig);\n}\nreturn parent::afterDelete($model);\n}\n\n```", "```php\nALTER TABLE `profiles`\nADD COLUMN `url` VARCHAR(255) default NULL,\nADD COLUMN `last_tweet` VARCHAR(140) default NULL;\n\n```", "```php\n    public function beforeSave($model) {\n    $field = $this->settings[$model->alias]['field'];\n    $twitter = null;\n    if (!array_key_exists($field, $model->data[$model->alias]) && $model->exists()) {\n    $twitter = $model->field($field, array(\n    $model->primaryKey => $model->id\n    ));\n    } elseif (array_key_exists($field, $model->data[$model->alias])) {\n    $twitter = $model->data[$model->alias][$field];\n    }\n    $data = array(\n    'url' => !empty($twitter) ? 'http://twitter.com/' . $twitter : null,\n    'last_tweet' => null\n    );\n    if (!empty($twitter)) {\n    $tweets = $this->timeline($twitter, 1);\n    if (!empty($tweets) && is_array($tweets)) {\n    $data['last_tweet'] = $tweets[0]->text;\n    }\n    }\n    $model->data[$model->alias] = array_merge(\n    $model->data[$model->alias],\n    $data\n    );\n    $this->_addToWhitelist($model, array_keys($data));\n    return parent::beforeSave($model);\n    }\n\n    ```", "```php\nCREATE TABLE `posts`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`slug` VARCHAR(255) NOT NULL,\n`title` VARCHAR(255) NOT NULL,\n`text` TEXT NOT NULL,\nPRIMARY KEY(`id`),\nUNIQUE KEY `slug`(`slug`)\n);\n\n```", "```php\n<?php\nclass Post extends AppModel {\npublic $validate = array(\n'title' => array('rule' => 'notEmpty'),\n'text' => array('rule' => 'notEmpty')\n);\n}\n?>\n\n```", "```php\n<?php\nclass PostsController extends AppController {\npublic function add() {\nif (!empty($this->data)) {\n$this->Post->create();\nif ($this->Post->save($this->data)) {\n$this->Session->setFlash('Post created');\n$this->redirect('/');\n} else {\n$this->Session->setFlash('Please correct the errors');\n}\n}\n}\n}\n?>\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'title',\n'text'\n));\necho $this->Form->end('Create');\n?>\n\n```", "```php\n    <?php\n    class Post extends AppModel {\n    public $actsAs = array('Syrup.Sluggable');\n    public $validate = array(\n    'title' => array('rule' => 'notEmpty'),\n    'text' => array('rule' => 'notEmpty')\n    );\n    }\n    ?>\n\n    ```", "```php\n    public function index() {\n    $this->paginate['limit'] = 10;\n    $posts = $this->paginate();\n    $this->set(compact('posts'));\n    }\n\n    ```", "```php\n    <div class=\"paging\">\n    <?php echo $this->Paginator->prev(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->numbers(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </div>\n    <br />\n    <ul>\n    <?php foreach($posts as $post) { ?>\n    <li><?php echo $this->Html->link($post['Post']['title'], array('action'=>'view', $post['Post']['slug'])); ?></li>\n    <?php } ?>\n    </ul>\n\n    ```", "```php\n    public function view($slug) {\n    $post = $this->Post->find('first', array(\n    'conditions' => array('Post.slug' => $slug),\n    'recursive' => -1\n    ));\n    $this->set(compact('post'));\n    }\n\n    ```", "```php\n    <h1><?php echo $post['Post']['title']; ?></h1>\n    <p><?php echo $post['Post']['text']; ?></p>\n    <?php echo $this->Html->link('Posts', array('action'=>'index')); ?>\n\n    ```", "```php\n    http://localhost/posts/view/automatic-tasks-with-cakephp\n\n    ```", "```php\nCREATE TABLE `addresses`(\n`id` INT UNSIGNED AUTO_INCREMENT NOT NULL,\n`address_1` VARCHAR(255) NOT NULL,\n`city` VARCHAR(255) default NULL,\n`state` VARCHAR(255) NOT NULL,\n`zip` VARCHAR(10) default NULL,\n`latitude` FLOAT(10,7) NOT NULL,\n`longitude` FLOAT(10,7) NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\n<?php\nclass Address extends AppModel {\npublic $validate = array(\n'address_1' => array('rule' => 'notEmpty'),\n'state' => array('rule' => 'notEmpty')\n);\npublic static $states = array(\n'CA' => 'California',\n'FL' => 'Florida',\n'NY' => 'New York'\n);\n}\n?>\n\n```", "```php\n<?php\nclass AddressesController extends AppController {\npublic function add() {\nif (!empty($this->data)) {\n$this->Address->create();\nif ($this->Address->save($this->data)) {\n$this->Session->setFlash('Address created');\n$this->redirect('/');\n} else {\n$this->Session->setFlash('Please correct the errors');\n}\n}\n$states = $this->Address->states;\n$this->set(compact('states'));\n}\n}\n?>\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'address_1' => array('label' => 'Address'),\n'city',\n'state' => array('options'=>$states),\n'zip'\n));\necho $this->Form->end('Create');\n?>\n\n```", "```php\n    Configure::write('Geocode.key', 'APIKEY');\n\n    ```", "```php\n    <?php\n    App::import('Model', 'Geocode.GeoAddress');\n    class Address extends GeoAddress {\n    public $validate = array(\n    'address_1' => array('rule' => 'notEmpty'),\n    'state' => array('rule' => 'notEmpty')\n    );\n    public static $states = array(\n    'CA' => 'California',\n    'FL' => 'Florida',\n    'NY' => 'New York'\n    );\n    }\n    ?>\n\n    ```", "```php\n    public function index() {\n    $address = '1211 La Brad Lane, Tampa, FL';\n    $this->paginate = array(\n    'near',\n    'address' => $address\n    );\n    $addresses = $this->paginate();\n    $this->set(compact('address', 'addresses'));\n    }\n\n    ```", "```php\n    <h1>Addresses near <strong><?php echo $address; ?></strong></h1>\n    <div class=\"paging\">\n    <?php echo $this->Paginator->prev(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->numbers(); ?>\n    &nbsp;\n    <?php echo $this->Paginator->next(); ?>\n    </div>\n    <br />\n    <ul>\n    <?php foreach($addresses as $currentAddress) { ?>\n    <li>\n    <?php echo $currentAddress['Address']['address_1']; ?>\n    at\n    <strong><?php echo number_format($currentAddress['Address']['distance'], 2) . ' km.'; ?></strong>\n    </li>\n    <?php } ?>\n    </ul>\n\n    ```"]