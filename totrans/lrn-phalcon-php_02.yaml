- en: Chapter 2. Setting Up the MVC Structure and the Environment for Our Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：设置项目 MVC 结构和环境
- en: 'In the previous chapter, we summarized the most common parts of Phalcon. Next,
    we will try to set up the "Hello world" page for our project. In this chapter,
    we will cover these topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们总结了 Phalcon 最常见的部分。接下来，我们将尝试为我们的项目设置“Hello world”页面。在本章中，我们将涵盖以下主题：
- en: An introduction to MVC—what is MVC?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC 简介——什么是 MVC？
- en: The MVC structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC 结构
- en: Creating a configuration file and the Bootstrap
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建配置文件和引导
- en: Preparing the initial DI interface and the router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备初始 DI 接口和路由
- en: Using the router component in a module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模块中使用路由组件
- en: Creating the base layout
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本布局
- en: What is MVC?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 MVC？
- en: I am pretty sure that if you are reading this book, you are already familiar
    with the MVC pattern, but for beginners, we will try to explain this in a few
    words.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常确信，如果您正在阅读这本书，您已经熟悉 MVC 模式，但对于初学者，我们将尝试用几句话解释它。
- en: 'MVC is defined as an architectural pattern, and it stands for Model-View-Controller;
    it is used mostly in web development, but it is widely applied in software that
    needs a **Graphical User Interface** (**GUI**). To make this introduction quick,
    let''s explain these components:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 被定义为一种架构模式，代表模型-视图-控制器；它主要用于 Web 开发，但在需要 **图形用户界面**（**GUI**）的软件中得到了广泛应用。为了使这个介绍快速，让我们解释这些组件：
- en: '**Model**: This is usually used as an abstraction layer, and validation for
    the tables of a database, but it can be used to handle any kind of logic within
    the application.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这通常用作数据库表的抽象层和验证，但也可以用于处理应用程序中的任何类型的逻辑。'
- en: '**View**: A view, usually, represents a template (can be an HTML file) that
    the controller will render.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：通常，视图代表控制器将要渲染的模板（可以是 HTML 文件）。'
- en: '**Controller**: In a web application, the controller handles all the HTTP requests
    and sends an appropriate response. This response can mean rendering a template,
    outputting JSON data, and so on.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：在 Web 应用程序中，控制器处理所有 HTTP 请求并发送适当的响应。此响应可以表示渲染模板、输出 JSON 数据等。'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the exact definition, I suggest you check out the Wikipedia page of the
    MVC pattern at [http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488](http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于确切定义，我建议您查看维基百科上 MVC 模式的页面 [http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488](http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488))。
- en: Let's take a quick look at an example of MVC for a news/blog application by
    assuming that a user will make a request to `http://www.learning-phalcon.localhost/article/list`.
    To match this URL, we will need to implement the routing component, but we are
    going to cover this in the next chapters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下新闻/博客应用程序的 MVC 示例，假设用户将请求 `http://www.learning-phalcon.localhost/article/list`。为了匹配此
    URL，我们需要实现路由组件，但我们将在这接下来的章节中介绍。
- en: Model
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: As mentioned earlier, a model is an abstraction layer for a database table and
    probably, in 99 percent of cases, you will use it for this purpose. In this example,
    we will extend the `Phalcon\Mvc\Model` component that has some built-in methods,
    such as the `find` method. By default, this method will return all the records
    found in a table named `article`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，模型是数据库表的抽象层，并且很可能在 99% 的情况下，您会为此目的使用它。在这个例子中，我们将扩展具有一些内置方法（如 `find` 方法）的
    `Phalcon\Mvc\Model` 组件。默认情况下，此方法将返回名为 `article` 的表中找到的所有记录。
- en: 'Let''s assume that we have the following MySQL table structure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们拥有以下 MySQL 表结构：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For this table, our model would look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个表，我们的模型看起来会是这样：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we need to overwrite the default find method, we can create one in our model.
    For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要重写默认的 `find` 方法，我们可以在我们的模型中创建一个。例如：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: View
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: 'Let''s consider the following PHP/HTML template as our view:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下 PHP/HTML 模板作为我们的视图：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`$article` is an instance of our model. This is why we can call our getters
    from it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`$article` 是我们模型的一个实例。这就是为什么我们可以从它调用我们的获取器。'
- en: Controller
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The controller will handle requests and will send the information to the appropriate
    method from a model. In this example, the controller will extend the `\Phalcon\Mvc\Controller`
    component:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器将处理请求并将信息发送到模型中的适当方法。在这个例子中，控制器将扩展 `\Phalcon\Mvc\Controller` 组件：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we created a public method called `listAction` that calls the
    `find` method from the model, and it assigns the results to our `view` component.
    You probably noticed that the namespace of the controller contains the `Frontend`
    word. This is because we will use a multi-module application. (We will discuss
    this in the latter sections of this chapter.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们创建了一个名为`listAction`的公共方法，它从模型中调用`find`方法，并将结果分配给我们的`view`组件。您可能已经注意到控制器的命名空间中包含`Frontend`一词。这是因为我们将使用多模块应用程序。（我们将在本章后面的部分讨论这一点。）
- en: With this, we will close our short introduction to MVC or Phalcon MVC. Next,
    we will talk about the folder structure of an MVC application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们将结束对MVC或Phalcon MVC的简要介绍。接下来，我们将讨论MVC应用程序的文件夹结构。
- en: The MVC structure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC结构
- en: This subject (like many other subjects) is quite sensitive. It depends on how
    much experience you have and how you are used to structure your projects. In a
    web application, most of the time we have models, views (templates), controllers,
    and assets (images, JavaScript files, and style sheets). Based on this, I like
    the following structure, because it's easy to understand where a file resides
    and what its purpose is.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题（就像许多其他主题一样）相当敏感。它取决于您的经验有多少，以及您习惯如何构建项目。在Web应用程序中，大多数时候我们都有模型、视图（模板）、控制器和资源（图像、JavaScript文件和样式表）。基于这一点，我喜欢以下结构，因为它易于理解文件的位置及其用途。
- en: 'For a single module application, we can have the following structure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单模块应用程序，我们可以有以下结构：
- en: '![The MVC structure](img/B03522_02_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![MVC结构](img/B03522_02_03.jpg)'
- en: 'For a multi-module application, we can have the following structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多模块应用程序，我们可以有以下结构：
- en: '![The MVC structure](img/B03522_02_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![MVC结构](img/B03522_02_04.jpg)'
- en: As you can see, it is quite easy to know exactly what a file is used for and
    where we can find it. In the end, you should choose the structure that fits your
    needs but keep in mind that if you are going to work in a team, it should be intuitive
    enough for any new member.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，了解一个文件的具体用途及其所在位置相当简单。最终，您应该选择适合您需求的架构，但请记住，如果您将在团队中工作，它应该足够直观，以便任何新成员都能理解。
- en: Creating the structure for our project
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的项目创建结构
- en: 'Now, we are going to create the structure for our project. In the first chapter,
    we created the `/var/www/learning-phalcon.localhost` folder. If you have another
    location, go there and create the following directory structure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的项目创建结构。在第一章中，我们创建了`/var/www/learning-phalcon.localhost`文件夹。如果您有其他位置，请前往那里并创建以下目录结构：
- en: '![Creating the structure for our project](img/B03522_02_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的项目创建结构](img/B03522_02_05.jpg)'
- en: 'Next, let''s create the `index.php` file that will handle our application.
    This file will be the default file in our web server:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个名为`index.php`的文件，该文件将处理我们的应用程序。这个文件将是我们的Web服务器的默认文件：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first two lines, we set the header and internal encoding to UTF-8\. This
    is a good practice if you are going to use special characters / diacritics. In
    the fourth line, we include a file named `Bootstrap.php`. This file is the Bootstrap
    of our project, and we will create its content in a few moments. On the next lines,
    we create a new instance of Bootstrap with a default module (`frontend`), and
    we initialize it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两行中，我们设置了头部和内部编码为UTF-8。如果您打算使用特殊字符/变音符号，这是一个好习惯。在第四行中，我们包含了一个名为`Bootstrap.php`的文件。这个文件是项目的引导文件，我们将在接下来的几分钟内创建其内容。在下一行中，我们使用默认模块（`frontend`）创建一个新的Bootstrap实例，并初始化它。
- en: 'We will need to find a way to autoload any file in our application without
    manually including it. We will make use of the `\Phalcon\Loader` component that
    will register all our modules in the namespace. In the `config` folder, we will
    create a new file called `loader.php` with the following content:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要找到一种方法来自动加载应用程序中的任何文件，而无需手动包含它。我们将利用`\Phalcon\Loader`组件，该组件将在命名空间中注册所有我们的模块。在`config`文件夹中，我们将创建一个名为`loader.php`的新文件，其内容如下：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: PSR
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PSR
- en: 'PSR is a collection of standards used in PHP development, which is supported
    by a group of people, the **PHP Framework Interop Group**. The standards include
    these:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PSR是一组在PHP开发中使用的标准，由一组人支持，即**PHP框架互操作性小组**。这些标准包括以下内容：
- en: The autoloading standard
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动加载标准
- en: The basic coding standard
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本编码标准
- en: The coding style guide
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码风格指南
- en: Logger interface
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志接口
- en: The \`Phalcon\Loader` component is PSR-4 ([https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md))
    compliant, and it helps us to load only the file that we need, when we need them.
    In this way, we increase the speed of our application. Meanwhile, you can find
    more information about this component in the official documentation (at [http://docs.phalconphp.com/en/latest/reference/loader.html](http://docs.phalconphp.com/en/latest/reference/loader.html)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Phalcon\Loader` 组件符合 PSR-4 ([https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md))，它帮助我们按需加载所需的文件。这样，我们提高了应用程序的速度。同时，你可以在官方文档（[http://docs.phalconphp.com/en/latest/reference/loader.html](http://docs.phalconphp.com/en/latest/reference/loader.html)）中找到更多关于这个组件的信息。'
- en: Creating the configuration file and the Bootstrap
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建配置文件和 Bootstrap
- en: 'Almost any application has some constants that will be reused (database credentials,
    SMTP credentials, and so on). For our application, we will create a global configuration
    file. This file will be an instance of the `\Phalcon\Config` component. Switch
    to the `config` directory and create it with the following content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何应用程序都有一些将被重用的常量（数据库凭证、SMTP 凭证等）。对于我们的应用程序，我们将创建一个全局配置文件。这个文件将是 `\Phalcon\Config`
    组件的一个实例。切换到 `config` 目录并创建它，内容如下：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Phalcon\Config` component simplifies the access to the configuration data
    within our application. By default, data is returned as an object (for example,
    we have access to the application name using `$config->application->name path`),
    but it also has a magic method to return data as an array—`$config->toArray()`.
    If you use `$config->toArray()`, then you will access the application name using
    the `$config['application']['name']` syntax. Another cool fact about this component
    is that we can merge another array into it using the `$config->merge($new_config)`
    syntax.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Phalcon\Config` 组件简化了我们应用程序中配置数据的访问。默认情况下，数据以对象形式返回（例如，我们可以通过 `$config->application->name
    path` 访问应用程序名称），但它也提供了一个魔法方法来以数组形式返回数据——`$config->toArray()`。如果你使用 `$config->toArray()`，那么你将使用
    `$config[''application''][''name'']` 语法来访问应用程序名称。关于这个组件的另一个有趣的事实是，我们可以使用 `$config->merge($new_config)`
    语法将另一个数组合并到其中。'
- en: 'Now that we have an autoloader and a configuration, let''s set up our Bootstrap
    file. To do this, create a file named `Bootstrap.php` in the `modules` folder
    with the following content:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了自动加载器和配置，让我们设置我们的 Bootstrap 文件。为此，在 `modules` 文件夹中创建一个名为 `Bootstrap.php`
    的文件，并包含以下内容：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our Bootstrap file extends `\Phalcon\Mvc\Application` ([http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html))
    that gives us access to the `registerModules()` method. The class constructor
    registers all our modules and sets the default module. The `_registerServices()`
    method initializes the DI and includes the required files for our application.
    Finally, the `init()` method initializes the application. Here, we make use of
    the `\Phalcon\Debug` component, because we need to be able to debug the application
    at any time. This should not be enabled in a production environment.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Bootstrap 文件扩展了 `\Phalcon\Mvc\Application` ([http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html))，这使我们能够访问
    `registerModules()` 方法。类构造函数注册了所有我们的模块并设置了默认模块。`_registerServices()` 方法初始化 DI
    并包含我们应用程序所需的文件。最后，`init()` 方法初始化应用程序。在这里，我们使用了 `\Phalcon\Debug` 组件，因为我们需要在任何时间都能调试应用程序。这不应该在生产环境中启用。
- en: Until now, we created the folder structure, the configuration file, the autoloader,
    and the Bootstrap. We will go further by creating the services, routing, and the
    frontend modules files.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建了文件夹结构、配置文件、自动加载器和 Bootstrap。我们将进一步创建服务、路由和前端模块文件。
- en: Preparing the initial DI interface and the router
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备初始 DI 接口和路由器
- en: 'In the Bootstrap, we don''t have two files: `services.php` and `routing.php`.
    The `services.php` file will hold the information about global services that our
    application will use, and the `routing.php` file will hold information about our
    routes. Let''s start by creating the `services.php` file in our `config` folder
    with the following content:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 中，我们没有两个文件：`services.php` 和 `routing.php`。`services.php` 文件将包含我们应用程序将使用的全局服务信息，而
    `routing.php` 文件将包含我们的路由信息。让我们首先在我们的 `config` 文件夹中创建一个名为 `services.php` 的文件，并包含以下内容：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `$di` variable is available because we initialized it in the `_registerServices()`
    method from the Bootstrap. `$di` is an instance of `\Phalcon\DI\FactoryDefault()`.
    Let''s try to understand each component that we set:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`$di[''session'']` is available by default, but we overwrite it because we
    want to use Redis to store our session.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''security'']` is available by default, but we overwrite it because we
    want to set a higher work factor than the default one. We will use this component
    to encrypt our passwords.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''redis'']` connects to the Redis server. We pass the parameters from
    our configuration file. The `\Redis` class is already available, because we installed
    it in the first chapter (`php5-redis`).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''url'']` is available by default. The reason why we overwrite this is
    for backwards compatibility with older versions of Phalcon. In the past, I wasn''t
    able to access it without being defined. Since Phalcon 1.3, it works as expected.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''voltService'']` is a custom DI component that we will use for the Volt
    template engine (you will learn about Volt soon).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''logger'']` is a custom DI component, and it uses `\Phalcon\Logger\Adapter\File`.
    We will use this to log different errors/warnings.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''cache'']` is also a custom DI component that uses Igbinary as frontend
    cache and redis for backend. You will need to install Igbinary from PECL, if you
    don''t have it, by issuing the following command: `sudo pecl install igbinary`.
    Note that you might need to reinstall `php5-redis` after installing Igbinary.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we are going to use some components that are not available by default
    in Phalcon, we will need to install them from `phalcon/incubator` ([https://github.com/phalcon/incubator](https://github.com/phalcon/incubator)).
    **Incubator** is a collection of components developed by the community, which
    may or may not be included in Phalcon's core. One of the components that we need
    right now is the `\Phalcon\Cache\Backend\Redis`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use **Composer** ([https://getcomposer.org](https://getcomposer.org)/)
    to manage our package dependency. To install composer, execute the following command
    in the `learning-phalcon.localhost` folder:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you should have a new file named `composer.phar` in your root folder.
    Next, let''s install `phalcon/incubator` by executing the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will install other dependencies such as Swift Mailer, so it might take
    a few minutes to finish. If you check the folder structure, you will see that
    a new directory named `vendor` has been created. This is the default installation
    folder for composer, and all the packages will reside here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is not enough. In order to autoload the files from vendor, we
    need to make a small modification to our `public/index.php` file by adding the
    autoloader from composer. The new `index.php` file should look like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the router component in a module
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will continue this chapter by creating the routes for our application. To
    do this, switch to the `config` directory, and create a file named `routing.php`
    with the following content:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续本章，通过为我们的应用程序创建路由。为此，切换到`config`目录，并创建一个名为`routing.php`的文件，内容如下：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this file, we make use of the `\Phalcon\Mvc\Router` component. We check
    whether there is any routing information for the module and we load it; otherwise,
    we create the default routing rules. If you''ve been following us until now, you
    should have the following directory structure:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们使用了`\Phalcon\Mvc\Router`组件。我们检查模块是否有任何路由信息，如果有，就加载它；如果没有，就创建默认的路由规则。如果你一直跟随着我们，你应该有以下的目录结构：
- en: '![Using the router component in a module](img/B03522_02_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![在模块中使用路由组件](img/B03522_02_06.jpg)'
- en: In the first chapter, we already created and enabled the configuration files
    for the web server. In addition, we edited the host file, and www.learning-phalcon.localhost
    is pointing to our local host (`127.0.0.1`). Let's try to access `http://www.learning-phalcon.localhost`
    in our browser
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们已创建并启用了Web服务器的配置文件。此外，我们还编辑了主机文件，并且`www.learning-phalcon.localhost`指向我们的本地主机（`127.0.0.1`）。让我们尝试在我们的浏览器中访问`http://www.learning-phalcon.localhost`。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please use `http://`. Otherwise, Chrome and probably other browsers will fail
    to access this URL, because `.dev` is not a registered Top Level Domain.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`http://`。否则，Chrome以及其他浏览器可能无法访问此URL，因为`.dev`不是一个注册的顶级域名。
- en: 'If you managed to access the application, you should see an error page similar
    to the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功访问了应用程序，你应该会看到一个类似于以下截图的错误页面：
- en: '![Using the router component in a module](img/B03522_02_01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![在模块中使用路由组件](img/B03522_02_01.jpg)'
- en: 'Let''s fix this error by creating the files needed for our `Frontend` module.
    Go to the `modules/Frontend` folder, and create a file named `Module.php` with
    the following content:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建我们`Frontend`模块所需的文件来修复这个错误。转到`modules/Frontend`文件夹，并创建一个名为`Module.php`的文件，内容如下：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, copy this file into each module and change the namespace. For example,
    the `Module.php` file that resides in the `Api` module should have the `App\Api`
    namespace. Now, your modules directory structure should be like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将此文件复制到每个模块，并更改命名空间。例如，位于`Api`模块中的`Module.php`文件应该有`App\Api`的命名空间。现在，你的模块目录结构应该如下所示：
- en: '![Using the router component in a module](img/B03522_02_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![在模块中使用路由组件](img/B03522_02_07.jpg)'
- en: 'If you refresh the page, you will get another error that says `Phalcon\DI\Exception:
    Service ''view'' was not found in the dependency injection container`. This happens
    because each module will have its own `config` folder, and we need to create the
    files there. Go to the `modules/Frontend/` directory and create a new folder named
    `Config` with C in uppercase.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你刷新页面，你会得到另一个错误，显示`Phalcon\DI\Exception: Service ''view'' was not found in
    the dependency injection container`。这是因为每个模块都将有自己的`config`文件夹，我们需要在那里创建文件。转到`modules/Frontend/`目录，并创建一个名为`Config`的新文件夹，首字母大写。'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We use the uppercase because it's more easy to read and load within the namespace.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用大写字母，因为它在命名空间内更容易阅读和加载。
- en: 'Now, in `modules/Frontend/Config/` create a file named `config.php` with the
    following content:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`modules/Frontend/Config/`目录下创建一个名为`config.php`的文件，内容如下：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the first line, we assign the content of the global configuration file to
    the `$config` variable. Then, we set the module configuration, and we merge this
    information into our global `$config` variable. Next, let''s create the routing
    and services files in the same folder (`modules/Frontend/Config/`):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们将全局配置文件的内容赋值给`$config`变量。然后，我们设置模块配置，并将这些信息合并到我们的全局`$config`变量中。接下来，让我们在同一文件夹（`modules/Frontend/Config/`）中创建路由和服务文件：
- en: '`services.php:`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`services.php：`'
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the `services.php` file, we overwrite the DI's URL and dispatcher components,
    and we create a custom view service that will use voltService that we declared
    in the global services file (`config/services.php`).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`services.php`文件中，我们覆盖了DI的URL和分发器组件，并创建了一个自定义视图服务，该服务将使用我们在全局服务文件（`config/services.php`）中声明的`voltService`。
- en: '`routing.php:`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`routing.php：`'
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We need the `routing.php` file here, because we are going to create custom routes
    for our Frontend module. The next thing that we need is a controller. It is a
    good practice in general to create a base file and all the other files to extend
    the base. This way you will avoid code duplication. Of course, you can use traits
    of other methods, but for this project, we will use a base file most of the time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在这里的 `routing.php` 文件，因为我们将要为我们的前端模块创建自定义路由。接下来我们需要的是控制器。通常来说，创建一个基础文件，并让其他所有文件都扩展这个基础文件是一个好的实践。这样你将避免代码重复。当然，你也可以使用其他方法的
    traits，但在这个项目中，我们将大部分时间使用基础文件。
- en: 'So, let''s create the `Controllers` directory in `modules/Frontend/` and a
    blank base controller in `modules/Frontend/Controllers/` directory:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们在 `modules/Frontend/` 中创建 `Controllers` 目录，并在 `modules/Frontend/Controllers/`
    目录中创建一个空白的基础控制器：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, put the following content in `BaseController.php` file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下内容放入 `BaseController.php` 文件中：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, create another file here named `IndexController.php` with the following
    content:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这里创建另一个名为 `IndexController.php` 的文件，并包含以下内容：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you check the `routing.php` file, you will notice that the default route
    goes to index controller → index action. In Phalcon, the standard is that any
    controller should have the `Controller` suffix, and any public action that matches
    a route should have the Action suffix.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查 `routing.php` 文件，你会注意到默认路由指向索引控制器 → 索引动作。在 Phalcon 中，标准是任何控制器都应该有 `Controller`
    后缀，任何与路由匹配的公共动作都应该有 `Action` 后缀。
- en: 'Let''s take a look at our directory structure from `modules/Frontend`. It should
    be exactly like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的 `modules/Frontend` 目录结构。它应该正好是这样的：
- en: '![Using the router component in a module](img/B03522_02_08.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![在模块中使用路由组件](img/B03522_02_08.jpg)'
- en: If you try to refresh the page at `http://www.learning-phalcon.localhost`, you
    will see a blank page. This is perfectly normal. Next, let's copy the `Controllers`
    and `Config` folders from our `Frontend` module into each remaining module (`Api`,
    `Core`, and `Backoffice`). After we copy the files, we need to change the namespace
    and replace anything related to frontend with the new module name.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试刷新 `http://www.learning-phalcon.localhost` 上的页面，你会看到一个空白页面。这是完全正常的。接下来，让我们将
    `Controllers` 和 `Config` 文件夹从我们的 `Frontend` 模块复制到每个剩余的模块（`Api`、`Core` 和 `Backoffice`）。在我们复制文件后，我们需要更改命名空间，并将与前端相关的内容替换为新模块的名称。
- en: 'For example, after we copy the files into the `Api` module, we need to do the
    following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们将文件复制到 `Api` 模块之后，我们需要做以下操作：
- en: Replace the `App\Frontend\Controllers` namespace with `App\Api\Controllers`
    in the `Controllers/` folder.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Controllers/` 文件夹中将 `App\Frontend\Controllers` 命名空间替换为 `App\Api\Controllers`。
- en: Replace the word "`frontend`" with the word "`api`" in `Config/routing.php`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Config/routing.php` 中将单词 "`frontend`" 替换为单词 "`api`"。
- en: Replace `\App\Frontend\Controllers` with `App\Api\Controllers` in `services.php`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `services.php` 中将 `\App\Frontend\Controllers` 替换为 `App\Api\Controllers`。
- en: Append the module name in lowercase to the `baseUri` key from the `config.php`
    file. The result should be `'baseUri' => '/api/'`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模块名的小写形式附加到 `config.php` 文件中的 `baseUri` 键上。结果应该是 `'baseUri' => '/api/'`。
- en: 'After you finish, the new directory structure should be this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，新的目录结构应该是这样的：
- en: '![Using the router component in a module](img/B03522_02_09.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![在模块中使用路由组件](img/B03522_02_09.jpg)'
- en: Create the base layout
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本布局
- en: Now, it's time to focus a little bit on the layout (templates). We are going
    to use twitter-bootstrap for CSS and jQuery. Then, we are going to create first
    view in order to close this chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候稍微关注一下布局（模板）了。我们将使用 twitter-bootstrap 进行 CSS 和 jQuery。然后，我们将创建第一个视图，以便结束这一章。
- en: 'Navigate to `public/folder` and create a folder named `assets`. Then, go to
    `assets` and create a folder named `default`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `public/folder` 并创建一个名为 `assets` 的文件夹。然后，进入 `assets` 并创建一个名为 `default` 的文件夹：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I am using Bower ([http://bower.io/](http://bower.io/)) as a package manager
    for my assets. It is what composer is for php packages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用 Bower ([http://bower.io/](http://bower.io/)) 作为我的资产包管理器。它对于 PHP 包来说就像是
    composer。
- en: If you don't have Bower installed and you don't want to use it, you will need
    to create a folder named `bower_components` in your `public/default/assets` folder
    and clone twitter-bootstrap repository from GitHub. You will also need to download
    jQuery and unzip it into the `bower_components` folder.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装 Bower 并且不想使用它，你需要在你的 `public/default/assets` 文件夹中创建一个名为 `bower_components`
    的文件夹，并从 GitHub 克隆 twitter-bootstrap 仓库。你还需要下载 jQuery 并将其解压到 `bower_components`
    文件夹中。
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you have Bower, then just go to the `public/default/assets` folder and install
    twitter Bootstrap:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有Bower，那么只需前往`public/default/assets`文件夹并安装twitter Bootstrap：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will install jQuery automatically because Bootstrap requires jQuery, and
    Bower is smart enough to check for dependencies.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动安装jQuery，因为Bootstrap需要jQuery，而Bower足够智能，能够检查依赖项。
- en: 'In the near future, we will also need some custom JavaScript, CSS files, and
    images. We need to create these directories in the public/assets/default folder,
    and we will also create two empty files named `lp.js` and `lp.css`. The folder
    structure of your public folder should be like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，我们还需要一些自定义的JavaScript、CSS文件和图片。我们需要在public/assets/default文件夹中创建这些目录，并且我们还将创建两个名为`lp.js`和`lp.css`的空文件。你的public文件夹的目录结构应该是这样的：
- en: '![Create the base layout](img/B03522_02_10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本布局](img/B03522_02_10.jpg)'
- en: 'Let''s get back to our `frontend` module. Navigate to `modules/Frontend` and
    create a folder named Views. Then, in the `Views` folder, create another one named
    Default:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的`frontend`模块。导航到`modules/Frontend`并创建一个名为`Views`的文件夹。然后，在`Views`文件夹中，创建另一个名为`Default`的文件夹：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Remember that we are using Volt ([http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html))
    as our template engine. We already discussed Volt's syntax in the first chapter,
    and as we move forward, we will dig more into this subject, but at the right moment.
    For now, we just want to finish our project structure and render a dummy layout
    for our fronted module.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们正在使用Volt ([http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html))
    作为我们的模板引擎。我们在第一章中已经讨论了Volt的语法，随着我们继续前进，我们将更深入地探讨这个主题，但会在适当的时候。现在，我们只想完成我们的项目结构，并为前端模块渲染一个示例布局。
- en: 'This way we can ensure that we did everything as expected until now. In the
    dependency injection from `services.php`, we assigned the file extension .volt
    to our template engine. Therefore, all the views that we are going to create will
    have the extension .volt. Let''s create the main layout. Navigate to `modules/Frontend/Views/Default`
    and create a new file named `layout.volt` with the following content:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以确保到目前为止我们做的一切都符合预期。在`services.php`的依赖注入中，我们将文件扩展名.volt分配给了我们的模板引擎。因此，我们将要创建的所有视图都将具有.volt扩展名。让我们创建主布局。导航到`modules/Frontend/Views/Default`并创建一个名为`layout.volt`的新文件，内容如下：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As we mentioned earlier, we are not going to talk about volt's syntax for now.
    There is one more step that needs to be performed in order to render the templates.
    We need to create a new folder named `index`; then, in the `index` folder, we
    also need to create a file named `index.volt`. This will match `IndexController`
    → `IndexAction`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，我们现在不会讨论volt的语法。为了渲染模板，还需要执行一个额外的步骤。我们需要创建一个名为`index`的新文件夹；然后，在`index`文件夹中，我们还需要创建一个名为`index.volt`的文件。这将与`IndexController`
    → `IndexAction`相匹配。
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The content of the `index.volt` file is this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.volt`文件的内容如下：'
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The final directory structure for our frontend module should be this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们前端模块的最终目录结构应该是这样的：
- en: '![Create the base layout](img/B03522_02_11.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本布局](img/B03522_02_11.jpg)'
- en: Now, let's try to refresh the page `http://www.learning-phalcon.localhost`.
    If you see a page like the one in the following screenshot, then you have made
    it!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试刷新页面`http://www.learning-phalcon.localhost`。如果你看到以下截图中的页面，那么你就成功了！
- en: '![Create the base layout](img/B03522_02_02.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本布局](img/B03522_02_02.jpg)'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the basics of MVC, created the folder structure
    for our project, and learned a little bit about how to use the DI component, routing
    component, and the view component. We also created the views and rendered the
    first page from the Frontend module.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了MVC的基础知识，为我们的项目创建了文件夹结构，并了解了一些关于如何使用DI组件、路由组件和视图组件的方法。我们还创建了视图，并从前端模块渲染了第一个页面。
- en: In the next chapters, we will learn about Phalcon's ORM and ODM, and we will
    continue to add features until we have a fully functional online newspaper website.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习Phalcon的ORM和ODM，并且我们会继续添加功能，直到我们拥有一个功能齐全的在线报纸网站。
