- en: Chapter 2. Setting Up the MVC Structure and the Environment for Our Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we summarized the most common parts of Phalcon. Next,
    we will try to set up the "Hello world" page for our project. In this chapter,
    we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to MVC—what is MVC?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MVC structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a configuration file and the Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the initial DI interface and the router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the router component in a module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the base layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is MVC?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am pretty sure that if you are reading this book, you are already familiar
    with the MVC pattern, but for beginners, we will try to explain this in a few
    words.
  prefs: []
  type: TYPE_NORMAL
- en: 'MVC is defined as an architectural pattern, and it stands for Model-View-Controller;
    it is used mostly in web development, but it is widely applied in software that
    needs a **Graphical User Interface** (**GUI**). To make this introduction quick,
    let''s explain these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This is usually used as an abstraction layer, and validation for
    the tables of a database, but it can be used to handle any kind of logic within
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: A view, usually, represents a template (can be an HTML file) that
    the controller will render.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: In a web application, the controller handles all the HTTP requests
    and sends an appropriate response. This response can mean rendering a template,
    outputting JSON data, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the exact definition, I suggest you check out the Wikipedia page of the
    MVC pattern at [http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488](http://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488)).
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a quick look at an example of MVC for a news/blog application by
    assuming that a user will make a request to `http://www.learning-phalcon.localhost/article/list`.
    To match this URL, we will need to implement the routing component, but we are
    going to cover this in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, a model is an abstraction layer for a database table and
    probably, in 99 percent of cases, you will use it for this purpose. In this example,
    we will extend the `Phalcon\Mvc\Model` component that has some built-in methods,
    such as the `find` method. By default, this method will return all the records
    found in a table named `article`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we have the following MySQL table structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For this table, our model would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we need to overwrite the default find method, we can create one in our model.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s consider the following PHP/HTML template as our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`$article` is an instance of our model. This is why we can call our getters
    from it.'
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The controller will handle requests and will send the information to the appropriate
    method from a model. In this example, the controller will extend the `\Phalcon\Mvc\Controller`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we created a public method called `listAction` that calls the
    `find` method from the model, and it assigns the results to our `view` component.
    You probably noticed that the namespace of the controller contains the `Frontend`
    word. This is because we will use a multi-module application. (We will discuss
    this in the latter sections of this chapter.)
  prefs: []
  type: TYPE_NORMAL
- en: With this, we will close our short introduction to MVC or Phalcon MVC. Next,
    we will talk about the folder structure of an MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This subject (like many other subjects) is quite sensitive. It depends on how
    much experience you have and how you are used to structure your projects. In a
    web application, most of the time we have models, views (templates), controllers,
    and assets (images, JavaScript files, and style sheets). Based on this, I like
    the following structure, because it's easy to understand where a file resides
    and what its purpose is.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a single module application, we can have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MVC structure](img/B03522_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a multi-module application, we can have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MVC structure](img/B03522_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is quite easy to know exactly what a file is used for and
    where we can find it. In the end, you should choose the structure that fits your
    needs but keep in mind that if you are going to work in a team, it should be intuitive
    enough for any new member.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the structure for our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to create the structure for our project. In the first chapter,
    we created the `/var/www/learning-phalcon.localhost` folder. If you have another
    location, go there and create the following directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the structure for our project](img/B03522_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s create the `index.php` file that will handle our application.
    This file will be the default file in our web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the first two lines, we set the header and internal encoding to UTF-8\. This
    is a good practice if you are going to use special characters / diacritics. In
    the fourth line, we include a file named `Bootstrap.php`. This file is the Bootstrap
    of our project, and we will create its content in a few moments. On the next lines,
    we create a new instance of Bootstrap with a default module (`frontend`), and
    we initialize it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to find a way to autoload any file in our application without
    manually including it. We will make use of the `\Phalcon\Loader` component that
    will register all our modules in the namespace. In the `config` folder, we will
    create a new file called `loader.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: PSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PSR is a collection of standards used in PHP development, which is supported
    by a group of people, the **PHP Framework Interop Group**. The standards include
    these:'
  prefs: []
  type: TYPE_NORMAL
- en: The autoloading standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic coding standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The coding style guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logger interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The \`Phalcon\Loader` component is PSR-4 ([https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md))
    compliant, and it helps us to load only the file that we need, when we need them.
    In this way, we increase the speed of our application. Meanwhile, you can find
    more information about this component in the official documentation (at [http://docs.phalconphp.com/en/latest/reference/loader.html](http://docs.phalconphp.com/en/latest/reference/loader.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the configuration file and the Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Almost any application has some constants that will be reused (database credentials,
    SMTP credentials, and so on). For our application, we will create a global configuration
    file. This file will be an instance of the `\Phalcon\Config` component. Switch
    to the `config` directory and create it with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Phalcon\Config` component simplifies the access to the configuration data
    within our application. By default, data is returned as an object (for example,
    we have access to the application name using `$config->application->name path`),
    but it also has a magic method to return data as an array—`$config->toArray()`.
    If you use `$config->toArray()`, then you will access the application name using
    the `$config['application']['name']` syntax. Another cool fact about this component
    is that we can merge another array into it using the `$config->merge($new_config)`
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have an autoloader and a configuration, let''s set up our Bootstrap
    file. To do this, create a file named `Bootstrap.php` in the `modules` folder
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Our Bootstrap file extends `\Phalcon\Mvc\Application` ([http://docs.phalconphp.com/en/latest/reference/applications.html](http://docs.phalconphp.com/en/latest/reference/applications.html))
    that gives us access to the `registerModules()` method. The class constructor
    registers all our modules and sets the default module. The `_registerServices()`
    method initializes the DI and includes the required files for our application.
    Finally, the `init()` method initializes the application. Here, we make use of
    the `\Phalcon\Debug` component, because we need to be able to debug the application
    at any time. This should not be enabled in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we created the folder structure, the configuration file, the autoloader,
    and the Bootstrap. We will go further by creating the services, routing, and the
    frontend modules files.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the initial DI interface and the router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Bootstrap, we don''t have two files: `services.php` and `routing.php`.
    The `services.php` file will hold the information about global services that our
    application will use, and the `routing.php` file will hold information about our
    routes. Let''s start by creating the `services.php` file in our `config` folder
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$di` variable is available because we initialized it in the `_registerServices()`
    method from the Bootstrap. `$di` is an instance of `\Phalcon\DI\FactoryDefault()`.
    Let''s try to understand each component that we set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$di[''session'']` is available by default, but we overwrite it because we
    want to use Redis to store our session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''security'']` is available by default, but we overwrite it because we
    want to set a higher work factor than the default one. We will use this component
    to encrypt our passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''redis'']` connects to the Redis server. We pass the parameters from
    our configuration file. The `\Redis` class is already available, because we installed
    it in the first chapter (`php5-redis`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''url'']` is available by default. The reason why we overwrite this is
    for backwards compatibility with older versions of Phalcon. In the past, I wasn''t
    able to access it without being defined. Since Phalcon 1.3, it works as expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''voltService'']` is a custom DI component that we will use for the Volt
    template engine (you will learn about Volt soon).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''logger'']` is a custom DI component, and it uses `\Phalcon\Logger\Adapter\File`.
    We will use this to log different errors/warnings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$di[''cache'']` is also a custom DI component that uses Igbinary as frontend
    cache and redis for backend. You will need to install Igbinary from PECL, if you
    don''t have it, by issuing the following command: `sudo pecl install igbinary`.
    Note that you might need to reinstall `php5-redis` after installing Igbinary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we are going to use some components that are not available by default
    in Phalcon, we will need to install them from `phalcon/incubator` ([https://github.com/phalcon/incubator](https://github.com/phalcon/incubator)).
    **Incubator** is a collection of components developed by the community, which
    may or may not be included in Phalcon's core. One of the components that we need
    right now is the `\Phalcon\Cache\Backend\Redis`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use **Composer** ([https://getcomposer.org](https://getcomposer.org)/)
    to manage our package dependency. To install composer, execute the following command
    in the `learning-phalcon.localhost` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you should have a new file named `composer.phar` in your root folder.
    Next, let''s install `phalcon/incubator` by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will install other dependencies such as Swift Mailer, so it might take
    a few minutes to finish. If you check the folder structure, you will see that
    a new directory named `vendor` has been created. This is the default installation
    folder for composer, and all the packages will reside here.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is not enough. In order to autoload the files from vendor, we
    need to make a small modification to our `public/index.php` file by adding the
    autoloader from composer. The new `index.php` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using the router component in a module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will continue this chapter by creating the routes for our application. To
    do this, switch to the `config` directory, and create a file named `routing.php`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this file, we make use of the `\Phalcon\Mvc\Router` component. We check
    whether there is any routing information for the module and we load it; otherwise,
    we create the default routing rules. If you''ve been following us until now, you
    should have the following directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the router component in a module](img/B03522_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the first chapter, we already created and enabled the configuration files
    for the web server. In addition, we edited the host file, and www.learning-phalcon.localhost
    is pointing to our local host (`127.0.0.1`). Let's try to access `http://www.learning-phalcon.localhost`
    in our browser
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please use `http://`. Otherwise, Chrome and probably other browsers will fail
    to access this URL, because `.dev` is not a registered Top Level Domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you managed to access the application, you should see an error page similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the router component in a module](img/B03522_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s fix this error by creating the files needed for our `Frontend` module.
    Go to the `modules/Frontend` folder, and create a file named `Module.php` with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, copy this file into each module and change the namespace. For example,
    the `Module.php` file that resides in the `Api` module should have the `App\Api`
    namespace. Now, your modules directory structure should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the router component in a module](img/B03522_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you refresh the page, you will get another error that says `Phalcon\DI\Exception:
    Service ''view'' was not found in the dependency injection container`. This happens
    because each module will have its own `config` folder, and we need to create the
    files there. Go to the `modules/Frontend/` directory and create a new folder named
    `Config` with C in uppercase.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use the uppercase because it's more easy to read and load within the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `modules/Frontend/Config/` create a file named `config.php` with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line, we assign the content of the global configuration file to
    the `$config` variable. Then, we set the module configuration, and we merge this
    information into our global `$config` variable. Next, let''s create the routing
    and services files in the same folder (`modules/Frontend/Config/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`services.php:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the `services.php` file, we overwrite the DI's URL and dispatcher components,
    and we create a custom view service that will use voltService that we declared
    in the global services file (`config/services.php`).
  prefs: []
  type: TYPE_NORMAL
- en: '`routing.php:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We need the `routing.php` file here, because we are going to create custom routes
    for our Frontend module. The next thing that we need is a controller. It is a
    good practice in general to create a base file and all the other files to extend
    the base. This way you will avoid code duplication. Of course, you can use traits
    of other methods, but for this project, we will use a base file most of the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create the `Controllers` directory in `modules/Frontend/` and a
    blank base controller in `modules/Frontend/Controllers/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, put the following content in `BaseController.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create another file here named `IndexController.php` with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you check the `routing.php` file, you will notice that the default route
    goes to index controller → index action. In Phalcon, the standard is that any
    controller should have the `Controller` suffix, and any public action that matches
    a route should have the Action suffix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our directory structure from `modules/Frontend`. It should
    be exactly like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the router component in a module](img/B03522_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you try to refresh the page at `http://www.learning-phalcon.localhost`, you
    will see a blank page. This is perfectly normal. Next, let's copy the `Controllers`
    and `Config` folders from our `Frontend` module into each remaining module (`Api`,
    `Core`, and `Backoffice`). After we copy the files, we need to change the namespace
    and replace anything related to frontend with the new module name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, after we copy the files into the `Api` module, we need to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace the `App\Frontend\Controllers` namespace with `App\Api\Controllers`
    in the `Controllers/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the word "`frontend`" with the word "`api`" in `Config/routing.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace `\App\Frontend\Controllers` with `App\Api\Controllers` in `services.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Append the module name in lowercase to the `baseUri` key from the `config.php`
    file. The result should be `'baseUri' => '/api/'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you finish, the new directory structure should be this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the router component in a module](img/B03522_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create the base layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to focus a little bit on the layout (templates). We are going
    to use twitter-bootstrap for CSS and jQuery. Then, we are going to create first
    view in order to close this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `public/folder` and create a folder named `assets`. Then, go to
    `assets` and create a folder named `default`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: I am using Bower ([http://bower.io/](http://bower.io/)) as a package manager
    for my assets. It is what composer is for php packages.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have Bower installed and you don't want to use it, you will need
    to create a folder named `bower_components` in your `public/default/assets` folder
    and clone twitter-bootstrap repository from GitHub. You will also need to download
    jQuery and unzip it into the `bower_components` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have Bower, then just go to the `public/default/assets` folder and install
    twitter Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will install jQuery automatically because Bootstrap requires jQuery, and
    Bower is smart enough to check for dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the near future, we will also need some custom JavaScript, CSS files, and
    images. We need to create these directories in the public/assets/default folder,
    and we will also create two empty files named `lp.js` and `lp.css`. The folder
    structure of your public folder should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create the base layout](img/B03522_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s get back to our `frontend` module. Navigate to `modules/Frontend` and
    create a folder named Views. Then, in the `Views` folder, create another one named
    Default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Remember that we are using Volt ([http://docs.phalconphp.com/en/latest/reference/volt.html](http://docs.phalconphp.com/en/latest/reference/volt.html))
    as our template engine. We already discussed Volt's syntax in the first chapter,
    and as we move forward, we will dig more into this subject, but at the right moment.
    For now, we just want to finish our project structure and render a dummy layout
    for our fronted module.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way we can ensure that we did everything as expected until now. In the
    dependency injection from `services.php`, we assigned the file extension .volt
    to our template engine. Therefore, all the views that we are going to create will
    have the extension .volt. Let''s create the main layout. Navigate to `modules/Frontend/Views/Default`
    and create a new file named `layout.volt` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned earlier, we are not going to talk about volt's syntax for now.
    There is one more step that needs to be performed in order to render the templates.
    We need to create a new folder named `index`; then, in the `index` folder, we
    also need to create a file named `index.volt`. This will match `IndexController`
    → `IndexAction`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The content of the `index.volt` file is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The final directory structure for our frontend module should be this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create the base layout](img/B03522_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's try to refresh the page `http://www.learning-phalcon.localhost`.
    If you see a page like the one in the following screenshot, then you have made
    it!
  prefs: []
  type: TYPE_NORMAL
- en: '![Create the base layout](img/B03522_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the basics of MVC, created the folder structure
    for our project, and learned a little bit about how to use the DI component, routing
    component, and the view component. We also created the views and rendered the
    first page from the Frontend module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will learn about Phalcon's ORM and ODM, and we will
    continue to add features until we have a fully functional online newspaper website.
  prefs: []
  type: TYPE_NORMAL
