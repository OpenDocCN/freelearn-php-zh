["```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Entity\\ContentEntityBase;\n\n/**\n * Defines the Product entity.\n *\n * @ContentEntityType(\n *   id = \"product\",\n *   label = @Translation(\"Product\"),\n *   handlers = {\n *     \"view_builder\" = \"Drupal\\Core\\Entity\\EntityViewBuilder\",\n *     \"list_builder\" = \"Drupal\\products\\ProductListBuilder\",\n *\n *     \"form\" = {\n *       \"default\" = \"Drupal\\products\\Form\\ProductForm\",\n *       \"add\" = \"Drupal\\products\\Form\\ProductForm\",\n *       \"edit\" = \"Drupal\\products\\Form\\ProductForm\",\n *       \"delete\" = \"Drupal\\Core\\Entity\\ContentEntityDeleteForm\",\n *     },\n *    \"route_provider\" = {\n *      \"html\" = \"Drupal\\Core\\Entity\\Routing\\AdminHtmlRouteProvider\"\n *    }\n *   },\n *   base_table = \"product\",\n *   admin_permission = \"administer site configuration\",\n *   entity_keys = {\n *     \"id\" = \"id\",\n *     \"label\" = \"name\",\n *     \"uuid\" = \"uuid\",\n *   },\n *   links = {\n *     \"canonical\" = \"/admin/structure/product/{product}\",\n *     \"add-form\" = \"/admin/structure/product/add\",\n *     \"edit-form\" = \"/admin/structure/product/{product}/edit\",\n *     \"delete-form\" = \"/admin/structure/product/{product}/delete\",\n *     \"collection\" = \"/admin/structure/product\",\n *   }\n * )\n */\nclass Product extends ContentEntityBase implements ProductInterface {}\n```", "```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Entity\\ContentEntityInterface;\nuse Drupal\\Core\\Entity\\EntityChangedInterface;\n\n/**\n * Represents a Product entity.\n */\ninterface ProductInterface extends ContentEntityInterface, EntityChangedInterface {\n\n  /**\n   * Gets the Product name.\n   *\n   * @return string\n   */\n  public function getName();\n\n  /**\n   * Sets the Product name.\n   *\n   * @param string $name\n   *\n   * @return \\Drupal\\products\\Entity\\ProductInterface\n   *   The called Product entity.\n   */\n  public function setName($name);\n\n  /**\n   * Gets the Product number.\n   *\n   * @return int\n   */\n  public function getProductNumber();\n\n  /**\n   * Sets the Product number.\n   *\n   * @param int $number\n   *\n   * @return \\Drupal\\products\\Entity\\ProductInterface\n   *   The called Product entity.\n   */\n  public function setProductNumber($number);\n\n  /**\n   * Gets the Product remote ID.\n   *\n   * @return string\n   */\n  public function getRemoteId();\n\n  /**\n   * Sets the Product remote ID.\n   *\n   * @param string $id\n   *\n   * @return \\Drupal\\products\\Entity\\ProductInterface\n   *   The called Product entity.\n   */\n  public function setRemoteId($id);\n\n  /**\n   * Gets the Product source.\n   *\n   * @return string\n   */\n  public function getSource();\n\n  /**\n   * Sets the Product source.\n   *\n   * @param string $source\n   *\n   * @return \\Drupal\\products\\Entity\\ProductInterface\n   *   The called Product entity.\n   */\n  public function setSource($source);\n\n  /**\n   * Gets the Product creation timestamp.\n   *\n   * @return int\n   */\n  public function getCreatedTime();\n\n  /**\n   * Sets the Product creation timestamp.\n   *\n   * @param int $timestamp\n   *\n   * @return \\Drupal\\products\\Entity\\ProductInterface\n   *   The called Product entity.\n   */\n  public function setCreatedTime($timestamp);\n}\n```", "```php\nuse EntityChangedTrait; \n```", "```php\npublic static function baseFieldDefinitions(EntityTypeInterface $entity_type) {\n  $fields = parent::baseFieldDefinitions($entity_type);\n\n  $fields['name'] = BaseFieldDefinition::create('string')\n    ->setLabel(t('Name'))\n    ->setDescription(t('The name of the Product.'))\n    ->setSettings([\n      'max_length' => 255,\n      'text_processing' => 0,\n    ])\n    ->setDefaultValue('')\n    ->setDisplayOptions('view', [\n      'label' => 'hidden',\n      'type' => 'string',\n      'weight' => -4,\n    ])\n    ->setDisplayOptions('form', [\n      'type' => 'string_textfield',\n      'weight' => -4,\n    ])\n    ->setDisplayConfigurable('form', TRUE)\n    ->setDisplayConfigurable('view', TRUE);\n\n  $fields['number'] = BaseFieldDefinition::create('integer')\n    ->setLabel(t('Number'))\n    ->setDescription(t('The Product number.'))\n    ->setSettings([\n      'min' => 1,\n      'max' => 10000\n    ])\n    ->setDefaultValue(NULL)\n    ->setDisplayOptions('view', [\n      'label' => 'above',\n      'type' => 'number_unformatted',\n      'weight' => -4,\n    ])\n    ->setDisplayOptions('form', [\n      'type' => 'number',\n      'weight' => -4,\n    ])\n    ->setDisplayConfigurable('form', TRUE)\n    ->setDisplayConfigurable('view', TRUE);\n\n  $fields['remote_id'] = BaseFieldDefinition::create('string')\n    ->setLabel(t('Remote ID'))\n    ->setDescription(t('The remote ID of the Product.'))\n    ->setSettings([\n      'max_length' => 255,\n      'text_processing' => 0,\n    ])\n    ->setDefaultValue('');\n\n  $fields['source'] = BaseFieldDefinition::create('string')\n    ->setLabel(t('Source'))\n    ->setDescription(t('The source of the Product.'))\n    ->setSettings([\n      'max_length' => 255,\n      'text_processing' => 0,\n    ])\n    ->setDefaultValue('');\n\n  $fields['created'] = BaseFieldDefinition::create('created')\n    ->setLabel(t('Created'))\n    ->setDescription(t('The time that the entity was created.'));\n\n  $fields['changed'] = BaseFieldDefinition::create('changed')\n    ->setLabel(t('Changed'))\n    ->setDescription(t('The time that the entity was last edited.'));\n\n  return $fields;\n}\n```", "```php\nuse EntityChangedTrait;\n\n/**\n * {@inheritdoc}\n */\npublic function getName() {\n  return $this->get('name')->value;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function setName($name) {\n  $this->set('name', $name);\n  return $this;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getProductNumber() {\n  return $this->get('number')->value;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function setProductNumber($number) {\n  $this->set('number', $number);\n  return $this;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getRemoteId() {\n  return $this->get('remote_id')->value;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function setRemoteId($id) {\n  $this->set('remote_id', $id);\n  return $this;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getSource() {\n  return $this->get('source')->value;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function setSource($source) {\n  $this->set('source', $source);\n  return $this;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getCreatedTime() {\n  return $this->get('created')->value;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function setCreatedTime($timestamp) {\n  $this->set('created', $timestamp);\n  return $this;\n}\n```", "```php\n$this->get('field_name')->value \n```", "```php\nuse Drupal\\Core\\Entity\\EntityChangedTrait; \nuse Drupal\\Core\\Entity\\EntityTypeInterface; \nuse Drupal\\Core\\Field\\BaseFieldDefinition; \n```", "```php\nnamespace Drupal\\products;\n\nuse Drupal\\Core\\Entity\\EntityInterface;\nuse Drupal\\Core\\Entity\\EntityListBuilder;\nuse Drupal\\Core\\Link;\nuse Drupal\\Core\\Url;\n\n/**\n * EntityListBuilderInterface implementation responsible for the Product entities.\n */\nclass ProductListBuilder extends EntityListBuilder {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildHeader() {\n    $header['id'] = $this->t('Product ID');\n    $header['name'] = $this->t('Name');\n    return $header + parent::buildHeader();\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildRow(EntityInterface $entity) {\n    /* @var $entity \\Drupal\\products\\Entity\\Product */\n    $row['id'] = $entity->id();\n    $row['name'] = Link::fromTextAndUrl(\n      $entity->label(),\n      new Url(\n        'entity.product.canonical', [\n          'product' => $entity->id(),\n        ]\n      )\n    );\n    return $row + parent::buildRow($entity);\n  }\n\n}\n```", "```php\nuse Drupal\\Core\\Entity\\ContentEntityForm;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\n/**\n * Form for creating/editing Product entities.\n */\nclass ProductForm extends ContentEntityForm {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function save(array $form, FormStateInterface $form_state) {\n    $entity = &$this->entity;\n\n    $status = parent::save($form, $form_state);\n\n    switch ($status) {\n      case SAVED_NEW:\n        drupal_set_message($this->t('Created the %label Product.', [\n          '%label' => $entity->label(),\n        ]));\n        break;\n\n      default:\n        drupal_set_message($this->t('Saved the %label Product.', [\n          '%label' => $entity->label(),\n        ]));\n    }\n    $form_state->setRedirect('entity.product.canonical', ['product' => $entity->id()]);\n  }\n\n}\n```", "```php\n# Product entity menu items\nentity.product.collection:\n  title: 'Product list'\n  route_name: entity.product.collection\n  description: 'List Product entities'\n  parent: system.admin_structure\n  weight: 100\n```", "```php\n# Product entity task items\nentity.product.canonical:\n  route_name: entity.product.canonical\n  base_route: entity.product.canonical\n  title: 'View'\n\nentity.product.edit_form:\n  route_name: entity.product.edit_form\n  base_route: entity.product.canonical\n  title: 'Edit'\n\nentity.product.delete_form:\n  route_name: entity.product.delete_form\n  base_route: entity.product.canonical\n  title: Delete\n  weight: 10\n```", "```php\nentity.product.add_form:\n  route_name: entity.product.add_form\n  title: 'Add Product'\n  appears_on:\n    - entity.product.collection\n```", "```php\n$fields['source'] = BaseFieldDefinition::create('string')\n  ->setLabel(t('Source'))\n  ->setDescription(t('The source of the Product.'))\n  ->setSettings([\n    'max_length' => 255,\n    'text_processing' => 0,\n  ])\n  ->setDefaultValue('')\n  ->setDisplayOptions('form', [\n    'type' => 'string_textfield',\n    'weight' => -4,\n  ]);\n```", "```php\nnamespace Drupal\\products\\Plugin;\n\nuse Drupal\\Core\\Plugin\\DefaultPluginManager;\nuse Drupal\\Core\\Cache\\CacheBackendInterface;\nuse Drupal\\Core\\Extension\\ModuleHandlerInterface;\n\n/**\n * Provides the Importer plugin manager.\n */\nclass ImporterManager extends DefaultPluginManager {\n\n  /**\n   * ImporterManager constructor.\n   *\n   * @param \\Traversable $namespaces\n   *   An object that implements \\Traversable which contains the root paths\n   *   keyed by the corresponding namespace to look for plugin implementations.\n   * @param \\Drupal\\Core\\Cache\\CacheBackendInterface $cache_backend\n   *   Cache backend instance to use.\n   * @param \\Drupal\\Core\\Extension\\ModuleHandlerInterface $module_handler\n   *   The module handler to invoke the alter hook with.\n   */\n  public function __construct(\\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {\n    parent::__construct('Plugin/Importer', $namespaces, $module_handler, 'Drupal\\products\\Plugin\\ImporterInterface', 'Drupal\\products\\Annotation\\Importer');\n\n    $this->alterInfo('products_importer_info');\n    $this->setCacheBackend($cache_backend, 'products_importer_plugins');\n  }\n}\n```", "```php\nservices:\n  products.importer_manager:\n    class: Drupal\\products\\Plugin\\ImporterManager\n    parent: default_plugin_manager\n```", "```php\nnamespace Drupal\\products\\Annotation;\n\nuse Drupal\\Component\\Annotation\\Plugin;\n\n/**\n * Defines an Importer item annotation object.\n *\n * @see \\Drupal\\products\\Plugin\\ImporterManager\n *\n * @Annotation\n */\nclass Importer extends Plugin {\n\n  /**\n   * The plugin ID.\n   *\n   * @var string\n   */\n  public $id;\n\n  /**\n   * The label of the plugin.\n   *\n   * @var \\Drupal\\Core\\Annotation\\Translation\n   *\n   * @ingroup plugin_translatable\n   */\n  public $label;\n}\n```", "```php\nnamespace Drupal\\products\\Plugin;\n\nuse Drupal\\Component\\Plugin\\PluginInspectionInterface;\n\n/**\n * Defines an interface for Importer plugins.\n */\ninterface ImporterInterface extends PluginInspectionInterface {\n\n  /**\n   * Performs the import. Returns TRUE if the import was successful or FALSE otherwise.\n   *\n   * @return bool\n   */\n  public function import();\n}\n```", "```php\nnamespace Drupal\\products\\Plugin;\n\nuse Drupal\\Component\\Plugin\\Exception\\PluginException;\nuse Drupal\\Component\\Plugin\\PluginBase;\nuse Drupal\\Core\\Entity\\EntityTypeManager;\nuse Drupal\\Core\\Plugin\\ContainerFactoryPluginInterface;\nuse Drupal\\products\\Entity\\ImporterInterface;\nuse Drupal\\products\\Plugin\\ImporterInterface as ImporterPluginInterface;\nuse GuzzleHttp\\Client;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n\n/**\n * Base class for Importer plugins.\n */\nabstract class ImporterBase extends PluginBase implements ImporterPluginInterface, ContainerFactoryPluginInterface {\n\n  /**\n   * @var \\Drupal\\Core\\Entity\\EntityTypeManager\n   */\n  protected $entityTypeManager;\n\n  /**\n   * @var \\GuzzleHttp\\Client\n   */\n  protected $httpClient;\n\n  /**\n   * {@inheritdoc}\n   */\n  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entityTypeManager, Client $httpClient) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition);\n    $this->entityTypeManager = $entityTypeManager;\n    $this->httpClient = $httpClient;\n\n    if (!isset($configuration['config'])) {\n      throw new PluginException('Missing Importer configuration.');\n    }\n\n    if (!$configuration['config'] instanceof ImporterInterface) {\n      throw new PluginException('Wrong Importer configuration.');\n    }\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {\n    return new static(\n      $configuration,\n      $plugin_id,\n      $plugin_definition,\n      $container->get('entity_type.manager'),\n      $container->get('http_client')\n    );\n  }\n}\n```", "```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityBase;\n\n/**\n * Defines the Importer entity.\n *\n * @ConfigEntityType(\n *   id = \"importer\",\n *   label = @Translation(\"Importer\"),\n *   handlers = {\n *     \"list_builder\" = \"Drupal\\products\\ImporterListBuilder\",\n *     \"form\" = {\n *       \"add\" = \"Drupal\\products\\Form\\ImporterForm\",\n *       \"edit\" = \"Drupal\\products\\Form\\ImporterForm\",\n *       \"delete\" = \"Drupal\\products\\Form\\ImporterDeleteForm\"\n *     },\n *     \"route_provider\" = {\n *       \"html\" = \"Drupal\\Core\\Entity\\Routing\\AdminHtmlRouteProvider\",\n *     },\n *   },\n *   config_prefix = \"importer\",\n *   admin_permission = \"administer site configuration\",\n *   entity_keys = {\n *     \"id\" = \"id\",\n *     \"label\" = \"label\",\n *     \"uuid\" = \"uuid\"\n *   },\n *   links = {\n *     \"add-form\" = \"/admin/structure/importer/add\",\n *     \"edit-form\" = \"/admin/structure/importer/{importer}/edit\",\n *     \"delete-form\" = \"/admin/structure/importer/{importer}/delete\",\n *     \"collection\" = \"/admin/structure/importer\"\n *   },\n *   config_export = { \n *     \"id\",\n *     \"label\",\n *     \"url\",\n *     \"plugin\",\n *     \"update_existing\",\n *     \"source\",\n *     \"bundle\"\n *   }\n * )\n */\nclass Importer extends ConfigEntityBase implements ImporterInterface {}\n```", "```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityInterface;\nuse Drupal\\Core\\Url;\n\n/**\n * Importer configuration entity.\n */\ninterface ImporterInterface extends ConfigEntityInterface {\n\n  /**\n   * Returns the Url where the import can get the data from.\n   *\n   * @return Url\n   */\n  public function getUrl();\n\n  /**\n   * Returns the Importer plugin ID to be used by this importer.\n   *\n   * @return string\n   */\n  public function getPluginId();\n\n  /**\n   * Whether or not to update existing products if they have already been imported.\n   *\n   * @return bool\n   */\n  public function updateExisting();\n\n  /**\n   * Returns the source of the products.\n   *\n   * @return string\n   */\n  public function getSource();\n}\n```", "```php\n/**\n * The Importer ID.\n *\n * @var string\n */\nprotected $id;\n\n/**\n * The Importer label.\n *\n * @var string\n */\nprotected $label;\n\n/**\n * The URL from where the import file can be retrieved.\n *\n * @var string\n */\nprotected $url;\n\n/**\n * The plugin ID of the plugin to be used for processing this import.\n *\n * @var string\n */\nprotected $plugin;\n\n/**\n * Whether or not to update existing products if they have already been imported.\n *\n * @var bool\n */\nprotected $update_existing = TRUE;\n\n/**\n * The source of the products.\n *\n * @var string\n */\nprotected $source;\n\n/**\n * {@inheritdoc}\n */\npublic function getUrl() {\n  return $this->url ? Url::fromUri($this->url) : NULL;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getPluginId() {\n  return $this->plugin;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function updateExisting() {\n  return $this->update_existing;\n}\n\n/**\n * {@inheritdoc}\n */\npublic function getSource() {\n  return $this->source;\n}\n```", "```php\nuse Drupal\\Core\\Url;  \n```", "```php\nproducts.importer.*:\n  type: config_entity\n  label: 'Importer config'\n  mapping:\n   id:\n     type: string\n     label: 'ID'\n   label:\n     type: label\n     label: 'Label'\n   uuid:\n     type: string\n   url:\n     type: uri\n     label: Uri\n   plugin:\n     type: string\n     label: Plugin ID\n   update_existing:\n     type: boolean\n     label: Whether to update existing products\n   source:\n     type: string\n     label: The source of the products\n```", "```php\nnamespace Drupal\\products;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityListBuilder;\nuse Drupal\\Core\\Entity\\EntityInterface;\n\n/**\n * Provides a listing of Importer entities.\n */\nclass ImporterListBuilder extends ConfigEntityListBuilder {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildHeader() {\n    $header['label'] = $this->t('Importer');\n    $header['id'] = $this->t('Machine name');\n    return $header + parent::buildHeader();\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildRow(EntityInterface $entity) {\n    $row['label'] = $entity->label();\n    $row['id'] = $entity->id();\n    return $row + parent::buildRow($entity);\n  }\n}\n```", "```php\nnamespace Drupal\\products\\Form; \n\nuse Drupal\\Core\\Entity\\EntityForm; \nuse Drupal\\Core\\Form\\FormStateInterface; \nuse Drupal\\Core\\Messenger\\MessengerInterface; \nuse Drupal\\Core\\Url; \nuse Drupal\\products\\Plugin\\ImporterManager; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface; \n\n/** \n * Form for creating/editing Importer entities. \n */ \nclass ImporterForm extends EntityForm { \n\n  /** \n   * @var \\Drupal\\products\\Plugin\\ImporterManager \n   */ \n  protected $importerManager; \n\n  /** \n   * ImporterForm constructor. \n   * \n   * @param \\Drupal\\products\\Plugin\\ImporterManager $importerManager \n   * @param \\Drupal\\Core\\Messenger\\MessengerInterface $messenger \n   */ \n  public function __construct(ImporterManager $importerManager, MessengerInterface $messenger) { \n    $this->importerManager = $importerManager; \n    $this->messenger = $messenger; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public static function create(ContainerInterface $container) { \n    return new static( \n      $container->get('products.importer_manager'), \n      $container->get('messenger') \n    ); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function form(array $form, FormStateInterface $form_state) { \n    $form = parent::form($form, $form_state); \n\n    /** @var \\Drupal\\products\\Entity\\Importer $importer */ \n    $importer = $this->entity; \n\n    $form['label'] = [ \n      '#type' => 'textfield', \n      '#title' => $this->t('Name'), \n      '#maxlength' => 255, \n      '#default_value' => $importer->label(), \n      '#description' => $this->t('Name of the Importer.'), \n      '#required' => TRUE, \n    ]; \n\n    $form['id'] = [ \n      '#type' => 'machine_name', \n      '#default_value' => $importer->id(), \n      '#machine_name' => [ \n        'exists' => '\\Drupal\\products\\Entity\\Importer::load', \n      ], \n      '#disabled' => !$importer->isNew(), \n    ]; \n\n    $form['url'] = [ \n      '#type' => 'url', \n      '#default_value' => $importer->getUrl() instanceof Url ? $importer->getUrl()->toString() : '', \n      '#title' => $this->t('Url'), \n      '#description' => $this->t('The URL to the import resource'), \n      '#required' => TRUE, \n    ]; \n\n    $definitions = $this->importerManager->getDefinitions(); \n    $options = []; \n    foreach ($definitions as $id => $definition) { \n      $options[$id] = $definition['label']; \n    } \n\n    $form['plugin'] = [ \n      '#type' => 'select', \n      '#title' => $this->t('Plugin'), \n      '#default_value' => $importer->getPluginId(), \n      '#options' => $options, \n      '#description' => $this->t('The plugin to be used with this importer.'), \n      '#required' => TRUE, \n    ]; \n\n    $form['update_existing'] = [ \n      '#type' => 'checkbox', \n      '#title' => $this->t('Update existing'), \n      '#description' => $this->t('Whether to update existing products if already imported.'), \n      '#default_value' => $importer->updateExisting(), \n    ]; \n\n    $form['source'] = [ \n      '#type' => 'textfield', \n      '#title' => $this->t('Source'), \n      '#description' => $this->t('The source of the products.'), \n      '#default_value' => $importer->getSource(), \n    ]; \n\n    return $form; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function save(array $form, FormStateInterface $form_state) { \n    /** @var \\Drupal\\products\\Entity\\Importer $importer */ \n    $importer = $this->entity; \n    $status = $importer->save(); \n\n    switch ($status) { \n      case SAVED_NEW: \n        $this->messenger->addMessage($this->t('Created the %label Importer.', [ \n          '%label' => $importer->label(), \n        ])); \n        break; \n\n      default: \n        $this->messenger->addMessage($this->t('Saved the %label Importer.', [ \n          '%label' => $importer->label(), \n        ])); \n    } \n\n    $form_state->setRedirectUrl($importer->toUrl('collection')); \n  } \n\n} \n```", "```php\nnamespace Drupal\\products\\Form; \n\nuse Drupal\\Core\\Entity\\EntityConfirmFormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \nuse Drupal\\Core\\Messenger\\MessengerInterface; \nuse Drupal\\Core\\Url; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface; \n\n/** \n * Form for deleting Importer entities. \n */ \nclass ImporterDeleteForm extends EntityConfirmFormBase { \n\n  /** \n   * ImporterDeleteForm constructor. \n   * \n   * @param \\Drupal\\Core\\Messenger\\MessengerInterface $messenger \n   */ \n  public function __construct(MessengerInterface $messenger) { \n    $this->messenger = $messenger; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public static function create(ContainerInterface $container) { \n    return new static( \n      $container->get('messenger') \n    ); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getQuestion() { \n    return $this->t('Are you sure you want to delete %name?', ['%name' => $this->entity->label()]); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getCancelUrl() { \n    return new Url('entity.importer.collection'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getConfirmText() { \n    return $this->t('Delete'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function submitForm(array &$form, FormStateInterface $form_state) { \n    $this->entity->delete(); \n\n    $this->messenger->addMessage($this->t('Deleted @entity importer.', ['@entity' => $this->entity->label()])); \n\n    $form_state->setRedirectUrl($this->getCancelUrl()); \n  } \n\n} \n```", "```php\n# Importer entity menu items\nentity.importer.collection:\n  title: 'Importer list'\n  route_name: entity.importer.collection\n  description: 'List Importer entities'\n  parent: system.admin_structure\n  weight: 99\n```", "```php\nentity.importer.add_form:\n  route_name: 'entity.importer.add_form'\n  title: 'Add Importer'\n  appears_on:\n    - entity.importer.collection\n```", "```php\n{\n   \"products\" : [\n     {\n       \"id\" : 1,\n       \"name\": \"TV\",\n       \"number\": 341\n     },\n     {\n       \"id\" : 2,\n       \"name\": \"VCR\",\n       \"number\": 123\n     },\n     {\n       \"id\" : 3,\n       \"name\": \"Stereo\",\n       \"number\": 234\n     }\n   ]\n }\n```", "```php\nnamespace Drupal\\products\\Plugin\\Importer; \n\nuse Drupal\\products\\Plugin\\ImporterBase; \n\n/** \n * Product importer from a JSON format. \n * \n * @Importer( \n *   id = \"json\", \n *   label = @Translation(\"JSON Importer\") \n * ) \n */ \nclass JsonImporter extends ImporterBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function import() { \n    $data = $this->getData(); \n    if (!$data) { \n      return FALSE; \n    } \n\n    if (!isset($data->products)) { \n      return FALSE; \n    } \n\n    $products = $data->products; \n    foreach ($products as $product) { \n      $this->persistProduct($product); \n    } \n    return TRUE; \n  } \n\n  /** \n   * Loads the product data from the remote URL. \n   * \n   * @return \\stdClass \n   */ \n  private function getData() { \n    /** @var \\Drupal\\products\\Entity\\ImporterInterface $config */ \n    $config = $this->configuration['config']; \n    $request = $this->httpClient->get($config->getUrl()->toString()); \n    $string = $request->getBody()->getContents(); \n    return json_decode($string); \n  } \n\n  /** \n   * Saves a Product entity from the remote data. \n   * \n   * @param \\stdClass $data \n   */ \n  private function persistProduct($data) { \n    /** @var \\Drupal\\products\\Entity\\ImporterInterface $config */ \n    $config = $this->configuration['config']; \n\n    $existing = $this->entityTypeManager->getStorage('product')->loadByProperties(['remote_id' => $data->id, 'source' => $config->getSource()]); \n    if (!$existing) { \n      $values = [ \n        'remote_id' => $data->id, \n        'source' => $config->getSource() \n      ]; \n      /** @var \\Drupal\\products\\Entity\\ProductInterface $product */ \n      $product = $this->entityTypeManager->getStorage('product')->create($values); \n      $product->setName($data->name); \n      $product->setProductNumber($data->number); \n      $product->save(); \n      return; \n    } \n\n    if (!$config->updateExisting()) { \n      return; \n    } \n\n    /** @var \\Drupal\\products\\Entity\\ProductInterface $product */ \n    $product = reset($existing); \n    $product->setName($data->name); \n    $product->setProductNumber($data->number); \n    $product->save(); \n  } \n} \n```", "```php\n$config = \\Drupal::entityTypeManager()\n  ->getStorage('importer')\n  ->load('my_json_product_importer');\n$plugin = \\Drupal::service('products.importer_manager')\n  ->createInstance($config->getPluginId(), ['config' => $config]);\n$plugin->import();\n```", "```php\n/**\n * Creates an instance of ImporterInterface plugin based on the ID of a\n * configuration entity.\n *\n * @param $id\n *   Configuration entity ID\n *\n * @return null|\\Drupal\\products\\Plugin\\ImporterInterface\n */\npublic function createInstanceFromConfig($id) {\n  $config = $this->entityTypeManager->getStorage('importer')->load($id);\n  if (!$config instanceof \\Drupal\\products\\Entity\\ImporterInterface) {\n    return NULL;\n  }\n\n  return $this->createInstance($config->getPluginId(), ['config' => $config]);\n}\n```", "```php\nproducts.importer_manager:\n  class: Drupal\\products\\Plugin\\ImporterManager\n  parent: default_plugin_manager\n  arguments: ['@entity_type.manager']\n```", "```php\n$plugin = \\Drupal::service('products.importer_manager')\n  ->createInstanceFromConfig('my_json_product_importer');\n$plugin->import();\n```", "```php\n/**\n * Defines the Product entity.\n *\n * @ContentEntityType(\n *   ...\n *   label = @Translation(\"Product\"),\n *   bundle_label = @Translation(\"Product type\"),\n *   handlers = {\n *   ...\n *   entity_keys = {\n *     ...\n *     \"bundle\" = \"type\",\n *   },\n *   ...\n *   bundle_entity_type = \"product_type\",\n *   field_ui_base_route = \"entity.product_type.edit_form\"\n\n * )\n */\n```", "```php\n\"add-form\" = \"/admin/structure/product/add/{product_type}\",  \n```", "```php\n\"add-page\" = \"/admin/structure/product/add\",  \n```", "```php\nentity.product.add_page:\n  route_name: entity.product.add_page\n  title: 'Add Product'\n  appears_on:\n    - entity.product.collection\n```", "```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityBundleBase;\n\n/**\n * Product type configuration entity type.\n *\n * @ConfigEntityType(\n *   id = \"product_type\",\n *   label = @Translation(\"Product type\"),\n *   handlers = {\n *     \"list_builder\" = \"Drupal\\products\\ProductTypeListBuilder\",\n *     \"form\" = {\n *       \"add\" = \"Drupal\\products\\Form\\ProductTypeForm\",\n *       \"edit\" = \"Drupal\\products\\Form\\ProductTypeForm\",\n *       \"delete\" = \"Drupal\\products\\Form\\ProductTypeDeleteForm\"\n *     },\n *     \"route_provider\" = {\n *       \"html\" = \"Drupal\\Core\\Entity\\Routing\\AdminHtmlRouteProvider\",\n *     },\n *   },\n *   config_prefix = \"product_type\",\n *   admin_permission = \"administer site configuration\",\n *   bundle_of = \"product\",\n *   entity_keys = {\n *     \"id\" = \"id\",\n *     \"label\" = \"label\",\n *     \"uuid\" = \"uuid\"\n *   },\n *   links = {\n *     \"canonical\" = \"/admin/structure/product_type/{product_type}\",\n *     \"add-form\" = \"/admin/structure/product_type/add\",\n *     \"edit-form\" = \"/admin/structure/product_type/{product_type}/edit\",\n *     \"delete-form\" = \"/admin/structure/product_type/{product_type}/delete\",\n *     \"collection\" = \"/admin/structure/product_type\"\n *   },\n *   config_export = { \n *     \"id\",\n *     \"label\"\n *   }\n * )\n */\nclass ProductType extends ConfigEntityBundleBase implements ProductTypeInterface  {\n\n  /**\n   * The Product type ID.\n   *\n   * @var string\n   */\n  protected $id;\n\n  /**\n   * The Product type label.\n   *\n   * @var string\n   */\n  protected $label;\n}\n```", "```php\nnamespace Drupal\\products\\Entity;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityInterface;\n\n/**\n * Product bundle interface.\n */\ninterface ProductTypeInterface extends ConfigEntityInterface {}\n```", "```php\nnamespace Drupal\\products;\n\nuse Drupal\\Core\\Config\\Entity\\ConfigEntityListBuilder;\nuse Drupal\\Core\\Entity\\EntityInterface;\n\n/**\n * List builder for ProductType entities.\n */\nclass ProductTypeListBuilder extends ConfigEntityListBuilder {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildHeader() {\n    $header['label'] = $this->t('Product type');\n    $header['id'] = $this->t('Machine name');\n    return $header + parent::buildHeader();\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildRow(EntityInterface $entity) {\n    $row['label'] = $entity->label();\n    $row['id'] = $entity->id();\n    return $row + parent::buildRow($entity);\n  }\n}\n```", "```php\nnamespace Drupal\\products\\Form;\n\nuse Drupal\\Core\\Entity\\EntityForm;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\n/**\n * Form handler for creating/editing ProductType entities\n */\nclass ProductTypeForm extends EntityForm {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function form(array $form, FormStateInterface $form_state) {\n    $form = parent::form($form, $form_state);\n\n    /** @var \\Drupal\\products\\Entity\\ProductTypeInterface $product_type */\n    $product_type = $this->entity;\n    $form['label'] = [\n      '#type' => 'textfield',\n      '#title' => $this->t('Label'),\n      '#maxlength' => 255,\n      '#default_value' => $product_type->label(),\n      '#description' => $this->t('Label for the Product type.'),\n      '#required' => TRUE,\n    ];\n\n    $form['id'] = [\n      '#type' => 'machine_name',\n      '#default_value' => $product_type->id(),\n      '#machine_name' => [\n        'exists' => '\\Drupal\\products\\Entity\\ProductType::load',\n      ],\n      '#disabled' => !$product_type->isNew(),\n    ];\n\n    return $form;\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public function save(array $form, FormStateInterface $form_state) {\n    $product_type = $this->entity;\n    $status = $product_type->save();\n\n    switch ($status) {\n      case SAVED_NEW:\n        drupal_set_message($this->t('Created the %label Product type.', [\n          '%label' => $product_type->label(),\n        ]));\n        break;\n\n      default:\n        drupal_set_message($this->t('Saved the %label Product type.', [\n          '%label' => $product_type->label(),\n        ]));\n    }\n    $form_state->setRedirectUrl($product_type->toUrl('collection'));\n  }\n}\n```", "```php\nproducts.product_type.*:\n  type: config_entity\n  label: 'Product type config'\n  mapping:\n  id:\n  type: string\n  label: 'ID'\n  label:\n  type: label\n  label: 'Label'\n  uuid:\n  type: string\n```", "```php\nnamespace Drupal\\products\\Form; \n\nuse Drupal\\Core\\Entity\\EntityConfirmFormBase; \nuse Drupal\\Core\\Form\\FormStateInterface; \nuse Drupal\\Core\\Messenger\\MessengerInterface; \nuse Drupal\\Core\\Url; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface; \n\n/** \n * Form handler for deleting ProductType entities. \n */ \nclass ProductTypeDeleteForm extends EntityConfirmFormBase { \n\n  /** \n   * ProductTypeDeleteForm constructor. \n   * \n   * @param \\Drupal\\Core\\Messenger\\MessengerInterface $messenger \n   */ \n  public function __construct(MessengerInterface $messenger) { \n    $this->messenger = $messenger; \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public static function create(ContainerInterface $container) { \n    return new static( \n      $container->get('messenger') \n    ); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getQuestion() { \n    return $this->t('Are you sure you want to delete %name?', ['%name' => $this->entity->label()]); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getCancelUrl() { \n    return new Url('entity.product_type.collection'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function getConfirmText() { \n    return $this->t('Delete'); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  public function submitForm(array &$form, FormStateInterface $form_state) { \n    $this->entity->delete(); \n\n    $this->messenger->addMessage($this->t('Deleted @entity product type.', ['@entity' => $this->entity->label()])); \n\n    $form_state->setRedirectUrl($this->getCancelUrl()); \n  } \n\n} \n```", "```php\n# Product type entity menu items \nentity.product_type.collection: \n  title: 'Product types' \n  route_name: entity.product_type.collection \n  description: 'List Product bundles' \n  parent: system.admin_structure \n  weight: 99 \n\n```", "```php\nentity.product_type.add_form: \n  route_name: 'entity.product_type.add_form' \n  title: 'Add Product type' \n  appears_on: \n    - entity.product_type.collection \n```", "```php\n/**\n * Returns the Product type that needs to be created.\n *\n * @return string\n */\npublic function getBundle();\n```", "```php\n/**\n * The product bundle.\n *\n * @var string\n */\nprotected $bundle;\n...\n/**\n * {@inheritdoc}\n */\npublic function getBundle() {\n  return $this->bundle;\n}\n\n```", "```php\n...\nbundle:\n  type: string\n  label: The product bundle \n```", "```php\n$form['bundle'] = [\n  '#type' => 'entity_autocomplete',\n  '#target_type' => 'product_type',\n  '#title' => $this->t('Product type'),\n  '#default_value' => $importer->getBundle() ? $this->entityTypeManager->getStorage('product_type')->load($importer->getBundle()) : NULL,\n  '#description' => $this->t('The type of products that need to be created.'),  '#required' => TRUE,\n];\n```", "```php\nif (!$existing) {\n  $values = [\n    'remote_id' => $data->id,\n    'source' => $config->getSource(),\n    'type' => $config->getBundle(),\n  ];\n  /** @var \\Drupal\\products\\Entity\\ProductInterface $product */\n  $product = $this->entityTypeManager->getStorage('product')->create($values);\n  ...\n```", "```php\n/**\n * Returns the Importer configuration entity.\n *\n * @return \\Drupal\\products\\Entity\\ImporterInterface\n */\npublic function getConfig();\n```", "```php\n/**\n * {@inheritdoc}\n */\npublic function getConfig() {\n  return $this->configuration['config'];\n}\n```", "```php\n/**\n * Creates an array of importer plugins from all the existing Importer\n * configuration entities.\n *\n * @return \\Drupal\\products\\Plugin\\ImporterInterface[]\n */\npublic function createInstanceFromAllConfigs() {\n  $configs = $this->entityTypeManager->getStorage('importer')->loadMultiple();\n  if (!$configs) {\n    return [];\n  }\n  $plugins = [];\n  foreach ($configs as $config) {\n    $plugin = $this->createInstanceFromConfig($config->id());\n    if (!$plugin) {\n      continue;\n    }\n\n    $plugins[] = $plugin;\n  }\n\n  return $plugins;\n}\n```", "```php\n{ \n  \"name\": \"drupal/products\", \n  \"description\": \"Importing products like a boss.\", \n  \"type\": \"drupal-module\", \n  \"autoload\": { \n    \"psr-4\": { \n      \"Drupal\\\\products\\\\\": \"src/\" \n    } \n  }, \n  \"extra\": { \n    \"drush\": { \n      \"services\": { \n        \"drush.services.yml\": \"^9\" \n      } \n    } \n  } \n} \n```", "```php\nservices: \n  products.commands: \n    class: Drupal\\products\\Commands\\ProductCommands \n    arguments: ['@products.importer_manager'] \n    tags: \n      - { name: drush.command } \n\n```", "```php\nnamespace Drupal\\products\\Commands; \n\nuse Drush\\Commands\\DrushCommands; \nuse Symfony\\Component\\Console\\Input\\InputOption; \nuse Drupal\\products\\Plugin\\ImporterManager; \n\n/** \n * Drush commands for products. \n */ \nclass ProductCommands extends DrushCommands { \n\n  /** \n   * @var \\Drupal\\products\\Plugin\\ImporterManager \n   */ \n  protected $importerManager; \n\n  /** \n   * ProductCommands constructor. \n   * \n   * @param \\Drupal\\products\\Plugin\\ImporterManager $importerManager \n   */ \n  public function __construct(ImporterManager $importerManager) { \n    $this->importerManager = $importerManager; \n  } \n\n  /** \n   * Imports the Products \n   * \n   * @option importer \n   *   The importer config ID to use. \n   * \n   * @command products-import-run \n   * @aliases pir \n   * \n   * @param array $options \n   *   The command options. \n   */ \n  public function import($options = ['importer' => InputOption::VALUE_OPTIONAL]) { \n    // ... add the logic here. \n  } \n\n} \n```", "```php\ndrush products-import-run \ndrush products-import-run —importer=my_json_product_importer \n```", "```php\n$importer = $options['importer'];\n\nif (!is_null($importer)) {\n  $plugin = $this->importerManager->createInstanceFromConfig($importer);\n  if (is_null($plugin)) {\n    $this->logger()->log('error', t('The specified importer does not exist.'));\n    return;\n  }\n\n  $this->runPluginImport($plugin);\n  return;\n}\n\n$plugins = $this->importerManager->createInstanceFromAllConfigs();\nif (!$plugins) {\n  $this->logger()->log('error', t('There are no importers to run.'));\n  return;\n}\n\nforeach ($plugins as $plugin) {\n  $this->runPluginImport($plugin);\n}\n```", "```php\n/** \n * Runs an individual Importer plugin. \n * \n * @param \\Drupal\\products\\Plugin\\ImporterInterface $plugin \n */ \nprotected function runPluginImport(\\Drupal\\products\\Plugin\\ImporterInterface $plugin) { \n  $result = $plugin->import(); \n  $message_values = ['@importer' => $plugin->getConfig()->label()]; \n  if ($result) { \n    $this->logger()->log('status', t('The \"@importer\" importer has been run.', $message_values)); \n    return; \n  } \n\n  $this->logger()->log('error', t('There was a problem running the \"@importer\" importer.', $message_values)); \n}­ \n```"]