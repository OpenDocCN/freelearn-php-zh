["```php\nadd_shortcode( 'submit-book-review', 'ch6_brus_book_review_form' ); \n```", "```php\nfunction ch6_brus_book_review_form() { \n    // make sure user is logged in \n    if ( !is_user_logged_in() ) { \n        echo '<p>You need to be a website member to be able to '; \n        echo 'submit book reviews. Sign up to gain access!</p>'; \n        return; \n    } \n    ?> \n\n    <form method=\"post\" id=\"add_book_review\" action=\"\"> \n\n    <!-- Nonce fields to verify visitor provenance --> \n    <?php wp_nonce_field( 'add_review_form', 'br_user_form' ); ?>\n\n    <table> \n        <tr> \n            <td>Book Title</td> \n            <td><input type=\"text\" name=\"book_title\" /></td> \n        </tr> \n        <tr> \n            <td>Book Author</td> \n            <td><input type=\"text\" name=\"book_author\" /></td> \n        </tr> \n        <tr> \n            <td>Review</td> \n            <td><textarea name=\"book_review_text\"></textarea></td> \n        </tr> \n        <tr> \n          <td>Rating</td> \n            <td><select name=\"book_review_rating\"> \n            <?php \n            // Generate all rating items in drop-down list \n            for ( $rating = 5; $rating >= 1; $rating-- ) { ?> \n                <option value=\"<?php echo $rating; ?>\"> \n                               <?php echo $rating; ?> stars \n            <?php } ?> \n            </select> \n            </td> \n        </tr> \n        <tr> \n            <td>Book Type</td> \n            <td> \n            <?php  \n            // Retrieve array of all book types in system \n            $book_types = get_terms( 'book_reviews_book_type', \n                                 array( 'orderby' => 'name', \n                                        'hide_empty' => 0 ) ); \n\n            // Check if book types were found \n            if ( !is_wp_error( $book_types ) && \n                 !empty( $book_types ) ) { \n\n                echo '<select name=\"book_review_book_type\">'; \n\n                // Display all book types \n                foreach ( $book_types as $book_type ) { \n                     echo '<option value=\"' . $book_type->term_id; \n                     echo '\">' . $book_type->name . '</option>'; \n               }     \n\n               echo '</select>'; \n            } ?> \n            </td> \n        </tr> \n    </table> \n\n    <input type=\"submit\" name=\"submit\" value=\"Submit Review\" /> \n    </form> \n<?php } \n```", "```php\nadd_action( 'template_redirect', \n            'ch6_brus_match_new_book_reviews' ); \n```", "```php\nfunction ch6_brus_match_new_book_reviews( $template ) { \n    if ( !empty( $_POST['ch6_brus_user_book_review'] ) ) { \n        ch6_brus_process_user_book_reviews(); \n    } else { \n        return $template; \n    } \n} \n```", "```php\nfunction ch6_brus_process_user_book_reviews() { \n    // Check that all required fields are present and non-empty \n    if ( wp_verify_nonce( $_POST['br_user_form'], \n                          'add_review_form' ) && \n         !empty( $_POST['book_title'] ) && \n         !empty( $_POST['book_author'] ) && \n         !empty( $_POST['book_review_text'] ) &&  \n         !empty( $_POST['book_review_book_type'] ) && \n         !empty( $_POST['book_review_rating'] ) ) { \n        // Create array with received data \n        $new_book_review_data = array( \n            'post_status' => 'publish',  \n            'post_title' => $_POST['book_title'], \n            'post_type' => 'book_reviews', \n            'post_content' => $_POST['book_review_text'] ); \n\n        // Insert new post in website database \n        // Store new post ID from return value in variable \n        $new_book_review_id =  \n                         wp_insert_post( $new_book_review_data ); \n\n        // Store book author and rating \n        add_post_meta( $new_book_review_id, 'book_author', \n                     wp_kses( $_POST['book_author'], array() ) ); \n        add_post_meta( $new_book_review_id, 'book_rating', \n                       (int) $_POST['book_review_rating'] ); \n\n        // Set book type on post \n        if ( term_exists( $_POST['book_review_book_type'], \n                          'book_reviews_book_type' ) ) { \n            wp_set_post_terms( $new_book_review_id, \n                               $_POST['book_review_book_type'], \n                               'book_reviews_book_type' );  \n        } \n        // Redirect browser to book review submission page \n        $redirect_address = \n             ( empty( $_POST['_wp_http_referer'] ) ? site_url() : \n                                    $_POST['_wp_http_referer'] ); \n        wp_redirect( add_query_arg( 'add_review_message', '1', \n                     $redirect_address ) ); \n        exit; \n    } else { \n        // Display message if any required fields are missing \n        $abort_message = 'Some fields were left empty. Please '; \n        $abort_message .= 'go back and complete the form.'; \n        wp_die( $abort_message ); \n        exit; \n    } \n} \n```", "```php\n<?php if ( isset( $_GET['add_review_message'] ) \n            && $_GET['add_review_message'] == 1 ) { ?> \n\n    <div style=\"margin: 8px;border: 1px solid #ddd; \n        background-color: #ff0;\"> \n    Thank for your submission! \n    </div> \n\n<?php } ?> \n\n<!-- Post variable to indicate user-submitted items --> \n<input type=\"hidden\" name=\"ch6_brus_user_book_review\" value=\"1\" /> \n```", "```php\nadd_action( 'wp_insert_post', 'ch6_brus_send_email', 10, 2 ); \n```", "```php\nfunction ch6_brus_send_email( $post_id, $post ) { \n\n    // Only send emails for user-submitted book reviews \n    if ( isset( $_POST['ch6_brus_user_book_review'] ) && \n         'book_reviews' == $post->post_type ) { \n\n        $admin_mail = get_option( 'admin_email' ); \n        $headers = 'Content-type: text/html'; \n        $message = 'A user submitted a new book review to your '; \n        $message .= 'WordPress website database.<br /><br />'; \n        $message .= 'Book Title: ' . $post->post_title ; \n        $message .= '<br /><a href=\"'; \n        $message .= add_query_arg( array( \n                                   'post_status' => 'draft', \n                                  'post_type' => 'book_reviews' ), \n                                   admin_url( 'edit.php' ) ); \n        $message .= '\">Moderate new book reviews</a>'; \n        $email_title = htmlspecialchars_decode( get_bloginfo(), \n             ENT_QUOTES ) . \" - New Book Review Added: \" . \n             htmlspecialchars( $_POST['book_title'] ); \n        // Send email \n        wp_mail( $admin_mail, $email_title, $message, $headers ); \n    } \n} \n```", "```php\nwp_mail( $destination, $subject, $message, [$headers], \n         [$attachments] ); \n```", "```php\nadd_action( 'wp_enqueue_scripts', 'ch6_brus_recaptcha_script' );\n```", "```php\nfunction ch6_brus_recaptcha_script() {\n    wp_enqueue_script( 'google_recaptcha', \n                       'https://www.google.com/recaptcha/api.js',\n                       array(), false, true );\n}\n```", "```php\n<tr>\n    <td colspan=\"2\">\n        <div class=\"g-recaptcha\" \n             data-sitekey=\"[my-website-key]\"></div>\n    </td>\n</tr>\n```", "```php\nrequire_once plugin_dir_path( __FILE__ ) .\n             '/recaptcha/autoload.php';\n\n$recaptcha = new \\ReCaptcha\\ReCaptcha( '[my-secret-key]' ); \n$resp = $recaptcha->verify( $_POST['g-recaptcha-response'],\n                            $_SERVER['REMOTE_ADDR'] );\n\nif ( ! $resp->isSuccess() ) {\n    // Display message if any required fields are missing \n    $abort_message = 'Missing or incorrect captcha.<br />'; \n    $abort_message .= 'Please go back and try again.'; \n    wp_die( $abort_message ); \n    exit; \n} else {\n```", "```php\n<tr>\n    <td>Enter text from image</td>\n    <td>\n        <img id=\"captcha\" \n             src=\"img/>                            __FILE__ ); ?>\"\n             alt=\"CAPTCHA Image\" />\n        <input type=\"text\" name=\"captcha_code\"\n               size=\"10\" maxlength=\"6\" />\n        <a href=\"#\" \n           onclick=\"document.getElementById( 'captcha' ).src = \n           '<?php echo plugins_url(\n                       '/securimage/securimage_show.php', \n                       __FILE__ ); ?>?'\n           + Math.random(); return false\">[ Different Image ]</a>\n    </td>\n</tr> \n```", "```php\nif ( PHP_SESSION_NONE == session_status() ) {\n    session_start();\n}\n\ninclude_once plugin_dir_path( __FILE__ ) .\n             '/securimage/securimage.php';\n$securimage = new Securimage();\n\nif ( false == $securimage->check( $_POST['captcha_code'] ) ) {\n    // Display message if any required fields are missing \n    $abort_message = 'Missing or incorrect captcha.<br />'; \n    $abort_message .= 'Please go back and try again.'; \n    wp_die( $abort_message ); \n    exit; \n} else {\n```"]