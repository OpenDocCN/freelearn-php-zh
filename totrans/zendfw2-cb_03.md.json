["```php\n\"doctrine/common\": \">=2.1\",\n\n```", "```php\nphp composer.phar update\n\n```", "```php\n<?php\n\n// We define our namespace here\nnamespace Application\\Form; \n\n// We need to use this to create an extend \nuse Zend\\Form\\Form; \n\n// Starting class definition, extending from Zend\\Form\nclass NormalForm extends Form \n{\n  // Define our constructor that sets up our elements \n  public function __construct($name = null) \n  {\n    // Create the form with the following name/id\n    parent::__construct($name);\n  }\n}\n```", "```php\n<?php\n\n// Namespace of the controller\nnamespace Application\\Controller;\n\n// Use the following classes at a minimum\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Application\\Form\\NormalForm;\nuse Zend\\View\\Model\\ViewModel;\n\n// Begin our class definition\nclass IndexController extends AbstractActionController\n{\n  // Set up our indexAction,  in which we want to \n  // display our form.\n  public function indexAction()\n  {\n    // Initialize our form\n    $form = new NormalForm();\n\n    // Return the view model to the user, with the \n    // attached form\n    return new ViewModel(array(\n        'form' =>  $form\n    ));\n  }\n}\n```", "```php\n<?php\n  // Output the opening FORM tag: <form>\n  echo $this->form()->openTag($this->form); \n\n  // Output the formatted elements of the form\n  echo $this->formCollection($this->form);\n\n  // Output the closing FROM tag </form>\n  echo $this->form()->closeTag();\n```", "```php\n<form action=\"\" method=\"POST\" name=\"normalform\" id=\"normalform\"></form>\n```", "```php\n<?php\n\n// We first define our namespace as usual\nnamespace Application\\Form;\n\n// We need to use this otherwise it will not parse the \n// elements correctly.\nuse Zend\\Form\\Annotation;\n\n/**\n * We want to name this form annotationform, which is \n * why we use the tag below, defining the name. \n *\n * @Annotation\\Name(\"annotationform\")\n * \n * A hydrator makes sure our framework can 'read' the \n * properties in our object, in this case we tell our \n * annotation engine that we have an object that needs \n * its properties read. There is probably a more \n * technical, accurate way of explaining it, but let's \n * just keep it to this for now. \n *\n* @Annotation\\Hydrator(\n *     \"Zend\\Stdlib\\Hydrator\\ObjectProperty\n * \")\n*/\nclass AnnotationForm\n{\n  /**\n   * If we want to exclude properties in our form just \n   * use the Exclude annotation.\n   * \n   * @Annotation\\Exclude()\n   */\n  public $id;\n}\n```", "```php\n<?php\n\n// Namespace of the controller\nnamespace Application\\Controller;\n\n// Use the following classes at a minimum\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Application\\Form\\AnnotationForm;\nuse Zend\\Form\\Annotation\\AnnotationBuilder;\nuse Zend\\View\\Model\\ViewModel;\n\n// Begin our class definition\nclass IndexController extends AbstractActionController\n{\n\n  // Set up our indexAction,  in which we want to \n  // display our form.\n  public function indexAction()\n  {\n    // Set up the output model\n    $viewModel = new ViewModel;\n\n    // Instantiate the AnnotationBuilder which will \n    // create the actual form object\n    $builder = new AnnotationBuilder();\n\n    // Instantiate our annotated form\n    $annotationForm = new AnnotationForm();\n\n    // Now let the annotation builder create the form \n    // from scratch\n    $form = $builder->createForm($annotationForm);\n\n    // Set our form to be the form variable in the view\n    $viewModel->setVariable('form', $form);\n\n    // Return the view model to the user\n    return $viewModel;\n  }\n}\n```", "```php\n<?php\n  // Output the opening FORM tag: <form>\n  echo $this->form()->openTag($this->form); \n\n  // Output the formatted elements of the form\n  echo $this->formCollection($this->form);\n\n  // Output the closing FROM tag </form>\n  echo $this->form()->closeTag();\n```", "```php\n<form action=\"\" method=\"POST\" name=\"annotationform\" id=\"annotationform\"></form>\n```", "```php\n// Adding a simple input text field\npublic function __construct($name = null) \n{\n  // Create the form with the following name/id\n  parent::__construct($name); \n\n  $this->add(array( \t\n    // Specifying the name of the field\n    'name' => 'name', \n\n    // The type of field we want to show\n    'type' => 'Zend\\Form\\Element\\Text', \n\n    // Any extra attributes we can give the element\n    'attributes' => array( \n      // If there is no text we will display the \n      // placeholder\n      'placeholder' => 'Your name here...', \n\n      // Tell the validator if the element is required \n      // or not\n      'required' => 'required', \n    ), \n\n    // Any extra options we can define\n    'options' => array(  \n      // What is the label we want to give this element\n      'label' => 'What is your name?', \n    ), \n  )); \n}\n```", "```php\nclass AnnotationForm\n{\n /**\n   * Add two filters to this element.\n   *\n   * @Annotation\\Filter({\"name\": \"StringTrim\"})\n   * @Annotation\\Filter({\"name\": \"StripTags\"})\n\n   * Add a validator to make sure the string length \n   * isn't going to be longer than 50, but also not \n   * smaller than 5.\n   *\n   * @Annotation\\Validator({\n   *    \"name\": \"StringLength\", \n   *    \"options\":{\n   *        \"min\": 5, \n   *        \"max\": 50, \n   *        \"encoding\": \"UTF-8\"\n   * }})\n   *\n\n   * Set this element to be required.\n   * \n   * @Annotation\\Required(true)\n\n   * Set the attributes for the element\n   *\n   * @Annotation\\Attributes({\n   *     \"type\": \"text\", \n   *     \"placeholder\": \"Your name here...\", \n   * })\n\n   * Set the options of this element.\n   *\n   * @Annotation\\Options({\n   *    \"label\": \"What is your name?\"\n   * })\n   */\n  public $name;\n```", "```php\n<?php\n\nnamespace Application\\Model;\n\nclass SampleModel\n{\n  public function doStuff($array) { \n    return true; \n  }\n}\n```", "```php\n<?php\n\n// Of course our namespace first\nnamespace Application\\Form; \n\n// As this will be an input filter, we need the \n// following imports to make it work\nuse Zend\\InputFilter\\Factory as InputFilterFactory; \nuse Zend\\InputFilter\\InputFilter; \nuse Zend\\InputFilter\\InputFilterAwareInterface; \nuse Zend\\InputFilter\\InputFilterInterface; \n\n// Create our class, which should be implementing the \n// InputFilterAwareInterface if we want to attach it to \n// the form later on\nclass NormalFormValidator implements \nInputFilterAwareInterface\n{ \n  // This is the input filter that we will create\n  protected $inputFilter; \n\n  // This method is required by the implementation, but \n  // we will just throw an exception instead of setting \n  //the input filter as we don't want anyone to override \n  // us\n  public function setInputFilter(InputFilterInterface $inputFilter) \n  { \n    // We want to make sure that we cannot set an input \n    // filter, as we already do that ourselves\n    throw new \\Exception(\"Cannot set input filter.\"); \n  } \n```", "```php\n// This is the second method that is required by the \n// interface\npublic function getInputFilter() \n{ \n  // If our input filter doesn't exist yet, create one\n  if ($this->inputFilter === null) {\n    // Create the input filter which we will put in our \n    // property later\n    $inputFilter = new InputFilter(); \n\n    // Also instantiate our factory so we can get more \n    // filters at ease\n    $factory = new InputFilterFactory(); \n\n    // Let's add a filter for our name Element in our \n    // form\n    $inputFilter->add($factory->createInput(array(\n      // This is the element is applies to\n      'name' => 'name', \n\n      // We want no one to skip this field, we need it\n      'required' => true, \n\n      // Now we are defining the filters, which make \n      // sure that no malicious or invalid characters \n      // are supplied\n      'filters' => array( \n        // Make sure no tags are in our value, which \n        // could make our system vulnerable for hacks\n        array('name' => 'StripTags'), \n\n        // We want to make sure our string doesn't \n        // have any leading or trailing spaced\t\n        array('name' => 'StringTrim'), \n      ), \n\n      // Validators make the form generate errors when \n      // the data is invalid, filters only filter\t\n      'validators' => array( \n        array ( \n          // We want to add a validator that checks the \n          // length of the string received\n          'name' => 'StringLength', \n          'options' => array( \n            // Check if the string is in UTF-8 encoding  \n            // and between the 5 and 50 characters long\n            'encoding' => 'UTF-8', \n            'min' => '5', \n            'max' => 50', \n          ), \n        ), \n      ), \n    )));\n```", "```php\n    // We are doing the same trick again for the \n    // password, so we can just skip over this, as this \n    // was just necessary for the one after this one.\n    $inputFilter->add($factory->createInput(array(\n      'name' => 'password', \n      'filters' => array( \n        array('name' => 'StripTags'), \n        array('name' => 'StringTrim'), \n      ), \n      'validators' => array( \n        array ( \n          'name' => 'StringLength', \n          'options' => array( \n            'encoding' => 'UTF-8', \n            'min' => '5', \n          ), \n        ), \n      ), \n    )));\n\n    // And here is the great piece of validation we \n    // wanted to show off. This validator checks if the \n    // value of the given element is identical to \n    // another fields value. This way we don't have to \n    // manually check if the password is the same as the \n    // repeat password field.\n    $inputFilter->add($factory->createInput(array(\n      'name' => 'password_verify', \n      'filters' => array( \n        // The usual filters, as we almost always want \n        // to be sure it contains no tags or \n        //trailing/leading spaces\n        array('name' => 'StripTags'), \n        array('name' => 'StringTrim'), \n      ), \n      'validators' => array( \n        array( \n          'name' => 'identical', \n          'options' => array( \n            'token' => 'password', \n          ), \n        ), \n      ), \n    )));\n```", "```php\n// Email validator works perfectly, especially if we \n// don't want to trust any client side validation \n// (which we shouldn't)\n$inputFilter->add($factory->createInput(array(\n  'name' => 'email', \n  'filters' => array( \n     array('name' => 'StripTags'), \n     array('name' => 'StringTrim'), \n  ), \n  'validators' => array( \n    array ( \n       'name' => 'StringLength', \n       'options' => array( \n       'encoding' => 'UTF-8', \n       'min' => '5', \n       'max' => '250', \n        ), \n      ), \n      array( \n        // Don't you hate it when you get email \n        // addresses that are not valid? Well, no \n        // more as we can simply validate on that \n        // as well.\n        'name' => 'EmailAddress', \n        'options' => array( \n        'messages' => array( \n            // We can even leave a neat little error \n            // message to display\n            'emailAddressInvalidFormat' => 'Your email seems to be invalid', \n          ) \n        ), \n      ), \n      array( \n        // This validator makes sure the email \n        // address is not left empty. And although we \n        // can simply say this field is required, \n        // this will give us the opportunity to leave \n        // a nice error message that is relevant to \n        // the user as well\n        'name' => 'NotEmpty', \n        'options' => array( \n        'messages' => array( \n            // This message is displayed when the \n            // field is empty, instead of a 'field \n            // required' message as we didn't make \n            // the field required\n            'isEmpty' => 'I am sorry, your email is required', \n          ) \n        ), \n      ), \n    ), \n  )));\n```", "```php\n      $inputFilter->add($factory->createInput(array(\n        'name' => 'birthdate', \n        'required' => true, \n        'filters' => array( \n          array('name' => 'StripTags'), \n          array('name' => 'StringTrim'), \n        ), \n        'validators' => array( \n          array(\n            'name' => 'Between',\n            'options' => array(\n              // We can define the ranges of dates \n              // here, min and max are both optional, \n              // as long as one of them at least exists\n              'min' => '1900-01-01', \n              'max' => '2013-01-01', \n            ),\n          ),\n        ), \n      )));\n\n      // Set the property\n      $this->inputFilter = $inputFilter;\n    }\n\n    // End of our method, just return our created input \n    // filter now\n    return $this->inputFilter;\n  } \n}\n```", "```php\n<?php\n\n// Define the namespace of our controller\nnamespace Application\\Controller;\n\n// We need to use the following classes\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Zend\\View\\Model\\ViewModel;\nuse Application\\Form\\NormalForm;\nuse Application\\Form\\NormalFormValidator;\nuse Application\\Model\\SampleModel;\n\n// Set up our class definition\nclass IndexController extends AbstractActionController\n{\n  // We want to parse/display our form on the index\n  public function indexAction()\n  {\n    // Initialize our form\n    $form = new NormalForm(); \n\n    // Set our request in a local variable for easier\n    // access\n    $request = $this->getRequest();\n\n    if ($request->isPost() === true) {\n      // Create a new form validator\n      $formValidator = new NormalFormValidator();\n\n      // Set the input filter of the form to the form\n      // validator\n      $form->setInputFilter(\n          $formValidator->getInputFilter()\n      );\n\n      // Set the data from the post to the form\n      $form->setData($request->getPost());\n\n      // Check with the form validator if the form is \n      // valid or not\n      if ($form->isValid() === true) { \n        // Do some Model stuff, like saving, this is \n        // just an empty model we created to show what \n        // probably would happen after a validation \n        // success.\n        $user = new SampleModel();\n\n        // Get *only* the filtered data from the form\n        $user->doStuff($form->getData());\n\n        // Done with this, unset it\n        unset($user);\n      }\n    }\n\n    // Return the view model to the user\n    return newViewModel(array(\n        'form' => $form\n    ));\n  }\n}\n```", "```php\n<?php\n\n// Just open and close the form tag\necho $this->form()->openTag();\necho $this->form()->closeTag();\n\n// Use a form to pull the attributes from\necho $this->form()->openTag($formObject);\n\n/** Do stuff in between **/\n\n// Close the tag again with no form object attached\necho $this->form->closeTag();\n```", "```php\n<form></form>\n```", "```php\n<?php\n\n// First we create a simple button (this is better done \n// inside a form/controller or model of course)\n$buttonElement = new \\Zend\\Form\\Element\\Button(\n  // This is the name of the button\n  'somebutton'\n);\n\n// Render the button immediately through the button \n// element\necho $this->formButton($buttonElement);\n\n// Render the button in 3 steps:\n// Step 1, the opening tag: Can be called without a \n// parameter, and array of attributes or an instance of\n// Zend\\Form\\Element\necho $this->formButton()->openTag($buttonElement);\n\n// Step 2, the inner HTML: Output our custom inner HTML \n// here, like the label of the button\necho '<span>Life is short, click now!</span>';\n\n// Step 3, the closing tag: Close the tag again.\necho $this->formButton()->closeTag();\n```", "```php\n<button name=\"somebutton\"><span>Life is short, click now!</span></button>\n```", "```php\n<?php\n$captchaElement = new \\Zend\\Form\\Element\\Captcha(array(\n  // What is the name of the element\n  'name' => 'captcha',\n  // Now add some captcha specific configuration\n  'captcha' => array(\n    // The class is necessary for the factory to know \n    // what kind of captcha we want. The options are \n    // Dumb, Figlet, Image and the famous ReCaptcha\n    'class' => 'Dumb',\n  )\n));\n\n// That's all folks, the $captchaElement needs to be of \n// the instance Zend\\Captcha\\AdapterInterface to make it \n// work\necho $this->formCaptcha($captchaElement);\n```", "```php\n<?php\n// Create a simple checkbox with the name someCheckbox\n$checkboxElement = new \\Zend\\Form\\Element\\Checkbox('someCheckbox');\n\n// The $checkboxElement needs to be of the instance \n// Zend\\Form\\Element\\Checkbox to make it work\necho $this->formCheckbox($checkboxElement);\n```", "```php\n<input type=\"checkbox\" name=\"someCheckbox\" />\n```", "```php\n<?php\n\n$object = new \\Zend\\Form\\Element\\Collection(\n  // The name of the collection\n  'someCollection', \n\n  // Some additional options\n  array(\n    // The label we want to display\n    'label' => 'collectionSample',\n\n    // Should the collection create a template of our \n    // template element so that we easily duplicate it\n    'should_create_template' => true,\n\n    // Are we allowed to add new elements\n    'allow_add' => true,\n\n    // And how many elements do we want to render\n    'count' => 2,\n\n    // Define the target element to render\n    'target_element' =>array(\n      'type' => 'Zend\\Form\\Element\\Text'\n    ),\n));\n\n// The $object can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formCollection($object);\n```", "```php\n<fieldset><legend>collectionSample</legend><span data-template=\"&lt;input type=&quot;text&quot; name=&quot;__index__&quot; value=&quot;&quot;&gt;\"></span>\n```", "```php\n<?php\n\n// We want a simple text field for our color\n$color = new \\Zend\\Form\\Element\\Color('someColor');\n\n// The $color can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formColor($color);\n```", "```php\n<?php\n// Create a date element\n$date = new \\Zend\\Form\\Element\\Date('someDateElement');\n\n// The $date can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formDate($date);\necho $this->formDateTime($date);\necho $this->formDateTimeLocal($date);\n```", "```php\n<?php\n// Add a simple text field\n$element = new \\Zend\\Form\\Element\\Text('someElement');\n\n// The $email can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formEmail($email);\n```", "```php\n<?php\n\n// The $file can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formFile($file);\n```", "```php\n<?php\n\n// The $hidden can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formHidden($hidden);\n```", "```php\n<?php\n\n// The $image can be of any class that implements the \n// Zend\\Form\\ElementInterface\n$image->setAttrib('src', '/our/image.jpg');\n\necho $this->formImage($image);\n```", "```php\n<?php\n\n// The $input can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formInput($input);\n```", "```php\n<?php\n// Create a simple text input\n$element = new \\Zend\\Form\\Element\\Text('someElement');\n\n// 1\\. This will declare the label immediately. The\n// $element can be of any class that implements\n// the Zend\\Form\\ElementInterface\n\necho $this->formLabel($element);\n\n// 2\\. Or we can declare the formLabel like this\necho $this->formLabel()->openTag(array(\n    'for' => 'someElement',\n));\n\n// We are putting some html in between the \n// <label></label> tags\necho \"Some output in between!\";\n// Close the tag again\necho $this->formLabel()->closeTag();\n\n// 3\\. Or as a last method, there is still some other way \n// to define the element. This will prepend \n// $someOtherElement with our $element's label. Instead \n// of prepend we can also use append.\necho $this->formLabel(\n    $element, \n    $someOtherElement, \n    'prepend'\n);\n```", "```php\n<?php\n\n// Create a simple text box\n$element = new \\Zend\\Form\\Element\\Text('someInput');\n\n// 1\\. Just display the element errors, with the optional \n// attributes added as the second parameter.\n// The $element can be of any class that implements the \n// Zend\\Form\\ElementInterface\necho $this->formElementErrors($element, array(\n    'class' => 'element-error',\n    'id' => 'error_three'\n));\n\n// 2\\. Custom formatted validation error messages.\necho $this->formElementErrors()\n          ->setMessageOpenFormat('<a href=\"/help-me\">')\n          ->setMessageSeparatorString(\n                   '</a><a href=\"/help-me\">'\n         )->setMessageCloseString('</a>')\n          ->render($element);\n```", "```php\n<?php\n\n// Set our namespace just right\nnamespace Application\\Form\\Element;\n\n// We need to extend from the base element\nuse Zend\\Form\\Element;\n\n// Set the class name, and make sure we extend from the \n// base element\nclass Video extends Element\n{\n  // The type of the element is video, 'nuff said.\n  protected $attributes = array(\n      'type' => 'video',\n  );\n}\n```", "```php\n<?php\n\nnamespace Application\\Form\\View\\Helper;\n\nuse Zend\\Form\\View\\Helper\\AbstractHelper;\nuse Zend\\Form\\ElementInterface;\nuse Zend\\Form\\Exception;\n\nclass FormVideo extends AbstractHelper\n{\n  /**\n   * Attributes valid for the video tag\n   *\n   * @var array\n   */\n  protected $validTagAttributes = array(\n    'autoplay' => true,\n    'controls' => true,\n    'height' => true,\n    'loop' => true,\n    'muted' => true,\n    'poster' => true,\n    'preload' => true,\n    'src' => true,\n    'width' => true,\n  );\n```", "```php\n  /**\n   * Invoke helper as functor\n   *\n   * Proxies to {@link render()}.\n   *\n   * @param ElementInterface|null $element\n   * @return string|FormInput\n   */\n  public function __invoke(ElementInterface $element = null)\n  {\n    if (!$element) {\n      return $this;\n    }\n\n    return $this->render($element);\n  }\n```", "```php\n  /**\n   * Creates the <source> element for use in the <video>\n   * element.\n   * \n   * @param array|string $src\tCan either be an \n   *                           array of strings, or a \n   *                           string alone.\n   * @return string\n   */\n  protected function createSourcesString($src) \n  {\n    $retval = '';\n\n    if (is_array($src) === true) {\n      foreach ($src as $tmpSrc) {\n        $retval .= $this->createSourcesString($tmpSrc);\n      }\n    } else {\n     $retval = sprintf(\n       '<source src=\"img/%s\">',\n       $src\n     );\n    }\n\n    return $retval;\n  }\n```", "```php\n  /**\n   * Render a form <video /> element from the provided \n   * $element\n   *\n   * @param ElementInterface $element\n   * @throws Exception\\DomainException\n   * @return string\n   */\n  public function render(ElementInterface $element)\n  {\n    // Get the src attribute of the element\n    $src = $element->getAttribute('src');\n\n    // Check if the src is null or empty, in that case \n    // throw an error as we can 't play a video without \n    // a video link!\n    if ($src === null || $src === '') {\n      throw new Exception\\DomainException(sprintf(\n        '%s requires that the element has an assigned'.   \n        'src; none discovered',\n        __METHOD__\n      ));\n    }\n\n    // Get the attributes from the element\n    $attributes = $element->getAttributes();\n\n    // Unset the src as we don't need it right here as \n    // we render it separately\n    unset($attributes['src']);\n\n    // Return our rendered object\n    return sprintf(\n        '<video %s>%s</video>',\n        $this->createAttributesString($attributes),\n        $this->createSourcesString($src)\n    );\n  }\n}\n```", "```php\nclass Module \n{\n  public function getViewHelperConfig()   \n  {\n    return array(\n        'invokables' => array(\n        // Add our extra view helper to render our video\n        'formVideo' => 'Application\\Form\\View\\Helper\\FormVideo',\n      )\n    );\n  }\n}\n```", "```php\n<?php\nuse Application\\Form\\Element\\Video;\n\n// Declare a new video element\n$video = new Video();\n\n// Set the attribute src for this element\n$video->setAttribute('src', array(\n// These are some public video urls from \n// w3schools.com\n  'http://www.w3schools.com/html/mov_bbb.mp4',\n  'http://www.w3schools.com/html/mov_bbb.ogg',\n  ));\n\n// We also want to begin auto playing once loaded\n$video->setAttribute('autoplay', true);\n\n// Output the formatted element\necho $this->formVideo($video);\n```"]