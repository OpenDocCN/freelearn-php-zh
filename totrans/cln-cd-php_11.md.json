["```php\nname: Continuous Integration\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\njobs:\n  pipeline:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ...\n        uses: ...\n```", "```php\nsteps:\n  ###################\n  # Stage 1 - Build #\n  ###################\n  - name: Checkout latest revision\n    uses: actions/checkout@v3\n  - name: Install PHP\n    uses: shivammathur/setup-php@v2\n    with:\n      php-version: '8.1'\n      coverage: pcov\n```", "```php\n- name: Get composer cache directory\n  id: composer-cache\n  run: echo \"::set-output name=dir::$(composer config cache\n    files-dir)\"\n- name: Cache dependencies\n  uses: actions/cache@v2\n  with:\n    path: ${{ steps.composer-cache.outputs.dir }}\n    key: ${{ runner.os }}-composer-${{\n      hashFiles('**/composer.lock') }}\n    restore-keys: ${{ runner.os }}-composer-\n- name: Install composer dependencies\n  run: composer install\n```", "```php\n- name: Start PHP built-in webserver\n  run: php -S localhost:8000 -t public &\n```", "```php\n###########################\n# Stage 2 - Code Analysis #\n###########################\n- name: Code Style Fixer\n  run: vendor/bin/php-cs-fixer fix --dry-run\n- name: Static Code Analysis\n  run: vendor/bin/phpstan\n```", "```php\n###################\n# Stage 3 - Tests #\n###################\n- name: Unit Tests\n  run: vendor/bin/phpunit --testsuite Unit\n- name: Integration Tests\n  run: vendor/bin/phpunit --testsuite Api\n```", "```php\n<testsuites>\n    <testsuite name=\"Api\">\n        <directory>tests/Api</directory>\n    </testsuite>\n    <testsuite name=\"Unit\">\n        <directory>tests/Unit</directory>\n    </testsuite>\n</testsuites>\n```", "```php\n<coverage processUncoveredFiles=\"false\">\n    <include>\n        <directory suffix=\".php\">src</directory>\n    </include>\n    <report>\n        <html outputDirectory=\"reports/coverage\" />\n        <text outputFile=\"reports/coverage.txt\" />\n    </report>\n</coverage>\n```", "```php\n####################\n# Stage 4 - Deploy #\n####################\n- name: Remove dev dependencies\n  run: composer install --no-dev --optimize-autoloader\n```", "```php\n- name: Create release artifact\n  uses: actions/upload-artifact@v2\n  with:\n    name: release\n    path: |\n      public/\n      src/\n      vendor/\n- name: Create reports artifact\n  uses: actions/upload-artifact@v2\n  with:\n    name: reports\n    path: reports/\n```", "```php\n$ composer require --dev captainhook/captainhook\n```", "```php\n$ vendor/bin/captainhook configure\n```", "```php\n{\n    \"config\": {\n        \"fail-on-first-error\": true\n    },\n    \"pre-commit\": {\n        \"enabled\": true,\n        \"actions\": [\n            {\n             \"action\": \"vendor/bin/php-cs-fixer\n               fix --dry-run\"\n            },\n            {\n                \"action\": \"vendor/bin/phpstan\"\n            }\n        ]\n    }\n}\n```", "```php\n$ vendor/bin/captainhook install -f\n```", "```php\n$ vendor/bin/captainhook hook:pre-commit\n```", "```php\n\"post-autoload-dump\": [\n    \"if [ -e vendor/bin/captainhook ]; then\n      vendor/bin/captainhook install -f -s; fi\"\n]\n```", "```php\n{\n    \"pre-commit\": {\n        \"enabled\": true,\n        \"actions\": [\n            {\n                \"action\": \"vendor/bin/php-cs-fixer fix\n                  {$STAGED_FILES|of-type:php} --dry-run\"\n            },\n            {\n                \"action\": \"vendor/bin/phpstan analyse\n                  {$STAGED_FILES|of-type:php}\"\n            }\n        ]\n    }\n}\n```"]