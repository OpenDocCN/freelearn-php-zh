["```php\n$I = new FunctionalTester($scenario);\n```", "```php\n$I->wantTo('ensure that home page works');\n```", "```php\n$I->amOnPage(Yii::$app->homeUrl);\n```", "```php\n$I->see('My Company');\n$I->seeLink('About');\n```", "```php\n$I->click('About');\n$I->see('This is the About page.');\n```", "```php\n$I = new FunctionalTester($scenario);\n$I->wantTo('ensure that home page works');\n$I->amOnPage(Yii::$app->homeUrl);\n```", "```php\n$I->expect('the title to be set correctly');\n$I->seeInTitle('My Yii Application');\n```", "```php\n$I->expectTo('see all the links of the menu');\n$I->seeLink('Home', '/');\n$I->seeLink('About', '/about');\n$I->seeLink('Login', '/login');\n$I->seeLink('Contact', '/contact');\n```", "```php\n$url = $I->grabFromCurrentUrl();\n$I->seeLink('Home', $url);\n```", "```php\n$I->expectTo('see a self-referencing link to my company homepage');\n$I->seeLink('My Company', $url);\n```", "```php\n$I->dontSeeLink('About', 'site/about');\n$I->dontSeeLink('Login', 'site/login');\n$I->dontSeeLink('About', 'site/contact');\n```", "```php\n$I->expectTo('see the link of the homepage as selected');\n$I->seeElement('//li[@class=\"active\"]/a[contains(.,\"Home\")]');\n```", "```php\nuse \\Codeception\\Util\\Locator;\n\n$I->see('Title', Locator::combine('h1','h2','h3'));\n```", "```php\n<?php\nuse \\Codeception\\Util\\Locator;\n\n$I->fillField(Locator::tabIndex(1), 'davert');\n$I->fillField(Locator::tabIndex(2) , 'qwerty');\n$I->click('Login');\n```", "```php\n$loginPage = LoginPage::openBy($I);\n\n$I->see('Login', 'h1');\n$I->amGoingTo('try to login with empty credentials');\n$loginPage->login('', '');\n\n```", "```php\nnamespace tests\\codeception\\_pages;\n\nuse yii\\codeception\\BasePage;\n\n/**\n * Represents login page\n * @property \\AcceptanceTester|\\FunctionalTester $actor\n */\nclass LoginPage extends BasePage\n{\n    public $route = 'site/login';\n\n    /**\n     * @param string $username\n     * @param string $password\n     */\n    public function login($username, $password)\n    {\n        $this->actor->fillField(\n            'input[name=\"LoginForm[username]\"]', $username\n        );\n        $this->actor->fillField(\n            'input[name=\"LoginForm[password]\"]', $password\n        );\n        $this->actor->click('login-button');\n    }\n}\n```", "```php\n$loginPage = new LoginPage($I);\n$loginPage->getUrl();\n```", "```php\n<?php\n\nnamespace tests\\codeception\\_support;\n\nuse tests\\codeception\\fixtures\\UserFixture;\nuse Codeception\\Module;\nuse yii\\test\\FixtureTrait;\n\n/**\n * This helper is used to populate database with needed \n * fixtures before any tests should be run.\n * For example - populate database with demo login user \n * that should be used in acceptance and functional tests.\n * All fixtures will be loaded before suite will be\n * started and unloaded after it.\n */\nclass FixtureHelper extends Module\n{\n\n    /**\n     * Redeclare visibility because Codeception includes\n     * all public methods that not starts from \"_\"\n     * and not excluded by module settings, in actor class.\n     */\n    use FixtureTrait {\n        loadFixtures as protected;\n        fixtures as protected;\n        globalFixtures as protected;\n        unloadFixtures as protected;\n        getFixtures as protected;\n        getFixture as public;\n    }\n\n    /**\n     * Method called before any suite tests run. \n     * Loads User fixture login user\n     * to use in acceptance and functional tests.\n     * @param array $settings\n     */\n    public function _beforeSuite($settings = [])\n    {\n        $this->loadFixtures();\n    }\n\n    /**\n     * Method is called after all suite tests run\n     */\n    public function _afterSuite()\n    {\n        $this->unloadFixtures();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function fixtures()\n    {\n        return [\n            'user' => [\n                'class' => UserFixture::className(),\n                'dataFile' => '@tests/codeception/fixtures/data/init_login.php',\n            ],\n        ];\n    }\n}\n```", "```php\n<?php\n\nreturn [\n    'basic' => [\n        'username' => 'user',\n        'authkey' => uniqid(),\n        'password' => Yii::$app->security->generatePasswordHash(\n            'something'\n        ),\n    ],\n];\n```", "```php\n# tests/codeception/functional.suite.yml\n\nmodules:\n    enabled:\n      - ...\n      - tests\\codeception\\_support\\FixtureHelper\n```", "```php\n# tests/codeception/functional.suite.yml\n\nmodules:\n    enabled:\n\n      - Filesystem\n      - Yii2\n      - REST\n      - tests\\codeception\\_support\\FixtureHelper\n    config:\n        Yii2:\n            configFile: 'codeception/config/functional.php'\n        PhpBrowser:\n            url: 'http://basic-dev.yii2.sandbox'\n        REST:\n            url: 'http://basic-dev.yii2.sandbox/v1/'\n\n```", "```php\n$ cd tests/\n$ ../vendor/bin/codecept generate:cept functional UserAPICept\nTest was created in UserAPICept.php\n\n```", "```php\n<?php\n// tests/codeception/functional/UserAPICept.php\n\n$I = new FunctionalTester($scenario);\n$I->wantTo('test the user REST API');\n```", "```php\n$userFixtures = $I->getFixture('user');\n$user = $userFixtures['basic'];\n$userPassword = 'something';\n```", "```php\n$I->amGoingTo('authenticate to search for my own user');\n$I->amHttpAuthenticated($user['username'], $userPassword);\n$I->sendGET('users/search/'.$user['username']);\n```", "```php\n$I->seeResponseCodeIs(200);\n$I->seeResponseIsJson();\n$I->seeResponseContains($user['username']);\n$I->seeResponseContains('password');\n$I->seeResponseContains('id');\n```", "```php\n$userId = $I->grabDataFromJsonResponse('id');\n```", "```php\n$I->amGoingTo('ensure I can fetch my own information while being authenticated');\n$I->amHttpAuthenticated($user['username'], $userPassword);\n$I->sendGET('users/'.$userId);\n$I->seeResponseCodeIs(200);\n$I->seeResponseIsJson();\n$I->seeResponseContains($user['username']);\n$I->seeResponseContains('password');\n$I->seeResponseContains('id');\n```", "```php\n$I->amGoingTo('update my own password');\n$I->amHttpAuthenticated($user['username'], $userPassword);\n$newPassword = 'something else';\n$I->sendPUT(\n    'users/' . $userId,\n    ['password' => $newPassword, 'authkey' => 'updated']\n);\n$I->seeResponseIsJson();\n$I->seeResponseContains('true');\n$I->seeResponseCodeIs(200);\n\n$I->amGoingTo('check my new password works');\n$I->amHttpAuthenticated($user['username'], $newPassword);\n$I->sendHEAD('users/'.$userId);\n$I->seeResponseIsJson();\n$I->seeResponseContains($user['username']);\n$I->seeResponseCodeIs(200);\n```", "```php\n// /config/web.php\n\n$config = [\n    // ...\n    'modules' => [\n        'v1' => [\n            'class' => 'app\\modules\\v1\\Module',\n        ],\n    ],\n    // ...\n];\n```", "```php\n// /modules/v1/controllers/UserController.php\n\nnamespace app\\modules\\v1\\controllers;\n\nuse app\\models\\User;\nuse yii\\rest\\ActiveController;\n```", "```php\n// /modules/v1/controllers/UserController.php\n\nclass UserController extends ActiveController\n{\n    public $modelClass = 'app\\models\\User';\n}\n```", "```php\n// /modules/v1/controllers/UserController.php\n\npublic function checkAccess($action, $model = null, $params = [])\n{\n    if (\\Yii::$app->user->isGuest) {\n        throw new UnauthorizedHttpException;\n    }\n}\n```", "```php\nclass ActiveController extends Controller\n{\n    // ...\n\n    public function actions()\n    {\n        return [\n            'index' => [\n                'class' => 'yii\\rest\\IndexAction',\n                'modelClass' => $this->modelClass,\n                'checkAccess' => [$this, 'checkAccess'],\n            ],\n            // ...\n        ];\n    }\n\n    // ...\n}\n```", "```php\n// /modules/v1/Module.php\n\npublic function init()\n{\n    parent::init();\n    // custom initialization code goes here\n    // disable the user session\n    \\Yii::$app->user->enableSession = false;\n}\n```", "```php\n// /modules/v1/controllers/UserController.php\n\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n\n    $behaviors['authenticator'] = [\n        'class' => HttpBasicAuth::className(),\n    ];\n\n    return $behaviors;\n}\n```", "```php\n// modules/v1/controllers/UserController.php    \n\npublic function behaviors()\n{\n    $behaviors = parent::behaviors();\n\n    $behaviors['authenticator'] = [\n        'class' => HttpBasicAuth::className(),\n        'auth' => function ($username, $password) {\n                /** @var User $user */\n                $user = User::findByUsername($username);\n                if ($user && $user->validatePassword($password)) {\n                    return $user;\n                }\n            }\n    ];\n\n    return $behaviors;\n}\n```", "```php\npublic function actions()\n{\n    $actions = parent::actions();\n    unset($actions['view'], $actions['update']);\n    return $actions;\n}\n```", "```php\npublic function actionView($id)\n{\n    if ($id == Yii::$app->user->getId()) {\n        return User::findOne($id);\n    }\n    throw new ForbiddenHttpException;\n}\n```", "```php\npublic function actionUpdate($id)\n{\n    if (! Yii::$app->request->isPut) {\n        return new HttpRequestMethodException();\n    }\n\n    /** @var User $user */\n    $user = User::findIdentity($id);\n\n    if (Yii::$app->request->post('password') !== null) {\n        $user->setPassword(Yii::$app->request->post('password'));\n    }\n\n    return $user->save();\n}\n```", "```php\npublic function actionSearch($username)\n{\n    /** @var User $user */\n    $user = User::findByUsername($username);\n    if ($user && $user->id === Yii::$app->user->getId()) {\n        return $user;\n    }\n    throw new ForbiddenHttpException;\n}\n```", "```php\n'only' => ['view', 'update', 'search', 'options']\n```", "```php\n'GET search/{username}' => 'search'\n```", "```php\n'{username}' => '<username:\\\\w+>'\n```", "```php\n// config/web.php\n\n'rules' => [\n    [\n        'class' => 'yii\\rest\\UrlRule',\n        'controller' => 'v1/user',\n        'tokens' => [\n            '{id}' => '<id:\\\\d[\\\\d,]*>',\n            '{username}' => '<username:\\\\w+>'\n        ],\n        'extraPatterns' => [\n            'GET search/{username}' => 'search',\n        ],\n        'only' => ['view', 'update', 'search', 'options']\n    ],\n    '/' => 'site/index',\n    '<action:\\w+>' => 'site/<action>',\n    '<controller:\\w+>/<id:\\d+>' => '<controller>/view',\n    '<controller:\\w+>/<action:\\w+>/<id:\\d+>' => '<controller>/<action>',\n    '<controller:\\w+>/<action:\\w+>' => '<controller>/<action>',\n]\n```", "```php\n'urlManager' => [\n    'enablePrettyUrl' => true,\n    'showScriptName' => false,\n    'enableStrictParsing' => true,\n    'rules' => [ ... ]\n]\n```", "```php\n../vendor/bin/codecept run functional UserAPICept.php\nCodeception PHP Testing Framework v2.0.8\nPowered by PHPUnit 4.5-ge3692ba by Sebastian Bergmann and contributors.\n\nFunctional Tests (1) ------------------------------------------------\nTrying to test the user REST API (UserAPICept)                     Ok\n---------------------------------------------------------------------\n\nTime: 9.8 seconds, Memory: 14.50Mb\n\nOK (1 test, 18 assertions)\n\n```"]