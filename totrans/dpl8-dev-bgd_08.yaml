- en: Chapter 8. How Does It Taste? – Getting Feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*This chapter will walk through the code that adds a placeholder for HTML form
    elements in the contact module. We will also revisit the Colorbox module that
    we installed in the previous chapter. We will make some enhancements to the code
    (an advanced real-world example), and walk through the process of working with
    patches. We will also implement the Review and Like system with recipe content
    type using comment types and views configurations.*'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Drupal contact form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very simple contact form is included with Drupal core and is enabled by default.
    The core contact form provides a good starting point to introduce some interactive
    features to our d8dev site.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – enabling and configuring the core contact form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will configure the core contact form so that anonymous visitors to our site
    will be able to provide feedback about the site:'
  prefs: []
  type: TYPE_NORMAL
- en: In Drupal 8, the contact module is enabled by default. We just need to set permissions
    to the **ANONYMOUS** and **AUTHENTICATED** roles to use the feedback form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the d8dev site in your favorite browser, and click on the **Extend**
    link in the **Admin** toolbar. Scroll down to the module named **Contact** under
    the **Core** group; you will notice that the module is enabled. Then, click on
    the **Permissions** link:![Time for action – enabling and configuring the core
    contact form](img/4659_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Permissions** page, you will notice that the **Use the side-wide contact
    form** permission is enabled for the **ADMINISTRATOR**, **ANONYMOUS**, and **AUTHENTICATED**
    roles by default. So, anonymous users can use the contact form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, log out and navigate to `http://localhost/contact/feedback`. You will
    see a simple contact form, as shown in the following screenshot:![Time for action
    – enabling and configuring the core contact form](img/4659_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We enabled a simple contact form to get feedback from the visitors to our d8dev
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Adding placeholder text to our contact form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core Contact module provides a decent out-of-the-box contact form for our
    site. But what if we want to customize it a bit? Say, for example, we want to
    add some placeholder text to explain to the users why they should fill out the
    form. As we have seen in previous chapters, there are usually multiple ways to
    accomplish customizations like this with Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Using configurations to add placeholder text to the contact form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will configure the core contact form to enable placeholders to explain to
    the users why they should fill out the form.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding placeholder text to our site contact form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The core Contact module provides a decent out-of-the-box contact form for our
    site. The core also provides configurable placeholders for fields. So, we add
    the placeholders for form fields to display placeholders to explain to the users
    why they should fill out the form:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the d8dev site in your favorite browser, and click on the **Structure**
    link in the **Admin** toolbar. Click on **Contact forms** on the next page you
    can see **Website feedback** listed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **Manage form display** in the **OPERATIONS** column for the **Website
    feedback** form:![Time for action – adding placeholder text to our site contact
    form](img/4659_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you can see that the **Subject** and **Message** fields
    are configurable:![Time for action – adding placeholder text to our site contact
    form](img/4659_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the settings icon for the **Subject** field, fill in **Placeholder**
    as `Please enter your subject here!`, and click on the **Update** button:![Time
    for action – adding placeholder text to our site contact form](img/4659_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the settings icon for the **Message** field, fill in **Placeholder**
    as `Please enter your Message here!`, change the **Rows** value from `12` to `8`,
    and click on the **Update** button:![Time for action – adding placeholder text
    to our site contact form](img/4659_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, log out and navigate to `http://localhost/contact/feedback` as an **ANONYMOUS**
    user. You will see a simple contact form, as shown in the following screenshot:![Time
    for action – adding placeholder text to our site contact form](img/4659_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also try the Contact Storage module, which provides storage for Contact
    messages; these are full-fledged entities in Drupal 8\. This module provides features
    such as Message storage, Edit messages, and Delete messages. For more details,
    check out [https://www.drupal.org/project/contact_storage](https://www.drupal.org/project/contact_storage).
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We configured the **Placeholder** text for the **Subject** and **Message** fields
    in the **Manage form display** page for the contact form.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom code to add placeholder text to the Name and Email fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal provides configurable placeholders for the **Subject** and **Message**
    fields but not for the **Name** and **Email** fields, so we add placeholders for
    them using custom code in our d8dev module.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding placeholder text to Name and Email fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will utilize the core `hook_form_alter` hook to alter the core contact form
    to display placeholders for name and e-mail fields. We will be adding this code
    to the `d8dev.module` file:'
  prefs: []
  type: TYPE_NORMAL
- en: In PhpStorm, open the `d8dev.module` file in your custom module at `/modules`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, switch over to the browser with the core contact form loaded, and find
    the `form_id` of the form element. Right-click on the page and click on **View
    source code**. On the next page, you can see HTML code. Now search for `form_id`
    and you will find that `contact_message_feedback_form is` the required form ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In another way, we can use the `drupal_set_message()` core function to find
    the `form_id`. To do this, we need to add the following code on top of the `d8dev.module`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, reload the `http://localhost/contact/feedback` page as a logged-in user,
    and you will see a message displaying `form_id`, as follows:![Time for action
    – adding placeholder text to Name and Email fields](img/4659_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to add a placeholder HTML attribute to the `name` and `mail`
    form elements, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the preceding placeholder code only for the contact form. Now our `d8dev_form_alter()`
    function looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, clear the cache by going to **Administration** | **Configuration** | **Development**
    | **Performance**. Now reload the contact page as an **ANONYMOUS** user. Then
    you will see the following form:![Time for action – adding placeholder text to
    Name and Email fields](img/4659_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the `hook_form_alter` hook to add placeholder text to the core contact
    form for the **Name** and **Email** fields.
  prefs: []
  type: TYPE_NORMAL
- en: Time for another recipe!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just in case you were getting hungry, we are going to add a new recipe. Let's
    add it now so that we have something delicious to eat as we work our way through
    the rest of this challenging chapter! The recipe for this chapter is garlic chicken
    Indian style. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for another recipe!](img/4659_08_09_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Name**: Garlic chicken Indian style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Garlic chicken recipe Indian style, Learn how to make garlic
    chicken in 20 minutes, Includes restaurant style and home style starters, curries,
    biryanis and more. This garlic chicken can be prepared in just 20 mins excluding
    the marinating time. It makes a perfect starter or a side to make a meal exotic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**recipeYield**: Four servings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prepTime**: 20 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cookTime**: 20 minutes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingredients**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 300 grams of chicken strips or boneless cubes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 tbsp. yogurt/dahi/curd (do not use sour yogurt)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Salt—very little
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A generous pinch of pepper
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two tbsp. oil
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One sprig curry leaf
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ¼ tsp cumin
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One onion chopped finely
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Five red chilies or ¾ tsp red chili powder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Five garlic cloves crushed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ¾ tbsp. vinegar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ¼ tsp sugar (optional)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Salt to taste
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Water—15 to 30 ml (the lesser the better) to make a paste
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A few coriander leaves
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Onion wedges or rings
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lemon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instructions**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mix yogurt, salt, and pepper with ½ to ¾ cup of water. Beat well and set aside.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Wash chicken and soak it in this prepared butter milk for 2 hours to overnight
    in the refrigerator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Soaking for at least 6 hours is recommended to get soft chicken.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Blend and make a paste of the ingredients mentioned for chili garlic sauce.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drain the buttermilk and add the prepared sauce.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Mix well and leave it for 5 minutes. If you want to prepare it at a later time,
    you can put it back in the refrigerator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Heat a pan with oil. Add cumin and curry leaves. Sauté until the cumin begins
    to splutter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add onions and fry until golden.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the chicken and fry on high heat for 2 to 3 minutes. When you see the chicken
    turning white, cover it with a lid, lower the heat, and cook until the chicken
    turns tender. This barely takes 5 minutes if you are using strips.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the lid and fry until the moisture evaporates and the sauce begins to
    cling to the chicken. The longer it is roasted, the more aromatic and tastier
    the sauce becomes, but the chicken tends to lose its tenderness.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: So take off from the heat when it is of your liking. Take care not to burn;
    garlic burns faster.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Colorbox file enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We added the Colorbox module to our d8dev site in the previous chapter to display
    the images in the overlay. Currently, the Colorbox module displays the title of
    the recipe as the caption for all recipe images displayed in the Colorbox overlay
    for our Recipe content type, as shown in the following screenshot. But it's not
    working with image properties such as title and alt values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Colorbox file enhancements](img/4659_08_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So for that, we raised an issue in the Colorbox issues queue ([https://www.drupal.org/node/264516](https://www.drupal.org/node/264516)0)
    in [Chapter 7](ch07.html "Chapter 7. Adding Media to Our Site"), *Adding Media
    to Our Site*. Colorbox maintainer `@frjo` replied as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The file entity module is a contrib module so what you really is asking for
    is that Colorbox support it. Change the title so this is clear. I have never used
    that module but if someone who does sends in a patch I will take a look at it."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before we begin creating a patch, we need to have a clear understanding of why
    it isn't showing up in this case of the `title` or `alt` property. I went through
    the Colorbox module and did debug on all preprocess functions where it was rendering
    the images field properties. I found that the `template_preprocess_colorbox_formatter()`
    function is the right function that loads all attributes of the image field. But
    when the file entity module is enabled, it does not load because the files have
    become entities and Colorbox doesn't know how to render from image files. So,
    we are going to create a patch for this issue and submit it in the Colorbox issue
    that we created in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – enhancing the Colorbox module with image title and alt captions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, where do we begin implementing this proposed approach and complete the
    associated feature request? We will start by debugging the available processed
    `$variable` in the `template_preprocess_colorbox_formatter()` function so that
    we can modify or add required properties to the image field:'
  prefs: []
  type: TYPE_NORMAL
- en: In PhpStorm, open the `colorbox.inc` file in your contribute modules at the
    `/modules` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we start modifying or adding code, let''s understand the code in the
    `template_preprocess_colorbox_formatter()` function in the `colorbox.inc` file.
    First, we need to know where caption settings are saved. There is the `$settings`
    variable that has been declared; add the following code next to the `$settings`
    variable (line 35):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache from the **Performance** page and reload the recipe content;
    you will see the following:![Time for action – enhancing the Colorbox module with
    image title and alt captions](img/4659_08_10_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We noticed that auto is the colorbox caption for this content type. To confirm
    this, go to **Structure** | **Content types** and click on **Manage display**
    for the recipe content type. Next, click on the settings icon for the **Recipe
    images** field and you will notice the **Caption** as **Automatic**:![Time for
    action – enhancing the Colorbox module with image title and alt captions](img/4659_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your settings might be different, so in the last step, you can see relatively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the next lines, we can see a `switch` statement declared as follows to set
    the `$caption` variable, which is going to be displayed as caption in the Colorbox
    overlay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, we can understand that the `$caption` variable needs to be modified to set
    alt or title text as the caption. To confirm this, when `$caption` is getting
    loaded in the colorbox overlay; we just have to set some dummy text to it and
    we will see the effect on the recipe content. Before adding the dummy text, remove
    the `var_dump($settings); die;` line you added in the last step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following line next to the switch statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clear the cache from the **Performance** page. Reload the recipe content and
    click on any image to check the caption; you will see the following screenshot:![Time
    for action – enhancing the Colorbox module with image title and alt captions](img/4659_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before moving to the next step, remove the dummy caption code you added in
    the last step: `$caption = ''This is test caption!'';`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, preprocess the title of the `attributes` variable, which needs to be
    loaded from the image file entity. Add the following code before the `$variables[''attributes''][''title'']
    = $caption;` line, which is at the end of the `template_preprocess_colorbox_formatter()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we checked whether the `file_entity` module is enabled because this module
    is not dependent on the colorbox module. The purpose of the `file_entity` module
    is to provide interfaces for managing files and files to be fieldable as entities,
    so the properties of the image file can be rendered as objects. Next, we added
    code that loads the file object and we set the `$caption` variable by validating
    the title and alt text properties from the `$file` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see this effect on the recipe content, clear the cache from the Performance
    page and reload the recipe content before making sure that your image has updated
    with alt and title texts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to the Recipe content type manage display page, click on the settings
    icon for the **Recipe images** field and update the **Caption** as **Title text**.
    Click on the **Save** button at the bottom of the **Manage display** page and
    reload the recipe content page to see the changes. Click on any image. WOW! Now
    it's showing title text as captions (see the next screenshot). Alternatively,
    update **Caption** as **Alt text** in the settings and check the recipe content;
    it will work:![Time for action – enhancing the Colorbox module with image title
    and alt captions](img/4659_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We updated the colorbox module with custom code to work with the title and alt
    text properties of images.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing our code to Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have code that will be usable across the colorbox module. But, how do
    we get this code into the hands of other Drupal users, and better yet, have it
    maintained as part of the colorbox module? To share this code, we are going to
    create a patch.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a patch and uploading it on the Drupal issues queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can create a patch the Drupal 8/Git way, we need to check out the
    colorbox module project with Git to a new directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.drupal.org/project/colorbox/git-instructions](https://www.drupal.org/project/colorbox/git-instructions).
    At the top, you can see the **Version to work from** select box. Select **8.x-1.x**
    and click on the **Show** button:![Time for action – creating a patch and uploading
    it on the Drupal issues queue](img/4659_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open the Terminal and go to any location (the `cd <path/to/go>` command)
    where you wish to clone the colorbox module. Run the following command to clone
    the colorbox Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to make the same changes in the `colorbox.inc` file that we just
    made for our d8dev site to the code that we just cloned with Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have updated the code, we are ready to create our patch. Following
    the Drupal guidelines at [http://drupal.org/node/707484](http://drupal.org/node/707484),
    run this command from the colorbox root folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will comment on the issue at [http://drupal.org/node/2645160](http://drupal.org/node/2645160)
    and upload our patch with our comments, making sure that the status of the issue
    is set to needs review:![Time for action – creating a patch and uploading it on
    the Drupal issues queue](img/4659_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we want to apply the patch just shown, we use the following `git` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If want to revert the last applied patch, then we use these git commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not only did we update our code so that it will work across the Colorbox module
    and any number of Drupal sites, but we also helped the Drupal community. We learned
    how to create a patch. We will get back to the Colorbox issue at [http://drupal.org/node/2645160](http://drupal.org/node/2645160)
    to see how the Drupal community responds to our patch.
  prefs: []
  type: TYPE_NORMAL
- en: Recipe reviews with comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have enhanced the Colorbox module with configurable captions, we
    will turn our attention back to enhancing user interaction for the site. One great
    way to get visitors to interact with a website is to allow them to review and
    like/dislike the content, in this case, recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring comments as recipe reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now set up the comments so that visitors to our d8dev site will be
    able to review the recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: We will configure our Recipe content type to use the comments. Open up the d8dev
    site in your favorite browser, click on the **Structure** link in the **Admin**
    toolbar, then click on the **Comment types** link, and finally click on the **Add
    content type** link for your Recipe content type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, enter `Recipe Review` as the value for the **Label** field
    and **Content** as the `Target entity type` field. Click on the **Save** button:![Time
    for action – configuring comments as recipe reviews](img/4659_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We added a new comment type and it can be used in any content types. Click on
    the **Structure** link in the **Admin** toolbar, then click on the **Content types**
    link, and finally click on the **Manage fields** link for your Recipe content
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Add field** link. On the next screen, select **Comments**
    as **Add a new field**, enter `Recipe Review` as **Label**, and click on the **Save
    and continue** button:![Time for action – configuring comments as recipe reviews](img/4659_08_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select **Recipe Review** as **Comment type** and click on
    the **Save field settings** button. Next, leave all fields as default and click
    on the **Save settings** button:![Time for action – configuring comments as recipe
    reviews](img/4659_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have enabled comments for recipe content types. Now we reload the recipe
    content as an **ANONYMOUS** user to see the default comments form. But we cannot
    see the form because of permission issues. To set the permission, go to **people**
    | **permissions**, check the **Post comments** permission for **ANONYMOUS** users,
    scroll down to the bottom of the page, and click on the **Save permissions** button.
    Again, reload the recipe content as an **ANONYMOUS** user and you will see something
    like the following screenshot:![Time for action – configuring comments as recipe
    reviews](img/4659_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't need the name, subject, and comment fields provided by default. We
    are going to delete them and add the **e-mail** and **How does it taste ?** fields.
    Now click on **Structure** in the **Admin** bar, and then click on the link **Comment
    types**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **Manage fields** from the Operations for Recipe review comment
    type. You can see that only the **Comment** field is there. Click on the **Delete**
    link from **OPERATIONS** for the **Comment** field. On the next screen, click
    on the **Delete** button to delete this field:![Time for action – configuring
    comments as recipe reviews](img/4659_08_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Add field**, select **Add a new field** as **Email**, enter
    **Label** as `E-mail`, and click on the **Save and continue** button:![Time for
    action – configuring comments as recipe reviews](img/4659_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, leave the default values **Limited**, **1**, and click on
    the **Save field settings** button. Next, check **Required field** and click on
    the **Save settings** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Add field** link. Select **Text (plain, long)** as **Add
    a new field** and **How does it taste ?** as the **Label**. Click on the **Save
    and continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, leave the default settings as **1** and click on the **Save
    field settings** button. Again on the next screen, leave all fields as default
    and click on the **Save settings** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, reload the recipe content as an **ANONYMOUS** user. We can see the form
    as shown in the following screenshot:![Time for action – configuring comments
    as recipe reviews](img/4659_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But we can still see the **Your name** and **Subject** fields, which are not
    required. So we will disable them from the **Manage form display** page. Now,
    click on **Manage form display** for the Recipe Review comment type. On the next
    screen, select the **Hidden** value for the **Author** and **Subject** fields
    and click on the **Save** button. See the following screenshot:![Time for action
    – configuring comments as recipe reviews](img/4659_08_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we reload the recipe content, and we can see the comment form as follows:![Time
    for action – configuring comments as recipe reviews](img/4659_08_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to restrict viewing comments for **ANONYMOUS** and **AUTHENTICATED**
    user roles since we need to display only the number of likes for the recipe content.
    To set the permission, go to **people** | **permissions**. Uncheck the **View
    comments** permission for **ANONYMOUS** and **AUTHENTICATED** users, scroll down
    to the bottom of the page, and click on the **Save permissions** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a new comment type, Recipe review, and enabled it in the Recipe content
    type. Also, we configured new fields in the Recipe review comment type.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – enhancing the liking system using comments and views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now set up a like/dislike button so that visitors to our d8dev site
    will be able to like/dislike the recipes. Also, we will show how many people have
    liked each recipe content:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we will add the **Do you like it ?** button in the Recipe Review comment
    type so that visitors to our d8dev site will be able to like/dislike the recipes.
    Open up the d8dev site in your favorite browser, and click on the **Structure**
    link in the **Admin** toolbar. Then click on the **Comment types** link, and finally
    click on the **Manage fields** link for your Recipe review in the **Operations**
    dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add field** link to add a new field. On the next screen, select
    **List (integer)** as **Add a new field** and `Do you like it ?` as **Label**.
    Click on the **Save and continue** button:![Time for action – enhancing the liking
    system using comments and views](img/4659_08_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, enter the following text in the **Allowed values list** field, leave other
    settings as default, and click on the **Save field settings** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this step, check the **Required field** button, select **Default value**
    as **Yes**, and click on the **Save settings** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Manage form display** link. Change the **Do you like it ?**
    field widget to the **Check boxes/radio buttons** widget and click on the **Save**
    button:![Time for action – enhancing the liking system using comments and views](img/4659_08_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, reload the recipe content and you can see the comment form as follows:![Time
    for action – enhancing the liking system using comments and views](img/4659_08_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have enabled the **Like** button. Next, we need to show how many people have
    liked the recipe content. We are going to create one view block to display the
    count of likes for each recipe content. Open up the d8dev site in your favorite
    browser. Click on the **Structure** link in the **Admin** toolbar, then click
    on the **Views** link, and finally click on the **Add new view** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Add new view** page, enter the view name as `Recipe likes count`. In
    the **View settings** section, select the **Show** field as **Comments** and the
    **of type** field as **Recipe review**. In the **Block settings** section, check
    **Create block** and click on the **Save and edit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the **Format** section, click on the **Show: Comment** link. Then,
    a popup will appear. Change the **Row** field value comment to fields and click
    on the **Apply (all displays)** button:![Time for action – enhancing the liking
    system using comments and views](img/4659_08_27.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the **Advanced** section and under the **Other** group, click on the
    **Use aggregation: No** link. Then, a popup will appear. Check **Aggregate** and
    click on the **Apply (all displays)** button:![Time for action – enhancing the
    liking system using comments and views](img/4659_08_28.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the **Fields** section, click on the **Add** link. In the popup, search
    for the keywords `do you like`. Then check the **Do you like it ? (field_do_you_like_it_)**
    checkbox and click on the **Apply(all displays)** button:![Time for action – enhancing
    the liking system using comments and views](img/4659_08_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select **Sum** as the **Aggregation type** field and click
    on the **Apply and continue** button:![Time for action – enhancing the liking
    system using comments and views](img/4659_08_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the next screen, scroll down to the **REWRITE RESULTS** section and click
    on it. Check the **Override the output of this field with custom text** checkbox
    and enter the following text in the **Text** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, in the **STYLE SETTINGS** section, check the **Customize field HTML**
    checkbox. Select the **HTML element** as **STRONG** and click on the **Apply(all
    displays)** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the **ADVANCED** section, click on the **Add** link for **CONTEXTUAL
    FILTERS**. In the popup, search for the keywords `node id`. Then check the **Node
    ID** checkbox and click on the **Apply(all displays)** button. On the next screen,
    leave the settings as default and click on the **Apply and continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **WHEN THE FILTER VALUE IS NOT AVAILABLE** section on the next screen,
    select the **Provide default value** radio button. Select **Type** as **Content
    ID from URL** and click on the **Apply(all displays)** button at the bottom:![Time
    for action – enhancing the liking system using comments and views](img/4659_08_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, in the **FIELDS** section, click on the **Comment: Title** link. In the
    popup, click on the **Delete** link. In the same **FIELDS** section, click on
    the **Add** link. In the popup, search for `title` and select **Type** as **Content**.
    Check the **Title** checkbox and click on the **Apply(all displays)** button at
    the bottom.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, leave the default settings and click on the **Apply and
    continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, check the **Exclude from display** checkbox and click on
    the **Apply(all displays)** button at the bottom. Then, scroll down and click
    on the **Save** button to save the view settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are done creating a block view. Now we need to place this block in the Recipe
    content page. Click on the **Structure** link in the **Admin** toolbar, and then
    click on the **Block layout** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **Content** section and click on the **Place block** button.
    Next, in the popup, search for `Recipe likes count` and click on the **Place block**
    button for this:![Time for action – enhancing the liking system using comments
    and views](img/4659_08_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, uncheck **Display title**. Under the **Content types** section
    check **Recipe** and leave the other settings as default. Click on the **Save
    block** button:![Time for action – enhancing the liking system using comments
    and views](img/4659_08_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the **Block layout** page, move the **Recipe likes count** block to
    above the **Main page content** block and scroll down to the bottom. Click on
    the **Save block** button:![Time for action – enhancing the liking system using
    comments and views](img/4659_08_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are now done with all configurations. Now we need to check out the recipe
    content page to check how the number of likes will display on it. We will use
    the Devel module to generate dummy content and comments. Use Drush to download
    and enable the Devel module. Run the following commands in the d8dev root folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To generate dummy content, open up the d8dev site in your favorite browser,
    click on the **Configuration** link in the **Admin** toolbar, and then click on
    the **Generate content** link under the **DEVELOPMENT** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, check the **Recipe** content type, enter `10` in the **Maximum
    number of comments per node** field, and click on the **Generate** button. This
    will generate 50 Recipe contents with 10 comments each:![Time for action – enhancing
    the liking system using comments and views](img/4659_08_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open any Recipe content that was just created by the devel module from the **Admin
    Content** page. We can see the count of likes as shown in the next screenshot.
    If we check all comments of this Recipe, we can find only **4**(or how many **Yes**
    values) likes from the **Do you like it ?** field:![Time for action – enhancing
    the liking system using comments and views](img/4659_08_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only approved comments' likes will be counted, so if we get any comments, then
    the administrator has to update them as **Published comments**. To do this, we
    have to go to `http://localhost/admin/content/comment/approval`:![Time for action
    – enhancing the liking system using comments and views](img/4659_08_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a **View** block and configured the comment settings to use for the
    Review and Like/Dislike recipes on our d8dev site. The process was straightforward
    and showed that sometimes adding a unique flare to a Drupal site doesn't take
    much development at all.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added some new features that will provide a way for visitors
    to interact with our d8dev site, and we enhanced some of those interactive features
    with comments and views. We also revisited the Colorbox File module that was introduced
    in the previous chapter, and made some modifications to it that allow more control
    over how captions are displayed in the Colorbox overlay.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a more in-depth look at the Views module.
    We will explore advanced configuration and developing a custom Views plugin that
    utilizes a custom jQuery plugin to display the Views output in semantic and progressive
    enhanced tabs.
  prefs: []
  type: TYPE_NORMAL
