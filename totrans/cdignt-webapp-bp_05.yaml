- en: Chapter 5. Creating a Newsletter Signup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A newsletter signup is quite a handy application; you can adapt it quite easily
    to fit most applications without much fuss. It enables you to have a database
    of subscribers and manage them, editing their settings and removing them from
    the database should they choose to unsubscribe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will create an application that will allow users to sign
    up for a newsletter. A form will be displayed, inviting a user to enter their
    e-mail address, and then it will define a couple of settings to submit that form.
    It will also let subscribers alter their settings and even unsubscribe entirely.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this app, we will create one controller. This will handle all parts
    of the project: subscribing, editing settings, and unsubscribing.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a language file to store text, allowing you to have multiple language
    support should that be required.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create all the necessary view files and a model to interface with the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: However, this app, along with all the others in this book, relies on the basic
    setup we did in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project
    Resources"), *Introduction and Shared Project Resources*. Although you can take
    large sections of the code and drop it into pretty much any app you might already
    have, please keep in mind that the setup done in the first chapter acts as a foundation
    for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So, without further ado, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Design and wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As always, before we start building, we should take a look at what we plan to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at a brief description of our intent: we plan to build an
    app that will allow people to sign up for a database of contacts that will be
    used as a newsletter signup database. We will enable users to subscribe by registering
    their e-mail address and some options. These will be saved in a database.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also enable people to amend their settings and even unsubscribe should
    they wish to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, to get a better idea of what''s happening, let''s take a look at the
    following site map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design and wireframes](img/7093OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, that''s the site map; the first thing to notice is how simple the site
    is. There are only three main areas in this project. Let''s go over each item
    and get a brief idea of what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home**: This is the initial landing area. The `index()` function is responsible
    for displaying a form to the user, inviting them to subscribe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signup**: This processes the validation of the form input and passes that
    data (if validated successfully) to the `add()` model function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings/Unsubscribe**: This accepts the users'' e-mail address as the third
    and fourth `uri` parameters and displays a form to the subscriber. This form contains
    the settings assigned to the e-mail address supplied. The user is able to amend
    these settings and unsubscribe should they wish to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fairly good idea of the structure and form of the site, let's
    take a look at some wireframes of each page.
  prefs: []
  type: TYPE_NORMAL
- en: The Home – index() and Signup – index() items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **1** (the Home (`index()`)
    item) and point 2 (the Signup (`index()`) item) in the preceding diagram. The
    user is shown a textbox named `signup_email` in the HTML and two checkboxes named
    `signup_opt1` and `signup_opt2` in the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These options are just an example; they can be removed or amended should you
    wish. They are intended to act as a filter to the newsletters. For example, you
    could include frequency options giving weekly, monthly, or quarterly options.
    When you come to send your newsletters, you would only send the subscriber a newsletter
    based on those options—as I say, you can change them, add more, or have none if
    you wish.
  prefs: []
  type: TYPE_NORMAL
- en: The user can enter their e-mail address as shown in the following screenshot,
    apply any options they might wish to add, and submit the form. The form is submitted
    to the `signup` controller's `index()` function, which will then validate that
    data. On passing the validation, the `add()` function of `Signup_model` will create
    the record in the `signups` database table.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Home – index() and Signup – index() items](img/7093OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Settings/Unsubscribe – settings()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows you a wireframe from point **3** (the Settings/Unsubscribe
    (`settings()`) item) in the site map diagram. The user is presented with a form
    that is pre-populated with their settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Settings/Unsubscribe – settings()](img/7093OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We were able to fetch the correct details because of the URL. The user's e-mail
    address is in the URL as the third and fourth segments.
  prefs: []
  type: TYPE_NORMAL
- en: The page is loaded when a user clicks on an unsubscribe link—perhaps in an e-mail.
    The URL for this link would take the `http://www.domain.com/signup/settings/name/domain.com`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that we don't use the `http://www.domain.com/signup/settings/name@domain.com`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: In the second URL, you can see the `@` character; in the first, you can see
    that character replaced with a forward slash. In effect, we have turned the first
    part of the e-mail address (everything before `@`) into the third `uri` parameter,
    and the fourth parameter of the `uri` comes from the second part of the e-mail
    address (everything after `@`).
  prefs: []
  type: TYPE_NORMAL
- en: 'For security reasons, we are unable to use the `@` character in the URL, so
    we cannot have `http://www.domain.com/signup/settings/name@domain.com` as the
    URL. This is default CodeIgniter behavior: certain characters are disallowed from
    URLs in an effort to reduce the chances of malicious scripts or commands being
    run.'
  prefs: []
  type: TYPE_NORMAL
- en: File overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a relatively small project, and all in all, we''re only going to create
    six files. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/models/signup_model.php`: This provides read/write
    access to the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signup/signup.php`: This displays a
    small form to the user, inviting them to enter their e-mail address and to check
    two checkboxes: **Option 1** and **Option 2**. You can amend these options, adding
    more or removing them completely. The options are there to help the person who
    is signing up define what information they want from the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signup/settings.php`: This displays
    a small form to the user, showing their current settings with the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This provides a navigation
    bar at the top of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/controllers/signup.php`: This contains all
    functions necessary to sign up new subscribers and amend their account details.
    This controller also handles any unsubscribe requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/language/english/en_admin_lang.php`: This
    provides language support for the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The file structure of the preceding six files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, you should have already set up CodeIgniter and Bootstrap as described
    in [Chapter 1](ch01.html "Chapter 1. Introduction and Shared Project Resources"),
    *Introduction and Shared Project Resources*. If not, then you should know that
    the code in this chapter is specifically built with the setup from [Chapter 1](ch01.html
    "Chapter 1. Introduction and Shared Project Resources"), *Introduction and Shared
    Project Resources*, in mind. However it's not the end of the world if you haven't;
    the code can easily be applied to other situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll build the database. Copy the following MySQL code to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Right, let''s take a look at each item in the table and see what it means:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table: signups |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Element** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_id` | This is the primary key. |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_email` | This shows you the users'' e-mail addresses. |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_opt1` | This stores the users option for option 1 in the `views/signup/signup.php`
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_opt2` | This stores the users option for option 2 in the `views/signup/signup.php`
    file. |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_active` | This is a sort of soft delete. It''s not currently supported
    in the application in this chapter, but is there should you wish to use it. |'
  prefs: []
  type: TYPE_TB
- en: '| `signup_created_at` | This is a MySQL timestamp for the date on which the
    row was created in the table. |'
  prefs: []
  type: TYPE_TB
- en: 'We''ll also need to make amends to the `config/database.php` file, namely,
    setting the database access details, username password, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/database.php` file and find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the values in the preceding lines, ensuring you substitute these values
    with ones more specific to your setup and situation—so enter your username, password,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjusting the routes.php file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to redirect the user to the `signup` controller rather than the default
    CodeIgniter `welcome` controller. To do this, we will need to amend the default
    controller setting in the `routes.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `config/routes.php` file to edit and find the following lines (near
    the bottom of the file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we need to change the default controller. Initially, in a CodeIgniter
    application the default controller is set to `welcome`. However, we don''t need
    this, instead we want the default controller to be `signup`. So, find the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the preceding line with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one model in this project—`signup_model.php` that contains functions
    that are specific to adding a subscriber to the database, amending their settings
    and processing the removal of a subscriber should they unsubscribe.
  prefs: []
  type: TYPE_NORMAL
- en: This is our one and only model for this project. Let's briefly go over each
    function in it to give us a general idea of what it does, and then we will go
    into more details of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four main functions in this model, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`add()`: This accepts one argument: the `$data` array sent by the `signup`
    controller''s `index()` function when a user successfully submits the form in
    `views/signup/signup.php`. The `add()` function takes the array and using the
    `$this->db->insert()`CodeIgniter Active Record function, it inserts the user''s
    signup data in the `signups` table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit()`: This accepts one argument: the `$data` array sent by the `signup`
    controller''s `settings()` function. This function is called only if the user
    is editing their settings rather than unsubscribing. The `edit()` function will
    update a user''s profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete()`: This accepts one argument: the `$data` array sent by the `signup`
    controller''s `settings()` function. This function is called only if the user
    is unsubscribing rather than editing their settings. The function will return
    `true` if the delete was successful and `false` if not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_settings()`: This accepts one argument: the `$data` array sent by the
    `signup` controller''s `settings()` function. The settings form needs to be populated
    with the correct data for the required e-mail address, and `get_settings()` supplies
    this information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's a quick overview, so let's create the model and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/models/signup_model.php` file
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet adds a subscriber to the database using the `$this->db->insert()`
    CodeIgniter Active Record function. This function is called by the `signup` controller''s
    `index()` function. It accepts an array called `$data`; this array is the validated
    form input submitted by the user in the `views/signup/signup.php` form. On successfully
    writing to the database, it will return `true`; it will return `false` if an error
    occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet performs an update procedure on the `signups` database
    table using the `$this->db->update()` CodeIgniter Active Record function. It accepts
    an array called `$data`. This array is the validated form input submitted by the
    user in the `views/signup/settings.php` form. On a successful update, it will
    return `true`; it will return `false` if an error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet performs a delete procedure on the `signups` database
    table using the `$this->db->delete()` CodeIgniter Active Record function. It accepts
    an array called `$data`. This array is the validated form input submitted by the
    user in the `views/signup/settings.php` form and contains the subscribers'' e-mail
    addresses only. On a successful deletion, it will return `true`; it will return
    `false` if an error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet performs a select procedure on the `signups` database
    table using the `$this->db->get()` CodeIgniter Active Record function. It accepts
    a variable called `$email`. This is the formatted e-mail address of the subscriber.
    This function returns a subscriber''s database record. It is required by the `signup`
    controller''s `settings()` function in order to pre-populate form items. On a
    successful selection, it will return a database result object; it will return
    `false` if an error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the model is fairly straightforward and concise, so let's now
    take a look at the views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three views in this project, and these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signup/signup.php`: This displays a
    form to the user, allowing them to sign up their e-mail address to the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/signup/settings.php`: This displays
    a form to the user, allowing them to amend their preferences and also unsubscribe
    should they wish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/path/to/codeigniter/application/views/nav/top_nav.php`: This displays the
    top-level menu. In this project, this file is very simple, and as such it just
    contains a link to return to the `index()` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a good overview of the views. Now let''s go over each one, build the
    code, and discuss how they function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/signup/signup.php` file
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding HTML contains the form to enable a user to sign up to the application.
    The form also displays any validation errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/signup/settings.php` file
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding HTML contains the form to enable the subscriber to edit their
    settings or unsubscribe completely. The data for the form is fetched by the `get_settings()`
    function of `signup_model`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/views/nav/top_nav.php` file and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to create only one controller in this project, which is `/path/to/codeigniter/application/controllers/signup.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go over this controller now, look at the code, and discuss how it functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/controllers/signup.php` file and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This function creates a subscriber in the database, so the first thing we need
    to do is set the form validation rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form was submitted with errors, or if this is the first load instance
    of the function, then we will arrive at the following code. We define the following
    settings for the form elements in the `views/signup/signup.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if there were no errors with the validation, we will arrive at the
    following code. We package the data from the form elements into an array called
    `$data` and send it to the `add()` function of `signup_model`. This will perform
    the task of writing the subscriber to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function is responsible for updating a subscriber''s settings,
    or handling an unsubscribe request. Before it can do either of these things, it
    needs the users'' e-mail address. The e-mail address is supplied when a subscriber
    clicks on a link (such as an unsubscribe link in an e-mail):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If validation was unsuccessful, or the form is being accessed for the first
    time, then we arrive at the following code. The first thing we try to do is get
    the details of the subscriber so that we can display the correct settings in the
    form. We pass the third and fourth parameters of the `uri` segment to the `get_settings()`
    function of `signup_model`. We join them by writing the `@` symbol between the
    two `uri` segments, remembering that we cannot accept `@` symbols in the URL for
    security reasons. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `get_settings()` function of `signup_model` will look in the `signups` table
    and return a result object.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we test to see whether the number of records found is exactly `1`. Anything
    else and there''s a problem: either more than one record exists in the database
    belonging to the same e-mail address, or no e-mail address was found at all, in
    which case we redirect the users to the `index()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, if exactly one record was found, we then loop over the result object
    with a `foreach` loop and put the values that we will use to populate the form
    options into local variables: `$signup_opt1` and `$signup_opt2`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define the settings for our form elements, passing `$signup_email`,
    `$signup_opt1` and `$signup_opt2` as well as settings for the unsubscribe checkbox
    to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'These form element settings are then sent to the `views/signup/settings.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the form is submitted without errors, then we arrive at the following code.
    The first thing we do is work out whether the user has indicated that they wish
    to unsubscribe. This is done by looking for the value of the `signup_unsub` form
    checkbox. If this has been checked by the user, then there is no need to update
    their settings. Instead, we delete the user by calling the `delete()` function
    of `signup_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if they haven''t indicated that they want to unsubscribe by checking
    the form checkbox named `signup_unsub`, then we would want to update their details.
    We package up the values of the form inputs into an array called `$data` and make
    it ready to write to the database using the `edit()` function of `signup_model`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: So, that was the `signup` controller. As you saw, it's a small, concise script
    that I'm sure you will be able to amend and extend as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the language file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all the projects in this book, we're making use of the language file
    to serve text to users. This way, you can enable multiple region/multiple language
    support. Let's create the language file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/path/to/codeigniter/application/language/english/en_admin_lang.php`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, here are a few examples that will help put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: User subscribes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The sequence of events taking place when a user subscribes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits the application and CodeIgniter routes them to the `signup`
    controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function in the `signup` controller displays the `views/signup/signup.php`
    view file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user views the form in the browser, enters their e-mail address, and submits
    the form with no validation errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `index()` function packages the users' input into an array called `$data`
    and passes it to the `add()` function of `Signup_model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `add()` function performs an Active Record insert to write the users' subscription
    to the `signups` database table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User updates their settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following events take place when a user wants to update settings:'
  prefs: []
  type: TYPE_NORMAL
- en: The user clicks on a link in an e-mail they have been sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The URL routes them to the `signup` controller's `settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `settings()` function takes the third and fourth parameters of the URL,
    joins the third and fourth segments with an `@` character, and passes this "rebuilt"
    e-mail address to the `signup` controller's `get_settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_settings()` function looks in the database for a matching record, and
    if exactly one record is found, it returns it as a database result object to the
    `settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the `settings()` function has a matching record, it takes various items
    from the result object and assigns them to local variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are then used to prepopulate the form items in the `views/signup/settings.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user sees the form displayed with whichever settings the records are filled
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user wishes to check **Option 1** but leave **Option 2** unchecked. The
    user clicks on the checkbox of **Option 1**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user submits the form, the form is submitted to the `signup` controller's
    `settings()` function, and is validated successfully with no errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As there are no errors, the second part of the validation test (the rest) is
    run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The value of the form element `signup_unsub` is checked. As the user is not
    unsubscribing, this will not equal `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As `signup_unsub` does not equal `1`, the `edit()` function of `signup_model`
    is passed an array called `$data`. This `$data` array contains the contents of
    the posted form data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `edit()` function then performs a CodeIgniter Active Record update operation
    on the `$data` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User unsubscribes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a user wants to unsubscribe, the following events take place:'
  prefs: []
  type: TYPE_NORMAL
- en: The user clicks on a link in an e-mail they have been sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The URL routes them to the `signup` controller's `settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `settings()` function takes the third and fourth parameters of the URL,
    joins the third and fourth segments with an `@` character, and passes this "rebuilt"
    e-mail address to the `signup` controller's `get_settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `get_settings()` function looks in the database for a matching record, and
    if exactly one record is found, it returns it as a database result object to the
    `settings()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the `settings()` function has a matching record, it takes various items
    from the result object and assigns them to local variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are then used to pre-populate the form items in the `views/signup/settings.php`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user sees the form displayed with whichever settings the records are filled
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user wishes to unsubscribe from the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user checks Unsubscribe and submits the form. The form is submitted to the
    `signup` controller's `settings()` function and is validated successfully with
    no errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As there are no errors, the second part of the validation test (the rest) is
    run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The value of the form element `signup_unsub` is checked. This equals `1` as
    the user is unsubscribing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As `signup_unsub` equals `1`, the `delete()` function of `signup_model` is passed
    an array called `$data`. This `$data` array contains the subscribers' e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `delete()` function then performs a CodeIgniter Active Record delete operation
    on the `$data` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, you''ll have the foundations of a useful signup application.
    As always, there are a few things you can do to expand upon the functionality,
    which do are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add more options that a user might apply to their subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add HTML/plaintext settings (and only send them what they've asked for)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a signup sunset clause: allow someone to sign up for a certain time and
    once that time is arrived at, stop sending them newsletters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
