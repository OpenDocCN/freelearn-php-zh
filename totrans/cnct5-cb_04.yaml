- en: Chapter 4. Using the Core Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading a helper class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Date helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Encryption helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading an RSS feed with the Feed helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing files and directories with the File helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom forms with the Form helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a WYSIWYG editor on a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating HTML code with the HTML helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating and caching thumbnails with the Image helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding and decoding JSON with the JSON helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mails with the Mail helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the MIME type of a file extension using the MIME helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting page URLs and breadcrumbs with the Navigation helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with strings using the Text helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating URLs with the URL helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating input data using the Validation helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing spam using the Captcha helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of countries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of states and provinces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a color picker on a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a date/time selector on a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a rating widget on a form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the banned words list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing to the system cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to the debug log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing to the configuration registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the course of developing custom applications within the concrete5 content
    management system, you will likely find yourself having to perform certain tasks
    multiple times. Tasks such as creating custom forms, sending e-mails, or parsing
    RSS feeds can all be sped up by utilizing the Core helper classes included with
    concrete5.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of helpers in concrete5 might be familiar to developers who have
    previously worked with other popular MVC frameworks. Helpers are classes that
    provide miscellaneous, repeatable functionalities that can be used anywhere in
    your code. We will begin by showing how to load a helper class.
  prefs: []
  type: TYPE_NORMAL
- en: A note about the code in this chapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we've done in a few prior chapters, we will be making use of the `/config/site_post.php`
    file to run some arbitrary code. concrete5 doesn't have a great place to try out
    the API, so we will use `site_post` as our playground. Be sure to empty any experimental
    code before starting a new recipe, and perform all of these lessons on a development
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue using the custom debugging function that we created in [Chapter
    1](ch01.html "Chapter 1. Pages and Page Types"), *Pages and Page Types*. Place
    the following function at the top of `site_post.php` if you''d like to follow
    along too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you're more than welcome to substitute our custom debugger with whatever
    you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a helper class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Loader` class in concrete5 is useful for loading many different types of
    files in concrete5\. We will use the `Loader` class to include and instantiate
    the Form helper.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you know the "handle" of the helper that you wish to load. The handle
    is the name of the file that contains the helper class without the `.php` extension.
    As we want to load the Form helper, which exists at `/concrete/helpers/form.php`,
    the handle will be `form`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the helper using the handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s double-check that the helper was loaded correctly by dumping the contents
    of the `$formHelper` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Loader` class includes PHP scripts, making it available for use. Also,
    when loading helpers, the included file will also be instantiated and returned,
    making it immediately available to use in your code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to load a helper that is included in an add-on package, simply
    provide the package handle as a second parameter when loading the helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using the Date helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of date-related tasks that are simplified with the Date helper.
    We will look at a couple of ways to use the Date helper to assist in handling
    dates in your custom code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will explore a couple of the functions of the Date helper.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the Date helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the user''s time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the system time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get an array of timezones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output each of these values to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 wraps functions from both PHP and the Zend framework to create single-line
    tasks that would normally take several lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Encryption helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 makes it easy for developers to encrypt and decrypt strings using
    the included Encryption helper. In this recipe, we will use the Encryption helper
    to encrypt and decrypt some strings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The majority of web servers come built-in with it, but it is important to make
    sure your web server has `mcrypt` installed as it is required for this helper
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Encrypt a basic string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the encrypted string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decrypt the encrypted string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the decrypted string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Encryption helper wraps the `mcrypt` PHP extension, and encodes the encrypted
    text in a Base64 encoded string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading an RSS feed with the Feed helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 comes with a third-party library called `SimplePie` that assists with
    parsing RSS feeds. The Feed helper wraps around the `SimplePie` library to provide
    a more convenient way to load RSS feeds.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Feed helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the URL of the RSS feed to load. We will load the news feed from Packt
    Publishing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Dump the contents of the feed object to verify that it loaded correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `load` function simply creates a new instance of the `SimplePie` class and
    loads the feed specified in the parameter. The `load` function then returns a
    `SimplePie` object based on the feed that was loaded.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can learn more about `SimplePie` and how to use the feed objects by visiting
    [http://simplepie.org](http://simplepie.org).
  prefs: []
  type: TYPE_NORMAL
- en: Managing files and directories with the File helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with files and directories that exist on the web server can sometimes
    be a tedious task. The concrete5 File helper provides convenience methods to make
    working with files and directories a much simpler task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise will deal a lot with hypothetical files and filenames. This is
    meant more as an exploration of the File helper API, so feel free to substitute
    some of the filenames here for actual files that exist in your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the File helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sanitize a filename so that it is suitable for saving:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the extension of a filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the extension of a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a file''s contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Force a file to download to the user''s computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy a directory''s contents to another directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete all of the files in a directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The File helper makes use of many of the built-in functions of PHP, such as
    `file_get_contents`, `unlink`, and `copy`. The helper takes these functions several
    steps further by wrapping them with additional logic to make most of these operations
    only require a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some other functions that the File helper provides, which can be discovered
    by viewing the source code of the file in `concrete/core/helpers/file.php`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom forms with the Form helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating forms is one of the most common tasks that web developers are faced
    with on a regular basis. concrete5 provides the Form helper to make creating forms
    easy. In this recipe, we will create a feedback form using the Form helper.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code in this recipe will be inserted into a `<form>` element on our website.
    See the complete example code on the website for this book. Our form will contain
    the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name** (text input)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email Address** (text input)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reason for Contacting** (select box)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message** (textarea)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new single page by adding a new file located at `/single_pages/example_form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the single page by visiting `/dashboard/pages/single` on your concrete5
    website. Enter `example_form` as the path for the new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the Form helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the field for the **Name** input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the field for the **Email Address** input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an associative array containing the options that will appear in the
    **Reason for Contacting** select box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the **Reason for Contacting** select box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Show the **Message** textarea:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Form helper's functions return HTML that can be directly inserted into your
    forms on the website. If you provide an extra parameter to these functions, you
    can pre-fill the field's value with whatever you like (unless the value is present
    in the HTTP request parameters, which in that case concrete5 will fill the field
    with that value). There are many benefits to creating forms this way, and one
    can save a lot of time by following the simple conventions presented here.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many form elements that can be generated using the Form helper. Radio
    buttons, checkboxes, select elements, text inputs, and more. Refer to the Form
    helper class at `concrete/core/helpers/form.php` or visit the concrete5 developer's
    documentation at [http://www.concrete5.org/documentation/developers/forms/](http://www.concrete5.org/documentation/developers/forms/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a WYSIWYG editor on a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5, being a content management system, comes with built-in **What You
    See Is What You Get** (**WYSIWYG**) editors, specifically, a popular open source
    editor called **TinyMCE**. Developers can include this editor in their custom
    HTML forms. In this recipe, we will add a WYSIWYG editor to the form that we created
    in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be building upon the form that was created in the previous recipe. The
    free code download from this book's website will give you a good starting point
    if you need to catch up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/single_pages/example_form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the file, include the JavaScript element to initialize the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below that, include the default TinyMCE configuration element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Above the existing textarea output, load the element containing the editor''s
    controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the existing textarea output with a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/4548OS_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The modified TinyMCE editor that concrete5 uses requires a lot of JavaScript
    to be in place before it can be included on a web page. concrete5 elements contain
    repeatable blocks of HTML, (or CSS and JavaScript in the form of `<style>` and
    `<script>` tags). At the top of our form, we include the elements with the TinyMCE
    JavaScript and the configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: It's optional, but it's a good idea to include the editor's control elements
    right above the textarea that will become the WYSIWYG editor. These controls have
    concrete5-specific functions, such as inserting links to pages in the site map
    or including images from the file manager. Note that as these controls mainly
    provide functionality relevant to site editors, these controls are better suited
    for backend forms, rather than use by end users.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we output a regular textarea element, but with a class of `ccm-advanced-editor`,
    which tells TinyMCE to turn this into a WYSIWYG editor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating custom forms with the Form helper* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating HTML code with the HTML helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many situations, you will want to avoid writing HTML strings in your PHP
    server-side code, as it can really clutter your code and make it harder to read.
    The HTML helper in concrete5 can help you avoid that by providing a nice, object
    oriented way to generate HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that `/css/example.css`, `/js/example.js`, and `/images/icon.png`
    all exist on your site. You can perform this recipe without those files existing,
    concrete5 will simply output a path to those non-existent files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make the HTML helper available for use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output a CSS `<link>` tag, linking to a CSS file stored at `/css/example.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output a JavaScript `<script>` tag, setting the `src` attribute to a file that
    exists at `/js/example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output an image `<img>` tag, showing an image that is stored at `/images/icon.png`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will recursively look through several directories to find the appropriate
    files that you need. It will then wrap the source path in the appropriate tag,
    whether it is a script, a CSS link, or an image.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating and caching thumbnails with the Image helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many types of applications make use of thumbnails to display representations
    of larger images. This allows users to see many images on one page without having
    to wait for several large file sizes of images to load.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Image helper's thumbnail generator accepts a `File` object, so make sure
    to refer to [Chapter 3](ch03.html "Chapter 3. Files and File Sets"), *Files and
    File Sets*, to know how to get those loaded.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `/config/site_post.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the Image helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `File` object that we want to create a thumbnail of. This should be
    an image (JPEG, PNG, or GIF) and should exist in the File Manager. We will use
    the ID of `1` for our example image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a thumbnail with a height and width of 100 pixels, and crop the image
    to fit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Echo the thumbnail image''s source location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Image helper will take the `File` object (or file path string) and first
    check to see if a thumbnail of that size has already been created. If it has,
    it will serve that thumbnail from the cache. If the thumbnail does not exist,
    concrete5 will use the `gd` PHP extension to resize and crop the image (if the
    fourth parameter is specified and set to `true`) and then save the new copy to
    the cache.
  prefs: []
  type: TYPE_NORMAL
- en: The helper returns a standard class object that has a few properties, `src`,
    `height`, and `width`. In this example, we are interested in the `src` property.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can have the Image helper applications output a thumbnail already wrapped
    in an `<img>` tag by simply calling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a file by its ID* recipe in [Chapter 3](ch03.html "Chapter 3. Files
    and File Sets"), *Files and File Sets*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding and decoding JSON with the JSON helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most PHP installations include handy JSON functions such as `encode_json` and
    `decode_json`, which allows developers to easily generate JSON data to pass through
    to the user's browser. concrete5 includes the JSON helpers to allow you to encode
    and decode JSON even on systems that do not have those functions available. This
    is particularly useful if you are developing an add-on that will run on several
    different types of environments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the JSON helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an array that will be converted to a JSON string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Encode the array into a JSON string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decode the JSON string back to an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the native JSON functions are present, these helper functions will simply
    wrap around those. On environments where the JSON encode and decode functions
    are unavailable, concrete5 will use a third-party JSON library to facilitate the
    encoding and decoding of the JSON strings.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mails with the Mail helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to send e-mails from your web app can add a great layer of functionality
    to the end user. In this recipe, we will send an e-mail out with a simple subject
    and body.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Mail helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the e-mail address that we wish to send the e-mail to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the e-mail address that this e-mail is from (and who the recipient
    can reply to):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the subject line of the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the message body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Mail helper wraps around the `Zend_Mail` object, which is part of the Zend
    framework that concrete5 is built upon. The Mail helper will obey the concrete5
    installation's settings, to send mails either by using PHP's built-in mail function,
    or by using an external SMTP server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can send e-mails with templates, HTML text, and more with the Mail helper.
    Mail templates can be stored in the `/mail` directory of your concrete5 website.
    The following an example template that would exist at `/mail/test.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how in this template, we refer to a variable called `$name`. To pass
    that variable into the template, call the `addParameter` function of the Mail
    helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the template and apply extra parameters, call the `load` function just
    before sending. Remember that our template exists at `/mail/test.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the MIME type of a file extension using the MIME helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 can easily determine the **Multipurpose Internet Mail Extensions**
    (**MIME**) type of a file using the MIME helper.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the MIME helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the MIME type of a JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the MIME type is correct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MIME helper contains an array of several common MIME types and their related
    extensions. When you give the MIME helper an extension to find, it will simply
    find the related MIME type and return it to you.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MIME helper can also return the file extension of a given MIME type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting page URLs and breadcrumbs with the Navigation helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Navigation helper can assist with two very important functions: getting
    accurate page URLs and generating a breadcrumb trail for a given `Page` object.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to load a `Page` object and pass it to the Navigation helper, so
    make sure you are familiar with that.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Navigation helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `Page` object that we are going to work with. In this example, we
    will use a page located at `example.com/about-us`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the URL for the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get an array of breadcrumb items (as `Page` objects) for the given page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Navigation helper checks your configuration settings and appends any base
    URLs or rewriting logic to the page's collection path. For breadcrumbs, the helper
    recursively travels up the sitemap from the given page to find all of the parent
    pages above it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting a Page object by its path* recipe in [Chapter 1](ch01.html "Chapter 1. Pages
    and Page Types"), *Pages and Page Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with strings using the Text helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another useful helper that concrete5 provides is the Text helper. The Text helper
    lets you perform several common (and sometimes complex) operations on strings
    with very little code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Text helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a string to use for the example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'CamelCase a string (CamelCase):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Un-CamelCase that string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a URL-friendly string with hyphens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an underscored handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all non-alphanumeric characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Text helper wraps around several built-in PHP functions, as well as some
    third-party libraries to provide convenient, one-line functions that allow you
    to modify your text quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Text helper has a few other useful functions that are beyond the scope of
    this recipe, such as automatically creating links out of any URLs in a string
    or even automatically linking to Twitter handles. It is recommended that developers
    explore the source code of the Text helper to see some of the more niche functionality
    that it provides.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating URLs with the URL helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The URL helper can generate URLs using some simple functions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the URL helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an array that contains the URL parameters that we want to pass in. We
    will just make some stuff up for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the URL to see the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function makes use of PHP's `http_build_query` function that can generate
    valid URLs when given an array of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The URL helper also has a function to create a shortened URL using the TinyURL
    service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating input data using the Validation helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building an application that accepts user data, it is definitely a good
    idea to make sure that users are filling out all of the required fields on a form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider a comment form that has the following fields: Name, Email, Website,
    and Comment content. The name, e-mail, and content fields are required, but the
    website field is optional. We will use the Validation helper to determine if the
    user filled out all of the required fields.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Validation helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s create an array to simulate the data that would be contained in the
    `POST` request (via the `$_POST` super global). We will intentionally leave `email`
    blank to see how the Validation helper behaves when a test fails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the array to the Validation helper so that it knows what to validate against:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the fields that are required, with error messages for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the array to see if it passes the requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Validation helper is pretty basic in terms of functionality, it essentially
    checks for the presence of a given variable in the data array, and makes sure
    that it has some sort of value. Notice the use of `addRequiredEmail` in step 4\.
    This function makes sure the e-mail address is present and also verifies that
    it is a proper e-mail address (not just any string).
  prefs: []
  type: TYPE_NORMAL
- en: The `getError` function on the Validation helper returns a `ValidationErrorHelper`
    object that has a function called `getList` that can provide an easy-to-use array
    of error messages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to testing for regular strings and e-mails, you can also test for
    integer values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing spam using the Captcha helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As most web developers who have ever published a form online know, spam is an
    annoying and potentially damaging issue for site owners. concrete5 can help mitigate
    this problem with a built-in Captcha helper that can verify that form submissions
    are coming from humans, rather than automated scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will explain how to use the Captcha helper. Typically, you will
    use this helper in the HTML views that your end-user would see (single page views,
    block views, and so on). An example of this helper in the context of a single
    page is included in the book's code download.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the Captcha helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of your form, display the CAPTCHA image and the input to allow
    the user to solve it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the server-side code that processes the form submission, verify that the
    CAPTCHA was solved correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Captcha helper takes advantage of a third-party library called `SecureImage`
    to generate the CAPTCHA images and related logic. If the user types the word in
    the image correctly, the `check` function will return `true`, and you can continue
    processing the form submission.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of countries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, web developers find themselves needing to provide a list of countries
    to users. Rather than hunt down this data or even manually assemble the data,
    concrete5 provides a helper to generate a list of all of the countries of the
    world. In this recipe, we will take the country list and create a `<select>` element
    that can be placed in a form, allowing users to select a country.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a single page at `/single_pages/example_form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the single page by visiting `/dashboard/pages/single` and typing `example_form`
    in the path input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `/single_pages/example_form.php` in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the file, load the country list helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the array of the available countries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the Form helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML form that contains a select element with all of the countries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 takes the heavy lifting of assembling and maintaining a list of countries
    and builds it into the core list helper. The country's two-character code is provided
    as the array key, and the full name string as the value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom forms with the Form helper* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a list of states and provinces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to providing lists of countries, concrete5 can also provide lists
    of states, provinces, and counties, for the countries in which such a list is
    applicable.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will get a list of all of the counties of the United Kingdom
    and present them in a `<select>` input.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If it doesn't exist, create a single page at `/single_pages/example_form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the List helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the list of counties in the UK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the Form helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML form that has a `<select>` element containing the list of counties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The state/province List helper works much like the Country helper, in that the
    concrete5 team has assembled a list of states/counties/provinces for various counties
    that can be accessed by providing the two-character code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to get all of the states and provinces stored in the helper, you
    can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The c*Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom forms with the Form helper* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a color picker on a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 provides helpers to generate standard HTML form elements, but what
    about applications that need to allow users to pick a color? For those applications,
    concrete5 includes a color picker helper as well!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The color picker relies on jQuery UI, which isn't automatically included in
    concrete5, unless you are logged in as an administrator. Be sure to include jQuery
    UI's JavaScript and CSS files on the page if you use the color picker on the frontend
    of the site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If it doesn't already exist, create a single page at `/single_pages/example_form.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install this single page on the dashboard if need be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the color picker helper at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the color picker widget in an HTML form element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 will generate the HTML and JavaScript necessary to provide an interactive
    color picker widget. The first parameter passed to the `output` function is the
    name of the field, which is how the value will be accessed once the form is submitted.
    The second parameter is the text that will appear in a `<label>` element next
    to the color picker.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a date/time selector on a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very common user experience when using web apps that require date inputs is
    to have the users choose the date on an interactive calendar, rather than typing
    the full date. concrete5 provides a helper to generate such widgets with ease.
    In this recipe, we will generate a date picker that will show a mini-calendar
    to allow users to choose a date.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 only automatically includes the JavaScript files for jQuery UI when
    users are logged in as administrators. If you wish to use the date picker in areas
    of the site where non-administrators can use it, be sure to include the jQuery
    UI JavaScript and CSS files in the page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a single page at `/single_pages/example_form.php` if it doesn't already
    exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to install the single page on the dashboard by visiting `/dashboard/pages/single`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the date/time helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the date picker into an HTML form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 makes use of the jQuery UI library to generate the JavaScript and
    CSS necessary to create an interactive date picker. The date/time helper generates
    all of the necessary boilerplate HTML and JavaScript, which makes using date pickers
    a very simple process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes developers will need to provide users with an interface to also select
    a time to go along with the date. This is simply a matter of calling a different
    function on the date/time helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a rating widget on a form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications provide a set of star icons for users to click on, providing
    a "rating" of a given item. It is simple to include these types of UI components
    in concrete5 applications using the Rating helper.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a single page at `/single_pages/example_form.php` if it does not exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the single page by visiting `/dashboard/pages/single` and entering `example_form`
    as the page location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the Rating form helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Output the rating widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Rating helper makes use of a third-party jQuery plugin to provide an interactive
    rating chooser. The helper will take care of generating all HTML and JavaScript
    required to use this widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output function requires two parameters: the name of the input and the
    initial value (an integer that is either 20, 40, 60, 80, or 100).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''d like to just simply provide a read-only way to display a rating,
    the Rating helper can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Simply call the `outputDisplay` method and provide a value between 0 and 100.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the banned words list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: concrete5 comes bundled with a list of profane and inappropriate English words
    that site owners can use to remove inappropriate content from their website. In
    this example, we will check a word to see if it is in the banned words list.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the banned words helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check a word to see if it is in the banned words list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the word is in the banned words list, then `$isBanned` will be equal to
    `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 checks the list of banned words (stored at `/concrete/config/banned_words.txt`)
    to see if it contains the word provided in the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Site owners can customize and edit the banned words list by copying it to `/config/banned_words.txt`
    and adding or removing entries there.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading and writing to the system cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsible developers will take extra steps to make sure their application
    is optimized for maximum performance. concrete5 has a built-in cache API that
    developers can hook into to cache their own custom data and improve performance,
    especially on large database lookups.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will load a large amount of rows from the database (something that can impact
    performance in a negative way), and then store the resulting array in the cache
    to prevent future, resource-heavy data calls. This recipe will load from a hypothetical
    table called `Customers` that contains thousands of rows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load a large set of records from the database that will tax the server''s resources.
    We will use a hypothetical table called `Customers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store the results in the system cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the results from the cache, preventing another intense database query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5's cache library is a custom implementation of the `Zend_Cache` library,
    which comes with the Zend framework, upon which concrete5 is built. Calling the
    `set` function, you will specify the type of item that you are saving (in this
    case, we call it `customerList`), and an ID of the item we are saving (this is
    useful if you are saving several different objects of the same type—in this case
    we are not, so we just set this variable to `false`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can delete an item that you have saved in the cache by sending in the type
    and the ID of the item that was stored. To delete our preceding customer list,
    you would write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also flush the entire cache, removing all of the items that are stored
    inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Loading a helper class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading the database object* recipe in [Chapter 5](ch05.html "Chapter 5. Working
    with Databases and Models"), *Working with Databases and Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Retrieving data from the database* recipe in [Chapter 5](ch05.html "Chapter 5. Working
    with Databases and Models"), *Working with Databases and Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to the debug log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is a common practice in application development, but sometimes you might
    want to separate errors in your concrete5 app from errors that are specific to
    PHP or Apache. For this, you can write to concrete5's internal log that can be
    viewed from the dashboard by site administrators. In this recipe, we will simply
    write a couple of basic strings to the site's internal log.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Come up with the message string that you would like to write to the log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the message to the log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reading and writing to the configuration registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storing key and value pairs in data dictionaries is a common task in any modern
    programming language. concrete5 allows you to store configuration settings using
    the `Config` class, rather than storing key/value settings in the database or
    elsewhere. In this recipe, we will write a configuration preference that signifies
    if the site administrator wants to allow comments on the site or not.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Write the preference to the system configuration dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the value of the preference item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: concrete5 stores the key and value pairs in the `Config` table of the database.
    The `Config` class presents a clean and simple API to make writing and reading
    configuration values as easy as possible. These configuration keys persist throughout
    concrete5, so developers should take extra caution to prevent clashes with other
    configuration values of the same name. It's a good idea to prefix configuration
    keys with something unique to your own code, such as `cookbook_allow_comments`,
    in this case.
  prefs: []
  type: TYPE_NORMAL
