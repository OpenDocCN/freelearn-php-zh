- en: '[*Chapter 6*](B17606_06_Final_PD_ePub.xhtml#_idTextAnchor116): Configuring
    the Theme Settings'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 6 章*](B17606_06_Final_PD_ePub.xhtml#_idTextAnchor116)：配置主题设置'
- en: In previous chapters, we have been learning about Shopify as a platform, familiarizing
    ourselves with Liquid basics, and using the Liquid core to create various features
    on the storefront. However, unless the store owners are developers, they will
    not have much control over any features we create for them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们一直在学习 Shopify 作为平台，熟悉 Liquid 基础知识，并使用 Liquid 核心来创建店面上的各种功能。然而，除非店主是开发者，否则他们对我们为他们创建的任何功能将不会有太多控制权。
- en: 'In this chapter, we will be learning how we can use JSON to create settings
    that are accessible through the theme editor, which will allow the store owners
    to easily customize the theme without making the code adjustments throughout the
    theme. We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 JSON 创建通过主题编辑器可访问的设置，这将允许店主轻松地定制主题，而无需在整个主题中进行代码调整。本章将涵盖以下主题：
- en: Exploring JSON settings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 JSON 设置
- en: Learning about the input setting attributes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解输入设置属性
- en: Basic and specialized input types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本和特殊输入类型
- en: Organizing the theme editor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织主题编辑器
- en: Glancing at the deprecated settings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已弃用的设置
- en: By the time we complete this chapter, we will have gained a deeper understanding
    of the importance of JSON, and how we can use it to create theme settings that
    are accessible across the entire theme on any page. We can use these settings
    to modify the CSS values, change the content on certain features, and even use
    the settings to enable or disable a particular feature altogether. By learning
    how to use JSON to create these settings, we will take another step toward creating
    a genuinely dynamic and customizable feature storefront, which is what Shopify
    is.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到我们完成这一章的时候，我们将对 JSON 的重要性有更深入的理解，以及我们如何使用它来创建在整个主题的任何页面上都可访问的主题设置。我们可以使用这些设置来修改
    CSS 值，更改某些功能的内容，甚至可以使用这些设置来完全启用或禁用某个特定功能。通过学习如何使用 JSON 来创建这些设置，我们将朝着创建一个真正动态和可定制的功能店面迈出另一步，这正是
    Shopify 所追求的。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: While we will explain each topic and have it presented with the accompanying
    graphics, we will need an internet connection to follow the steps outlined in
    this chapter, considering that Shopify is a hosted service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将解释每个主题并配合相关图形进行展示，但考虑到 Shopify 是一个托管服务，我们需要互联网连接来遵循本章中概述的步骤。
- en: The code for this chapter is available on GitHub at [https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter06](https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter06).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在 GitHub 上找到：[https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter06](https://github.com/PacktPublishing/Shopify-Theme-Customization-with-Liquid/tree/main/Chapter06)。
- en: 'The Code in Action video for the chapter can be found here: [https://bit.ly/3nLQgMf](https://bit.ly/3nLQgMf)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的“代码实战”视频可在此找到：[https://bit.ly/3nLQgMf](https://bit.ly/3nLQgMf)
- en: Exploring JSON settings
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 JSON 设置
- en: 'In [*Chapter 1*](B17606_01_Final_PD_ePub.xhtml#_idTextAnchor015), *Getting
    Started with Shopify*, we briefly mentioned the `Config` directory, where we can
    define and manage the global JSON values across the entire theme. Let''s remind
    ourselves of the two essential `.json` files that we can find within this directory:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 1 章*](B17606_01_Final_PD_ePub.xhtml#_idTextAnchor015) *开始使用 Shopify* 中，我们简要提到了
    `Config` 目录，我们可以在其中定义和管理整个主题的全局 JSON 值。让我们回顾一下我们可以在这个目录中找到的两个基本和重要的 `.json` 文件：
- en: The `settings_schema.json` file allows us to create and manage the content inside
    the theme editor on our theme, which we can reference throughout the entire theme
    file.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings_schema.json` 文件允许我们在主题编辑器中创建和管理主题内的内容，我们可以在整个主题文件中引用这些内容。'
- en: The `settings_data.json` file, on the other hand, records all the options defined
    in our schema file and saves their values. We can consider this file as our theme
    database, which we can manage by updating the theme settings through the theme
    editor or by directly editing the values inside the `settings_data.json` file.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，`settings_data.json` 文件记录了我们方案文件中定义的所有选项及其值。我们可以将此文件视为我们的主题数据库，我们可以通过更新主题编辑器中的主题设置或直接编辑
    `settings_data.json` 文件内的值来管理它。
- en: 'We can group the global settings options into different categories for more
    straightforward navigation, which we can do using the `name` and `settings` attributes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将全局设置选项分组到不同的类别中，以便更直观地导航，这可以通过使用`name`和`settings`属性来完成：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, as with the `.json` files in the `Locales` directory mentioned
    in the previous chapter, the `settings_schema.json` file has a specific format
    that we must honor. Using the `name` attribute, we can set the name of the category
    and the `settings` attribute will contain the array of settings that the category
    will contain:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，与前面章节中提到的`Locales`目录中的`.json`文件一样，`settings_schema.json`文件有一个我们必须遵守的特定格式。使用`name`属性，我们可以设置类别的名称，而`settings`属性将包含该类别将包含的设置数组：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous example, we have included two types of color settings, one that
    will control the background color of our store and one that will be in charge
    of setting the border color we will use across our store. As we can see, we have
    enclosed each `settings` option within the curly brackets and separated it by
    commas. However, note that the last `settings` option inside the category does
    not have a comma.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们包含了两种类型的颜色设置，一种将控制我们商店的背景颜色，另一种将负责设置我们在整个商店中使用的边框颜色。正如我们所见，我们将每个`settings`选项都包含在大括号内，并用逗号分隔。然而，请注意，类别中最后一个`settings`选项后面没有逗号。
- en: 'Important note:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: Including a comma after the last attribute within the `settings` block, or including
    the comma after the last `settings` block in the category, will result in an error
    and we will not be able to save our work.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings`块中的最后一个属性后面包含逗号，或者在类别中最后一个`settings`块后面包含逗号，将导致错误，我们将无法保存我们的工作。
- en: 'Now that we have defined the global settings, we need to learn how to access
    them and recover their values. We can recover the value of any global input setting
    using the `settings` keyword and the input''s ID, whose value we are looking to
    recover, separated by a dot and encapsulated by double curly braces:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了全局设置，我们需要学习如何访问它们并恢复它们的值。我们可以使用`settings`关键字和输入的ID来恢复任何全局输入设置的值，这些值我们想要恢复，用点分隔并放在双大括号内：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have now had the chance to see how we can define input setting options and
    read their values, but where exactly are we rendering this option and how can
    we modify it?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有机会看到我们如何定义输入设置选项并读取它们的值，但我们究竟在哪里渲染这个选项以及如何修改它？
- en: 'We can access the theme editor by navigating to the **Online theme** section
    in the admin section and clicking on the **Customize** button on the theme we
    are looking to customize:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到管理区域的**在线主题**部分，然后点击我们想要定制的主题上的**自定义**按钮来访问主题编辑器：
- en: '![Figure 6.1 – Example of accessing the theme editor through the Online theme
    section'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 通过在线主题部分访问主题编辑器的示例'
- en: '](img/Figure_6.01_B17606.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.01_B17606.jpg)'
- en: Figure 6.1 – Example of accessing the theme editor through the Online theme
    section
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 通过在线主题部分访问主题编辑器的示例
- en: Note that changes made throughout the theme editor are theme-specific, so we
    should remember to click the **Customize** button on the theme we are looking
    to customize.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在整个主题编辑器中做出的更改都是针对特定主题的，因此我们应该记得点击我们想要定制的主题上的**自定义**按钮。
- en: 'Alternatively, we can access the theme editor through the code editor by clicking
    on the **Customize theme** button, located in the top-right corner:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过点击位于右上角的**自定义主题**按钮，通过代码编辑器访问主题编辑器：
- en: '![Figure 6.2 – Alternative way of accessing the theme editor through the code
    editor'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 通过代码编辑器访问主题编辑器的另一种方式'
- en: '](img/Figure_6.02_B17606.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.02_B17606.jpg)'
- en: Figure 6.2 – Alternative way of accessing the theme editor through the code
    editor
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 通过代码编辑器访问主题编辑器的另一种方式'
- en: 'Once inside the theme editor, we will see a list of category options within
    our sidebar. However, most of these options are a part of the sections and blocks
    that we will be learning more about in the following chapter. For now, we can
    access the global settings that we define throughout the `settings_schema.json`
    file by clicking on the **Theme settings** button located in the bottom-right
    corner:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入主题编辑器，我们将在侧边栏中看到一系列类别选项。然而，这些选项中的大多数都是我们将要在下一章中了解更多内容的章节和块的一部分。现在，我们可以通过点击位于右下角的**主题设置**按钮来访问我们在`settings_schema.json`文件中定义的全局设置：
- en: '![Figure 6.3 – Accessing the global settings inside the theme editor'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 在主题编辑器中访问全局设置'
- en: '](img/Figure_6.03_B17606.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 图6.3的示例'
- en: Figure 6.3 – Accessing the global settings inside the theme editor
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 在主题编辑器中访问全局设置
- en: Inside `settings_schema.json` file, where each input set contains a set of attributes.
    While some of them are required, others are optional. Let's learn more about them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings_schema.json`文件中，每个输入集包含一组属性。虽然其中一些是必需的，但其他的是可选的。让我们更深入地了解它们。
- en: Learning about the input setting attributes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解输入设置属性
- en: 'Each input settings option can contain the following five attributes, which
    are also called standard attributes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个输入设置选项可以包含以下五个属性，也称为标准属性：
- en: As its name indicates, the `type` attribute allows us to set the type of the
    input setting, which can be either a basic type or a specialized type. The `type`
    attribute is mandatory.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如其名称所示，`type`属性允许我们设置输入设置的类型，可以是基本类型或专用类型。`type`属性是强制的。
- en: The `id` attribute is another mandatory attribute that we will use later to
    access and read the setting value.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`属性是另一个我们将要使用的强制属性，用于访问和读取设置值。'
- en: The `label` attribute allows us to set the label of the input settings inside
    the theme editor. The `label` attribute is mandatory.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`属性允许我们在主题编辑器中设置输入设置的标签。`label`属性是强制的。'
- en: The `default` value serves as a failsafe and allows us to set a default option
    for the input settings. However, it is not mandatory.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`值作为安全措施，允许我们为输入设置设置默认选项。然而，它不是强制的。'
- en: The final attribute, `info`, allows us to include an additional clarification
    regarding the input settings and is also not mandatory.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个属性，`info`，允许我们包含有关输入设置的额外说明，并且也不是强制的。
- en: While most of the input settings will contain only the previously mentioned
    attributes, depending on the input type, there will be cases where we will need
    to include some additional attributes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数输入设置将只包含之前提到的属性，但根据输入类型，我们可能需要包含一些额外的属性。
- en: We have previously mentioned that the type attributes allow us to choose between
    two different types of input settings, basic and specialized, but what exactly
    are they?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，类型属性允许我们在两种不同的输入设置类型之间进行选择，基本和专用，但它们究竟是什么呢？
- en: Basic input types
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本输入类型
- en: 'The basic input type is a set of options that allow us to include various types
    of input settings within our theme editor. Under the basic category, we can use
    the following options:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基本输入类型是一组选项，允许我们在主题编辑器中包含各种类型的输入设置。在基本类别下，我们可以使用以下选项：
- en: '`checkbox`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkbox`'
- en: '`number`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`'
- en: '`radio`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radio`'
- en: '`range`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`range`'
- en: '`select`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`'
- en: '`text`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`'
- en: '`textarea`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textarea`'
- en: As we have mentioned previously, most of the input settings will contain only
    the standard attributes. However, some of the specialized inputs and even basic
    inputs will require additional attributes. Let's now look into each input type,
    learn how to use it, and what type of results we can expect.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，大多数输入设置将只包含标准属性。然而，一些专用输入甚至基本输入将需要额外的属性。现在让我们查看每种输入类型，学习如何使用它，以及我们可以期待什么类型的成果。
- en: The checkbox input
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复选框输入
- en: 'The `checkbox` type of input, as its name suggests, is a Boolean type of field
    that allows us to create a checkbox option within the theme editor:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`checkbox`类型的输入是一个布尔类型的字段，允许我们在主题编辑器中创建复选框选项：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can see, the `checkbox` input contains three mandatory and one optional
    attribute whose value we have set to `true`. Otherwise, if we were to remove the
    `default` attribute, the default state of the checkbox will be `false`. The following
    screenshot shows us an example of the checkbox input type:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，`checkbox`输入包含三个强制属性和一个可选属性，我们将它们的值设置为`true`。否则，如果我们移除`default`属性，复选框的默认状态将是`false`。以下截图展示了复选框输入类型的示例：
- en: '![Figure 6.4 – Example of the checkbox basic input type'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 复选框基本输入类型的示例'
- en: '](img/Figure_6.04_B17606.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 复选框基本输入类型的示例'
- en: Figure 6.4 – Example of the checkbox basic input type
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 复选框基本输入类型的示例
- en: 'We can use the Boolean input type to toggle features on and off, which we can
    achieve by taking the checkbox input value and checking its current state using
    an `if` statement:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用布尔输入类型来切换功能的开和关，这可以通过获取复选框输入值并使用`if`语句检查其当前状态来实现：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By checking whether the `checkbox` input value is equal to `true`, we have
    created a simple feature that will enable or disable a certain feature from the
    store easily, as the code block inside the statement will only render if the statement
    is `true`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查`checkbox`输入值是否等于`true`，我们创建了一个简单的功能，可以轻松启用或禁用商店中的某个功能，因为语句内部的代码块仅在语句为`true`时渲染：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we can achieve the same results by comparing the checkbox input value
    against the `blank` variable.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以通过将复选框输入值与`blank`变量进行比较来实现相同的结果。
- en: The number input
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字输入
- en: 'The `number` type of input is the newest addition from Shopify and, as its
    name suggests, it is a number type of field, which allows us to create a number
    selector input inside the theme editor. In addition to the standard attributes,
    we can also use an optional `placeholder` attribute, which allows us to include
    a placeholder value for the text input:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`number`类型的输入是Shopify的最新添加，正如其名称所暗示的，它是一个数字类型的字段，允许我们在主题编辑器内部创建一个数字选择器输入。除了标准属性外，我们还可以使用可选的`placeholder`属性，这允许我们在文本输入中包含一个占位符值：'
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that the `number` type of input can only contain a number value. In the
    following screenshot, we can see an example of the `number` input type:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`number`类型的输入只能包含一个数值。在以下屏幕截图中，我们可以看到一个`number`输入类型的示例：
- en: '![Figure 6.5 – Example of the number basic input type'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 基本数字输入类型的示例'
- en: '](img/Figure_6.05_B17606.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.05_B17606.jpg)'
- en: Figure 6.5 – Example of the number basic input type
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 基本数字输入类型的示例
- en: 'Once we have the number input defined, we can access it by pairing the `settings`
    keyword and the ID of the text input:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了数字输入，我们可以通过将`settings`关键字与文本输入的ID配对来访问它：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `number` input value will always return a number value, unless it is empty,
    in which case it will return an `EmptyDrop` value. We can remind ourselves of
    `EmptyDrop` by revisiting [*Chapter 2*](B17606_02_Final_PD_ePub.xhtml#_idTextAnchor030),
    *The Basic Flow of Liquid*, and checking the *EmptyDrop* subsection inside the
    *Understand the types of data* section.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`number`输入值将始终返回一个数值，除非它是空的，在这种情况下，它将返回一个`EmptyDrop`值。我们可以通过重新阅读[*第2章*](B17606_02_Final_PD_ePub.xhtml#_idTextAnchor030)，*液体的基本流程*，并检查*理解数据类型*部分中的*EmptyDrop*子部分来提醒自己`EmptyDrop`。'
- en: The radio input
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单选输入
- en: Using the `radio` input type, we can output a `radio` option field, which allows
    us to have a multi-option selection. The `radio` input uses standard attributes
    with the addition of the `options` attribute, which is mandatory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`radio`输入类型，我们可以输出一个`radio`选项字段，这允许我们进行多选项选择。`radio`输入使用标准属性，并增加了必需的`options`属性。
- en: 'The `options` attribute accepts an array of `value` and `label` attributes,
    which are mandatory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`属性接受一个包含`value`和`label`属性的数组，这些属性是必需的：'
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that we need to set the `default` attribute to one of the values previously
    defined inside the `options` array. Otherwise, if the `default` attribute is not
    defined, the first radio will be selected by default. Here is an example of the
    `radio` input type:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们需要将`default`属性设置为`options`数组内部之前定义的其中一个值。否则，如果未定义`default`属性，则默认选择第一个单选按钮。以下是一个`radio`输入类型的示例：
- en: '![Figure 6.6 – Example of the radio basic input type'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 基本单选输入类型的示例'
- en: '](img/Figure_6.06_B17606.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.06_B17606.jpg)'
- en: Figure 6.6 – Example of the radio basic input type
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 基本单选输入类型的示例
- en: 'Once we have the `radio` input defined, we can access it by pairing the `settings`
    keyword and the ID of the radio input:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了`radio`输入，我们可以通过将`settings`关键字与单选输入的ID配对来访问它：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The radio button value will always return a string value.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮值将始终返回一个字符串值。
- en: The range input
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围输入
- en: 'With the `range` input type, we can create a range slider field. Compared to
    the previous inputs, the `range` input has four additional attributes and one
    change to the standard attributes. We can list the additional attributes in the
    following way:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`range`输入类型，我们可以创建一个范围滑块字段。与之前的输入相比，`range`输入有四个额外的属性和一个对标准属性的改变。我们可以以下这种方式列出额外的属性：
- en: The `min` attribute allows us to set the minimum value of the range input. The
    `min` value is mandatory.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min`属性允许我们设置范围输入的最小值。`min`值是必需的。'
- en: The `max` value is also a mandatory attribute that allows us to set the maximum
    value of the range input.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`值也是一个必需的属性，允许我们设置范围输入的最大值。'
- en: The `step` value allows us to set the increment value between the steps of the
    slider. The `step` slider is mandatory.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`值允许我们设置滑块步骤之间的增量值。`step`滑块是必需的。'
- en: The fourth and final additional attribute, `unit`, is an optional attribute,
    which allows us to set the visual unit, such as `px`, for the range slider value.
    Note that the `unit` attribute only accepts up to three characters and will output
    the px purely visually inside the theme editor. The actual value will return a
    number value without the unit.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个和最后一个额外属性`unit`是一个可选属性，它允许我们为范围滑块值设置视觉单位，例如`px`。请注意，`unit`属性只接受最多三个字符，并且将在主题编辑器中纯视觉地输出px。实际值将返回一个不带单位的数值。
- en: 'One additional change to the standard set of attributes is that the `default`
    attribute is now mandatory:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 标准属性集的一个额外变化是`default`属性现在是必需的：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the `min`, `max`, `step`, and `default` attributes are a number type
    of value. Including a string value in any of these attributes will result in an
    error.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`min`、`max`、`step`和`default`属性都是数值类型。在这些属性中包含字符串值将导致错误。
- en: When compared to the previous attributes, the `range` attribute comes with a
    few rules that we must follow. The first rule is that the `default` value must
    be a value between the `min` and `max` values. The second and more important rule
    is that each range slider can have a maximum of 100 steps, but what exactly does
    this mean?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的属性相比，`range`属性有一些我们必须遵守的规则。第一条规则是`default`值必须在`min`和`max`值之间。第二条且更为重要的规则是，每个范围滑块最多可以有100个步骤，但这究竟意味着什么呢？
- en: For example, in the previous example, we have set a `min` value of `120` and
    a `max` value of `220`. Since we have set the `step` value to `1`, we have precisely
    100 steps between the two values.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上面的例子中，我们设置了`min`值为`120`和`max`值为`220`。由于我们设置了`step`值为`1`，我们在两个值之间有精确的100个步骤。
- en: 'On the other hand, if we set the `max` value to `320`, we would also have to
    update the `unit` value to `2` to retain the 100 steps between the `min` and `max`
    value. In the following screenshot, we can see the example of a `range` input
    type:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们把`max`值设置为`320`，我们也必须更新`unit`值为`2`以保留`min`和`max`值之间的100个步骤。在下面的屏幕截图中，我们可以看到`range`输入类型的示例：
- en: '![Figure 6.7 – Example of the range basic input type'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 范围基本输入类型的示例](img/Figure_6.07_B17606.jpg)'
- en: '](img/Figure_6.07_B17606.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 范围基本输入类型的示例](img/Figure_6.07_B17606.jpg)'
- en: Figure 6.7 – Example of the range basic input type
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 范围基本输入类型的示例
- en: 'Once we have the `range` input defined, we can access it by pairing the `settings`
    keyword and the ID of the `range` input. However, remember that the `unit` attribute
    is purely visual. Since the `range` input returns a number value, we would need
    to include the `unit` value within the stylesheet manually:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了`range`输入，我们可以通过将`settings`关键字与`range`输入的ID配对来访问它。然而，请记住，`unit`属性完全是视觉上的。由于`range`输入返回一个数值，我们需要在样式表中手动包含`unit`值：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is one of the reasons why we should always include the `default` attribute
    when defining styling settings, or at least to wrap the entire CSS line within
    a statement that checks whether the value exists. Otherwise, we risk breaking
    the stylesheet if the value of the input is not defined.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应该始终在定义样式设置时包含`default`属性，或者至少将整个CSS行包裹在一个检查值是否存在的语句中的原因之一。否则，如果输入的值未定义，我们可能会破坏样式表。
- en: The select input
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择输入
- en: 'The `select` input type allows us to create a drop-down selector field. In
    addition to the standard set of attributes, the `select` input type has two additional
    attributes. We can list the additional attributes in the following way:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`输入类型允许我们创建一个下拉选择字段。除了标准属性集之外，`select`输入类型还有两个额外属性。我们可以以下列方式列出额外属性：'
- en: The `options` attribute, similar to the `range` input, allows us to create an
    array of `value` and `label` attributes to define the drop-down options. Both
    options and `value`/`label` inside the array are mandatory attributes.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`属性与`range`输入类似，允许我们创建一个包含`value`和`label`属性的数组来定义下拉选项。选项以及数组内的`value`和`label`都是必需属性。'
- en: The `group` attribute is an optional attribute that allows us to group different
    options inside the dropdown.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`属性是一个可选属性，它允许我们在下拉菜单中分组不同的选项。'
- en: 'Like the `radio` input type, if we do not define the `default` attribute, the
    first option is selected by default:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与`radio`输入类型一样，如果我们没有定义`default`属性，则默认选择第一个选项：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since the `select` input returns a string value, one of the most common uses
    is to include a custom font family within the theme, as we had the chance to see
    in the previous example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`select`输入返回一个字符串值，最常见的一种用途是在主题中包含一个自定义字体族，正如我们在前面的例子中看到的那样：
- en: '![Figure 6.8 – Example of the select basic input type'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – select基本输入类型的示例'
- en: '](img/Figure_6.08_B17606.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.08_B17606.jpg)'
- en: Figure 6.8 – Example of the select basic input type
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – select基本输入类型的示例
- en: 'Additionally, by using the `group` attribute, we have successfully grouped
    all options that belong to the same family:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过使用`group`属性，我们已经成功地将属于同一家族的所有选项分组：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Shopify also has an extensive font library that we can use and a specialized
    input that provides us with access to the mentioned library, which we will learn
    shortly. However, suppose we are looking to include a custom font that is not
    available within the Shopify font library. In that case, we will need to include
    it using a custom solution by including it through a `select` type dropdown.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Shopify还拥有一个广泛的字体库，我们可以使用，以及一个专门提供对我们提到的库的访问权限的输入，我们将在稍后学习。然而，如果我们想包含Shopify字体库中不可用的自定义字体，那么我们需要通过包含一个`select`类型下拉菜单来使用自定义解决方案来包含它。
- en: The text input
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本输入
- en: 'The `text` type of input, as its name suggests, is a string type of field that
    allows us to create a single-line text option within the theme editor. In addition
    to the standard attributes, we can also use a `placeholder` attribute, which allows
    us to include a placeholder value for the text input:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`text`类型的输入是一个字符串类型的字段，它允许我们在主题编辑器中创建一个单行文本选项。除了标准属性外，我们还可以使用`placeholder`属性，这允许我们为文本输入包含一个占位符值：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that the `text` type of input can only contain the string value and cannot
    include any HTML tags. In the following screenshot, we can see an example of the
    `text` input type:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`text`类型的输入只能包含字符串值，不能包含任何HTML标签。在下面的屏幕截图中，我们可以看到一个`text`输入类型的示例：
- en: '![Figure 6.9 – Example of the text basic input type'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – text基本输入类型的示例'
- en: '](img/Figure_6.09_B17606.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.09_B17606.jpg)'
- en: Figure 6.9 – Example of the text basic input type
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – text基本输入类型的示例
- en: 'Once we have the text input defined, we can access it by pairing the `settings`
    keyword and the ID of the text input:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了文本输入，我们可以通过将`settings`关键字和文本输入的ID配对来访问它：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `text` input value will always return a string value, unless it is empty,
    in which case it will return an `EmptyDrop` value.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`输入值始终返回一个字符串值，除非它是空的，在这种情况下，它将返回一个`EmptyDrop`值。'
- en: The textarea input
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textarea输入
- en: 'The `textarea` type of input works similarly to the text input, with the only
    difference being that `textarea` is a multi-line text field as compared to the
    `text` input, which is a single-line field. In addition to the standard attributes,
    we can also use a `placeholder` attribute to include a placeholder value for the
    `textarea` input:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输入类型`textarea`与文本输入类似，唯一的区别是`textarea`是一个多行文本字段，而`text`输入是一个单行字段。除了标准属性外，我们还可以使用`placeholder`属性来为`textarea`输入包含一个占位符值：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Similarly, as the `text` input value, the `textarea` input value will always
    return a string value, unless it is empty, in which case it will return an `EmptyDrop`
    value. We can see the example of the `textarea` input in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，与`text`输入值一样，`textarea`输入值始终返回一个字符串值，除非它是空的，在这种情况下，它将返回一个`EmptyDrop`值。我们可以在下面的屏幕截图中看到`textarea`输入的示例：
- en: '![Figure 6.10 – Example of the textarea basic input type'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10 – textarea基本输入类型的示例'
- en: '](img/Figure_6.10_B17606.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.10_B17606.jpg)'
- en: Figure 6.10 – Example of the textarea basic input type
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – textarea基本输入类型的示例
- en: With `textarea`, we have now covered all of the basic input settings, which
    has set us on a solid path to understanding and working with theme editor `.json`
    files. However, to truly be able to say that we have a working knowledge of `.json`
    files, we will also need to learn about the specialized input settings as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`textarea`，我们现在已经涵盖了所有基本输入设置，这使我们走上了理解和处理主题编辑器`.json`文件的坚实道路。然而，要真正可以说我们掌握了`.json`文件的工作知识，我们还需要学习有关专门输入设置的内容。
- en: Specialized input settings
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专门输入设置
- en: 'The specialized input type is a set of specialized options that don''t allow
    us to include various types of input settings within our theme editor but also
    provide us with access to various Liquid objects easily. Under the specialized
    input, we can use the following options:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 专业输入类型是一组专业选项，它不允许我们在主题编辑器中包含各种类型的输入设置，但同时也为我们提供了轻松访问各种Liquid对象的能力。在专业输入下，我们可以使用以下选项：
- en: '`richtext`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`richtext`'
- en: '`html`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`html`'
- en: '`linklist`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linklist`'
- en: '`liquid`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liquid`'
- en: '`color`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`'
- en: '`url`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`'
- en: '`video_url`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`video_url`'
- en: '`image_picker`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_picker`'
- en: '`font_picker`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font_picker`'
- en: '`article`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`article`'
- en: '`blog`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blog`'
- en: '`collection`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection`'
- en: '`page`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page`'
- en: '`product`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product`'
- en: Similar to the basic input types, most of the input settings will only contain
    the standard attributes. However, some of the inputs will require additional attributes.
    By learning about all the different types of specialized inputs, we will learn
    how to use them and what type of results we can expect, which will help create
    complex sections that we will learn about in the next chapter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与基本输入类型相似，大多数输入设置将只包含标准属性。然而，一些输入将需要额外的属性。通过了解所有不同类型的专业输入，我们将学习如何使用它们以及我们可以期待的结果类型，这将有助于创建我们在下一章中将要学习的复杂部分。
- en: The richtext input
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`richtext`输入'
- en: 'The `richtext` input type is similar to the basic `textarea` type of input
    as they both output a multi-line text field. The major difference is that `richtext`
    also provides us with some basic formatting options:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`richtext`输入类型类似于基本的`textarea`类型输入，因为它们都输出一个多行文本字段。主要的区别在于`richtext`还为我们提供了一些基本的格式化选项：'
- en: Bold
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粗体
- en: Italic
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 斜体
- en: Underline
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下划线
- en: Link
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ']'
- en: Paragraph
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 段落
- en: 'The second difference is that while `text` and `textarea` input values return
    a clean string, `richtext` will always return a string value formatted as a paragraph,
    encapsulated inside the HTML `<p></p>` tag. The following screenshot shows us
    an example of the `richtext` input:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个区别是，虽然`text`和`textarea`输入值返回一个干净的字符串，但`richtext`总是会返回一个格式化为段落并封装在HTML `<p></p>`标签内的字符串值。以下截图展示了`richtext`输入的一个示例：
- en: '![Figure 6.11 – Example of the richtext specialized input type'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11 – `richtext`专业输入类型的示例'
- en: '](img/Figure_6.11_B17606.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.11_B17606.jpg)'
- en: Figure 6.11 – Example of the richtext specialized input type
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – `richtext`专业输入类型的示例
- en: Additionally, using the formatting options that `richtext` provides will automatically
    update the string value with the respective HTML tags.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用`richtext`提供的格式化选项将自动更新字符串值与相应的HTML标签。
- en: 'Important note:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: Using the formatting options will automatically apply the necessary HTML tags
    to the `richtext` string value. However, we cannot manually include any HTML tags
    within the theme editor's `richtext` field.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用格式化选项将自动将必要的HTML标签应用到`richtext`字符串值上。然而，我们无法在主题编辑器的`richtext`字段中手动包含任何HTML标签。
- en: 'While the `default` attribute is not mandatory, if we decide to use it, we
    will have to include the `<p></p>` tags inside the `default` attribute value.
    Otherwise, we will receive an error:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`default`属性不是强制的，如果我们决定使用它，我们必须在`default`属性值中包含`<p></p>`标签。否则，我们将收到错误：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that `richtext` does not accept any `placeholder` attributes compared to
    `textarea`, which accepts it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，与接受`placeholder`属性的`textarea`不同，`richtext`不接受任何`placeholder`属性。
- en: The html input
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`html`输入'
- en: 'The `html` input type is a multi-line text field that, as its name suggests,
    allows us to include HTML markup within the input field. In addition to the standard
    attributes, the `html` input type also accepts an optional `placeholder` attribute:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`html`输入类型是一个多行文本字段，正如其名称所暗示的，它允许我们在输入字段中包含HTML标记。除了标准属性外，`html`输入类型还接受一个可选的`placeholder`属性：'
- en: '[PRE18]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'While the `html` input will accept most of the HTML tags, Shopify will automatically
    remove the following three tags:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`html`输入将接受大多数HTML标签，但Shopify会自动移除以下三个标签：
- en: '`<html>`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<html>`'
- en: '`<head>`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<head>`'
- en: '`<body>`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<body>`'
- en: 'The `html` type input value will always return a string value or an `EmptyDrop`
    value if it is empty. We can see the example of the `html` input inside the following
    screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`html`类型输入值将始终返回一个字符串值，如果它是空的，则返回`EmptyDrop`值。我们可以在以下截图中的示例中看到`html`输入：'
- en: '![Figure 6.12 – Example of the html specialized input type'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.12 – `html`专业输入类型的示例'
- en: '](img/Figure_6.12_B17606.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.12_B17606.jpg)'
- en: Figure 6.12 – Example of the html specialized input type
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – `html`专业输入类型的示例
- en: Note that while we can include HTML code inside the `html` type input, we cannot
    include Liquid code inside the field as it will get processed as a simple string.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然我们可以在`html`类型输入中包含HTML代码，但我们不能在字段中包含Liquid代码，因为它将被处理为一个简单的字符串。
- en: The linklist input
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接列表输入
- en: 'Using the `link_list` input type, we can create a special menu picker type
    of field that allows us to output one of the store navigation menus. Note that
    we can only see the menus we have previously created inside the admin **Navigation**
    section, located under the **Online store** section:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`link_list`输入类型，我们可以创建一个特殊的菜单选择字段类型，允许我们输出一个商店导航菜单。请注意，我们只能在之前在**在线商店**部分下位于**导航**部分的**管理界面**中看到的菜单：
- en: '[PRE19]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note that while the `default` attribute is optional, it only accepts two specific
    values, `main-menu` and `footer`. Let''s see how the `linklist` input looks in
    the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然`default`属性是可选的，但它只接受两个特定的值，即`main-menu`和`footer`。让我们看看以下屏幕截图中`linklist`输入的外观：
- en: '![Figure 6.13 – Example of the linklist specialized input type'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13 – `linklist`专业输入类型的示例'
- en: '](img/Figure_6.13_B17606.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.13_B17606.jpg)'
- en: Figure 6.13 – Example of the linklist specialized input type
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – `linklist`专业输入类型的示例
- en: 'Using the settings and the ID to retrieve the `link_list` value will return
    a `linklist` object, which we can use to build the navigation menu. If we recall,
    in *Chapter 4*, *Diving into Liquid Core with Objects*, we have used the following
    code to output a navigation menu with a specific `indoor-navigation` handle:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用设置和ID检索`link_list`值将返回一个`linklist`对象，我们可以使用它来构建导航菜单。如果我们回想一下，在*第4章*，*使用对象深入Liquid核心*中，我们使用了以下代码来输出具有特定`indoor-navigation`句柄的导航菜单：
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And if we wanted to use different navigation, we would have to manually update
    the menu navigation handle. However, considering that we can now recover the `linklist`
    object directly from the theme editor, we can update the previously hardcoded
    `linklist` object value and replace it with a dynamic one:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用不同的导航，我们就必须手动更新菜单导航句柄。然而，考虑到我们现在可以直接从主题编辑器中恢复`linklist`对象，我们可以更新之前硬编码的`linklist`对象值，并用一个动态值替换它：
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that if the `link_list` type input does not have a `default` attribute
    or we have not yet selected the menu, we will receive a `blank` value as the return
    value.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果`link_list`类型输入没有`default`属性或我们尚未选择菜单，我们将收到一个`blank`值作为返回值。
- en: The liquid input
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 液体输入
- en: 'The `liquid` input type is also a recent addition from Shopify, and it allows
    us to include both HTML markup and limited Liquid code, which makes it a pretty
    powerful tool. Here is an example code for this input:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`liquid`输入类型也是Shopify最近添加的功能，它允许我们包含HTML标记和有限的Liquid代码，这使得它成为一个相当强大的工具。以下是该输入的示例代码：'
- en: '[PRE22]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that any unclosed HTML tag will automatically close when we save the settings.
    In the following screenshot, we can see an example of the `liquid` input type:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们保存设置时，任何未关闭的HTML标签都会自动关闭。在下面的屏幕截图中，我们可以看到一个`liquid`输入类型的示例：
- en: '![Figure 6.14 – Example of the liquid specialized input type'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14 – `liquid`专业输入类型的示例'
- en: '](img/Figure_6.14_B17606.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.14_B17606.jpg)'
- en: Figure 6.14 – Example of the liquid specialized input type
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – `liquid`专业输入类型的示例
- en: The `liquid` input type provides us with access to all global objects, page-based
    objects, and standard tags and filters.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`liquid`输入类型为我们提供了访问所有全局对象、基于页面的对象以及标准标签和过滤器的权限。'
- en: Note that the `liquid` type input value will always return a string value or
    an `EmptyDrop` value if empty.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果`liquid`类型输入值是空的，它将始终返回一个字符串值或`EmptyDrop`值。
- en: The color input
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色输入
- en: 'As its name suggests, the `color` input type allows us to create a color picker
    type input to update the store''s color palette easily:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`color`输入类型允许我们创建一个颜色选择器类型的输入，以便轻松更新商店的颜色调色板：
- en: '[PRE23]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can access the values of the `color` input type by combining the `settings`
    keyword and the ID of the input:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过组合`settings`关键字和输入的ID来访问`color`输入类型的值：
- en: '[PRE24]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Besides being able to enter the hex color manually inside the `color` field,
    we can trigger an actual color palette where we can select the desired color tone:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以在`color`字段中手动输入十六进制颜色外，我们还可以触发一个实际的调色板，在那里我们可以选择所需的颜色色调：
- en: '![Figure 6.15 – Example of the color specialized input type'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15 – `color`专业输入类型的示例'
- en: '](img/Figure_6.15_B17606.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.15_B17606.jpg)'
- en: Figure 6.15 – Example of the color specialized input type
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – `color`专业输入类型的示例
- en: Note that while the `default` attribute is optional, we should always either
    include the default value or wrap the entire CSS line within the statement to
    check whether the input value isn't empty. If we neglect to include either of
    the two, in the event that the `color` input value is not defined, we may end
    up with a broken stylesheet.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然 `default` 属性是可选的，但我们应始终包含默认值或在整个 CSS 行中包含整个语句，以检查输入值是否为空。如果我们忽略包含这两个中的任何一个，如果
    `color` 输入值未定义，我们可能会得到一个损坏的样式表。
- en: The url input
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: url 输入
- en: 'The `url` type input provides us with a special URL entry field where we can
    either manually enter the external URL or use a series of dropdowns to select
    the path to one of the following resources:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`url` 类型输入为我们提供了一个特殊的 URL 输入字段，我们可以手动输入外部 URL 或使用一系列下拉菜单来选择以下资源的路径：'
- en: Articles
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文章
- en: Blogs
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博客
- en: Collections
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合
- en: Pages
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面
- en: Products
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品
- en: Policies
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 政策
- en: 'We can also include a link to sites outside of our store by simply pasting
    the URL and consequently clicking on the link inside the drop-down menu confirming
    the selection:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过粘贴 URL 并随后点击下拉菜单中的链接来确认选择，从而在我们的商店之外包含对网站的链接：
- en: '![Figure 6.16 – Example of the url specialized input type'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.16 – `url` 专用输入类型的示例'
- en: '](img/Figure_6.16_B17606.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.16_B17606.jpg)'
- en: Figure 6.16 – Example of the url specialized input type
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – `url` 专用输入类型的示例
- en: 'Note that while the `default` attribute is optional, it only accepts two specific
    values – `/collections` and `/collections/all`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然 `default` 属性是可选的，但它只接受两个特定的值 – `/collections` 和 `/collections/all`：
- en: '[PRE25]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can access the value of the `url` input type by combining the `settings`
    keyword and the input''s ID, which we can then include as the `href` parameter
    to the HTML `<a>` tag:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过组合 `settings` 关键词和输入的 ID 来访问 `url` 输入类型的值，然后将其作为 HTML `<a>` 标签的 `href`
    参数包含：
- en: '[PRE26]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Considering that the HTML `<a>` tag is hardcoded, we cannot make any dynamic
    modifications to the tag using the `url` type input. However, we can introduce
    an additional input type, such as `checkbox`, which we can use to display or hide
    the `target="_blank"` attribute.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 HTML `<a>` 标签是硬编码的，我们无法使用 `url` 类型输入对其进行任何动态修改。然而，我们可以引入一个额外的输入类型，例如 `checkbox`，我们可以使用它来显示或隐藏
    `target="_blank"` 属性。
- en: Note that the `color` type input value will always return either a string value
    or nil if the value is not defined.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`color` 类型输入值将始终返回一个字符串值或 nil（如果未定义值）。
- en: The video_url input
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: video_url 输入
- en: 'The `video_url` type input provides us with a special URL entry field where
    we can manually enter the external URL of a video from either YouTube or Vimeo
    and extract their IDs for later use. In addition to the standard set of attributes,
    the `video_url` input type has two additional attributes. We can list the additional
    attributes in the following way:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`video_url` 类型输入为我们提供了一个特殊的 URL 输入字段，我们可以手动输入来自 YouTube 或 Vimeo 的视频的外部 URL
    并提取它们的 ID 以供以后使用。除了标准属性集之外，`video_url` 输入类型还有两个附加属性。我们可以以下列方式列出附加属性：'
- en: The `accept` attribute is a mandatory array type attribute where we can define
    the different types of providers whose video URL we will accept. Valid values
    are `youtube`, `vimeo`, or a combination of both.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept` 属性是一个必填的数组类型属性，我们可以定义我们将接受的不同类型的提供者的视频 URL。有效值是 `youtube`、`vimeo`
    或两者的组合。'
- en: The `placeholder` attribute is an optional type attribute that allows us to
    include a placeholder value for the `video_url` input.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`placeholder` 属性是一个可选的类型属性，它允许我们为 `video_url` 输入包含一个占位符值。'
- en: 'The following code shows the `video_url` type input with the preceding attributes:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了具有先前属性的 `video_url` 类型输入：
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After including the video URL to one of the two video platforms, we will see
    the video name and first frame, allowing us to confirm that we have the correct
    video URL:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在将视频 URL 包含到两个视频平台之一后，我们将看到视频名称和第一帧，这使我们能够确认我们拥有正确的视频 URL：
- en: '![Figure 6.17 – Example of the video_url specialized input type'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.17 – `video_url` 专用输入类型的示例'
- en: '](img/Figure_6.17_B17606.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.17_B17606.jpg)'
- en: Figure 6.17 – Example of the video_url specialized input type
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – `video_url` 专用输入类型的示例
- en: 'We can access the value of the `video_url` input type by combining the `settings`
    keyword and the input''s ID, which will return the URL that we have previously
    included in the theme editor:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过组合 `settings` 关键词和输入的 ID 来访问 `video_url` 输入类型的值，这将返回我们在主题编辑器中先前包含的 URL：
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Compared to the previous input types, which return a single value, `video_url`
    allows us to access two additional parts of the video URL:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前返回单个值的输入类型相比，`video_url` 允许我们访问视频 URL 的两个附加部分：
- en: The `id` attribute, which allows us to recover only the video ID
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 属性，它允许我们仅恢复视频 ID'
- en: 'The `type` attribute, which allows us to easily identify whether the video
    is from YouTube or Vimeo platforms:'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` 属性，它允许我们轻松识别视频是否来自 YouTube 或 Vimeo 平台：'
- en: '[PRE29]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Note that whether we are trying to return a complete URL or only its `type`/`id`,
    the returned value will always be a string type, unless the `video_url` value
    is not defined, in which case the returned value will be nil:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，无论我们尝试返回完整的 URL 还是仅返回其 `type`/`id`，返回的值始终是字符串类型，除非 `video_url` 值未定义，在这种情况下，返回的值将是
    nil：
- en: '[PRE30]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now that we have recovered the video information, all that is left is to include
    are the returned values inside the `iframe` embed for each respective platform.
    Note that we will need to include a separate `iframe` embed for each platform,
    which should not be a problem as we can easily identify which platform the video
    belongs to using the `type` attribute.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经恢复了视频信息，剩下要做的就是在每个相应平台的 `iframe` 嵌入中包含返回的值。注意，我们需要为每个平台包含一个单独的 `iframe`
    嵌入，这应该不成问题，因为我们可以使用 `type` 属性轻松识别视频属于哪个平台。
- en: Note that since `video_url` returns a string type URL, it is impossible to generate
    the necessary `iframe` embed using the media object we mentioned in one of the
    previous chapters.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于 `video_url` 返回字符串类型的 URL，因此不可能使用我们在前几章中提到的媒体对象生成必要的 `iframe` 嵌入。
- en: The image_picker input
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: image_picker 输入
- en: The `image_picker` input type, as its name suggests, allows us to create an
    image picker selector field. The image picker selector allows us to upload new
    images, select the photo from a series of free photos available on Shopify, or
    use any of the photos previously included inside the **Files** section on the
    **Shopify** admin.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，`image_picker` 输入类型允许我们创建一个图像选择器选择字段。图像选择器选择器允许我们上传新图像，从 Shopify 上提供的免费照片系列中选择照片，或使用
    **Shopify** 管理员中 **文件** 部分之前包含的任何照片。
- en: The `Files` section is home to all assets that we upload through admin or the
    theme editor, and we can find it inside `Files` section, we can also upload assets
    directly into the `Files` section using the **Upload files** button in the top-right
    corner. Additionally, we can easily recover the direct URL path to any asset and
    use it.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`文件` 部分是我们通过管理员或主题编辑器上传的所有资产的家园，我们可以在 `文件` 部分中找到它，我们还可以使用右上角的 **上传文件** 按钮直接将资产上传到
    `文件` 部分此外，我们可以轻松恢复任何资产的直接 URL 路径并使用它。'
- en: 'In the following block of code, we can see the example of how we can use the
    `image_picker` input:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们可以看到如何使用 `image_picker` 输入的示例：
- en: '[PRE31]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that the `image_picker` type input value will always return an image object
    value or nil if the value is not defined:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`image_picker` 类型输入值将始终返回一个图像对象值或 nil，如果值未定义：
- en: '![Figure 6.18 – Example of the image_picker specialized input type'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.18 – image_picker 专用输入类型的示例'
- en: '](img/Figure_6.18_B17606.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.18 – image_picker 专用输入类型的示例](img/Figure_6.18_B17606.jpg)'
- en: Figure 6.18 – Example of the image_picker specialized input type
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – image_picker 专用输入类型的示例
- en: 'Since `image_picker` returns an `image` object, we can use the `img_tag` or
    `img_url` filters to generate the necessary image tag dynamically:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `image_picker` 返回一个 `image` 对象，我们可以使用 `img_tag` 或 `img_url` 过滤器动态生成必要的图像标签：
- en: '[PRE32]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For a detailed reminder regarding the use of `img_tag` and `img_url` filters,
    we can revisit the *HTML and URL filters* section from [*Chapter 5*](B17606_05_Final_PD_ePub.xhtml#_idTextAnchor097),
    *Diving into Liquid Core with Filters*.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `img_tag` 和 `img_url` 过滤器的详细说明，我们可以回顾 *第 5 章* 的 *HTML 和 URL 过滤器* 部分，*深入 Liquid
    核心与过滤器*。
- en: The font_picker input
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: font_picker 输入
- en: 'While learning about the `select` input type, we have mentioned that Shopify
    provides us with access to an extensive font library. The `font_picker` type input
    allows us to create a font picker selector field that we can use to select any
    font inside the Shopify font library:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习 `select` 输入类型时，我们提到 Shopify 为我们提供了访问广泛字体库的权限。`font_picker` 类型输入允许我们创建一个字体选择器选择字段，我们可以用它来选择
    Shopify 字体库中的任何字体：
- en: '[PRE33]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'One additional change to the standard set of attributes is that the `default`
    attribute is now mandatory. We can find the possible font handle values for the
    `default` attribute at the following link, [https://shopify.dev/themes/architecture/settings/fonts#available-fonts](https://shopify.dev/themes/architecture/settings/fonts#available-fonts),
    by clicking on the `font_picker` type input:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 标准属性集的一个额外变化是，`default`属性现在是强制性的。我们可以在以下链接中找到`default`属性的可能的字体句柄值，[https://shopify.dev/themes/architecture/settings/fonts#available-fonts](https://shopify.dev/themes/architecture/settings/fonts#available-fonts)，通过点击`font_picker`类型输入：
- en: '![Figure 6.19 – Example of the font_picker specialized input type'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.19 – font_picker专业输入类型的示例'
- en: '](img/Figure_6.19_B17606.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.19_B17606.jpg)'
- en: Figure 6.19 – Example of the font_picker specialized input type
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – font_picker专业输入类型的示例
- en: Since the `default` value is mandatory, the `font_picker` value will always
    return a `font` object, allowing us to use the `font` filters and objects to manipulate
    the `font_picker` value to our needs.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`default`值是强制性的，`font_picker`值将始终返回一个`font`对象，允许我们使用`font`过滤器和对象来操纵`font_picker`值以满足我们的需求。
- en: 'Suppose we try to access the `font_picker` value using the regular approach,
    we would receive `FontDrop` as a result. To resolve this, we will include the
    `font_face` filter, which will generate the `@font-face` CSS:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们尝试使用常规方法访问`font_picker`值，我们会收到`FontDrop`作为结果。为了解决这个问题，我们将包括`font_face`过滤器，这将生成`@font-face`CSS：
- en: '[PRE34]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Declaring the `font_face` filter will automatically pull all the necessary
    information about the particular font and populate all the information inside
    `@font-face`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 声明`font_face`过滤器将自动获取特定字体的所有必要信息，并将所有信息填充到`@font-face`内部：
- en: '[PRE35]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With the `font_face` filter in place, we now have access to the selected font.
    However, with the current setup, we would have to hardcode the values to each
    `font-family`. So, let's learn how we can extract the `@font-face` attributes
    separately.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在`font_face`过滤器到位后，我们现在可以访问所选字体。然而，在当前设置中，我们可能需要为每个`font-family`硬编码值。所以，让我们学习如何单独提取`@font-face`属性。
- en: 'The first thing that we need to do is to create a variable to which we will
    save the `font_picker` object value, after which we need to call the variable
    with the `font_face` filter:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个变量，我们将把`font_picker`对象值保存在这个变量中，之后我们需要使用`font_face`过滤器调用这个变量：
- en: '[PRE36]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: With `font_face` declared, we now have easy access to `@font-face` from within
    the variable.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`font_face`声明后，我们现在可以轻松访问变量内的`@font-face`。'
- en: 'Let''s say now that we wanted to modify particular attributes, such as `font-weight`
    and `font-style`, for specific elements. To achieve this type of functionality,
    we can use the `font_modify` filter, which accepts two properties, namely, the
    `style` property, which allows us to modify `font-style`, and `weight`, which
    we can use to modify the `font-weight` attribute:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要修改特定属性，例如`font-weight`和`font-style`，对于特定元素。为了实现这种功能，我们可以使用`font_modify`过滤器，它接受两个属性，即`style`属性，允许我们修改`font-style`，以及`weight`，我们可以用它来修改`font-weight`属性：
- en: '[PRE37]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note that we now have three different variables containing three different types
    of `@font-face`. All that is left now is to extract the specific attributes that
    we need and assign them to style the content.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在有三个不同的变量，包含三种不同类型的`@font-face`。现在我们只剩下提取所需的特定属性并将它们分配给样式化内容。
- en: 'We can return the specific `@font-face` attribute values by using the `font`
    object''s `family`, `style`, and `weight` attributes:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`font`对象的`family`、`style`和`weight`属性来返回特定的`@font-face`属性值：
- en: '[PRE38]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We have now successfully learned how the `font_picker` input type works and,
    even more importantly, we have also learned how to use `font` objects and filters
    to output the `font_picker` values and make the font selection process entirely
    dynamic.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功学习了`font_picker`输入类型的工作原理，更重要的是，我们还学习了如何使用`font`对象和过滤器来输出`font_picker`值，并使字体选择过程完全动态。
- en: 'The only addition to the previous example that would make our code more functional
    is the inclusion of a fallback family if the selected font family cannot render
    for some reason. We can do this by introducing the `fallback_families` object,
    which will return a suggested fallback font family:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的代码更实用，我们可以在上一个示例中添加一个后备字体族，以防选定的字体族由于某种原因无法渲染。我们可以通过引入`fallback_families`对象来实现这一点，该对象将返回一个建议的后备字体族：
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: For additional information on all the available font filters, we can refer to
    [https://shopify.dev/api/liquid/filters/font-filters](https://shopify.dev/api/liquid/filters/font-filters),
    and, for information on all the font objects available, we can refer to [https://shopify.dev/api/liquid/objects/font](https://shopify.dev/api/liquid/objects/font).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 关于所有可用字体过滤器的更多信息，我们可以参考[https://shopify.dev/api/liquid/filters/font-filters](https://shopify.dev/api/liquid/filters/font-filters)，以及关于所有可用字体对象的更多信息，我们可以参考[https://shopify.dev/api/liquid/objects/font](https://shopify.dev/api/liquid/objects/font)。
- en: The article input
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文章输入
- en: 'The `article` type input provides us with a special article picker selector
    field. Through the article picker, we have access to all the available articles
    in the store:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`article`类型输入为我们提供了一个特殊的文章选择器选择字段。通过文章选择器，我们可以访问商店中所有可用的文章：'
- en: '[PRE40]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Until recently, the `article` input type would always return a string handle
    of the article, which then needed to be used to recover the `article` object.
    However, since the Shopify Unite 2021 event, the `article` and other page-related
    inputs now return an object, making our work a lot easier.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，`article`输入类型总是会返回文章的字符串handle，然后需要使用它来恢复`article`对象。然而，自Shopify Unite
    2021活动以来，`article`和其他页面相关输入现在返回一个对象，这使得我们的工作变得容易得多。
- en: 'Note that while the page-related input types will return an object from which
    we can extract any value we require, we will still sometimes find ourselves working
    on a theme where the theme uses the old method to retrieve the page-related input
    type object. For this reason, we will mention both approaches, since while we
    will not use the old approach, it is essential to know how it works if we ever
    need to work with it. In the following screenshot, we can see an example of the
    `article` input type:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然与页面相关的输入类型会返回一个对象，我们可以从中提取所需的任何值，但我们有时仍会发现自己正在处理一个主题，该主题使用旧方法来检索与页面相关的输入类型对象。因此，我们将提及两种方法，因为我们虽然不会使用旧方法，但如果我们需要使用它，了解其工作原理是至关重要的。在下面的屏幕截图中，我们可以看到一个`article`输入类型的示例：
- en: '![Figure 6.20 – Example of the article specialized input type'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.20 – 文章专用输入类型的示例'
- en: '](img/Figure_6.20_B17606.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.20_B17606.jpg)'
- en: Figure 6.20 – Example of the article specialized input type
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 – 文章专用输入类型的示例
- en: 'Since the `article` input value returns an object value, we already have full
    access to the `article` object and can easily retrieve any attribute that we might
    need:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`article`输入值返回一个对象值，我们已经有权访问`article`对象，并且可以轻松检索我们可能需要的任何属性：
- en: '[PRE41]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As we can see, now that the `article` input returns an object, accessing the
    object itself and retrieving the value of any attribute is almost effortless.
    Let's now look into the obsolete method to retrieve the `article` object using
    the article handle.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，现在`article`输入返回一个对象，访问该对象本身和检索任何属性的值几乎不费吹灰之力。现在让我们来看看使用文章handle检索`article`对象的过时方法。
- en: 'As mentioned previously, before the Shopify Unite 2021 event, the `article`
    input value returned a handle string. To access the `article` object, we will
    need to pluralize the name of the object we are trying to access, followed by
    a squared bracket `[]` notation, similar to what we did with the product handle
    in [*Chapter 2*](B17606_02_Final_PD_ePub.xhtml#_idTextAnchor030), *The Basic Flow
    of Liquid*:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在Shopify Unite 2021活动之前，`article`输入值返回一个handle字符串。要访问`article`对象，我们需要将我们要访问的对象名称复数化，然后加上方括号`[]`表示法，类似于我们在[*第2章*](B17606_02_Final_PD_ePub.xhtml#_idTextAnchor030)
    *Liquid的基本流程*中处理产品handle的方式：
- en: '[PRE42]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We now have access to the `article` object and can easily output any type of
    article content to any part of the store. Note that while both approaches produce
    the same results, the second approach of recovering the page-related input object
    through its handle is now obsolete.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有权访问`article`对象，并且可以轻松地将任何类型的文章内容输出到商店的任何部分。请注意，虽然两种方法产生相同的结果，但通过其handle恢复页面相关输入对象的第二种方法现在已过时。
- en: The blog input
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 博客输入
- en: 'The `blog` type input works similarly, as it provides us with a special blog
    picker selector field through which we have access to all the available articles
    in the store:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`blog`类型输入的工作方式类似，因为它通过提供一个特殊的博客选择器选择字段，使我们能够访问商店中所有可用的文章：'
- en: '[PRE43]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Accessing the featured blog will always return a `blog` object or nil if the
    value has not yet been defined:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 访问特色博客将始终返回一个`blog`对象或nil，如果值尚未定义：
- en: '![Figure 6.21 – Example of the blog specialized input type'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.21 – 博客专用输入类型的示例'
- en: '](img/Figure_6.21_B17606.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.21_B17606.jpg)'
- en: Figure 6.21 – Example of the blog specialized input type
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21 – 博客专用输入类型示例
- en: 'Similar to the `article` object, we can directly access the `blog` object or
    retrieve it using squared brackets `[]` notation. The only difference is the changed
    `object` keyword:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 与`article`对象类似，我们可以直接访问`blog`对象或使用方括号`[]`表示法检索它。唯一的区别是`object`关键字的变化：
- en: '[PRE44]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Once we have recovered the `blog` object, we can use the `for` tag to loop over
    all the articles inside the selected blog and render them correctly.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们恢复了`blog`对象，我们可以使用`for`标签遍历所选博客中的所有文章并正确渲染它们。
- en: The collection input
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合输入
- en: 'The `collection` type input provides us with a special collection picker selector
    field, through which we will gain access to all the available products in the
    selected collection:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`collection`类型输入为我们提供了一个特殊的集合选择器字段，通过该字段我们将获得对所选集合中所有可用产品的访问权限：'
- en: '[PRE45]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Similar to the previous settings type, the returned value will be nil if we
    have not yet selected the collection. Otherwise, the returned value will return
    an object value that we can use to retrieve any object attribute value:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的设置类型相似，如果我们尚未选择集合，则返回值将为nil。否则，返回值将返回一个对象值，我们可以使用它来检索任何对象属性值：
- en: '![Figure 6.22 – Example of the collection specialized input type'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.22 – 集合专用输入类型示例'
- en: '](img/Figure_6.22_B17606.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.22_B17606.jpg]'
- en: Figure 6.22 – Example of the collection specialized input type
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.22 – 集合专用输入类型示例
- en: 'Additionally, we can access the `collection` object directly or by pluralizing
    the object''s name we are trying to access, followed by a squared bracket `[]`
    notation:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以直接访问`collection`对象，或者通过将我们要访问的对象名称复数化，然后跟一个方括号`[]`表示法来访问：
- en: '[PRE46]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: With the `collection` object in place, we can now easily access all collection
    attributes.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在`collection`对象就绪后，我们现在可以轻松访问所有集合属性。
- en: The page input
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面输入
- en: 'The `page` type input provides us with another special selector field that
    allows us to access all of the pages previously created inside the admin **Page**
    section of our store:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`类型输入为我们提供了一个特殊的集合选择器字段，通过该字段我们将获得对之前在商店的**页面**管理部分创建的所有页面的访问权限：'
- en: '[PRE47]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The **Featured page** value, when accessed, will always return an object value
    or nil if the value is not yet defined:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问**特色页面**值时，它将始终返回一个对象值，如果值尚未定义，则返回nil：
- en: '![Figure 6.23 – Example of the page specialized input type'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.23 – 页面专用输入类型示例'
- en: '](img/Figure_6.23_B17606.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.23_B17606.jpg]'
- en: Figure 6.23 – Example of the page specialized input type
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.23 – 页面专用输入类型示例
- en: 'We can access the `page` object directly or through a squared bracket `[]`
    notation:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接访问`page`对象或通过方括号`[]`表示法访问：
- en: '[PRE48]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Using the declared page variable, we now have access to the `page` object, which
    we can use to further access any attribute for the specific page.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明的页面变量，我们现在可以访问`page`对象，我们可以使用它来进一步访问特定页面的任何属性。
- en: The product input
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品输入
- en: 'As its name suggests, `product` provides us with a product input selector,
    which we can use to gain access to the `product` object:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，`product`为我们提供了一个产品输入选择器，我们可以使用它来访问`product`对象：
- en: '[PRE49]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Similar to the previous settings, when accessed, the value will return nil
    if the value is not yet defined or we''ll get an object value:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问时，如果值尚未定义，将返回nil，或者我们会得到一个对象值：
- en: '![Figure 6.24 – Example of the product specialized input type'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.24 – 产品专用输入类型示例'
- en: '](img/Figure_6.24_B17606.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.24_B17606.jpg]'
- en: Figure 6.24 – Example of the product specialized input type
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.24 – 产品专用输入类型示例
- en: 'We can use the returned object value to access an attribute value, or we can
    use the `product` object''s squared bracket `[]` notation to retrieve the object
    using the obsolete method:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用返回的对象值来访问属性值，或者我们可以使用`product`对象的方括号`[]`表示法来使用过时的方法检索对象：
- en: '[PRE50]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Through the product variable, we can now access all attributes within the selected
    `product` object.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 通过产品变量，我们现在可以访问所选`product`对象中的所有属性。
- en: So far, we have learned about all the different types of input settings, whether
    they are basic or specialized input types, how we can access them, what additional
    attributes we can include with each of them, and what type of value we can expect
    to receive from them. However, simply stacking a significant number of settings
    inside a single category can be overwhelming if there is no order to those settings.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了所有不同类型的输入设置，无论是基本还是专业输入类型，我们如何访问它们，以及我们可以包含的附加属性，以及我们可以从它们那里期望接收到的值类型。然而，如果没有对这些设置进行排序，那么在单个类别中堆叠大量设置可能会让人感到不知所措。
- en: Organizing the theme editor
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织主题编辑器
- en: In the previous section, we have learned about different types of configurable
    settings, which allows us to easily update its value using a series of basic or
    specialized input selectors, where now we will learn about a different set of
    settings, **sidebar settings**. The sidebar settings will allow us to divide each
    category's settings into other separate blocks.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了不同类型的可配置设置，这使我们能够通过一系列基本或专业输入选择器轻松更新其值。现在，我们将学习另一组设置，**侧边栏设置**。侧边栏设置将允许我们将每个类别的设置划分为其他单独的块。
- en: The sidebar settings do not hold any value, nor can we configure them through
    the theme editor. Their only use is to provide us with additional information
    and help us organize different sets of input settings into separate blocks for
    more straightforward navigation.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏设置不包含任何值，我们也不能通过主题编辑器来配置它们。它们唯一的用途是提供给我们额外的信息，并帮助我们将不同的输入设置集组织成单独的块，以便更直观地导航。
- en: 'Under the sidebar settings, we can use the following options:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在侧边栏设置下，我们可以使用以下选项：
- en: '`header`'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header`'
- en: '`paragraph`'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paragraph`'
- en: 'As opposed to the basic and specialized input settings, `header` and `paragraph`
    can only contain the following standard attributes:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 与基本和专业输入设置不同，`header`和`paragraph`只能包含以下标准属性：
- en: As its name indicates, the `type` attribute allows us to set the type of setting,
    whose value can be either a `header` or a `paragraph` setting. The `type` attribute
    is mandatory for both `header` and `paragraph`.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如其名称所示，`type`属性允许我们设置设置的类型，其值可以是`header`或`paragraph`设置。对于`header`和`paragraph`，`type`属性是必需的。
- en: While the sidebar settings cannot contain any value, we can use the `content`
    attribute to output certain information to the theme editor. The `content` attribute
    is also mandatory for both `header` and `paragraph`.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然侧边栏设置不能包含任何值，但我们可以使用`content`属性将某些信息输出到主题编辑器。对于`header`和`paragraph`，`content`属性也是必需的。
- en: The final attribute, `info`, allows us to provide additional information regarding
    the `header` type setting. Note that `info` is not a mandatory attribute and we
    can only use it with the `header` type setting.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个属性，`info`，允许我们提供有关`header`类型设置的附加信息。请注意，`info`不是必需的属性，我们只能与`header`类型设置一起使用。
- en: Now that we have all the necessary information about the different types of
    sidebar settings and their attributes, let's look at each type of setting separately
    and learn how to use them.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了所有不同类型的侧边栏设置及其属性，让我们分别查看每种设置类型，并学习如何使用它们。
- en: The header type
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标题类型
- en: 'The `header` type of setting, as its name suggests, allows us to create a header
    element and consequently group all of the setting input types inside a single
    block. Note that introducing the `header` type setting will automatically group
    all of the input type settings inside the category until it reaches another `header`
    element, or there are no more settings within the current category:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`header`类型的设置，正如其名称所暗示的，允许我们创建一个标题元素，并因此将所有设置输入类型组合在一个单独的块中。请注意，引入`header`类型设置将自动将分类内的所有输入类型设置组合在一起，直到遇到另一个`header`元素，或者当前类别中没有更多的设置：'
- en: '[PRE51]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As we can see, using the `header` type setting is relatively easy, where the
    benefit that we receive is quite significant, as now we can easily group related
    input settings. Additionally, by including the optional `info` attribute, we were
    able to include some additional information related to the specific block of settings,
    which we can see in the following screenshot:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，使用`header`类型设置相对简单，我们获得的好处相当显著，因为现在我们可以轻松地将相关的输入设置分组。此外，通过包含可选的`info`属性，我们能够包含一些与特定设置块相关的附加信息，这可以在下面的屏幕截图中看到：
- en: '![Figure 6.25 – Example of the header sidebar type setting'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.25 – 标题侧边栏类型设置示例'
- en: '](img/Figure_6.25_B17606.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.25_B17606.jpg)'
- en: Figure 6.25 – Example of the header sidebar type setting
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.25 – 头部侧边栏类型设置的示例
- en: We have now learned how to group related settings under the header name and
    include additional information about a particular block of settings. However,
    what if we needed to include an additional set of information to further describe
    a specific set of settings? To achieve this, we can use the following type of
    sidebar setting, `paragraph`.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何将相关的设置分组在头部名称下，并包含有关特定设置块的一些附加信息。然而，如果我们需要包含一组额外的信息来进一步描述特定的设置集，该怎么办？为了实现这一点，我们可以使用以下类型的侧边栏设置，即`paragraph`。
- en: The paragraph type
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 段落类型
- en: 'As mentioned, the `paragraph` type of sidebar setting allows us to include
    additional information, similar to using the `info` attribute with the header
    type setting:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，侧边栏设置中的`段落`类型允许我们包含额外的信息，类似于使用头部类型设置中的`info`属性：
- en: '[PRE52]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Note that including any additional attributes besides `type` and `content`
    with the `paragraph` type setting will result in an error. In the following screenshot,
    we can see an example using `paragraph` inside the theme editor:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`段落`类型设置中，除了`type`和`content`之外，包含任何其他属性将导致错误。在下面的屏幕截图中，我们可以看到一个在主题编辑器中使用`段落`的示例：
- en: '![Figure 6.26 – Example of the paragraph sidebar type setting'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.26 – 段落侧边栏类型设置的示例'
- en: '](img/Figure_6.26_B17606.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.26_B17606.jpg)'
- en: Figure 6.26 – Example of the paragraph sidebar type setting
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.26 – 段落侧边栏类型设置的示例
- en: 'While we cannot include additional attributes, we can use the `content` attribute
    to create a direct link to a specific page, providing some additional information.
    We can do this by including the necessary information by using the following format:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不能包含额外的属性，但我们可以使用`content`属性创建指向特定页面的直接链接，提供一些附加信息。我们可以通过以下格式包含必要的信息：
- en: '[PRE53]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Including the direct link to a specific page will make our theme editor more
    concise. At the same time, it also allows us to include all the necessary information
    that someone using it might require:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 包含指向特定页面的直接链接将使我们的主题编辑器更加简洁。同时，这也允许我们包含使用它的人可能需要的所有必要信息：
- en: '[PRE54]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note that we can create a direct link to any page within both the `content`
    and the `info` attributes on any type of setting that accepts the `info` attribute.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们可以在任何接受`info`属性的设置类型中创建指向任何页面的直接链接，无论是`content`还是`info`属性。
- en: We have now learned about every type of input and sidebar type of setting. However,
    while it is essential to know all the current settings, it is also essential to
    mention some of the now deprecated settings, but which we may still encounter
    in our everyday work.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了所有类型的输入和侧边栏类型设置。然而，虽然了解所有当前设置至关重要，但同样重要的是要提及一些现在已弃用的设置，尽管我们可能在日常工作中还会遇到它们。
- en: Glancing at the deprecated settings
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看已弃用的设置
- en: While the following settings are no longer supported, there is a high probability
    that we might encounter them on older themes that their store owner never updated.
    Since these settings are no longer supported, we will not go into that much detail
    on how they work, but we will provide some general guidelines for identifying
    them and what they do.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然以下设置不再受支持，但我们有很大可能会在所有者从未更新的旧主题中遇到它们。由于这些设置不再受支持，我们不会过多地详细介绍它们的工作原理，但我们将提供一些识别它们及其功能的通用指南。
- en: The font input
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体输入
- en: 'The `font` input type of setting allowed us to generate a shortlist of font
    files accessible on Shopify:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`font`输入类型设置允许我们生成Shopify上可访问的字体文件的简短列表：'
- en: '[PRE55]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The introduction of the `font_picker` input type, which we have mentioned previously,
    made the `font` input type of setting obsolete.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的`font_picker`输入类型的引入使`font`输入类型设置变得过时。
- en: The snippet input
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碎片输入
- en: 'As its name suggests, the `snippet` input type allowed us to select any snippet
    file that we created previously within our theme and execute its content in a
    specific position:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，`snippet`输入类型允许我们选择我们之前在主题中创建的任何片段文件，并在特定位置执行其内容：
- en: '[PRE56]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The introduction of `sections`, which we will learn about in the following chapter,
    has made the `snippet` input type of setting obsolete.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`sections`的引入，我们将在下一章中学习，已经使`snippet`输入类型设置变得过时。'
- en: Summary
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the previous chapters, we have abstained from going over every specific option,
    consequently creating a list of options that we need to learn to keep everything
    concise and to the point. However, in this chapter, we have gone over each option
    and carefully explained how to use it, when, and what we can expect, since, on
    account of their importance, we will use the knowledge that we have learned in
    this chapter on a regular basis.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们避免了对每个具体选项进行详述，从而创建了一个我们需要学习的选项列表，以保持内容简洁并直截了当。然而，在本章中，我们详细介绍了每个选项，并仔细解释了何时使用它，以及我们可以期待什么，因为鉴于它们的重要性，我们将定期使用本章学到的知识。
- en: We have learned how to generate some of the most basic input types, which we
    can use to output various types of content and types of input, allowing us to
    create additional logic related to specific content. Additionally, we have also
    learned how to output specialized input types, allowing us to create complex features
    with an easy and configurable interface.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何生成一些最基本输入类型，我们可以使用它们来输出各种类型的内容和输入类型，从而允许我们创建与特定内容相关的附加逻辑。此外，我们还学习了如何输出专业化的输入类型，允许我们通过简单且可配置的界面创建复杂功能。
- en: Lastly, we have learned how we can organize the JSON settings into separate
    blocks for better readability. The knowledge that we have attained through this
    chapter will be helpful and tested in the following chapter.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何将 JSON 设置组织成独立的块以提高可读性。通过本章获得的知识将在下一章中派上用场并接受检验。
- en: In the next chapter, we will learn about sections and blocks, and use them to
    create section/block-specific settings that merchants can use through the theme
    editor to create re-usable sections.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于部分和块的内容，并使用它们来创建商家可以通过主题编辑器使用的特定部分/块设置。
- en: Questions
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the two types of input settings?
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪两种输入设置类型？
- en: What's the issue that will cause an error with the following piece of code?
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段将导致错误的哪个问题？
- en: '[PRE57]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How can we include a custom font file within Shopify and use it throughout the
    theme editor?
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Shopify 中包含自定义字体文件并在主题编辑器中使用它？
- en: What are the two issues that will prevent us from executing the following piece
    of code?
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪两个问题会阻止我们执行以下代码片段？
- en: '[PRE58]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
