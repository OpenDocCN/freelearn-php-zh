- en: Chapter 1. Starting with Yii2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 is a complete rewrite of the first version of one of the most famous PHP
    frameworks. It is a well-documented framework with a very active community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Officially, we can find three types of support: a guide, for a complete navigation
    through framework topics at [http://www.yiiframework.com/doc-2.0/guide-index.html](http://www.yiiframework.com/doc-2.0/guide-index.html),
    a reference to explore all classes that compose the framework at [http://www.yiiframework.com/doc-2.0/index.html](http://www.yiiframework.com/doc-2.0/index.html),
    and finally forum support at [http://www.yiiframework.com/forum/](http://www.yiiframework.com/forum/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements and tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Yii2 with Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common application components
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling application events
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern MVC in Yii2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Naming convention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring debug toolbar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using logger
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Example – hello world from scratch with the Yii basic template and bootstrap
    template
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic requirements for Yii2 are a web server (local or remote) and PHP v.5.4
    (or newer). It is recommended to have a shell (or command line) access to the
    machine (local or remote) where we store the code, as there are scripts that it
    will be very beneficial to use in the development of complex applications. We
    can also develop the application locally and upload it to the web server when
    we wish to test it.
  prefs: []
  type: TYPE_NORMAL
- en: For remote hosting, there are multiple options. We can use a simple web hosting
    service (with PHP v.5.4 support) or we can opt for virtual or dedicated server
    hosting. Keep in mind that with the former option, if the server doesn't meet
    the PHP requirements, it can be difficult to change whatever is wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Yii2 has a script, `requirements.php`, which checks whether our hosting meets
    the requirements to run Yii2 application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Yii2 with Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Composer is a tool for dependency management in PHP. Yii2 uses it to install
    itself and other vendors' modules (for example, bootstrap).
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to install Yii2 in the old way, by downloading the complete
    package and transferring it to the host, local or remote, where the framework
    will be installed. However, Composer will give us many benefits, like the ability
    to easily update the framework and ensure that all package dependencies are satisfied.
    Composer is de facto the new way to install and maintain projects, so I recommend
    using it from the start. If you are unsure about using Composer, it's worth mentioning
    that most users will need to learn two or three commands at most, so it's not
    a steep learning curve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii2 has two available templates to start with: basic and advanced. We will
    start with the basic template, but we will also see in the next chapters how to
    use advanced templates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s look at how to install Yii2 with Composer. We need to access the
    folder through the console, where the web server''s httpdocs point to and launch
    these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These commands are useful if we are in the Linux or Mac environment. On Windows,
    you need to download `Composer-Setup.exe` from Composer's official website and
    run it.
  prefs: []
  type: TYPE_NORMAL
- en: The first command gets the [http://getcomposer.org/installer](http://getcomposer.org/installer)
    URL and passes it to PHP to create the `composer.phar` file.
  prefs: []
  type: TYPE_NORMAL
- en: The second command installs the Composer asset plugin, which allows us to manage
    bower and npm package dependencies through Composer.
  prefs: []
  type: TYPE_NORMAL
- en: The third and final command installs Yii2 in a directory named `basic`. If you
    want, you can choose a different directory name.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the installation, Composer may ask for our GitHub login credentials and
    this is normal because Composer needs to get enough API rate limit to retrieve
    the dependent package information from GitHub. If you don't have a GitHub account,
    this is the right moment to create a new one!
  prefs: []
  type: TYPE_NORMAL
- en: If we are using Windows, we need to download it from [https://getcomposer.org](https://getcomposer.org)
    and run it. The last two commands will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: We have installed Yii2!
  prefs: []
  type: TYPE_NORMAL
- en: To test it, point to `http://hostname/basic/web` and we should see the *My Yii
    Application* page.
  prefs: []
  type: TYPE_NORMAL
- en: Application structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2's application structure is very clear, precise, and redundant (for advanced
    applications).
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the `basic` folder should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder names | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `assets` | This includes the files (`.js` and `.css`) referenced in the web
    page and dependencies of the app. |'
  prefs: []
  type: TYPE_TB
- en: '| `commands` | This includes the controllers used from the command line. |'
  prefs: []
  type: TYPE_TB
- en: '| `config` | This includes the controllers used from web. |'
  prefs: []
  type: TYPE_TB
- en: '| `mail` | This is the mail layout repository. |'
  prefs: []
  type: TYPE_TB
- en: '| `models` | This includes the models used in the whole application. |'
  prefs: []
  type: TYPE_TB
- en: '| `runtime` | This is used from Yii2 to store runtime data as logs. |'
  prefs: []
  type: TYPE_TB
- en: '| `tests` | This includes all the test''s repositories (unit, functional, fixtures,
    and so on). |'
  prefs: []
  type: TYPE_TB
- en: '| `vendor` | This includes the third-party module repositories managed by Composer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `views` | This contains PHP files, divided into folders that refer to controller
    names, used to render the main content of the page template. It is mainly called
    from the controller''s actions to render the display output. A folder named layout
    contains the page template''s PHP files. |'
  prefs: []
  type: TYPE_TB
- en: '| `web` | This is the entry point from web |'
  prefs: []
  type: TYPE_TB
- en: 'Open `web/index.php` to view content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first two constant definitions are very important.
  prefs: []
  type: TYPE_NORMAL
- en: '`YII_DEBUG` defines whether you are in debug mode or not. If we set this, we
    will have more log information and will see the detail error call stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`YII_ENV` defines the environment mode we are working in, and its default value
    is `prod`. The available values are `test`, `dev`, and `prod`. These values are
    used in configuration files to define, for example, a different DB connection
    (local database different from remote database) or other values, always in configuration
    files.'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are at the start of our project, it is recommended to set `YII_DEBUG`
    to `true`, in order to have more detailed information in case we make a mistake
    in our code, instead of the unhelpful, blank.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table contains a list of all Yii2''s objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Objects | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Models, Views, and Controllers | These are the common objects to apply the
    MVC pattern to:'
  prefs: []
  type: TYPE_NORMAL
- en: Models are data representation and manipulation, usually from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views are used to present data to the end user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers are objects that process requests and generate responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Components | These are objects that contain logic. The user can write his
    own components to create reusable functionalities.For example, a component could
    be a currency converter object, which can be used at many instances in our application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Application Components | They are singletons that can be called at any point
    in the app. Singleton means an object instanced just one time in the entire application
    (so the object will always be the same).The difference between Application Components
    and Components is that the first can have just one instance in the whole application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Widgets | These view reusable objects, containing both logic and rendering
    code. A widget could be, for example, a box displaying today''s weather info.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Filters | These are objects that run before or after the execution of Controller
    actions. A filter can be used to change the format response output of the page,
    for example, from HTML to JSON. |'
  prefs: []
  type: TYPE_TB
- en: '| Modules | This contains all the objects of an app, such as Models, Views,
    Controller, Components, and so on; we can consider them as subapp, containing
    reusable sections (for example, user management). |'
  prefs: []
  type: TYPE_TB
- en: '| Extensions | Extensions are modules packaged, that we can easily manage using
    Composer. |'
  prefs: []
  type: TYPE_TB
- en: Application properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Yii2 application can be configured through several properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties that need to be configured in any application are listed in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `id` | This indicates a unique ID to distinguish this application from others.
    It is mainly used programmatically. An example of this property is `basic`. |'
  prefs: []
  type: TYPE_TB
- en: '| `basePath` | This specifies the root directory of the application. This path
    is the starting point for all the other types of application objects, such as
    models, controllers, and views. An example of this property is `dirname(__DIR__)`.
    |'
  prefs: []
  type: TYPE_TB
- en: 'The other common properties are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `aliases` | This indicates an alias name for path definitions. They are defined
    using a key/value array and they are very useful when we need to set a path as
    a constant that live in the whole application. We type an alias preceded by an
    `@` character. An example of this property is `''@fileupload'' => ''path/to/files/uploaded''`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bootstrap` | This property allows you to configure an array of components
    to be run during the application bootstrap process. A common usage is to load
    the log or profile component, gii, or any other component. Be careful not to load
    too many components, otherwise the response performance of your pages may degrade.
    An example of this property is `''log''`, `''gii''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `catchAll` | This property captures every request and it is used in the maintenance
    mode of the site. |'
  prefs: []
  type: TYPE_TB
- en: '| `components` | This property points out a list of application components
    that you can use in the whole application. |'
  prefs: []
  type: TYPE_TB
- en: '| `language` | This property specifies the language used to display the content.
    An example of this property is `''language'' => ''en''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `modules` | This property points out a list of application modules that can
    be used in the application. |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | This property indicates the name of your app. An example of this
    property is `''name'' => ''My App''`. |'
  prefs: []
  type: TYPE_TB
- en: '| `params` | This property specifies an array of parameters, through key/value
    pairs. This is a container for global params, such as the administrator''s e-mail
    address. |'
  prefs: []
  type: TYPE_TB
- en: '| `timeZone` | This property indicates the time zone that should be used in
    the application. An example of this property is `''timeZone'' => ''Europe/Rome''`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `charset` | This property points out the charset used in the application.
    The default value is `UTF-8`. |'
  prefs: []
  type: TYPE_TB
- en: '| `defaultRoute` | This property contains a route to be used when a request
    does not a specify one. This property has different default values according to
    the environment we are using.For web applications, this value will be `site`,
    so that `SiteController` could be used to handle these requests.For console applications,
    this value will be `help`, so that `yii\console\controllers\HelpController` can
    be used invoking its index action that will display help information. |'
  prefs: []
  type: TYPE_TB
- en: Common application components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s a list of the most-used application components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`request`: This component handles all client requests and provides methods
    to easily get parameters from server global variables, such as `$_SERVER`, `$_POST`,
    `$_GET`, and `$_COOKIES`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default state has `enableCookieValidation` set to true, so you need to
    set `cookieValidationKey` parameter as shown in this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`cache`: This component helps you handle cache data. Yii2 defaults to the `FileCache`
    instance for the cache, but we can also configure an `ApcCache`, `DbCache`, `MemCache`,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a standard installation of Yii2:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`user`: This component deals with user authentication in the app. The most
    important parameter is the `identityClass` parameter, which defines the class
    that contains the user''s model data, in order to have a specific method to log
    in or log out a user from the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`errorHandler`: This component provides functionalities to handle uncaught
    errors and exceptions. It can be configured by specifying the action to run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`mailer`: This component configures mailer connection parameters to the system
    that will send an e-mail. Usually, it is the same machine hosting our website,
    so the default values are probably correct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`log`: This component is mainly used in the debug environment to log the app
    execution. We can set the debug level and destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`db`: This component handles a database connection. We can have several db
    configuration in our app; in this case, we can define more components with the
    `Connection` class located at `yii\db\`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handling application events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During its lifecycle, an application can trigger many events. These events can
    be declared in application configuration or programmatically. Common triggers
    are `beforeRequest`, `afterRequest`, `beforeAction`, and `afterAction`, but every
    object can have its own events.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a common use of events is to set `mysql db timezone`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the time zone to UTC in db component configuration, we must define a
    handler for the `afterOpen` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: An anonymous function, attached to `on afterOpen` event handlers, has an `$event`
    parameter, which is an instance of the `yii\base\ActionEvent` class. This class
    has a `$sender` object that refers to the sender of the event. In this case, `$sender`
    refers to the instance of database components (db). This property may also be
    null when this event is a class-level event.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC pattern in Yii2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yii2 is built according to the **Model-View-Controller** (**MVC**) design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Models, representing logic, are objects extended from `\yii\base\Model`, which
    offer many features such as attribute, attribute labels, massive assignment (to
    fill object attributes directly for an array), validation rules, and data exporting.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, in common apps, a Model will be generated from the database, extending
    `yii\db\ActiveRecord` that implements the Active Record design pattern, with many
    methods to manipulate data. Yii2 provides Gii, a tool used to generate Model classes
    directly from the database's table structure.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers, the bridge between view and model, are class instances extending
    from `yii\base\Controller`, used to process requests and generate responses.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers mainly contain functions whose name starts with the action prefix
    that allows the framework to recognize those functions as routes, which can be
    requested.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will look at views that deal with displaying data to end users that
    are mainly rendered in the page layout from controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Naming convention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to allow auto-loading, Yii2 uses a simple standard to set names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Routes that refer respectively to module, controller, and the action requested
    take the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ModuleID/ControllerID/ActionID`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at each element in detail as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ModuleID is optional, so often the format is ControllerID/ActionID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ModuleID must be specified in the module's configuration property, under
    the same name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ControllerID and ActionID should contain only English characters in lowercase,
    digits, underscores, dashes, and forward slashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of route is `http://hostname/index.php?r=site/index`, where `site`
    is the ControllerID and `index` is the ActionID.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from ControllerID, it is very easy to create the Controller class name.
    Just turn into uppercase the first letter of each word separated by dashes, then
    remove dashes and append the suffix Controller. If ControllerID contains slashes,
    just apply the rules to the part after the last slash in the ID. This is possible
    because controllers can be collected in subfolders, starting from `app\controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Shop points to `app\controllers\ShopController`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preferred number points to `app\controllers\PreferredNumberController`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admin/users account points to `app\controllers\admin\UsersAccountController`![Naming
    convention](img/B04656_01_03.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routes are passed to entry script `basic/web/index.php` through the `r` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default page `http://hostname/basic/web/index.php` is equivalent to `http://hostname/basic/web/index.php?r=site/index`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the debug toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to have a rich collection of tools to make development easier
    in displaying some useful information about requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, Yii2 provides a toolbar that displays several types of info.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common way to activate the debug toolbar is to set in `config/web.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can set the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`debug` to `bootstrap` config node'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug` to `modules` config node, using the `Module` class under `yii\debug\`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default installation of the Yii2 basic template already enables the debug
    toolbar, as we can see at the bottom of the `config/web.php` configuration file.
    The Gii module is also enabled as well, but we will work with it later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This config entry is only valid in the `YII_ENV_DEV` mode. So, we must check
    whether the `web/index.php YII_ENV` variable has the `dev` value (as shown in
    the default installation).
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the debug toolbar](img/B04656_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debug toolbar closed
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try to reload the web page at `basic/web/index.php` after these checks,
    we should see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the debug toolbar](img/B04656_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debug toolbar opened
  prefs: []
  type: TYPE_NORMAL
- en: The right arrow reports that the debug toolbar is active but closed. If we click
    on it, the complete toolbar will open. Now, click on any item, the debug panel
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the debug toolbar can be used only in localhost. However, if we
    are using Yii2 in the remote hosting environment, we set the `allowedIPs` property
    of the `debug` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In `allowedIPs` there is only localhost (in the IPv4 and IPv6 forms). We need
    to put our Internet connection and IP source address here, which can be easily
    found using any `my IP` service on the Internet, such as [http://www.whatismyip.com/](http://www.whatismyip.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If our IP source is, for example, `1.2.3.4`, we must add this entry to `allowedIPs`,
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Remember that if we do not have an Internet connection with a static IP, this
    IP might change. So we need to check whether `allowedIPs` contains our current
    IP.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could also use an asterisk `*` to allow all IP addresses, so you do not
    have to deal with dynamic IP issues. If you do this, you need to remember to remove
    the asterisk before deployment. Finally, at the bottom of our current configuration
    `config/web.php`, you will see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's return to the `basic/web/index.php` webpage and take a look at the debug
    info panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The debug information is distributed in the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration**: This is the installed PHP version and configuration and
    also the installed Yii2 framework version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request**: This is the info about the request just sent, displaying parameters
    of the request, headers of the request and other useful data as response and session
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs**: This involves the actions performed by Yii2 during the execution.
    There are additional filters in this section to select the types of logs to be
    displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance Profiling**: This includes info about timing and duration of
    process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: This includes info about all database query occurred; we can
    filter for type of query to locate a specific query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to filter all data using internal grid filter or to filter for
    all, latest or selecting among the last 10 rows of the log on top of the content
    pane.
  prefs: []
  type: TYPE_NORMAL
- en: Using the logger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Yii2 application, the debug info is stored using the log component. We
    can use this tool both in the development and production environment, but for
    reasons of performance and security in production, we should log only the important
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default configuration file of the Yii2 basic template provides log entry
    in the `components` property of `config/web.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Example – Hello world from scratch with the Yii basic template and bootstrap
    template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to code our first project using Yii2.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have not installed Yii2 yet, we will to do it now using Composer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Command Prompt to the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the document root of the web server (`/var/www` in a Linux machine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch these commands (as described in the *Installing Yii with Composer* section):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need a fresh installation of Yii2 in the basic folder of the web server
    document root. Point the browser to `http:/hostname/basic/web` and we should see
    Yii2''s congratulations page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – Hello world from scratch with the Yii basic template and bootstrap
    template](img/B04656_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of the Hello world page
  prefs: []
  type: TYPE_NORMAL
- en: We will create our first action to display a memorable `hello world` on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: We know from the *Application properties* section, in the defaultRoute entry,
    that the `SiteController` controller will be called when no route is specified
    in request.
  prefs: []
  type: TYPE_NORMAL
- en: So, we enter `basic/controllers` and open `SiteController.php`, which is the
    default controller.
  prefs: []
  type: TYPE_NORMAL
- en: In the `SiteController` class definition, we add a new method at the top, called
    `actionHelloWorld`, without parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let's save the file and point to `http://hostname/basic/web/index.php?r=site/hello-world`.
  prefs: []
  type: TYPE_NORMAL
- en: You should see a blank page with `hello world`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pay attention when using the name route convention. Uppercase letters are translated
    to lowercase and dashes.
  prefs: []
  type: TYPE_NORMAL
- en: This is fantastic, but now we just want to put `hello world` within the page
    template.
  prefs: []
  type: TYPE_NORMAL
- en: We must now create a view with the content of response hello world!. In order
    to do this, we need to create a file named `helloWorld.php` as the name of the
    action under `views/site`. The naming convention need not necessarily be the same
    here because the view file is not automatically called from the framework.
  prefs: []
  type: TYPE_NORMAL
- en: This file only contains the `hello world` text.
  prefs: []
  type: TYPE_NORMAL
- en: 'We update `SiteController` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the `actionHelloWorld()` method, `$this` refers to the SiteController's instance,
    and `render()` will insert the `views/helloWorld.php` file content in the main
    content layout page.
  prefs: []
  type: TYPE_NORMAL
- en: The extension of the view file, `.php`, is automatically added from the framework
    to view the name parameter passed to the render method.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we want to pass a parameter, such as name, to `actionHelloWorld()`?
    Formally, we need to add just one parameter to `actionHelloWorld()` in SiteController
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, under `view/site/helloWorld.php` add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: With the update of `actionHelloWorld()`, we will pass as a second parameter,
    an array of variables, that will be visible and used in View.
  prefs: []
  type: TYPE_NORMAL
- en: When we use parameters in the action function, we must remember that they will
    be mandatory and we must respect the order when passing it to the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid this obligation, we can use the old method, parsing parameters into
    the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With this solution, we can decide whether to pass the `nameToDisplay` parameter
    to request. The default value of the `nameToDisplay` parameter will be null, but
    we can decide to assign a different value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a URL example passing the `nameToDisplay` parameter `Foo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://hostname/basic/web/index.php?r=site/hello-world&nameToDisplay=Foo`'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at a basic understanding of the Yii2 framework, starting
    from requirements to explain the main features. Then we used debugging and logging
    tools to trace our code and were able to find errors. Finally, we wrote our first
    project based on the basic template.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will learn how to create our controllers and views, to create custom
    interaction with frontend users.
  prefs: []
  type: TYPE_NORMAL
