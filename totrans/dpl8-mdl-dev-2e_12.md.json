["```php\n$(document).ready(function () { \n  // Essentially the entirety of your javascript code. \n}); \n```", "```php\nhello_world_clock: \n  version: 1.x \n  js: \n    js/hello_world_clock.js: {} \n  dependencies: \n    - core/jquery \n    - core/drupal \n    - core/jquery.once  \n```", "```php\n$time = new \\DateTime(); \n$render['#target'] = $this->t('world');  \n```", "```php\n$render['#attached'] = [ \n  'library' => [ \n    'hello_world/hello_world_clock' \n  ] \n];  \n```", "```php\n(function (Drupal, $) {\n\n  \"use strict\";\n\n  // Our code here. \n\n}) (Drupal, jQuery);\n```", "```php\nDrupal.behaviors.helloWorldClock = {\n  attach: function (context, settings) {\n    function ticker() {\n      var date = new Date();\n      $(context).find('.clock').html(date.toLocaleTimeString());\n    }\n\n    var clock = '<div>The time is <span class=\"clock\"></span></div>';\n\n    $(document).find('.salutation').append(clock);\n\n    setInterval(function() {\n      ticker();\n    }, 1000);\n  }\n};  \n```", "```php\nDrupal.attachBehaviors();  \n```", "```php\n$(context).find('.salutation').append(clock);  \n```", "```php\n$(context).find('.salutation').once('helloWorldClock').append(clock);  \n```", "```php\nif ((int) $time->format('G') >= 12 && (int) $time->format('G') < 18) {\n  $render['#salutation']['#markup'] = $this->t('Good afternoon');\n  $render['#attached']['drupalSettings']['hello_world']['hello_world_clock']['afternoon'] = TRUE;\n  return $render;\n}\n\n```", "```php\nvar clock = '<div>The time is <span class=\"clock\"></span></div>'; \nif (settings.hello_world != undefined && settings.hello_world.hello_world_clock.afternoon != undefined) { \n  clock += 'Are you having a nice day?'; \n}  \n```", "```php\n/** \n* {@inheritdoc} \n*/ \npublic function build() { \n$build = []; \n\n$build[] = [ \n  '#theme' => 'container', \n  '#children' => [ \n    '#markup' => $this->salutation->getSalutation(), \n  ] \n]; \n\n$url = Url::fromRoute('hello_world.hide_block'); \n$url->setOption('attributes', ['class' => 'use-ajax']); \n$build[] = [ \n  '#type' => 'link', \n  '#url' => $url, \n  '#title' => $this->t('Remove'), \n]; \n\nreturn $build; \n}  \n```", "```php\nuse Drupal\\Core\\Url;\n```", "```php\nhello_world.hide_block: \n  path: '/hide-block' \n  defaults: \n    _controller: '\\Drupal\\hello_world\\Controller\\HelloWorldController::hideBlock' \n  requirements: \n    _permission: 'access content'  \n```", "```php\n/** \n * Route callback for hiding the Salutation block. \n * Only works for Ajax calls. \n * \n * @param \\Symfony\\Component\\HttpFoundation\\Request $request \n * \n * @return \\Drupal\\Core\\Ajax\\AjaxResponse \n */ \npublic function hideBlock(Request $request) { \n  if (!$request->isXmlHttpRequest()) { \n    throw new NotFoundHttpException(); \n  } \n\n  $response = new AjaxResponse(); \n  $command = new RemoveCommand('.block-hello-world'); \n  $response->addCommand($command); \n  return $response; \n}  \n```", "```php\nuse Drupal\\Core\\Ajax\\AjaxResponse; \nuse Drupal\\Core\\Ajax\\RemoveCommand; \nuse Symfony\\Component\\HttpFoundation\\Request; \nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;  \n```", "```php\n/**\n * Returns the form array for configuring this plugin.\n *\n * @param \\Drupal\\products\\Entity\\ImporterInterface $importer\n *\n * @return array\n */\npublic function getConfigurationForm(\\Drupal\\products\\Entity\\ImporterInterface $importer);\n```", "```php\n/** \n * Returns the configuration specific to the chosen plugin. \n * \n * @return array \n */ \npublic function getPluginConfiguration();  \n```", "```php\n/** \n * The configuration specific to the plugin. \n * \n * @var array \n */ \nprotected $plugin_configuration; \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function getPluginConfiguration() { \n  return $this->plugin_configuration; \n}  \n```", "```php\n*   config_export = { \n*     \"id\", \n*     \"label\", \n*     \"plugin\", \n*     \"update_existing\", \n*     \"source\", \n*     \"bundle\", \n*     \"plugin_configuration\" \n*   } \n```", "```php\n/** \n * {@inheritdoc} \n */ \npublic function getConfigurationForm(\\Drupal\\products\\Entity\\ImporterInterface $importer) { \n  $form = []; \n  $config = $importer->getPluginConfiguration(); \n  $form['url'] = [ \n    '#type' => 'url', \n    '#default_value' => isset($config['url']) ? $config['url'] : '', \n    '#title' => $this->t('Url'), \n    '#description' => $this->t('The URL to the import resource'), \n    '#required' => TRUE, \n  ]; \n  return $form; \n}  \n```", "```php\nuse StringTranslationTrait; \n```", "```php\n/**\n * Loads the product data from the remote URL.\n *\n * @return \\stdClass\n */\nprivate function getData() {\n  /** @var ImporterInterface $importer_config */\n  $importer_config = $this->configuration['config'];\n  $config = $importer_config->getPluginConfiguration();\n  $url = isset($config['url']) ? $config['url'] : NULL;\n  if (!$url) {\n    return NULL;\n  }\n  $request = $this->httpClient->get($url);\n  $string = $request->getBody();\n  return json_decode($string);\n}\n```", "```php\n$form['plugin'] = [ \n  '#type' => 'select', \n  '#title' => $this->t('Plugin'), \n  '#default_value' => $importer->getPluginId(), \n  '#options' => $options, \n  '#description' => $this->t('The plugin to be used with this importer.'), \n  '#required' => TRUE, \n  '#empty_option' => $this->t('Please select a plugin'), \n  '#ajax' => array( \n    'callback' => [$this, 'pluginConfigAjaxCallback'], \n    'wrapper' => 'plugin-configuration-wrapper' \n  ), \n];  \n```", "```php\n/** \n * Ajax callback for the plugin configuration form elements. \n * \n * @param $form \n * @param \\Drupal\\Core\\Form\\FormStateInterface $form_state \n * \n * @return array \n */ \npublic function pluginConfigAjaxCallback($form, FormStateInterface $form_state) { \n  return $form['plugin_configuration']; \n}  \n```", "```php\n$form['plugin_configuration'] = [ \n  '#type' => 'hidden', \n  '#prefix' => '<div id=\"plugin-configuration-wrapper\">', \n  '#suffix' => '</div>', \n]; \n\n$plugin_id = NULL; \nif ($importer->getPluginId()) { \n  $plugin_id = $importer->getPluginId(); \n} \nif ($form_state->getValue('plugin') && $plugin_id !== $form_state->getValue('plugin')) { \n  $plugin_id = $form_state->getValue('plugin'); \n} \n\nif ($plugin_id) { \n  /** @var \\Drupal\\products\\Plugin\\ImporterInterface $plugin */ \n  $plugin = $this->importerManager->createInstance($plugin_id, ['config' => $importer]); \n  $form['plugin_configuration']['#type'] = 'details'; \n  $form['plugin_configuration']['#tree'] = TRUE; \n  $form['plugin_configuration']['#open'] = TRUE; \n  $form['plugin_configuration']['#title'] = $this->t('Plugin configuration for <em>@plugin</em>', ['@plugin' => $plugin->getPluginDefinition()['label']]); \n  $form['plugin_configuration']['plugin'] = $plugin->getConfigurationForm($importer); \n}  \n```", "```php\n$importer->set('plugin_configuration', $importer->getPluginConfiguration()['plugin']); \n```", "```php\nplugin_configuration: \n  type: products.importer.plugin.[%parent.plugin] \n```", "```php\nproducts.importer.plugin.*: \n  type: mapping \n  label: 'Plugin configuration' \n```", "```php\nproducts.importer.plugin.json: \n  type: mapping \n  label: Plugin configuration for the Json importer plugin \n  mapping: \n    url: \n      type: uri \n      label: Uri  \n```", "```php\n$form['kids'] = [ \n  '#type' => 'checkbox', \n  '#title' => $this->t('Do you have kids?'), \n]; \n\n$form['kid_number'] = [ \n  '#type' => 'textfield', \n  '#title' => $this->t('How many kids do you have?'), \n]; \n```", "```php\n$form['kid_number'] = [ \n  '#type' => 'textfield', \n  '#title' => $this->t('How many kids do you have?'), \n  '#states' => [ \n    'visible' => [ \n      'input[name=\"kids\"]' => ['checked' => TRUE], \n    ], \n  ], \n]; \n```", "```php\n'#states' => array( \n  'invisible' => array( \n    'input[name=\"kids\"]' => array('checked' => FALSE), \n  ), \n),  \n```"]