- en: Chapter 7. Official Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SwiftMailer e-mail library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faker fixture data generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB driver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ElasticSearch engine adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gii code generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pjax jQuery plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis database driver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2's official repository provides adapters for some popular libraries, databases,
    and search engines. In this chapter, we will show you how to install and use official
    extensions in your project. You will also learn how to write your own extension
    and share it with other developers.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension adds OpenID, OAuth, and OAuth2 consumers for the Yii 2.0 framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the extension with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your GitHub applications page [https://github.com/settings/applications](https://github.com/settings/applications)
    and add your own new application:![How to do it…](img/image00419.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the **Client ID** and **Client Secret**:![How to do it…](img/image00433.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure your web configuration and set the corresponding options for your
    `authClientCollection` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your `SiteController` and add the `auth` standalone action and success
    callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `views/site/login.php` file and insert the `AuthChoice` widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see icons for the providers you've configured:![How to do it…](img/image00444.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to authorize with the GitHub provider:![How to do it…](img/image00459.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If successful, your callback will show authorized user attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create your own authorization code in the `onAuthSuccess` method, like the example
    at [https://github.com/yiisoft/yii2-authclient/blob/master/docs/guide/quick-start.md](https://github.com/yiisoft/yii2-authclient/blob/master/docs/guide/quick-start.md).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The extension provides OpenID, OAuth, and OAuth2 auth clients for your application.
  prefs: []
  type: TYPE_NORMAL
- en: The `AuthChoice` widget opens an authenticate page on a selected service's site,
    storing the `auth` action URL. After authentication, the current service redirects
    users back while sending authentication data via a POST-request. `AuthAction`
    receives the request and calls the corresponding callback.
  prefs: []
  type: TYPE_NORMAL
- en: You can use any existing client or create your own one.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get more information about extension usage, refer to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-authclient/tree/master/docs/guide](https://github.com/yiisoft/yii2-authclient/tree/master/docs/guide)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-authclient-index.html](http://www.yiiframework.com/doc-2.0/ext-authclient-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more about OpenID, OAuth, and OAuth2 authentication technologies,
    refer to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://openid.net](http://openid.net)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://oauth.net](http://oauth.net)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SwiftMailer e-mail library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many web applications need to send notifications and confirm client actions
    by e-mail for security reasons. The Yii2 framework provides a wrapper, `yiisoft/yii2-swiftmailer`,
    for the established library `SwiftMailer`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: Both basic and advanced applications contain this extension out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we will try to send any kind of e-mails from our own application.
  prefs: []
  type: TYPE_NORMAL
- en: Sending plain text e-mails
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Set the mailer configuration into the `config/console.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a test console controller, `MailController`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following console command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Examine your `runtime/mail` directory. It should contain files with your mails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Mail files contain messages in the special e-mail source format,
    compatible with any mailing software. You can open this field as a plain text
    too.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set the `useFileTransport` parameter as false or remove this string from the
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then put your real e-mail ID into the `setTo()` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console command again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check your `inbox` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: SwiftMailer uses a standard PHP function, `mail()`, for sending mails
    by default. Please check that your server is correctly configured for sending
    mails via the `mail()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: Many mail systems reject mails without DKIM and SPF signatures (sent by the
    `mail()` function as example) or put them into a `Spam` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Sending HTML content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Check that your application contains the `mail/layouts/html.php` file and add
    the `mail/layouts/text.php` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your own view in the `mail/message-html.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `mail/message-text.php` file with the same content, but without HTML
    tags:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a console controller, `MailController`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following console commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with SMTP transport
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Set the `transport` parameter for the `mailer` component like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write and run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check your Gmail inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Gmail automatically rewrites the `From` field to your default profile
    e-mail ID, but other e-mail systems do not do the same. Always use an identical
    e-mail ID in the transport configuration and in the `setFrom()` method for passing
    antispam policies for other e-mail systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Attaching file and embedding images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the corresponding method to attach any file to your mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the `embed()` method in your e-mail view file to paste an image in your
    e-mail content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It automatically attaches an image file and inserts its unique identifier.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The wrapper implements the base `\yii\mail\MailerInterface`. Its `compose()`
    method returns a message object (an implementation of `\yii\mail\MessageInterface`).
  prefs: []
  type: TYPE_NORMAL
- en: You can manually set plain text and HTML contents with the help of methods `setTextBody()`
    and `setHtmlBody()`, or you can pass your view and view parameters into the `compose()`
    method. In this case, the mailer calls the `\yii\web\View::render()` method for
    rendering corresponding content.
  prefs: []
  type: TYPE_NORMAL
- en: The `useFileTransport` parameter stores mails in files instead of real sending.
    It is helpful for local development and application testing.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the `yii2-swiftmailer` extension, visit the following
    guides:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-tutorial-mailing.html](http://www.yiiframework.com/doc-2.0/guide-tutorial-mailing.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-swiftmailer-index.html](http://www.yiiframework.com/doc-2.0/ext-swiftmailer-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to learn more about the original `SwiftMailer` library, refer to the
    following URLs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://swiftmailer.org/docs/introduction.html](http://swiftmailer.org/docs/introduction.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/swiftmailer/swiftmailer](https://github.com/swiftmailer/swiftmailer)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Faker fixture data generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `fzaninotto/faker` is a PHP library that generates fake data of many kinds:
    names, phones, addresses, random strings and numbers, and so on. It can help you
    to generate many randomized records for performance and logic testing. You can
    extend your supported types collection by writing your own formatters and generators.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Yii2 application skeletons, the `yiisoft/yii2-faker` wrapper is included
    in the `require-dev` section of the `composer.json` file and is used for testing
    code ([Chapter 11](part0115.xhtml#3DLGM1-ae331331bc644dc9b658d3634f0748da "Chapter 11. Testing"),
    *Testing*). This wrapper provides the `FixtureController` console for use in your
    console application and test environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the directory `tests/codeception/templates` and add the fixture template
    file, `users.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test console `yii` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Confirm migration generation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check that the `tests/codeception/fixtures` directory contains the new `users.php`
    file, with autogenerated data like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with your own data types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create your own provider with your custom value generating logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the provider into the providers list in the `/tests/codeception/config/config.php`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `status` field into your fixture template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Regenerate fixtures with the console command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that the generated code in the `fixtures/users.php` file contains your
    custom values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `yii2-faker` extension contains a console generator (which uses your templates
    for generating fixture data files) and gives you a prepared instance of the original
    `Faker` object. You can generate all or specific fixtures and can pass custom
    counts or language in console arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: Be careful with the existing test files if your tests use these fixtures,
    because autogenerating totally rewrites old data.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the source code and more information about the extension, see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-faker/tree/master/docs/guide](https://github.com/yiisoft/yii2-faker/tree/master/docs/guide)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-faker-index.html](http://www.yiiframework.com/doc-2.0/ext-faker-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And to learn more about the original library, refer to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/fzaninotto/Faker](https://github.com/fzaninotto/Faker)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11](part0115.xhtml#3DLGM1-ae331331bc644dc9b658d3634f0748da "Chapter 11. Testing"),
    *Testing*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine is an OOP library for image manipulation. It allows you to crop, resize,
    and perform other manipulations with different images with the help of GD, Imagic,
    and Gmagic PHP extensions. Yii2-Imagine is a lightweight static wrapper for the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the extension with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your projects, you can use the extension in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using it as a factory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using inner methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using it as a factory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use an instance of the original `Imagine` library class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this depends on the existing corresponding PHP extensions in your
    system. You can use the `getImagine()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Using inner methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the `crop()`, `thumbnail()`, `watermark()`, `text()`, and `frame()`
    methods for common high-level manipulations like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: See the signatures of all supported methods in the source code of the `\yii\imagine\BaseIm`
    `age` class for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The extension prepares user data, creates an original Imagine object, and calls
    the corresponding method on it. All methods return this original image object.
    You can continue to manipulate the image or save the result to your disk.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension, refer to the following URLs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-imagine-index.html](http://www.yiiframework.com/doc-2.0/ext-imagine-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-imagine](https://github.com/yiisoft/yii2-imagine)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For information about the original library, refer to [http://imagine.readthedocs.org/en/latest/](http://imagine.readthedocs.org/en/latest/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension provides the MongoDB integration for the Yii2 framework and allows
    you to work with MongoDB collection's records via the `ActiveRecord-style` model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install MongoDB using the correct installation process from [https://docs.mongodb.org/manual/installation/](https://docs.mongodb.org/manual/installation/)
    for your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `php5-mongo` PHP extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the component with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, create the new MongoDB database. Run it in the `mongo-client`
    shell and type the database name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this connection information to your `components` config section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new console controller to your console configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the new migration with the shell command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following code into the `up()` and `down()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put the MongoDB debug panel and models generator into your configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the Gii generator:![How to do it…](img/image00476.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the new `MongoDB Model Generator` to generate the new model for your own
    collection:![How to do it…](img/image00491.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Preview** and **Generate** buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check that you have the new model, `app\models\Customer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run Gii again and generate the CRUD:![How to do it…](img/image00507.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that you have generated the `CustomerController` class and run the new
    customer manager page:![How to do it…](img/image00521.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may create, update, and delete your customers' data right now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the **Debug** panel in the page footer:![How to do it…](img/image00532.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see the total MongoDB query count and total execution time. Click on
    the count badge and inspect the queries:![How to do it…](img/image00379.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Basic usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may access databases and collections via the `\yii\mongodb\Collection`
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform the `find` queries, you should use `\yii\mongodb\Query`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: The MongoDB document id (`"_id"` field) is not scalar, but an instance
    of the `\MongoId` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You must not care about the conversion from integer or string `$id` values
    to `\MongoId`, because query builder converts it automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the actual Mongo ID string, you should typecast the `\MongoId` instance
    to a string:'
  prefs: []
  type: TYPE_NORMAL
- en: $query = new Query;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Query`, `ActiveQuery,` and `ActiveRecord` classes of this extension extends
    `yii\db\QueryInterface` and `yii\db\BaseActiveRecord`, and therefore they are
    compatible with the built-in framework `Query`, `ActiveQuery`, and `ActiveRecord`
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `yii\mongodb\ActiveRecord` class for your models and the `yii\mongodb\ActiveQuery`
    builder to retrieve your models and use them in your data provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: For general information on how to use Yii's ActiveRecord, please refer to the
    [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da "Chapter 3. ActiveRecord,
    Model, and Database"), *ActiveRecord, Model, and Database*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension, refer to the following URLs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-mongodb/blob/master/docs/guide/README.md](https://github.com/yiisoft/yii2-mongodb/blob/master/docs/guide/README.md)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-mongodb-index.html](http://www.yiiframework.com/doc-2.0/ext-mongodb-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And for information about the original library, refer to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.mongodb.org/manual/](https://docs.mongodb.org/manual/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For ActiveRecord usage refer to the [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da
    "Chapter 3. ActiveRecord, Model, and Database"), *ActiveRecord, Model, and Database*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ElasticSearch engine adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension is an ActiveRecord-like wrapper for ElasticSearch full text search
    engine integration into the Yii2 framework. It allows you to work with any model
    data and use the ActiveRecord pattern to retrieve and store records in ElasticSearch
    collections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `ElasticSearch` service found at [https://www.elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the extension with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Set the new `ElasticSearch` connection in your application configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Using the Query class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the `Query` class for the low-level querying of records from any
    collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create a command and run it directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Using ActiveRecord
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `ActiveRecord` is a common way to access your records. Just extend the
    `yii\elasticsearch\ActiveRecord` class and implement the `attributes()` method
    to define the attributes of your documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can write the `Customer` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then write the `Order` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You may override `index()` and `type()` to define the index and type this record
    represents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a usage example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use Query DSL for specific queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add facets to your search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Using the ElasticSearch DebugPanel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This extension contains a special panel for the `yii2-debug` module. It allows
    you to view all executed queries. You can include this panel in your configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The extension provides a low-level command builder and high-level `ActiveRecord`
    implementation for querying records from the `ElasticSearch` index.
  prefs: []
  type: TYPE_NORMAL
- en: The extension's ActiveRecord usage is very similar to the database `ActiveRecord`
    as described in [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da
    "Chapter 3. ActiveRecord, Model, and Database"), *ActiveRecord, Model, and Database*,
    besides the `join()`, `groupBy()`, `having(),` and `union()` ActiveQuery operators.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: `ElasticSearch` limits the number of returned records to ten items
    by default. Take care with limits if you use relations with the `via()` option.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension, see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-elasticsearch/blob/master/docs/guide/README.md](https://github.com/yiisoft/yii2-elasticsearch/blob/master/docs/guide/README.md)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-elasticsearch-index.html](http://www.yiiframework.com/doc-2.0/ext-elasticsearch-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also visit the official extension site at [https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information about Query DSL, you can visit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html](http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-flt-query.html](http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-flt-query.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For ActiveRecord usage refer to the [Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da
    "Chapter 3. ActiveRecord, Model, and Database"), *ActiveRecord, Model, and Database*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gii code generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension provides a web-based code generator called Gii for Yii 2 applications.
    You can use Gii to quickly generate models, forms, modules, CRUD, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new migration with the shell command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put the following code into the `up()` and `down()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your projects, you can use this extension in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with GUI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Check that your web configuration file contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your `web/index.php` file will define the development environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous configuration states that when in a development environment, the
    application should include a module named `gii`, which is of the class `yii\gii\Module`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, the module allows access from the IP address, `127.0.0.1`. If you
    work from another location, add your address in the `allowedIPs` property:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `gii` route of your application: `http://localhost/index.php?r=gii`.![Working
    with GUI](img/image00393.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Model Generator** button and type your table name and model name
    in the form:![Working with GUI](img/image00405.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Preview** button. You must view the featured files list:![Working
    with GUI](img/image00417.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to regenerate existing files, Gii will mark those in yellow:![Working
    with GUI](img/image00430.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, you can view the difference between existing and new files and
    overwrite the target if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all that, click the **Generate** button:![Working with GUI](img/image00441.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the new class, `\app\models\Customer`, exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CRUD is an abbreviation for the four common tasks using data on most websites:
    Create, Read, Update, and Delete. To create CRUD using Gii, select the **CRUD
    Generator** section. Specify your model class and type the other fields:![Working
    with GUI](img/image00409.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the new items:![Working with GUI](img/image00478.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, try to open the new controller:![Working with GUI](img/image00381.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a data grid showing the customers in the database table. Try to
    create a new item. You may sort the grid or filter it by entering filter conditions
    in the column headers.
  prefs: []
  type: TYPE_NORMAL
- en: Working with CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gii also provides a console controller for code generation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that your console configuration contains the Gii module settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run any shell command for help:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following command to start the model generation process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check that the new class, `\app\models\Customer`, exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Generate CRUD for your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gii allows you to generate some standard code elements instead of manually typing.
    It provides web-based and console interfaces to work with every generator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension''s usage, see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-start-gii.html](http://www.yiiframework.com/doc-2.0/guide-start-gii.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-gii-index.html](http://www.yiiframework.com/doc-2.0/ext-gii-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-gii/tree/master/docs/guide](https://github.com/yiisoft/yii2-gii/tree/master/docs/guide)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For MongoDB integration refer to the *Creating a widget* recipe in [Chapter
    8](part0086.xhtml#2I0GC1-ae331331bc644dc9b658d3634f0748da "Chapter 8. Extending
    Yii"), *Extending Yii*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pjax jQuery plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pjax is a widget that integrates the **pjax jQuery** plugin. All content that
    is wrapped by this widget will be reloaded by AJAX without refreshing the current
    page. The widget also uses the HTML5 History API to change the current URL in
    your browser's address line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following example, you can see how you use Pjax with the `yii\grid\GridView`
    widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Just wrap any code fragment in the `Pjax::begin()` and `Pjax::end()` calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will render the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: All the wrapped content with pagination and sorting links will be reloaded by
    AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a custom ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pjax gets page content from AJAX requests and then extracts its own DOM element
    with the same ID. You can optimize page rendering performance by rendering content
    without layout, especially for Pjax requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `yii\base\Widget::getId` method increments identifiers, and
    therefore widgets, on any page that has incremented attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'To render using the `renderPartial()` or `renderAjax()` methods, without rendering
    the layout, your own page will have only one widget with the number `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In the result, your own widget will not have found its own block with the `w2`
    selector at the next request.
  prefs: []
  type: TYPE_NORMAL
- en: However, Pjax will find the same block with the `w2` selector in the Ajax response.
    In the result, your own widget will not have found the block with the `w2` selector
    at the next request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, you must manually specify a unique identifier for all your Pjax
    widgets to avoid different conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Using ActiveForm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Pjax works only with links in the wrapped block. If you want to
    use it with the `ActiveForm` widget, you must use the `data-pjax` option of the
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: It adds corresponding listeners on the form submitting event.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `$formSelector` option of the Pjax widget to specify which
    form submission may trigger `pjax`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the client-side script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can subscribe to container events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can reload the container manually by using its selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pjax is a simple wrapper for any code fragment. It subscribes to click events
    of all links in the fragment and replaces the whole page, reloading it into Ajax
    calls. We can use the `data-pjax` attribute for wrapped forms, and any form submissions
    will trigger an Ajax request.
  prefs: []
  type: TYPE_NORMAL
- en: The widget will load and update on-the-fly widget body content without, loading
    the layout resources (JS, CSS).
  prefs: []
  type: TYPE_NORMAL
- en: You may configure the `$linkSelector` of the widget to specify which links should
    trigger Pjax, and configure `$formSelector` to specify which form submission may
    trigger Pjax.
  prefs: []
  type: TYPE_NORMAL
- en: You may disable Pjax for a specific link inside the container by adding the
    `data-pjax="0"` attribute to this link.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension''s usage, see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-widgets-pjax.html](http://www.yiiframework.com/doc-2.0/yii-widgets-pjax.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/jquery-pjax](https://github.com/yiisoft/jquery-pjax)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about client-side options and methods, refer to [https://github.com/yiisoft/jquery-pjax#usage](https://github.com/yiisoft/jquery-pjax#usage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis database driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension allows you to use Redis key-value storage in any project on the
    Yii2 framework. It contains the `Cache` and `Session` storage handlers, as well
    as the extension, which implements the ActiveRecord pattern for access to the
    Redis database records.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using composer, as described in the official guide
    at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the storage: [http://redis.io](http://redis.io).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install all migrations with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, configure the `Connection` class in your configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Direct usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For low-level working with Redis commands, you can use the `executeCommand`
    method of the connection component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use simplified shortcuts instead of `executeCommand` calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Using ActiveRecord
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For access to Redis records via the `ActiveRecord` pattern, your record class
    needs to extend from the `yii\redis\ActiveRecord` base class and implement the
    `attributes()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: A primary key of any model can be defined via the `primaryKey()` method, which
    defaults to `id` if not specified. The primary key needs to be placed in the attribute
    list if you do not manually specify it in the `primaryKey()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a usage example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The extension provides a `Connection` component for low-level access to Redis
    storage records.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use an ActiveRecord-like model with a limited set of methods (`where()`,
    `limit()`, `offset(),` and `indexBy()`). Other methods do not exist because Redis
    does not support SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: There are no tables in Redis, so you cannot define via relations via a junction
    table name. You can only define many-to-many relations via other `hasMany` relations.
  prefs: []
  type: TYPE_NORMAL
- en: For general information on how to use Yii's ActiveRecord, please refer to [Chapter
    3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da "Chapter 3. ActiveRecord,
    Model, and Database"), *ActiveRecord, Model, and Database*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information about the extension''s usage, see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/yiisoft/yii2-redis/blob/master/docs/guide/README.md](https://github.com/yiisoft/yii2-redis/blob/master/docs/guide/README.md)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/ext-redis-index.html](http://www.yiiframework.com/doc-2.0/ext-redis-index.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For information about Redis key-value storage, refer: [http://redis.io/documentation](http://redis.io/documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](part0039.xhtml#1565U1-ae331331bc644dc9b658d3634f0748da "Chapter 3. ActiveRecord,
    Model, and Database"), *ActiveRecord, Model, and Database* for ActiveRecord usage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
