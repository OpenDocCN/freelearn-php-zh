["```php\n$ composer require yiisoft/yii2-gii --dev\n\n```", "```php\nreturn [\n    'bootstrap' => ['gii'],\n    'modules' => [\n        'gii' => [\n                'class'        => 'yii\\gii\\Module', \n                'allowedIPs'   => ['*']\n        ]\n        // [...]\n    ],\n    // [...]\n];\n```", "```php\n<?php\n\n$config = [\n    'id' => 'basic',\n    'basePath' => dirname(__DIR__),\n    'bootstrap' => ['log'],\n    'components' => [\n        'request' => [\n            'cookieValidationKey' => '<random_key>',\n        ],\n        'cache' => [\n            'class' => 'yii\\caching\\FileCache',\n        ],\n        'user' => [\n            'identityClass' => 'app\\models\\User',\n            'enableAutoLogin' => true,\n        ],\n        'errorHandler' => [\n            'errorAction' => 'site/error',\n        ],\n        'log' => [\n            'traceLevel' => YII_DEBUG ? 3 : 0,\n            'targets' => [\n                [\n                    'class' => 'yii\\log\\FileTarget',\n                    'levels' => ['error', 'warning'],\n                ],\n            ],\n        ],\n        'db' => require(__DIR__ . '/db.php'),\n    ],\n    'params' => require(__DIR__ . '/params.php'),\n];\n\nif (APPLICATION_ENV == \"dev\")\n{\n    $config['bootstrap'][] = 'gii';\n    $config['modules'] = [\n        'gii' => [\n            'class' => 'yii\\gii\\Module',\n            'allowedIPs' => ['*']\n        ]\n    ];\n}\n\nreturn $config;\n\n```", "```php\nif (YII_ENV_DEV) // YII_ENV_DEV = true. Define in ./yii\n{                // to enable this constant\n    $config['bootstrap'][] = 'gii';\n    $config['modules'] = [\n        'gii' => 'yii\\gii\\Module'  \n    ];\n}\n```", "```php\nreturn [\n    'bootstrap' => ['gii'],\n    'modules' => [\n        'gii' => 'yii\\gii\\Module',\n        // [...]\n    ],\n    // [...]\n];\n```", "```php\n<?php\n\nYii::setAlias('@tests', dirname(__DIR__) . '/tests');\n\n$config = [\n    'id' => 'basic-console',\n    'basePath' => dirname(__DIR__),\n    'bootstrap' => ['log'],\n    'controllerNamespace' => 'app\\commands',\n    'components' => [\n        'cache' => [\n            'class' => 'yii\\caching\\FileCache',\n        ],\n        'log' => [\n            'targets' => [\n                [\n                    'class' => 'yii\\log\\FileTarget',\n                    'levels' => ['error', 'warning'],\n                ],\n            ],\n        ],\n        'db' => require(__DIR__ . '/db.php'),\n    ],\n    'params' => require(__DIR__ . '/params.php'),\n];\n\nif (APPLICATION_ENV == \"dev\")\n{\n    $config['bootstrap'][] = 'gii';\n    $config['modules'] = [\n        'gii' => 'yii\\gii\\Module'\n    ];\n}\n\nreturn $config;\n\n```", "```php\n$config['modules'] = [\n    'gii' => 'yii\\gii\\Module'\n];\n```", "```php\n$ ./yii help gii\n\n```", "```php\n$ ./yii migrate/up –interactive=0\n\n```", "```php\n    touch models/User.php\n\n    ```", "```php\n    <?php\n\n    namespace app\\models;\n\n    use yii\\db\\ActiveRecord;\n\n    class User extends ActiveRecord {}\n    ```", "```php\n    /**\n     * @return string    the string name of the database table\n     */\n    public static function tableName()\n    {\n        return 'user';\n    }\n    ```", "```php\nchown –R <me>:www-data /path/to/models/\nchmod –R 764 /path/to/models/\n\n```", "```php\n./yii gii/model --tableName=<tablename> --modelClass=<ModelName>\n\n```", "```php\n./yii gii/model --tableName=post --modelClass=Post\n\n```", "```php\n./yii gii/model --tableName=role --modelClass=Role\n\n```", "```php\n<?php\n\nnamespace app\\models;\n\nuse Yii;\n\n/**\n * This is the model class for table \"user\".\n *\n * @property integer $id\n * @property string  $email\n * @property string  $password\n * @property string  $first_name\n * @property string  $last_name\n * @property integer $role_id\n * @property integer $created_at\n * @property integer $updated_at\n *\n * @property Post[] $posts\n * @property Role $role\n */\nclass User extends \\yii\\db\\ActiveRecord\n{\n    /**\n     * @inheritdoc\n     */\n    public static function tableName()\n    {\n        return 'user';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function rules()\n    {\n        return [\n            [['email', 'password'], 'required'],\n            [['role_id', 'created_at', 'updated_at'], 'integer'],\n            [['email', 'password', 'first_name', 'last_name'], 'string', 'max' => 255],\n            [['email'], 'unique']\n        ];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function attributeLabels()\n    {\n        return [\n            'id'            => 'ID',\n            'email'         => 'Email',\n            'password'      => 'Password',\n            'first_name'    => 'First Name',\n            'last_name'     => 'Last Name',\n            'role_id'       => 'Role ID',\n            'created_at'    => 'Created At',\n            'updated_at'    => 'Updated At',\n        ];\n    }\n\n    /**\n     * @return \\yii\\db\\ActiveQuery\n     */\n    public function getPosts()\n    {\n        return $this->hasMany(Post::className(), ['author_id' => 'id']);\n    }\n\n    /**\n     * @return \\yii\\db\\ActiveQuery\n     */\n    public function getRole()\n    {\n        return $this->hasOne(Role::className(), ['id' => 'role_id']);\n    }\n}\n```", "```php\npublic function rules()\n{\n    return [\n        [['email', 'password'], 'required'],\n        [['role_id', 'created_at', 'updated_at'], 'integer'],\n        [['email', 'password', 'first_name', 'last_name'], 'string', 'max' => 255],\n        [['email'], 'unique']\n    ];\n}\n```", "```php\n[\n    // Specifies which attributes should be validated, REQUIRED\n    ['attr', 'attr2', ...],\n\n    // Specifies the validator to be used, REQUIRED\n    // Can be either a built in core validator, \n // a custom validator method name, or a validator alias\n    'validator',\n\n    // Specifies the scenarios that the validator should \n // run on, OPTIONAL\n    'on' => ['scenario1', 'scenario2', ...],\n\n    // Specifies additional properties to be passed \n // to the validator, OPTIONAL\n    'property1' => 'value1', 'property2' => 'value2'\n]\n```", "```php\npublic function rules()\n{\n    return [\n        // [... other validators ..],\n\n        // an inline validator defined as an anonymous function\n        ['email', function ($attribute, $params) {\n                $currentTime = strtotime('now');\n                $openTime    = strtotime('9:00');\n                $closeTime   = strtotime('17:00');\n\n                if ($currentTime > $openTime && $currentTime < $closeTime)\n                    return true;\n                else\n                     $this->addError('email', 'The user\\'s email address can only be changed between 9 AM and 5 PM');\n        }],\n    ];\n}\n```", "```php\npublic function rules()\n{\n    return [\n        // [... other validators ..],\n\n        // a custom validator\n        ['email', 'validateTime']\n    ];\n}\n\npublic function validateTime($attributes, $params)\n{\n    $currentTime = strtotime('now');\n    $openTime = strtotime('9:00');\n    $closeTime = strtotime('17:00');\n\n    if ($currentTime > $openTime && $currentTime < $closeTime)\n        return true;\n    else\n        $this->addError('email', 'The user\\'s email address can only be changed between 9 AM and 5 PM');\n}\n```", "```php\n// app/models/User.php::rules()\npublic function rules()\n{\n    return [\n        // [... other validators ..],\n\n        // a custom validator\n        ['email', 'EditableTime']\n    ];\n}\n\n// app/components/EditableTimeValidator.php\n<?php\n\nnamespace app\\components;\n\nuse yii\\validators\\Validator;\n\nclass EditableTimeValidator extends Validator\n{\n    public function validateAttribute($model, $attribute)\n    {\n        $currentTime = strtotime('now');\n        $openTime = strtotime('9:00');\n        $closeTime = strtotime('17:00');\n\n        if ($currentTime > $openTime && $currentTime < $closeTime)\n            return true;\n        else\n            $this->addError($model, $attribute, 'The user\\'s email address can only be changed between 9 AM and 5 PM');\n        }\n    }\n}\n```", "```php\n[['email'], 'unique', 'That email address is already in use by another user!']\n```", "```php\n$this->addError($attribute, $message);\n```", "```php\n[\n    'email' => [\n        'Email address is invalid.',\n        'The user\\'s email address can only be changed between 9 AM and 5 PM'\n    ],\n    'password' => [\n        'Password is required.' \n    ],\n]\n```", "```php\npublic function attributeLabels()\n{\n    return [\n        'id'            => 'ID',\n        'email'         => 'Email',\n        'password'      => 'Password',\n        'first_name'    => 'First Name',\n        'last_name'     => 'Last Name',\n        'role_id'       => 'Role ID',\n        'created_at'    => 'Created At',\n        'updated_at'    => 'Updated At',\n    ];\n}\n```", "```php\npublic function attributeLabels()\n{\n    return [\n        'id'            => 'ID',\n        'email'         => \\Yii::t('app', 'Email'),\n        // [ ... other attribute labels ... ]\n    ];\n}\n```", "```php\n$user->getAttributeLabel('email'); // returns \"Email\"\n```", "```php\n/**\n * @return \\yii\\db\\ActiveQuery\n */\npublic function getPosts()\n{\n    return $this->hasMany(Post::className(), ['author_id' => 'id']);\n}\n\n/**\n * @return \\yii\\db\\ActiveQuery\n */\npublic function getRole()\n{\n    return $this->hasOne(Role::className(), ['id' => 'role_id']);\n}\n```", "```php\n$user = new User::findOne(4);  // Fetch a user in our db\necho $user->role->name;    // \"Admin\"\n```", "```php\npublic static function getDb()\n{\n    // the \"db2\" component\n    return \\Yii::$app->db2;\n}\n```", "```php\n<?php\n\nuse Yii;\nuse yii\\behaviors\\TimestampBehavior\nclass User extends yii\\db\\ActiveRecord\n{\n    /** \n     * Allow yii to handle population of\n     * created_at and updated_at time\n     */\n    public function behaviors()\n    {   \n            return [\n                TimestampBehavior::className(),\n            ];  \n    }\n    // [... other methods ...]\n}\n```", "```php\npublic function behaviors()\n{\n    return [\n        [\n            'class' => TimestampBehavior::className(),\n            'createdAtAttribute' => 'created',\n            'updatedAtAttribute' => 'updated',\n            'value' => new \\yii\\db\\Expression('NOW()'),\n        ],\n    ];\n}\n```", "```php\n// Find the user in our database with the ID of 1\\. \n// one() returns an instance of User model, for the user with id=1\n$user = User::find()->where(['id' => 1])\n                    ->one();\n\n// Find all users in our database and order them by ID\n// Returns an array of User objects\n$users = User::find()->orderBy('id'])\n                     ->all();\n\n// Returns the number of users in our database\n$userCount = User::find()->count();\n```", "```php\n// Fetches user with the ID of 1\nUser::findOne(1);\n\n// Fetches users with the ID of 1, 2, 3, and 4\nUser::findAll([1, 2, 3, 4]);\n\n// Fetches admin users (role_id = 2 from migration)\n// with the last name of Doe\nUser::findOne([\n    'role_id' => 2,\n    'last_name' => 'Doe'\n]);\n\n// Retrieves users with the last name of Doe\nUser::findAll([\n    'last_name' => 'Doe'\n]);\n```", "```php\nUser::find()->limit(1)->one();\n```", "```php\n$users = User::find()->asArray()\n                     ->all();\n```", "```php\n$user = User::findOne(1);\necho $user->first_name; // \"Jane\"\necho $user->last_name; // \"Doe\"\n```", "```php\n$post = Post::findOne(1);\necho $post->id; // \"1\"\n\n// \"Site Administrator\"\necho $post->author->first_name . ' ' . $post->author->last_name;\n```", "```php\n/**\n * Returns the user's full name\n * @return string\n */\npublic function getFullName()\n{\n    return $this->first_name . ' ' . $this->last_name;\n}\n```", "```php\n$user = User::findOne(1);\necho $user->fullName;      // \"Jane Doe\"\necho $user->getFullName(); // \"Jane Doe\"\n```", "```php\n/**\n * Set the users first and last name from a single variable\n * @param boolean\n */\npublic function setFullName($name)\n{\n    list($firstName, $lastName) = explode(\" \", $name);\n    $this->first_name = $firstName;\n    $this->last_name = $lastName;\n\n    return true;\n}\n```", "```php\n$user = User::findOne(1);\n$user->fullName = 'Janice Doe'; // or $user->setfullName('Janice Doe');\necho $user->first_name; // \"Janice\"\necho $user->last_name;  // \"Doe\"\n```", "```php\n$user = User::findOne(1);\n$user->first_name = \"Janice\";\n$user->last_name = \"Doe\";\n$user->save();\n```", "```php\n$user = User::findOne(1);\necho $user->first_name; // \"Janice\"\necho $user->last_name;  // \"Doe\"\n```", "```php\n$user = User::findOne(1);\n$user->load(\\Yii::$app->request->post());\n$user->save(); \n```", "```php\n$user = new User;\n$user->load(\\Yii::$app->request->post());\n/**\n    $user->attributes = [\n        'first_name' => 'Janice',\n        'last_name'  => 'Doe',\n        // ... and so forth\n    ];\n*/\n$user->save();\n```", "```php\n$user = User::findOne(1);\n$user->delete(); // return true;\n```", "```php\nPost::deleteAll(['author_id' => 4]);\n```", "```php\n<?php\n\nuse Yii;\n\nclass UserForm extends yii/base/Model\n{\n    public $email;\n    public $password;\n    public $name;\n}\n```", "```php\npublic function rules()\n{\n    return [\n        [['email', 'password'], 'required'],\n        [['email'], 'email'],\n        [['email', 'password', 'name'], 'string', 'max' => 255],\n        [['email', 'password'], 'required', 'on' => 'login'],\n        [['email', 'password', 'name'], 'required', 'on' => 'register'],\n    ];\n}\n```", "```php\npublic function scenarios()\n{\n    return [\n        'login'    => ['email', 'password'],\n        'register' => ['email', 'password', 'name']\n    ];  \n}\n```", "```php\npublic function scenarios()\n{\n    $scenarios = parent::scenarios();\n    $scenarios['login'] = ['email', 'password'];\n    $scenarios['register'] = ['email', 'password', 'name'];\n    return $scenarios;\n}\n```", "```php\n// Instantiate a model with a specific scenario\n$model = new UserForm(['scenario' => 'login']);\n\n// Set scenario at runtime\n$model = new UserForm;\n$model->scenario = 'register';\n```", "```php\n<?php\n\n// app\\controllers\\SiteController.php::actionLogin()\npublic function actionLogin()\n{\n    $model = new \\app\\models\\UserForm(['scenario' => 'login']);\n\n    if ($model->load(Yii::$app->request->post())) {\n        if ($model->validate()) {\n            // form inputs are valid, do something here\n            return;\n        }\n    }\n\n    return $this->render('LoginForm', [\n        'model' => $model,\n    ]);\n}\n```", "```php\n./yii gii/form --modelClass=app\\\\models\\\\UserForm --viewName=site/forms/RegisterForm --scenarioName=register --enableI18N=1\n\n```", "```php\n<?php\n\nuse yii\\helpers\\Html;\nuse yii\\widgets\\ActiveForm;\n\n/* @var $this yii\\web\\View */\n/* @var $model app\\models\\UserForm */\n/* @var $form ActiveForm */\n?>\n<div class=\"site-forms-RegisterForm\">\n\n    <?php $form = ActiveForm::begin(); ?>\n\n        <?= $form->field($model, 'email') ?>\n        <?= $form->field($model, 'password') ?>\n        <?= $form->field($model, 'name') ?>\n\n        <div class=\"form-group\">\n            <?= Html::submitButton(Yii::t('app', 'Submit'), ['class' => 'btn btn-primary']) ?>\n        </div>\n    <?php ActiveForm::end(); ?>\n\n</div><!-- site-forms-RegisterForm -->\n```", "```php\n$model = new app\\models\\UserForm(['scenario' => 'login']);\n```", "```php\n// app\\controllers\\SiteController::actionLogin()\nreturn $this->render('login', [\n    'model' => $model,\n]);\n```", "```php\n// views/site/login.php\n<div class=\"site-login\" style=\"margin-top: 100px\";>\n    <div class=\"body-content\">\n        <?php echo $this->render('forms/LoginForm', [ 'model' => $model ]); ?>\n    </div>\n</div>\n```", "```php\n<?php use yii\\widgets\\ActiveForm; ?>\n```", "```php\n<?php $form = ActiveForm::begin(); ?>\n<?php ActiveForm::end(); ?>\n```", "```php\n$form = ActiveForm::begin([\n    'id' => 'login-form',\n    'options' => [\n'class' => 'form-horizontal'\n ]\n]) ?>\n```", "```php\n<?= $form->field($model, 'email') ?>\n<?= $form->field($model, 'password') ?>\n```", "```php\n<?= $form->field($model, 'email')->input('email') ?>\n```", "```php\n<?= $form->field($model, 'password')->passwordInput() ?>\n```", "```php\n<?= $form->field($model, 'name')->textInput()->hint('Please enter your name')->label('Your Name') ?>\n```"]