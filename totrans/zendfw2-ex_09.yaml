- en: Chapter 9. HTML5 Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*HTML5 is the latest version of HTML specification; the final draft is not
    likely to be completed anywhere soon, but most browsers support a majority of
    features that are specified in the latest working draft.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most important offerings of HTML5 are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Audio and video tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for drawing graphics using SVG and CSS3 2D and 3D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local storage, Web/JS workers, and geo location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 form elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the scope of this book, we will be more focused on new form elements. HTML5
    introduces a lot of new form elements. In previous versions of HTML, web developers
    were limited to use just the standard input types provided in the earlier HTML
    specifications. Now with the HTML5 specification, we have different elements for
    various different user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of newly available input elements is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`datetime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime-local`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`week`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`range`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**HTML5 specification**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For further reading, please refer to the HTML5.0 specification available on
    the W3C website: [http://www.w3.org/TR/html5/.](http://www.w3.org/TR/html5/.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link points to specification for the `<input>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/html5/forms.html#the-input-element](http://www.w3.org/TR/html5/forms.html#the-input-element)'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will understand the usage of these input elements.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 input elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zend Framework 2.0 now supports all of the newly specified HTML5 input types;
    these inputs are available under `Zend\Form\Element` like any other input types.
    The following table describes each of these elements along with their class names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\DateTime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Date/Time Element** input field with the time zone set
    to `UTC`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="datetime" name="element-date-time">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `datetime` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_06.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `datetime-local` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\DateTimeLocal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Date/Time Local Element** input field for the client browser's
    time zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="datetime-local" name="element-date-time-local">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `datetime-local` element rendered in Opera 12.0 is shown in the following
    screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_07.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `time` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Time Element** field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="time" name="element-time">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The time element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_08.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `date` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Date`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Date Element** field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="date" name="element-date">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `date` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_09.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `week` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Week`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Week Element** field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="week" name="element-week">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `week` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_10.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `month` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Month`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Month Element** field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="month" name="element-month">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `month` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_11.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `email` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Email`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Email** input field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="email" name="element-email">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `url` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **URL** input field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="url" name="element-url">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `number` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Number Element** input field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="number" name="element-number">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `number` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_12.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `range` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Range`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Range Element** input field using slider control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="range" name="element-range">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `range` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_13.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `color` |'
  prefs: []
  type: TYPE_TB
- en: 'Element: `Zend\Form\Element\Color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to render the **Color Element** input field with a color picker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML tag: `<input type="color" name="element-color">`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `color` element rendered in Opera 12.0 is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![HTML5 input elements](img/1929OS_09_14.jpg) |'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – HTML5 input elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example we will be creating a test HTML5 form for rendering various
    types of HTML5 input elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a test action for rendering the form element `formAction()`; it can be
    created under the new controller `Html5TestController - module/Users/src/Users/Controller/Html5TestController.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add references to `Zend\Form\Form` and `Zend\Form\Element`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add various HTML5 form elements to the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a simple form purely using HTML5 elements that are supported
    by Zend Framework 2.0\. The form in its current shape can be rendered by creating
    the necessary view. Our next task will be to build the view for this form with
    the use of HTML5 helpers and render all the form elements that were added to the
    form.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 view helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zend Framework provides view helpers for rendering all the form elements described
    in the previous section. The `formElement()` view helper can be used to render
    any kind of input dynamically based on the input type, however it is not the suggested
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table gives you the list of standard HTML5 helpers available
    for the HTML5 input elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input type | Helper | Helper function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` | `Zend\Form\View\Helper\FormDateTime` | `formDateTime()` |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime-local` | `Zend\Form\View\Helper\FormDateTimeLocal` | `formDateTimeLocal()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `time` | `Zend\Form\View\Helper\FormTime` | `formTime()` |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | `Zend\Form\View\Helper\FormDate` | `formDate()` |'
  prefs: []
  type: TYPE_TB
- en: '| `week` | `Zend\Form\View\Helper\FormWeek` | `formWeek()` |'
  prefs: []
  type: TYPE_TB
- en: '| `month` | `Zend\Form\View\Helper\FormMonth` | `formMonth()` |'
  prefs: []
  type: TYPE_TB
- en: '| `email` | `Zend\Form\View\Helper\FormEmail` | `formEmail()` |'
  prefs: []
  type: TYPE_TB
- en: '| `url` | `Zend\Form\View\Helper\FormUrl` | `formUrl()` |'
  prefs: []
  type: TYPE_TB
- en: '| `number` | `Zend\Form\View\Helper\FormNumber` | `formNumber()` |'
  prefs: []
  type: TYPE_TB
- en: '| `range` | `Zend\Form\View\Helper\FormRange` | `formRange()` |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | `Zend\Form\View\Helper\FormColor` | `formColor()` |'
  prefs: []
  type: TYPE_TB
- en: Apart from the standard list of view helpers, Zend Framework also provides helpers
    for the `tel` and `search` input types; these input types are an extension of
    the text input, but certain browsers (especially mobile browsers) support stylized
    input options in both these elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table gives you the list of additional HTML5 helpers available
    for the HTML5 input elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input type | Helper | Helper function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `tel` | `Zend\Form\View\Helper\FormTel` | `formTel()` |'
  prefs: []
  type: TYPE_TB
- en: '| `search` | `Zend\Form\View\Helper\FormSearch` | `formSearch()` |'
  prefs: []
  type: TYPE_TB
- en: Time for action – HTML5 view helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this task we will render all the form elements that we created in the previous
    task. We will make use of ZF''s HTML5 view helpers to render these elements. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple view that can be used to render the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make use of view helpers to render various form elements using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the form in an HTML5-compatible browser such as Opera 12\. You should be
    able to see a form like the one shown in the following screenshot:![Time for action
    – HTML5 view helpers](img/1929OS_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, test the same form in an HTML5 non-compatible browser such as IE 9\. You
    should be able to see a form like the one shown in the following screenshot. You
    can see that the unsupported input elements are replaced with textboxes:![Time
    for action – HTML5 view helpers](img/1929OS_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created our first HTML5 form using ZF2 form elements. As of now, Opera
    12 offers the best support for HTML5; other browsers such as Chrome and Safari
    are also good in terms of support. So, if you are testing your HTML5 forms, make
    sure that you are testing them in a browser that is compatible, such as Opera
    12.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**HTML5 browser compatibility**'
  prefs: []
  type: TYPE_NORMAL
- en: Support for HTML5 specifications is inconsistent among various browsers; Opera
    and Chrome seem to offer best support in terms of compliance, but none of them
    are fully compliant. With each new browser version, there is additional support
    for these features. There are many resources available on the Internet that allow
    you to check your browser's compatibility with HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://html5test.com/](http://html5test.com/) is a portal that ranks and compares
    browsers based on their HTML5 support.'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://caniuse.com/](http://caniuse.com/) is also a great website that lets
    users check if they can use a specific HTML5 feature on a specific browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a simple task for you before you move on to using advanced HTML5 attributes.
    Now that you have created a form using all the standard HTML5 elements, try to
    extend the form by using the view helpers to render the `tel` and `search` type
    inputs.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You might have noticed in the beginning of the chapter that we were using new
    attributes such as `min`, `max`, and `step`. These are new attributes that are
    defined in the HTML5 specification that allow developers to specify additional
    configuration on the input element. Some important attributes are discussed in
    the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`max`: Applicable to the **Number**, **Range**, and **Date** fields; allows
    specification of maximum value in the input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min`: Applicable to the **Number**, **Range**, and **Date** fields; allows
    specification of a minimum value in the input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: Applicable to the **Number**, **Range**, and **Date** fields; allows
    specification of an increment value in the input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: Applicable to various textbox style inputs. Allows developers to map
    the field to a data list, thus allowing end users to pick them from the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`placeholder`: Applicable to various textbox style inputs. Allows developers
    to show placeholder text until the element gains focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern`: Applicable to various textbox style inputs. Allows developers to
    validate the user input against a regular express-and-throw-a-validation error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: Prevents users from submitting the form with empty values in the
    required fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiple`: Applicable to file input; allows multiple file uploads from a single
    file control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple file uploads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For implementing multiple file uploads, you will need to set the `multiple`
    attribute on the file input element to `TRUE`. If the browser supports multiple
    file uploads, then the user will be allowed to select multiple files, otherwise
    the control will limit to just one file selection.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – HTML5 multiple file uploads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps for HTML5 multiple file uploads:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `ImageUpload` form; make sure that the `multiple` attribute for
    the `File` element is set to `TRUE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Zend\Filter\File\RenameUpload**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `RenameUpload` filter is used to rename and move the uploaded file to a
    new path specified in the `target`. To find out more please refer to the framework
    documentation at [http://framework.zend.com/manual/2.2/en/modules/zend.filter.file.rename-upload.html.](http://framework.zend.com/manual/2.2/en/modules/zend.filter.file.rename-upload.html.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set up an action to handle the file uploads, and to redirect the user to an
    upload confirmation page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now test the form in your browser that supports multiple file uploads with HTML5,
    for example, Opera 12\. You will see that the file selector interface allows the
    selection of more than one file as shown in the following screenshot:![Time for
    action – HTML5 multiple file uploads](img/1929OS_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you choose **Upload now** and once the upload process is completed, you
    will see the confirmation page as shown in the following screenshot:![Time for
    action – HTML5 multiple file uploads](img/1929OS_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can verify if the files are uploaded successfully and the filters are applied
    by navigating through the `data/images` directory and looking up for the uploaded
    files. You can see that all files start with `temp` and have a `_<random_number>`
    suffix in their filenames:![Time for action – HTML5 multiple file uploads](img/1929OS_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Filters with multiple file uploads**'
  prefs: []
  type: TYPE_NORMAL
- en: When applying filters with multiple file uploads, the filter(s) will be applied
    to all the files that are successfully uploaded with the same filter option settings.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now created an HTML5 multiple file upload form using HTML5 attributes
    and Zend form elements. We have also applied a filter to rename the uploaded files
    and have also seen how filters work in multiple file uploads.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz – HTML5 support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which of the following methods is a newly supported HTML5 input type?
  prefs: []
  type: TYPE_NORMAL
- en: '`text`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`radio`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`checkbox`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`number`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following input types do not have a `Form` element defined in ZF
    2.1?
  prefs: []
  type: TYPE_NORMAL
- en: '`tel`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`color`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`search`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 is a very robust and powerful specification of HTML which is still partially
    supported by most browsers. As newer versions of browsers come out in the market,
    you will get to see much more enhanced support for this specification. In our
    next chapter, we will be using ZF2 to build mobile web applications.
  prefs: []
  type: TYPE_NORMAL
