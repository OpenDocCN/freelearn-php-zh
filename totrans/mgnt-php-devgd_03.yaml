- en: Chapter 3. Frontend Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have focused on the theory behind Magento, its architecture, and
    getting familiar with the common and important concepts of everyday Magento development.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will give practical use to the skills and knowledge we have
    acquired so far by incrementally building a Magento extension for our frontend.
    We will build a fully functional gift registry extension.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Magento
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before jumping ahead and building our extension, let's define an example scenario
    and a scope for our extension. This way, we will have a clear idea of what we
    are building, and more importantly, what we are not building.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our scenario is simple. We want to extend Magento to allow customers to create
    gift registry lists and share them with their friends and families. Customers
    should be able to create multiple gift registries and specify the recipients of
    those gift registries.
  prefs: []
  type: TYPE_NORMAL
- en: 'A gift registry will hold the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Event type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: A store administrator can define multiple event types (birthdays, weddings,
    and gift registries)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create events and assign multiple gift registry lists to each event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers can add products to their registries from the cart, wish list, or
    directly from the product pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers can have multiple gift registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People can share their registries with friends and family through e-mail and/or
    a direct link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friends and family can buy the items from the gift registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a list of possible features that have been left out of this
    example extension due to their complexity, or in the case of social media, due
    to the fact that their APIs and the amount of social media platforms is ever changing.
    However, they are still a good challenge for readers who want to extend this module
    event further. These features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Social media integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep track of the request and fulfilled quantities for each registry item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify multiple and different registry owners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery to the registry owner's address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello Magento!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned about the Magento code pools (core, community,
    and local). As we don't intend to distribute our module on Magento Connect, we
    will create it under the local directory.
  prefs: []
  type: TYPE_NORMAL
- en: All Magento modules are kept inside packages or namespaces. For example, all
    the core Magento modules are kept under the `Mage` namespace. For the purpose
    of this book, we will use **Magento Developer's Guide** (**Mdg**).
  prefs: []
  type: TYPE_NORMAL
- en: The Magento naming convention for modules is `Namespace_Modulename`
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to create the module structure and configuration files. We
    need to create a "namespace" directory under `app/code/local/`.
  prefs: []
  type: TYPE_NORMAL
- en: The namespace can be anything you like. The accepted convention is to use the
    company name or the author name as the namespace. So, our first step will be to
    create the directory `app/code/local/Mdg/`. This directory will hold not only
    our gift registry module, but any future modules we develop.
  prefs: []
  type: TYPE_NORMAL
- en: Under our namespace directory, we will also need to create a new directory with
    the name of our module which will hold all the code of a custom extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s go ahead and create a `Giftregistry` directory. Once that is done,
    let''s create the rest of our directory structure located at `/app/code/local/Mdg/Giftregistry/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Magento is a bit sensitive to the use of camel casing due to its use of factory
    methods. In general, it's a good idea to avoid using camel casing in our module/controller/action
    names. For more information on Magento naming conventions, please see the Appendices
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have learned so far, Magento uses XML files as a central part of its
    configuration. In order for a module to be recognized and activated by Magento,
    we need to create a single file under `app/etc/modules/` following the `Namespace_Modulename.xml`
    convention. Let''s create our file located at `app/etc/modules/Mdg_Giftregistry.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating this file or making any changes to our module configuration
    files, we will need to refresh the Magento configuration cache:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **System** | **Cache Management** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Flush Magento Cache**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we are working on a development extension and are going to make frequent
    changes to the configuration and extension code, it is a good idea to disable
    the cache as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Magento backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **System** | **Cache Management** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the checkboxes under **Cache Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Disable** from the **Actions** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button.![Hello Magento!](img/4195OS_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we have cleared the cache, we can confirm that our extension is active
    by going into the Magento backend's **System** | **Advanced** section and confirming
    our new module is shown on the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello Magento!](img/4195OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Magento now knows about our module, but we haven't told Magento what our module
    is supposed to do. For that, we will need to set up the module configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The XML module configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main files involved in a module configuration, `config.xml` and
    `system.xml`. In addition to these, module configuration is also stored in the
    following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`api.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adminhtml.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wsdl.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wsi.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`convert.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will only focus on `config.xml`. Let''s create our base
    file and break down each of the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating the `config.xml` file under our module `etc/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the given code to `config.xml`, located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All module configurations are contained inside the `<config>` node. Inside this
    node, we have the `<global>` and `<modules>` nodes.
  prefs: []
  type: TYPE_NORMAL
- en: The `<modules>` node is just used to specify the current module version, which
    is later used to decide which installation and upgrade scripts to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main configuration nodes that are most commonly used to specify
    the configuration scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<global>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<adminhtml>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<frontend>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, we will be working on the `<global>` scope. This will make any configuration
    available to both the Magento frontend and backend. Under the `<global>` node,
    we have the following nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<models>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<blocks>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<helpers>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<resources>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, each node follows the same configuration pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each of the nodes is used by the Magento class **factories** to instantiate
    our custom objects. The `<factory_alias>` node is a critical part of our extension
    configuration; it is used by factory methods such as `Mage::getModel()` or `Mage::helper()`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are not defining each specific **Model**, **Block**, or **Helper**,
    just the path where Magento factories can find them. The Magento naming convention
    allows us to have any folder structure under each of these folders and Magento
    will be smart enough to load the appropriated class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Magento, class names and directory structures are one and the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could have created a new model class under `app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3`
    and the factory name to instantiate an object from this class would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's create our first model, or to be more specific, our helper class. Helpers
    are used to contain utility methods used to perform common tasks and can be shared
    among different classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create an empty helper class at `app/code/loca/Mdg/Giftregistry/Helper/Data.php`
    (we will add the helper logic later in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It may seem odd that we are naming our helper `Data`, but this is actually part
    of Magento standards. Each module has a default helper class named `Data`. Another
    interesting thing with helpers is that they can just pass `<factory_alias>` without
    a class-specific class name to the `helper` factory method and this will default
    to the `Data` helper class.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we wanted to instantiate our default helper class, we only need to do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Models and saving data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before jumping straight to creating our models, we need to define clearly what
    type of models we are going to build and how many. So let''s review our example
    scenario. For our gift registry, it appears that we will need two different models,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry model**: This is used to store the gift registry information such
    as gift registry type, address, and recipient information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry item**: This is used to store the information of each of the gift
    registry items (for example, quantity requested, quantity bought, and product_id)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this approach is correct, it does not meet all the requirements of
    our example scenario. By having all the registry information stored in a single
    table, we cannot add more registry types without modifying the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this case, we need to break down our data into multiple tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Registry entity**: This is used to store the gift registry and event information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry type**: By storing the gift registry type into a separate table,
    we can add or remove event types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry item**: This is used to store the information of each of the gift
    registry items (for example, quantity requested, quantity bought, and product_id)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have defined our data structure, we can start building the corresponding
    models that will allow us to access and manipulate our data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating the `Giftregistry` type model, which is used to manage
    the registry types (wedding, birthday, baby shower, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Type.php` and copy the following contents into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Type.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also need to create a resource class. Every Magento data model has its own
    resource class. It is also important to clarify that only models that handle the
    data directly, be it a simple data model or an EAV model, need to have a resource
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder under `Model`, named `Resource`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Type.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Type.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will also need a `collection` class to retrieve all the available
    event types. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `Type`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Collection.php` in the `Type` folder and copy the
    following content into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Type/Collection.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's do the same and create another model to handle the gift registry items.
    This model will hold all the relevant product information for the registry items.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Item.php` and copy the following content into the
    file located at`app/code/local/Mdg/Giftregistry/Model/Item.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s go ahead and create the resource class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Resource` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Item.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Item.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s create the corresponding collection class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `Item` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Item`/`Collection.php` and copy the following content
    into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Item/Collection.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our next step will be to create our `registry` entity. This is the core of
    our registry and is the model that ties everything together. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Entity.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Entity.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s go ahead and create the resource class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Resource` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Entity.php` and copy the following content into the
    file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Entity.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s create the corresponding collection class:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `Model`/`Resource` folder in our module directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `Entity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file named `Entity`/`Collection.php` and copy the following content
    into the file located at `app/code/local/Mdg/Giftregistry/Model/Resource/Entity/Collection.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So far, we haven't done more than blindly create new models by copying code
    and adding classes to our module. Now, let's test our newly created models.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous version of this book, we were using **Interactive Magento Console**
    (**IMC**) to test code on the fly. Nowadays, the community has built a much more
    powerful tool that not only allows us to test code interactively, but also to
    run common and useful commands right from the shell. This tool is called **Netz98/n98-magerun**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This Netz98/n98-magerun tool can be downloaded at [https://github.com/netz98/n98-magerun](https://github.com/netz98/n98-magerun).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fire up the `dev` console and try out the new models by running the
    following command in the root of our Magento installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code assumes you are running a Magento test installation with
    sample data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by loading the `customer` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to instantiate a new registry object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'One handy function that is part of all Magento models is the `getData()` function,
    which returns an array of all the object attributes. Let''s run this function
    on both the `registry` and `customer` objects, and compare the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may notice that the customer has all the datasets for our John Doe example
    record, while the `registry` object returns a completely empty array. Let''s change
    this by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s try to print the `registry` data one more time by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, to make our changes permanent, we need to call the model''s `save()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And oops! Something went wrong when saving the product. We got the following
    error in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What happened? The `save()` function that is being called is part of the parent
    class `Mage_Core_Model_Resource_Abstract`, which in turn calls the abstract class'
    `save()` function, but we are missing a critical part of our `config.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Magento to properly identify which resource class to use, we need
    to specify the resource model class and the matching table for each entity. Let''s
    go ahead and update our configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the extension `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `<models>` node located at `app/code/local/Mdg/Giftregistry/etc/config.xml`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, before we can actually save a product to the database, we have to create
    our database tables first. Next, we will learn how to use setup resources to create
    our table structure and set our default data.
  prefs: []
  type: TYPE_NORMAL
- en: Setup resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our model code, we need to create setup resources in
    order to be able to save them. The setup resources will take care of creating
    the corresponding database tables. Now, we could just use straight **SQL** or
    a tool such as **phpmyadmin** to create all the tables. However, this is not the
    standard practice and by general rule, we should never modify the Magento database
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a setup resource on our configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a resource class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an installer script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a data script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an upgrade script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a setup resource
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we first defined our configuration file, we defined a `<resources>` node,
    which is located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first thing to notice is that `<mdg_giftregistry_setup>` is used as a unique
    identifier for our setup resource. The standard naming convention is `<modulename_setup>`
    and while it is not required, it is highly recommend to follow this naming convention.
    Creating this setup resource is not required for basic setup scripts and `Mage_Core_Model_Resource_Setup`
    can be used instead, but by creating our own setup class, we are planning ahead
    and giving ourselves more flexibility for future improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding this resource node allows Magento to keep track of the versions and data
    of each of the extensions installed. We are going to use that functionality to
    our advantage and make an upgrade script to create the tables we need.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the upgrade script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our next step is to create an upgrade script. This script contains all the
    SQL code to create our tables. First, let''s take another quick look at our `config.xml`
    file. If we remember, the first node defined before our `<global>` node was the
    `<modules>` node, which is located at`app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned before, this node is required on all Magneto modules and is
    used to identify the current installed version of our module. This version number
    is used by Magento to identify which installation and upgrade scripts to run.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A word on naming conventions**: Since Magento 1.6, the setup script naming
    conventions have changed. Originally, the `mysql4-install-x.x.x.php` naming convention
    was used. It is currently deprecated but still supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Magento 1.6, the naming convention for the setup script has changed and
    now, developers can make use of three different script types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install**: This is used when the module is first installed and no record
    of it exists on the `core_resource` table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upgrade**: This is used if the version in the `core_resource` table is lower
    than the one in the `config.xml` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**: This will run after the matching version install/upgrade script and
    is used to populate the tables with required data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data scripts were introduced in Magento 1.6 and are stored under the data/directory
    directly under our module's root. They follow a slightly different convention
    to the install and upgrade scripts, by adding the prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue creating our registry entity table in our installation script,
    which is located at `app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/upgrade-0.2.0-0.2.1.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that due to space constraints, we have not added the full installation
    script. You still need to add the installer code for the item and type tables.
    The full installation file and the code files can be downloaded directly at [https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg).
  prefs: []
  type: TYPE_NORMAL
- en: Now that might look like a lot of code, but it is only creating one of the tables.
    In order to make sense of it, let's break it down and see exactly what the code
    does.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to notice is that even if we are creating and setting database
    tables, we are not writing any SQL. The Magento ORM provides an adapter with the
    database. All the installation, upgrade, and data scripts inherit from `Mage_Core_Model_Resource_Setup`.
    Let's break down each of the functions being used in our installation script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first three lines of the script take off by instantiating both the `resource_setup`
    model and the connection. The rest of the script deals with setting up a new table
    instance and calls the following functions on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addColumn`: This function is used to define each of the table columns and
    takes the following five parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the name of the column'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is the data storage type (`int`, `varchar`, `text`, and so on)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: This is the column''s length'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This is an array of additional options for data storage'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment`: This is the column''s description'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addIndex`: This function is used to define the indexes of a particular table
    and takes the following three parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index`: This is the index''s name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns`: This can be a string with a single column name or an array with
    multiple ones'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This is an array of additional options for data storage'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addForeginKey`: This function is used to define foreign key relationships
    and it takes the following six parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fkName`: This is the foreign key''s name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column`: This is the foreign key column''s name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refTable`: This is the reference table''s name.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refColumn`: This is the reference table column''s name.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDelete`: This is the action to delete a row'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUpdate`: This is the action to update a row'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code creating each of our tables is basically composed of these three functions.
    After each table definition, the following code is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is telling our database adapter to convert our code into SQL and
    run it against the database. There is one important thing to notice. Instead of
    providing or hardcoding the database names, the following code is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is the table alias that we defined earlier inside our `config.xml` files.
    To finish our installer, we need to create a `newTable` instance for each of our
    entities. The data scripts can be used to populate our tables. In our case, this
    will come in handy to set up some base event types.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first need to create a data installation script under the data folder.
    As we mentioned before, the structure is very similar to the SQL folder, and the
    only difference is that we append the data prefix to the matching installation/upgrade
    script. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the module data folder by navigating to `app/code/local/Mdg/Giftregistry/data/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory based on the resource. In this case, it would be `mdg_giftregistry_setup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `mdg_giftregistry_setup`, create a file named `data-upgrade-0.2.0-0.2.1.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the `data-upgrade-0.2.0-0.2.1.php` located at
    `app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-upgrade-0.2.0-0.2.1.php
    <?php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s take a closer look at the last conditional block in the `data-install-0.1.0.php`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we refresh our Magento installation, the error should be gone. If we
    take a closer look at the `mdg_giftregistry_type` table, we should see the following
    records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the upgrade script](img/4195OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we learned before, the installation and data scripts will run the first time
    our module is installed. However, what happens in our case when Magento already
    thinks our module is installed?
  prefs: []
  type: TYPE_NORMAL
- en: As the module is already registered in the `core_resource` table, the installation
    scripts will not be run again unless Magento detects a version change in the extension.
    This is great to handle multiple releases of an extension but not very practical
    for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, it is easy to trick Magento into running our extension installation
    scripts again. We only have to delete the corresponding entry in the `core_resource`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your MySQL console. If you are using our Vagrant box, you can just open
    it by typing `mysql`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we are in the MySQL shell, we need to select our working database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we need to add the entry the `core_resource` table using the following
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we have learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have learned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: To create the base directory structure for our Magento module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role and importance of the configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models and setup resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role and order of installation, upgrade, and data scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up our routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are capable of saving and manipulating the data by using our models,
    we need to provide a way for customers to interact with the actual gift registries.
    Our first step is to need to create valid routes or URLs for the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: As are many things in Magento, this is controlled by the configuration file.
    A route will convert a URL into a valid controller, action, and method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `config.xml` file and insert the following code, located at `app/code/local/Mdg/Giftregistry/etc/config.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down the configuration code we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<frontend>`: Previously, we added all the configurations inside the global
    scope. As we want our routes to only be available in the frontend, we need to
    declare our custom routes under the frontend scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<routers>`: This is the container tag that holds the configuration for our
    custom routes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<mdg_giftregistry>`: The naming convention for this tag is to match the module
    name and is the unique identifier for our route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<frontName>`: As we learned in [Chapter 2](ch02.html "Chapter 2. ORM and Data
    Collections"), *ORM and Data Collections*, break down the URLs into the following
    sections: `http://localhost.com/frontName/actionControllerName/actionMethod/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have defined our route configuration, we need to create an actual controller
    to handle all the incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: IndexController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first step is to create an `IndexController` under our module controllers
    directory. Magento will always try to load the `IndexController` if no controller
    name is specified, this is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating our file, if we go to `http://localhost.com/giftregistry/index/index`,
    we should see a blank page with only the message `This is our test controller`.
    This is because we are not loading the layout. To properly load the layout of
    our customer controller, we need to change our action code to the following, which
    is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Before going into the details of what is happening in the controller action,
    let's create the rest of the controllers and corresponding actions.
  prefs: []
  type: TYPE_NORMAL
- en: We need a controller that takes care of the basic operations for customers so
    that they are able to create, manage, and delete their registries. Also, we require
    a `SearchController` so that family and friends can locate the matching gift registries.
    Finally, we require a `ViewController` to show the registry's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first step is to add the remaining actions to the `IndexController` located
    at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Before we start adding all the logic to the `IndexController`, we need to take
    an extra step to prevent customers who are not logged in from accessing the `giftregistry`
    functionality. The Magento Front Controller already has a very useful method for
    handling this; it's called the `preDispatch()` method that is executed before
    any other action in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `IndexController.php` and add the following code to the beginning
    of the class located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we try to load `http://localhost.com/giftregistry/index/index`, we will
    be redirected to the login page, unless we are logged into the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to add all the logic to each of the controller actions so that
    the controller can properly handle creation, update, and deletion.
  prefs: []
  type: TYPE_NORMAL
- en: The index, new, and edit actions are mostly used to load and render the layout
    so there is not much logic involved in the controller. The `newPostAction()`,
    `editPostAction()`, and the `deleteAction()` controllers, on the other hand, handle
    heavier and more complicated logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with the `newPostAction()` controller. This action is used
    to handle the data received from the `newAction()` form:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `IndexController.php` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing we will add to the action is an `if` statement to check if
    the request is a `Post` request that we can retrieve by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to this, we also want to check if the request has actual data.
    To do this, we can use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we have validated that the request is a proper request, and while we are
    receiving data, we need to actually create a gift registry. To do this, we must
    add a new function inside our registry model:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the registry `Entity` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new function named `updateRegistryData()` and make sure the function
    takes two parameters, `$customer` and `$data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside this function located at `app/code/local/Mdg/Giftregistry/Model/Entity.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function will help us out by adding the form data into the current instance
    of the registry object, which means we need to create one inside our controller.
    Let''s put the code for our controller together, which is located at `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We have created a very basic controller action that will handle the registry
    creation and most of the possible exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue by creating the `editPostAction()` controller. This action is
    very similar to the `newPostAction()` controller. The main difference is that,
    in the case of the `editPostAction()` controller, we are working with an already
    existing registry record so we will need to add some validation before setting
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the action code which is located at`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, this code is pretty much the same as our `newPostAction()` controller,
    with the critical distinction that it tries to load an existing registry before
    updating the data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge**: As the code between `editPostAction()` and `newPostAction()`
    are very similar, try combining both into a single post action that can be reused.
    To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter3/3](http://www.magedevguide.com/challenge/chapter3/3).'
  prefs: []
  type: TYPE_NORMAL
- en: To finalize the `IndexController`, we need to add an action that allows us to
    delete a specific registry record. For this, we will use the `deleteAction()`
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the Magento **Object Relation Mapping** (**ORM**) system, this process
    is really simple. Magento models inherit the `delete` function, which, as the
    name implies, will simply delete that specific model instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside your `IndexController`, add the following code, which is located at
    `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The important actions to notice in our delete controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We check for the right type of request in our action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We instantiate the registry object and verify if it is a valid one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we call the `delete()` function on the registry instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may notice by now that as we have made a critical omission, there is no
    way for us to add an actual product to our cart.
  prefs: []
  type: TYPE_NORMAL
- en: We will skip that particular action for now and create it after we have a better
    understanding of the blocks and layouts involved and how to interact with our
    custom controllers.
  prefs: []
  type: TYPE_NORMAL
- en: SearchController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a working `IndexController` that will handle most of the logic
    to modify actual registries, using the following steps, we will create the next
    controller, `SearchController`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller under the `controllers` directory with the name `SearchController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code into the `SearchController.php` file located at`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will leave our `indexAction()` as is for now and focus on the logic involved
    in `resultsAction()`, which will be taking the search parameters and loading a
    registry collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the complete action code and break it down, this is located
    at `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the previous actions, we are taking the request parameters, but in
    this particular case, we load a gift registry collection and apply a field filter
    for each of the available fields. One thing that stands out is that this is the
    first time we are interacting with the layout directly from a Magento controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: What we are doing here is making the loaded registry collection available to
    that particular block instance.
  prefs: []
  type: TYPE_NORMAL
- en: ViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we need a controller that allows the display of registry details regardless
    of whether a customer is logged in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new controller under the controllers directory with the name `ViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the controller that we just created and use the following placeholder
    code which is located at`app/code/local/Mdg/Giftregistry/controllers/ViewController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So here, we are using a new function named `Mage::register()`, which sets a
    global variable that we can retrieve later into the application flow by any method.
    This function is part of the Magento registry pattern, which comprises the following
    three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Mage::register()`: This is used to set global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage::unregister()`: This is used to unset global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mage::registry()`: This is used to retrieve global variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the registry function to provide access to the registry entity
    later down the application flow, and doing so in this particular case, to the
    view block that we will be creating next.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks and layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 2](ch02.html "Chapter 2. ORM and Data Collections"),
    *ORM and Data Collections*, Magento separates its view layer into blocks, templates,
    and layout files. Blocks are objects that handle part of the logic. Templates
    are `.phtml` files that are a mix of HTML and PHP code. Layout files are XML files
    that control the position of the blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each module has its own layout file that is in charge of updating that specific
    module layout. We need to start by creating a layout file for our module:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `app/design/frontend/base/default/layout/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code located at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By adding our templates and layouts to the base/default theme, we'll make our
    templates and layouts available to all stores and themes.
  prefs: []
  type: TYPE_NORMAL
- en: If we take a closer look at the XML we just pasted, we can see that we have
    a default XML tag and several sets of tags. As we mentioned before, Magento routes
    are formed by a frontend name, a controller, and an action.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the XML tags in the layout file represents one of our controllers and
    actions. For example, `<giftregistry_index_index>` will control the layout of
    our `IndexController` index action. Magento assigns each page a unique handle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Magento to recognize our layout file, we need to declare the layout
    file inside the `config.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the extension `etc/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<frontend>` node, which is located at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: IndexController blocks and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did before, we will start by building the `IndexController`. Let''s define
    which templates and blocks we need to define for each of the actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index`: This is a list of the current customer available registries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`New`: This is used if we need a new form to capture the registry information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Edit`: This loads a specific registry data and loads them in the a form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the index action, we need to create a new block named listed while the
    **New** and **Edit** actions can share their template form:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating the registry's `List` block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `app/code/local/Mdg/Giftregistry/Block/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `List.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following code which is located at `app/code/local/Mdg/Giftregistry/Block/List.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code declares the `list` block that will be used in the `IndexController`.
    The blocks declares `getCustomerRegistries()`, which will check for the current
    customer and try to retrieve a collection of registries based on that customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created a new block, we need to add it to our layout XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<mdg_gifregistry_index_index>` file located
    at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the layout, we declare our block. Inside that declaration, we set the block
    name's template and type. If we try loading the `IndexController` page right now,
    because we have not created our template file, we should see an error about the
    missing template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the template file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `design/frontend/base/default/template/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `mdg/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside that folder, create a file named `list.phtml`, located at `app/design/frontend/base/default/template/mdg/list.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the first time we generate a `.phtml` file. As we mentioned before,
    `.phtml` files are just a combination of PHP and HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of `list.phtml`, the first thing we are doing is loading a collection
    by calling the `getCustomerRegistries()` method. One thing to notice is that we
    are actually calling `$this->getCustomerRegistries()`. Each template is assigned
    to a specific block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are missing a few important things:'
  prefs: []
  type: TYPE_NORMAL
- en: If there are no registries for the current customer, we would only display an
    empty unordered list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no link to delete or edit a specific registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One quick way to check if the collection has registries is to call the `count`
    function and display an error message if the collection is actually empty which
    is located at`app/design/frontend/base/default/template/mdg/list.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We have added a new `if` statement to check that the collection count is not
    empty and link it to the `IndexController` edit action. Finally, if there are
    no registries to show, we are displaying an error message linking to `newAction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue by adding the block and templates for the new action:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<mdg_gifregistry_index_new>` node located
    at`app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we are just displaying a form to post the registry information to `newPostAction()`,
    we are just creating a core/template block with the custom template file that
    will contain the form code. Our template file is located at`app/design/frontend/base/default/template/mdg/new.phtml`
    and will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'So we are doing something new here, we are calling a helper. A helper is a
    class that contains methods that can be reused from blocks, templates, controllers,
    and so on. In our case, we are creating a helper that will retrieve all the available
    registry types:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `app/code/local/Mdg/Giftregistry/Helper`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Data.php` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to it, which is located at`app/code/local/Mdg/Giftregistry/Helper/Data.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to set up the `edit` template. The edit template will be exactly
    the same as the `new` template but with one major difference. We will check for
    the existence of a loaded registry and pre-populate the values of our fields in
    the `edit` template which is located at`app/design/frontend/base/default/template/mdg/edit.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Let's continue by adding the blocks and templates for the edit action.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `<mdg_gifregistry_index_edit>` node located
    at `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once this is set, we can try creating a couple of test registries and modifying
    their properties.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge**: As with the controller, the edit and new form can be combined
    into a single reusable form. To see the answer with the complete code and full
    breakdown, visit [http://www.magedevguide.com/challenge/chapter3/4](http://www.magedevguide.com/challenge/chapter3/4).'
  prefs: []
  type: TYPE_NORMAL
- en: SearchController blocks and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our `SearchController`, we need a search template for our index, and for
    the results, we can actually reuse the registry list template simply by making
    a change to our controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the `template` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named `search.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code located at `app/design/frontend/base/default/template/mdg/search.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will notice a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the helper model to populate the `Event` type IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are posting directly to the search/results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's make the appropriate change to our layout file.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside `<mdg_gifregistry_search_index>` located at`app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the search results, we don't need to create a new block type as we are passing
    the results collection directly to the block. In the layout, our changes will
    be minimal and we can reuse the list block to display the search registry results.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we do need to make a change in the controller. We need to change the
    function from `setResults()` to `setCustomerRegistries()` in the `SearchController`
    located at`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s update the layout files:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `mdg_giftregistry.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside `<mdg_gifregistry_search_results>`, located at
    `app/design/frontend/base/default/layout/mdg_giftregistry.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be the end of our `SearchController` templates. However, there is
    a problem; our search results are displaying the delete and edit links for a registry.
    We need a way to restrict these links only to the owner.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this with the following helper function, located at `app/code/local/Mdg/Giftregistry/Helper/Data.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update our template to use the new `helper` method located at `app/design/frontend/base/default/template/mdg/list.phtml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: ViewController blocks and views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our `ViewController`, we just need to create a new template file and a
    new entry in the `layout.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the template directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a template named `view.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code located at `app/design/frontend/base/default/template/mdg/view.phtml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the layout XML file `<mdg_gifregistry_view_view>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Challenge**: Improve the view form to return an error if there is not an
    actual loaded registry. To see the answer with the complete code and full breakdown,
    visit [http://www.magedevguide.com/challenge/chapter3/5](http://www.magedevguide.com/challenge/chapter3/5).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding products to the registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are almost at the end of the chapter and we are yet to cover how to add products
    to our registries. Due to space concerns in this book, I have decided to move
    this section to the website at [http://www.magedevguide.com/chapter3/adding-products-registry](http://www.magedevguide.com/chapter3/adding-products-registry).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered a lot of ground. We have learned how to extend
    the frontend of Magento, and how to work with routes and controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The Magento layout system allows us to modify and control blocks and the display
    on our store. We also started working with Magento data models and learned how
    to use them to handle and manipulate our data.
  prefs: []
  type: TYPE_NORMAL
- en: We have only touched the surface of frontend development and the data models.
    In the next chapter, we will expand a little more on configuration, models, and
    data, and we will explore and create an admin section on the Magento backend.
  prefs: []
  type: TYPE_NORMAL
