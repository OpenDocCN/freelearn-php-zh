- en: Chapter 6. RESTful Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a REST server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate limiting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you to learn some handy things about the Yii URL router,
    controllers, and views. You will be able to make your controllers and views more
    flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a REST server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following recipe, we use an example that illustrates how you can build
    and set up RESTful APIs with minimal coding effort. This recipe will be reused
    in other recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new application by using the Composer package manager, as described
    in the official guide at [http://www.yiiframework.com/doc-2.0/guide-start-installation.html](http://www.yiiframework.com/doc-2.0/guide-start-installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a migration for creating an article table with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the just-created migration method, `up`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `down` method with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the created `create_film_table` migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the `Film` model with the Gii module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure your application server to use clean URLs. If you are using Apache
    with `mod_rewrite` and `AllowOverride` turned on, then you should add the following
    lines to the `.htaccess` file under your `@web` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a controller, `@app/controller/FilmController.php,` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `@app/config/web.php` configuration file. Add the following config
    of the `urlManager` component:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reconfigure the request component in `@app/config/web.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We extend `\yii\rest\ActiveController` to create our own controller, then for
    the created controller, the `modelClass` property was set. The `\yii\rest\ActiveController`
    class implements a common set of actions for supporting RESTful access to ActiveRecord.
  prefs: []
  type: TYPE_NORMAL
- en: With the above minimal amount of effort, you have already finished creating
    RESTful APIs for accessing film data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The APIs you have created include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /films`: This lists all films page by page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD /films`: This shows the overview information of a film listing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /films`: This creates a new film'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /films/5`: This returns the details of film `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD /films/5`: This shows the overview information of film `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH /films/5 and PUT /films/5`: This updates film `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE /films/5`: This deletes film `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPTIONS /films`: This shows the supported verbs regarding the `/films` endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPTIONS /films/5`: This shows the supported verbs regarding the `/films/5`
    endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It works like this because `\yii\rest\ActiveController` supports the following
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index`: This lists the models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view`: This returns the details of a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create`: This creates a new model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: This updates an existing model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`: This deletes an existing model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: This returns the allowed HTTP methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And there's also a `verbs()` method that defines the allowed request methods
    for each action.
  prefs: []
  type: TYPE_NORMAL
- en: To check that our RESTful API is working correctly, let's send several requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the `GET` request. Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s send a `POST` request. Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get the created film. Run in this the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s send a `DELETE` request. Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now look at content negotiation and customizing the Rest URL rule:'
  prefs: []
  type: TYPE_NORMAL
- en: Content negotiation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also easily format your response with content negotiation behavior.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can put this code to your controller and all data will be returned
    in an XML format.
  prefs: []
  type: TYPE_NORMAL
- en: You should have a look at the full list of formats in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the Rest URL rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have to remember a controller ID, by default, is defined in plural form.
    This is because `yii\rest\UrlRule` automatically pluralizes controller IDs. You
    can simply disable this by setting `yii\rest\UrlRule::$pluralize` to false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would also like to specify how a controller ID should appear in the
    patterns, you are able to add a custom name to an array as a key value pair, where
    the array key is the controller ID and the array value is the actual controller
    ID. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html](http://www.yiiframework.com/doc-2.0/guide-rest-quick-start.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html](http://www.yiiframework.com/doc-2.0/yii-rest-urlrule.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html](http://www.yiiframework.com/doc-2.0/guide-rest-response-formatting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe will have the authentication model set up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Repeat all steps from the *Creating a REST server* recipe in *Getting ready*
    and *How to do it* sections.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify `@app/controllers/FilmController` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `http://yii-book.app/films` in a browser and make sure that we configure
    HTTP Basic Authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00407.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to authenticate. Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And you will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And now try `auth` with `cURL`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should then get a response that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've also added the `authenticator` behavior to the `HttpBasicAuth` class,
    so we will be able to authenticate with just a login and password. You might implement
    any authentication method that is described in the official guide in the RESTful
    web services section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are different ways to send an access token:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Basic Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yii supports all of these authentication methods.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html).
  prefs: []
  type: TYPE_NORMAL
- en: Rate limiting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prevent abuse, you should consider adding rate limiting to your APIs. For
    example, you may want to limit the API usage of each user to be, at most, five
    API calls within a period of one minute. If too many requests are received from
    a user within the stated period of time, a response with the status code 429 (*Too
    Many Requests*) should be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Repeat all the steps from the *Creating a REST server* recipe's *Getting ready*
    and *How to do it...* sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a migration for creating a user allowance table with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the just-created migration method, `up`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `down` methodwith the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the created `create_film_table` migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the `UserAllowance` model with the Gii module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you have to update `@app/controllers/FilmController.php` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable rate limiting, the `User` model class should implement `yii\filters\RateLimitInterface`
    and requires the implementation of three methods: `getRateLimit()`, `loadAllowance(),`
    and `saveAllowance()`. You have to add them with `RATE_LIMIT_NUMBER` and `RATE_LIMIT_RESET`
    constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the identity class implements the required interface, Yii will automatically
    use `[[yii\filters\RateLimiter]]` configured as an action filter for `[[yii\rest\Controller]]`
    to perform a rate limiting check. We've also added the `'authenticator'` behavior
    with the `QueryParamAuth` class. So, we are now able to authenticate with just
    an access token passed through a query parameter. You can add any authentication
    method that is described in the official guide in the RESTful web services section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explain our methods. They are pretty easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: '`getRateLimit()`: This returns the maximum number of allowed requests and the
    time period (example, `[100, 600]` means there can be at most 100 API calls within
    600 seconds)'
  prefs: []
  type: TYPE_NORMAL
- en: '`loadAllowance()`: This returns the number of remaining requests allowed and
    the corresponding UNIX timestamp when the rate limit was last checked'
  prefs: []
  type: TYPE_NORMAL
- en: '`saveAllowance()`: This saves both the number of remaining requests allowed
    and the current UNIX timestamp'
  prefs: []
  type: TYPE_NORMAL
- en: We store our data in the MySQL database. For performance, you might use a NoSQL
    database or another storage system with a higher time to get and load data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s try to check the rate limit feature. Run this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s learn about returned headers. When rate limiting is enabled, by default
    every response will be sent with the following HTTP headers containing the current
    rate limiting information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X-Rate-Limit-Limit**: This is the maximum number of requests allowed within
    a time period'
  prefs: []
  type: TYPE_NORMAL
- en: '**X-Rate-Limit-Remaining**: This is the number of remaining requests in the
    current time period'
  prefs: []
  type: TYPE_NORMAL
- en: '**X-Rate-Limit-Reset**: This is the number of seconds to wait in order to get
    the maximum number of allowed requests'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now try to exceed the limit, request the following URL more than five times
    per minute and you will see `TooManyRequestsHttpExeption`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further information, refer to the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Leaky_bucket](https://en.wikipedia.org/wiki/Leaky_bucket)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html](http://www.yiiframework.com/doc-2.0/guide-rest-rate-limiting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html](http://www.yiiframework.com/doc-2.0/yii-filters-ratelimiter.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you build your API unversioned, it's terrifying. Let's imagine you're pushing
    out a breaking change – basically any change that runs counter to what client
    developers have planned for, such as renaming or deleting a parameter or changing
    the format of the response – you run the risk of bringing down many, if not all,
    of your customers' systems, leading to angry support calls or, worse, massive
    churn. That's why you have to keep your API versioned. In Yii2, versioning can
    be easily done through modules, so versions will be represented as isolated block
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Repeat all steps from the *Creating a REST server* recipe's *Getting ready*
    and *How to do it…* sections.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following structure in your app folder. In total, you have to create
    the `@app/modules` folder with the `v1` and `v2` folders inside it. In each module''s
    folder, you must create controllers and models folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the import modules to `@app/config/web.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/modules/v1/controllers/FilmController.php` and `@app/modules/v2/controllers/FilmController.php`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `@app/modules/v1/Module.php` and `@app/modules/v2/Module.php` with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each module represents an independent version of our API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will be able to specify the API''s version in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By the API's URL. You can specify either v1 or v2 versions. The result is that
    `http://yii-book.app/v1/film` will return a list of films for version 1 and `http://yii-book.app/v2/film`
    will do so for version 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also put a version number through HTTP request headers. As usual, it
    can be done through the `Accept` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, we now have two versions of our API, and we can easily modify the v2 version
    without any headaches. Our old customers continue to work with the v1 version,
    and new customers or those who would like to upgrade will use the v2 version.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fur further information, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html](http://www.yiiframework.com/doc-2.0/guide-rest-versioning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://budiirawan.com/setup-restful-api-yii2/](http://budiirawan.com/setup-restful-api-yii2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you may want to customize the default error response format. For example,
    we need to know the response timestamp and whether the response is successful.
    Frameworks provide an easy way to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Repeat all the steps from the *Creating a REST server* recipe's in the *Getting
    ready* and *How to do it…* sections.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To achieve this goal, you can respond to the `beforeSend` event of the response
    component in `@app/config/web.php,` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn what happens in this code, let''s play a bit with it. First, run this
    in console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, run this in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And you will get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We've changed the response content before sending. That way, it is easy to define
    whether the response is successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information, refer to [http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html](http://www.yiiframework.com/doc-2.0/guide-rest-error-handling.html).
  prefs: []
  type: TYPE_NORMAL
