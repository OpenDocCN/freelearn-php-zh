["```php\n    In order to <business value>\n    As a <stakeholder>\n    I want to <expected outcome>\n    ```", "```php\n    Scenario: <short description>\n    Given <set up scenario>\n    When <steps to take>\n    Then <expected outcome>\n    ```", "```php\n$ composer require behat/behat\n\n```", "```php\n$ composer require phpunit/phpunit\n\n```", "```php\n$ ./vendor/bin/behat --init\n\n```", "```php\nFeature: Setup\n  In order to run database migrations\n  As a developer\n  I need to be able to create the empty schema and migrations table.\n```", "```php\nFeature: Migrations\n  In order to add changes to my database schema\n  As a developer\n  I need to be able to run the migrations script\n```", "```php\nScenario: Schema does not exist and I do not have migrations\n  Given I do not have the \"bdd_db_test\" schema\n  And I do not have migration files\n  When I run the migrations script\n  Then I should have an empty migrations table\n  And I should get:\n    \"\"\"\n    Latest version applied is 0.\n    \"\"\"\n```", "```php\nBackground:\n  Given I do not have the \"bdd_db_test\" schema\n```", "```php\n$ ./vendor/bin/behat\n\n```", "```php\n<?php\n\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Behat\\Context\\SnippetAcceptingContext;\nuse Behat\\Gherkin\\Node\\PyStringNode;\n\nrequire_once __DIR__ . '/../../vendor/phpunit/phpunit/src/Framework/Assert/Functions.php';\n\nclass FeatureContext implements Context, SnippetAcceptingContext\n{\n    private $db;\n    private $config;\n    private $output;\n\n    public function __construct() {\n        $configFileContent = file_get_contents(\n            __DIR__ . '/../../config/app.json'\n        );\n        $this->config = json_decode($configFileContent, true);\n    }\n\n    private function getDb(): PDO {\n        if ($this->db === null) {\n            $this->db = new PDO(\n                \"mysql:host={$this->config['host']}; \"\n                    . \"dbname=bdd_db_test\",\n                $this->config['user'],\n                $this->config['password']\n            );\n        }\n\n        return $this->db;\n    }\n\n    /**\n     * @Given I do not have the \"bdd_db_test\" schema\n     */\n    public function iDoNotHaveTheSchema()\n    {\n        $this->executeQuery('DROP SCHEMA IF EXISTS bdd_db_test');\n    }\n\n    /**\n     * @Given I do not have migration files\n     */\n    public function iDoNotHaveMigrationFiles()\n    {\n        exec('rm db/migrations/*.sql > /dev/null 2>&1');\n    }\n\n    /**\n     * @When I run the migrations script\n     */\n    public function iRunTheMigrationsScript()\n    {\n        exec('php migrate.php', $this->output);\n    }\n\n    /**\n     * @Then I should have an empty migrations table\n     */\n    public function iShouldHaveAnEmptyMigrationsTable()\n    {\n        $migrations = $this->getDb()\n            ->query('SELECT * FROM migrations')\n            ->fetch();\n        assertEmpty($migrations);\n    }\n\n    private function executeQuery(string $query)\n    {\n        $removeSchemaCommand = sprintf(\n            'mysql -u %s %s -h %s -e \"%s\"',\n            $this->config['user'],\n            empty($this->config['password'])\n                ? '' : \"-p{$this->config['password']}\",\n            $this->config['host'],\n            $query\n        );\n\n        exec($removeSchemaCommand);\n    }\n}\n```", "```php\n/**\n * @Then I should get:\n */\npublic function iShouldGet(PyStringNode $string)\n{\n    assertEquals(implode(\"\\n\", $this->output), $string);\n}\n```", "```php\n{\n  \"host\": \"127.0.0.1\",\n  \"schema\": \"bdd_db_test\",\n  \"user\": \"root\",\n  \"password\": \"\"\n}\n```", "```php\n\"autoload\": {\n    \"psr-4\": {\n        \"Migrations\\\\\": \"src/\"\n    }\n}\n```", "```php\n<?php\n\nnamespace Migrations;\n\nuse Exception;\nuse PDO;\n\nclass Schema {\n\n    const SETUP_FILE = __DIR__ . '/../db/setup.sql';\n    const MIGRATIONS_DIR = __DIR__ . '/../db/migrations/';\n\n    private $config;\n    private $connection;\n\n    public function __construct(array $config)\n    {\n        $this->config = $config;\n    }\n\n    private function getConnection(): PDO\n    {\n        if ($this->connection === null) {\n            $this->connection = new PDO(\n                \"mysql:host={$this->config['host']};\"\n                    . \"dbname={$this->config['schema']}\",\n                $this->config['user'],\n                $this->config['password']\n            );\n        }\n\n        return $this->connection;\n    }\n}\n```", "```php\nCREATE TABLE IF NOT EXISTS migrations(\n  version INT UNSIGNED NOT NULL,\n  `time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  status ENUM('success', 'error'),\n  PRIMARY KEY (version, status)\n);\n```", "```php\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$configFileContent = file_get_contents(__DIR__ . '/config/app.json');\n$config = json_decode($configFileContent, true);\n\n$schema = new Migrations\\Schema($config);\n\n$schema->createSchema();\n\n$version = $schema->getLatestMigration();\necho \"Latest version applied is $version.\\n\";\n```", "```php\nScenario: Schema does not exists and I have migrations\n  Given I have migration file 1:\n    \"\"\"\n    CREATE TABLE test1(id INT);\n    \"\"\"\n  And I have migration file 2:\n    \"\"\"\n    CREATE TABLE test2(id INT);\n    \"\"\"\n  When I run the migrations script\n  Then I should only have the following tables:\n    | migrations |\n    | test1      |\n    | test2      |\n  And I should have the following migrations:\n    | 1 | success |\n    | 2 | success |\n  And I should get:\n    \"\"\"\n    Latest version applied is 0.\n    Applied migration 1 successfully.\n    Applied migration 2 successfully.\n    \"\"\"\n```", "```php\n/**\n * @Given I have migration file :version:\n */\npublic function iHaveMigrationFile(\n    string $version,\n    PyStringNode $file\n) {\n    $filePath = __DIR__ . \"/../../db/migrations/$version.sql\";\n    file_put_contents($filePath, $file->getRaw());\n}\n```", "```php\n/**\n * @Then I should only have the following tables:\n */\npublic function iShouldOnlyHaveTheFollowingTables(TableNode $tables) {\n    $tablesInDb = $this->getDb()\n        ->query('SHOW TABLES')\n        ->fetchAll(PDO::FETCH_NUM);\n\n    assertEquals($tablesInDb, array_values($tables->getRows()));\n}\n\n/**\n * @Then I should have the following migrations:\n */\npublic function iShouldHaveTheFollowingMigrations(\n    TableNode $migrations\n) {\n    $query = 'SELECT version, status FROM migrations';\n    $migrationsInDb = $this->getDb()\n        ->query($query)\n        ->fetchAll(PDO::FETCH_NUM);\n\n    assertEquals($migrations->getRows(), $migrationsInDb);\n}\n```", "```php\nFeature: Migrations\n  In order to add changes to my database schema\n  As a developer\n  I need to be able to run the migrations script\n\n  Background:\n    Given I have the bdd_db_test\n\n  Scenario: Migrations are not consecutive\n    Given I have migration 3\n    And I have migration file 4:\n      \"\"\"\n      CREATE TABLE test4(id INT);\n      \"\"\"\n    And I have migration file 6:\n      \"\"\"\n      CREATE TABLE test6(id INT);\n      \"\"\"\n    When I run the migrations script\n    Then I should only have the following tables:\n      | migrations |\n      | test4      |\n    And I should have the following migrations:\n      | 3 | success |\n      | 4 | success |\n    And I should get:\n      \"\"\"\n      Latest version applied is 3.\n      Applied migration 4 successfully.\n      \"\"\"\n\n  Scenario: A migration throws an error\n    Given I have migration file 1:\n      \"\"\"\n      CREATE TABLE test1(id INT);\n      \"\"\"\n    And I have migration file 2:\n      \"\"\"\n      CREATE TABLE test1(id INT);\n      \"\"\"\n    And I have migration file 3:\n      \"\"\"\n      CREATE TABLE test3(id INT);\n      \"\"\"\n    When I run the migrations script\n    Then I should only have the following tables:\n      | migrations |\n      | test1      |\n    And I should have the following migrations:\n      | 1 | success |\n      | 2 | error   |\n    And I should get:\n      \"\"\"\n      Latest version applied is 0.\n      Applied migration 1 successfully.\n      Error applying migration 2: Table 'test1' already exists.\n      \"\"\"\n```", "```php\n/**\n* @Given I have the bdd_db_test\n*/\npublic function iHaveTheBddDbTest()\n{\n    $this->executeQuery('CREATE SCHEMA bdd_db_test');\n}\n\n/**\n * @Given I have migration :version\n */\npublic function iHaveMigration(string $version)\n{\n    $this->getDb()->exec(\n        file_get_contents(__DIR__ . '/../../db/setup.sql')\n    );\n\n    $query = <<<SQL\nINSERT INTO migrations (version, status)\nVALUES(:version, 'success')\nSQL;\n    $this->getDb()\n        ->prepare($query)\n        ->execute(['version' => $version]);\n}\n```", "```php\npublic function applyMigrationsFrom(int $version): bool\n{\n    $filePath = self::MIGRATIONS_DIR . \"$version.sql\";\n\n    if (!file_exists($filePath)) {\n        return false;\n    }\n\n    $connection = $this->getConnection();\n    if ($connection->exec(file_get_contents($filePath)) === false) {\n        $error = $connection->errorInfo()[2];\n        $this->registerMigration($version, 'error');\n        throw new Exception($error);\n    }\n\n    $this->registerMigration($version, 'success');\n    return true;\n}\n\nprivate function registerMigration(int $version, string $status)\n{\n    $query = <<<SQL\nINSERT INTO migrations (version, status)\nVALUES(:version, :status)\nSQL;\n    $params = ['version' => $version, 'status' => $status];\n\n    $this->getConnection()->prepare($query)->execute($params);\n}\n```", "```php\ndo {\n    $version++;\n\n    try {\n        $result = $schema->applyMigrationsFrom($version);\n        if ($result) {\n            echo \"Applied migration $version successfully.\\n\";\n        }\n    } catch (Exception $e) {\n        $error = $e->getMessage();\n        echo \"Error applying migration $version: $error.\\n\";\n        exit(1);\n    }\n} while ($result);\n```", "```php\n$ composer require behat/behat\n$ composer require behat/mink-extension\n$ composer require behat/mink-goutte-driver\n\n```", "```php\n$ ./vendor/bin/behat –init\n\n```", "```php\n<?php\n\nuse Behat\\MinkExtension\\Context\\MinkContext;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\nclass FeatureContext extends MinkContext {\n}\n```", "```php\ndefault:\n  extensions:\n    Behat\\MinkExtension:\n      base_url: \"https://github.com\"\n      sessions:\n        default_session:\n          goutte: ~\n```", "```php\nFeature: Search\n  In order to find repositories\n  As a website user\n  I need to be able to search repositories by name\n\n  Background:\n    Given I am on \"/picahielos\"\n    And I follow \"Repositories\"\n\n  Scenario: Searching existing repository\n    When I fill in \"zap\" for \"q\"\n    And I press \"Search\"\n    Then I should see \"picahielos/zap\"\n\n  Scenario: Searching non-existing repository\n    When I fill in \"yolo\" for \"q\"\n    And I press \"Search\"\n    Then I should not see \"picahielos/yolo\"\n```"]