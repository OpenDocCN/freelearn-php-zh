- en: Chapter 13. Foundation – A Responsive CSS/JavaScript Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I usually describe **Zurb Foundation** and **Twitter Bootstrap** to people as
    "the thing I always wanted to write but never found the time to do".
  prefs: []
  type: TYPE_NORMAL
- en: One could call them frameworks or not, but I recommend you check the websites
    of both to learn what they call themselves. I have used both and compared them
    and have decided to go with **Foundation**. It is a matter of taste. I always
    like to go with the bigger challenge. I preferred studying Finnish over learning
    Swedish. You may find Bootstrap easier to use, as it probably contains more widgets,
    but when I look at a website, it is, in my opinion, easier to recognize that it
    was developed with Bootstrap out of the box than with Foundation. I have included
    an overview of Bootstrap as an appendix.
  prefs: []
  type: TYPE_NORMAL
- en: Our responsive toolkit – Foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned all the pieces of the puzzle we need to
    develop a *mobile first*, progressive enhancement, responsive design web application.
    Mobile first is a way of thinking; for the progressive enhancement part, we used
    `enhance.js` and `modernizr.js`. So, we still need to know how to do the responsive
    part by writing a flexible grid, creating media queries, supporting flexible images,
    and then some.
  prefs: []
  type: TYPE_NORMAL
- en: This is the part that Foundation has already done for us. In addition, it does
    have some cool User Interface (UI) components. One of them is *off-canvas*, an
    awesome feature to be used on mobiles and tablets that, since I have used it,
    I recognize on every major website or app, Facebook included. Check out the excellent
    Foundation documentation for the full list of features. In this chapter, we will
    describe the ones that I found particularly useful.
  prefs: []
  type: TYPE_NORMAL
- en: Foundation components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you download Foundation from [http://foundation.zurb.com/](http://foundation.zurb.com/)
    (I recommend you go with the complete option), you will see that it contains CSS
    components and JavaScript components. I placed them all in a folder `foundation5`
    to make it easier to switch releases, or even to maintain a Bootstrap flavor of
    the site as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what you will get with the download:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index.html**: This is a web page that shows you the most common features
    of Foundation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**css**: This is a folder containing `foundation.css` and `foundation.min.css`,
    the Foundation stylesheet. Include one of these in the `<head>` section of your
    site. In addition, include your own stylesheet. We recommend that you do not modify
    `foundation.css`. Otherwise, if a new version comes along, you end up overwriting
    your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**js/foundation.min.js**: This is all of the Foundation JavaScript. Put this
    right before the end of your `<body>` tag, after jQuery. Also, do not modify this
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**js/foundation**: This is a folder containing separate JavaScript source files
    for the foundation features in case you want to explore how they work. There is
    no need to include this in your web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**js/vendor**: This is a folder containing more useful JavaScript libraries
    such as jQuery and **Modernizr**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundation uses Modernizr, so aren't you glad we already know what this is?
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference `modernizr.js` in the `<head>` section of your site so that all the
    tests can be performed before the page is loaded. Place `jQuery.js` right before
    the end of `<body>`, and before `foundation.min.js`. Then, add the following lines,
    which will start Foundation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Foundation comes with a grid system that, by default, divides your working screen
    real estate into 12 columns. Using classes, you specify for every block on the
    screen how many columns wide you want it to be. There are different classes for
    different sizes; this is the Foundation way to make responsive design easy.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a variety of screens and devices you want your website to look great
    on. Let's look at the larger ones and call them a canvas for a moment. Picture
    two vertical lines, about 1024px apart, centered on the canvas. These will be
    the vertical borders of our working area. Of course, once you reduce the size
    of your viewport, or if you are using a tablet or mobile, your working area is
    going to be the full width of your screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to build the layout of our web page, we are going to divide it into horizontal
    rows, inside which, we will place responsive blocks (`<div>`) of content. For
    those, there are classes we can use, indicating what size screen (think of it
    as what type of T-shirt) we are dealing with, and how many columns we want to
    fill. Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'So, this was our first `row` of things, containing three responsive blocks.
    Now, we build mobile first, so the first class we used indicates how many columns
    wide we want that block to be on a mobile, our small T-shirt. We go for the max:
    12\. If you do not specify anything for sizes medium and large, they will implicitly
    inherit the same values. Always include the `columns` class as well.'
  prefs: []
  type: TYPE_NORMAL
- en: You've probably already figured out what will be going on here. When you display
    this on a small screen, every one of these three blocks will be 12 columns wide,
    which is as far as we can go, so they will be stacked on top of each other. When
    we switch to medium, like when turning our tablet from vertical to landscape,
    we will have a row of two and one below it. On large screens, they will all fit
    next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Class end
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you do not have enough items in a row to fill all columns, the last item
    will be placed on the right edge. If you want to override that, you can add a
    class called `end` for this, and it will appear where you expected it.
  prefs: []
  type: TYPE_NORMAL
- en: Visibility classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is a whole collection of classes that fit right in here that I always
    had trouble finding in the documentation because they were described before the
    *Grid* section: **visibility classes**. Similar to determining how many columns
    wide you want something to be, you may want to decide whether to show it or not,
    depending on the device. The most popular example is probably the three bar menu
    icon you see on small screens replacing the horizontal navigation on "normal"
    size screens. You can choose between hiding and showing for a T-shirt size, or
    one size and up. The names should speak for themselves. It also shows that we
    have more sizes in our T-shirt shop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even more useful are the classes you can use to say yes or no to show things
    depending on the orientation of your screen, and whether or not it is a touch-screen
    device. This is one reason why you should not forget to include `modernizr.js`.
    Here is the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `show-for-touch` | `show-for-medium-up` | `hide-for-small-only` |'
  prefs: []
  type: TYPE_TB
- en: '| `hide-for-touch` | `show-for-large-only` | `hide-for-medium-only` |'
  prefs: []
  type: TYPE_TB
- en: '| `show-for-landscape` | `show-for-large-up` | `hide-for-medium-up` |'
  prefs: []
  type: TYPE_TB
- en: '| `hide-for-landscape` | `show-for-xlarge-only` | `hide-for-large-only` |'
  prefs: []
  type: TYPE_TB
- en: '| `show-for-small-only` | `show-for-xlarge-up` | `hide-for-large-up` |'
  prefs: []
  type: TYPE_TB
- en: '| `show-for-medium-only` | `show-for-xxlarge-up` | `hide-for-xlarge-only` |'
  prefs: []
  type: TYPE_TB
- en: '| `hide-for-xlarge-up` | `hide-for-xxlarge-up` |   |'
  prefs: []
  type: TYPE_TB
- en: The block grid system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This made me pronounce words of wisdom that confused people and will confuse
    you until you have seen the example: having things that are the same size is not
    the same as having things be the same size.'
  prefs: []
  type: TYPE_NORMAL
- en: The classes that belong to the `block grid` system allow you to make sure that
    your item blocks are evenly spaced no matter what screen size. You can do so by
    specifying how many `items` you want in a row, not how many `columns` wide you
    want an item to be.
  prefs: []
  type: TYPE_NORMAL
- en: As a consequence, your items will become smaller on smaller screens, so they
    are no longer the same size, but all items in a row will have an equal size, so
    they all have the same size. Got it? This is a great feature to use in simple
    photo galleries or blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the block grid by assigning the class(es) to a `<ul>` element,
    and your items are the `<li>` elements. A typical class name would be `size-block-grid-number`.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Useful UI elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned before, Foundation is well-documented, and there are books available
    if you want to read and learn even more. In the remainder of this chapter, we
    will go over a select number of UI features I found to be very useful, with a
    few examples that combine them.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will finish the chapter with the Foundation way of doing navigation,
    **on-canvas** and **off-canvas**.
  prefs: []
  type: TYPE_NORMAL
- en: Thumbnails – for simple galleries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Foundation is changing, so at the time of writing this book, there were several
    UI features to produce image sliders or other cool things to do with photographs
    that were going to be majorly modified or replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, everybody needs to have thumbnails of their pictures to be part of
    the design. In Foundation, there is a simple class called `th` that you can use
    that will produce a nicely formatted responsive thumbnail with or without a caption.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This puts nice styling around your thumbnail image and caption, but once you
    click on it, the larger image will be shown in a way decided by your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Reveal modals – your better pop-up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It would be a lot nicer if our larger image would show up in a nice pop-up.
    Pop-ups can be used anywhere on a site. Foundation offers what they call **reveal
    modals**. They are very simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: There is the area on the site where you place something that gives access to
    the pop-up. In the example, it is a simple `<div>`, not even an `<a>` tag. You
    give the element a `data-reveal-id` attribute, with the ID of the element you
    want to reveal as a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, there is the element that has that ID and contains what you want shown
    in the pop-up. Note the `<a>` tag at its end with class `close-reveal-modal`.
    This will trigger the pop-up to disappear when clicked. If you forget this part,
    there is no way that the user can make the pop-up go away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Dropdowns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Maybe you want a drop down (or drop up or drop left) instead of a pop-up. In
    this example, we introduce a `button`, Foundation style. We have also returned
    to the T-shirt shop: both the button and the actual drop down can be given a size
    class. When you include the `content` class, the drop down will be given some
    nice padding. There is also an option that you can use to make the drop down show
    up on hover:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Example – a simple photo gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's now combine a block grid, thumbnails, reveal modals, and a drop down to
    produce a nice responsive photo gallery. We will use the modal to display the
    larger image and the drop down to display technical details of the photograph.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code fragment through the first photograph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Accordions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Accordions** are very useful when you have information that is divided into
    logical sections and you want to expand, and then collapse back, some of the content.
    I find it a great tool to be used in an online resume, for instance, for job history
    sections, or for FAQs. I have used it for years with jQuery UI. Since I discovered
    Foundation, I am using their accordion.'
  prefs: []
  type: TYPE_NORMAL
- en: It is very easy to set up; you can use either a `<ul>` element or a `<dl>` element
    to create your accordion. We are using `<dl>` in our example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Awesome Font awesome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we introduced not only accordions, but also an exciting feature
    that comes from outside Foundation: Font awesome ([www.fontawesome.io](http://www.fontawesome.io)).
    Long gone are the days where you need to have a `.gif`, `.png`, or `.jpg` file
    for every image that you need on your screen, and a separate one for every size
    you need.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now use icons in your code as if they were HTML elements with a certain
    class. Under the hood, they are vector images, so they scale well, and as they
    are HTML elements with a class, you can style them with CSS. There are over 500
    icons to choose from. Font awesome uses the `<i>` tag, deprecated for its original
    use. So, by adding two classes, `fa` and `fa-caret-right`, your `<i>` becomes
    a cool right arrow that helps making the accordion more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, we gave it an additional class, `green`, with the matching
    color in our CSS file. If we click on an item to expand the accordion, we want
    it to be a blue down arrow. That we do in JavaScript, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Foundation uses a class called `active` to indicate that a part of the accordion
    was expanded. So, we check for this class before changing the shape and color
    of our arrow. Of course, we do not know where we were at beforehand, so we started
    off by changing all arrows to `right` and `green` first.
  prefs: []
  type: TYPE_NORMAL
- en: Equalizer – the hardest thing to do with two <div>s made easy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the things I find very hard to do is to make sure that two blocks of
    content that are sitting next to each other always have an equal height. You can,
    of course, give them an equal height in pixels, but what if the content in one
    part grows beyond your specified height, and what if that height is higher than
    the device itself? It would be better not to specify a fixed height and let your
    `<div>`s grow with the content, but then how do you make sure they stay aligned?
  prefs: []
  type: TYPE_NORMAL
- en: '**Equalizer** in Foundation will take care of that for you. It may sound like
    the title of another Arnold Schwarzenegger movie but it is equally powerful. It
    uses HTML5 data-attributes to get the job done. Simply add `data-equalizer` to
    the parent container and `data-equalizer-watch` to all the containers you want
    to be of equal height.'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many more features with Foundation that you want to look at. My intention
    was to highlight the ones that attracted me so much that I decided to use the
    framework. One of them was **orbit**, a great slider for photographs, but that
    one is now deprecated. The Foundation team has recommended an alternative that
    is pretty cool, but either way, these things would be hard to explain in a textbook.
    We will give you the whole enchilada in a bonus chapter, which is available online
    only.
  prefs: []
  type: TYPE_NORMAL
- en: 'We conclude this chapter with the two main navigation components Foundation
    offers: one for an **on-canvas menu bar** and another one for an **off-canvas
    menu**.'
  prefs: []
  type: TYPE_NORMAL
- en: Top bar – not just your regular menu bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Possibly the top shelf of menu bars, the top-bar of Foundation is a very complex
    piece that gives you everything you might need to create an easy to navigate horizontal
    menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your top shelf is divided in three compartments: the *title* area end, the
    *left*, and the *right* list of menu items. Here is an example. For the sake of
    brevity, we did not include any `href` attributes inside the `<a>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can tell, it is relatively straightforward. As is often the case in classical
    website development, menus are `<ul>` elements, and menu items are `<li>` elements.
    If you want submenus, a class called `dropdown` can be used and another `<ul>`
    underneath. The order of left and right does not matter. This is very nice because
    that means you can use the same HTML for your basic version. Just add static HTML
    files as values of an `href` attribute and do your modern, responsive version
    with your own cool JavaScript magic.
  prefs: []
  type: TYPE_NORMAL
- en: Foundation created nice styling around top-bar with several shades of dark grey
    (not fifty), which, of course, you can change in your own CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more magic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is magic. By simply adding one `<li>` element to the title area, you can
    have Foundation create an entire alternate menu for you for tiny screens. Just
    check this out. Add this to the example where indicated and see what happens when
    you make the viewing area very small:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can leave out the `<span>` element so that only the menu icon will show
    up or leave out the `menu-icon` class. Obviously, you should not leave out both,
    otherwise people will not have access to your magic.
  prefs: []
  type: TYPE_NORMAL
- en: Yet more magic – off-canvas, the coolest thing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Place your main menu to the left of your phone until you need it.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I find this the *piece de resistance*, excuse my French, of Foundation. The
    first time I used it, I was impressed. The next time I went to Facebook, I thought
    I recognized it in the Facebook app.
  prefs: []
  type: TYPE_NORMAL
- en: The concept is quite simple. In your code, place the content of a menu that
    should be off-limits at first, to the left. The important thing to control is
    the section that it should be to the left side of. When a user clicks on the menu
    button, typically the menu bar icon, a menu will slide in from the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, we can expand from the previous example. Rather than have Foundation
    give us a mobile version of our original menu, we can now specify a mobile first
    menu content. Here is a small example. There will be a larger one in the bonus
    chapter which we''ll be adding online. We also use the visibility classes to make
    sure that the full-width menu does not appear and is replaced by the menu with
    the icon. Once you click on it, the left off-canvas will appear next to your content.
    The height is determined by where you have placed the closing `<div>` tags for
    off-canvas-wrap and inner-wrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described the Foundation CSS/JavaScript framework. It allows
    us to create a mobile first, responsive design site or application without having
    to write any code for the responsive part. We only have to customize it to our
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the part of the book that covers what I would like to call modern
    web development. In the final chapter, we advance to what most of us will seem
    *avant garde*, although by the time this book is printed, it will be very much
    *en vogue*. And it is all built around a JavaScript thing that is not written
    in JavaScript called **node.js**.
  prefs: []
  type: TYPE_NORMAL
