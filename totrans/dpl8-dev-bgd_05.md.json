["```php\n    name: Recipes\n    type: theme\n    base theme: bartik\n    description: A theme for styling up some delicious recipes!\n    core: 8.x\n    ```", "```php\n    $ curl -sS https://getcomposer.org/installer | php\n    $ mv composer.phar /usr/local/bin/composer\n\n    ```", "```php\n    $ export PATH=\"$HOME/.composer/vendor/bin:$PATH\"\n\n    ```", "```php\n    $ source ~/.bash_profile\n\n    ```", "```php\n    $ composer global require drush/drush:dev-master\n\n    ```", "```php\n    global-styling:\n      version: 1.0\n      css:\n        theme:\n          css/style.css: {}\n    ```", "```php\n      - recipes/global-styling\n    ```", "```php\n    name: Recipes\n    type: theme\n    base theme: bartik\n    description: A theme for styling up some delicious recipes!\n    core: 8.x\n    libraries:\n      - recipes/global-styling\n    ```", "```php\n    .main-content h2 {\n      font-size: 50px;\n    }\n    ```", "```php\n    $ drush cr\n\n    ```", "```php\n    /**\n    * @file\n    *  A delicious notification alert\n    */\n    var delicious = (function ( ) {\n    })();\n    ```", "```php\n    jQuery(delicious.onPageLoad);\n    ```", "```php\n    /**\n    * Pubic object.\n    * @type {{}}\n    */\n    var self = {};\n    ```", "```php\n    /**\n    * The delicious recipe content.\n    *\n    * @type {jQuery}\n    */\n    var $deliciousContent = jQuery('.delicious-content');\n    ```", "```php\n    /**\n    * Bind the recipe content click event.\n    */\n    var bindRecipeContentEvent = function () {\n       $deliciousContent.on('click', function () {\n           deliciousAlert();\n       });\n    };\n\n    /**\n    * Alert the user that this is delicious.\n    */\n    var deliciousAlert = function () {\n       window.alert(Drupal.t(\"This is delicious!\"));\n    };\n    ```", "```php\n    /**\n    * Page load event.\n    */\n    self.onPageLoad = function () {\n       bindRecipeContentEvent();\n    };\n\n    return self;\n    ```", "```php\n    /**\n    * @file\n    *  A delicious notification alert\n    */\n    var delicious = (function ( ) {\n       /**\n        * Pubic object.\n        * @type {{}}\n        */\n       var self = {};\n\n       /**\n        * The delicious recipe content.\n        *\n        * @type {jQuery}\n        */\n       var $deliciousContent = jQuery('.delicious-content');\n\n       /**\n        * Bind the recipe content click event.\n        */\n       var bindRecipeContentEvent = function () {\n           $deliciousContent.on('click', function () {\n               deliciousAlert();\n           });\n       };\n\n       /**\n        * Alert the user that this is delicious.\n        */\n       var deliciousAlert = function () {\n           window.alert(Drupal.t(\"This is delicious!\"));\n       };\n\n       /**\n        * Page load event.\n        */\n       self.onPageLoad = function () {\n           bindRecipeContentEvent();\n       };\n\n       return self;\n    })();\n\n    jQuery(delicious.onPageLoad);\n    ```", "```php\n    delicious:\n     version: 1.0\n     js:\n       js/delicious.js: {}\n     dependencies:\n       - core/jquery\n    ```", "```php\n    {%\n    set classes = [\n    'field',\n    'field--name-' ~ field_name|clean_class,\n    'field--type-' ~ field_type|clean_class,\n    'field--label-' ~ label_display,\n    'delicious-content',\n    ]\n    %}\n    {%\n    set title_classes = [\n    'field__label',\n    label_display == 'visually_hidden' ? 'visually-hidden',\n    ]\n    %}\n\n    {{ attach_library('recipes/delicious') }}\n    {% if label_hidden %}\n       {% if multiple %}\n           <div{{ attributes.addClass(classes, 'field__items') }}>\n               {% for item in items %}\n                   <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>\n               {% endfor %}\n           </div>\n       {% else %}\n           {% for item in items %}\n               <div{{ attributes.addClass(classes, 'field__item') }}>{{ item.content }}</div>\n           {% endfor %}\n       {% endif %}\n    {% else %}\n       <div{{ attributes.addClass(classes) }}>\n           <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>\n           {% if multiple %}\n           <div class='field__items'>\n               {% endif %}\n               {% for item in items %}\n                   <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>\n               {% endfor %}\n               {% if multiple %}\n           </div>\n           {% endif %}\n       </div>\n    {% endif %}\n    ```", "```php\n    $ drush cr\n\n    ```", "```php\n$car = array(\n  'maxSpeed' => 200,\n  'gearbox' => 'six-speed',\n  'optionalUpgrades' => array(\n    'engine' => array(\n        'upgrade' => 'turbo-charged engine',\n        'price' => 500,\n    ),\n    'windows' => array(\n        'upgrade' => 'tinted windows',\n        'price' => 150\n    ),\n  ),\n);\n```", "```php\n    {% if car.maxSpeed %}\n      <div class=\"max-speed\">This car will reach {{ car.maxSpeed }} kph!</div>\n    {% endif %}\n    ```", "```php\n    {% for item in optionalUpgrades %}\n      <li class=\"item-list upgrades\"> {{ item.upgrade }} </li>\n    {% endfor %}\n    ```", "```php\n    {% set seatFinish = \"leather\" %}\n    ```", "```php\n    {% set colourScheme = [ 'blue', 'white', ] %}\n    ```", "```php\n{{ dump() }}\n```", "```php\n<ol>\n    {% for key, value in _context  %}\n        <li>{{ key }}</li>\n    {% endfor %}\n</ol>\n```", "```php\n{{ dump($car) }}\n```", "```php\n{{ dump($car, $truck) }}\n```", "```php\n$drush en kint\n\n```", "```php\n    $ chmod 755 default\n\n    ```", "```php\n    $ drush en kint\n\n    ```", "```php\n    {#\n    {%\n    set classes = [\n    'node',\n    'node--type-' ~ node.bundle|clean_class,\n    node.isPromoted() ? 'node--promoted',\n    node.isSticky() ? 'node--sticky',\n    not node.isPublished() ? 'node--unpublished',\n    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,\n    'clearfix',\n    ]\n    %}\n    {{ attach_library('classy/node') }}\n    <article{{ attributes.addClass(classes) }}>\n       <header>\n           {{ title_prefix }}\n           {% if not page %}\n               <h2{{ title_attributes.addClass('node__title') }}>\n                   <a href=\"{{ url }}\" rel=\"bookmark\">{{ label }}</a>\n               </h2>\n           {% endif %}\n           {{ title_suffix }}\n           {% if display_submitted %}\n               <div class=\"node__meta\">\n                   {{ author_picture }}\n                   <span{{ author_attributes }}>\n             {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}\n           </span>\n                   {{ metadata }}\n               </div>\n           {% endif %}\n       </header>\n       <div{{ content_attributes.addClass('node__content', 'clearfix') }}>\n           {{ content }}\n       </div>\n    </article>\n    ```", "```php\n    $ drush cr.\n\n    ```", "```php\n    <div class=\"preparation recipe-phase\">\n       {{ content.field_preptime }}\n       {{ content.field_ingredients }}\n    </div>\n    <div class=\"cooking recipe-phase\">\n       {{ content.field_cooktime }}\n       {{ content.field_recipeinstructions }}\n    </div>\n    ```", "```php\n    /* Override default image float on the recipe node */\n    .node--type-recipe .field--name-field-image {\n       float: none;\n    }\n\n    .recipe-phase {\n       padding: 20px;\n       margin-bottom: 20px;\n    }\n\n    .preparation {\n       background-color: #e7e7e7;\n    }\n\n    .cooking {\n       background-color: #b0fbad;\n    }\n    ```", "```php\n    $ drush en field_group -y\n\n    ```"]