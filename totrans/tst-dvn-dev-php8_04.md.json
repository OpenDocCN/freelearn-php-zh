["```php\n<?php\nnamespace Animal;\nclass Dog\n{\n    public function returnSound(): string\n    {\n        return \"Bark\";\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nclass Display\n{\n    public function outputSound()\n    {\n        $dog = new Dog();\n        echo $dog->returnSound();\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nclass Dog\n{\n    private string $sound;\n    public function __construct()\n    {\n        $this->setSound(\"Bark\");\n    }\n    public function returnSound(): string\n    {\n        return $this->getSound();\n    }\n    /**\n     * @return string\n     */\n    public function getSound(): string\n    {\n        return $this->sound;\n    }\n    /**\n     * @param string $sound\n     */\n    public function setSound(string $sound): void\n    {\n        $this->sound = $sound;\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nclass Display\n{\n    public function outputSound()\n    {\n        $dog1 = new Dog();\n        $dog2 = $dog1;\n        $dog1->setSound(\"Barky Bark\");\n        // Will return \"Barky Bark\" which was set to $dog1.\n        echo $dog2->returnSound();\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nclass Display\n{\n    public function outputSound()\n    {\n        $dog1 = new Dog();\n        $dog2 = clone $dog1;\n        $dog1->setSound(\"Barky Bark\");\n        // Will return \"Bark\".\n        echo $dog2->returnSound();\n    }\n}\n```", "```php\npublic function computeTotal(int $a, int $b, int $c): int\n{\n    if ($c > 1) {\n        $total = $a + $b;\n    } else if ($c < 1) {\n        $total = $a - $b;\n    } else {\n        $total = 0;\n    }\n    return $total;\n}\n```", "```php\n<?php\nabstract class AbstractPrinter\n{\n    abstract protected function print(string $message): \n        bool;\n}\nclass ConsolePrinter extends AbstractPrinter\n{\n    protected function print(string $message): bool\n    {\n        // TODO: Implement print() method.\n    }\n}\nclass PdfPrinter extends AbstractPrinter\n{\n    protected function print(string $message): bool\n    {\n        // TODO: Implement print() method.\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nclass Dog\n{\n    private string $sound;\n    private string $color;\n    public function __construct()\n    {\n        $this->setSound(\"Bark\");\n        $this->setColor(\"Black\");\n    }\n    public function makeSound(): string\n    {\n        $prefix = \"Hello \";\n        $suffix = \" World\";\n        return $prefix . $this->getSound() . $suffix;\n    }\n    /**\n     * @return string\n     */\n    private function getSound(): string\n    {\n        return $this->sound;\n    }\n    /**\n     * @param string $sound\n     */\n    public function setSound(string $sound): void\n    {\n        $this->sound = $sound . \", my color is: \" . \n            $this->getColor();\n    }\n    /**\n     * @return string\n     */\n    protected function getColor(): string\n    {\n        return $this->color;\n    }\n    /**\n     * @param string $color\n     */\n    protected function setColor(string $color): void\n    {\n        $this->color = $color;\n    }\n}\n```", "```php\n<?php\nnamespace Animal\\Dogs;\nuse Animal\\Dog;\nclass Cavoodle extends Dog\n{\n    public function __construct()\n    {\n        parent::__construct();\n        // Using the protected method from the Dog class.\n        $this->setColor(\"Chocolate\");\n    }\n}\n```", "```php\n<?php\nnamespace Animal;\nuse Animal\\Dogs\\Cavoodle;\nclass Consumer\n{\n    public function sayHello()\n    {\n        $dog = new Dog();\n        $dog->setSound(\"Wooooof!\");\n        // Will output Hello Wooooof!, my color is: Black\n        $dog->makeSound();\n    }\n    public function sayHelloCavoodle()\n    {\n        $cavoodle = new Cavoodle();\n        $cavoodle->setSound(\"Bark Bark!\");\n        // Will output Hello Bark Bark!!, my color is: \n            Chocolate\n        $cavoodle->makeSound();\n    }\n}\n```", "```php\n<?php\nnamespace Animal\\Dogs;\nuse Animal\\Dog;\nclass Cavoodle extends Dog\n{\n    public function __construct()\n    {\n        parent::__construct();\n        // Using the protected method from the Dog class.\n        $this->setColor(\"Chocolate\");\n    }\n}\n```", "```php\npublic function sayHelloCavoodle()\n{\n    $cavoodle = new Cavoodle();\n    $cavoodle->setSound(\"Bark Bark!\");\n    // Will output Hello Bark Bark!!, my color is: \n           Chocolate\n    $cavoodle->makeSound();\n}\n```", "```php\n<?php\nnamespace Animals\\Polymorphism\\AbstractExample;\nabstract class AbstractAnimal\n{\n    abstract public function makeSound();\n}\n```", "```php\n<?php\nnamespace Animals\\Polymorphism\\AbstractExample;\nclass Cat extends AbstractAnimal\n{\n    public function makeSound(): string\n    {\n        return \"meow!\";\n    }\n}\n```", "```php\n<?php\nnamespace Animals\\Polymorphism\\AbstractExample;\nclass Cow extends AbstractAnimal\n{\n    public function makeSound(): string\n    {\n        return \"mooo!\";\n    }\n}\n```", "```php\n<?php\nnamespace Polymorphism\\InterfaceExample;\ninterface PrinterInterface\n{\n    public function print(string $message): string;\n}\n```", "```php\n<?php\nnamespace Polymorphism\\InterfaceExample;\nclass Json implements PrinterInterface\n{\n    public function print(string $message): string\n    {\n        return json_encode(['hello' => $message]);\n    }\n}\n```", "```php\n<?php\nnamespace Polymorphism\\InterfaceExample;\nclass Xml implements PrinterInterface\n{\n    public function print(string $message): string\n    {\n        return \"<message>Hello \" . $message . \"</message>\";\n    }\n}\n```", "```php\n<?php\nnamespace Polymorphism\\InterfaceExample;\nclass Display\n{\n    /**\n     * @var PrinterInterface\n     */\n    private $printer;\n    public function __construct(PrinterInterface $printer)\n    {\n        $this->setPrinter($printer);\n    }\n    /**\n     * @param string $message\n     * @return string\n     */\n    public function displayOutput(string $message): string\n    {\n        // Do some additional logic if needed:\n        $printerOutput = $this->getPrinter()->print\n            ($message);\n        $displayOutput = \"My Output is: \" . $printerOutput;\n        return $displayOutput;\n    }\n    /**\n     * @return PrinterInterface\n     */\n    public function getPrinter(): PrinterInterface\n    {\n        return $this->printer;\n    }\n    /**\n     * @param PrinterInterface $printer\n     */\n    public function setPrinter(PrinterInterface $printer): \n        void\n    {\n        $this->printer = $printer;\n    }\n}\n```"]