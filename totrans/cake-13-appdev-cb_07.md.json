["```php\nCREATE TABLE `posts`(posts\n`id` INT NOT NULL AUTO_INCREMENT,\n`title` VARCHAR(255) NOT NULL,\n`body` TEXT NOT NULL,\n`created` DATETIME NOT NULL,\n`modified` DATETIME NOT NULL,\nPRIMARY KEY(`id`)\n);\n\n```", "```php\nINSERT INTO `posts`(`title`,posts `body`, `created`, `modified`) VALUES\n('Understanding Containable', 'Post body', NOW(), NOW()),\n('Creating your first test case', 'Post body', NOW(), NOW()),\n('Using bake to start an application', 'Post body', NOW(), NOW()),\n('Creating your first helper', 'Post body', NOW(), NOW()),\n('Adding indexes', 'Post body', NOW(), NOW());\n\n```", "```php\n<?php\nclass PostsController extends AppController {\npublic function index() {\n$posts = $this->Post->find('all');\n$this->set(compact('posts'));\n}\n}\n?>\n\n```", "```php\n<h1>Posts</h1>\n<?php if (!empty($posts)) { ?>\n<ul>\n<?php foreach($posts as $post) { ?>\n<li><?php echo $this->Html->link(\n$post['Post']['title'],\narray(\n'action'=>'view',\n$post['Post']['id']\n)\n); ?></li>\n<?php } ?>\n</ul>\n<?php } ?>\n\n```", "```php\n    Router::parseExtensions('rss');\n\n    ```", "```php\n    public $components = array('RequestHandler');\n\n    ```", "```php\n    public function index() {\n    $options = array();\n    if ($this->RequestHandler->isRss()) {\n    $options = array_merge($options, array(\n    'order' => array('Post.created' => 'desc'),\n    'limit' => 5\n    ));\n    }\n    $posts = $this->Post->find('all', $options);\n    $this->set(compact('posts'));\n    }\n\n    ```", "```php\n    <?php\n    $this->set('channel', array(\n    'title' => 'Recent posts',\n    'link' => $this->Rss->url('/', true),\n    'description' => 'Latest posts in my site'\n    ));\n    $items = array();\n    foreach($posts as $post) {\n    $items[] = array(\n    'title' => $post['Post']['title'],\n    'link' => array('action'=>'view', $post['Post']['id']),\n    'description' => array('cdata'=>true, 'value'=>$post['Post']['body']),\n    'pubDate' => $post['Post']['created']\n    );\n    }\n    echo $this->Rss->items($items);\n    ?>\n\n    ```", "```php\n    <?php echo $this->Html->link('Feed', array('action'=>'index', 'ext'=>'rss')); ?>\n\n    ```", "```php\n<item> <title>Understanding Containable</title> <link>http://rss.cookbook7.kramer/posts/view/1</link> <description><![CDATA[Post body]]></description> <pubDate>Fri, 20 Aug 2010 18:55:47 -0300</pubDate> <guid>http://rss.cookbook7.kramer/posts/view/1</guid> </item>\n\n```", "```php\nRouter::parseExtensions('rss', 'xml');\n\n```", "```php\nConfigure::write('Cache.check', true);\n\n```", "```php\npublic $helpers = array('Cache');\n\n```", "```php\npublic function beforeFilter() {\nparent::beforeFilter();\nif ($this->RequestHandler->isRss()) {\n$this->cacheAction = array($this->action => '1 hour');\n}\n}\n\n```", "```php\n    <?php\n    class VideosController extends AppController {\n    public function index() {\n    if (!empty($this->data)) {\n    $videos = $this->Video->search($this->data);\n    $this->set(compact('videos'));\n    }\n    }\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    App::import('Core', 'HttpSocket');\n    class Video extends AppModel {\n    public $useTable = false;\n    protected $_httpSocket;\n    public function __construct($id = false, $table = null, $ds = null) {\n    parent::__construct($id, $table, $ds);\n    $this->_httpSocket = new HttpSocket();\n    }\n    public function search($data) {\n    $query = !empty($data[$this->alias]['q']) ?\n    $data[$this->alias]['q'] :\n    '';\n    $this->_httpSocket->reset();\n    $response = $this->_httpSocket->get(\n    'http://gdata.youtube.com/feeds/api/videos',\n    array(\n    'v' => '2',\n    'alt' => 'jsonc',\n    'q' => $query,\n    'orderby' => 'updated'\n    )\n    );\n    $videos = array();\n    if (!empty($response)) {\n    $response = json_decode($response);\n    if (empty($response) || empty($response->data->items)) {\n    return $videos;\n    }\n    foreach($response->data->items as $item) {\n    $videos[] = array('Video' => array(\n    'url' => $item->player->default,\n    'title' => $item->title,\n    'uploaded' => strtotime($item->uploaded),\n    'category' => $item->category,\n    'description' => $item->description,\n    'thumbnail' => $item->thumbnail->sqDefault\n    ));\n    }\n    }\n    return $videos;\n    }\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    echo $this->Form->create();\n    echo $this->Form->input('q', array('label'=>'Search terms:'));\n    echo $this->Form->end('Search');\n    if (!empty($videos)) {\n    ?>\n    <h1>Search results</h1>\n    <?php foreach($videos as $video) { ?>\n    <div style=\"float: left; clear: both; margin-bottom: 10px;\">\n    <h4><?php echo $this->Html->link($video['Video']['title'], $video['Video']['url']); ?></h4>\n    <?php echo $this->Html->image($video['Video']['thumbnail'], array(\n    'url' => $video['Video']['url'],\n    'align' => 'left',\n    'style' => 'margin-right: 10px;'\n    )); ?>\n    <p><?php echo $video['Video']['description']; ?></p>\n    <br />\n    <p><small>\n    Uploaded on <?php echo date('F d, Y H:i', $video['Video']['uploaded']); ?>\n    in <?php echo $video['Video']['category']; ?>\n    -\n    <strong><?php echo $this->Html->link('PLAY', $video['Video']['url']); ?></strong>\n    </small></p>\n    </div>\n    <?php\n    }\n    }\n    ?>\n\n    ```", "```php\n{\n\"name\": \"Mariano Iglesias\",\n\"profile\": {\n\"url\": \"http://marianoiglesias.com.ar\"\n}\n}\n\n```", "```php\n$user = json_decode($json);\necho $user->name . ' has a website in ' . $user->profile->url;\n\n```", "```php\n<?php\nclass Post extends AppModel {\npublic $validate = array(\n'title' => array('required'=>true, 'rule'=>'notEmpty'),\n'body' => array('required'=>true, 'rule'=>'notEmpty')\n);\n}\n?>\n\n```", "```php\npublic function add() {\n$this->setAction('edit');\n}\npublic function edit($id=null) {\nif (!empty($this->data)) {\nif (!empty($id)) {\n$this->Post->id = $id;\n} else {\n$this->Post->create();\n}\nif ($this->Post->save($this->data)) {\n$this->Session->setFlash('Post created successfully');\n$this->redirect(array('action'=>'index'));\n} else {\n$this->Session->setFlash('Please correct the errors marked below');\n}\n} elseif (!empty($id)) {\n$this->data = $this->Post->find('first', array(\n'conditions' => array('Post.id' => $id)\n));\nif (empty($this->data)) {\n$this->cakeError('error404');\n}\n}\n$this->set(compact('id'));\n}\npublic function delete($id) {\n$post = $this->Post->find('first', array(\n'conditions' => array('Post.id' => $id)\n));\nif (empty($post)) {\n$this->cakeError('error404');\n}\nif (!empty($this->data)) {\nif ($this->Post->delete($id)) {\n$this->Session->setFlash('Post deleted successfully');\n$this->redirect(array('action'=>'index'));\n} else {\n$this->Session->setFlash('Could not delete post');\n}\n}\n$this->set(compact('post'));\n}\n\n```", "```php\n<?php\necho $this->Form->create();\necho $this->Form->inputs(array(\n'title',\n'body'\n));\necho $this->Form->end('Save');\n?>\n\n```", "```php\n<p>Click the <strong>Delete</strong> button to delete\nthe post <?php echo $post['Post']['title']; ?></p>\n<?php\necho $this->Form->create(array('url'=>array('action'=>'delete', $post['Post']['id'])));\necho $this->Form->hidden('Post.id', array('value'=>$post['Post']['id']));\necho $this->Form->end('Delete');\n?>\n\n```", "```php\n<h1>Posts</h1>\n<?php if (!empty($posts)) { ?>\n<ul>\n<?php foreach($posts as $post) { ?>\n<li>\n<?php echo $this->Html->link($post['Post']['title'], array(\n'action'=>'view',\n$post['Post']['id']\n)); ?>\n:\n<?php echo $this->Html->link('Edit', array(\n'action'=>'edit',\n$post['Post']['id']\n)); ?>\n-\n<?php echo $this->Html->link('Delete', array(\n'action'=>'delete',\n$post['Post']['id']\n)); ?>\n</li>\n<?php } ?>\n</ul>\n<?php } ?>\n<?php echo $this->Html->link('Create new Post', array('action'=>'add')); ?>\n\n```", "```php\n    Router::parseExtensions('json');\n\n    ```", "```php\n    public $components = array('RequestHandler');\n\n    ```", "```php\n    <?php\n    echo $content_for_layout;\n    ?>\n\n    ```", "```php\n    <?php\n    foreach($posts as $i => $post) {\n    $post['Post']['url'] = $this->Html->url(array(\n    'action'=>'view',\n    $post['Post']['id']\n    ), true);\n    $posts[$i] = $post;\n    }\n    echo json_encode($posts);\n    ?>\n\n    ```", "```php\n    protected function _isJSON() {\n    return $this->RequestHandler->ext == 'json';\n    }\n\n    ```", "```php\n    public function index() {\n    if ($this->_isJSON() && !$this->RequestHandler->isGet()) {\n    $this->redirect(null, 400);\n    }\n    $posts = $this->Post->find('all');\n    $this->set(compact('posts'));\n    }\n\n    ```", "```php\n    public function beforeFilter() {\n    parent::beforeFilter();\n    if (\n    $this->_isJSON() &&\n    !$this->RequestHandler->isGet()\n    ) {\n    if (empty($this->data) && !empty($_POST)) {\n    $this->data[$this->modelClass] = $_POST;\n    }\n    }\n    }\n    public function beforeRender() {\n    parent::beforeRender();\n    if ($this->_isJSON()) {\n    Configure::write('debug', 0);\n    $this->disableCache();\n    }\n    }\n\n    ```", "```php\n    public function edit($id=null) {\n    if ($this->_isJSON() && !$this->RequestHandler->isPost()) {\n    $this->redirect(null, 400);\n    }\n    if (!empty($this->data)) {\n    if (!empty($id)) {\n    $this->Post->id = $id;\n    } else {\n    $this->Post->create();\n    }\n    if ($this->Post->save($this->data)) {\n    $this->Session->setFlash('Post created successfully');\n    if ($this->_isJSON()) {\n    $this->redirect(null, 200);\n    } else {\n    $this->redirect(array('action'=>'index'));\n    }\n    } else {\n    if ($this->_isJSON()) {\n    $this->redirect(null, 403);\n    } else {\n    $this->Session->setFlash('Please correct the errors marked below');\n    }\n    }\n    } elseif (!empty($id)) {\n    $this->data = $this->Post->find('first', array(\n    'conditions' => array('Post.id' => $id)\n    ));\n    if (empty($this->data)) {\n    if ($this->_isJSON()) {\n    $this->redirect(null, 404);\n    }\n    $this->cakeError('error404');\n    }\n    }\n    $this->set(compact('id'));\n    }\n\n    ```", "```php\n    public function delete($id) {\n    if ($this->_isJSON() && !$this->RequestHandler->isDelete()) {\n    $this->redirect(null, 400);\n    }\n    $post = $this->Post->find('first', array(\n    'conditions' => array('Post.id' => $id)\n    ));\n    if (empty($post)) {\n    if ($this->_isJSON()) {\n    $this->redirect(null, 404);\n    }\n    $this->cakeError('error404');\n    }\n    if (!empty($this->data) || $this->RequestHandler->isDelete()) {\n    if ($this->Post->delete($id)) {\n    $this->Session->setFlash('Post deleted successfully');\n    if ($this->_isJSON()) {\n    $this->redirect(null, 200);\n    } else {\n    $this->redirect(array('action'=>'index'));\n    }\n    } else {\n    if ($this->_isJSON()) {\n    $this->redirect(null, 403);\n    } else {\n    $this->Session->setFlash('Could not delete post');\n    }\n    }\n    }\n    $this->set(compact('post'));\n    }\n\n    ```", "```php\n<?php\nApp::import('Core', 'HttpSocket');\nclass ConsumeShell extends Shell {\nprotected static $baseUrl;\nprotected static $httpSocket;\npublic function main() {\nif (empty($this->args) || count($this->args) != 1) {\n$this->err('USAGE: cake consume <baseUrl>');\n$this->_stop();\n}\nself::$baseUrl = $this->args[0];\n$this->test();\n}\nprotected function test() {\n$this->request('/posts/add.json', 'POST', array(\n'title' => 'New Post',\n'body' => 'Body for my new post'\n));\n$lastId = $this->listPosts();\n$this->hr();\n$this->request('/posts/edit/'.$lastId.'.json', 'POST', array(\n'title' => 'New Post Title',\n'body' => 'New body for my new post'\n));\n$this->listPosts();\n$this->hr();\n$this->request('/posts/delete/'.$lastId.'.json', 'DELETE');\n$this->listPosts();\n}\nprotected function request($url, $method='GET', $data=null) {\nif (!isset(self::$httpSocket)) {\nself::$httpSocket = new HttpSocket();\n} else {\nself::$httpSocket->reset();\n}\n$body = self::$httpSocket->request(array(\n'method' => $method,\n'uri' => self::$baseUrl . '/' . $url,\n'body' => $data\n));\nif ($body === false || self::$httpSocket->response['status']['code'] != 200) {\n$error = 'ERROR while performing '.$method.' to '.$url;\nif ($body !== false) {\n$error = '[' . self::$httpSocket->response['status']['code'] . '] ' . $error;\n}\n$this->err($error);\n$this->_stop();\n}\nreturn $body;\n}\nprotected function listPosts() {\n$response = json_decode($this->request('/posts.json'));\n$lastId = null;\nforeach($response as $item) {\n$lastId = $item->Post->id;\n$this->out($item->Post->title . ': ' . $item->Post->url);\n}\nreturn $lastId;\n}\n}\n?>\n\n```", "```php\n    ../cake/console/cake consume http://localhost\n\n    ```", "```php\n    ..\\cake\\console\\cake.bat consume http://localhost\n\n    ```", "```php\npublic function beforeFilter() {\nparent::beforeFilter();\nif ($this->_isJSON()) {\n$this->Auth->allow($this->action);\n$this->Security->loginOptions = array(\n'type' => 'basic',\n'realm' => 'My REST services,services\n'login' => '_restLogin'\n);\n$this->Security->requireLogin($this->action);\n$this->Security->validatePost = false;\n}\nif (\n$this->_isJSON() &&\n!$this->RequestHandler->isGet()\n) {\nif (empty($this->data) && !empty($_POST)) {\n$this->data[$this->modelClass] = $_POST;\n}\n}\n}\n\n```", "```php\npublic function _restLogin($credentials) {\n$login = array();\nforeach(array('username', 'password') as $field) {\n$value = $credentials[$field];\nif ($field == 'password' && !empty($value)) {\n$value = $this->Auth->password($value);\n}\n$login[$this->Auth->fields[$field]] = $value;\n}\nif (!$this->Auth->login($login)) {\n$this->Security->blackhole($this, 'login');\n}\n}\n\n```", "```php\n    ../cake/console/cake consume http://localhost\n\n    ```", "```php\n    ..\\cake\\console\\cake.bat consume http://localhost\n\n    ```", "```php\nprotected static $user;\nprotected static $password;\n\n```", "```php\npublic function main() {\nif (empty($this->args) || count($this->args) != 3) {\n$this->err('USAGE: cake consume <baseUrl> <user> <password>');\n$this->_stop();\n}\nlist(self::$baseUrl, self::$user, self::$password) = $this->args;\n$this->test();\n}\n\n```", "```php\nprotected function request($url, $method='GET', $data=null) {\nif (!isset(self::$httpSocket)) {\nself::$httpSocket = new HttpSocket();\n} else {\nself::$httpSocket->reset();\n}\n$body = self::$httpSocket->request(array(\n'method' => $method,\n'uri' => self::$baseUrl . '/' . $url,\n'body' => $data,\n'auth' => array(\n'user' => self::$user,\n'pass' => self::$password\n)\n));\nif ($body === false || self::$httpSocket->response['status']['code'] != 200) {\n$error = 'ERROR while performing '.$method.' to '.$url;\nif ($body !== false) {\n$error = '[' . self::$httpSocket->response['status']['code'] . '] ' . $error;\n}\n$this->err($error);\n$this->_stop();\n}\nreturn $body;\n}\n\n```", "```php\n    ../cake/console/cake consume http://localhost user password\n\n    ```", "```php\n    ..\\cake\\console\\cake.bat consume http://localhost user password\n\n    ```", "```php\n    ALTER TABLE `users`users\n    ADD COLUMN `token` CHAR(40) default NULL,\n    ADD COLUMN `token_used` DATETIME default NULL,\n    ADD COLUMN `token_uses` INT NOT NULL default 0,\n    ADD UNIQUE KEY `token`(`token`);\n\n    ```", "```php\n    public function token() {\n    $token = sha1(String::uuid());\n    $this->User->id = $this->Auth->user('id');\n    if (!$this->User->saveField('token', $token)) {\n    $token = null;\n    $this->Session->setFlash('There was an error generating this token');\n    }\n    $this->set(compact('token'));\n    }\n\n    ```", "```php\n    <h1>API access token</h1>\n    <?php if (!empty($token)) { ?>\n    <p>Your new API access token is: <strong><?php echo $token; ?></strong></p>\n    <?php } ?>\n\n    ```", "```php\n    Configure::write('API', array(\n    'maximum' => 6,\n    'time' => '2 minutes'\n    ));\n\n    ```", "```php\n    public function _restLogin($credentials) {\n    $model = $this->Auth->getModel();\n    try {\n    $id = $model->useToken($credentials['username']);\n    if (empty($id)) {\n    $this->redirect(null, 503);\n    }\n    } catch(Exception $e) {\n    $id = null;\n    }\n    if (empty($id) || !$this->Auth->login(strval($id))) {\n    $this->Security->blackhole($this, 'login');\n    }\n    }\n\n    ```", "```php\n    <?php\n    class User extends AppModel {\n    public function useToken($token) {\n    $user = $this->find('first', array(\n    'conditions' => array($this->alias.'.token' => $token),\n    'recursive' => -1\n    ));\n    if (empty($user)) {\n    throw new Exception('Token is not valid');\n    }\n    $apiSettings = Configure::read('API');\n    $tokenUsed = !empty($user[$this->alias]['token_used']) ? $user[$this->alias]['token_used'] : null;\n    $tokenUses = $user[$this->alias]['token_uses'];\n    if (!empty($tokenUsed)) {\n    $tokenTimeThreshold = strtotime('+' . $apiSettings['time'], strtotime($tokenUsed));\n    }\n    $now = time();\n    if (!empty($tokenUsed) && $now <= $tokenTimeThreshold && $tokenUses >= $apiSettings['maximum']) {\n    return false;\n    }\n    $id = $user[$this->alias][$this->primaryKey];\n    if (!empty($tokenUsed) && $now <= $tokenTimeThreshold) {\n    $this->id = $id;\n    $this->saveField('token_uses', $tokenUses + 1);\n    } else {\n    $this->id = $id;\n    $this->save(\n    array('token_used'=>date('Y-m-d H:i:s'), 'token_uses'=>1),\n    false,\n    array('token_used', 'token_uses')\n    );\n    }\n    return $id;\n    }\n    }\n    ?>\n\n    ```", "```php\n    protected $token;\n\n    ```", "```php\n    public function main() {\n    if (empty($this->args) || count($this->args) != 2) {\n    $this->err('USAGE: cake consume <baseUrl> <token>');\n    $this->_stop();\n    }\n    list(self::$baseUrl, self::$token) = $this->args;\n    $this->test();\n    }\n\n    ```", "```php\n    protected function request($url, $method='GET', $data=null) {\n    if (!isset(self::$httpSocket)) {\n    self::$httpSocket = new HttpSocket();\n    } else {\n    self::$httpSocket->reset();\n    }\n    $body = self::$httpSocket->request(array(\n    'method' => $method,\n    'uri' => self::$baseUrl . '/' . $url,\n    'body' => $data,\n    'auth' => array(\n    'user' => self::$token,\n    'pass' => ''\n    )\n    ));\n    if ($body === false || self::$httpSocket->response['status']['code'] != 200) {\n    $error = 'ERROR while performing '.$method.' to '.$url;\n    if ($body !== false) {\n    $error = '[' . self::$httpSocket->response['status']['code'] . '] ' . $error;\n    }\n    $this->err($error);\n    $this->_stop();\n    }\n    return $body;\n    }\n\n    ```", "```php\n    ../cake/console/cake consume http://localhost token\n\n    ```", "```php\n    ..\\cake\\console\\cake.bat consume http://localhost token\n\n    ```"]