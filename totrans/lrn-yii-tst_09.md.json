["```php\npeach ~ $ sudo -s\nroot peach # su jenkins -\njenkins peach $ cd ~\njenkins ~ $ pwd\n/var/lib/jenkins\njenkins ~ $ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/var/lib/jenkins/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /var/lib/jenkins/.ssh/id_rsa.\nYour public key has been saved in /var/lib/jenkins/.ssh/id_rsa.pub.\nThe key fingerprint is:\nff:be:b1:ee:c2:69:82:96:00:e4:9d:dd:67:cf:1e:d7 jenkins@mangotree\nThe key's randomart image is:\n+---[RSA 2048]----+\n|                 |\n|                 |\n| . . o. .        |\n|+ . *.oo  .      |\n|.o o .o+S. E     |\n|+ o   .+o        |\n|+*. . o.         |\n|+. . .           |\n|                 |\n+-----------------+\n\n```", "```php\nroot jenkins # xclip -sel clip < /var/lib/jenkins/.ssh/id_rsa.pub\n\n```", "```php\nNo protocol specified\nError: Can't open display: :0\n\n```", "```php\n// composer.json\n\"phploc/phploc\": \"@stable\",\n\"pdepend/pdepend\": \"@stable\",\n\"phpmd/phpmd\": \"@stable\",\n\"sebastian/phpcpd\": \"@dev\",\n\"yiisoft/yii2-coding-standards\": \"*\",\n\"theseer/phpdox\": \"@stable\"\n```", "```php\n<target name=\"lint\" description=\"Perform syntax check of sourcecode files\">\n    <apply executable=\"php\" failonerror=\"true\">\n        <arg value=\"-l\" />\n\n <fileset dir=\"${basedir}/models\">\n <include name=\"**/*.php\" />\n <modified />\n </fileset>\n <fileset dir=\"${basedir}/modules\">\n <include name=\"**/*.php\" />\n <modified />\n </fileset>\n <fileset dir=\"${basedir}/controllers\">\n <include name=\"**/*.php\" />\n <modified />\n </fileset>\n <fileset dir=\"${basedir}/tests\">\n <include name=\"**/*.php\" />\n <modified />\n </fileset>\n    </apply>\n</target>\n```", "```php\n<target name=\"phploc-ci\"\n        depends=\"prepare\"\n        description=\"Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.\">\n    <exec executable=\"${toolsdir}phploc\">\n        <arg value=\"--count-tests\" />\n        <arg value=\"--log-csv\" />\n        <arg path=\"${basedir}/build/logs/phploc.csv\" />\n        <arg value=\"--log-xml\" />\n        <arg path=\"${basedir}/build/logs/phploc.xml\" />\n <arg path=\"${basedir}/models\" />\n <arg path=\"${basedir}/controllers\" />\n <arg path=\"${basedir}/modules\" />\n <arg path=\"${basedir}/tests\" />\n    </exec>\n</target>\n```", "```php\n<target name=\"pdepend\"\n        depends=\"prepare\"\n        description=\"Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.\">\n    <exec executable=\"${toolsdir}pdepend\">\n        <arg value=\"--jdepend-xml=${basedir}/build/logs/jdepend.xml\" />\n        <arg value=\"--jdepend-chart=${basedir}/build/pdepend/dependencies.svg\" />\n        <arg value=\"--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg\" />\n        <arg path=\"${basedir}/models,${basedir}/controllers,${basedir}/modules,${basedir}/tests\" />\n    </exec>\n</target>\n```", "```php\n<target name=\"phpmd-ci\"\n        depends=\"prepare\"\n        description=\"Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.\">\n    <exec executable=\"${toolsdir}phpmd\">\n        <arg path=\"${basedir}/models,${basedir}/controllers,${basedir}/modules\" />\n        <arg value=\"xml\" />\n        <arg path=\"${basedir}/build/phpmd.xml\" />\n        <arg value=\"--reportfile\" />\n        <arg path=\"${basedir}/build/logs/pmd.xml\" />\n    </exec>\n</target>\n```", "```php\n<target name=\"phpcs-ci\"\n        depends=\"prepare\"\n        description=\"Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.\">\n    <exec executable=\"${toolsdir}phpcs\" output=\"/dev/null\">\n        <arg value=\"--report=checkstyle\" />\n        <arg value=\"--report-file=${basedir}/build/logs/checkstyle.xml\" />\n        <arg value=\"--standard=${basedir}/vendor/yiisoft/yii2-coding-standards/Yii2/ruleset.xml\" />\n        <arg value=\"--extensions=php\" />\n        <arg value=\"--ignore=autoload.php\" />\n <arg path=\"${basedir}/models\" />\n <arg path=\"${basedir}/controllers\" />\n <arg path=\"${basedir}/modules\" />\n <arg path=\"${basedir}/tests\" />\n    </exec>\n</target>\n```", "```php\n<target name=\"phpcpd-ci\"\n        depends=\"prepare\"\n        description=\"Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.\">\n    <exec executable=\"${toolsdir}phpcpd\">\n        <arg value=\"--log-pmd\" />\n        <arg path=\"${basedir}/build/logs/pmd-cpd.xml\" />\n <arg path=\"${basedir}/models\" />\n <arg path=\"${basedir}/controllers\" />\n <arg path=\"${basedir}/modules\" />\n    </exec>\n</target>\n```", "```php\n<property name=\"prepare.done\" value=\"true\"/>\n```", "```php\n<target name=\"prepare\"\n        unless=\"prepare.done\"\n        depends=\"clean, composer.composer, yii.migrate-all\"\n        description=\"Prepare for build\">\n```", "```php\n<target name=\"clean\"\n        unless=\"clean.done\"\n        description=\"Cleanup build artifacts\">\n <delete dir=\"${basedir}/runtime/*\"/>\n <delete dir=\"${basedir}/web/assets/*\"/>\n <delete dir=\"${basedir}/vendor\"/>\n <delete dir=\"${basedir}/build/api\"/>\n <delete dir=\"${basedir}/build/logs\"/>\n <delete dir=\"${basedir}/build/pdepend\"/>\n <delete dir=\"${basedir}/build/phpdox\"/>\n <delete dir=\"${basedir}/tests/codeception/_output\"/>\n    <property name=\"clean.done\" value=\"true\"/>\n</target>\n```", "```php\n<target name=\"prepare\"\n        unless=\"prepare.done\"\n        depends=\"clean, composer.composer, yii.migrate-all\"\n        description=\"Prepare for build\">\n    <mkdir dir=\"${basedir}/build/api\"/>\n <mkdir dir=\"${basedir}/build/logs\"/>\n <mkdir dir=\"${basedir}/build/pdepend\"/>\n <mkdir dir=\"${basedir}/build/phpdox\"/>\n <mkdir dir=\"${basedir}/tests/codeception/_output\"/>\n    <property name=\"prepare.done\" value=\"true\"/>\n</target>\n```", "```php\n    <!-- build/phpmd.xml -->\n    <rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\">\n        <priority>1</priority>\n        <properties>\n            <property name=\"reportLevel\" value=\"7\" />\n        </properties>\n    </rule>\n```", "```php\n$ vendor/bin/phpdox --skel > build/phpdox.xml\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<!-- build/phpdox.xml -->\n<phpdox  silent=\"false\">\n    <project name=\"Yii2\" source=\"${basedir}/..\" workdir=\"${basedir}/phpdox\">\n\n        <collector publiconly=\"false\">\n            <include mask=\"${phpDox.project.source}/models/*.php\" />\n            <include mask=\"${phpDox.project.source}/modules/*.php\" />\n            <include mask=\"${phpDox.project.source}/controllers/*.php\" />\n            <include mask=\"${phpDox.project.source}/vendor/yiisoft/yii2/*.php\" />\n        </collector>\n\n        <generator output=\"${basedir}/api\">\n            <build engine=\"html\" enabled=\"true\">\n                <file extension=\"html\" />\n            </build>\n        </generator>\n\n    </project>\n</phpdox>\n```", "```php\n<include file=\"${basedir}/build/composer.xml\" as=\"composer\"/>\n```", "```php\n<!-- build.xml -->\n<include file=\"${basedir}/build/yii.xml\" as=\"yii\"/>\n```", "```php\n<migrate exec=\"${yii.script}\" action=\"down\"/>\n<migrate exec=\"${yii.script}\" action=\"up\"/>\n<migrate exec=\"${yii.tests.script}\" action=\"down\"/>\n<migrate exec=\"${yii.tests.script}\" action=\"up\"/>\n```", "```php\n$ ant -Dcodeception.suites=unit -Dcodeception.options=--coverage-html build\n\n```"]