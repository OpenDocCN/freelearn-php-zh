- en: Chapter 1. Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the basics of the CI development framework and its usage
    by reviewing some fundamental web application examples. We will start with a basic
    hello world example and move to an interactive contact-form integration with a
    database. We will construct the CI applications by following a step-by-step method.
    Throughout this chapter, we need to remember that the CI development framework
    is an MVC-based development architecture (for more information, refer to the Wikipedia
    definition at [http://en.wikipedia.org/wiki/Model-view-controller](http://en.wikipedia.org/wiki/Model-view-controller)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will primarily focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The CI project directory tree framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configurations (routing and autoloading are covered in this chapter, while the
    other issues are covered in [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1: hello world'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: passing parameters to a view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 3: the database query by a model rendering results to a view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 4: interactive contact forms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By reviewing these examples, we will get the basics of using CI resources. We
    will begin by briefly reviewing the CI resources used. Then we will review a web
    application code that loads a static view page. Next we will use the model to
    retrieve data from a database and show it in a view. Finally, we'll add a view
    with a contact form to enter input and save it by calling a controller method
    into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CodeIgniter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, we need to have a hosted PHP server (Version 5.3 or later) and
    a MySQL (one of the latest versions) server, where we know the database credentials.
    Local database access from the PHP is recommended for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the server will operate in a **CGI** (**Common Gateway Interface**)
    fashion in order to let CI operate. We can have a local web development environment
    on our PC or a remote server hosted and dedicated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve set up a local web development environment, we''ll need to download
    the latest version of CI, which is Version 2.1.2 at the time of writing this book.
    The link to download the latest version is [http://codeigniter.com/downloads/](http://codeigniter.com/downloads/).
    Now, if we look inside the CI folder, we should see the following directory tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Folders overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The root folder contains the `index.php` file, which handles all the URI requests.
    The `index.php` file will process them with the CI core, and apply our application
    controllers using the models, libraries, and helpers loaded by the controllers
    and rendered views, `license.txt`, which is the CI's license file. `.htaccess`
    is used for configuring the CI routing and removing `index.php` from the URL.
    JavaScript, CSS, and HTML is incorporated into the rendered PHP output and their
    usage is elaborated in [Chapter 7](ch07.html "Chapter 7. Views"), *Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's review the folders and their content application.
  prefs: []
  type: TYPE_NORMAL
- en: The application directory folder is the root directory of our main activity
    project coding zone. This is the heart of the CI-developed application project.
  prefs: []
  type: TYPE_NORMAL
- en: Mandatory components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the mandatory components.
  prefs: []
  type: TYPE_NORMAL
- en: '`application/config`: This folder contains all the CI application configuration
    files, which are covered in [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/controllers`: This folder contains all the application controllers
    in the CI application project. A controller, as mentioned in the *Preface*, is
    a component in the MVC-design architecture that handles the request by the user
    and presents the data shown to the user. A controller in CI is a class extending
    a base class of the CI controller. The class methods can be executed or called
    with a proper URI. The naming conventions related to the controller definition
    and usage will be covered in [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/views`: This folder contains all the view files. A view is the
    HTML content executed by the user browser that presents and interacts with the
    user. A view can be a webpage or an RSS page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following components are not mandatory but are highly recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '`application/models`: This folder contains all the project model files. A model
    is the component of the MVC design architecture, which handles the data stored
    in the database. A model in CI is a PHP class that is designed to work with the
    information in the database. [Chapter 6](ch06.html "Chapter 6. Models"), *Models*,
    will elaborate on the CI models concept, definition, and usage with several usage
    examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/helpers`: This folder contains all the additional helper files
    to the CI helpers. They can be third-party or created by the developer. A helper
    file is a collection of independent procedural functions in a particular category.
    Each helper function performs one specific task, with no dependence on other functions.
    [Chapter 5](ch05.html "Chapter 5. Helpers"), *Helpers*, will elaborate on the
    CI helpers concept, definition, and usage with several usage examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/libraries`: This folder contains all the libraries of the CI application
    project created by the developer. A CI library is technically a PHP class. The
    scope of the library can be any project resource, such as helpers, models, controllers,
    and views. For example, a library can provide Facebook library API services to
    simplify the application code for Facebook integration. [Chapter 4](ch04.html
    "Chapter 4. Libraries"), *Libraries*, will elaborate on the CI libraries concept,
    definition, and usage with several usage examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system`: This is the root of the CodeIgniter core directory. The system folder
    contains important system components in the subfolders, such as core, database,
    helpers (built-in system helpers), and libraries (built-in system libraries).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not edit any of these files! Upgrading is much easier if we don't.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example 1 – hello world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially, we will start with a simple example that displays **Hello World**
    on the rendered web page. This is an example that doesn't use a database.
  prefs: []
  type: TYPE_NORMAL
- en: The URI will be `http://ourdomain.com/index.php/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: We can eliminate the `index.php` file from the path to enable a shorter URI;
    that is, `http://ourdomain.com/index.php/hello`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to enable these shorter URIs, we will make configuration changes as
    described in [Chapter 2](ch02.html "Chapter 2. Configurations and Naming Conventions"),
    *Configurations and Naming Conventions*, regarding the `config.php` index_page
    setting in `config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build the following two scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Controller class: `application/controllers/hello.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View script: `application/views/helloview.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we use the default configuration. For more information about
    configurations, refer to [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*. The controller
    in this example passes the parameters that are displayed in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Passing the parameters from the controller to the view is optional.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here's the code sample of the controller. The controller is responsible for
    rendering the view with the parameters, such as mega title and message. For naming
    the controller classes, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configurations and Naming Conventions*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the corresponding rendered view that uses the parameters provided
    by the controller to render the view to the web page and return it to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Example 2 – passing the complex parameters to a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will show you how to pass and use complex parameters, such
    as arrays and object arrays, from the CI controller to the rendered CI view to
    be used in the view. You can pass any number of arrays as parameters to a view;
    you can also pass objects, such as rows of a query result.
  prefs: []
  type: TYPE_NORMAL
- en: 'A standard GET parameters URI looks like this: `http://ourdomain.com/index.php/example2/more/?a=1&b=2&c=3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, let''s remember that in CI the URI is passed in this manner: `http://ourdomain.com/index.php/example2/more/1/2/3`.
    For more information, see [Chapter 2](ch02.html "Chapter 2. Configurations and
    Naming Conventions"), *Configurations and Naming Conventions*.'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the URI, we will build the controller `example2.php` with the function
    named `more` with the three parameters passed to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build the following two scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller class: `application/controllers/example2.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The view script : `application/views/ example2more.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller is responsible for rendering the view with parameters such as
    mega title and message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code sample of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the corresponding rendered view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Example 3 – the database query by a model rendering results to a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will show you how the CI controller uses the CI model to
    retrieve data from the database and render it to a CI view.
  prefs: []
  type: TYPE_NORMAL
- en: The URL will be `http://ourdomain.com/index.php/user`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will have to configure the database settings in the configuration
    file `application/config/database.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should keep the default database settings unchanged, and only change the
    following configuration parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The model class will retrieve all the user details from the table `users`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on configurations, refer to [Chapter 2](ch02.html "Chapter 2. Configurations
    and Naming Conventions"), *Configuration and Naming Conventions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build the following three scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller class: `application/controllers/user.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The model file: `application/model/usermodel.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The view script: `application/views/userview.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller retrieves the `users` list from the database via the model and
    renders the view with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code sample of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is the code sample of the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the CI object database's method is called for generating and
    executing the SQL query.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the CI database's library at [http://ellislab.com/codeigniter/user-guide/database/index.html](http://ellislab.com/codeigniter/user-guide/database/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about models, refer to [Chapter 6](ch06.html "Chapter 6. Models"),
    *Models*.
  prefs: []
  type: TYPE_NORMAL
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view in this example shows the table content received from the controller
    containing the `users` list as defined in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the corresponding rendered view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Example 4 – interactive contact forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example shows how to write a contact form using the CI form helper and
    the `form_validation` library.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about libraries, refer to [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, and for information about helpers, refer to [Chapter 5](ch05.html
    "Chapter 5. Helpers"), *Helpers*.
  prefs: []
  type: TYPE_NORMAL
- en: The CI controller defines a form validation setup using the `form_validation`
    library and renders a form view that uses the `form_validation` library setup
    to apply a desired validation on the submitted data by the user. If it's a success,
    the CI controller will render a view page displaying a success message, otherwise
    it will render the view page with the form and the error messages will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The URI for this example is `http://ourdomain.com/index.php/contact`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform this example, we shall build the following three scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The contact form controller class: `application/controllers/contact.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The view form script: `application/views/contactview.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The view success page script: `application/views/contactsuccess.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller creates a form for adding and editing a product.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, refer to [Chapter 7](ch07.html "Chapter 7. Views"), *Views*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code sample of the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view file displays the contact form for receiving data from the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the corresponding rendered form view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we have reviewed the CI directory tree, especially the application
    folder, which is the heart and soul of any CI project. In the next chapter, we
    will review the configurations, such as database and naming conventions that are
    essential for the CI project.
  prefs: []
  type: TYPE_NORMAL
