- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Convention over Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Convention over configuration is a phrase you’ll encounter more often than not
    once we start using Ruby on Rails. Yes, you read that right – we are ready to
    start using one of the fondest web frameworks for Ruby developers. And while it’s
    fun, we do need to understand the structure and how the Ruby on Rails configuration
    works before we start doing our programming.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will cover installing Ruby on Rails and its file structure
    so that we can move around the framework with ease. Once we understand where to
    place things, we will move on to using a framework with the MVC paradigm. Lastly,
    we will learn how to send and receive data with forms and sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Ruby on Rails configuration in mind, in this chapter, we will cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby on Rails file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MVC implementation of Ruby on Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interaction with Ruby on Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, we will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Any IDE to view/edit code (SublimeText, Visual Studio Code, Notepad++, Vim,
    Emacs, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For macOS users, you will also need to have XCode Command Line Tools installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby version 2.6 installed and ready to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git client installed on our local machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/).
  prefs: []
  type: TYPE_NORMAL
- en: If there is Ruby magic, there is Rails magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By this point, you’re probably familiar with what is fondly referred to as
    Ruby magic. We saw some examples where Ruby “magically” generates output out of
    syntax that simply makes sense, but we didn’t know exactly how it’s done (hint:
    meta-programming). In the same fashion, Ruby on Rails (also known as Rails or
    simply RoR) internally uses meta-programming to generate functionality that is
    not explicitly for our eyes to see. We’ll understand it by looking at more examples,
    but first, we need to install Ruby on Rails.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Rails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the libraries we’ve seen so far, Rails is an open source gem. It behaves
    a little differently than the gems we’ve seen so far as it uses many dependencies
    and can generate code examples, but at the end of the day, it’s still a gem. This
    means that we can either install it by itself, or we can include it in a Gemfile.
    For this section, we will have to divide the process into three separate sections
    – macOS installation, Windows installation, and Linux installation – as each operating
    system behaves differently.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Rails on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step of setting up our local environment is to install `rbenv`. For
    most Mac installations, `brew` will simplify this process. Let’s get started with
    the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open a shell and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: eval "$(rbenv init -)"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you’ve added this line to your profile, you should activate the change
    by either opening a new shell or running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: rbenv install 2.6.10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once Ruby 2.6.10 has been installed, we must set the default Ruby version with
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: gem install bundler
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, our environment is ready for the next steps in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to see more details about this installation, please refer to the
    following web page: [https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos](https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Rails on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to install Ruby on Rails on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: To set up our local environment, first, we must install Git for Windows. We
    can download the package from [https://gitforwindows.org/](https://gitforwindows.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once downloaded, we can run the installer; it should open the installer application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Git installer](img/B19230_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Git installer
  prefs: []
  type: TYPE_NORMAL
- en: 'You can safely accept the default options unless you want to change any of
    the specific behavior from Git. At the end of the installation process, you may
    just deselect all the options of the wizard and move on to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Git finalized installation](img/B19230_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Git finalized installation
  prefs: []
  type: TYPE_NORMAL
- en: We will also need the Git SDK installed for some dependencies that Ruby on Rails
    requires. We can get the installer from [https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8](https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8).
  prefs: []
  type: TYPE_NORMAL
- en: 'Be careful and select the correct option for your platform (32 or 64 bits).
    In my case, I had to choose 64 bits, so I downloaded the **git-sdk-installer-1.0.8.0-64.7z.exe**
    binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Git SDK download](img/B19230_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Git SDK download
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this package has been downloaded, run it; we will be asked where we want
    the Git SDK to be installed. The default option is fine (`C:\git-sdk-64`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Git SDK installation location](img/B19230_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Git SDK installation location
  prefs: []
  type: TYPE_NORMAL
- en: This package might take a while to complete as it has to download other additional
    packages but it will do so on its own. Please be patient. Once this package has
    finished installing the SDK, it will open a Git Bash console, which looks similar
    to Windows PowerShell. We can close this Git Bash console window and open another
    Windows PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the new window open, we must type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s open a browser and go to the *rbenv for Windows* web page: [https://github.com/ccmywish/rbenv-for-windows](https://github.com/ccmywish/rbenv-for-windows).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On that page, we will find instructions on how to install `rbenv`, which we
    will do now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s open a new Windows PowerShell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we’ve run this command, we must download the rest of the required files
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this command has finished downloading the files from GitHub, modify the
    user’s profile with the following command from within the Windows PowerShell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $env:RBENV_ROOT = "C:\Ruby-on-Windows"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'rbenv is running, our console will automatically install a default Ruby version.
    This might take a while and will put our patience to the test. Once the process
    has finished, we should see an output similar to this one:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 7.5 – rbenv post-installation script](img/B19230_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – rbenv post-installation script
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to install other versions of Ruby. For Ruby on Rails 5, we
    will install Ruby `2.6.10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s install it by running the following command on the same Windows Powershell
    window that we just opened:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The program will ask us whether we want to install the Lite version or the Full
    version. Choose the Full version. Once again, this might take a while, so please
    be patient.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once this command has finished running, we must set this Ruby version for our
    whole system. We can do this by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To confirm that this version of Ruby has been installed and enabled, use the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: gem install bundler
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this gem has been installed, we must update the RubyGem system with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will also take a while to compute, but once it’s finished, we will
    be ready to use Ruby on Rails on Windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let’s see the steps for installing Ruby on Rails on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Rails on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For Ubuntu and Debian Linux distributions, we must also install `rbenv` and
    the dependencies necessary for Ruby on Rails to run correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by opening a terminal and running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'rbenv with the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'rbenv to our bash profile with the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run the bash profile with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'openssl and that process will take some time. Once this command has finished
    installing Ruby 2.6.10, we need to set it as the default Ruby version for the
    whole machine. We can do so by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can confirm that this version of Ruby has been installed by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: gem install bundler
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this gem has been installed, we can update the RubyGems system with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will also take a while to compute, but once it’s finished, we will
    be ready to use Ruby on Rails on Linux.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For other Linux distributions and other operating systems, please refer to
    the official Ruby-lang page: [https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/).'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading our Ruby on Rails application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While there are a couple of ways to use Rails code, for ease of use, we will
    download an existing project as an example. We’ll use the Git tool to clone the
    project. Open a terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a folder called `From-PHP-to-Ruby-on-Rails`. Now, let’s
    navigate into the project folder with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we’ve navigated into this folder, you’ll notice a `Gemfile`. If we open
    that `Gemfile` with our IDE of choice, we’ll see the beginning of the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s not dwell on all the details (yet) except for the Rails gem that is declared
    there. As you may recall from the previous chapters, we can install gems and their
    dependencies using the `bundle` command. So, let’s do just that. Type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `bundle` command takes all of the gems declared in `Gemfile`, creates a
    dependency map (called `Gemfile.lock`), and installs these dependencies. The output
    of this command should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The output has been truncated for brevity. To prove that our dependencies have
    been installed correctly, we should run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We should obtain the version of Rails that we just installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: And voilá – we have successfully installed Ruby on Rails. However, there are
    still a couple of things we need to clarify before we can start using this framework.
    Firstly, you may be wondering why we used the `bundle exec rails --version` command
    and not just `rails --version`. Well, as the Rails developers have to deal with
    Rails being able to run in different environments and platforms (be it Windows,
    Linux, macOS, and others), one way to make sure the “bundle” of libraries works
    correctly is to run rails commands in the context of the “bundle.” This is just
    a fancy way of saying it’s for “running the command using the libraries we just
    installed.” So, from now on, all of our Rails commands will be wrapped with the
    `bundle exec` command. If you’re interested in more details regarding this command,
    please refer to [https://bundler.io/v2.4/man/bundle-exec.1.html](https://bundler.io/v2.4/man/bundle-exec.1.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve finally installed Ruby on Rails, we’ll start our server and take
    a ride on the Rails.
  prefs: []
  type: TYPE_NORMAL
- en: Starting our Ruby on Rails project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running our sample Rails application requires that we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output after pressing the *Enter* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we see this message, it means that we are ready to rock and roll. Open
    any web browser and, in the location bar, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Rails landing page](img/B19230_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Rails landing page
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We have successfully run our first Ruby on Rails sample application.
    It’s always exciting and magical (at least for me) when you see this image for
    the first time. And by magic, I mean the way Rails is configured to use a web
    server and other tools to make this page possible. Now, before we start messing
    around with this sample application, let’s look at the file structure of Ruby
    on Rails.
  prefs: []
  type: TYPE_NORMAL
- en: Rails file structure explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first things you need to learn as you learn Ruby on Rails is learning
    where things go in its file structure. In my case, it took me too long to connect
    the dots, but once I did, I no longer struggled with placing things. In the long
    run, it even helps you whenever a new Rails version comes out as the file structures
    are very similar among versions. So, let’s look at all the folders. Here’s the
    file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'It may seem like a lot and even overwhelming, but we will be using five folders:
    `app/controllers`, `app/models`, `app/views`, `config`, and `public`. Rails is
    a `controllers` folder, models in the `models` folder, and views in the `views`
    folder. In the `config` folder, we’ll store configuration values such as our defined
    URL routes, database connection values, and values that may differ from environment
    to environment (that is, development, production, and testing). Last but not least,
    in the `public` folder, we’ll store certain assets that the web server needs to
    access. We might occasionally have to handle other folders, but for the most part,
    as a rookie RoR developer, we will mostly handle the aforementioned folders.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve taken a peek into the file structure of Rails, we can move on
    to the next section, where we’ll dive into how the MVC pattern comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: MVC at its finest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, Rails is an MVC controller. If you’ve used PHP frameworks
    in the past, such as CodeIgniter, Symfony, or Laravel, you will probably be familiar
    with the term. If you’re not, I recommend checking out these pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html](https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pusher.com/blog/laravel-mvc-use/#why-use-mvc](https://pusher.com/blog/laravel-mvc-use/#why-use-mvc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In summary, the MVC pattern divides our application into three components –
    the model, in which we save all of our business logic (mostly but not exclusively
    by connecting to a database), the view, in which we hold what is to be shown on
    the browser (HTML for the most part), and the controller, which serves as the
    organizer of the previous two. If we were to use an example to explain this, a
    user authentication component would function as follows: the HTML form that shows
    the user and password fields would be created on the view. Once the user clicks
    on the button to submit these fields, the controller will receive the form data
    (user and password), and pass these to the model. After this, the model will connect
    to the database and attempt to find an entry on the database that matches the
    user and password. If we find a user entry, the model will send back the user
    entry found on the database. The next step would be the controller telling the
    browser to redirect to a page that shows the user as signed in and displays said
    user data that was passed by the model. While this may sound like a lot of work,
    Rails does an excellent job of abstracting these components in a way that is almost
    invisible to us. And this is where we will see how convention over configuration
    works in Rails. In other frameworks, we may have to define where our controller,
    model, and views live. We have the liberty to do so. In Rails, however, we need
    no such distinction. And this works like magic.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example of creating a controller. The simplest way to do
    so is by using Rails generators. Rails generators are tools that help us generate
    boilerplate controllers, models, and more. We’ll use this tool to generate our
    controller. Let’s go to the terminal where we have our Rails project still running.
    Within that terminal, press (and keep pressing) the *Ctrl* key. Then (while still
    pressing the *Ctrl* key) press the *C* key. This will send a signal to our application
    to stop; the terminal should display something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s generate a `Home` controller. We can do so by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This process will also generate the controller and a couple of other files
    for testing and formatting; we will ignore them. Let’s just focus on the generated
    controller in `app/controllers/home_controller.rb`. Let’s look at its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: For now, it’s an empty controller, but we will soon populate it with actions
    that we will map using Rails routes ([https://guides.rubyonrails.org/routing.html](https://guides.rubyonrails.org/routing.html)).
  prefs: []
  type: TYPE_NORMAL
- en: If you’re unfamiliar with the concept, the `routes` file simply maps a specific
    URL to a controller and an action. In simple terms, this specifies what controller
    action will be called when a specific URL is called. Let’s start by creating a
    URL that will be called when we open our browser to `http://localhost:3000/home`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s start by starting our application again, but now, instead of using
    `rails server`, we’ll use the shortcut command, `rails s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see the following output after pressing the *Enter* key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have not created the route, if we opened our browser right now and
    went to http://localhost:3000/home, we would see an error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Rails routing error page](img/B19230_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Rails routing error page
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because we have not defined any routes. Let’s create our `home` route.
    We can do so by opening the `config/routes.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let’s define a route. Our code should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are telling Rails that when the application gets a `GET` request with
    the `home` URL, it will point to the `home` controller, and execute the `index`
    action. Let’s go back to our browser and refresh the page. Now, our error should
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Rails unknown action error page](img/B19230_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Rails unknown action error page
  prefs: []
  type: TYPE_NORMAL
- en: 'So, Rails found `HomeController`, but it could not find the `index` action
    as it doesn’t exist yet. Let’s create it. Open our `app/controllers/home_controller.rb`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This is familiar syntax – it’s `HomeController` that inherits from the `ApplicationController`
    class, which has a method called `index`. For now, this is all we are going to
    do for this class. Now, let’s refresh our browser again; we’ll see a more detailed
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Rails unknown format error page](img/B19230_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Rails unknown format error page
  prefs: []
  type: TYPE_NORMAL
- en: 'This error is thrown because Rails found the controller and the `index` action
    but is unable to load a view into the browser because no view has been defined.
    Let’s add the view. We can do this by creating the `app/views/home/index.html.erb`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s refresh the browser once more; we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Rendered view](img/B19230_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Rendered view
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the features I have loved about Rails ever since I ran a Rails
    application for the first time. Without needing any additional configuration,
    Rails “knows” where to look for views. In this case, Rails “knew” that there should
    be a `home` folder inside the `views` folder. Rails also “knew” to look for an
    `index.html.erb` file within this `home` folder. In other frameworks (especially
    PHP ones), you must specify what file you will be rendering as a view within the
    controller. This becomes repetitive and impractical in the long run. Rails solves
    this in a very elegant and intuitive way. This is what convention over configuration
    refers to. Knowing the convention, we don’t need to configure where Rails should
    look for views.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of the MVC pattern and how its components
    make up our project structure, let’s move on to the next section, where we’ll
    learn how to use this MVC structure to send, receive, and save data with Rails.
  prefs: []
  type: TYPE_NORMAL
- en: POST, GET, and SESSION in Rails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the main differences while doing web development between PHP and Ruby
    is that PHP is web-based out of the box, while Ruby is not. All PHP needs is a
    web server with PHP enabled and we’re good to go. For development, PHP even comes
    with an internal web server. On the other hand, Ruby requires the use of a framework
    to be able to use web protocols and tools. Ruby on Rails is not the only framework
    that we could use for web development, but it’s the most popular one. You might
    also want to check out the Sinatra framework just to have another option other
    than Rails: [https://sinatrarb.com/](https://sinatrarb.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will stick to Rails for web development. One of the most popular tools that’s
    used within web development is forms. Forms help us get data from the user and
    handle said data to accomplish different tasks. We can set search criteria, authenticate
    users, or simply show previously saved data. In PHP, we can access these tools
    via the `$_POST`, `$_GET`, and `$_SESSION` arrays. In contrast, Rails handles
    this slightly differently but still in a useful and intuitive way. Let’s start
    by creating some examples with values from the URL or `$_GET` values. First, let’s
    add the value to the URL by adding the parameter in our browser: `http://localhost:3000/home?search=php`.
    The information in our browser will remain the same as we have not made any changes
    to the view. Now, let’s use our `index` action on our `Home` controller and add
    these parameters. Once again, we must open our `app/controllers/home_controller.rb`
    file and then add the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve added a variable called `search` which, in turn, is using the internal
    `params` variable. `params` is equivalent to the `$_REQUEST` array in PHP. In
    this example, we are using it to catch the value through the URL (search) and
    set it to a variable. Additionally, we’re showing a message with the obtained
    value. If we refresh our browser, we won’t see any changes. Again, this is because
    we have not altered the view file. However, if we go to the terminal where our
    application is still running, we will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the console tells us a lot about the execution. Firstly, it
    tells us what method (`GET`) we’re using to call our URL. Then, it tells us the
    data that is being sent (`search`). Finally, it displays the message we added
    to our code. While this is not the best way to debug Rails applications, it does
    give us an insight as to what our code does and when it does it. In PHP, any time
    we write `echo`, it immediately passes it to the browser. In this case, should
    we want to pass data to the browser, first, we have to pass it to the view. So,
    let’s do that. Let’s add another line to our `index` action on our controller
    so that the code now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This syntax looks familiar. If you don’t recall, we’re using an instance variable.
    This is the easiest way to pass values to a view. Now, let’s open the view and
    show this `@search` value. Let’s open the `app/views/home/index.html.erb` file
    and add code so that our view now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This also looks all too familiar. In PHP, we would use `<?= $search ?>`. In
    Rails, instance variables are immediately available to use on the view. Let’s
    refresh our browser one last time; we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Rendered view with variables](img/B19230_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Rendered view with variables
  prefs: []
  type: TYPE_NORMAL
- en: We’ve successfully obtained values from the URL. Next, we’ll look at values
    from a form sent through the `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `POST` method is used to send data that we don’t want shown on the browser.
    Imagine sending a password through the browser. Anyone close by could find out
    our deepest secret. Fortunately, this is where `POST` values to the rescue.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s add `GET` and `POST` routes to render a form and then send the
    form data. Let’s open our routes file, `config/routes.rb`, and add the following
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to make two separate calls to http://localhost:3000/user – one to render
    the form and another one to obtain the form data. Now, let’s create an action
    on the controller. Let’s open our `app/controllers/home_controller.rb` file and
    add the user action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We’re only passing the password to the view so that we can compare it to a value.
    I’d like to note here that this should not be done in a real-life scenario; we’re
    only doing this for teaching purposes. Now, let’s create a view on `app/views/home/user.html.erb`
    and add the form with which we’ll be sending the data. For that purpose, we’ll
    be using Rails form helpers ([https://guides.rubyonrails.org/form_helpers.html](https://guides.rubyonrails.org/form_helpers.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Forms are easier to write with this tool, though at first, it might seem a
    little confusing. So, let’s add the following code to our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'With this code, we’ve created a form that calls the same URL but with the `POST`
    method. Additionally, we are sending the value of a password. If we open our browser
    and set our URL to http://localhost:3000/user, we would see the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Rendered HTML form](img/B19230_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Rendered HTML form
  prefs: []
  type: TYPE_NORMAL
- en: 'However, let’s not send it quite yet as we haven’t done anything with the value.
    Let’s go back to the view code, `app/views/home/user.html.erb`, and add the following
    code so that the form looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s go back to the browser and type `1234` in the password form field.
    Once we click on the **SEND** button, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Rendered HTML form with a message](img/B19230_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Rendered HTML form with a message
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to type any other value, such as `2345`, and click the **SEND**
    button, we would no longer see this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Rendered HTML form without a message](img/B19230_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Rendered HTML form without a message
  prefs: []
  type: TYPE_NORMAL
- en: This is because we typed in the wrong value for the password. Again, this example
    is only for teaching purposes. I don’t think I need to tell you it’s a bad idea
    to send a password to the view (even if you are not going to show the password),
    but for our purposes, I believe this example served us well. Now, let’s look at
    session values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Session values help save data that’s unique to a browser. They can be very
    useful when we’re dealing with a returning user or even an authentication component.
    For now, let’s do something simple: let’s try to find a session value and then
    create it. You already know the drill: first, we must create a route. Let’s open
    `config/routes.rb` and add the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s create both the `get` and `set` actions on the controller. In our
    `app/controllers/home_controller.rb` file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we’ve added the `name_get` and `name_set` actions. This is as simple
    as it might get on a controller. There is not much to do except set a variable
    called `@name` to pass to the view on the `name_get` action. In parallel, we will
    set the name to `"David"` on the `name_set` action. Lastly, let’s add two views.
    First, create an `app/views/home/name_get.html.erb` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we are only displaying the value that’s obtained from the session.
    Now, let’s create the view for setting the session value. Let’s create an `app/views/home/name_set.html.erb`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we’ve saved all of our changes, we can try it out in our browser. First,
    let’s point our web browser to http://localhost:3000/get_name. This should give
    us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Page with a null name](img/B19230_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Page with a null name
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have not set any session values, the `@name` variable is empty. Now,
    let’s open the URL in a browser that does set the http://localhost:3000/get_name
    value. This page should show us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Page for setting the session value](img/B19230_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Page for setting the session value
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s open our get name URL on the browser once more (http://localhost:3000/get_name);
    we should now see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Page for getting the session value](img/B19230_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Page for getting the session value
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully set up a session name and retrieved it. This is useful
    for visitors to our site and returning visitors who may have created an account.
    The correct way to go about this would be to get the username from a database,
    set it as a session value, and then display it to the user. Beware that sessions
    are based on cookies, so if a user has their cookies disabled in their browser,
    none of this will work. We can confirm this cookie-based behavior. If we were
    to open a browser in Incognito mode, our `get_name` route would display an empty
    name until we browsed to the `set_value` route. Just beware that just as in PHP,
    session values are cookie-based.
  prefs: []
  type: TYPE_NORMAL
- en: If you come from a PHP background (as I did at the time), there are a couple
    of additional notes that I’d like to share with you. One is that, unlike PHP,
    you can’t have a “Ruby” web server. In the Ruby realm, your web server will always
    require a framework to execute Ruby code. That took me a little while to digest,
    but once I accepted it, Ruby on Rails became my go-to framework. The second one
    is more related to setting up the local environment. I tested this setup on different
    operating systems and different versions of Mac, Windows, and Linux with different
    results. I accomplished the best-unified setup by using `rbenv` ([https://github.com/rbenv/rbenv](https://github.com/rbenv/rbenv)).
  prefs: []
  type: TYPE_NORMAL
- en: This tool (`rbenv`) lets you install different versions of Ruby on your machine.
    One “cheat” that I found to be very useful is that when installing Rails failed
    with one version of Ruby, I simply tried it with another version and most of the
    time, the second time, Rails worked flawlessly. Try installing different versions,
    newer versions, and older versions, and see how they behave. Finding the subtle
    differences between Ruby and Ruby on Rails versions will make you a better developer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Rails, the MVC application pattern, and how
    to install it as a gem. We also learned how to generate controllers and where
    these come in handy when using Rails. Lastly, we learned what developers mean
    when they refer to the Ruby on Rails convention over configuration “paradigm”
    and how this feature makes our lives easier when using Rails. Now, we are ready
    to start connecting and using databases with Rails Models.
  prefs: []
  type: TYPE_NORMAL
