- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Understanding Convention over Configuration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解约定优于配置
- en: Convention over configuration is a phrase you’ll encounter more often than not
    once we start using Ruby on Rails. Yes, you read that right – we are ready to
    start using one of the fondest web frameworks for Ruby developers. And while it’s
    fun, we do need to understand the structure and how the Ruby on Rails configuration
    works before we start doing our programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始使用 Ruby on Rails，你将经常遇到“约定优于配置”这个短语。是的，你没听错——我们准备好开始使用 Ruby 开发者最喜爱的网页框架之一了。虽然很有趣，但在我们开始编程之前，我们确实需要了解结构和
    Ruby on Rails 的配置工作方式。
- en: In this chapter, we will cover installing Ruby on Rails and its file structure
    so that we can move around the framework with ease. Once we understand where to
    place things, we will move on to using a framework with the MVC paradigm. Lastly,
    we will learn how to send and receive data with forms and sessions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 Ruby on Rails 的安装及其文件结构，以便我们能够轻松地在框架中移动。一旦我们了解如何放置事物，我们将继续使用采用 MVC
    模式的框架。最后，我们将学习如何通过表单和会话发送和接收数据。
- en: 'With the Ruby on Rails configuration in mind, in this chapter, we will cover
    the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 Ruby on Rails 的配置，在本章中，我们将涵盖以下主题：
- en: Installing Ruby on Rails
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Ruby on Rails
- en: Ruby on Rails file structure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby on Rails 文件结构
- en: The MVC implementation of Ruby on Rails
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby on Rails 的 MVC 实现
- en: User interaction with Ruby on Rails
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户与 Ruby on Rails 的交互
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, we will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章内容，我们需要以下内容：
- en: Any IDE to view/edit code (SublimeText, Visual Studio Code, Notepad++, Vim,
    Emacs, and so on)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用于查看/编辑代码的 IDE（SublimeText、Visual Studio Code、Notepad++、Vim、Emacs 等）
- en: For macOS users, you will also need to have XCode Command Line Tools installed
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS 用户，你还需要安装 XCode 命令行工具
- en: Ruby version 2.6 installed and ready to use
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并准备好使用的 Ruby 版本 2.6
- en: Git client installed on our local machine
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的本地机器上安装 Git 客户端
- en: The code presented in this chapter is available at [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的代码可在 [https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/](https://github.com/PacktPublishing/From-PHP-to-Ruby-on-Rails/)
    找到。
- en: If there is Ruby magic, there is Rails magic
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果有 Ruby 魔法，就有 Rails 魔法
- en: 'By this point, you’re probably familiar with what is fondly referred to as
    Ruby magic. We saw some examples where Ruby “magically” generates output out of
    syntax that simply makes sense, but we didn’t know exactly how it’s done (hint:
    meta-programming). In the same fashion, Ruby on Rails (also known as Rails or
    simply RoR) internally uses meta-programming to generate functionality that is
    not explicitly for our eyes to see. We’ll understand it by looking at more examples,
    but first, we need to install Ruby on Rails.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经熟悉了被亲切地称为 Ruby 魔法的概念。我们看到了一些 Ruby “神奇地”从看似合理的语法中生成输出的例子，但我们并不知道它是如何做到的（提示：元编程）。以同样的方式，Ruby
    on Rails（也称为 Rails 或简称 RoR）在内部使用元编程来生成我们看不到的功能。我们将通过查看更多示例来理解它，但首先，我们需要安装 Ruby
    on Rails。
- en: Installing Ruby on Rails
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Ruby on Rails
- en: Just like the libraries we’ve seen so far, Rails is an open source gem. It behaves
    a little differently than the gems we’ve seen so far as it uses many dependencies
    and can generate code examples, but at the end of the day, it’s still a gem. This
    means that we can either install it by itself, or we can include it in a Gemfile.
    For this section, we will have to divide the process into three separate sections
    – macOS installation, Windows installation, and Linux installation – as each operating
    system behaves differently.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们迄今为止看到的库一样，Rails 是一个开源的 gem。它与我们所看到的 gem 有点不同，因为它使用了许多依赖项并且可以生成代码示例，但最终，它仍然是一个
    gem。这意味着我们可以单独安装它，或者我们可以在 Gemfile 中包含它。对于本节，我们必须将过程分为三个单独的部分——macOS 安装、Windows
    安装和 Linux 安装——因为每个操作系统的行为都不同。
- en: Installing Ruby on Rails on macOS
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Ruby on Rails
- en: 'The first step of setting up our local environment is to install `rbenv`. For
    most Mac installations, `brew` will simplify this process. Let’s get started with
    the steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置本地环境的第一个步骤是安装 `rbenv`。对于大多数 Mac 安装，`brew` 将简化此过程。让我们开始以下步骤：
- en: 'Let’s open a shell and run the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个 shell 并运行以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: eval "$(rbenv init -)"
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eval "$(rbenv init -)"
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you’ve added this line to your profile, you should activate the change
    by either opening a new shell or running the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你将这一行添加到你的配置文件中，你应该通过打开一个新的shell或运行以下命令来激活这个更改：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: rbenv install 2.6.10
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rbenv install 2.6.10
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once Ruby 2.6.10 has been installed, we must set the default Ruby version with
    the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了Ruby 2.6.10，我们必须使用以下命令设置默认的Ruby版本：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: gem install bundler
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: gem install bundler
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With that, our environment is ready for the next steps in this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们的环境已经准备好进行本章的下一步。
- en: 'If you wish to see more details about this installation, please refer to the
    following web page: [https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos](https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于这个安装的详细信息，请参考以下网页：[https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos](https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-macos)。
- en: Installing Ruby on Rails on Windows
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装Ruby on Rails
- en: 'Follow these steps to install Ruby on Rails on Windows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Windows上安装Ruby on Rails：
- en: To set up our local environment, first, we must install Git for Windows. We
    can download the package from [https://gitforwindows.org/](https://gitforwindows.org/).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了设置我们的本地环境，首先，我们必须为Windows安装Git。我们可以从[https://gitforwindows.org/](https://gitforwindows.org/)下载安装包。
- en: 'Once downloaded, we can run the installer; it should open the installer application:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下载完成后，我们可以运行安装程序；它应该打开安装程序应用程序：
- en: '![Figure 7.1 – Git installer](img/B19230_07_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – Git安装程序](img/B19230_07_01.jpg)'
- en: Figure 7.1 – Git installer
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Git安装程序
- en: 'You can safely accept the default options unless you want to change any of
    the specific behavior from Git. At the end of the installation process, you may
    just deselect all the options of the wizard and move on to the next step:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安全地接受默认选项，除非你想从Git更改任何特定的行为。在安装过程结束时，你只需取消选择向导的所有选项，然后继续下一步：
- en: '![Figure 7.2 – Git finalized installation](img/B19230_07_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – Git最终安装](img/B19230_07_02.jpg)'
- en: Figure 7.2 – Git finalized installation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – Git最终安装
- en: We will also need the Git SDK installed for some dependencies that Ruby on Rails
    requires. We can get the installer from [https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8](https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装Git SDK，因为Ruby on Rails需要一些依赖项。我们可以从[https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8](https://github.com/git-for-windows/build-extra/releases/tag/git-sdk-1.0.8)获取安装程序。
- en: 'Be careful and select the correct option for your platform (32 or 64 bits).
    In my case, I had to choose 64 bits, so I downloaded the **git-sdk-installer-1.0.8.0-64.7z.exe**
    binary:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请小心，并选择适合你平台（32位或64位）的正确选项。在我的情况下，我必须选择64位，因此我下载了**git-sdk-installer-1.0.8.0-64.7z.exe**二进制文件：
- en: '![Figure 7.3 – Git SDK download](img/B19230_07_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – Git SDK下载](img/B19230_07_03.jpg)'
- en: Figure 7.3 – Git SDK download
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – Git SDK下载
- en: 'Once this package has been downloaded, run it; we will be asked where we want
    the Git SDK to be installed. The default option is fine (`C:\git-sdk-64`):'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦下载了这个安装包，运行它；我们将被询问希望将Git SDK安装在哪里。默认选项是合适的（`C:\git-sdk-64`）：
- en: '![Figure 7.4 – Git SDK installation location](img/B19230_07_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – Git SDK安装位置](img/B19230_07_04.jpg)'
- en: Figure 7.4 – Git SDK installation location
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – Git SDK安装位置
- en: This package might take a while to complete as it has to download other additional
    packages but it will do so on its own. Please be patient. Once this package has
    finished installing the SDK, it will open a Git Bash console, which looks similar
    to Windows PowerShell. We can close this Git Bash console window and open another
    Windows PowerShell.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要下载其他附加包，这个安装包可能需要一些时间才能完成，但它会自动完成。请耐心等待。一旦这个安装包完成安装SDK，它将打开一个Git Bash控制台，其外观类似于Windows
    PowerShell。我们可以关闭这个Git Bash控制台窗口并打开另一个Windows PowerShell。
- en: 'Once we have the new window open, we must type the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们打开了新窗口，我们必须输入以下命令：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s open a browser and go to the *rbenv for Windows* web page: [https://github.com/ccmywish/rbenv-for-windows](https://github.com/ccmywish/rbenv-for-windows).'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个浏览器并访问*rbenv for Windows*网页：[https://github.com/ccmywish/rbenv-for-windows](https://github.com/ccmywish/rbenv-for-windows)。
- en: On that page, we will find instructions on how to install `rbenv`, which we
    will do now.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在那个页面上，我们将找到如何安装`rbenv`的说明，我们现在将进行安装。
- en: 'Let’s open a new Windows PowerShell and type the following command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开一个新的Windows PowerShell并输入以下命令：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we’ve run this command, we must download the rest of the required files
    with the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行这个命令后，我们必须使用以下命令下载剩余的所需文件：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once this command has finished downloading the files from GitHub, modify the
    user’s profile with the following command from within the Windows PowerShell:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦这个命令从GitHub下载完文件，我们就可以在Windows PowerShell中运行以下命令来修改用户的配置文件：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: $env:RBENV_ROOT = "C:\Ruby-on-Windows"
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $env:RBENV_ROOT = "C:\Ruby-on-Windows"
- en: 'rbenv is running, our console will automatically install a default Ruby version.
    This might take a while and will put our patience to the test. Once the process
    has finished, we should see an output similar to this one:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rbenv正在运行，我们的控制台将自动安装一个默认的Ruby版本。这可能需要一些时间，并且会考验我们的耐心。一旦过程完成，我们应该看到类似于以下输出的内容：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure 7.5 – rbenv post-installation script](img/B19230_07_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – rbenv安装后脚本](img/B19230_07_05.jpg)'
- en: Figure 7.5 – rbenv post-installation script
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – rbenv安装后脚本
- en: Now, we are ready to install other versions of Ruby. For Ruby on Rails 5, we
    will install Ruby `2.6.10`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好安装其他版本的Ruby。对于Ruby on Rails 5，我们将安装Ruby `2.6.10`。
- en: 'Let’s install it by running the following command on the same Windows Powershell
    window that we just opened:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在刚刚打开的相同 Windows Powershell 窗口中运行以下命令来安装它：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The program will ask us whether we want to install the Lite version or the Full
    version. Choose the Full version. Once again, this might take a while, so please
    be patient.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 程序会询问我们是否想安装轻量版还是完整版。请选择完整版。这又可能需要一些时间，所以请耐心等待。
- en: 'Once this command has finished running, we must set this Ruby version for our
    whole system. We can do this by running the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦这个命令运行完成，我们必须为整个系统设置这个Ruby版本。我们可以通过运行以下命令来完成：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To confirm that this version of Ruby has been installed and enabled, use the
    following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认这个版本的Ruby已经被安装并启用，使用以下命令：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: gem install bundler
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: gem install bundler
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once this gem has been installed, we must update the RubyGem system with the
    following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了这个gem，我们必须使用以下命令更新RubyGem系统：
- en: '[PRE15]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will also take a while to compute, but once it’s finished, we will
    be ready to use Ruby on Rails on Windows.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令的计算也会花费一些时间，但一旦完成，我们就可以在Windows上使用Ruby on Rails了。
- en: Next, let’s see the steps for installing Ruby on Rails on Linux.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看在Linux上安装Ruby on Rails的步骤。
- en: Installing Ruby on Rails on Linux
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装Ruby on Rails
- en: 'For Ubuntu and Debian Linux distributions, we must also install `rbenv` and
    the dependencies necessary for Ruby on Rails to run correctly:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu和Debian Linux发行版，我们还必须安装`rbenv`以及Ruby on Rails正确运行所需的依赖项：
- en: 'Let’s start by opening a terminal and running the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先打开一个终端并运行以下命令：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'rbenv with the following command:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下命令安装rbenv：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'rbenv to our bash profile with the following command:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下命令将rbenv添加到我们的bash配置文件中：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, run the bash profile with the following command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行bash配置文件，使用以下命令：
- en: '[PRE21]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'openssl and that process will take some time. Once this command has finished
    installing Ruby 2.6.10, we need to set it as the default Ruby version for the
    whole machine. We can do so by running the following command:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装Ruby 2.6.10，我们需要将其设置为整个机器的默认Ruby版本。我们可以通过运行以下命令来实现：
- en: '[PRE22]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can confirm that this version of Ruby has been installed by running the
    following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来确认这个版本的Ruby已经被安装：
- en: '[PRE24]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: gem install bundler
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: gem install bundler
- en: '[PRE25]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once this gem has been installed, we can update the RubyGems system with the
    following command:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了这个gem，我们可以使用以下命令更新RubyGems系统：
- en: '[PRE26]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command will also take a while to compute, but once it’s finished, we will
    be ready to use Ruby on Rails on Linux.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令的计算也会花费一些时间，但一旦完成，我们就可以在Linux上使用Ruby on Rails了。
- en: 'For other Linux distributions and other operating systems, please refer to
    the official Ruby-lang page: [https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他Linux发行版和其他操作系统，请参阅官方Ruby-lang页面：[https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/)。
- en: Downloading our Ruby on Rails application
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载我们的Ruby on Rails应用程序
- en: 'While there are a couple of ways to use Rails code, for ease of use, we will
    download an existing project as an example. We’ll use the Git tool to clone the
    project. Open a terminal and type the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有几种使用Rails代码的方法，但为了方便使用，我们将下载一个现有项目作为示例。我们将使用Git工具克隆项目。打开一个终端并输入以下命令：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will generate a folder called `From-PHP-to-Ruby-on-Rails`. Now, let’s
    navigate into the project folder with the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为 `From-PHP-to-Ruby-on-Rails` 的文件夹。现在，让我们使用以下命令导航到项目文件夹：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once we’ve navigated into this folder, you’ll notice a `Gemfile`. If we open
    that `Gemfile` with our IDE of choice, we’ll see the beginning of the dependencies:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入这个文件夹，您会注意到一个 `Gemfile`。如果我们用我们选择的 IDE 打开那个 `Gemfile`，我们会看到依赖项的开始部分：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let’s not dwell on all the details (yet) except for the Rails gem that is declared
    there. As you may recall from the previous chapters, we can install gems and their
    dependencies using the `bundle` command. So, let’s do just that. Type the following
    command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不要纠结于所有细节（至少现在不要），除了那里声明的 Rails 钩子。如您从前面的章节中回忆起来，我们可以使用 `bundle` 命令安装钩子和它们的依赖项。所以，让我们就这样做。输入以下命令：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `bundle` command takes all of the gems declared in `Gemfile`, creates a
    dependency map (called `Gemfile.lock`), and installs these dependencies. The output
    of this command should look similar to this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`bundle` 命令会获取 `Gemfile` 中声明的所有钩子，创建一个依赖映射（称为 `Gemfile.lock`），并安装这些依赖项。此命令的输出应类似于以下内容：'
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output has been truncated for brevity. To prove that our dependencies have
    been installed correctly, we should run the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，输出已被截断。为了证明我们的依赖项已经正确安装，我们应该运行以下命令：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We should obtain the version of Rails that we just installed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该获取我们刚刚安装的 Rails 版本：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: And voilá – we have successfully installed Ruby on Rails. However, there are
    still a couple of things we need to clarify before we can start using this framework.
    Firstly, you may be wondering why we used the `bundle exec rails --version` command
    and not just `rails --version`. Well, as the Rails developers have to deal with
    Rails being able to run in different environments and platforms (be it Windows,
    Linux, macOS, and others), one way to make sure the “bundle” of libraries works
    correctly is to run rails commands in the context of the “bundle.” This is just
    a fancy way of saying it’s for “running the command using the libraries we just
    installed.” So, from now on, all of our Rails commands will be wrapped with the
    `bundle exec` command. If you’re interested in more details regarding this command,
    please refer to [https://bundler.io/v2.4/man/bundle-exec.1.html](https://bundler.io/v2.4/man/bundle-exec.1.html).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们已经成功安装了 Ruby on Rails。然而，在我们开始使用这个框架之前，我们还需要澄清一些事情。首先，您可能想知道为什么我们使用了 `bundle
    exec rails --version` 命令而不是仅仅 `rails --version`。嗯，由于 Rails 开发者必须处理 Rails 能够在不同的环境和平台上运行（无论是
    Windows、Linux、macOS 还是其他），确保“bundle”的库能够正确工作的方法之一是在“bundle”的上下文中运行 rails 命令。这只是说“使用我们刚刚安装的库运行命令”的一种花哨说法。所以，从现在起，我们所有的
    Rails 命令都将用 `bundle exec` 命令包装。如果您对这个命令的更多细节感兴趣，请参阅 [https://bundler.io/v2.4/man/bundle-exec.1.html](https://bundler.io/v2.4/man/bundle-exec.1.html)。
- en: Now that we’ve finally installed Ruby on Rails, we’ll start our server and take
    a ride on the Rails.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于安装了 Ruby on Rails，我们将启动服务器并体验 Rails。
- en: Starting our Ruby on Rails project
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始我们的 Ruby on Rails 项目
- en: 'Running our sample Rails application requires that we run the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的示例 Rails 应用程序需要我们运行以下命令：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We should see the following output after pressing the *Enter* key:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键后，我们应该看到以下输出：
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once we see this message, it means that we are ready to rock and roll. Open
    any web browser and, in the location bar, type the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们看到这条消息，这意味着我们已经准备好大干一场了。打开任何网页浏览器，在地址栏中输入以下内容：
- en: '[PRE36]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We should see the following page:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下页面：
- en: '![Figure 7.6 – Rails landing page](img/B19230_07_06.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – Rails 登录页面](img/B19230_07_06.jpg)'
- en: Figure 7.6 – Rails landing page
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – Rails 登录页面
- en: Congratulations! We have successfully run our first Ruby on Rails sample application.
    It’s always exciting and magical (at least for me) when you see this image for
    the first time. And by magic, I mean the way Rails is configured to use a web
    server and other tools to make this page possible. Now, before we start messing
    around with this sample application, let’s look at the file structure of Ruby
    on Rails.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经成功运行了第一个 Ruby on Rails 示例应用程序。当你第一次看到这个图像时，这总是令人兴奋和神奇的（至少对我来说是这样）。而这里的“魔法”是指
    Rails 配置使用网络服务器和其他工具来使这个页面成为可能。现在，在我们开始对这个示例应用程序捣鼓之前，让我们看看 Ruby on Rails 的文件结构。
- en: Rails file structure explained
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 文件结构解释
- en: 'One of the first things you need to learn as you learn Ruby on Rails is learning
    where things go in its file structure. In my case, it took me too long to connect
    the dots, but once I did, I no longer struggled with placing things. In the long
    run, it even helps you whenever a new Rails version comes out as the file structures
    are very similar among versions. So, let’s look at all the folders. Here’s the
    file structure:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习 Ruby on Rails 时，你需要学习的第一件事就是了解其文件结构中各个部分的位置。以我的情况为例，我花费了很长时间才把这些点连接起来，但一旦我做到了，我就不再在放置事物上挣扎。从长远来看，当新的
    Rails 版本发布时，这甚至有助于你，因为各个版本之间的文件结构非常相似。所以，让我们看看所有的文件夹。以下是文件结构：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'It may seem like a lot and even overwhelming, but we will be using five folders:
    `app/controllers`, `app/models`, `app/views`, `config`, and `public`. Rails is
    a `controllers` folder, models in the `models` folder, and views in the `views`
    folder. In the `config` folder, we’ll store configuration values such as our defined
    URL routes, database connection values, and values that may differ from environment
    to environment (that is, development, production, and testing). Last but not least,
    in the `public` folder, we’ll store certain assets that the web server needs to
    access. We might occasionally have to handle other folders, but for the most part,
    as a rookie RoR developer, we will mostly handle the aforementioned folders.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很多，甚至令人感到压倒，但我们将使用五个文件夹：`app/controllers`、`app/models`、`app/views`、`config`
    和 `public`。Rails 是 `controllers` 文件夹，模型在 `models` 文件夹中，视图在 `views` 文件夹中。在 `config`
    文件夹中，我们将存储配置值，例如我们定义的 URL 路由、数据库连接值以及可能因环境而异（即开发、生产测试）的值。最后但同样重要的是，在 `public`
    文件夹中，我们将存储网络服务器需要访问的某些资产。我们偶尔可能需要处理其他文件夹，但作为 RoR 新手开发者，我们大部分时间将主要处理上述文件夹。
- en: Now that we’ve taken a peek into the file structure of Rails, we can move on
    to the next section, where we’ll dive into how the MVC pattern comes into play.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Rails 的文件结构，我们可以继续到下一部分，我们将深入探讨 MVC 模式是如何发挥作用的。
- en: MVC at its finest
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC 之最佳实践
- en: 'As mentioned previously, Rails is an MVC controller. If you’ve used PHP frameworks
    in the past, such as CodeIgniter, Symfony, or Laravel, you will probably be familiar
    with the term. If you’re not, I recommend checking out these pages:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Rails 是一个 MVC 控制器。如果你过去使用过 PHP 框架，例如 CodeIgniter、Symfony 或 Laravel，你可能对这个词很熟悉。如果你不熟悉，我建议查看这些页面：
- en: '[https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html](https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html](https://www.oracle.com/technical-resources/articles/java/java-se-app-design-with-mvc.html)'
- en: '[https://pusher.com/blog/laravel-mvc-use/#why-use-mvc](https://pusher.com/blog/laravel-mvc-use/#why-use-mvc)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pusher.com/blog/laravel-mvc-use/#why-use-mvc](https://pusher.com/blog/laravel-mvc-use/#why-use-mvc)'
- en: 'In summary, the MVC pattern divides our application into three components –
    the model, in which we save all of our business logic (mostly but not exclusively
    by connecting to a database), the view, in which we hold what is to be shown on
    the browser (HTML for the most part), and the controller, which serves as the
    organizer of the previous two. If we were to use an example to explain this, a
    user authentication component would function as follows: the HTML form that shows
    the user and password fields would be created on the view. Once the user clicks
    on the button to submit these fields, the controller will receive the form data
    (user and password), and pass these to the model. After this, the model will connect
    to the database and attempt to find an entry on the database that matches the
    user and password. If we find a user entry, the model will send back the user
    entry found on the database. The next step would be the controller telling the
    browser to redirect to a page that shows the user as signed in and displays said
    user data that was passed by the model. While this may sound like a lot of work,
    Rails does an excellent job of abstracting these components in a way that is almost
    invisible to us. And this is where we will see how convention over configuration
    works in Rails. In other frameworks, we may have to define where our controller,
    model, and views live. We have the liberty to do so. In Rails, however, we need
    no such distinction. And this works like magic.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，MVC 模式将我们的应用程序分为三个组件——模型，其中我们保存所有的业务逻辑（主要是通过连接到数据库，但不限于），视图，其中我们存放要在浏览器上显示的内容（主要是
    HTML），以及控制器，它作为前两个组件的组织者。如果我们用一个例子来解释这一点，用户认证组件将如下工作：在视图中创建显示用户和密码字段的 HTML 表单。一旦用户点击按钮提交这些字段，控制器将接收表单数据（用户和密码），并将它们传递给模型。之后，模型将连接到数据库并尝试找到与用户和密码匹配的数据库条目。如果我们找到一个用户条目，模型将回传在数据库上找到的用户条目。下一步将是控制器告诉浏览器重定向到一个显示用户已登录并显示模型传递的用户数据的页面。虽然这可能听起来工作量很大，但
    Rails 在抽象这些组件方面做得非常出色，几乎对我们来说是不可见的。这正是我们将看到在 Rails 中约定优于配置是如何工作的。在其他框架中，我们可能需要定义我们的控制器、模型和视图所在的位置。我们有这样的自由。然而，在
    Rails 中，我们不需要这样的区分。这就像魔法一样。
- en: 'Let’s consider an example of creating a controller. The simplest way to do
    so is by using Rails generators. Rails generators are tools that help us generate
    boilerplate controllers, models, and more. We’ll use this tool to generate our
    controller. Let’s go to the terminal where we have our Rails project still running.
    Within that terminal, press (and keep pressing) the *Ctrl* key. Then (while still
    pressing the *Ctrl* key) press the *C* key. This will send a signal to our application
    to stop; the terminal should display something like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑创建一个控制器的例子。最简单的方法是使用 Rails 生成器。Rails 生成器是帮助我们生成样板控制器、模型等的工具。我们将使用这个工具来生成我们的控制器。让我们去终端，那里我们的
    Rails 项目仍在运行。在那个终端内，按下（并持续按下）*Ctrl* 键。然后（仍然按住 *Ctrl* 键）按下 *C* 键。这将向我们的应用程序发送一个停止信号；终端应该会显示类似以下的内容：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, let’s generate a `Home` controller. We can do so by running the following
    command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们生成一个 `Home` 控制器。我们可以通过运行以下命令来完成：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will output the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This process will also generate the controller and a couple of other files
    for testing and formatting; we will ignore them. Let’s just focus on the generated
    controller in `app/controllers/home_controller.rb`. Let’s look at its contents:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程还会生成控制器和一些其他用于测试和格式的文件；我们将忽略它们。让我们只关注在 `app/controllers/home_controller.rb`
    中生成的控制器。让我们看看它的内容：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: For now, it’s an empty controller, but we will soon populate it with actions
    that we will map using Rails routes ([https://guides.rubyonrails.org/routing.html](https://guides.rubyonrails.org/routing.html)).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它是一个空的控制器，但我们将很快用通过 Rails 路由映射的动作来填充它（[https://guides.rubyonrails.org/routing.html](https://guides.rubyonrails.org/routing.html)）。
- en: If you’re unfamiliar with the concept, the `routes` file simply maps a specific
    URL to a controller and an action. In simple terms, this specifies what controller
    action will be called when a specific URL is called. Let’s start by creating a
    URL that will be called when we open our browser to `http://localhost:3000/home`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个概念不熟悉，`routes` 文件只是将特定的 URL 映射到控制器和动作。简单来说，这指定了当调用特定 URL 时将调用哪个控制器动作。让我们先创建一个当我们在浏览器中打开
    `http://localhost:3000/home` 时将被调用的 URL。
- en: 'So, let’s start by starting our application again, but now, instead of using
    `rails server`, we’ll use the shortcut command, `rails s`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们首先再次启动我们的应用程序，但现在，我们不会使用 `rails server`，而是使用快捷命令，`rails s`：
- en: '[PRE42]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We should see the following output after pressing the *Enter* key:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在按下 *Enter* 键后，我们应该看到以下输出：
- en: '[PRE43]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Since we have not created the route, if we opened our browser right now and
    went to http://localhost:3000/home, we would see an error page:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有创建路由，如果我们现在打开我们的浏览器并访问 http://localhost:3000/home，我们会看到一个错误页面：
- en: '![Figure 7.7 – Rails routing error page](img/B19230_07_07.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – Rails 路由错误页面](img/B19230_07_07.jpg)'
- en: Figure 7.7 – Rails routing error page
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – Rails 路由错误页面
- en: 'This is because we have not defined any routes. Let’s create our `home` route.
    We can do so by opening the `config/routes.rb` file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们没有定义任何路由。让我们创建我们的 `home` 路由。我们可以通过打开 `config/routes.rb` 文件来实现：
- en: '[PRE44]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'So, let’s define a route. Our code should now look like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们定义一个路由。我们的代码现在应该如下所示：
- en: '[PRE45]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here, we are telling Rails that when the application gets a `GET` request with
    the `home` URL, it will point to the `home` controller, and execute the `index`
    action. Let’s go back to our browser and refresh the page. Now, our error should
    be as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在告诉 Rails，当应用程序接收到带有 `home` URL 的 `GET` 请求时，它将指向 `home` 控制器，并执行 `index`
    动作。让我们回到我们的浏览器并刷新页面。现在，我们的错误应该如下所示：
- en: '![Figure 7.8 – Rails unknown action error page](img/B19230_07_08.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – Rails 未知动作错误页面](img/B19230_07_08.jpg)'
- en: Figure 7.8 – Rails unknown action error page
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – Rails 未知动作错误页面
- en: 'So, Rails found `HomeController`, but it could not find the `index` action
    as it doesn’t exist yet. Let’s create it. Open our `app/controllers/home_controller.rb`
    file and add the following code to it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Rails 找到了 `HomeController`，但它找不到 `index` 动作，因为它还不存在。让我们创建它。打开我们的 `app/controllers/home_controller.rb`
    文件，并向其中添加以下代码：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This is familiar syntax – it’s `HomeController` that inherits from the `ApplicationController`
    class, which has a method called `index`. For now, this is all we are going to
    do for this class. Now, let’s refresh our browser again; we’ll see a more detailed
    error:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是熟悉的语法 – 这是 `HomeController` 继承自 `ApplicationController` 类，该类有一个名为 `index`
    的方法。现在，我们只为这个类做这些。现在，让我们再次刷新我们的浏览器；我们将看到一个更详细的错误：
- en: '![Figure 7.9 – Rails unknown format error page](img/B19230_07_09.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – Rails 未知格式错误页面](img/B19230_07_09.jpg)'
- en: Figure 7.9 – Rails unknown format error page
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – Rails 未知格式错误页面
- en: 'This error is thrown because Rails found the controller and the `index` action
    but is unable to load a view into the browser because no view has been defined.
    Let’s add the view. We can do this by creating the `app/views/home/index.html.erb`
    file with the following content:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误是因为 Rails 找到了控制器和 `index` 动作，但无法将视图加载到浏览器中，因为没有定义视图。让我们添加视图。我们可以通过创建包含以下内容的
    `app/views/home/index.html.erb` 文件来实现：
- en: '[PRE47]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, let’s refresh the browser once more; we should see the following output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次刷新浏览器；我们应该看到以下输出：
- en: '![Figure 7.10 – Rendered view](img/B19230_07_10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 渲染的视图](img/B19230_07_10.jpg)'
- en: Figure 7.10 – Rendered view
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 渲染的视图
- en: This is one of the features I have loved about Rails ever since I ran a Rails
    application for the first time. Without needing any additional configuration,
    Rails “knows” where to look for views. In this case, Rails “knew” that there should
    be a `home` folder inside the `views` folder. Rails also “knew” to look for an
    `index.html.erb` file within this `home` folder. In other frameworks (especially
    PHP ones), you must specify what file you will be rendering as a view within the
    controller. This becomes repetitive and impractical in the long run. Rails solves
    this in a very elegant and intuitive way. This is what convention over configuration
    refers to. Knowing the convention, we don’t need to configure where Rails should
    look for views.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我自从第一次运行 Rails 应用程序以来就非常喜欢的一个特性。无需任何额外配置，Rails “知道”在哪里查找视图。在这种情况下，Rails “知道”在
    `views` 文件夹内应该有一个 `home` 文件夹。Rails 还“知道”在这个 `home` 文件夹内查找 `index.html.erb` 文件。在其他框架（尤其是
    PHP 框架）中，你必须在控制器中指定你将渲染为视图的文件。这最终会变得重复且不实用。Rails 以非常优雅和直观的方式解决了这个问题。这就是约定优于配置所指的是的。了解约定后，我们不需要配置
    Rails 应该在哪里查找视图。
- en: Now that we have a basic understanding of the MVC pattern and how its components
    make up our project structure, let’s move on to the next section, where we’ll
    learn how to use this MVC structure to send, receive, and save data with Rails.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 MVC 模式及其组件如何构成我们的项目结构有了基本的了解，让我们继续下一部分，我们将学习如何使用 Rails 的 MVC 结构来发送、接收和保存数据。
- en: POST, GET, and SESSION in Rails
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 中的 POST、GET 和 SESSION
- en: 'One of the main differences while doing web development between PHP and Ruby
    is that PHP is web-based out of the box, while Ruby is not. All PHP needs is a
    web server with PHP enabled and we’re good to go. For development, PHP even comes
    with an internal web server. On the other hand, Ruby requires the use of a framework
    to be able to use web protocols and tools. Ruby on Rails is not the only framework
    that we could use for web development, but it’s the most popular one. You might
    also want to check out the Sinatra framework just to have another option other
    than Rails: [https://sinatrarb.com/](https://sinatrarb.com/).'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 Web 开发时，PHP 和 Ruby 之间一个主要的不同之处在于 PHP 是开箱即用的基于 Web 的，而 Ruby 则不是。PHP 所需要的一切就是一个启用了
    PHP 的 Web 服务器，我们就准备好了。对于开发，PHP 甚至自带了一个内部 Web 服务器。另一方面，Ruby 需要使用框架才能使用 Web 协议和工具。Ruby
    on Rails 并不是我们用于 Web 开发的唯一框架，但它是最受欢迎的一个。你也可能想了解一下 Sinatra 框架，以便有另一个不同于 Rails 的选择：[https://sinatrarb.com/](https://sinatrarb.com/)。
- en: 'We will stick to Rails for web development. One of the most popular tools that’s
    used within web development is forms. Forms help us get data from the user and
    handle said data to accomplish different tasks. We can set search criteria, authenticate
    users, or simply show previously saved data. In PHP, we can access these tools
    via the `$_POST`, `$_GET`, and `$_SESSION` arrays. In contrast, Rails handles
    this slightly differently but still in a useful and intuitive way. Let’s start
    by creating some examples with values from the URL or `$_GET` values. First, let’s
    add the value to the URL by adding the parameter in our browser: `http://localhost:3000/home?search=php`.
    The information in our browser will remain the same as we have not made any changes
    to the view. Now, let’s use our `index` action on our `Home` controller and add
    these parameters. Once again, we must open our `app/controllers/home_controller.rb`
    file and then add the following changes:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将坚持使用 Rails 进行 Web 开发。在 Web 开发中使用最流行的工具之一是表单。表单帮助我们从用户那里获取数据，并处理这些数据以完成不同的任务。我们可以设置搜索标准，验证用户，或者简单地显示之前保存的数据。在
    PHP 中，我们可以通过 `$_POST`、`$_GET` 和 `$_SESSION` 数组访问这些工具。相比之下，Rails 处理这些方式略有不同，但仍然是一种有用且直观的方式。让我们从使用来自
    URL 或 `$_GET` 值的值创建一些示例开始。首先，让我们通过在我们的浏览器中添加参数将值添加到 URL 中：`http://localhost:3000/home?search=php`。由于我们没有对视图进行任何更改，浏览器中的信息将保持不变。现在，让我们使用我们的
    `Home` 控制器的 `index` 动作并添加这些参数。再次，我们必须打开我们的 `app/controllers/home_controller.rb`
    文件，然后添加以下更改：
- en: '[PRE48]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We’ve added a variable called `search` which, in turn, is using the internal
    `params` variable. `params` is equivalent to the `$_REQUEST` array in PHP. In
    this example, we are using it to catch the value through the URL (search) and
    set it to a variable. Additionally, we’re showing a message with the obtained
    value. If we refresh our browser, we won’t see any changes. Again, this is because
    we have not altered the view file. However, if we go to the terminal where our
    application is still running, we will see the following output:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个名为 `search` 的变量，它反过来使用内部的 `params` 变量。`params` 等同于 PHP 中的 `$_REQUEST`
    数组。在这个例子中，我们使用它通过 URL（搜索）获取值并将其设置为一个变量。此外，我们还会显示获取到的值。如果我们刷新浏览器，我们不会看到任何变化。再次强调，这是因为我们没有修改视图文件。然而，如果我们去应用程序仍在运行的控制台，我们会看到以下输出：
- en: '[PRE49]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'As we can see, the console tells us a lot about the execution. Firstly, it
    tells us what method (`GET`) we’re using to call our URL. Then, it tells us the
    data that is being sent (`search`). Finally, it displays the message we added
    to our code. While this is not the best way to debug Rails applications, it does
    give us an insight as to what our code does and when it does it. In PHP, any time
    we write `echo`, it immediately passes it to the browser. In this case, should
    we want to pass data to the browser, first, we have to pass it to the view. So,
    let’s do that. Let’s add another line to our `index` action on our controller
    so that the code now looks like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，控制台告诉我们很多关于执行情况的信息。首先，它告诉我们我们使用什么方法（`GET`）来调用我们的URL。然后，它告诉我们正在发送的数据（`search`）。最后，它显示我们添加到代码中的消息。虽然这不是调试Rails应用程序的最佳方式，但它确实让我们了解了我们的代码做了什么以及何时做了什么。在PHP中，每次我们写`echo`，它就会立即传递给浏览器。在这种情况下，如果我们想将数据传递给浏览器，首先，我们必须将它传递给视图。所以，让我们这么做。让我们在我们的控制器上的`index`动作中添加另一行代码，使代码现在看起来像这样：
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This syntax looks familiar. If you don’t recall, we’re using an instance variable.
    This is the easiest way to pass values to a view. Now, let’s open the view and
    show this `@search` value. Let’s open the `app/views/home/index.html.erb` file
    and add code so that our view now looks like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法看起来很熟悉。如果您不记得，我们正在使用实例变量。这是将值传递给视图的最简单方法。现在，让我们打开视图并显示这个`@search`值。让我们打开`app/views/home/index.html.erb`文件并添加代码，使我们的视图现在看起来像这样：
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This also looks all too familiar. In PHP, we would use `<?= $search ?>`. In
    Rails, instance variables are immediately available to use on the view. Let’s
    refresh our browser one last time; we should see the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来也非常熟悉。在PHP中，我们会使用`<?= $search ?>`。在Rails中，实例变量可以立即在视图中使用。让我们最后一次刷新我们的浏览器；我们应该看到以下内容：
- en: '![Figure 7.11 – Rendered view with variables](img/B19230_07_11.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11 – 带有变量的渲染视图](img/B19230_07_11.jpg)'
- en: Figure 7.11 – Rendered view with variables
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 带有变量的渲染视图
- en: We’ve successfully obtained values from the URL. Next, we’ll look at values
    from a form sent through the `POST` method.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功从URL中获取值。接下来，我们将查看通过`POST`方法发送的值。
- en: The `POST` method is used to send data that we don’t want shown on the browser.
    Imagine sending a password through the browser. Anyone close by could find out
    our deepest secret. Fortunately, this is where `POST` values to the rescue.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`方法用于发送我们不想在浏览器上显示的数据。想象一下通过浏览器发送密码。附近的人可能会发现我们的最深秘密。幸运的是，这就是`POST`值救命的地方。'
- en: 'First, let’s add `GET` and `POST` routes to render a form and then send the
    form data. Let’s open our routes file, `config/routes.rb`, and add the following
    routes:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们添加`GET`和`POST`路由来渲染表单并发送表单数据。让我们打开我们的路由文件，`config/routes.rb`，并添加以下路由：
- en: '[PRE52]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We have to make two separate calls to http://localhost:3000/user – one to render
    the form and another one to obtain the form data. Now, let’s create an action
    on the controller. Let’s open our `app/controllers/home_controller.rb` file and
    add the user action:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须对http://localhost:3000/user进行两次单独的调用——一次用于渲染表单，另一次用于获取表单数据。现在，让我们在控制器上创建一个动作。让我们打开我们的`app/controllers/home_controller.rb`文件并添加用户动作：
- en: '[PRE53]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We’re only passing the password to the view so that we can compare it to a value.
    I’d like to note here that this should not be done in a real-life scenario; we’re
    only doing this for teaching purposes. Now, let’s create a view on `app/views/home/user.html.erb`
    and add the form with which we’ll be sending the data. For that purpose, we’ll
    be using Rails form helpers ([https://guides.rubyonrails.org/form_helpers.html](https://guides.rubyonrails.org/form_helpers.html)).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只将密码传递给视图，以便我们可以将其与一个值进行比较。我想在这里指出，在现实生活中不应该这样做；我们只是在教学目的下这么做。现在，让我们在`app/views/home/user.html.erb`上创建一个视图，并添加我们将要发送数据的表单。为此，我们将使用Rails表单辅助工具（[https://guides.rubyonrails.org/form_helpers.html](https://guides.rubyonrails.org/form_helpers.html)）。
- en: 'Forms are easier to write with this tool, though at first, it might seem a
    little confusing. So, let’s add the following code to our view:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个工具编写表单更容易，尽管一开始可能会有些困惑。所以，让我们在我们的视图中添加以下代码：
- en: '[PRE54]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'With this code, we’ve created a form that calls the same URL but with the `POST`
    method. Additionally, we are sending the value of a password. If we open our browser
    and set our URL to http://localhost:3000/user, we would see the following form:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，我们创建了一个表单，它调用相同的URL，但使用`POST`方法。此外，我们正在发送密码的值。如果我们打开我们的浏览器并将URL设置为http://localhost:3000/user，我们会看到以下表单：
- en: '![Figure 7.12 – Rendered HTML form](img/B19230_07_12.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12 – 渲染的HTML表单](img/B19230_07_12.jpg)'
- en: Figure 7.12 – Rendered HTML form
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 渲染的 HTML 表单
- en: 'However, let’s not send it quite yet as we haven’t done anything with the value.
    Let’s go back to the view code, `app/views/home/user.html.erb`, and add the following
    code so that the form looks like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们不要立即发送它，因为我们还没有对这个值做任何事情。让我们回到视图代码，`app/views/home/user.html.erb`，并添加以下代码，以便表单看起来像这样：
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, let’s go back to the browser and type `1234` in the password form field.
    Once we click on the **SEND** button, we should see the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到浏览器，并在密码表单字段中输入 `1234`。一旦我们点击 **发送** 按钮，我们应该看到以下内容：
- en: '![Figure 7.13 – Rendered HTML form with a message](img/B19230_07_13.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 带有消息的渲染 HTML 表单](img/B19230_07_13.jpg)'
- en: Figure 7.13 – Rendered HTML form with a message
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 带有消息的渲染 HTML 表单
- en: 'If we were to type any other value, such as `2345`, and click the **SEND**
    button, we would no longer see this message:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入任何其他值，例如 `2345`，然后点击 **发送** 按钮，我们就不会再看到这条消息：
- en: '![Figure 7.14 – Rendered HTML form without a message](img/B19230_07_14.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 无消息的渲染 HTML 表单](img/B19230_07_14.jpg)'
- en: Figure 7.14 – Rendered HTML form without a message
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 无消息的渲染 HTML 表单
- en: This is because we typed in the wrong value for the password. Again, this example
    is only for teaching purposes. I don’t think I need to tell you it’s a bad idea
    to send a password to the view (even if you are not going to show the password),
    but for our purposes, I believe this example served us well. Now, let’s look at
    session values.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们输入了密码的错误值。同样，这个例子只是为了教学目的。我认为我不需要告诉你发送密码到视图（即使你不想显示密码）是个坏主意，但为了我们的目的，我认为这个例子对我们很有帮助。现在，让我们看看会话值。
- en: 'Session values help save data that’s unique to a browser. They can be very
    useful when we’re dealing with a returning user or even an authentication component.
    For now, let’s do something simple: let’s try to find a session value and then
    create it. You already know the drill: first, we must create a route. Let’s open
    `config/routes.rb` and add the following routes:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 会话值有助于保存对浏览器独特的唯一数据。当我们处理返回用户或甚至认证组件时，它们非常有用。现在，让我们做点简单的事情：让我们尝试查找一个会话值，然后创建它。你已经知道了步骤：首先，我们必须创建一个路由。让我们打开
    `config/routes.rb` 并添加以下路由：
- en: '[PRE56]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, let’s create both the `get` and `set` actions on the controller. In our
    `app/controllers/home_controller.rb` file, add the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在控制器上创建 `get` 和 `set` 动作。在我们的 `app/controllers/home_controller.rb` 文件中，添加以下内容：
- en: '[PRE57]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Here, we’ve added the `name_get` and `name_set` actions. This is as simple
    as it might get on a controller. There is not much to do except set a variable
    called `@name` to pass to the view on the `name_get` action. In parallel, we will
    set the name to `"David"` on the `name_set` action. Lastly, let’s add two views.
    First, create an `app/views/home/name_get.html.erb` file with the following content:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了 `name_get` 和 `name_set` 动作。这在控制器上可能就是最简单的情况了。除了将一个名为 `@name` 的变量设置以传递给
    `name_get` 动作中的视图外，没有太多的事情要做。同时，我们将在 `name_set` 动作中将名称设置为 `"David"`。最后，让我们添加两个视图。首先，创建一个
    `app/views/home/name_get.html.erb` 文件，内容如下：
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'With this, we are only displaying the value that’s obtained from the session.
    Now, let’s create the view for setting the session value. Let’s create an `app/views/home/name_set.html.erb`
    file with the following content:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方式，我们只显示从会话中获取的值。现在，让我们创建设置会话值的视图。让我们创建一个 `app/views/home/name_set.html.erb`
    文件，内容如下：
- en: '[PRE59]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once we’ve saved all of our changes, we can try it out in our browser. First,
    let’s point our web browser to http://localhost:3000/get_name. This should give
    us the following output:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有更改后，我们可以在浏览器中尝试运行。首先，让我们将我们的网页浏览器指向 http://localhost:3000/get_name。这应该会给我们以下输出：
- en: '![Figure 7.15 – Page with a null name](img/B19230_07_15.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 名称空的页面](img/B19230_07_15.jpg)'
- en: Figure 7.15 – Page with a null name
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 名称空的页面
- en: 'As we have not set any session values, the `@name` variable is empty. Now,
    let’s open the URL in a browser that does set the http://localhost:3000/get_name
    value. This page should show us the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有设置任何会话值，`@name` 变量是空的。现在，让我们在一个设置了 http://localhost:3000/get_name 值的浏览器中打开
    URL。这个页面应该会显示以下内容：
- en: '![Figure 7.16 – Page for setting the session value](img/B19230_07_16.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 设置会话值的页面](img/B19230_07_16.jpg)'
- en: Figure 7.16 – Page for setting the session value
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 设置会话值的页面
- en: 'Now, let’s open our get name URL on the browser once more (http://localhost:3000/get_name);
    we should now see the following output:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再次在浏览器中打开我们的 get name URL（http://localhost:3000/get_name）；我们现在应该看到以下输出：
- en: '![Figure 7.17 – Page for getting the session value](img/B19230_07_17.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图7.17 – 获取会话值的页面](img/B19230_07_17.jpg)'
- en: Figure 7.17 – Page for getting the session value
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17 – 获取会话值的页面
- en: We have successfully set up a session name and retrieved it. This is useful
    for visitors to our site and returning visitors who may have created an account.
    The correct way to go about this would be to get the username from a database,
    set it as a session value, and then display it to the user. Beware that sessions
    are based on cookies, so if a user has their cookies disabled in their browser,
    none of this will work. We can confirm this cookie-based behavior. If we were
    to open a browser in Incognito mode, our `get_name` route would display an empty
    name until we browsed to the `set_value` route. Just beware that just as in PHP,
    session values are cookie-based.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功设置了会话名称并检索了它。这对访问我们网站的访客和可能已经创建账户的回头客很有用。正确的方法是从数据库中获取用户名，将其设置为会话值，然后显示给用户。请注意，会话是基于cookie的，所以如果用户在浏览器中禁用了cookie，那么这一切都不会起作用。我们可以确认这种基于cookie的行为。如果我们以隐身模式打开浏览器，我们的`get_name`路由将显示一个空名称，直到我们浏览到`set_value`路由。只是要注意，就像在PHP中一样，会话值是基于cookie的。
- en: If you come from a PHP background (as I did at the time), there are a couple
    of additional notes that I’d like to share with you. One is that, unlike PHP,
    you can’t have a “Ruby” web server. In the Ruby realm, your web server will always
    require a framework to execute Ruby code. That took me a little while to digest,
    but once I accepted it, Ruby on Rails became my go-to framework. The second one
    is more related to setting up the local environment. I tested this setup on different
    operating systems and different versions of Mac, Windows, and Linux with different
    results. I accomplished the best-unified setup by using `rbenv` ([https://github.com/rbenv/rbenv](https://github.com/rbenv/rbenv)).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自PHP背景（就像我当时的情形），我还有一些额外的注意事项想要与你分享。一点是，与PHP不同，你不能有一个“Ruby”网络服务器。在Ruby领域，你的网络服务器始终需要一个框架来执行Ruby代码。这让我花了一些时间来消化，但一旦我接受了这一点，Ruby
    on Rails就成为了我的首选框架。第二点是更多关于设置本地环境的相关内容。我在不同的操作系统上测试了这个设置，包括不同版本的Mac、Windows和Linux，结果各不相同。通过使用`rbenv`（[https://github.com/rbenv/rbenv](https://github.com/rbenv/rbenv)），我实现了最佳统一的设置。
- en: This tool (`rbenv`) lets you install different versions of Ruby on your machine.
    One “cheat” that I found to be very useful is that when installing Rails failed
    with one version of Ruby, I simply tried it with another version and most of the
    time, the second time, Rails worked flawlessly. Try installing different versions,
    newer versions, and older versions, and see how they behave. Finding the subtle
    differences between Ruby and Ruby on Rails versions will make you a better developer.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具（`rbenv`）允许你在机器上安装不同的Ruby版本。我发现的一个非常有用的“技巧”是，当安装Rails失败时，我简单地尝试使用另一个版本的Ruby，大多数情况下，第二次尝试Rails都能完美运行。尝试安装不同的版本，包括新版本和旧版本，看看它们的运行情况。发现Ruby和Ruby
    on Rails版本之间的细微差别将使你成为一个更好的开发者。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about Rails, the MVC application pattern, and how
    to install it as a gem. We also learned how to generate controllers and where
    these come in handy when using Rails. Lastly, we learned what developers mean
    when they refer to the Ruby on Rails convention over configuration “paradigm”
    and how this feature makes our lives easier when using Rails. Now, we are ready
    to start connecting and using databases with Rails Models.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Rails、MVC应用程序模式以及如何将其作为gem安装。我们还学习了如何生成控制器，以及在使用Rails时这些控制器在哪里派上用场。最后，我们学习了当开发者提到Ruby
    on Rails的“约定优于配置”范式时，他们指的是什么，以及这个特性如何使我们在使用Rails时生活更轻松。现在，我们准备好开始使用Rails Models连接和使用数据库了。
