- en: Adding New Widgets to the WordPress Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to create your own widget through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new widget in WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying configuration options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating configuration options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the widget display function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom dashboard widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom widget to the network dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Widgets have been present in WordPress from the early days of the platform.
    They allow users to easily populate sidebars or other areas of their website theme
    with blocks of content that are provided by WordPress itself (post or page data),
    or by any plugins that have been installed (for example, bug tracking system information).
    Looking at a WordPress installation, the default set of widgets include the Archives
    widget, which lists monthly post archives, and the Recent Comments widget, which
    provides an easy way to display visitor comments stored on your WordPress website.
  prefs: []
  type: TYPE_NORMAL
- en: Following its open design, WordPress provides functions that allow plugin developers
    to create new widgets that users will be able to add to their page design. This
    chapter shows how to use the widget class to create a custom widget. It also covers
    the second type of widget, the dashboard widget, which can be used to display
    plugin-specific information on the front page of the administrative area.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new widget in WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in creating a custom widget is to define its name and indicate
    which class contains all of its implementation functions. Once the new element
    has been registered with the system, it will immediately appear in the widget
    list, where users will be able to drag and drop it to their sidebars.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe defines a new widget that displays recent book reviews from the
    custom post type category created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Updating page title to include custom
    post data using plugin filters* recipe from Chapter 4, *The Power of Custom Post
    Types*, to have a starting point for this recipe. Alternatively, you can get the
    resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`) from the
    code bundle and activate the `Chapter 4 - Book Reviews` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch10-book-review-widget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch10-book-review-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 10 - Book Review Widget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when widgets
    are initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch10brw_create_widgets`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to declare the `Book_Reviews` class along
    with its constructor method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 10 - Book
    Review Widget` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Widgets section of the Appearance administration page to see the newly
    created Book Reviews widget appear as part of the list of Available Widgets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop the new widget to one of the available sidebars listed on the
    right-hand side to create a widget instance, and see that the widget currently
    has no available options to configure it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32e68aaf-3f26-4409-af25-a9f363411243.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `widgets_init` action hook is used to register a function to be executed
    when widgets are being created by WordPress. When the callback occurs, we create
    a new widget by calling the simple `register_widget` function. As can be seen
    in the recipe, this function requires a single argument that indicates the name
    of the class that contains the widget definition.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the recipe declares the widget implementation class, which extends
    the WordPress `WP_Widget` class. While the class has many potential member methods,
    this recipe only defines the class constructor, which initializes the object instance
    by specifying a unique identifier, a title, and a description embedded within
    an array of optional parameters. As with any other functions declared in plugins,
    it is important to give unique names to the widget class and widget identifier
    in order to avoid conflict with other plugins.
  prefs: []
  type: TYPE_NORMAL
- en: When the plugin is activated, users can see the new widget immediately and are
    able to add one or more instances of the new element as part of a sidebar's content.
    However, the new widget will not render anything other than an error message on
    website pages until its `widget` method is implemented in a later recipe in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have noticed, this recipe creates a separate plugin file and directory
    from the main book review plugin created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins extending other plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we could have placed the widget creation code in the same file as the
    book review plugin, placing it in a separate file is just as valid. Some plugins
    distributed on the official [wordpress.org](http://wordpress.org) repository actually
    use that technique to break up their functionality into more manageable code segments.
    The only thing to be careful of with this technique is to be sure that all the
    elements that a secondary plugin is dependent upon are loaded before referring
    to them in callback functions.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, since widgets are created late in the WordPress initialization
    process, the custom post type that will be required by the widget will be available.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Updating page title to include custom post data using plugin filters* recipe
    in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying configuration options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the plugin configuration pages, widgets can have one or more options
    to allow users to specify how some aspects of the component will behave. These
    options can be configured individually for each instance of a widget that is added
    to a website layout. To handle all of the logistics around multiple possible widget
    instances, WordPress actually takes care of most of the data handling and storage
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a new method to the book review widget class to
    display configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Creating a new widget in WordPress* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v1.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `form` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the Appearance | Widgets administration page and expand the Book Reviews
    widget instance to see the newly created options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the widget options and click on Save to update its configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/508cf006-79e8-4c98-b823-8fcb7ff4525a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users create a new widget instance, WordPress automatically manages configuration
    options for that element using an array variable. It also calls the widget class'
    `form` method, if present, to render the widget instance's options in a configuration
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first few lines of code in the `form` method verify that the `instance`
    array contains proper values that specify whether the widget should be displayed,
    the number of book reviews to be shown, and the title that should be displayed
    at the beginning of the widget. If any of these options are missing, we use the
    PHP ternary conditional operator (`?:`) to assign default values to the `render_widget`,
    `nb_book_reviews`, and `widget_title` functions. This operator expects three expressions,
    ordered as follows: `(expr1)?(expr2):(expr3)`. It will then return `expr2` if
    `expr1` is true and `expr3` if it''s false.'
  prefs: []
  type: TYPE_NORMAL
- en: With these variables in place, the rest of the `form` method's code uses a mix
    of HTML and PHP code to render the configuration fields that are shown in the
    widget editor. The `get_field_id` and `get_field_name` methods, seen throughout
    this code, are used to generate unique identifiers that will help WordPress to
    store data separately for all widget instances.
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in this recipe, the widget class is able to automatically process
    and save widget configuration parameters. However, it should be noted that allowing
    WordPress to handle this task by itself means that no validation will be performed
    on the data entered. This could cause problems if a user enters text instead of
    the number of reviews to be displayed. The next recipe shows how to handle data
    validation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new widget in WordPress* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating configuration options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The widget configuration panel that was put in place in the previous recipe
    was functional, allowing users to change options and save updated values in the
    website database. That being said, all WordPress does by default when the user
    saves a widget is store values directly to the site database. Since accepting
    user data blindly can lead to functionality problems and security risks if wrong
    or malicious values are entered, it is preferable to add data validation rules
    through the creation of an `update` method that will be able to verify configuration
    data before it is saved. This recipe shows how to implement a widget's `update`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Displaying configuration options* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v2.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `update` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Widgets section of the Appearance administration page and expand the
    Book Reviews widget instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a textual value in the Number of reviews to display field and save the
    widget. You will see that the field's value reverts to the last valid number saved
    for this field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `update` method receives two arrays of data and must return a single array
    to be saved in the website database. The two incoming arrays contain the new option
    values entered by the user and the values that were previously stored for the
    widget, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To start from known values, the method's implementation starts by making a copy
    of the old values to a new variable called `$instance`. It follows this initialization
    by calling the `sanitize_text_field` function to remove potentially harmful HTML
    or PHP tags from text fields, saving the return value in the `$instance` array.
    It also calls the PHP `is_numeric` and `intval` functions on entry, indicating
    the number of reviews to be displayed to make sure that it's a numeric value.
    If anything other than a number is entered, the previous field value will be saved
    and displayed back to the user. Unfortunately, it is not possible to display an
    error message when this type of validation of widget options is performed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Displaying configuration options* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the widget display function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all of the widget creation work that we have done so far, our new creation
    does not display any content on the website yet. When displaying an area that
    contains widgets, WordPress tries to call a method named `widget` for each user-selected
    widget to output the desired content to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to implement a `widget` method to display a list of recent
    book reviews when the widget is instantiated in a sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Validating configuration options* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-widget/ch10-book-review-widget-v3.php`) from
    the code bundle and rename the file as `ch10-book-review-widget.php`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `ch10-book-review-widget` directory and edit `ch10-book-review-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `Book_Reviews` class and add the following block of code within the
    class to define the `widget` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the website''s front page to see the newly added widget contents displayed
    in the sidebar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb74f96f-d123-4879-b1e6-1eaa960a94d0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to action hooks that we have seen in the earlier chapters, the `widget`
    method is meant to directly output HTML code to the browser that will be displayed
    when an instance of the new widget has been created in a sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: The `widget` method starts by checking whether or not the widget should be displayed.
    If it should, it continues by calling the standard PHP `extract` function on the
    first parameter received, an array named `$args`. Calling this function parses
    the array and creates variables for each element found, making it easier for the
    following code to access the elements that should be placed before and after the
    widget title and widget content.
  prefs: []
  type: TYPE_NORMAL
- en: After this initial statement, the recipe continues by retrieving the number
    of items to display and the widget title from the `$instance` array, which has
    been received as the second method parameter using the same technique that was
    shown when implementing the `form` method.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the code is very similar to the book review shortcode created in
    [*Chapter 4*](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types* (displaying custom post type data in shortcodes), where we assemble
    a query string that indicates the type and maximum quantity of data that we want
    to retrieve from the database. The resulting query is executed by creating a new
    instance of the WordPress `WP_Query` object. If results are found, the following
    recipe code cycles through all the entries and outputs code to render an unordered
    list of all the items found. Last, but not least, the recipe formats the widget
    content by outputting the values of the `$before_widget`, `$after_widget`, `$before_title`,
    and `$after_title` widget class variables, and the user-specified widget title
    in the right places.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a new widget in WordPress* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom dashboard widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While widgets are primarily used by website administrators to easily add content
    to their front-facing websites, WordPress contains another type of widget that
    plugin developers can use to enhance user experience. Dashboard plugins are sections
    that appear on the front page of a website's administration area. These sections
    can offer any kind of functionality, from simple information displays indicating
    how much data is stored in a plugin to forms that allow website administrators
    to quickly perform configuration tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add a new dashboard widget that indicates how many
    book reviews are stored in the system, along with links to quickly access them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Updating page title to include custom
    post data using plugin filters* recipe from [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*, to have a starting point for this recipe. Alternatively,
    you can get the resulting code (`Chapter 4/ch4-book-reviews/ch4-book-reviews-v11.php`)
    from the code bundle and activate the `Chapter 4 - Book Reviews` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch10-book-review-dashboard-widget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory and create a text file called `ch10-book-review-dashboard-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new file in a code editor and add an appropriate header at the top
    of the plugin file, naming the plugin `Chapter 10 - Book Review Dashboard Widget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line of code to register a function to be called when the
    dashboard contents are being prepared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code segment to provide an implementation for the `ch10brdw_add_dashboard_widget`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the following block of code to implement the `ch10brdw_dashboard_widget`
    function declared in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Plugins management page and Activate the `Chapter 10 - Book
    Review Dashboard Widget` plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the website''s Dashboard to see the new Book Reviews widget at
    the bottom of the page, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af35d77c-3218-493a-a65e-4da723b1f0e4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any plugin can register its own dashboard widget when WordPress is putting together
    content for this administrative landing page. After registering a function to
    be called during the dashboard setup phase, our recipe makes a call to the `wp_add_dashboard_widget`
    function to add our own element to the website when the callback is executed.
    The `wp_add_dashboard_widget` function requires three parameters that need to
    provide a unique identifier for the new item, a title to be displayed at the top
    of the widget, and a function that will be responsible for generating the widget's
    contents. The `wp_add_dashboard_widget` function also has an optional fourth parameter
    that can be used when the widget needs to process form data as part of the dashboard
    widget contents.
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in the previous screenshot, dashboard widgets are displayed using
    WordPress meta boxes, where any HTML code echoed by the content display function
    directly appears in the box.
  prefs: []
  type: TYPE_NORMAL
- en: While the display function is mostly composed of HTML code, we also make a call
    to the `wp_count_posts` utility function, which easily returns the number of posts
    for a given post type.
  prefs: []
  type: TYPE_NORMAL
- en: The new widget can be hidden and moved to a new location on the Dashboard, like
    any other built-in widget. Just like the front-facing widget plugin created earlier
    in this chapter, it should be noted that all the code in this plugin is in a separate
    file to the original book review plugin, to organize its code separately from
    the original plugin file created in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml),
    *The Power of Custom Post Types*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Updating page title to include custom post data using plugin filters* recipe
    in [Chapter 4](6298bc2b-19d5-4e3a-833c-3c4b667b22e5.xhtml), *The Power of Custom
    Post Types*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom widget to the network dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the recipe titled *Creating network-level admin pages* back
    in [*Chapter 3*](0346c3c6-27ee-45fb-bfd6-df398e04b2b4.xhtml), *User Settings and
    Administration Pages*, WordPress offers a very powerful mode called Network mode,
    which allows for multiple websites to be served from a single installation of
    the platform. When creating a plugin, developers need to think if it would make
    sense for their plugin to offer a dashboard widget that would only be seen in
    the network administrator's dashboard instead of being seen in individual website
    dashboards, or if their plugin's scope is really more relevant at each website's
    level. The following recipe shows how to modify the dashboard widget defined in
    the previous recipe so that it appears in the network administration panel on
    network installations, while still appearing in the administration dashboard in
    single site installations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have already followed the *Adding a custom dashboard widget* recipe
    to have a starting point for this recipe. Alternatively, you can get the resulting
    code (`Chapter 10/ch10-book-review-dashboard-widget/ch10-book-review-dashboard-widget-v1.php`)
    from the code bundle and rename the file `ch10-book-review-dashboard-widget.php`.
    You should also have access to a network site configured as a Network to test
    all of this plugin's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the WordPress plugin directory of your development installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory called `ch10-book-review-dashboard-widget` and edit `ch10-book-review-dashboard-widget.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the `add_action` call that was first added at the top of the plugin
    and add the following highlighted lines of code around the existing function call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the `ch10brdw_dashboard_widget` function and add the following code
    to the function around the existing implementation of the function. The new lines
    of code are shown in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the plugin file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the website Dashboard (on a single site installation) or to the
    Network-level Dashboard (in a network installation) to see the same widget as
    before or to see the network-level dashboard, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e8d787f-500a-42bb-a603-67ade585273a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The initial change made in this recipe is to check whether the plugin is running
    on a single site or network installation of WordPress and associate a callback
    function with the appropriate action hook depending on the result. As you can
    see, we use the same callback function in both cases, since the widget registering
    function should call `wp_add_dashboard_widget` to register a widget with the system
    in either case.
  prefs: []
  type: TYPE_NORMAL
- en: The widget rendering function is also shared between both modes. When running
    in a network installation, the rendering code first gets a list of all sites using
    the `get_sites` function, then cycles through the list of sites and uses the `switch_to_blog`
    function to access data from each site's database tables. Once all the blogs have
    been processed, we use the `restore_current_blog` function to go back to the original
    site that is configured as the top-level site in the network.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to restore the current blog to avoid leaving some internal variables
    pointing to the wrong site.
  prefs: []
  type: TYPE_NORMAL
- en: When running on a single site installation of WordPress, we create a dummy list
    of sites that contains a single entry to allow us to use the same `foreach` loop
    control structure. We then avoid calling the functions that are related to network
    site operations when WordPress is not configured in the multisite mode. Otherwise,
    the actual code that queries how many book reviews are present and displays them
    is identical between both versions of the widget.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Adding a custom dashboard widget* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
