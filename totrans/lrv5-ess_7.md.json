["```php\nnamespace App;\n\nuse Illuminate\\Auth\\Authenticatable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as uthenticableContract;\nuse Illumunate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nuse App\\Cat;\n\nclass User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n  use Authenticable, CanResetPassword;\n  public function cats() {\n    return $this->hasMany('App\\Cat');\n  }\n public function owns(Cat $cat) {\n return $this->id == $cat->user_id;\n }\n public function canEdit(Cat $cat) {\n return $this->is_admin || $this->owns($cat);\n }\n}\n```", "```php\nuse Authenticable, CanResetPassword;\n```", "```php\npublic function isAdministrator()\n{\n  return $this->getAttribute('is_admin');\n}\n```", "```php\nprotected $casts = [\n  'is_admin' => 'boolean',\n];\n```", "```php\n$ php artisan make:migration add_is_admin_column_to_users\n\n```", "```php\npublic function up() {\n  Schema::table('users', function(Blueprint $table) {\n    $table->boolean('is_admin')->default(false)\n      ->after('password');\n  }\n}\n\n```", "```php\npublic function down() {\n  Schema::table('users', function(Blueprint $table) {\n    $table->dropColumn('is_admin');\n  });\n}\n```", "```php\n$ php artisan make:migration add_user_id_column_to_cats\n\n```", "```php\npublic function up() {\n  Schema::table('cats', function(Blueprint $table) {\n    $table->integer('user_id')->unsigned();\n    $table->foreign('user_id')->references('id')->on('users')\n      ->onDelete('cascade');\n  });\n}\n\n```", "```php\npublic function down() {\n  Schema::table('cats', function(Blueprint $table) {\n    $table->dropForeign('cats_user_id_foreign');\n    $table->dropColumn('user_id');\n  });\n}\n```", "```php\nUse App\\User;\n\nclass UsersTableSeeder extends Seeder {\n  public function run() {\n    User::create([\n      'username' =>'admin',\n      'password' => bcrypt('hunter2'),\n      'is_admin' => true, \n    ]);\n\n    User::create([\n      'username' => 'scott',\n      'password' => bcrypt('tiger'),\n      'is_admin' => false,\n    ]);\n  }\n}\n```", "```php\n$ php artisan migrate --seed\n\n```", "```php\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Contracts\\Auth\\Guard;\nuse Illuminate\\Contracts\\Auth\\Registrar;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesAndRegistersUsers;\n\nclass AuthController extends Controller {\n\n  use AuthenticatesAndRegistersUsers;\n\n  public function __construct(Guard $auth, Registrar $registrar) {\n    $this->auth = $auth;\n    $this->registrar = $registrar;\n\n    $this->middleware('guest', ['except' => 'getLogout']);\n  }\n}\n```", "```php\n$router->controllers([\n  'auth' => 'Auth\\AuthController',\n  'password' => 'Auth\\PasswordController',\n]);\n```", "```php\n<div class=\"container\">\n  <div class=\"page-header\">\n    <div class=\"text-right\">\n      @if (Auth::check())\n        Logged in as \n        <strong>{{ Auth::user()->username }}</strong>\n        {!! link_to('auth/logout', 'Log Out') !!}\n      @else\n        {!! link_to('auth/login', 'Log In') !!}\n      @endif\n    </div>\n  @yield('header')\n  </div>\n  @if (Session::has('message'))\n    <div class=\"alert alert-success\">\n      {{ Session::get('message') }}\n    </div>\n  @endif\n\n  @if (Session::has('error'))\n    <div class=\"alert alert-warning\">\n      {{ Session::get('error') }}\n    </div>\n  @endif\n  @yield('content')\n</div>\n```", "```php\n@extends('layouts.master')\n@section('header')<h2>Log In</h2>@stop\n@section('main')\n  {!! Form::open(['url' => 'auth/login') !!}\n  <div class=\"form-group\">\n    {!! Form::label('username', 'Username', ['class' => \n      'control-label') !!}\n    <div class=\"form-controls\">\n      {!! Form::text('username', null, ['class' => \n        'form-control']) !!}\n    </div>\n  </div>\n  <div class=\"form-group\">\n    {!! Form::label('Password') !!}\n    <div class=\"form-controls\">\n      {!! Form::password('password', ['class' => \n      'form-control']) !!}\n    </div>\n  </div>\n  {!! Form::submit('Log in', ['class' => 'btn btn-primary') !!}\n  {!! Form::close() !!}\n@stop\n\n```", "```php\n$this->middleware('auth', ['except' => 'getLogout']);\n\n```", "```php\npublic function __construct(Guard $auth) {\n  $this->auth = $auth;\n}\n\npublic function handle($request, Closure $next) {\n  if ($this->auth->guest()) {\n    if ($request->ajax()) {\n      return response('Unauthorized', 401);\n    } else {\n      return redirect()->guest('auth/login');\n    }\n  }\n  return $next($request);\n}\n```", "```php\n$ php artisan make:middleware IsAdministrator\n\n```", "```php\npublic function __construct(Guard $auth) {$this->auth = $auth;}\n```", "```php\nuse Illuminate\\Contracts\\Auth\\Guard;\n```", "```php\npublic function handle($request, \\Closure $next) {\n  if ( ! $this->auth->user()->isAdministrator()) {\n    if ($this->request->ajax()) {\n      return response('Forbidden.', 403);\n    } else {\n      throw new AccessDeniedHttpException;\n    }\n  }\n}\n```", "```php\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\n```", "```php\nprotected $routeMiddleware = [\n  'auth' => 'App\\Core\\Http\\Middleware\\Authenticate',\n  'auth.basic' => Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n  'guest' => 'App\\Core\\Http\\Middleware\\RedirectIfAuthenticated',\n  'admin' => 'App\\Http\\Middleware\\IsAdministrator',\n];\n```", "```php\nRoute::get('admin/dashboard', [\n  'middleware' => ['auth', 'admin'],\n  'uses' => '\\Admin\\DashboardController@index',\n]);\n```", "```php\n$rules = [\n  'name' => 'required|min:3', // Required, > 3 characters\n  'date_of_birth' => ['required, 'date'] // Must be a date\n];\n```", "```php\n$validator = Validator::make($rules, Input::all());\n```", "```php\nreturn redirect()\n  ->back()\n  ->with('errors, $validatior->messages());\n```", "```php\nif ($errors->has('name')) {\n foreach ($errors->get('name') as $error) {\n echo $error;\n  }\n}\n```", "```php\n$ php artisan make:request SaveCatRequest\n\n```", "```php\npublic function rules() {\n  return [\n    'name' => 'required|min:3',\n    'date_of_birth' => 'required|date',\n  ];\n}\n```", "```php\npublic function rules() {\n  $rules = [\n    'billing_address' => 'required',\n  ];\n  if ($request->has('shipping_address_different') {\n    $rules['shipping_address'] = 'required';\n  }\n  return $rules;\n}\n```", "```php\npublic function create(SaveCatRequest $request) {\n  // method body\n}\n\npublic function update(SaveCatRequest $request) {\n  // method body\n}\n```", "```php\nEvil Cat <script>alert('Meow!')</script>\n```", "```php\nRoute::get('sql-injection-vulnerable', function() {\n  $name = \"'Bobby' OR 1=1\";\n  return DB::select( \n    DB::raw(\"SELECT * FROM cats WHERE name = $name\"));\n});\n```", "```php\nRoute::get('sql-injection-not-vulnerable', function() {\n  $name = \"'Bobby' OR 1=1\";\n  return DB::select(\n    DB::raw(\"SELECT * FROM cats WHERE name = ?\", [$name]));\n});\n```", "```php\n<input name=\"is_admin\" value=\"1\" />\n```", "```php\nCat::create(Request::all())\n```", "```php\nRoute::filter('https', function() { \n  if ( ! Request::secure()) \n    return Redirect::secure(URI::current()); \n});\n```"]