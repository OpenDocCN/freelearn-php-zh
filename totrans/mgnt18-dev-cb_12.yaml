- en: Chapter 12. Debugging and Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Xdebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with FirePHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Magento test case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging a website in an efficient way is one of the most important jobs of
    PHP developers. These days, a website is a lot more than some simple HTML pages.
    In a Magento web shop, you have a lot of complex business logic that is used in
    the flow of an e-commerce transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in PHP is not out of the box like in other programming languages.
    There are many ways to configure a PHP debugger (Xdebug) with a good code editor
    such as NetBeans. With some extra tools such as FirePHP and the Zend Wildfire
    plugin, debugging is much easier.
  prefs: []
  type: TYPE_NORMAL
- en: Another part of debugging is automated tests. While working with objects and
    functions, there are many ways to write some tests that you can run on a set of
    configured functions. A report will show you the information about the passed
    and failed tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Xdebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common way of debugging a PHP application is to use some functions
    such as `echo`, `die()`, `var_dump()`,and `print_r()`. In Magento, you can use
    the `Mage::log()` statement to print some logs to a file, but this isn't a real
    debugger.
  prefs: []
  type: TYPE_NORMAL
- en: With a real debugger, you can break the script and look at the variables and
    values they have. You can also change values, go further, skip statements, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: In PHP, you can configure Xdebug to debug your PHP script or application. In
    this recipe, we will see how to install Xdebug in the development environment
    and how we can integrate it with an IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will start an Xdebug session with the NetBeans IDE. Open
    NetBeans and set the **Magento** project as **Main Project**. Make sure all the
    URLs are configured correctly in the **Property** settings of the project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how you can install Xdebug on your development
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will install Xdebug with the PHP `pear` library. Make sure it is installed.
    If not, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to install the `xdebug` library. You can do this with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command gives the following output:![How to do it...](img/3329OS_12_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can read in the screenshot, we have to locate the `xdebug.so` file in
    the `php.ini` file. To find out the path of the `xdebug.so` file, run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you have the path, add the following line in the `php.ini` file. Open
    the file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, do the same for the `cli/php.ini` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Paste the following line of code at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the path matches the path of the `xdebug.so` file on your server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Restart the Apache server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test if Xdebug is correctly installed, you can check it with `phpinfo()`
    in the browser or you can run the following command that checks the `phpinfo()`
    page using the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous command gives the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to configure the NetBeans Xdebug integration. To make NetBeans
    work with Xdebug, we have to add the following configuration at the end of the
    `php.ini` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart your Apache server and look at the `phpinfo()`page to see if the Xdebug
    settings have been applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to check your NetBeans debug settings. Navigate to **Tools**
    | **Options** and configure it as shown in the following screenshot:![How to do
    it...](img/3329OS_12_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to check if the project URL has the right value. Open the **Project
    Properties** and go to **Run Configuration**. Make sure the **Project URL** field
    has the right value as shown the following screenshot:![How to do it...](img/3329OS_12_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now ready to start the first debug session. To start it, we have to click
    on the debug button that is near the run button. You can also use the shortcut
    *Ctrl* + *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When starting a debug session, a new tab will be added in the browser with
    a URL like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://magento-dev.local/?XDEBUG_SESSION_START=netbeans-xdebug`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The web page doesn't load because the debugger is interrupting the process.
    To continue, we have to use the debugger controls in NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you add a breakpoint in the `index.php` file on line 87, `Mage::run($mageRunCode,
    $mageRunType)`, and continue with the debugger, you will see the variable values
    as shown in the following screenshot:![How to do it...](img/3329OS_12_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you continue with the breakpoint, you will see that the page will be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The debug session stays alive until you hit the stop button in NetBeans. When
    you browse to other pages on your website, the debugger will continue as long
    as the session is alive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To stop the debug session, click on the stop button in NetBeans. A browser page
    will be opened with the message that the session has stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xdebug needs to be installed on the server where you want to debug it. In this
    recipe, the server used is the local debug server.
  prefs: []
  type: TYPE_NORMAL
- en: We installed Xdebug using PEAR. PEAR is an application repository for PHP plugins.
    With PEAR, we downloaded and installed the `xdebug` library.
  prefs: []
  type: TYPE_NORMAL
- en: When Xdebug was installed on the server, we configured the `php.ini` file to
    use the `xdebug` library. We added some settings to make the Xdebug configuration
    compatible with NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using Xdebug on a remote server, make sure you can connect to the server
    trough port 9000\. This is mostly disabled on the firewall of the server and your
    local PC.
  prefs: []
  type: TYPE_NORMAL
- en: When the server was configured properly, we checked the configurations in NetBeans
    and started the debug session. When this session was started, we were able to
    debug the Magento application like a debugger does it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The debugger enables advanced debugging features such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing the code statement-by-statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skipping parts of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing and changing variable names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with FirePHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FirePHP is a plugin that you can install in Firefox. It is integrated in the
    Firebug console that makes it easy to use as a debugging tool. On the server,
    FirePHP also needs to be installed. We can do that easily with the PEAR repository,
    like we did with Xdebug in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: To debug with FirePHP, we need another PHP library. This is the Zend Wildfire
    plugin in the Zend Framework. Magento is built on the Zend Framework, so the Wildfire
    plugin is standard installed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**FirePHP** is a plugin that runs in **Firebug**. To make them work, we need
    to install Firebug and FirePHP as Firefox add-ons using the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://addons.mozilla.org/us/firefox/addon/firebug/](https://addons.mozilla.org/us/firefox/addon/firebug/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://addons.mozilla.org/us/firefox/addon/firephp/](https://addons.mozilla.org/us/firefox/addon/firephp/)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how we can use FirePHP in a Magento project:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure all the Firefox plugins are installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your Magento project in your IDE such as NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `index.php` file and add the following code in it at the end of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file `index.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the Magento **Profiler** and the Magento developer mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We prepared the Magento installation to work with FirePHP. To log something
    through it, we can use the function `logFirePHP()` to print something in the log.
    Open the file `app/design/frontend/base/default/template/catalog/product/view.phtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you open a product detail page and the Firebug console, you should have
    an output similar to the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/3329OS_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FirePHP is a logging tool that shows log messages in the Firebug console. We
    create the log messages with the function `logFirePHP()` that we added in the
    `index.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: When using the `logFirePHP()` function, a header will be added to the HTTP request.
    FirePHP will pick up these headers and print them in the Firebug console.
  prefs: []
  type: TYPE_NORMAL
- en: With the function `logFirePHP()`, we can set the log message in the first parameter.
    This can be any variable such as a string, an array, an object, or something else.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is the name of the log message that will show up in the
    Firebug console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last parameter is the type of log message. You can show a message with
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LOG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WARN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXCEPTION`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRACE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TABLE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DUMP`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GROUP_START`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GROUP_END`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PHPUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to start with **unit testing** in PHP, we need a tool that is called
    **PHPUnit**. When PHPUnit is installed, we can start loading tests with the `phpunit`
    command in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before installing PHPUnit, make sure PEAR is installed on your server. If it
    is not done, you can do this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also install it using a file. You can find information about this procedure
    by navigating to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pear.php.net/manual/en/installation.php](http://pear.php.net/manual/en/installation.php)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the next steps to install PHPUnit on your development server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install PHPUnit, we have to use a custom PEAR channel. We need to register
    the PHPUnit PEAR channel before we can install PHPUnit over PEAR. With the next
    command, we will add the extra channel to the PEAR environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The PHPUnit channel depends on some other channels. We need to discover the
    channel `components.ez.no` too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last channel that we have to discover is the **Symfony Components** PEAR
    channel. With the following command, we will discover the channel `pear.symfony-project.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we have discovered all the required channels, it is time to install the
    `PHPUnit` library. We can do this by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of this command will end with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When running this command, the installer will download and prepare all the required
    packages so that you can use them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last thing is to install the CLI component for PHP. This is most probably
    installed; if it is not installed, we have to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing to do is to test that everything we have installed works. To
    test this, we can run the command `phpunit --version`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As part of the xUnit, PHPUnit is the most popular framework for PHP unit testing.
    The xUnit framework contains unit testing frameworks for many programming languages,
    such as the JUnit for Java.
  prefs: []
  type: TYPE_NORMAL
- en: To install the PHPUnit libraries, we used the PEAR installer (which is an extension
    of PHP) for downloading and installing extra plugins. To add more plugins, we
    can add extra channels to PEAR like we did while installing PHPUnit.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you want to install the `PHPUnit` library without PEAR, you can do it
    by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do is to download the library files that you can find by
    navigating to the following URL [http://pear.phpunit.de/get/](http://pear.phpunit.de/get/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the files in the `include_path` function that is defined in the `php.ini`
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is to configure the PHPUnit script. First move the `phpunit.php`
    file to `phpunit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file and replace the string `@php_bin@` with your PHP bin path. Usually,
    this is `/usr/bin/php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the file to a location that is in your Linux `PATH`. Be sure to make the
    script executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last thing to do is to change something in the `PHPUnit/Util/PHP.php` file.
    Open this file and change the `@php_bin@` string with you PHP bin path. Usually,
    this is `/usr/bin/php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now run the `phpunit` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Magento test case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the last recipe of this chapter, we will write an automated test with PHPUnit.
    PHPUnit is the unit testing framework that we have installed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing is a key part of **Test Driven Development** (**TDD**). With TDD,
    we will write the test case first, and then we will write the code that returns
    the expected values that we defined in the test case.
  prefs: []
  type: TYPE_NORMAL
- en: With Magento, which is based on the Zend Framework and built with TDD, it is
    possible to write unit tests with PHPUnit for a custom or existing module. In
    this recipe, we will see all the steps that you have to perform for a custom unit
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a unit test for the `Packt_Helloworld` module
    that we created and extended in [Chapter 4](ch04.html "Chapter 4. Creating a Module"),
    *Creating a Module*, *Chapter 6*, [Chapter 6](ch06.html "Chapter 6. Databases
    and Modules"), *Databases and Modules*, [Chapter 7](ch07.html "Chapter 7. Magento
    Backend"), *Magento Backend*, and [Chapter 8](ch08.html "Chapter 8. Event Handlers
    and Cronjobs"), *Event Handlers and Cronjobs*.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have the complete code, you can download it from the Packt Publishing
    website [http://www.packtpub.com](http://www.packtpub.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a unit test for Magento:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `unit-tests` in your Magento root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `autoload.php` file in the `unit-tests` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `autoload.php` file and add the following content in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `phpunit.xml` file in the `unit-tests` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step is to create a folder tree as shown in the following screenshot:![How
    to do it...](img/3329OS_12_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of creating all the folders manually, you can also run the following
    Linux command in your terminal: `mkdir -p app/code/local/Packt/Helloworld/Model/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the folder `app/code/local/Packt/Helloworld/Model/`, create a new PHP file
    called `SubscriptionTest.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `SubscriptionTest.php` file, add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start the unit test, open the terminal and navigate to the `unit-tests`
    directory of your Magento installation using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `unit-tests` folder, run the `phpunit` command. This will give you an
    output as shown in the following screenshot:![How to do it...](img/3329OS_12_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you see the message `OK (1 test, 1 assertion)`, the test has passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We started this recipe by creating all the required folders for the unit test.
    We created the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoload.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phpunit.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SubscriptionTest.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bootstrap of the `phpunit` command is configured in the `phpunit.xml` file.
    In this file, at the beginning of the command, we can configure some parameters
    that are important. We have configured the loader file `autoload.php` and some
    other values of global variables and error-reporting variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the `phpunit.xml` file, we configured the `autoload.php` file first in order
    to run it. In this file, we set the `include` path with the path of the Magento
    application, some PHP settings, and the inclusion of the `Mage.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: The unit test itself is written in the `SubscriptionTest.php` file. In this
    file, we created a class that extends the `PHPUnit_Framework_Testcase` class.
    This parent class contains all the logic for the unit test and the generic functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the `setup()` function, we can write some code to bootstrap the test. In
    this case, we created an instance of the subscriptions collection.
  prefs: []
  type: TYPE_NORMAL
- en: The unit test is in the `testGetAllSubscriptions()` method. The `phpunit` command
    will run all the `test*` functions in that class. In this function, we used the
    function `assertInstanceOf()` to see if the type of the class matches the value
    that is set in the first parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this case, we used the assertion function `assertInstanceOf()` that will
    look at the instance type of the variable. There are many more assertion functions
    that you can use with PHPUnit. For example, a function that compares a number
    and a function to check for null values.
  prefs: []
  type: TYPE_NORMAL
- en: 'A full list of the assertion methods can be found at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions](http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions)'
  prefs: []
  type: TYPE_NORMAL
