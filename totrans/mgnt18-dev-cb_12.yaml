- en: Chapter 12. Debugging and Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。调试和单元测试
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Getting started with Xdebug
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Xdebug
- en: Debugging with FirePHP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FirePHP 调试
- en: Installing PHPUnit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PHPUnit
- en: Creating a Magento test case
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Magento 测试用例
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Debugging a website in an efficient way is one of the most important jobs of
    PHP developers. These days, a website is a lot more than some simple HTML pages.
    In a Magento web shop, you have a lot of complex business logic that is used in
    the flow of an e-commerce transaction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以高效的方式调试网站是 PHP 开发者最重要的工作之一。如今，一个网站远不止一些简单的 HTML 页面。在 Magento 网上商店中，你有很多复杂的业务逻辑，这些逻辑用于电子商务交易流程中。
- en: Debugging in PHP is not out of the box like in other programming languages.
    There are many ways to configure a PHP debugger (Xdebug) with a good code editor
    such as NetBeans. With some extra tools such as FirePHP and the Zend Wildfire
    plugin, debugging is much easier.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 中的调试不像其他编程语言那样直接。有许多方法可以配置 PHP 调试器（Xdebug）与一个好的代码编辑器，如 NetBeans。通过一些额外的工具，如
    FirePHP 和 Zend Wildfire 插件，调试变得更加容易。
- en: Another part of debugging is automated tests. While working with objects and
    functions, there are many ways to write some tests that you can run on a set of
    configured functions. A report will show you the information about the passed
    and failed tests.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的另一个部分是自动化测试。在处理对象和函数时，有许多方法可以编写一些可以在一组配置的函数上运行的测试。报告将显示有关通过和失败的测试的信息。
- en: Getting started with Xdebug
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Xdebug
- en: The most common way of debugging a PHP application is to use some functions
    such as `echo`, `die()`, `var_dump()`,and `print_r()`. In Magento, you can use
    the `Mage::log()` statement to print some logs to a file, but this isn't a real
    debugger.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 PHP 应用程序最常见的方式是使用一些函数，如 `echo`、`die()`、`var_dump()` 和 `print_r()`。在 Magento
    中，你可以使用 `Mage::log()` 语句将一些日志打印到文件，但这并不是真正的调试器。
- en: With a real debugger, you can break the script and look at the variables and
    values they have. You can also change values, go further, skip statements, and
    more.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用真正的调试器，你可以中断脚本并查看变量及其值。你还可以更改值、进一步执行、跳过语句等。
- en: In PHP, you can configure Xdebug to debug your PHP script or application. In
    this recipe, we will see how to install Xdebug in the development environment
    and how we can integrate it with an IDE.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 中，你可以配置 Xdebug 来调试你的 PHP 脚本或应用程序。在本食谱中，我们将了解如何在开发环境中安装 Xdebug，以及我们如何将其与
    IDE 集成。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will start an Xdebug session with the NetBeans IDE. Open
    NetBeans and set the **Magento** project as **Main Project**. Make sure all the
    URLs are configured correctly in the **Property** settings of the project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用 NetBeans IDE 启动一个 Xdebug 会话。打开 NetBeans 并将 **Magento** 项目设置为 **主项目**。确保在项目的
    **属性** 设置中正确配置了所有 URL。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps show you how you can install Xdebug on your development
    server:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了你如何在开发服务器上安装 Xdebug：
- en: 'We will install Xdebug with the PHP `pear` library. Make sure it is installed.
    If not, run the following commands:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 PHP 的 `pear` 库来安装 Xdebug。确保它已安装。如果没有，请运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next step is to install the `xdebug` library. You can do this with the
    following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装 `xdebug` 库。你可以使用以下命令来完成：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command gives the following output:![How to do it...](img/3329OS_12_01.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将给出以下输出：![如何做...](img/3329OS_12_01.jpg)
- en: 'As you can read in the screenshot, we have to locate the `xdebug.so` file in
    the `php.ini` file. To find out the path of the `xdebug.so` file, run the following
    command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如截图所示，我们必须在 `php.ini` 文件中定位 `xdebug.so` 文件。要找出 `xdebug.so` 文件的路径，请运行以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you have the path, add the following line in the `php.ini` file. Open
    the file with the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你有了路径后，在 `php.ini` 文件中添加以下行。使用以下命令打开文件：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, do the same for the `cli/php.ini` file:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，对 `cli/php.ini` 文件也做相同的操作：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Paste the following line of code at the end:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在末尾粘贴以下代码行：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure the path matches the path of the `xdebug.so` file on your server.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保路径与服务器上 `xdebug.so` 文件的路径匹配。
- en: 'Restart the Apache server with the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动 Apache 服务器：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test if Xdebug is correctly installed, you can check it with `phpinfo()`
    in the browser or you can run the following command that checks the `phpinfo()`
    page using the command prompt:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试 Xdebug 是否正确安装，你可以在浏览器中使用 `phpinfo()` 查看它，或者你可以运行以下命令来检查 `phpinfo()` 页面：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous command gives the following output:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的命令将给出以下输出：
- en: '[PRE8]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next step is to configure the NetBeans Xdebug integration. To make NetBeans
    work with Xdebug, we have to add the following configuration at the end of the
    `php.ini` file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是配置 NetBeans 的 Xdebug 集成。为了使 NetBeans 与 Xdebug 一起工作，我们必须在 `php.ini` 文件末尾添加以下配置：
- en: '[PRE9]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Restart your Apache server and look at the `phpinfo()`page to see if the Xdebug
    settings have been applied.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动您的 Apache 服务器，并查看 `phpinfo()` 页面以确认 Xdebug 设置是否已应用。
- en: The next step is to check your NetBeans debug settings. Navigate to **Tools**
    | **Options** and configure it as shown in the following screenshot:![How to do
    it...](img/3329OS_12_02.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是检查您的 NetBeans 调试设置。导航到 **工具** | **选项** 并按照以下截图进行配置：![如何操作...](img/3329OS_12_02.jpg)
- en: The next step is to check if the project URL has the right value. Open the **Project
    Properties** and go to **Run Configuration**. Make sure the **Project URL** field
    has the right value as shown the following screenshot:![How to do it...](img/3329OS_12_03.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是检查项目 URL 是否具有正确的值。打开 **项目属性** 并转到 **运行配置**。确保 **项目 URL** 字段具有以下截图所示的正确值：![如何操作...](img/3329OS_12_03.jpg)
- en: We are now ready to start the first debug session. To start it, we have to click
    on the debug button that is near the run button. You can also use the shortcut
    *Ctrl* + *F5*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已准备好开始第一个调试会话。要开始它，我们必须点击靠近运行按钮的调试按钮。您也可以使用快捷键 *Ctrl* + *F5*。
- en: 'When starting a debug session, a new tab will be added in the browser with
    a URL like the following:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当开始调试会话时，浏览器将添加一个新标签页，其 URL 形式如下：
- en: '`http://magento-dev.local/?XDEBUG_SESSION_START=netbeans-xdebug`'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://magento-dev.local/?XDEBUG_SESSION_START=netbeans-xdebug`'
- en: The web page doesn't load because the debugger is interrupting the process.
    To continue, we have to use the debugger controls in NetBeans.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网页无法加载，因为调试器正在中断进程。要继续，我们必须使用 NetBeans 中的调试器控件。
- en: When you add a breakpoint in the `index.php` file on line 87, `Mage::run($mageRunCode,
    $mageRunType)`, and continue with the debugger, you will see the variable values
    as shown in the following screenshot:![How to do it...](img/3329OS_12_04.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在 `index.php` 文件的第 87 行添加断点 `Mage::run($mageRunCode, $mageRunType)` 并继续使用调试器时，您将看到以下截图所示的变量值：![如何操作...](img/3329OS_12_04.jpg)
- en: When you continue with the breakpoint, you will see that the page will be loaded.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您继续使用断点时，您会看到页面将被加载。
- en: The debug session stays alive until you hit the stop button in NetBeans. When
    you browse to other pages on your website, the debugger will continue as long
    as the session is alive.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试会话将持续到您在 NetBeans 中点击停止按钮。当您浏览网站上的其他页面时，只要会话处于活动状态，调试器将继续运行。
- en: To stop the debug session, click on the stop button in NetBeans. A browser page
    will be opened with the message that the session has stopped.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停止调试会话，请在 NetBeans 中点击停止按钮。一个浏览器页面将打开，显示会话已停止的消息。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Xdebug needs to be installed on the server where you want to debug it. In this
    recipe, the server used is the local debug server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug 需要安装在您想要调试的服务器上。在这个菜谱中，使用的是本地调试服务器。
- en: We installed Xdebug using PEAR. PEAR is an application repository for PHP plugins.
    With PEAR, we downloaded and installed the `xdebug` library.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 PEAR 安装了 Xdebug。PEAR 是 PHP 插件的软件仓库。使用 PEAR，我们下载并安装了 `xdebug` 库。
- en: When Xdebug was installed on the server, we configured the `php.ini` file to
    use the `xdebug` library. We added some settings to make the Xdebug configuration
    compatible with NetBeans.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Xdebug 在服务器上安装时，我们配置了 `php.ini` 文件以使用 `xdebug` 库。我们添加了一些设置以使 Xdebug 配置与 NetBeans
    兼容。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When using Xdebug on a remote server, make sure you can connect to the server
    trough port 9000\. This is mostly disabled on the firewall of the server and your
    local PC.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当在远程服务器上使用 Xdebug 时，请确保您可以通过端口 9000 连接到服务器。这通常在服务器和您的本地 PC 的防火墙中被禁用。
- en: When the server was configured properly, we checked the configurations in NetBeans
    and started the debug session. When this session was started, we were able to
    debug the Magento application like a debugger does it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器配置正确后，我们在 NetBeans 中检查了配置并开始调试会话。当会话开始时，我们能够像调试器一样调试 Magento 应用程序。
- en: 'The debugger enables advanced debugging features such as the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器启用了以下高级调试功能：
- en: Setting breakpoints
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置断点
- en: Executing the code statement-by-statement
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐句执行代码语句
- en: Skipping parts of code
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过代码部分
- en: Browsing and changing variable names
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览和更改变量名
- en: Debugging with FirePHP
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FirePHP 进行调试
- en: FirePHP is a plugin that you can install in Firefox. It is integrated in the
    Firebug console that makes it easy to use as a debugging tool. On the server,
    FirePHP also needs to be installed. We can do that easily with the PEAR repository,
    like we did with Xdebug in the previous recipe.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: FirePHP 是您可以在 Firefox 中安装的插件。它集成在 Firebug 控制台中，使其作为调试工具易于使用。在服务器上，FirePHP 也需要安装。我们可以通过
    PEAR 仓库轻松完成此操作，就像我们在前面的食谱中做 Xdebug 一样。
- en: To debug with FirePHP, we need another PHP library. This is the Zend Wildfire
    plugin in the Zend Framework. Magento is built on the Zend Framework, so the Wildfire
    plugin is standard installed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 FirePHP 进行调试，我们需要另一个 PHP 库。这是在 Zend Framework 中的 Zend Wildfire 插件。由于 Magento
    是基于 Zend Framework 构建的，因此 Wildfire 插件是标准安装的。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: '**FirePHP** is a plugin that runs in **Firebug**. To make them work, we need
    to install Firebug and FirePHP as Firefox add-ons using the following links:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**FirePHP** 是一个在 **Firebug** 中运行的插件。为了使它们正常工作，我们需要使用以下链接将 Firebug 和 FirePHP
    作为 Firefox 插件安装：'
- en: '[https://addons.mozilla.org/us/firefox/addon/firebug/](https://addons.mozilla.org/us/firefox/addon/firebug/)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://addons.mozilla.org/us/firefox/addon/firebug/](https://addons.mozilla.org/us/firefox/addon/firebug/)'
- en: '[https://addons.mozilla.org/us/firefox/addon/firephp/](https://addons.mozilla.org/us/firefox/addon/firephp/)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://addons.mozilla.org/us/firefox/addon/firephp/](https://addons.mozilla.org/us/firefox/addon/firephp/)'
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps describe how we can use FirePHP in a Magento project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何在 Magento 项目中使用 FirePHP：
- en: Make sure all the Firefox plugins are installed.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有 Firefox 插件都已安装。
- en: Open your Magento project in your IDE such as NetBeans.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 IDE（如 NetBeans）中打开您的 Magento 项目。
- en: 'Open the `index.php` file and add the following code in it at the end of the
    file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `index.php` 文件，并在文件末尾添加以下代码：
- en: '[PRE10]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file `index.php`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件 `index.php`。
- en: Enable the Magento **Profiler** and the Magento developer mode.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Magento **Profiler** 和 Magento 开发者模式。
- en: We prepared the Magento installation to work with FirePHP. To log something
    through it, we can use the function `logFirePHP()` to print something in the log.
    Open the file `app/design/frontend/base/default/template/catalog/product/view.phtml`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已准备好 Magento 安装以与 FirePHP 一起使用。要通过它记录某些内容，我们可以使用 `logFirePHP()` 函数在日志中打印某些内容。打开文件
    `app/design/frontend/base/default/template/catalog/product/view.phtml`。
- en: 'Add the following code at the end of the file:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下代码：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When you open a product detail page and the Firebug console, you should have
    an output similar to the one shown in the following screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您打开产品详情页面和 Firebug 控制台时，您应该得到一个类似于以下截图的输出：
- en: '![How to do it...](img/3329OS_12_05.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3329OS_12_05.jpg)'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: FirePHP is a logging tool that shows log messages in the Firebug console. We
    create the log messages with the function `logFirePHP()` that we added in the
    `index.php` file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: FirePHP 是一个在 Firebug 控制台中显示日志消息的日志工具。我们通过在 `index.php` 文件中添加的 `logFirePHP()`
    函数来创建日志消息。
- en: When using the `logFirePHP()` function, a header will be added to the HTTP request.
    FirePHP will pick up these headers and print them in the Firebug console.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `logFirePHP()` 函数时，将在 HTTP 请求中添加一个标题。FirePHP 将捕获这些标题并在 Firebug 控制台中打印它们。
- en: With the function `logFirePHP()`, we can set the log message in the first parameter.
    This can be any variable such as a string, an array, an object, or something else.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `logFirePHP()` 函数，我们可以在第一个参数中设置日志消息。这可以是任何变量，例如字符串、数组、对象或其他内容。
- en: The second parameter is the name of the log message that will show up in the
    Firebug console.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是将在 Firebug 控制台中显示的日志消息的名称。
- en: 'The last parameter is the type of log message. You can show a message with
    the following options:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数是日志消息的类型。您可以使用以下选项显示消息：
- en: '`LOG`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOG`'
- en: '`INFO`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO`'
- en: '`WARN`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARN`'
- en: '`ERROR`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR`'
- en: '`EXCEPTION`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXCEPTION`'
- en: '`TRACE`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`'
- en: '`TABLE`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE`'
- en: '`DUMP`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DUMP`'
- en: '`GROUP_START`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GROUP_START`'
- en: '`GROUP_END`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GROUP_END`'
- en: Installing PHPUnit
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PHPUnit
- en: When we want to start with **unit testing** in PHP, we need a tool that is called
    **PHPUnit**. When PHPUnit is installed, we can start loading tests with the `phpunit`
    command in the command line.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想在 PHP 中开始进行 **单元测试** 时，我们需要一个名为 **PHPUnit** 的工具。当 PHPUnit 安装完成后，我们可以在命令行中使用
    `phpunit` 命令开始加载测试。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Before installing PHPUnit, make sure PEAR is installed on your server. If it
    is not done, you can do this by running the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 PHPUnit 之前，请确保您的服务器上已安装 PEAR。如果没有完成，您可以通过运行以下命令来完成此操作：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can also install it using a file. You can find information about this procedure
    by navigating to the following URL:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用文件来安装它。您可以通过导航到以下 URL 获取有关此过程的更多信息：
- en: '[http://pear.php.net/manual/en/installation.php](http://pear.php.net/manual/en/installation.php)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pear.php.net/manual/en/installation.php](http://pear.php.net/manual/en/installation.php)'
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow the next steps to install PHPUnit on your development server:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在你的开发服务器上安装PHPUnit：
- en: 'To install PHPUnit, we have to use a custom PEAR channel. We need to register
    the PHPUnit PEAR channel before we can install PHPUnit over PEAR. With the next
    command, we will add the extra channel to the PEAR environment:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装PHPUnit，我们必须使用一个自定义的PEAR通道。在我们可以通过PEAR安装PHPUnit之前，我们需要注册PHPUnit的PEAR通道。使用以下命令，我们将添加额外的通道到PEAR环境中：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The PHPUnit channel depends on some other channels. We need to discover the
    channel `components.ez.no` too:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHPUnit通道依赖于一些其他通道。我们需要发现通道`components.ez.no`：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last channel that we have to discover is the **Symfony Components** PEAR
    channel. With the following command, we will discover the channel `pear.symfony-project.com`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须发现的最后一个通道是**Symfony Components**的PEAR通道。使用以下命令，我们将发现通道`pear.symfony-project.com`：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we have discovered all the required channels, it is time to install the
    `PHPUnit` library. We can do this by running the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们发现了所有必需的通道后，是时候安装`PHPUnit`库了。我们可以通过运行以下命令来完成：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result of this command will end with the following lines:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令的结果将以以下行结束：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When running this command, the installer will download and prepare all the required
    packages so that you can use them.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当运行此命令时，安装程序将下载并准备所有必需的包，以便你可以使用它们。
- en: 'The last thing is to install the CLI component for PHP. This is most probably
    installed; if it is not installed, we have to run the following command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要做的事情是安装PHP的CLI组件。这很可能已经安装了；如果没有安装，我们必须运行以下命令：
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The last thing to do is to test that everything we have installed works. To
    test this, we can run the command `phpunit --version`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要做的事情是测试我们安装的每一项是否正常工作。为此，我们可以运行命令`phpunit --version`：
- en: '[PRE19]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As part of the xUnit, PHPUnit is the most popular framework for PHP unit testing.
    The xUnit framework contains unit testing frameworks for many programming languages,
    such as the JUnit for Java.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为xUnit的一部分，PHPUnit是PHP单元测试中最受欢迎的框架。xUnit框架包含许多编程语言的单元测试框架，例如Java的JUnit。
- en: To install the PHPUnit libraries, we used the PEAR installer (which is an extension
    of PHP) for downloading and installing extra plugins. To add more plugins, we
    can add extra channels to PEAR like we did while installing PHPUnit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装PHPUnit库，我们使用了PEAR安装程序（PHP的扩展）来下载和安装额外的插件。要添加更多插件，我们可以像安装PHPUnit时那样添加额外的通道到PEAR。
- en: There's more...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When you want to install the `PHPUnit` library without PEAR, you can do it
    by using the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在不使用PEAR的情况下安装`PHPUnit`库时，你可以按照以下步骤进行：
- en: The first thing to do is to download the library files that you can find by
    navigating to the following URL [http://pear.phpunit.de/get/](http://pear.phpunit.de/get/).
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要做的事情是下载你可以在以下URL找到的库文件 [http://pear.phpunit.de/get/](http://pear.phpunit.de/get/)。
- en: Extract the files in the `include_path` function that is defined in the `php.ini`
    configuration.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`php.ini`配置中定义的`include_path`函数中提取文件。
- en: The next step is to configure the PHPUnit script. First move the `phpunit.php`
    file to `phpunit`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是配置PHPUnit脚本。首先将`phpunit.php`文件移动到`phpunit`。
- en: Open the file and replace the string `@php_bin@` with your PHP bin path. Usually,
    this is `/usr/bin/php`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件，将字符串`@php_bin@`替换为你的PHP bin路径。通常，这是`/usr/bin/php`。
- en: Copy the file to a location that is in your Linux `PATH`. Be sure to make the
    script executable.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件复制到你的Linux `PATH`中的位置。确保脚本可执行。
- en: The last thing to do is to change something in the `PHPUnit/Util/PHP.php` file.
    Open this file and change the `@php_bin@` string with you PHP bin path. Usually,
    this is `/usr/bin/php`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要做的事情是在`PHPUnit/Util/PHP.php`文件中更改一些内容。打开此文件，并将`@php_bin@`字符串替换为你的PHP bin路径。通常，这是`/usr/bin/php`。
- en: You can now run the `phpunit` command.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以运行`phpunit`命令。
- en: Creating a Magento test case
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Magento测试用例
- en: For the last recipe of this chapter, we will write an automated test with PHPUnit.
    PHPUnit is the unit testing framework that we have installed in the previous chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的最后一个小菜谱，我们将使用PHPUnit编写一个自动化测试。PHPUnit是我们上一章安装的单元测试框架。
- en: Unit testing is a key part of **Test Driven Development** (**TDD**). With TDD,
    we will write the test case first, and then we will write the code that returns
    the expected values that we defined in the test case.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是**测试驱动开发**（**TDD**）的关键部分。使用TDD，我们将首先编写测试用例，然后编写返回我们在测试用例中定义的预期值的代码。
- en: With Magento, which is based on the Zend Framework and built with TDD, it is
    possible to write unit tests with PHPUnit for a custom or existing module. In
    this recipe, we will see all the steps that you have to perform for a custom unit
    test.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Zend框架并使用TDD构建的Magento，可以编写用于自定义或现有模块的PHPUnit单元测试。在这个食谱中，我们将看到执行自定义单元测试所需的所有步骤。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will create a unit test for the `Packt_Helloworld` module
    that we created and extended in [Chapter 4](ch04.html "Chapter 4. Creating a Module"),
    *Creating a Module*, *Chapter 6*, [Chapter 6](ch06.html "Chapter 6. Databases
    and Modules"), *Databases and Modules*, [Chapter 7](ch07.html "Chapter 7. Magento
    Backend"), *Magento Backend*, and [Chapter 8](ch08.html "Chapter 8. Event Handlers
    and Cronjobs"), *Event Handlers and Cronjobs*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将为我们在[第4章](ch04.html "第4章。创建模块")、*创建模块*、[第6章](ch06.html "第6章。数据库和模块")、*数据库和模块*、[第7章](ch07.html
    "第7章。Magento后端")、*Magento后端*和[第8章](ch08.html "第8章。事件处理器和Cron作业")、*事件处理器和Cron作业*中创建和扩展的`Packt_Helloworld`模块创建一个单元测试。
- en: If you don't have the complete code, you can download it from the Packt Publishing
    website [http://www.packtpub.com](http://www.packtpub.com).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有完整的代码，您可以从Packt出版社网站[http://www.packtpub.com](http://www.packtpub.com)下载。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to create a unit test for Magento:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为Magento创建单元测试：
- en: Create a folder named `unit-tests` in your Magento root.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Magento根目录中创建一个名为`unit-tests`的文件夹。
- en: Create an `autoload.php` file in the `unit-tests` folder.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`unit-tests`文件夹中创建一个名为`autoload.php`的文件。
- en: 'Open the `autoload.php` file and add the following content in it:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`autoload.php`文件，并在其中添加以下内容：
- en: '[PRE20]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a `phpunit.xml` file in the `unit-tests` folder with the following content:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`unit-tests`文件夹中创建一个名为`phpunit.xml`的文件，内容如下：
- en: '[PRE21]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The next step is to create a folder tree as shown in the following screenshot:![How
    to do it...](img/3329OS_12_06.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个如以下截图所示的文件夹树：![如何操作...](img/3329OS_12_06.jpg)
- en: Tip
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Instead of creating all the folders manually, you can also run the following
    Linux command in your terminal: `mkdir -p app/code/local/Packt/Helloworld/Model/`.'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了手动创建所有文件夹外，您还可以在终端中运行以下Linux命令：`mkdir -p app/code/local/Packt/Helloworld/Model/`。
- en: In the folder `app/code/local/Packt/Helloworld/Model/`, create a new PHP file
    called `SubscriptionTest.php`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/code/local/Packt/Helloworld/Model/`文件夹中，创建一个名为`SubscriptionTest.php`的新PHP文件。
- en: 'In the `SubscriptionTest.php` file, add the following content:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SubscriptionTest.php`文件中，添加以下内容：
- en: '[PRE22]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To start the unit test, open the terminal and navigate to the `unit-tests`
    directory of your Magento installation using the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始单元测试，打开终端并使用以下命令导航到您的Magento安装的`unit-tests`目录：
- en: '[PRE23]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `unit-tests` folder, run the `phpunit` command. This will give you an
    output as shown in the following screenshot:![How to do it...](img/3329OS_12_07.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`unit-tests`文件夹中，运行`phpunit`命令。这将给出以下截图所示的输出：![如何操作...](img/3329OS_12_07.jpg)
- en: When you see the message `OK (1 test, 1 assertion)`, the test has passed.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您看到消息`OK (1 test, 1 assertion)`时，测试已经通过。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We started this recipe by creating all the required folders for the unit test.
    We created the following files:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建单元测试所需的全部文件夹来开始这个食谱。我们创建了以下文件：
- en: '`autoload.php`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoload.php`'
- en: '`phpunit.xml`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phpunit.xml`'
- en: '`SubscriptionTest.php`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SubscriptionTest.php`'
- en: The bootstrap of the `phpunit` command is configured in the `phpunit.xml` file.
    In this file, at the beginning of the command, we can configure some parameters
    that are important. We have configured the loader file `autoload.php` and some
    other values of global variables and error-reporting variables.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`phpunit`命令的引导配置在`phpunit.xml`文件中。在这个文件中，在命令的开始处，我们可以配置一些重要的参数。我们已配置了加载文件`autoload.php`和一些全局变量和错误报告变量的其他值。'
- en: In the `phpunit.xml` file, we configured the `autoload.php` file first in order
    to run it. In this file, we set the `include` path with the path of the Magento
    application, some PHP settings, and the inclusion of the `Mage.php` file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在`phpunit.xml`文件中，我们首先配置了`autoload.php`文件以便运行它。在这个文件中，我们设置了包含路径为Magento应用程序的路径、一些PHP设置以及`Mage.php`文件的包含。
- en: The unit test itself is written in the `SubscriptionTest.php` file. In this
    file, we created a class that extends the `PHPUnit_Framework_Testcase` class.
    This parent class contains all the logic for the unit test and the generic functions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试本身是在 `SubscriptionTest.php` 文件中编写的。在这个文件中，我们创建了一个继承自 `PHPUnit_Framework_Testcase`
    类的类。这个父类包含了单元测试的所有逻辑和通用函数。
- en: In the `setup()` function, we can write some code to bootstrap the test. In
    this case, we created an instance of the subscriptions collection.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `setup()` 函数中，我们可以编写一些代码来初始化测试。在这个例子中，我们创建了一个订阅集合的实例。
- en: The unit test is in the `testGetAllSubscriptions()` method. The `phpunit` command
    will run all the `test*` functions in that class. In this function, we used the
    function `assertInstanceOf()` to see if the type of the class matches the value
    that is set in the first parameter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试位于 `testGetAllSubscriptions()` 方法中。`phpunit` 命令将会运行该类中所有的 `test*` 函数。在这个函数中，我们使用了
    `assertInstanceOf()` 函数来检查类的类型是否与第一个参数中设置的值匹配。
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this case, we used the assertion function `assertInstanceOf()` that will
    look at the instance type of the variable. There are many more assertion functions
    that you can use with PHPUnit. For example, a function that compares a number
    and a function to check for null values.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了断言函数 `assertInstanceOf()`，它会检查变量的实例类型。PHPUnit 中还有许多其他的断言函数可供使用。例如，一个比较数字和检查空值的函数。
- en: 'A full list of the assertion methods can be found at the following URL:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 断言方法的完整列表可以在以下网址找到：
- en: '[http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions](http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions](http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions)'
