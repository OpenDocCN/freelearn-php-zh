- en: Chapter 11. Internationalization and Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing modern web applications, we often find the need to ensure that
    our language is readable to users who speak and read languages different from
    our own. To help facilitate this, Yii2 provides built-in support for both internationalization
    (i18n) and localization (l10n). **Internationalization** is the process of planning
    and implementing messages and views such that they can be easily adapted into
    other languages. On the other hand, **localization** is the process of adapting
    our applications to a particular language or culture, and including things such
    as the look and feel of our application to match the accepted presentation of
    information to speakers of a given language or users in a given region or market.
    In this chapter, we'll discover how we can use Yii2's built-in features to translate
    and localize our applications into multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: i18n and l10n are numeronyms, not acronyms. Internationalization is abbreviated
    to i18n because it begins with the letter "I", is followed by 18 more characters,
    and ends with the letter "N". Similarly, localization shortens to l10n because
    it starts with the letter "L", has 10 more letters, and then ends with the letter
    "N". These abbreviations simply exist to shorten the word and have no other meaning.
    In this chapter, we'll use both the full and abbreviated versions to refer to
    both words.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Yii2 and PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start using Yii2's localization features, we first need to make
    sure the `intl` PHP extension is installed. This extension is used to provide
    Yii2 with the majority of the i18n features, including Yii2's message and date
    formatters. While Yii2 has some built-in fallbacks in case this extension is not
    installed, it is highly recommended that you install it beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: The intl extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many default PHP installations come with the `intl` extension built into the
    PHP package, but many do not. Fortunately, there are several ways to check whether
    the `intl` extension is installed. For those who prefer viewing this information
    in a web browser, simply create a blank PHP file in your webroot containing the
    following and scan the output to check whether the `intl` extension exists and
    is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer using the command line, you can run the following command to
    check whether intl is installed with your PHP instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `intl` extension does not appear in any output, you can either install
    it through your systems package manager (`apt` or `yum` depending upon your OS),
    or you can install it manually. Generally speaking, the extension can be compiled
    and installed manually through the `pecl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're installing the `intl` extension from the source, you'll need to make
    sure that you have the `intl` library installed, preferably version 49 or higher.
    If your system has an outdated version of the `intl` library, you can download
    and compile a newer version from [http://site.icu-project.org/download](http://site.icu-project.org/download).
    Additionally, the time zone data shipped with your `intl` library may be outdated.
    Ensure that you refer to the `intl` documentation for information on how to update
    your `intl` time zone data at [http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data](http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the compilation finishes, you can then add the following to your `php.ini`
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After restarting your web server and PHP process, you should see the `intl`
    extension appear using one of the previously listed commands.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on how to install the `intl` extension can be found on the
    PHP manual page at [https://secure.php.net/manual/en/intl.installation.php](https://secure.php.net/manual/en/intl.installation.php).
  prefs: []
  type: TYPE_NORMAL
- en: The application language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start using Yii2's translation features, we need to define the
    application our language is written in. Application languages in Yii2 are defined
    by a unique ID consisting of a language ID as defined by the ISO-639 format and
    a region ID defined by the ISO-3166 format. As an example, `en-US` represents
    English as the spoken language in the United States of America.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Details on ISO-639 can be found at [http://www.loc.gov/standards/iso639-2/](http://www.loc.gov/standards/iso639-2/),
    and details on IISO-3166 can be found at [https://www.iso.org/obp/ui/#search](https://www.iso.org/obp/ui/#search).
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii2 defines two language properties within our configuration file that we
    can define. The first `sourceLanguage` property represents the language or locale
    our application is written in and generally does not change during the request
    life cycle of our application. The second, `language`, represents the language
    or locale that our user is using, and it can be changed by the end user at any
    point in time (typically through the use of a `language` selector widget placed
    somewhere on the page). Combined, these two configuration options allow us to
    inform Yii2 about how it should treat messages we wish to be translated. Within
    our `config/web.php` or `config/console.php` configuration files, these two options
    can be set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Yii2 will set the `sourceLanguage` property to `en-US`.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically setting the application language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're developing a multilingual site, rather than specifying a single default
    language, you may want to allow the user to select their language from a drop-down
    list and change your language programmatically. To do this, simply define the
    `Yii::$app->language` property within your code with the language code of your
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: When setting the language property programmatically, you'll typically want to
    store the user's language setting either with their user information or as a session
    variable. Additionally, you'll want to ensure that you apply the language setting
    before Yii2 begins processing your messages. A good place to set this would be
    early in your controller flow, such as in the `init()` method of our controller.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically setting the application language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to manually setting the application language within our controller,
    we can also use the content negotiator filter (`yii\filters\ContentNegotiator`)
    to determine the user''s language from their `Accept-Language` headers sent by
    their browser. To use the content negotiator filter, we simply need to add `yii\filters\ContentNegotiator`
    to the `bootstrap` section of your `config/web.php` configuration file and specify
    the languages that we want to support automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The languages property specifies which languages Yii2 will automatically set
    `Yii::$app->language` to if they are present in the `Accept-Language` headers.
    In the previous example, we only set the language to `en` or `de`. If a language
    other than the ones listed in our application configuration is present in our
    `Accept-Language` headers, we'll default to the language specified in our `sourceLanguage`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than being set globally, we can also set a content negotiator within
    our controller''s `behaviors()` methods and specify the languages we want to support
    within that controller. This is beneficial when you have a module that may support
    more or different languages than your base application. Within our controllers,
    we can configure `yii\filters\ContentNegotiator` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This `yii\filters\ContentNegotiator` path can provide more features than just
    setting the application language. For more information on the content negotiation
    filter, ensure that you check out the Yii2 documentation at [http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html](http://www.yiiframework.com/doc-2.0/yii-filters-contentnegotiator.html).
  prefs: []
  type: TYPE_NORMAL
- en: Message translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2's message translation service translates a given text message from the
    source language to another by looking up the message to be translated in a message
    source file. If a message is found in a source for the target language, that string
    is returned instead of the original message. If the translated text is not found,
    Yii2 will return the original message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of Yii2''s message translation service is extremely straightforward.
    The first step toward translating messages in Yii2 is to wrap any and all messages
    you want translated in the `Yii::t()` static method, which can be called as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter indicates the category we want to store our messages in,
    and the second parameter indicates the message we wanted to be translated.
  prefs: []
  type: TYPE_NORMAL
- en: Message sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before Yii2 can translate our messages, however, we first need to define a
    message source that will store our base messages and our translated message files.
    Yii2 provides three distinct message source options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yii\i18n\PhpMessageSource` stores message files in a key value array format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yii\i18n/DbMessageSource` stores messages in a database table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yii\i18n\GettextMessageSource` uses GNU Gettext MO or PO files to store translated
    messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The message source we wish to use can be declared in your application configuration
    file within the components section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code block, the message source is provided by `yii\i18n\PhpMessageSource`.
    The `app*` pattern indicates that all messages that begin with `app` should be
    handled by the specified message source. By default, Yii2 will store messages
    within the `@app/messages` folder and will default the source language to `en-US`;
    however, this behavior can be changed by specifying the `basePath` and `sourceLanguage`
    properties within the category block, respectively, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, Yii2 will create message files with the same name as the category.
    This behavior can be altered by specifying the `fileMap` property within the category
    configuration. Unless otherwise specified with the `fileMap` property, all messages
    will be stored in `@app/messages/<language>/<category>.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Default translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yii2 also allows us to create fallback messages for categories that don''t
    match other translations. This can be set by declaring a `*` category within our
    configuration file, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Framework messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to specifying default messages, we can also modify the built-in
    messages that Yii2 provides natively. By default, Yii2 comes with several translations
    for things such as validation errors and other basic strings, all of which are
    stored within the `yii` category. As there may be times where the default Yii
    messages may not be appropriate or accurate, you can redefine the default message
    by setting the `yii` category within your configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Handling missing translations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a message translation is missing from the source file, Yii2 will display
    the original message content by default. While it''s convenient to ensure that
    our site displays at least something, this behavior can be troublesome to debug
    and identify. Moreover, we may want to perform additional processing in the event
    of missing translations. Fortunately, we can accomplish this by creating an event
    handler for the `missingTranslation` event triggered by `yii\i18n\MessageSource`,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, we can write an event handler to output something notable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The event handler is only processed for messages in that category. If you wish
    to handle the same event for multiple categories, you must assign the event handler
    to each category or, alternatively, assign it to the `*` category.
  prefs: []
  type: TYPE_NORMAL
- en: Generating message files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After configuring our message sources, we need to generate our message files.
    To do this, we will use the `message` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step toward generating our messages files is to create a configuration
    file that will define what languages we want to support as well as specific paths
    for where the messages should be stored. This can be done by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Depending upon the languages we previously specified in our web or console
    configuration file, this will generate something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the most part, the default values provided by Yii2 in this file should be
    sufficient. The only values you should consider changing are the `languages` option
    and the `format` option. Ensure that you set these values appropriately before
    proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After making the required changes to our `messagesconfig.php` file, we can
    generate our message files by running the message command directly, as shown in
    the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `message` command is an extremely powerful tool that allows us to quickly
    generate messages files that can be handed off to translators. Several options
    exist within the configuration file to make message translation easier. For example,
    the `removedUnused` parameter can be set to `true` to automatically remove strings
    from our message file if they are no longer listed in our source code. Additionally,
    by setting the `overwrite` parameter to `true`, we can run the `message` command
    over and over again to regenerate our translation files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `message` command doesn't support all path aliases. When working
    with a messages file, it's recommended that you use absolute paths. Additionally,
    it's recommended that you store your `messagesconfig.php` file within the `messages/`
    directory of your application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Message formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When translating messages, you may want to inject variables or data from your
    models into the message. To do this, we simply need to embed a `placeholder` within
    our message and then define what the `placeholder` is as a parameter within the
    third property of our `Yii::t()` method. For example, if we want to greet our
    user using their name, we can do that as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to named parameters, we can also use positional parameters,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii2 also supports parameter formatting for numbers, currency, dates, times,
    original, and plural data. More information can be found on the Yii2 API at [http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html](http://www.yiiframework.com/doc-2.0/yii-i18n-formatter.html)
    and under the parameter formatting section of the Yii2 guide at [http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting](http://www.yiiframework.com/doc-2.0/guide-tutorial-i18n.html#parameter-formatting).
  prefs: []
  type: TYPE_NORMAL
- en: Viewing file translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative to translating individual messages, we can also translate
    entire view files by saving a translated view file within the subdirectory of
    our `views` folder. As an example, supposing that we had a view script located
    at `views/site/login.php`, we could create a Spanish view file for `es-MX` by
    placing a translated message file in `views/site/es-MX/login.php`. Assuming that
    our target and source language is appropriately set, Yii2 will automatically render
    the translated file instead of the base file when our target language is set to
    `es-MX`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if the source and target language are the same, the original view
    will be rendered regardless of the existence of a translated view file.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the use of view file translations doesn't follow the DRY pattern
    we've emphasized throughout this book. Also, handing off complete HTML files with
    PHP code to your translators may make the translation of these files difficult,
    as the translation industry is based upon string translations rather than strings
    within code translations. To keep your application DRY and avoid any issues that
    may arise during the translation process, it is highly recommended that you use
    the previously mentioned message translation method rather than view file translations.
  prefs: []
  type: TYPE_NORMAL
- en: Module translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As separate entities, modules should contain their own message files separate
    from your application message files. The recommended way to use messages within
    modules is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `init()` method of your module, define a new translation section
    for your module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a static method wrapper for `Yii::t()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create a separate message configuration file within the `messages/`
    directory of your module that specifies the translator to be `<ModuleName>::t`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Messages within our module can then be translated by calling `MyModule::t()`.
    Additionally, translated message files can be generated by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Widget translations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a similar vein, widgets can also have their own message translation files
    by following the same process outlined for modules. Using our `GreetingWidget`
    class we created in [Chapter 5](part0035_split_000.html#11C3M2-ad3e09b384df46aea690d9c8897d5fe7
    "Chapter 5. Modules, Widgets, and Helpers"), *Modules, Widgets, and Helpers* would
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Consequently, a call to `GreetingWidget::t()` will render a translated message
    that's specific to our widget. Additionally, because widgets support view rendering,
    they can also support completely translated view files by following the same process
    outlined previously.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yii2 provides powerful tools to support internationalization and localization
    within our application. In this chapter, we covered how to generate and store
    message source files, how to generate message and view translations, and how to
    support translations within modules and widgets. In the next chapter, we'll cover
    Yii2's performance feature, as well as explore several built-in security features
    that Yii2 offers.
  prefs: []
  type: TYPE_NORMAL
