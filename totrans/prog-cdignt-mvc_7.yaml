- en: Chapter 7. Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the process flow to render views, the process flow within
    the view file, different type of views, and their role and usage with several
    code examples of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: The views are programmatic portions that provide content to the browser to be
    executed on the client side (that is, the user PC) to make the user-interface
    session on the local computer.
  prefs: []
  type: TYPE_NORMAL
- en: The PHP view file rendered output returns from the server as an HTTP response
    content to the requesting browser application (that is, requesting via submitting
    a URI in the browser navigation area).
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the browser sends a URI request that the user types in, to a default
    or specific controller method, such as `http://mysite.com/myapp/helloworld`.
  prefs: []
  type: TYPE_NORMAL
- en: The called controller method processes the request, performs its decision making,
    and may use the other CI resources, such as helpers, libraries, models, and eventually
    renders a view back as an HTTP response to the browser HTTP request that initiates
    the controller operation. The HTML file returned to the browser includes HTML,
    CSS, and JavaScript. The browser executes the received rendered view from the
    server, and uses it to perform the user-interface session (visual elements, and
    UI elements, such as buttons, scrollbars, and navigation elements); we see and
    operate via the browser to navigate to other page views or get specific information
    or media by issuing a page anchor, button, clicking on the icon, and so on. The
    described action causes another HTTP request(s), either synchronous (mostly anchor)
    or asynchronous AJAX request(s) handled by JavaScript embedded in the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI view is a PHP file that may contain part or all of the following: PHP
    statements, HTML tags, CSS, JavaScript program, Flash, images, and media sources.
    In CI, a view file may contain the PHP code that uses the controller-provided
    parameters, or even call the CI helpers, libraries, or model directly to generate
    the output that is part of the generated HTML file response. The generated PHP
    output can be strings or numeric values incorporated in the HTML tags, or even
    a whole HTML page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will primarily focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI view scope:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CI view resources path
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The rendering flow
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side flexibility
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing libraries/helpers within a view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AJAX
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: View parser configuration issues
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating jQuery or other client-side libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: View rendering plugins (view template plugin example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1: HTML5 location powered by Google Maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 2: user feedback powered by AJAX and the jQuery UI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin by briefly reviewing the CI view scope, and will proceed with
    several usage examples covering different use cases that can be combined in a
    real project.
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the CI view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI view is enabled with great flexibility to integrate the client-side third-party
    resources, as well as accessing the CI resources of the CI libraries, helpers,
    and models.
  prefs: []
  type: TYPE_NORMAL
- en: This section will focus on the CI view syntax and usage guidelines, as a preface
    to the coming usage code examples.
  prefs: []
  type: TYPE_NORMAL
- en: We can extend the CI library using the third-party libraries from the CI echo
    system or develop our own libraries.
  prefs: []
  type: TYPE_NORMAL
- en: The CI view resources path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a CI project, the view files are located under the `application/views/`
    directory or any subdirectory to this path. For example, we can build under `application/views/`
    subdirectories, for let''s say, two different view categories to improve the clarity
    of the file structure in our project. The following screenshot shows the views
    location in a CI project directory tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The CI view resources path](img/4704OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, to render a template file located at `Application/views/templates/`
    named `home.php`, we shall write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `view_file` is referring to the CI resource PHP view file `application/views/view_file.php`.
  prefs: []
  type: TYPE_NORMAL
- en: '`$view_params` is the array of parameters (scalar/array in each entry) for
    the view file, as we have demonstrated at several places earlier, so that each
    array key, let''s say, `name,` becomes the `$name` PHP variable in the view to
    use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In case we wish to get the processed view into a buffer, for, special processing,
    caching, or any other processing purpose, for example you may call the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the third parameter's value is set to `TRUE` (the default value is
    set to `FALSE`, and echoes the view to the standard output; in the case of the
    controller rendering, this means it will be returned as an HTTP response to the
    browser, issuing the request from the controller).
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example refers to the following view file: `application/views/sectionA/view_file.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: The rendering flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view is rendered by the controller. The controller provides the parameters
    to the rendered PHP view file to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller uses the following built-in CI load library: `$this->load->view(''my_view'',$data);`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, the controller uses the third-party rendering service library. In
    this chapter we will use such a library. The CI controller rendering is done by
    the CI load view library, and that optionally accepts the `$data` of parameters
    and objects that the rendered PHP view file can use. See the following code for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The rendered PHP view file `application/views/my_view.php` uses the `$data`
    parameters provided via the load library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the controller defines the data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While the usage at the PHP view file rendered will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, the PHP view file will be executed, so that the HTML generated code
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The entire PHP view file that is rendered, including the PHP executions, will
    generate the view HTML file that will be returned to the browser via HTTP to be
    executed locally.
  prefs: []
  type: TYPE_NORMAL
- en: View flexibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CI provides the flexibility for the PHP view file code to use any client-side
    JavaScript/CSS/HTML, or other JavaScript libraries in the view files, without
    any requirement to declare them at the server-side controller, as it occurs in
    some other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the CI view can access any other CI resources, such as the CI libraries,
    the CI models, or the CI helpers, as if it were the rendering controller of the
    view; for example, accessing a session parameter directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Also, the CI view can call a CI library method directly in the same fashion
    as the rendering controller does (assuming the rendering controller loads this
    library).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the libraries/helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, the CI PHP view file can access any of the CI resources,
    such as calling the CI helpers, libraries, or models in the same way the controller
    does.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a more elaborated and complete example of a PHP CI view file,
    accessing CI resources, such as libraries/models/helpers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CI PHP view file can contain any number of HTML data entry forms to accept
    the input data from the browsing user. We can use the CI form helper service to
    simplify the data entry buildup powered validation services.
  prefs: []
  type: TYPE_NORMAL
- en: The CI form helper provides a useful and comprehensive set of PHP functions
    for many data entry and input fashions. Among them we can find the data entry
    of the text field, the area text field, the radio button, checkbox, combo box,
    and menu option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of the most common CI form helper functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`form_open()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_input()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_dropdown()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_password()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_upload()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_textarea()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_multiselect()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_checkbox()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_radio()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_close()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CI form helper generates an HTML portion that is rendered as part of the
    HTML file that is returned to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's take a look at a drop-down selection example of a color pickup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `form_dropdown` helper will generate the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For more information, refer to the CI form help user manual.
  prefs: []
  type: TYPE_NORMAL
- en: AJAX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Asynchronous JavaScript and XML services (AJAX) ([http://en.wikipedia.org/wiki/Ajax](http://en.wikipedia.org/wiki/Ajax))
    of JavaScript/jQuery integration within a view is critical today in almost any
    web application. It provides an advanced user experience by operating asynchronously
    in parallel to the user operations, and updates only certain HTML selector portions
    and not the entire page as anon AJAX updates operate.
  prefs: []
  type: TYPE_NORMAL
- en: 'AJAX has many use case examples to enhance the user experience. The following
    are few common usage examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Autocomplete while the user typing into a field all the matches found shown
    in a pop-up list for the user to choose. Without AJAX autocomplete the UI service
    is almost impossible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When submitting a form data entry using AJAX enables to issue the server submission
    to store or process the date and show the result only in a specific selector (notification
    massage), instead of refreshing the whole page as form with the action, submission
    requires. (Format: Bullet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When browsing many information pages (called pagination) and clicking on a
    certain page number to view. AJAX enables rendering the selected page to view
    within a selection DIV in the whole HTML page without refreshing the whole page.
    (Format: Bullet End)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, AJAX is becoming an essential view component, mostly enabled via
    the popular jQuery library, which makes it easy to use. AJAX is an extremely valuable
    UI asset for building smart and interactive views. For example, the following
    is an example of the AJAX service that, for a given **SSN** (**Social Security
    Number**), provides the person's name and phone number in the defined selectors,
    if found, or alerts, if else. Whenever the user is clicking on the **Get Info**
    button, an AJAX call is triggered, and an asynchronous AJAX call to an AJAX controller
    is sent with the SSN to get the person's record. When the response is returned,
    if the SSN was found, the phone and name of the person will be updated. Otherwise,
    a notification will be provided that the SSN person's record was not found.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code implementing the process described previously, where
    the AJAX call is the heart of the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the portion of the HTML form itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parser configuration issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view is parsed by the CI parser before it is rendered back to the requesting
    browser. The default syntax to echo a PHP parameter / calculated expression value
    within the HTML tags is `<?PHP echo trim($param); ?>`.
  prefs: []
  type: TYPE_NORMAL
- en: However, CI provides automatic PHP short tag parsing support configuration at
    `application/config/config.php` and at the configuration parameter `$config['rewrite_short_tags']
    = TRUE;`.
  prefs: []
  type: TYPE_NORMAL
- en: If `rewrite_short_tags` is set to `TRUE`, we can use the short tag of `<?=trim($param)?>`.
  prefs: []
  type: TYPE_NORMAL
- en: An important note on this is that in terms of debugging, the non-short/regular
    PHP echo format is preferred, as the short form errors might be more difficult
    to trace in this fashion. However, since this fashion is used in many code projects
    we've seen, we are mentioning it as well.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating jQuery or other client-side libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CI provides the freedom to integrate any client-side libraries, so that CI does
    not have to be specially configured to, or we do not need to perform any special
    CI declarations.
  prefs: []
  type: TYPE_NORMAL
- en: The client-side integration is performed in the same fashion, as if no platform
    is being used; they are completely transparent. However, CI provides client-side
    jQuery code generation services via PHP, such as building the JavaScript library
    to create jQuery code, as part of the controller coding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: However, for the latest jQuery and many other JavaScript-based solutions today,
    there's no need to use this fashion of rendered JavaScript portions, but we can
    use the JavaScript A-Z in the view itself instead. A great resource for the (wow
    level) JavaScript libraries can be found in the largest resource for the JavaScript
    libraries we've found so far at [http://www.jsdb.io](http://www.jsdb.io).
  prefs: []
  type: TYPE_NORMAL
- en: Many more cool links for client-side platforms can be found at [https://delicious.com/eliorr1961](https://delicious.com/eliorr1961).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the directory path for the sources in the CI views is calculated,
    as if the view file is in the project root.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say the JavaScript library is located at `<Project_root>/javascript/myjs.js`.
  prefs: []
  type: TYPE_NORMAL
- en: And the view is located either at the `<Project_root>/application/views/view1.php`
    or `<Project_root>/application/views/topicB/view2.php` view path under `views`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we provide the root path via the base tag using the built-in CI URL helper
    `<base href="<?php echo base_url() ?>"/>`, both will load `myjs.js` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: They load as if they were located at the project root. This is due to the fact
    that CI processes the requests and rendering views as part of the root directory
    `index.php`. Hence, all the directory paths for SRC or INCLUDE from view PHP portions
    are considered, as if they occurred from the project root directory. This is due
    to the fact that all URIs to the project are executed by `index.php`. So for all
    the project code, the directory path is as though your code was in the same directory
    of `index.php` or at the CI project root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins for rendering view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned at the beginning of this chapter, we can use third-party libraries
    to enable us to create more advanced rendering services in a template layout fashion.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the CodeIgniter template class by *Colin Williams* available at
    [http://www.williamsconcepts.com/ci/libraries/template/index.html](http://www.williamsconcepts.com/ci/libraries/template/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: This plugin enables us to define the rendered page as a **Lego** fashioned layout
    with predefined page regions, so that we can have a different PHP CI view to render
    each of them.
  prefs: []
  type: TYPE_NORMAL
- en: This way we can have great reusability and a unified look, and fill in the entire
    application page, which in many cases is a good **UX** (**User Experience**) practice.
    In this case, the user, let's say, will know that on the top they will have a
    certain main navigation area, on the right certain status info and operational
    shortcuts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We can define one or more layouts, so that each page layout template will have
    its region's organization. Each region is commonly defined within a DIV.
  prefs: []
  type: TYPE_NORMAL
- en: Having several template layouts, we can initially choose the proper layout we
    want to use, and then we will load its region content using the CI views defined
    for each region. For example, let's say we want to have a certain layout named
    `default`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `default` template''s main layout will be named, `template,` for example,
    using the view file `main_template.php`, so that `main_template.php` will include
    the following regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upper_navigation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`footer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We shall perform the following configurations at `application/config/template.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is not the CI built-in plugin, but an additional plugin with the library
    and configuration file, and other assets we have installed to our CI project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `main_template` refers to `application/views/main_template.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `main_template.php` will include rendering of all the defined
    template regions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use the preceding template plugin, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: First, load the template library in the CI controller constructor/s where we
    want to use the template. Remember that the template library is located at <Project_root>/application/libraries/Template.php.
  prefs: []
  type: TYPE_NORMAL
- en: 'We shall load the template library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$this->load->library(''template'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Project_root>/application/libraries/Template.php`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will load the specific template file we have configured (we can define
    many to choose from), let's say, in the controller constructor, we will also assume
    that all the controller methods use the same template.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for rendering the template regions into a rendered view using the predefined
    view . We will do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For each template region at, let''s say, `<Project_root>/application/views/`,
    we shall load it to the corresponding region as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the template regions are rendered with their region view files. We can
    render the whole template with all its regions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The point to remember is that templates have great pros, but also some cons.
    The template dictates a very strict way of rendering a template base page that
    does not always have the desired flexibility, so that we may find ourselves writing
    several templates and switch between them, according to the UI situation.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – HTML5 location powered by Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will expand the Google Maps integration example from [Chapter
    4](ch04.html "Chapter 4. Libraries"), *Libraries*, so that there will be a new
    option of showing the user where they are located on the Google Map. For doing
    so, we will use the HTML5 `navigator.geolocation` service to request the browsing
    user to share its location with the application. If the user agrees, and is using
    an advanced browser, such as the latest Firefox, Chrome builds that support to
    this service. Once we get the values, we will collect the geolocation, and call
    a controller method to prepare the Google Map of that area to render a Google
    Map view with the option `navigator`. We will use the HTML5 `navigator.geolocation`
    service as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here, `getLocation` is called, if the location was successfully fetched, and
    `locationFail`, if it was failed.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the controller first.
  prefs: []
  type: TYPE_NORMAL
- en: The controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The controller PHP file is located at `application/controllers/gmaps.php`.
    The following is the controller code based on [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, for the extended Google Maps API integration example, where the new
    parts of code are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view PHP file is located at `application/views/google_map_view.php`.The
    following is the view file code based on [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, for the extended Google Maps API usage example view, where the new
    parts of code are highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we add an HTML5 service in JavaScript to collect the user's geolocation,
    and call the controller method `user_location ($lat=0, $lon=0)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Example 2 – user feedback powered by AJAX and the jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will show how we can use the jQuery UI with AJAX to call
    a CI AJAX controller method to collect the user feedback, and submit it without
    refreshing/rendering a page.
  prefs: []
  type: TYPE_NORMAL
- en: We will reuse and expand the login example from [Chapter 3](ch03.html "Chapter 3. Controller
    Usage and Scope"), *Usage and Scope of Controllers*, so if a user is logged in,
    we will log the feedback with the user ID kept in the session, while if not, we
    will log it as anonymous user feedback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: `reg_user`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: `111111111` (9 by 1s) for regular user login'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The reused and extended resources are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auth.php`: No change here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ajax_handler.php`: This is the new AJAX handler controller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`users_model.php`: This is the extended user model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logged_in_view.php`: This is the extended view for regular user login'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We expand the code to include the new `Ajax_handler` to keep the jQuery UI
    dialog submission of the browsing user feedback, as well as get the user logged
    message via the AJAX asynchronous interface. Note that we check in `Ajax_handler`
    to see whether the request is AJAX or not. And if it''s not, we issue the following
    URL in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://photographersnav.com/ci_utils/index.php/ajax_handler](http://photographersnav.com/ci_utils/index.php/ajax_handler).'
  prefs: []
  type: TYPE_NORMAL
- en: We will get a notification in the browser that this is a bad request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `users_model` resource is expanded to provide a few more services, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_logged_in_user()`: This function is used to return the logged in user
    record if logged in or NULL otherwise. `get_user_rec` ( `$uid` ) to get a specific
    user record based on his/her ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keep_user_feedback` (`$feedback`): This function is used to keep the user
    feedback in the database with its user ID, if logged in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_user_feedbacks` (`$uid`): This function get all the user feedback messages
    save till now in the database as an array of the database objects. Each feedback
    database row returned have the feedback message and its timestamp formatted as
    HTML and returned via the JSON format back to the AJAX caller to be shown to the
    end user via the jQuery selector based HTML rendering (for example, `$(selector).html`
    (`The_html_item_returned_from_server`)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `logged_in_view` resource is expanded to provide the user with the new
    services as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new feedback button, which when clicked pops-up a jQuery UI dialog for
    this purpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show the feedback log button, which when clicked shows a scrollable list of
    the user feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let us review the source code itself.
  prefs: []
  type: TYPE_NORMAL
- en: The ajax_handler.php controller file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The controller PHP file is located at `application/controllers/ajax_handler.php`.
    The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The users_model.php model file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The model PHP file is located at `application/models/users_model.php`. The
    code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The logged_in_view.php view file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PHP view file is located at `application/views/logged_in_view.php`. This
    file was extended with several more services, as described in the previous examples.
    The code and inline explanations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed the CI views, scope as well as their general
    MVC scope, and the different types of views and usage. In addition, we showed
    how to integrate our CodeIgniter code with the third-party template plugin (the
    CI library, configuration, and additional code assets) for providing the view
    template services to the application controllers.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned the examples of integrating the jQuery UI and AJAX in the
    CI view with the CI controllers/models.
  prefs: []
  type: TYPE_NORMAL
