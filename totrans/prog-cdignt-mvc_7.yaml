- en: Chapter 7. Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。视图
- en: This chapter covers the process flow to render views, the process flow within
    the view file, different type of views, and their role and usage with several
    code examples of web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了渲染视图的过程流程、视图文件内的过程流程、不同类型的视图及其与几个网络应用程序代码示例的角色和用法。
- en: The views are programmatic portions that provide content to the browser to be
    executed on the client side (that is, the user PC) to make the user-interface
    session on the local computer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是程序性部分，为浏览器提供内容，在客户端（即用户的 PC）上执行，以在本地计算机上创建用户界面会话。
- en: The PHP view file rendered output returns from the server as an HTTP response
    content to the requesting browser application (that is, requesting via submitting
    a URI in the browser navigation area).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 视图文件渲染的输出作为 HTTP 响应内容从服务器返回给请求的浏览器应用程序（即通过在浏览器导航区域提交 URI 来请求）。
- en: Initially, the browser sends a URI request that the user types in, to a default
    or specific controller method, such as `http://mysite.com/myapp/helloworld`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，浏览器发送一个 URI 请求，即用户输入的 URI，到默认或特定的控制器方法，例如 `http://mysite.com/myapp/helloworld`。
- en: The called controller method processes the request, performs its decision making,
    and may use the other CI resources, such as helpers, libraries, models, and eventually
    renders a view back as an HTTP response to the browser HTTP request that initiates
    the controller operation. The HTML file returned to the browser includes HTML,
    CSS, and JavaScript. The browser executes the received rendered view from the
    server, and uses it to perform the user-interface session (visual elements, and
    UI elements, such as buttons, scrollbars, and navigation elements); we see and
    operate via the browser to navigate to other page views or get specific information
    or media by issuing a page anchor, button, clicking on the icon, and so on. The
    described action causes another HTTP request(s), either synchronous (mostly anchor)
    or asynchronous AJAX request(s) handled by JavaScript embedded in the web page.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用的控制器方法处理请求，执行其决策，并可能使用其他 CI 资源，如辅助函数、库、模型，最终将视图作为 HTTP 响应渲染回浏览器，该响应是浏览器对控制器操作的初始
    HTTP 请求。返回给浏览器的 HTML 文件包括 HTML、CSS 和 JavaScript。浏览器执行从服务器接收到的渲染视图，并使用它来执行用户界面会话（视觉元素和
    UI 元素，如按钮、滚动条和导航元素）；我们通过浏览器看到并操作，以导航到其他页面视图或通过发出页面锚点、按钮、点击图标等方式获取特定信息或媒体。所描述的操作会导致另一个
    HTTP 请求（s），要么是同步的（主要是锚点），要么是由嵌入网页中的 JavaScript 处理的异步 AJAX 请求（s）。
- en: 'The CI view is a PHP file that may contain part or all of the following: PHP
    statements, HTML tags, CSS, JavaScript program, Flash, images, and media sources.
    In CI, a view file may contain the PHP code that uses the controller-provided
    parameters, or even call the CI helpers, libraries, or model directly to generate
    the output that is part of the generated HTML file response. The generated PHP
    output can be strings or numeric values incorporated in the HTML tags, or even
    a whole HTML page.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CI 视图是一个 PHP 文件，可能包含以下部分或全部内容：PHP 语句、HTML 标签、CSS、JavaScript 程序、Flash、图片和媒体源。在
    CI 中，视图文件可能包含使用控制器提供的参数的 PHP 代码，甚至可以直接调用 CI 辅助函数、库或模型来生成作为生成 HTML 文件响应一部分的输出。生成的
    PHP 输出可以是字符串或数值，它们被整合到 HTML 标签中，甚至可以是一个完整的 HTML 页面。
- en: 'This chapter will primarily focus on the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将主要关注以下主题：
- en: 'The CI view scope:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 视图作用域：
- en: The CI view resources path
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI 视图资源路径
- en: The rendering flow
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染流程
- en: Client-side flexibility
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端灵活性
- en: Accessing libraries/helpers within a view
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中访问库/辅助函数
- en: Forms
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单
- en: Using AJAX
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AJAX
- en: View parser configuration issues
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图解析器配置问题
- en: Integrating jQuery or other client-side libraries
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 jQuery 或其他客户端库
- en: View rendering plugins (view template plugin example)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图渲染插件（视图模板插件示例）
- en: 'Example 1: HTML5 location powered by Google Maps'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 1：由 Google Maps 驱动的 HTML5 位置
- en: 'Example 2: user feedback powered by AJAX and the jQuery UI'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 2：由 AJAX 和 jQuery UI 驱动的用户反馈
- en: We will begin by briefly reviewing the CI view scope, and will proceed with
    several usage examples covering different use cases that can be combined in a
    real project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要回顾 CI 视图的作用域，然后通过几个使用示例来涵盖可以在实际项目中组合的不同用例。
- en: Scope of the CI view
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI 视图的作用域
- en: The CI view is enabled with great flexibility to integrate the client-side third-party
    resources, as well as accessing the CI resources of the CI libraries, helpers,
    and models.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CI 视图具有极大的灵活性，可以集成客户端第三方资源，以及访问 CI 库、辅助函数和模型的 CI 资源。
- en: This section will focus on the CI view syntax and usage guidelines, as a preface
    to the coming usage code examples.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍 CI 视图语法和用法指南，作为即将到来的使用代码示例的序言。
- en: We can extend the CI library using the third-party libraries from the CI echo
    system or develop our own libraries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 CI echo 系统中的第三方库来扩展 CI 库，或者开发我们自己的库。
- en: The CI view resources path
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI 视图资源路径
- en: 'In a CI project, the view files are located under the `application/views/`
    directory or any subdirectory to this path. For example, we can build under `application/views/`
    subdirectories, for let''s say, two different view categories to improve the clarity
    of the file structure in our project. The following screenshot shows the views
    location in a CI project directory tree:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CI 项目中，视图文件位于 `application/views/` 目录或此路径的任何子目录下。例如，我们可以在 `application/views/`
    子目录下构建，比如两个不同的视图类别，以提高我们项目中文件结构的清晰度。以下截图显示了 CI 项目目录树中的视图位置：
- en: '![The CI view resources path](img/4704OT_07_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![CI 视图资源路径](img/4704OT_07_01.jpg)'
- en: 'For example, to render a template file located at `Application/views/templates/`
    named `home.php`, we shall write the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要渲染位于 `Application/views/templates/` 的模板文件 `home.php`，我们应该编写以下代码：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `view_file` is referring to the CI resource PHP view file `application/views/view_file.php`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`view_file` 指的是 CI 资源 PHP 视图文件 `application/views/view_file.php`。
- en: '`$view_params` is the array of parameters (scalar/array in each entry) for
    the view file, as we have demonstrated at several places earlier, so that each
    array key, let''s say, `name,` becomes the `$name` PHP variable in the view to
    use.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`$view_params` 是视图文件的参数数组（每个条目为标量/数组），正如我们在几个地方之前所展示的，因此每个数组键，比如 `name`，成为视图中的
    `$name` PHP 变量以供使用。'
- en: 'In case we wish to get the processed view into a buffer, for, special processing,
    caching, or any other processing purpose, for example you may call the following
    example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望将处理过的视图放入缓冲区，用于特殊处理、缓存或其他处理目的，例如，你可以调用以下示例：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the third parameter's value is set to `TRUE` (the default value is
    set to `FALSE`, and echoes the view to the standard output; in the case of the
    controller rendering, this means it will be returned as an HTTP response to the
    browser, issuing the request from the controller).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第三个参数的值设置为 `TRUE`（默认值设置为 `FALSE`，并将视图输出到标准输出；在控制器渲染的情况下，这意味着它将作为 HTTP 响应返回给浏览器，由控制器发起请求）。
- en: 'The preceding example refers to the following view file: `application/views/sectionA/view_file.php`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例引用以下视图文件：`application/views/sectionA/view_file.php`。
- en: The rendering flow
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染流程
- en: The view is rendered by the controller. The controller provides the parameters
    to the rendered PHP view file to use them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是由控制器渲染的。控制器提供了参数给渲染的 PHP 视图文件以供使用。
- en: 'The controller uses the following built-in CI load library: `$this->load->view(''my_view'',$data);`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器使用以下内置 CI load 库：`$this->load->view('my_view',$data);`
- en: 'Otherwise, the controller uses the third-party rendering service library. In
    this chapter we will use such a library. The CI controller rendering is done by
    the CI load view library, and that optionally accepts the `$data` of parameters
    and objects that the rendered PHP view file can use. See the following code for
    example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，控制器将使用第三方渲染服务库。在本章中，我们将使用此类库。CI 控制器渲染是通过 CI load view 库完成的，该库可选地接受渲染的 PHP
    视图文件可以使用的 `$data` 参数和对象。以下代码为例：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The rendered PHP view file `application/views/my_view.php` uses the `$data`
    parameters provided via the load library as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的 PHP 视图文件 `application/views/my_view.php` 如下使用通过加载库提供的 `$data` 参数：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that the controller defines the data as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，控制器如下定义数据：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While the usage at the PHP view file rendered will be as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 PHP 视图文件中使用的用法如下：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Later, the PHP view file will be executed, so that the HTML generated code
    will be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，PHP 视图文件将被执行，因此生成的 HTML 代码将如下所示：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The entire PHP view file that is rendered, including the PHP executions, will
    generate the view HTML file that will be returned to the browser via HTTP to be
    executed locally.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的整个 PHP 视图文件，包括 PHP 执行，将生成将被通过 HTTP 返回给浏览器的视图 HTML 文件，并在本地执行。
- en: View flexibility
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图灵活性
- en: CI provides the flexibility for the PHP view file code to use any client-side
    JavaScript/CSS/HTML, or other JavaScript libraries in the view files, without
    any requirement to declare them at the server-side controller, as it occurs in
    some other platforms.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CI 为 PHP 视图文件代码使用任何客户端 JavaScript/CSS/HTML 或其他 JavaScript 库提供了灵活性，而无需在服务器端控制器中声明它们，这在某些其他平台上是常见的。
- en: Furthermore, the CI view can access any other CI resources, such as the CI libraries,
    the CI models, or the CI helpers, as if it were the rendering controller of the
    view; for example, accessing a session parameter directly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CI 视图可以访问任何其他 CI 资源，例如 CI 库、CI 模型或 CI 辅助函数，就像它是视图的渲染控制器一样；例如，直接访问会话参数。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also, the CI view can call a CI library method directly in the same fashion
    as the rendering controller does (assuming the rendering controller loads this
    library).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CI 视图可以直接调用 CI 库方法，就像渲染控制器一样（假设渲染控制器加载了这个库）。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Accessing the libraries/helpers
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问库/辅助函数
- en: As mentioned earlier, the CI PHP view file can access any of the CI resources,
    such as calling the CI helpers, libraries, or models in the same way the controller
    does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，CI PHP 视图文件可以访问 CI 的任何资源，例如以与控制器相同的方式调用 CI 辅助函数、库或模型。
- en: 'The following is a more elaborated and complete example of a PHP CI view file,
    accessing CI resources, such as libraries/models/helpers:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个更详细和完整的 PHP CI 视图文件示例，访问 CI 资源，如库/模型/辅助函数：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Forms
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单
- en: The CI PHP view file can contain any number of HTML data entry forms to accept
    the input data from the browsing user. We can use the CI form helper service to
    simplify the data entry buildup powered validation services.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CI PHP 视图文件可以包含任何数量的 HTML 数据输入表单，以接受浏览用户的输入数据。我们可以使用 CI 表单辅助服务来简化数据输入构建并启用验证服务。
- en: The CI form helper provides a useful and comprehensive set of PHP functions
    for many data entry and input fashions. Among them we can find the data entry
    of the text field, the area text field, the radio button, checkbox, combo box,
    and menu option.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CI 表单辅助函数提供了一套有用且全面的 PHP 函数，用于多种数据输入和输入方式。其中我们可以找到文本字段的数据输入、区域文本字段、单选按钮、复选框、组合框和菜单选项。
- en: 'The following is a list of the most common CI form helper functions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常见的 CI 表单辅助函数列表：
- en: '`form_open()`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_open()`'
- en: '`form_input()`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_input()`'
- en: '`form_dropdown()`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_dropdown()`'
- en: '`form_password()`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_password()`'
- en: '`form_upload()`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_upload()`'
- en: '`form_textarea()`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_textarea()`'
- en: '`form_multiselect()`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_multiselect()`'
- en: '`form_checkbox()`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_checkbox()`'
- en: '`form_radio()`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_radio()`'
- en: '`form_close()`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_close()`'
- en: The CI form helper generates an HTML portion that is rendered as part of the
    HTML file that is returned to the browser.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: CI 表单辅助函数生成一个 HTML 部分，该部分作为返回给浏览器的 HTML 文件的一部分进行渲染。
- en: For example, let's take a look at a drop-down selection example of a color pickup.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看一个颜色拾取的下拉选择示例。
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `form_dropdown` helper will generate the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_dropdown` 辅助函数将生成以下代码：'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For more information, refer to the CI form help user manual.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅 CI 表单帮助用户手册。
- en: AJAX
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AJAX
- en: Asynchronous JavaScript and XML services (AJAX) ([http://en.wikipedia.org/wiki/Ajax](http://en.wikipedia.org/wiki/Ajax))
    of JavaScript/jQuery integration within a view is critical today in almost any
    web application. It provides an advanced user experience by operating asynchronously
    in parallel to the user operations, and updates only certain HTML selector portions
    and not the entire page as anon AJAX updates operate.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 异步 JavaScript 和 XML 服务（AJAX）[http://en.wikipedia.org/wiki/Ajax](http://en.wikipedia.org/wiki/Ajax)
    在视图中的 JavaScript/jQuery 集成对于今天几乎任何 Web 应用程序都是至关重要的。它通过异步并行于用户操作来提供高级用户体验，并且只更新某些
    HTML 选择器部分，而不是整个页面，就像非 AJAX 更新操作一样。
- en: 'AJAX has many use case examples to enhance the user experience. The following
    are few common usage examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 有许多用例示例，可以增强用户体验。以下是一些常见的使用示例：
- en: Autocomplete while the user typing into a field all the matches found shown
    in a pop-up list for the user to choose. Without AJAX autocomplete the UI service
    is almost impossible.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户在字段中输入时，自动完成功能会显示所有匹配项，并在弹出列表中供用户选择。如果没有 AJAX 自动完成，UI 服务几乎是不可能的。
- en: 'When submitting a form data entry using AJAX enables to issue the server submission
    to store or process the date and show the result only in a specific selector (notification
    massage), instead of refreshing the whole page as form with the action, submission
    requires. (Format: Bullet)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用AJAX提交表单数据条目时，可以发出服务器提交以存储或处理数据，并在特定的选择器（通知消息）中显示结果，而不是像需要表单操作的提交那样刷新整个页面。（格式：项目符号）
- en: 'When browsing many information pages (called pagination) and clicking on a
    certain page number to view. AJAX enables rendering the selected page to view
    within a selection DIV in the whole HTML page without refreshing the whole page.
    (Format: Bullet End)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当浏览许多信息页面（称为分页）并点击某个页码以查看时。AJAX允许在整页HTML中不刷新整个页面，在选择的DIV内渲染所选页面。（格式：项目符号结束）
- en: Currently, AJAX is becoming an essential view component, mostly enabled via
    the popular jQuery library, which makes it easy to use. AJAX is an extremely valuable
    UI asset for building smart and interactive views. For example, the following
    is an example of the AJAX service that, for a given **SSN** (**Social Security
    Number**), provides the person's name and phone number in the defined selectors,
    if found, or alerts, if else. Whenever the user is clicking on the **Get Info**
    button, an AJAX call is triggered, and an asynchronous AJAX call to an AJAX controller
    is sent with the SSN to get the person's record. When the response is returned,
    if the SSN was found, the phone and name of the person will be updated. Otherwise,
    a notification will be provided that the SSN person's record was not found.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，AJAX正成为必不可少的视图组件，主要通过流行的jQuery库实现，这使得它很容易使用。AJAX是构建智能和交互式视图的极其宝贵的UI资产。例如，以下是一个AJAX服务的示例，对于给定的**SSN**（**社会保险号**），如果找到，在定义的选择器中提供个人的姓名和电话号码，否则发出警报。每当用户点击**获取信息**按钮时，就会触发AJAX调用，并发送一个异步AJAX调用到AJAX控制器，以SSN获取个人的记录。当响应返回时，如果找到SSN，个人的电话和姓名将被更新。否则，将提供通知，表示未找到SSN个人的记录。
- en: 'The following is the code implementing the process described previously, where
    the AJAX call is the heart of the operation:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现之前描述的过程的代码，其中AJAX调用是操作的核心：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the portion of the HTML form itself:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从HTML表单本身的部分：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parser configuration issues
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析器配置问题
- en: The view is parsed by the CI parser before it is rendered back to the requesting
    browser. The default syntax to echo a PHP parameter / calculated expression value
    within the HTML tags is `<?PHP echo trim($param); ?>`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 视图在渲染回请求的浏览器之前由CI解析器解析。在HTML标签内输出PHP参数/计算表达式值的默认语法是`<?PHP echo trim($param);
    ?>`。
- en: However, CI provides automatic PHP short tag parsing support configuration at
    `application/config/config.php` and at the configuration parameter `$config['rewrite_short_tags']
    = TRUE;`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，CI在`application/config/config.php`和配置参数`$config['rewrite_short_tags'] = TRUE;`中提供了自动PHP短标签解析支持的配置。
- en: If `rewrite_short_tags` is set to `TRUE`, we can use the short tag of `<?=trim($param)?>`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`rewrite_short_tags`设置为`TRUE`，我们可以使用`<?=trim($param)?>`的短标签。
- en: An important note on this is that in terms of debugging, the non-short/regular
    PHP echo format is preferred, as the short form errors might be more difficult
    to trace in this fashion. However, since this fashion is used in many code projects
    we've seen, we are mentioning it as well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这一点的重要提示是，在调试方面，非短/常规PHP echo格式更受欢迎，因为短形式错误可能更难以这种方式追踪。然而，由于这种格式在许多我们看到的代码项目中都被使用，我们也提到了它。
- en: Integrating jQuery or other client-side libraries
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成jQuery或其他客户端库
- en: CI provides the freedom to integrate any client-side libraries, so that CI does
    not have to be specially configured to, or we do not need to perform any special
    CI declarations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: CI提供了集成任何客户端库的自由，因此CI不需要特别配置，或者我们不需要执行任何特殊的CI声明。
- en: The client-side integration is performed in the same fashion, as if no platform
    is being used; they are completely transparent. However, CI provides client-side
    jQuery code generation services via PHP, such as building the JavaScript library
    to create jQuery code, as part of the controller coding.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端集成以相同的方式进行，就像没有使用任何平台一样；它们是完全透明的。然而，CI通过PHP提供客户端jQuery代码生成服务，例如构建JavaScript库以创建jQuery代码，作为控制器编码的一部分。
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: However, for the latest jQuery and many other JavaScript-based solutions today,
    there's no need to use this fashion of rendered JavaScript portions, but we can
    use the JavaScript A-Z in the view itself instead. A great resource for the (wow
    level) JavaScript libraries can be found in the largest resource for the JavaScript
    libraries we've found so far at [http://www.jsdb.io](http://www.jsdb.io).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于当今最新的jQuery和许多其他基于JavaScript的解决方案，没有必要使用这种渲染JavaScript片段的方式，但我们可以使用视图本身的JavaScript
    A-Z。关于JavaScript库的（哇级）资源，可以在我们迄今为止找到的最大的JavaScript库资源[http://www.jsdb.io](http://www.jsdb.io)中找到。
- en: Many more cool links for client-side platforms can be found at [https://delicious.com/eliorr1961](https://delicious.com/eliorr1961).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://delicious.com/eliorr1961](https://delicious.com/eliorr1961)可以找到更多关于客户端平台的酷链接。
- en: Note that the directory path for the sources in the CI views is calculated,
    as if the view file is in the project root.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，CI视图中源目录路径的计算，就像视图文件在项目根目录一样。
- en: For example, let's say the JavaScript library is located at `<Project_root>/javascript/myjs.js`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设JavaScript库位于`<Project_root>/javascript/myjs.js`。
- en: And the view is located either at the `<Project_root>/application/views/view1.php`
    or `<Project_root>/application/views/topicB/view2.php` view path under `views`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 视图位于`<Project_root>/application/views/view1.php`或`<Project_root>/application/views/topicB/view2.php`视图路径下的`views`。
- en: 'After we provide the root path via the base tag using the built-in CI URL helper
    `<base href="<?php echo base_url() ?>"/>`, both will load `myjs.js` as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用内置CI URL助手`<base href="<?php echo base_url() ?>"/>`提供根路径后，两者都将加载`myjs.js`如下：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: They load as if they were located at the project root. This is due to the fact
    that CI processes the requests and rendering views as part of the root directory
    `index.php`. Hence, all the directory paths for SRC or INCLUDE from view PHP portions
    are considered, as if they occurred from the project root directory. This is due
    to the fact that all URIs to the project are executed by `index.php`. So for all
    the project code, the directory path is as though your code was in the same directory
    of `index.php` or at the CI project root directory.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 它们加载时就像它们位于项目根目录一样。这是因为CI将请求和视图渲染作为根目录`index.php`的一部分进行处理。因此，所有从视图PHP部分来的SRC或INCLUDE目录路径都被视为来自项目根目录。这是由于所有指向项目的URI都是由`index.php`执行的。所以对于所有项目代码，目录路径就像你的代码在`index.php`的同一目录或CI项目根目录一样。
- en: Plugins for rendering view
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图渲染插件
- en: As mentioned at the beginning of this chapter, we can use third-party libraries
    to enable us to create more advanced rendering services in a template layout fashion.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，我们可以使用第三方库来使我们能够在模板布局方式中创建更高级的渲染服务。
- en: For example, the CodeIgniter template class by *Colin Williams* available at
    [http://www.williamsconcepts.com/ci/libraries/template/index.html](http://www.williamsconcepts.com/ci/libraries/template/index.html).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由*Colin Williams*提供的CodeIgniter模板类，可在[http://www.williamsconcepts.com/ci/libraries/template/index.html](http://www.williamsconcepts.com/ci/libraries/template/index.html)找到。
- en: This plugin enables us to define the rendered page as a **Lego** fashioned layout
    with predefined page regions, so that we can have a different PHP CI view to render
    each of them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件使我们能够将渲染的页面定义为一种**乐高**风格的布局，具有预定义的页面区域，这样我们就可以为每个区域使用不同的PHP CI视图来渲染。
- en: This way we can have great reusability and a unified look, and fill in the entire
    application page, which in many cases is a good **UX** (**User Experience**) practice.
    In this case, the user, let's say, will know that on the top they will have a
    certain main navigation area, on the right certain status info and operational
    shortcuts, and so on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以有很好的可重用性和统一的风格，并填充整个应用程序页面，这在许多情况下是一种好的**UX**（用户体验）实践。在这种情况下，用户，比如说，将知道在顶部他们将有一个特定的主要导航区域，在右侧有某些状态信息和操作快捷方式，等等。
- en: We can define one or more layouts, so that each page layout template will have
    its region's organization. Each region is commonly defined within a DIV.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个或多个布局，这样每个页面布局模板都将有其区域组织。每个区域通常定义在一个DIV内。
- en: Having several template layouts, we can initially choose the proper layout we
    want to use, and then we will load its region content using the CI views defined
    for each region. For example, let's say we want to have a certain layout named
    `default`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个模板布局，我们最初可以选择我们想要使用的适当布局，然后我们将使用为每个区域定义的CI视图来加载其区域内容。例如，假设我们想要一个名为`default`的布局。
- en: 'The `default` template''s main layout will be named, `template,` for example,
    using the view file `main_template.php`, so that `main_template.php` will include
    the following regions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`default` 模板的主体布局将被命名为 `template`，例如，使用视图文件 `main_template.php`，因此 `main_template.php`
    将包含以下区域：'
- en: '`header`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header`'
- en: '`upper_navigation`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper_navigation`'
- en: '`content`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`'
- en: '`footer`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`footer`'
- en: We shall perform the following configurations at `application/config/template.php`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `application/config/template.php` 执行以下配置。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is not the CI built-in plugin, but an additional plugin with the library
    and configuration file, and other assets we have installed to our CI project.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是 CI 内置插件，而是一个附加插件，包括库和配置文件，以及我们安装到 CI 项目的其他资产。
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `main_template` refers to `application/views/main_template.php`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_template` 指的是 `application/views/main_template.php`。'
- en: 'The content of `main_template.php` will include rendering of all the defined
    template regions as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`main_template.php` 的内容将包括所有定义的模板区域的渲染，如下所示：'
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In order to use the preceding template plugin, we will do the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用前面的模板插件，我们将执行以下操作：
- en: First, load the template library in the CI controller constructor/s where we
    want to use the template. Remember that the template library is located at <Project_root>/application/libraries/Template.php.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 CI 控制器构造函数/s 中加载模板库，我们希望使用模板。请记住，模板库位于 `<Project_root>/application/libraries/Template.php`。
- en: 'We shall load the template library as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下方式加载模板库：
- en: '`$this->load->library(''template'');`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`$this->load->library(''template'');`'
- en: '`<Project_root>/application/libraries/Template.php`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Project_root>/application/libraries/Template.php`'
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, we will load the specific template file we have configured (we can define
    many to choose from), let's say, in the controller constructor, we will also assume
    that all the controller methods use the same template.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将加载我们已配置的特定模板文件（我们可以定义多个以供选择），例如，在控制器构造函数中，我们还将假设所有控制器方法使用相同的模板。
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, for rendering the template regions into a rendered view using the predefined
    view . We will do as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了使用预定义的视图将模板区域渲染为已渲染的视图，我们将按照以下方式操作：
- en: 'For each template region at, let''s say, `<Project_root>/application/views/`,
    we shall load it to the corresponding region as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个模板区域，例如在 `<Project_root>/application/views/`，我们将按照以下方式将其加载到相应的区域：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now the template regions are rendered with their region view files. We can
    render the whole template with all its regions as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模板区域已使用它们的区域视图文件进行渲染。我们可以按照以下方式渲染整个模板及其所有区域：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The point to remember is that templates have great pros, but also some cons.
    The template dictates a very strict way of rendering a template base page that
    does not always have the desired flexibility, so that we may find ourselves writing
    several templates and switch between them, according to the UI situation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，模板有很好的优点，但也存在一些缺点。模板强制执行一种非常严格的渲染模板基础页面的方式，这种方式并不总是具有所需的灵活性，因此我们可能会发现自己需要编写多个模板并在它们之间切换，根据
    UI 情况而定。
- en: Example 1 – HTML5 location powered by Google Maps
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1 – 由 Google Maps 提供支持的 HTML5 位置
- en: 'In this example, we will expand the Google Maps integration example from [Chapter
    4](ch04.html "Chapter 4. Libraries"), *Libraries*, so that there will be a new
    option of showing the user where they are located on the Google Map. For doing
    so, we will use the HTML5 `navigator.geolocation` service to request the browsing
    user to share its location with the application. If the user agrees, and is using
    an advanced browser, such as the latest Firefox, Chrome builds that support to
    this service. Once we get the values, we will collect the geolocation, and call
    a controller method to prepare the Google Map of that area to render a Google
    Map view with the option `navigator`. We will use the HTML5 `navigator.geolocation`
    service as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将扩展来自 [第 4 章](ch04.html "第 4 章。库") 的 Google Maps 集成示例，*库*，以便将有一个新的选项显示用户在
    Google 地图上的位置。为此，我们将使用 HTML5 `navigator.geolocation` 服务请求浏览用户与应用程序共享其位置。如果用户同意，并且使用支持此服务的先进浏览器，例如最新的
    Firefox、Chrome 构建。一旦我们获取了值，我们将收集地理位置，并调用控制器方法来准备该区域的 Google 地图，以使用 `navigator`
    选项渲染 Google 地图视图。我们将按照以下方式使用 HTML5 `navigator.geolocation` 服务：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, `getLocation` is called, if the location was successfully fetched, and
    `locationFail`, if it was failed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果位置成功获取，则调用 `getLocation`，如果失败，则调用 `locationFail`。
- en: We will start with the controller first.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从控制器开始。
- en: The controller file
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器文件
- en: 'The controller PHP file is located at `application/controllers/gmaps.php`.
    The following is the controller code based on [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, for the extended Google Maps API integration example, where the new
    parts of code are highlighted:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器PHP文件位于`application/controllers/gmaps.php`。以下是基于第4章*库*的扩展Google Maps API集成示例的控制器代码，其中新代码部分被突出显示：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The view file
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图文件
- en: The view PHP file is located at `application/views/google_map_view.php`.The
    following is the view file code based on [Chapter 4](ch04.html "Chapter 4. Libraries"),
    *Libraries*, for the extended Google Maps API usage example view, where the new
    parts of code are highlighted.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 视图PHP文件位于`application/views/google_map_view.php`。以下是基于第4章*库*的扩展Google Maps API使用示例视图的视图文件代码，其中新代码部分被突出显示。
- en: Here, we add an HTML5 service in JavaScript to collect the user's geolocation,
    and call the controller method `user_location ($lat=0, $lon=0)`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过JavaScript添加一个HTML5服务来收集用户的地理位置，并调用控制器方法`user_location ($lat=0, $lon=0)`。
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Example 2 – user feedback powered by AJAX and the jQuery UI
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 – 由AJAX和jQuery UI驱动的用户反馈
- en: In this example, we will show how we can use the jQuery UI with AJAX to call
    a CI AJAX controller method to collect the user feedback, and submit it without
    refreshing/rendering a page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将展示如何使用jQuery UI和AJAX调用CI AJAX控制器方法来收集用户反馈，并在不刷新/渲染页面的情况下提交。
- en: We will reuse and expand the login example from [Chapter 3](ch03.html "Chapter 3. Controller
    Usage and Scope"), *Usage and Scope of Controllers*, so if a user is logged in,
    we will log the feedback with the user ID kept in the session, while if not, we
    will log it as anonymous user feedback.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用并扩展第3章中的登录示例，即*控制器的使用和范围*，因此如果用户已登录，我们将使用会话中保存的用户ID记录反馈，如果没有，我们将将其记录为匿名用户反馈。
- en: 'Remember the following things:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 记住以下事项：
- en: '**Username**: `reg_user`,'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**: `reg_user`,'
- en: '**Password**: `111111111` (9 by 1s) for regular user login'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**: `111111111` (9个1)用于普通用户登录'
- en: 'The reused and extended resources are as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重用和扩展的资源如下：
- en: '`auth.php`: No change here'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth.php`: 这里没有变化'
- en: '`ajax_handler.php`: This is the new AJAX handler controller'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajax_handler.php`: 这是新的AJAX处理器控制器'
- en: '`users_model.php`: This is the extended user model'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users_model.php`: 这是扩展的用户模型'
- en: '`logged_in_view.php`: This is the extended view for regular user login'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logged_in_view.php`: 这是扩展的普通用户登录视图'
- en: 'We expand the code to include the new `Ajax_handler` to keep the jQuery UI
    dialog submission of the browsing user feedback, as well as get the user logged
    message via the AJAX asynchronous interface. Note that we check in `Ajax_handler`
    to see whether the request is AJAX or not. And if it''s not, we issue the following
    URL in the browser:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展代码以包括新的`Ajax_handler`，以保持jQuery UI对话框提交的浏览用户反馈，并通过AJAX异步接口获取用户登录消息。注意，我们在`Ajax_handler`中检查请求是否为AJAX。如果不是，我们在浏览器中发出以下URL：
- en: '[http://photographersnav.com/ci_utils/index.php/ajax_handler](http://photographersnav.com/ci_utils/index.php/ajax_handler).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://photographersnav.com/ci_utils/index.php/ajax_handler](http://photographersnav.com/ci_utils/index.php/ajax_handler).'
- en: We will get a notification in the browser that this is a bad request.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在浏览器中收到通知，这是一个错误的请求。
- en: 'The `users_model` resource is expanded to provide a few more services, which
    are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`users_model`资源被扩展以提供更多服务，具体如下：'
- en: '`get_logged_in_user()`: This function is used to return the logged in user
    record if logged in or NULL otherwise. `get_user_rec` ( `$uid` ) to get a specific
    user record based on his/her ID.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_logged_in_user()`: 此函数用于在用户登录时返回登录用户记录，否则返回NULL。`get_user_rec` ( `$uid`
    )根据其ID获取特定用户记录。'
- en: '`keep_user_feedback` (`$feedback`): This function is used to keep the user
    feedback in the database with its user ID, if logged in.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keep_user_feedback` (`$feedback`): 此函数用于将用户反馈及其用户ID存储在数据库中，如果用户已登录。'
- en: '`get_user_feedbacks` (`$uid`): This function get all the user feedback messages
    save till now in the database as an array of the database objects. Each feedback
    database row returned have the feedback message and its timestamp formatted as
    HTML and returned via the JSON format back to the AJAX caller to be shown to the
    end user via the jQuery selector based HTML rendering (for example, `$(selector).html`
    (`The_html_item_returned_from_server`)).'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_user_feedbacks` (`$uid`): 此函数获取迄今为止保存在数据库中的所有用户反馈消息，以数据库对象数组的形式。每个反馈数据库行返回的反馈消息及其时间戳格式化为
    HTML，并通过 JSON 格式返回给 AJAX 调用者，以便通过 jQuery 选择器基于 HTML 渲染显示给最终用户（例如，`$(selector).html`
    (`从服务器返回的_html_item`)）。'
- en: 'The `logged_in_view` resource is expanded to provide the user with the new
    services as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`logged_in_view` 资源已扩展，为用户提供以下新服务：'
- en: Add a new feedback button, which when clicked pops-up a jQuery UI dialog for
    this purpose
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新的反馈按钮，点击后会弹出用于此目的的 jQuery UI 对话框
- en: Show the feedback log button, which when clicked shows a scrollable list of
    the user feedback
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示反馈日志按钮，点击后会显示一个可滚动的用户反馈列表
- en: Now let us review the source code itself.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来回顾源代码本身。
- en: The ajax_handler.php controller file
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ajax_handler.php` 控制器文件'
- en: 'The controller PHP file is located at `application/controllers/ajax_handler.php`.
    The code and inline explanations are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器 PHP 文件位于 `application/controllers/ajax_handler.php`。代码和内联说明如下：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The users_model.php model file
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`users_model.php` 模型文件'
- en: 'The model PHP file is located at `application/models/users_model.php`. The
    code and inline explanations are as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 模型 PHP 文件位于 `application/models/users_model.php`。代码和内联说明如下：
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The logged_in_view.php view file
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`logged_in_view.php` 视图文件'
- en: 'The PHP view file is located at `application/views/logged_in_view.php`. This
    file was extended with several more services, as described in the previous examples.
    The code and inline explanations are as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 视图文件位于 `application/views/logged_in_view.php`。此文件扩展了几个更多服务，如前例所述。代码和内联说明如下：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have reviewed the CI views, scope as well as their general
    MVC scope, and the different types of views and usage. In addition, we showed
    how to integrate our CodeIgniter code with the third-party template plugin (the
    CI library, configuration, and additional code assets) for providing the view
    template services to the application controllers.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 CI 视图、作用域以及它们的通用 MVC 作用域，以及不同类型的视图和用法。此外，我们展示了如何将我们的 CodeIgniter
    代码与第三方模板插件（CI 库、配置和额外的代码资源）集成，为应用程序控制器提供视图模板服务。
- en: We have also learned the examples of integrating the jQuery UI and AJAX in the
    CI view with the CI controllers/models.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了在 CI 视图中集成 jQuery UI 和 AJAX 的示例，与 CI 控制器/模型一起使用。
