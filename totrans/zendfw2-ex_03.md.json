["```php\n        <?php\n        // filename : module/Users/src/Users/Form/RegisterForm.php\n        namespace Users\\Form;\n        use Zend\\Form\\Form;\n        class RegisterForm extends Form\n        {\n            public function __construct($name = null)\n            {\n                parent::__construct('Register');\n                $this->setAttribute('method', 'post');\n                $this->setAttribute('enctype','multipart/form-data');\n        ```", "```php\n                $this->add(array(\n                    'name' => 'name',\n                    'attributes' => array(\n                        'type'  => 'text',\n                    ),\n                    'options' => array(\n                        'label' => 'Full Name',\n                    ),\n                ));\n        ```", "```php\n                $this->add(array(\n                    'name' => 'email',\n                    'attributes' => array(\n                        'type'  => 'email',\n                    ),\n                    'options' => array(\n                        'label' => 'Email',\n                    ),\n                    'attributes' => array( \n                        'required' => 'required' \n                    ), \n                    'filters' => array( \n                        array('name' => 'StringTrim'), \n                    ), \n                    'validators' => array( \n                        array( \n                            'name' => 'EmailAddress', \n                            'options' => array( \n                                'messages' => array( \n                                    \\Zend\\Validator\\EmailAddress::INVALID_FORMAT => 'Email address format is invalid' \n                                ) \n                            ) \n                        ) \n                    ) \n                ));\n        ```", "```php\n        <section class=\"register\">\n        <h2>Register</h2>\n        <?php if ($this->error): ?>\n        <p class=\"error\">\n            There were one or more issues with your submission. Please correct them as \n            indicated below.\n        </p>\n        <?php endif ?>\n        ```", "```php\n        <?php \n        $form = $this->form;\n        $form->prepare();\n        $form->setAttribute('action', $this->url(NULL, array('controller'=>'Register', 'action' => 'process')));\n        $form->setAttribute('method', 'post');\n        echo $this->form()->openTag($form);\n        ?>\n        ```", "```php\n        <dl class=\"zend_form\">\n        <dt><?php echo $this->formLabel($form->get('name')); ?></dt>\n        <dd><?php \n            echo $this->formElement($form->get('name'));\n            echo $this->formElementErrors($form->get('name'));\n        ?></dd>\n        <dt><?php echo $this->formLabel($form->get('email')); ?></dt>\n        <dd><?php \n            echo $this->formElement($form->get('email'));\n            echo $this->formElementErrors($form->get('email'));\n        ?></dd>\n        <dt><?php echo $this->formLabel($form->get('password')); ?></dt>\n        <dd><?php \n            echo $this->formElement($form->get('password'));\n            echo $this->formElementErrors($form->get('password'));\n        ?></dd>\n        <dt><?php echo $this->formLabel($form->get('confirm_password')); ?></dt>\n        <dd><?php \n            echo $this->formElement($form->get('confirm_password'));\n            echo $this->formElementErrors($form->get('confirm_password'));\n        ?></dd>\n        <dd><?php \n            echo $this->formElement($form->get('submit'));\n            echo $this->formElementErrors($form->get('submit'));\n        ?></dd>\n        </dl>\n        ```", "```php\n        <?php echo $this->form()->closeTag() ?>\n        </section>\n        ```", "```php\n        <section class=\"register-confirm\">\n        <h2>Register Sucessfull</h2>\n        <p> Thank you for your registration. </p>\n        </section>\n        ```", "```php\n    <?php\n    namespace Users\\Controller;\n    use Zend\\Mvc\\Controller\\AbstractActionController;\n    use Zend\\View\\Model\\ViewModel;\n    use Users\\Form\\RegisterForm;\n    class RegisterController extends AbstractActionController\n    {\n\n        public function indexAction()\n        {\n                    $form = new RegisterForm();\n                    $viewModel  = new ViewModel(array('form' => $form)); \n                    return $viewModel; \n        }\n        public function confirmAction()\n        {\n                    $viewModel  = new ViewModel(); \n                    return $viewModel; \n        }\n    }\n    ```", "```php\n    'controllers' => array(\n      'invokables' => array(\n        'Users\\Controller\\Index' => 'Users\\Controller\\IndexController',\n        'Users\\Controller\\Register' => 'Users\\Controller\\RegisterController',\n      ),\n    ```", "```php\n            'attributes' => array( \n                'required' => 'required' \n            ), \n            'filters' => array( \n                array('name' => 'StringTrim'), \n            ), \n            'validators' => array( \n                array( \n                    'name' => 'EmailAddress', \n                    'options' => array( \n                        'messages' => array( \n                            \\Zend\\Validator\\EmailAddress::INVALID_FORMAT => 'Email address format is invalid' \n                        )\n```", "```php\n    <?php\n    namespace Users\\Form;\n    use Zend\\InputFilter\\InputFilter;\n\n    class RegisterFilter extends InputFilter\n    {\n        public function __construct()\n        {\n    ```", "```php\n                $this->add(array(\n                    'name'       => 'email',\n                    'required'   => true,\n                    'validators' => array(\n                        array(\n                            'name'    => 'EmailAddress',\n                            'options' => array(\n                                'domain' => true,\n                            ),\n                        ),\n                    ),\n                ));\n        ```", "```php\n                $this->add(array(\n                    'name'       => 'name',\n                    'required'   => true,\n                    'filters'    => array(\n                        array(\n                            'name'    => 'StripTags',\n                        ),\n                    ),\n                    'validators' => array(\n                        array(\n                            'name'    => 'StringLength',\n                            'options' => array(\n                                'encoding' => 'UTF-8',\n                                'min'      => 2,\n                                'max'      => 140,\n                            ),\n                        ),\n                    ),\n                ));\n        ```", "```php\n        'password'        ));\n                $this->add(array(\n                    'name'       => 'confirm_password',\n                    'required'   => true,\n                ));\n        ```", "```php\n    public function processAction()\n    {\n      if (!$this->request->isPost()) {\n        return $this->redirect()->toRoute(NULL , \n          array( 'controller' => 'register', \n                'action' =>  'index' \n          ));\n      }\n      $post = $this->request->getPost();\n      $form = new RegisterForm();\n      $inputFilter = new RegisterFilter();\n      $form->setInputFilter($inputFilter);\n      $form->setData($post);\n      if (!$form->isValid()) {\n        $model = new ViewModel(array(\n          'error' => true,\n          'form'  => $form,\n        ));\n        $model->setTemplate('users/register/index');\n        return $model;\n      }\n      return $this->redirect()->toRoute(NULL , array( \n        'controller' => 'register', \n        'action' =>  'confirm' \n      ));\n    }\n    ```", "```php\n    CREATE TABLE user (\n      id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n      name TEXT NOT NULL,\n      email VARCHAR(255) NOT NULL,\n      password TEXT NOT NULL,\n      PRIMARY KEY (id),\n      UNIQUE INDEX idx_email(email)\n    );\n    ```", "```php\n    return array(\n        'db' => array(\n            'driver'         => 'Pdo',\n            'dsn'            => 'mysql:dbname=test;host=localhost',\n            'username'         => 'db_user',\n            'password'         => '',\n            'driver_options' => array(\n                PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES \\'UTF8\\''\n            ),\n        ),\n        'service_manager' => array(\n            'factories' => array(\n                'Zend\\Db\\Adapter\\Adapter'\n                        => 'Zend\\Db\\Adapter\\AdapterServiceFactory',\n            ),\n        ),\n    );\n    ```", "```php\n    <?php\n    namespace Users\\Model;\n    class User\n    {\n      public $id;\n      public $name;\n      public $email;\n      public $password;\n    }\n    ```", "```php\n          public function setPassword($clear_password)\n          {\n            $this->password = md5($clear_password);\n          }\n        ```", "```php\n          function exchangeArray($data)\n          {\n            $this->name = (isset($data['name'])) ? $data['name'] : null;\n            $this->email = (isset($data['email'])) ? $data['email'] : null;\n            if (isset($data[\"password\"]))\n            {\n              $this->setPassword($data[\"password\"]);\n            }\n          }\n        ```", "```php\n    <?php\n    namespace Users\\Model;\n    use Zend\\Db\\Adapter\\Adapter;\n    use Zend\\Db\\ResultSet\\ResultSet;\n    use Zend\\Db\\TableGateway\\TableGateway;\n    class UserTable\n    {\n      protected $tableGateway;\n      public function __construct(TableGateway $tableGateway)\n      {\n        $this->tableGateway = $tableGateway;\n      }\n      public function saveUser(User $user)\n      {\n        $data = array(\n          'email' => $user->email,\n          'name'  => $user->name,\n          'password'  => $user->password,\n        );\n        $id = (int)$user->id;\n        if ($id == 0) {\n          $this->tableGateway->insert($data);\n        } else {\n          if ($this->getUser($id)) {\n            $this->tableGateway->update($data, array('id' => $id));\n          } else {\n            throw new \\Exception('User ID does not exist');\n          }\n        }\n      }\n      public function getUser($id)\n      {\n        $id  = (int) $id;\n        $rowset = $this->tableGateway->select(array('id' => $id));\n        $row = $rowset->current();\n        if (!$row) {\n          throw new \\Exception(\"Could not find row $id\");\n        }\n        return $row;\n      }\n    }\n    ```", "```php\n    protected function createUser(array $data)\n    {\n      $sm = $this->getServiceLocator();\n      $dbAdapter = $sm->get('Zend\\Db\\Adapter\\Adapter');\n      $resultSetPrototype = new \\Zend\\Db\\ResultSet\\ResultSet();\n      $resultSetPrototype->setArrayObjectPrototype(new \\Users\\Model\\User);\n      $tableGateway = new \\Zend\\Db\\TableGateway\\TableGateway('user', $dbAdapter, null, $resultSetPrototype);\n\n      $user = new User();\n      $user->exchangeArray($data);\n      $userTable = new UserTable($tableGateway);\n      $userTable->saveUser($user);\n      return true;\n    }\n    ```", "```php\n    // Create user\n    $this->createUser($form->getData());\n    ```", "```php\n    // References\n    use Zend\\Authentication\\AuthenticationService;\n    use Zend\\Authentication\\Adapter\\DbTable as DbTableAuthAdapter;\n    // Class definition\n    public function getAuthService()\n    {\n      if (! $this->authservice) {\n        $dbAdapter = $this->getServiceLocator()->get('Zend\\Db\\Adapter\\Adapter');\n        $dbTableAuthAdapter = new DbTableAuthAdapter($dbAdapter, 'user','email','password', 'MD5(?)');\n        $authService = new AuthenticationService();\n        $authService->setAdapter($dbTableAuthAdapter);\n        $this->authservice = $authService;\n      }\n      return $this->authservice;\n    }\n    ```", "```php\n    public function processAction()\n    //\n    $this->getAuthService()->getAdapter()\n                                  ->setIdentity($this->request->getPost('email'))\n                                  ->setCredential($this->request->getPost('password'));\n    $result = $this->getAuthService()->authenticate();\n    if ($result->isValid()) {\n      $this->getAuthService()->getStorage()->write($this->request->getPost('email'));\n      return $this->redirect()->toRoute(NULL , array( \n                                          'controller' => 'login', \n                                          'action' =>  'confirm' \n                                          ));\t\t\t\n    }\n    ```", "```php\n        public function confirmAction()\n        {\n      $user_email = $this->getAuthService()->getStorage()->read();\n      $viewModel  = new ViewModel(array(\n                'user_email' => $user_email \n            )); \n      return $viewModel; \n        }\n    ```", "```php\n    <section class=\"login-confirm\">\n    <h2>Login Successful</h2>\t\n    <p> Welcome!  <?php echo $this->user_email; ?> </p>\n    </section>\n    ```"]