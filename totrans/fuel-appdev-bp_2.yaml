- en: Chapter 2. Building a To-do List Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in the last chapter a few basics of the FuelPHP framework, but there
    is still a lot to learn to be comfortable with it. We will create here our first
    real-world application to dive a little bit deeper into the main FuelPHP features.
    We will create a to-do list application, a common training example when introducing
    frameworks. Again, it won't be a very complicated application, but this project
    will be used as a basis to introduce essential FuelPHP components.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you should know the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a **Entity Relationship** (**ER**) diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an profiler and how to use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `Debug` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an **Object Relational Mapper** (**ORM**) and how to use it in your
    project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the basic operations of `Model_Crud` and `Model_Orm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ORM relations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are observers and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle Ajax requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will assume here, that you have read [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, as
    the very basics of the framework have been explained there. We will also use JavaScript
    and jQuery for improving the to-do list user interface. Since this book is intended
    for intermediary web developers, we will assume you have some knowledge about
    these technologies. If this is not the case, don't worry, we will use them very
    lightly and you can find a lot of resources about these tools on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, let''s define what should be expected in our final application
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A to-do list is created to monitor the progress of a project. A project is described
    by a name and has many tasks (the to-do list). We will assume here that a user
    could have many simultaneous projects and, therefore, can create and manage as
    many projects as he/she wants. Each project can also be deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A task is described by a name and has a Boolean status ("done" or "not done").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks are ordered in the project and the user should be able to easily move
    items in the list using drag and drop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is still a simple application, and we won't support any privacy feature
    such as authentication (this will be addressed in [Chapters 3](ch03.html "Chapter 3. Building
    a Blog Application"), *Building a Blog Application* and [Chapter 5](ch05.html
    "Chapter 5. Building Your Own Restful API"), *Building Your Own Restful API*).
  prefs: []
  type: TYPE_NORMAL
- en: Conception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This step should be pretty straightforward from the specification phase. We
    will generate the following two models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project**: This model will only have a name property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task**: This model will have a name, a status, and a rank property. A project
    contains many tasks, and each task is related to a project, so we will add an
    additional column here, named `project_id`. This column will contain the ID of
    the project each task is associated with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can represent our models by the following **ER** diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conception](img/5401OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Entity Relationship diagram (Min-Max notation)
  prefs: []
  type: TYPE_NORMAL
- en: 'An **ER** diagram allows you to describe the data structure of your application.
    As you noticed, almost everything we wrote earlier can be found in the diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: The models (called entities in ER diagrams), represented by rectangles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model's properties (called attributes), represented by ellipses (primary
    keys are underlined) and linked to models using lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The relationships between models, represented by a line from a model to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We used the Min-Max notation for relations. Here is how to understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the line joining the **Project** model to the **Task** model, you can read
    **(0, N) Has many** next to the **Project** rectangle and **Belongs to (1, 1)**
    next to the **Task** rectangle. The **(0, N)** and **(1, 1)** you can read on
    the diagram represent the minimum and maximum number of elements an instance can
    be linked to: in our case, a project can be linked to any number of tasks (between
    *0* and *N*) and a task can be linked to only one project (between *1* and *1*).
    The text next to **(0, N)** and **(1, 1)** is the relation''s name. Here, we simply
    used the FuelPHP relation''s type we will use (we will explain those relations
    later in the *ORM relations* section). Even a non-programmer can understand it
    by reading it as follows: "Each project has many tasks", "Each task belongs to
    one project".'
  prefs: []
  type: TYPE_NORMAL
- en: It can be convenient to draw an ER diagram if you struggle to understand how
    you can organize your data. We will use this diagram in the upcoming chapters,
    and it is especially recommended if you want to understand a complex data structure
    with many models and relations between them. You are recommended to read more
    on the subject at [http://en.wikipedia.org/wiki/Entity-relationship_model](http://en.wikipedia.org/wiki/Entity-relationship_model).
  prefs: []
  type: TYPE_NORMAL
- en: FuelPHP installation and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You first need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a new FuelPHP instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure Apache and your host file to handle it: in this chapter, we will
    access our application by requesting the URL `http://mytodolists.app`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update Composer if necessary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new database for your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And configure FuelPHP in order to allow your application to access this database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These steps have been covered in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, so
    you might want to take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This project will also need the ORM package, and since it is already installed,
    we just need to enable it. For doing this, simply open the `APPPATH/config/config.php`
    file and insert the following at the end of the returned array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can uncomment the appropriate lines. This will load the ORM package every
    time the FuelPHP instance is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also load a package in an ad hoc manner, using the `Package::load` method.
    This will be addressed in [Chapter 3](ch03.html "Chapter 3. Building a Blog Application"),
    *Building a Blog Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now generate, as in [Chapter 1](ch01.html "Chapter 1. Building Your
    First FuelPHP Application"), *Building Your First FuelPHP Application*, the necessary
    code to handle our objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first generate the scaffold of the project model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should print the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we used `scaffold/orm` instead of `scaffold/crud` in [Chapter 1](ch01.html
    "Chapter 1. Building Your First FuelPHP Application"), *Building Your First FuelPHP
    Application*: this way, oil will generate code files that use the ORM package.
    For instance, we will see later that the generated model will extend `Orm\Model`
    instead of `Model_Crud`.'
  prefs: []
  type: TYPE_NORMAL
- en: We now need to generate the model for managing our tasks. We won't use scaffold
    here because we plan to manage tasks on the project's visualization page, so we
    only need the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should print the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can notice, we generated here only the model and the migration file.
    All you have to do now is to execute the migration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Routes configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now manage your project by requesting the URL `http://mytodolists.app/project`.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is our point of entry, we would like to access this page when requesting
    the root URL `http://mytodolists.app/`.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in [Chapter 1](ch01.html "Chapter 1. Building Your First FuelPHP Application"),
    *Building Your First FuelPHP Application*, you just need to edit the `APPPATH/config/routes.php`
    configuration file. Replace `'_root_' => 'welcome/index'` with `'_root_' => 'project/index'`.
  prefs: []
  type: TYPE_NORMAL
- en: The profiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we will need the profiler for the next section, we will introduce it here.
    FuelPHP supplies a profiler that enables you to get a sense of what is going on
    when you request a web page. It can indeed show many performance metrics, executed
    SQL requests, current logs, session, and POST / GET variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to activate it though. It is wise to only use this tool in development
    mode, since otherwise you can have serious security issues. For doing that, you
    first need to create the `APPPATH/config/development/config.php` configuration
    file and write the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to edit the `APPPATH/config/development/db.php` configuration
    file in order to see database queries (the profiler won''t show them otherwise):
    at the end of the `default` array, add `''profiling'' => true,`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you now request your root URL `http://mytodolists.app/`, you will see a
    black rectangle labeled **Code Profiler** at the bottom right of the screen. If
    you click on it, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The profiler](img/5401OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following describes the several tabs you can access:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NB Console** (**NB** being the number of logs): This tab displays all logs.
    For instance, if you add `Log::info(''Index Action'', ''This is a test'');` at
    the beginning of the index action of the Project controller and then refresh the
    web page, you should see a new item appear in this tab .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TIME Load Time** (**TIME** being the web page total load time): This tab
    displays logs associated with time markers. Note that these logs also appear in
    the first tab. For instance, if you add `Profiler::mark(''Index Action'');` at
    the beginning of the index action of the Project controller, you should see a
    new item appear in this tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NB Queries Database** (**NB** being the number of queries): This tab displays
    database queries that have been executed when loading the web page. For each query,
    its analysis and its call trace are displayed. The number of duplicates is also
    displayed, and you can spot queries that appear to duplicate a previous one by
    seeing the word **DUPLICATE** next to **Speed**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SIZE Memory Used** (**SIZE** being the amount of used memory): This tab displays
    logs associated with memory markers. Note that these logs also appear in the first
    tab. For instance, if you add `Profiler::mark_memory($this, ''Controller_Project
    object'');` at the beginning of the index action of the Project controller, you
    should see a new item appear in this tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NB Files Included** (**NB** being the number of files): This tab displays
    all files (code or configuration) that have been loaded for displaying the web
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NB Config items loaded** (**NB** being the number of items): This tab displays
    the configuration items (not the files) that have been loaded. For instance, if
    you load a configuration file that contains an associated array with 5 keys, 5
    new items will appear in this tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NB Session vars loaded**, **NB GET vars loaded**, **NB POST vars loaded**:
    These tabs display request and session variables. For instance, a new item should
    appear in the **NB GET vars loaded** tab if you request the URL `http://mytodolists.app/?param=test`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models, relations, and the ORM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have now done the preliminary steps: we installed FuelPHP, configured it,
    generated the scaffold for managing the projects, and created the task model.
    We didn''t connect the two models though, and we haven''t yet displayed tasks
    anywhere. More importantly, we haven''t explained how to load objects until now.
    This is the aim of this section.'
  prefs: []
  type: TYPE_NORMAL
- en: Differences between CRUD and ORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we explained earlier, we used oil to generate code, but instead of using
    `scaffold/crud` as in [Chapter 1](ch01.html "Chapter 1. Building Your First FuelPHP
    Application"), *Building Your First FuelPHP Application*, we used `scaffold/orm`
    and `model/orm`. If you take a look at the files (controllers, views, and models),
    you will only see minor changes, except for the model files:'
  prefs: []
  type: TYPE_NORMAL
- en: The `$_table_name` attribute is no longer declared. It is still used by `Orm\Model`
    though, but it takes a default value that depends on the model name, so you can
    still define it if you want to use a custom table name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$_properties` attribute has been added. This attribute contains all the
    properties (linked to table columns) the model has to manage. Defining this attribute
    is not compulsory, but not doing so might reduce your website performance, as
    FuelPHP will need to synchronize the model with the table structure. Note that
    `Model_Crud` also uses this attribute, but the code generated by oil simply doesn't
    define it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `$_observers` attribute has also been added. This attribute defines used
    observers and their parameters. We will explain what observers are and how to
    use them in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FuelPHP ORM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ORM stands for Object Relational Mapper. It allows developers to do the following
    two things:'
  prefs: []
  type: TYPE_NORMAL
- en: It maps table rows to objects. For doing that, the ORM provides several functions
    to extract specific table rows and transform them to PHP objects. Other methods
    also exist that allow developers to save objects to table rows. The `find` and
    the `save` methods are both examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It allows you to establish relations between models. In this chapter''s project,
    we have created two models, **Project** and **Task**, and there exists a relationship
    between them: a project can have many tasks, and each task is associated to a
    project. When defining these relations to the ORM, it will enable methods allowing
    developers to access a project''s tasks more easily for instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In short, the purpose of the ORM is to simplify the job of the developer. Beyond
    the preceding two main points, the ORM will also handle some security issues (as
    SQL injection) and handle observers that can affect how some properties are saved
    for instance. In a general manner, FuelPHP's ORM follows the active record pattern
    closely.
  prefs: []
  type: TYPE_NORMAL
- en: DB and ORM basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that most methods we are going to use here are working on `Orm/Model,`
    as well as `Model_Crud`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a PHP file that will test our code. We could have
    used the oil console here, and in most cases you should, but in this instance
    we won''t because we want to see the executed SQL requests (we plan to use the
    profiler for doing so). Please note that this file should not be pushed into production.
    Create a file located at `public/test.php` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code initializes FuelPHP (it is necessary when you have a PHP
    script in the public folder and you want to use FuelPHP features). This script
    should be accessible when requesting the following URL and should display **FuelPHP
    is initialized...**: `http://mytodolists.app/test.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: All the examples that follow must be progressively appended to the file. For
    those of you who didn't use any ORM yet, it is recommended you append the code
    inside each section, refresh, and take a deep look at the web page output and
    the executed queries in the profiler. Please note that this is just an introduction;
    to learn more about the ORM, you are recommended to read the official documentation
    at [http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Executing queries without the ORM
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You should first know that it is possible to execute a query without the ORM.
    Using it is supposed to simplify your life but it is not compulsory. In some cases,
    for instance changes affecting many rows, you should not even use the ORM. Another
    instance is when you want to empty a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating new objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following example shows how to create new projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finding specific objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is how you find the first object in a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh your web page now, you should see the following gray box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding specific objects](img/5401OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you unfold **Model_Project** by clicking on **↵**, and then **_data**, you
    should see that this is indeed the first project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding specific objects](img/5401OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you take a look at the console, you can also confirm this by seeing the
    executed SQL request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also load the last object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The executed request should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can load a project by specifying an ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can note here that no request was executed. That is because the ORM caches
    loaded objects and the project has already been loaded in a previous request.
    Otherwise, the following request should have been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Updating an object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is how we update an existing object (here, we change the name of the project
    with `id = 1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Deleting an object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can delete a project by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Loading several objects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can load several objects at once. The following example shows how we can
    load all project instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In that case, `$projects` will be an associative array of projects, the key
    being the project''s ID, and the value being the associated project. The executed
    request is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Using method chaining
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `query` method is an equivalent of the `find` method, but allows you to
    fetch objects using method chaining.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you can find all the project instances using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The executed request is the same as previously executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: More complex requests
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It is also possible to execute much more complex requests. First, let''s add
    various tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created various tasks, we will be able to test the second parameter
    of the `find` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get the first task with `project_id = 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now get all tasks with `project_id = 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to get all tasks with `project_id = 2` and `status = 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we get all tasks with `project_id > 2` and `status = 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we get tasks with `project_id > 2` or `status = 1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we get tasks that name contains the word `website`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify an order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the `query` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: You have probably noticed that using the `query` method generally allows you
    to write a much more concise and readable code. Therefore, you are recommended
    to use the `query` method for complex requests. In most cases though, using `find`
    or `query` doesn't make much difference, so use your best judgment.
  prefs: []
  type: TYPE_NORMAL
- en: As already stated, this is just a very small introduction to the ORM. There
    are many more keys other than `where` and `order_by`, and we will see some of
    those later (as the `related` key for instance). You are recommended to take a
    look at the official documentation of the ORM package at [http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also used the `Debug` and `DB` classes. Knowing them can be useful. Again,
    feel free to read their official documentation, which is available at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/debug.html](http://fuelphp.com/docs/classes/debug.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/database/db.html](http://fuelphp.com/docs/classes/database/db.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM relations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is time for us to define the relationship between tasks and projects. As
    we explained earlier, defining them activates useful features that make the job
    of the developers easy and improve performance. Relations must be defined inside
    a model. For instance, we will define a relation in the **Project** model in order
    to access each project''s tasks, and we will also define another relation in the
    **Task** model in order to access each task''s associated project. There are 4
    relation types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Belongs To**: When you define a *belongs to* relationship in model A toward
    model B, each model A''s instance can only be associated with one model B''s instance.
    You will generally need to create a column in model A''s table that will be used
    to connect instances. In this chapter, the **Task** model has a *belongs to* relationship
    with the **Project** model. Indeed, each task is associated with only one project,
    and the `project_id` column in the tasks'' table is used to connect each instance.
    A concrete example is that a task with `project_id = 1` will belong to the project
    with `id = 1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Has many**: When you define a *has many* relationship in model A toward model
    B, each model A''s instance can be associated with many model B''s instances.
    You will generally need to create a column in model B''s table that will be used
    to connect instances. In this chapter, the **Project** model has a *has many*
    relationship with the **Task** model; indeed, each project can have many tasks,
    and the `project_id` column in the tasks'' table is used to connect each instance.
    A concrete example is that a project with `id = 1` can have many tasks with `project_id
    = 1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Has one**: A way to understand this relation is to think of it as a special
    case of a has many relationship, except that each model A''s instance can be associated
    with only one model B''s instance. If we defined a *has one* relationship (instead
    of has many) in the **Project** model toward the **Task** model, we would still
    need to define the `project_id` column inside the tasks'' table, but in that case
    only a single task could be associated to each project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Many to Many**: When you define a *many to many* relationship in model A
    toward model B, each model A''s instance can be associated with many model B''s
    instances and each model B''s instance can be associated with many model A''s
    instances. In that case, you will need to create an intermediary table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are recommended to read the official documentation about relations at [http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Defining relations inside the models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that we have introduced the different types of relations, let's define them
    in our model.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open `APPPATH/classes/model/task.php` and add the following attribute
    in the `Model_Task` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this is equivalent to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first case, the `model_to`, `key_from`, and `key_to` keys are inferred
    from the array value (`''project''`). If not defined, `cascade_save` default value
    is `true` and `cascade_delete` default value is `false`. These keys define the
    following relation characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `model_to` key: The model across the relation (model B)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `key_from` key: The model''s (model A''s) column used to connect instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `key_to` key: The model across the relation''s (model B''s) column used
    to connect instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `cascade_save` key: If true, each time a model''s instance is saved, the
    related instances will also be saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `cascade_delete` key: If true, each time a model''s instance is deleted,
    the related instances will also be deleted. Beware of this feature, as you could
    end up deleting more information than you really want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, open `APPPATH/classes/model/project.php` and add the following attribute
    in the `Model_Project` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the `belongs_to` relation, it is equivalent to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Testing the relations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To better illustrate this, let's test how these relations work by appending
    code in our `public/test.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting objects' relations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: First let's load a task's instance with `id = 1`, and then its related project.
    You can notice that we set the `from_cache` parameter to `false`. This has been
    done to prevent FuelPHP to load the instance from the cache because we want to
    display all executed requests. In most cases, you are not recommended to use this
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the second line, we loaded the task's project by accessing the `project`
    attribute. This is the relation name we declared in the `Model_Task` class. In
    a general manner, if you want to access a related instance through the relation
    `RELATION_NAME`, you can get it using `$item->RELATION_NAME`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that the following two requests were executed:'
  prefs: []
  type: TYPE_NORMAL
- en: The first request was executed in the `find` method in order to load the task
    with `id = 1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request was executed when getting `$task->project`: in this case
    the project with `id = $task->project_id` was retrieved:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s load a project''s instance with `id = 2`, and then its related tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Two requests have been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the project''s instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the project''s associated tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When relations are defined, the `find` method allows you to improve performance
    by reducing the number of SQL requests. For instance, if you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Three requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One for loading all the projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Two for loading `$project->tasks` for each project in `$projects`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Three requests don't seem a lot, but if you load 100 projects this means that
    you will execute 101 requests and this can lead to serious performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `find` method allows you to address this issue through the `related` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Here, only one request has been executed. The FuelPHP's ORM has loaded the relation
    when executing the find method by joining the tasks' table in the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executed request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Updating objects' relations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If you want to update a relation, you can simply update the column supporting
    it. For instance, the following code loads the task with `id = 1` and makes it
    belong to the project with `id = 3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Two requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second updates the `project_id` column of the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Though it executes more SQL requests, we could also have written the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Four requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the task (executed by `Model_Task::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the project we want to associate to the task (executed
    by `Model_Project::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third request loads the existing project associated to the task (executed
    by `$task->project`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fourth request updates the `project_id` column of the task (executed by
    `$task->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is also possible to affect a new project to a task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In that case, the ORM will create a new project and then assign the correct
    ID to the `project_id` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Four requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the task (executed by `Model_Task::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the existing project associated to the task (executed
    by `$task->project`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third request creates the new project (executed by `$task->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fourth request updates the `project_id` column of the task (executed by
    `$task->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, it is possible to affect a new task to a project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Three requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third request creates the new task (executed by `$project->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you take a precise look at `$project->tasks`, you will notice that it is
    an associated array, the keys being the instances ID and the values being the
    instances. Thus, this is how you can update a specific task through relations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: It will change the name of the task with `id = 6` to `'Buy an optical mouse'`
    (if this task exists and its `project_id` is equal to 2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Three requests will be executed, which are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third request updates the task''s `name` column (executed by `$project->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is also possible to disconnect two related items. This example is not adapted
    or useful for our project, but it is important to know that you can do this. Let''s
    try to disconnect the task with `id = 4` from the project with `id = 3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Executed requests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third request attempts to disconnect the task with `id = 4` from the project
    (executed by `$project->save()`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you take a look at the executed requests, this code is not adapted to our
    project because:'
  prefs: []
  type: TYPE_NORMAL
- en: For it to correctly work, we should allow the `project_id` column to be null,
    and that isn't the case right now
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our application, a task belonging to no project would make no sense
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other cases, doing that can be legitimate though. Again, this is only a short
    introduction to the ORM's relations, and you are recommended to read the official
    documentation at [http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Observers and events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have probably noticed in the previous section that, when saving an object,
    some additional values were saved in the `created_at` and `updated_at` columns
    without us specifying anything. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'This happens because of the observers defined in the models. Observers override
    some model behaviors; for example, they can change properties'' values before
    committing the changes to the database, or prevent the object from being saved
    if some conditions are met. Let''s take a look at the observers defined in `Model_Project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'You can notice that two observers are defined: `Orm\Observer_CreatedAt` and
    `Orm\Observer_UpdatedAt`. They handle the `created_at` and `updated_at` columns,
    respectively, setting their value to the current timestamp when the object is
    created or updated. Observers can have custom parameters such as `mysql_timestamp`,
    which defines if a MySQL timestamp is saved instead of a UNIX one.'
  prefs: []
  type: TYPE_NORMAL
- en: The `events` parameter is common to all observers and defines which events they
    should be connected to. Events are methods called in behaviors when something
    happens to an object; for instance, when you save an object, the ORM will try
    to call its behaviors' `before_save` method before changes are committed to the
    database. There are several events, such as `after_create` or `after_save`. You
    can read the full descriptive list in the official documentation at [http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names](http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names)
  prefs: []
  type: TYPE_NORMAL
- en: In order to learn more, you are also recommended to read the introduction to
    observers in the official documentation at [http://fuelphp.com/docs/packages/orm/observers/intro.html](http://fuelphp.com/docs/packages/orm/observers/intro.html)
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of the to-do list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we explained the essential ORM features and implemented our relations,
    it is finally time to build our to-do list. This section assumes you have executed
    the complete `public/test.php` script at least once.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the user to see and change tasks' status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will display the associated tasks when viewing a project''s details.
    For instance, this web page should display all tasks of project with `id = 2`
    after the project''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://mytodolists.app/project/view/2`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, we can, as we did in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, dissect
    the URL and deduce that, in this case, the view action of the **Project** controller
    is executed. The action displays `project/view`; thus, we have to edit `APPPATH/views/project/view.php`.
    Add the following code under the first paragraph displaying the project''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The `render(...)` method is an alias for `View::forge(...)->render()`, and
    thus the preceding code displays the `task/list` view. Create the `APPPATH/views/task/list.php`
    view file (you have to create the `task` folder) and set its content to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'This code should be pretty straightforward; it displays an HTML list of the
    project''s tasks. Each item displays the name in a label linked to a checkbox
    displaying its status. We can make the two following observations:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined the `data-project_id` attribute inside the `ul` element. It will
    be later used by our JavaScript code to easily retrieve the project's ID. The
    same goes for the `data-task_id` attribute for each checkbox.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can notice we printed `$task->name` without escaping the string. You could
    think that this is a security breach because `$task->name` could contain HTML
    tags such as the `<script>` tag and therefore would be prone to XSS injections.
    However, it isn't because when you use the `View::forge` method, all parameters
    (even model properties) are, by default, processed (escaped) to prevent such security
    flaws. You can disable this behavior though (we will see in [Chapter 3](ch03.html
    "Chapter 3. Building a Blog Application"), *Building a Blog Application*, that
    sometimes we have to), and in that case FuelPHP provides the `e` method to manually
    escape variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended to separate your views into small view files, each displaying
    a specific area of your web page. We just did it by creating an additional view
    for displaying the task lists. We could have gone even further by creating a view
    file that displays a single task and then rendering it for each item in the tasks'
    list.
  prefs: []
  type: TYPE_NORMAL
- en: We can now see our to-do items. But if we click on our checkboxes, it doesn't
    synchronize with our server, and if we refresh our web page, we can see that items
    are back to their old status. We will use a bit of JavaScript and jQuery in order
    to synchronize the checkboxes with the website.
  prefs: []
  type: TYPE_NORMAL
- en: Create a JavaScript file at `public/assets/js/website.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first have to include it in the template. Open `APPPATH/views/template.php`
    and add before the end of the `head` tag the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code includes three JavaScript files into the template:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two lines are the jQuery and jQuery UI scripts that we will need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third one is the script containing our JavaScript code. Note that you didn't
    have to write the complete path. The `Asset::js` method automatically searches
    for the file in the `public/assets/js` folder. You should know it is possible
    to specify additional directories to search JavaScript and CSS files using the
    `Asset::add_path` method if necessary. You are recommended to read the official
    documentation at [http://fuelphp.com/docs/classes/asset/usage.html](http://fuelphp.com/docs/classes/asset/usage.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we will need to know our base URL in our JavaScript code in order to send
    AJAX requests, add the following just before the code we previously added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'This code creates a JavaScript variable named `uriBase` containing the base
    URL obtained from `Uri::base()` and encoded to a JavaScript string by `Format::forge(...)->to_json()`.
    You are recommended to read the official documentation about these classes at
    the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/uri.html](http://fuelphp.com/docs/classes/uri.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/classes/format.html](http://fuelphp.com/docs/classes/format.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This `uriBase` variable was implemented for those of you that created your
    project inside your webserver root directory without using virtual hosts: in that
    case, sending AJAX requests using only relative URLs will cause issues. An alternative
    is to use the base HTML tag, as we will see in [Chapter 5](ch05.html "Chapter 5. Building
    Your Own Restful API"), *Building Your Own RESTful API*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our JavaScript file and its dependencies are included in the template,
    we have to implement the checkbox synchronization. Open the JavaScript file we
    created earlier at `public/assets/js/website.js` and set its content to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'For those unfamiliar with jQuery, the code does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: When the document DOM is ready, the script will look for checkboxes inside our
    to-do list and track their changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a checkbox is changed, it sends a `POST` request to the `project/change_task_status`
    action with the task's ID and its new status.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not handle errors; if there is a connection problem, the user will think
    the web page is synchronized with the server though it isn't. It could be an axis
    of improvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we have to handle this request on the server side, so we need to create
    the `change_task_status` action inside the **Project** controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, for the sake of simplicity, we decided to create the action in the
    **Project** controller, though it handles tasks and should therefore be created
    inside a **Task** controller. For your real projects, it is highly recommended
    not to do this. It is easy to fall into the trap of having a single controller
    handling your whole website, and though for small projects it might be 'OK', you
    will have serious maintainability issues as your features add up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Project** controller and add the following action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: You can notice we used `Input::post` instead of the `$_POST` global variable;
    it gets the same value, except you can define a default value in the second parameter
    of `Input::post` in case the key is not defined. The same applies for `Input::get`
    and `$_GET`.
  prefs: []
  type: TYPE_NORMAL
- en: We also checked using `Input::is_ajax` if it is an Ajax request. Note though
    there is no safe ways to detect if the request was made via Ajax (never trust
    data coming from the client).
  prefs: []
  type: TYPE_NORMAL
- en: The synchronization should now work; any status change should be saved and preserved
    if you refresh the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the user to add tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can see and change the status of projects' tasks, it could be useful
    to add new ones. We will add a form for doing that under the to-do list.
  prefs: []
  type: TYPE_NORMAL
- en: 'First open `APPPATH/views/task/list.php` and add, at the end, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a view file located at `APPPATH/views/task/create.php` and set
    its content to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Nothing spectacular here, we just display a form with a text input (for the
    task title) and a **Create** button. We use the `Form` class for doing that, but
    we could have written that in HTML code as well. For more detail about this class,
    you are recommended to read the official documentation at [http://fuelphp.com/docs/classes/form.html](http://fuelphp.com/docs/classes/form.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that no parameter was passed to `Form::open`; the consequence is that
    the form will submit information to the current URL (and that is how we will know
    which project the new task must be associated with). Thus, we have to handle the
    form in the view action of the **Project** controller. Inside the action, add
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: If you read the comments, the changes we made should be pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing the user to change tasks' order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Return back to the JavaScript file located at `public/assets/js/website.js`,
    and add at the end of the `$(document).ready` callback method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you request a project view page, you should be able to change the tasks'
    order by dragging the labels. This is done using the `sortable` method. The `disableSelection`
    method prevents the user from selecting text inside the list, because it can sometimes
    cause user interface issues when dragging an item.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the order is not synchronized, so if you refresh the web page, your
    custom order will be forgotten. In order to save the changes, replace `$todoList.sortable()`;
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: For more information, you are recommended to read the official documentation
    of the `sortable` method of jQuery UI at [http://api.jqueryui.com/sortable/](http://api.jqueryui.com/sortable/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have to handle requests sent to the `change_tasks_order` action of the
    **Project** controller. Add the following method to the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'And, in the view action, replace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'If you check the task''s table, the tasks'' rank column is now updated when
    dragging tasks to new positions. But if you refresh the web page, the order is
    still lost; this is because we don''t sort the project''s tasks when we display
    them. In order to do that, replace the following inside the view action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: As explained in the previous section, the `related` key allows the developer
    to load relations when retrieving objects. More than allowing you to improve your
    website's performance, it also allows you to sort or add conditions to your relations.
    You even can add again a `related` key to load your relations' relations.
  prefs: []
  type: TYPE_NORMAL
- en: Axis of improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many features can still be added to the application. You can implement them
    to improve your skill:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow the user to delete a task. This could be done by adding a delete icon
    next to each task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a dashboard to give the user a general overview of the project and their
    remaining tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the visual interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A bit trickier: add support for a multiuser environment. What happens if two
    users change the tasks order at the same time for instance? How to prevent loss
    of information?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have built our first real project and learnt to use important
    FuelPHP features such as the ORM and debugging tools. You should begin to feel
    confident about implementing simple projects. In the next chapter, we are going
    to use more advanced FuelPHP features such as modules and presenters.
  prefs: []
  type: TYPE_NORMAL
