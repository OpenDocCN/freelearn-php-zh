- en: Chapter 2. Building a To-do List Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 构建待办事项列表应用程序
- en: We saw in the last chapter a few basics of the FuelPHP framework, but there
    is still a lot to learn to be comfortable with it. We will create here our first
    real-world application to dive a little bit deeper into the main FuelPHP features.
    We will create a to-do list application, a common training example when introducing
    frameworks. Again, it won't be a very complicated application, but this project
    will be used as a basis to introduce essential FuelPHP components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了FuelPHP框架的一些基础知识，但还有许多东西需要学习才能感到舒适。在这里，我们将创建我们的第一个真实世界应用程序，以便更深入地了解FuelPHP的主要功能。我们将创建一个待办事项列表应用程序，这是介绍框架时的常见训练示例。再次强调，这不会是一个非常复杂的应用程序，但这个项目将作为介绍FuelPHP基本组件的基础。
- en: 'By the end of this chapter, you should know the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该了解以下内容：
- en: What is a **Entity Relationship** (**ER**) diagram
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体关系图**（**ER**）是什么'
- en: What is an profiler and how to use it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析器是什么以及如何使用它
- en: How to use the `Debug` class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`Debug`类
- en: What is an **Object Relational Mapper** (**ORM**) and how to use it in your
    project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系映射器**（**ORM**）是什么以及如何在项目中使用它'
- en: How to use the basic operations of `Model_Crud` and `Model_Orm`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`Model_Crud`和`Model_Orm`的基本操作
- en: The ORM relations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ORM关系
- en: What are observers and how to use them
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者是什么以及如何使用它们
- en: How to handle Ajax requests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理Ajax请求
- en: We will assume here, that you have read [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, as
    the very basics of the framework have been explained there. We will also use JavaScript
    and jQuery for improving the to-do list user interface. Since this book is intended
    for intermediary web developers, we will assume you have some knowledge about
    these technologies. If this is not the case, don't worry, we will use them very
    lightly and you can find a lot of resources about these tools on the web.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里假设你已经阅读了[第1章](ch01.html "第1章. 构建你的第一个FuelPHP应用程序")，*构建你的第一个FuelPHP应用程序*，因为框架的基本内容已经在那里解释过了。我们还将使用JavaScript和jQuery来改进待办事项列表的用户界面。由于本书面向中级网络开发者，我们假设你对这些技术有一定的了解。如果不是这样，不要担心，我们将非常轻量地使用它们，你可以在网上找到大量关于这些工具的资源。
- en: Specifications
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规范
- en: 'First of all, let''s define what should be expected in our final application
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义我们的最终应用程序应该期望的内容如下：
- en: A to-do list is created to monitor the progress of a project. A project is described
    by a name and has many tasks (the to-do list). We will assume here that a user
    could have many simultaneous projects and, therefore, can create and manage as
    many projects as he/she wants. Each project can also be deleted.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个待办事项列表来监控项目的进度。一个项目通过名称描述，并具有许多任务（待办事项列表）。我们在这里假设用户可能有多个同时进行的项目，因此可以创建和管理尽可能多的项目。每个项目也可以被删除。
- en: A task is described by a name and has a Boolean status ("done" or "not done").
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个任务通过名称和布尔状态（“完成”或“未完成”）来描述。
- en: Tasks are ordered in the project and the user should be able to easily move
    items in the list using drag and drop.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务在项目中排序，并且用户应该能够通过拖放轻松地在列表中移动项目。
- en: This is still a simple application, and we won't support any privacy feature
    such as authentication (this will be addressed in [Chapters 3](ch03.html "Chapter 3. Building
    a Blog Application"), *Building a Blog Application* and [Chapter 5](ch05.html
    "Chapter 5. Building Your Own Restful API"), *Building Your Own Restful API*).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然是一个简单的应用程序，我们不会支持任何隐私功能，例如身份验证（这将在[第3章](ch03.html "第3章. 构建博客应用程序")，*构建博客应用程序*和[第5章](ch05.html
    "第5章. 构建你自己的RESTful API")，*构建你自己的RESTful API*中解决）。
- en: Conception
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念
- en: 'This step should be pretty straightforward from the specification phase. We
    will generate the following two models:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤应该从规范阶段开始非常直接。我们将生成以下两个模型：
- en: '**Project**: This model will only have a name property.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：此模型将只具有一个名称属性。'
- en: '**Task**: This model will have a name, a status, and a rank property. A project
    contains many tasks, and each task is related to a project, so we will add an
    additional column here, named `project_id`. This column will contain the ID of
    the project each task is associated with.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：此模型将具有名称、状态和排名属性。一个项目包含许多任务，每个任务都与一个项目相关联，因此我们将在这里添加一个额外的列，命名为`project_id`。此列将包含与每个任务关联的项目的ID。'
- en: 'We can represent our models by the following **ER** diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下**ER**图来表示我们的模型：
- en: '![Conception](img/5401OS_02_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![概念](img/5401OS_02_01.jpg)'
- en: Entity Relationship diagram (Min-Max notation)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实体关系图（最小-最大表示法）
- en: 'An **ER** diagram allows you to describe the data structure of your application.
    As you noticed, almost everything we wrote earlier can be found in the diagram:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 **ER** 图可以帮助你描述应用程序的数据结构。正如你所注意到的，我们之前写的几乎所有内容都可以在图中找到：
- en: The models (called entities in ER diagrams), represented by rectangles
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型（在 ER 图中称为实体），由矩形表示
- en: The model's properties (called attributes), represented by ellipses (primary
    keys are underlined) and linked to models using lines
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的属性（称为属性），由省略号表示（主键被下划线标注）并通过线与模型相连
- en: The relationships between models, represented by a line from a model to another
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型之间的关系，由一个模型到另一个模型的线表示
- en: 'We used the Min-Max notation for relations. Here is how to understand it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了最小-最大表示法来表示关系。以下是理解它的方法：
- en: 'On the line joining the **Project** model to the **Task** model, you can read
    **(0, N) Has many** next to the **Project** rectangle and **Belongs to (1, 1)**
    next to the **Task** rectangle. The **(0, N)** and **(1, 1)** you can read on
    the diagram represent the minimum and maximum number of elements an instance can
    be linked to: in our case, a project can be linked to any number of tasks (between
    *0* and *N*) and a task can be linked to only one project (between *1* and *1*).
    The text next to **(0, N)** and **(1, 1)** is the relation''s name. Here, we simply
    used the FuelPHP relation''s type we will use (we will explain those relations
    later in the *ORM relations* section). Even a non-programmer can understand it
    by reading it as follows: "Each project has many tasks", "Each task belongs to
    one project".'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接 **Project** 模型和 **Task** 模型的线上，你可以看到 **Project** 矩形旁边写着 **(0, N) Has many**，而
    **Task** 矩形旁边写着 **Belongs to (1, 1)**。图上你可以读到的 **(0, N)** 和 **(1, 1)** 代表了一个实例可以链接的最小和最大元素数量：在我们的例子中，一个项目可以链接到任意数量的任务（介于
    *0* 和 *N* 之间），而一个任务只能链接到一个项目（介于 *1* 和 *1* 之间）。**(0, N)** 和 **(1, 1)** 旁边的文本是关系的名称。在这里，我们简单地使用了我们将要使用的
    FuelPHP 关系类型（我们将在 *ORM 关系* 部分解释这些关系）。即使是非程序员也可以通过以下方式阅读它：“每个项目都有多个任务”，“每个任务属于一个项目”。
- en: It can be convenient to draw an ER diagram if you struggle to understand how
    you can organize your data. We will use this diagram in the upcoming chapters,
    and it is especially recommended if you want to understand a complex data structure
    with many models and relations between them. You are recommended to read more
    on the subject at [http://en.wikipedia.org/wiki/Entity-relationship_model](http://en.wikipedia.org/wiki/Entity-relationship_model).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你难以理解如何组织你的数据，画一个 ER 图可能很有用。我们将在接下来的章节中使用这个图，如果你想要理解具有许多模型及其之间关系的复杂数据结构，特别推荐你阅读。建议你在此主题上阅读更多内容，请参阅
    [http://en.wikipedia.org/wiki/Entity-relationship_model](http://en.wikipedia.org/wiki/Entity-relationship_model)。
- en: FuelPHP installation and configuration
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FuelPHP的安装和配置
- en: 'You first need to:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要：
- en: Install a new FuelPHP instance
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个新的FuelPHP实例
- en: 'Configure Apache and your host file to handle it: in this chapter, we will
    access our application by requesting the URL `http://mytodolists.app`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Apache和你的主机文件以处理它：在本章中，我们将通过请求 URL `http://mytodolists.app` 来访问我们的应用程序
- en: Update Composer if necessary
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有必要，更新Composer
- en: Create a new database for your application
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的应用程序创建一个新的数据库
- en: And configure FuelPHP in order to allow your application to access this database
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并配置FuelPHP以允许你的应用程序访问此数据库
- en: These steps have been covered in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, so
    you might want to take a look at it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤已在 [第1章](ch01.html "第1章. 构建你的第一个FuelPHP应用程序")，*构建你的第一个FuelPHP应用程序* 中介绍，所以你可能想看看它。
- en: 'This project will also need the ORM package, and since it is already installed,
    we just need to enable it. For doing this, simply open the `APPPATH/config/config.php`
    file and insert the following at the end of the returned array:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目还需要 ORM 包，由于它已经安装，我们只需要启用它。为此，只需打开 `APPPATH/config/config.php` 文件，并在返回数组的末尾插入以下内容：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Or you can uncomment the appropriate lines. This will load the ORM package every
    time the FuelPHP instance is loaded.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以取消注释适当的行。这将每次加载 FuelPHP 实例时都加载 ORM 包。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also load a package in an ad hoc manner, using the `Package::load` method.
    This will be addressed in [Chapter 3](ch03.html "Chapter 3. Building a Blog Application"),
    *Building a Blog Application*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `Package::load` 方法以临时方式加载一个包。这将在 [第3章](ch03.html "第3章. 构建博客应用程序")，*构建博客应用程序*
    中介绍。
- en: Scaffolding
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚手架
- en: We will now generate, as in [Chapter 1](ch01.html "Chapter 1. Building Your
    First FuelPHP Application"), *Building Your First FuelPHP Application*, the necessary
    code to handle our objects.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将生成，正如在[第1章](ch01.html "第1章. 构建你的第一个FuelPHP应用程序")中看到的，*构建你的第一个FuelPHP应用程序*，处理我们的对象所需的必要代码。
- en: 'Let''s first generate the scaffold of the project model:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先生成项目模型的结构：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command should print the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应打印以下输出：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that we used `scaffold/orm` instead of `scaffold/crud` in [Chapter 1](ch01.html
    "Chapter 1. Building Your First FuelPHP Application"), *Building Your First FuelPHP
    Application*: this way, oil will generate code files that use the ORM package.
    For instance, we will see later that the generated model will extend `Orm\Model`
    instead of `Model_Crud`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在[第1章](ch01.html "第1章. 构建你的第一个FuelPHP应用程序")中使用了`scaffold/orm`而不是`scaffold/crud`：这样，Oil将生成使用ORM包的代码文件。例如，我们将在后面看到生成的模型将扩展`Orm\Model`而不是`Model_Crud`。
- en: We now need to generate the model for managing our tasks. We won't use scaffold
    here because we plan to manage tasks on the project's visualization page, so we
    only need the model.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要生成管理我们的任务所需的模型。我们在这里不会使用scaffold，因为我们计划在项目的可视化页面上管理任务，所以我们只需要模型。
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command should print the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应打印以下输出：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can notice, we generated here only the model and the migration file.
    All you have to do now is to execute the migration files:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在这里只生成了模型和迁移文件。你现在需要做的就是执行迁移文件：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Routes configuration
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由配置
- en: You can now manage your project by requesting the URL `http://mytodolists.app/project`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过请求URL `http://mytodolists.app/project`来管理你的项目。
- en: Since this is our point of entry, we would like to access this page when requesting
    the root URL `http://mytodolists.app/`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是我们的人口点，我们希望在请求根URL `http://mytodolists.app/`时访问此页面。
- en: As we saw in [Chapter 1](ch01.html "Chapter 1. Building Your First FuelPHP Application"),
    *Building Your First FuelPHP Application*, you just need to edit the `APPPATH/config/routes.php`
    configuration file. Replace `'_root_' => 'welcome/index'` with `'_root_' => 'project/index'`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](ch01.html "第1章. 构建你的第一个FuelPHP应用程序")中看到的，*构建你的第一个FuelPHP应用程序*，你只需要编辑`APPPATH/config/routes.php`配置文件。将`'_root_'
    => 'welcome/index'`替换为`'_root_' => 'project/index'`。
- en: The profiler
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析器
- en: Since we will need the profiler for the next section, we will introduce it here.
    FuelPHP supplies a profiler that enables you to get a sense of what is going on
    when you request a web page. It can indeed show many performance metrics, executed
    SQL requests, current logs, session, and POST / GET variables.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在下一节需要分析器，所以我们在这里介绍它。FuelPHP提供了一个分析器，它允许你在请求网页时了解正在发生的事情。它确实可以显示许多性能指标、执行的SQL请求、当前日志、会话以及POST
    / GET变量。
- en: 'You will need to activate it though. It is wise to only use this tool in development
    mode, since otherwise you can have serious security issues. For doing that, you
    first need to create the `APPPATH/config/development/config.php` configuration
    file and write the following content:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要激活它。在开发模式下仅使用此工具是明智的，因为否则可能会出现严重的安全问题。为此，你首先需要创建`APPPATH/config/development/config.php`配置文件，并写入以下内容：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You also need to edit the `APPPATH/config/development/db.php` configuration
    file in order to see database queries (the profiler won''t show them otherwise):
    at the end of the `default` array, add `''profiling'' => true,`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要编辑`APPPATH/config/development/db.php`配置文件，以便查看数据库查询（否则分析器不会显示它们）：在`default`数组的末尾添加`'profiling'
    => true,`。
- en: 'If you now request your root URL `http://mytodolists.app/`, you will see a
    black rectangle labeled **Code Profiler** at the bottom right of the screen. If
    you click on it, you should see the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在请求你的根URL `http://mytodolists.app/`，你将在屏幕的右下角看到一个标记为**代码分析器**的黑色矩形。如果你点击它，你应该看到以下内容：
- en: '![The profiler](img/5401OS_02_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![分析器](img/5401OS_02_02.jpg)'
- en: 'The following describes the several tabs you can access:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述了你可以访问的几个标签页：
- en: '**NB Console** (**NB** being the number of logs): This tab displays all logs.
    For instance, if you add `Log::info(''Index Action'', ''This is a test'');` at
    the beginning of the index action of the Project controller and then refresh the
    web page, you should see a new item appear in this tab .'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意控制台**（**NB**代表日志数量）：此标签页显示所有日志。例如，如果你在项目控制器的索引操作开始处添加`Log::info(''Index
    Action'', ''This is a test'');`，然后刷新网页，你应该在这个标签页中看到一个新条目出现。'
- en: '**TIME Load Time** (**TIME** being the web page total load time): This tab
    displays logs associated with time markers. Note that these logs also appear in
    the first tab. For instance, if you add `Profiler::mark(''Index Action'');` at
    the beginning of the index action of the Project controller, you should see a
    new item appear in this tab.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TIME 加载时间**（**TIME** 表示网页总加载时间）：此选项卡显示与时间标记相关的日志。请注意，这些日志也出现在第一个选项卡中。例如，如果你在项目控制器的索引动作的开始处添加
    `Profiler::mark(''Index Action'');`，你应该会看到此选项卡中出现一个新项目。'
- en: '**NB Queries Database** (**NB** being the number of queries): This tab displays
    database queries that have been executed when loading the web page. For each query,
    its analysis and its call trace are displayed. The number of duplicates is also
    displayed, and you can spot queries that appear to duplicate a previous one by
    seeing the word **DUPLICATE** next to **Speed**.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NB 查询数据库**（**NB** 表示查询数量）：此选项卡显示在加载网页时执行的数据库查询。对于每个查询，其分析和调用跟踪都会显示。还会显示重复次数，你可以通过查看
    **Speed** 旁边的 **DUPLICATE** 单词来识别似乎重复前一个查询的查询。'
- en: '**SIZE Memory Used** (**SIZE** being the amount of used memory): This tab displays
    logs associated with memory markers. Note that these logs also appear in the first
    tab. For instance, if you add `Profiler::mark_memory($this, ''Controller_Project
    object'');` at the beginning of the index action of the Project controller, you
    should see a new item appear in this tab.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SIZE 内存使用量**（**SIZE** 表示使用的内存量）：此选项卡显示与内存标记相关的日志。请注意，这些日志也出现在第一个选项卡中。例如，如果你在项目控制器的索引动作的开始处添加
    `Profiler::mark_memory($this, ''Controller_Project 对象'');`，你应该会看到此选项卡中出现一个新项目。'
- en: '**NB Files Included** (**NB** being the number of files): This tab displays
    all files (code or configuration) that have been loaded for displaying the web
    page.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NB 包含的文件**（**NB** 表示文件数量）：此选项卡显示为显示网页而加载的所有文件（代码或配置）。'
- en: '**NB Config items loaded** (**NB** being the number of items): This tab displays
    the configuration items (not the files) that have been loaded. For instance, if
    you load a configuration file that contains an associated array with 5 keys, 5
    new items will appear in this tab.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NB 配置项已加载**（**NB** 表示项目数量）：此选项卡显示已加载的配置项（而非文件）。例如，如果你加载一个包含5个键的关联数组的配置文件，此选项卡中将出现5个新项目。'
- en: '**NB Session vars loaded**, **NB GET vars loaded**, **NB POST vars loaded**:
    These tabs display request and session variables. For instance, a new item should
    appear in the **NB GET vars loaded** tab if you request the URL `http://mytodolists.app/?param=test`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NB 会话变量已加载**，**NB GET 变量已加载**，**NB POST 变量已加载**：这些选项卡显示请求和会话变量。例如，如果你请求 `http://mytodolists.app/?param=test`，**NB
    GET 变量已加载** 选项卡中应该会出现一个新项目。'
- en: Models, relations, and the ORM
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型、关系和 ORM
- en: 'We have now done the preliminary steps: we installed FuelPHP, configured it,
    generated the scaffold for managing the projects, and created the task model.
    We didn''t connect the two models though, and we haven''t yet displayed tasks
    anywhere. More importantly, we haven''t explained how to load objects until now.
    This is the aim of this section.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了初步步骤：我们安装了FuelPHP，进行了配置，生成了用于管理项目的脚手架，并创建了任务模型。但我们没有连接这两个模型，我们还没有在任何地方显示任务。更重要的是，我们还没有解释如何加载对象，直到现在。本节的目标就是这一点。
- en: Differences between CRUD and ORM
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD 和 ORM 之间的区别
- en: 'As we explained earlier, we used oil to generate code, but instead of using
    `scaffold/crud` as in [Chapter 1](ch01.html "Chapter 1. Building Your First FuelPHP
    Application"), *Building Your First FuelPHP Application*, we used `scaffold/orm`
    and `model/orm`. If you take a look at the files (controllers, views, and models),
    you will only see minor changes, except for the model files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所述，我们使用油来生成代码，但与[第1章](ch01.html "第1章。构建您的第一个FuelPHP应用程序")中使用的 `scaffold/crud`
    不同，我们使用了 `scaffold/orm` 和 `model/orm`。如果你查看文件（控制器、视图和模型），你将只会看到一些细微的变化，除了模型文件：
- en: The `$_table_name` attribute is no longer declared. It is still used by `Orm\Model`
    though, but it takes a default value that depends on the model name, so you can
    still define it if you want to use a custom table name.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_table_name` 属性不再声明。尽管如此，它仍然被 `Orm\Model` 使用，但它采用一个默认值，该值取决于模型名称，因此如果你想要使用自定义表名，你仍然可以定义它。'
- en: The `$_properties` attribute has been added. This attribute contains all the
    properties (linked to table columns) the model has to manage. Defining this attribute
    is not compulsory, but not doing so might reduce your website performance, as
    FuelPHP will need to synchronize the model with the table structure. Note that
    `Model_Crud` also uses this attribute, but the code generated by oil simply doesn't
    define it.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加`$_properties`属性。此属性包含模型必须管理的所有属性（与表列相关联）。定义此属性不是强制性的，但如果不这样做可能会降低网站性能，因为FuelPHP需要将模型与表结构同步。请注意，`Model_Crud`也使用此属性，但油生成的代码简单地没有定义它。
- en: The `$_observers` attribute has also been added. This attribute defines used
    observers and their parameters. We will explain what observers are and how to
    use them in the next section.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还添加了`$_observers`属性。此属性定义了使用的观察者和它们的参数。我们将在下一节中解释观察者是什么以及如何使用它们。
- en: The FuelPHP ORM
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FuelPHP ORM
- en: 'ORM stands for Object Relational Mapper. It allows developers to do the following
    two things:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ORM代表对象关系映射器。它允许开发者完成以下两件事：
- en: It maps table rows to objects. For doing that, the ORM provides several functions
    to extract specific table rows and transform them to PHP objects. Other methods
    also exist that allow developers to save objects to table rows. The `find` and
    the `save` methods are both examples.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将表行映射到对象。为此，ORM提供了几个函数来提取特定的表行并将它们转换为PHP对象。其他方法也存在，允许开发者将对象保存到表行中。`find`和`save`方法都是例子。
- en: 'It allows you to establish relations between models. In this chapter''s project,
    we have created two models, **Project** and **Task**, and there exists a relationship
    between them: a project can have many tasks, and each task is associated to a
    project. When defining these relations to the ORM, it will enable methods allowing
    developers to access a project''s tasks more easily for instance.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许你在模型之间建立关系。在本章的项目中，我们创建了两个模型，**项目**和**任务**，它们之间存在一种关系：一个项目可以有多个任务，每个任务都与一个项目相关联。当将这些关系定义给ORM时，它将启用方法，使开发者能够更轻松地访问项目任务，例如。
- en: In short, the purpose of the ORM is to simplify the job of the developer. Beyond
    the preceding two main points, the ORM will also handle some security issues (as
    SQL injection) and handle observers that can affect how some properties are saved
    for instance. In a general manner, FuelPHP's ORM follows the active record pattern
    closely.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，ORM（对象关系映射）的目的在于简化开发者的工作。除了前面提到的两个主要点之外，ORM还将处理一些安全问题（例如SQL注入）以及可能影响某些属性保存方式的观察者。一般来说，FuelPHP的ORM紧密遵循活动记录模式。
- en: DB and ORM basics
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库和ORM基础
- en: Note that most methods we are going to use here are working on `Orm/Model,`
    as well as `Model_Crud`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将要使用的大多数方法都是在`Orm/Model`以及`Model_Crud`上工作的。
- en: 'First, we need to create a PHP file that will test our code. We could have
    used the oil console here, and in most cases you should, but in this instance
    we won''t because we want to see the executed SQL requests (we plan to use the
    profiler for doing so). Please note that this file should not be pushed into production.
    Create a file located at `public/test.php` with the following content:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个PHP文件来测试我们的代码。在这里，我们可以使用油控制台，在大多数情况下你应该这样做，但在这个例子中我们不会这样做，因为我们想看到执行的SQL请求（我们计划使用分析器来完成这项工作）。请注意，此文件不应推送到生产环境中。创建一个位于`public/test.php`的文件，内容如下：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code initializes FuelPHP (it is necessary when you have a PHP
    script in the public folder and you want to use FuelPHP features). This script
    should be accessible when requesting the following URL and should display **FuelPHP
    is initialized...**: `http://mytodolists.app/test.php`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码初始化了FuelPHP（当你有一个位于公共文件夹中的PHP脚本并且你想使用FuelPHP功能时是必要的）。此脚本应在请求以下URL时可用，并应显示**FuelPHP已初始化...**：`http://mytodolists.app/test.php`。
- en: All the examples that follow must be progressively appended to the file. For
    those of you who didn't use any ORM yet, it is recommended you append the code
    inside each section, refresh, and take a deep look at the web page output and
    the executed queries in the profiler. Please note that this is just an introduction;
    to learn more about the ORM, you are recommended to read the official documentation
    at [http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的所有示例都必须逐个追加到文件中。对于那些还没有使用任何ORM的您，建议您在每个部分内追加代码，刷新，并深入查看网页输出和性能分析器中的执行查询。请注意，这只是一个介绍；要了解更多关于ORM的信息，建议您阅读官方文档[http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html)。
- en: Executing queries without the ORM
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不使用ORM执行查询
- en: 'You should first know that it is possible to execute a query without the ORM.
    Using it is supposed to simplify your life but it is not compulsory. In some cases,
    for instance changes affecting many rows, you should not even use the ORM. Another
    instance is when you want to empty a table:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先应该知道，您可以在不使用ORM的情况下执行查询。使用ORM是为了简化您的生活，但它不是强制性的。在某些情况下，例如影响多行的更改，您甚至不应该使用ORM。另一个例子是当您想要清空一个表时：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating new objects
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建新对象
- en: 'The following example shows how to create new projects:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何创建新的项目：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finding specific objects
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找特定对象
- en: 'This is how you find the first object in a table:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何在表中找到第一个对象：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you refresh your web page now, you should see the following gray box:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在刷新您的网页，您应该会看到一个以下灰色框：
- en: '![Finding specific objects](img/5401OS_02_03.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![查找特定对象](img/5401OS_02_03.jpg)'
- en: 'If you unfold **Model_Project** by clicking on **↵**, and then **_data**, you
    should see that this is indeed the first project:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过点击 **↵** 展开**Model_Project**，然后点击 **_data**，您应该会看到这确实是第一个项目：
- en: '![Finding specific objects](img/5401OS_02_04.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![查找特定对象](img/5401OS_02_04.jpg)'
- en: 'If you take a look at the console, you can also confirm this by seeing the
    executed SQL request:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看控制台，您也可以通过看到执行的SQL请求来确认这一点：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also load the last object:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以加载最后一个对象：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The executed request should be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求应该是这样的：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or you can load a project by specifying an ID:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过指定ID来加载一个项目：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can note here that no request was executed. That is because the ORM caches
    loaded objects and the project has already been loaded in a previous request.
    Otherwise, the following request should have been executed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处注意到没有执行任何请求。这是因为ORM缓存了加载的对象，项目已经在之前的请求中加载过了。否则，以下请求应该被执行：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Updating an object
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新对象
- en: 'Here is how we update an existing object (here, we change the name of the project
    with `id = 1`):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何更新现有对象（在这里，我们更改 `id = 1` 的项目名称）：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Executed request:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 执行请求：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Deleting an object
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除对象
- en: 'We can delete a project by calling:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用以下方式删除一个项目：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Executed request:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 执行请求：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Loading several objects
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 加载多个对象
- en: 'We can load several objects at once. The following example shows how we can
    load all project instances:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以一次性加载多个对象。以下示例展示了如何加载所有项目实例：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In that case, `$projects` will be an associative array of projects, the key
    being the project''s ID, and the value being the associated project. The executed
    request is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`$projects` 将是一个包含项目的关联数组，键是项目的ID，值是相关联的项目。执行的请求如下：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using method chaining
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用方法链
- en: The `query` method is an equivalent of the `find` method, but allows you to
    fetch objects using method chaining.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`query` 方法是 `find` 方法的等价物，但它允许您使用方法链获取对象。'
- en: 'Here is how you can find all the project instances using the `query` method:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何使用 `query` 方法找到所有项目实例的：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The executed request is the same as previously executed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求与之前执行的相同：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: More complex requests
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更复杂的请求
- en: 'It is also possible to execute much more complex requests. First, let''s add
    various tasks:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以执行更复杂的请求。首先，让我们添加各种任务：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now that we have created various tasks, we will be able to test the second parameter
    of the `find` method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了各种任务，我们将能够测试 `find` 方法的第二个参数。
- en: 'Let''s get the first task with `project_id = 2`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取 `project_id = 2` 的第一个任务：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Or using the `query` method:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Executed request:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 执行请求：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s now get all tasks with `project_id = 2`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们获取所有 `project_id = 2` 的任务：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Or using the `query` method:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Executed request:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行请求：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It is also possible to get all tasks with `project_id = 2` and `status = 1`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过 `project_id = 2` 和 `status = 1` 获取所有任务：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or using the `query` method:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Executed request:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This is how we get all tasks with `project_id > 2` and `status = 1`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们获取所有 `project_id > 2` 和 `status = 1` 的任务的示例：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Or using the `query` method:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Executed request:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This is how we get tasks with `project_id > 2` or `status = 1`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们获取 `project_id > 2` 或 `status = 1` 的任务的示例：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Or using the `query` method:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Executed request:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This is how we get tasks that name contains the word `website`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们获取名称包含单词 `website` 的任务的示例：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Or using the `query` method:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Executed request:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can also specify an order:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以指定一个排序：
- en: '[PRE43]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Or using the `query` method:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `query` 方法：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Executed request:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You have probably noticed that using the `query` method generally allows you
    to write a much more concise and readable code. Therefore, you are recommended
    to use the `query` method for complex requests. In most cases though, using `find`
    or `query` doesn't make much difference, so use your best judgment.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，使用 `query` 方法通常可以使你编写更简洁、更易读的代码。因此，建议你在复杂请求中使用 `query` 方法。然而，在大多数情况下，使用
    `find` 或 `query` 并没有太大区别，所以请根据你的最佳判断来使用。
- en: As already stated, this is just a very small introduction to the ORM. There
    are many more keys other than `where` and `order_by`, and we will see some of
    those later (as the `related` key for instance). You are recommended to take a
    look at the official documentation of the ORM package at [http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这只是一个对 ORM 的非常简单的介绍。除了 `where` 和 `order_by` 之外，还有很多其他键，我们稍后会看到一些（例如 `related`
    键）。建议你查看 ORM 包的官方文档，该文档可在以下链接找到：[http://fuelphp.com/docs/packages/orm/intro.html](http://fuelphp.com/docs/packages/orm/intro.html)。
- en: 'We also used the `Debug` and `DB` classes. Knowing them can be useful. Again,
    feel free to read their official documentation, which is available at the following
    links:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了 `Debug` 和 `DB` 类。了解它们可能会有所帮助。再次提醒，你可以自由地阅读它们的官方文档，这些文档可以在以下链接找到：
- en: '[http://fuelphp.com/docs/classes/debug.html](http://fuelphp.com/docs/classes/debug.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/debug.html](http://fuelphp.com/docs/classes/debug.html)'
- en: '[http://fuelphp.com/docs/classes/database/db.html](http://fuelphp.com/docs/classes/database/db.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/database/db.html](http://fuelphp.com/docs/classes/database/db.html)'
- en: ORM relations
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 关系
- en: 'It is time for us to define the relationship between tasks and projects. As
    we explained earlier, defining them activates useful features that make the job
    of the developers easy and improve performance. Relations must be defined inside
    a model. For instance, we will define a relation in the **Project** model in order
    to access each project''s tasks, and we will also define another relation in the
    **Task** model in order to access each task''s associated project. There are 4
    relation types:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候定义任务和项目之间的关系了。正如我们之前解释的，定义它们可以激活有用的功能，使开发者的工作变得容易并提高性能。关系必须在模型内部定义。例如，我们将在
    **Project** 模型中定义一个关系，以便访问每个项目的任务，我们还将也在 **Task** 模型中定义另一个关系，以便访问每个任务关联的项目。有 4
    种关系类型：
- en: '**Belongs To**: When you define a *belongs to* relationship in model A toward
    model B, each model A''s instance can only be associated with one model B''s instance.
    You will generally need to create a column in model A''s table that will be used
    to connect instances. In this chapter, the **Task** model has a *belongs to* relationship
    with the **Project** model. Indeed, each task is associated with only one project,
    and the `project_id` column in the tasks'' table is used to connect each instance.
    A concrete example is that a task with `project_id = 1` will belong to the project
    with `id = 1`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属于**：当你定义模型 A 对模型 B 的 *属于* 关系时，每个模型 A 的实例只能与一个模型 B 的实例相关联。你通常需要在模型 A 的表中创建一个列，用于连接实例。在本章中，**Task**
    模型与 **Project** 模型有一个 *属于* 关系。确实，每个任务只与一个项目相关联，而任务表中的 `project_id` 列用于连接每个实例。一个具体的例子是，`project_id
    = 1` 的任务将属于 `id = 1` 的项目。'
- en: '**Has many**: When you define a *has many* relationship in model A toward model
    B, each model A''s instance can be associated with many model B''s instances.
    You will generally need to create a column in model B''s table that will be used
    to connect instances. In this chapter, the **Project** model has a *has many*
    relationship with the **Task** model; indeed, each project can have many tasks,
    and the `project_id` column in the tasks'' table is used to connect each instance.
    A concrete example is that a project with `id = 1` can have many tasks with `project_id
    = 1`.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有多个**：当你在模型A中对模型B定义一个 *拥有多个* 关系时，每个模型A的实例可以与多个模型B的实例相关联。你通常需要在模型B的表中创建一个用于连接实例的列。在本章中，**项目**模型与**任务**模型有一个
    *拥有多个* 关系；确实，每个项目可以有多个任务，并且任务表中的 `project_id` 列用于连接每个实例。一个具体的例子是，`id = 1` 的项目可以有多个
    `project_id = 1` 的任务。'
- en: '**Has one**: A way to understand this relation is to think of it as a special
    case of a has many relationship, except that each model A''s instance can be associated
    with only one model B''s instance. If we defined a *has one* relationship (instead
    of has many) in the **Project** model toward the **Task** model, we would still
    need to define the `project_id` column inside the tasks'' table, but in that case
    only a single task could be associated to each project.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有一个**：理解这种关系的一种方式是将其视为一个 *拥有多个* 关系的特例，除了每个模型A的实例只能与一个模型B的实例相关联。如果我们定义了**项目**模型对**任务**模型的
    *拥有一个* 关系（而不是拥有多个），我们仍然需要在任务表中定义 `project_id` 列，但在那种情况下，每个项目只能关联一个任务。'
- en: '**Many to Many**: When you define a *many to many* relationship in model A
    toward model B, each model A''s instance can be associated with many model B''s
    instances and each model B''s instance can be associated with many model A''s
    instances. In that case, you will need to create an intermediary table.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多对多**：当你在模型A中对模型B定义一个 *多对多* 关系时，每个模型A的实例可以与多个模型B的实例相关联，并且每个模型B的实例也可以与多个模型A的实例相关联。在这种情况下，你需要创建一个中间表。'
- en: You are recommended to read the official documentation about relations at [http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您阅读关于关系的官方文档，链接为 [http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html)。
- en: Defining relations inside the models
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在模型内定义关系
- en: Now that we have introduced the different types of relations, let's define them
    in our model.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了不同类型的关系，让我们在我们的模型中定义它们。
- en: 'First, open `APPPATH/classes/model/task.php` and add the following attribute
    in the `Model_Task` class:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开 `APPPATH/classes/model/task.php` 并在 `Model_Task` 类中添加以下属性：
- en: '[PRE46]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Note that this is equivalent to the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这等同于以下代码：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the first case, the `model_to`, `key_from`, and `key_to` keys are inferred
    from the array value (`''project''`). If not defined, `cascade_save` default value
    is `true` and `cascade_delete` default value is `false`. These keys define the
    following relation characteristics:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，`model_to`、`key_from` 和 `key_to` 键是从数组值（`'project'`）推断出来的。如果没有定义，`cascade_save`
    的默认值是 `true`，而 `cascade_delete` 的默认值是 `false`。这些键定义了以下关系特征：
- en: 'The `model_to` key: The model across the relation (model B)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_to` 键：关系（模型B）'
- en: 'The `key_from` key: The model''s (model A''s) column used to connect instances'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_from` 键：用于连接实例的模型（模型A）的列'
- en: 'The `key_to` key: The model across the relation''s (model B''s) column used
    to connect instances'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_to` 键：关系（模型B的）列中用于连接实例的模型'
- en: 'The `cascade_save` key: If true, each time a model''s instance is saved, the
    related instances will also be saved'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade_save` 键：如果为真，每次保存模型实例时，相关的实例也将被保存'
- en: 'The `cascade_delete` key: If true, each time a model''s instance is deleted,
    the related instances will also be deleted. Beware of this feature, as you could
    end up deleting more information than you really want.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade_delete` 键：如果为真，每次删除模型实例时，相关的实例也将被删除。请注意此功能，因为您可能会删除比实际想要的更多信息。'
- en: 'Now, open `APPPATH/classes/model/project.php` and add the following attribute
    in the `Model_Project` class:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开 `APPPATH/classes/model/project.php` 并在 `Model_Project` 类中添加以下属性：
- en: '[PRE48]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'As with the `belongs_to` relation, it is equivalent to the following code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `belongs_to` 关系一样，它等同于以下代码：
- en: '[PRE49]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Testing the relations
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试关系
- en: To better illustrate this, let's test how these relations work by appending
    code in our `public/test.php` file.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明这一点，让我们通过在我们的 `public/test.php` 文件中添加代码来测试这些关系的工作方式。
- en: Getting objects' relations
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 获取对象的关联
- en: First let's load a task's instance with `id = 1`, and then its related project.
    You can notice that we set the `from_cache` parameter to `false`. This has been
    done to prevent FuelPHP to load the instance from the cache because we want to
    display all executed requests. In most cases, you are not recommended to use this
    parameter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们加载一个`id = 1`的任务实例，然后加载其相关项目。你可以注意到我们设置了`from_cache`参数为`false`。这样做是为了防止FuelPHP从缓存中加载实例，因为我们想显示所有已执行的请求。在大多数情况下，不建议使用此参数。
- en: '[PRE50]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the second line, we loaded the task's project by accessing the `project`
    attribute. This is the relation name we declared in the `Model_Task` class. In
    a general manner, if you want to access a related instance through the relation
    `RELATION_NAME`, you can get it using `$item->RELATION_NAME`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们通过访问`project`属性加载了任务的项目。这是我们声明在`Model_Task`类中的关系名称。一般来说，如果你想通过关系`RELATION_NAME`访问相关实例，你可以使用`$item->RELATION_NAME`来获取它。
- en: 'You can see that the following two requests were executed:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到以下两个请求被执行了：
- en: The first request was executed in the `find` method in order to load the task
    with `id = 1`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求是在`find`方法中执行的，目的是加载`id = 1`的任务。
- en: '[PRE51]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The second request was executed when getting `$task->project`: in this case
    the project with `id = $task->project_id` was retrieved:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求是在获取`$task->project`时执行的：在这种情况下，检索了`id = $task->project_id`的项目：
- en: '[PRE52]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Let''s load a project''s instance with `id = 2`, and then its related tasks:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载一个`id = 2`的项目实例，然后加载其相关任务：
- en: '[PRE53]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Two requests have been executed:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 执行了两次请求：
- en: 'The first request loads the project''s instance:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载项目的实例：
- en: '[PRE54]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The second request loads the project''s associated tasks:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载了项目关联的任务：
- en: '[PRE55]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'When relations are defined, the `find` method allows you to improve performance
    by reducing the number of SQL requests. For instance, if you do the following:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义关系时，`find`方法允许你通过减少SQL请求的数量来提高性能。例如，如果你这样做：
- en: '[PRE56]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Three requests will be executed, which are given as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行三次请求，如下所示：
- en: One for loading all the projects
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次加载所有项目
- en: '[PRE57]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Two for loading `$project->tasks` for each project in `$projects`
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`$projects`中的每个项目，加载`$project->tasks`两次
- en: '[PRE58]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Three requests don't seem a lot, but if you load 100 projects this means that
    you will execute 101 requests and this can lead to serious performance issues.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 三次请求看起来并不多，但如果你要加载100个项目，这意味着你将执行101次请求，这可能导致严重的性能问题。
- en: 'The `find` method allows you to address this issue through the `related` key:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`find`方法允许你通过`related`键来解决这个问题：'
- en: '[PRE60]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Here, only one request has been executed. The FuelPHP's ORM has loaded the relation
    when executing the find method by joining the tasks' table in the request.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，只执行了一次请求。FuelPHP的ORM在执行`find`方法时通过在请求中连接任务表来加载关系。
- en: 'Executed request:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: '[PRE61]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Updating objects' relations
  id: totrans-245
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 更新对象的关联
- en: 'If you want to update a relation, you can simply update the column supporting
    it. For instance, the following code loads the task with `id = 1` and makes it
    belong to the project with `id = 3`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更新一个关系，你可以简单地更新支持它的列。例如，以下代码加载了`id = 1`的任务，并使其属于`id = 3`的项目：
- en: '[PRE62]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Two requests will be executed, which are given as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行两次请求，如下所示：
- en: 'The first request loads the task:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载了任务：
- en: '[PRE63]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The second updates the `project_id` column of the task:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次更新了任务的`project_id`列：
- en: '[PRE64]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Though it executes more SQL requests, we could also have written the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它执行了更多的SQL请求，但我们也可以编写以下内容：
- en: '[PRE65]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Four requests will be executed, which are given as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行四次请求，如下所示：
- en: 'The first request loads the task (executed by `Model_Task::find(...)`):'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载了任务（由`Model_Task::find(...)`执行）：
- en: '[PRE66]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The second request loads the project we want to associate to the task (executed
    by `Model_Project::find(...)`):'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载了我们想要关联到任务上的项目（由`Model_Project::find(...)`执行）：
- en: '[PRE67]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The third request loads the existing project associated to the task (executed
    by `$task->project`):'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次请求加载与任务关联的现有项目（由`$task->project`执行）：
- en: '[PRE68]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The fourth request updates the `project_id` column of the task (executed by
    `$task->save()`):'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四次请求更新任务的`project_id`列（由`$task->save()`执行）：
- en: '[PRE69]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'It is also possible to affect a new project to a task:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 还有可能将新项目关联到任务上：
- en: '[PRE70]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In that case, the ORM will create a new project and then assign the correct
    ID to the `project_id` attribute.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，ORM将创建一个新的项目，然后为`project_id`属性分配正确的ID。
- en: 'Four requests will be executed, which are given as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行四次请求，如下所示：
- en: 'The first request loads the task (executed by `Model_Task::find(...)`):'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载任务（通过`Model_Task::find(...)`执行）：
- en: '[PRE71]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The second request loads the existing project associated to the task (executed
    by `$task->project`):'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载与任务关联的现有项目（通过`$task->project`执行）：
- en: '[PRE72]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The third request creates the new project (executed by `$task->save()`):'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次请求创建新项目（通过`$task->save()`执行）：
- en: '[PRE73]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The fourth request updates the `project_id` column of the task (executed by
    `$task->save()`):'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四次请求更新任务的`project_id`列（通过`$task->save()`执行）：
- en: '[PRE74]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Similarly, it is possible to affect a new task to a project:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以将新任务关联到项目中：
- en: '[PRE75]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Three requests will be executed, which are given as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行三个请求，具体如下：
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载项目（通过`Model_Project::find(...)`执行）：
- en: '[PRE76]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载与项目关联的现有任务（通过`$project->tasks`执行）：
- en: '[PRE77]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The third request creates the new task (executed by `$project->save()`):'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次请求创建新任务（通过`$project->save()`执行）：
- en: '[PRE78]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'If you take a precise look at `$project->tasks`, you will notice that it is
    an associated array, the keys being the instances ID and the values being the
    instances. Thus, this is how you can update a specific task through relations:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看`$project->tasks`，你会注意到它是一个关联数组，键是实例ID，值是实例。因此，这就是如何通过关系更新特定任务的方法：
- en: '[PRE79]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: It will change the name of the task with `id = 6` to `'Buy an optical mouse'`
    (if this task exists and its `project_id` is equal to 2).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 它将任务（`id = 6`）的名称更改为`'Buy an optical mouse'`（如果此任务存在且其`project_id`等于2）。
- en: 'Three requests will be executed, which are given as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将执行三个请求，具体如下：
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载项目（通过`Model_Project::find(...)`执行）：
- en: '[PRE80]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载与项目关联的现有任务（通过`$project->tasks`执行）：
- en: '[PRE81]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The third request updates the task''s `name` column (executed by `$project->save()`):'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次请求更新任务的`name`列（通过`$project->save()`执行）：
- en: '[PRE82]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'It is also possible to disconnect two related items. This example is not adapted
    or useful for our project, but it is important to know that you can do this. Let''s
    try to disconnect the task with `id = 4` from the project with `id = 3`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以断开两个相关项的连接。这个例子不适合或对我们项目没有用，但重要的是要知道你可以这样做。让我们尝试将任务（`id = 4`）从项目（`id = 3`）中断开连接：
- en: '[PRE83]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Executed requests:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的请求：
- en: 'The first request loads the project (executed by `Model_Project::find(...)`):'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次请求加载项目（通过`Model_Project::find(...)`执行）：
- en: '[PRE84]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The second request loads the existing tasks associated to the project (executed
    by `$project->tasks`):'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二次请求加载与项目关联的现有任务（通过`$project->tasks`执行）：
- en: '[PRE85]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The third request attempts to disconnect the task with `id = 4` from the project
    (executed by `$project->save()`):'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次请求尝试将任务（`id = 4`）从项目中断开连接（通过`$project->save()`执行）：
- en: '[PRE86]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If you take a look at the executed requests, this code is not adapted to our
    project because:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看执行的请求，这段代码并不适合我们的项目，因为：
- en: For it to correctly work, we should allow the `project_id` column to be null,
    and that isn't the case right now
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了正确工作，我们应该允许`project_id`列可以为空，但目前并非如此
- en: In our application, a task belonging to no project would make no sense
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，不属于任何项目的任务是没有意义的
- en: In other cases, doing that can be legitimate though. Again, this is only a short
    introduction to the ORM's relations, and you are recommended to read the official
    documentation at [http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，这样做可能是合法的。再次强调，这只是一个ORM关系的简要介绍，建议阅读官方文档[http://fuelphp.com/docs/packages/orm/relations/intro.html](http://fuelphp.com/docs/packages/orm/relations/intro.html)。
- en: Observers and events
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 观察器和事件
- en: 'You have probably noticed in the previous section that, when saving an object,
    some additional values were saved in the `created_at` and `updated_at` columns
    without us specifying anything. For instance:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到在前一节中，在保存对象时，即使我们没有指定任何内容，也会在`created_at`和`updated_at`列中保存一些额外的值。例如：
- en: '[PRE87]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'This happens because of the observers defined in the models. Observers override
    some model behaviors; for example, they can change properties'' values before
    committing the changes to the database, or prevent the object from being saved
    if some conditions are met. Let''s take a look at the observers defined in `Model_Project`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在模型中定义的观察者导致的。观察者覆盖了一些模型行为；例如，它们可以在将更改提交到数据库之前更改属性值，或者在满足某些条件时阻止对象被保存。让我们看看在`Model_Project`中定义的观察者：
- en: '[PRE88]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You can notice that two observers are defined: `Orm\Observer_CreatedAt` and
    `Orm\Observer_UpdatedAt`. They handle the `created_at` and `updated_at` columns,
    respectively, setting their value to the current timestamp when the object is
    created or updated. Observers can have custom parameters such as `mysql_timestamp`,
    which defines if a MySQL timestamp is saved instead of a UNIX one.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注意到定义了两个观察者：`Orm\Observer_CreatedAt`和`Orm\Observer_UpdatedAt`。它们分别处理`created_at`和`updated_at`列，在对象创建或更新时将它们的值设置为当前时间戳。观察者可以有自定义参数，例如`mysql_timestamp`，它定义是否保存MySQL时间戳而不是UNIX时间戳。
- en: The `events` parameter is common to all observers and defines which events they
    should be connected to. Events are methods called in behaviors when something
    happens to an object; for instance, when you save an object, the ORM will try
    to call its behaviors' `before_save` method before changes are committed to the
    database. There are several events, such as `after_create` or `after_save`. You
    can read the full descriptive list in the official documentation at [http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names](http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names)
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`events`参数对所有观察者都是通用的，它定义了它们应该连接到哪些事件。事件是在行为中某个对象发生某些事情时调用的方法；例如，当你保存一个对象时，ORM会在更改提交到数据库之前尝试调用其行为的`before_save`方法。有几个事件，如`after_create`或`after_save`。你可以在官方文档的完整描述列表中阅读，请参阅[http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names](http://fuelphp.com/docs/packages/orm/observers/creating.html#/event_names)'
- en: In order to learn more, you are also recommended to read the introduction to
    observers in the official documentation at [http://fuelphp.com/docs/packages/orm/observers/intro.html](http://fuelphp.com/docs/packages/orm/observers/intro.html)
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多信息，还建议你阅读官方文档中关于观察者的介绍[http://fuelphp.com/docs/packages/orm/observers/intro.html](http://fuelphp.com/docs/packages/orm/observers/intro.html)
- en: Implementation of the to-do list
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待办事项列表的实现
- en: Now that we explained the essential ORM features and implemented our relations,
    it is finally time to build our to-do list. This section assumes you have executed
    the complete `public/test.php` script at least once.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解释了基本的ORM特性和实现了我们的关系，现在是时候构建我们的待办事项列表了。本节假设您至少执行了完整的`public/test.php`脚本一次。
- en: Allowing the user to see and change tasks' status
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许用户查看和更改任务的状态
- en: 'First, we will display the associated tasks when viewing a project''s details.
    For instance, this web page should display all tasks of project with `id = 2`
    after the project''s name:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将显示查看项目详情时关联的任务。例如，这个网页应该在项目名称之后显示`id = 2`的项目的所有任务：
- en: '`http://mytodolists.app/project/view/2`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://mytodolists.app/project/view/2`'
- en: 'In order to do that, we can, as we did in [Chapter 1](ch01.html "Chapter 1. Building
    Your First FuelPHP Application"), *Building Your First FuelPHP Application*, dissect
    the URL and deduce that, in this case, the view action of the **Project** controller
    is executed. The action displays `project/view`; thus, we have to edit `APPPATH/views/project/view.php`.
    Add the following code under the first paragraph displaying the project''s name:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们可以像在[第1章](ch01.html "第1章. 构建您的第一个FuelPHP应用程序")中做的那样，*构建您的第一个FuelPHP应用程序*，分析URL并推断出，在这种情况下，**Project**控制器的视图操作被执行。该操作显示`project/view`；因此，我们必须编辑`APPPATH/views/project/view.php`。在显示项目名称的第一段下方添加以下代码：
- en: '[PRE89]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The `render(...)` method is an alias for `View::forge(...)->render()`, and
    thus the preceding code displays the `task/list` view. Create the `APPPATH/views/task/list.php`
    view file (you have to create the `task` folder) and set its content to:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`render(...)`方法是对`View::forge(...)->render()`的别名，因此前面的代码显示了`task/list`视图。创建`APPPATH/views/task/list.php`视图文件（你必须创建`task`文件夹），并将其内容设置为：'
- en: '[PRE90]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'This code should be pretty straightforward; it displays an HTML list of the
    project''s tasks. Each item displays the name in a label linked to a checkbox
    displaying its status. We can make the two following observations:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该相当直观；它显示了一个HTML列表，列出了项目的任务。每个条目都显示了一个标签，其中包含一个复选框，显示其状态。我们可以做出以下两个观察：
- en: We defined the `data-project_id` attribute inside the `ul` element. It will
    be later used by our JavaScript code to easily retrieve the project's ID. The
    same goes for the `data-task_id` attribute for each checkbox.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 `ul` 元素内部定义了 `data-project_id` 属性。稍后我们的 JavaScript 代码将使用它来轻松检索项目的 ID。对于每个复选框的
    `data-task_id` 属性也是如此。
- en: You can notice we printed `$task->name` without escaping the string. You could
    think that this is a security breach because `$task->name` could contain HTML
    tags such as the `<script>` tag and therefore would be prone to XSS injections.
    However, it isn't because when you use the `View::forge` method, all parameters
    (even model properties) are, by default, processed (escaped) to prevent such security
    flaws. You can disable this behavior though (we will see in [Chapter 3](ch03.html
    "Chapter 3. Building a Blog Application"), *Building a Blog Application*, that
    sometimes we have to), and in that case FuelPHP provides the `e` method to manually
    escape variables.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以注意到我们没有对 `$task->name` 进行转义就打印了它。您可能会认为这是一个安全漏洞，因为 `$task->name` 可能包含 HTML
    标签，如 `<script>` 标签，因此容易受到 XSS 注入的影响。然而，这并不是问题，因为当您使用 `View::forge` 方法时，所有参数（甚至模型属性）默认都会被处理（转义）以防止此类安全漏洞。尽管如此，您仍然可以禁用此行为（我们将在
    [第 3 章](ch03.html "第 3 章。构建博客应用程序") 中看到，有时我们必须这样做），在这种情况下，FuelPHP 提供了 `e` 方法来手动转义变量。
- en: Note
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended to separate your views into small view files, each displaying
    a specific area of your web page. We just did it by creating an additional view
    for displaying the task lists. We could have gone even further by creating a view
    file that displays a single task and then rendering it for each item in the tasks'
    list.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将您的视图分成小的视图文件，每个文件显示网页的特定区域。我们通过创建一个额外的视图来显示任务列表来实现这一点。我们甚至可以更进一步，创建一个显示单个任务的视图文件，然后为任务列表中的每个项目渲染它。
- en: We can now see our to-do items. But if we click on our checkboxes, it doesn't
    synchronize with our server, and if we refresh our web page, we can see that items
    are back to their old status. We will use a bit of JavaScript and jQuery in order
    to synchronize the checkboxes with the website.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到我们的待办事项。但如果我们点击复选框，它不会与我们的服务器同步，如果我们刷新网页，我们可以看到项目回到了它们旧的状态。我们将使用一点 JavaScript
    和 jQuery 来同步复选框与网站。
- en: Create a JavaScript file at `public/assets/js/website.js`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `public/assets/js/website.js` 创建一个 JavaScript 文件。
- en: 'We first have to include it in the template. Open `APPPATH/views/template.php`
    and add before the end of the `head` tag the following:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先必须在模板中包含它。打开 `APPPATH/views/template.php` 并在 `head` 标签的末尾之前添加以下内容：
- en: '[PRE91]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The preceding code includes three JavaScript files into the template:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将三个 JavaScript 文件包含到模板中：
- en: The first two lines are the jQuery and jQuery UI scripts that we will need.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前两行是我们将需要的 jQuery 和 jQuery UI 脚本。
- en: The third one is the script containing our JavaScript code. Note that you didn't
    have to write the complete path. The `Asset::js` method automatically searches
    for the file in the `public/assets/js` folder. You should know it is possible
    to specify additional directories to search JavaScript and CSS files using the
    `Asset::add_path` method if necessary. You are recommended to read the official
    documentation at [http://fuelphp.com/docs/classes/asset/usage.html](http://fuelphp.com/docs/classes/asset/usage.html).
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三行是包含我们 JavaScript 代码的脚本。请注意，您不必写出完整的路径。`Asset::js` 方法会自动在 `public/assets/js`
    文件夹中搜索文件。您应该知道，如果需要，可以使用 `Asset::add_path` 方法指定额外的目录来搜索 JavaScript 和 CSS 文件。建议您阅读官方文档，网址为
    [http://fuelphp.com/docs/classes/asset/usage.html](http://fuelphp.com/docs/classes/asset/usage.html)。
- en: 'As we will need to know our base URL in our JavaScript code in order to send
    AJAX requests, add the following just before the code we previously added:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要在 JavaScript 代码中知道我们的基本 URL 以发送 AJAX 请求，因此请在我们之前添加的代码之前添加以下内容：
- en: '[PRE92]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'This code creates a JavaScript variable named `uriBase` containing the base
    URL obtained from `Uri::base()` and encoded to a JavaScript string by `Format::forge(...)->to_json()`.
    You are recommended to read the official documentation about these classes at
    the following URLs:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了一个名为 `uriBase` 的 JavaScript 变量，它包含从 `Uri::base()` 获取的基本 URL，并通过 `Format::forge(...)->to_json()`
    编码成 JavaScript 字符串。建议您阅读以下 URL 上的关于这些类的官方文档：
- en: '[http://fuelphp.com/docs/classes/uri.html](http://fuelphp.com/docs/classes/uri.html)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/uri.html](http://fuelphp.com/docs/classes/uri.html)'
- en: '[http://fuelphp.com/docs/classes/format.html](http://fuelphp.com/docs/classes/format.html)'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/format.html](http://fuelphp.com/docs/classes/format.html)'
- en: Note
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This `uriBase` variable was implemented for those of you that created your
    project inside your webserver root directory without using virtual hosts: in that
    case, sending AJAX requests using only relative URLs will cause issues. An alternative
    is to use the base HTML tag, as we will see in [Chapter 5](ch05.html "Chapter 5. Building
    Your Own Restful API"), *Building Your Own RESTful API*.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`uriBase`变量是为了那些在您的网站根目录内创建项目而没有使用虚拟主机的您而实现的：在这种情况下，仅使用相对URL发送AJAX请求将导致问题。一个替代方案是使用基础HTML标签，正如我们将在[第5章](ch05.html
    "第5章。构建您自己的RESTful API")中看到的，*构建您自己的RESTful API*。
- en: 'Now that our JavaScript file and its dependencies are included in the template,
    we have to implement the checkbox synchronization. Open the JavaScript file we
    created earlier at `public/assets/js/website.js` and set its content to:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将JavaScript文件及其依赖项包含在模板中，我们必须实现复选框同步。打开我们之前创建的位于`public/assets/js/website.js`的JavaScript文件，并将其内容设置为：
- en: '[PRE93]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'For those unfamiliar with jQuery, the code does the following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉jQuery的人来说，代码执行以下操作：
- en: When the document DOM is ready, the script will look for checkboxes inside our
    to-do list and track their changes.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当文档DOM准备好时，脚本将在我们的待办事项列表中查找复选框并跟踪其变化。
- en: When a checkbox is changed, it sends a `POST` request to the `project/change_task_status`
    action with the task's ID and its new status.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当复选框被更改时，它将向`project/change_task_status`操作发送一个带有任务ID及其新状态的`POST`请求。
- en: It does not handle errors; if there is a connection problem, the user will think
    the web page is synchronized with the server though it isn't. It could be an axis
    of improvement.
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不处理错误；如果存在连接问题，用户会认为网页与服务器同步，尽管实际上并没有。这可能是改进的一个轴。
- en: Now, we have to handle this request on the server side, so we need to create
    the `change_task_status` action inside the **Project** controller.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须在服务器端处理这个请求，因此我们需要在**项目**控制器中创建`change_task_status`操作。
- en: Note
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, for the sake of simplicity, we decided to create the action in the
    **Project** controller, though it handles tasks and should therefore be created
    inside a **Task** controller. For your real projects, it is highly recommended
    not to do this. It is easy to fall into the trap of having a single controller
    handling your whole website, and though for small projects it might be 'OK', you
    will have serious maintainability issues as your features add up.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了简化，我们决定在**项目**控制器中创建操作，尽管它处理任务，因此应该在一个**任务**控制器中创建。对于你的真实项目，强烈建议不要这样做。很容易陷入只有一个控制器处理整个网站的陷阱，尽管对于小型项目可能“可以”，但随着功能的增加，你将面临严重的可维护性问题。
- en: 'Open the **Project** controller and add the following action:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**项目**控制器并添加以下操作：
- en: '[PRE94]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: You can notice we used `Input::post` instead of the `$_POST` global variable;
    it gets the same value, except you can define a default value in the second parameter
    of `Input::post` in case the key is not defined. The same applies for `Input::get`
    and `$_GET`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注意到我们使用了`Input::post`而不是全局变量`$_POST`；它获取相同的值，但你可以在`Input::post`的第二个参数中定义一个默认值，以防键未定义。同样适用于`Input::get`和`$_GET`。
- en: We also checked using `Input::is_ajax` if it is an Ajax request. Note though
    there is no safe ways to detect if the request was made via Ajax (never trust
    data coming from the client).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还检查了是否使用`Input::is_ajax`来确定是否是Ajax请求。但请注意，没有安全的方法来检测请求是否是通过Ajax发出的（永远不要相信来自客户端的数据）。
- en: The synchronization should now work; any status change should be saved and preserved
    if you refresh the web page.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在同步应该可以工作；任何状态更改都应该在刷新网页时保存并保留。
- en: Allowing the user to add tasks
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许用户添加任务
- en: Now that we can see and change the status of projects' tasks, it could be useful
    to add new ones. We will add a form for doing that under the to-do list.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到并更改项目任务的状况，添加新的任务可能很有用。我们将在待办事项列表下添加一个表单来完成这个操作。
- en: 'First open `APPPATH/views/task/list.php` and add, at the end, the following:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开`APPPATH/views/task/list.php`，并在末尾添加以下内容：
- en: '[PRE95]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Then create a view file located at `APPPATH/views/task/create.php` and set
    its content to:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个位于`APPPATH/views/task/create.php`的视图文件，并设置其内容为：
- en: '[PRE96]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Nothing spectacular here, we just display a form with a text input (for the
    task title) and a **Create** button. We use the `Form` class for doing that, but
    we could have written that in HTML code as well. For more detail about this class,
    you are recommended to read the official documentation at [http://fuelphp.com/docs/classes/form.html](http://fuelphp.com/docs/classes/form.html).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么特别之处，我们只是显示一个带有文本输入（用于任务标题）和**创建**按钮的表单。我们使用`Form`类来完成这个任务，但我们也可以用HTML代码来写。有关此类的更多详细信息，建议您阅读官方文档[http://fuelphp.com/docs/classes/form.html](http://fuelphp.com/docs/classes/form.html)。
- en: 'Note that no parameter was passed to `Form::open`; the consequence is that
    the form will submit information to the current URL (and that is how we will know
    which project the new task must be associated with). Thus, we have to handle the
    form in the view action of the **Project** controller. Inside the action, add
    the following:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有参数传递给`Form::open`；结果是，表单将提交信息到当前URL（这就是我们将知道新任务必须关联到哪个项目的方式）。因此，我们必须在**项目**控制器的视图操作中处理表单。在操作内部，添加以下内容：
- en: '[PRE97]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Before:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 之前：
- en: '[PRE98]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: If you read the comments, the changes we made should be pretty straightforward.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读了注释，我们所做的更改应该是相当直接的。
- en: Allowing the user to change tasks' order
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许用户更改任务的顺序
- en: 'Return back to the JavaScript file located at `public/assets/js/website.js`,
    and add at the end of the `$(document).ready` callback method:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到位于`public/assets/js/website.js`的JavaScript文件，并在`$(document).ready`回调方法末尾添加以下内容：
- en: '[PRE99]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Now, if you request a project view page, you should be able to change the tasks'
    order by dragging the labels. This is done using the `sortable` method. The `disableSelection`
    method prevents the user from selecting text inside the list, because it can sometimes
    cause user interface issues when dragging an item.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你请求一个项目视图页面，你应该能够通过拖动标签来更改任务的顺序。这是使用`sortable`方法完成的。`disableSelection`方法阻止用户在列表中选择文本，因为有时在拖动项目时可能会引起用户界面问题。
- en: 'However, the order is not synchronized, so if you refresh the web page, your
    custom order will be forgotten. In order to save the changes, replace `$todoList.sortable()`;
    with the following:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，顺序没有同步，所以如果你刷新网页，你的自定义顺序将会被遗忘。为了保存更改，将`$todoList.sortable()`替换为以下内容：
- en: '[PRE100]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: For more information, you are recommended to read the official documentation
    of the `sortable` method of jQuery UI at [http://api.jqueryui.com/sortable/](http://api.jqueryui.com/sortable/).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，建议您阅读jQuery UI的`sortable`方法的官方文档[http://api.jqueryui.com/sortable/](http://api.jqueryui.com/sortable/)。
- en: 'We now have to handle requests sent to the `change_tasks_order` action of the
    **Project** controller. Add the following method to the controller:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须处理发送到**项目**控制器`change_tasks_order`操作的请求。向控制器添加以下方法：
- en: '[PRE101]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'And, in the view action, replace:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图操作中，替换以下内容：
- en: '[PRE102]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'with the following:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE103]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'If you check the task''s table, the tasks'' rank column is now updated when
    dragging tasks to new positions. But if you refresh the web page, the order is
    still lost; this is because we don''t sort the project''s tasks when we display
    them. In order to do that, replace the following inside the view action:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查任务表，当将任务拖动到新位置时，任务的排名列现在会更新。但是，如果你刷新网页，顺序仍然会丢失；这是因为我们在显示项目任务时没有对项目任务进行排序。为了做到这一点，在视图操作中替换以下内容：
- en: '[PRE104]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'with the following:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '[PRE105]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: As explained in the previous section, the `related` key allows the developer
    to load relations when retrieving objects. More than allowing you to improve your
    website's performance, it also allows you to sort or add conditions to your relations.
    You even can add again a `related` key to load your relations' relations.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如前节所述，`related`键允许开发者在检索对象时加载关系。这不仅允许你提高你网站的性能，还允许你对关系进行排序或添加条件。你甚至可以再次添加一个`related`键来加载你关系的关联关系。
- en: Axis of improvements
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进轴
- en: 'Many features can still be added to the application. You can implement them
    to improve your skill:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中还可以添加许多功能。你可以实现它们来提高你的技能：
- en: Allow the user to delete a task. This could be done by adding a delete icon
    next to each task.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户删除一个任务。这可以通过在每个任务旁边添加一个删除图标来完成。
- en: Add a dashboard to give the user a general overview of the project and their
    remaining tasks.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个仪表板，使用户能够对项目及其剩余任务有一个总体了解。
- en: Improve the visual interface.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进视觉界面。
- en: 'A bit trickier: add support for a multiuser environment. What happens if two
    users change the tasks order at the same time for instance? How to prevent loss
    of information?'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稍微有点复杂：为多用户环境添加支持。例如，如果两个用户同时更改任务顺序会发生什么？如何防止信息丢失？
- en: Summary
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have built our first real project and learnt to use important
    FuelPHP features such as the ORM and debugging tools. You should begin to feel
    confident about implementing simple projects. In the next chapter, we are going
    to use more advanced FuelPHP features such as modules and presenters.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经构建了我们第一个真正的项目，并学习了使用重要的FuelPHP特性，如ORM和调试工具。你应该开始对实现简单项目感到自信。在下一章，我们将使用更高级的FuelPHP特性，如模块和演示者。
