- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supporting Multi-Tenancy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter discusses different approaches to designing and implementing multi-tenancy
    in Moodle. If any of the following scenarios are of interest, then this chapter
    is for you:'
  prefs: []
  type: TYPE_NORMAL
- en: An authority representing multiple schools or colleges in a region or country
    wishes to provide each school or college with a separate Moodle system but needs
    to manage the systems centrally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A private training organization with multiple customers, each needing its own
    walled area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A company that has regional offices, each requiring its own learning space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will provide an overview of what multi-tenancy is and why there isn’t
    a one-size-fits-all solution before we present three different types of implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The first approach, multi-tenancy via categories, uses a single Moodle instance
    with specifically tailored course categories and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The second implementation, multi-tenancy via a centralized code base, provides
    separate standalone Moodle instances and delegates all responsibilities to local
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will describe how multi-tenancy has been implemented in Moodle Workplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Moodle multi-tenancy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting multi-tenancy via categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting multi-tenancy via a centralized code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting multi-tenancy in Moodle Workplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Moodle multi-tenancy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What exactly is multi-tenancy? In a Moodle context, multi-tenancy can be defined
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In a Moodle multi-tenancy setup, separate entities or instances (tenants) are
    administered centrally, where specific features are devolved and managed locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following radial diagram shows a simplistic high-level view of Moodle multi-tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.1 – Moodle multi-tenancy: a high-level view ](img/Figure_20.01_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.1 – Moodle multi-tenancy: a high-level view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two critical high-level questions need answering when it comes to multi-tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: Which features are handled **centrally**, and which are delegated – that is,
    dealt with at the **tenant level**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which elements can be **shared** across tenants (if any)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These questions are critical because the answers determine what type of multi-tenancy
    is suitable for your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s drill down further to the two dimensions – features and sharing – in
    a Moodle context, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.2 – Moodle multi-tenancy: features and sharing ](img/Figure_20.02_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.2 – Moodle multi-tenancy: features and sharing'
  prefs: []
  type: TYPE_NORMAL
- en: 'More questions arise when looking at specific Moodle functionality that is
    potentially impacted by multi-tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Users**: Are user accounts managed centrally and assigned to tenants or can
    a tenant admin manage users locally? How about authentication? Does each tenant
    have a separate authentication mechanism or are logins managed site-wide? Do user
    names have to be unique across tenants? Can users be in multiple tenants? Does
    every tenant have its own guest account? How about tenant-aware user profile fields?
    Should there be a user quota per tenant? And what about tenant cohorts and tenant
    roles?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Courses**: Will courses (and categories) be managed centrally, locally, or
    both? Can courses be sharable across tenants? Should users from multiple tenants
    be able to enrol in the same course and, vice versa, can users enrol in courses
    in multiple tenants?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: Do all tenants have the same plugins or can they be activated
    and deactivated at the tenant level? Can the configuration of each plugin differ
    for each tenant or is it identical for all?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin settings**: Which site-wide settings can be configured individually
    (if any)? Should the master administrator be able to lock down specific configuration
    settings to prevent individual tenant admins from changing those values?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin features**: Which admin tools, such as reporting and backups, can be
    configured and operated by tenant admins? How about security and privacy setups?
    Will reporting across tenants be allowed?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Themes**: Does the main theme apply to all tenants or can each tenant have
    its own design? How about one white-labeled theme that can be branded for each
    tenant?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Moodle code**: Is the code base identical for all tenants or can individual
    tenants have their own code (as in, make modifications)?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list goes on and on. You can see from the questions that there cannot be
    a one-size-fits-all approach to multi-tenancy. When you ask three Moodle consultants
    to come up with a multi-tenancy checklist, you will likely receive four different
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have asked several questions, let us look at three (very) different
    multi-tenancy approaches to hopefully answer some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting multi-tenancy via categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest form of multi-tenancy is configuring your Moodle system so that
    a category represents a tenant. The following diagram illustrates this approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.3 – Multi-tenancy via categories ](img/Figure_20.03_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20.3 – Multi-tenancy via categories
  prefs: []
  type: TYPE_NORMAL
- en: A category represents a ring-fenced area (tenant) where courses are managed
    locally. Users can be assigned via category cohorts; that is, users can be members
    of multiple tenants.
  prefs: []
  type: TYPE_NORMAL
- en: You can assign a dedicated theme for each category, as we saw in [*Chapter 7*](B18779_07.xhtml#_idTextAnchor140),
    *Enhancing Moodle’s Look and Feel*. However, users won’t see that branding until
    they have logged in. A new category admin role should be created and the appropriate
    permissions granted accordingly – for instance, the ability to add subcategories
    and courses.
  prefs: []
  type: TYPE_NORMAL
- en: One main drawback of the category-based approach is that plugins can only be
    configured site-wide and not at the tenant (that is, category) level. You can
    bypass this limitation by using the *addinstance* capability for each module,
    which allows you to control which activities can be added to which courses. However,
    this capability only caters to activities, not other plugins, such as authentication,
    enrolment, or plagiarism. *addinstance* can also only be applied at the course
    level and not at the category level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following checklist summarizes this poor man’s approach to multi-tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.4 – Checklist: multi-tenancy via categories ](img/Figure_20.04_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.4 – Checklist: multi-tenancy via categories'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-tenancy by categories is mainly suitable for sites where users are managed
    centrally and departments, faculties, or other entities only have control over
    course content. The approach is unsuitable for sites where a higher degree of
    autonomy is required at the tenant level. Multi-tenancy via a centralized code
    base overcomes that restriction, as shown in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting multi-tenancy via a centralized code base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The principal idea of this multi-tenancy approach is to have a single code base
    but multiple separate and standalone Moodle instances.
  prefs: []
  type: TYPE_NORMAL
- en: An example where this kind of model is suitable is where each tenant represents
    a school or college in the region, and each school or college has its own Moodle
    admin, theme, and administration settings for managing users, courses, privacy,
    and grades.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates this federated approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.5 – Multi-tenancy via a centralised code base ](img/Figure_20.05_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20.5 – Multi-tenancy via a centralised code base
  prefs: []
  type: TYPE_NORMAL
- en: 'This solution requires two main configuration steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web** **server configuration**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each Moodle instance, a separate virtual host is required where the `ServerName`,
    `ErrorLog`, and `CustomLog` parameters point to the individual instances (tenants),
    but the `DocumentRoot` variable must be identical in all virtual hosts, ensuring
    that the same code base (`CFG->dirroot`) is used. A virtual host can either be
    a separate `vhost` file or a `<VirtualHost>` entry in `httpd.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Moodle setup**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is one main `config.php` file that acts as the launch pad for all other
    instances that are represented by individual `config.php` files. These local `config.php`
    files must be stored in separate locations and have to follow a strict naming
    convention (in our example, `<domain name>_config.php`). The installation of these
    config files and their maintenance is usually implemented via scripts to ensure
    consistency.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this work, the main `config.php` file has to be modified as follows,
    assuming your local `config.php` files are stored in a dedicated `/``tenants`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In each local `config.php` file, `$CFG->dirroot` must be set to the same value
    specified in `DocumentRoot` in `vhost` here.
  prefs: []
  type: TYPE_NORMAL
- en: Local config files can be customized further to cater to any idiosyncrasies
    in a particular tenant. For instance, you might want to freeze specific administration
    parameters that the tenant administrator must not modify.
  prefs: []
  type: TYPE_NORMAL
- en: Using this setup, you only have to maintain a single code base and provide each
    tenant with a separate, standalone Moodle instance. The implementation is also
    suitable for environments where you have to provision Moodle instances on an ad
    hoc basis – for instance, in a training or development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following checklist summarizes this centralised approach to multi-tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.6 – Summary: multi-tenancy via a centralized code base ](img/Figure_20.06_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.6 – Summary: multi-tenancy via a centralized code base'
  prefs: []
  type: TYPE_NORMAL
- en: 'The approaches presented so far offer very different solutions to multi-tenancy:
    one uses a single Moodle instance with configured course categories and permissions,
    while the other provides separate standalone instances and delegates all responsibility
    to local administrators. The implementation presented in the following section
    is positioned somewhere between these two: a single Moodle instance with a built-in
    tenant functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Supporting multi-tenancy in Moodle Workplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is about Moodle administration and all its content applies to Moodle
    Workplace, too. Since Moodle Workplace provides a unique feature to cater to multi-tenancy,
    we will make an exception and cover a Moodle Workplace-only feature here. Parts
    of the section have been borrowed from the *Tenants, Organizations, and Teams*
    chapter in (advertisement alert!) my book *Corporate Learning with Moodle Workplace*
    by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two critical parts to multi-tenancy in Moodle Workplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenants**: Tenants are entirely isolated entities with their own look and
    feel, structure, users, and learning entities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing entities**: Sharing courses and certificates across tenants is supported,
    as is sharing data such as programs, reports, or organization structures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover both aspects of Moodle Workplace multi-tenancy in the following
    two subsections by describing how they work in general. For implementation details
    about Moodle Workplace’s powerful yet versatile multi-tenancy feature, check out
    [docs.moodle.org/en/Multi-tenancy](http://docs.moodle.org/en/Multi-tenancy), also
    written and maintained by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Moodle Workplace tenants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Moodle Workplace, tenants are isolated entities with their own users, hierarchies,
    roles, dynamic rules, theme settings, reports, custom pages, and learning entities
    (courses, programs, and certifications).
  prefs: []
  type: TYPE_NORMAL
- en: 'All Moodle Workplace tools are multi-tenant-aware – depending on the feature,
    different levels of multi-tenancy are supported. The following diagram shows a
    high-level view of a tenant and multi-tenant-aware elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.7 – Moodle Workplace multi-tenancy ](img/Figure_20.07_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20.7 – Moodle Workplace multi-tenancy
  prefs: []
  type: TYPE_NORMAL
- en: 'A single default tenant is created during installation or after upgrading from
    Moodle LMS to Moodle Workplace. Each tenant has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenant name** and **ID number**: Name of the tenant and unique tenant identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Site name** and **Site short name**: These two tenant settings override the
    **Full site name** and the **Short name for the site** settings respectively in
    **Site administration** | **General** | **Site** **home settings**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workplace.openumlaut.com?tenant=packt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Course category**: Courses belonging to a particular tenant must be located
    in a tenant category. We will elaborate more on that feature later when we deal
    with sharing content across tenants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two critical rules – some may call them restrictions – when dealing
    with **tenant users** in Workplace:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A user is always assigned to a tenant; an account cannot be tenantless.
  prefs: []
  type: TYPE_NORMAL
- en: A user cannot be assigned to more than one tenant; an account always belongs
    to just one single tenant.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a new user account is created, whether by self-registration, manual entry,
    batch upload, or via web services, it is always attached to the default tenant
    unless specified otherwise. The following diagram illustrates how users are assigned
    to tenants:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.8 – Moodle Workplace: users and tenants ](img/Figure_20.08_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.8 – Moodle Workplace: users and tenants'
  prefs: []
  type: TYPE_NORMAL
- en: Each user belongs to precisely one tenant, although this is likely to change
    in the future. Moodle Workplace supports tenant user quotas and lets you specify
    the maximum number of tenants allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Moodle’s user profile fields have been extended to allow the definition of different
    user profile fields per tenant. When profile fields belong to tenant-specific
    categories, they will only appear in the profile for users in those tenants; this
    also includes sign-up and edit forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each tenant can have zero, one, or many **tenant admins** who have devolved
    administration functions that allow you to fine-tune their level of responsibility.
    In addition to handling tenant users, a tenant admin has permission to manage
    tenant roles, configure tenant authentication settings, adjust the tenant branding,
    and create tenant dashboards by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenant roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role assignments to users can be managed separately for each tenant – thus,
    handling a tenant is almost like context.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenant authentication**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moodle Workplace supports multi-tenancy for authentication; you can configure
    different authentication options for different tenants. At the time of writing,
    supported authentication methods are *manual*, *email-based self-registration*,
    and *OAuth 2*. *SAML* is an explicitly supported, third-party authentication method.
    For more details, check out [docs.moodle.org/en/Multi-tenancy_authentication](http://docs.moodle.org/en/Multi-tenancy_authentication).
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenant branding**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can customize the look and feel of the tenant by configuring the multi-tenancy-aware
    Workplace theme. The branding elements, images, colors, custom SCSS, and footer
    are described in detail in the Moodle Docs at [docs.moodle.org/en/Workplace_theme](http://docs.moodle.org/en/Workplace_theme).
  prefs: []
  type: TYPE_NORMAL
- en: '**Tenant dashboards**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, all tenant dashboards are linked to the content defined in the default
    site dashboard, and any modifications to this page will appear for the new users
    in any tenant. Any user with appropriate permissions (site and tenant admins by
    default) can define a tenant-specific dashboard with the same editing capabilities
    as the main dashboard. Tenant admins can manage the dashboards of their tenants
    and reset the configuration for tenant users.
  prefs: []
  type: TYPE_NORMAL
- en: All Moodle Workplace tools, such as programs, certifications, custom pages,
    dynamic rules, and organization structures (departments, positions, and jobs),
    are fully multi-tenancy-aware. In addition to defining and managing these features
    per tenant, Moodle Workplace also supports sharing content and data across tenants,
    as described in the following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Moodle Workplace sharing entities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moodle Workplace supports two ways that sharing across tenants can be facilitated:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared content**: Sharing courses and certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared space**: Sharing Moodle Workplace data, such as programs or organization
    structures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s have a brief look at both options.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing content in Moodle Workplace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typically, each tenant has its own course category, and hence, its own courses.
    The manual enrolment method has been modified, so the user picker only displays
    users from the current tenant. However, there are scenarios where you might want
    to share specific courses among tenants, which is achieved by placing courses
    in the *shared* *courses* category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multi-tenancy does not apply to course content, which means that if learners
    or trainers are enrolled in a course, they will see users from other tenants while
    browsing the course. This behavior is intentional: suppose your organization has
    some shared courses. It can be assumed that you want the learners to study together
    and the trainer from one tenant to be a trainer for all learners regardless of
    their tenant.'
  prefs: []
  type: TYPE_NORMAL
- en: If you share courses between different tenants and want users from each tenant
    to learn independently, they must belong to separate groups. Allocation to separate
    groups is done automatically when a shared course is part of a program.
  prefs: []
  type: TYPE_NORMAL
- en: The certificates tool we covered in the *Skills and incentives* section in [*Chapter
    9*](B18779_09.xhtml#_idTextAnchor181), *Configuring Educational Features*, uses
    the shared course category feature just described. If a certificate template is
    placed in a tenant course category, it is limited to this particular tenant; otherwise,
    it is shared across all tenants.
  prefs: []
  type: TYPE_NORMAL
- en: Custom pages enable site and tenant administrators to create personalized experiences
    for different audiences by easily adding new pages to the navigation. The content
    on these pages can be customized using standard Moodle Workplace blocks. While
    tenant custom pages are specific to a single tenant, global custom pages are shared
    across all tenants.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data in Moodle Workplace using Shared space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Shared space** feature enables the sharing of entities across all tenants.
    It works like a special tenant where users can create supported entities available
    in other tenants.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared space** is a special tenant to share Moodle Workplace entities among
    **all** tenants.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the following Workplace tools are supported in **Shared space**:'
  prefs: []
  type: TYPE_NORMAL
- en: Programs and certifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization structure (departments, positions, and jobs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see a list of custom reports to demonstrate
    the **Shared space** feature. Moodle Workplace’s report generator is the same
    as the one described in [*Chapter 12*](B18779_12.xhtml#_idTextAnchor233), *Gaining
    Insights through Moodle Reporting and Analytics*, only with more report sources
    and the support of **Shared space**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.9 – Moodle Workplace: users and tenants ](img/Figure_20.09_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.9 – Moodle Workplace: users and tenants'
  prefs: []
  type: TYPE_NORMAL
- en: Two reports (**Issued certificates** and **New users (all)**) have a little
    mark beside them to indicate that they are shared across tenants, while the other
    two reports are only available in the local tenant.
  prefs: []
  type: TYPE_NORMAL
- en: 'This concludes the overview on multi-tenancy in Moodle Workplace, which also
    applies to the Moodle Workplace app. To summarize, we have created a familiar
    checklist as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.10 – Summary of multi-tenancy in Moodle Workplace ](img/Figure_20.10_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20.10 – Summary of multi-tenancy in Moodle Workplace
  prefs: []
  type: TYPE_NORMAL
- en: For more interesting reading on multi-tenancy in Moodle Workplace, check out
    the article at [moodle.com/news/lms-multi-tenancy](http://moodle.com/news/lms-multi-tenancy).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed different ways to support Moodle multi-tenancy. We first
    defined what multi-tenancy is and showed why there is a need for different types
    of multi-tenancy implementations. We presented three different approaches, one
    of which hopefully matches your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The first model, multi-tenancy via categories, used a single Moodle instance
    with configured course categories and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The second approach, multi-tenancy via a centralized code base, provided separate
    standalone instances and delegated all responsibilities to local administrators.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we presented multi-tenancy in Moodle Workplace, the most versatile out-of-the-box
    implementation currently available.
  prefs: []
  type: TYPE_NORMAL
- en: We covered three representative implementations to facilitate multi-tenancy
    in Moodle. These solutions can, of course, be extended or further modified to
    cater to your individual requirements. While some aspects of implementing multi-tenancy
    might look technical, daunting, and labor-intensive, it will be a relatively pain-free
    exercise if a solid strategy is followed, possibly assisted by a professional
    and experienced Moodle Partner.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix on configuration settings aims to provide you with a list of parameters
    that can be modified in `config.php` and the impact each value will have.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first examine `config.php` and explore what types of parameters are
    supported by Moodle. After providing this overview, we will look at two types
    of configuration settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`config.php`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System settings**: We distinguish between default and supplementary configuration
    values. The former will have been created by the installer and are mostly required
    for Moodle to function; the latter are parameters that change various Moodle behaviors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration reference – an overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `config.php` configuration file contains several settings and variables
    that heavily influence how Moodle operates. It is located in the main directory
    of your Moodle system (`$CFG->dirroot`) and can be edited with any text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when modifying `config.php`! Moodle depends heavily on its content,
    and any faults can cause the software to malfunction.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should create a backup of the config file before modifying it, so you can
    roll back to it in case of problems. Also, ensure the file permissions are correctly
    set, as the file contains the plain-text database username and password. In a
    Linux environment, the owner should be `root`, the group also `root`, and the
    permissions set to `644`. A sample configuration file is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_A.01_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.1 – Sample config.php file
  prefs: []
  type: TYPE_NORMAL
- en: 'The `config.php` values we are interested in are the ones that start with a
    dollar symbol. Each parameter has the following information format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `<object>` parameter is the part of Moodle in which the parameter is used
    (`$CFG` or `$THEME`). Third-party modules or custom distributions might have introduced
    their own objects—for example, `$TOTARA`. We will focus on `$CFG` objects as these
    are most relevant to administrators.
  prefs: []
  type: TYPE_NORMAL
- en: '`<parameter>` is the name of the configuration setting. Each setting has a
    unique identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<value>` parameter must be of the type the parameter accepts, which depends
    on the type of the setting. The following table provides information for each
    of the types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_A.02_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.2 – Data types supported in configuration settings
  prefs: []
  type: TYPE_NORMAL
- en: Each parameter has to be terminated by a semi-colon. To comment out a parameter,
    precede it with two forward slashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we deal with the different settings, we’ll discuss some tools that might
    come in useful. As there is no list of available settings, you have to generate
    your own. To do so, execute the following shell command in your `$CFG->dirroot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This concatenated set of commands will generate a list of all available `$CFG`
    variables in alphabetical order. The `moosh config-get` command (see [*Chapter
    17*](B18779_17.xhtml#_idTextAnchor325), *Working with Moodle Admin Tools*) only
    provides you with a list of all config variables that can be set via Moodle’s
    admin interface and are stored in `mdl_config`; it excludes the *hidden* variables
    we are interested in here.
  prefs: []
  type: TYPE_NORMAL
- en: Moodle provides a report that lets you monitor all changes to any config settings
    via the administration interface. You can find the report at **Site administration**
    | **Reports** |**Config changes**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_A.03_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.3 – Config changes report
  prefs: []
  type: TYPE_NORMAL
- en: The table shows any changes made to settings in the **Site administration**
    section. For each modification, **Date**, **First name / Surname**, **Plugin**,
    **Setting**, **New value**, and **Original value** are shown.
  prefs: []
  type: TYPE_NORMAL
- en: If you are experimenting with configuration variables, consider using the site
    admin presets we discussed in [*Chapter 17*](B18779_17.xhtml#_idTextAnchor325),
    *Working with Moodle Admin Tools*. The tool lets you create backups of site settings,
    which can then be rolled back if something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration reference – administration settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each parameter in the `config.php`. If a value has been set via this method,
    it is effectively hardcoded and cannot be changed via the Moodle interface, not
    even by the administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you might want to ensure that an administrator does not turn on
    HTTPS for logins on an internal site, even by accident. Activating this would
    lock everybody out of the site if no SSL certificate is installed. To do this,
    enter the following line in `config.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How do you know what the parameter is called? Go to the respective setting in
    Moodle (in this case, **Site administration** | **Security** | **HTTP security**),
    and you will see the parameter’s name underneath the label.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can search for any parameter in the search box of the administration menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the value is specified in `config.php`, Moodle will display **Defined in
    config.php** beside the parameter, which indicates that the setting cannot be
    changed via the admin interface. Invalid values are also shown for these hardcoded
    settings. In the following screenshot, the **Debug messages** value is incorrect
    while the **Display debug messages** value is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_A.04_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.4 – Hardcoded configuration settings
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to force plugin settings, you must put them in a special array called
    `forced_plugin_settings` (see the reference to optional parameters later).
  prefs: []
  type: TYPE_NORMAL
- en: Configuration reference – system settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the actual reference for configuration settings; the explanations
    have been taken from help pages, forum posts, and comments in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Default parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Default parameters are settings created by the installer, derived from `config-dist.php`.
    Most settings are compulsory for Moodle to operate, so be careful when modifying
    them. The parameters are listed in the order in which they appear by default in
    `config.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_A.05_B18779.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.5 – config.php default parameters
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the default parameters, there are hundreds of optional parameters,
    some of which we will deal with in the following subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Optional parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are over 300 `config.php` parameters that cannot be modified via the Moodle
    administrator interface. These hidden settings allow you to modify the behavior
    of Moodle without the requirement to change any code.
  prefs: []
  type: TYPE_NORMAL
- en: We only cover a representative list of settings, ignoring those that are only
    relevant to developers and designers. We have also disregarded obsolete and obscure
    parameters and ones that have a counterpart in the admin settings. Parameters
    have been listed in alphabetical order, and some have been grouped for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Available types are **A**rray, **B**inary, **N**umeric, **L**ist, and **S**tring:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| adhoctaskageerroradhoctaskagewarn | N | Moodle checks how old tasks are in
    the ad hoc queue and warns at 10 minutes and errors at 4 hours. |'
  prefs: []
  type: TYPE_TB
- en: '| admineditalways | B | When set to true, enables admins to edit any post at
    any time. |'
  prefs: []
  type: TYPE_TB
- en: '| apacheloguser | N | Logging Apache: `0` = off, `1` = user id, `2` = full
    name, `3` = username. |'
  prefs: []
  type: TYPE_TB
- en: '| apachemaxmem | N | Memory threshold over which Apache children will be reaped
    after they complete serving the request. |'
  prefs: []
  type: TYPE_TB
- en: '| backuptempdir | S | It is possible to specify a different backup temp directory.
    Use a local (fast) filesystem for normal web servers. Server clusters must use
    a shared filesystem for `backuptempdir`. The directory must not be accessible
    via the web. |'
  prefs: []
  type: TYPE_TB
- en: '| bounceratio | N | The default is `20`. See `$CFG->handlebounces`. |'
  prefs: []
  type: TYPE_TB
- en: '| customfiletypes | A | Adding entries to **Site administration** &#124; **Server**
    &#124; **File types**, for instance.'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '&#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| customfrontpageinclude | S | You can replace the home page with your own
    version. [moodle.org](http://moodle.org) uses this approach. Only the center area
    will be replaced, not the header, footer, or blocks. |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| customscripts | S | Enabling this will allow custom scripts (to be specified
    with the full path name) to replace existing moodle scripts. For example, if `$CFG->customscripts/course/view.php`
    exists, then it will be used instead of `$CFG->wwwroot/course/view.php`. Currently,
    this will only work for files that include `config.php` and are called as part
    of the URL (`index.php` is implied). Custom scripts should not include `config.php`.Warning:
    Replacing standard Moodle scripts may pose a security risk and/or may not be compatible
    with upgrades. However, this is useful when having to patch a particular page
    without actually overwriting the core code. |'
  prefs: []
  type: TYPE_TB
- en: '| debugimapdebugsmtp | B | Enable verbose debug information while sending email
    messages to the IMAP/SMTP server (requires `$CFG->debug` to be set to `DEBUG_DEVELOPER`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| debugusers | S | Comma-separated list of user IDs that always see debug messages.
    |'
  prefs: []
  type: TYPE_TB
- en: '| defaultblocks | A | Default block variables for new courses, for instance,
    `participants`, `activity_modules`, `search_forums`, `admin`, `course_list`, `news_items`,
    `calendar_upcoming`, `recent_activity`. This setting can be overridden for different
    course types, such as `defaultblocks_social`, `defaultblocks_weeks`, and `defaultblocks_topics`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| disablemycourses | B | This setting will prevent the My Courses page from
    being displayed when users log in. The home page will always show the same (logged-out)
    view. |'
  prefs: []
  type: TYPE_TB
- en: '| disableonclickaddoninstall | B | Disable the plugin installation feature
    and hide it from the server administration user interface. |'
  prefs: []
  type: TYPE_TB
- en: '| disablestatsprocessing | B | Prevent stats processing and hide the GUI. |'
  prefs: []
  type: TYPE_TB
- en: '| disableupdateautodeploy | B | Disables update deployment. Useful when deployment
    is done via Git checkouts. |'
  prefs: []
  type: TYPE_TB
- en: '| disableupdatenotifications | B | Disables update notifications. Useful when
    deployment is done via Git checkouts. |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| disableusercreationonrestore | B | Completely disable user creation when
    restoring a course. Enabling this setting results in the restore process stopping
    when a user attempts to restore a course requiring users to be created. |'
  prefs: []
  type: TYPE_TB
- en: '| divertallemailsto | S | Divert all outgoing emails to this address to test
    and debug emailing features. |'
  prefs: []
  type: TYPE_TB
- en: '| emailconnectionerrorsto | S | Email database connection errors to someone.
    If Moodle cannot connect to the database, email this address with a notice. |'
  prefs: []
  type: TYPE_TB
- en: '| expectedcronfrequency | N | Moodle checks that the cron is running frequently.
    If the time between cron runs exceeds this value (in seconds), you get a warning
    on the admin page. This setting only controls whether or not the warning appears;
    it has no other effect. |'
  prefs: []
  type: TYPE_TB
- en: '| filedir | S | You can specify an alternative to `dataroot`. |'
  prefs: []
  type: TYPE_TB
- en: '| filelifetime | N | Seconds for files to remain in caches (default is `86400`,
    which equals 24 hours). Decrease this if you are worried about students being
    served outdated versions of uploaded files. |'
  prefs: []
  type: TYPE_TB
- en: '| filepermissions |  | Same as `directorypermissions` in the default parameters,
    but for created files. |'
  prefs: []
  type: TYPE_TB
- en: '| forced_plugin_settings | A | Plugin settings have to be specified as an array
    of arrays:`array(''plugin1'' => array(''param1'' => ''value1'', (''param2'' =>
    ''value2'', …), (''plugin2'' => array(''param1'' => ''value1'', (''param2'' =>
    ''value2'', …), …);` |'
  prefs: []
  type: TYPE_TB
- en: '| forcedefaultmymoodle | B | If set, the My Moodle page cannot be customized
    by users. |'
  prefs: []
  type: TYPE_TB
- en: '| forcefirstnameforcelastname | S | To anonymize usernames for all students.
    If set, then all non-teachers will always see this for every person. |'
  prefs: []
  type: TYPE_TB
- en: '| gradeoverhundredprocentmax | N | If `unlimitedgrades` is set, you can specify
    a maximum value (`1` = 100%, default = `10`). |'
  prefs: []
  type: TYPE_TB
- en: '| handlebounces | B | This is for handling email bounces. Used in conjunction
    with `minbounces` and `bounceratio`. |'
  prefs: []
  type: TYPE_TB
- en: '| httpswwwroot | S | `wwwroot` for SSL pages. |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| includeuserpasswordsinbackup | B | Allow user passwords to be included in
    backup files. Use only if you can guarantee that all your backup files remain
    private, as password hashes can be unencrypted. |'
  prefs: []
  type: TYPE_TB
- en: '| keeptempdirectoriesonbackup | B | Keep the temporary directories used by
    backup and restore without being deleted at the end of the process. See also the
    *Managing courses in bulk* section in [*Chapter 4*](B18779_04.xhtml#_idTextAnchor074)*,
    Managing Courses* *and Enrolments*. |'
  prefs: []
  type: TYPE_TB
- en: '| langlocalroot | S | Alternative directory to `$CFG->dataroot/lang`. |'
  prefs: []
  type: TYPE_TB
- en: '| localcachedir | S | It is possible to specify different cache and temp directories.
    Use local (fast) filesystem for normal web servers. Server clusters must use a
    shared filesystem for `cachedir`. `localcachedir` is intended for server clusters;
    it does not have to be shared by cluster nodes. The directories must not be accessible
    via the web. |'
  prefs: []
  type: TYPE_TB
- en: '| maildomain | S | Your email domain. |'
  prefs: []
  type: TYPE_TB
- en: '| mailprefix | S | `mdl+` is the separator for Exim and Postfix, `mdl-` is
    the separator for qmail. |'
  prefs: []
  type: TYPE_TB
- en: '| minbounces | N | The default is `10`. See `$CFG->handlebounces`. |'
  prefs: []
  type: TYPE_TB
- en: '| mnetkeylifetime | N | The number of days until the networking key expires.
    See [*Chapter 19*](B18779_19.xhtml#_idTextAnchor344)*, Setting Up Moodle Networking*,
    for details. |'
  prefs: []
  type: TYPE_TB
- en: '| noemailever | B | When working with production data on test servers, no emails
    or other messages should ever be sent to real users. |'
  prefs: []
  type: TYPE_TB
- en: '| opensslcnf | S | Location of the `openssl.cnf` file. |'
  prefs: []
  type: TYPE_TB
- en: '| passwordsaltmain | S | Random string added to the md5 password hash. See
    [*Chapter 13*](B18779_13.xhtml#_idTextAnchor251)*, Ensuring Moodle Security*,
    for details. |'
  prefs: []
  type: TYPE_TB
- en: '| pdfexportfont | S | The font used in exported PDF files. When generating
    a PDF, Moodle embeds a subset of the font in the PDF file so it will be readable
    on the widest range of devices (the default is `freesans`). |'
  prefs: []
  type: TYPE_TB
- en: '| preferlinegraphs | B | This setting will make some graphs (for instance,
    user logs) use lines instead of bars. |'
  prefs: []
  type: TYPE_TB
- en: '| preventscheduledtaskchanges | B | Disable editing of tasks in **Site administration**
    **&#124;** **Server** **&#124;** **Scheduled tasks**. |'
  prefs: []
  type: TYPE_TB
- en: '| reverseproxy | B | Enable when setting up advanced reverse proxy load balancing
    configurations and port forwarding. |'
  prefs: []
  type: TYPE_TB
- en: '| showcrondebugging | B | Add debug info to cron output. |'
  prefs: []
  type: TYPE_TB
- en: '| showcronsql | B | Show executed SQL queries during cron execution. |'
  prefs: []
  type: TYPE_TB
- en: '| **Name** | **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| skiplangupgrade | B | Disables automatic language update and lets translators
    (lang pack maintainers) keep their `moodledata/lang/*` to update manually. |'
  prefs: []
  type: TYPE_TB
- en: '| sslproxy | B | Enable when using an external SSL appliance for performance
    reasons. |'
  prefs: []
  type: TYPE_TB
- en: '| supportuserid | N | Emails to support can be redirected to another user.
    |'
  prefs: []
  type: TYPE_TB
- en: '| tagsort | S | Sort tags in tag cloud by specified field; default = `name`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| themedir | S | Add an extra themes directory outside of `$CFG->dirroot`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| themeorder | A | Priority of themes from highest to lowest. The default is
    `array(''course'', ''category'', ''session'', ''``user'', ''site'')`. |'
  prefs: []
  type: TYPE_TB
- en: '| themerev | B | Prevent theme caching. |'
  prefs: []
  type: TYPE_TB
- en: '| tracksessionip | B | Moodle will track the current user’s IP to ensure it
    hasn’t changed during a session. This will prevent the possibility of sessions
    being hijacked via XSS, but it may break things for users using proxies that change
    frequently. |'
  prefs: []
  type: TYPE_TB
- en: '| trashdir | S | Alternative location for `$CFG->dirroot/trashdir`. |'
  prefs: []
  type: TYPE_TB
- en: '| undeletableblocktypes | A | The blocks in this list are protected from deletion,
    for example, `navigation,settings`. |'
  prefs: []
  type: TYPE_TB
- en: '| uninstallclionly | B | This stops admins from uninstalling plugins from the
    admin user interface and forces plugins to be uninstalled from the command-line
    tool only, found at `admin/cli/plugin_uninstall.php`. |'
  prefs: []
  type: TYPE_TB
- en: '| upgradekey | S | Password protection during the upgrade process. See [docs.moodle.org/en/Upgrade_key](http://docs.moodle.org/en/Upgrade_key)
    for details. |'
  prefs: []
  type: TYPE_TB
- en: '| upgraderunning | B | Pretend Moodle update is running. |'
  prefs: []
  type: TYPE_TB
- en: '| upgradeshowsql | B | Show executed SQL queries during upgrades. |'
  prefs: []
  type: TYPE_TB
- en: '| usezipbackups | B | Use ZIP compression in backups instead of default TGZ.
    |'
  prefs: []
  type: TYPE_TB
- en: '| wordlist | S | List words used by Moodle’s Word censorship filter. |'
  prefs: []
  type: TYPE_TB
