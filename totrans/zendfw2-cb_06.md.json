["```php\n<?php\n\n  namespace Sample;\n\n  class Module {}\n```", "```php\n  public function getConfig()\n  {\n    return include __DIR__ . '/config/module.config.php';\n  }\n```", "```php\n<?php\n\nreturn array();\n```", "```php\npublic function onBootstrap(MvcEvent $e)\n{\n  // Let's do something on the bootstrap!\n}\n```", "```php\n<?php \n\nnamespace Application;\n\n// Use the following classes\nuse Zend\\ModuleManager\\ModuleManager;\nuse Zend\\ModuleManager\\ModuleEvent;\n\nclass Module\n{\n  public function init(ModuleManager $moduleManager)\n  {\n    // We can get the event manager from our module manager\n    $eventManager = $moduleManager->getEventManager();\n\n    // Now we will attach ourselves to the event manager's event\n    $eventManager->attach(\n      ModuleEvent::EVENT_LOAD_MODULES_POST,\n      function(ModuleEvent $event)\n      {\n        // Do something with our event, for example print the name  \n        // of the module to the screen.\n        echo '<pre>'. $event->moduleName. '</pre>';\n      },\n      // Make sure the rest of the triggers all have been \n      // triggered already\n      -1000\n    );\n\n  }\n}\n```", "```php\npublic function getAutoloaderConfig()\n{\n  return array( \n    'Zend\\Loader\\StandardAutoloader' => array(\n      'namespaces' => array(\n        __NAMESPACE__ => __DIR__. '/src/'. __NAMESPACE__\n      ),\n    ),\n  );\n}\n```", "```php\npublic function getAutoloaderConfig()\n{\n  return array(\n    'Zend\\Loader\\ClassMapAutoloader' => array(\n      __DIR__. '/autoload_classmap.php',\n    ),\n    'Zend\\Loader\\StandardAutoloader' => array(\n      'namespaces' => array(\n        __NAMESPACE__ => __DIR__. '/src/'. __NAMESPACE__\n      ),\n    ),\n  );\n}\n```", "```php\n<?php\nreturn array(\n  'Sample\\Model\\Test' => __DIR__. '/src/Sample/Model/Test.php', \n  'Sample\\Model\\Test2' => __DIR__. '/src/Sample/Model/Test2.php',\n);\n```", "```php\n<?php\n\nnamespace Application;\n\n// We need this for the view helper config to be picked up\nuse Zend\\ModuleManager\\Feature\\ViewHelperProviderInterface;\n\nclass ModuleViewHelperProviderInterface\n{\n  public function getViewHelperConfig()   \n  {\n    // See if the class exists first, to show off that we can use \n    return array(\n      'invokables' => array(\n          // This is a non existing view helper, but is just to \n          // show off how to use it.\n          // Note: You cannot use a closure as an invokable.\n          'exampleHelp' => 'Application\\View\\Helper\\Example',\n       )\n    );\n  }\n}\n```", "```php\nmodule/\n   Comment/\n      config/\n         module.config.php\n      src/\n         Comment/\n            Controller/\n               IndexController.php\n      view/\n         comment/\n            index/\n               index.phtml\n      Module.php\n```", "```php\n<?php\n\nnamespace Comment;\n\nclass Module\n{\n  // Get our module configuration\n  public function getConfig()\n  {\n    return include __DIR__ \n         . '/config/module.config.php';\n  }\n\n  // Initialize our autoloader to load in our sources\n  public function getAutoloaderConfig()\n  {\n    return array(\n      'Zend\\Loader\\StandardAutoloader' => array(\n        'namespaces' => array(\n          __NAMESPACE__ => __DIR__. '/src/'\n                         . __NAMESPACE__,\n        ),\n      ),\n    );\n  }\n}\n```", "```php\n<?php\n\nreturn array(\n  // Set up a quick route to our comment output\n  'router' => array(\n    'routes' => array(\n      'comment' => array(\n        'type' => 'Zend\\Mvc\\Router\\Http\\Literal',\n        'options' => array(\n          'route'    => '/comment',\n          'defaults' => array(\n            'controller' => 'Comment\\Controller\\Index',\n            'action'     => 'index',\n          ),\n        ),\n      ),\n    ),\n  ),\n\n  // Make sure the controllers are invokable by us\n  'controllers' => array(\n    'invokables' => array(\n      'Comment\\Controller\\Index' =>\n                    'Comment\\Controller\\IndexController'\n    ),\n  ),\n\n  // Set the path to our view templates\n  'view_manager' => array(\n    'template_path_stack' => array(\n       __DIR__ . '/../view',\n    ),\n  ),\n);\n```", "```php\n<?php\n\nnamespace Comment\\Controller;\n\nuse Zend\\Mvc\\Controller\\AbstractActionController;\nuse Zend\\View\\Model\\ViewModel;\n\nclass IndexController extends AbstractActionController\n{\n  // This is the action that will be called whenever we \n  // browse to /comment\n  public function indexAction()\n  {\n    // Initialize our view model\n    $view = new ViewModel();\n    $comments = array();\n\n    // Create some static comments and put them in our \n    // comments array\n    for ($i = 0; $i < 10; $i++) {\n      $comments[] = array(\n          'name' => 'John Doe ('. $i. '),\n          'comment' => 'Lorem ipsum dolor sit amet...'\n      );\n    }\n\n    // Return our view with the comments and make sure \n    // the renderer doesn't output our layout \n    // (setTerminal(true) does that)\n    return $view->setVariable('comments', $comments)\n                ->setTerminal(true);\n  }\n}\n```", "```php\n<?php /* loop through the comments to display them */ ?>\n<?php foreach ($this->comments as $comment) : ?>\n  <tr>\n    <td>\n      <?php echo $comment['name'] ?>:\n    </td>\n    <td>\n      <?php echo $comment['comment'] ?>\n    </td>\n  </tr>\n<?php endforeach; ?>\n```", "```php\n<?php\n\nnamespace Comment\\View\\Helper;\n\nuse Zend\\View\\Helper\\AbstractHelper;\nuse Comment\\Controller\\IndexController;\n\nclass Comments extends AbstractHelper\n{\n  public function __invoke()\n  {\n    // Instantiate the controller with the comments\n    $controller = new IndexController();\n\n    // Execute our indexAction to retrieve the \n    // ViewModel, and then add the template of that \n    // ViewModel so it renders fine\n    $model = $controller->indexAction()->setTemplate(\n              'comment/index/index'\n    );\n\n    // Now return our rendered view\n    return $this->getView()\n               ->render($model);\n  }\n}\n```", "```php\n  // Add our custom view helper to the configuration\n  'view_helpers' => array(\n    'invokables' => array(\n      'comments' => 'Comment\\View\\Helper\\Comments',\n    ),\n  ),\n```", "```php\n<?php echo $this->comments() ?>\n```", "```php\npublic function forwardAction()\n{\n  $view = new ViewModel();\n\n  // Get the comments from the index action \n  $comments = $this->forward()\n                   ->dispatch(\n    // Which controller do we want to invoke\n    'Comment\\Controller\\Index', \n\n    // Any specific options we want to give it\n    array('action' => 'index')\n  );\n\n  // If we keep this on true it will return an \n  // exception, so let us not do that\n  $comments->setTerminal(false);\n\n  // Return the view model with the comments as child\n  return $view->addChild($comments, 'comments');\n}\n```", "```php\n<?php echo $this->comments ?>\n```", "```php\n<!-- our comments will load in here -->\n<table class=\"comments\"></table>\n\n<!-- first we want to make sure that we load in the jQuery script that comes with the Zend Framework 2 skeleton application -->\n<script src=\"img/jquery.min.js') ?>\"></script>\n\n<!-- this is the JavaScript bit -->\n<script>\n  // This means jQuery will execute this code whenever \n  // the document is done loading\n  $(document).ready(function() {\n    // We want to do a GET request in the background\n    $.get(\n      // We want to get this URL\n      '/comment', \n\n      // This function will be executed when the \n      // data comes back from the server\n      function(data) {\n        // Put our data (the comments) in our \n        // comments table\n       $('table.comments').html(data);\n      }\n    );\n  });\n</script>\n```", "```php\nuse Application\\Model\\SampleModel;\n\n$object = new SampleModel();\n```", "```php\n$object = new \\Application\\Model\\SampleModel();\n```", "```php\nuse Application\\Model\\SampleModel as NewModel;\n\n$object = new NewModel();\n```", "```php\n<?php\n\nnamespace Application\\Model;\n\nclass SampleModel \n{\n  private $engine;\n  private $primary;\n  private $text;\n\n  public function getEngine() {\n    return $this->engine;\n  }\n\n  public function setEngine($engines) {\n    $this->engine = $engines;\n  }\n\n  public function getPrimary() {\n    return $this->primary;\n  }\n\n  public function setPrimary($primary) {\n    $this->primary = $primary;\n  }\n\n  public function getText() {\n    return $this->text;\n  }\n  public function setText($text) {\n    $this->text = $text;\n  }\n}\n```", "```php\n<?php\n\n// Don't forget to namespace our class\nnamespace Application\\Model\\Hydrator;\n\n// We extend from this class\nuse Zend\\Stdlib\\Hydrator\\AbstractHydrator;\n\nclass SampleModelHydrator extends AbstractHydrator\n{\n  private $mapping = array(\n    'id' => 'primary',\n    'value' => 'engine',\n    'description' => 'text',\n  );\n\n  // Extracts the hydrated model   \n  public function extract($object) {}\n\n  // Hydrates our values to our model\n  public function hydrate(array $data, $object) {}\n}\n```", "```php\npublic function hydrate(array $data, $object) \n{\n  // If we are not receiving an object, throw an \n  // exception\n  if (is_object($object) === false) {\n    throw new \\Exception(\n      \"We expect object to be an actual object!\"\n    );\n  }\n\n  // Loop through the properties and values \n  foreach ($data as $property=>$value) {\n    // Check if the property exists in our mapping\n    if (array_key_exists($property, $this->mapping)) {\n      // Build the setter method from our property\n      $setter = 'set'. ucfirst(\n         $this->mapping[$property]\n      );\n\n    // Set the value of the property\n    $object->$setter($value);\n    }\n  }\n\n  // Now return our hydrated object\n  return $object;\n}\n```", "```php\npublic function extract($object) \n{\n  // If we are not receiving an object, throw an \n  // exception\n  if (is_object($object) === false) {\n    throw new \\Exception(\n         \"We expect object to be an actual object!\"\n      );\n  }\n\n  $return = array();\n\n  foreach ($this->mapping as $key=>$map) {\n    // Build the getter method from our property\n    $getter = 'get'. ucfirst($map);\n\n    // Get the property value from the object\n    $return[$key] = $object->$getter();\n  }\n\n  return $return;\n}\n```", "```php\npublic function setPrimary($primary) \n{\n  // Throw an exception if there is no valid integer.\n  if (!is_int($primary)) {\n    throw new \\Exception(\n       \"Primary ({$primary}) should be an integer!\"\n    );\n  }\n\n  $this->primary = $primary;\n}\n```", "```php\n<?php\n\nnamespace Application\\Model\\Hydrator\\Strategy;\n\n// We need to implement this interface to make it \n// eligible to be a strategy\nuse Zend\\Stdlib\\Hydrator\\Strategy\\StrategyInterface;\n\nclass SampleHydratorStrategy implements StrategyInterface\n{\n\n  // This method is called every time an object is \n  // extracted\n  public function extract($value) \n  {\n    // Check if the value is an integer\n    if (is_int($value) === true) { \n      return (int)$value;\n    } else {\n      // No integer, just randomly return an integer\n      return rand(0, 10000);\n    }\n  }\n\n  // This method is called just before the property of \n  // the object is hydrated\n  public function hydrate($value) \n  {\n    // Check if it is a valid integer\n    if (is_int($value) === true) {\n      return (int)$value;\n    } else {\n      // No integer, random integer is returned\n      return rand(0, 10000);\n    }\n  }\n}\n```", "```php\npublic function extract($object)\n{\n  [.. current code in between ..]\n\n  $return[$key] = $this->extractValue(\n      $key, $object->$getter()\n  );\n\n  [.. rest of the code ..] \n}\n\npublic function hydrate(array $data, $object)\n{\n  [.. current code in between ..]\n\n  $object->$setter($this->hydrateValue(\n      $this->mapping[$property], $value)\n  );\n\n  [.. rest of the code ..]\n}\n```", "```php\n<?php\n\nnamespace Application\\Controller;\n\nuse Application\\Model\\SampleModel;\nuse Application\\Model\\Hydrator\\SampleModelHydrator;\nuse Application\\Model\\Hydrator\\Strategy\\SampleHydratorStrategy;\nuse Zend\\Mvc\\Controller\\AbstractActionController;\n\nclass IndexController extends AbstractActionController\n{\n  public function indexAction()\n  {\n    // First initialize our model\n    $model = new \\Application\\Model\\SampleModel();\n\n    // Now create a sample array of data to hydrate\n    $data = array(\n      'id' => 'Some Id',\n      'value' => 'Some Awesome Value',\n      'description' => 'Pecunia non olet',\n    );\n    // Now create our Hydrator\n    $hydrator = new SampleModelHydrator();\n\n    // Now add our strategy to it to check when the primary \n    // value is set (if we put id, it would be when the \n    // value would be retrieved)\n    $hydrator->addStrategy(\n        \"primary\", \n        new SampleHydratorStrategy()\n    );\n\n    // Now hydrate our model\n    $newObject = $hydrator->hydrate($data, $model);\n\n    // And if necessary extract the values again\n    $extract = $hydrator->extract($newObject); \n\n    // Now output it to the browser\n    echo \"<pre>\". print_r($extract, true). \"</pre>\";\n  }\n}\n```", "```php\nApi\\Model\\Db\\User\\Information\n```", "```php\n/**\n * This is used to describe the method, file or class.\n *\n * @param string $parameterOne Some description here.\n * @result Boolean\n * @throws Some\\Exception\n * @author J. Callaars <bcallaars@gmail.com>\n */\npublic function someMethod($parameterOne);\n```", "```php\n<?php\n\nnamespace Application\\Service;\n\nuse Zend\\ServiceManager\\ServiceLocatorAwareInterface,\n    Zend\\ServiceManager\\ServiceLocatorInterface;\n\nclass Example implements ServiceLocatorAwareInterface \n{\n  protected $serviceLocator;\n\n  // This is set by our initialization so we don't \n  // actually have to do this ourselves probably\n  public function setServiceLocator(ServiceLocatorInterface $serviceLocator) \n  {\n    $this->serviceLocator = $serviceLocator;\n  }\n\n  // Retrieve the service locator, handy if we want to \n  // read some configuration\n  public function getServiceLocator() \n  {\n    return $this->serviceLocator;\n  }\n\n  // Let's create a simple string to rot13 encoder as an \n  // example\n  public function encodeMyString($string)\n  {\n    return str_rot13($string);\n  }\n}\n```", "```php\n<?php \nreturn array(\n  'service_manager' => array(\n    'invokables' => array(\n      // We are going to call our service through the \n      // ExampleService name\n      'ExampleService' => 'Application\\Service\\Example',\n    ),\n  ),\n);\n```", "```php\n// This is an example from within a controller and \n// returns a rot13 encoded string\necho $this->getServiceLocator()\n          ->get('ExampleService')\n          ->encodeMyString(\"Service? Easily created!\");\n```", "```php\n// This is executed from within a service class and will \n// return the configuration of the application\n$config = $this->getServiceLocator()->get('config');\n```"]