["```php\n    docker-compose up\n    ```", "```php\n    docker-compose exec php bash restore.sh\n    ```", "```php\n    127.0.0.1 subsite1.local\n    127.0.0.1 subsite1-alternative.local\n    127.0.0.1 test.subsite1.local\n    ```", "```php\nclass MyInstaller extends AbstractInstaller\n{    \n    public function install()    {}\n    public function uninstall()  {}\n    public function isInstalled(){\n        return true;\n    }\n    public function canBeInstalled(){\n        return false;\n    }\n    public function canBeUninstalled(){\n        return false;\n    }\n    public function needsReloadAfterInstall() {\n        return false;\n    }\n```", "```php\n    <?php\n    namespace BlogBundle\\Setup;\n    ... usages\n    class BlogInstaller  extends AbstractInstaller\n    {    \n    }\n    ```", "```php\n    services:\n        BlogBundle\\Setup\\BlogInstaller:\n            public: true\n            autowire: true\n    ```", "```php\n    public function getInstaller() {        \n         return $this->container->get(\n         BlogInstaller::class);      \n    }       \n    ```", "```php\n    public function install(){       \n         $files = $this->getClassesToInstall();\n         foreach ($files as $file) {\n              $data = file_get_contents($file);\n              $json= json_decode($data);\n              $name= $json->id;\n              $class = ClassDefinition::getById($name);\n              if($class) continue; // do not overwrite\n              $class = new ClassDefinition();\n              $class->setName($json->id);\n              $class->setId($json->id);\n    Service::importClassDefinitionFromJson($class, $data, false, true);\n         }\n    }\n    ```", "```php\n    protected function getClassesToInstall()\n    {        \n         $realpath = realpath(__DIR__.\"/../\n         Resources/install/class_sources/\");\n         $files=glob($realpath.'/*.json');           \n         return $files;\n    }\n    ```", "```php\n    public function canBeInstalled(){\n            return true;\n        } \n    ```", "```php\ndoctrine_migrations:\n      migrations_paths:\n          'App\\Migrations': 'src/Migrations'\n```", "```php\nbin/console doctrine:migrations:generate --namespace=App\\\\Migrations\n```", "```php\n<?php\nnamespace App\\Migrations;\n… uses\nclass Version20210227065641 extends AbstractMigration\n{\n    public function up(Schema $schema)    {\n          //do things here\n    }\n    public function down(Schema $schema)    {\n          //do things here\n    }\n} \n```", "```php\n        $table = $schema->createTable('foo');\n        $table->addColumn('title', 'string');\n        $table->addColumn('description', 'string');\n        $schema->dropTable('foo');\n```", "```php\n./bin/console --env=dev ...\n```", "```php\n    services:\n     …\n      php:\n       …\n       environment: \n        - PIMCORE_ENVIRONMENT=dev\n        - PIMCORE_HOST=db\n        - PIMCORE_DB=pimcore\n        - PIMCORE_USERNAME=pimcore\n        - PIMCORE_PASSWORD=pimcore\n        - PIMCORE_PORT=3306 \n    ```", "```php\n    # - { resource: 'local/' } removed... it users environments now!\n    ```", "```php\n    doctrine:\n        dbal:\n            connections:\n                default:              \n                    host: '%PIMCORE_HOST%'\n                    port: '%PIMCORE_PORT%'\n                    dbname: '%PIMCORE_DB%'\n                    user: '%PIMCORE_USERNAME%' \n                    password: '%PIMCORE_PASSWORD%'\n    parameters:\n        PIMCORE_ENVIRONMENT: '%env(PIMCORE_ENVIRONMENT)%'\n        PIMCORE_HOST:  '%env(PIMCORE_HOST)%'\n        PIMCORE_DB:  '%env(PIMCORE_DB)%'\n        PIMCORE_USERNAME:  '%env(PIMCORE_USERNAME)%'\n        PIMCORE_PASSWORD:  '%env(PIMCORE_PASSWORD)%'\n        PIMCORE_PORT: '%env(PIMCORE_PORT)%'\n    ```"]