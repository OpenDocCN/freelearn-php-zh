- en: Chapter 1. Setting Up Our First Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Chi ben comincia è a metà dell''opera."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*(Italian for "Well begun is half done.")*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Every journey has a beginning, and only a hero with the right equipment can
    attain a victory. Of course, there are no exceptions for the 21st century hero:
    the developer!'
  prefs: []
  type: TYPE_NORMAL
- en: In order to avoid problems and fight the bad (and malfunctioning) code monster,
    the good code artisan will prepare everything necessary before the start.
  prefs: []
  type: TYPE_NORMAL
- en: A developer has to be comfortable with the tools they are going to use, and
    a good development environment can awesomely improve the process. So, before getting
    our hands dirty, in this chapter, we will discover how to deal with Composer and
    Homestead.
  prefs: []
  type: TYPE_NORMAL
- en: Composer is an awesome dependency management tool, which is used by many PHP
    projects around the world. Homestead is the official Laravel Vagrant box that
    lets you create a fully functional development environment on a dedicated virtual
    machine in a matter of minutes. Finally, we will cover the installation process
    of our very first Laravel project.
  prefs: []
  type: TYPE_NORMAL
- en: 'I know what you are thinking: you just want to write code, code, and more code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be patient for a little while: if you know the tools we are going to analyze,
    at the end of this chapter, you will feel an enormous difference.'
  prefs: []
  type: TYPE_NORMAL
- en: Trust me.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Swiss Army Knife: Composer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your safe place: Homestead'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The new hideout: Homestead improved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A bonus tool: Adminer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your best friend: Laravel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your first project: EloquentJourney'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Swiss Army Knife – Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first thing you will need to work with Laravel (and then Eloquent)
    is Composer. Composer is a dependency management tool for PHP. With this tool,
    you can easily include every dependency that is needed in your project. This is
    done in seconds, using a JSON configuration file named `composer.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, dependencies in a PHP project were managed with PEAR or other methods.
    Composer has a different policy: everything works on a per-project basis. This
    means that you can have two projects on the same server with different versions
    of the same dependency package.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Composer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation procedure is ridiculously easy. All you have to do, is to go
    on the **Download** page of the Composer website and find the right method for
    your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have Linux or Mac, just use this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or, if you don''t have cURL, then use this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, the `composer.phar` file will be downloaded in your current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On Windows, you can simply download the dedicated installer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once Composer is installed, I suggest putting its path in the `PATH` variable
    of your system, in order to use it wherever you want. There are many ways to do
    it, which depend on your operating system. Let's look at each.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux, you can move Composer to the right directory simply with the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The same goes for OS X, but sometimes, the `usr` directory doesn't exist. You
    must create `usr/local/bin` manually.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, on Windows, you must open the control panel and type `environment variable`
    or something similar. The search utility will do the rest for you. Once in the
    right window, you will get a list of all environment variables. Find `PATH` and
    add the composer installation path to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The composer.json and autoload files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we go deep into our project, let's take a look at how Composer works.
  prefs: []
  type: TYPE_NORMAL
- en: In the `composer.json` file, the developer specifies every single dependency
    for its project. You can also create your packages, but we are not going to look
    at how to create them in this book.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's say that you want to create a project that uses Monolog for logging
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder for the project, then create an empty text file, and name it
    `composer.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open it and all you will have to do is to include your dependency as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, save the file and type the following in your project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait a minute to download everything, and then you are done!
  prefs: []
  type: TYPE_NORMAL
- en: 'What? OK, here is how it works: Composer downloads every package you may need
    and automatically creates a loader for all your packages. So, to use your dependencies
    in your project, you will just need to include `vendor/autoload.php`, and you
    are good to go.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that you have an `index.php` file as a start file for your application.
    You will have to perform something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Nothing more!
  prefs: []
  type: TYPE_NORMAL
- en: Why am I showing this to you? Well, Laravel and Eloquent are Composer packages.
    So, in order to use it and create a Laravel application, you have to know how
    the mechanism works!
  prefs: []
  type: TYPE_NORMAL
- en: The most used commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Composer is a command-line tool. Every good CLI tool has some important commands,
    and in this little section, I will show you what we are going to use the most.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we have the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this command, you can create a new project using a specific package as
    a base. You will use this command to create a new Laravel project using the following
    syntax:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, you can find:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are two similar commands; they are similar, but not the same. When you
    specify your dependencies in the `composer.json` file, you can use `install` to
    install them. If you already installed them but you want to update your dependencies
    to a newer version, use `update`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to know what must and must not be updated, Composer uses the `composer.lock`
    file, which you can see in the root of your project. Actually, you will never
    have to work with it, but it's important to know that Composer uses it as a *log*
    of what it does.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sometimes, you will also see this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can use `require` to include dependencies in your project on the fly. Here''s
    an example of Monolog inclusion using `require`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Another often used command is:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command regenerates the `autoload.php` file. It can be useful if you add
    some classes into your projects without using namespaces or PSR conventions and
    rules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sometimes, you will have to use (after a warning):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command updates Composer itself. Just a few seconds, and you are up and
    running again!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, you can use the following special command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use it to execute a specific command in the Composer home directory. As I mentioned
    before, Composer works on a per-project basis, but sometimes you will need to
    install some tools globally. With the global command, you can do it easily.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That's all you need to know about Composer right now, and yes, there are many
    other commands, but we don't need them now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a step forward: it''s time to learn about Homestead!'
  prefs: []
  type: TYPE_NORMAL
- en: Your safe place – Homestead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we start a new project, we might also stumble upon many compatibility and
    environment issues. The first one to think about is the PHP version. Maybe you
    are using XAMPP or some preconfigured stack on your local machine. For your new
    project, you want to use PHP 5.6, but the installed version is 5.3 (as you used
    it for some older projects). Fine, no problem; you can just install 5.6, and you
    are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, but after two days, the phone rings. It's your *old* customer; finally,
    it's time to make some improvements and add new features! So, you start your stack
    services, browse your old project index, and BOOM! Compatibility issues, compatibility
    issues everywhere! Not exactly the best way to start your day.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a code problem, but an environment problem.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, the best solution is to start using Vagrant. Vagrant is a fantastic
    tool that lets you create a virtual machine with a headless operating system in
    order to configure the virtual machine on a per-project basis. Also, you can share
    some folders from your local machine with that machine, so you can work on an
    isolated environment while working with your favorite IDE and operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the per-project basis is the most important part of the entire thing.
    If you configure a separate machine for a single project, you can tweak everything
    you want to reach the perfect environment. Also, with Vagrant, you will be able
    to set your local environment in the same way your production machine is configured.
    So, no more *local to production* bugs and issues!
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, the fun (and useful) thing about Vagrant is that you can
    put a specific box under version control. So, for every new team member, all you
    have to do is to clone the repository and start the machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This looks complicated, but it is not. With Vagrant you can easily download
    a box (a ready-to-use virtual machine with all the tools and applications you
    need) and start it with a simple command from the shell as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The Laravel community knows a couple of things about Vagrant and makes up a
    Vagrant Box to help you in your job.
  prefs: []
  type: TYPE_NORMAL
- en: '![Your safe place – Homestead](img/3634_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Homestead is the official Vagrant Box for Laravel and already has everything
    you need to get started. You will find it (already installed and working), by
    default:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ubuntu 14.04 | Node (with Bower, Grunt, and Gulp) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PHP 5.6 | Redis |'
  prefs: []
  type: TYPE_TB
- en: '| HHVM | Memcached |'
  prefs: []
  type: TYPE_TB
- en: '| nginx | Beanstalkd |'
  prefs: []
  type: TYPE_TB
- en: '| MySQL | Laravel Envoy |'
  prefs: []
  type: TYPE_TB
- en: '| PostgreSQL | Fabric + Hipchat Extension |'
  prefs: []
  type: TYPE_TB
- en: Not too bad for a tool box that you can prepare in a matter of minutes!
  prefs: []
  type: TYPE_NORMAL
- en: Now let's stop discussing and install Homestead.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homestead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, ensure that you have already installed VirtualBox ([https://www.virtualbox.org/](https://www.virtualbox.org/))
    and Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/)). You can
    install them on every operating system, so feel free to use whichever you want.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to work with a good shell on Windows, I suggest you use Cmder ([http://bliker.github.io/cmder/](http://bliker.github.io/cmder/)).
    While writing this book, I referred to the same link.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can add Homestead to our local boxes. This means that Vagrant will
    download the Homestead box in order to be used locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do it with a simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You will have to wait a couple of minutes to download the box. So, if you want
    to have a coffee, this is the perfect moment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you don't have to worry about where Vagrant is placing the box, as it
    is going to save it locally in the Vagrant folder. In the future, every time you
    will need a specific box, Vagrant will clone and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, your box is now on your local machine and ready to be started. However,
    accordingly to your local machine settings, you can install Homestead in two different
    ways. They are both present in the official Laravel documentation, so they are
    both *official*.
  prefs: []
  type: TYPE_NORMAL
- en: The Composer and PHP tool way
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start with the first one: it is a perfect choice if you already have
    Composer and PHP on your local machine. Note that you are only going to do these
    steps the first time.'
  prefs: []
  type: TYPE_NORMAL
- en: Use this command to install the Homestead CLI tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then, be sure to put the `~/.composer/vendor/bin` directory in the `PATH` environment
    variable, in order to use the tool wherever you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can initialize your machine. Use the `init` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will create a `~/.homestead` folder with a `Homestead.yaml` inside of it.
    This file will be used by Vagrant at the virtual machine start.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Composer and PHP tool way](img/3634_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Git way
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have PHP and Composer installed on your local machine (or maybe
    you just don't want to use them), no problem. You can simply use Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose a folder where you want to save your virtual machine. Then, clone the
    repository with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `HomesteadFolder` is the place you chose for your VM files. After the
    clone process, use `cd` to get into the folder and start the `init` script using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This script will create a `Homestead.yaml` file in a `~/.homestead` directory,
    and that's it!
  prefs: []
  type: TYPE_NORMAL
- en: The following steps for installation are the same for both the methods you just
    saw.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Homestead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we go forward, let's take a look at the default `Homestead.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you are unfamiliar with this syntax, no problem; it's a simple YAML (YAML
    *ain't* a markup language) markup file. It is a very readable way to specify settings,
    and Homestead uses it. Here, you can choose the IP address for your virtual machine
    and other settings. Tweak the configuration file accordingly to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Do you see the `authorize` property in the `Homestead.yaml` file? Well, we are
    going to set up our SSH key and put its path there. If it scares you, don't worry;
    it is just a command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are using Windows, the Laravel documentation recommends Git Bash. Personally,
    as I mentioned before, I prefer to use Cmder. However, you can also use PuTTY
    or whatever you want. Use `ssh-keygen –t rsa –C "you@homestead"` to generate your
    ssh key. This is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring Homestead](img/3634_01_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Put the generated SSH key path in the `authorize` property of `Homestead.yaml`,
    as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Done? Good. Now, you can see a `folders` property as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As I mentioned before, Vagrant lets the developer share some folders between
    the local and virtual machines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the point of that? Well, it is really important because with this system
    we can work on our project on a separate machine, while being able to use whatever
    IDE or tool we want from our local machine. For example, even if the VM has Ubuntu,
    I can easily use Windows 8.1 and PHPStorm. The best of both worlds!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, Homestead suggests this structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, this means that you will have to create a `Code` folder in your user folder.
    This local folder will be mapped to a `/home/vagrant/Code` folder on the VM; every
    change that you make there will be reflected on the virtual machine and vice versa.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can customize this mapping to your needs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at the `sites` property. Here''s what you can see
    in a default setup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can define a custom domain for every project, which is a really comfortable
    way to work with your projects, as you will no longer need to test your project
    with an IP (like 192.168.10.10), only a simple local domain, such as `myproject.dev`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is a good point to define a separate site for our project. So, feel free
    to add these lines to your file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, go to your host''s file (on the host machine) and add this record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can see how you need to add it in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring Homestead](img/3634_01_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, you have to insert the same IP you specified in the `Homestead.yaml`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last thing we are going to see here is the `database` property. For every
    name you add here, Homestead will automatically create a database to work with.
    So, edit the property to something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is because we are going to use a separate `eloquent_journey` MySQL database
    for our test application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default username for the MySQL server is `homestead`, and the default password
    is `secret`.
  prefs: []
  type: TYPE_NORMAL
- en: We have nothing more to do here; our setup is complete, and now we are ready
    to boot up our virtual machine and use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new hideout: Homestead improved'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if Homestead is a fantastic box, many people complain about some of its
    structural *choices*. As I mentioned previously, Vagrant is used to create virtual
    machines on a per-project basis. This means that, in an ideal situation, every
    project must have its own VM. Now, with Homestead, you can create a single VM
    and manage all your projects on it. Some people like this idea, and it is more
    familiar to the classical XAMPP approach. Quite familiar!
  prefs: []
  type: TYPE_NORMAL
- en: However, other people like a more *pure* approach to Vagrant. While doing some
    researches on this concept, I stumbled upon *Homestead Improved* ([https://github.com/Swader/homestead_improved](https://github.com/Swader/homestead_improved))
    by *Swader*, on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: It is an improved version of Homestead that you can install and run without
    saving files all around your user folder. A really good approach! Also, you won't
    have to configure any SSH keys or execute `apt-get update` and `composer auto-update`.
    Everything will be done automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use Homestead Improved, just open your terminal and type the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, `MyHomesteadImprovedVM` will be the containing folder of all the VM's
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the clone procedure, just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: So, you're done! Easier than before, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: A bonus tool – Adminer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going deeper along our journey, there is another really useful tool that
    I want to show you. I am talking about Adminer, a Database Management tool entirely
    contained in a single `.php` file. You can download it at [http://www.adminer.org/](http://www.adminer.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you will find the Adminer interface very similar to the phpMyAdmin interface.
    It's true, but Adminer has more features. Just to make a simple example, phpMyAdmin
    only supports MySQL. Instead, Adminer supports MySQL, PostgreSQL, SQLite, Oracle,
    and MS SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '![A bonus tool – Adminer](img/3634_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, you can use whatever you want to deal with your database. However,
    I wanted to show you Adminer because it is what I am going to use to show, from
    time to time, some query results or various examples. So, it would be good if
    you get more familiar with this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your best friend: Laravel'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are close to the end. You have a weapon (Composer) and a safe place to do
    everything you want without worrying about issues (Homestead). What about an ally?
    Laravel could be a good one, don''t you think? Also, Laravel is the Eloquent container:
    we are going to create a new project with it to fully embrace its power.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Laravel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before going further, remember that Laravel has some prerequisites. You will
    need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP 5.4 (or more recent versions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP Mcrypt extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP OpenSSL extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP Mbstring extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using PHP 5.5, you may need to install the JSON PHP extension. If
    this is the case, just type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: So, you are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, if you have installed Homestead, everything is already in its right
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you have to do is to boot up the VM with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And when the bootstrap procedure is done, use the following command to get
    in the machine via SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Having said that, as you may have experienced from Homestead, Laravel also gives
    you two different ways to install it and create a new project.
  prefs: []
  type: TYPE_NORMAL
- en: The first one is done using a specific tool, the Laravel installer tool. It's
    a CLI tool that you can install as a global Composer package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one is a simple `composer create-project` command. Of course, we
    will now see both ways.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Laravel installer tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Laravel installer tool is a nice utility that lets you create a new Laravel
    project with a very simple syntax. Imagine that you want to create a new project
    in a folder called `my_project`. All you have to do, if you have the tool installed,
    is to type this and nothing more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Installing the tool is easy. Just open the terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As you saw before, we are executing the `require` command with the `global`
    keyword. This means that the installer tool package will be saved in the Composer's
    `global` folder and the tool will be available everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any problems running the tool, just be sure to put `~/.composer/vendor/bin`
    in the `PATH` environment variable. Otherwise, it won't work!
  prefs: []
  type: TYPE_NORMAL
- en: Using the Composer create-project command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't want to install the Laravel installer tool, you can simply use
    the `create-project` command of Composer.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you have to do, in this case, is use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here, `ProjectName` stands for the folder name that you want to use as the root
    of your new Laravel project.
  prefs: []
  type: TYPE_NORMAL
- en: Nothing more to do here! Your Laravel project is now fully installed in your
    specified folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to configure the right permissions on your folders and ensure you take
    a good look at the URL rewriting rules. If you take a look at the Laravel-dedicated
    documentation page ([http://laravel.com/docs/5.0/installation#pretty-urls](http://laravel.com/docs/5.0/installation#pretty-urls)),
    you can learn how to do it on Apache or nginx.
  prefs: []
  type: TYPE_NORMAL
- en: The first project – EloquentJourney
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A new project will be the perfect metaphor for our new, fantastic journey! While
    studying Eloquent, we will build a simple project. More specifically, we will
    analyze a hypothetical library management system's data-related part and its components.
  prefs: []
  type: TYPE_NORMAL
- en: 'What are you waiting for? Let''s start! First of all, create a new project
    (using your favorite method). We will call our new project `EloquentJourney`.
    Type the following in your server folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, type the following if you prefer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Wait a few seconds to build the project, and after the installation procedure,
    you are done! You can use `cd` to get into your new folder and see what's there.
  prefs: []
  type: TYPE_NORMAL
- en: Cool! All right, but what are we going to do now? There are thousands of files
    here and in other subfolders! Don't worry. Take a breath and follow me. First
    of all, we need to do some practice with the Laravel configuration system in order
    to set up an appropriate database connection.
  prefs: []
  type: TYPE_NORMAL
- en: Without it, we could not use Eloquent!
  prefs: []
  type: TYPE_NORMAL
- en: The configuration system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everything you could need on configuration is stored in the `config` directory.
    Every file here has quite a descriptive name: `app.php`, `database.php`, `filesystems.php`,
    `cache.php`, and so on. Actually, we are going to use two of these files: `app.php`,
    for some basic settings, and `database.php`, for obvious reasons.'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let's open the `app.php` file and see what you can find inside.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'A Laravel config file contains a return instruction. The returned value is
    an associative array. As you can easily imagine, the key-value system represents
    the configuration item name and its value. For example, let''s examine the first
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This means that the `app.debug` configuration item is set on the Boolean value
    true.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel uses these values all around the framework code, and you can use them
    too with the `\Config` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, if you want to retrieve a specific item value, you have to call
    the `get()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set a specific `Config` value at runtime, this time using the
    `set()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the database connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, we finally arrived at the end of this chapter. The last thing we need to
    do here, is to set up the database connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open the `database.php` file under `config`. You should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The two most important items are `default` and `connections`. In this second
    item, `connections`, we are storing all the information we need to connect to
    our databases. By default, you will find many examples. In fact, here you can
    see the `sqlite`, then `mysql`, and also `sqlsrv` connections.
  prefs: []
  type: TYPE_NORMAL
- en: Every connection has a driver. The `driver` element indicates the used database
    for that connection. If you want, you can specify more than one connection, when
    necessary. The `default` element represents the chosen connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s delete everything and replace the `default` and `connections` elements
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: What did we just do?
  prefs: []
  type: TYPE_NORMAL
- en: Quite simple! We have defined an `eloquentJourney` connection. This connection
    will use the `mysql` driver. So, we are going to connect Laravel to a MySQL server.
    I am not going to explain the other properties, as it is really easy to understand
    their meanings.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we specified the connection name as the default option. This means
    that, for every future call to a database-related operation, Laravel will connect
    to the server specified in the `eloquentJourney` connection with the given credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We did it!
  prefs: []
  type: TYPE_NORMAL
- en: We prepared everything that is needed to work with Laravel and Eloquent. We
    set up a local development server, learned the basics of Composer to correctly
    manage our dependencies, installed a couple of more useful tools, and, finally,
    successfully configured our database connection. Not bad for the first chapter,
    huh?
  prefs: []
  type: TYPE_NORMAL
- en: However, we have just begun, and our journey inside Eloquent is at the very
    beginning. We are ready to leave our safe house, go into the darkest corner of
    the Eloquent ORM to explore it, and understand all of its secrets.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will be a great ride. And now, let''s explore our first topic on our way:
    the Schema Builder and the migrations system, to build the perfect database!'
  prefs: []
  type: TYPE_NORMAL
