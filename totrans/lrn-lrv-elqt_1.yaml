- en: Chapter 1. Setting Up Our First Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 设置我们的第一个项目
- en: '*"Chi ben comincia è a metà dell''opera."*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"Chi ben comincia è a metà dell''opera."* '
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*(Italian for "Well begun is half done.")*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*(意大利语，意为“良好的开端是成功的一半。”)*'
- en: 'Every journey has a beginning, and only a hero with the right equipment can
    attain a victory. Of course, there are no exceptions for the 21st century hero:
    the developer!'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每次旅行都有一个起点，只有装备齐全的英雄才能取得胜利。当然，21世纪的英雄——开发者也不例外！
- en: In order to avoid problems and fight the bad (and malfunctioning) code monster,
    the good code artisan will prepare everything necessary before the start.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免问题和与不良（以及故障）代码怪物作斗争，优秀的代码工匠会在开始之前准备一切必要的东西。
- en: A developer has to be comfortable with the tools they are going to use, and
    a good development environment can awesomely improve the process. So, before getting
    our hands dirty, in this chapter, we will discover how to deal with Composer and
    Homestead.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者必须熟悉他们将要使用的工具，一个好的开发环境可以极大地提高开发过程。所以，在我们动手之前，在本章中，我们将了解如何处理 Composer 和 Homestead。
- en: Composer is an awesome dependency management tool, which is used by many PHP
    projects around the world. Homestead is the official Laravel Vagrant box that
    lets you create a fully functional development environment on a dedicated virtual
    machine in a matter of minutes. Finally, we will cover the installation process
    of our very first Laravel project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 是一个出色的依赖管理工具，被世界各地的许多 PHP 项目使用。Homestead 是官方的 Laravel Vagrant 箱子，它允许你在几分钟内创建一个完全功能化的开发环境。最后，我们将介绍我们的第一个
    Laravel 项目的安装过程。
- en: 'I know what you are thinking: you just want to write code, code, and more code.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你在想什么：你只想写代码，代码，更多的代码。
- en: 'Be patient for a little while: if you know the tools we are going to analyze,
    at the end of this chapter, you will feel an enormous difference.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有耐心一点：如果你知道我们将在本章末尾分析的工具，你将感受到巨大的差异。
- en: Trust me.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 相信我。
- en: 'Your Swiss Army Knife: Composer'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的瑞士军刀：Composer
- en: 'Your safe place: Homestead'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的安全之地：Homestead
- en: 'The new hideout: Homestead improved'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的藏身之处：改进后的 Homestead
- en: 'A bonus tool: Adminer'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个额外的工具：Adminer
- en: 'Your best friend: Laravel'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的最佳伙伴：Laravel
- en: 'Your first project: EloquentJourney'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的第一个项目：EloquentJourney
- en: Summary
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摘要
- en: Your Swiss Army Knife – Composer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的瑞士军刀 – Composer
- en: The very first thing you will need to work with Laravel (and then Eloquent)
    is Composer. Composer is a dependency management tool for PHP. With this tool,
    you can easily include every dependency that is needed in your project. This is
    done in seconds, using a JSON configuration file named `composer.json`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要与 Laravel（以及 Eloquent）一起工作的工具是 Composer。Composer 是一个 PHP 的依赖管理工具。使用这个工具，你可以轻松地将项目中需要的每个依赖项包含进来。这只需几秒钟，使用一个名为
    `composer.json` 的 JSON 配置文件即可完成。
- en: 'Usually, dependencies in a PHP project were managed with PEAR or other methods.
    Composer has a different policy: everything works on a per-project basis. This
    means that you can have two projects on the same server with different versions
    of the same dependency package.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，PHP 项目的依赖项管理使用 PEAR 或其他方法。Composer 有不同的策略：所有操作都是基于项目的。这意味着你可以在同一服务器上拥有两个项目，它们使用相同依赖项包的不同版本。
- en: Installing Composer
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Composer
- en: The installation procedure is ridiculously easy. All you have to do, is to go
    on the **Download** page of the Composer website and find the right method for
    your operating system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序非常简单。你所要做的，就是访问 Composer 网站的 **下载** 页面，并找到适合你操作系统的正确方法。
- en: 'If you have Linux or Mac, just use this:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用 Linux 或 Mac，只需这样做：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or, if you don''t have cURL, then use this:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，如果你没有 cURL，那么使用这个：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, the `composer.phar` file will be downloaded in your current directory.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，`composer.phar` 文件将下载到你的当前目录。
- en: On Windows, you can simply download the dedicated installer.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，你可以简单地下载专门的安装程序。
- en: Once Composer is installed, I suggest putting its path in the `PATH` variable
    of your system, in order to use it wherever you want. There are many ways to do
    it, which depend on your operating system. Let's look at each.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Composer 安装完成，我建议将其路径添加到系统的 `PATH` 变量中，以便在任何地方使用它。这有很多方法，取决于你的操作系统。让我们看看每种方法。
- en: 'On Linux, you can move Composer to the right directory simply with the following
    command:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上，你可以使用以下命令将 Composer 移动到正确的目录：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The same goes for OS X, but sometimes, the `usr` directory doesn't exist. You
    must create `usr/local/bin` manually.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 OS X，情况也相同，但有时 `usr` 目录不存在。你必须手动创建 `usr/local/bin`。
- en: Finally, on Windows, you must open the control panel and type `environment variable`
    or something similar. The search utility will do the rest for you. Once in the
    right window, you will get a list of all environment variables. Find `PATH` and
    add the composer installation path to it.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在Windows上，你必须打开控制面板，输入`环境变量`或类似的内容。搜索实用程序会为你完成剩下的工作。一旦进入正确的窗口，你将看到一个所有环境变量的列表。找到`PATH`并将Composer安装路径添加到其中。
- en: The composer.json and autoload files
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: composer.json和autoload文件
- en: Before we go deep into our project, let's take a look at how Composer works.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入我们的项目之前，让我们看看Composer是如何工作的。
- en: In the `composer.json` file, the developer specifies every single dependency
    for its project. You can also create your packages, but we are not going to look
    at how to create them in this book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`composer.json`文件中，开发者指定了其项目的每个单个依赖项。你还可以创建自己的包，但在这本书中我们不会探讨如何创建它们。
- en: So, let's say that you want to create a project that uses Monolog for logging
    purposes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想创建一个使用Monolog进行日志记录的项目。
- en: Create a folder for the project, then create an empty text file, and name it
    `composer.json`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目创建一个文件夹，然后创建一个空白的文本文件，并将其命名为`composer.json`。
- en: 'Open it and all you will have to do is to include your dependency as shown:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开它，你只需按照以下所示包含你的依赖项：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After that, save the file and type the following in your project directory:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，保存文件，并在你的项目目录中输入以下内容：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Wait a minute to download everything, and then you are done!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一下，下载所有内容，然后你就完成了！
- en: 'What? OK, here is how it works: Composer downloads every package you may need
    and automatically creates a loader for all your packages. So, to use your dependencies
    in your project, you will just need to include `vendor/autoload.php`, and you
    are good to go.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？好吧，这是它的工作方式：Composer下载你可能需要的每个包，并自动为所有包创建一个加载器。所以，为了在你的项目中使用依赖项，你只需包含`vendor/autoload.php`，然后你就可以开始了。
- en: 'Let''s say that you have an `index.php` file as a start file for your application.
    You will have to perform something like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个`index.php`文件作为你应用程序的起始文件。你将不得不执行以下操作：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Nothing more!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有更多了！
- en: Why am I showing this to you? Well, Laravel and Eloquent are Composer packages.
    So, in order to use it and create a Laravel application, you have to know how
    the mechanism works!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我要向你展示这个？好吧，Laravel和Eloquent是Composer包。所以，为了使用它并创建一个Laravel应用程序，你必须了解这个机制是如何工作的！
- en: The most used commands
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最常用的命令
- en: Composer is a command-line tool. Every good CLI tool has some important commands,
    and in this little section, I will show you what we are going to use the most.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一个命令行工具。每个好的CLI工具都有一些重要的命令，在这个小节中，我将向你展示我们将要使用最多的命令。
- en: 'First of all, we have the following:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们有以下内容：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this command, you can create a new project using a specific package as
    a base. You will use this command to create a new Laravel project using the following
    syntax:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此命令，你可以使用特定的包作为基础创建一个新的项目。你将使用此命令创建一个新的Laravel项目，使用以下语法：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, you can find:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，你可以找到：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These are two similar commands; they are similar, but not the same. When you
    specify your dependencies in the `composer.json` file, you can use `install` to
    install them. If you already installed them but you want to update your dependencies
    to a newer version, use `update`.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个命令很相似；它们很相似，但并不相同。当你指定`composer.json`文件中的依赖项时，你可以使用`install`来安装它们。如果你已经安装了它们，但想将依赖项更新到新版本，请使用`update`。
- en: Note
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to know what must and must not be updated, Composer uses the `composer.lock`
    file, which you can see in the root of your project. Actually, you will never
    have to work with it, but it's important to know that Composer uses it as a *log*
    of what it does.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了知道必须更新什么和不应该更新什么，Composer使用`composer.lock`文件，你可以在项目的根目录中看到它。实际上，你永远不需要与它打交道，但重要的是要知道Composer将其用作*日志*。
- en: 'Sometimes, you will also see this:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，你也会看到这个：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can use `require` to include dependencies in your project on the fly. Here''s
    an example of Monolog inclusion using `require`:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用`require`在运行时将依赖项包含到你的项目中。以下是一个使用`require`包含Monolog的示例：
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another often used command is:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个常用的命令是：
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command regenerates the `autoload.php` file. It can be useful if you add
    some classes into your projects without using namespaces or PSR conventions and
    rules.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令重新生成`autoload.php`文件。如果你在项目中添加了一些没有使用命名空间或PSR约定和规则的类，这可能很有用。
- en: 'Sometimes, you will have to use (after a warning):'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，你必须在警告之后使用（）：
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command updates Composer itself. Just a few seconds, and you are up and
    running again!
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令更新 Composer 本身。只需几秒钟，你就可以再次运行了！
- en: 'Finally, you can use the following special command:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你可以使用以下特殊命令：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use it to execute a specific command in the Composer home directory. As I mentioned
    before, Composer works on a per-project basis, but sometimes you will need to
    install some tools globally. With the global command, you can do it easily.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用它来在 Composer 主目录中执行特定命令。如我之前提到的，Composer 是基于每个项目工作的，但有时你需要全局安装一些工具。使用全局命令，你可以轻松完成。
- en: That's all you need to know about Composer right now, and yes, there are many
    other commands, but we don't need them now.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要知道的关于 Composer 的就这么多，是的，还有很多其他命令，但现在我们不需要它们。
- en: 'Let''s take a step forward: it''s time to learn about Homestead!'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更进一步：现在是时候了解 Homestead 了！
- en: Your safe place – Homestead
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的安全之地 – Homestead
- en: When we start a new project, we might also stumble upon many compatibility and
    environment issues. The first one to think about is the PHP version. Maybe you
    are using XAMPP or some preconfigured stack on your local machine. For your new
    project, you want to use PHP 5.6, but the installed version is 5.3 (as you used
    it for some older projects). Fine, no problem; you can just install 5.6, and you
    are good to go.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始一个新的项目时，我们可能会遇到许多兼容性和环境问题。首先需要考虑的是 PHP 版本。也许你正在使用 XAMPP 或你本地机器上的一些预配置的栈。对于你的新项目，你希望使用
    PHP 5.6，但安装的版本是 5.3（因为你用它处理了一些旧项目）。好吧，没问题；你只需安装 5.6，然后就可以继续了。
- en: Yes, but after two days, the phone rings. It's your *old* customer; finally,
    it's time to make some improvements and add new features! So, you start your stack
    services, browse your old project index, and BOOM! Compatibility issues, compatibility
    issues everywhere! Not exactly the best way to start your day.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，但两天后，电话响了。是你的*老*客户；终于，是时候做一些改进并添加新功能了！所以，你启动你的栈服务，浏览你的旧项目索引，然后BOOM！兼容性问题，到处都是兼容性问题！这绝对不是开始新的一天的好方法。
- en: This is not a code problem, but an environment problem.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个代码问题，而是一个环境问题。
- en: Actually, the best solution is to start using Vagrant. Vagrant is a fantastic
    tool that lets you create a virtual machine with a headless operating system in
    order to configure the virtual machine on a per-project basis. Also, you can share
    some folders from your local machine with that machine, so you can work on an
    isolated environment while working with your favorite IDE and operating system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，最好的解决方案是开始使用 Vagrant。Vagrant 是一个出色的工具，它允许你创建一个带有无头操作系统的虚拟机，以便根据每个项目配置虚拟机。此外，你还可以将本地机器上的某些文件夹与该机器共享，这样你就可以在一个隔离的环境中工作，同时使用你喜欢的
    IDE 和操作系统。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the per-project basis is the most important part of the entire thing.
    If you configure a separate machine for a single project, you can tweak everything
    you want to reach the perfect environment. Also, with Vagrant, you will be able
    to set your local environment in the same way your production machine is configured.
    So, no more *local to production* bugs and issues!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，基于每个项目的基础是整个问题的关键部分。如果你为单个项目配置一个单独的机器，你可以调整你想要的一切以达到完美的环境。此外，使用 Vagrant，你将能够以与生产机器相同的方式设置你的本地环境。所以，再也没有
    *本地到生产* 的错误和问题！
- en: Last but not least, the fun (and useful) thing about Vagrant is that you can
    put a specific box under version control. So, for every new team member, all you
    have to do is to clone the repository and start the machine.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，Vagrant 的有趣（且有用）之处在于，你可以将特定的盒子置于版本控制之下。因此，对于每个新团队成员，你所要做的就是克隆仓库并启动机器。
- en: 'This looks complicated, but it is not. With Vagrant you can easily download
    a box (a ready-to-use virtual machine with all the tools and applications you
    need) and start it with a simple command from the shell as shown:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很复杂，但实际上并不复杂。使用 Vagrant，你可以轻松下载一个盒子（一个包含所有所需工具和应用程序的现成虚拟机），然后从 shell 中使用简单命令启动它，如下所示：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Laravel community knows a couple of things about Vagrant and makes up a
    Vagrant Box to help you in your job.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 社区对 Vagrant 了解一些，并制作了一个 Vagrant Box 来帮助你完成工作。
- en: '![Your safe place – Homestead](img/3634_01_01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![你的安全之地 – Homestead](img/3634_01_01.jpg)'
- en: 'Homestead is the official Vagrant Box for Laravel and already has everything
    you need to get started. You will find it (already installed and working), by
    default:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Homestead 是 Laravel 的官方 Vagrant Box，已经包含了你开始所需的一切。你将默认找到它（已安装并运行）：
- en: '| Ubuntu 14.04 | Node (with Bower, Grunt, and Gulp) |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu 14.04 | Node（带有 Bower、Grunt 和 Gulp）|'
- en: '| --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| PHP 5.6 | Redis |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| PHP 5.6 | Redis |'
- en: '| HHVM | Memcached |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| HHVM | Memcached |'
- en: '| nginx | Beanstalkd |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| nginx | Beanstalkd |'
- en: '| MySQL | Laravel Envoy |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| MySQL | Laravel Envoy |'
- en: '| PostgreSQL | Fabric + Hipchat Extension |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL | Fabric + Hipchat Extension |'
- en: Not too bad for a tool box that you can prepare in a matter of minutes!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个可以在几分钟内准备好的工具箱来说，这已经相当不错了！
- en: Now let's stop discussing and install Homestead.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们停止讨论，开始安装Homestead。
- en: Installing Homestead
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Homestead
- en: First of all, ensure that you have already installed VirtualBox ([https://www.virtualbox.org/](https://www.virtualbox.org/))
    and Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/)). You can
    install them on every operating system, so feel free to use whichever you want.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你已经安装了VirtualBox（[https://www.virtualbox.org/](https://www.virtualbox.org/））和Vagrant（[https://www.vagrantup.com/](https://www.vagrantup.com/））。你可以在任何操作系统上安装它们，所以请随意选择你想要的。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to work with a good shell on Windows, I suggest you use Cmder ([http://bliker.github.io/cmder/](http://bliker.github.io/cmder/)).
    While writing this book, I referred to the same link.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在Windows上使用一个好的shell，我建议你使用Cmder（[http://bliker.github.io/cmder/](http://bliker.github.io/cmder/））。在撰写这本书时，我参考了相同的链接。
- en: Next, we can add Homestead to our local boxes. This means that Vagrant will
    download the Homestead box in order to be used locally.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将Homestead添加到我们的本地虚拟机中。这意味着Vagrant将会下载Homestead虚拟机以便本地使用。
- en: 'You can do it with a simple command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用一个简单的命令来完成：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You will have to wait a couple of minutes to download the box. So, if you want
    to have a coffee, this is the perfect moment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要等待几分钟来下载虚拟机。所以，如果你想喝杯咖啡，这是一个完美的时刻。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, you don't have to worry about where Vagrant is placing the box, as it
    is going to save it locally in the Vagrant folder. In the future, every time you
    will need a specific box, Vagrant will clone and use it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你不必担心Vagrant将虚拟机放在哪里，因为它将会在Vagrant文件夹中本地保存。将来，每次你需要一个特定的虚拟机时，Vagrant都会克隆并使用它。
- en: Alright, your box is now on your local machine and ready to be started. However,
    accordingly to your local machine settings, you can install Homestead in two different
    ways. They are both present in the official Laravel documentation, so they are
    both *official*.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你的虚拟机现在已经在你的本地机器上了，并且已经准备好启动。然而，根据你的本地机器设置，你可以以两种不同的方式安装Homestead。这两种方法都在官方Laravel文档中有介绍，所以它们都是**官方的**。
- en: The Composer and PHP tool way
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Composer和PHP工具方法
- en: 'Let''s start with the first one: it is a perfect choice if you already have
    Composer and PHP on your local machine. Note that you are only going to do these
    steps the first time.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一个开始：如果你已经在本地机器上安装了Composer和PHP，这是一个完美的选择。请注意，你只会在第一次执行这些步骤。
- en: Use this command to install the Homestead CLI tool.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令安装Homestead CLI工具。
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then, be sure to put the `~/.composer/vendor/bin` directory in the `PATH` environment
    variable, in order to use the tool wherever you want.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确保将`~/.composer/vendor/bin`目录放入`PATH`环境变量中，以便在任何地方使用该工具。
- en: 'After that, you can initialize your machine. Use the `init` command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以使用`init`命令初始化你的机器。
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will create a `~/.homestead` folder with a `Homestead.yaml` inside of it.
    This file will be used by Vagrant at the virtual machine start.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会创建一个包含`Homestead.yaml`文件的`~/.homestead`文件夹。这个文件将在虚拟机启动时被Vagrant使用。
- en: '![The Composer and PHP tool way](img/3634_01_02.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Composer和PHP工具方法](img/3634_01_02.jpg)'
- en: The Git way
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git方法
- en: If you don't have PHP and Composer installed on your local machine (or maybe
    you just don't want to use them), no problem. You can simply use Git.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在本地机器上安装PHP和Composer（或者你可能只是不想使用它们），没有问题。你可以简单地使用Git。
- en: 'Choose a folder where you want to save your virtual machine. Then, clone the
    repository with:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个你想要保存虚拟机文件夹的位置。然后，使用以下命令克隆仓库：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, `HomesteadFolder` is the place you chose for your VM files. After the
    clone process, use `cd` to get into the folder and start the `init` script using
    the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`HomesteadFolder`是你为VM文件选择的位置。在克隆过程之后，使用`cd`进入文件夹，并使用以下命令启动`init`脚本：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This script will create a `Homestead.yaml` file in a `~/.homestead` directory,
    and that's it!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将在`~/.homestead`目录中创建一个`Homestead.yaml`文件，这就完成了！
- en: The following steps for installation are the same for both the methods you just
    saw.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才看到的两种安装方法的后续步骤是相同的。
- en: Configuring Homestead
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Homestead
- en: Before we go forward, let's take a look at the default `Homestead.yaml` file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们看看默认的`Homestead.yaml`文件。
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you are unfamiliar with this syntax, no problem; it's a simple YAML (YAML
    *ain't* a markup language) markup file. It is a very readable way to specify settings,
    and Homestead uses it. Here, you can choose the IP address for your virtual machine
    and other settings. Tweak the configuration file accordingly to your needs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个语法不熟悉，没问题；这是一个简单的 YAML（YAML **并非**一种标记语言）标记文件。这是一种非常易于阅读的方式来指定设置，Homestead
    就使用它。在这里，你可以为你的虚拟机选择 IP 地址和其他设置。根据你的需求相应地调整配置文件。
- en: Do you see the `authorize` property in the `Homestead.yaml` file? Well, we are
    going to set up our SSH key and put its path there. If it scares you, don't worry;
    it is just a command.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在 `Homestead.yaml` 文件中看到了 `authorize` 属性吗？好吧，我们将设置我们的 SSH 密钥并将其路径放在那里。如果你感到害怕，不要担心；它只是一个命令。
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you are using Windows, the Laravel documentation recommends Git Bash. Personally,
    as I mentioned before, I prefer to use Cmder. However, you can also use PuTTY
    or whatever you want. Use `ssh-keygen –t rsa –C "you@homestead"` to generate your
    ssh key. This is shown in the following screenshot:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用 Windows，Laravel 文档推荐使用 Git Bash。就我个人而言，如我之前提到的，我更喜欢使用 Cmder。然而，你也可以使用
    PuTTY 或你想要的任何东西。使用 `ssh-keygen –t rsa –C "you@homestead"` 生成你的 SSH 密钥。如下所示：
- en: '![Configuring Homestead](img/3634_01_03.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置 Homestead](img/3634_01_03.jpg)'
- en: 'Put the generated SSH key path in the `authorize` property of `Homestead.yaml`,
    as shown in the following:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的 SSH 密钥路径放在 `Homestead.yaml` 文件的 `authorize` 属性中，如下所示：
- en: '[PRE22]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Done? Good. Now, you can see a `folders` property as well.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成了吗？很好。现在，你可以看到一个 `folders` 属性了。
- en: Note
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As I mentioned before, Vagrant lets the developer share some folders between
    the local and virtual machines.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我之前提到的，Vagrant 允许开发者在本地和虚拟机之间共享一些文件夹。
- en: What is the point of that? Well, it is really important because with this system
    we can work on our project on a separate machine, while being able to use whatever
    IDE or tool we want from our local machine. For example, even if the VM has Ubuntu,
    I can easily use Windows 8.1 and PHPStorm. The best of both worlds!
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样做的目的是什么？好吧，这非常重要，因为有了这个系统，我们可以在一个单独的机器上工作我们的项目，同时能够从我们的本地机器使用任何 IDE 或工具。例如，即使
    VM 上有 Ubuntu，我也可以轻松地使用 Windows 8.1 和 PHPStorm。两者之最佳！
- en: 'By default, Homestead suggests this structure:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Homestead 建议以下结构：
- en: '[PRE23]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Also, this means that you will have to create a `Code` folder in your user folder.
    This local folder will be mapped to a `/home/vagrant/Code` folder on the VM; every
    change that you make there will be reflected on the virtual machine and vice versa.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，这也意味着你将不得不在你的用户文件夹中创建一个 `Code` 文件夹。这个本地文件夹将被映射到 VM 上的 `/home/vagrant/Code`
    文件夹；你在那里所做的任何更改都将反映在虚拟机上，反之亦然。
- en: Note
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can customize this mapping to your needs.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以根据你的需求自定义这个映射。
- en: 'Next, let''s take a look at the `sites` property. Here''s what you can see
    in a default setup:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `sites` 属性。在默认设置中你可以看到以下内容：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can define a custom domain for every project, which is a really comfortable
    way to work with your projects, as you will no longer need to test your project
    with an IP (like 192.168.10.10), only a simple local domain, such as `myproject.dev`.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以为每个项目定义一个自定义域名，这是一个非常舒适的工作方式，因为你将不再需要用 IP 地址（如 192.168.10.10）测试你的项目，只需一个简单的本地域名，例如
    `myproject.dev`。
- en: 'This is a good point to define a separate site for our project. So, feel free
    to add these lines to your file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个为我们的项目定义单独站点的良好时机。所以，请随意将以下行添加到你的文件中：
- en: '[PRE25]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, go to your host''s file (on the host machine) and add this record:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到你的主机文件（在主机机器上）并添加以下记录：
- en: '[PRE26]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can see how you need to add it in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在下面的屏幕截图中看到你需要如何添加它：
- en: '![Configuring Homestead](img/3634_01_04.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置 Homestead](img/3634_01_04.jpg)'
- en: Note
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Of course, you have to insert the same IP you specified in the `Homestead.yaml`
    file.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，你必须插入你在 `Homestead.yaml` 文件中指定的相同 IP。
- en: 'The last thing we are going to see here is the `database` property. For every
    name you add here, Homestead will automatically create a database to work with.
    So, edit the property to something like this:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来要看到的是 `database` 属性。对于你添加的每个名称，Homestead 都会自动创建一个数据库来工作。所以，将属性编辑成如下所示：
- en: '[PRE27]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is because we are going to use a separate `eloquent_journey` MySQL database
    for our test application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们将为我们的测试应用程序使用一个单独的 `eloquent_journey` MySQL 数据库。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default username for the MySQL server is `homestead`, and the default password
    is `secret`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 服务器的默认用户名是 `homestead`，默认密码是 `secret`。
- en: We have nothing more to do here; our setup is complete, and now we are ready
    to boot up our virtual machine and use it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里没有更多的事情要做；我们的设置已经完成，现在我们准备好启动我们的虚拟机并使用它了。
- en: 'The new hideout: Homestead improved'
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的藏身之处：Homestead改进版
- en: Even if Homestead is a fantastic box, many people complain about some of its
    structural *choices*. As I mentioned previously, Vagrant is used to create virtual
    machines on a per-project basis. This means that, in an ideal situation, every
    project must have its own VM. Now, with Homestead, you can create a single VM
    and manage all your projects on it. Some people like this idea, and it is more
    familiar to the classical XAMPP approach. Quite familiar!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 即使Homestead是一个出色的盒子，许多人抱怨其一些结构上的*选择*。正如我之前提到的，Vagrant用于基于项目的虚拟机创建。这意味着，在理想情况下，每个项目都必须有自己的VM。现在，有了Homestead，你可以创建一个单独的VM并管理你所有的项目。有些人喜欢这个主意，而且这与传统的XAMPP方法非常相似。非常熟悉！
- en: However, other people like a more *pure* approach to Vagrant. While doing some
    researches on this concept, I stumbled upon *Homestead Improved* ([https://github.com/Swader/homestead_improved](https://github.com/Swader/homestead_improved))
    by *Swader*, on GitHub.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，其他人更喜欢对Vagrant的更*纯粹*的方法。在研究这个概念的过程中，我偶然发现了由*Swader*在GitHub上创建的*Homestead改进版*
    ([https://github.com/Swader/homestead_improved](https://github.com/Swader/homestead_improved))。
- en: It is an improved version of Homestead that you can install and run without
    saving files all around your user folder. A really good approach! Also, you won't
    have to configure any SSH keys or execute `apt-get update` and `composer auto-update`.
    Everything will be done automatically.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Homestead的改进版本，你可以安装并运行，而无需在用户文件夹中保存文件。这是一个非常好的方法！而且，你也不必配置任何SSH密钥或执行`apt-get
    update`和`composer auto-update`。一切都将自动完成。
- en: 'If you want to use Homestead Improved, just open your terminal and type the
    following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用Homestead改进版，只需打开你的终端并输入以下命令：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, `MyHomesteadImprovedVM` will be the containing folder of all the VM's
    files.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`MyHomesteadImprovedVM`将是所有虚拟机文件的包含文件夹。
- en: 'After the clone procedure, just type the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在克隆过程之后，只需输入以下内容：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: So, you're done! Easier than before, isn't it?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你已经完成了！比以前更容易，不是吗？
- en: A bonus tool – Adminer
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个额外的工具 – Adminer
- en: Before going deeper along our journey, there is another really useful tool that
    I want to show you. I am talking about Adminer, a Database Management tool entirely
    contained in a single `.php` file. You can download it at [http://www.adminer.org/](http://www.adminer.org/).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入旅程之前，还有一个非常有用的工具我想向你展示。我正在谈论Adminer，这是一个完全包含在单个`.php`文件中的数据库管理工具。你可以在[http://www.adminer.org/](http://www.adminer.org/)下载它。
- en: Maybe you will find the Adminer interface very similar to the phpMyAdmin interface.
    It's true, but Adminer has more features. Just to make a simple example, phpMyAdmin
    only supports MySQL. Instead, Adminer supports MySQL, PostgreSQL, SQLite, Oracle,
    and MS SQL.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会发现Adminer界面与phpMyAdmin界面非常相似。这是真的，但Adminer有更多功能。仅举一个简单的例子，phpMyAdmin只支持MySQL。相反，Adminer支持MySQL、PostgreSQL、SQLite、Oracle和MS
    SQL。
- en: '![A bonus tool – Adminer](img/3634_01_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![一个额外的工具 – Adminer](img/3634_01_05.jpg)'
- en: Obviously, you can use whatever you want to deal with your database. However,
    I wanted to show you Adminer because it is what I am going to use to show, from
    time to time, some query results or various examples. So, it would be good if
    you get more familiar with this tool.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你可以使用任何你想要的东西来处理你的数据库。然而，我想向你展示Adminer，因为它是我偶尔用来展示一些查询结果或各种示例的工具。所以，如果你能更熟悉这个工具就更好了。
- en: 'Your best friend: Laravel'
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你最好的朋友：Laravel
- en: 'We are close to the end. You have a weapon (Composer) and a safe place to do
    everything you want without worrying about issues (Homestead). What about an ally?
    Laravel could be a good one, don''t you think? Also, Laravel is the Eloquent container:
    we are going to create a new project with it to fully embrace its power.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束。你有了武器（Composer）和一个安全的地方来做你想要的一切，无需担心问题（Homestead）。那么，盟友呢？Laravel可能是一个不错的选择，你不这么认为吗？此外，Laravel是Eloquent容器：我们将用它来创建一个新的项目，以充分利用其功能。
- en: Installing Laravel
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Laravel
- en: 'Before going further, remember that Laravel has some prerequisites. You will
    need the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请记住Laravel有一些先决条件。你需要以下内容：
- en: PHP 5.4 (or more recent versions)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 5.4（或更高版本）
- en: The PHP Mcrypt extension
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP Mcrypt扩展
- en: The PHP OpenSSL extension
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP OpenSSL扩展
- en: The PHP Mbstring extension
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP Mbstring扩展
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using PHP 5.5, you may need to install the JSON PHP extension. If
    this is the case, just type this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是PHP 5.5，你可能需要安装JSON PHP扩展。如果是这种情况，只需输入以下内容：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: So, you are good to go.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以开始了。
- en: Obviously, if you have installed Homestead, everything is already in its right
    place.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果你已经安装了 Homestead，所有东西都已经在其正确的位置。
- en: 'All you have to do is to boot up the VM with the following command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要做的就是使用以下命令启动虚拟机：
- en: '[PRE31]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And when the bootstrap procedure is done, use the following command to get
    in the machine via SSH:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当引导过程完成后，使用以下命令通过 SSH 进入机器：
- en: '[PRE32]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Having said that, as you may have experienced from Homestead, Laravel also gives
    you two different ways to install it and create a new project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，正如你可能从 Homestead 经验中了解到的，Laravel 也提供了两种不同的方式来安装它并创建一个新项目。
- en: The first one is done using a specific tool, the Laravel installer tool. It's
    a CLI tool that you can install as a global Composer package.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是通过一个特定的工具完成的，即 Laravel 安装器工具。这是一个 CLI 工具，你可以将其作为全局 Composer 包进行安装。
- en: The second one is a simple `composer create-project` command. Of course, we
    will now see both ways.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种是一个简单的 `composer create-project` 命令。当然，我们现在将看到两种方法。
- en: Using the Laravel installer tool
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Laravel 安装器工具
- en: 'The Laravel installer tool is a nice utility that lets you create a new Laravel
    project with a very simple syntax. Imagine that you want to create a new project
    in a folder called `my_project`. All you have to do, if you have the tool installed,
    is to type this and nothing more:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 安装器工具是一个很好的实用工具，它允许你使用非常简单的语法创建一个新的 Laravel 项目。想象一下，你想要在一个名为 `my_project`
    的文件夹中创建一个新的项目。如果你已经安装了该工具，你只需要输入以下内容，无需更多操作：
- en: '[PRE33]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Installing the tool is easy. Just open the terminal and type the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 安装工具很简单。只需打开终端，输入以下内容：
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you saw before, we are executing the `require` command with the `global`
    keyword. This means that the installer tool package will be saved in the Composer's
    `global` folder and the tool will be available everywhere.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用 `global` 关键字执行 `require` 命令。这意味着安装器工具包将被保存在 Composer 的 `global`
    文件夹中，并且工具将在任何地方可用。
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have any problems running the tool, just be sure to put `~/.composer/vendor/bin`
    in the `PATH` environment variable. Otherwise, it won't work!
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行工具时遇到任何问题，请确保将 `~/.composer/vendor/bin` 添加到 `PATH` 环境变量中。否则，它将无法工作！
- en: Using the Composer create-project command
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Composer create-project 命令
- en: If you don't want to install the Laravel installer tool, you can simply use
    the `create-project` command of Composer.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想安装 Laravel 安装器工具，你可以简单地使用 Composer 的 `create-project` 命令。
- en: 'All you have to do, in this case, is use this command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你只需要使用以下命令：
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, `ProjectName` stands for the folder name that you want to use as the root
    of your new Laravel project.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`ProjectName` 代表你想要用作新 Laravel 项目根目录的文件夹名称。
- en: Nothing more to do here! Your Laravel project is now fully installed in your
    specified folder.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有更多的事情要做！你的 Laravel 项目现在已经完全安装在你指定的文件夹中。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be sure to configure the right permissions on your folders and ensure you take
    a good look at the URL rewriting rules. If you take a look at the Laravel-dedicated
    documentation page ([http://laravel.com/docs/5.0/installation#pretty-urls](http://laravel.com/docs/5.0/installation#pretty-urls)),
    you can learn how to do it on Apache or nginx.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保为你的文件夹配置正确的权限，并确保仔细查看 URL 重写规则。如果你查看 Laravel 专门的文档页面 ([http://laravel.com/docs/5.0/installation#pretty-urls](http://laravel.com/docs/5.0/installation#pretty-urls))，你可以学习如何在
    Apache 或 nginx 上进行操作。
- en: The first project – EloquentJourney
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个项目 – EloquentJourney
- en: A new project will be the perfect metaphor for our new, fantastic journey! While
    studying Eloquent, we will build a simple project. More specifically, we will
    analyze a hypothetical library management system's data-related part and its components.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的项目将是我们新、精彩的旅程的完美隐喻！在学习优雅（Eloquent）的过程中，我们将构建一个简单的项目。更具体地说，我们将分析一个假设的图书馆管理系统数据相关部分及其组件。
- en: 'What are you waiting for? Let''s start! First of all, create a new project
    (using your favorite method). We will call our new project `EloquentJourney`.
    Type the following in your server folder:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在等什么？让我们开始吧！首先，创建一个新的项目（使用你喜欢的任何方法）。我们将我们的新项目命名为 `EloquentJourney`。在你的服务器文件夹中输入以下内容：
- en: '[PRE36]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Otherwise, type the following if you prefer:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢，请输入以下内容：
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Wait a few seconds to build the project, and after the installation procedure,
    you are done! You can use `cd` to get into your new folder and see what's there.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几秒钟来构建项目，安装过程完成后，你就完成了！你可以使用 `cd` 命令进入你的新文件夹，看看里面有什么。
- en: Cool! All right, but what are we going to do now? There are thousands of files
    here and in other subfolders! Don't worry. Take a breath and follow me. First
    of all, we need to do some practice with the Laravel configuration system in order
    to set up an appropriate database connection.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！好吧，但我们接下来要做什么？这里和其他子文件夹中有成千上万的文件！别担心。深呼吸，跟我来。首先，我们需要对 Laravel 配置系统进行一些练习，以便设置合适的数据库连接。
- en: Without it, we could not use Eloquent!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 没有它，我们就无法使用 Eloquent！
- en: The configuration system
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置系统
- en: 'Everything you could need on configuration is stored in the `config` directory.
    Every file here has quite a descriptive name: `app.php`, `database.php`, `filesystems.php`,
    `cache.php`, and so on. Actually, we are going to use two of these files: `app.php`,
    for some basic settings, and `database.php`, for obvious reasons.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的所有配置信息都存储在 `config` 目录中。这里的每个文件都有一个相当描述性的名称：`app.php`、`database.php`、`filesystems.php`、`cache.php`
    等等。实际上，我们将使用其中的两个文件：`app.php` 用于一些基本设置，以及 `database.php`，原因很明显。
- en: First of all, let's open the `app.php` file and see what you can find inside.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开 `app.php` 文件，看看里面有什么。
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'A Laravel config file contains a return instruction. The returned value is
    an associative array. As you can easily imagine, the key-value system represents
    the configuration item name and its value. For example, let''s examine the first
    item:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Laravel 配置文件包含一个返回指令。返回的值是一个关联数组。正如你可以想象的那样，键值系统代表配置项的名称及其值。例如，让我们检查第一个项：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This means that the `app.debug` configuration item is set on the Boolean value
    true.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 `app.debug` 配置项被设置为布尔值 true。
- en: Laravel uses these values all around the framework code, and you can use them
    too with the `\Config` class.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 在整个框架代码中使用了这些值，你也可以通过 `\Config` 类来使用它们。
- en: 'Specifically, if you want to retrieve a specific item value, you have to call
    the `get()` method, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，如果你想检索特定项的值，你必须调用 `get()` 方法，如下所示：
- en: '[PRE40]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can also set a specific `Config` value at runtime, this time using the
    `set()` method, as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在运行时设置特定的 `Config` 值，这次使用 `set()` 方法，如下所示：
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Setting up the database connection
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库连接
- en: Yes, we finally arrived at the end of this chapter. The last thing we need to
    do here, is to set up the database connection.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们终于到达了这一章的结尾。在这里我们需要做的最后一件事，就是设置数据库连接。
- en: 'Let''s open the `database.php` file under `config`. You should see something
    like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开 `config` 下的 `database.php` 文件。你应该会看到如下内容：
- en: '[PRE42]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The two most important items are `default` and `connections`. In this second
    item, `connections`, we are storing all the information we need to connect to
    our databases. By default, you will find many examples. In fact, here you can
    see the `sqlite`, then `mysql`, and also `sqlsrv` connections.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的两项是 `default` 和 `connections`。在这个第二项 `connections` 中，我们存储了连接到我们的数据库所需的所有信息。默认情况下，你会找到许多示例。事实上，在这里你可以看到
    `sqlite`、`mysql` 以及 `sqlsrv` 连接。
- en: Every connection has a driver. The `driver` element indicates the used database
    for that connection. If you want, you can specify more than one connection, when
    necessary. The `default` element represents the chosen connection.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接都有一个驱动。`driver` 元素表示该连接使用的数据库。如果你需要，你可以指定多个连接。`default` 元素代表所选连接。
- en: 'Let''s delete everything and replace the `default` and `connections` elements
    with the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除所有内容，并用以下内容替换 `default` 和 `connections` 元素：
- en: '[PRE43]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: What did we just do?
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才做了什么？
- en: Quite simple! We have defined an `eloquentJourney` connection. This connection
    will use the `mysql` driver. So, we are going to connect Laravel to a MySQL server.
    I am not going to explain the other properties, as it is really easy to understand
    their meanings.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单！我们已经定义了一个 `eloquentJourney` 连接。这个连接将使用 `mysql` 驱动。因此，我们将连接 Laravel 到一个
    MySQL 服务器。我不会解释其他属性，因为它们的意义很容易理解。
- en: After that, we specified the connection name as the default option. This means
    that, for every future call to a database-related operation, Laravel will connect
    to the server specified in the `eloquentJourney` connection with the given credentials.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们指定了连接名称作为默认选项。这意味着，对于未来的每一个数据库相关操作的调用，Laravel 都将连接到 `eloquentJourney` 连接指定的服务器，并使用给定的凭证。
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We did it!
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！
- en: We prepared everything that is needed to work with Laravel and Eloquent. We
    set up a local development server, learned the basics of Composer to correctly
    manage our dependencies, installed a couple of more useful tools, and, finally,
    successfully configured our database connection. Not bad for the first chapter,
    huh?
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为使用 Laravel 和 Eloquent 准备了一切所需。我们搭建了本地开发服务器，学习了 Composer 的基础知识以正确管理我们的依赖，安装了几款更有用的工具，最后成功配置了数据库连接。对于第一章来说，这已经很不错了，不是吗？
- en: However, we have just begun, and our journey inside Eloquent is at the very
    beginning. We are ready to leave our safe house, go into the darkest corner of
    the Eloquent ORM to explore it, and understand all of its secrets.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们才刚刚开始，我们在 Eloquent 中的旅程才刚刚起步。我们准备好离开我们的安全屋，深入 Eloquent ORM 的最黑暗角落去探索它，并了解它的所有秘密。
- en: 'It will be a great ride. And now, let''s explore our first topic on our way:
    the Schema Builder and the migrations system, to build the perfect database!'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一次美妙的旅程。现在，让我们探索我们路上的第一个主题：模式构建器和迁移系统，以构建完美的数据库！
