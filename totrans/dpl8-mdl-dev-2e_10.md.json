["```php\nadminister my feature: \n  title: 'Administer my feature' \n  restrict access: true \n```", "```php\npermission_callbacks: \n  - \\Drupal\\node\\NodePermissions::nodeTypePermissions  \n```", "```php\n$accountProxy = \\Drupal::currentUser();  \n```", "```php\n$user = \\Drupal::entityTypeManager()\n  ->getStorage('user')\n  ->load($accountProxy->id());\n```", "```php\n$account = $accountProxy->getAccount();  \n```", "```php\n$account->isAnonymous(); \n$account->isAuthenticated();  \n```", "```php\n$account->getRoles();  \n```", "```php\n$account->hasPermission($permission)  \n```", "```php\nhello_world.hello: \n  path: '/hello' \n  defaults: \n    _controller: '\\Drupal\\hello_world\\Controller\\HelloWorldController::helloWorld' \n    _title: 'Our first route' \n  requirements: \n    _permission: 'access content' \n```", "```php\n$account->hasPermission($permission).   \n```", "```php\n_access: \"TRUE\"  \n```", "```php\n_permission: \"my custom permission,administer site configuration\"  \n```", "```php\n_permission: \"my custom permission+my other permission\"  \n```", "```php\n_role: \"administrator\" \n_role: \"editor,administrator\" \n_role: \"editor+administrator\"  \n```", "```php\n/** \n * Handles the access checking. \n * \n * @param \\Drupal\\Core\\Session\\AccountInterface $account \n * \n * @return \\Drupal\\Core\\Access\\AccessResultInterface \n */ \npublic function access(AccountInterface $account) { \n  return in_array('editor', $account->getRoles()) ? AccessResult::forbidden() : AccessResult::allowed(); \n} \n```", "```php\nuse Drupal\\Core\\Access\\AccessResult; \nuse Drupal\\Core\\Session\\AccountInterface;  \n```", "```php\nreturn AccessResult::forbidden('Editors are not allowed');\n```", "```php\nhello_world.hello: \n  path: '/hello' \n  defaults: \n    _controller: '\\Drupal\\hello_world\\Controller\\HelloWorldController::helloWorld' \n    _title: 'Our first route' \n  requirements: \n    _custom_access: '\\Drupal\\hello_world\\Controller\\HelloWorldController::access' \n```", "```php\nnamespace Drupal\\hello_world\\Access; \n\nuse Drupal\\Core\\Access\\AccessResult; \nuse Drupal\\Core\\Config\\ConfigFactoryInterface; \nuse Drupal\\Core\\Routing\\Access\\AccessInterface; \nuse Drupal\\Core\\Session\\AccountInterface; \n\n/** \n * Access handler for the Hello World route. \n */ \nclass HelloWorldAccess implements AccessInterface { \n\n  /** \n   * @var \\Drupal\\Core\\Config\\ConfigFactoryInterface \n   */ \n  protected $configFactory; \n\n  /** \n   * HelloWorldAccess constructor. \n   * \n   * @param \\Drupal\\Core\\Config\\ConfigFactoryInterface $configFactory \n   */ \n  public function __construct(ConfigFactoryInterface $configFactory) { \n    $this->configFactory = $configFactory; \n  } \n\n  /** \n   * Handles the access checking. \n   * \n   * @param AccountInterface $account \n   * \n   * @return AccessResult \n   */ \n  public function access(AccountInterface $account) { \n    $salutation = $this->configFactory->get('hello_world.custom_salutation')->get('salutation'); \n    return in_array('editor', $account->getRoles()) && $salutation != \"\" ? AccessResult::forbidden() : AccessResult::allowed(); \n  } \n} \n```", "```php\nhello_world.access_checker: \n  class: \\Drupal\\hello_world\\Access\\HelloWorldAccess \n  arguments: ['@config.factory'] \n  tags: \n    - { name: access_check, applies_to: _hello_world_access_check } \n```", "```php\n_custom_access: '\\Drupal\\hello_world\\Controller\\HelloWorldController::access'  \n```", "```php\n_hello_world_access_check: 'TRUE'  \n```", "```php\n$url = Url::fromRoute('hello_world.hello'); \nif ($url->access()) { \n  // Do something. \n}  \n```", "```php\n$access = $accessManager()->checkNamedRoute('hello_world.hello', [], $account)  \n```", "```php\nuser_types.board_members: \n  path: '/board-member' \n  defaults: \n    _controller: '\\Drupal\\user_types\\Controller\\UserTypesController::boardMember' \n    _title: 'Board member' \nuser_types.manager: \n  path: '/manager' \n  defaults: \n    _controller: '\\Drupal\\user_types\\Controller\\UserTypesController::manager' \n    _title: 'Manager' \nuser_types.employee: \n  path: '/employee' \n  defaults: \n    _controller: '\\Drupal\\user_types\\Controller\\UserTypesController::employee' \n    _title: 'Employee' \nuser_types.leadership: \n  path: '/leadership' \n  defaults: \n    _controller: '\\Drupal\\user_types\\Controller\\UserTypesController::leadership' \n    _title: 'Leadership' \n```", "```php\nuser_types.access_checker: \n  class: \\Drupal\\user_types\\Access\\UserTypesAccess \n  arguments: ['@entity_type.manager'] \n  tags: \n    - { name: access_check, applies_to: _user_types_access_check } \n```", "```php\n requirements: \n    _user_types_access_check: 'TRUE'  \n```", "```php\nhello_world.employee: \n  path: '/employee' \n  defaults: \n    _controller: '\\Drupal\\hello_world\\Controller\\UserTypesController::employee' \n    _title: 'Employee' \n  requirements: \n    _user_types_access_check: 'TRUE' \n  options: \n    _user_types: \n      - manager \n      - employee \n```", "```php\nnamespace Drupal\\user_types\\Access; \n\nuse Drupal\\Core\\Access\\AccessResult; \nuse Drupal\\Core\\Entity\\EntityTypeManager; \nuse Drupal\\Core\\Routing\\Access\\AccessInterface; \nuse Drupal\\Core\\Session\\AccountInterface; \nuse Symfony\\Component\\Routing\\Route; \n\n/** \n * Access handler for the User Types routes. \n */ \nclass UserTypesAccess implements AccessInterface { \n\n  /** \n   * @var \\Drupal\\Core\\Entity\\EntityTypeManager \n   */ \n  protected $entityTypeManager; \n\n  /** \n   * UserTypesAccess constructor. \n   * \n   * @param \\Drupal\\Core\\Entity\\EntityTypeManager $entityTypeManager \n   */ \n  public function __construct(EntityTypeManager $entityTypeManager) { \n    $this->entityTypeManager = $entityTypeManager; \n  } \n\n  /** \n   * Handles the access checking. \n   * \n   * @param AccountInterface $account \n   * @param \\Symfony\\Component\\Routing\\Route $route \n   * \n   * @return \\Drupal\\Core\\Access\\AccessResult \n   */ \n  public function access(AccountInterface $account, Route $route) { \n    $user_types = $route->getOption('_user_types'); \n    if (!$user_types) { \n      return AccessResult::forbidden(); \n    } \n    if ($account->isAnonymous()) { \n      return AccessResult::forbidden(); \n    } \n    $user = $this->entityTypeManager->getStorage('user')->load($account->id()); \n    $type = $user->get('field_user_type')->value; \n    return in_array($type, $user_types) ? AccessResult::allowed() : AccessResult::forbidden(); \n  } \n} \n```", "```php\n_csrf_token: 'TRUE' \n```", "```php\n$url = Url::fromRoute('my_module.my_route'); \n$link = [ \n  '#type' => 'link', \n  '#url' => $url, \n  '#title' => 'Protected callback' \n];  \n```", "```php\n$path = $url->toString();  \n```", "```php\n$token = $generator->get('my_value'); \n```", "```php\n$valid = $generator->validate($token, 'my_value');  \n```", "```php\nnamespace Drupal\\hello_world\\Routing; \n\nuse Drupal\\Core\\Routing\\RouteSubscriberBase; \nuse Symfony\\Component\\Routing\\RouteCollection; \n\n/** \n * Subscribes to route events for the Hello World module. \n */ \nclass HelloWorldRouteSubscriber extends RouteSubscriberBase { \n\n  /** \n   * {@inheritdoc} \n   */ \n  protected function alterRoutes(RouteCollection $collection) { \n    $route = $collection->get('user.register'); \n    if (!$route) { \n      return; \n    } \n\n    // Example 1: \n    // We deny access to the Register page in all cases. With this requirement, \n    // it doesn't matter anymore what other access requirements exist or if they \n    // evaluate positively. \n    $route->setRequirement('_access', 'FALSE'); \n\n    // Example 2: \n    // We check for the presence of a specific access requirement and if it exists, \n    // we clear all the access requirements on the route and set our own. \n    if ($route->hasRequirement('_access_user_register')) { \n      $route->setRequirements([]); \n      $route->setRequirement('_user_types_access_check', 'TRUE'); \n    } \n  } \n} \n```", "```php\nhello_world.route_subscriber: \n  class: Drupal\\hello_world\\Routing\\HelloWorldRouteSubscriber \n  tags: \n    - { name: event_subscriber } \n```", "```php\nview product entities: \n  title: 'View Product entities' \nedit product entities: \n  title: 'Edit Product entities' \ndelete product entities: \n  title: 'Delete Product entities' \nadd product entities: \n  title: 'Create new Product entities'  \n```", "```php\n\"access\" = \"Drupal\\products\\Access\\ProductAccessControlHandler\",  \n```", "```php\nnamespace Drupal\\products\\Access; \n\nuse Drupal\\Core\\Entity\\EntityAccessControlHandler; \nuse Drupal\\Core\\Entity\\EntityInterface; \nuse Drupal\\Core\\Session\\AccountInterface; \nuse Drupal\\Core\\Access\\AccessResult; \nuse Drupal\\products\\Entity\\ProductInterface; \n\n/** \n * Access controller for the Product entity type. \n */ \nclass ProductAccessControlHandler extends EntityAccessControlHandler { \n\n  /** \n   * {@inheritdoc} \n   */ \n  protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) { \n    /** @var ProductInterface $entity */ \n    switch ($operation) { \n      case 'view': \n        return AccessResult::allowedIfHasPermission($account, 'view product entities'); \n\n      case 'update': \n        return AccessResult::allowedIfHasPermission($account, 'edit product entities'); \n\n      case 'delete': \n        return AccessResult::allowedIfHasPermission($account, 'delete product entities'); \n    } \n\n    return AccessResult::neutral(); \n  } \n\n  /** \n   * {@inheritdoc} \n   */ \n  protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) { \n    return AccessResult::allowedIfHasPermission($account, 'add product entities'); \n  } \n} \n```", "```php\n/** \n * @var \\Drupal\\Core\\Entity\\EntityTypeManagerInterface \n */ \nprotected $entityTypeManager; \n\n/** \n * ProductAccessControlHandler constructor. \n * \n * @param \\Drupal\\Core\\Entity\\EntityTypeInterface $entity_type \n * @param \\Drupal\\Core\\Entity\\EntityTypeManager $entityTypeManager \n */ \npublic function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entityTypeManager) { \n  parent::__construct($entity_type); \n  $this->entityTypeManager = $entityTypeManager; \n} \n\n/** \n * {@inheritdoc} \n */ \npublic static function createInstance(ContainerInterface $container, EntityTypeInterface $entity_type) { \n  return new static( \n    $entity_type, \n    $container->get('entity_type.manager') \n  ); \n} \n```", "```php\nuse Drupal\\Core\\Entity\\EntityTypeInterface; \nuse Drupal\\Core\\Entity\\EntityTypeManagerInterface; \nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;  \n```", "```php\n/** \n * Implements hook_entity_create_access(). \n */ \nfunction my_module_entity_create_access(\\Drupal\\Core\\Session\\AccountInterface $account, array $context, $entity_bundle) { \n  // Perform access check and return an AccessResultInterface instance. \n}  \n```", "```php\nfunction  \nmy_module_entity_access(\\Drupal\\Core\\Entity\\EntityInterface $entity, $operation, \\Drupal\\Core\\Session\\AccountInterface $account)  \n{ \n  // Perform access check and return an AccessResultInterface instance. \n} \n```", "```php\n$access = $entity->access('view', $account);  \n```", "```php\nproducts.view_product: \n  path: '/our-products/{product}' \n  defaults: \n    _controller: '\\Drupal\\products\\Controller\\ProductsController::showProduct' \n  requirements: \n    _entity_access: 'product.view' \n  options: \n    parameters: \n      product: \n        type: 'entity:product' \n```", "```php\n$access = $entity->access('view', $account);  \n```", "```php\n/** \n * Returns the access grant ID for a given user type. \n * \n * @param $type \n * \n * @return int \n */ \nfunction user_types_grant_mapping($type) { \n  $map = [ \n    'employee' => 1, \n    'manager' => 2, \n    'board_member' => 3 \n  ]; \n\n  if (!isset($map[$type])) { \n    throw new InvalidArgumentException('Wrong user type provided'); \n  } \n\n  return $map[$type]; \n} \n```", "```php\n/** \n * Implements hook_node_access_records(). \n */ \nfunction user_types_node_access_records(\\Drupal\\node\\NodeInterface $node) { \n  $bundles = ['article', 'page']; \n  if (!in_array($node->bundle(), $bundles)) { \n    return []; \n  } \n\n  $map = [ \n    'article' => [ \n      'employee', \n      'manager', \n      'board_member', \n    ], \n    'page' => [ \n      'manager', \n      'board_member' \n    ] \n  ]; \n\n  $user_types = $map[$node->bundle()]; \n  $grants = []; \n\n  foreach ($user_types as $user_type) { \n    $grants[] = [ \n      'realm' => 'user_type', \n      'gid' => user_types_grant_mapping($user_type), \n      'grant_view' => 1, \n      'grant_update' => 0, \n      'grant_delete' => 0, \n    ]; \n  } \n\n  return $grants; \n} \n```", "```php\n/** \n * Implements hook_node_grants(). \n */ \nfunction user_types_node_grants(\\Drupal\\Core\\Session\\AccountInterface $account, $op) { \n  if ($account->isAnonymous()) { \n    return []; \n  } \n\n  if ($op !== 'view') { \n    return []; \n  } \n\n  $user = \\Drupal::entityTypeManager()->getStorage('user')->load($account->id()); \n  $user_type = $user->get('field_user_type')->value; \n  if (!$user_type) { \n    return []; \n  } \n\n  try { \n    $gid = user_types_grant_mapping($user_type); \n  } \n  catch (InvalidArgumentException $e) { \n    return []; \n  } \n\n  return ['user_type' => [$gid]]; \n} \n```", "```php\nif (!$node->isPublished()) { \n  unset($map['article'][0]); \n}\n```", "```php\n$bundles = ['article', 'page']; \nif (!in_array($node->bundle(), $bundles)) { \n  return []; \n} \n\n$view_map = [ \n  'article' => [ \n    'employee', \n    'manager', \n    'board_member', \n  ], \n  'page' => [ \n    'manager', \n    'board_member' \n  ] \n]; \n\nif (!$node->isPublished()) { \n  unset($view_map['article'][0]); \n} \n\n$manage_map = [ \n  'article' => [ \n    'manager', \n  ], \n  'page' => [ \n    'manager', \n  ] \n]; \n\n$user_types = $view_map[$node->bundle()]; \n$manage_user_types = $manage_map[$node->bundle()]; \n$grants = []; \n\nforeach ($user_types as $user_type) { \n  $grants[] = [ \n    'realm' => 'user_type', \n    'gid' => user_types_grant_mapping($user_type), \n    'grant_view' => 1, \n    'grant_update' => in_array($user_type, $manage_user_types) ? 1 : 0, \n    'grant_delete' => in_array($user_type, $manage_user_types) ? 1 : 0, \n  ]; \n} \n\nreturn $grants; \n```", "```php\nif ($op !== 'view') { \n  return []; \n}  \n```"]