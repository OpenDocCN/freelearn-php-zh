["```php\ncomposer require --dev drupal/core-dev:^10\n```", "```php\n    bootstrap=\"./web/core/tests/bootstrap.php\"\n    ```", "```php\n    <env name=\"SIMPLETEST_BASE_URL\"\n    ```", "```php\n        value=\"http://localhost\"/>\n    ```", "```php\n    <env name=\"SIMPLETEST_DB\" value=\"\n    ```", "```php\n        mysql://database:database@database/database\"/>\n    ```", "```php\n    <env name=\"BROWSERTEST_OUTPUT_DIRECTORY\" value=\"\"/>\n    ```", "```php\n    <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"weak\"/>\n    ```", "```php\n    <env name=\"MINK_DRIVER_ARGS_WEBDRIVER\" value=\"\n    ```", "```php\n         [\"chrome\", {\"browserName\":\"chrome\",\n    ```", "```php\n         \"chromeOptions\":{\"args\":[\"--disable-gpu\",\"--\n    ```", "```php\n         headless\"]}}, \"http://chrome:9515\"] \"/>\n    ```", "```php\n      <testsuites>\n    ```", "```php\n        <testsuite name=\"unit\">\n    ```", "```php\n          <directory>\n    ```", "```php\n            web/modules/custom/*/tests/src/Unit\n    ```", "```php\n          </directory>\n    ```", "```php\n        </testsuite>\n    ```", "```php\n        <testsuite name=\"kernel\">\n    ```", "```php\n          <directory>\n    ```", "```php\n            web/modules/custom/*/tests/src/Kernel\n    ```", "```php\n          </directory>\n    ```", "```php\n        </testsuite>\n    ```", "```php\n        <testsuite name=\"functional\">\n    ```", "```php\n          <directory>\n    ```", "```php\n            web/modules/custom/*/tests/src/Functional\n    ```", "```php\n          </directory>\n    ```", "```php\n        </testsuite>\n    ```", "```php\n        <testsuite name=\"functional-javascript\">\n    ```", "```php\n          <directory>\n    ```", "```php\n       web/modules/custom/*/tests/src/FunctionalJavascript\n    ```", "```php\n          </directory>\n    ```", "```php\n        </testsuite>\n    ```", "```php\n    </testsuites>\n    ```", "```php\n<testsuite name=\"unit\">\n   <directory>\n      web/modules/contrib/*/tests/src/Unit\n   </directory>\n   <directory>\n      web/modules/custom/*/tests/src/Unit\n   </directory>\n</testsuite>\n```", "```php\n  chrome:\n     type: compose\n     services:\n       image: drupalci/webdriver-chromedriver:production\n       command: chromedriver --log-path=/tmp/\n           chromedriver.log --verbose\n```", "```php\nphpunit\n```", "```php\nPHPUnit 9.5.26 by Sebastian Bergmann and contributors.\nNo tests executed!\n```", "```php\nphpunit --testsuite unit\n```", "```php\nphpunit --testsuite unit --filter FooBarTest\n```", "```php\n<?php\ndeclare(strict_types=1);\nnamespace Drupal\\chapter13;\n/**\n * Class CamelCase\n * @package Drupal\\chapter13\n */\nclass CamelCase {\n  /**\n   * Convert snake_case to camelCase.\n   *\n   * @param string $input\n   * @return string\n   */\n  public static function convert(string $input): string {\n    $input = strtolower($input);\n    return str_replace('_', '', lcfirst(ucwords\n        ($input, '_')));\n  }\n}\n```", "```php\n<?php\nnamespace Drupal\\Tests\\chapter13\\Unit;\nuse Drupal\\Tests\\UnitTestCase;\nuse Drupal\\chapter13\\CamelCase;\n/**\n * Class CamelCaseTest\n * @package Drupal\\Tests\\chapter13\\Unit\n */\nclass CamelCaseTest extends UnitTestCase {\n  /**\n   * Data provider for testToCamel().\n   *\n   * @return array\n   *   An array containing input values and expected output\n            values.\n   */\n  public function exampleStrings() {\n    return [\n      ['button_color', 'buttonColor'],\n      ['snake_case_example', 'snakeCaseExample'],\n      ['ALL_CAPS_LOCK', 'allCapsLock'],\n    ];\n  }\n  /**\n   * Tests the ::convert method.\n   *\n   * @param $input\n   *   The input values.\n   *\n   * @param bool $expected\n   *   The expected output.\n   *\n   * @param bool $separator\n   *   The string separator.\n   *\n   * @dataProvider exampleStrings()\n   */\n  public function testCamelCaseConversion($input,\n    $expected) {\n    $output = CamelCase::convert($input);\n    $this->assertEquals($expected, $output);\n  }\n}\n```", "```php\nphpunit --testsuite unit --filter CamelCaseTest\n```", "```php\nTesting\n...  3 / 3 (100%)\nTime: 00:00.044, Memory: 10.00 MB\nOK (3 tests, 3 assertions)\n```", "```php\ntestCamelCaseConversion(\"button_color\", \"buttonColor\")\n```", "```php\n  public function exampleStrings() {\n    return [\n      ['button_color', 'buttonColor'],\n      ['snake_case_example', 'snakeCaseExample'],\n      ['ALL_CAPS_LOCK', 'allCapsLock'],\n      ['foo-bar', 'fooBar'],\n    ];\n  }\n```", "```php\nTesting\n...F     4 / 4 (100%)\nTime: 00:00.046, Memory: 10.00 MB\nThere was 1 failure:\n1) Drupal\\Tests\\chapter13\\Unit\\CamelCaseTest::\n    testCamelCaseConversion with data set #3 ('foo-bar',\n        'fooBar')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'fooBar'\n+'foo-bar'\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1.\n```", "```php\n<?php\nnamespace Drupal\\Tests\\chapter13\\Kernel;\nuse Drupal\\Core\\Entity\\Entity\\EntityViewDisplay;\nuse Drupal\\field\\Entity\\FieldConfig;\nuse Drupal\\field\\Entity\\FieldStorageConfig;\nuse Drupal\\KernelTests\\KernelTestBase;\nuse Drupal\\Tests\\node\\Traits\\ContentTypeCreationTrait;\nuse Drupal\\Tests\\node\\Traits\\NodeCreationTrait;\n/**\n * Tests the formatting of string fields using the Camel\n        Case field formatter.\n *\n * @package Drupal\\Tests\\chapter13\\Kernel\n */\nclass CamelCaseFormatterTest extends KernelTestBase {\n  use NodeCreationTrait,\n    ContentTypeCreationTrait;\n  protected $strictConfigSchema = FALSE;\n  /**\n   * Modules to enable.\n   *\n   * @var array\n   */\n  protected static $modules = [\n    'field',\n    'text',\n    'node',\n    'system',\n    'filter',\n    'user',\n    'chapter13',\n  ];\n  /**\n   * {@inheritdoc}\n   */\n  protected function setUp(): void {\n    parent::setUp();\n    // Install required module schema and configs.\n    $this->installEntitySchema('node');\n    $this->installEntitySchema('user');\n    $this->installConfig(['field', 'node', 'filter',\n        'system']);\n    $this->installSchema('node', ['node_access']);\n    // Create a vanilla content type for testing.\n    $this->createContentType(\n      [\n        'type' => 'page'\n      ]\n    );\n    // Create and store the field_chapter13_test field.\n    FieldStorageConfig::create([\n      'field_name' => 'field_chapter13_test',\n      'entity_type' => 'node',\n      'type' => 'string',\n      'cardinality' => 1,\n      'locked' => FALSE,\n      'indexes' => [],\n      'settings' => [\n        'max_length' => 255,\n        'case_sensitive' => FALSE,\n        'is_ascii' => FALSE,\n      ],\n    ])->save();\n    FieldConfig::create([\n      'field_name' => 'field_chapter13_test',\n      'field_type' => 'string',\n      'entity_type' => 'node',\n      'label' => 'Chapter13 Camel Case Field',\n      'bundle' => 'page',\n      'description' => '',\n      'required' => FALSE,\n      'settings' => [\n        'link_to_entity' => FALSE\n      ],\n    ])->save();\n    // Set the entity display for testing to use our\n        camel_case formatter.\n    $entity_display = EntityViewDisplay::load\n         ('node.page.default');\n    $entity_display->setComponent('field_chapter13_test',\n    [\n      'type' => 'camel_case',\n      'region' => 'content',\n      'settings' => [],\n      'label' => 'hidden',\n      'third_party_settings' => []\n    ]);\n    $entity_display->save();\n  }\n  /**\n   * Tests that the field formatter camel_case formats the\n        value\n   * as expected.\n   */\n  public function testFieldIsFormatted() {\n    $node = $this->createNode(\n      [\n        'type' => 'page',\n        'field_chapter13_test' => 'A user entered string'\n      ]\n    );\n    $build = $node->field_chapter13_test->view('default');\n    $this->assertSame('aUserEnteredString',\n        $build[0]['#context']['value']);\n  }\n}\n```", "```php\n<?php\ndeclare(strict_types = 1);\nnamespace Drupal\\chapter13\\Plugin\\Field\\FieldFormatter;\nuse Drupal\\chapter13\\CamelCase;\nuse Drupal\\Core\\Field\\FieldItemInterface;\nuse Drupal\\Core\\Field\\FieldItemListInterface;\nuse Drupal\\Core\\Field\\Plugin\\Field\\FieldFormatter\\\n    StringFormatter;\n/**\n * Plugin implementation of the 'camel_case' field\n      formatter.\n *\n * @FieldFormatter(\n *   id = \"camel_case\",\n *   label = @Translation(\"Camel case\"),\n *   field_types = {\n *     \"string\"\n *   }\n * )\n */\nclass CamelCaseFormatter extends StringFormatter {\n  /**\n   * {@inheritdoc}\n   */\n  public function viewElements(FieldItemListInterface\n    $items, $langcode) : array {\n    $elements = [];\n    foreach ($items as $delta => $item) {\n      $view_value = $this->viewValue($item);\n      $elements[$delta] = $view_value;\n    }\n    return $elements;\n  }\n  /**\n   * {@inheritdoc}\n   */\n  protected function viewValue(FieldItemInterface $item) {\n    return [\n      '#type' => 'inline_template',\n      '#template' => '{{ value|nl2br }}',\n      '#context' => ['value' => CamelCase::convert($item\n          ->value)],\n    ];\n  }\n}\n```", "```php\nphpunit --testsuite kernel --filter CamelCaseFormatterTest\n```", "```php\nTesting\nF     1 / 1 (100%)\nTime: 00:01.500, Memory: 10.00 MB\nThere was 1 failure:\n1) Drupal\\Tests\\chapter13\\Kernel\\CamelCaseFormatterTest::\n    testFieldIsFormatted\nFailed asserting that two strings are identical.\n--- Expected\n+++ Actual\n@@ @@\n-'aUserEnteredString'\n+'a user entered string'\nFAILURES!\nTests: 1, Assertions: 9, Failures: 1.\n```", "```php\n  public static function convert(string $input): string {\n    $input = strtolower($input);\n    $input = preg_replace('/[, -]/', '_', $input);\n    return str_replace('_', '', lcfirst(ucwords\n        ($input, '_')));\n  }\n```", "```php\nTesting\n.       1 / 1 (100%)\nTime: 00:01.491, Memory: 10.00 MB\nOK (1 test, 9 assertions)\n```", "```php\n  public function exampleStrings() {\n    return [\n      ['button_color', 'buttonColor'],\n      ['snake_case_example', 'snakeCaseExample'],\n      ['ALL_CAPS_LOCK', 'allCapsLock'],\n      ['foo-bar', 'fooBar'],\n      ['This is a basic string', 'thisIsABasicString'],\n    ];\n  }\n```", "```php\nTesting\n......   6 / 6 (100%)\nTime: 00:01.419, Memory: 10.00 MB\nOK (6 tests, 14 assertions)\n```", "```php\n<?php\nnamespace Drupal\\Tests\\chapter13\\Functional;\nuse Drupal\\Core\\Entity\\Entity\\EntityViewDisplay;\nuse Drupal\\field\\Entity\\FieldConfig;\nuse Drupal\\field\\Entity\\FieldStorageConfig;\nuse Drupal\\Tests\\BrowserTestBase;\n/**\n * Class CamelCaseFormatterDisplayTest\n *\n * @package Drupal\\Tests\\chapter13\\Functional\n */\nclass CamelCaseFormatterDisplayTest extends\n    BrowserTestBase {\n  /**\n   * @var bool Disable schema checking.\n   */\n  protected $strictConfigSchema = FALSE;\n  /**\n   * @var string The theme to use during test.\n   */\n  protected $defaultTheme = 'stark';\n  /**\n   * Modules to enable.\n   *\n   * @var array\n   */\n  protected static $modules = [\n    'field',\n    'text',\n    'node',\n    'system',\n    'filter',\n    'user',\n    'chapter13',\n  ];\n  /**\n   * {@inheritdoc}\n   */\n  protected function setUp(): void {\n    parent::setUp();\n    // Create a vanilla content type for testing.\n    $this->createContentType(\n      [\n        'type' => 'page'\n      ]\n    );\n    // Create and store the field_chapter13_test field.\n    FieldStorageConfig::create([\n      'field_name' => 'field_chapter13_test',\n      'entity_type' => 'node',\n      'type' => 'string',\n      'cardinality' => 1,\n      'locked' => FALSE,\n      'indexes' => [],\n      'settings' => [\n        'max_length' => 255,\n        'case_sensitive' => FALSE,\n        'is_ascii' => FALSE,\n      ],\n    ])->save();\n    FieldConfig::create([\n      'field_name' => 'field_chapter13_test',\n      'field_type' => 'string',\n      'entity_type' => 'node',\n      'label' => 'Chapter13 Camel Case Field',\n      'bundle' => 'page',\n      'description' => '',\n      'required' => FALSE,\n      'settings' => [\n        'link_to_entity' => FALSE\n      ],\n    ])->save();\n    // Set the entity display for testing to use our\n        camel_case formatter.\n    $entity_display = EntityViewDisplay::load\n        ('node.page.default');\n    $entity_display->setComponent('field_chapter13_test',\n      [\n        'type' => 'camel_case',\n        'region' => 'content',\n        'settings' => [],\n        'label' => 'hidden',\n        'third_party_settings' => []\n      ]);\n    $entity_display->save();\n  }\n  /**\n   * Test that a site visitor can see a string formatted\n         with our custom\n   * field CamelCaseFieldFormatter.\n   *\n   * @return void\n   */\n  public function testUserCanSeeFormattedString() {\n    $this->drupalCreateNode(\n      [\n        'type' => 'page',\n        'field_chapter13_test' => 'A user entered string'\n      ]\n    );\n    $this->drupalGet('/node/1');\n    $this->getSession()->getPage()->hasContent\n        ('aUserEnteredString');\n  }\n}\n```", "```php\nphpunit --testsuite functional --filter\n  CamelCaseFormatterDisplayTest\n```", "```php\nTesting\n.           1 / 1 (100%)\nTime: 00:07.390, Memory: 10.00 MB\nOK (1 test, 3 assertions)\n```", "```php\nprotected $profile = 'standard';\nTesting\n.          1 / 1 (100%)\nTime: 00:18.441, Memory: 10.00 MB\nOK (1 test, 2 assertions)\n```", "```php\n  public function testUserCanSeeFormattedString() {\n    $this->drupalCreateNode(\n      [\n        'type' => 'page',\n        'field_chapter13_test' => 'A user entered string'\n      ]\n    );\n    $this->drupalGet('/node/1');\n    $this->assertSession()->assertWaitOnAjaxRequest();\n    $this->assertSession()->\n        pageTextContains('aUserEnteredString');\n  }\n```", "```php\nTesting\n.          1 / 1 (100%)\nTime: 00:19.721, Memory: 10.00 MB\nOK (1 test, 2 assertions)\n```", "```php\nyarn test:nightwatch (args)\n```", "```php\nyarn test:nightwatch mymodule/tests/src/Nightwatch/Tests/\n  exampleTest.js\n```", "```php\nmodule.exports = (inputText) => {\n  let text = inputText.toLowerCase();\n  text = text.replace(/[, -]/g, '_');\n  let extractedText = text.split('_').map(function(word,\n    index) {\n    if (index !== 0) {\n      return word.charAt(0).toUpperCase() +\n         word.slice(1).toLowerCase();\n    } else {\n      text = word;\n    }\n  }).join('');\n  text = text.toLowerCase() + extractedText;\n  return text.replace('_', '');\n}\n```", "```php\nconst assert = require('assert');\nconst camelCase = require('../../../js/camelCase');\nconst dataProvider = [\n  {input: 'button_color', expected: 'buttonColor'},\n  {input: 'snake_case_example', expected:\n    'snakeCaseExample'},\n  {input: 'ALL_CAPS_LOCK', expected: 'allCapsLock'},\n  {input: 'foo-bar', expected: 'fooBar'},\n];\nmodule.exports = {\n  '@tags': ['chapter13'],\n  '@unitTest' : true,\n  'Strings are converted to camelCase' : function (done) {\n    dataProvider.forEach(function (values) {\n      assert.strictEqual(camelCase(values.input),\n          values.expected);\n    });\n    setTimeout(function() {\n      done();\n    }, 10);\n  }\n};\n```", "```php\nyarn test:nightwatch chapter13/tests/src/Nightwatch/Tests/\n  CamelCaseTest.js\n```", "```php\nyarn test:nightwatch ../modules/custom/chapter13/tests/src/\n  Nightwatch/CamelCaseTest.js\nyarn run v1.22.19\n[Nightwatch/CamelCaseTest]\n✔ Strings are converted to camelCase\nDone in 3.77s.\n```"]