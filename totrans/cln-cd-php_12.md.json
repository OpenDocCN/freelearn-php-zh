["```php\n// Redundant DocBlock\n/**\n * @param int $property\n * @return void \n */\npublic function setProperty(int $property): void { \n    // ... \n}\n```", "```php\n// Useless DocBlock\n/**\n * @param $property\n */\npublic function setProperty(int $property): void { \n    // ... \n}\n// Wrong DocBlock\n/**\n * @param string $property\n */\npublic function setProperty(int $property): void { \n    // ... \n}\n```", "```php\n// Useful DocBlock\n/**\n * @return string[]\n */\npublic function getList(): array { \n    return [\n       ‘foo’,\n       ‘bar’,\n    ]; \n}\n/**\n * @deprecated use function fooBar() instead\n */\npublic function foo(): bool { \n    // ... \n}\n```", "```php\n// Example for short statement\n$isFoo ? ‘foo’ : ‘bar’;\n// Usual notation\n$isLongerVariable\n    ? ‘longerFoo’\n    : ‘longerBar’;\n```", "```php\n// Example for nested operators\n$number > 0 ? ‘Positive’ : ($number < 0 ? ‘Negative’ :\n‘Zero’);\n```", "```php\n// Before PHP 8+\nclass ExampleDTO\n{\n    public string $name;\n    public function __construct(\n        string $name\n    ) {\n        $this->name = $name;\n    }\n}\n// Since PHP 8+\nclass ExampleDTO\n{\n    public function __construct(\n        public string $name, \n    ) {}\n}\n```", "```php\n// Old notation\n$myArray = array(\n    ‘first entry’,\n    ‘second entry’\n);\n// Short array notation\n$myArray = [\n    ‘first entry’,\n    ‘second entry’,\n];\n```", "```php\n// Bad\nif ($statement === true)\n    do_something();\n// Good\nif ($statement === true) {\n    do_something();\n}\n```", "```php\n// Bad\nif ($statement) {\n    // Statement was successful\n    return;\n} else {\n    // Statement was not successful\n    return;\n}\n// Good\nif (!$statement) {\n    // Statement was not successful\n    return;\n}\n// Statement was successful\nreturn;\n```", "```php\n// Bad\ntry {\n    $this->someUnstableCode();\n} catch (Exception $exception) {}\n// Good\ntry {\n    someUnstableCode();\n} catch (Exception $exception) {\n    $this->logError($exception->getMessage());\n}\n```", "```php\n# Definition of Done\n## Reviewer \n[ ] Code changes reviewed\n    1\\. Coding Guidelines kept\n    2\\. Functionality considered\n    3\\. Code is well-designed\n    4\\. Readability and Complexity considered\n    5\\. No Security issues found\n    6\\. Coding standard and guidelines kept\n[ ] Change tested manually\n## Developer \n[ ] Acceptance Criteria met\n[ ] Automated Tests written or updated\n[ ] Documentation written or updated\n```", "```php\nabstract class AbstractWriter\n{\n    public function write(array $data): void\n    {\n        $encoder = $this->createEncoder();\n        // Apply some filtering which should always happen, \n        // regardless of the output format.\n        array_walk(\n            $data,\n            function (&$value) {\n                $value = str_replace(‘data’, ‘’, $value);\n            }\n        );\n        // For demonstration purposes, we echo the result\n        // here, instead of writing it into a file\n        echo $encoder->encode($data);\n    }\n    abstract protected function createEncoder(): Encoder;\n}\n```", "```php\ninterface Encoder\n{\n    public function encode(array $data): string;\n}\n```", "```php\nclass JsonEncoder implements Encoder\n{\n    public function encode(array $data): string\n    {\n        // the actual encoding happens here\n        // ...\n        return $encodedString;\n    }\n}\n```", "```php\nclass CsvEncoder implements Encoder\n{\n    public function encode(array $data): string\n    {\n        // the actual encoding happens here\n        // ...\n        return $encodedString;\n    }\n}\n```", "```php\nclass CsvWriter extends AbstractWriter\n{\n    public function createEncoder(): Encoder\n    {\n        $encoder = new CsvEncoder();\n        // here, more configuration work would take place\n        // e.g. setting the delimiter\n        return $encoder;\n    }\n}\n```", "```php\nclass JsonWriter extends AbstractWriter\n{\n    public function createEncoder(): Encoder\n    {\n        return new JsonEncoder();\n    }\n}\n```", "```php\nfunction factoryMethodExample(AbstractWriter $writer)\n{\n    $exampleData = [\n        ‘set1’ => [‘data1’, ‘data2’],\n        ‘set2’ => [‘data3’, ‘data4’],\n    ];\n    $writer->write($exampleData);\n}\necho \"Output using the CsvWriter: \";\nfactoryMethodExample(new CsvWriter());\necho \"Output using the JsonWriter: \";\nfactoryMethodExample(new JsonWriter());\n```", "```php\nOutput using the CsvWriter:\n3,4\n1,2\n\nOutput using the JsonWriter:\n[[\"3\",\"4\"],[\"1\",\"2\"]]\n```", "```php\nclass InstantiationExample\n{\n    private Logger $logger;\n    public function __construct()\n    {\n        $this->logger = new FileLogger();\n    }\n}\n```", "```php\nclass ConstructorInjection\n{\n    private Logger $logger;\n    public function __construct(Logger $logger)\n    {\n        $this->logger = $logger;\n    }\n}\n```", "```php\n$constructorInjection = new ConstructorInjection(\n     new FileLogger()\n);\n```", "```php\nclass SetterInjection\n{\n    private Logger $logger;\n    public function __construct()\n    {\n        // ....\n    }\n    public function setLogger(Logger $logger): void\n    {\n        $this->logger = $logger;\n    }\n}\n```", "```php\nclass SetterInjectionFactory\n{\n    public function createInstance(): SetterInjection\n    {\n        $setterInjection = new SetterInjection();\n        $setterInjection->setLogger(new FileLogger());\n        return $setterInjection;\n    }\n}\n```", "```php\nclass CustomerAccount\n{\n    public function __construct(\n        private MailService $mailService\n    ) {}\n    public function cancelSubscription(): void\n    {\n        // Required code for the actual cancellation\n        // ...\n        $this->mailService->sendEmail(\n            ‘sales@example.com’,\n            ‘Account xy has cancelled the subscription’\n        );\n    }\n}\n```", "```php\nuse SplSubject;\nuse SplObjectStorage;\nuse SplObserver;\nclass CustomerAccount implements SplSubject\n{\n    private SplObjectStorage $observers;\n    public function __construct()\n    {\n        $this->observers = new SplObjectStorage();\n    }\n    public function attach(SplObserver $observer): void\n    {\n        $this->observers->attach($observer);\n    }\n    public function detach(SplObserver $observer): void\n    {\n        $this->observers->detach($observer);\n    }\n    public function notify(): void\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n        }\n    }\n    public function cancelSubscription(): void\n    {\n        // Required code for the actual cancellation\n        // ...\n        $this->notify();\n    }\n}\n```", "```php\nclass CustomerAccountObserver implements SplObserver\n{\n    public function __construct(\n        private MailService $mailService\n    ) {}\n    public function update(CustomerAccount|SplSubject\n      $splSubject): void\n    {\n        $this->mailService->sendEmail(\n            ‘sales@example.com’,\n            ‘Account ‘ . $splSubject->id . ‘ has cancelled\n              the subscription’\n        );\n    }\n}\n```", "```php\n$mailService = new MailService();\n$observer = new CustomerAccountObserver($mailService);\n$customerAccount = new CustomerAccount();\n$customerAccount->attach($observer);\n```", "```php\n$instance = Singleton::getInstance();\n```", "```php\nclass Singleton\n{\n    private static ?Singleton $instance = null;\n    public static function getInstance(): Singleton\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n}\n```", "```php\nclass ServiceLocatorExample\n{\n    public function __construct(\n        private ServiceLocator $serviceLocator\n    ) {}\n    public function fooBar(): void\n    {\n        $someService = $this->serviceLocator\n          ->get(SomeService::class);\n        $someService->doSomething();\n    }\n}\n```"]